[
    {
        "description": "Write a python function to identify non-prime numbers.",
        "task_name": "Mbpp/3",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "import math\n\ndef is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n# Test cases\nassert is_not_prime(1) == True\nassert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True\nassert is_not_prime(37) == False\n",
        "correct": true,
        "task_id": "2",
        "depth": 1,
        "functions": 1,
        "unique_id": "2_gpt-4o"
    },
    {
        "description": "Write a python function to count true booleans in the given list.",
        "task_name": "Mbpp/105",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def count(bool_list):\n    return sum(bool_list)\n\n# Test cases\nassert count([True, False, True]) == 2\nassert count([False, False]) == 0\nassert count([True, True, True]) == 3\n",
        "correct": true,
        "task_id": "58",
        "depth": 0,
        "functions": 1,
        "unique_id": "58_gpt-4o"
    },
    {
        "description": "Write a python function to convert complex numbers to polar coordinates.",
        "task_name": "Mbpp/252",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "import cmath\n\ndef convert(num):\n    return cmath.polar(complex(num))\n\n# Test cases\nassert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0, 0.0)\nassert convert(5) == (5.0, 0.0)\n",
        "correct": true,
        "task_id": "116",
        "depth": 0,
        "functions": 1,
        "unique_id": "116_gpt-4o"
    },
    {
        "description": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "task_name": "Mbpp/261",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def division_elements(tup1, tup2):\n    # Perform element-wise division\n    result = tuple(a // b for a, b in zip(tup1, tup2))\n    return result\n\n# Test cases\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n",
        "correct": false,
        "task_id": "122",
        "depth": 0,
        "functions": 1,
        "unique_id": "122_gpt-4o"
    },
    {
        "description": "Write a function to find the depth of a dictionary.",
        "task_name": "Mbpp/301",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 1\n    else:\n        return 1 + max(dict_depth(value) for value in d.values())\n\n# Test cases\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}}) == 4\nassert dict_depth({'a':1, 'b': {'c':'python'}}) == 2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}}) == 3\n",
        "correct": false,
        "task_id": "154",
        "depth": 0,
        "functions": 1,
        "unique_id": "154_gpt-4o"
    },
    {
        "description": "Write a python function to find the average of cubes of first n natural numbers.",
        "task_name": "Mbpp/422",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def find_Average_Of_Cube(n):\n    # Generate the first n natural numbers\n    natural_numbers = range(1, n + 1)\n    # Compute the cubes of these numbers\n    cubes = [x ** 3 for x in natural_numbers]\n    # Calculate the sum of the cubes\n    sum_of_cubes = sum(cubes)\n    # Calculate the average\n    average = sum_of_cubes / n\n    return average\n\n# Test cases to validate the solution\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1\n",
        "correct": true,
        "task_id": "181",
        "depth": 0,
        "functions": 1,
        "unique_id": "181_gpt-4o"
    },
    {
        "description": "Write a function to find the median length of a trapezium.",
        "task_name": "Mbpp/432",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def median_trapezium(a, b, _):\n    return (a + b) / 2\n\n# Testing the function with provided test cases\nassert median_trapezium(15, 25, 35) == 20\nassert median_trapezium(10, 20, 30) == 15\nassert median_trapezium(6, 9, 4) == 7.5\n",
        "correct": true,
        "task_id": "188",
        "depth": 0,
        "functions": 1,
        "unique_id": "188_gpt-4o"
    },
    {
        "description": "Write a function to calculate the sum of perrin numbers.",
        "task_name": "Mbpp/448",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def cal_sum(n):\n    if n < 0:\n        return 0\n    \n    perrin = [3, 0, 2]\n    \n    for i in range(3, n+1):\n        perrin.append(perrin[i-2] + perrin[i-3])\n        \n    return sum(perrin)\n\n# Test cases\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88\n",
        "correct": false,
        "task_id": "199",
        "depth": 1,
        "functions": 1,
        "unique_id": "199_gpt-4o"
    },
    {
        "description": "Write a function to find the maximum product formed by multiplying numbers of an increasing sublist of that array.",
        "task_name": "Mbpp/468",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize a list to store the maximum product up to each element\n    max_products = [0] * n\n    max_products[0] = arr[0]\n\n    for i in range(1, n):\n        max_products[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_products[i] = max(max_products[i], max_products[j] * arr[i])\n\n    # Return the maximum product found\n    return max(max_products)\n\n# Test cases\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([4, 42, 55, 68, 80]) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460\n",
        "correct": false,
        "task_id": "213",
        "depth": 2,
        "functions": 1,
        "unique_id": "213_gpt-4o"
    },
    {
        "description": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "task_name": "Mbpp/555",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes_n = sum_n ** 2\n    \n    # Calculate the difference\n    return sum_cubes_n - sum_n\n\n# Tests\nassert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6\n",
        "correct": true,
        "task_id": "225",
        "depth": 0,
        "functions": 1,
        "unique_id": "225_gpt-4o"
    },
    {
        "description": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "task_name": "Mbpp/638",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def wind_chill(velocity, temperature):\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (velocity ** 0.16) + 0.3965 * temperature * (velocity ** 0.16)\n    return round(wind_chill_index)\n\n# Test cases\nassert wind_chill(120, 35) == 40\nassert wind_chill(40, 20) == 19\nassert wind_chill(10, 8) == 6\n",
        "correct": true,
        "task_id": "287",
        "depth": 0,
        "functions": 1,
        "unique_id": "287_gpt-4o"
    },
    {
        "description": "Write a python function to get the difference between two lists.",
        "task_name": "Mbpp/769",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def Diff(list1, list2):\n    # Convert lists to sets and find their symmetric difference\n    set1 = set(list1)\n    set2 = set(list2)\n    diff_elements = set1.symmetric_difference(set2)\n    \n    # Convert the set back to a list and sort it to ensure the order matches the expected results\n    result_list = list(diff_elements)\n    result_list.sort(key=lambda x: (list1 + list2).index(x))\n    \n    return result_list\n\n# Test cases\nassert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]\nassert Diff([1,2,3,4,5], [6,7,1]) == [2,3,4,5,6,7]\nassert Diff([1,2,3], [6,7,1]) == [2,3,6,7]\n",
        "correct": true,
        "task_id": "331",
        "depth": 0,
        "functions": 1,
        "unique_id": "331_gpt-4o"
    },
    {
        "description": "Write a function to find the product of first even and odd number of a given list.",
        "task_name": "Mbpp/784",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def mul_even_odd(lst):\n    first_odd = None\n    first_even = None\n    \n    for num in lst:\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is not None and first_even is not None:\n            break\n    \n    return first_odd * first_even\n\n# Test cases\nassert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\nassert mul_even_odd([1, 5, 7, 9, 10]) == 10\n",
        "correct": true,
        "task_id": "342",
        "depth": 1,
        "functions": 1,
        "unique_id": "342_gpt-4o"
    },
    {
        "description": "Write a python function to identify non-prime numbers.",
        "task_name": "Mbpp/3",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "import math\ndef is_not_prime(n):\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
        "correct": true,
        "task_id": "2",
        "depth": 1,
        "functions": 1,
        "unique_id": "2_llama3point1-70b"
    },
    {
        "description": "Write a python function to remove first and last occurrence of a given character from the string.",
        "task_name": "Mbpp/11",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def remove_Occ(s, char):\n    first_occurrence = s.find(char)\n    last_occurrence = s.rfind(char)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        if first_occurrence == last_occurrence:\n            return s.replace(char, '', 1)\n        else:\n            return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    else:\n        return s\n",
        "correct": true,
        "task_id": "8",
        "depth": 0,
        "functions": 1,
        "unique_id": "8_llama3point1-70b"
    },
    {
        "description": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "task_name": "Mbpp/123",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def sum_of_divisors(n):\n    divisors_sum = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i != n:\n                divisors_sum += i + n // i\n            else:\n                divisors_sum += i\n    return divisors_sum - n\n\ndef amicable_numbers_sum(n):\n    amicable_sum = 0\n    for num in range(1, n + 1):\n        if sum_of_divisors(num) < n:\n            if sum_of_divisors(sum_of_divisors(num)) == num and num != sum_of_divisors(num):\n                amicable_sum += num\n    return amicable_sum\n",
        "correct": true,
        "task_id": "67",
        "depth": 1,
        "functions": 2,
        "unique_id": "67_llama3point1-70b"
    },
    {
        "description": "Write a function to sort a list of elements.",
        "task_name": "Mbpp/141",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def pancake_sort(arr):\n    n = len(arr)\n    for size in range(n, 0, -1):\n        max_index = arr.index(max(arr[:size]))\n        if max_index != size-1:\n            if max_index != 0:\n                arr[:max_index+1] = arr[:max_index+1][::-1]\n            arr[:size] = arr[:size][::-1]\n    return arr\n",
        "correct": true,
        "task_id": "83",
        "depth": 1,
        "functions": 1,
        "unique_id": "83_llama3point1-70b"
    },
    {
        "description": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "task_name": "Mbpp/260",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"Find the nth Newman-Shanks-Williams prime number.\"\"\"\n    if n == 1:\n        return 7  # The first NSW prime is 7\n    \n    # Initialize the count of NSW primes and the current number\n    count = 1\n    num = 7\n    \n    while True:\n        # Check if the current number is a prime number\n        if is_prime(num):\n            # Check if the current prime number is congruent to 1 or 5 modulo 6\n            if num % 6 in [1, 5]:\n                # Increment the count of NSW primes\n                count += 1\n                \n                # If we have found the nth NSW prime, return it\n                if count == n:\n                    return num\n        \n        # Move on to the next number\n        num += 1\n",
        "correct": false,
        "task_id": "121",
        "depth": 1,
        "functions": 2,
        "unique_id": "121_llama3point1-70b"
    },
    {
        "description": "Write a python function to check whether a list is sublist of another or not.",
        "task_name": "Mbpp/576",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def is_Sub_Array(main_list, sub_list):\n    return ''.join(map(str, sub_list)) in ''.join(map(str, main_list))\n",
        "correct": false,
        "task_id": "241",
        "depth": 0,
        "functions": 1,
        "unique_id": "241_llama3point1-70b"
    },
    {
        "description": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
        "task_name": "Mbpp/614",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def cummulative_sum(tuples):\n    return sum(sum(t) for t in tuples)\n",
        "correct": true,
        "task_id": "270",
        "depth": 0,
        "functions": 1,
        "unique_id": "270_llama3point1-70b"
    },
    {
        "description": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "task_name": "Mbpp/631",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def replace_spaces(s: str) -> str:\n    s = s.replace(' ', '_')\n    s = s.replace('_', ' ')\n    s = s.replace(' ', '_')\n    return s\n",
        "correct": false,
        "task_id": "282",
        "depth": 0,
        "functions": 1,
        "unique_id": "282_llama3point1-70b"
    },
    {
        "description": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "task_name": "Mbpp/733",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def find_first_occurrence(arr, num):\n    for i, x in enumerate(arr):\n        if x == num:\n            return i\n    return -1  # return -1 if num is not found in the array\n",
        "correct": true,
        "task_id": "302",
        "depth": 1,
        "functions": 1,
        "unique_id": "302_llama3point1-70b"
    },
    {
        "description": "Write a function to sort a given list of strings of numbers numerically.",
        "task_name": "Mbpp/749",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def sort_numeric_strings(num_strings):\n  return sorted([int(num) for num in num_strings])\n",
        "correct": true,
        "task_id": "314",
        "depth": 0,
        "functions": 1,
        "unique_id": "314_llama3point1-70b"
    },
    {
        "description": "Write a function to find the product of first even and odd number of a given list.",
        "task_name": "Mbpp/784",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def mul_even_odd(nums):\n    even = next((num for num in nums if num % 2 == 0), None)\n    odd = next((num for num in nums if num % 2 != 0), None)\n    return even * odd\n",
        "correct": true,
        "task_id": "342",
        "depth": 0,
        "functions": 1,
        "unique_id": "342_llama3point1-70b"
    }
]