[
    {
        "description": "You are given q queries in the following form:\n\nGiven three integers l_i, r_i and d_i, find minimum positive integer x_i such that it is divisible by d_i and it does not belong to the segment [l_i, r_i].\n\nCan you answer all the queries?\n\nRecall that a number x belongs to segment [l, r] if l \u2264 x \u2264 r.\n\nInput\n\nThe first line contains one integer q (1 \u2264 q \u2264 500) \u2014 the number of queries.\n\nThen q lines follow, each containing a query given in the format l_i r_i d_i (1 \u2264 l_i \u2264 r_i \u2264 10^9, 1 \u2264 d_i \u2264 10^9). l_i, r_i and d_i are integers.\n\nOutput\n\nFor each query print one integer: the answer to this query.\n\nExample\n\nInput\n\n\n5\n2 4 2\n5 10 4\n3 10 1\n1 2 3\n4 6 5\n\n\nOutput\n\n\n6\n4\n1\n3\n10",
        "task_name": "1101_A. Minimum Integer",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "q = int(raw_input())\nfor i in range(q):\n    l,r,d = raw_input().split(' ')\n    l = int(l)\n    r = int(r)\n    d = int(d)\n    if d < l or d > r:\n        print(d)\n    else:\n        ost = r // d\n        print(d*(ost+1))",
        "correct": true,
        "task_id": "0002",
        "depth": 1
    },
    {
        "description": "Note that this is the first problem of the two similar problems. You can hack this problem only if you solve both problems.\n\nYou are given a tree with n nodes. In the beginning, 0 is written on all edges. In one operation, you can choose any 2 distinct leaves u, v and any real number x and add x to values written on all edges on the simple path between u and v.\n\nFor example, on the picture below you can see the result of applying two operations to the graph: adding 2 on the path from 7 to 6, and then adding -0.5 on the path from 4 to 5. \n\n<image>\n\nIs it true that for any configuration of real numbers written on edges, we can achieve it with a finite number of operations?\n\nLeaf is a node of a tree of degree 1. Simple path is a path that doesn't contain any node twice.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^5) \u2014 the number of nodes.\n\nEach of the next n-1 lines contains two integers u and v (1 \u2264 u, v \u2264 n, u \u2260 v), meaning that there is an edge between nodes u and v. It is guaranteed that these edges form a tree.\n\nOutput\n\nIf there is a configuration of real numbers written on edges of the tree that we can't achieve by performing the operations, output \"NO\". \n\nOtherwise, output \"YES\". \n\nYou can print each letter in any case (upper or lower).\n\nExamples\n\nInput\n\n\n2\n1 2\n\n\nOutput\n\n\nYES\n\nInput\n\n\n3\n1 2\n2 3\n\n\nOutput\n\n\nNO\n\nInput\n\n\n5\n1 2\n1 3\n1 4\n2 5\n\n\nOutput\n\n\nNO\n\nInput\n\n\n6\n1 2\n1 3\n1 4\n2 5\n2 6\n\n\nOutput\n\n\nYES\n\nNote\n\nIn the first example, we can add any real x to the value written on the only edge (1, 2).\n\n<image>\n\nIn the second example, one of configurations that we can't reach is 0 written on (1, 2) and 1 written on (2, 3).\n\n<image>\n\nBelow you can see graphs from examples 3, 4:\n\n<image> <image>",
        "task_name": "1189_D1. Add on a Tree",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division\nfrom sys import stdin, stdout\n# from fractions import gcd\n# from math import *\n# from operator import mul\n# from functools import reduce\n# from copy import copy\nfrom collections import deque, defaultdict, Counter\n\nrstr = lambda: stdin.readline().strip()\nrstrs = lambda: [str(x) for x in stdin.readline().split()]\nrint = lambda: int(stdin.readline())\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrstr_2d = lambda n: [rstr() for _ in range(n)]\nrint_2d = lambda n: [rint() for _ in range(n)]\nrints_2d = lambda n: [rints() for _ in range(n)]\npr = lambda args, sep: stdout.write(sep.join(map(str, args)) + '\\n')\nout = []\n\n\nclass graph:\n    # initialize graph\n    def __init__(self, gdict=None):\n        if gdict is None:\n            gdict = defaultdict(list)\n        self.gdict, self.edges, self.l = gdict, defaultdict(int), defaultdict(int)\n\n    # add edge\n    def addEdge(self, node1, node2, w=None):\n        self.gdict[node1].append(node2)\n        self.gdict[node2].append(node1)\n        self.l[node1] += 1\n        self.l[node2] += 1\n\n\nn = int(input())\ng = graph()\nfor _ in range(n - 1):\n    u, v = rints()\n    g.addEdge(u, v)\n\nfor i in range(1, n + 1):\n    if g.l[i] != 1 and g.l[i] < 3:\n        print('NO')\n        exit()\n\nprint('YES')\n",
        "correct": true,
        "task_id": "0003",
        "depth": 1
    },
    {
        "description": "An array of integers p_{1},p_{2}, \u2026,p_{n} is called a permutation if it contains each number from 1 to n exactly once. For example, the following arrays are permutations: [3,1,2], [1], [1,2,3,4,5] and [4,3,1,2]. The following arrays are not permutations: [2], [1,1], [2,3,4].\n\nThere is a hidden permutation of length n.\n\nFor each index i, you are given s_{i}, which equals to the sum of all p_{j} such that j < i and p_{j} < p_{i}. In other words, s_i is the sum of elements before the i-th element that are smaller than the i-th element.\n\nYour task is to restore the permutation.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{5}) \u2014 the size of the permutation.\n\nThe second line contains n integers s_{1}, s_{2}, \u2026, s_{n} (0 \u2264 s_{i} \u2264 (n(n-1))/(2)).\n\nIt is guaranteed that the array s corresponds to a valid permutation of length n.\n\nOutput\n\nPrint n integers p_{1}, p_{2}, \u2026, p_{n} \u2014 the elements of the restored permutation. We can show that the answer is always unique.\n\nExamples\n\nInput\n\n\n3\n0 0 0\n\n\nOutput\n\n\n3 2 1\n\n\nInput\n\n\n2\n0 1\n\n\nOutput\n\n\n1 2\n\n\nInput\n\n\n5\n0 1 1 1 10\n\n\nOutput\n\n\n1 4 3 2 5\n\nNote\n\nIn the first example for each i there is no index j satisfying both conditions, hence s_i are always 0.\n\nIn the second example for i = 2 it happens that j = 1 satisfies the conditions, so s_2 = p_1.\n\nIn the third example for i = 2, 3, 4 only j = 1 satisfies the conditions, so s_2 = s_3 = s_4 = 1. For i = 5 all j = 1, 2, 3, 4 are possible, so s_5 = p_1 + p_2 + p_3 + p_4 = 10.",
        "task_name": "1208_D. Restore Permutation",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nfrom collections import Counter, defaultdict\nfrom itertools import permutations, combinations\nraw_input = stdin.readline\npr = stdout.write\nmod=10**9+7\n\ndef ni():\n    return int(raw_input())\n\n\ndef li():\n    return map(int,raw_input().split())\n\n\ndef pn(n):\n    stdout.write(str(n)+'\\n')\n\n\ndef pa(arr):\n    pr(' '.join(map(str,arr))+'\\n')\n\n# fast read function for total integer input\n\ndef inp():\n    # this function returns whole input of\n    # space/line seperated integers\n    # Use Ctrl+D to flush stdin.\n    return map(int,stdin.read().split())\n\nrange = xrange # not for python 3.0+\n\n#main code\n\nn=ni()\nBITTree=[0]*(n+1)\ndef gs(i): \n    s = 0\n    i = i+1\n    while i > 0:  \n        s += BITTree[i] \n        i -= i & (-i) \n    return s \ndef ub(i ,v): \n    i += 1\n    while i <= n: \n        BITTree[i] += v \n        i += i & (-i) \ndef fun(x):\n    ret=0\n    sm=0\n    for i in range(21,-1,-1):\n        pw=1<<i\n        if ret+pw<=n and sm+BITTree[ret+pw]<=x:\n            ret+=pw\n            sm+=BITTree[ret]\n    return ret\nl=li()\nfor i in range(n):\n    ub(i,i)\nans=[0]*n\nfor i in range(n-1,-1,-1):\n    ans[i]=fun(l[i])\n    ub(ans[i],-ans[i])\npa(ans)\n\n    \n",
        "correct": true,
        "task_id": "0004",
        "depth": 1
    },
    {
        "description": "There are n points on a coordinate axis OX. The i-th point is located at the integer point x_i and has a speed v_i. It is guaranteed that no two points occupy the same coordinate. All n points move with the constant speed, the coordinate of the i-th point at the moment t (t can be non-integer) is calculated as x_i + t \u22c5 v_i.\n\nConsider two points i and j. Let d(i, j) be the minimum possible distance between these two points over any possible moments of time (even non-integer). It means that if two points i and j coincide at some moment, the value d(i, j) will be 0.\n\nYour task is to calculate the value \u2211_{1 \u2264 i < j \u2264 n} d(i, j) (the sum of minimum distances over all pairs of points).\n\nInput\n\nThe first line of the input contains one integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of points.\n\nThe second line of the input contains n integers x_1, x_2, ..., x_n (1 \u2264 x_i \u2264 10^8), where x_i is the initial coordinate of the i-th point. It is guaranteed that all x_i are distinct.\n\nThe third line of the input contains n integers v_1, v_2, ..., v_n (-10^8 \u2264 v_i \u2264 10^8), where v_i is the speed of the i-th point.\n\nOutput\n\nPrint one integer \u2014 the value \u2211_{1 \u2264 i < j \u2264 n} d(i, j) (the sum of minimum distances over all pairs of points).\n\nExamples\n\nInput\n\n\n3\n1 3 2\n-100 2 3\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n5\n2 1 4 3 5\n2 2 2 3 4\n\n\nOutput\n\n\n19\n\n\nInput\n\n\n2\n2 1\n-3 0\n\n\nOutput\n\n\n0",
        "task_name": "1311_F. Moving Points",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom collections import *\n\n\ndef fast2():\n    import os, sys, atexit\n    from cStringIO import StringIO as BytesIO\n    # range = xrange\n    sys.stdout = BytesIO()\n    atexit.register(lambda: os.write(1, sys.stdout.getvalue()))\n    return BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\n\nclass order_tree:\n    def __init__(self, arr):\n        self.n = len(arr)\n        self.tree = [[0, 0] for _ in range(self.n * 2)]\n        self.order = defaultdict(int, {arr[i]: i for i in range(self.n)})\n\n    # get interval[l,r)\n    def query(self, l):\n        res, coun = 0, 0\n        l = self.order[l] + self.n\n        r = self.n * 2\n\n        while l < r:\n            if l & 1:\n                res += self.tree[l][0]\n                coun += self.tree[l][1]\n                l += 1\n\n            if r & 1:\n                r -= 1\n                res += self.tree[r][0]\n                coun += self.tree[r][1]\n\n            l >>= 1\n            r >>= 1\n\n        return res, coun\n\n    def update(self, ix, val):\n        ix = self.n + self.order[ix]\n\n        # set new value\n        self.tree[ix][0] += val\n        self.tree[ix][1] += 1\n\n        # move up\n        while ix > 1:\n            self.tree[ix >> 1][0] = self.tree[ix][0] + self.tree[ix ^ 1][0]\n            self.tree[ix >> 1][1] = self.tree[ix][1] + self.tree[ix ^ 1][1]\n            ix >>= 1\n\n\ninput = fast2()\nrints = lambda: [int(x) for x in input().split()]\nn, a = int(input()), sorted(map(lambda x, y: [x, y], rints(), rints()))\ndis = sorted(set([x[1] for x in a]))\ntree, ans = order_tree(dis), 0\n\nfor i in range(n - 1, -1, -1):\n    su, coun = tree.query(a[i][1])\n    ans += su - coun * a[i][0]\n    tree.update(a[i][1], a[i][0])\n\nprint(ans)\n",
        "correct": true,
        "task_id": "0005",
        "depth": 1
    },
    {
        "description": "You are given a complete directed graph K_n with n vertices: each pair of vertices u \u2260 v in K_n have both directed edges (u, v) and (v, u); there are no self-loops.\n\nYou should find such a cycle in K_n that visits every directed edge exactly once (allowing for revisiting vertices).\n\nWe can write such cycle as a list of n(n - 1) + 1 vertices v_1, v_2, v_3, ..., v_{n(n - 1) - 1}, v_{n(n - 1)}, v_{n(n - 1) + 1} = v_1 \u2014 a visiting order, where each (v_i, v_{i + 1}) occurs exactly once.\n\nFind the lexicographically smallest such cycle. It's not hard to prove that the cycle always exists.\n\nSince the answer can be too large print its [l, r] segment, in other words, v_l, v_{l + 1}, ..., v_r.\n\nInput\n\nThe first line contains the single integer T (1 \u2264 T \u2264 100) \u2014 the number of test cases.\n\nNext T lines contain test cases \u2014 one per line. The first and only line of each test case contains three integers n, l and r (2 \u2264 n \u2264 10^5, 1 \u2264 l \u2264 r \u2264 n(n - 1) + 1, r - l + 1 \u2264 10^5) \u2014 the number of vertices in K_n, and segment of the cycle to print.\n\nIt's guaranteed that the total sum of n doesn't exceed 10^5 and the total sum of r - l + 1 doesn't exceed 10^5.\n\nOutput\n\nFor each test case print the segment v_l, v_{l + 1}, ..., v_r of the lexicographically smallest cycle that visits every edge exactly once.\n\nExample\n\nInput\n\n\n3\n2 1 3\n3 3 6\n99995 9998900031 9998900031\n\n\nOutput\n\n\n1 2 1 \n1 3 2 3 \n1 \n\nNote\n\nIn the second test case, the lexicographically minimum cycle looks like: 1, 2, 1, 3, 2, 3, 1.\n\nIn the third test case, it's quite obvious that the cycle should start and end in vertex 1.",
        "task_name": "1334_D. Minimum Euler Cycle",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdout\ndef solve():\n    n, l, r = map(int, raw_input().split())\n    l -= 1\n    for i in xrange(n - 1):\n        t = (n - i - 1) * 2\n        if l < t:\n            break\n        l -= t\n        r -= t\n    else:\n        stdout.write('1\\n')\n        return\n    ans = [0] * (r - l)\n    i += 1\n    p = i + 1\n    sw = 0\n    for j in xrange(r):\n        if sw:\n            if j >= l:\n                ans[j-l] = p\n            p += 1\n            if p > n:\n                i += 1\n                p = i + 1\n                if i == n:\n                    i = 1\n        else:\n            if j >= l:\n                ans[j-l] = i\n        sw = 1 - sw\n    stdout.write(' '.join(map(str, ans)))\n    stdout.write('\\n')\n\nT = int(raw_input())\nfor _ in xrange(T):\n    solve()\n",
        "correct": true,
        "task_id": "0006",
        "depth": 1
    },
    {
        "description": "Easy and hard versions are actually different problems, so read statements of both problems completely and carefully.\n\nSummer vacation has started so Alice and Bob want to play and joy, but... Their mom doesn't think so. She says that they have to read some amount of books before all entertainments. Alice and Bob will read each book together to end this exercise faster.\n\nThere are n books in the family library. The i-th book is described by three integers: t_i \u2014 the amount of time Alice and Bob need to spend to read it, a_i (equals 1 if Alice likes the i-th book and 0 if not), and b_i (equals 1 if Bob likes the i-th book and 0 if not).\n\nSo they need to choose some books from the given n books in such a way that:\n\n  * Alice likes at least k books from the chosen set and Bob likes at least k books from the chosen set; \n  * the total reading time of these books is minimized (they are children and want to play and joy as soon a possible). \n\n\n\nThe set they choose is the same for both Alice an Bob (it's shared between them) and they read all books together, so the total reading time is the sum of t_i over all books that are in the chosen set.\n\nYour task is to help them and find any suitable set of books or determine that it is impossible to find such a set.\n\nInput\n\nThe first line of the input contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5).\n\nThe next n lines contain descriptions of books, one description per line: the i-th line contains three integers t_i, a_i and b_i (1 \u2264 t_i \u2264 10^4, 0 \u2264 a_i, b_i \u2264 1), where:\n\n  * t_i \u2014 the amount of time required for reading the i-th book; \n  * a_i equals 1 if Alice likes the i-th book and 0 otherwise; \n  * b_i equals 1 if Bob likes the i-th book and 0 otherwise. \n\nOutput\n\nIf there is no solution, print only one integer -1. Otherwise print one integer T \u2014 the minimum total reading time of the suitable set of books.\n\nExamples\n\nInput\n\n8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\n\nOutput\n\n18\n\n\nInput\n\n5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n\n\nOutput\n\n8\n\n\nInput\n\n5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\n\nOutput\n\n-1",
        "task_name": "1374_E1. Reading Books (easy version)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport math\nfrom collections import defaultdict\n\nn,k = list(map(int, sys.stdin.readline().strip().split(' ')))\n\nt = []\na = []\nb = []\nfor _ in range(n):\n\tti,ai,bi = list(map(int, sys.stdin.readline().strip().split(' ')))\n\tt.append(ti)\n\ta.append(ai)\n\tb.append(bi)\n\nalice_only = []\nalice = 0\nbob = 0\nbob_only = []\ntaken = [0 for i in range(n)]\nts = sorted(enumerate(t), key=lambda x: x[1])\nfor i,ti in ts:\n\tif a[i] and b[i]:\n\t\tif alice == k and bob == k:\n\t\t\tif alice_only and bob_only:\n\t\t\t\tif ti < alice_only[-1] + bob_only[-1]:\n\t\t\t\t\ttaken[alice_only.pop()] = 0\n\t\t\t\t\ttaken[bob_only.pop()] = 0\n\t\t\t\t\ttaken[i] = 1\n\t\t\tcontinue\n\t\tif alice == k:\n\t\t\tif alice_only:\n\t\t\t\tj = alice_only.pop()\n\t\t\t\ttaken[j] = 0\n\t\telse:\n\t\t\talice += 1\n\t\tif bob == k:\n\t\t\tif bob_only:\n\t\t\t\tj = bob_only.pop()\n\t\t\t\ttaken[j] = 0\n\t\telse:\n\t\t\tbob += 1\n\t\ttaken[i] = 1\n\t\tcontinue\n\tif a[i] and alice < k:\n\t\talice += 1\n\t\talice_only.append(i)\n\t\ttaken[i] = 1\n\tif b[i] and bob < k:\n\t\tbob += 1\n\t\tbob_only.append(i)\n\t\ttaken[i] = 1\n\nif alice != k or bob != k:\n\tprint(-1)\nelse:\n\tans = 0\n\tfor i,ti in ts:\n\t\tif taken[i]:\n\t\t\tans += ti\n\tprint(ans)\n\n\n\n\n\n",
        "correct": false,
        "task_id": "0007",
        "depth": 1
    },
    {
        "description": "You are given an array a_1, a_2, ... , a_n, which is sorted in non-decreasing order (a_i \u2264 a_{i + 1}). \n\nFind three indices i, j, k such that 1 \u2264 i < j < k \u2264 n and it is impossible to construct a non-degenerate triangle (a triangle with nonzero area) having sides equal to a_i, a_j and a_k (for example it is possible to construct a non-degenerate triangle with sides 3, 4 and 5 but impossible with sides 3, 4 and 7). If it is impossible to find such triple, report it.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe first line of each test case contains one integer n (3 \u2264 n \u2264 5 \u22c5 10^4) \u2014 the length of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, ... , a_n (1 \u2264 a_i \u2264 10^9; a_{i - 1} \u2264 a_i) \u2014 the array a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case print the answer to it in one line.\n\nIf there is a triple of indices i, j, k (i < j < k) such that it is impossible to construct a non-degenerate triangle having sides equal to a_i, a_j and a_k, print that three indices in ascending order. If there are multiple answers, print any of them.\n\nOtherwise, print -1.\n\nExample\n\nInput\n\n\n3\n7\n4 6 11 11 15 18 20\n4\n10 10 10 11\n3\n1 1 1000000000\n\n\nOutput\n\n\n2 3 6\n-1\n1 2 3\n\nNote\n\nIn the first test case it is impossible with sides 6, 11 and 18. Note, that this is not the only correct answer.\n\nIn the second test case you always can construct a non-degenerate triangle.",
        "task_name": "1398_A. Bad Triangle",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "k=[]\nfor t in range(int(raw_input())):\n    l1=0\n    s=\"\"\n    p=int(raw_input())\n    n=[int(i) for i in raw_input().split()]\n    x=n.index(max(n))\n    y=n.index(min(n))\n    if n[1]<max(n)-min(n):\n        l1=2\n        s = str(y + 1) + \" \" + str(l1) + \" \" + str(x + 1)\n        k.append(s)\n    else:\n        s=-1\n\n        k.append(s)\n\nfor t1 in k:\n    print(t1)",
        "correct": false,
        "task_id": "0008",
        "depth": 1
    },
    {
        "description": "Pink Floyd are pulling a prank on Roger Waters. They know he doesn't like [walls](https://www.youtube.com/watch?v=YR5ApYxkU-U), he wants to be able to walk freely, so they are blocking him from exiting his room which can be seen as a grid.\n\nRoger Waters has a square grid of size n\u00d7 n and he wants to traverse his grid from the upper left (1,1) corner to the lower right corner (n,n). Waters can move from a square to any other square adjacent by a side, as long as he is still in the grid. Also except for the cells (1,1) and (n,n) every cell has a value 0 or 1 in it.\n\nBefore starting his traversal he will pick either a 0 or a 1 and will be able to only go to cells values in which are equal to the digit he chose. The starting and finishing cells (1,1) and (n,n) are exempt from this rule, he may go through them regardless of picked digit. Because of this the cell (1,1) takes value the letter 'S' and the cell (n,n) takes value the letter 'F'.\n\nFor example, in the first example test case, he can go from (1, 1) to (n, n) by using the zeroes on this path: (1, 1), (2, 1), (2, 2), (2, 3), (3, 3), (3, 4), (4, 4)\n\nThe rest of the band (Pink Floyd) wants Waters to not be able to do his traversal, so while he is not looking they will invert at most two cells in the grid (from 0 to 1 or vice versa). They are afraid they will not be quick enough and asked for your help in choosing the cells.  Note that you cannot invert cells (1, 1) and (n, n).\n\nWe can show that there always exists a solution for the given constraints.\n\nAlso note that Waters will pick his digit of the traversal after the band has changed his grid, so he must not be able to reach (n,n) no matter what digit he picks.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 50). Description of the test cases follows.\n\nThe first line of each test case contains one integers n (3 \u2264 n \u2264 200).\n\nThe following n lines of each test case contain the binary grid, square (1, 1) being colored in 'S' and square (n, n) being colored in 'F'.\n\nThe sum of values of n doesn't exceed 200.\n\nOutput\n\nFor each test case output on the first line an integer c (0 \u2264 c \u2264 2) \u2014 the number of inverted cells.\n\nIn i-th of the following c lines, print the coordinates of the i-th cell you inverted. You may not invert the same cell twice.  Note that you cannot invert cells (1, 1) and (n, n).\n\nExample\n\nInput\n\n\n3\n4\nS010\n0001\n1000\n111F\n3\nS10\n101\n01F\n5\nS0101\n00000\n01111\n11111\n0001F\n\n\nOutput\n\n\n1\n3 4\n2\n1 2\n2 1\n0\n\nNote\n\nFor the first test case, after inverting the cell, we get the following grid:\n    \n    \n      \n    S010  \n    0001  \n    1001  \n    111F  \n    ",
        "task_name": "1421_B. Putting Bricks in the Wall",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n# import threading\n# threading.stack_size(2**27)\nimport sys\nsys.setrecursionlimit(10**4)\n# sys.stdin = open('inpy.txt', 'r')\n# sys.stdout = open('outpy.txt', 'w')\nfrom sys import stdin, stdout\nimport bisect            #c++ upperbound\nimport math\nimport heapq\ni_m=9223372036854775807\ndef modinv(n,p):\n    return pow(n,p-2,p)\ndef cin():\n    return map(int,sin().split())\ndef ain():                           #takes array as input\n    return list(map(int,sin().split()))\ndef sin():\n    return input()\ndef inin():\n    return int(input())\nimport math  \ndef GCD(x, y): \n    x=abs(x)\n    y=abs(y)\n    if(min(x,y)==0):\n        return max(x,y)\n    while(y): \n        x, y = y, x % y \n    return x \ndef Divisors(n) : \n    l = []  \n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if (n % i == 0) : \n            if (n // i == i) : \n                l.append(i) \n            else : \n                l.append(i)\n                l.append(n//i)\n    return l\nprime=[]\ndef SieveOfEratosthenes(n): \n    global prime\n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    f=[]\n    for p in range(2, n): \n        if prime[p]: \n            f.append(p)\n    return f\ndef primeFactors(n): \n    a=[]\n    # Print the number of two's that divide n \n    while n % 2 == 0: \n        a.append(2) \n        n = n // 2\n          \n    # n must be odd at this point \n    # so a skip of 2 ( i = i + 2) can be used \n    for i in range(3,int(math.sqrt(n))+1,2): \n          \n        # while i divides n , print i ad divide n \n        while n % i== 0: \n            a.append(i) \n            n = n // i \n              \n    # Condition if n is a prime \n    # number greater than 2 \n    if n > 2: \n        a.append(n)\n    return a\n\n\"\"\"*******************************************************\"\"\"\ndef main():\n    t=inin()\n    for _ in range(t):\n        n=inin()\n        p=[]\n        q=[]\n        ans=[]\n        for i in range(n):\n            s=sin()\n            if i==0:\n                p.append(s[1])\n                q.append((1,2))\n            if i==1:\n                p.append(s[0])\n                q.append((2,1))\n            if i==n-2:\n                p.append(s[n-1])\n                q.append((n-1,n))\n            if i==n-1:\n                p.append(s[n-2])\n                q.append((n,n-1))\n        for i in range(4):\n            p[i]=int(p[i])\n        # print(p,q)\n        if p[1]!=p[2]:\n            if p[0]!=p[1]:\n                ans.append(q[1])\n            if p[2]!=p[3]:\n                ans.append(q[3])\n        else:\n            if len(set(p))==1:\n                ans.append(q[0])\n                ans.append(q[1])\n            else:\n                if p[0]==1:\n                    p[0]=0\n                    p[1]^=1\n                    p[2]^=1\n                    p[3]^=1\n                if p[0]+p[1]==p[2]+p[3]:\n                    ans.append(q[0])\n                    ans.append(q[2])\n                elif p[0]+p[1]+p[2]<p[3]:\n                    ans.append(q[2])\n                else:\n                    ans.append(q[1])\n        print(len(ans))\n        for i in ans:\n            print(*i)\n            \n\n    \n######## Python 2 and 3 footer by Pajenegod and c1729\n \n# Note because cf runs old PyPy3 version which doesn't have the sped up\n# unicode strings, PyPy3 strings will many times be slower than pypy2.\n# There is a way to get around this by using binary strings in PyPy3\n# but its syntax is yferent which makes it kind of a mess to use.\n \n# So on cf, use PyPy2 for best string performance.\n \npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\n \nimport os, sys\nfrom io import IOBase, BytesIO\n \nBUFSIZE = 8192\nclass FastIO(BytesIO):\n    newlines = 0\n \n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n \n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0,2), super(FastIO, self).write(s))[0])\n        return s\n \n    def read(self):\n        while self._fill(): pass\n        return super(FastIO,self).read()\n \n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill(); self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s:self.buffer.write(s.encode('ascii'))\n            self.read = lambda:self.buffer.read().decode('ascii')\n            self.readline = lambda:self.buffer.readline().decode('ascii')\n \n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n \n# Cout implemented in Python\nimport sys\nclass ostream:\n    def __lshift__(self,a):\n        sys.stdout.write(str(a))\n        return self\ncout = ostream()\nendl = '\\n'\n \n# Read all remaining integers in stdin, type is given by optional argument, this is fast\ndef readnumbers(zero = 0):\n    conv = ord if py2 else lambda x:x\n    A = []; numb = zero; sign = 1; i = 0; s = sys.stdin.buffer.read()\n    try:\n        while True:\n            if s[i] >= b'R' [0]:\n                numb = 10 * numb + conv(s[i]) - 48\n            elif s[i] == b'-' [0]: sign = -1\n            elif s[i] != b'\\r' [0]:\n                A.append(sign*numb)\n                numb = zero; sign = 1\n            i += 1\n    except:pass\n    if s and s[-1] >= b'R' [0]:\n        A.append(sign*numb)\n    return A\n \n# threading.Thread(target=main).start()\nif __name__== \"__main__\":\n  main()",
        "correct": false,
        "task_id": "0009",
        "depth": 2
    },
    {
        "description": "You may know that Euclid was a mathematician. Well, as it turns out, Morpheus knew it too. So when he wanted to play a mean trick on Euclid, he sent him an appropriate nightmare. \n\nIn his bad dream Euclid has a set S of n m-dimensional vectors over the Z_2 field and can perform vector addition on them. In other words he has vectors with m coordinates, each one equal either 0 or 1. Vector addition is defined as follows: let u+v = w, then w_i = (u_i + v_i) mod 2. \n\nEuclid can sum any subset of S and archive another m-dimensional vector over Z_2. In particular, he can sum together an empty subset; in such a case, the resulting vector has all coordinates equal 0.\n\nLet T be the set of all the vectors that can be written as a sum of some vectors from S. Now Euclid wonders the size of T and whether he can use only a subset S' of S to obtain all the vectors from T. As it is usually the case in such scenarios, he will not wake up until he figures this out. So far, things are looking rather grim for the philosopher. But there is hope, as he noticed that all vectors in S have at most 2 coordinates equal 1. \n\nHelp Euclid and calculate |T|, the number of m-dimensional vectors over Z_2 that can be written as a sum of some vectors from S. As it can be quite large, calculate it modulo 10^9+7. You should also find S', the smallest such subset of S, that all vectors in T can be written as a sum of vectors from S'. In case there are multiple such sets with a minimal number of elements, output the lexicographically smallest one with respect to the order in which their elements are given in the input. \n\nConsider sets A and B such that |A| = |B|. Let a_1, a_2, ... a_{|A|} and b_1, b_2, ... b_{|B|} be increasing arrays of indices elements of A and B correspondingly. A is lexicographically smaller than B iff there exists such i that a_j = b_j for all j < i and a_i < b_i.\n\nInput\n\nIn the first line of input, there are two integers n, m (1 \u2264 n, m \u2264 5 \u22c5 10^5) denoting the number of vectors in S and the number of dimensions. \n\nNext n lines contain the description of the vectors in S. In each of them there is an integer k (1 \u2264 k \u2264 2) and then follow k distinct integers x_1, ... x_k (1 \u2264 x_i \u2264 m). This encodes an m-dimensional vector having 1s on coordinates x_1, ... x_k and 0s on the rest of them.\n\nAmong the n vectors, no two are the same.\n\nOutput\n\nIn the first line, output two integers: remainder modulo 10^9+7 of |T| and |S'|. In the second line, output |S'| numbers, indices of the elements of S' in ascending order. The elements of S are numbered from 1 in the order they are given in the input.\n\nExamples\n\nInput\n\n\n3 2\n1 1\n1 2\n2 2 1\n\n\nOutput\n\n\n4 2\n1 2 \n\n\nInput\n\n\n2 3\n2 1 3\n2 1 2\n\n\nOutput\n\n\n4 2\n1 2 \n\n\nInput\n\n\n3 5\n2 1 2\n1 3\n1 4\n\n\nOutput\n\n\n8 3\n1 2 3 \n\nNote\n\nIn the first example we are given three vectors: \n\n  * 10 \n  * 01 \n  * 11 \n\n\n\nIt turns out that we can represent all vectors from our 2-dimensional space using these vectors: \n\n  * 00 is a sum of the empty subset of above vectors; \n  * 01 = 11 + 10, is a sum of the first and third vector; \n  * 10 = 10, is just the first vector; \n  * 11 = 10 + 01, is a sum of the first and the second vector. \n\n\n\nHence, T = \\{00, 01, 10, 11\\}. We can choose any two of the three vectors from S and still be able to obtain all the vectors in T. In such a case, we choose the two vectors which appear first in the input. Since we cannot obtain all vectors in T using only a single vector from S, |S'| = 2 and S' = \\{10, 01\\} (indices 1 and 2), as set \\{1, 2 \\} is lexicographically the smallest. We can represent all vectors from T, using only vectors from S', as shown below: \n\n  * 00 is a sum of the empty subset; \n  * 01 = 01 is just the second vector; \n  * 10 = 10 is just the first vector; \n  * 11 = 10 + 01 is a sum of the first and the second vector. ",
        "task_name": "1466_F. Euclid's nightmare",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import io\nimport os\n\nfrom collections import Counter, defaultdict, deque\n\nMOD = 10 ** 9 + 7\n\n\nclass UnionFind:\n    def __init__(self, N):\n        # Union find with component size\n        # Negative means is a root where value is component size\n        # Otherwise is index to parent\n        self.p = [-1 for i in range(N)]\n\n    def find(self, i):\n        # Find root with path compression\n        if self.p[i] >= 0:\n            self.p[i] = self.find(self.p[i])\n            return self.p[i]\n        else:\n            return i\n\n    def union(self, i, j):\n        # Union by size\n        root1 = self.find(j)\n        root2 = self.find(i)\n        if root1 == root2:\n            return\n        size1 = -self.p[root1]\n        size2 = -self.p[root2]\n        if size1 < size2:\n            self.p[root1] = root2\n            self.p[root2] = -(size1 + size2)\n        else:\n            self.p[root2] = root1\n            self.p[root1] = -(size1 + size2)\n\n    def getComponentSize(self, i):\n        return -self.p[self.find(i)]\n\n\ndef solve(N, M, vectors):\n    uf = UnionFind(M)\n    allCoords = set()\n    single = set()\n    for i, v in enumerate(vectors):\n        allCoords.update(v)\n        if len(v) == 1:\n            (a,) = v\n            single.add(a)\n        else:\n            a, b = v\n            uf.union(a, b)\n    trees = defaultdict(list)\n    for x in allCoords:\n        if uf.getComponentSize(x) > 1:\n            trees[uf.find(x)].append(x)\n    T = 1\n    treeCoords = set()\n    for coords in trees.values():\n        for x in coords:\n            if x in single:\n                break\n        else:\n            treeCoords.update(coords)\n            T *= pow(2, len(coords) - 1, MOD)\n            T %= MOD\n    T *= pow(2, len(allCoords) - len(treeCoords), MOD)\n    T %= MOD\n\n    uf = UnionFind(M)\n    ans = []\n    seen = set()\n    for i, v in enumerate(vectors):\n        if len(v) == 1:\n            (a,) = v\n            if a not in seen and a not in treeCoords:\n                seen.add(a)\n                ans.append(i)\n        else:\n            assert len(v) == 2\n            a, b = v\n            if a in treeCoords:\n                assert b in treeCoords\n                if uf.find(a) != uf.find(b):\n                    uf.union(a, b)\n                    ans.append(i)\n            else:\n                if a not in seen or b not in seen:\n                    seen.add(a)\n                    seen.add(b)\n                    ans.append(i)\n\n    return str(T) + \" \" + str(len(ans)) + \"\\n\" + \" \".join(str(i + 1) for i in ans)\n\n\nif __name__ == \"__main__\":\n    input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\n    TC = 1  # int(input())\n    for tc in range(1, TC + 1):\n        (N, M) = [int(x) for x in input().split()]\n        vectors = [[int(x) - 1 for x in input().split()][1:] for i in range(N)]\n        ans = solve(N, M, vectors)\n        print(ans)\n",
        "correct": false,
        "task_id": "0011",
        "depth": 2
    },
    {
        "description": "This is the easy version of the problem. The only difference is that in this version q = 1. You can make hacks only if both versions of the problem are solved.\n\nThere is a process that takes place on arrays a and b of length n and length n-1 respectively. \n\nThe process is an infinite sequence of operations. Each operation is as follows: \n\n  * First, choose a random integer i (1 \u2264 i \u2264 n-1). \n  * Then, simultaneously set a_i = min\\left(a_i, \\frac{a_i+a_{i+1}-b_i}{2}\\right) and a_{i+1} = max\\left(a_{i+1}, \\frac{a_i+a_{i+1}+b_i}{2}\\right) without any rounding (so values may become non-integer). \n\nSee notes for an example of an operation.\n\nIt can be proven that array a converges, i. e. for each i there exists a limit a_i converges to. Let function F(a, b) return the value a_1 converges to after a process on a and b.\n\nYou are given array b, but not array a. However, you are given a third array c. Array a is good if it contains only integers and satisfies 0 \u2264 a_i \u2264 c_i for 1 \u2264 i \u2264 n.\n\nYour task is to count the number of good arrays a where F(a, b) \u2265 x for q values of x. Since the number of arrays can be very large, print it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 100).\n\nThe second line contains n integers c_1, c_2 \u2026, c_n (0 \u2264 c_i \u2264 100).\n\nThe third line contains n-1 integers b_1, b_2, \u2026, b_{n-1} (0 \u2264 b_i \u2264 100).\n\nThe fourth line contains a single integer q (q=1).\n\nThe fifth line contains q space separated integers x_1, x_2, \u2026, x_q (-10^5 \u2264 x_i \u2264 10^5).\n\nOutput\n\nOutput q integers, where the i-th integer is the answer to the i-th query, i. e. the number of good arrays a where F(a, b) \u2265 x_i modulo 10^9+7.\n\nExample\n\nInput\n\n\n3\n2 3 4\n2 1\n1\n-1\n\n\nOutput\n\n\n56\n\nNote\n\nThe following explanation assumes b = [2, 1] and c=[2, 3, 4] (as in the sample).\n\nExamples of arrays a that are not good: \n\n  * a = [3, 2, 3] is not good because a_1 > c_1; \n  * a = [0, -1, 3] is not good because a_2 < 0. \n\n\n\nOne possible good array a is [0, 2, 4]. We can show that no operation has any effect on this array, so F(a, b) = a_1 = 0.\n\nAnother possible good array a is [0, 1, 4]. In a single operation with i = 1, we set a_1 = min((0+1-2)/(2), 0) and a_2 = max((0+1+2)/(2), 1). So, after a single operation with i = 1, a becomes equal to [-1/2, 3/2, 4]. We can show that no operation has any effect on this array, so F(a, b) = -1/2.",
        "task_name": "1540_C1. Converging Array (Easy Version)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division,print_function\nfrom heapq import*\nimport sys\nle = sys.__stdin__.read().split(\"\\n\")[::-1]\nmo=10**9+7\nif 1:\n    n=int(le.pop())\n    c = list(map(int,le.pop().split()))\n    b = list(map(int,le.pop().split()))\n    le.pop()\n    x=int(le.pop())\n    prefb=[b[0]]\n    for k in b[1:]:\n        prefb.append(k+prefb[-1])\n    prefb.append(0)    #careful when going to C\n    prefbt=[0]\n    for k in range(1,n-1):\n        prefbt.append(k*b[k]+prefbt[-1])\n    prefbt.append(0)\nsc=sum(c)\nd=[[0]*(sc+1) for k in range(n+1)]#fuck a lot of prefix sum in this problem\nds=[[0]*(sc+2) for k in range(n+1)]#prefix array beginning with 0\nds[-1]=list(range(sc+2))\nd[-1]=[1]*(sc+1)\nfor index in range(n-1,-1,-1):\n    #can even go linearly for minpref\n    minpref=0\n    while (minpref-index*prefb[index-1]+prefbt[index-1])/(index+1)<x:\n       minpref+=1\n    for pref in range(sc+1):\n        mi=min(pref+c[index]+1,sc+1)\n        ma=max(minpref,pref)\n        d[index][pref]=0 if mi<ma else ds[index+1][mi]-ds[index+1][ma]\n    for pref in range(1,sc+2):\n        ds[index][pref]=(ds[index][pref-1]+d[index][pref-1])%mo\nprint(d[0][0]%mo)\n",
        "correct": true,
        "task_id": "0014",
        "depth": 2
    },
    {
        "description": "A recently found Ancient Prophesy is believed to contain the exact Apocalypse date. The prophesy is a string that only consists of digits and characters \"-\".\n\nWe'll say that some date is mentioned in the Prophesy if there is a substring in the Prophesy that is the date's record in the format \"dd-mm-yyyy\". We'll say that the number of the date's occurrences is the number of such substrings in the Prophesy. For example, the Prophesy \"0012-10-2012-10-2012\" mentions date 12-10-2012 twice (first time as \"0012-10-2012-10-2012\", second time as \"0012-10-2012-10-2012\").\n\nThe date of the Apocalypse is such correct date that the number of times it is mentioned in the Prophesy is strictly larger than that of any other correct date.\n\nA date is correct if the year lies in the range from 2013 to 2015, the month is from 1 to 12, and the number of the day is strictly more than a zero and doesn't exceed the number of days in the current month. Note that a date is written in the format \"dd-mm-yyyy\", that means that leading zeroes may be added to the numbers of the months or days if needed. In other words, date \"1-1-2013\" isn't recorded in the format \"dd-mm-yyyy\", and date \"01-01-2013\" is recorded in it.\n\nNotice, that any year between 2013 and 2015 is not a leap year.\n\nInput\n\nThe first line contains the Prophesy: a non-empty string that only consists of digits and characters \"-\". The length of the Prophesy doesn't exceed 105 characters.\n\nOutput\n\nIn a single line print the date of the Apocalypse. It is guaranteed that such date exists and is unique.\n\nExamples\n\nInput\n\n777-444---21-12-2013-12-2013-12-2013---444-777\n\n\nOutput\n\n13-12-2013",
        "task_name": "260_B. Ancient Prophesy",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def correct(m,d,y):\n    days = [31,28,31,30,31,30,31,31,30,31,30,31]\n    if 0<m<13 and 0<d<=days[m-1] and 2013<=y<=2015:\n        return True\n    return False\n\ns = [a for a in raw_input().split('-') if a!='']\nyp = ['2014','2013','2015']\ndates = dict()\nfor i in range(2,len(s)):\n    if   s[i][:4] in yp:\n        d,m,y = s[i-2][-2::1],s[i-1],s[i][:4]\n        if len(d)!=2 or len(m)!=2 or len(y)!=4: continue;\n        if correct(int(m),int(d),int(y)):\n            dates[(d,m,y)]=dates.get((d,m,y),0)+1\nma = 0\nmb = None\nfor a,b in dates.items():\n    if b>ma:\n        mb=a\n        ma = b\nprint('-'.join(mb))\na=0",
        "correct": false,
        "task_id": "0017",
        "depth": 1
    },
    {
        "description": "Vasily the Programmer loves romance, so this year he decided to illuminate his room with candles.\n\nVasily has a candles.When Vasily lights up a new candle, it first burns for an hour and then it goes out. Vasily is smart, so he can make b went out candles into a new candle. As a result, this new candle can be used like any other new candle.\n\nNow Vasily wonders: for how many hours can his candles light up the room if he acts optimally well? Help him find this number.\n\nInput\n\nThe single line contains two integers, a and b (1 \u2264 a \u2264 1000; 2 \u2264 b \u2264 1000).\n\nOutput\n\nPrint a single integer \u2014 the number of hours Vasily can light up the room for.\n\nExamples\n\nInput\n\n4 2\n\n\nOutput\n\n7\n\n\nInput\n\n6 3\n\n\nOutput\n\n8\n\nNote\n\nConsider the first sample. For the first four hours Vasily lights up new candles, then he uses four burned out candles to make two new ones and lights them up. When these candles go out (stop burning), Vasily can make another candle. Overall, Vasily can light up the room for 7 hours.",
        "task_name": "379_A. New Year Candles",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division\nfrom sys import stdin, stdout\nimport math\nn, m = map(int, stdin.readline().rstrip().split())\nx=n\ns=0\nwhile n%m==0 or n>m:\n        if n/m>=1:\n           r=n/m\n           r=r%1\n           s=s+r\n        n=math.floor(n/m)\n        x=x+n    \nx=x+math.ceil(s)\nprint(int(x)) ",
        "correct": false,
        "task_id": "0019",
        "depth": 1
    },
    {
        "description": "Petya studies positional notations. He has already learned to add and subtract numbers in the systems of notations with different radices and has moved on to a more complicated action \u2014 multiplication. To multiply large numbers one has to learn the multiplication table. Unfortunately, in the second grade students learn only the multiplication table of decimals (and some students even learn it in the first grade). Help Petya make a multiplication table for numbers in the system of notations with the radix k.\n\nInput\n\nThe first line contains a single integer k (2 \u2264 k \u2264 10) \u2014 the radix of the system.\n\nOutput\n\nOutput the multiplication table for the system of notations with the radix k. The table must contain k - 1 rows and k - 1 columns. The element on the crossing of the i-th row and the j-th column is equal to the product of i and j in the system of notations with the radix k. Each line may have any number of spaces between the numbers (the extra spaces in the samples are put for clarity).\n\nExamples\n\nInput\n\n10\n\n\nOutput\n\n1  2  3  4  5  6  7  8  9\n2  4  6  8 10 12 14 16 18\n3  6  9 12 15 18 21 24 27\n4  8 12 16 20 24 28 32 36\n5 10 15 20 25 30 35 40 45\n6 12 18 24 30 36 42 48 54\n7 14 21 28 35 42 49 56 63\n8 16 24 32 40 48 56 64 72\n9 18 27 36 45 54 63 72 81\n\n\nInput\n\n3\n\n\nOutput\n\n1  2\n2 11",
        "task_name": "39_H. Multiplication Table",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nbase = int(sys.stdin.readline())\n\ndef baseN(num, b, numerals=\"0123456789\"):\n    return ((num == 0) and  \"0\" ) or ( baseN(num // b, b).lstrip(\"0\") + numerals[num % b])\n\nfor i in range(1, base):\n\tfor j in range(1, base):\n\t\tif j != 1:\n\t\t\tsys.stdout.write(\" \")\n\t\tn = (i * j)\n\t\tif base != 10:\n\t\t\tn = int(baseN(n, base))\n\t\tsys.stdout.write(\"%d\" % n)\n\tsys.stdout.write(\"\\n\")\n\n",
        "correct": true,
        "task_id": "0020",
        "depth": 2
    },
    {
        "description": "To celebrate the opening of the Winter Computer School the organizers decided to buy in n liters of cola. However, an unexpected difficulty occurred in the shop: it turned out that cola is sold in bottles 0.5, 1 and 2 liters in volume. At that, there are exactly a bottles 0.5 in volume, b one-liter bottles and c of two-liter ones. The organizers have enough money to buy any amount of cola. What did cause the heated arguments was how many bottles of every kind to buy, as this question is pivotal for the distribution of cola among the participants (and organizers as well).\n\nThus, while the organizers are having the argument, discussing different variants of buying cola, the Winter School can't start. Your task is to count the number of all the possible ways to buy exactly n liters of cola and persuade the organizers that this number is too large, and if they keep on arguing, then the Winter Computer School will have to be organized in summer.\n\nAll the bottles of cola are considered indistinguishable, i.e. two variants of buying are different from each other only if they differ in the number of bottles of at least one kind.\n\nInput\n\nThe first line contains four integers \u2014 n, a, b, c (1 \u2264 n \u2264 10000, 0 \u2264 a, b, c \u2264 5000).\n\nOutput\n\nPrint the unique number \u2014 the solution to the problem. If it is impossible to buy exactly n liters of cola, print 0. \n\nExamples\n\nInput\n\n10 5 5 5\n\n\nOutput\n\n9\n\n\nInput\n\n3 0 0 2\n\n\nOutput\n\n0",
        "task_name": "44_B. Cola",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math\nn, a, b, c = [int(i) for i in raw_input().split()]\nans = 0\n\nfor i in range(0, a+1):\n\tfor j in range(0, b+1):\n\t\tt = (n - 0.5*i - j)/2\n\t\tif t >= 0 and t <= c and t == math.floor(t):\n\t\t\tans += 1\n\nprint(ans)",
        "correct": true,
        "task_id": "0021",
        "depth": 2
    },
    {
        "description": "A and B are preparing themselves for programming contests.\n\nB loves to debug his code. But before he runs the solution and starts debugging, he has to first compile the code.\n\nInitially, the compiler displayed n compilation errors, each of them is represented as a positive integer. After some effort, B managed to fix some mistake and then another one mistake.\n\nHowever, despite the fact that B is sure that he corrected the two errors, he can not understand exactly what compilation errors disappeared \u2014 the compiler of the language which B uses shows errors in the new order every time! B is sure that unlike many other programming languages, compilation errors for his programming language do not depend on each other, that is, if you correct one error, the set of other error does not change.\n\nCan you help B find out exactly what two errors he corrected?\n\nInput\n\nThe first line of the input contains integer n (3 \u2264 n \u2264 105) \u2014 the initial number of compilation errors.\n\nThe second line contains n space-separated integers a1, a2, ..., an (1 \u2264 ai \u2264 109) \u2014 the errors the compiler displayed for the first time. \n\nThe third line contains n - 1 space-separated integers b1, b2, ..., bn - 1 \u2014 the errors displayed at the second compilation. It is guaranteed that the sequence in the third line contains all numbers of the second string except for exactly one. \n\nThe fourth line contains n - 2 space-separated integers \u04411, \u04412, ..., \u0441n - 2 \u2014 the errors displayed at the third compilation. It is guaranteed that the sequence in the fourth line contains all numbers of the third line except for exactly one. \n\nOutput\n\nPrint two numbers on a single line: the numbers of the compilation errors that disappeared after B made the first and the second correction, respectively. \n\nExamples\n\nInput\n\n5\n1 5 8 123 7\n123 7 5 1\n5 1 7\n\n\nOutput\n\n8\n123\n\n\nInput\n\n6\n1 4 3 3 5 7\n3 7 5 4 3\n4 3 7 5\n\n\nOutput\n\n1\n3\n\nNote\n\nIn the first test sample B first corrects the error number 8, then the error number 123.\n\nIn the second test sample B first corrects the error number 1, then the error number 3. Note that if there are multiple errors with the same number, B can correct only one of them in one step. ",
        "task_name": "519_B. A and B and Compilation Errors",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function\nn=int(input())\nl=[]\nl[:n]=map(int,raw_input().split())\n\nx=[]\ny=[]\nx[:n]=map(int,raw_input().split())\ny[:n]=map(int,raw_input().split())\nfor i in l:\n    if (x.count(i)==0):\n        print(i)\n        l.remove(i)\n        break\nfor i in x:\n    if (y.count(i)==0):\n        print(i)\n        break\n",
        "correct": false,
        "task_id": "0022",
        "depth": 1
    },
    {
        "description": "Little Susie listens to fairy tales before bed every day. Today's fairy tale was about wood cutters and the little girl immediately started imagining the choppers cutting wood. She imagined the situation that is described below.\n\nThere are n trees located along the road at points with coordinates x1, x2, ..., xn. Each tree has its height hi. Woodcutters can cut down a tree and fell it to the left or to the right. After that it occupies one of the segments [xi - hi, xi] or [xi;xi + hi]. The tree that is not cut down occupies a single point with coordinate xi. Woodcutters can fell a tree if the segment to be occupied by the fallen tree doesn't contain any occupied point. The woodcutters want to process as many trees as possible, so Susie wonders, what is the maximum number of trees to fell. \n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 105) \u2014 the number of trees.\n\nNext n lines contain pairs of integers xi, hi (1 \u2264 xi, hi \u2264 109) \u2014 the coordinate and the height of the \u0456-th tree.\n\nThe pairs are given in the order of ascending xi. No two trees are located at the point with the same coordinate.\n\nOutput\n\nPrint a single number \u2014 the maximum number of trees that you can cut down by the given rules.\n\nExamples\n\nInput\n\n5\n1 2\n2 1\n5 10\n10 9\n19 1\n\n\nOutput\n\n3\n\n\nInput\n\n5\n1 2\n2 1\n5 10\n10 9\n20 1\n\n\nOutput\n\n4\n\nNote\n\nIn the first sample you can fell the trees like that: \n\n  * fell the 1-st tree to the left \u2014 now it occupies segment [ - 1;1]\n  * fell the 2-nd tree to the right \u2014 now it occupies segment [2;3]\n  * leave the 3-rd tree \u2014 it occupies point 5\n  * leave the 4-th tree \u2014 it occupies point 10\n  * fell the 5-th tree to the right \u2014 now it occupies segment [19;20]\n\n\n\nIn the second sample you can also fell 4-th tree to the right, after that it will occupy segment [10;19].",
        "task_name": "545_C. Woodcutters",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = input()\nx, h = [0] * n, [0] * n\nfor i in range(n):\n    x[i], h[i] = map(int, raw_input().split())\n\nc = -2 * 10 ** 9\nr = 0\nfor i in range(n):\n    #print(i, r, c)\n    if x[i] - h[i] > c:\n        r += 1\n        c = x[i]\n        continue\n    c = x[i]\n    if i == n - 1 or x[i] + h[i] < x[i + 1]:\n        c += h[i]\n        r += 1\nprint(r)",
        "correct": true,
        "task_id": "0023",
        "depth": 1
    },
    {
        "description": "Vasya wants to turn on Christmas lights consisting of m bulbs. Initially, all bulbs are turned off. There are n buttons, each of them is connected to some set of bulbs. Vasya can press any of these buttons. When the button is pressed, it turns on all the bulbs it's connected to. Can Vasya light up all the bulbs?\n\nIf Vasya presses the button such that some bulbs connected to it are already turned on, they do not change their state, i.e. remain turned on.\n\nInput\n\nThe first line of the input contains integers n and m (1 \u2264 n, m \u2264 100) \u2014 the number of buttons and the number of bulbs respectively. \n\nEach of the next n lines contains xi (0 \u2264 xi \u2264 m) \u2014 the number of bulbs that are turned on by the i-th button, and then xi numbers yij (1 \u2264 yij \u2264 m) \u2014 the numbers of these bulbs.\n\nOutput\n\nIf it's possible to turn on all m bulbs print \"YES\", otherwise print \"NO\".\n\nExamples\n\nInput\n\n3 4\n2 1 4\n3 1 3 1\n1 2\n\n\nOutput\n\nYES\n\n\nInput\n\n3 3\n1 1\n1 2\n1 1\n\n\nOutput\n\nNO\n\nNote\n\nIn the first sample you can press each button once and turn on all the bulbs. In the 2 sample it is impossible to turn on the 3-rd lamp.",
        "task_name": "615_A. Bulbs",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "R=lambda:map(int,raw_input().split())\nn,m=R()\na=[]\nfor i in range(n): a+=R()[1:]\nprint [\"NO\", \"YES\"][list(set(a))==range(1,m+1)]\n",
        "correct": true,
        "task_id": "0024",
        "depth": 1
    },
    {
        "description": "You are given a rebus of form ? + ? - ? + ? = n, consisting of only question marks, separated by arithmetic operation '+' and '-', equality and positive integer n. The goal is to replace each question mark with some positive integer from 1 to n, such that equality holds.\n\nInput\n\nThe only line of the input contains a rebus. It's guaranteed that it contains no more than 100 question marks, integer n is positive and doesn't exceed 1 000 000, all letters and integers are separated by spaces, arithmetic operations are located only between question marks.\n\nOutput\n\nThe first line of the output should contain \"Possible\" (without quotes) if rebus has a solution and \"Impossible\" (without quotes) otherwise.\n\nIf the answer exists, the second line should contain any valid rebus with question marks replaced by integers from 1 to n. Follow the format given in the samples.\n\nExamples\n\nInput\n\n? + ? - ? + ? + ? = 42\n\n\nOutput\n\nPossible\n9 + 13 - 39 + 28 + 31 = 42\n\n\nInput\n\n? - ? = 1\n\n\nOutput\n\nImpossible\n\n\nInput\n\n? = 1000000\n\n\nOutput\n\nPossible\n1000000 = 1000000",
        "task_name": "663_A. Rebus",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\ndef fail():\n    print('Impossible')\n    sys.exit()\n\nline = raw_input().strip()\nparts = line.split()\nn = int(parts[-1])\nplus = (line.count('+') + 1) * [ n ]\nminus = line.count('-') * [ 1 ]\nx = sum(plus) - sum(minus) - n\nif x < 0:\n    fail()\nfor i, value in enumerate(plus):\n    if x == 0:\n        break\n    delta = min(n - 1, x)\n    plus[i] -= delta\n    x -= delta\nfor i, value in enumerate(minus):\n    if x == 0:\n        break\n    delta = min(n - 1, x)\n    minus[i] += delta\n    x -= delta\nif x > 0:\n    fail()\n\nif False:\n    print(n)\n    print(plus)\n    print(minus)\n    print(x)\nparts[0] = str(plus[0])\nplus_pos = 1\nminus_pos = 0\nfor i in range(1, len(parts) - 2, 2):\n    if parts[i] == '-':\n        parts[i + 1] = str(minus[minus_pos])\n        minus_pos += 1\n    else:\n        parts[i + 1] = str(plus[plus_pos])\n        plus_pos += 1\nprint(' '.join(parts))\n",
        "correct": false,
        "task_id": "0025",
        "depth": 1
    },
    {
        "description": "Our beloved detective, Sherlock is currently trying to catch a serial killer who kills a person each day. Using his powers of deduction, he came to know that the killer has a strategy for selecting his next victim.\n\nThe killer starts with two potential victims on his first day, selects one of these two, kills selected victim and replaces him with a new person. He repeats this procedure each day. This way, each day he has two potential victims to choose from. Sherlock knows the initial two potential victims. Also, he knows the murder that happened on a particular day and the new person who replaced this victim.\n\nYou need to help him get all the pairs of potential victims at each day so that Sherlock can observe some pattern.\n\nInput\n\nFirst line of input contains two names (length of each of them doesn't exceed 10), the two initials potential victims. Next line contains integer n (1 \u2264 n \u2264 1000), the number of days.\n\nNext n lines contains two names (length of each of them doesn't exceed 10), first being the person murdered on this day and the second being the one who replaced that person.\n\nThe input format is consistent, that is, a person murdered is guaranteed to be from the two potential victims at that time. Also, all the names are guaranteed to be distinct and consists of lowercase English letters.\n\nOutput\n\nOutput n + 1 lines, the i-th line should contain the two persons from which the killer selects for the i-th murder. The (n + 1)-th line should contain the two persons from which the next victim is selected. In each line, the two names can be printed in any order.\n\nExamples\n\nInput\n\nross rachel\n4\nross joey\nrachel phoebe\nphoebe monica\nmonica chandler\n\n\nOutput\n\nross rachel\njoey rachel\njoey phoebe\njoey monica\njoey chandler\n\n\nInput\n\nicm codeforces\n1\ncodeforces technex\n\n\nOutput\n\nicm codeforces\nicm technex\n\nNote\n\nIn first example, the killer starts with ross and rachel. \n\n  * After day 1, ross is killed and joey appears. \n  * After day 2, rachel is killed and phoebe appears. \n  * After day 3, phoebe is killed and monica appears. \n  * After day 4, monica is killed and chandler appears. ",
        "task_name": "776_A. A Serial Killer",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nvictims = sys.stdin.readline().strip().split()\ndays = int(sys.stdin.readline().strip())\n\nfor day in range(days):\n  print(victims[0] + ' ' + victims[1])\n  newPeople = sys.stdin.readline().strip().split()\n  killed = newPeople[0]\n  replacer = newPeople[1]\n\n  if victims[0] == killed:\n    victims[0] = replacer\n  elif victims[1] == killed:\n    victims[1] = replacer\n\nprint(victims[0] + ' ' + victims[1])\n",
        "correct": true,
        "task_id": "0026",
        "depth": 1
    },
    {
        "description": "There is little time left before the release of the first national operating system BerlOS. Some of its components are not finished yet \u2014 the memory manager is among them. According to the developers' plan, in the first release the memory manager will be very simple and rectilinear. It will support three operations: \n\n  * alloc n \u2014 to allocate n bytes of the memory and return the allocated block's identifier x; \n  * erase x \u2014 to erase the block with the identifier x; \n  * defragment \u2014 to defragment the free memory, bringing all the blocks as close to the beginning of the memory as possible and preserving their respective order; \n\n\n\nThe memory model in this case is very simple. It is a sequence of m bytes, numbered for convenience from the first to the m-th.\n\nThe first operation alloc n takes as the only parameter the size of the memory block that is to be allocated. While processing this operation, a free block of n successive bytes is being allocated in the memory. If the amount of such blocks is more than one, the block closest to the beginning of the memory (i.e. to the first byte) is prefered. All these bytes are marked as not free, and the memory manager returns a 32-bit integer numerical token that is the identifier of this block. If it is impossible to allocate a free block of this size, the function returns NULL.\n\nThe second operation erase x takes as its parameter the identifier of some block. This operation frees the system memory, marking the bytes of this block as free for further use. In the case when this identifier does not point to the previously allocated block, which has not been erased yet, the function returns ILLEGAL_ERASE_ARGUMENT.\n\nThe last operation defragment does not have any arguments and simply brings the occupied memory sections closer to the beginning of the memory without changing their respective order.\n\nIn the current implementation you are to use successive integers, starting with 1, as identifiers. Each successful alloc operation procession should return following number. Unsuccessful alloc operations do not affect numeration.\n\nYou are to write the implementation of the memory manager. You should output the returned value for each alloc command. You should also output ILLEGAL_ERASE_ARGUMENT for all the failed erase commands.\n\nInput\n\nThe first line of the input data contains two positive integers t and m (1 \u2264 t \u2264 100;1 \u2264 m \u2264 100), where t \u2014 the amount of operations given to the memory manager for processing, and m \u2014 the available memory size in bytes. Then there follow t lines where the operations themselves are given. The first operation is alloc n (1 \u2264 n \u2264 100), where n is an integer. The second one is erase x, where x is an arbitrary 32-bit integer numerical token. The third operation is defragment. \n\nOutput\n\nOutput the sequence of lines. Each line should contain either the result of alloc operation procession , or ILLEGAL_ERASE_ARGUMENT as a result of failed erase operation procession. Output lines should go in the same order in which the operations are processed. Successful procession of alloc operation should return integers, starting with 1, as the identifiers of the allocated blocks.\n\nExamples\n\nInput\n\n6 10\nalloc 5\nalloc 3\nerase 1\nalloc 6\ndefragment\nalloc 6\n\n\nOutput\n\n1\n2\nNULL\n3",
        "task_name": "7_B. Memory Manager",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\ndef ints(s):\n    return [int(x) for x in s.split()]\n\nt, m = ints(stdin.readline())\n\nmem = [0 for i in range(m+2)]\n\nnext_id = 1\n\ndef alloc(size):\n    global mem\n    global next_id\n    i = 1\n    while (i <= m):\n        if mem[i] == 0:\n            j = i + 1\n            while (j < i + size and j <= m and mem[j] == 0):\n                j += 1\n            if j - i == size:\n                for k in range(i, j):\n                    mem[k] = next_id\n                print(next_id)\n                next_id += 1\n                return\n            i = j + 1\n        else:\n            i += 1\n    print(\"NULL\")\n\ndef erase(x):\n    global mem\n    mem[m+1] = x\n    i = mem.index(x)\n    mem[m+1] = 0\n    if i == m+1 or x == 0:\n        print(\"ILLEGAL_ERASE_ARGUMENT\")\n        return\n    while i <= m and mem[i] == x:\n        mem[i] = 0\n        i += 1\n\ndef defragment():\n    global mem\n    mem = [0] + [x for x in mem if x != 0]\n    k = m + 2 - len(mem)\n    mem = mem + [0 for x in range(k)]\n    assert(len(mem) == m+2)\n\nfor i in range(t):\n    xs = stdin.readline().split()\n    if xs[0] == \"alloc\":\n        alloc(int(xs[1]))\n    elif xs[0] == \"erase\":\n        erase(int(xs[1]))\n    elif xs[0] == \"defragment\":\n        defragment()\n    else:\n        while (True): pass",
        "correct": true,
        "task_id": "0027",
        "depth": 2
    },
    {
        "description": "As technologies develop, manufacturers are making the process of unlocking a phone as user-friendly as possible. To unlock its new phone, Arkady's pet dog Mu-mu has to bark the password once. The phone represents a password as a string of two lowercase English letters.\n\nMu-mu's enemy Kashtanka wants to unlock Mu-mu's phone to steal some sensible information, but it can only bark n distinct words, each of which can be represented as a string of two lowercase English letters. Kashtanka wants to bark several words (not necessarily distinct) one after another to pronounce a string containing the password as a substring. Tell if it's possible to unlock the phone in this way, or not.\n\nInput\n\nThe first line contains two lowercase English letters \u2014 the password on the phone.\n\nThe second line contains single integer n (1 \u2264 n \u2264 100) \u2014 the number of words Kashtanka knows.\n\nThe next n lines contain two lowercase English letters each, representing the words Kashtanka knows. The words are guaranteed to be distinct.\n\nOutput\n\nPrint \"YES\" if Kashtanka can bark several words in a line forming a string containing the password, and \"NO\" otherwise.\n\nYou can print each letter in arbitrary case (upper or lower).\n\nExamples\n\nInput\n\nya\n4\nah\noy\nto\nha\n\n\nOutput\n\nYES\n\n\nInput\n\nhp\n2\nht\ntp\n\n\nOutput\n\nNO\n\n\nInput\n\nah\n1\nha\n\n\nOutput\n\nYES\n\nNote\n\nIn the first example the password is \"ya\", and Kashtanka can bark \"oy\" and then \"ah\", and then \"ha\" to form the string \"oyahha\" which contains the password. So, the answer is \"YES\".\n\nIn the second example Kashtanka can't produce a string containing password as a substring. Note that it can bark \"ht\" and then \"tp\" producing \"http\", but it doesn't contain the password \"hp\" as a substring.\n\nIn the third example the string \"hahahaha\" contains \"ah\" as a substring.",
        "task_name": "868_A. Bark to Unlock",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s = raw_input()\nst = []\nfor i in range(input()):\n\tst.append(raw_input())\nprint ['NO', 'YES'][s in st or any(S[1] == s[0] for S in st) and any(S[0] == s[1] for S in st)]",
        "correct": true,
        "task_id": "0028",
        "depth": 1
    },
    {
        "description": "Recenlty Luba got a credit card and started to use it. Let's consider n consecutive days Luba uses the card.\n\nShe starts with 0 money on her account.\n\nIn the evening of i-th day a transaction ai occurs. If ai > 0, then ai bourles are deposited to Luba's account. If ai < 0, then ai bourles are withdrawn. And if ai = 0, then the amount of money on Luba's account is checked.\n\nIn the morning of any of n days Luba can go to the bank and deposit any positive integer amount of burles to her account. But there is a limitation: the amount of money on the account can never exceed d.\n\nIt can happen that the amount of money goes greater than d by some transaction in the evening. In this case answer will be \u00ab-1\u00bb.\n\nLuba must not exceed this limit, and also she wants that every day her account is checked (the days when ai = 0) the amount of money on her account is non-negative. It takes a lot of time to go to the bank, so Luba wants to know the minimum number of days she needs to deposit some money to her account (if it is possible to meet all the requirements). Help her!\n\nInput\n\nThe first line contains two integers n, d (1 \u2264 n \u2264 105, 1 \u2264 d \u2264 109) \u2014the number of days and the money limitation.\n\nThe second line contains n integer numbers a1, a2, ... an ( - 104 \u2264 ai \u2264 104), where ai represents the transaction in i-th day.\n\nOutput\n\nPrint -1 if Luba cannot deposit the money to her account in such a way that the requirements are met. Otherwise print the minimum number of days Luba has to deposit money.\n\nExamples\n\nInput\n\n5 10\n-1 5 0 -5 3\n\n\nOutput\n\n0\n\n\nInput\n\n3 4\n-10 0 20\n\n\nOutput\n\n-1\n\n\nInput\n\n5 10\n-5 0 10 -11 0\n\n\nOutput\n\n2",
        "task_name": "893_D. Credit Card",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "f = lambda: map(int,raw_input().split())\nn, d = f()\nh = s = k = 0\nfor q in f():\n    h, s = h + q, min(d, s + q)\n    if h > d:\n        k = -1\n        break\n    if q == 0:\n        h = max(0, h)\n        if s < 0: s, k = d, k + 1\nprint(k)",
        "correct": true,
        "task_id": "0029",
        "depth": 1
    },
    {
        "description": "Luba thinks about watering her garden. The garden can be represented as a segment of length k. Luba has got n buckets, the i-th bucket allows her to water some continuous subsegment of garden of length exactly ai each hour. Luba can't water any parts of the garden that were already watered, also she can't water the ground outside the garden.\n\nLuba has to choose one of the buckets in order to water the garden as fast as possible (as mentioned above, each hour she will water some continuous subsegment of length ai if she chooses the i-th bucket). Help her to determine the minimum number of hours she has to spend watering the garden. It is guaranteed that Luba can always choose a bucket so it is possible water the garden.\n\nSee the examples for better understanding.\n\nInput\n\nThe first line of input contains two integer numbers n and k (1 \u2264 n, k \u2264 100) \u2014 the number of buckets and the length of the garden, respectively.\n\nThe second line of input contains n integer numbers ai (1 \u2264 ai \u2264 100) \u2014 the length of the segment that can be watered by the i-th bucket in one hour.\n\nIt is guaranteed that there is at least one bucket such that it is possible to water the garden in integer number of hours using only this bucket.\n\nOutput\n\nPrint one integer number \u2014 the minimum number of hours required to water the garden.\n\nExamples\n\nInput\n\n3 6\n2 3 5\n\n\nOutput\n\n2\n\n\nInput\n\n6 7\n1 2 3 4 5 6\n\n\nOutput\n\n7\n\nNote\n\nIn the first test the best option is to choose the bucket that allows to water the segment of length 3. We can't choose the bucket that allows to water the segment of length 5 because then we can't water the whole garden.\n\nIn the second test we can choose only the bucket that allows us to water the segment of length 1.",
        "task_name": "915_A. Garden",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a, n = map(int, raw_input().split())\nbs = map(int, raw_input().split())\nbs = sorted(bs, reverse=True)\nfor b in bs:\n    if(n%b==0):\n        print(n/b)\n        exit(0)\n",
        "correct": true,
        "task_id": "0030",
        "depth": 1
    },
    {
        "description": "You and your friend are participating in a TV show \"Run For Your Prize\".\n\nAt the start of the show n prizes are located on a straight line. i-th prize is located at position ai. Positions of all prizes are distinct. You start at position 1, your friend \u2014 at position 106 (and there is no prize in any of these two positions). You have to work as a team and collect all prizes in minimum possible time, in any order.\n\nYou know that it takes exactly 1 second to move from position x to position x + 1 or x - 1, both for you and your friend. You also have trained enough to instantly pick up any prize, if its position is equal to your current position (and the same is true for your friend). Carrying prizes does not affect your speed (or your friend's speed) at all.\n\nNow you may discuss your strategy with your friend and decide who will pick up each prize. Remember that every prize must be picked up, either by you or by your friend.\n\nWhat is the minimum number of seconds it will take to pick up all the prizes?\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 105) \u2014 the number of prizes.\n\nThe second line contains n integers a1, a2, ..., an (2 \u2264 ai \u2264 106 - 1) \u2014 the positions of the prizes. No two prizes are located at the same position. Positions are given in ascending order.\n\nOutput\n\nPrint one integer \u2014 the minimum number of seconds it will take to collect all prizes.\n\nExamples\n\nInput\n\n3\n2 3 9\n\n\nOutput\n\n8\n\n\nInput\n\n2\n2 999995\n\n\nOutput\n\n5\n\nNote\n\nIn the first example you take all the prizes: take the first at 1, the second at 2 and the third at 8.\n\nIn the second example you take the first prize in 1 second and your friend takes the other in 5 seconds, you do this simultaneously, so the total time is 5.",
        "task_name": "938_B. Run For Your Prize",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\nprize_indexes = raw_input()\nprize_indexes = [int(x) for x in prize_indexes.split(' ')]\n\nmy_seconds = 0\nfriends_seconds = 0\nfor i in prize_indexes:\n\tif i <= 5*10**5:\n\t\tmy_seconds = i - 1\n\telse:\n\t\tfriends_seconds = 10**6 - i\n\nprint (max(my_seconds, friends_seconds))\n\n\n",
        "correct": false,
        "task_id": "0031",
        "depth": 1
    },
    {
        "description": "Adilbek's house is located on a street which can be represented as the OX axis. This street is really dark, so Adilbek wants to install some post lamps to illuminate it. Street has n positions to install lamps, they correspond to the integer numbers from 0 to n - 1 on the OX axis. However, some positions are blocked and no post lamp can be placed there.\n\nThere are post lamps of different types which differ only by their power. When placed in position x, post lamp of power l illuminates the segment [x; x + l]. The power of each post lamp is always a positive integer number.\n\nThe post lamp shop provides an infinite amount of lamps of each type from power 1 to power k. Though each customer is only allowed to order post lamps of exactly one type. Post lamps of power l cost a_l each.\n\nWhat is the minimal total cost of the post lamps of exactly one type Adilbek can buy to illuminate the entire segment [0; n] of the street? If some lamps illuminate any other segment of the street, Adilbek does not care, so, for example, he may place a lamp of power 3 in position n - 1 (even though its illumination zone doesn't completely belong to segment [0; n]).\n\nInput\n\nThe first line contains three integer numbers n, m and k (1 \u2264 k \u2264 n \u2264 10^6, 0 \u2264 m \u2264 n) \u2014 the length of the segment of the street Adilbek wants to illuminate, the number of the blocked positions and the maximum power of the post lamp available.\n\nThe second line contains m integer numbers s_1, s_2, ..., s_m (0 \u2264 s_1 < s_2 < ... s_m < n) \u2014 the blocked positions.\n\nThe third line contains k integer numbers a_1, a_2, ..., a_k (1 \u2264 a_i \u2264 10^6) \u2014 the costs of the post lamps.\n\nOutput\n\nPrint the minimal total cost of the post lamps of exactly one type Adilbek can buy to illuminate the entire segment [0; n] of the street.\n\nIf illumintaing the entire segment [0; n] is impossible, print -1.\n\nExamples\n\nInput\n\n6 2 3\n1 3\n1 2 3\n\n\nOutput\n\n6\n\n\nInput\n\n4 3 4\n1 2 3\n1 10 100 1000\n\n\nOutput\n\n1000\n\n\nInput\n\n5 1 5\n0\n3 3 3 3 3\n\n\nOutput\n\n-1\n\n\nInput\n\n7 4 3\n2 4 5 6\n3 14 15\n\n\nOutput\n\n-1",
        "task_name": "990_E. Post Lamps",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "get = lambda: [int(x) for x in raw_input().split()]\nn, m, k = get()\nblock = get()\na = get()\n     \ncan = [1] * n\nfor x in block:\n    can[x] = 0\nlast_can = [0] * n\nlast = -1\nfor i in range(n):\n    last_can[i] = i if can[i] else last\n    last = last_can[i]\n     \nans = 10**13\nif can[0]:\n    for i in range(k):\n        step = i+1\n        cnt = 1\n        x = 0\n        while x+step < n and last_can[x+step] > x:\n            cnt += 1\n            x = last_can[x+step]\n        if x+step >= n:\n            ans = min(ans, cnt * a[i])\n     \nprint(-1 if ans == 10**13 else ans)\nh=77\n \t\t\t \t  \t \t  \t \t\t\t \t \t\t\t  \t\t\t \t",
        "correct": true,
        "task_id": "0032",
        "depth": 2
    },
    {
        "description": "Takahashi is participating in a programming contest called AXC002, and he has just submitted his code to Problem A.\n\nThe problem has N test cases.\n\nFor each test case i (1\\leq i \\leq N), you are given a string S_i representing the verdict for that test case. Find the numbers of test cases for which the verdict is `AC`, `WA`, `TLE`, and `RE`, respectively.\n\nSee the Output section for the output format.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* S_i is `AC`, `WA`, `TLE`, or `RE`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS_1\n\\vdots\nS_N\n\n\nOutput\n\nLet C_0, C_1, C_2, and C_3 be the numbers of test cases for which the verdict is `AC`, `WA`, `TLE`, and `RE`, respectively. Print the following:\n\n\nAC x C_0\nWA x C_1\nTLE x C_2\nRE x C_3\n\nOutput\n\nLet C_0, C_1, C_2, and C_3 be the numbers of test cases for which the verdict is `AC`, `WA`, `TLE`, and `RE`, respectively. Print the following:\n\n\nAC x C_0\nWA x C_1\nTLE x C_2\nRE x C_3\n\nExamples\n\nInput\n\n6\nAC\nTLE\nAC\nAC\nWA\nTLE\n\n\nOutput\n\nAC x 3\nWA x 1\nTLE x 2\nRE x 0\n\n\nInput\n\n10\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\n\n\nOutput\n\nAC x 10\nWA x 0\nTLE x 0\nRE x 0",
        "task_name": "p02613 AtCoder Beginner Contest 173 - Judge Status Summary",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    n = int(input())\n    s = [input() for _ in range(n)]\n\n    ac = 0\n    wa = 0\n    tle = 0\n    re = 0\n\n    for i in s:\n        if i == \"AC\":\n            ac += 1\n        elif i == \"WA\":\n            wa += 1\n        elif i == \"TLE\":\n            tle += 1\n        elif i == \"RE\":\n            re += 1\n\n    print(\"AC x\", ac)\n    print(\"WA x\", wa)\n    print(\"TLE x\", tle)\n    print(\"RE x\", re)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": true,
        "task_id": "0033",
        "depth": 1
    },
    {
        "description": "There is a staircase with N steps. Takahashi is now standing at the foot of the stairs, that is, on the 0-th step. He can climb up one or two steps at a time.\n\nHowever, the treads of the a_1-th, a_2-th, a_3-th, \\ldots, a_M-th steps are broken, so it is dangerous to set foot on those steps.\n\nHow many are there to climb up to the top step, that is, the N-th step, without setting foot on the broken steps? Find the count modulo 1\\ 000\\ 000\\ 007.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 0 \\leq M \\leq N-1\n* 1 \\leq a_1 < a_2 < ... < a_M \\leq N-1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1\na_2\n.\n.\n.\na_M\n\n\nOutput\n\nPrint the number of ways to climb up the stairs under the condition, modulo 1\\ 000\\ 000\\ 007.\n\nExamples\n\nInput\n\n6 1\n3\n\n\nOutput\n\n4\n\n\nInput\n\n10 2\n4\n5\n\n\nOutput\n\n0\n\n\nInput\n\n100 5\n1\n23\n45\n67\n89\n\n\nOutput\n\n608200469",
        "task_name": "p03013 AtCoder Beginner Contest 129 - Typical Stairs",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, m = map(int, raw_input().split(\" \"))\n\ndp = [0 for i in range(0, n + 1)]\ndp[0] = 1\n\nfor i in range(0, m):\n    a = int(raw_input())\n    dp[a] = -1\n\nfor step in range(1, n + 1):\n    if dp[step] < 0:\n        continue\n\n    ans = 0\n    for prev in [1, 2]:\n        if step - prev >= 0 and dp[step - prev] >= 0:\n            ans += dp[step - prev]\n    dp[step] = ans\n\n# for i in range(0, len(dp)):\n#     print(dp[i])\n\nprint(dp[n] % 1000000007)\n",
        "correct": true,
        "task_id": "0036",
        "depth": 2
    },
    {
        "description": "There are N cities in Republic of AtCoder. The size of the i-th city is A_{i}. Takahashi would like to build N-1 bidirectional roads connecting two cities so that any city can be reached from any other city by using these roads.\n\nAssume that the cost of building a road connecting the i-th city and the j-th city is |i-j| \\times D + A_{i} + A_{j}. For Takahashi, find the minimum possible total cost to achieve the objective.\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq D \\leq 10^9\n* 1 \\leq A_{i} \\leq 10^9\n* A_{i} and D are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN D\nA_1 A_2 ... A_N\n\n\nOutput\n\nPrint the minimum possible total cost.\n\nExamples\n\nInput\n\n3 1\n1 100 1\n\n\nOutput\n\n106\n\n\nInput\n\n3 1000\n1 100 1\n\n\nOutput\n\n2202\n\n\nInput\n\n6 14\n25 171 7 1 17 162\n\n\nOutput\n\n497\n\n\nInput\n\n12 5\n43 94 27 3 69 99 56 25 8 15 46 8\n\n\nOutput\n\n658",
        "task_name": "p03153 KEYENCE Programming Contest 2019 - Connecting Cities",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def main():\n    import sys\n    from collections import defaultdict\n    input = sys.stdin.readline\n\n    class UnionFind():\n        def __init__(self, n):\n            self.n = n\n            self.root = [-1] * (n + 1)\n            self.rnk = [0] * (n + 1)\n\n        def find_root(self, x):\n            if self.root[x] < 0:\n                return x\n            else:\n                self.root[x] = self.find_root(self.root[x])\n                return self.root[x]\n\n        def unite(self, x, y):\n            x = self.find_root(x)\n            y = self.find_root(y)\n            if x == y:\n                return\n            elif self.rnk[x] > self.rnk[y]:\n                self.root[x] += self.root[y]\n                self.root[y] = x\n            else:\n                self.root[y] += self.root[x]\n                self.root[x] = y\n                if self.rnk[x] == self.rnk[y]:\n                    self.rnk[y] += 1\n\n        def isSameGroup(self, x, y):\n            return self.find_root(x) == self.find_root(y)\n\n        def size(self, x):\n            return -self.root[self.find_root(x)]\n\n    class Bit:\n        def __init__(self, n):\n            self.size = n\n            self.inf = 10 ** 15\n            self.tree = [self.inf] * (n + 1)\n\n        def query(self, i):\n            s = self.inf\n            while i > 0:\n                s = min(self.tree[i], s)\n                i -= i & -i\n            return s\n\n        def update(self, i, x):\n            while i <= self.size:\n                self.tree[i] = min(self.tree[i], x)\n                i += i & -i\n\n    N, D = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    tmp = [(a, i+1) for i, a in enumerate(A)]\n    tmp.sort(key=lambda x: x[0])\n    segtree_plus = Bit(N+5)\n    segtree_minus = Bit(N+5)\n    edge = []\n    val2idx_plus = defaultdict(int)\n    val2idx_minus = defaultdict(lambda: N+3)\n    edge_append = edge.append\n    inf = 10**15\n    for a, i in tmp:\n        val_plus = a+D*i\n        val_minus = a-D*i\n        segtree_plus.update(N+1-i, val_plus)\n        segtree_minus.update(i, val_minus)\n        i_ori = val2idx_plus[val_plus]\n        if i > i_ori:\n            val2idx_plus[val_plus] = i\n        i_ori = val2idx_minus[val_minus]\n        if i < i_ori:\n            val2idx_minus[val_minus] = i\n        plus_min = segtree_plus.query(N-i)\n        if plus_min < inf:\n            j_plus = val2idx_plus[plus_min]\n            edge_append((i, j_plus, A[i-1] + A[j_plus-1] + D*(j_plus - i)))\n        minus_min = segtree_minus.query(i-1)\n        if minus_min < inf:\n            j_minus = val2idx_minus[minus_min]\n            edge_append((i, j_minus, A[i-1] + A[j_minus-1] + D * (i - j_minus)))\n\n    edge.sort(key=lambda x: x[2])\n    UF = UnionFind(N + 1)\n    ans = 0\n    for u, v, cost in edge:\n        if UF.isSameGroup(u, v):\n            continue\n        ans += cost\n        UF.unite(u, v)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n",
        "correct": true,
        "task_id": "0037",
        "depth": 1
    },
    {
        "description": "Ringo Mart, a convenience store, sells apple juice.\n\nOn the opening day of Ringo Mart, there were A cans of juice in stock in the morning. Snuke buys B cans of juice here every day in the daytime. Then, the manager checks the number of cans of juice remaining in stock every night. If there are C or less cans, D new cans will be added to the stock by the next morning.\n\nDetermine if Snuke can buy juice indefinitely, that is, there is always B or more cans of juice in stock when he attempts to buy them. Nobody besides Snuke buy juice at this store.\n\nNote that each test case in this problem consists of T queries.\n\nConstraints\n\n* 1 \\leq T \\leq 300\n* 1 \\leq A, B, C, D \\leq 10^{18}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nT\nA_1 B_1 C_1 D_1\nA_2 B_2 C_2 D_2\n:\nA_T B_T C_T D_T\n\n\nIn the i-th query, A = A_i, B = B_i, C = C_i, D = D_i.\n\nOutput\n\nPrint T lines. The i-th line should contain `Yes` if Snuke can buy apple juice indefinitely in the i-th query; `No` otherwise.\n\nExamples\n\nInput\n\n14\n9 7 5 9\n9 7 6 9\n14 10 7 12\n14 10 8 12\n14 10 9 12\n14 10 7 11\n14 10 8 11\n14 10 9 11\n9 10 5 10\n10 10 5 10\n11 10 5 10\n16 10 5 10\n1000000000000000000 17 14 999999999999999985\n1000000000000000000 17 15 999999999999999985\n\n\nOutput\n\nNo\nYes\nNo\nYes\nYes\nNo\nNo\nYes\nNo\nYes\nYes\nNo\nNo\nYes\n\n\nInput\n\n24\n1 2 3 4\n1 2 4 3\n1 3 2 4\n1 3 4 2\n1 4 2 3\n1 4 3 2\n2 1 3 4\n2 1 4 3\n2 3 1 4\n2 3 4 1\n2 4 1 3\n2 4 3 1\n3 1 2 4\n3 1 4 2\n3 2 1 4\n3 2 4 1\n3 4 1 2\n3 4 2 1\n4 1 2 3\n4 1 3 2\n4 2 1 3\n4 2 3 1\n4 3 1 2\n4 3 2 1\n\n\nOutput\n\nNo\nNo\nNo\nNo\nNo\nNo\nYes\nYes\nNo\nNo\nNo\nNo\nYes\nYes\nYes\nNo\nNo\nNo\nYes\nYes\nYes\nNo\nNo\nNo",
        "task_name": "p03297 AtCoder Grand Contest 026 - rng_10s",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from fractions import gcd\ndef F(a, b, c, d):\n\tif a < b or d < b:\n\t\treturn False\n\ta -= c\n\ta %= gcd(b, d)\n\tif a == 0:\n\t\ta = gcd(b, d)\n\treturn a - b >= -c\nfor t in range(input()):\n\ta, b, c, d = map(int, raw_input().split())\n\tprint ['No', 'Yes'][F(a, b, c, d)]\n",
        "correct": true,
        "task_id": "0038",
        "depth": 1
    },
    {
        "description": "There are N students and M checkpoints on the xy-plane.\nThe coordinates of the i-th student (1 \\leq i \\leq N) is (a_i,b_i), and the coordinates of the checkpoint numbered j (1 \\leq j \\leq M) is (c_j,d_j).\nWhen the teacher gives a signal, each student has to go to the nearest checkpoint measured in Manhattan distance.\nThe Manhattan distance between two points (x_1,y_1) and (x_2,y_2) is |x_1-x_2|+|y_1-y_2|.\nHere, |x| denotes the absolute value of x.\nIf there are multiple nearest checkpoints for a student, he/she will select the checkpoint with the smallest index.\nWhich checkpoint will each student go to?\n\nConstraints\n\n* 1 \\leq N,M \\leq 50\n* -10^8 \\leq a_i,b_i,c_j,d_j \\leq 10^8\n* All input values are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN M\na_1 b_1\n:\na_N b_N\nc_1 d_1\n:\nc_M d_M\n\n\nOutput\n\nPrint N lines.\nThe i-th line (1 \\leq i \\leq N) should contain the index of the checkpoint for the i-th student to go.\n\nExamples\n\nInput\n\n2 2\n2 0\n0 0\n-1 0\n1 0\n\n\nOutput\n\n2\n1\n\n\nInput\n\n3 4\n10 10\n-10 -10\n3 3\n1 2\n2 3\n3 5\n3 5\n\n\nOutput\n\n3\n1\n2\n\n\nInput\n\n5 5\n-100000000 -100000000\n-100000000 100000000\n100000000 -100000000\n100000000 100000000\n0 0\n0 0\n100000000 100000000\n100000000 -100000000\n-100000000 100000000\n-100000000 -100000000\n\n\nOutput\n\n5\n4\n3\n2\n1",
        "task_name": "p03774 AtCoder Beginner Contest 057 - Checkpoints",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# -*- coding: utf-8 -*-\n\nn,m = map(int,raw_input().split())\n\nstudents = [map(int,raw_input().split()) for _ in range(n)]\ncheckpoints = [map(int,raw_input().split()) for _ in range(m)]\n\n#%%\n\nfor a,b in students:\n    idx = -1\n    dist = 10**9\n    for j in range(m):\n        c,d = checkpoints[j]\n        manhat = abs(a-c)+abs(b-d)\n        if manhat < dist:\n            dist = manhat\n            idx = j+1\n    print(idx)",
        "correct": true,
        "task_id": "0040",
        "depth": 2
    },
    {
        "description": "4 different points on the plane Read the coordinates of $ A (x_a, y_a) $, $ B (x_b, y_b) $, $ C (x_c, y_c) $, $ D (x_d, y_d) $ and read those 4 points Create a program that outputs YES if there is no dent in the quadrangle $ ABCD $ with the coordinates as the vertices, and NO if there is a dent.\n\nA quadrangle with a dent is a quadrangle as shown in Figure 1.\n\n<image>\n\n\n\nInput\n\nGiven multiple datasets. The format of each dataset is as follows.\n\n$ x_a $, $ y_a $, $ x_b $, $ y_b $, $ x_c $, $ y_c $, $ x_d $, $ y_d $\n\n$ x_a $, $ y_a $, $ x_b $, $ y_b $, $ x_c $, $ y_c $, $ x_d $, $ y_d $ are -100 or more and 100 or less, respectively, and are given as real numbers.\n\n1 No more than two points can be lined up on a straight line. Also, if you connect the points in the order of input, the coordinates of the points will be input in the order of forming a quadrangle. (That is, the points are not given in the order shown in Figure 2.)\n\nThe number of datasets does not exceed 100.\n\nOutput\n\nPrint YES or NO on one line for each dataset.\n\nExample\n\nInput\n\n0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0\n0.0,0.0,3.0,0.0,1.0,1.0,1.0,3.0\n\n\nOutput\n\nYES\nNO",
        "task_name": "p00035 Is it Convex?",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import (division, absolute_import, print_function,\n                        unicode_literals)\nfrom sys import stdin\nfrom collections import namedtuple\nPoint = namedtuple('Point', 'x y')\n\ndef make_test(p1, p2):\n    gradient = (p1.y - p2.y) / (p1.x - p2.x)\n    y_intercept = p1.y - gradient * p1.x\n    return lambda p: gradient * p.x + y_intercept > p.y\n\nfor line in stdin:\n    it = (float(s) for s in line.split(','))\n    A, B, C, D = (Point(next(it), next(it)) for _ in xrange(4))\n\n    f = make_test(A, C)\n    g = make_test(B, D)\n    if f(B) == f(D) or g(A) == g(C):\n        print('NO')\n    else:\n        print('YES')",
        "correct": false,
        "task_id": "0042",
        "depth": 1
    },
    {
        "description": "Write a program of the Selection Sort algorithm which sorts a sequence A in ascending order. The algorithm should be based on the following pseudocode:\n\n\nSelectionSort(A)\n1 for i = 0 to A.length-1\n2     mini = i\n3     for j = i to A.length-1\n4         if A[j] < A[mini]\n5             mini = j\n6     swap A[i] and A[mini]\n\n\nNote that, indices for array elements are based on 0-origin.\n\nYour program should also print the number of swap operations defined in line 6 of the pseudocode in the case where i \u2260 mini.\n\nConstraints\n\n1 \u2264 N \u2264 100\n\nInput\n\nThe first line of the input includes an integer N, the number of elements in the sequence.\n\nIn the second line, N elements of the sequence are given separated by space characters.\n\nOutput\n\nThe output consists of 2 lines.\n\nIn the first line, please print the sorted sequence. Two contiguous elements of the sequence should be separated by a space character.\n\nIn the second line, please print the number of swap operations.\n\nExamples\n\nInput\n\n6\n5 6 4 2 1 3\n\n\nOutput\n\n1 2 3 4 5 6\n4\n\n\nInput\n\n6\n5 2 4 6 1 3\n\n\nOutput\n\n1 2 3 4 5 6\n3",
        "task_name": "p02260 Selection Sort",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def trace(a,n) :\n    li=[]\n    for i in xrange(n):\n        li.append(str(a[i]))\n    print(\" \".join(li))\n    \ndef selectionsort(a,n):\n    ct=0\n    for i in xrange(n):\n        if i==n-1:\n            break\n        else :\n            mini=i\n            for j in xrange(i,n,1):\n                if a[j]<a[mini]:\n                    mini=j\n            if i!=mini:\n                keep=a[i]\n                a[i]=a[mini]\n                a[mini]=keep\n                ct+=1\n    return ct\n            \n            \nn=input()\na=map(int,raw_input().split())\nct=selectionsort(a,n)\ntrace(a,n)\nprint(ct)\n                ",
        "correct": true,
        "task_id": "0044",
        "depth": 2
    },
    {
        "description": "Taro is going to play a card game. However, now he has only n cards, even though there should be 52 cards (he has no Jokers).\n\nThe 52 cards include 13 ranks of each of the four suits: spade, heart, club and diamond.\n\nNote\n\n\u89e3\u8aac\n\n\n\nInput\n\nIn the first line, the number of cards n (n \u2264 52) is given.\n\nIn the following n lines, data of the n cards are given. Each card is given by a pair of a character and an integer which represent its suit and rank respectively. A suit is represented by 'S', 'H', 'C' and 'D' for spades, hearts, clubs and diamonds respectively. A rank is represented by an integer from 1 to 13.\n\nOutput\n\nPrint the missing cards. The same as the input format, each card should be printed with a character and an integer separated by a space character in a line. Arrange the missing cards in the following priorities:\n\n* Print cards of spades, hearts, clubs and diamonds in this order.\n* If the suits are equal, print cards with lower ranks first.\n\nExample\n\nInput\n\n47\nS 10\nS 11\nS 12\nS 13\nH 1\nH 2\nS 6\nS 7\nS 8\nS 9\nH 6\nH 8\nH 9\nH 10\nH 11\nH 4\nH 5\nS 2\nS 3\nS 4\nS 5\nH 12\nH 13\nC 1\nC 2\nD 1\nD 2\nD 3\nD 4\nD 5\nD 6\nD 7\nC 3\nC 4\nC 5\nC 6\nC 7\nC 8\nC 9\nC 10\nC 11\nC 13\nD 9\nD 10\nD 11\nD 12\nD 13\n\n\nOutput\n\nS 1\nH 3\nH 7\nC 12\nD 8",
        "task_name": "p02408 Finding Missing Cards",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = input()\nd = {\"S\":[None]*13, \"H\":[None]*13, \"C\":[None]*13, \"D\":[None]*13}\n\nfor i in range(n):\n\tx, y = raw_input().split()\n\td[x][int(y)-1] = True\n\nfor k in [\"S\",\"H\",\"C\",\"D\"]:\n\tfor i in range(13):\n\t\tif d[k][i]:\n\t\t\tcontinue\n\t\tprint (\"%s %d\"%(k, i+1))",
        "correct": true,
        "task_id": "0045",
        "depth": 2
    },
    {
        "description": "At the big break Nastya came to the school dining room. There are n pupils in the school, numbered from 1 to n. Unfortunately, Nastya came pretty late, so that all pupils had already stood in the queue, i.e. Nastya took the last place in the queue. Of course, it's a little bit sad for Nastya, but she is not going to despond because some pupils in the queue can agree to change places with some other pupils.\n\nFormally, there are some pairs u, v such that if the pupil with number u stands directly in front of the pupil with number v, Nastya can ask them and they will change places. \n\nNastya asks you to find the maximal number of places in queue she can move forward. \n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 3 \u22c5 10^{5}, 0 \u2264 m \u2264 5 \u22c5 10^{5}) \u2014 the number of pupils in the queue and number of pairs of pupils such that the first one agrees to change places with the second one if the first is directly in front of the second.\n\nThe second line contains n integers p_1, p_2, ..., p_n \u2014 the initial arrangement of pupils in the queue, from the queue start to its end (1 \u2264 p_i \u2264 n, p is a permutation of integers from 1 to n). In other words, p_i is the number of the pupil who stands on the i-th position in the queue.\n\nThe i-th of the following m lines contains two integers u_i, v_i (1 \u2264 u_i, v_i \u2264 n, u_i \u2260 v_i), denoting that the pupil with number u_i agrees to change places with the pupil with number v_i if u_i is directly in front of v_i. It is guaranteed that if i \u2260 j, than v_i \u2260 v_j or u_i \u2260 u_j. Note that it is possible that in some pairs both pupils agree to change places with each other.\n\nNastya is the last person in the queue, i.e. the pupil with number p_n.\n\nOutput\n\nPrint a single integer \u2014 the number of places in queue she can move forward.\n\nExamples\n\nInput\n\n2 1\n1 2\n1 2\n\n\nOutput\n\n1\n\nInput\n\n3 3\n3 1 2\n1 2\n3 1\n3 2\n\n\nOutput\n\n2\n\nInput\n\n5 2\n3 1 5 4 2\n5 2\n5 4\n\n\nOutput\n\n1\n\nNote\n\nIn the first example Nastya can just change places with the first pupil in the queue.\n\nOptimal sequence of changes in the second example is \n\n  * change places for pupils with numbers 1 and 3. \n  * change places for pupils with numbers 3 and 2. \n  * change places for pupils with numbers 1 and 2. \n\n\n\nThe queue looks like [3, 1, 2], then [1, 3, 2], then [1, 2, 3], and finally [2, 1, 3] after these operations.",
        "task_name": "1136_D. Nastya Is Buying Lunch",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nn, m = rints()\na, b = rints(), [rints() for _ in range(m)]\nadj, tem, ans = [set() for _ in range(n + 1)], [], 0\nadj2 = set()\n\nfor u, v in b:\n    adj[u].add(v)\n    if v == a[-1]:\n        adj2.add(u)\n\nfor i in range(n - 2, -1, -1):\n    if a[i] in adj2:\n        if len(adj[a[i]]) >= len(tem):\n            ans += 1\n            for j in tem:\n                if j not in adj[a[i]]:\n                    ans -= 1\n                    break\n    else:\n        tem.append(a[i])\n\nprint(ans)\n",
        "correct": false,
        "task_id": "0048",
        "depth": 2
    },
    {
        "description": "You are given a string s consisting of n lowercase Latin letters.\n\nLet's define a substring as a contiguous subsegment of a string. For example, \"acab\" is a substring of \"abacaba\" (it starts in position 3 and ends in position 6), but \"aa\" or \"d\" aren't substrings of this string. So the substring of the string s from position l to position r is s[l; r] = s_l s_{l + 1} ... s_r.\n\nYou have to choose exactly one of the substrings of the given string and reverse it (i. e. make s[l; r] = s_r s_{r - 1} ... s_l) to obtain a string that is less lexicographically. Note that it is not necessary to obtain the minimum possible string.\n\nIf it is impossible to reverse some substring of the given string to obtain a string that is less, print \"NO\". Otherwise print \"YES\" and any suitable substring.\n\nString x is lexicographically less than string y, if either x is a prefix of y (and x \u2260 y), or there exists such i (1 \u2264 i \u2264 min(|x|, |y|)), that x_i < y_i, and for any j (1 \u2264 j < i) x_j = y_j. Here |a| denotes the length of the string a. The lexicographic comparison of strings is implemented by operator < in modern programming languages\u200b\u200b.\n\nInput\n\nThe first line of the input contains one integer n (2 \u2264 n \u2264 3 \u22c5 10^5) \u2014 the length of s.\n\nThe second line of the input contains the string s of length n consisting only of lowercase Latin letters.\n\nOutput\n\nIf it is impossible to reverse some substring of the given string to obtain a string which is lexicographically less, print \"NO\". Otherwise print \"YES\" and two indices l and r (1 \u2264 l < r \u2264 n) denoting the substring you have to reverse. If there are multiple answers, you can print any.\n\nExamples\n\nInput\n\n\n7\nabacaba\n\n\nOutput\n\n\nYES\n2 5\n\n\nInput\n\n\n6\naabcfg\n\n\nOutput\n\n\nNO\n\nNote\n\nIn the first testcase the resulting string is \"aacabba\".",
        "task_name": "1155_A. Reverse a Substring",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math\nimport collections\n\nn = map(int, raw_input().split())\nn = n[0]\nc = raw_input()\nflag = False\nfor i in range(n-1):\n    if c[i] > c[i+1]:\n        flag = True\n        pos = i\n\nif flag:\n    print(\"YES\")\n    print(pos+1,pos+2)\nelse:\n    print(\"NO\")\n",
        "correct": false,
        "task_id": "0049",
        "depth": 1
    },
    {
        "description": "You are playing a computer card game called Splay the Sire. Currently you are struggling to defeat the final boss of the game.\n\nThe boss battle consists of n turns. During each turn, you will get several cards. Each card has two parameters: its cost c_i and damage d_i. You may play some of your cards during each turn in some sequence (you choose the cards and the exact order they are played), as long as the total cost of the cards you play during the turn does not exceed 3. After playing some (possibly zero) cards, you end your turn, and all cards you didn't play are discarded. Note that you can use each card at most once.\n\nYour character has also found an artifact that boosts the damage of some of your actions: every 10-th card you play deals double damage.\n\nWhat is the maximum possible damage you can deal during n turns?\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of turns.\n\nThen n blocks of input follow, the i-th block representing the cards you get during the i-th turn.\n\nEach block begins with a line containing one integer k_i (1 \u2264 k_i \u2264 2 \u22c5 10^5) \u2014 the number of cards you get during i-th turn. Then k_i lines follow, each containing two integers c_j and d_j (1 \u2264 c_j \u2264 3, 1 \u2264 d_j \u2264 10^9) \u2014 the parameters of the corresponding card.\n\nIt is guaranteed that \u2211 _{i = 1}^{n} k_i \u2264 2 \u22c5 10^5.\n\nOutput\n\nPrint one integer \u2014 the maximum damage you may deal.\n\nExample\n\nInput\n\n\n5\n3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\n\n\nOutput\n\n\n263\n\nNote\n\nIn the example test the best course of action is as follows:\n\nDuring the first turn, play all three cards in any order and deal 18 damage.\n\nDuring the second turn, play both cards and deal 7 damage.\n\nDuring the third turn, play the first and the third card and deal 13 damage.\n\nDuring the fourth turn, play the first and the third card and deal 25 damage.\n\nDuring the fifth turn, play the only card, which will deal double damage (200).",
        "task_name": "1176_F. Destroy it!",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def search_sum(numbers, target, _max, partial=[]):\n    s = [0, 0]\n    for i in range(len(partial)):\n        s[0] += partial[i][0]\n        s[1] += partial[i][1]\n\n        if (i + 1 + _max[1]) % 10 == 0:\n            s[1] += partial[i][1]\n\n    # check partial sums\n    if(len(s) == 2):\n        if s[0] <= target:\n            if s[1] > _max[0]:\n                # add maximum value\n                _max[1] = len(partial)\n                _max[0] = s[1]\n\n        if s[0] > target:\n            return\n\n    for i in range(len(numbers)):\n        n = numbers[i]\n        remaining = numbers[i+1:]\n        search_sum(remaining, target, _max, partial + [n]) \n\n# get maximum \ndef max_turn_damage(l, played, is_double = False):\n    _max = [0, played]\n    search_sum(l, 3, _max)\n\n    # return values\n    return _max\n\nif __name__ == \"__main__\":\n    # get size\n    n = int(input())\n\n    # read lists\n    result = 0\n    played = 0\n    for k in range(n):\n\n        # read data\n        arr = []\n        size = int(input())\n        for _ in range(size):\n            arr.append([(int(i)) for i in raw_input().split()])\n\n        res = max_turn_damage(arr, played, (k + 1) % 5 == 0)\n        result += res[0]\n        played += res[1]\n    \n    # print result\n    print(result)",
        "correct": false,
        "task_id": "0050",
        "depth": 2
    },
    {
        "description": "Alice is playing with some stones.\n\nNow there are three numbered heaps of stones. The first of them contains a stones, the second of them contains b stones and the third of them contains c stones.\n\nEach time she can do one of two operations:\n\n  1. take one stone from the first heap and two stones from the second heap (this operation can be done only if the first heap contains at least one stone and the second heap contains at least two stones); \n  2. take one stone from the second heap and two stones from the third heap (this operation can be done only if the second heap contains at least one stone and the third heap contains at least two stones). \n\n\n\nShe wants to get the maximum number of stones, but she doesn't know what to do. Initially, she has 0 stones. Can you help her?\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Next t lines describe test cases in the following format:\n\nLine contains three non-negative integers a, b and c, separated by spaces (0 \u2264 a,b,c \u2264 100) \u2014 the number of stones in the first, the second and the third heap, respectively.\n\nIn hacks it is allowed to use only one test case in the input, so t = 1 should be satisfied.\n\nOutput\n\nPrint t lines, the answers to the test cases in the same order as in the input. The answer to the test case is the integer \u2014 the maximum possible number of stones that Alice can take after making some operations. \n\nExample\n\nInput\n\n\n3\n3 4 5\n1 0 5\n5 3 2\n\n\nOutput\n\n\n9\n0\n6\n\nNote\n\nFor the first test case in the first test, Alice can take two stones from the second heap and four stones from the third heap, making the second operation two times. Then she can take one stone from the first heap and two stones from the second heap, making the first operation one time. The summary number of stones, that Alice will take is 9. It is impossible to make some operations to take more than 9 stones, so the answer is 9.",
        "task_name": "1236_A. Stones",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nt = int(sys.stdin.readline())\nfor i in xrange(t):\n    a, b, c = map(int, sys.stdin.readline().split())\n\n    k2 = min(b / 1, c / 2)\n\n    b -= 1 * k2\n    c -= 2 * k2\n\n    k1 = min(a / 1, b / 2)\n    a -= 1 * k1\n    b -= 2 * k1\n\n    print (k1 + k2) * 3\n",
        "correct": true,
        "task_id": "0052",
        "depth": 1
    },
    {
        "description": "You are given two arrays of integers a_1,\u2026,a_n and b_1,\u2026,b_m.\n\nYour task is to find a non-empty array c_1,\u2026,c_k that is a subsequence of a_1,\u2026,a_n, and also a subsequence of b_1,\u2026,b_m. If there are multiple answers, find one of the smallest possible length. If there are still multiple of the smallest possible length, find any. If there are no such arrays, you should report about it.\n\nA sequence a is a subsequence of a sequence b if a can be obtained from b by deletion of several (possibly, zero) elements. For example, [3,1] is a subsequence of [3,2,1] and [4,3,1], but not a subsequence of [1,3,3,7] and [3,10,4].\n\nInput\n\nThe first line contains a single integer t (1\u2264 t\u2264 1000) \u2014 the number of test cases. Next 3t lines contain descriptions of test cases.\n\nThe first line of each test case contains two integers n and m (1\u2264 n,m\u2264 1000) \u2014 the lengths of the two arrays.\n\nThe second line of each test case contains n integers a_1,\u2026,a_n (1\u2264 a_i\u2264 1000) \u2014 the elements of the first array.\n\nThe third line of each test case contains m integers b_1,\u2026,b_m (1\u2264 b_i\u2264 1000) \u2014 the elements of the second array.\n\nIt is guaranteed that the sum of n and the sum of m across all test cases does not exceed 1000 (\u2211_{i=1}^t n_i, \u2211_{i=1}^t m_i\u2264 1000).\n\nOutput\n\nFor each test case, output \"YES\" if a solution exists, or \"NO\" otherwise.\n\nIf the answer is \"YES\", on the next line output an integer k (1\u2264 k\u2264 1000) \u2014 the length of the array, followed by k integers c_1,\u2026,c_k (1\u2264 c_i\u2264 1000) \u2014 the elements of the array.\n\nIf there are multiple solutions with the smallest possible k, output any.\n\nExample\n\nInput\n\n\n5\n4 5\n10 8 6 4\n1 2 3 4 5\n1 1\n3\n3\n1 1\n3\n2\n5 3\n1000 2 2 2 3\n3 1 5\n5 5\n1 2 3 4 5\n1 2 3 4 5\n\n\nOutput\n\n\nYES\n1 4\nYES\n1 3\nNO\nYES\n1 3\nYES\n1 2\n\nNote\n\nIn the first test case, [4] is a subsequence of [10, 8, 6, 4] and [1, 2, 3, 4, 5]. This array has length 1, it is the smallest possible length of a subsequence of both a and b.\n\nIn the third test case, no non-empty subsequences of both [3] and [2] exist, so the answer is \"NO\".",
        "task_name": "1382_A. Common Subsequence",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\ninput=lambda :stdin.readline().strip()\nfor _ in range(int(input())):\n    n,m=[int(i) for i in input().split()]\n    lst1=[int(i) for i in input().split()]\n    lst2=[int(i) for i in input().split()]\n    nk=0\n    lst1=set(lst1)\n    lst2=set(lst2)\n    for i in lst1:\n        if i in lst2:\n            print('YES')\n            print(1,i)\n            nk=1\n            break\n    if nk==0:\n        print('NO')\n",
        "correct": false,
        "task_id": "0053",
        "depth": 2
    },
    {
        "description": "You can't possibly imagine how cold our friends are this winter in Nvodsk! Two of them play the following game to warm up: initially a piece of paper has an integer q. During a move a player should write any integer number that is a non-trivial divisor of the last written number. Then he should run this number of circles around the hotel. Let us remind you that a number's divisor is called non-trivial if it is different from one and from the divided number itself. \n\nThe first person who can't make a move wins as he continues to lie in his warm bed under three blankets while the other one keeps running. Determine which player wins considering that both players play optimally. If the first player wins, print any winning first move.\n\nInput\n\nThe first line contains the only integer q (1 \u2264 q \u2264 1013).\n\nPlease do not use the %lld specificator to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specificator.\n\nOutput\n\nIn the first line print the number of the winning player (1 or 2). If the first player wins then the second line should contain another integer \u2014 his first move (if the first player can't even make the first move, print 0). If there are multiple solutions, print any of them.\n\nExamples\n\nInput\n\n6\n\n\nOutput\n\n2\n\n\nInput\n\n30\n\n\nOutput\n\n1\n6\n\n\nInput\n\n1\n\n\nOutput\n\n1\n0\n\nNote\n\nNumber 6 has only two non-trivial divisors: 2 and 3. It is impossible to make a move after the numbers 2 and 3 are written, so both of them are winning, thus, number 6 is the losing number. A player can make a move and write number 6 after number 30; 6, as we know, is a losing number. Thus, this move will bring us the victory.",
        "task_name": "151_C. Win or Freeze",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\nimport sys\nifs = sys.stdin\nofs = sys.stdout\n\nfrom math import sqrt\n\n\ndef primes_eratosthene_leq_simple(N):\n    primes = [True]*(N+1)\n    #print 'allocated'\n    primes[0] = False\n    primes[1] = False\n    for i in range(2,int(sqrt(N))+1):\n        if primes[i]:\n            L = (N - i*i) // i  + 1\n            primes[i*i:N+1:i] = [False] * L\n    P = [n for n,prime in enumerate(primes) if prime]\n    return P\n\ndef primes_eratosthene_leq_block(N, block_size):\n    #print\n    #print 'finding primes <=', N, 'with block size', block_size\n    SQRT_N = int(sqrt(N))\n    primes = primes_eratosthene_leq_simple(SQRT_N)\n    #print 'generated primes <=',SQRT_N,'== sqrt(n)' \n    #print 'primes:',primes\n    new_primes = []\n    Nb,r = divmod(N-SQRT_N, block_size)\n    if r>0:\n        Nb += 1\n    #print 'number of blocks:', Nb\n    for ib in range(Nb):\n        # calculation\n        block = [True]*block_size\n        block_beg = SQRT_N + ib*block_size\n        #print 'block_beg:',block_beg\n        for p in primes:\n            beg = block_beg % p\n            if beg > 0:\n                beg = p - beg\n            #print 'checking prime',p,'starting from',beg\n            L = (block_size-1 - beg) // p + 1\n            block[beg:block_size:p] = [False]*L\n        # extraction\n        for k in range(block_size):\n            if block[k]:\n                n = block_beg+k\n                if n <= N:\n                    new_primes.append(n)\n\n    primes.extend(new_primes)\n    return primes\n\ndef primes_eratosthene_leq(N):\n    #return primes_simple_eratosthene_leq(N)\n    block_size = 30 * 10**3\n    if N <= block_size:\n        return primes_eratosthene_leq_simple(N)\n    else:\n        return primes_eratosthene_leq_block(N, block_size)\n\ndef solve(N):\n    NN = N\n    P = primes_eratosthene_leq(int(sqrt(N)))\n    #print P\n    D = []\n    for p in P:\n        d,r = divmod(N,p)\n        if r==0:\n            D.append(p)\n            N = d\n        if len(D) > 2:\n            break\n    if N != NN:\n        D.append(N)\n    #print D\n    \n    if len(D) == 0:\n        # N is prime\n        return (1,0)\n    elif len(D) == 2:\n        # N = p1 * p2, where p1 and p2 are primes\n        return (2,0)\n    else:\n        # N have more than 2 prime factors\n        return (1,D[0]*D[1])\n\n\n#import time\n#beg = time.time()\n\nN = int(ifs.readline())\n\nplayer,move = solve(N)\n\nofs.write('%d\\n' % (player))\nif player == 1:\n    ofs.write('%d\\n' % (move))\n\n#end = time.time()\n#print( '[%s] time = %0.3f ms' % ('Overall',(end-beg)*1000.0) )\n",
        "correct": false,
        "task_id": "0054",
        "depth": 2
    },
    {
        "description": "Monocarp and Polycarp are learning new programming techniques. Now they decided to try pair programming.\n\nIt's known that they have worked together on the same file for n + m minutes. Every minute exactly one of them made one change to the file. Before they started, there were already k lines written in the file.\n\nEvery minute exactly one of them does one of two actions: adds a new line to the end of the file or changes one of its lines.\n\nMonocarp worked in total for n minutes and performed the sequence of actions [a_1, a_2, ..., a_n]. If a_i = 0, then he adds a new line to the end of the file. If a_i > 0, then he changes the line with the number a_i. Monocarp performed actions strictly in this order: a_1, then a_2, ..., a_n.\n\nPolycarp worked in total for m minutes and performed the sequence of actions [b_1, b_2, ..., b_m]. If b_j = 0, then he adds a new line to the end of the file. If b_j > 0, then he changes the line with the number b_j. Polycarp performed actions strictly in this order: b_1, then b_2, ..., b_m.\n\nRestore their common sequence of actions of length n + m such that all actions would be correct \u2014 there should be no changes to lines that do not yet exist. Keep in mind that in the common sequence Monocarp's actions should form the subsequence [a_1, a_2, ..., a_n] and Polycarp's \u2014 subsequence [b_1, b_2, ..., b_m]. They can replace each other at the computer any number of times.\n\nLet's look at an example. Suppose k = 3. Monocarp first changed the line with the number 2 and then added a new line (thus, n = 2, \\: a = [2, 0]). Polycarp first added a new line and then changed the line with the number 5 (thus, m = 2, \\: b = [0, 5]).\n\nSince the initial length of the file was 3, in order for Polycarp to change line number 5 two new lines must be added beforehand. Examples of correct sequences of changes, in this case, would be [0, 2, 0, 5] and [2, 0, 0, 5]. Changes [0, 0, 5, 2] (wrong order of actions) and [0, 5, 2, 0] (line 5 cannot be edited yet) are not correct.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000). Then t test cases follow. Before each test case, there is an empty line.\n\nEach test case contains three lines. The first line contains three integers k, n, m (0 \u2264 k \u2264 100, 1 \u2264 n, m \u2264 100) \u2014 the initial number of lines in file and lengths of Monocarp's and Polycarp's sequences of changes respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 300).\n\nThe third line contains m integers b_1, b_2, ..., b_m (0 \u2264 b_j \u2264 300).\n\nOutput\n\nFor each test case print any correct common sequence of Monocarp's and Polycarp's actions of length n + m or -1 if such sequence doesn't exist.\n\nExample\n\nInput\n\n\n5\n\n3 2 2\n2 0\n0 5\n\n4 3 2\n2 0 5\n0 6\n\n0 2 2\n1 0\n2 3\n\n5 4 4\n6 0 8 0\n0 7 0 9\n\n5 4 1\n8 7 8 0\n0\n\n\nOutput\n\n\n2 0 0 5 \n0 2 0 6 5 \n-1\n0 6 0 7 0 8 0 9\n-1",
        "task_name": "1547_C. Pair Programming",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\n\n\ndef main():\n    pass\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\n\n\nt = int(input().rstrip())\nfor _ in range(t):\n    str1 = input()\n    k, n, m = list(map(int, input().rstrip().split()))\n    list1 = list(map(int, input().rstrip().split()))\n    list2 = list(map(int, input().rstrip().split()))\n    list3 = []\n    result = True\n    t1 = 0\n    t2 = 0\n    while True:\n        if t1 == n and t2 == m:\n            break\n        if t1 < n:\n            if list1[t1] == 0:\n                k += 1\n                t1 += 1\n                list3.append(0)\n            else:\n                if list1[t1] <= k:\n                    list3.append(list1[t1])\n                    t1 += 1\n                else:\n                    if t2 == m:\n                        result = False\n                        break\n                    elif list2[t2] > k:\n                        result = False\n                        break\n        if t2 < m:\n            if list2[t2] == 0:\n                k += 1\n                t2 += 1\n                list3.append(0)\n            else:\n                if list2[t2] <= k:\n                    list3.append(list2[t2])\n                    t2 += 1\n                else:\n                    if t1 == n:\n                        result = False\n                        break\n                    elif list1[t1] > k:\n                        result = False\n                        break\n    if result is False:\n        print(-1)\n    else:\n        print(*list3)",
        "correct": true,
        "task_id": "0055",
        "depth": 2
    },
    {
        "description": "A string is called a k-string if it can be represented as k concatenated copies of some string. For example, the string \"aabaabaabaab\" is at the same time a 1-string, a 2-string and a 4-string, but it is not a 3-string, a 5-string, or a 6-string and so on. Obviously any string is a 1-string.\n\nYou are given a string s, consisting of lowercase English letters and a positive integer k. Your task is to reorder the letters in the string s in such a way that the resulting string is a k-string.\n\nInput\n\nThe first input line contains integer k (1 \u2264 k \u2264 1000). The second line contains s, all characters in s are lowercase English letters. The string length s satisfies the inequality 1 \u2264 |s| \u2264 1000, where |s| is the length of string s.\n\nOutput\n\nRearrange the letters in string s in such a way that the result is a k-string. Print the result on a single output line. If there are multiple solutions, print any of them.\n\nIf the solution doesn't exist, print \"-1\" (without quotes).\n\nExamples\n\nInput\n\n2\naazz\n\n\nOutput\n\nazaz\n\n\nInput\n\n3\nabcabcabz\n\n\nOutput\n\n-1",
        "task_name": "219_A. k-String",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=int(raw_input())\ns=raw_input()\nd={}\nfor c in s:\n    d[c]=d.get(c,0)+1\nfor a,b in d.items():\n    if b%n!=0:\n        print -1\n        raise SystemExit()\nprint (\"\".join([a*(b/n) for a,b in d.items()]))*n\n",
        "correct": true,
        "task_id": "0057",
        "depth": 1
    },
    {
        "description": "Manao works on a sports TV. He's spent much time watching the football games of some country. After a while he began to notice different patterns. For example, each team has two sets of uniforms: home uniform and guest uniform. When a team plays a game at home, the players put on the home uniform. When a team plays as a guest on somebody else's stadium, the players put on the guest uniform. The only exception to that rule is: when the home uniform color of the host team matches the guests' uniform, the host team puts on its guest uniform as well. For each team the color of the home and guest uniform is different.\n\nThere are n teams taking part in the national championship. The championship consists of n\u00b7(n - 1) games: each team invites each other team to its stadium. At this point Manao wondered: how many times during the championship is a host team going to put on the guest uniform? Note that the order of the games does not affect this number.\n\nYou know the colors of the home and guest uniform for each team. For simplicity, the colors are numbered by integers in such a way that no two distinct colors have the same number. Help Manao find the answer to his question.\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 30). Each of the following n lines contains a pair of distinct space-separated integers hi, ai (1 \u2264 hi, ai \u2264 100) \u2014 the colors of the i-th team's home and guest uniforms, respectively.\n\nOutput\n\nIn a single line print the number of games where the host team is going to play in the guest uniform.\n\nExamples\n\nInput\n\n3\n1 2\n2 4\n3 4\n\n\nOutput\n\n1\n\n\nInput\n\n4\n100 42\n42 100\n5 42\n100 5\n\n\nOutput\n\n5\n\n\nInput\n\n2\n1 2\n1 2\n\n\nOutput\n\n0\n\nNote\n\nIn the first test case the championship consists of 6 games. The only game with the event in question is the game between teams 2 and 1 on the stadium of team 2.\n\nIn the second test sample the host team will have to wear guest uniform in the games between teams: 1 and 2, 2 and 1, 2 and 3, 3 and 4, 4 and 2 (the host team is written first).",
        "task_name": "268_A. Games",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function\nfrom collections import Counter\n\nn = input()\ndom, vyezd = Counter(), Counter()\nfor i in range(n):\n    a, b = map(int, raw_input().split())\n    dom[a] += 1\n    vyezd[b] += 1\n    \notv = 0\nfor i in dom:\n    otv += vyezd[i]\n\nprint(otv)\n",
        "correct": false,
        "task_id": "0059",
        "depth": 1
    },
    {
        "description": "<image>\n\nInput\n\nThe first line of the input is a string (between 1 and 50 characters long, inclusive). Each character will be a letter of English alphabet, lowercase or uppercase.\n\nThe second line of the input is an integer between 0 and 26, inclusive.\n\nOutput\n\nOutput the required string.\n\nExamples\n\nInput\n\nAprilFool\n14\n\n\nOutput\n\nAprILFooL",
        "task_name": "290_D. Orange",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "mystr = raw_input()\nn = input()\n\nres = []\n\n\ndef cap(c):\n    if ord(c) >= 97:\n        return chr(ord(c) + ord('A') - ord('a'))\n    else :return c\n\ndef decap(c):\n    if ord(c) < 97:\n        return chr(ord(c) + ord('a') - ord('A'))\n    else: return c\n\nmystr = map(decap, mystr)\n\nfor i in mystr:\n    if ord(i) < n + 97:\n        res += [cap(i)]\n    else: \n        res += [decap(i)]\n\nprint (''.join(res))\n",
        "correct": true,
        "task_id": "0060",
        "depth": 1
    },
    {
        "description": "Xenia the beginner mathematician is a third year student at elementary school. She is now learning the addition operation.\n\nThe teacher has written down the sum of multiple numbers. Pupils should calculate the sum. To make the calculation easier, the sum only contains numbers 1, 2 and 3. Still, that isn't enough for Xenia. She is only beginning to count, so she can calculate a sum only if the summands follow in non-decreasing order. For example, she can't calculate sum 1+3+2+1 but she can calculate sums 1+1+2 and 3+3.\n\nYou've got the sum that was written on the board. Rearrange the summans and print the sum in such a way that Xenia can calculate the sum.\n\nInput\n\nThe first line contains a non-empty string s \u2014 the sum Xenia needs to count. String s contains no spaces. It only contains digits and characters \"+\". Besides, string s is a correct sum of numbers 1, 2 and 3. String s is at most 100 characters long.\n\nOutput\n\nPrint the new sum that Xenia can count.\n\nExamples\n\nInput\n\n3+2+1\n\n\nOutput\n\n1+2+3\n\n\nInput\n\n1+1+3+1+3\n\n\nOutput\n\n1+1+1+3+3\n\n\nInput\n\n2\n\n\nOutput\n\n2",
        "task_name": "339_A. Helpful Maths",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a = raw_input()\n#print type(a)\nlist=[]\nlist1=[]\nlist2=[]\nfor i in a:\n    list.append(i)\nfor j in range(len(list)):\n    if (j+1)%2==1:\n        list1.append(list[j])\n        list1.sort()\n        a=len(list1)\n#print a\n\nfor i in range(len(list1)):\n    list2.append(list1[i])\n    if a>1:\n        list2.append(\"+\")\nprint(''.join(map(str, list2[:-1])))\n",
        "correct": false,
        "task_id": "0061",
        "depth": 1
    },
    {
        "description": "The bear decided to store some raspberry for the winter. He cunningly found out the price for a barrel of honey in kilos of raspberry for each of the following n days. According to the bear's data, on the i-th (1 \u2264 i \u2264 n) day, the price for one barrel of honey is going to is xi kilos of raspberry.\n\nUnfortunately, the bear has neither a honey barrel, nor the raspberry. At the same time, the bear's got a friend who is ready to lend him a barrel of honey for exactly one day for c kilograms of raspberry. That's why the bear came up with a smart plan. He wants to choose some day d (1 \u2264 d < n), lent a barrel of honey and immediately (on day d) sell it according to a daily exchange rate. The next day (d + 1) the bear wants to buy a new barrel of honey according to a daily exchange rate (as he's got some raspberry left from selling the previous barrel) and immediately (on day d + 1) give his friend the borrowed barrel of honey as well as c kilograms of raspberry for renting the barrel.\n\nThe bear wants to execute his plan at most once and then hibernate. What maximum number of kilograms of raspberry can he earn? Note that if at some point of the plan the bear runs out of the raspberry, then he won't execute such a plan.\n\nInput\n\nThe first line contains two space-separated integers, n and c (2 \u2264 n \u2264 100, 0 \u2264 c \u2264 100), \u2014 the number of days and the number of kilos of raspberry that the bear should give for borrowing the barrel.\n\nThe second line contains n space-separated integers x1, x2, ..., xn (0 \u2264 xi \u2264 100), the price of a honey barrel on day i.\n\nOutput\n\nPrint a single integer \u2014 the answer to the problem.\n\nExamples\n\nInput\n\n5 1\n5 10 7 3 20\n\n\nOutput\n\n3\n\n\nInput\n\n6 2\n100 1 10 40 10 40\n\n\nOutput\n\n97\n\n\nInput\n\n3 0\n1 2 3\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample the bear will lend a honey barrel at day 3 and then sell it for 7. Then the bear will buy a barrel for 3 and return it to the friend. So, the profit is (7 - 3 - 1) = 3.\n\nIn the second sample bear will lend a honey barrel at day 1 and then sell it for 100. Then the bear buy the barrel for 1 at the day 2. So, the profit is (100 - 1 - 2) = 97.",
        "task_name": "385_A. Bear and Raspberry",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def fun():\n\tstring = raw_input()\n\t(N,C) = string.split(' ')\n\tN = int(N)\n\tC = int(C)\n\tx = raw_input().split(' ')\n\ttem = 0\n\tfor i in range(N):\n\t\tx[i] = int(x[i])\n\tfor i in range(len(x)-1):\n\t\tif(tem<=(x[i]-x[i+1])and(x[i]-x[i+1]-C>0)):\n\t\t\ttem = x[i]-x[i+1]\n\tif tem>0:\n\t\ttem = tem - C\n\treturn tem",
        "correct": false,
        "task_id": "0062",
        "depth": 1
    },
    {
        "description": "Kitahara Haruki has bought n apples for Touma Kazusa and Ogiso Setsuna. Now he wants to divide all the apples between the friends.\n\nEach apple weights 100 grams or 200 grams. Of course Kitahara Haruki doesn't want to offend any of his friend. Therefore the total weight of the apples given to Touma Kazusa must be equal to the total weight of the apples given to Ogiso Setsuna.\n\nBut unfortunately Kitahara Haruki doesn't have a knife right now, so he cannot split any apple into some parts. Please, tell him: is it possible to divide all the apples in a fair way between his friends?\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 100) \u2014 the number of apples. The second line contains n integers w1, w2, ..., wn (wi = 100 or wi = 200), where wi is the weight of the i-th apple.\n\nOutput\n\nIn a single line print \"YES\" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print \"NO\" (without the quotes).\n\nExamples\n\nInput\n\n3\n100 200 100\n\n\nOutput\n\nYES\n\n\nInput\n\n4\n100 100 100 200\n\n\nOutput\n\nNO\n\nNote\n\nIn the first test sample Kitahara Haruki can give the first and the last apple to Ogiso Setsuna and the middle apple to Touma Kazusa.",
        "task_name": "433_A. Kitahara Haruki's Gift",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env pypy\nfrom __future__ import division, print_function\nfrom collections import defaultdict, Counter, deque\nfrom future_builtins import ascii, filter, hex, map, oct, zip\nfrom itertools import imap as map, izip as zip, permutations, combinations, combinations_with_replacement\nfrom __builtin__ import xrange as range\nfrom math import ceil, factorial\nfrom _continuation import continulet\nfrom cStringIO import StringIO\nfrom io import IOBase\nimport __pypy__\nfrom bisect import bisect, insort, bisect_left, bisect_right\nfrom fractions import Fraction\nfrom functools import reduce\nimport string\nimport sys\nimport os\nimport re\ninf = float('inf')\nmod_ = int(1e9) + 7\nmod = 998244353\n\ndef factors(n):\n    from functools import reduce\n    return set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n\ndef sieve():\n    n,m=1,10**6\n    primes = {}\n    arr=set([])\n    for i in range(2, round(m ** 0.5) + 1):\n        a = n // i\n        b = m // i\n        for k in range(max(2, a), b + 1):\n            c = i * k\n            primes[c] = 1\n\n    for i in range(max(n, 2), m + 1):\n        if i not in primes:\n            arr.add(i)\n\n    return arr\n\ndef nc2(x):\n    return (x*(x-1))//2\ndef main():\n    n=int(input())\n    arr=list(map(int,input().split()))\n    if sum(arr)%2==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n        \n\n\n   \n    \n\n\n\n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\nclass FastI(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = StringIO()\n        self.newlines = 0\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(\"\\n\") + (not b)\n            ptr = self._buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(b), self._buffer.seek(ptr)\n        self.newlines -= 1\n        return self._buffer.readline()\n\n\nclass FastO(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = __pypy__.builders.StringBuilder()\n        self.write = lambda s: self._buffer.append(s)\n\n    def flush(self):\n        os.write(self._fd, self._buffer.build())\n        self._buffer = __pypy__.builders.StringBuilder()\n\n\ndef print(*args, **kwargs):\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\nsys.stdin, sys.stdout = FastI(sys.stdin), FastO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()",
        "correct": false,
        "task_id": "0063",
        "depth": 2
    },
    {
        "description": "New Year is coming, and Jaehyun decided to read many books during 2015, unlike this year. He has n books numbered by integers from 1 to n. The weight of the i-th (1 \u2264 i \u2264 n) book is wi.\n\nAs Jaehyun's house is not large enough to have a bookshelf, he keeps the n books by stacking them vertically. When he wants to read a certain book x, he follows the steps described below.\n\n  1. He lifts all the books above book x. \n  2. He pushes book x out of the stack. \n  3. He puts down the lifted books without changing their order. \n  4. After reading book x, he puts book x on the top of the stack. \n\n\n\n<image>\n\nHe decided to read books for m days. In the j-th (1 \u2264 j \u2264 m) day, he will read the book that is numbered with integer bj (1 \u2264 bj \u2264 n). To read the book, he has to use the process described in the paragraph above. It is possible that he decides to re-read the same book several times.\n\nAfter making this plan, he realized that the total weight of books he should lift during m days would be too heavy. So, he decided to change the order of the stacked books before the New Year comes, and minimize the total weight. You may assume that books can be stacked in any possible order. Note that book that he is going to read on certain step isn't considered as lifted on that step. Can you help him?\n\nInput\n\nThe first line contains two space-separated integers n (2 \u2264 n \u2264 500) and m (1 \u2264 m \u2264 1000) \u2014 the number of books, and the number of days for which Jaehyun would read books.\n\nThe second line contains n space-separated integers w1, w2, ..., wn (1 \u2264 wi \u2264 100) \u2014 the weight of each book.\n\nThe third line contains m space separated integers b1, b2, ..., bm (1 \u2264 bj \u2264 n) \u2014 the order of books that he would read. Note that he can read the same book more than once.\n\nOutput\n\nPrint the minimum total weight of books he should lift, which can be achieved by rearranging the order of stacked books.\n\nExamples\n\nInput\n\n3 5\n1 2 3\n1 3 2 3 1\n\n\nOutput\n\n12\n\nNote\n\nHere's a picture depicting the example. Each vertical column presents the stacked books.\n\n<image>",
        "task_name": "500_C. New Year Book Reading",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def fun(a,w):\n\tsu1=0\n\tfor x in a:\n\t\tsu1+=w[x-1]\n\treturn su1\n\nn,m=map(int,raw_input().split())\nw=map(int,raw_input().split())\nb=map(int,raw_input().split())\na=[1014]*n\ncurr=0\nprev=0\nfor i in xrange(m):\n\tif a[b[i]-1]==501:\n\t     prev=fun(list(set(b[:i])),w) \n\telse:\n\t    prev=fun(list(set(b[a[b[i]-1]+1:i])),w)\n\ta[b[i]-1]=i\n\tcurr+=prev\nprint(curr)\n",
        "correct": false,
        "task_id": "0065",
        "depth": 1
    },
    {
        "description": "In this problem you will meet the simplified model of game King of Thieves.\n\nIn a new ZeptoLab game called \"King of Thieves\" your aim is to reach a chest with gold by controlling your character, avoiding traps and obstacles on your way.\n\n<image>\n\nAn interesting feature of the game is that you can design your own levels that will be available to other players. Let's consider the following simple design of a level.\n\nA dungeon consists of n segments located at a same vertical level, each segment is either a platform that character can stand on, or a pit with a trap that makes player lose if he falls into it. All segments have the same length, platforms on the scheme of the level are represented as '*' and pits are represented as '.'. \n\nOne of things that affects speedrun characteristics of the level is a possibility to perform a series of consecutive jumps of the same length. More formally, when the character is on the platform number i1, he can make a sequence of jumps through the platforms i1 < i2 < ... < ik, if i2 - i1 = i3 - i2 = ... = ik - ik - 1. Of course, all segments i1, i2, ... ik should be exactly the platforms, not pits. \n\nLet's call a level to be good if you can perform a sequence of four jumps of the same length or in the other words there must be a sequence i1, i2, ..., i5, consisting of five platforms so that the intervals between consecutive platforms are of the same length. Given the scheme of the level, check if it is good.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of segments on the level.\n\nNext line contains the scheme of the level represented as a string of n characters '*' and '.'.\n\nOutput\n\nIf the level is good, print the word \"yes\" (without the quotes), otherwise print the word \"no\" (without the quotes).\n\nExamples\n\nInput\n\n16\n.**.*..*.***.**.\n\n\nOutput\n\nyes\n\nInput\n\n11\n.*.*...*.*.\n\n\nOutput\n\nno\n\nNote\n\nIn the first sample test you may perform a sequence of jumps through platforms 2, 5, 8, 11, 14.",
        "task_name": "526_A. King of Thieves",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function\n\ndef try_hop(field, i):\n\tfor slice_len in xrange(1, len(field)+1):\n\t\tres = field[i::slice_len]\n\t\t#print(i, slice_len, res)\n\t\tif len(res) == 5 and set(res) == {'*'}:\n\t\t\treturn slice_len\n\treturn 0\n\ndef main():\n\tn = int(raw_input())\n\tfield = raw_input()\n\twin = False\n\tfor i in xrange(n):\n\t\tif field[i] != '.':\n\t\t\tslice_len = try_hop(field, i)\n\t\t\tif slice_len:\n\t\t\t\tj = i+4*slice_len\n\t\t\t\t#print(j)\n\t\t\t\tif j+slice_len >= n or field[j+slice_len] == '*':\n\t\t\t\t\twin = True\n\t\t\t\t\tbreak\n\tif win:\n\t\tprint('yes')\n\telse:\n\t\tprint('no')\n\nif __name__ == '__main__':\n\tmain()\n\n",
        "correct": false,
        "task_id": "0066",
        "depth": 1
    },
    {
        "description": "Professor GukiZ doesn't accept string as they are. He likes to swap some letters in string to obtain a new one.\n\nGukiZ has strings a, b, and c. He wants to obtain string k by swapping some letters in a, so that k should contain as many non-overlapping substrings equal either to b or c as possible. Substring of string x is a string formed by consecutive segment of characters from x. Two substrings of string x overlap if there is position i in string x occupied by both of them.\n\nGukiZ was disappointed because none of his students managed to solve the problem. Can you help them and find one of possible strings k?\n\nInput\n\nThe first line contains string a, the second line contains string b, and the third line contains string c (1 \u2264 |a|, |b|, |c| \u2264 105, where |s| denotes the length of string s).\n\nAll three strings consist only of lowercase English letters. \n\nIt is possible that b and c coincide.\n\nOutput\n\nFind one of possible strings k, as described in the problem statement. If there are multiple possible answers, print any of them.\n\nExamples\n\nInput\n\naaa\na\nb\n\n\nOutput\n\naaa\n\nInput\n\npozdravstaklenidodiri\nniste\ndobri\n\n\nOutput\n\nnisteaadddiiklooprrvz\n\nInput\n\nabbbaaccca\nab\naca\n\n\nOutput\n\nababacabcc\n\nNote\n\nIn the third sample, this optimal solutions has three non-overlaping substrings equal to either b or c on positions 1 \u2013 2 (ab), 3 \u2013 4 (ab), 5 \u2013 7 (aca). In this sample, there exist many other optimal solutions, one of them would be acaababbcc.",
        "task_name": "551_B. ZgukistringZ",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from collections import defaultdict\nimport sys\n\na = raw_input()\nb = raw_input()\nc = raw_input()\n\ndef table(word):\n    table = defaultdict(int)\n    for char in word:\n        table[char] += 1\n    return table\n\nta = table(a)\ntb = table(b)\ntc = table(c)\n\nmaxb = min([ta[char] / tb[char] for char in tb])\nans = maxb\nbocc = maxb\nfor i in range(1, maxb + 1):\n    maxc = min([(ta[char] - tb[char] * i) / tc[char] for char in tc])\n    if maxc + i > ans:\n        ans = maxc + i\n        bocc = i\n\nfor i in range(bocc):\n    sys.stdout.write(b)\n\nfor i in range(ans - bocc):\n    sys.stdout.write(c)\n\nfor char in ta:\n    rem = ta[char] - bocc * tb[char] - (ans - bocc) * tb[char]\n    for i in range(rem):\n        sys.stdout.write(char)\n\n\n",
        "correct": false,
        "task_id": "0067",
        "depth": 2
    },
    {
        "description": "You are given a sequence of n integers a1, a2, ..., an. \n\nDetermine a real number x such that the weakness of the sequence a1 - x, a2 - x, ..., an - x is as small as possible.\n\nThe weakness of a sequence is defined as the maximum value of the poorness over all segments (contiguous subsequences) of a sequence.\n\nThe poorness of a segment is defined as the absolute value of sum of the elements of segment.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 200 000), the length of a sequence.\n\nThe second line contains n integers a1, a2, ..., an (|ai| \u2264 10 000).\n\nOutput\n\nOutput a real number denoting the minimum possible weakness of a1 - x, a2 - x, ..., an - x. Your answer will be considered correct if its relative or absolute error doesn't exceed 10 - 6.\n\nExamples\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\n1.000000000000000\n\n\nInput\n\n4\n1 2 3 4\n\n\nOutput\n\n2.000000000000000\n\n\nInput\n\n10\n1 10 2 9 3 8 4 7 5 6\n\n\nOutput\n\n4.500000000000000\n\nNote\n\nFor the first case, the optimal value of x is 2 so the sequence becomes  - 1, 0, 1 and the max poorness occurs at the segment \"-1\" or segment \"1\". The poorness value (answer) equals to 1 in this case. \n\nFor the second sample the optimal value of x is 2.5 so the sequence becomes  - 1.5, - 0.5, 0.5, 1.5 and the max poorness occurs on segment \"-1.5 -0.5\" or \"0.5 1.5\". The poorness value (answer) equals to 2 in this case.",
        "task_name": "578_C. Weakness and Poorness",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\nfrom itertools import permutations \nimport threading,bisect,math,heapq,sys\nfrom collections import deque\n# threading.stack_size(2**27)\n# sys.setrecursionlimit(10**4)\nfrom sys import stdin, stdout\ni_m=9223372036854775807    \ndef cin():\n    return map(int,sin().split())\ndef ain():                           #takes array as input\n    return list(map(int,sin().split()))\ndef sin():\n    return input()\ndef inin():\n    return int(input()) \nprime=[]\ndef dfs(n,d,v):\n    v[n]=1\n    x=d[n]\n    for i in x:\n        if i not in v:\n            dfs(i,d,v)\n    return p \n\"\"\"**************************MAIN*****************************\"\"\"\ndef main():\n    def f(x,a):\n        b=0\n        mx=0\n        mi=0\n        for i in range(len(a)):\n            b+=a[i]-x\n            mx=max(b,mx)\n            mi=min(b,mi)\n        ans=mx-mi\n        return ans\n    n=inin()\n    a=ain()\n    l=-100005\n    r=100005\n    h=101\n    ans=i_m\n    while(h>0):\n        h-=1\n        m1=l+(r-l)/3\n        m2=r-(r-l)/3\n        p=f(m1,a)\n        q=f(m2,a)\n        ans=min(p,q,ans)\n        if p<=q:\n            r=m2\n        else:\n            l=m1\n    print(ans)\n\n\"\"\"***********************************************\"\"\"\ndef block(x): \n      \n    v = []  \n    while (x > 0): \n        v.append(int(x % 2)) \n        x = int(x / 2) \n    ans=[]\n    for i in range(0, len(v)): \n        if (v[i] == 1): \n            ans.append(2**i)  \n    return ans \ndef intersection(l,r,ll,rr):\n    # print(l,r,ll,rr)\n    if (ll > r or rr < l): \n            return -1  \n    else: \n        l = max(l, ll) \n        r = min(r, rr)\n    return max(0,r-l) \n######## Python 2 and 3 footer by Pajenegod and c1729\nfac=[]\ndef fact(n,mod):\n    global fac\n    fac.append(1)\n    for i in range(1,n+1):\n        fac.append((fac[i-1]*i)%mod)\n    f=fac[:]\n    return f\ndef nCr(n,r,mod):\n    global fac\n    x=fac[n]\n    y=fac[n-r]\n    z=fac[r]\n    x=moddiv(x,y,mod)\n    return moddiv(x,z,mod)\ndef moddiv(m,n,p):\n    x=pow(n,p-2,p)\n    return (m*x)%p\ndef GCD(x, y): \n    x=abs(x)\n    y=abs(y)\n    if(min(x,y)==0):\n        return max(x,y)\n    while(y): \n        x, y = y, x % y \n    return x \ndef Divisors(n) : \n    l = []  \n    ll=[]\n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if (n % i == 0) : \n            if (n // i == i) : \n                l.append(i) \n            else : \n                l.append(i)\n                ll.append(n//i)\n    l.extend(ll[::-1])\n    return l\ndef SieveOfEratosthenes(n): \n    global prime\n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    f=[]\n    for p in range(2, n): \n        if prime[p]: \n            f.append(p)\n    return f\ndef primeFactors(n): \n    a=[]\n    while n % 2 == 0: \n        a.append(2) \n        n = n // 2 \n    for i in range(3,int(math.sqrt(n))+1,2):  \n        while n % i== 0: \n            a.append(i) \n            n = n // i  \n    if n > 2: \n        a.append(n)\n    return a\n\"\"\"*******************************************************\"\"\"\npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\nimport os\nfrom io import IOBase, BytesIO\nBUFSIZE = 8192\nclass FastIO(BytesIO):\n    newlines = 0\n \n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n \n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0,2), super(FastIO, self).write(s))[0])\n        return s\n \n    def read(self):\n        while self._fill(): pass\n        return super(FastIO,self).read()\n \n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill(); self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s:self.buffer.write(s.encode('ascii'))\n            self.read = lambda:self.buffer.read().decode('ascii')\n            self.readline = lambda:self.buffer.readline().decode('ascii')\n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n') \n# Cout implemented in Python\nclass ostream:\n    def __lshift__(self,a):\n        sys.stdout.write(str(a))\n        return self\ncout = ostream()\nendl = '\\n'\n \n# Read all remaining integers in stdin, type is given by optional argument, this is fast\ndef readnumbers(zero = 0):\n    conv = ord if py2 else lambda x:x\n    A = []; numb = zero; sign = 1; i = 0; s = sys.stdin.buffer.read()\n    try:\n        while True:\n            if s[i] >= b'R' [0]:\n                numb = 10 * numb + conv(s[i]) - 48\n            elif s[i] == b'-' [0]: sign = -1\n            elif s[i] != b'\\r' [0]:\n                A.append(sign*numb)\n                numb = zero; sign = 1\n            i += 1\n    except:pass\n    if s and s[-1] >= b'R' [0]:\n        A.append(sign*numb)\n    return A\n \n# threading.Thread(target=main).start()\nif __name__== \"__main__\":\n  main()",
        "correct": true,
        "task_id": "0068",
        "depth": 2
    },
    {
        "description": "Polycarp is working on a new project called \"Polychat\". Following modern tendencies in IT, he decided, that this project should contain chat as well. To achieve this goal, Polycarp has spent several hours in front of his laptop and implemented a chat server that can process three types of commands:\n\n  * Include a person to the chat ('Add' command). \n  * Remove a person from the chat ('Remove' command). \n  * Send a message from a person to all people, who are currently in the chat, including the one, who sends the message ('Send' command). \n\n\n\nNow Polycarp wants to find out the amount of outgoing traffic that the server will produce while processing a particular set of commands.\n\nPolycarp knows that chat server sends no traffic for 'Add' and 'Remove' commands. When 'Send' command is processed, server sends l bytes to each participant of the chat, where l is the length of the message.\n\nAs Polycarp has no time, he is asking for your help in solving this problem.\n\nInput\n\nInput file will contain not more than 100 commands, each in its own line. No line will exceed 100 characters. Formats of the commands will be the following:\n\n  * +<name> for 'Add' command. \n  * -<name> for 'Remove' command. \n  * <sender_name>:<message_text> for 'Send' command. \n\n\n\n<name> and <sender_name> is a non-empty sequence of Latin letters and digits. <message_text> can contain letters, digits and spaces, but can't start or end with a space. <message_text> can be an empty line.\n\nIt is guaranteed, that input data are correct, i.e. there will be no 'Add' command if person with such a name is already in the chat, there will be no 'Remove' command if there is no person with such a name in the chat etc.\n\nAll names are case-sensitive.\n\nOutput\n\nPrint a single number \u2014 answer to the problem.\n\nExamples\n\nInput\n\n+Mike\nMike:hello\n+Kate\n+Dmitry\n-Dmitry\nKate:hi\n-Kate\n\n\nOutput\n\n9\n\n\nInput\n\n+Mike\n-Mike\n+Mike\nMike:Hi   I am here\n-Mike\n+Kate\n-Kate\n\n\nOutput\n\n14",
        "task_name": "5_A. Chat Server's Outgoing Traffic",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "count = 0\ntotal = 0\nwhile 1:\n\ttry:\n\t\ts = raw_input()\n\texcept:\n\t\tbreak\n\tif len(s) == 0:\n\t\tbreak\n\tif s[0] == '+':\n\t\tcount += 1\n\telif s[0] == '-':\n\t\tcount -= 1\n\telse:\n\t\tindex = s.index(':')\n\t\tlength = len(s)-index-1\n\t\ttotal += length * count\n\t\n\n",
        "correct": false,
        "task_id": "0069",
        "depth": 1
    },
    {
        "description": "Wet Shark asked Rat Kwesh to generate three positive real numbers x, y and z, from 0.1 to 200.0, inclusive. Wet Krash wants to impress Wet Shark, so all generated numbers will have exactly one digit after the decimal point.\n\nWet Shark knows Rat Kwesh will want a lot of cheese. So he will give the Rat an opportunity to earn a lot of cheese. He will hand the three numbers x, y and z to Rat Kwesh, and Rat Kwesh will pick one of the these twelve options:\n\n  1. a1 = xyz; \n  2. a2 = xzy; \n  3. a3 = (xy)z; \n  4. a4 = (xz)y; \n  5. a5 = yxz; \n  6. a6 = yzx; \n  7. a7 = (yx)z; \n  8. a8 = (yz)x; \n  9. a9 = zxy; \n  10. a10 = zyx; \n  11. a11 = (zx)y; \n  12. a12 = (zy)x. \n\n\n\nLet m be the maximum of all the ai, and c be the smallest index (from 1 to 12) such that ac = m. Rat's goal is to find that c, and he asks you to help him. Rat Kwesh wants to see how much cheese he gets, so he you will have to print the expression corresponding to that ac.\n\nInput\n\nThe only line of the input contains three space-separated real numbers x, y and z (0.1 \u2264 x, y, z \u2264 200.0). Each of x, y and z is given with exactly one digit after the decimal point.\n\nOutput\n\nFind the maximum value of expression among xyz, xzy, (xy)z, (xz)y, yxz, yzx, (yx)z, (yz)x, zxy, zyx, (zx)y, (zy)x and print the corresponding expression. If there are many maximums, print the one that comes first in the list. \n\nxyz should be outputted as x^y^z (without brackets), and (xy)z should be outputted as (x^y)^z (quotes for clarity). \n\nExamples\n\nInput\n\n1.1 3.4 2.5\n\n\nOutput\n\nz^y^x\n\n\nInput\n\n2.0 2.0 2.0\n\n\nOutput\n\nx^y^z\n\n\nInput\n\n1.9 1.8 1.7\n\n\nOutput\n\n(x^y)^z",
        "task_name": "621_D. Rat Kwesh and Cheese",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from math import log\n\ndef calculateExp(x, y, z, k):\n\tif(k == 1):\n\t\treturn x**(y**z), \"x^y^z\"\n\telif(k == 2):\n\t\treturn x**(z**y), \"x^z^y\"\n\telif(k == 3 or k == 4):\n\t\treturn x**(z*y), \"(x^y)^z\"\n\telif(k == 5):\n\t\treturn y**(x**z), \"y^x^z\"\n\telif(k == 6):\n\t\treturn y**(z**x), \"y^z^x\"\n\telif(k == 7 or k == 8):\n\t\treturn y**(x*z), \"(y^x)^z\"\n\telif(k == 9):\n\t\treturn z**(x**y), \"z^x^y\"\n\telif(k == 10):\n\t\treturn z**(y**x), \"z^y^x\"\n\telif(k == 11 or k == 12):\n\t\treturn z**(x*y), \"(z^x)^y\"\n\ndef calculateLogLog(x, y, z, k):\n\tif(x > 1):\n\t\tif(k == 1):\n\t\t\treturn z * log(y) + log(log(x)), \"x^y^z\"\n\t\telif(k == 2):\n\t\t\treturn y * log(z) + log(log(x)), \"x^z^y\"\n\t\telif(k == 3 or k == 4):\n\t\t\treturn log(y) + log(z) + log(log(x)), \"(x^y)^z\"\n\n\tif(y > 1):\n\t\tif(k == 5):\n\t\t\treturn z * log(x) + log(log(y)), \"y^x^z\"\n\t\telif(k == 6):\n\t\t\treturn x * log(z) + log(log(y)), \"y^z^x\"\n\t\telif(k == 7 or k == 8):\n\t\t\treturn log(x) + log(z) + log(log(y)), \"(y^x)^z\"\n\n\tif(z > 1):\n\t\tif(k == 9):\n\t\t\treturn y * log(x) + log(log(z)), \"z^x^y\"\n\t\telif(k == 10):\n\t\t\treturn x * log(y) + log(log(z)), \"z^y^x\"\n\t\telif(k == 11 or k == 12):\n\t\t\treturn log(x) + log(y) + log(log(z)), \"(z^x)^y\"\n\n\treturn False, \"\"\ndef getAns(x, y, z):\n\tif(max(x,y,z) < 1):\n\t\tmaxNum, ans = 0, \"\"\n\t\tfor i in index:\n\t\t\tt = calculateExp(x, y, z, i)\n\t\t\tif(t[0] > maxNum):\n\t\t\t\tans = t[1]\n\t\t\t\tmaxNum = t[0]\n\t\treturn ans\n\telif(max(x, y, z) == 1):\n\t\tif(x == 1):\n\t\t\treturn \"x^y^z\"\n\t\telif(y == 1):\n\t\t\treturn \"y^x^z\"\n\t\telse:\n\t\t\treturn \"z^x^y\"\n\telse:\n\t\tmaxNum, ans = None, \"\"\n\t\tfor i in index:\n\t\t\tt = calculateLogLog(x, y, z, i)\n\t\t\tif(t[0] != False):\n\t\t\t\tif(maxNum == None or t[0] > maxNum):\n\t\t\t\t\tans = t[1]\n\t\t\t\t\tmaxNum = t[0]\n\t\t\t# print(t, ans)\n\n\t\treturn ans\n\nindex = [1, 2, 3, 5, 6, 7, 9, 10, 11]\nif(__name__ == \"__main__\"):\n\tx, y, z = [float(t) for t in raw_input().split(' ')]\n\t\n\tprint(getAns(x, y, z))",
        "correct": true,
        "task_id": "0070",
        "depth": 1
    },
    {
        "description": "Bearland has n cities, numbered 1 through n. Cities are connected via bidirectional roads. Each road connects two distinct cities. No two roads connect the same pair of cities.\n\nBear Limak was once in a city a and he wanted to go to a city b. There was no direct connection so he decided to take a long walk, visiting each city exactly once. Formally: \n\n  * There is no road between a and b. \n  * There exists a sequence (path) of n distinct cities v1, v2, ..., vn that v1 = a, vn = b and there is a road between vi and vi + 1 for <image>. \n\n\n\nOn the other day, the similar thing happened. Limak wanted to travel between a city c and a city d. There is no road between them but there exists a sequence of n distinct cities u1, u2, ..., un that u1 = c, un = d and there is a road between ui and ui + 1 for <image>.\n\nAlso, Limak thinks that there are at most k roads in Bearland. He wonders whether he remembers everything correctly.\n\nGiven n, k and four distinct cities a, b, c, d, can you find possible paths (v1, ..., vn) and (u1, ..., un) to satisfy all the given conditions? Find any solution or print -1 if it's impossible.\n\nInput\n\nThe first line of the input contains two integers n and k (4 \u2264 n \u2264 1000, n - 1 \u2264 k \u2264 2n - 2) \u2014 the number of cities and the maximum allowed number of roads, respectively.\n\nThe second line contains four distinct integers a, b, c and d (1 \u2264 a, b, c, d \u2264 n).\n\nOutput\n\nPrint -1 if it's impossible to satisfy all the given conditions. Otherwise, print two lines with paths descriptions. The first of these two lines should contain n distinct integers v1, v2, ..., vn where v1 = a and vn = b. The second line should contain n distinct integers u1, u2, ..., un where u1 = c and un = d.\n\nTwo paths generate at most 2n - 2 roads: (v1, v2), (v2, v3), ..., (vn - 1, vn), (u1, u2), (u2, u3), ..., (un - 1, un). Your answer will be considered wrong if contains more than k distinct roads or any other condition breaks. Note that (x, y) and (y, x) are the same road.\n\nExamples\n\nInput\n\n7 11\n2 4 7 3\n\n\nOutput\n\n2 7 1 3 6 5 4\n7 1 5 4 6 2 3\n\n\nInput\n\n1000 999\n10 20 30 40\n\n\nOutput\n\n-1\n\nNote\n\nIn the first sample test, there should be 7 cities and at most 11 roads. The provided sample solution generates 10 roads, as in the drawing. You can also see a simple path of length n between 2 and 4, and a path between 7 and 3.\n\n<image>",
        "task_name": "643_B. Bear and Two Paths",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\nimport sys\n#sys.stdin=open(\"data.txt\")\ninput=sys.stdin.readline\n\n\nn,k=map(int,input().split())\na,b,c,d=map(int,input().split())\n\nif n==4:\n    # special case\n    print(\"-1\")\nelif k>=n+1:\n    # i know that having n+1 roads is possible\n    # assume n>=5\n    # get the chain\n    chain=[a,c]\n    for i in range(1,n+1):\n        if i not in [a,b,c,d]:\n            chain.append(i)\n    chain.append(b)\n    chain.append(d)\n    # print first path\n    p1=list(chain)\n    p1[-1],p1[-2]=p1[-2],p1[-1]\n    print(\" \".join(map(str,p1)))\n    # print second path\n    p2=list(chain)\n    p2[0],p2[1]=p2[1],p2[0]\n    print(\" \".join(map(str,p2)))\nelse:\n    print(\"-1\")",
        "correct": true,
        "task_id": "0071",
        "depth": 1
    },
    {
        "description": "In late autumn evening n robots gathered in the cheerful company of friends. Each robot has a unique identifier \u2014 an integer from 1 to 109.\n\nAt some moment, robots decided to play the game \"Snowball\". Below there are the rules of this game. First, all robots stand in a row. Then the first robot says his identifier. After that the second robot says the identifier of the first robot and then says his own identifier. Then the third robot says the identifier of the first robot, then says the identifier of the second robot and after that says his own. This process continues from left to right until the n-th robot says his identifier.\n\nYour task is to determine the k-th identifier to be pronounced.\n\nInput\n\nThe first line contains two positive integers n and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 min(2\u00b7109, n\u00b7(n + 1) / 2).\n\nThe second line contains the sequence id1, id2, ..., idn (1 \u2264 idi \u2264 109) \u2014 identifiers of roborts. It is guaranteed that all identifiers are different.\n\nOutput\n\nPrint the k-th pronounced identifier (assume that the numeration starts from 1).\n\nExamples\n\nInput\n\n2 2\n1 2\n\n\nOutput\n\n1\n\n\nInput\n\n4 5\n10 4 18 3\n\n\nOutput\n\n4\n\nNote\n\nIn the first sample identifiers of robots will be pronounced in the following order: 1, 1, 2. As k = 2, the answer equals to 1.\n\nIn the second test case identifiers of robots will be pronounced in the following order: 10, 10, 4, 10, 4, 18, 10, 4, 18, 3. As k = 5, the answer equals to 4.",
        "task_name": "670_B. Game of Robots",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def numberN(n):\n\treturn (n * (n + 1)) / 2\n\n\nn, k = str(raw_input()).split()\nn, k = int(n), int(k)\n\nids = str(raw_input()).split()\n\nfor i in range(n, -1, -1):\n\tj = numberN(i)\n\tif(j < k):\n\t\tprint(ids[k-j-1])\n\t\tbreak\n\n  \t\t\t \t\t  \t \t \t     \t \t\t\t\t \t  \t",
        "correct": true,
        "task_id": "0072",
        "depth": 1
    },
    {
        "description": "Vasya is currently at a car rental service, and he wants to reach cinema. The film he has bought a ticket for starts in t minutes. There is a straight road of length s from the service to the cinema. Let's introduce a coordinate system so that the car rental service is at the point 0, and the cinema is at the point s.\n\nThere are k gas stations along the road, and at each of them you can fill a car with any amount of fuel for free! Consider that this operation doesn't take any time, i.e. is carried out instantly.\n\nThere are n cars in the rental service, i-th of them is characterized with two integers ci and vi \u2014 the price of this car rent and the capacity of its fuel tank in liters. It's not allowed to fuel a car with more fuel than its tank capacity vi. All cars are completely fueled at the car rental service.\n\nEach of the cars can be driven in one of two speed modes: normal or accelerated. In the normal mode a car covers 1 kilometer in 2 minutes, and consumes 1 liter of fuel. In the accelerated mode a car covers 1 kilometer in 1 minutes, but consumes 2 liters of fuel. The driving mode can be changed at any moment and any number of times.\n\nYour task is to choose a car with minimum price such that Vasya can reach the cinema before the show starts, i.e. not later than in t minutes. Assume that all cars are completely fueled initially.\n\nInput\n\nThe first line contains four positive integers n, k, s and t (1 \u2264 n \u2264 2\u00b7105, 1 \u2264 k \u2264 2\u00b7105, 2 \u2264 s \u2264 109, 1 \u2264 t \u2264 2\u00b7109) \u2014 the number of cars at the car rental service, the number of gas stations along the road, the length of the road and the time in which the film starts. \n\nEach of the next n lines contains two positive integers ci and vi (1 \u2264 ci, vi \u2264 109) \u2014 the price of the i-th car and its fuel tank capacity.\n\nThe next line contains k distinct integers g1, g2, ..., gk (1 \u2264 gi \u2264 s - 1) \u2014 the positions of the gas stations on the road in arbitrary order.\n\nOutput\n\nPrint the minimum rent price of an appropriate car, i.e. such car that Vasya will be able to reach the cinema before the film starts (not later than in t minutes). If there is no appropriate car, print -1.\n\nExamples\n\nInput\n\n3 1 8 10\n10 8\n5 7\n11 9\n3\n\n\nOutput\n\n10\n\n\nInput\n\n2 2 10 18\n10 4\n20 6\n5 3\n\n\nOutput\n\n20\n\nNote\n\nIn the first sample, Vasya can reach the cinema in time using the first or the third cars, but it would be cheaper to choose the first one. Its price is equal to 10, and the capacity of its fuel tank is 8. Then Vasya can drive to the first gas station in the accelerated mode in 3 minutes, spending 6 liters of fuel. After that he can full the tank and cover 2 kilometers in the normal mode in 4 minutes, spending 2 liters of fuel. Finally, he drives in the accelerated mode covering the remaining 3 kilometers in 3 minutes and spending 6 liters of fuel. ",
        "task_name": "737_A. Road to Cinema",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\n\ndef fast2():\n    import os, sys, atexit\n    from cStringIO import StringIO as BytesIO\n    # range = xrange\n    sys.stdout = BytesIO()\n    atexit.register(lambda: os.write(1, sys.stdout.getvalue()))\n    return BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\n\ninput = fast2()\nrints = lambda: [int(x) for x in input().split()]\nrints_2d = lambda n: [tuple(rints()) for _ in range(n)]\nn, k, s, t = rints()\na, g = sorted(rints_2d(n), key=lambda x: (x[1], x[0])), sorted(rints()) + [s]\n\nbe, en, ans = 0, n - 1, float('inf')\nwhile be <= en:\n    md = (be + en) >> 1\n    fuel, point, time = a[md][1], 0, 0\n\n    for i in range(k + 1):\n        dist = g[i] - point\n        rem = fuel - dist\n        if rem < 0:\n            time = float('inf')\n            break\n        else:\n            x = min(dist, rem)\n            time += x + (dist - x) * 2\n        point = g[i]\n\n    if time > t:\n        be = md + 1\n    else:\n        en = md - 1\n        ans = min(ans, a[md][0])\n\nprint(-1 if ans == float('inf') else ans)\n",
        "correct": false,
        "task_id": "0074",
        "depth": 2
    },
    {
        "description": "Programmers' kids solve this riddle in 5-10 minutes. How fast can you do it?\n\nInput\n\nThe input contains a single integer n (0 \u2264 n \u2264 2000000000).\n\nOutput\n\nOutput a single integer.\n\nExamples\n\nInput\n\n11\n\n\nOutput\n\n2\n\n\nInput\n\n14\n\n\nOutput\n\n0\n\n\nInput\n\n61441\n\n\nOutput\n\n2\n\n\nInput\n\n571576\n\n\nOutput\n\n10\n\n\nInput\n\n2128506\n\n\nOutput\n\n3",
        "task_name": "784_B. Kids' Riddle",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a=int(input())\nb=[1,0,0,0,1,0,1,0,2,1,1,2,0,1,0,0]\nres=0\nif a==0:\n\tres+=b[0]\nwhile a>0:\n\tres+=b[a%16]\n\ta/=16\nprint(res)\n",
        "correct": true,
        "task_id": "0075",
        "depth": 1
    },
    {
        "description": "Tavak and Seyyed are good friends. Seyyed is very funny and he told Tavak to solve the following problem instead of longest-path.\n\nYou are given l and r. For all integers from l to r, inclusive, we wrote down all of their integer divisors except 1. Find the integer that we wrote down the maximum number of times.\n\nSolve the problem to show that it's not a NP problem.\n\nInput\n\nThe first line contains two integers l and r (2 \u2264 l \u2264 r \u2264 109).\n\nOutput\n\nPrint single integer, the integer that appears maximum number of times in the divisors. \n\nIf there are multiple answers, print any of them.\n\nExamples\n\nInput\n\n19 29\n\n\nOutput\n\n2\n\n\nInput\n\n3 6\n\n\nOutput\n\n3\n\nNote\n\nDefinition of a divisor: <https://www.mathsisfun.com/definitions/divisor-of-an-integer-.html>\n\nThe first example: from 19 to 29 these numbers are divisible by 2: {20, 22, 24, 26, 28}.\n\nThe second example: from 3 to 6 these numbers are divisible by 3: {3, 6}.",
        "task_name": "805_A. Fake NP",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "l,r= map(int,raw_input().split())\nif r-l<10:\n\tthree = 0\n\ttwo = 0\n\tfor i in range (l,r+1):\n\t\tif i%3 == 0:\n\t\t\tthree += 1\n\t\tif i%2 == 0:\n\t\t\ttwo += 1\n\tif three==0 and two==0:\n\t\tprint (l)\n\t\texit()\n\tif three>=two:\n\t\tprint (3)\n\telse :\n\t\tprint (2)\nelse:\n\tprint (2)",
        "correct": true,
        "task_id": "0076",
        "depth": 1
    },
    {
        "description": "There are n people and k keys on a straight line. Every person wants to get to the office which is located on the line as well. To do that, he needs to reach some point with a key, take the key and then go to the office. Once a key is taken by somebody, it couldn't be taken by anybody else.\n\nYou are to determine the minimum time needed for all n people to get to the office with keys. Assume that people move a unit distance per 1 second. If two people reach a key at the same time, only one of them can take the key. A person can pass through a point with a key without taking it.\n\nInput\n\nThe first line contains three integers n, k and p (1 \u2264 n \u2264 1 000, n \u2264 k \u2264 2 000, 1 \u2264 p \u2264 109) \u2014 the number of people, the number of keys and the office location.\n\nThe second line contains n distinct integers a1, a2, ..., an (1 \u2264 ai \u2264 109) \u2014 positions in which people are located initially. The positions are given in arbitrary order.\n\nThe third line contains k distinct integers b1, b2, ..., bk (1 \u2264 bj \u2264 109) \u2014 positions of the keys. The positions are given in arbitrary order.\n\nNote that there can't be more than one person or more than one key in the same point. A person and a key can be located in the same point.\n\nOutput\n\nPrint the minimum time (in seconds) needed for all n to reach the office with keys.\n\nExamples\n\nInput\n\n2 4 50\n20 100\n60 10 40 80\n\n\nOutput\n\n50\n\n\nInput\n\n1 2 10\n11\n15 7\n\n\nOutput\n\n7\n\nNote\n\nIn the first example the person located at point 20 should take the key located at point 40 and go with it to the office located at point 50. He spends 30 seconds. The person located at point 100 can take the key located at point 80 and go to the office with it. He spends 50 seconds. Thus, after 50 seconds everybody is in office with keys.",
        "task_name": "830_A. Office Keys",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nfrom collections import Counter, defaultdict\nfrom itertools import permutations, combinations\nraw_input = stdin.readline\npr = stdout.write\n\n\ndef in_num():\n    return int(raw_input())\n\n\ndef in_arr():\n    return map(int,raw_input().split())\n\n\ndef pr_num(n):\n    stdout.write(str(n)+'\\n')\n\n\ndef pr_arr(arr):\n    pr(' '.join(map(str,arr))+'\\n')\n\n# fast read function for total integer input\n\ndef inp():\n    # this function returns whole input of\n    # space/line seperated integers\n    # Use Ctrl+D to flush stdin.\n    return map(int,stdin.read().split())\n\nrange = xrange # not for python 3.0+\n\n# main code\n\nn,k,p=in_arr()\na=in_arr()\nb=in_arr()\na.sort()\nb.sort()\nans=1000000000000\nfor i in range(k-n+1):\n    temp=0\n    for j in range(n):\n        temp=max(temp,int(abs(b[i+j]-a[j])+abs(b[i+j]-p)))\n    ans=min(ans,temp)\npr_num(ans)\n",
        "correct": true,
        "task_id": "0077",
        "depth": 2
    },
    {
        "description": "Two-gram is an ordered pair (i.e. string of length two) of capital Latin letters. For example, \"AZ\", \"AA\", \"ZA\" \u2014 three distinct two-grams.\n\nYou are given a string s consisting of n capital Latin letters. Your task is to find any two-gram contained in the given string as a substring (i.e. two consecutive characters of the string) maximal number of times. For example, for string s = \"BBAABBBA\" the answer is two-gram \"BB\", which contained in s three times. In other words, find any most frequent two-gram.\n\nNote that occurrences of the two-gram can overlap with each other.\n\nInput\n\nThe first line of the input contains integer number n (2 \u2264 n \u2264 100) \u2014 the length of string s. The second line of the input contains the string s consisting of n capital Latin letters.\n\nOutput\n\nPrint the only line containing exactly two capital Latin letters \u2014 any two-gram contained in the given string s as a substring (i.e. two consecutive characters of the string) maximal number of times.\n\nExamples\n\nInput\n\n7\nABACABA\n\n\nOutput\n\nAB\n\n\nInput\n\n5\nZZZAA\n\n\nOutput\n\nZZ\n\nNote\n\nIn the first example \"BA\" is also valid answer.\n\nIn the second example the only two-gram \"ZZ\" can be printed because it contained in the string \"ZZZAA\" two times.",
        "task_name": "977_B. Two-gram",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=input()\ns=raw_input()\nd={}\nfor i in range(1,n):\n\tgram=s[i-1:i+1]\n\tif d.get(gram)==None:\n\t\td[gram]=1\n\telse:\n\t\td[gram]+=1\na = sorted(d.items(), key=lambda x: x[1],reverse=True)\nprint(a[0][0])\n",
        "correct": true,
        "task_id": "0079",
        "depth": 1
    },
    {
        "description": "Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\n\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\n\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\n\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\n\nFind the sum of the satisfaction points he gained.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 20\n* 1 \\leq A_i \\leq N\n* A_1, A_2, ..., A_N are all different.\n* 1 \\leq B_i \\leq 50\n* 1 \\leq C_i \\leq 50\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N\nB_1 B_2 ... B_N\nC_1 C_2 ... C_{N-1}\n\n\nOutput\n\nPrint the sum of the satisfaction points Takahashi gained, as an integer.\n\nExamples\n\nInput\n\n3\n3 1 2\n2 5 4\n3 6\n\n\nOutput\n\n14\n\n\nInput\n\n4\n2 3 4 1\n13 5 8 24\n45 9 15\n\n\nOutput\n\n74\n\n\nInput\n\n2\n1 2\n50 50\n50\n\n\nOutput\n\n150",
        "task_name": "p02916 AtCoder Beginner Contest 140 - Buffet",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\nN = [int(s) for s in raw_input().split(\" \")][0]\nA = [int(s) for s in raw_input().split(\" \")]\nB = [int(s) for s in raw_input().split(\" \")]\nC = [int(s) for s in raw_input().split(\" \")]\n\nres = 0\nfor i in xrange(N):\n    res += B[A[i]-1]\n    if i > 0 and A[i] == A[i-1]+1:\n        print(C[i-1])\n        res += C[A[i-1]-1]\nprint(res)",
        "correct": false,
        "task_id": "0081",
        "depth": 1
    },
    {
        "description": "You are given an integer sequence A of length N and an integer K. You will perform the following operation on this sequence Q times:\n\n* Choose a contiguous subsequence of length K, then remove the smallest element among the K elements contained in the chosen subsequence (if there are multiple such elements, choose one of them as you like).\n\n\n\nLet X and Y be the values of the largest and smallest element removed in the Q operations. You would like X-Y to be as small as possible. Find the smallest possible value of X-Y when the Q operations are performed optimally.\n\nConstraints\n\n* 1 \\leq N \\leq 2000\n* 1 \\leq K \\leq N\n* 1 \\leq Q \\leq N-K+1\n* 1 \\leq A_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K Q\nA_1 A_2 ... A_N\n\n\nOutput\n\nPrint the smallest possible value of X-Y.\n\nExamples\n\nInput\n\n5 3 2\n4 3 1 5 2\n\n\nOutput\n\n1\n\n\nInput\n\n10 1 6\n1 1 2 3 5 8 13 21 34 55\n\n\nOutput\n\n7\n\n\nInput\n\n11 7 5\n24979445 861648772 623690081 433933447 476190629 262703497 211047202 971407775 628894325 731963982 822804784\n\n\nOutput\n\n451211184",
        "task_name": "p03343 AtCoder Regular Contest 098 - Range Minimum Queries",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n , k , q = map(int , input().split())\na = [0] * (n + 1)\nb = list(map ( int , input().split()))\nfor i in range(1 , n + 1):\n\ta[i] = b[i - 1];\ndef check( l , r):\n\tcnt = 0;\n\tln = 0;\n\tres = 0;\n\tfor i in range(1 , n + 1):\n\t\tif a[i] < l:\n\t\t\tres += min(cnt , max(0 , ln - k + 1))\n\t\t\tln = 0;\n\t\t\tcnt = 0;\n\t\telse :\n\t\t\tln += 1;\n\t\t\tif a[i] <= r:\n\t\t\t\tcnt += 1;\n\tres += min(cnt , max(0 , ln - k + 1))\n\tif(res >= q):\n\t\treturn True;\n\treturn False;\t\t\t\t\t\t\n\nl = 0;\nr = 1000000000;\nres = 1000000000;\nwhile(l <= r):\n\tm = (l + r) // 2;\n\tok = 0;\n\tfor i in range(1 , n + 1):\n\t\tok |= check(a[i] - m , a[i]);\n\tif ok == 1:\n\t\tr = m - 1;\n\t\tres = m;\n\telse :\n\t\tl = m + 1;\nprint(res)",
        "correct": false,
        "task_id": "0083",
        "depth": 2
    },
    {
        "description": "Joisino is planning to open a shop in a shopping street.\n\nEach of the five weekdays is divided into two periods, the morning and the evening. For each of those ten periods, a shop must be either open during the whole period, or closed during the whole period. Naturally, a shop must be open during at least one of those periods.\n\nThere are already N stores in the street, numbered 1 through N.\n\nYou are given information of the business hours of those shops, F_{i,j,k}. If F_{i,j,k}=1, Shop i is open during Period k on Day j (this notation is explained below); if F_{i,j,k}=0, Shop i is closed during that period. Here, the days of the week are denoted as follows. Monday: Day 1, Tuesday: Day 2, Wednesday: Day 3, Thursday: Day 4, Friday: Day 5. Also, the morning is denoted as Period 1, and the afternoon is denoted as Period 2.\n\nLet c_i be the number of periods during which both Shop i and Joisino's shop are open. Then, the profit of Joisino's shop will be P_{1,c_1}+P_{2,c_2}+...+P_{N,c_N}.\n\nFind the maximum possible profit of Joisino's shop when she decides whether her shop is open during each period, making sure that it is open during at least one period.\n\nConstraints\n\n* 1\u2264N\u2264100\n* 0\u2264F_{i,j,k}\u22641\n* For every integer i such that 1\u2264i\u2264N, there exists at least one pair (j,k) such that F_{i,j,k}=1.\n* -10^7\u2264P_{i,j}\u226410^7\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nF_{1,1,1} F_{1,1,2} ... F_{1,5,1} F_{1,5,2}\n:\nF_{N,1,1} F_{N,1,2} ... F_{N,5,1} F_{N,5,2}\nP_{1,0} ... P_{1,10}\n:\nP_{N,0} ... P_{N,10}\n\n\nOutput\n\nPrint the maximum possible profit of Joisino's shop.\n\nExamples\n\nInput\n\n1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2\n\n\nOutput\n\n8\n\n\nInput\n\n2\n1 1 1 1 1 0 0 0 0 0\n0 0 0 0 0 1 1 1 1 1\n0 -2 -2 -2 -2 -2 -1 -1 -1 -1 -1\n0 -2 -2 -2 -2 -2 -1 -1 -1 -1 -1\n\n\nOutput\n\n-2\n\n\nInput\n\n3\n1 1 1 1 1 1 0 0 1 1\n0 1 0 1 1 1 1 0 1 0\n1 0 1 1 0 1 0 1 0 1\n-8 6 -2 -8 -8 4 8 7 -6 2 2\n-9 2 0 1 7 -5 0 -2 -6 5 5\n6 -6 7 -9 6 -5 8 0 -9 -7 -7\n\n\nOutput\n\n23",
        "task_name": "p03503 AtCoder Beginner Contest 080 - Shopping Street",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# -*- coding: utf-8 -*-\n\nimport sys\n\nu\"\"\"\n1023\u56de\u5168\u3066 check\n\"\"\"\n\ndef ones(n):\n    o = 0\n    for i in xrange(0, 10):\n        b = 1 << i\n        if n & b:\n            o += 1\n    return o\n\nn = int(raw_input().split()[0])\n# print n\n\nopenL = []\nfor _ in xrange(0, n):\n    fs = ''.join( [e for e in raw_input().split()] )\n    openL.append( int(fs, base=2) )\n    \nprofL = []\nfor _ in xrange(0, n):\n    profL.append( [int(e) for e in raw_input().split()] )\n\n# print n\n# print [hex(e) for e in openL]\n# print profL, len(profL[0])\n\n# print ones(0), ones(0x3ff)\n\nmaxP = -sys.maxint - 1\nfor i in xrange(1, 1024):\n    p = 0\n    for x in xrange(0, len(openL)):\n        ox = openL[x]\n        px = profL[x]\n        p += px[ ones(ox & i) ]\n\n    if p > maxP:\n        maxP = p\n    \nsys.stdout.write('%d\\n' % maxP)\nsys.stdout.flush()\n",
        "correct": true,
        "task_id": "0084",
        "depth": 2
    },
    {
        "description": "Snuke has decided to play a game, where the player runs a railway company. There are M+1 stations on Snuke Line, numbered 0 through M. A train on Snuke Line stops at station 0 and every d-th station thereafter, where d is a predetermined constant for each train. For example, if d = 3, the train stops at station 0, 3, 6, 9, and so forth.\n\nThere are N kinds of souvenirs sold in areas around Snuke Line. The i-th kind of souvenirs can be purchased when the train stops at one of the following stations: stations l_i, l_i+1, l_i+2, ..., r_i.\n\nThere are M values of d, the interval between two stops, for trains on Snuke Line: 1, 2, 3, ..., M. For each of these M values, find the number of the kinds of souvenirs that can be purchased if one takes a train with that value of d at station 0. Here, assume that it is not allowed to change trains.\n\nConstraints\n\n* 1 \u2266 N \u2266 3 \u00d7 10^{5}\n* 1 \u2266 M \u2266 10^{5}\n* 1 \u2266 l_i \u2266 r_i \u2266 M\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN M\nl_1 r_1\n:\nl_{N} r_{N}\n\n\nOutput\n\nPrint the answer in M lines. The i-th line should contain the maximum number of the kinds of souvenirs that can be purchased if one takes a train stopping every i-th station.\n\nExamples\n\nInput\n\n3 3\n1 2\n2 3\n3 3\n\n\nOutput\n\n3\n2\n2\n\n\nInput\n\n7 9\n1 7\n5 9\n5 7\n5 9\n1 1\n6 8\n3 4\n\n\nOutput\n\n7\n6\n6\n5\n4\n5\n5\n3\n2",
        "task_name": "p03819 AtCoder Regular Contest 068 - Snuke Line",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "class BIT():\n    def __init__(self,size):\n        self.size=size\n        self.node=[0]*(size+1)\n\n    def sum(self,idx):\n        ret=0\n        while idx>0:\n            ret+=self.node[idx]\n            idx-=idx&(-idx)\n        return ret\n\n    def add(self,idx,x):\n        while idx<=self.size:\n            self.node[idx]+=x\n            idx+=idx&(-idx)\n\nn,m=map(int,raw_input().split())\nL=[[] for _ in xrange(m+1)]\nfor i in xrange(n):\n    l,r=map(int,raw_input().split())\n    r+=1\n    L[r-l].append(l)\nbit=BIT(m+1)\ntotal=0\nfor d in xrange(1,m+1):\n    for l in L[d]:\n        r=l+d\n        bit.add(l,1)\n        bit.add(r,-1)\n    total+=len(L[d])\n    ans=n-total\n    now=0\n    while now<=m:\n        ans+=bit.sum(now)\n        now+=d\n    print(ans)",
        "correct": true,
        "task_id": "0085",
        "depth": 2
    },
    {
        "description": "We have a string X, which has an even number of characters. Half the characters are `S`, and the other half are `T`.\n\nTakahashi, who hates the string `ST`, will perform the following operation 10^{10000} times:\n\n* Among the occurrences of `ST` in X as (contiguous) substrings, remove the leftmost one. If there is no occurrence, do nothing.\n\n\n\nFind the eventual length of X.\n\nConstraints\n\n* 2 \u2266 |X| \u2266 200,000\n* The length of X is even.\n* Half the characters in X are `S`, and the other half are `T`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nX\n\n\nOutput\n\nPrint the eventual length of X.\n\nExamples\n\nInput\n\nTSTTSS\n\n\nOutput\n\n4\n\n\nInput\n\nSSTTST\n\n\nOutput\n\n0\n\n\nInput\n\nTSSTTTSS\n\n\nOutput\n\n4",
        "task_name": "p03986 AtCoder Grand Contest 005 - STring",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s=raw_input()\nstack=[]\nfor i in xrange(len(s)):\n    if len(stack)==0 or s[i]==\"S\":\n        stack.append(s[i])\n        continue\n    if s[i]==\"T\":\n        if stack[-1]==\"S\":\n            stack.pop()\n        else:\n            stack.append(s[i])\nprint(len(stack))",
        "correct": true,
        "task_id": "0086",
        "depth": 1
    },
    {
        "description": "There is a 120 minute videotape with standard recording. When I set the VCR counter to 00:00:00 with the tape completely rewound and recorded in standard recording mode, I got a certain counter value. Enter this counter value (hours, minutes, seconds), find the length of the remaining tape (recordable time), and create a program that outputs in the format of hours: minutes: seconds.\n\nHowever, the input must be within 2 hours (120 minutes). The remaining amount of tape is calculated in two ways, standard recording mode and triple recording mode, and outputs two digits each for hours, minutes, and seconds as shown in the output example. If the tens digit is 0, such as \"05\", add \"0\".\n\n\n\ninput\n\nGiven multiple datasets. Each dataset is as follows.\n\n\nT H S\n\n\nT, H, and S are integers that represent hours, minutes, and seconds, respectively.\n\nInput ends when T, H, and S are all -1. The number of datasets does not exceed 50.\n\noutput\n\nFor each dataset\nOn the first line, the hours, minutes, and seconds of the recordable time when the rest of the tape is recorded as standard, separated by half-width colons.\nOn the second line, the hours, minutes, and seconds of the recordable time when the rest of the tape is recorded three times are separated by half-width colons.\nPlease output.\n\nExample\n\nInput\n\n1 30 0\n-1 -1 -1\n\n\nOutput\n\n00:30:00\n01:30:00",
        "task_name": "p00074 Videotape",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom __future__ import (division, absolute_import, print_function,\n                        unicode_literals)\nfrom sys import stdin\n\n\ndef print_time_lefts(seconds):\n    h, remain = divmod(7200 - seconds, 3600)\n    m, s = divmod(remain, 60)\n    print('{:02d}:{:02d}:{:02d}'.format(h, m, s))\n\nfor line in stdin:\n    h, m, s = (int(s) for s in line.split())\n    if h == -1 and m == -1 and s == -1:\n        break\n    seconds = h * 3600 + m * 60 + s\n    print_time_lefts(seconds)\n    print_time_lefts(seconds // 3)",
        "correct": false,
        "task_id": "0087",
        "depth": 1
    },
    {
        "description": "You are given an array a of n integers and an integer s. It is guaranteed that n is odd.\n\nIn one operation you can either increase or decrease any single element by one. Calculate the minimum number of operations required to make the median of the array being equal to s.\n\nThe median of the array with odd length is the value of the element which is located on the middle position after the array is sorted. For example, the median of the array 6, 5, 8 is equal to 6, since if we sort this array we will get 5, 6, 8, and 6 is located on the middle position.\n\nInput\n\nThe first line contains two integers n and s (1\u2264 n\u2264 2\u22c5 10^5-1, 1\u2264 s\u2264 10^9) \u2014 the length of the array and the required value of median.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1\u2264 a_i \u2264 10^9) \u2014 the elements of the array a.\n\nIt is guaranteed that n is odd.\n\nOutput\n\nIn a single line output the minimum number of operations to make the median being equal to s.\n\nExamples\n\nInput\n\n3 8\n6 5 8\n\n\nOutput\n\n2\n\nInput\n\n7 20\n21 15 12 11 20 19 12\n\n\nOutput\n\n6\n\nNote\n\nIn the first sample, 6 can be increased twice. The array will transform to 8, 5, 8, which becomes 5, 8, 8 after sorting, hence the median is equal to 8.\n\nIn the second sample, 19 can be increased once and 15 can be increased five times. The array will become equal to 21, 20, 12, 11, 20, 20, 12. If we sort this array we get 11, 12, 12, 20, 20, 20, 21, this way the median is 20.",
        "task_name": "1037_B. Reach Median",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#coding:utf-8\none = raw_input().split()\nn = int(one[0])\ns = int(one[1])\nidx = n/2\ndata = [int(i) for i in raw_input().split()]\nnewdata = sorted(data)\n# print(newdata)\ncnt = 0\nif newdata[idx] == s:\n\tprint(0)\nelif newdata[idx] < s:\n\tfor i in range(idx,n):\n\t\tif newdata[i] < s:\n\t\t\tcnt += s - newdata[i]\nelse:\n\tfor i in range(0,idx+1):\n\t\tif newdata[i] > s:\n\t\t\tcnt += newdata[i] - s\nprint(cnt)\n\t  \t \t  \t\t\t\t\t\t \t \t \t\t\t\t\t \t \t \t",
        "correct": false,
        "task_id": "0088",
        "depth": 1
    },
    {
        "description": "Chouti was tired of the tedious homework, so he opened up an old programming problem he created years ago.\n\nYou are given a connected undirected graph with n vertices and m weighted edges. There are k special vertices: x_1, x_2, \u2026, x_k.\n\nLet's define the cost of the path as the maximum weight of the edges in it. And the distance between two vertexes as the minimum cost of the paths connecting them.\n\nFor each special vertex, find another special vertex which is farthest from it (in terms of the previous paragraph, i.e. the corresponding distance is maximum possible) and output the distance between them.\n\nThe original constraints are really small so he thought the problem was boring. Now, he raises the constraints and hopes you can solve it for him.\n\nInput\n\nThe first line contains three integers n, m and k (2 \u2264 k \u2264 n \u2264 10^5, n-1 \u2264 m \u2264 10^5) \u2014 the number of vertices, the number of edges and the number of special vertices.\n\nThe second line contains k distinct integers x_1, x_2, \u2026, x_k (1 \u2264 x_i \u2264 n).\n\nEach of the following m lines contains three integers u, v and w (1 \u2264 u,v \u2264 n, 1 \u2264 w \u2264 10^9), denoting there is an edge between u and v of weight w. The given graph is undirected, so an edge (u, v) can be used in the both directions.\n\nThe graph may have multiple edges and self-loops.\n\nIt is guaranteed, that the graph is connected.\n\nOutput\n\nThe first and only line should contain k integers. The i-th integer is the distance between x_i and the farthest special vertex from it.\n\nExamples\n\nInput\n\n2 3 2\n2 1\n1 2 3\n1 2 2\n2 2 1\n\n\nOutput\n\n2 2 \n\n\nInput\n\n4 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3\n\n\nOutput\n\n3 3 3 \n\nNote\n\nIn the first example, the distance between vertex 1 and 2 equals to 2 because one can walk through the edge of weight 2 connecting them. So the distance to the farthest node for both 1 and 2 equals to 2.\n\nIn the second example, one can find that distance between 1 and 2, distance between 1 and 3 are both 3 and the distance between 2 and 3 is 2.\n\nThe graph may have multiple edges between and self-loops, as in the first example.",
        "task_name": "1081_D. Maximum Distance",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from collections import defaultdict\nimport sys\ninput=sys.stdin.readline\n\ndef find(x):\n    while p[x]!=x:\n        x=p[p[x]]\n    return(x)\ndef union(u,v):\n    a=find(u)\n    b=find(v)\n    if (sz[a]>sz[b]):\n            p[b]=a\n            special[a]+=special[b]\n            if special[a]==k:\n                return(1)\n    elif (sz[a]<sz[b]):\n            p[a]=b\n            special[b]+=special[a]\n            if special[b]==k:\n                return(1)\n    else:\n        p[b]=a\n        sz[a]+=1\n        special[a]+=special[b]\n        if special[a]==k:\n            return(1)\n    \n    return(0)\n\nn,m,k=map(int,input().split())\nind=[int(i) for i in input().split() if i!='\\n']\nspecial=[0]*(n)\nfor i in range(k):\n    special[ind[i]-1]=1\np=[i for i in range(n)]\nstore=[]\nsz=[0]*(n)\nfor i in range(m):\n    x,y,w=map(int,input().split())\n    store.append([w,x-1,y-1])\nstore.sort()\ni=0\nwhile True:\n    g=find(store[i][1])\n    h=find(store[i][2])\n    if g!=h:\n        t=union(store[i][1],store[i][2])\n        if t==1:\n            x=store[i][0]\n            break\n    i+=1\nans=[x for i in range(k)]\nans=' '.join(map(str,ans))\nsys.stdout.write(ans)\n        \n    \n    \n           \n                \n    \n\n    \n",
        "correct": true,
        "task_id": "0089",
        "depth": 1
    },
    {
        "description": "Alice received a set of Toy Train\u2122 from Bob. It consists of one train and a connected railway network of n stations, enumerated from 1 through n. The train occupies one station at a time and travels around the network of stations in a circular manner. More precisely, the immediate station that the train will visit after station i is station i+1 if 1 \u2264 i < n or station 1 if i = n. It takes the train 1 second to travel to its next station as described.\n\nBob gave Alice a fun task before he left: to deliver m candies that are initially at some stations to their independent destinations using the train. The candies are enumerated from 1 through m. Candy i (1 \u2264 i \u2264 m), now at station a_i, should be delivered to station b_i (a_i \u2260 b_i).\n\n<image> The blue numbers on the candies correspond to b_i values. The image corresponds to the 1-st example.\n\nThe train has infinite capacity, and it is possible to load off any number of candies at a station. However, only at most one candy can be loaded from a station onto the train before it leaves the station. You can choose any candy at this station. The time it takes to move the candies is negligible.\n\nNow, Alice wonders how much time is needed for the train to deliver all candies. Your task is to find, for each station, the minimum time the train would need to deliver all the candies were it to start from there.\n\nInput\n\nThe first line contains two space-separated integers n and m (2 \u2264 n \u2264 5 000; 1 \u2264 m \u2264 20 000) \u2014 the number of stations and the number of candies, respectively.\n\nThe i-th of the following m lines contains two space-separated integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n; a_i \u2260 b_i) \u2014 the station that initially contains candy i and the destination station of the candy, respectively.\n\nOutput\n\nIn the first and only line, print n space-separated integers, the i-th of which is the minimum time, in seconds, the train would need to deliver all the candies were it to start from station i.\n\nExamples\n\nInput\n\n\n5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n\n\nOutput\n\n\n10 9 10 10 9 \n\n\nInput\n\n\n2 3\n1 2\n1 2\n1 2\n\n\nOutput\n\n\n5 6 \n\nNote\n\nConsider the second sample.\n\nIf the train started at station 1, the optimal strategy is as follows.\n\n  1. Load the first candy onto the train. \n  2. Proceed to station 2. This step takes 1 second. \n  3. Deliver the first candy. \n  4. Proceed to station 1. This step takes 1 second. \n  5. Load the second candy onto the train. \n  6. Proceed to station 2. This step takes 1 second. \n  7. Deliver the second candy. \n  8. Proceed to station 1. This step takes 1 second. \n  9. Load the third candy onto the train. \n  10. Proceed to station 2. This step takes 1 second. \n  11. Deliver the third candy. \n\n\n\nHence, the train needs 5 seconds to complete the tasks.\n\nIf the train were to start at station 2, however, it would need to move to station 1 before it could load the first candy, which would take one additional second. Thus, the answer in this scenario is 5+1 = 6 seconds.",
        "task_name": "1129_A2. Toy Train",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python2\n\"\"\"\nThis file is part of https://github.com/cheran-senthil/PyRival\nCopyright 2019 Cheran Senthilkumar <hello@cheran.io>\n\n\"\"\"\nfrom __future__ import division, print_function\n\nimport itertools\nimport os\nimport sys\nfrom atexit import register\nfrom io import BytesIO\n\n\nclass dict(dict):\n    \"\"\"dict() -> new empty dictionary\"\"\"\n\n    def items(self):\n        \"\"\"D.items() -> a set-like object providing a view on D's items\"\"\"\n        return dict.iteritems(self)\n\n    def keys(self):\n        \"\"\"D.keys() -> a set-like object providing a view on D's keys\"\"\"\n        return dict.iterkeys(self)\n\n    def values(self):\n        \"\"\"D.values() -> an object providing a view on D's values\"\"\"\n        return dict.itervalues(self)\n\n\ndef gcd(x, y):\n    \"\"\"greatest common divisor of x and y\"\"\"\n    while y:\n        x, y = y, x % y\n    return x\n\n\nrange = xrange\n\nfilter = itertools.ifilter\nmap = itertools.imap\nzip = itertools.izip\n\nsys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\nsys.stdout = BytesIO()\nregister(lambda: os.write(1, sys.stdout.getvalue()))\n\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n\ndef main():\n    n, m = map(int, input().split())\n\n    station = [[] for _ in range(n)]\n    for i in range(m):\n        a, b = map(int, input().split())\n        station[a - 1].append(b - 1)\n\n    max_candy = [0] * n\n    for i in range(n):\n        try:\n            max_candy[i] = min(station[i], key=lambda x: x + n - i if x < i else x - i)\n        except ValueError:\n            pass\n\n    for i in range(n):\n        res = 0\n\n        for j in range(i, i + n):\n            if len(station[j % n]) == 0:\n                continue\n\n            dist = j - i\n            j %= n\n            dist += (len(station[j]) - 1) * n + (max_candy[j] + n - j if max_candy[j] < j else max_candy[j] - j)\n\n            res = max(res, dist)\n\n        print(res, end=' ')\n\n\nif __name__ == '__main__':\n    main()\n",
        "correct": true,
        "task_id": "0090",
        "depth": 2
    },
    {
        "description": "After playing Neo in the legendary \"Matrix\" trilogy, Keanu Reeves started doubting himself: maybe we really live in virtual reality? To find if this is true, he needs to solve the following problem.\n\nLet's call a string consisting of only zeroes and ones good if it contains different numbers of zeroes and ones. For example, 1, 101, 0000 are good, while 01, 1001, and 111000 are not good.\n\nWe are given a string s of length n consisting of only zeroes and ones. We need to cut s into minimal possible number of substrings s_1, s_2, \u2026, s_k such that all of them are good. More formally, we have to find minimal by number of strings sequence of good strings s_1, s_2, \u2026, s_k such that their concatenation (joining) equals s, i.e. s_1 + s_2 + ... + s_k = s.\n\nFor example, cuttings 110010 into 110 and 010 or into 11 and 0010 are valid, as 110, 010, 11, 0010 are all good, and we can't cut 110010 to the smaller number of substrings as 110010 isn't good itself. At the same time, cutting of 110010 into 1100 and 10 isn't valid as both strings aren't good. Also, cutting of 110010 into 1, 1, 0010 isn't valid, as it isn't minimal, even though all 3 strings are good.\n\nCan you help Keanu? We can show that the solution always exists. If there are multiple optimal answers, print any.\n\nInput\n\nThe first line of the input contains a single integer n (1\u2264 n \u2264 100) \u2014 the length of the string s.\n\nThe second line contains the string s of length n consisting only from zeros and ones.\n\nOutput\n\nIn the first line, output a single integer k (1\u2264 k) \u2014 a minimal number of strings you have cut s into.\n\nIn the second line, output k strings s_1, s_2, \u2026, s_k separated with spaces. The length of each string has to be positive. Their concatenation has to be equal to s and all of them have to be good.\n\nIf there are multiple answers, print any.\n\nExamples\n\nInput\n\n\n1\n1\n\n\nOutput\n\n\n1\n1\n\nInput\n\n\n2\n10\n\n\nOutput\n\n\n2\n1 0\n\nInput\n\n\n6\n100011\n\n\nOutput\n\n\n2\n100 011\n\nNote\n\nIn the first example, the string 1 wasn't cut at all. As it is good, the condition is satisfied.\n\nIn the second example, 1 and 0 both are good. As 10 isn't good, the answer is indeed minimal.\n\nIn the third example, 100 and 011 both are good. As 100011 isn't good, the answer is indeed minimal.",
        "task_name": "1189_A. Keanu Reeves",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"                         \nBeautiful is better than ugly.\n    Explicit is better than implicit.\nSimple is better than complex.\n    Complex is better than complicated.\nFlat is better than nested.\n    Sparse is better than dense.\n                    \n    * Readability counts *\n\n // Author : raj1307 - Raj Singh\n // Date   : 5.07.19\n\n\"\"\"\n\nfrom __future__ import division, print_function\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    _str = str\n    str = lambda x=b\"\": x if type(x) is bytes else _str(x).encode()\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial,pow,pi\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n#from itertools import permutations\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod,MOD=1000000007,998244353\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [i for i in str(n)]\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p1\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n# For getting input from input.txt file \n#sys.stdin = open('input.txt', 'r')  \n  \n# Printing the Output to output.txt file \n#sys.stdout = open('output.txt', 'w') \n\n    \n\ndef main():\n    \n    \n    \n    #for _ in range(ii()):\n    \n    n=ii()\n    s=si()\n    a=s.count('0')\n    b=s.count('1')\n    \n    if n==1:\n        print(1)\n        print(s)\n        exit()\n    \n    \n    if a!=b:\n        print(1)\n        print(s)\n        exit()\n    \n    \n    if s[0]=='0':\n        a-=1\n    else:\n        b-=1\n    \n    print(2)\n    for i in range(1,n):\n        \n        if a!=b:\n            print(s[:i],s[i:])\n            exit()\n        \n        \n        \n        if s[i]=='0':\n            a-=1\n        else:\n            b-=1\n            \n    \n    if a!=b:\n        print(s[:i],s[i:])\n        exit()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        if self.buffer.tell():\n            return self.buffer.read()\n        return os.read(self._fd, os.fstat(self._fd).st_size)\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", b\" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", b\"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nsys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(b\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n    #dmain()",
        "correct": true,
        "task_id": "0091",
        "depth": 1
    },
    {
        "description": "Cengiz recently learned Fibonacci numbers and now he is studying different algorithms to find them. After getting bored of reading them, he came with his own new type of numbers that he named XORinacci numbers. He defined them as follows: \n\n  * f(0) = a; \n  * f(1) = b; \n  * f(n) = f(n-1) \u2295 f(n-2) when n > 1, where \u2295 denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR). \n\n\n\nYou are given three integers a, b, and n, calculate f(n).\n\nYou have to answer for T independent test cases.\n\nInput\n\nThe input contains one or more independent test cases.\n\nThe first line of input contains a single integer T (1 \u2264 T \u2264 10^3), the number of test cases.\n\nEach of the T following lines contains three space-separated integers a, b, and n (0 \u2264 a, b, n \u2264 10^9) respectively.\n\nOutput\n\nFor each test case, output f(n).\n\nExample\n\nInput\n\n\n3\n3 4 2\n4 5 0\n325 265 1231232\n\n\nOutput\n\n\n7\n4\n76\n\nNote\n\nIn the first example, f(2) = f(0) \u2295 f(1) = 3 \u2295 4 = 7.",
        "task_name": "1208_A. XORinacci",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python3\n# Submit as pypy2\n\n\nfrom __future__ import print_function, division, unicode_literals\n\n__metaclass__ = type\n\ntry:\n    input = raw_input\n    range = xrange\nexcept NameError:\n    pass\n\n\nimport sys\n\n\n# Test code requires python3\n# from hypothesis import given\n# from hypothesis import strategies as st\n#\n#\n# def debug(*args, **kwargs):\n#     print(*args, *('{}={}'.format(k, v) for k, v in kwargs.items()),\n#           sep='; ', file=sys.stderr)\n\n\ndef f(A, B, N):\n    rem = N % 3\n    if rem == 0:\n        return A\n    elif rem == 1:\n        return B\n    else:\n        return A ^ B\n\n\nT = int(input())\nfor _ in range(T):\n    A, B, N = map(int, input().split())\n    print(f(A, B, N))\n",
        "correct": true,
        "task_id": "0092",
        "depth": 1
    },
    {
        "description": "You're given an array a_1, \u2026, a_n of n non-negative integers.\n\nLet's call it sharpened if and only if there exists an integer 1 \u2264 k \u2264 n such that a_1 < a_2 < \u2026 < a_k and a_k > a_{k+1} > \u2026 > a_n. In particular, any strictly increasing or strictly decreasing array is sharpened. For example:\n\n  * The arrays [4], [0, 1], [12, 10, 8] and [3, 11, 15, 9, 7, 4] are sharpened; \n  * The arrays [2, 8, 2, 8, 6, 5], [0, 1, 1, 0] and [2, 5, 6, 9, 8, 8] are not sharpened. \n\n\n\nYou can do the following operation as many times as you want: choose any strictly positive element of the array, and decrease it by one. Formally, you can choose any i (1 \u2264 i \u2264 n) such that a_i>0 and assign a_i := a_i - 1.\n\nTell if it's possible to make the given array sharpened using some number (possibly zero) of these operations.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 15\\ 000) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 3 \u22c5 10^5).\n\nThe second line of each test case contains a sequence of n non-negative integers a_1, \u2026, a_n (0 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single line containing \"Yes\" (without quotes) if it's possible to make the given array sharpened using the described operations, or \"No\" (without quotes) otherwise.\n\nExample\n\nInput\n\n\n10\n1\n248618\n3\n12 10 8\n6\n100 11 15 9 7 8\n4\n0 1 1 0\n2\n0 0\n2\n0 1\n2\n1 0\n2\n1 1\n3\n0 1 0\n3\n1 0 1\n\n\nOutput\n\n\nYes\nYes\nYes\nNo\nNo\nYes\nYes\nYes\nYes\nNo\n\nNote\n\nIn the first and the second test case of the first test, the given array is already sharpened.\n\nIn the third test case of the first test, we can transform the array into [3, 11, 15, 9, 7, 4] (decrease the first element 97 times and decrease the last element 4 times). It is sharpened because 3 < 11 < 15 and 15 > 9 > 7 > 4.\n\nIn the fourth test case of the first test, it's impossible to make the given array sharpened.",
        "task_name": "1291_B. Array Sharpening",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys \ninput=sys.stdin.readline \ndef ok1(curr):\n    n=len(curr)\n    return all(l[i]>l[i-1] for i in range(1,n))\ndef ok2(curr):\n    n=len(curr)\n    return all(l[i]<l[i-1] for i in range(1,n))\nfor _ in range(int(input())):\n    n=int(input())\n    l=[int(i) for i in input().split()]\n    if ok1(l) or ok2(l):\n        print('Yes')\n        continue\n    #increase then decreasee \n    ind=-1 \n    mini=19**10 \n    maxi=0 \n    pr=0 \n    for i in range(n):\n        mini=min(mini,l[i])\n        maxi=max(maxi,l[i])\n        if l[i]<pr:\n            ind=i\n            break \n        pr+=1 \n    f=1 \n    if ind==-1:\n        print('Yes')\n        continue\n    mini=l[ind-1]\n    for i in range(ind,n):\n        l[i]=min(l[i],mini-1)\n        mini=min(mini,l[i])\n        if l[i]<0 or mini<0:\n            f=0 \n    print('Yes' if f else 'No')\n    \n        \n    ",
        "correct": true,
        "task_id": "0095",
        "depth": 2
    },
    {
        "description": "You want to perform the combo on your opponent in one popular fighting game. The combo is the string s consisting of n lowercase Latin letters. To perform the combo, you have to press all buttons in the order they appear in s. I.e. if s=\"abca\" then you have to press 'a', then 'b', 'c' and 'a' again.\n\nYou know that you will spend m wrong tries to perform the combo and during the i-th try you will make a mistake right after p_i-th button (1 \u2264 p_i < n) (i.e. you will press first p_i buttons right and start performing the combo from the beginning). It is guaranteed that during the m+1-th try you press all buttons right and finally perform the combo.\n\nI.e. if s=\"abca\", m=2 and p = [1, 3] then the sequence of pressed buttons will be 'a' (here you're making a mistake and start performing the combo from the beginning), 'a', 'b', 'c', (here you're making a mistake and start performing the combo from the beginning), 'a' (note that at this point you will not perform the combo because of the mistake), 'b', 'c', 'a'.\n\nYour task is to calculate for each button (letter) the number of times you'll press it.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThen t test cases follow.\n\nThe first line of each test case contains two integers n and m (2 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 m \u2264 2 \u22c5 10^5) \u2014 the length of s and the number of tries correspondingly.\n\nThe second line of each test case contains the string s consisting of n lowercase Latin letters.\n\nThe third line of each test case contains m integers p_1, p_2, ..., p_m (1 \u2264 p_i < n) \u2014 the number of characters pressed right during the i-th try.\n\nIt is guaranteed that the sum of n and the sum of m both does not exceed 2 \u22c5 10^5 (\u2211 n \u2264 2 \u22c5 10^5, \u2211 m \u2264 2 \u22c5 10^5).\n\nIt is guaranteed that the answer for each letter does not exceed 2 \u22c5 10^9.\n\nOutput\n\nFor each test case, print the answer \u2014 26 integers: the number of times you press the button 'a', the number of times you press the button 'b', ..., the number of times you press the button 'z'.\n\nExample\n\nInput\n\n\n3\n4 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9\n26 10\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 3 5 10 5 9 4\n\n\nOutput\n\n\n4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 \n2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \n\nNote\n\nThe first test case is described in the problem statement. Wrong tries are \"a\", \"abc\" and the final try is \"abca\". The number of times you press 'a' is 4, 'b' is 2 and 'c' is 2.\n\nIn the second test case, there are five wrong tries: \"co\", \"codeforc\", \"cod\", \"co\", \"codeforce\" and the final try is \"codeforces\". The number of times you press 'c' is 9, 'd' is 4, 'e' is 5, 'f' is 3, 'o' is 9, 'r' is 3 and 's' is 1.",
        "task_name": "1311_C. Perform the Combo",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n\n# from math import factorial as fac\nfrom collections import defaultdict\n# from copy import deepcopy\nimport sys, math\nf = None\ntry:\n\tf = open('q1.input', 'r')\nexcept IOError:\n\tf = sys.stdin\nif 'xrange' in dir(__builtins__):\n\trange = xrange\n# print(f.readline())\n# sys.setrecursionlimit(10**5)\n\n\t\ndef print_case_iterable(case_num, iterable):\n\tprint(\"Case #{}: {}\".format(case_num,\" \".join(map(str,iterable))))\n\ndef print_case_number(case_num, iterable):\n\tprint(\"Case #{}: {}\".format(case_num,iterable))\n\ndef print_iterable(A):\n\tprint (' '.join(A))\n\ndef read_int():\n\treturn int(f.readline().strip())\ndef read_int_array():\n\treturn [int(x) for x in f.readline().strip().split(\" \")]\ndef rns():\n\ta =  [x for x in f.readline().split(\" \")]\n\treturn int(a[0]), a[1].strip()\ndef read_string():\n\treturn list(f.readline().strip())\ndef bi(x):\n\treturn bin(x)[2:]\n\n\n\n\n\n\n\n\n\n\nfrom copy import deepcopy\ndef solution(s,n,p,m):\n\ts = [0] + s\n\tdp = [[0 for _ in range(26)] for _ in range(n+1)]\n\tp.sort()\n\tfor i in range(1,n+1):\n\t\tfor j in range(26):\n\t\t\tdp[i][j] = dp[i-1][j] + int(j == (ord(s[i])-ord('a')))\n\t#total m+1 tries\n\tres = [x for x in dp[n]]\n\tfor i in range(m):\n\t\tx=p[i]\n\t\tfor j in range(26):\n\t\t\tres[j]+=dp[x][j]\n\treturn ' '.join(map(str,res))\n\n\n\n\n\ndef main():\n\tT = read_int()\n\tfor i in range(T):\n\t\tn,m = read_int_array()\n\t\ts = read_string()\n\t\tp = read_int_array()\n\t\tx = solution(s,n,p,m)\n\n\t\tif 'xrange' not in dir(__builtins__):\n\t\t\tprint(x)\n\t\telse:\n\t\t\tprint >>output,str(x)# \"Case #\"+str(i+1)+':',\n\tif 'xrange' in dir(__builtins__):\n\t\tprint(output.getvalue())\n\t\toutput.close()\n\nif 'xrange' in dir(__builtins__):\n\timport cStringIO\n\toutput = cStringIO.StringIO()\n#example usage:\n#    for l in res:\n#       print >>output, str(len(l)) + ' ' +  ' '.join(l)\n\nif __name__ == '__main__':\n\tmain()\n\n\n\n'''stuff you should look for\n\t* int overflow, array bounds\n\t* special cases (n=1?)\n\t* do smth instead of nothing and stay organized\n\t* WRITE STUFF DOWN\n\t* BITS - THINK HOW TO MASK PROPERLY\n\t* PERMUTATIONS - PARITY AND CYCLES\n\t* Think simple, if it becomes over complicated, try to look at it from a different perspective.\n\t* Have fun!!!\n\t* TRY FIXING SOMETHING, and then maybe binary search around it.\n\t* Remember heaps. \n\t* Remember how to add a value to a segment when using prefix sum.\n\t\tsuppose you have an array[1,2,3,4,5] and you want to add 3 to array[1:4]. Then just \n\t\tadd 3 to A[1], and decrease 3 from A[4]. Let's look at what happens:\n\t\toriginal prefixsums is \t\t\t\t\t [1,3,6,10,15]\n\t\tarray -> [1,5,3,4,2] and prefix sums are [1,6,9,13,15] \n\t\tAs you see, exactly +3 in A[1:4]\n\t\t*** The previous method can help checking how many x,y you can choose to get s=x+y from two arrays.\n'''\n'''\nbinary search \n\twhile(r - l > 1) {\n\t\tll mid = l + (r - l) / 2;\n\t\tsolve(mid);\n\t\tll sum = 0;\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tsum += b[i];\n\t\tif (sum <= k)\n\t\t\tr = mid;\n\t\telse\n\t\t\tl = mid;\n\t}\n'''\n",
        "correct": true,
        "task_id": "0096",
        "depth": 2
    },
    {
        "description": "Polycarp has recently created a new level in this cool new game Berlio Maker 85 and uploaded it online. Now players from all over the world can try his level.\n\nAll levels in this game have two stats to them: the number of plays and the number of clears. So when a player attempts the level, the number of plays increases by 1. If he manages to finish the level successfully then the number of clears increases by 1 as well. Note that both of the statistics update at the same time (so if the player finishes the level successfully then the number of plays will increase at the same time as the number of clears).\n\nPolycarp is very excited about his level, so he keeps peeking at the stats to know how hard his level turns out to be.\n\nSo he peeked at the stats n times and wrote down n pairs of integers \u2014 (p_1, c_1), (p_2, c_2), ..., (p_n, c_n), where p_i is the number of plays at the i-th moment of time and c_i is the number of clears at the same moment of time. The stats are given in chronological order (i.e. the order of given pairs is exactly the same as Polycarp has written down).\n\nBetween two consecutive moments of time Polycarp peeked at the stats many players (but possibly zero) could attempt the level.\n\nFinally, Polycarp wonders if he hasn't messed up any records and all the pairs are correct. If there could exist such a sequence of plays (and clears, respectively) that the stats were exactly as Polycarp has written down, then he considers his records correct.\n\nHelp him to check the correctness of his records.\n\nFor your convenience you have to answer multiple independent test cases.\n\nInput\n\nThe first line contains a single integer T (1 \u2264 T \u2264 500) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of moments of time Polycarp peeked at the stats.\n\nEach of the next n lines contains two integers p_i and c_i (0 \u2264 p_i, c_i \u2264 1000) \u2014 the number of plays and the number of clears of the level at the i-th moment of time.\n\nNote that the stats are given in chronological order.\n\nOutput\n\nFor each test case print a single line.\n\nIf there could exist such a sequence of plays (and clears, respectively) that the stats were exactly as Polycarp has written down, then print \"YES\".\n\nOtherwise, print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n6\n3\n0 0\n1 1\n1 2\n2\n1 0\n1000 3\n4\n10 1\n15 2\n10 2\n15 2\n1\n765 432\n2\n4 4\n4 3\n5\n0 0\n1 0\n1 0\n1 0\n1 0\n\n\nOutput\n\n\nNO\nYES\nNO\nYES\nNO\nYES\n\nNote\n\nIn the first test case at the third moment of time the number of clears increased but the number of plays did not, that couldn't have happened.\n\nThe second test case is a nice example of a Super Expert level.\n\nIn the third test case the number of plays decreased, which is impossible.\n\nThe fourth test case is probably an auto level with a single jump over the spike.\n\nIn the fifth test case the number of clears decreased, which is also impossible.\n\nNobody wanted to play the sixth test case; Polycarp's mom attempted it to make him feel better, however, she couldn't clear it.",
        "task_name": "1334_A. Level Statistics",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\n\ndef main():\n    # Template 1.0\n    import sys, re, math\n    from collections import deque, defaultdict, Counter, OrderedDict\n    from math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, floor\n    from heapq import heappush, heappop, heapify, nlargest, nsmallest\n    def STR(): return list(input())\n\n    def INT(): return int(input())\n\n    def MAP(): return map(int, input().split())\n\n    def LIST(): return list(map(int, input().split()))\n\n    def list2d(a, b, c): return [[c] * b for i in range(a)]\n\n    def sortListWithIndex(listOfTuples, idx):   return (sorted(listOfTuples, key=lambda x: x[idx]))\n\n    def sortDictWithVal(passedDic):\n        temp = sorted(passedDic.items(), key=lambda kv: (kv[1], kv[0]))\n        toret = {}\n        for tup in temp:\n            toret[tup[0]] = tup[1]\n        return toret\n\n    def sortDictWithKey(passedDic):\n        return dict(OrderedDict(sorted(passedDic.items())))\n\n    INF = float('inf')\n    mod = 10 ** 9 + 7\n\n\n    t = INT()\n\n    while(t!=0):\n\n        n = INT()\n\n        zz = []\n\n        for _ in range(n):\n            zz.append(LIST())\n\n        prevplay = 0\n        prevClr = 0\n        flag = 0\n        for i in range(n):\n            if(zz[i][0]<prevplay or zz[i][1]<prevClr or zz[i][0]<zz[i][1]):\n                flag=1\n                break\n            if (zz[i][1] > prevClr):\n                temp = zz[i][1] - prevClr\n                temp1 = zz[i][0] - prevplay\n\n                if (temp > temp1):\n                    flag = 1\n                    break\n\n            prevplay = zz[i][0]\n            prevClr = zz[i][1]\n\n        if(flag==1):\n            print(\"NO\")\n        else:\n            print(\"YES\")\n\n        t-=1\n\n\n######## Python 2 and 3 footer by Pajenegod and c1729\n\n# Note because cf runs old PyPy3 version which doesn't have the sped up\n# unicode strings, PyPy3 strings will many times be slower than pypy2.\n# There is a way to get around this by using binary strings in PyPy3\n# but its syntax is different which makes it kind of a mess to use.\n\n# So on cf, use PyPy2 for best string performance.\n\npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n    range = xrange\n\nimport os, sys\nfrom io import IOBase, BytesIO\n\nBUFSIZE = 8192\n\n\nclass FastIO(BytesIO):\n    newlines = 0\n\n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n\n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0, 2), super(FastIO, self).write(s))[0])\n        return s\n\n    def read(self):\n        while self._fill(): pass\n        return super(FastIO, self).read()\n\n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill();\n            self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s: self.buffer.write(s.encode('ascii'))\n            self.read = lambda: self.buffer.read().decode('ascii')\n            self.readline = lambda: self.buffer.readline().decode('ascii')\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# Cout implemented in Python\nimport sys\n\n\nclass ostream:\n    def __lshift__(self, a):\n        sys.stdout.write(str(a))\n        return self\n\n\ncout = ostream()\nendl = '\\n'\n\n\n# Read all remaining integers in stdin, type is given by optional argument, this is fast\ndef readnumbers(zero=0):\n    conv = ord if py2 else lambda x: x\n    A = [];\n    numb = zero;\n    sign = 1;\n    i = 0;\n    s = sys.stdin.buffer.read()\n    try:\n        while True:\n            if s[i] >= b'0'[0]:\n                numb = 10 * numb + conv(s[i]) - 48\n            elif s[i] == b'-'[0]:\n                sign = -1\n            elif s[i] != b'\\r'[0]:\n                A.append(sign * numb)\n                numb = zero;\n                sign = 1\n            i += 1\n    except:\n        pass\n    if s and s[-1] >= b'0'[0]:\n        A.append(sign * numb)\n    return A\n\n\nif __name__ == \"__main__\":\n    main()",
        "correct": true,
        "task_id": "0097",
        "depth": 2
    },
    {
        "description": "The statement of this problem is the same as the statement of problem C1. The only difference is that, in problem C1, n is always even, and in C2, n is always odd.\n\nYou are given a regular polygon with 2 \u22c5 n vertices (it's convex and has equal sides and equal angles) and all its sides have length 1. Let's name it as 2n-gon.\n\nYour task is to find the square of the minimum size such that you can embed 2n-gon in the square. Embedding 2n-gon in the square means that you need to place 2n-gon in the square in such way that each point which lies inside or on a border of 2n-gon should also lie inside or on a border of the square.\n\nYou can rotate 2n-gon and/or the square.\n\nInput\n\nThe first line contains a single integer T (1 \u2264 T \u2264 200) \u2014 the number of test cases.\n\nNext T lines contain descriptions of test cases \u2014 one per line. Each line contains single odd integer n (3 \u2264 n \u2264 199). Don't forget you need to embed 2n-gon, not an n-gon.\n\nOutput\n\nPrint T real numbers \u2014 one per test case. For each test case, print the minimum length of a side of the square 2n-gon can be embedded in. Your answer will be considered correct if its absolute or relative error doesn't exceed 10^{-6}.\n\nExample\n\nInput\n\n\n3\n3\n5\n199\n\n\nOutput\n\n\n1.931851653\n3.196226611\n126.687663595",
        "task_name": "1354_C2. Not So Simple Polygon Embedding",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Educational Code Forces Round 87: C2: Not So Simple Polygon Embedding.\n# Sun. May. 17, 2020, By: arccosh.\n\nimport math\n\ndef solve(n):\n  return math.cos(math.pi / (4 * n)) / math.sin(math.pi / (2 * n))\n\nfor ca in xrange(int(raw_input())):\n  n = int(raw_input())\n  print('%.9f' % solve(n))\n",
        "correct": true,
        "task_id": "0098",
        "depth": 1
    },
    {
        "description": "You are given an array a of n integers.\n\nYou want to make all elements of a equal to zero by doing the following operation exactly three times:\n\n  * Select a segment, for each number in this segment we can add a multiple of len to it, where len is the length of this segment (added integers can be different). \n\n\n\nIt can be proven that it is always possible to make all elements of a equal to zero.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 100 000): the number of elements of the array.\n\nThe second line contains n elements of an array a separated by spaces: a_1, a_2, ..., a_n (-10^9 \u2264 a_i \u2264 10^9).\n\nOutput\n\nThe output should contain six lines representing three operations.\n\nFor each operation, print two lines:\n\n  * The first line contains two integers l, r (1 \u2264 l \u2264 r \u2264 n): the bounds of the selected segment.\n\n  * The second line contains r-l+1 integers b_l, b_{l+1}, ..., b_r (-10^{18} \u2264 b_i \u2264 10^{18}): the numbers to add to a_l, a_{l+1}, \u2026, a_r, respectively; b_i should be divisible by r - l + 1.\n\nExample\n\nInput\n\n\n4\n1 3 2 4\n\n\nOutput\n\n\n1 1 \n-1\n3 4\n4 2\n2 4\n-3 -6 -6",
        "task_name": "1397_C. Multiples of Length",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\nfrom itertools import permutations \nimport threading,bisect,math,heapq,sys\n# threading.stack_size(2**27)\n# sys.setrecursionlimit(10**4)\nfrom sys import stdin, stdout\ni_m=9223372036854775807    \ndef cin():\n    return map(int,sin().split())\ndef ain():                           #takes array as input\n    return list(map(int,sin().split()))\ndef sin():\n    return input()\ndef inin():\n    return int(input()) \nprime=[]\ndef dfs(n,d,v,a,c):\n    v[n]=1\n    if n in d:\n        x=d[n]\n    else:\n        a[n]+=c\n        x=[]\n    p=a[n]\n    for i in x:\n        if i not in v:\n            dfs(i,d,v,a,c)\n            p+=a[i]\n    a[n]=p\n    return p \n \n\"\"\"**************************MAIN*****************************\"\"\"\ndef main():\n    n=inin()\n    a=ain()\n    print(1,1)\n    x=a[0]%n\n    print(n-x)\n    a[0]+=n-x\n    if n>1:\n        print(2,n)\n        b=[]\n        for i in range(1,n):\n            b.append((a[i]%n)*(n-1))\n            a[i]+=b[i-1]\n        print(*b)\n    if n==1:\n        print(1,1)\n        print(0)\n    print(1,n)\n    for i in range(n):\n        a[i]=-a[i]\n    print(*a)\n\n    \n\"\"\"*******************************************************\"\"\"\n\n######## Python 2 and 3 footer by Pajenegod and c1729\nfac=[]\ndef fact(n,mod):\n    global fac\n    fac.append(1)\n    for i in range(1,n+1):\n        fac.append((fac[i-1]*i)%mod)\n    f=fac[:]\n    return f\ndef nCr(n,r,mod):\n    global fac\n    x=fac[n]\n    y=fac[n-r]\n    z=fac[r]\n    x=moddiv(x,y,mod)\n    return moddiv(x,z,mod)\ndef moddiv(m,n,p):\n    x=pow(n,p-2,p)\n    return (m*x)%p\ndef GCD(x, y): \n    x=abs(x)\n    y=abs(y)\n    if(min(x,y)==0):\n        return max(x,y)\n    while(y): \n        x, y = y, x % y \n    return x \ndef Divisors(n) : \n    l = []  \n    ll=[]\n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if (n % i == 0) : \n            if (n // i == i) : \n                l.append(i) \n            else : \n                l.append(i)\n                ll.append(n//i)\n    l.extend(ll[::-1])\n    return l\ndef SieveOfEratosthenes(n): \n    global prime\n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    f=[]\n    for p in range(2, n): \n        if prime[p]: \n            f.append(p)\n    return f\ndef primeFactors(n): \n    a=[]\n    while n % 2 == 0: \n        a.append(2) \n        n = n // 2 \n    for i in range(3,int(math.sqrt(n))+1,2):  \n        while n % i== 0: \n            a.append(i) \n            n = n // i  \n    if n > 2: \n        a.append(n)\n    return a\n\"\"\"*******************************************************\"\"\"\npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\nimport os\nfrom io import IOBase, BytesIO\nBUFSIZE = 8192\nclass FastIO(BytesIO):\n    newlines = 0\n \n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n \n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0,2), super(FastIO, self).write(s))[0])\n        return s\n \n    def read(self):\n        while self._fill(): pass\n        return super(FastIO,self).read()\n \n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill(); self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s:self.buffer.write(s.encode('ascii'))\n            self.read = lambda:self.buffer.read().decode('ascii')\n            self.readline = lambda:self.buffer.readline().decode('ascii')\n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n') \n# Cout implemented in Python\nclass ostream:\n    def __lshift__(self,a):\n        sys.stdout.write(str(a))\n        return self\ncout = ostream()\nendl = '\\n'\n \n# Read all remaining integers in stdin, type is given by optional argument, this is fast\ndef readnumbers(zero = 0):\n    conv = ord if py2 else lambda x:x\n    A = []; numb = zero; sign = 1; i = 0; s = sys.stdin.buffer.read()\n    try:\n        while True:\n            if s[i] >= b'R' [0]:\n                numb = 10 * numb + conv(s[i]) - 48\n            elif s[i] == b'-' [0]: sign = -1\n            elif s[i] != b'\\r' [0]:\n                A.append(sign*numb)\n                numb = zero; sign = 1\n            i += 1\n    except:pass\n    if s and s[-1] >= b'R' [0]:\n        A.append(sign*numb)\n    return A\n \n# threading.Thread(target=main).start()\nif __name__== \"__main__\":\n  main()",
        "correct": true,
        "task_id": "0100",
        "depth": 2
    },
    {
        "description": "Ori and Sein have overcome many difficult challenges. They finally lit the Shrouded Lantern and found Gumon Seal, the key to the Forlorn Ruins. When they tried to open the door to the ruins... nothing happened.\n\nOri was very surprised, but Sein gave the explanation quickly: clever Gumon decided to make an additional defence for the door.\n\nThere are n lamps with Spirit Tree's light. Sein knows the time of turning on and off for the i-th lamp \u2014 l_i and r_i respectively. To open the door you have to choose k lamps in such a way that there will be a moment of time when they all will be turned on.\n\nWhile Sein decides which of the k lamps to pick, Ori is interested: how many ways there are to pick such k lamps that the door will open? It may happen that Sein may be wrong and there are no such k lamps. The answer might be large, so print it modulo 998 244 353.\n\nInput\n\nFirst line contains two integers n and k (1 \u2264 n \u2264 3 \u22c5 10^5, 1 \u2264 k \u2264 n) \u2014 total number of lamps and the number of lamps that must be turned on simultaneously.\n\nNext n lines contain two integers l_i ans r_i (1 \u2264 l_i \u2264 r_i \u2264 10^9) \u2014 period of time when i-th lamp is turned on.\n\nOutput\n\nPrint one integer \u2014 the answer to the task modulo 998 244 353.\n\nExamples\n\nInput\n\n\n7 3\n1 7\n3 8\n4 5\n6 7\n1 3\n5 10\n8 9\n\n\nOutput\n\n\n9\n\nInput\n\n\n3 1\n1 1\n2 2\n3 3\n\n\nOutput\n\n\n3\n\nInput\n\n\n3 2\n1 1\n2 2\n3 3\n\n\nOutput\n\n\n0\n\nInput\n\n\n3 3\n1 3\n2 3\n3 3\n\n\nOutput\n\n\n1\n\nInput\n\n\n5 2\n1 3\n2 4\n3 5\n4 6\n5 7\n\n\nOutput\n\n\n7\n\nNote\n\nIn first test case there are nine sets of k lamps: (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 2, 6), (1, 3, 6), (1, 4, 6), (2, 3, 6), (2, 4, 6), (2, 6, 7).\n\nIn second test case k=1, so the answer is 3.\n\nIn third test case there are no such pairs of lamps.\n\nIn forth test case all lamps are turned on in a time 3, so the answer is 1.\n\nIn fifth test case there are seven sets of k lamps: (1, 2), (1, 3), (2, 3), (2, 4), (3, 4), (3, 5), (4, 5).",
        "task_name": "1420_D. Rescue Nibel!",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# from sys import stdin\nfrom collections import defaultdict\nfrom bisect import bisect_left\n\n\ndef fact(be, en):\n    res = [1]\n    for i in range(be, en + 1):\n        res.append(mult(res[-1], i))\n    return res\n\n\ndef nCr(n, r):\n    if n < r:\n        return 0\n    return div(facs[n], facs[n - r])\n\n\ndef arr_sum(arr):\n    tem = [0]\n    for i in range(len(arr)):\n        tem.append(tem[i] + arr[i])\n    return tem\n\n\ndef fast2():\n    import os, sys, atexit\n    from cStringIO import StringIO as BytesIO\n    # range = xrange\n    sys.stdout = BytesIO()\n    atexit.register(lambda: os.write(1, sys.stdout.getvalue()))\n    return BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\n\ninput = fast2()\nadd = lambda a, b: (a + b) % mod\nmult = lambda a, b: (a * b) % mod\ndiv = lambda a, b: mult(a, inv(b))\ninv = lambda a: pow(a, mod - 2, mod)\nrints = lambda: [int(x) for x in input().split()]\nmod = 998244353\n\nn, k = rints()\na = [rints() for _ in range(n)]\ndisbe, disen, ans = set(), set(), 0\nfacs = fact(1, 3 * 10 ** 5)\n\nfor l, r in a:\n    disbe.add(l)\n    disbe.add(r)\n\ndisbe = sorted(disbe)\nordbe = defaultdict(int, {disbe[i]: i for i in range(len(disbe))})\ncumbe, cumen = [0] * len(disbe), [0] * len(disbe)\n\nfor l, r in a:\n    cumbe[ordbe[l]] += 1\n    cumen[ordbe[r]] += 1\n\ncumbe, cumen = arr_sum(cumbe), arr_sum(cumen)\n\nfor i in disbe[1:-1]:\n    cur = cumbe[ordbe[i] + 1] - cumbe[ordbe[i]]\n    val = cumbe[-1] - cumbe[ordbe[i] + 1]\n    val += cumen[ordbe[i]]\n    all = n - val\n    ans = add(ans, add(nCr(all, k), -nCr(all - cur, k)))\n\n    # print(val, ans, all, i)\n\nprint(div(ans, facs[k]))\n",
        "correct": false,
        "task_id": "0101",
        "depth": 1
    },
    {
        "description": "After his wife's tragic death, Eurydice, Orpheus descended to the realm of death to see her. Reaching its gates was uneasy, but passing through them proved to be even more challenging. Mostly because of Cerberus, the three-headed hound of Hades. \n\nOrpheus, a famous poet, and musician plans to calm Cerberus with his poetry and safely walk past him. He created a very peculiar poem for Cerberus. It consists only of lowercase English letters. \n\nWe call a poem's substring a palindrome if and only if it reads the same backwards and forwards. A string a is a substring of a string b if a can be obtained from b by deleting several (possibly zero or all) characters from the beginning and several (possibly zero or all) characters from the end.\n\nUnfortunately, Cerberus dislikes palindromes of length greater than 1. For example in the poem abaa the hound of Hades wouldn't like substrings aba and aa.\n\nOrpheus can only calm Cerberus if the hound likes his poetry. That's why he wants to change his poem so that it does not contain any palindrome substrings of length greater than 1.\n\nOrpheus can modify the poem by replacing a letter at any position with any lowercase English letter. He can use this operation arbitrarily many times (possibly zero). Since there can be many palindromes in his poem, he may have to make some corrections. But how many, exactly? Given the poem, determine the minimal number of letters that have to be changed so that the poem does not contain any palindromes of length greater than 1.\n\nInput\n\nThe first line of the input contains a single integer t (1 \u2264 t \u2264 10^5) denoting the number of test cases, then t test cases follow.\n\nThe first and only line of each test case contains a non-empty string of lowercase English letters, Orpheus' poem.\n\nThe sum of the length of Orpheus' poems in all test cases will not exceed 10^5.\n\nOutput\n\nYou should output t lines, i-th line should contain a single integer, answer to the i-th test case.\n\nExample\n\nInput\n\n\n7\nbabba\nabaac\ncodeforces\nzeroorez\nabcdcba\nbbbbbbb\na\n\n\nOutput\n\n\n1\n1\n0\n1\n1\n4\n0\n\nNote\n\nIn the first test case, we can replace the third character with c and obtain a palindrome-less poem bacba.\n\nIn the second test case, we can replace the third character with d and obtain a palindrome-less poem abdac.\n\nIn the third test case, the initial poem already doesn't contain any palindromes, so Orpheus doesn't need to change anything there.",
        "task_name": "1466_C. Canine poetry",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import os\nimport sys\nfrom atexit import register\nfrom io import BytesIO\nsys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\nsys.stdout = BytesIO()\nregister(lambda: os.write(1, sys.stdout.getvalue()))\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nraw_input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\nfor _ in xrange(int(input())):\n    s = list(input().strip())\n    n = len(s)\n    lst1 = [0 for _ in range(n)]\n    lst = [0 for _ in range(n)]\n\n    ans = 0\n    for i in range(1,n-1):\n        if s[i+1] == s[i-1] == s[i]:\n            s[i] = ans\n            s[i+1] = ans + 1\n            ans += 2\n    for i in range(1,n-1):\n        if s[i-1] == s[i+1]:\n            s[i+1] = ans\n            ans += 1\n    for i in range(1,n):\n        if s[i] == s[i-1]:\n            s[i] = ans\n            ans += 1\n\n    print(ans)",
        "correct": false,
        "task_id": "0102",
        "depth": 2
    },
    {
        "description": "In some country live wizards. They love playing with numbers. \n\nThe blackboard has two numbers written on it \u2014 a and b. The order of the numbers is not important. Let's consider a \u2264 b for the sake of definiteness. The players can cast one of the two spells in turns:\n\n  * Replace b with b - ak. Number k can be chosen by the player, considering the limitations that k > 0 and b - ak \u2265 0. Number k is chosen independently each time an active player casts a spell. \n  * Replace b with b mod a. \n\n\n\nIf a > b, similar moves are possible.\n\nIf at least one of the numbers equals zero, a player can't make a move, because taking a remainder modulo zero is considered somewhat uncivilized, and it is far too boring to subtract a zero. The player who cannot make a move, loses.\n\nTo perform well in the magic totalizator, you need to learn to quickly determine which player wins, if both wizards play optimally: the one that moves first or the one that moves second.\n\nInput\n\nThe first line contains a single integer t \u2014 the number of input data sets (1 \u2264 t \u2264 104). Each of the next t lines contains two integers a, b (0 \u2264 a, b \u2264 1018). The numbers are separated by a space.\n\nPlease do not use the %lld specificator to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specificator.\n\nOutput\n\nFor any of the t input sets print \"First\" (without the quotes) if the player who moves first wins. Print \"Second\" (without the quotes) if the player who moves second wins. Print the answers to different data sets on different lines in the order in which they are given in the input. \n\nExamples\n\nInput\n\n4\n10 21\n31 10\n0 1\n10 30\n\n\nOutput\n\nFirst\nSecond\nSecond\nFirst\n\nNote\n\nIn the first sample, the first player should go to (11,10). Then, after a single move of the second player to (1,10), he will take 10 modulo 1 and win.\n\nIn the second sample the first player has two moves to (1,10) and (21,10). After both moves the second player can win.\n\nIn the third sample, the first player has no moves.\n\nIn the fourth sample, the first player wins in one move, taking 30 modulo 10.",
        "task_name": "167_C. Wizards and Numbers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nfrom math import *\n\ndef win(a,b):\n    if (a==0):\n        return False\n    if (b==0):\n        return False\n    if (not win(b%a,a)):\n        return True\n    k=a\n    while (b>k):\n        k*=a\n    k//=a\n    ans=0\n    while((k>1) and (b>0)):\n        ans+=b//k\n        b%=k\n        k//=a\n    if (ans%2==1):\n        return False\n    else:\n        return True\n\ntry:\n    fi = open(\"input.txt\", \"r\")\n    fo = open(\"output.txt\", \"w\")\nexcept:\n    fi = sys.stdin\n    fo = sys.stdout\n\ntests=int(fi.readline())\nfor test in range(tests):\n    a,b=map(int,fi.readline().split())\n    if (win(min(a,b),max(a,b))):\n        fo.write(\"First\\n\")\n    else:\n        fo.write(\"Second\\n\")",
        "correct": false,
        "task_id": "0103",
        "depth": 1
    },
    {
        "description": "Some days ago, I learned the concept of LCM (least common multiple). I've played with it for several times and I want to make a big number with it.\n\nBut I also don't want to use many numbers, so I'll choose three positive integers (they don't have to be distinct) which are not greater than n. Can you help me to find the maximum possible least common multiple of these three integers?\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 106) \u2014 the n mentioned in the statement.\n\nOutput\n\nPrint a single integer \u2014 the maximum possible LCM of three not necessarily distinct positive integers that are not greater than n.\n\nExamples\n\nInput\n\n9\n\n\nOutput\n\n504\n\n\nInput\n\n7\n\n\nOutput\n\n210\n\nNote\n\nThe least common multiple of some positive integers is the least positive integer which is multiple for each of them.\n\nThe result may become very large, 32-bit integer won't be enough. So using 64-bit integers is recommended.\n\nFor the last example, we can chose numbers 7, 6, 5 and the LCM of them is 7\u00b76\u00b75 = 210. It is the maximum value we can get.",
        "task_name": "235_A. LCM Challenge",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=int(raw_input())\ndef mcd(a,b):\n    if b==0:\n        return a\n    else:\n        return mcd(b,a%b)\nif n==1:\n    print(1)\nelif n==2:\n    print(2)\nelse:\n    ans=n\n    sec=0\n    count=0\n    for i in range(n-1,1,-1):\n        if (count==0):\n            if(mcd(n,i)==1):\n                ans*=i\n                sec=i\n                count+=1\n        elif (count==1):\n            if(mcd(n,i)==1 and mcd(sec,i)==1):\n                ans*=i\n                count+=1\n        elif(count==2):\n            break\n    print(ans)\n",
        "correct": false,
        "task_id": "0104",
        "depth": 1
    },
    {
        "description": "Pavel loves grid mazes. A grid maze is an n \u00d7 m rectangle maze where each cell is either empty, or is a wall. You can go from one cell to another only if both cells are empty and have a common side.\n\nPavel drew a grid maze with all empty cells forming a connected area. That is, you can go from any empty cell to any other one. Pavel doesn't like it when his maze has too little walls. He wants to turn exactly k empty cells into walls so that all the remaining cells still formed a connected area. Help him.\n\nInput\n\nThe first line contains three integers n, m, k (1 \u2264 n, m \u2264 500, 0 \u2264 k < s), where n and m are the maze's height and width, correspondingly, k is the number of walls Pavel wants to add and letter s represents the number of empty cells in the original maze.\n\nEach of the next n lines contains m characters. They describe the original maze. If a character on a line equals \".\", then the corresponding cell is empty and if the character equals \"#\", then the cell is a wall.\n\nOutput\n\nPrint n lines containing m characters each: the new maze that fits Pavel's requirements. Mark the empty cells that you transformed into walls as \"X\", the other cells must be left without changes (that is, \".\" and \"#\").\n\nIt is guaranteed that a solution exists. If there are multiple solutions you can output any of them.\n\nExamples\n\nInput\n\n3 4 2\n#..#\n..#.\n#...\n\n\nOutput\n\n#.X#\nX.#.\n#...\n\n\nInput\n\n5 4 5\n#...\n#.#.\n.#..\n...#\n.#.#\n\n\nOutput\n\n#XXX\n#X#.\nX#..\n...#\n.#.#",
        "task_name": "378_C. Maze",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\ndef translate (c):\n  if c == \".\":\n    return 0\n  else:\n    return -2\n\nn, m, k = map(int, raw_input().split(\" \"))\n\ngrid = []\npostorder = []\npreorder = []\n\nfor i in xrange(n):\n  s = list(raw_input())\n  grid.append(s)\n  preorder.append(map(translate, s))\n\ni = 0\nj = 0\n\nwhile preorder[i][j] < 0:\n  if j == m - 1:\n    j = 0\n    i += 1\n  else:\n    j += 1\n\nworklist = [(i, j)]\n\nprecount = 1\n\nwhile len (worklist) > 0:\n  i, j = worklist[len(worklist) - 1]\n  if preorder[i][j] > 0:\n    postorder.append(worklist.pop())\n  else:\n    preorder[i][j] = precount\n    precount += 1\n    if i > 0 and preorder[i - 1][j] == 0:\n      worklist.append((i-1, j))\n      preorder[i-1][j] = -1\n    if i < n - 1 and preorder[i+1][j] == 0:\n      worklist.append((i + 1, j))\n      preorder[i + 1][j] = -1\n    if j > 0 and preorder[i][j - 1] == 0:\n      worklist.append((i, j - 1))\n      preorder[i][j-1] = -1\n    if j < m - 1 and preorder[i][j+1] == 0:\n      worklist.append((i, j + 1))\n      preorder[i][j+1] = -1\n\nfor a in xrange(k):\n  i, j = postorder.pop()\n  grid[i][j] = 'X'\n\n\nfor i in grid:\n  for j in i:\n    sys.stdout.write(j)\n  sys.stdout.write('\\n')\n",
        "correct": false,
        "task_id": "0107",
        "depth": 2
    },
    {
        "description": "As usual, Sereja has array a, its elements are integers: a[1], a[2], ..., a[n]. Let's introduce notation:\n\n<image>\n\nA swap operation is the following sequence of actions:\n\n  * choose two indexes i, j (i \u2260 j); \n  * perform assignments tmp = a[i], a[i] = a[j], a[j] = tmp. \n\n\n\nWhat maximum value of function m(a) can Sereja get if he is allowed to perform at most k swap operations?\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 200; 1 \u2264 k \u2264 10). The next line contains n integers a[1], a[2], ..., a[n] ( - 1000 \u2264 a[i] \u2264 1000).\n\nOutput\n\nIn a single line print the maximum value of m(a) that Sereja can get if he is allowed to perform at most k swap operations.\n\nExamples\n\nInput\n\n10 2\n10 -1 2 2 2 2 2 2 -1 10\n\n\nOutput\n\n32\n\n\nInput\n\n5 10\n-1 -1 -1 -1 -1\n\n\nOutput\n\n-1",
        "task_name": "425_A. Sereja and Swaps",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def solve(a , l , r, k):\n\tout = sorted(a[:l]+a[r:], reverse=True)\n\tinside = sorted(a[l:r])\n\tcur = sum(a[l:r])\n\tfor i in range(min(k , len(inside) , len(out))):\n\t\tif out[i]>inside[i]:\n\t\t\tcur+=out[i]-inside[i]\n\t\telse:\n\t\t\tbreak\n\treturn cur\nn , k = [int(x) for x in raw_input().split()]\na= [int(x) for x in raw_input().split()]\nbest = a[0]\nfor l in range(n):\n\tfor r in range(l+1, n+1):\n\t\tcur = solve(a , l  , r, k)\n\t\tif(cur > best):\n\t\t\tbest= cur\n\nprint(best)",
        "correct": true,
        "task_id": "0108",
        "depth": 2
    },
    {
        "description": "Peter got a new snow blower as a New Year present. Of course, Peter decided to try it immediately. After reading the instructions he realized that it does not work like regular snow blowing machines. In order to make it work, you need to tie it to some point that it does not cover, and then switch it on. As a result it will go along a circle around this point and will remove all the snow from its path.\n\nFormally, we assume that Peter's machine is a polygon on a plane. Then, after the machine is switched on, it will make a circle around the point to which Peter tied it (this point lies strictly outside the polygon). That is, each of the points lying within or on the border of the polygon will move along the circular trajectory, with the center of the circle at the point to which Peter tied his machine.\n\nPeter decided to tie his car to point P and now he is wondering what is the area of \u200b\u200bthe region that will be cleared from snow. Help him.\n\nInput\n\nThe first line of the input contains three integers \u2014 the number of vertices of the polygon n (<image>), and coordinates of point P.\n\nEach of the next n lines contains two integers \u2014 coordinates of the vertices of the polygon in the clockwise or counterclockwise order. It is guaranteed that no three consecutive vertices lie on a common straight line.\n\nAll the numbers in the input are integers that do not exceed 1 000 000 in their absolute value.\n\nOutput\n\nPrint a single real value number \u2014 the area of the region that will be cleared. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6. \n\nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if <image>.\n\nExamples\n\nInput\n\n3 0 0\n0 1\n-1 2\n1 2\n\n\nOutput\n\n12.566370614359172464\n\n\nInput\n\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n\n\nOutput\n\n21.991148575128551812\n\nNote\n\nIn the first sample snow will be removed from that area:\n\n<image>",
        "task_name": "614_C. Peter and Snow Blower",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/python\n\nimport sys\nimport math \nimport re\nfrom datetime import datetime\nfrom decimal import *\n\nsys.setrecursionlimit(20000)\nstartTime = datetime.now()\n\ndef readn(n):\n    return [raw_input().strip() for i in range(n)]\ndef read():\n    return raw_input().strip()\ndef readints():\n    return map(int, read().split())\ndef readint():\n    return readints()[0]\ndef wl(o):\n    print(o)\n\n#print(datetime.now()-startTime)\nNP = readints()\nN = NP[0]\nP = NP[1:]\n\nminD = 1000000000000000000;\nmaxD = 0;\n\nfor i in range(N):\n    X = readints()\n    d = (P[0] - X[0]) * (P[0] - X[0]) + (P[1] - X[1]) * (P[1] - X[1]);\n    minD = min(minD, d);\n    maxD = max(maxD, d);\n\nprint +Decimal(math.pi)*(maxD-minD)",
        "correct": false,
        "task_id": "0111",
        "depth": 1
    },
    {
        "description": "Recently, Pari and Arya did some research about NP-Hard problems and they found the minimum vertex cover problem very interesting.\n\nSuppose the graph G is given. Subset A of its vertices is called a vertex cover of this graph, if for each edge uv there is at least one endpoint of it in this set, i.e. <image> or <image> (or both).\n\nPari and Arya have won a great undirected graph as an award in a team contest. Now they have to split it in two parts, but both of them want their parts of the graph to be a vertex cover.\n\nThey have agreed to give you their graph and you need to find two disjoint subsets of its vertices A and B, such that both A and B are vertex cover or claim it's impossible. Each vertex should be given to no more than one of the friends (or you can even keep it for yourself).\n\nInput\n\nThe first line of the input contains two integers n and m (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000) \u2014 the number of vertices and the number of edges in the prize graph, respectively.\n\nEach of the next m lines contains a pair of integers ui and vi (1 \u2264 ui, vi \u2264 n), denoting an undirected edge between ui and vi. It's guaranteed the graph won't contain any self-loops or multiple edges.\n\nOutput\n\nIf it's impossible to split the graph between Pari and Arya as they expect, print \"-1\" (without quotes).\n\nIf there are two disjoint sets of vertices, such that both sets are vertex cover, print their descriptions. Each description must contain two lines. The first line contains a single integer k denoting the number of vertices in that vertex cover, and the second line contains k integers \u2014 the indices of vertices. Note that because of m \u2265 1, vertex cover cannot be empty.\n\nExamples\n\nInput\n\n4 2\n1 2\n2 3\n\n\nOutput\n\n1\n2 \n2\n1 3 \n\n\nInput\n\n3 3\n1 2\n2 3\n1 3\n\n\nOutput\n\n-1\n\nNote\n\nIn the first sample, you can give the vertex number 2 to Arya and vertices numbered 1 and 3 to Pari and keep vertex number 4 for yourself (or give it someone, if you wish).\n\nIn the second sample, there is no way to satisfy both Pari and Arya.",
        "task_name": "687_A. NP-Hard Problem",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\ne = ''\ndef spread(u):\n\tfor v in xrange(1, n+1):\n\t\ttry:\n\t\t\tx = str(u) + ' ' + str(v)\n\t\t\ty = str(v) + ' ' + str(u)\n\t\t\tif (e.index(x) or e.index(y)) and (u != v):\n\t\t\t\tif (cl[v] == 0):\n\t\t\t\t\tcl[v] = 3-(cl[u])\n\t\t\t\t\tspread(v)\n\t\t\t\telse:\n\t\t\t\t\tif cl[v] != 3- cl[u]:\n\t\t\t\t\t\tprint (\"-1\")\n\t\t\t\t\t\tsys.exit(0)\n\n\t\texcept ValueError:\n\t\t\tpass\n\t\t\n\t\t\t\n\t\t\t\t\n\nif __name__ == \"__main__\":\n\tn, m = map(int, raw_input().split())\n\tcl = [0] * (n+1)\n\n\thasE = [False] * (n+1)\n\n\tfor i in xrange(1, m+1):\n\t\tu, v = map(int, raw_input().split())\n\t\te += str(u) + ' ' + str(v) + '\\n'\n\t\te += str(v) + ' ' + str(u) + '\\n'\n\t\thasE[u] = hasE[v] = True\n\n\t# print (e)\n\tfor i in xrange(1, n+1):\n\t\tif (cl[i] == 0) and (hasE[i]):\n\t\t\tcl[i] = 1\n\t\t\tspread(i)\n\n\tstra = ''\n\tstrb = ''\n\tnA = 0\n\tnB = 0\n\tfor i in xrange(1, n+1):\n\t\tif cl[i] == 1:\n\t\t\tnA += 1\n\t\t\tstra += str(i) + ' '\n\t\telif cl[i] == 2:\n\t\t\tnB += 1\n\t\t\tstrb += str(i) + ' '\n\tprint(nA)\n\tprint(stra)\n\tprint(nB)\n\tprint(strb)",
        "correct": false,
        "task_id": "0112",
        "depth": 1
    },
    {
        "description": "Ilya is an experienced player in tic-tac-toe on the 4 \u00d7 4 field. He always starts and plays with Xs. He played a lot of games today with his friend Arseny. The friends became tired and didn't finish the last game. It was Ilya's turn in the game when they left it. Determine whether Ilya could have won the game by making single turn or not. \n\nThe rules of tic-tac-toe on the 4 \u00d7 4 field are as follows. Before the first turn all the field cells are empty. The two players take turns placing their signs into empty cells (the first player places Xs, the second player places Os). The player who places Xs goes first, the another one goes second. The winner is the player who first gets three of his signs in a row next to each other (horizontal, vertical or diagonal).\n\nInput\n\nThe tic-tac-toe position is given in four lines.\n\nEach of these lines contains four characters. Each character is '.' (empty cell), 'x' (lowercase English letter x), or 'o' (lowercase English letter o). It is guaranteed that the position is reachable playing tic-tac-toe, and it is Ilya's turn now (in particular, it means that the game is not finished). It is possible that all the cells are empty, it means that the friends left without making single turn.\n\nOutput\n\nPrint single line: \"YES\" in case Ilya could have won by making single turn, and \"NO\" otherwise.\n\nExamples\n\nInput\n\nxx..\n.oo.\nx...\noox.\n\n\nOutput\n\nYES\n\n\nInput\n\nx.ox\nox..\nx.o.\noo.x\n\n\nOutput\n\nNO\n\n\nInput\n\nx..x\n..oo\no...\nx.xo\n\n\nOutput\n\nYES\n\n\nInput\n\no.x.\no...\n.x..\nooxx\n\n\nOutput\n\nNO\n\nNote\n\nIn the first example Ilya had two winning moves: to the empty cell in the left column and to the leftmost empty cell in the first row.\n\nIn the second example it wasn't possible to win by making single turn.\n\nIn the third example Ilya could have won by placing X in the last row between two existing Xs.\n\nIn the fourth example it wasn't possible to win by making single turn.",
        "task_name": "754_B. Ilya and tic-tac-toe game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/python2.7\n#\n# Jacob Adams\nimport sys\n\n\ndef main():\n\trow1 = raw_input()\n\trow2 = raw_input()\n\trow3 = raw_input()\n\trow4 = raw_input()\n\n\tboard = [[0 for row in range(4)] for col in range(4)]\n\n\tcreateBoard(board, row1, 0)\n\tcreateBoard(board, row2, 1)\n\tcreateBoard(board, row3, 2)\n\tcreateBoard(board, row4, 3)\n\n\tif(checkHoriz(board)):\n\t\tprint(\"yay\")\n\telse:\n\t\tprint(\"no\")\n\t#print(input)\n\t#print(sys.argv[1])\n\t#print(\"hello World\")\n\ndef createBoard(board, input, row):\n\tcount = 0\n\tfor char in input:\n\t\tboard[row][count] = char \n\t\t++count\n\treturn board\n\ndef checkHoriz(board):\n\tfor i in range(0,3):\n\t\toCount = 0\n\t\ttemp = 0\n\t\tfor k in range(0,3):\n\t\t\tif(board[i][k] == 'o'):\n\t\t\t\t++oCount\n\t\t\telif(board[i][k] == '.'):\n\t\t\t\tif(temp):\n\t\t\t\t\toCount = 0\n\t\t\t\telse:\n\t\t\t\t\ttemp = 1\n\t\t\t\t\t++oCount\n\n\t\t\telif(board[i][k] == 'x'):\n\t\t\t\toCount = 0;\n\n\t\tif(oCount > 2):\n\t\t\treturn 1\n\treturn 0\n\nmain()",
        "correct": false,
        "task_id": "0114",
        "depth": 2
    },
    {
        "description": "Stepan likes to repeat vowel letters when he writes words. For example, instead of the word \"pobeda\" he can write \"pobeeeedaaaaa\".\n\nSergey does not like such behavior, so he wants to write a program to format the words written by Stepan. This program must combine all consecutive equal vowels to a single vowel. The vowel letters are \"a\", \"e\", \"i\", \"o\", \"u\" and \"y\".\n\nThere are exceptions: if letters \"e\" or \"o\" repeat in a row exactly 2 times, like in words \"feet\" and \"foot\", the program must skip them and do not transform in one vowel. For example, the word \"iiiimpleeemeentatiioon\" must be converted to the word \"implemeentatioon\".\n\nSergey is very busy and asks you to help him and write the required program.\n\nInput\n\nThe first line contains the integer n (1 \u2264 n \u2264 100 000) \u2014 the number of letters in the word written by Stepan.\n\nThe second line contains the string s which has length that equals to n and contains only lowercase English letters \u2014 the word written by Stepan.\n\nOutput\n\nPrint the single string \u2014 the word written by Stepan converted according to the rules described in the statement.\n\nExamples\n\nInput\n\n13\npobeeeedaaaaa\n\n\nOutput\n\npobeda\n\n\nInput\n\n22\niiiimpleeemeentatiioon\n\n\nOutput\n\nimplemeentatioon\n\n\nInput\n\n18\naeiouyaaeeiioouuyy\n\n\nOutput\n\naeiouyaeeioouy\n\n\nInput\n\n24\naaaoooiiiuuuyyyeeeggghhh\n\n\nOutput\n\naoiuyeggghhh",
        "task_name": "774_K. Stepan and Vowels",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = input()\ns = raw_input()\ns += \"#\"\n\nans = []\ntmp = [s[0]]\nfor i in range(n + 1):\n    if (i == 0):\n        continue\n    if (s[i] != s[i - 1]):\n        if (tmp[0] == \"a\" or tmp[0] == \"e\" or tmp[0] == \"i\" or tmp[0] == \"o\" or tmp[0] == \"u\" or tmp[0] == \"y\"):\n            if ((tmp[0] == \"e\" or tmp[0] == \"o\") and len(tmp) == 2):\n                ans.extend(tmp)\n            else:\n                ans.append(tmp[0])\n        else:\n            ans.extend(tmp)\n        tmp = [s[i]]\n    else:\n        tmp.append(s[i])\n\nprint(''.join(ans))\n",
        "correct": true,
        "task_id": "0115",
        "depth": 1
    },
    {
        "description": "Mister B once received a gift: it was a book about aliens, which he started read immediately. This book had c pages.\n\nAt first day Mister B read v0 pages, but after that he started to speed up. Every day, starting from the second, he read a pages more than on the previous day (at first day he read v0 pages, at second \u2014 v0 + a pages, at third \u2014 v0 + 2a pages, and so on). But Mister B is just a human, so he physically wasn't able to read more than v1 pages per day.\n\nAlso, to refresh his memory, every day, starting from the second, Mister B had to reread last l pages he read on the previous day. Mister B finished the book when he read the last page for the first time.\n\nHelp Mister B to calculate how many days he needed to finish the book.\n\nInput\n\nFirst and only line contains five space-separated integers: c, v0, v1, a and l (1 \u2264 c \u2264 1000, 0 \u2264 l < v0 \u2264 v1 \u2264 1000, 0 \u2264 a \u2264 1000) \u2014 the length of the book in pages, the initial reading speed, the maximum reading speed, the acceleration in reading speed and the number of pages for rereading.\n\nOutput\n\nPrint one integer \u2014 the number of days Mister B needed to finish the book.\n\nExamples\n\nInput\n\n5 5 10 5 4\n\n\nOutput\n\n1\n\n\nInput\n\n12 4 12 4 1\n\n\nOutput\n\n3\n\n\nInput\n\n15 1 100 0 0\n\n\nOutput\n\n15\n\nNote\n\nIn the first sample test the book contains 5 pages, so Mister B read it right at the first day.\n\nIn the second sample test at first day Mister B read pages number 1 - 4, at second day \u2014 4 - 11, at third day \u2014 11 - 12 and finished the book.\n\nIn third sample test every day Mister B read 1 page of the book, so he finished in 15 days.",
        "task_name": "820_A. Mister B and Book Reading",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "c, v0, v1, a, l = map(int, raw_input().split())\n\ndays = 0\n\nwhile c > 0:\n    c -= min(v0+days*a, v1)\n    days += 1\n    if c > 0:\n        c += l\n\nprint(days)\n",
        "correct": true,
        "task_id": "0116",
        "depth": 1
    },
    {
        "description": "Polycarp takes part in a math show. He is given n tasks, each consists of k subtasks, numbered 1 through k. It takes him tj minutes to solve the j-th subtask of any task. Thus, time required to solve a subtask depends only on its index, but not on the task itself. Polycarp can solve subtasks in any order.\n\nBy solving subtask of arbitrary problem he earns one point. Thus, the number of points for task is equal to the number of solved subtasks in it. Moreover, if Polycarp completely solves the task (solves all k of its subtasks), he recieves one extra point. Thus, total number of points he recieves for the complete solution of the task is k + 1.\n\nPolycarp has M minutes of time. What is the maximum number of points he can earn?\n\nInput\n\nThe first line contains three integer numbers n, k and M (1 \u2264 n \u2264 45, 1 \u2264 k \u2264 45, 0 \u2264 M \u2264 2\u00b7109).\n\nThe second line contains k integer numbers, values tj (1 \u2264 tj \u2264 1000000), where tj is the time in minutes required to solve j-th subtask of any task.\n\nOutput\n\nPrint the maximum amount of points Polycarp can earn in M minutes.\n\nExamples\n\nInput\n\n3 4 11\n1 2 3 4\n\n\nOutput\n\n6\n\n\nInput\n\n5 5 10\n1 2 4 8 16\n\n\nOutput\n\n7\n\nNote\n\nIn the first example Polycarp can complete the first task and spend 1 + 2 + 3 + 4 = 10 minutes. He also has the time to solve one subtask of the second task in one minute.\n\nIn the second example Polycarp can solve the first subtask of all five tasks and spend 5\u00b71 = 5 minutes. Also he can solve the second subtasks of two tasks and spend 2\u00b72 = 4 minutes. Thus, he earns 5 + 2 = 7 points in total.",
        "task_name": "846_B. Math Show",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "[n,k, M] = [int(i) for i in raw_input().split(' ')]\ntimes = [int(i) for i in raw_input().split(' ')]\ntimes.sort()\ntimes_matrix = [times for i in range(n)]\n\nbest_points = 0\n#Iterate by gradually increasing starting row\nfor start_row in range(0, n):\n    total_time = sum(times) * start_row\n    total_points = (k + 1) * start_row\n    [cur_row, cur_col] = [start_row,0]\n    #sum vertically, moving down column, then moving columns\n    while total_time <= M and cur_col < k:\n        if cur_row >= n:\n            cur_row = start_row\n            cur_col += 1\n        else:\n            if total_time + times_matrix[cur_row][cur_col] > M:\n                break\n            else:\n                total_time += times_matrix[cur_row][cur_col]\n                cur_row += 1\n                total_points += 1\n    if best_points < total_points and total_time <= M:\n        best_points = total_points\n\nprint(best_points)\n",
        "correct": false,
        "task_id": "0117",
        "depth": 2
    },
    {
        "description": "Alex, Bob and Carl will soon participate in a team chess tournament. Since they are all in the same team, they have decided to practise really hard before the tournament. But it's a bit difficult for them because chess is a game for two players, not three.\n\nSo they play with each other according to following rules:\n\n  * Alex and Bob play the first game, and Carl is spectating; \n  * When the game ends, the one who lost the game becomes the spectator in the next game, and the one who was spectating plays against the winner. \n\n\n\nAlex, Bob and Carl play in such a way that there are no draws.\n\nToday they have played n games, and for each of these games they remember who was the winner. They decided to make up a log of games describing who won each game. But now they doubt if the information in the log is correct, and they want to know if the situation described in the log they made up was possible (that is, no game is won by someone who is spectating if Alex, Bob and Carl play according to the rules). Help them to check it!\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of games Alex, Bob and Carl played.\n\nThen n lines follow, describing the game log. i-th line contains one integer ai (1 \u2264 ai \u2264 3) which is equal to 1 if Alex won i-th game, to 2 if Bob won i-th game and 3 if Carl won i-th game.\n\nOutput\n\nPrint YES if the situation described in the log was possible. Otherwise print NO.\n\nExamples\n\nInput\n\n3\n1\n1\n2\n\n\nOutput\n\nYES\n\n\nInput\n\n2\n1\n2\n\n\nOutput\n\nNO\n\nNote\n\nIn the first example the possible situation is:\n\n  1. Alex wins, Carl starts playing instead of Bob; \n  2. Alex wins, Bob replaces Carl; \n  3. Bob wins. \n\n\n\nThe situation in the second example is impossible because Bob loses the first game, so he cannot win the second one.",
        "task_name": "893_A. Chess For Three",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\nnums = [0] * n\nfor i in range(n):\n    nums[i] = int(raw_input())\n\np = [1, 2]\nnp = 3\nok = True\nfor i in range(n):\n    if np == nums[i]:\n        ok = False\n        break\n\n    p.remove(nums[i])\n    k = [nums[i], np]\n    np = p[0]\n    p = k\n\nif ok:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
        "correct": true,
        "task_id": "0118",
        "depth": 1
    },
    {
        "description": "You have a Petri dish with bacteria and you are preparing to dive into the harsh micro-world. But, unfortunately, you don't have any microscope nearby, so you can't watch them.\n\nYou know that you have n bacteria in the Petri dish and size of the i-th bacteria is a_i. Also you know intergalactic positive integer constant K.\n\nThe i-th bacteria can swallow the j-th bacteria if and only if a_i > a_j and a_i \u2264 a_j + K. The j-th bacteria disappear, but the i-th bacteria doesn't change its size. The bacteria can perform multiple swallows. On each swallow operation any bacteria i can swallow any bacteria j if a_i > a_j and a_i \u2264 a_j + K. The swallow operations go one after another.\n\nFor example, the sequence of bacteria sizes a=[101, 53, 42, 102, 101, 55, 54] and K=1. The one of possible sequences of swallows is: [101, 53, 42, 102, \\underline{101}, 55, 54] \u2192 [101, \\underline{53}, 42, 102, 55, 54] \u2192 [\\underline{101}, 42, 102, 55, 54] \u2192 [42, 102, 55, \\underline{54}] \u2192 [42, 102, 55]. In total there are 3 bacteria remained in the Petri dish.\n\nSince you don't have a microscope, you can only guess, what the minimal possible number of bacteria can remain in your Petri dish when you finally will find any microscope.\n\nInput\n\nThe first line contains two space separated positive integers n and K (1 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 K \u2264 10^6) \u2014 number of bacteria and intergalactic constant K.\n\nThe second line contains n space separated integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^6) \u2014 sizes of bacteria you have.\n\nOutput\n\nPrint the only integer \u2014 minimal possible number of bacteria can remain.\n\nExamples\n\nInput\n\n7 1\n101 53 42 102 101 55 54\n\n\nOutput\n\n3\n\n\nInput\n\n6 5\n20 15 10 15 20 25\n\n\nOutput\n\n1\n\n\nInput\n\n7 1000000\n1 1 1 1 1 1 1\n\n\nOutput\n\n7\n\nNote\n\nThe first example is clarified in the problem statement.\n\nIn the second example an optimal possible sequence of swallows is: [20, 15, 10, 15, \\underline{20}, 25] \u2192 [20, 15, 10, \\underline{15}, 25] \u2192 [20, 15, \\underline{10}, 25] \u2192 [20, \\underline{15}, 25] \u2192 [\\underline{20}, 25] \u2192 [25].\n\nIn the third example no bacteria can swallow any other bacteria.",
        "task_name": "990_B. Micro-World",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,k = map(int,raw_input().split())\narr = list(map(int,raw_input().split()))\nfreq = dict()\nfor i in arr:\n    freq[i] = freq.get(i,0)\n    freq[i] += 1\narr = list(set(arr))\narr.sort(reverse=True)\nans = freq[arr[0]]\npres = arr[0]\nfor i in arr[1:]:\n    if pres > i and pres <= i+k :\n        pass\n    else:\n        ans += freq[i]\n    pres = i\nprint(ans)\n",
        "correct": true,
        "task_id": "0119",
        "depth": 1
    },
    {
        "description": "You are given N positive integers a_1, a_2, ..., a_N.\n\nFor a non-negative integer m, let f(m) = (m\\ mod\\ a_1) + (m\\ mod\\ a_2) + ... + (m\\ mod\\ a_N).\n\nHere, X\\ mod\\ Y denotes the remainder of the division of X by Y.\n\nFind the maximum value of f.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 3000\n* 2 \\leq a_i \\leq 10^5\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N\n\n\nOutput\n\nPrint the maximum value of f.\n\nExamples\n\nInput\n\n3\n3 4 6\n\n\nOutput\n\n10\n\n\nInput\n\n5\n7 46 11 20 11\n\n\nOutput\n\n90\n\n\nInput\n\n7\n994 518 941 851 647 2 581\n\n\nOutput\n\n4527",
        "task_name": "p03294 AtCoder Beginner Contest 103 - Modulo Summation",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "A = map(int, raw_input().split())\n\nAnswer=0\nfor Amap in A:\n  Answer = Answer + Amap -1\n\nprint(Answer)\n",
        "correct": false,
        "task_id": "0122",
        "depth": 1
    },
    {
        "description": "You are given a permutation p_1,p_2,...,p_N consisting of 1,2,..,N. You can perform the following operation any number of times (possibly zero):\n\nOperation: Swap two adjacent elements in the permutation.\n\nYou want to have p_i \u2260 i for all 1\u2264i\u2264N. Find the minimum required number of operations to achieve this.\n\nConstraints\n\n* 2\u2264N\u226410^5\n* p_1,p_2,..,p_N is a permutation of 1,2,..,N.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\np_1 p_2 .. p_N\n\n\nOutput\n\nPrint the minimum required number of operations\n\nExamples\n\nInput\n\n5\n1 4 3 5 2\n\n\nOutput\n\n2\n\n\nInput\n\n2\n1 2\n\n\nOutput\n\n1\n\n\nInput\n\n2\n2 1\n\n\nOutput\n\n0\n\n\nInput\n\n9\n1 2 4 9 5 8 7 3 6\n\n\nOutput\n\n3",
        "task_name": "p03612 AtCoder Beginner Contest 072 - Derangement",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    line = sys.stdin.readline()\n    while line:\n        N = int(line)\n        P = map(lambda x: int(x), sys.stdin.readline().split(\" \"))\n\n        counter = 0\n        for i in xrange(len(P)):\n            index = i + 1\n            if P[i] == index:\n                if i > 0:\n                    if P[i - 1] == index - 1:\n                        P[i] = P[i - 1]\n                    elif P[i + 1] == index + 1:\n                        P[i], P[i + 1] = P[i + 1], P[i]\n                    else:\n                        P[i] = P[i - 1]\n                else:\n                    P[i], P[i + 1] = P[i + 1], P[i]\n                counter += 1\n        print(counter)\n        \n        line = sys.stdin.readline()\n\nif __name__ == \"__main__\":\n    main(sys.argv)",
        "correct": false,
        "task_id": "0123",
        "depth": 2
    },
    {
        "description": "There is a factory that inputs the data of the side and diagonal lengths to the machine and cuts out the plastic plate. At this factory, we cut out only parallelogram molds, although they vary in size. You have been ordered by your boss to count the number of rectangles and rhombuses produced among the parallelograms that are cut out.\n\nCreate a program that reads \"Data to be input to the machine\" and outputs the number of rectangles and diamonds manufactured.\n\n<image>\n\n\n\nInput\n\nThe input is given in the following format:\n\n\na1, b1, c1\na2, b2, c2\n::\n\n\nThe data to be entered into the machine is given in multiple lines. On line i, the integers ai, bi, which represent the lengths of two adjacent sides of the i-th parallelogram, and the integer ci, which represents the length of the diagonal, are given, separated by commas (1 \u2264 ai, bi, ci \u2264 1000). , ai + bi> ci). The number of data does not exceed 100.\n\nOutput\n\nThe first line outputs the number of rectangles manufactured, and the second line outputs the number of diamonds manufactured.\n\nExample\n\nInput\n\n3,4,5\n5,5,8\n4,4,4\n5,4,3\n\n\nOutput\n\n1\n2",
        "task_name": "p00032 Plastic Board",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import (division, absolute_import, print_function,\n                        unicode_literals)\nfrom sys import stdin\n\nrectangle = diamond = 0\nfor line in stdin:\n    try:\n        a, b, c = (int(s) for s in line.split(','))\n    except ValueError:\n        break\n    diamond += a == b\n    rectangle += a ** 2 + b ** 2 == c ** 2\nprint(rectangle, diamond, sep='\\n')",
        "correct": true,
        "task_id": "0124",
        "depth": 1
    },
    {
        "description": "A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\n\nWrite a program which reads a list of N integers and prints the number of prime numbers in the list.\n\nConstraints\n\n1 \u2264 N \u2264 10000\n\n2 \u2264 an element of the list \u2264 108\n\nInput\n\nThe first line contains an integer N, the number of elements in the list.\n\nN numbers are given in the following lines.\n\nOutput\n\nPrint the number of prime numbers in the given list.\n\nExamples\n\nInput\n\n5\n2\n3\n4\n5\n6\n\n\nOutput\n\n3\n\n\nInput\n\n11\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nOutput\n\n4",
        "task_name": "p02257 Prime Numbers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def isPrime( x ):\n\tif 2 == x or 3 == x:\n\t\treturn True\n\tif 0 == x%2:\n\t\treturn False \n\t\n\tfor i in range( 3, x ):\n\t\tif x < i*i:\n\t\t\tbreak\n\t\tif 0 == x%i:\n\t\t\treturn False\n\treturn True\n\n\nn = int( raw_input( ) )\ncnt = 0\nfor i in range( n ):\n\tnum = int( raw_input( ) )\n\tif isPrime( num  ):\n\t\tcnt += 1\n\nprint( cnt )",
        "correct": false,
        "task_id": "0125",
        "depth": 1
    },
    {
        "description": "Draw a chessboard which has a height of H cm and a width of W cm. For example, the following figure shows a chessboard which has a height of 6 cm and a width of 10 cm.\n\n\n.#.#.#.#.\n.#.#.#.#.#\n.#.#.#.#.\n.#.#.#.#.#\n.#.#.#.#.\n.#.#.#.#.#\n\n\nNote that the top left corner should be drawn by '#'.\n\nConstraints\n\n* 1 \u2264 H \u2264 300\n* 1 \u2264 W \u2264 300\n\nInput\n\nThe input consists of multiple datasets. Each dataset consists of two integers H and W separated by a single space.\n\nThe input ends with two 0 (when both H and W are zero).\n\nOutput\n\nFor each dataset, print the chessboard made of '#' and '.'.\n\nPrint a blank line after each dataset.\n\nExample\n\nInput\n\n3 4\n5 6\n3 3\n2 2\n1 1\n0 0\n\n\nOutput\n\n#.#.\n.#.#\n#.#.\n\n#.#.#.\n.#.#.#\n#.#.#.\n.#.#.#\n#.#.#.\n\n#.#\n.#.\n#.#\n\n#.\n.#\n\n#",
        "task_name": "p02405 Print a Chessboard",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def draw(h, w):\n    for i in range(h):\n        for j in range(w):\n            print(\"#\" if (i+j)%2 == 0 else \".\")\n        print(\"\")\n\nwhile True:\n    h, w = map(int, raw_input().split())\n    if h == 0 and w == 0:\n        break\n    draw(h, w)",
        "correct": false,
        "task_id": "0126",
        "depth": 2
    },
    {
        "description": "Polycarp has an array a consisting of n integers.\n\nHe wants to play a game with this array. The game consists of several moves. On the first move he chooses any element and deletes it (after the first move the array contains n-1 elements). For each of the next moves he chooses any element with the only restriction: its parity should differ from the parity of the element deleted on the previous move. In other words, he alternates parities (even-odd-even-odd-... or odd-even-odd-even-...) of the removed elements. Polycarp stops if he can't make a move.\n\nFormally: \n\n  * If it is the first move, he chooses any element and deletes it; \n  * If it is the second or any next move: \n    * if the last deleted element was odd, Polycarp chooses any even element and deletes it; \n    * if the last deleted element was even, Polycarp chooses any odd element and deletes it. \n  * If after some move Polycarp cannot make a move, the game ends. \n\n\n\nPolycarp's goal is to minimize the sum of non-deleted elements of the array after end of the game. If Polycarp can delete the whole array, then the sum of non-deleted elements is zero.\n\nHelp Polycarp find this value.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2000) \u2014 the number of elements of a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^6), where a_i is the i-th element of a.\n\nOutput\n\nPrint one integer \u2014 the minimum possible sum of non-deleted elements of the array after end of the game.\n\nExamples\n\nInput\n\n\n5\n1 5 7 8 2\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n6\n5 1 2 4 6 3\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n2\n1000000 1000000\n\n\nOutput\n\n\n1000000",
        "task_name": "1144_B. Parity Alternated Deletions",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=int(raw_input())\nstr=raw_input()\nl=[int(e) for e in str.split()]\nodd=[]\neven=[]\nfor e in l:\n    if e%2==0:\n        even=even+[e]\n    else:\n        odd=odd+[e]\nl1=len(odd)\nl2=len(even)\nodd.sort()\neven.sort()\nans=0\nif(len(even)>len(odd)):\n    temp=len(even)-len(odd)\n    ans=sum(even[0:temp-1])\nif(len(even)<len(odd)):\n    temp=-len(even)+len(odd)\n    ans=sum(odd[0:temp-1])\nprint(ans)\n\n",
        "correct": true,
        "task_id": "0127",
        "depth": 1
    },
    {
        "description": "You are given a huge decimal number consisting of n digits. It is guaranteed that this number has no leading zeros. Each digit of this number is either 0 or 1.\n\nYou may perform several (possibly zero) operations with this number. During each operation you are allowed to change any digit of your number; you may change 0 to 1 or 1 to 0. It is possible that after some operation you can obtain a number with leading zeroes, but it does not matter for this problem.\n\nYou are also given two integers 0 \u2264 y < x < n. Your task is to calculate the minimum number of operations you should perform to obtain the number that has remainder 10^y modulo 10^x. In other words, the obtained number should have remainder 10^y when divided by 10^x.\n\nInput\n\nThe first line of the input contains three integers n, x, y (0 \u2264 y < x < n \u2264 2 \u22c5 10^5) \u2014 the length of the number and the integers x and y, respectively.\n\nThe second line of the input contains one decimal number consisting of n digits, each digit of this number is either 0 or 1. It is guaranteed that the first digit of the number is 1.\n\nOutput\n\nPrint one integer \u2014 the minimum number of operations you should perform to obtain the number having remainder 10^y modulo 10^x. In other words, the obtained number should have remainder 10^y when divided by 10^x.\n\nExamples\n\nInput\n\n\n11 5 2\n11010100101\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n11 5 1\n11010100101\n\n\nOutput\n\n\n3\n\nNote\n\nIn the first example the number will be 11010100100 after performing one operation. It has remainder 100 modulo 100000.\n\nIn the second example the number will be 11010100010 after performing three operations. It has remainder 10 modulo 100000.",
        "task_name": "1165_A. Remainder",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=map(int,str(raw_input()).split(\" \"))\nk=int(raw_input())\nmodu=pow(10,n[1])\nk=k%modu\nk=list(str(k))\ncounter=0\nfor i in k:\n    if(i==\"1\"):\n        counter+=1\nif(k[len(k)-n[2]]==\"1\"):\n    counter-=1\nelse:\n    counter+=1\nprint(counter)\n",
        "correct": false,
        "task_id": "0128",
        "depth": 1
    },
    {
        "description": "You have a string s \u2014 a sequence of commands for your toy robot. The robot is placed in some cell of a rectangular grid. He can perform four commands:\n\n  * 'W' \u2014 move one cell up; \n  * 'S' \u2014 move one cell down; \n  * 'A' \u2014 move one cell left; \n  * 'D' \u2014 move one cell right. \n\n\n\nLet Grid(s) be the grid of minimum possible area such that there is a position in the grid where you can place the robot in such a way that it will not fall from the grid while running the sequence of commands s. For example, if s = DSAWWAW then Grid(s) is the 4 \u00d7 3 grid:\n\n  1. you can place the robot in the cell (3, 2); \n  2. the robot performs the command 'D' and moves to (3, 3); \n  3. the robot performs the command 'S' and moves to (4, 3); \n  4. the robot performs the command 'A' and moves to (4, 2); \n  5. the robot performs the command 'W' and moves to (3, 2); \n  6. the robot performs the command 'W' and moves to (2, 2); \n  7. the robot performs the command 'A' and moves to (2, 1); \n  8. the robot performs the command 'W' and moves to (1, 1). \n\n<image>\n\nYou have 4 extra letters: one 'W', one 'A', one 'S', one 'D'. You'd like to insert at most one of these letters in any position of sequence s to minimize the area of Grid(s).\n\nWhat is the minimum area of Grid(s) you can achieve?\n\nInput\n\nThe first line contains one integer T (1 \u2264 T \u2264 1000) \u2014 the number of queries.\n\nNext T lines contain queries: one per line. This line contains single string s (1 \u2264 |s| \u2264 2 \u22c5 10^5, s_i \u2208 \\{W, A, S, D\\}) \u2014 the sequence of commands.\n\nIt's guaranteed that the total length of s over all queries doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint T integers: one per query. For each query print the minimum area of Grid(s) you can achieve.\n\nExample\n\nInput\n\n\n3\nDSAWWAW\nD\nWA\n\n\nOutput\n\n\n8\n2\n4\n\nNote\n\nIn the first query you have to get string DSAWW\\underline{D}AW.\n\nIn second and third queries you can not decrease the area of Grid(s).",
        "task_name": "1202_C. You Are Given a WASD-string...",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\nimport threading,bisect,math,heapq,sys\n# threading.stack_size(2**27)\n# sys.setrecursionlimit(10**4)\nfrom sys import stdin, stdout\ni_m=9223372036854775807    \ndef cin():\n    return map(int,sin().split())\ndef ain():                           #takes array as input\n    return list(map(int,sin().split()))\ndef sin():\n    return input()\ndef inin():\n    return int(input()) \nprime=[]\ndef dfs(n,d,v,a,c):\n    v[n]=1\n    if n in d:\n        x=d[n]\n    else:\n        a[n]+=c\n        x=[]\n    p=a[n]\n    for i in x:\n        if i not in v:\n            dfs(i,d,v,a,c)\n            p+=a[i]\n    a[n]=p\n    return p\n\n\"\"\"**************************MAIN*****************************\"\"\"\ndef main():\n    def fun(s,p):\n        lpm=[]\n        hpm=[]\n        if p==1:\n            s=s[::-1]\n        a=c=1000000000\n        b=d=-1000000000\n        for i in s:\n            if p==1:\n                lpm.append((a,c))\n                hpm.append((b,d))\n            a=min(a,i[0])\n            b=max(b,i[0])\n            c=min(c,i[1])\n            d=max(d,i[1])\n            if p==0:\n                lpm.append((a,c))\n                hpm.append((b,d))\n        if p==1:\n            lpm=lpm[::-1]\n            hpm=hpm[::-1]\n        return lpm,hpm\n    t=inin()\n    for _ in range(t):\n        s=sin()\n        a=[]\n        x=y=0\n        p=q=1\n        for i in s:\n            if i==\"W\":\n                x+=1\n                p=2\n            elif i==\"S\":\n                x-=1\n                p=2\n            elif i==\"A\":\n                y-=1\n                q=2\n            else:\n                y+=1\n                q=2\n            a.append((x,y))\n        lpm,hpm=fun(a,0)\n        lsm,hsm=fun(a,1)\n        n=len(s)\n        x=i_m\n        y=i_m\n        for i in range(n):\n            a,b,c,d=lpm[i][0],lsm[i][0],hpm[i][0],hsm[i][0]\n            x=min(x,max(c,d,0)-min(a,b,0))\n            y=min(y,max(c,d-1,0)-min(a,b-1,0),max(c,d+1,0)-min(a,b+1,0))\n        xx=i_m\n        yy=i_m\n        for i in range(n):\n            a,b,c,d=lpm[i][1],lsm[i][1],hpm[i][1],hsm[i][1]\n            xx=min(xx,max(c,d,0)-min(a,b,0))\n            yy=min(yy,max(c,d-1,0)-min(a,b-1,0),max(c,d+1,0)-min(a,b+1,0))\n        # print(lpm,hpm,lsm,hsm)\n\n        x=max(x+1,p)\n        y=max(y+1,p)\n        xx=max(xx+1,q)\n        yy=max(yy+1,q)\n        ans=min(x*xx,x*yy,y*xx)\n        print(ans)\n\n\n\"\"\"*******************************************************\"\"\"\n\n######## Python 2 and 3 footer by Pajenegod and c1729\nfac=[]\ndef fact(n,mod):\n    global fac\n    fac.append(1)\n    for i in range(1,n+1):\n        fac.append((fac[i-1]*i)%mod)\n    f=fac[:]\n    return f\ndef nCr(n,r,mod):\n    global fac\n    x=fac[n]\n    y=fac[n-r]\n    z=fac[r]\n    x=moddiv(x,y,mod)\n    return moddiv(x,z,mod)\ndef moddiv(m,n,p):\n    x=pow(n,p-2,p)\n    return (m*x)%p\ndef GCD(x, y): \n    x=abs(x)\n    y=abs(y)\n    if(min(x,y)==0):\n        return max(x,y)\n    while(y): \n        x, y = y, x % y \n    return x \ndef Divisors(n) : \n    l = []  \n    ll=[]\n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if (n % i == 0) : \n            if (n // i == i) : \n                l.append(i) \n            else : \n                l.append(i)\n                ll.append(n//i)\n    l.extend(ll[::-1])\n    return l\ndef SieveOfEratosthenes(n): \n    global prime\n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    f=[]\n    for p in range(2, n): \n        if prime[p]: \n            f.append(p)\n    return f\ndef primeFactors(n): \n    a=[]\n    while n % 2 == 0: \n        a.append(2) \n        n = n // 2 \n    for i in range(3,int(math.sqrt(n))+1,2):  \n        while n % i== 0: \n            a.append(i) \n            n = n // i  \n    if n > 2: \n        a.append(n)\n    return a\n\"\"\"*******************************************************\"\"\"\npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\nimport os\nfrom io import IOBase, BytesIO\nBUFSIZE = 8192\nclass FastIO(BytesIO):\n    newlines = 0\n \n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n \n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0,2), super(FastIO, self).write(s))[0])\n        return s\n \n    def read(self):\n        while self._fill(): pass\n        return super(FastIO,self).read()\n \n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill(); self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s:self.buffer.write(s.encode('ascii'))\n            self.read = lambda:self.buffer.read().decode('ascii')\n            self.readline = lambda:self.buffer.readline().decode('ascii')\n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n') \n# Cout implemented in Python\nclass ostream:\n    def __lshift__(self,a):\n        sys.stdout.write(str(a))\n        return self\ncout = ostream()\nendl = '\\n'\n \n# Read all remaining integers in stdin, type is given by optional argument, this is fast\ndef readnumbers(zero = 0):\n    conv = ord if py2 else lambda x:x\n    A = []; numb = zero; sign = 1; i = 0; s = sys.stdin.buffer.read()\n    try:\n        while True:\n            if s[i] >= b'R' [0]:\n                numb = 10 * numb + conv(s[i]) - 48\n            elif s[i] == b'-' [0]: sign = -1\n            elif s[i] != b'\\r' [0]:\n                A.append(sign*numb)\n                numb = zero; sign = 1\n            i += 1\n    except:pass\n    if s and s[-1] >= b'R' [0]:\n        A.append(sign*numb)\n    return A\n \n# threading.Thread(target=main).start()\nif __name__== \"__main__\":\n  main()",
        "correct": true,
        "task_id": "0129",
        "depth": 2
    },
    {
        "description": "The football season has just ended in Berland. According to the rules of Berland football, each match is played between two teams. The result of each match is either a draw, or a victory of one of the playing teams. If a team wins the match, it gets w points, and the opposing team gets 0 points. If the game results in a draw, both teams get d points.\n\nThe manager of the Berland capital team wants to summarize the results of the season, but, unfortunately, all information about the results of each match is lost. The manager only knows that the team has played n games and got p points for them.\n\nYou have to determine three integers x, y and z \u2014 the number of wins, draws and loses of the team. If there are multiple answers, print any of them. If there is no suitable triple (x, y, z), report about it.\n\nInput\n\nThe first line contains four integers n, p, w and d (1 \u2264 n \u2264 10^{12}, 0 \u2264 p \u2264 10^{17}, 1 \u2264 d < w \u2264 10^{5}) \u2014 the number of games, the number of points the team got, the number of points awarded for winning a match, and the number of points awarded for a draw, respectively. Note that w > d, so the number of points awarded for winning is strictly greater than the number of points awarded for draw.\n\nOutput\n\nIf there is no answer, print -1.\n\nOtherwise print three non-negative integers x, y and z \u2014 the number of wins, draws and losses of the team. If there are multiple possible triples (x, y, z), print any of them. The numbers should meet the following conditions: \n\n  * x \u22c5 w + y \u22c5 d = p, \n  * x + y + z = n. \n\nExamples\n\nInput\n\n\n30 60 3 1\n\n\nOutput\n\n\n17 9 4\n\n\nInput\n\n\n10 51 5 4\n\n\nOutput\n\n\n-1\n\n\nInput\n\n\n20 0 15 5\n\n\nOutput\n\n\n0 0 20\n\nNote\n\nOne of the possible answers in the first example \u2014 17 wins, 9 draws and 4 losses. Then the team got 17 \u22c5 3 + 9 \u22c5 1 = 60 points in 17 + 9 + 4 = 30 games.\n\nIn the second example the maximum possible score is 10 \u22c5 5 = 50. Since p = 51, there is no answer.\n\nIn the third example the team got 0 points, so all 20 games were lost.",
        "task_name": "1244_C. The Football Season",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\n[n,p,w,d]=[int(i) for i in sys.stdin.readline().split()]\n\nx=-1\ny=-1\nz=-1\n\ndone=0\n\nfor i in range(w):\n\tif((p-i*d)%w==0):\n\t\tj=(p-i*d)//w\n\t\tif(i+j<=n):\n\t\t\tx,y,z=j,i,n-j-i\n\t\t\tdone=1\n\t\t\tbreak\n\nif(done==1):\n\tprint(str(x)+\" \"+str(y)+\" \"+str(z))\nelse:\n\tprint(-1)",
        "correct": false,
        "task_id": "0130",
        "depth": 1
    },
    {
        "description": "So the Beautiful Regional Contest (BeRC) has come to an end! n students took part in the contest. The final standings are already known: the participant in the i-th place solved p_i problems. Since the participants are primarily sorted by the number of solved problems, then p_1 \u2265 p_2 \u2265 ... \u2265 p_n.\n\nHelp the jury distribute the gold, silver and bronze medals. Let their numbers be g, s and b, respectively. Here is a list of requirements from the rules, which all must be satisfied:\n\n  * for each of the three types of medals, at least one medal must be awarded (that is, g>0, s>0 and b>0); \n  * the number of gold medals must be strictly less than the number of silver and the number of bronze (that is, g<s and g<b, but there are no requirements between s and b); \n  * each gold medalist must solve strictly more problems than any awarded with a silver medal; \n  * each silver medalist must solve strictly more problems than any awarded a bronze medal; \n  * each bronze medalist must solve strictly more problems than any participant not awarded a medal; \n  * the total number of medalists g+s+b should not exceed half of all participants (for example, if n=21, then you can award a maximum of 10 participants, and if n=26, then you can award a maximum of 13 participants). \n\n\n\nThe jury wants to reward with medals the total maximal number participants (i.e. to maximize g+s+b) so that all of the items listed above are fulfilled. Help the jury find such a way to award medals.\n\nInput\n\nThe first line of the input contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the input. Then t test cases follow.\n\nThe first line of a test case contains an integer n (1 \u2264 n \u2264 4\u22c510^5) \u2014 the number of BeRC participants. The second line of a test case contains integers p_1, p_2, ..., p_n (0 \u2264 p_i \u2264 10^6), where p_i is equal to the number of problems solved by the i-th participant from the final standings. The values p_i are sorted in non-increasing order, i.e. p_1 \u2265 p_2 \u2265 ... \u2265 p_n.\n\nThe sum of n over all test cases in the input does not exceed 4\u22c510^5.\n\nOutput\n\nPrint t lines, the j-th line should contain the answer to the j-th test case.\n\nThe answer consists of three non-negative integers g, s, b.\n\n  * Print g=s=b=0 if there is no way to reward participants with medals so that all requirements from the statement are satisfied at the same time. \n  * Otherwise, print three positive numbers g, s, b \u2014 the possible number of gold, silver and bronze medals, respectively. The sum of g+s+b should be the maximum possible. If there are several answers, print any of them. \n\nExample\n\nInput\n\n\n5\n12\n5 4 4 3 2 2 1 1 1 1 1 1\n4\n4 3 2 1\n1\n1000000\n20\n20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n32\n64 64 63 58 58 58 58 58 37 37 37 37 34 34 28 28 28 28 28 28 24 24 19 17 17 17 17 16 16 16 16 11\n\n\nOutput\n\n\n1 2 3\n0 0 0\n0 0 0\n2 5 3\n2 6 6\n\nNote\n\nIn the first test case, it is possible to reward 1 gold, 2 silver and 3 bronze medals. In this case, the participant solved 5 tasks will be rewarded with the gold medal, participants solved 4 tasks will be rewarded with silver medals, participants solved 2 or 3 tasks will be rewarded with bronze medals. Participants solved exactly 1 task won't be rewarded. It's easy to see, that in this case, all conditions are satisfied and it is possible to reward participants in this way. It is impossible to give more than 6 medals because the number of medals should not exceed half of the number of participants. The answer 1, 3, 2 is also correct in this test case.\n\nIn the second and third test cases, it is impossible to reward medals, because at least one medal of each type should be given, but the number of medals should not exceed half of the number of participants.",
        "task_name": "1264_A. Beautiful Regional Contest",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    t = int(input())\n\n    for _ in range(t):\n        n = int(input())\n\n        g, s, b = 0, 0, 0\n\n        l = 0\n        p = -1\n        for i, j in enumerate(map(int, input().split())):\n            if i > n // 2:\n                break\n\n            if p != j:\n                if g == 0:\n                    g = l\n                elif s <= g:\n                    s += l\n                else:\n                    b += l\n                l = 0\n\n            l += 1\n            p = j\n\n        if g == 0 or s == 0 or b == 0 or g >= s or g >= b:\n            print(0, 0, 0)\n        else:\n            print(g, s, b)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": true,
        "task_id": "0131",
        "depth": 2
    },
    {
        "description": "Today, Osama gave Fadi an integer X, and Fadi was wondering about the minimum possible value of max(a, b) such that LCM(a, b) equals X. Both a and b should be positive integers.\n\nLCM(a, b) is the smallest positive integer that is divisible by both a and b. For example, LCM(6, 8) = 24, LCM(4, 12) = 12, LCM(2, 3) = 6.\n\nOf course, Fadi immediately knew the answer. Can you be just like Fadi and find any such pair?\n\nInput\n\nThe first and only line contains an integer X (1 \u2264 X \u2264 10^{12}).\n\nOutput\n\nPrint two positive integers, a and b, such that the value of max(a, b) is minimum possible and LCM(a, b) equals X. If there are several possible such pairs, you can print any.\n\nExamples\n\nInput\n\n\n2\n\n\nOutput\n\n\n1 2\n\n\nInput\n\n\n6\n\n\nOutput\n\n\n2 3\n\n\nInput\n\n\n4\n\n\nOutput\n\n\n1 4\n\n\nInput\n\n\n1\n\n\nOutput\n\n\n1 1",
        "task_name": "1285_C. Fadi and LCM",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "y_test = raw_input().split()\nkolvo = int(y_test[0])\n\n\nif kolvo%2 == 0:\n    ser = kolvo/2\nelse:\n    ser = (kolvo + 1)/2\n\nk = 0\nii = 0\n\n\nfor i in range(1,ser+1):\n    if kolvo%i ==0:\n        if i != 1:\n            if(max(kolvo/i,i)%min(kolvo/i,i)!= 0):\n                flag = 0\n                for iii in range(max(kolvo/i,i)+1,ser):\n                    if(iii%kolvo == 0 & iii%i ==0):\n                        flag = 1\n                    else:\n                        pass\n                if flag ==0 :\n                    if max(kolvo/i,i) < max(ii,k):\n                        ii= i\n                        k = kolvo/i\n        else:\n            ii = i\n            k = kolvo / i\nprint(ii)\nprint(k)\n",
        "correct": false,
        "task_id": "0132",
        "depth": 2
    },
    {
        "description": "Gildong was hiking a mountain, walking by millions of trees. Inspired by them, he suddenly came up with an interesting idea for trees in data structures: What if we add another edge in a tree?\n\nThen he found that such tree-like graphs are called 1-trees. Since Gildong was bored of solving too many tree problems, he wanted to see if similar techniques in trees can be used in 1-trees as well. Instead of solving it by himself, he's going to test you by providing queries on 1-trees.\n\nFirst, he'll provide you a tree (not 1-tree) with n vertices, then he will ask you q queries. Each query contains 5 integers: x, y, a, b, and k. This means you're asked to determine if there exists a path from vertex a to b that contains exactly k edges after adding a bidirectional edge between vertices x and y. A path can contain the same vertices and same edges multiple times. All queries are independent of each other; i.e. the added edge in a query is removed in the next query.\n\nInput\n\nThe first line contains an integer n (3 \u2264 n \u2264 10^5), the number of vertices of the tree.\n\nNext n-1 lines contain two integers u and v (1 \u2264 u,v \u2264 n, u \u2260 v) each, which means there is an edge between vertex u and v. All edges are bidirectional and distinct.\n\nNext line contains an integer q (1 \u2264 q \u2264 10^5), the number of queries Gildong wants to ask.\n\nNext q lines contain five integers x, y, a, b, and k each (1 \u2264 x,y,a,b \u2264 n, x \u2260 y, 1 \u2264 k \u2264 10^9) \u2013 the integers explained in the description. It is guaranteed that the edge between x and y does not exist in the original tree.\n\nOutput\n\nFor each query, print \"YES\" if there exists a path that contains exactly k edges from vertex a to b after adding an edge between vertices x and y. Otherwise, print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n5\n1 2\n2 3\n3 4\n4 5\n5\n1 3 1 2 2\n1 4 1 3 2\n1 4 1 3 3\n4 2 3 3 9\n5 2 3 3 9\n\n\nOutput\n\n\nYES\nYES\nNO\nYES\nNO\n\nNote\n\nThe image below describes the tree (circles and solid lines) and the added edges for each query (dotted lines).\n\n<image>\n\nPossible paths for the queries with \"YES\" answers are: \n\n  * 1-st query: 1 \u2013 3 \u2013 2 \n  * 2-nd query: 1 \u2013 2 \u2013 3 \n  * 4-th query: 3 \u2013 4 \u2013 2 \u2013 3 \u2013 4 \u2013 2 \u2013 3 \u2013 4 \u2013 2 \u2013 3 ",
        "task_name": "1304_E. 1-Trees and Queries",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"\nNTC here\n\"\"\"\nimport sys\n# reader = (s.rstrip() for s in sys.stdin)\n# input = reader.__next__\ninp = sys.stdin.readline\n\n\ndef input(): return inp().strip()\n\n\nout = []\n# flush = sys.stdout.flush\n# import threading\n# sys.setrecursionlimit(10**7)\n# threading.stack_size(2**25)\n\n\ndef iin(): return int(input())\n\n\ndef lin(): return list(map(int, input().split()))\n\n\nrange = xrange\ninput = raw_input\n\n\nINF = 10**5+7\nn = iin()\nadj = [[] for i in range(n+1)]\nfor _ in range(n-1):\n    i, j = lin()\n    adj[i].append(j)\n    adj[j].append(i)\n\n# LCA - lowest common ancestor\n\n\ndef dfs(adj, start=1):\n    n = len(adj)\n    visited = [False]*n\n    first = [-1]*n\n    euler = []\n    height = [-1]*n\n    srt = [start]\n    height[start] = 1\n    parent = [-1]*n\n    while srt:\n        v = srt.pop()\n        if visited[v]:\n            euler.append(v)\n            continue\n        \n        first[v] = len(euler)\n        euler.append(v)\n        visited[v] = True\n        if parent[v] != -1:\n            srt.append(parent[v])\n        for u in adj[v]:\n            if not visited[u]:\n                parent[u] = v\n                height[u] = height[v]+1\n                srt.append(u)\n\n    return first, euler, height\n\n\n# segment tree\nfirst, euler, height = dfs(adj)\n# print(first, euler, height)\neuler = [height[i] for i in euler]\n\nclass RangeQuery:\n    def __init__(self, data, func=min):\n        self.func = func\n        self._data = _data = [list(data)]\n        i, n = 1, len(_data[0])\n        while 2 * i <= n:\n            prev = _data[-1]\n            _data.append([func(prev[j], prev[j + i]) for j in range(n - 2 * i + 1)])\n            i <<= 1\n \n    def query(self, begin, end):\n        end+=1\n        depth = (end - begin).bit_length() - 1\n        return self.func(self._data[depth][begin], self._data[depth][end - (1 << depth)])\n\n\nsa = RangeQuery(euler)\n\n\ndef check(i, j):\n    l, r = first[i], first[j]\n    if l > r:\n        l, r = r, l\n    h = sa.query(l, r)\n    #print(\"CHK\", l, r, h, i, j)\n    return height[i] + height[j] - 2*h\n\n\n# print(euler)\nq = iin()\nwhile q:\n    q -= 1\n    x, y, a, b, k = lin()\n    ans1 = [check(a, b), check(a, x)+1+check(y, b),\n            check(a, y)+1+check(x, b)]\n    for i in ans1:\n        if ((k-i) >= 0 and (k-i) % 2 == 0):\n            out.append('YES')\n            break\n    else:\n        out.append('NO')\n    # print(ans, ans1)\n    # out.append('YES' if True in ans else 'NO')\nprint('\\n'.join(out))\n\n\n# main()\n# threading.Thread(target=main).start()\n",
        "correct": true,
        "task_id": "0133",
        "depth": 2
    },
    {
        "description": "You are given the array a consisting of n elements and the integer k \u2264 n.\n\nYou want to obtain at least k equal elements in the array a. In one move, you can make one of the following two operations:\n\n  * Take one of the minimum elements of the array and increase its value by one (more formally, if the minimum value of a is mn then you choose such index i that a_i = mn and set a_i := a_i + 1); \n  * take one of the maximum elements of the array and decrease its value by one (more formally, if the maximum value of a is mx then you choose such index i that a_i = mx and set a_i := a_i - 1). \n\n\n\nYour task is to calculate the minimum number of moves required to obtain at least k equal elements in the array.\n\nInput\n\nThe first line of the input contains two integers n and k (1 \u2264 k \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in a and the required number of equal elements.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9), where a_i is the i-th element of a.\n\nOutput\n\nPrint one integer \u2014 the minimum number of moves required to obtain at least k equal elements in the array.\n\nExamples\n\nInput\n\n\n6 5\n1 2 2 4 2 3\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n7 5\n3 3 2 1 1 1 3\n\n\nOutput\n\n\n4",
        "task_name": "1328_F. Make k Equal",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"\n    Satwik_Tiwari ;) .\n    23 june , 2020  - Tuesday\n\"\"\"\n\n#===============================================================================================\n#importing some useful libraries.\nfrom __future__ import division, print_function\n\nfrom fractions import Fraction\nimport sys\nimport os\nfrom io import BytesIO, IOBase\n\n\nimport bisect\nfrom heapq import *\nfrom math import *\nfrom collections import deque\nfrom collections import Counter as counter  # Counter(list)  return a dict with {key: count}\nfrom itertools import combinations as comb # if a = [1,2,3] then print(list(comb(a,2))) -----> [(1, 2), (1, 3), (2, 3)]\nfrom itertools import permutations as permutate\nfrom bisect import bisect_left as bl\n#If the element is already present in the list,\n# the left most position where element has to be inserted is returned.\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n#If the element is already present in the list,\n# the right most position where element has to be inserted is returned\n\n#==============================================================================================\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n# inp = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n#===============================================================================================\n#some shortcuts\n\nmod = 1000000007\ndef inp(): return sys.stdin.readline().rstrip(\"\\r\\n\") #for fast input\ndef out(var): sys.stdout.write(str(var))  #for fast output, always take string\ndef lis(): return list(map(int, inp().split()))\ndef stringlis(): return list(map(str, inp().split()))\ndef sep(): return map(int, inp().split())\ndef strsep(): return map(str, inp().split())\ndef graph(vertex): return [[] for i in range(0,vertex+1)]\ndef zerolist(n): return [0]*n\ndef nextline(): out(\"\\n\")  #as stdout.write always print sring.\ndef testcase(t):\n    for p in range(t):\n        solve()\ndef printlist(a) :\n    for p in range(0,len(a)):\n        out(str(a[p]) + ' ')\ndef lcm(a,b): return (a*b)//gcd(a,b)\ndef power(a,b):\n    ans = 1\n    while(b>0):\n        if(b%2==1):\n            ans*=a\n        a*=a\n        b//=2\n    return ans\ndef ncr(n,r): return factorial(n)//(factorial(r)*factorial(max(n-r,1)))\ndef isPrime(n) : # Check Prime Number or not\n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) :\n        if (n % i == 0 or n % (i + 2) == 0) :\n            return False\n        i = i + 6\n    return True\n\n#===============================================================================================\n# code here ;))\ndef bs(a,l,h,x):\n    while(l<h):\n        # print(l,h)\n        mid = (l+h)//2\n        if(a[mid] == x):\n            return mid\n        if(a[mid] < x):\n            l = mid+1\n        else:\n            h = mid\n    return l\n\ndef sieve(a): #O(n loglogn) nearly linear\n    #all odd mark 1\n    for i in range(3,((10**6)+1),2):\n        a[i] = 1\n    #marking multiples of i form i*i 0. they are nt prime\n    for i in range(3,((10**6)+1),2):\n        for j in range(i*i,((10**6)+1),i):\n            a[j] = 0\n    a[2] = 1 #special left case\n    return (a)\n\n\ndef solve():\n    n,k = sep()\n    a = lis()\n    ans = 10**9\n    m = max(a)\n    cnt = [0]*(m+2)\n    for i in range(0,n):\n        cnt[a[i]] +=1\n    a = sorted(a)\n    for i in range(1,m+1):\n        curr = i\n        temp = cnt[i]\n        if(temp >=k):\n            ans = 0\n            break\n        c = 0\n        # print(curr,'===curr')\n        count = 0\n        while(temp < k and (curr*2) <= m):\n            curr = curr*2\n            count +=1\n            temp += (cnt[curr] + cnt[curr+1])\n            if(temp >=k):\n                if(temp == k):\n                    ans = min(ans,c+(cnt[curr]+cnt[curr+1])*count)\n                else:\n                    temp -= (cnt[curr] + cnt[curr+1])\n                    ans = min(ans,c+ (k-temp)*count)\n            else:\n                c += (cnt[curr]+cnt[curr+1])*count\n\n\n        # print(ans,'==ans')\n    sp = cnt[0]\n    for i in range(0,n):\n        if(sp >= k):\n            break\n        if(a[i] != 0):\n            sp += (a[i]//2) +1\n    ans = min(ans,sp)\n    print(ans)\n\n\n\n\ntestcase(1)\n# testcase(int(inp()))\n",
        "correct": false,
        "task_id": "0134",
        "depth": 2
    },
    {
        "description": "Lee tried so hard to make a good div.2 D problem to balance his recent contest, but it still doesn't feel good at all. Lee invented it so tediously slow that he managed to develop a phobia about div.2 D problem setting instead. And now he is hiding behind the bushes...\n\nLet's define a Rooted Dead Bush (RDB) of level n as a rooted tree constructed as described below.\n\nA rooted dead bush of level 1 is a single vertex. To construct an RDB of level i we, at first, construct an RDB of level i-1, then for each vertex u: \n\n  * if u has no children then we will add a single child to it; \n  * if u has one child then we will add two children to it; \n  * if u has more than one child, then we will skip it. \n\n<image> Rooted Dead Bushes of level 1, 2 and 3.\n\nLet's define a claw as a rooted tree with four vertices: one root vertex (called also as center) with three children. It looks like a claw:\n\n<image> The center of the claw is the vertex with label 1.\n\nLee has a Rooted Dead Bush of level n. Initially, all vertices of his RDB are green.\n\nIn one move, he can choose a claw in his RDB, if all vertices in the claw are green and all vertices of the claw are children of its center, then he colors the claw's vertices in yellow.\n\nHe'd like to know the maximum number of yellow vertices he can achieve. Since the answer might be very large, print it modulo 10^9+7.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nNext t lines contain test cases \u2014 one per line.\n\nThe first line of each test case contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^6) \u2014 the level of Lee's RDB.\n\nOutput\n\nFor each test case, print a single integer \u2014 the maximum number of yellow vertices Lee can make modulo 10^9 + 7.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n4\n5\n100\n2000000\n\n\nOutput\n\n\n0\n0\n4\n4\n12\n990998587\n804665184\n\nNote\n\nIt's easy to see that the answer for RDB of level 1 or 2 is 0.\n\nThe answer for RDB of level 3 is 4 since there is only one claw we can choose: \\{1, 2, 3, 4\\}.\n\nThe answer for RDB of level 4 is 4 since we can choose either single claw \\{1, 3, 2, 4\\} or single claw \\{2, 7, 5, 6\\}. There are no other claws in the RDB of level 4 (for example, we can't choose \\{2, 1, 7, 6\\}, since 1 is not a child of center vertex 2).\n\n<image> Rooted Dead Bush of level 4.",
        "task_name": "1369_D. TediousLee",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    MOD = 10 ** 9 + 7\n\n    sols = [0] * (2 * 10 ** 6 + 1)\n    for i in range(2, 2 * 10 ** 6 + 1):\n        sols[i] = (sols[i - 1] + 2 * sols[i - 2] + (4 if i % 3 == 0 else 0)) % MOD\n\n    t = int(input())\n\n    for _ in range(t):\n        n = int(input())\n        print(sols[n])\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": true,
        "task_id": "0135",
        "depth": 1
    },
    {
        "description": "A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).\n\nConsider a permutation p of length n, we build a graph of size n using it as follows: \n\n  * For every 1 \u2264 i \u2264 n, find the largest j such that 1 \u2264 j < i and p_j > p_i, and add an undirected edge between node i and node j \n  * For every 1 \u2264 i \u2264 n, find the smallest j such that i < j \u2264 n and p_j > p_i, and add an undirected edge between node i and node j \n\n\n\nIn cases where no such j exists, we make no edges. Also, note that we make edges between the corresponding indices, not the values at those indices.\n\nFor clarity, consider as an example n = 4, and p = [3,1,4,2]; here, the edges of the graph are (1,3),(2,1),(2,3),(4,3).\n\nA permutation p is cyclic if the graph built using p has at least one simple cycle. \n\nGiven n, find the number of cyclic permutations of length n. Since the number may be very large, output it modulo 10^9+7.\n\nPlease refer to the Notes section for the formal definition of a simple cycle\n\nInput\n\nThe first and only line contains a single integer n (3 \u2264 n \u2264 10^6).\n\nOutput\n\nOutput a single integer 0 \u2264 x < 10^9+7, the number of cyclic permutations of length n modulo 10^9+7.\n\nExamples\n\nInput\n\n\n4\n\n\nOutput\n\n\n16\n\nInput\n\n\n583291\n\n\nOutput\n\n\n135712853\n\nNote\n\nThere are 16 cyclic permutations for n = 4. [4,2,1,3] is one such permutation, having a cycle of length four: 4 \u2192 3 \u2192 2 \u2192 1 \u2192 4.\n\nNodes v_1, v_2, \u2026, v_k form a simple cycle if the following conditions hold: \n\n  * k \u2265 3. \n  * v_i \u2260 v_j for any pair of indices i and j. (1 \u2264 i < j \u2264 k) \n  * v_i and v_{i+1} share an edge for all i (1 \u2264 i < k), and v_1 and v_k share an edge. ",
        "task_name": "1391_C. Cyclic Permutations ",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\nMOD = 10**9 + 7\n\n\ndef main():\n    n = int(input())\n\n    sol = 1\n    for i in range(1, n + 1):\n        sol *= i\n        sol %= MOD\n\n    print(sol - pow(2, n - 1, MOD))\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": false,
        "task_id": "0136",
        "depth": 1
    },
    {
        "description": "Consider an infinite triangle made up of layers. Let's number the layers, starting from one, from the top of the triangle (from top to bottom). The k-th layer of the triangle contains k points, numbered from left to right. Each point of an infinite triangle is described by a pair of numbers (r, c) (1 \u2264 c \u2264 r), where r is the number of the layer, and c is the number of the point in the layer. From each point (r, c) there are two directed edges to the points (r+1, c) and (r+1, c+1), but only one of the edges is activated. If r + c is even, then the edge to the point (r+1, c) is activated, otherwise the edge to the point (r+1, c+1) is activated. Look at the picture for a better understanding.\n\n<image> Activated edges are colored in black. Non-activated edges are colored in gray.\n\nFrom the point (r_1, c_1) it is possible to reach the point (r_2, c_2), if there is a path between them only from activated edges. For example, in the picture above, there is a path from (1, 1) to (3, 2), but there is no path from (2, 1) to (1, 1).\n\nInitially, you are at the point (1, 1). For each turn, you can: \n\n  * Replace activated edge for point (r, c). That is if the edge to the point (r+1, c) is activated, then instead of it, the edge to the point (r+1, c+1) becomes activated, otherwise if the edge to the point (r+1, c+1), then instead if it, the edge to the point (r+1, c) becomes activated. This action increases the cost of the path by 1; \n  * Move from the current point to another by following the activated edge. This action does not increase the cost of the path. \n\n\n\nYou are given a sequence of n points of an infinite triangle (r_1, c_1), (r_2, c_2), \u2026, (r_n, c_n). Find the minimum cost path from (1, 1), passing through all n points in arbitrary order.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) is the number of test cases. Then t test cases follow.\n\nEach test case begins with a line containing one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) is the number of points to visit.\n\nThe second line contains n numbers r_1, r_2, \u2026, r_n (1 \u2264 r_i \u2264 10^9), where r_i is the number of the layer in which i-th point is located.\n\nThe third line contains n numbers c_1, c_2, \u2026, c_n (1 \u2264 c_i \u2264 r_i), where c_i is the number of the i-th point in the r_i layer.\n\nIt is guaranteed that all n points are distinct.\n\nIt is guaranteed that there is always at least one way to traverse all n points.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output the minimum cost of a path passing through all points in the corresponding test case.\n\nExample\n\nInput\n\n\n4\n3\n1 4 2\n1 3 1\n2\n2 4\n2 3\n2\n1 1000000000\n1 1000000000\n4\n3 10 5 8\n2 5 2 4\n\n\nOutput\n\n\n0\n1\n999999999\n2",
        "task_name": "1506_F. Triangular Paths",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Enter your code here. Read input from STDIN. Print output to STDOUT# ===============================================================================================\n# importing some useful libraries.\nfrom __future__ import division, print_function\nfrom fractions import Fraction\nimport sys\nimport os\nfrom io import BytesIO, IOBase\nfrom itertools import *\nimport bisect\nfrom heapq import *\nfrom math import ceil, floor\nfrom copy import *\nfrom collections import deque, defaultdict\nfrom collections import Counter as counter  # Counter(list)  return a dict with {key: count}\nfrom itertools import combinations  # if a = [1,2,3] then print(list(comb(a,2))) -----> [(1, 2), (1, 3), (2, 3)]\nfrom itertools import permutations as permutate\nfrom bisect import bisect_left as bl\nfrom operator import *\n# If the element is already present in the list,\n\n# the left most position where element has to be inserted is returned.\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n\n# If the element is already present in the list,\n# the right most position where element has to be inserted is returned\n\n# ==============================================================================================\n# fast I/O region\n\nBUFSIZE = 8192\nfrom sys import stderr\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"A\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for A in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(A))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n# inp = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# ===============================================================================================\n### START ITERATE RECURSION ###\nfrom types import GeneratorType\n\n\ndef iterative(f, stack=[]):\n    def wrapped_func(*args, **kwargs):\n        if stack: return f(*args, **kwargs)\n        to = f(*args, **kwargs)\n        while True:\n            if type(to) is GeneratorType:\n                stack.append(to)\n                to = next(to)\n                continue\n            stack.pop()\n            if not stack: break\n            to = stack[-1].send(to)\n        return to\n\n    return wrapped_func\n\n\n#### END ITERATE RECURSION ####\n###########################\n# Sorted list\nclass SortedList:\n    def __init__(self, iterable=[], _load=200):\n        \"\"\"Initialize sorted list instance.\"\"\"\n        values = sorted(iterable)\n        self._len = _len = len(values)\n        self._load = _load\n        self._lists = _lists = [values[start:start + _load] for start in range(0, _len, _load)]\n        self._list_lens = [len(_list) for _list in _lists]\n        self._mins = [_list[0] for _list in _lists]\n        self._fen_tree = []\n        self._rebuild = True\n\n    def _fen_build(self):\n        \"\"\"Build a fenwick tree instance.\"\"\"\n        self._fen_tree[:] = self._list_lens\n        _fen_tree = self._fen_tree\n        for start in range(len(_fen_tree)):\n            if start | start + 1 < len(_fen_tree):\n                _fen_tree[start | start + 1] += _fen_tree[start]\n        self._rebuild = False\n\n    def _fen_update(self, index, value):\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\n        if not self._rebuild:\n            _fen_tree = self._fen_tree\n            while index < len(_fen_tree):\n                _fen_tree[index] += value\n                index |= index + 1\n\n    def _fen_query(self, end):\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        A = 0\n        while end:\n            A += _fen_tree[end - 1]\n            end &= end - 1\n        return A\n\n    def _fen_findkth(self, k):\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\n        _list_lens = self._list_lens\n        if k < _list_lens[0]:\n            return 0, k\n        if k >= self._len - _list_lens[-1]:\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        idx = -1\n        for d in reversed(range(len(_fen_tree).bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\n                idx = right_idx\n                k -= _fen_tree[idx]\n        return idx + 1, k\n\n    def _delete(self, pos, idx):\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len -= 1\n        self._fen_update(pos, -1)\n        del _lists[pos][idx]\n        _list_lens[pos] -= 1\n\n        if _list_lens[pos]:\n            _mins[pos] = _lists[pos][0]\n        else:\n            del _lists[pos]\n            del _list_lens[pos]\n            del _mins[pos]\n            self._rebuild = True\n\n    def _loc_left(self, value):\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        lo, pos = -1, len(_lists) - 1\n        while lo + 1 < pos:\n            mi = (lo + pos) >> 1\n            if value <= _mins[mi]:\n                pos = mi\n            else:\n                lo = mi\n\n        if pos and value <= _lists[pos - 1][-1]:\n            pos -= 1\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value <= _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def _loc_right(self, value):\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        pos, hi = 0, len(_lists)\n        while pos + 1 < hi:\n            mi = (pos + hi) >> 1\n            if value < _mins[mi]:\n                hi = mi\n            else:\n                pos = mi\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value < _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def add(self, value):\n        \"\"\"Add `value` to sorted list.\"\"\"\n        _load = self._load\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len += 1\n        if _lists:\n            pos, idx = self._loc_right(value)\n            self._fen_update(pos, 1)\n            _list = _lists[pos]\n            _list.insert(idx, value)\n            _list_lens[pos] += 1\n            _mins[pos] = _list[0]\n            if _load + _load < len(_list):\n                _lists.insert(pos + 1, _list[_load:])\n                _list_lens.insert(pos + 1, len(_list) - _load)\n                _mins.insert(pos + 1, _list[_load])\n                _list_lens[pos] = _load\n                del _list[_load:]\n                self._rebuild = True\n        else:\n            _lists.append([value])\n            _mins.append(value)\n            _list_lens.append(1)\n            self._rebuild = True\n\n    def discard(self, value):\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_right(value)\n            if idx and _lists[pos][idx - 1] == value:\n                self._delete(pos, idx - 1)\n\n    def remove(self, value):\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\n        _len = self._len\n        self.discard(value)\n        if _len == self._len:\n            raise ValueError('{0!r} not in list'.format(value))\n\n    def pop(self, index=-1):\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        value = self._lists[pos][idx]\n        self._delete(pos, idx)\n        return value\n\n    def bisect_left(self, value):\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_left(value)\n        return self._fen_query(pos) + idx\n\n    def bisect_right(self, value):\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_right(value)\n        return self._fen_query(pos) + idx\n\n    def count(self, value):\n        \"\"\"Return number of occurrences of `value` in the sorted list.\"\"\"\n        return self.bisect_right(value) - self.bisect_left(value)\n\n    def __len__(self):\n        \"\"\"Return the size of the sorted list.\"\"\"\n        return self._len\n\n    def __getitem__(self, index):\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        return self._lists[pos][idx]\n\n    def __delitem__(self, index):\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        self._delete(pos, idx)\n\n    def __contains__(self, value):\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_left(value)\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\n        return False\n\n    def __iter__(self):\n        \"\"\"Return an iterator over the sorted list.\"\"\"\n        return (value for _list in self._lists for value in _list)\n\n    def __reversed__(self):\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\n\n    def __repr__(self):\n        \"\"\"Return string representation of sorted list.\"\"\"\n        return 'SortedList({0})'.format(list(self))\n\n\n# ===============================================================================================\n# some shortcuts\n\nmod = 1000000007\n\n\ndef testcase(t):\n    for p in range(t):\n        solve()\n\n\ndef pow(A, B, p):\n    res = 1  # Initialize result\n    A = A % p  # Update A if it is more , than or equal to p\n    if (A == 0):\n        return 0\n    while (B > 0):\n        if ((B & 1) == 1):  # If B is odd, multiply, A with result\n            res = (res * A) % p\n\n        B = B >> 1  # B = B/2\n        A = (A * A) % p\n    return res\n\n\nfrom functools import reduce\n\n\ndef factors(n):\n    return set(reduce(list.__add__,\n                      ([start, n // start] for start in range(1, int(n ** 0.5) + 1) if n % start == 0)))\n\n\ndef gcd(a, b):\n    if a == b: return a\n    while b > 0: a, b = b, a % b\n    return a\n\n\n# discrete binary search\n# minimise:\n# def search():\n#     l = 0\n#     r = 10 ** 15\n#\n#     for start in range(200):\n#         if isvalid(l):\n#             return l\n#         if l == r:\n#             return l\n#         m = (l + r) // 2\n#         if isvalid(m) and not isvalid(m - 1):\n#             return m\n#         if isvalid(m):\n#             r = m + 1\n#         else:\n#             l = m\n#     return m\n\n# maximise:\n# def search():\n#     l = 0\n#     r = 10 ** 15\n#\n#     for start in range(200):\n#         # print(l,r)\n#         if isvalid(r):\n#             return r\n#         if l == r:\n#             return l\n#         m = (l + r) // 2\n#         if isvalid(m) and not isvalid(m + 1):\n#             return m\n#         if isvalid(m):\n#             l = m\n#         else:\n#             r = m - 1\n#     return m\n\n\n##############Find sum of product of subsets of size k in a array\n# ar=[0,1,2,3]\n# k=3\n# n=len(ar)-1\n# dp=[0]*(n+1)\n# dp[0]=1\n# for pos in range(1,n+1):\n#     dp[pos]=0\n#     l=max(1,k+pos-n-1)\n#     for j in range(min(pos,k),l-1,-1):\n#         dp[j]=dp[j]+ar[pos]*dp[j-1]\n# print(dp[k])\n\ndef prefix_sum(ar):  # [1,2,3,4]->[1,3,6,10]\n    return list(accumulate(ar))\n\n\ndef suffix_sum(ar):  # [1,2,3,4]->[10,9,7,4]\n    return list(accumulate(ar[::-1]))[::-1]\n\n\ndef N():\n    return int(inp())\n\n\ndx = [0, 0, 1, -1]\ndy = [1, -1, 0, 0]\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\n# =========================================================================================\nfrom collections import defaultdict\n\n\ndef numberOfSetBits(start):\n    start = start - ((start >> 1) & 0x55555555)\n    start = (start & 0x33333333) + ((start >> 2) & 0x33333333)\n    return (((start + (start >> 4) & 0xF0F0F0F) * 0x1010101) & 0xffffffff) >> 24\n\n\nclass MergeFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n        # self.lista = [[_] for _ in range(n)]\n\n    def find(self, a):\n        to_update = []\n        while a != self.parent[a]:\n            to_update.append(a)\n            a = self.parent[a]\n        for b in to_update:\n            self.parent[b] = a\n        return self.parent[a]\n\n    def merge(self, a, b):\n        a = self.find(a)\n        b = self.find(b)\n        if a == b:\n            return\n        if self.size[a] < self.size[b]:\n            a, b = b, a\n        self.num_sets -= 1\n        self.parent[b] = a\n        self.size[a] += self.size[b]\n        # self.lista[a] += self.lista[b]\n        # self.lista[b] = []\n\n    def set_size(self, a):\n        return self.size[self.find(a)]\n\n    def __len__(self):\n        return self.num_sets\n\n\ndef lcm(a, b):\n    return abs((a // gcd(a, b)) * b)\n\n\n# #\n# to find factorial and ncr\n# tot = 100005\n# mod = 10**9 + 7\n# fac = [1, 1]\n# finv = [1, 1]\n# inv = [0, 1]\n#\n# for start in range(2, tot + 1):\n#     fac.append((fac[-1] * start) % mod)\n#     inv.append(mod - (inv[mod % start] * (mod // start) % mod))\n#     finv.append(finv[-1] * inv[-1] % mod)\n\n\ndef comb(n, r):\n    if n < r:\n        return 0\n    else:\n        return fac[n] * (finv[r] * finv[n - r] % mod) % mod\n\n\ndef inp(): return sys.stdin.readline().rstrip(\"\\r\\n\")  # for fast input\n\n\ndef out(var): sys.stdout.write(str(var))  # for fast output, always take string\n\n\ndef lis(): return list(map(int, inp().split()))\n\n\ndef stringlis(): return list(map(str, inp().split()))\n\n\ndef sep(): return map(int, inp().split())\n\n\ndef strsep(): return map(str, inp().split())\n\n\ndef fsep(): return map(float, inp().split())\n\n\ndef nextline(): out(\"\\n\")  # as stdout.write always print sring.\n\n\ndef arr1d(n, v):\n    return [v] * n\n\n\ndef arr2d(n, m, v):\n    return [[v] * m for _ in range(n)]\n\n\ndef arr3d(n, m, p, v):\n    return [[[v] * p for _ in range(m)] for start in range(n)]\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\n# co-ordinate compression\n# ma={s:idx for idx,s in enumerate(sorted(set(l+r)))}\n\n# mxn=100005\n# lrg=[0]*mxn\n# for start in range(2,mxn-3):\n#     if (lrg[start]==0):\n#         for j in range(start,mxn-3,start):\n#             lrg[j]=start\n\n\ndef solve():\n    n=N()\n    r=lis()\n    c=lis()\n    points=[]\n    for i in range(n):\n        points.append((r[i],c[i]))\n    points.append((1,1))\n    points.sort()\n    ans=0\n    n+=1\n    for i in range(n-1):\n        x,y=points[i]\n        nx,ny=points[i+1]\n        plus1=ny-y\n        same=nx-x-plus1\n        # print(same,plus1,\"h\")\n        if((x+y) %2 ==1):\n            o=1\n        else:\n            o=0\n        if(plus1==0):\n            if(o):\n                ans+= same//2\n                ans+=same%2\n                continue\n            else:\n                same-=1\n                ans += same // 2\n                ans += same % 2\n                continue\n\n        if(same==0):\n            if(o):\n                ans+=0\n                continue\n            else:\n                ans+=plus1\n                continue\n\n\n        if (o):\n            ans += same // 2\n            ans += same % 2\n            continue\n        else:\n            same-=1\n            ans += same // 2\n            ans += same % 2\n            continue\n    print(ans)\n\n\n\n\n\n\n\n\n# solve()\ntestcase(N())",
        "correct": true,
        "task_id": "0137",
        "depth": 1
    },
    {
        "description": "Everything got unclear to us in a far away constellation Tau Ceti. Specifically, the Taucetians choose names to their children in a very peculiar manner.\n\nTwo young parents abac and bbad think what name to give to their first-born child. They decided that the name will be the permutation of letters of string s. To keep up with the neighbours, they decided to call the baby so that the name was lexicographically strictly larger than the neighbour's son's name t.\n\nOn the other hand, they suspect that a name tax will be introduced shortly. According to it, the Taucetians with lexicographically larger names will pay larger taxes. That's the reason abac and bbad want to call the newborn so that the name was lexicographically strictly larger than name t and lexicographically minimum at that.\n\nThe lexicographical order of strings is the order we are all used to, the \"dictionary\" order. Such comparison is used in all modern programming languages to compare strings. Formally, a string p of length n is lexicographically less than string q of length m, if one of the two statements is correct:\n\n  * n < m, and p is the beginning (prefix) of string q (for example, \"aba\" is less than string \"abaa\"), \n  * p1 = q1, p2 = q2, ..., pk - 1 = qk - 1, pk < qk for some k (1 \u2264 k \u2264 min(n, m)), here characters in strings are numbered starting from 1. \n\n\n\nWrite a program that, given string s and the heighbours' child's name t determines the string that is the result of permutation of letters in s. The string should be lexicographically strictly more than t and also, lexicographically minimum.\n\nInput\n\nThe first line contains a non-empty string s (1 \u2264 |s| \u2264 5000), where |s| is its length. The second line contains a non-empty string t (1 \u2264 |t| \u2264 5000), where |t| is its length. Both strings consist of lowercase Latin letters.\n\nOutput\n\nPrint the sought name or -1 if it doesn't exist.\n\nExamples\n\nInput\n\naad\naac\n\n\nOutput\n\naad\n\n\nInput\n\nabad\nbob\n\n\nOutput\n\ndaab\n\n\nInput\n\nabc\ndefg\n\n\nOutput\n\n-1\n\n\nInput\n\nczaaab\nabcdef\n\n\nOutput\n\nabczaa\n\nNote\n\nIn the first sample the given string s is the sought one, consequently, we do not need to change the letter order there.",
        "task_name": "180_D. Name",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def solve():\n    s = list(raw_input())\n    t = list(raw_input())\n    scount = [0]*26\n    tcount = [0]*26\n    for char in s: scount[ord(char) - ord('a')]+=1\n    for char in t: tcount[ord(char) - ord('a')]+=1\n    allgreater = True\n    for i in range(26): \n        if scount[i] < tcount[i]:\n            allgreater = False\n    if allgreater:\n        if len(s) == len(t): return -1\n        for char in t: scount[ord(char) - ord('a')]-=1\n        for i in range(26): \n            while scount[i] > 0:\n                t.append(chr(i + ord('a')))\n                scount[i] -= 1\n        return ''.join(map(str, t))\n    works = -1\n    scountcopy = list(scount)\n    for i in range(len(s)):\n        cando = False\n        for j in range(ord(t[i]) - ord('a') + 1, 26): \n            if scountcopy[j] > 0:\n                cando = True\n        if cando:\n            works = i\n        if scountcopy[ord(t[i]) - ord('a')] == 0: break\n        scountcopy[ord(t[i]) - ord('a')] -= 1    \n    if works == -1: return -1\n    res = list()\n    for i in range(works):\n        res.append(t[i])\n        scount[ord(t[i]) - ord('a')] -= 1\n#     print(works)\n    for j in range(ord(t[works]) - ord('a') + 1, 26): \n        if scount[j] > 0:\n            res.append(chr(j + ord('a')))\n            scount[j]-=1\n            break\n#     print(res)\n    for i in range(26): \n        while scount[i] > 0:\n            res.append(chr(i + ord('a')))\n            scount[i] -= 1\n    return ''.join(map(str, res))\n        \nprint(solve())",
        "correct": false,
        "task_id": "0138",
        "depth": 2
    },
    {
        "description": "Valera came to Japan and bought many robots for his research. He's already at the airport, the plane will fly very soon and Valera urgently needs to bring all robots to the luggage compartment.\n\nThe robots are self-propelled (they can potentially move on their own), some of them even have compartments to carry other robots. More precisely, for the i-th robot we know value ci \u2014 the number of robots it can carry. In this case, each of ci transported robots can additionally carry other robots.\n\nHowever, the robots need to be filled with fuel to go, so Valera spent all his last money and bought S liters of fuel. He learned that each robot has a restriction on travel distances. Thus, in addition to features ci, the i-th robot has two features fi and li \u2014 the amount of fuel (in liters) needed to move the i-th robot, and the maximum distance that the robot can go.\n\nDue to the limited amount of time and fuel, Valera wants to move the maximum number of robots to the luggage compartment. He operates as follows. \n\n  * First Valera selects some robots that will travel to the luggage compartment on their own. In this case the total amount of fuel required to move all these robots must not exceed S. \n  * Then Valera seats the robots into the compartments, so as to transport as many robots as possible. Note that if a robot doesn't move by itself, you can put it in another not moving robot that is moved directly or indirectly by a moving robot. \n  * After that all selected and seated robots along with Valera go to the luggage compartment and the rest robots will be lost. \n\n\n\nThere are d meters to the luggage compartment. Therefore, the robots that will carry the rest, must have feature li of not less than d. During the moving Valera cannot stop or change the location of the robots in any way.\n\nHelp Valera calculate the maximum number of robots that he will be able to take home, and the minimum amount of fuel he will have to spend, because the remaining fuel will come in handy in Valera's research.\n\nInput\n\nThe first line contains three space-separated integers n, d, S (1 \u2264 n \u2264 105, 1 \u2264 d, S \u2264 109). The first number represents the number of robots, the second one \u2014 the distance to the luggage compartment and the third one \u2014 the amount of available fuel.\n\nNext n lines specify the robots. The i-th line contains three space-separated integers ci, fi, li (0 \u2264 ci, fi, li \u2264 109) \u2014 the i-th robot's features. The first number is the number of robots the i-th robot can carry, the second number is the amount of fuel needed for the i-th robot to move and the third one shows the maximum distance the i-th robot can go.\n\nOutput\n\nPrint two space-separated integers \u2014 the maximum number of robots Valera can transport to the luggage compartment and the minimum amount of fuel he will need for that. If Valera won't manage to get any robots to the luggage compartment, print two zeroes.\n\nExamples\n\nInput\n\n3 10 10\n0 12 10\n1 6 10\n0 1 1\n\n\nOutput\n\n2 6\n\n\nInput\n\n2 7 10\n3 12 10\n5 16 8\n\n\nOutput\n\n0 0\n\n\nInput\n\n4 8 10\n0 12 3\n1 1 0\n0 3 11\n1 6 9\n\n\nOutput\n\n4 9",
        "task_name": "203_E. Transportation",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function\n\ndef __main__():\n    inp = raw_input().split(' ')\n    N = int(inp[0])\n    D = int(inp[1])\n    S = int(inp[2])\n\n    a = []\n    au = []\n    for i in range(N):\n        inp = raw_input().split(' ')\n        a.append([int(inp[0]), int(inp[1]), int(inp[2]), False])\n        if int(inp[2]) >= D:\n            au.append((float(inp[1]), float(inp[0]), i))\n            \n    def __less(a, b):\n        if a[0] == 0:\n            return -1\n        elif b[0] == 0:\n            return 1\n        else:\n            return -cmp(a[1]/a[0], b[1]/b[0])\n        \n    au.sort(__less)\n    #print(au)\n    m = 0\n    s = S\n    res = 0\n    for i in au:\n        if a[i[2]][1] <= s:\n            s -= a[i[2]][1]\n            a[i[2]][3] = True\n            m += a[i[2]][0]\n            res += 1\n\n    b = [i[0] for i in a if not i[3]]\n    b.sort(reverse=True)\n    #print(b)\n\n    for i in b:\n        if m <= 0:\n            break\n        else:\n            m += i - 1\n            res += 1\n    if res == 0:\n        print('0 0')\n    else:\n        print(res, S - s)\n\n__main__()\n",
        "correct": false,
        "task_id": "0139",
        "depth": 1
    },
    {
        "description": "Little Petya likes arrays of integers a lot. Recently his mother has presented him one such array consisting of n elements. Petya is now wondering whether he can swap any two distinct integers in the array so that the array got unsorted. Please note that Petya can not swap equal integers even if they are in distinct positions in the array. Also note that Petya must swap some two integers even if the original array meets all requirements.\n\nArray a (the array elements are indexed from 1) consisting of n elements is called sorted if it meets at least one of the following two conditions:\n\n  1. a1 \u2264 a2 \u2264 ... \u2264 an; \n  2. a1 \u2265 a2 \u2265 ... \u2265 an. \n\n\n\nHelp Petya find the two required positions to swap or else say that they do not exist.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 105). The second line contains n non-negative space-separated integers a1, a2, ..., an \u2014 the elements of the array that Petya's mother presented him. All integers in the input do not exceed 109.\n\nOutput\n\nIf there is a pair of positions that make the array unsorted if swapped, then print the numbers of these positions separated by a space. If there are several pairs of positions, print any of them. If such pair does not exist, print -1. The positions in the array are numbered with integers from 1 to n.\n\nExamples\n\nInput\n\n1\n1\n\n\nOutput\n\n-1\n\n\nInput\n\n2\n1 2\n\n\nOutput\n\n-1\n\n\nInput\n\n4\n1 2 3 4\n\n\nOutput\n\n1 2\n\n\nInput\n\n3\n1 1 1\n\n\nOutput\n\n-1\n\nNote\n\nIn the first two samples the required pairs obviously don't exist.\n\nIn the third sample you can swap the first two elements. After that the array will look like this: 2 1 3 4. This array is unsorted.",
        "task_name": "252_B. Unsorting Array",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "####################################################\n# -*- coding: utf-8 -*-\nimport sys\n\nw = sys.stdout.write\nread = sys.stdin.readline\nreads = sys.stdin.read\n\ndef r(f=None):\n    if f:\n        return map(f, read().split())\n    else:\n        return read().split()\n\ndef rs(t,f=None):\n    result = []\n    result_append = result.append\n    for i in xrange(t):\n        if f:\n            result_append(tuple(map(f, read().split())))\n        else:\n            result_append(list(read().split()))\n    return result\n\n\n####################################################\nimport math\nsqrt = math.sqrt\nfrom collections import deque\n\n\n[n] = r(int)\nxs = r(int)\nxss = set(xs)\n\nif n <= 2:\n    w(\"-1\")\n    sys.exit()\n\nif len(xss) == 1:\n    w(\"-1\")\n    sys.exit()\n\nif len(xs) == 3 and xs[0] == xs[2]:\n    w(\"-1\")\n    sys.exit()\n\n\ndef check(xs, k):\n    k2 = 0 # malej\u0105co\n    k1 = 0\n    for i in xrange(0, n-1, 1):\n        if xs[i] < xs[i+1]:\n            k2 += 1\n        if xs[i] > xs[i+1]:\n            k1 += 1\n\n    if k2 >= 2:\n        for i in xrange(0, n-1, 1):\n            if xs[i] < xs[i+1]:\n                w(\"%s %s\" % (abs(i+1+k), abs(i+2+k)))\n                sys.exit()\n\n    if k2 == 1 and k1 >= 1 and len(xss) < n:\n        for i in xrange(0, n-1, 1):\n            if xs[i] > xs[i+1]:\n                w(\"%s %s\" % (abs(i+1+k), abs(i+2+k)))\n                sys.exit()\n            if xs[i] < xs[i+1]:\n                w(\"%s %s\" % (abs(i+1+k), abs(i+2+k)))\n                sys.exit()\n\n    if k2 == 1 and k1 == 0 and len(xs) >= 3:\n        for i in xrange(0, n-1, 1):\n            if xs[i] < xs[i+1]:\n                w(\"%s %s\" % (abs(i+1+k), abs(i+2+k)))\n                sys.exit()\n\n    if k2 == 0:\n        for i in xrange(0, n-1, 1):\n            if xs[0] != xs[i]:\n                w(\"%s %s\" % (abs(1+k), abs(i+1+k)))\n                sys.exit()\n\ncheck(xs, 0)\nxs.reverse()\ncheck(xs, -1*n)\n\n\nw(\"-1\")\n    \n\n\n\n\n\n\n",
        "correct": false,
        "task_id": "0140",
        "depth": 1
    },
    {
        "description": "One day n friends gathered together to play \"Mafia\". During each round of the game some player must be the supervisor and other n - 1 people take part in the game. For each person we know in how many rounds he wants to be a player, not the supervisor: the i-th person wants to play ai rounds. What is the minimum number of rounds of the \"Mafia\" game they need to play to let each person play at least as many rounds as they want?\n\nInput\n\nThe first line contains integer n (3 \u2264 n \u2264 105). The second line contains n space-separated integers a1, a2, ..., an (1 \u2264 ai \u2264 109) \u2014 the i-th number in the list is the number of rounds the i-th person wants to play.\n\nOutput\n\nIn a single line print a single integer \u2014 the minimum number of game rounds the friends need to let the i-th person play at least ai rounds.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nExamples\n\nInput\n\n3\n3 2 2\n\n\nOutput\n\n4\n\n\nInput\n\n4\n2 2 2 2\n\n\nOutput\n\n3\n\nNote\n\nYou don't need to know the rules of \"Mafia\" to solve this problem. If you're curious, it's a game Russia got from the Soviet times: http://en.wikipedia.org/wiki/Mafia_(party_game).",
        "task_name": "348_A. Mafia",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math\n\ntry:\n    import psyco\n    psyco.full()\nexcept:\n    pass\n\ndef main():\n    from sys import stdin, stdout\n    \n    \n    n = int(stdin.readline())\n    array = map(int,stdin.readline().split())   \n    \n    sum = 0.0\n    \n    \n    max = array[0]\n    for a in array:\n        sum += a\n        if a > max:\n            max = a\n\n    p = math.ceil(sum / (n - 1))    \n    \n    while p*(n - 1) < sum:\n        p += 1\n    \n    if p < max:\n        p = max\n    \n    stdout.write(str(int(p)) + '\\n')\n\nmain()\n",
        "correct": true,
        "task_id": "0141",
        "depth": 1
    },
    {
        "description": "Two little greedy bears have found two pieces of cheese in the forest of weight a and b grams, correspondingly. The bears are so greedy that they are ready to fight for the larger piece. That's where the fox comes in and starts the dialog: \"Little bears, wait a little, I want to make your pieces equal\" \"Come off it fox, how are you going to do that?\", the curious bears asked. \"It's easy\", said the fox. \"If the mass of a certain piece is divisible by two, then I can eat exactly a half of the piece. If the mass of a certain piece is divisible by three, then I can eat exactly two-thirds, and if the mass is divisible by five, then I can eat four-fifths. I'll eat a little here and there and make the pieces equal\". \n\nThe little bears realize that the fox's proposal contains a catch. But at the same time they realize that they can not make the two pieces equal themselves. So they agreed to her proposal, but on one condition: the fox should make the pieces equal as quickly as possible. Find the minimum number of operations the fox needs to make pieces equal.\n\nInput\n\nThe first line contains two space-separated integers a and b (1 \u2264 a, b \u2264 109). \n\nOutput\n\nIf the fox is lying to the little bears and it is impossible to make the pieces equal, print -1. Otherwise, print the required minimum number of operations. If the pieces of the cheese are initially equal, the required number is 0.\n\nExamples\n\nInput\n\n15 20\n\n\nOutput\n\n3\n\n\nInput\n\n14 8\n\n\nOutput\n\n-1\n\n\nInput\n\n6 6\n\n\nOutput\n\n0",
        "task_name": "371_B. Fox Dividing Cheese",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from fractions import gcd\na, b = (int(s) for s in raw_input().split())\ng = gcd(a, b)\na /= g\nb /= g\n\ndef ope(n):\n    res = 0\n    div = [2, 3, 5]\n    for d in div:\n        while n % d == 0:\n            n /= d\n            res += 1\n    return (n, res)\n\na, x = ope(a)\nb, y = ope(b)\nif a != b:\n    print(-1)\nelse:\n    print(x + y)\n",
        "correct": true,
        "task_id": "0142",
        "depth": 2
    },
    {
        "description": "Artem has an array of n positive integers. Artem decided to play with it. The game consists of n moves. Each move goes like this. Artem chooses some element of the array and removes it. For that, he gets min(a, b) points, where a and b are numbers that were adjacent with the removed number. If the number doesn't have an adjacent number to the left or right, Artem doesn't get any points. \n\nAfter the element is removed, the two parts of the array glue together resulting in the new array that Artem continues playing with. Borya wondered what maximum total number of points Artem can get as he plays this game.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 5\u00b7105) \u2014 the number of elements in the array. The next line contains n integers ai (1 \u2264 ai \u2264 106) \u2014 the values of the array elements.\n\nOutput\n\nIn a single line print a single integer \u2014 the maximum number of points Artem can get.\n\nExamples\n\nInput\n\n5\n3 1 5 2 6\n\n\nOutput\n\n11\n\n\nInput\n\n5\n1 2 3 4 5\n\n\nOutput\n\n6\n\n\nInput\n\n5\n1 100 101 100 1\n\n\nOutput\n\n102",
        "task_name": "442_C. Artem and Array ",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/python\n\nn = int(raw_input().strip())\na = map(int, raw_input().strip().split(\" \"))\n\nr = 0\n\ns = [0] * (n+10)\nsi = 0\n\nfor x in a:\n\tif si>=2 and s[si-2] >= s[si-1] and s[si-1] <= x:\n\t\tr += s[si-1]\n\t\tsi -= 1\n\ts[si] = x\n\tsi += 1\n\nfor i in range(1, si-1):\n\tr += min(s[i-1], s[i+1])\n\nprint(r)",
        "correct": false,
        "task_id": "0143",
        "depth": 1
    },
    {
        "description": "Fox Ciel is playing a game. In this game there is an infinite long tape with cells indexed by integers (positive, negative and zero). At the beginning she is standing at the cell 0.\n\nThere are also n cards, each card has 2 attributes: length li and cost ci. If she pays ci dollars then she can apply i-th card. After applying i-th card she becomes able to make jumps of length li, i. e. from cell x to cell (x - li) or cell (x + li).\n\nShe wants to be able to jump to any cell on the tape (possibly, visiting some intermediate cells). For achieving this goal, she wants to buy some cards, paying as little money as possible. \n\nIf this is possible, calculate the minimal cost.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 300), number of cards.\n\nThe second line contains n numbers li (1 \u2264 li \u2264 109), the jump lengths of cards.\n\nThe third line contains n numbers ci (1 \u2264 ci \u2264 105), the costs of cards.\n\nOutput\n\nIf it is impossible to buy some cards and become able to jump to any cell, output -1. Otherwise output the minimal cost of buying such set of cards.\n\nExamples\n\nInput\n\n3\n100 99 9900\n1 1 1\n\n\nOutput\n\n2\n\n\nInput\n\n5\n10 20 30 40 50\n1 1 1 1 1\n\n\nOutput\n\n-1\n\n\nInput\n\n7\n15015 10010 6006 4290 2730 2310 1\n1 1 1 1 1 1 10\n\n\nOutput\n\n6\n\n\nInput\n\n8\n4264 4921 6321 6984 2316 8432 6120 1026\n4264 4921 6321 6984 2316 8432 6120 1026\n\n\nOutput\n\n7237\n\nNote\n\nIn first sample test, buying one card is not enough: for example, if you buy a card with length 100, you can't jump to any cell whose index is not a multiple of 100. The best way is to buy first and second card, that will make you be able to jump to any cell.\n\nIn the second sample test, even if you buy all cards, you can't jump to any cell whose index is not a multiple of 10, so you should output -1.",
        "task_name": "512_B. Fox And Jumping",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "'''\nCreated on Feb 5, 2015\n\n@author: simonm\n'''\nfrom fractions import gcd\nimport sys\nfrom heapq import heappush, heappop\n\ndef set_gcd(numbers):\n    ret = 0\n    for number in numbers:\n        ret = gcd(ret, number)\n    return ret\n    \n# solution = (cost, set(cards))\n# def solve(solution, cards, costs):\n#     # base case\n#     if set_gcd(solution[1]) == 1 : return solution[0]\n#     # look for the result recursively\n#     result = -1    \n#     for cost, card in zip(costs, cards):\n#         if card not in solution[1] :\n#             s = solve((solution[0] + cost, solution[1].union([card])), cards, costs)\n#             if result == -1 : result = s\n#             elif s != -1 and s < result : result = s\n#     return result\n\n# def solve(solution, cards, costs):\n#         \n#     stack = [(solution)]\n#         \n#     result = -1\n#     while stack:\n#         solution = stack.pop()\n#         # base case\n#         if set_gcd(solution[1]) == 1 : \n#             if result == -1 : result = solution[0]\n#             elif solution[0] < result : result = solution[0]\n#             continue\n#         # look for the result\n#         for cost, card in zip(costs, cards):\n#             if card not in solution[1] :\n#                 stack.append((solution[0] + cost, solution[1].union([card])))\n#         \n#     return result\n\ndef solve(solution, cards, costs):\n    \n#     checked = []\n    heap = [(solution)]\n    while heap:\n        solution = heap[0]\n        heappop(heap)\n        # base case\n        if set_gcd(solution[1]) == 1 : return solution[0]\n        # look for the result\n        for cost, card in zip(costs, cards):\n            if card not in solution[1] :\n                s = solution[1].union([card])\n#                 if s not in checked :\n#                 checked.append(s)\n                heappush(heap, (solution[0] + cost, s))\n    return -1\n\nif __name__ == '__main__':\n    \n    line = sys.stdin.readline()\n    line = sys.stdin.readline().rstrip()\n    cards = map(int, line.split())\n    line = sys.stdin.readline().rstrip()\n    costs = map(int, line.split())\n    if len(set(cards)) != len(cards) : print('len differs')\n    print(solve((0, set()), cards, costs))\n      \n#     cards = [100, 99, 9900]\n#     costs = [1, 1, 1]\n#     print(solve((0, set()), cards, costs)) # 2\n#      \n#     cards = [10, 20, 30, 40, 50]\n#     costs = [1, 1, 1, 1, 1]\n#     print(solve((0, set()), cards, costs)) # -1\n#          \n#     cards = [15015, 10010, 6006, 4290, 2730, 2310, 1]\n#     costs = [1, 1, 1, 1, 1, 1, 10]\n#     print(solve((0, set()), cards, costs)) # 6\n#          \n#     cards = [4264, 4921, 6321, 6984, 2316, 8432, 6120, 1026]\n#     costs = [4264, 4921, 6321, 6984, 2316, 8432, 6120, 1026]\n#     print(solve((0, set()), cards, costs)) # 7237",
        "correct": false,
        "task_id": "0144",
        "depth": 2
    },
    {
        "description": "Today on a lecture about strings Gerald learned a new definition of string equivalency. Two strings a and b of equal length are called equivalent in one of the two cases: \n\n  1. They are equal. \n  2. If we split string a into two halves of the same size a1 and a2, and string b into two halves of the same size b1 and b2, then one of the following is correct: \n    1. a1 is equivalent to b1, and a2 is equivalent to b2\n    2. a1 is equivalent to b2, and a2 is equivalent to b1\n\n\n\nAs a home task, the teacher gave two strings to his students and asked to determine if they are equivalent.\n\nGerald has already completed this home task. Now it's your turn!\n\nInput\n\nThe first two lines of the input contain two strings given by the teacher. Each of them has the length from 1 to 200 000 and consists of lowercase English letters. The strings have the same length.\n\nOutput\n\nPrint \"YES\" (without the quotes), if these two strings are equivalent, and \"NO\" (without the quotes) otherwise.\n\nExamples\n\nInput\n\naaba\nabaa\n\n\nOutput\n\nYES\n\n\nInput\n\naabb\nabab\n\n\nOutput\n\nNO\n\nNote\n\nIn the first sample you should split the first string into strings \"aa\" and \"ba\", the second one \u2014 into strings \"ab\" and \"aa\". \"aa\" is equivalent to \"aa\"; \"ab\" is equivalent to \"ba\" as \"ab\" = \"a\" + \"b\", \"ba\" = \"b\" + \"a\".\n\nIn the second sample the first string can be splitted into strings \"aa\" and \"bb\", that are equivalent only to themselves. That's why string \"aabb\" is equivalent only to itself and to string \"bbaa\".",
        "task_name": "560_D. Equivalent Strings",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "prime = 2**32 -1\nenglish_base = 30;\n\n\nclass Hasher(object):\n    def __init__(self, word, modulo = prime):\n        self.word = word\n        self.modulo = modulo\n        self.h = self.compute_hashes(self.word)\n        self.powers = self.compute_power(len(self.word))\n\n    def substring_hash(self, i, j):\n        result = self.h[j] - self.h[i] * self.powers[j-i]\n        return result % self.modulo\n\n    \n    def compute_hashes(self, word, base=english_base, modulo=prime):\n        h = [None for _ in range(len(word) + 1)]\n        h[0] = 0\n        for i in range(len(word)):\n            letter_as_number = (ord(word[i]) - ord('a') + 1)\n            h[i + 1] = h[i] * base + letter_as_number\n            h[i + 1] %= modulo\n        return h\n\n\n    def compute_power(self, n, base=english_base, modulo=prime):\n        powers = [None for _ in range(n+1)]\n        powers[0] = 1\n        for i in range(n):\n            powers[i+1] = (powers[i] * base) % modulo\n        return powers\n    \n\ndef splitter(text1, text2, i1, j1, i2, j2, hash1, hash2):\n    mid1 = int((j1+i1)/2)\n    mid2 = int((j2+i2)/2)\n    if (j1-i1)%4 != 0 or (j1-i1)==2:\n        a1 = hash1.substring_hash(i1,mid1)\n        a2 = hash1.substring_hash(mid1,j1)\n        b1 = hash2.substring_hash(i2,mid2)\n        b2 = hash2.substring_hash(mid2,j2)\n        if a1 == b1:\n            return a2 == b2\n        elif a2 == b1:\n            return a1 == b2\n        return False\n    return (splitter(text1, text2, i1, mid1, i2, mid2, hash1, hash2) and splitter(text1, text2, mid1, j1, mid2, j2, hash1, hash2)) or (splitter(text1, text2, i1, mid1, mid2, j2, hash1, hash2) and splitter(text1, text2, mid1, j1, i2, mid2, hash1, hash2))\n\ndef equivalent_substrings(text1, text2):\n    hash1 = Hasher(text1)\n    hash2 = Hasher(text2)\n\n    return splitter(text1, text2, 0, len(text1), 0, len(text2), hash1, hash2)\n\n\ndef main():\n    s1 = raw_input();\n    s2 = raw_input();\n    print(equivalent_substrings(s1,s2))\n\n\nif __name__=='__main__':\n    main()\n",
        "correct": false,
        "task_id": "0145",
        "depth": 1
    },
    {
        "description": "You are given a set of points on a straight line. Each point has a color assigned to it. For point a, its neighbors are the points which don't have any other points between them and a. Each point has at most two neighbors - one from the left and one from the right.\n\nYou perform a sequence of operations on this set of points. In one operation, you delete all points which have a neighbor point of a different color than the point itself. Points are deleted simultaneously, i.e. first you decide which points have to be deleted and then delete them. After that you can perform the next operation etc. If an operation would not delete any points, you can't perform it.\n\nHow many operations will you need to perform until the next operation does not have any points to delete?\n\nInput\n\nInput contains a single string of lowercase English letters 'a'-'z'. The letters give the points' colors in the order in which they are arranged on the line: the first letter gives the color of the leftmost point, the second gives the color of the second point from the left etc.\n\nThe number of the points is between 1 and 106.\n\nOutput\n\nOutput one line containing an integer - the number of operations which can be performed on the given set of points until there are no more points to delete.\n\nExamples\n\nInput\n\naabb\n\n\nOutput\n\n2\n\n\nInput\n\naabcaa\n\n\nOutput\n\n1\n\nNote\n\nIn the first test case, the first operation will delete two middle points and leave points \"ab\", which will be deleted with the second operation. There will be no points left to apply the third operation to.\n\nIn the second test case, the first operation will delete the four points in the middle, leaving points \"aa\". None of them have neighbors of other colors, so the second operation can't be applied.",
        "task_name": "909_D. Colorful Points",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s=raw_input()\na=[[s[0],1]]\nfor i in s[1:]:\n    if(a[-1][0]==i):\n        a[-1][1]+=1\n    else:\n        a.append([i,1])\nturns=0\nwhile((len(a)>1)):\n    turns+=1\n    temp=[]\n    if(a[0][1]>1):\n        temp.append([a[0][0],a[0][1]-1])\n    for i in a[1:-1]:\n        if(i[1]>2):\n            temp.append([i[0],i[1]-2])\n    if(a[-1][1]>1):\n        temp.append([a[-1][0],a[-1][1]-1])\n    if(len(temp)<2):\n        break\n    a=[temp[0],]\n    for i in temp[1:]:\n        if(i[0]!=a[-1][0]):\n            a.append(i)\n        else:\n            a[-1][1]+=i[1]\nprint(turns)",
        "correct": true,
        "task_id": "0150",
        "depth": 2
    },
    {
        "description": "You are given a chessboard of size 1 \u00d7 n. It is guaranteed that n is even. The chessboard is painted like this: \"BWBW...BW\".\n\nSome cells of the board are occupied by the chess pieces. Each cell contains no more than one chess piece. It is known that the total number of pieces equals to <image>.\n\nIn one step you can move one of the pieces one cell to the left or to the right. You cannot move pieces beyond the borders of the board. You also cannot move pieces to the cells that are already occupied.\n\nYour task is to place all the pieces in the cells of the same color using the minimum number of moves (all the pieces must occupy only the black cells or only the white cells after all the moves are made).\n\nInput\n\nThe first line of the input contains one integer n (2 \u2264 n \u2264 100, n is even) \u2014 the size of the chessboard. \n\nThe second line of the input contains <image> integer numbers <image> (1 \u2264 pi \u2264 n) \u2014 initial positions of the pieces. It is guaranteed that all the positions are distinct.\n\nOutput\n\nPrint one integer \u2014 the minimum number of moves you have to make to place all the pieces in the cells of the same color.\n\nExamples\n\nInput\n\n6\n1 2 6\n\n\nOutput\n\n2\n\n\nInput\n\n10\n1 2 3 4 5\n\n\nOutput\n\n10\n\nNote\n\nIn the first example the only possible strategy is to move the piece at the position 6 to the position 5 and move the piece at the position 2 to the position 3. Notice that if you decide to place the pieces in the white cells the minimum number of moves will be 3.\n\nIn the second example the possible strategy is to move <image> in 4 moves, then <image> in 3 moves, <image> in 2 moves and <image> in 1 move.",
        "task_name": "985_A. Chess Placing",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nrange = xrange\ninput = raw_input\n\nn = int(input())\nA = [int(x)-1 for x in input().split()]\nA.sort()\n\n\n# even\ngoal = 0\nmoves = 0\nfor a in A:\n    moves += abs(goal-a)\n    goal += 2\nbest =  moves\n\n# odd\ngoal = 1\nmoves = 0\nfor a in A:\n    moves += abs(goal-a)\n    goal += 2\nbest = min(moves,best)\n\nprint(best)\n",
        "correct": true,
        "task_id": "0152",
        "depth": 1
    },
    {
        "description": "We have N integers. The i-th number is A_i.\n\n\\\\{A_i\\\\} is said to be pairwise coprime when GCD(A_i,A_j)=1 holds for every pair (i, j) such that 1\\leq i < j \\leq N.\n\n\\\\{A_i\\\\} is said to be setwise coprime when \\\\{A_i\\\\} is not pairwise coprime but GCD(A_1,\\ldots,A_N)=1.\n\nDetermine if \\\\{A_i\\\\} is pairwise coprime, setwise coprime, or neither.\n\nHere, GCD(\\ldots) denotes greatest common divisor.\n\nConstraints\n\n* 2 \\leq N \\leq 10^6\n* 1 \\leq A_i\\leq 10^6\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 \\ldots A_N\n\n\nOutput\n\nIf \\\\{A_i\\\\} is pairwise coprime, print `pairwise coprime`; if \\\\{A_i\\\\} is setwise coprime, print `setwise coprime`; if neither, print `not coprime`.\n\nExamples\n\nInput\n\n3\n3 4 5\n\n\nOutput\n\npairwise coprime\n\n\nInput\n\n3\n6 10 15\n\n\nOutput\n\nsetwise coprime\n\n\nInput\n\n3\n6 10 16\n\n\nOutput\n\nnot coprime",
        "task_name": "p02574 AtCoder Beginner Contest 177 - Coprime",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport math\n\nif sys.subversion[0] == \"PyPy\":\n    import io, atexit\n\n    sys.stdout = io.BytesIO()\n    atexit.register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n\n    sys.stdin = io.BytesIO(sys.stdin.read())\n    input = lambda: sys.stdin.readline().rstrip()\nRS = raw_input\nRA = lambda x=int: map(x, RS().split())\nRN = lambda x=int: x(RS())\n\n\ndef solve():\n    check_pairwise()\n    check_set()\n    return\n\n\ndef check_pairwise():\n    active = set()\n    for i in range(0, n):\n        pp = getprimes(a[i])\n        for p in pp:\n            if p in active:\n                return\n            else:\n                active.add(p)\n    print(\"pairwise coprime\")\n    exit()\n\n\n\ndef check_set():\n    active = getprimes(a[0])\n    for i in range(1, n):\n        if not a[i] % a[i-1] == 0:\n            rm = []\n            for act in active:\n                if not a[i] % act == 0:\n                    rm.append(act)\n            for r in rm:\n                active.remove(r)\n                if not active:\n                    print(\"setwise coprime\")\n                    exit()\n    if not active:\n        print(\"setwise coprime\")\n        exit()\n    print(\"not coprime\")\n    exit()\n\n\n\n\ndef getprimes(num):\n    if num in primes:\n        return set([num])\n    pp = set()\n    for p in iterprimes:\n        if p > int(math.sqrt(num)+2):\n            break\n        if num % p == 0:\n            pp.add(p)\n\n    return pp\n\n\n\n\ndef n_primes(n):\n    nums = list(range(0, n + 1))\n    primes = []\n    for i in range(2, n + 1):\n        num = nums[i]\n        if num != 0:\n            primes.append(num)\n            for i in range(0, n // num + 1):\n                nums[i * num] = 0\n    return primes\n\n\nn = RN()\na = sorted(RA())\niterprimes = n_primes(10 ** 6)\nprimes = set(iterprimes)\nsolve()\n",
        "correct": false,
        "task_id": "0153",
        "depth": 2
    },
    {
        "description": "You are given a sequence of length N: A_1, A_2, ..., A_N. For each integer i between 1 and N (inclusive), answer the following question:\n\n* Find the maximum value among the N-1 elements other than A_i in the sequence.\n\nConstraints\n\n* 2 \\leq N \\leq 200000\n* 1 \\leq A_i \\leq 200000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1\n:\nA_N\n\n\nOutput\n\nPrint N lines. The i-th line (1 \\leq i \\leq N) should contain the maximum value among the N-1 elements other than A_i in the sequence.\n\nExamples\n\nInput\n\n3\n1\n4\n3\n\n\nOutput\n\n4\n3\n4\n\n\nInput\n\n2\n5\n5\n\n\nOutput\n\n5\n5",
        "task_name": "p02971 AtCoder Beginner Contest 134 - Exception Handling",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\na = []\nfor i in range(n):\n    a.append(int(raw_input()))\n\nb = [ 0 if i == max(a) else i for i in a ]\nif max(b) == 0:\n    b = [ max(a) if i == max(a) else i for i in a ]\n\nprint([ max(b) if i == max(a) else max(a) for i in a ])",
        "correct": false,
        "task_id": "0154",
        "depth": 1
    },
    {
        "description": "There are N children, numbered 1, 2, ..., N.\n\nSnuke has decided to distribute x sweets among them. He needs to give out all the x sweets, but some of the children may get zero sweets.\n\nFor each i (1 \\leq i \\leq N), Child i will be happy if he/she gets exactly a_i sweets. Snuke is trying to maximize the number of happy children by optimally distributing the sweets. Find the maximum possible number of happy children.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 100\n* 1 \\leq x \\leq 10^9\n* 1 \\leq a_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN x\na_1 a_2 ... a_N\n\n\nOutput\n\nPrint the maximum possible number of happy children.\n\nExamples\n\nInput\n\n3 70\n20 30 10\n\n\nOutput\n\n2\n\n\nInput\n\n3 10\n20 30 10\n\n\nOutput\n\n1\n\n\nInput\n\n4 1111\n1 10 100 1000\n\n\nOutput\n\n4\n\n\nInput\n\n2 10\n20 20\n\n\nOutput\n\n0",
        "task_name": "p03254 AtCoder Grand Contest 027 - Candy Distribution Again",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,x=map(int,raw_input().split())\na=(map(int,raw_input().split()))\nb=[]\nc=[]\nd=[]\nfor i in range(n):\n    if a[i] > x:\n        b.append(a[i])\n    elif a[i] == x:\n        c.append(a[i])\n    else:\n        d.append(a[i])\n\nif sum(a) == x:\n    print(n)\nelif len(b) == n:\n    print(0)\nelif len(c) == 1 and len(d) == 0:\n    print(1)\nelse:\n    print(len(d)-1)\n\n",
        "correct": false,
        "task_id": "0156",
        "depth": 1
    },
    {
        "description": "Takahashi is locked within a building.\n\nThis building consists of H\u00d7W rooms, arranged in H rows and W columns. We will denote the room at the i-th row and j-th column as (i,j). The state of this room is represented by a character A_{i,j}. If A_{i,j}= `#`, the room is locked and cannot be entered; if A_{i,j}= `.`, the room is not locked and can be freely entered. Takahashi is currently at the room where A_{i,j}= `S`, which can also be freely entered.\n\nEach room in the 1-st row, 1-st column, H-th row or W-th column, has an exit. Each of the other rooms (i,j) is connected to four rooms: (i-1,j), (i+1,j), (i,j-1) and (i,j+1).\n\nTakahashi will use his magic to get out of the building. In one cast, he can do the following:\n\n* Move to an adjacent room at most K times, possibly zero. Here, locked rooms cannot be entered.\n* Then, select and unlock at most K locked rooms, possibly zero. Those rooms will remain unlocked from then on.\n\n\n\nHis objective is to reach a room with an exit. Find the minimum necessary number of casts to do so.\n\nIt is guaranteed that Takahashi is initially at a room without an exit.\n\nConstraints\n\n* 3 \u2264 H \u2264 800\n* 3 \u2264 W \u2264 800\n* 1 \u2264 K \u2264 H\u00d7W\n* Each A_{i,j} is `#` , `.` or `S`.\n* There uniquely exists (i,j) such that A_{i,j}= `S`, and it satisfies 2 \u2264 i \u2264 H-1 and 2 \u2264 j \u2264 W-1.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W K\nA_{1,1}A_{1,2}...A_{1,W}\n:\nA_{H,1}A_{H,2}...A_{H,W}\n\n\nOutput\n\nPrint the minimum necessary number of casts.\n\nExamples\n\nInput\n\n3 3 3\n#.#\n#S.\n###\n\n\nOutput\n\n1\n\n\nInput\n\n3 3 3\n.#\nS.\n\n\nOutput\n\n1\n\n\nInput\n\n3 3 3\n\nS#\n\n\nOutput\n\n2\n\n\nInput\n\n7 7 2\n\n\n...##\nS###\n.#.##\n.###\n\n\nOutput\n\n2",
        "task_name": "p03725 AtCoder Grand Contest 014 - Closed Rooms",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from collections import deque\nh, w, k = map(int, raw_input().split())\nA = [raw_input() for i in xrange(h)]\nsx = sy = 0\nfor i in xrange(h):\n    idx = A[i].find('S')\n    if idx != -1:\n        sx = idx; sy = i\n        break\n\ndeq = deque()\ndeq.append((0, (sx, sy)))\n\nused = set([(sx, sy)])\ndd = [[-1, 0], [0, -1], [1, 0], [0, 1]]\n\nwhile deq:\n    cost, [x, y] = deq.popleft()\n    for dx, dy in dd:\n        nx = x + dx; ny = y + dy\n        if 0 <= nx < w and 0 <= ny < h:\n            nkey = (nx, ny)\n            if A[ny][nx] != '#' and nkey not in used:\n                used.add(nkey)\n                if cost + 1 < k:\n                    deq.append((0, nkey))\nans = 10**18\nfor x, y in used:\n    dx = min(x, w-1-x)\n    dy = min(y, h-1-y)\n    ans = min(ans, min(dx, dy))\nprint (ans+k-1)/k + 1",
        "correct": false,
        "task_id": "0158",
        "depth": 2
    },
    {
        "description": "Snuke is conducting an optical experiment using mirrors and his new invention, the rifle of Mysterious Light.\n\nThree mirrors of length N are set so that they form an equilateral triangle. Let the vertices of the triangle be a, b and c.\n\nInside the triangle, the rifle is placed at the point p on segment ab such that ap = X. (The size of the rifle is negligible.) Now, the rifle is about to fire a ray of Mysterious Light in the direction of bc.\n\nThe ray of Mysterious Light will travel in a straight line, and will be reflected by mirrors, in the same ways as \"ordinary\" light. There is one major difference, though: it will be also reflected by its own trajectory as if it is a mirror! When the ray comes back to the rifle, the ray will be absorbed.\n\nThe following image shows the ray's trajectory where N = 5 and X = 2.\n\nbtriangle.png\n\nIt can be shown that the ray eventually comes back to the rifle and is absorbed, regardless of the values of N and X. Find the total length of the ray's trajectory.\n\nConstraints\n\n* 2\u2266N\u226610^{12}\n* 1\u2266X\u2266N-1\n* N and X are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN X\n\n\nOutput\n\nPrint the total length of the ray's trajectory.\n\nExample\n\nInput\n\n5 2\n\n\nOutput\n\n12",
        "task_name": "p04048 AtCoder Grand Contest 001 - Mysterious Light",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "L = map(int, raw_input().split())\nn = L[0]\nx = L[1]\nres = n\na = x\nb = n-x\nflag = True\nwhile flag :\n    if a > b:\n        q = a // b\n        a -= q*b\n        res += 2*q*b\n    elif  b > a:\n        q = b // a\n        b -= q*a\n        res += 2*a*q\n    else:\n        res += a\n        flag = False\nprint(res)",
        "correct": false,
        "task_id": "0160",
        "depth": 1
    },
    {
        "description": "One day, Taro received a strange email with only the number \"519345213244\" in the text. The email was from my cousin, who was 10 years older than me, so when I called and asked, \"Oh, I sent it with a pocket bell because I was in a hurry. It's convenient. Nice to meet you!\" I got it. You know this cousin, who is always busy and a little bit aggressive, and when you have no choice but to research \"pager hitting\" yourself, you can see that it is a method of input that prevailed in the world about 10 years ago. I understand.\n\nIn \"Pokebell Strike\", enter one character with two numbers, such as 11 for \"A\" and 15 for \"O\" according to the conversion table shown in Fig. 1. For example, to enter the string \"Naruto\", type \"519345\". Therefore, any letter can be entered with two numbers.\n\n<image>\n\nFigure 1\n\nWhen mobile phones weren't widespread, high school students used this method to send messages from payphones to their friends' pagers. Some high school girls were able to pager at a tremendous speed. Recently, my cousin, who has been busy with work, has unknowingly started typing emails with a pager.\n\nTherefore, in order to help Taro who is having a hard time deciphering every time, please write a program that converts the pager message into a character string and outputs it. However, the conversion table shown in Fig. 2 is used for conversion, and only lowercase letters, \".\", \"?\", \"!\", And blanks are targeted. Output NA for messages that contain characters that cannot be converted.\n\n<image>\n\nFigure 2\n\n\n\nInput\n\nMultiple messages are given. One message (up to 200 characters) is given on each line. The total number of messages does not exceed 50.\n\nOutput\n\nFor each message, output the converted message or NA on one line.\n\nExample\n\nInput\n\n341143514535\n314\n143565553551655311343411652235654535651124615163\n551544654451431564\n4\n3411\n6363636363\n153414\n\n\nOutput\n\nnaruto\nNA\ndo you wanna go to aizu?\nyes sure!\nNA\nna\n?????\nend",
        "task_name": "p00127 Pocket Pager Input",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdout\n\ncs = {\n    1: [None] + list(\"abcde\"),\n    2: [None] + list(\"fghij\"),\n    3: [None] + list(\"klmno\"),\n    4: [None] + list(\"pqrst\"),\n    5: [None] + list(\"uvwxy\"),\n    6: [None] + list(\"z.?! \"),\n}\n\nwhile True:\n    try:\n        it = iter(raw_input().strip())\n    except ValueError:\n        break\n\n    try:\n        r = c = None\n        s = []\n        while True:\n            r = int(it.next())\n            c = int(it.next())\n            s += [cs[r][c]]\n            r = c = None\n    except IndexError:\n        stdout.write(\"NA\\n\")\n    except StopIteration:\n        if not r and not c:\n            stdout.write(''.join(s) + \"\\n\")\n        else:\n            stdout.write(\"NA\\n\")\n        continue",
        "correct": false,
        "task_id": "0161",
        "depth": 2
    },
    {
        "description": "Long long ago, there was a thief. Looking for treasures, he was running about all over the world. One day, he heard a rumor that there were islands that had large amount of treasures, so he decided to head for there.\n\nFinally he found n islands that had treasures and one island that had nothing. Most of islands had seashore and he can land only on an island which had nothing. He walked around the island and found that there was an old bridge between this island and each of all other n islands.\n\nHe tries to visit all islands one by one and pick all the treasures up. Since he is afraid to be stolen, he visits with bringing all treasures that he has picked up. He is a strong man and can bring all the treasures at a time, but the old bridges will break if he cross it with taking certain or more amount of treasures.\n\nPlease write a program that judges if he can collect all the treasures and can be back to the island where he land on by properly selecting an order of his visit.\n\nConstraints\n\n* 1 \u2264 n \u2264 25\n\nInput\n\nInput consists of several datasets.\n\nThe first line of each dataset contains an integer n. Next n lines represents information of the islands. Each line has two integers, which means the amount of treasures of the island and the maximal amount that he can take when he crosses the bridge to the islands, respectively.\n\nThe end of input is represented by a case with n = 0.\n\nOutput\n\nFor each dataset, if he can collect all the treasures and can be back, print \"Yes\" Otherwise print \"No\"\n\nExample\n\nInput\n\n3\n2 3\n3 6\n1 2\n3\n2 3\n3 5\n1 2\n0\n\n\nOutput\n\nYes\nNo",
        "task_name": "p00638 Old Bridges",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "while True:\n    count_shima=input()\n    if count_shima==0: break\n    A=[]\n    A = [map(int,raw_input().split()) for i in range(count_shima)]\n\n    A.sort()\n\n    weight=0\n    flag=True\n    for takara,turi in A:\n        weight +=takara\n        if turi < weight:\n            flag=False\n    print(\"Yes\" if flag else \"No\")",
        "correct": false,
        "task_id": "0162",
        "depth": 2
    },
    {
        "description": "Integer factorisation is hard. The RSA Factoring Challenge offered $100 000 for factoring RSA-1024, a 1024-bit long product of two prime numbers. To this date, nobody was able to claim the prize. We want you to factorise a 1024-bit number.\n\nSince your programming language of choice might not offer facilities for handling large integers, we will provide you with a very simple calculator. \n\nTo use this calculator, you can print queries on the standard output and retrieve the results from the standard input. The operations are as follows: \n\n  * + x y where x and y are integers between 0 and n-1. Returns (x+y) mod n. \n  * - x y where x and y are integers between 0 and n-1. Returns (x-y) mod n. \n  * * x y where x and y are integers between 0 and n-1. Returns (x \u22c5 y) mod n. \n  * / x y where x and y are integers between 0 and n-1 and y is coprime with n. Returns (x \u22c5 y^{-1}) mod n where y^{-1} is multiplicative inverse of y modulo n. If y is not coprime with n, then -1 is returned instead. \n  * sqrt x where x is integer between 0 and n-1 coprime with n. Returns y such that y^2 mod n = x. If there are multiple such integers, only one of them is returned. If there are none, -1 is returned instead. \n  * ^ x y where x and y are integers between 0 and n-1. Returns {x^y mod n}. \n\n\n\nFind the factorisation of n that is a product of between 2 and 10 distinct prime numbers, all of form 4x + 3 for some integer x.\n\nBecause of technical issues, we restrict number of requests to 100.\n\nInput\n\nThe only line contains a single integer n (21 \u2264 n \u2264 2^{1024}). It is guaranteed that n is a product of between 2 and 10 distinct prime numbers, all of form 4x + 3 for some integer x.\n\nOutput\n\nYou can print as many queries as you wish, adhering to the time limit (see the Interaction section for more details). \n\nWhen you think you know the answer, output a single line of form ! k p_1 p_2 ... p_k, where k is the number of prime factors of n, and p_i are the distinct prime factors. You may print the factors in any order.\n\nHacks input\n\nFor hacks, use the following format:. \n\nThe first should contain k (2 \u2264 k \u2264 10) \u2014 the number of prime factors of n. \n\nThe second should contain k space separated integers p_1, p_2, ..., p_k (21 \u2264 n \u2264 2^{1024}) \u2014 the prime factors of n. All prime factors have to be of form 4x + 3 for some integer x. They all have to be distinct. \n\nInteraction\n\nAfter printing a query do not forget to output end of line and flush the output. Otherwise you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++;\n  * System.out.flush() in Java;\n  * flush(output) in Pascal;\n  * stdout.flush() in Python;\n  * see documentation for other languages.\n\n\n\nThe number of queries is not limited. However, your program must (as always) fit in the time limit. The run time of the interactor is also counted towards the time limit. The maximum runtime of each query is given below.\n\n  * + x y \u2014 up to 1 ms. \n  * - x y \u2014 up to 1 ms. \n  * * x y \u2014 up to 1 ms. \n  * / x y \u2014 up to 350 ms. \n  * sqrt x \u2014 up to 80 ms. \n  * ^ x y \u2014 up to 350 ms. \n\n\n\nNote that the sample input contains extra empty lines so that it easier to read. The real input will not contain any empty lines and you do not need to output extra empty lines.\n\nExample\n\nInput\n\n21\n\n7\n\n17\n\n15\n\n17\n\n11\n\n-1\n\n15\n\n\n\nOutput\n\n+ 12 16\n\n- 6 10\n\n* 8 15\n\n/ 5 4\n\nsqrt 16\n\nsqrt 5\n\n^ 6 12\n\n! 2 3 7\n\nNote\n\nWe start by reading the first line containing the integer n = 21. Then, we ask for: \n\n  1. (12 + 16) mod 21 = 28 mod 21 = 7. \n  2. (6 - 10) mod 21 = -4 mod 21 = 17. \n  3. (8 \u22c5 15) mod 21 = 120 mod 21 = 15. \n  4. (5 \u22c5 4^{-1}) mod 21 = (5 \u22c5 16) mod 21 = 80 mod 21 = 17. \n  5. Square root of 16. The answer is 11, as (11 \u22c5 11) mod 21 = 121 mod 21 = 16. Note that the answer may as well be 10. \n  6. Square root of 5. There is no x such that x^2 mod 21 = 5, so the output is -1. \n  7. (6^{12}) mod 21 = 2176782336 mod 21 = 15. \n\n\n\nWe conclude that our calculator is working, stop fooling around and realise that 21 = 3 \u22c5 7.",
        "task_name": "1091_G. New Year and the Factorisation Collaboration",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import random\nimport time\nimport sys\n\ndef find_gcd(a, b):\n    if b == 0:\n        return a\n    return find_gcd(b, a % b)\n\nn = int(input())\nt = []\n\nrandom.seed(time.time())\n\nfor iter in range(50):\n    x = random.randint(2, n - 1)\n    print(\"sqrt %s\" % ((x * x) % n)) \n    sys.stdout.flush()\n\n    s = int(input())\n    if s == x or s + x == n:\n        continue\n\n    t.append(find_gcd(x + s, n))\n\nt = sorted(t)\np = []\nfor i in range(len(t)):\n    if t[i] != 1 and t[i] not in p:\n        p.append(t[i])\n        for j in range(len(t)):\n            if i != j and t[j] % t[i] == 0:\n                t[j] /= t[i]\n\np = sorted(p)\nres = []\nprod = 1\nfor x in p:\n    res.append(x)\n    prod *= x\n    if prod == n:\n        break\n        \nprint(\"! %s %s\" % (len(res), \" \".join([str(x) for x in res])))\nsys.stdout.flush()\n",
        "correct": false,
        "task_id": "0164",
        "depth": 2
    },
    {
        "description": "You have a string s of length n consisting of only characters > and <. You may do some operations with this string, for each operation you have to choose some character that still remains in the string. If you choose a character >, the character that comes right after it is deleted (if the character you chose was the last one, nothing happens). If you choose a character <, the character that comes right before it is deleted (if the character you chose was the first one, nothing happens).\n\nFor example, if we choose character > in string > > < >, the string will become to > > >. And if we choose character < in string > <, the string will become to <.\n\nThe string is good if there is a sequence of operations such that after performing it only one character will remain in the string. For example, the strings >, > > are good. \n\nBefore applying the operations, you may remove any number of characters from the given string (possibly none, possibly up to n - 1, but not the whole string). You need to calculate the minimum number of characters to be deleted from string s so that it becomes good.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2013 the number of test cases. Each test case is represented by two lines.\n\nThe first line of i-th test case contains one integer n (1 \u2264 n \u2264 100) \u2013 the length of string s.\n\nThe second line of i-th test case contains string s, consisting of only characters > and <.\n\nOutput\n\nFor each test case print one line.\n\nFor i-th test case print the minimum number of characters to be deleted from string s so that it becomes good.\n\nExample\n\nInput\n\n\n3\n2\n&lt;&gt;\n3\n&gt;&lt;&lt;\n1\n&gt;\n\n\nOutput\n\n\n1\n0\n0\n\nNote\n\nIn the first test case we can delete any character in string <>.\n\nIn the second test case we don't need to delete any characters. The string > < < is good, because we can perform the following sequence of operations: > < < \u2192 < < \u2192 <.",
        "task_name": "1140_B. Good String",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ndef fi():\n    return int(sys.stdin.readline())\n\ndef fi2():\n    return map(int, sys.stdin.readline().split())\n\ndef fi3():\n    return sys.stdin.readline()\n\ndef fo(*args):\n    for s in args:\n        sys.stdout.write(str(s)+' ')\n    sys.stdout.write('\\n')\n\nINF=10**9+7\n\n#main\n\nT=fi()\nfor t in range(T):\n    n=fi()\n    s=raw_input()\n    if \"<>\" in s:\n        fo(1)\n    else:\n        fo(0)\n",
        "correct": false,
        "task_id": "0166",
        "depth": 1
    },
    {
        "description": "There were n types of swords in the theater basement which had been used during the plays. Moreover there were exactly x swords of each type. y people have broken into the theater basement and each of them has taken exactly z swords of some single type. Note that different people might have taken different types of swords. Note that the values x, y and z are unknown for you.\n\nThe next morning the director of the theater discovers the loss. He counts all swords \u2014 exactly a_i swords of the i-th type are left untouched.\n\nThe director has no clue about the initial number of swords of each type in the basement, the number of people who have broken into the basement and how many swords each of them have taken.\n\nFor example, if n=3, a = [3, 12, 6] then one of the possible situations is x=12, y=5 and z=3. Then the first three people took swords of the first type and the other two people took swords of the third type. Note that you don't know values x, y and z beforehand but know values of n and a.\n\nThus he seeks for your help. Determine the minimum number of people y, which could have broken into the theater basement, and the number of swords z each of them has taken.\n\nInput\n\nThe first line of the input contains one integer n (2 \u2264 n \u2264 2 \u22c5 10^{5}) \u2014 the number of types of swords.\n\nThe second line of the input contains the sequence a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^{9}), where a_i equals to the number of swords of the i-th type, which have remained in the basement after the theft. It is guaranteed that there exists at least one such pair of indices (j, k) that a_j \u2260 a_k.\n\nOutput\n\nPrint two integers y and z \u2014 the minimum number of people which could have broken into the basement and the number of swords each of them has taken.\n\nExamples\n\nInput\n\n\n3\n3 12 6\n\n\nOutput\n\n\n5 3\n\n\nInput\n\n\n2\n2 9\n\n\nOutput\n\n\n1 7\n\n\nInput\n\n\n7\n2 1000000000 4 6 8 4 2\n\n\nOutput\n\n\n2999999987 2\n\n\nInput\n\n\n6\n13 52 0 13 26 52\n\n\nOutput\n\n\n12 13\n\nNote\n\nIn the first example the minimum value of y equals to 5, i.e. the minimum number of people who could have broken into the basement, is 5. Each of them has taken 3 swords: three of them have taken 3 swords of the first type, and two others have taken 3 swords of the third type.\n\nIn the second example the minimum value of y is 1, i.e. the minimum number of people who could have broken into the basement, equals to 1. He has taken 7 swords of the first type.",
        "task_name": "1216_D. Swords",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom functools import reduce\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef gcd(x, y):\n    \"\"\"greatest common divisor of x and y\"\"\"\n    while y:\n        x, y = y, x % y\n    return x\n\n\ngcdm = lambda args: reduce(gcd, args, 0)\n\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n\n    m = max(a)\n    z = gcdm(m - i for i in a)\n\n    y = sum((m - i) // z for i in a)\n\n    print(y, z)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": true,
        "task_id": "0167",
        "depth": 1
    },
    {
        "description": "Your friend Jeff Zebos has been trying to run his new online company, but it's not going very well. He's not getting a lot of sales on his website which he decided to call Azamon. His big problem, you think, is that he's not ranking high enough on the search engines. If only he could rename his products to have better names than his competitors, then he'll be at the top of the search results and will be a millionaire.\n\nAfter doing some research, you find out that search engines only sort their results lexicographically. If your friend could rename his products to lexicographically smaller strings than his competitor's, then he'll be at the top of the rankings!\n\nTo make your strategy less obvious to his competitors, you decide to swap no more than two letters of the product names.\n\nPlease help Jeff to find improved names for his products that are lexicographically smaller than his competitor's!\n\nGiven the string s representing Jeff's product name and the string c representing his competitor's product name, find a way to swap at most one pair of characters in s (that is, find two distinct indices i and j and swap s_i and s_j) such that the resulting new name becomes strictly lexicographically smaller than c, or determine that it is impossible.\n\nNote: String a is strictly lexicographically smaller than string b if and only if one of the following holds:\n\n  * a is a proper prefix of b, that is, a is a prefix of b such that a \u2260 b; \n  * There exists an integer 1 \u2264 i \u2264 min{(|a|, |b|)} such that a_i < b_i and a_j = b_j for 1 \u2264 j < i. \n\nInput\n\nThe first line of input contains a single integer t (1 \u2264 t \u2264 1500) denoting the number of test cases. The next lines contain descriptions of the test cases.\n\nEach test case consists of a single line containing two space-separated strings s and c (2 \u2264 |s| \u2264 5000, 1 \u2264 |c| \u2264 5000). The strings s and c consists of uppercase English letters.\n\nIt is guaranteed that the sum of |s| in the input is at most 5000 and the sum of the |c| in the input is at most 5000.\n\nOutput\n\nFor each test case, output a single line containing a single string, which is either\n\n  * the new name which is obtained after swapping no more than one pair of characters that is strictly lexicographically smaller than c. In case there are many possible such strings, you can output any of them; \n  * three dashes (the string \"---\" without quotes) if it is impossible. \n\nExample\n\nInput\n\n\n3\nAZAMON APPLE\nAZAMON AAAAAAAAAAALIBABA\nAPPLE BANANA\n\n\nOutput\n\n\nAMAZON\n---\nAPPLE\n\nNote\n\nIn the first test case, it is possible to swap the second and the fourth letters of the string and the resulting string \"AMAZON\" is lexicographically smaller than \"APPLE\".\n\nIt is impossible to improve the product's name in the second test case and satisfy all conditions.\n\nIn the third test case, it is possible not to swap a pair of characters. The name \"APPLE\" is lexicographically smaller than \"BANANA\". Note that there are other valid answers, e.g., \"APPEL\". ",
        "task_name": "1281_B. Azamon Web Services",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "for _ in range(int(raw_input())):\n\ta,b=map(str,raw_input().split())\n\tflag=True\n\tif a==b:\n\t\tprint(\"---\")\n\telse:\n\t\tfor i in range(min(len(a),len(b))):\n\t\t\tif a[i]<b[i] :\n\t\t\t\tbreak\n\n\t\t\telif a[i]>b[i]:\n\t\t\t\tflag=False\n\t\t\t\tbreak\n\n\t\tif flag:\n\t\t\tprint(a)\n\n\t\telse:\n\t\t\tflag=True\n\t\t\tfor j in range(i+1,min(len(a),len(b))):\n\t\t\t\tif a[j]<b[i]:\n\t\t\t\t\tflag=False\n\t\t\t\t\tbreak\n\n\t\t\tif flag:\n\t\t\t\tprint(\"---\")\n\n\t\t\telse:\n\t\t\t\tprint(a[:i]+a[j]+a[i+1:j]+a[i]+a[j+1:])\n\n",
        "correct": false,
        "task_id": "0168",
        "depth": 2
    },
    {
        "description": "Dark is going to attend Motarack's birthday. Dark decided that the gift he is going to give to Motarack is an array a of n non-negative integers.\n\nDark created that array 1000 years ago, so some elements in that array disappeared. Dark knows that Motarack hates to see an array that has two adjacent elements with a high absolute difference between them. He doesn't have much time so he wants to choose an integer k (0 \u2264 k \u2264 10^{9}) and replaces all missing elements in the array a with k.\n\nLet m be the maximum absolute difference between all adjacent elements (i.e. the maximum value of |a_i - a_{i+1}| for all 1 \u2264 i \u2264 n - 1) in the array a after Dark replaces all missing elements with k.\n\nDark should choose an integer k so that m is minimized. Can you help him?\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains one integer n (2 \u2264 n \u2264 10^{5}) \u2014 the size of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (-1 \u2264 a_i \u2264 10 ^ {9}). If a_i = -1, then the i-th integer is missing. It is guaranteed that at least one integer is missing in every test case.\n\nIt is guaranteed, that the sum of n for all test cases does not exceed 4 \u22c5 10 ^ {5}.\n\nOutput\n\nPrint the answers for each test case in the following format:\n\nYou should print two integers, the minimum possible value of m and an integer k (0 \u2264 k \u2264 10^{9}) that makes the maximum absolute difference between adjacent elements in the array a equal to m.\n\nMake sure that after replacing all the missing elements with k, the maximum absolute difference between adjacent elements becomes m.\n\nIf there is more than one possible k, you can print any of them.\n\nExample\n\nInput\n\n\n7\n5\n-1 10 -1 12 -1\n5\n-1 40 35 -1 35\n6\n-1 -1 9 -1 3 -1\n2\n-1 -1\n2\n0 -1\n4\n1 -1 3 -1\n7\n1 -1 7 5 2 -1 5\n\n\nOutput\n\n\n1 11\n5 35\n3 6\n0 42\n0 0\n1 2\n3 4\n\nNote\n\nIn the first test case after replacing all missing elements with 11 the array becomes [11, 10, 11, 12, 11]. The absolute difference between any adjacent elements is 1. It is impossible to choose a value of k, such that the absolute difference between any adjacent element will be \u2264 0. So, the answer is 1.\n\nIn the third test case after replacing all missing elements with 6 the array becomes [6, 6, 9, 6, 3, 6].\n\n  * |a_1 - a_2| = |6 - 6| = 0; \n  * |a_2 - a_3| = |6 - 9| = 3; \n  * |a_3 - a_4| = |9 - 6| = 3; \n  * |a_4 - a_5| = |6 - 3| = 3; \n  * |a_5 - a_6| = |3 - 6| = 3. \n\n\n\nSo, the maximum difference between any adjacent elements is 3.",
        "task_name": "1301_B. Motarack's Birthday",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        l1 = list(map(int, input().split()))\n        temp = 0\n        count = 0\n        mini = -1\n        maxi = -1\n        for i in range(n):\n            flag = 0\n            if l1[i]==-1:\n                continue\n            if i>0 and l1[i-1] == -1:\n                flag = 1\n            if i < n-1 and l1[i+1] == -1:\n                flag = 1\n            if flag==1:\n                if mini==-1:\n                    mini = l1[i]\n                else:\n                    mini = min(mini, l1[i])\n                if maxi==-1:\n                    maxi = l1[i]\n                else:\n                    maxi = max(maxi, l1[i])\n        \n        if mini==-1:\n            k = 0\n        else :\n            k = (maxi+mini)//2\n            \n        m = 0 \n        for i in range(n-1):\n            if l1[i+1]==-1:\n                l1[i+1] = k\n            if l1[i] == -1:\n                l1[i] = k\n            m = max(abs(l1[i+1]-l1[i]), m)\n        print(m, k)\n######## Python 2 and 3 footer by Pajenegod and c1729\n\n# Note because cf runs old PyPy3 version which doesn't have the sped up\n# unicode strings, PyPy3 strings will many times be slower than pypy2.\n# There is a way to get around this by using binary strings in PyPy3\n# but its syntax is different which makes it kind of a mess to use.\n\n# So on cf, use PyPy2 for best string performance.\n\npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\n\nimport os, sys\nfrom io import IOBase, BytesIO\n\nBUFSIZE = 8192\nclass FastIO(BytesIO):\n    newlines = 0\n\n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n\n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0,2), super(FastIO, self).write(s))[0])\n        return s\n\n    def read(self):\n        while self._fill(): pass\n        return super(FastIO,self).read()\n\n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill(); self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s:self.buffer.write(s.encode('ascii'))\n            self.read = lambda:self.buffer.read().decode('ascii')\n            self.readline = lambda:self.buffer.readline().decode('ascii')\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# Cout implemented in Python\nimport sys\nclass ostream:\n    def __lshift__(self,a):\n        sys.stdout.write(str(a))\n        return self\ncout = ostream()\nendl = '\\n'\n\n# Read all remaining integers in stdin, type is given by optional argument, this is fast\ndef readnumbers(zero = 0):\n    conv = ord if py2 else lambda x:x\n    A = []; numb = zero; sign = 1; i = 0; s = sys.stdin.buffer.read()\n    try:\n        while True:\n            if s[i] >= b'0' [0]:\n                numb = 10 * numb + conv(s[i]) - 48\n            elif s[i] == b'-' [0]: sign = -1\n            elif s[i] != b'\\r' [0]:\n                A.append(sign*numb)\n                numb = zero; sign = 1\n            i += 1\n    except:pass\n    if s and s[-1] >= b'0' [0]:\n        A.append(sign*numb)\n    return A\n\nif __name__== \"__main__\":\n  main()",
        "correct": true,
        "task_id": "0169",
        "depth": 2
    },
    {
        "description": "Ehab has an array a of length n. He has just enough free time to make a new array consisting of n copies of the old array, written back-to-back. What will be the length of the new array's longest increasing subsequence?\n\nA sequence a is a subsequence of an array b if a can be obtained from b by deletion of several (possibly, zero or all) elements. The longest increasing subsequence of an array is the longest subsequence such that its elements are ordered in strictly increasing order.\n\nInput\n\nThe first line contains an integer t \u2014 the number of test cases you need to solve. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 \u2264 n \u2264 10^5) \u2014 the number of elements in the array a.\n\nThe second line contains n space-separated integers a_1, a_2, \u2026, a_{n} (1 \u2264 a_i \u2264 10^9) \u2014 the elements of the array a.\n\nThe sum of n across the test cases doesn't exceed 10^5.\n\nOutput\n\nFor each testcase, output the length of the longest increasing subsequence of a if you concatenate it to itself n times.\n\nExample\n\nInput\n\n\n2\n3\n3 2 1\n6\n3 1 4 1 5 9\n\n\nOutput\n\n\n3\n5\n\nNote\n\nIn the first sample, the new array is [3,2,1,3,2,1,3,2,1]. The longest increasing subsequence is marked in bold.\n\nIn the second sample, the longest increasing subsequence will be [1,3,4,5,9].",
        "task_name": "1325_B. CopyCopyCopyCopyCopy",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def read_test():\n\tn = int(raw_input())\n\tline = raw_input()\n\treturn (\n\t\tn,\n\t\t[int(x) for x in line.split(\" \")]\n\t)\n\t\ndef solve(a, n):\n\tfor i in range(n - 1):\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] < a[i]:\n\t\t\t\ta[i], a[j] = a[j], a[i]\n\t\t\t\t\n\tresult = []\n\tprev = None\n\tfor x in a:\n\t\tif x != prev:\n\t\t\tresult.append(x)\n\t\tprev = x\n\n\treturn result\n\t\nn = int(raw_input())\nfor i in range(n):\n\tn, a = read_test()\n\tresult = solve(a, n)\n\tprint(\" \".join([str(x) for x in result]))\n\t",
        "correct": false,
        "task_id": "0170",
        "depth": 2
    },
    {
        "description": "Hilbert's Hotel is a very unusual hotel since the number of rooms is infinite! In fact, there is exactly one room for every integer, including zero and negative integers. Even stranger, the hotel is currently at full capacity, meaning there is exactly one guest in every room. The hotel's manager, David Hilbert himself, decides he wants to shuffle the guests around because he thinks this will create a vacancy (a room without a guest).\n\nFor any integer k and positive integer n, let kmod n denote the remainder when k is divided by n. More formally, r=kmod n is the smallest non-negative integer such that k-r is divisible by n. It always holds that 0\u2264 kmod n\u2264 n-1. For example, 100mod 12=4 and (-1337)mod 3=1.\n\nThen the shuffling works as follows. There is an array of n integers a_0,a_1,\u2026,a_{n-1}. Then for each integer k, the guest in room k is moved to room number k+a_{kmod n}.\n\nAfter this shuffling process, determine if there is still exactly one guest assigned to each room. That is, there are no vacancies or rooms with multiple guests.\n\nInput\n\nEach test consists of multiple test cases. The first line contains a single integer t (1\u2264 t\u2264 10^4) \u2014 the number of test cases. Next 2t lines contain descriptions of test cases.\n\nThe first line of each test case contains a single integer n (1\u2264 n\u2264 2\u22c5 10^5) \u2014 the length of the array.\n\nThe second line of each test case contains n integers a_0,a_1,\u2026,a_{n-1} (-10^9\u2264 a_i\u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2\u22c5 10^5.\n\nOutput\n\nFor each test case, output a single line containing \"YES\" if there is exactly one guest assigned to each room after the shuffling process, or \"NO\" otherwise. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n6\n1\n14\n2\n1 -1\n4\n5 5 5 1\n3\n3 2 1\n2\n0 1\n5\n-239 -2 -100 -3 -11\n\n\nOutput\n\n\nYES\nYES\nYES\nNO\nNO\nYES\n\nNote\n\nIn the first test case, every guest is shifted by 14 rooms, so the assignment is still unique.\n\nIn the second test case, even guests move to the right by 1 room, and odd guests move to the left by 1 room. We can show that the assignment is still unique.\n\nIn the third test case, every fourth guest moves to the right by 1 room, and the other guests move to the right by 5 rooms. We can show that the assignment is still unique.\n\nIn the fourth test case, guests 0 and 1 are both assigned to room 3.\n\nIn the fifth test case, guests 1 and 2 are both assigned to room 2.",
        "task_name": "1344_A. Hilbert's Hotel",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ninput = sys.stdin.readline\n\nfor _ in xrange(int(input())):\n    n = int(input())\n    seq = [int(x) for x in input().split()]\n    s = sorted([i+seq[i%n] for i in xrange(2*n)])\n    ans = \"YES\"\n    for i in xrange(1,len(s)):\n        if s[i] == s[i-1]:\n            ans = \"NO\"\n            break\n    print(ans)\n        \n        \n",
        "correct": false,
        "task_id": "0171",
        "depth": 2
    },
    {
        "description": "Polycarp plays a well-known computer game (we won't mention its name). In this game, he can craft tools of two types \u2014 shovels and swords. To craft a shovel, Polycarp spends two sticks and one diamond; to craft a sword, Polycarp spends two diamonds and one stick.\n\nEach tool can be sold for exactly one emerald. How many emeralds can Polycarp earn, if he has a sticks and b diamonds?\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe only line of each test case contains two integers a and b (0 \u2264 a, b \u2264 10^9) \u2014 the number of sticks and the number of diamonds, respectively.\n\nOutput\n\nFor each test case print one integer \u2014 the maximum number of emeralds Polycarp can earn.\n\nExample\n\nInput\n\n\n4\n4 4\n1000000000 0\n7 15\n8 7\n\n\nOutput\n\n\n2\n0\n7\n5\n\nNote\n\nIn the first test case Polycarp can earn two emeralds as follows: craft one sword and one shovel.\n\nIn the second test case Polycarp does not have any diamonds, so he cannot craft anything.",
        "task_name": "1366_A. Shovels and Swords",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\nMOD = 998244353\nmod = 10**9 + 7\n\n# import resource\n# resource.setrlimit(resource.RLIMIT_STACK, [0x100000000, resource.RLIM_INFINITY])\n\ndef prepare_factorial():\n    fact = [1]\n    for i in range(1, 20):\n        fact.append((fact[-1] * i) % mod)\n    ifact = [0] * 105\n    ifact[104] = pow(fact[104], mod - 2, mod)\n    for i in range(104, 0, -1):\n        ifact[i - 1] = (i * ifact[i]) % mod\n\n    return fact, ifact\n\n# import threading\n# threading.stack_size(1<<27)\nimport sys\n# sys.setrecursionlimit(10000)\n\nfrom bisect import bisect_left, bisect_right, insort\nfrom math import floor, ceil, sqrt, degrees, atan, pi, log, sin, radians, factorial\nfrom heapq import heappop, heapify, heappush\nfrom collections import Counter, defaultdict, deque\n# from itertools import permutations\n\n\ndef modinv(n, p):\n    return pow(n, p - 2, p)\n\ndef ncr(n, r, fact, ifact):    # for using this uncomment the lines calculating fact and ifact\n    t = (fact[n] * (ifact[r] * ifact[n-r]) % mod) % mod\n    return t\n\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef input(): return sys.stdin.readline().strip()\n\n\"\"\"*****************************************************************************************\"\"\"\n\ndef GCD(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef lcm(x, y):\n    return (x * y)//(GCD(x, y))\n\ndef get_xor(n):\n    return [n, 1, n+1, 0][n % 4]\n\ndef get_n(P):    # this function returns the maximum n for which Summation(n) <= Sum\n    ans = (-1 + sqrt(1 + 8*P))//2\n    return ans\n\n\"\"\" ********************************************************************************************* \"\"\"\n\ndef main():\n\n    for _ in range(int(input())):\n        l, r = get_ints()\n        print(min(l, r, (l + r) // 3))\n\n\n\"\"\" -------- Python 2 and 3 footer by Pajenegod and c1729 ---------\"\"\"\n\npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\n\nimport os, sys\nfrom io import IOBase, BytesIO\n\nBUFSIZE = 8192\n\nclass FastIO(BytesIO):\n    newlines = 0\n\n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n\n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0, 2), super(FastIO, self).write(s))[0])\n        return s\n\n    def read(self):\n        while self._fill(): pass\n        return super(FastIO, self).read()\n\n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill();\n            self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n\n\nclass IOWrapper(IOBase):\n\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s: self.buffer.write(s.encode('ascii'))\n            self.read = lambda: self.buffer.read().decode('ascii')\n            self.readline = lambda: self.buffer.readline().decode('ascii')\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\nif __name__ == '__main__':\n    main()\n    # threading.Thread(target=main).start()\n\t  \t \t\t\t \t\t\t   \t\t\t\t \t \t\t\t \t\t\t",
        "correct": true,
        "task_id": "0172",
        "depth": 1
    },
    {
        "description": "You are given three sequences: a_1, a_2, \u2026, a_n; b_1, b_2, \u2026, b_n; c_1, c_2, \u2026, c_n.\n\nFor each i, a_i \u2260 b_i, a_i \u2260 c_i, b_i \u2260 c_i.\n\nFind a sequence p_1, p_2, \u2026, p_n, that satisfy the following conditions:\n\n  * p_i \u2208 \\\\{a_i, b_i, c_i\\}\n  * p_i \u2260 p_{(i mod n) + 1}.\n\n\n\nIn other words, for each element, you need to choose one of the three possible values, such that no two adjacent elements (where we consider elements i,i+1 adjacent for i<n and also elements 1 and n) will have equal value.\n\nIt can be proved that in the given constraints solution always exists. You don't need to minimize/maximize anything, you need to find any proper sequence.\n\nInput\n\nThe first line of input contains one integer t (1 \u2264 t \u2264 100): the number of test cases.\n\nThe first line of each test case contains one integer n (3 \u2264 n \u2264 100): the number of elements in the given sequences.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 100).\n\nThe third line contains n integers b_1, b_2, \u2026, b_n (1 \u2264 b_i \u2264 100).\n\nThe fourth line contains n integers c_1, c_2, \u2026, c_n (1 \u2264 c_i \u2264 100).\n\nIt is guaranteed that a_i \u2260 b_i, a_i \u2260 c_i, b_i \u2260 c_i for all i.\n\nOutput\n\nFor each test case, print n integers: p_1, p_2, \u2026, p_n (p_i \u2208 \\\\{a_i, b_i, c_i\\}, p_i \u2260 p_{i mod n + 1}).\n\nIf there are several solutions, you can print any.\n\nExample\n\nInput\n\n\n5\n3\n1 1 1\n2 2 2\n3 3 3\n4\n1 2 1 2\n2 1 2 1\n3 4 3 4\n7\n1 3 3 1 1 1 1\n2 4 4 3 2 2 4\n4 2 2 2 4 4 2\n3\n1 2 1\n2 3 3\n3 1 2\n10\n1 1 1 2 2 2 3 3 3 1\n2 2 2 3 3 3 1 1 1 2\n3 3 3 1 1 1 2 2 2 3\n\n\nOutput\n\n\n1 2 3\n1 2 1 2\n1 3 4 3 2 4 2\n1 3 2\n1 2 3 1 2 3 1 2 3 2\n\nNote\n\nIn the first test case p = [1, 2, 3].\n\nIt is a correct answer, because:\n\n  * p_1 = 1 = a_1, p_2 = 2 = b_2, p_3 = 3 = c_3 \n  * p_1 \u2260 p_2 , p_2 \u2260 p_3 , p_3 \u2260 p_1 \n\n\n\nAll possible correct answers to this test case are: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].\n\nIn the second test case p = [1, 2, 1, 2].\n\nIn this sequence p_1 = a_1, p_2 = a_2, p_3 = a_3, p_4 = a_4. Also we can see, that no two adjacent elements of the sequence are equal.\n\nIn the third test case p = [1, 3, 4, 3, 2, 4, 2].\n\nIn this sequence p_1 = a_1, p_2 = a_2, p_3 = b_3, p_4 = b_4, p_5 = b_5, p_6 = c_6, p_7 = c_7. Also we can see, that no two adjacent elements of the sequence are equal.",
        "task_name": "1408_A. Circle Coloring",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"\n// Author : snape_here - Susanta Mukherjee\n     \n \"\"\"\n \nfrom __future__ import division, print_function\n \nimport os,sys\nfrom io import BytesIO, IOBase\n \nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n \ndef ii(): return int(input())\ndef fi(): return float(input())\ndef si(): return input()\ndef msi(): return map(str,input().split())\ndef mi(): return map(int,input().split())\ndef li(): return list(mi())\n \n \ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n \ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef lcm(x, y):\n    return (x*y)//(gcd(x,y))\n\nmod=1000000007\n\ndef modInverse(b,m): \n    g = gcd(b, m)  \n    if (g != 1):         \n        return -1\n    else:          \n        return pow(b, m - 2, m) \n\ndef ceil(x,y):\n    if x%y==0:\n        return x//y\n    else:\n        return x//y+1\n\ndef modu(a,b,m): \n\n    a = a % m \n    inv = modInverse(b,m) \n    if(inv == -1): \n        return -999999999\n    else: \n        return (inv*a)%m\n\nfrom math import log,sqrt,factorial,cos,tan,sin,radians,floor\nimport bisect\n\nfrom decimal import *\n\ngetcontext().prec = 8\n\nabc=\"abcdefghijklmnopqrstuvwxyz\"\n\npi=3.141592653589793238\n\n\ndef main():\n\n    for _ in range(ii()):\n        n=ii()\n        a=li()\n        b=li()\n        c=li()\n        l=[]\n        l.extend(a)\n        for i in range(1,n):\n            if l[i]==l[i-1]:\n                l[i]=b[i]\n        if l[0]==l[n-1]:\n            l[n-1]=c[n-1]\n        if l[n-2]==l[n-1]:\n            l[n-1]=b[n-1]\n        print(*l)\n\n\n# region fastio\n \nBUFSIZE = 8192\n \n \nclass FastIO(IOBase):\n    newlines = 0\n \n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n \n \nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n \ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n \n# endregion\n\n \nif __name__ == \"__main__\":\n    #read()\n    main()",
        "correct": true,
        "task_id": "0173",
        "depth": 2
    },
    {
        "description": "To improve the boomerang throwing skills of the animals, Zookeeper has set up an n \u00d7 n grid with some targets, where each row and each column has at most 2 targets each. The rows are numbered from 1 to n from top to bottom, and the columns are numbered from 1 to n from left to right. \n\nFor each column, Zookeeper will throw a boomerang from the bottom of the column (below the grid) upwards. When the boomerang hits any target, it will bounce off, make a 90 degree turn to the right and fly off in a straight line in its new direction. The boomerang can hit multiple targets and does not stop until it leaves the grid.\n\n<image>\n\nIn the above example, n=6 and the black crosses are the targets. The boomerang in column 1 (blue arrows) bounces 2 times while the boomerang in column 3 (red arrows) bounces 3 times.\n\nThe boomerang in column i hits exactly a_i targets before flying out of the grid. It is known that a_i \u2264 3.\n\nHowever, Zookeeper has lost the original positions of the targets. Thus, he asks you to construct a valid configuration of targets that matches the number of hits for each column, or tell him that no such configuration exists. If multiple valid configurations exist, you may print any of them.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5).\n\nThe next line contains n integers a_1,a_2,\u2026,a_n (0 \u2264 a_i \u2264 3).\n\nOutput\n\nIf no configuration of targets exist, print -1.\n\nOtherwise, on the first line print a single integer t (0 \u2264 t \u2264 2n): the number of targets in your configuration. \n\nThen print t lines with two spaced integers each per line. Each line should contain two integers r and c (1 \u2264 r,c \u2264 n), where r is the target's row and c is the target's column. All targets should be different. \n\nEvery row and every column in your configuration should have at most two targets each.\n\nExamples\n\nInput\n\n\n6\n2 0 3 0 1 1\n\n\nOutput\n\n\n5\n2 1\n2 5\n3 3\n3 6\n5 6\n\n\nInput\n\n\n1\n0\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n6\n3 2 2 2 1 1\n\n\nOutput\n\n\n-1\n\nNote\n\nFor the first test, the answer configuration is the same as in the picture from the statement.\n\nFor the second test, the boomerang is not supposed to hit anything, so we can place 0 targets.\n\nFor the third test, the following configuration of targets matches the number of hits, but is not allowed as row 3 has 4 targets.\n\n<image>\n\nIt can be shown for this test case that no valid configuration of targets will result in the given number of target hits.",
        "task_name": "1428_D. Bouncing Boomerangs",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nfrom collections import deque, defaultdict, Counter\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nout = []\n\nn, a = int(input()), rints()\nmem, cols, rows = defaultdict(deque), n, n\n\nmem2 = [0] * (n + 1)\nfor i in range(n - 1, -1, -1):\n    if a[i] == 1:\n        out.append('%d %d' % (rows, i + 1))\n        if rows < 1:\n            print(-1)\n            exit()\n\n        rows -= 1\n        mem[1].append([rows + 1, i + 1])\n\n    elif a[i] == 2:\n        if mem[1]:\n            out.append('%d %d' % (mem[1][0][0], i + 1))\n        else:\n            print(-1)\n            exit()\n\n        mem[1].popleft()\n        mem[2].append(i + 1)\n\n\n    elif a[i] == 3:\n        if mem[3]:\n            out.append('%d %d' % (rows, i + 1))\n            out.append('%d %d' % (rows, mem[3][0]))\n\n            if rows < 1:\n                print(-1)\n                exit()\n\n            rows -= 1\n            mem[3].popleft()\n\n        elif mem[2]:\n            out.append('%d %d' % (rows, i + 1))\n            out.append('%d %d' % (rows, mem[2][0]))\n\n            if rows < 1:\n                print(-1)\n                exit()\n\n            rows -= 1\n            mem[2].popleft()\n\n        elif mem[1]:\n            out.append('%d %d' % (rows, i + 1))\n            out.append('%d %d' % (rows, mem[1][0][1]))\n\n            if rows < 1:\n                print(-1)\n                exit()\n\n            rows -= 1\n            mem[1].popleft()\n        else:\n            print(-1)\n            exit()\n        mem[3].append(i + 1)\n\nprint('%d\\n%s' % (len(out), '\\n'.join(out)))\n",
        "correct": true,
        "task_id": "0174",
        "depth": 1
    },
    {
        "description": "Utkarsh is forced to play yet another one of Ashish's games. The game progresses turn by turn and as usual, Ashish moves first.\n\nConsider the 2D plane. There is a token which is initially at (0,0). In one move a player must increase either the x coordinate or the y coordinate of the token by exactly k. In doing so, the player must ensure that the token stays within a (Euclidean) distance d from (0,0).\n\nIn other words, if after a move the coordinates of the token are (p,q), then p^2 + q^2 \u2264 d^2 must hold.\n\nThe game ends when a player is unable to make a move. It can be shown that the game will end in a finite number of moves. If both players play optimally, determine who will win.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe only line of each test case contains two space separated integers d (1 \u2264 d \u2264 10^5) and k (1 \u2264 k \u2264 d).\n\nOutput\n\nFor each test case, if Ashish wins the game, print \"Ashish\", otherwise print \"Utkarsh\" (without the quotes).\n\nExample\n\nInput\n\n\n5\n2 1\n5 2\n10 3\n25 4\n15441 33\n\n\nOutput\n\n\nUtkarsh\nAshish\nUtkarsh\nUtkarsh\nAshish\n\nNote\n\nIn the first test case, one possible sequence of moves can be\n\n(0, 0) \\xrightarrow{Ashish } (0, 1) \\xrightarrow{Utkarsh } (0, 2).\n\nAshish has no moves left, so Utkarsh wins.\n\n<image>",
        "task_name": "1451_D. Circle Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division,print_function\nfrom heapq import*\nimport sys\nfrom math import*\n\nle = sys.__stdin__.read().split(\"\\n\")[::-1]\naf = []\nfor i in range(int(le.pop())):\n    d,k=list(map(int,le.pop().split()))\n    a=floor(d/(k*2**0.5))\n    #print(a,d,k)\n    if (a*k)**2+(k*(a+1))**2>d**2:\n        af.append('Utkarsh')\n    else:\n        while (a*k)**2+(k*(a+2))**2>d**2 and a>0:\n            a-=1\n        if ((a+1)*k)**2+(k*(a+2))**2>d**2:\n            #print(\"couc\")\n            af.append('Utkarsh')\n        else:\n            af.append(\"Ashish\")\nprint(\"\\n\".join(map(str,af)))\n",
        "correct": false,
        "task_id": "0175",
        "depth": 2
    },
    {
        "description": "Polycarp often uses his smartphone. He has already installed n applications on it. Application with number i takes up a_i units of memory.\n\nPolycarp wants to free at least m units of memory (by removing some applications).\n\nOf course, some applications are more important to Polycarp than others. He came up with the following scoring system \u2014 he assigned an integer b_i to each application: \n\n  * b_i = 1 \u2014 regular application; \n  * b_i = 2 \u2014 important application. \n\n\n\nAccording to this rating system, his phone has b_1 + b_2 + \u2026 + b_n convenience points.\n\nPolycarp believes that if he removes applications with numbers i_1, i_2, \u2026, i_k, then he will free a_{i_1} + a_{i_2} + \u2026 + a_{i_k} units of memory and lose b_{i_1} + b_{i_2} + \u2026 + b_{i_k} convenience points.\n\nFor example, if n=5, m=7, a=[5, 3, 2, 1, 4], b=[2, 1, 1, 2, 1], then Polycarp can uninstall the following application sets (not all options are listed below): \n\n  * applications with numbers 1, 4 and 5. In this case, it will free a_1+a_4+a_5=10 units of memory and lose b_1+b_4+b_5=5 convenience points; \n  * applications with numbers 1 and 3. In this case, it will free a_1+a_3=7 units of memory and lose b_1+b_3=3 convenience points. \n  * applications with numbers 2 and 5. In this case, it will free a_2+a_5=7 memory units and lose b_2+b_5=2 convenience points. \n\n\n\nHelp Polycarp, choose a set of applications, such that if removing them will free at least m units of memory and lose the minimum number of convenience points, or indicate that such a set does not exist.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 m \u2264 10^9) \u2014 the number of applications on Polycarp's phone and the number of memory units to be freed.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9) \u2014 the number of memory units used by applications.\n\nThe third line of each test case contains n integers b_1, b_2, \u2026, b_n (1 \u2264 b_i \u2264 2) \u2014 the convenience points of each application.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output on a separate line: \n\n  * -1, if there is no set of applications, removing which will free at least m units of memory; \n  * the minimum number of convenience points that Polycarp will lose if such a set exists. \n\nExample\n\nInput\n\n\n5\n5 7\n5 3 2 1 4\n2 1 1 2 1\n1 3\n2\n1\n5 10\n2 3 2 3 2\n1 2 1 2 1\n4 10\n5 1 3 4\n1 2 1 2\n4 5\n3 2 1 2\n2 1 2 1\n\n\nOutput\n\n\n2\n-1\n6\n4\n3\n\nNote\n\nIn the first test case, it is optimal to remove applications with numbers 2 and 5, freeing 7 units of memory. b_2+b_5=2.\n\nIn the second test case, by removing the only application, Polycarp will be able to clear only 2 of memory units out of the 3 needed.\n\nIn the third test case, it is optimal to remove applications with numbers 1, 2, 3 and 4, freeing 10 units of memory. b_1+b_2+b_3+b_4=6.\n\nIn the fourth test case, it is optimal to remove applications with numbers 1, 3 and 4, freeing 12 units of memory. b_1+b_3+b_4=4.\n\nIn the fifth test case, it is optimal to remove applications with numbers 1 and 2, freeing 5 units of memory. b_1+b_2=3.",
        "task_name": "1475_D. Cleaning the Phone",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, gettrace\n\nif gettrace():\n    def inputi():\n        return input()\nelse:\n    def input():\n        return next(stdin)[:-1]\n\n\n    def inputi():\n        return stdin.buffer.readline()\n\n\ndef solve():\n    n, m = map(int, input().split())\n    aa = [int(a) for a in input().split()]\n    bb = [int(a) for a in input().split()]\n    if sum(aa) < m:\n        print(-1)\n        return\n    lp = [0, 0] + [aa[i] for i in range(n) if bb[i] == 1]\n    hp = [0] + [aa[i] for i in range(n) if bb[i] == 2]\n    lp.sort()\n    hp.sort()\n    rm = m\n    res = 0\n    while rm > 0:\n        if lp[-1] >= rm:\n            res += 1\n            break\n        if hp[-1] > lp[-1] + lp[-2]:\n            res += 2\n            rm -= hp.pop()\n        else:\n            res += 1\n            rm -= lp.pop()\n    print(res)\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\n\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": true,
        "task_id": "0176",
        "depth": 1
    },
    {
        "description": "Sherlock Holmes and Dr. Watson played some game on a checkered board n \u00d7 n in size. During the game they put numbers on the board's squares by some tricky rules we don't know. However, the game is now over and each square of the board contains exactly one number. To understand who has won, they need to count the number of winning squares. To determine if the particular square is winning you should do the following. Calculate the sum of all numbers on the squares that share this column (including the given square) and separately calculate the sum of all numbers on the squares that share this row (including the given square). A square is considered winning if the sum of the column numbers is strictly greater than the sum of the row numbers.\n\n<image>\n\nFor instance, lets game was ended like is shown in the picture. Then the purple cell is winning, because the sum of its column numbers equals 8 + 3 + 6 + 7 = 24, sum of its row numbers equals 9 + 5 + 3 + 2 = 19, and 24 > 19.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 30). Each of the following n lines contain n space-separated integers. The j-th number on the i-th line represents the number on the square that belongs to the j-th column and the i-th row on the board. All number on the board are integers from 1 to 100.\n\nOutput\n\nPrint the single number \u2014 the number of the winning squares.\n\nExamples\n\nInput\n\n1\n1\n\n\nOutput\n\n0\n\n\nInput\n\n2\n1 2\n3 4\n\n\nOutput\n\n2\n\n\nInput\n\n4\n5 7 8 4\n9 5 3 2\n1 6 6 4\n9 5 7 3\n\n\nOutput\n\n6\n\nNote\n\nIn the first example two upper squares are winning.\n\nIn the third example three left squares in the both middle rows are winning:\n    \n    \n    5 7 8 4  \n    9 5 3 2  \n    1 6 6 4  \n    9 5 7 3  \n    ",
        "task_name": "157_A. Game Outcome",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(input())\nT = [[0 for loop in range(n)]for i in range(n)]\nfor loop in range(n):\n    T[loop]= list(map(int,raw_input().split(\" \")))\n\nlig = [0 for loop in range(n)]\nfor i in range(n):\n    for j in range(n):\n        lig[i]+= T[i][j]\n\ncol = [0 for loop in range(n)]\nfor i in range(n):\n    for j in range(n):\n        col[i] += T[j][i]\ncompt = 0\nfor i in range(n):\n    for j in range(n):\n        if col[i]>lig[j]:\n            compt += 1\nprint(compt)",
        "correct": true,
        "task_id": "0178",
        "depth": 2
    },
    {
        "description": "The Smart Beaver from ABBYY began to develop a new educational game for children. The rules of the game are fairly simple and are described below.\n\nThe playing field is a sequence of n non-negative integers ai numbered from 1 to n. The goal of the game is to make numbers a1, a2, ..., ak (i.e. some prefix of the sequence) equal to zero for some fixed k (k < n), and this should be done in the smallest possible number of moves.\n\nOne move is choosing an integer i (1 \u2264 i \u2264 n) such that ai > 0 and an integer t (t \u2265 0) such that i + 2t \u2264 n. After the values of i and t have been selected, the value of ai is decreased by 1, and the value of ai + 2t is increased by 1. For example, let n = 4 and a = (1, 0, 1, 2), then it is possible to make move i = 3, t = 0 and get a = (1, 0, 0, 3) or to make move i = 1, t = 1 and get a = (0, 0, 2, 2) (the only possible other move is i = 1, t = 0).\n\nYou are given n and the initial sequence ai. The task is to calculate the minimum number of moves needed to make the first k elements of the original sequence equal to zero for each possible k (1 \u2264 k < n).\n\nInput\n\nThe first input line contains a single integer n. The second line contains n integers ai (0 \u2264 ai \u2264 104), separated by single spaces.\n\nThe input limitations for getting 20 points are: \n\n  * 1 \u2264 n \u2264 300\n\n\n\nThe input limitations for getting 50 points are: \n\n  * 1 \u2264 n \u2264 2000\n\n\n\nThe input limitations for getting 100 points are: \n\n  * 1 \u2264 n \u2264 105\n\nOutput\n\nPrint exactly n - 1 lines: the k-th output line must contain the minimum number of moves needed to make the first k elements of the original sequence ai equal to zero.\n\nPlease do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams, or the %I64d specifier.\n\nExamples\n\nInput\n\n4\n1 0 1 2\n\n\nOutput\n\n1\n1\n3\n\n\nInput\n\n8\n1 2 3 4 5 6 7 8\n\n\nOutput\n\n1\n3\n6\n10\n16\n24\n40",
        "task_name": "178_A1. Educational Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nfrom sys import stdin , stdout\n\ndef getInput() :\n    sys.stdin.readline()\n    return [ int( x ) for x in sys.stdin.readline().split() ]\n\ndef setOutput( ns ) :\n    for el in ns :\n        sys.stdout.write( str( el ) + '\\n')\n\ndef jumps( maxim , minim ) :\n    jump = 1 ;\n    while ( jump < minim ) :\n        jump *= 2\n    if ( jump > maxim ) :\n        jump /= 2\n    res = 1\n    while ( minim > jump ) :\n        maxim -= jump\n        minim -= jump\n        while ( jump > maxim ) :\n            jump /= 2\n        res += 1\n    return res\n\n\ndef solve( inp ) :\n    res = []\n    total = 0\n    for k in range( 1 , len( inp ) ) :\n        total = 0\n        for i in range( k ) :\n            total += inp[ i ] * jumps( ( len( inp ) - i - 1 ) , ( k - i ) )\n        res.append( total )\n    return res\n\n\n\ndef main():\n    setOutput( solve( getInput() ) )\n\nif __name__ == '__main__':\n    main()\n",
        "correct": true,
        "task_id": "0179",
        "depth": 2
    },
    {
        "description": "Bob came to a cash & carry store, put n items into his trolley, and went to the checkout counter to pay. Each item is described by its price ci and time ti in seconds that a checkout assistant spends on this item. While the checkout assistant is occupied with some item, Bob can steal some other items from his trolley. To steal one item Bob needs exactly 1 second. What is the minimum amount of money that Bob will have to pay to the checkout assistant? Remember, please, that it is Bob, who determines the order of items for the checkout assistant.\n\nInput\n\nThe first input line contains number n (1 \u2264 n \u2264 2000). In each of the following n lines each item is described by a pair of numbers ti, ci (0 \u2264 ti \u2264 2000, 1 \u2264 ci \u2264 109). If ti is 0, Bob won't be able to steal anything, while the checkout assistant is occupied with item i.\n\nOutput\n\nOutput one number \u2014 answer to the problem: what is the minimum amount of money that Bob will have to pay.\n\nExamples\n\nInput\n\n4\n2 10\n0 20\n1 5\n1 3\n\n\nOutput\n\n8\n\n\nInput\n\n3\n0 1\n0 10\n0 100\n\n\nOutput\n\n111",
        "task_name": "19_B. Checkout Assistant",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=int(input())\nv=[]\nt=[]\np=0\nz=0\nfor j in range (0,n):\n    a, b = map(int, raw_input().split())\n    t.append (a)\n    p=p+b\n    v.append(b)\n    z=z+a\n    \n\n    \ndef minpay(p,z,i):\n    if i<0:\n        return p\n    else:\n        if z>=1:\n            return min(minpay(p+v[i],z+t[i],i-1), minpay(p,z-1,i-1))\n        else:\n            return minpay(p+v[i],z+t[i],i-1)\n    \nprint (minpay(0,0,n-1))        \n        \n\n        \n    \n    \n",
        "correct": false,
        "task_id": "0180",
        "depth": 1
    },
    {
        "description": "One foggy Stockholm morning, Karlsson decided to snack on some jam in his friend Lillebror Svantenson's house. Fortunately for Karlsson, there wasn't anybody in his friend's house. Karlsson was not going to be hungry any longer, so he decided to get some food in the house.\n\nKarlsson's gaze immediately fell on n wooden cupboards, standing in the kitchen. He immediately realized that these cupboards have hidden jam stocks. Karlsson began to fly greedily around the kitchen, opening and closing the cupboards' doors, grab and empty all the jars of jam that he could find.\n\nAnd now all jars of jam are empty, Karlsson has had enough and does not want to leave traces of his stay, so as not to let down his friend. Each of the cupboards has two doors: the left one and the right one. Karlsson remembers that when he rushed to the kitchen, all the cupboards' left doors were in the same position (open or closed), similarly, all the cupboards' right doors were in the same position (open or closed). Karlsson wants the doors to meet this condition as well by the time the family returns. Karlsson does not remember the position of all the left doors, also, he cannot remember the position of all the right doors. Therefore, it does not matter to him in what position will be all left or right doors. It is important to leave all the left doors in the same position, and all the right doors in the same position. For example, all the left doors may be closed, and all the right ones may be open.\n\nKarlsson needs one second to open or close a door of a cupboard. He understands that he has very little time before the family returns, so he wants to know the minimum number of seconds t, in which he is able to bring all the cupboard doors in the required position.\n\nYour task is to write a program that will determine the required number of seconds t.\n\nInput\n\nThe first input line contains a single integer n \u2014 the number of cupboards in the kitchen (2 \u2264 n \u2264 104). Then follow n lines, each containing two integers li and ri (0 \u2264 li, ri \u2264 1). Number li equals one, if the left door of the i-th cupboard is opened, otherwise number li equals zero. Similarly, number ri equals one, if the right door of the i-th cupboard is opened, otherwise number ri equals zero.\n\nThe numbers in the lines are separated by single spaces.\n\nOutput\n\nIn the only output line print a single integer t \u2014 the minimum number of seconds Karlsson needs to change the doors of all cupboards to the position he needs.\n\nExamples\n\nInput\n\n5\n0 1\n1 0\n0 1\n1 1\n0 1\n\n\nOutput\n\n3",
        "task_name": "248_A. Cupboards",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def main():\n    n = int(raw_input())\n    l = []\n    r = []\n    for i in range(n):\n        li,ri = map(int, raw_input().split())\n        l.append(li)\n        r.append(ri)\n    res = min(n - sum(l),sum(l)) + min(n - sum(r),sum(r))\n    print(res)\n\nmain()",
        "correct": true,
        "task_id": "0181",
        "depth": 1
    },
    {
        "description": "Dima got into number sequences. Now he's got sequence a1, a2, ..., an, consisting of n positive integers. Also, Dima has got a function f(x), which can be defined with the following recurrence:\n\n  * f(0) = 0; \n  * f(2\u00b7x) = f(x); \n  * f(2\u00b7x + 1) = f(x) + 1. \n\n\n\nDima wonders, how many pairs of indexes (i, j) (1 \u2264 i < j \u2264 n) are there, such that f(ai) = f(aj). Help him, count the number of such pairs. \n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 105). The second line contains n positive integers a1, a2, ..., an (1 \u2264 ai \u2264 109).\n\nThe numbers in the lines are separated by single spaces.\n\nOutput\n\nIn a single line print the answer to the problem.\n\nPlease, don't use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nExamples\n\nInput\n\n3\n1 2 4\n\n\nOutput\n\n3\n\n\nInput\n\n3\n5 3 1\n\n\nOutput\n\n1\n\nNote\n\nIn the first sample any pair (i, j) will do, so the answer is 3.\n\nIn the second sample only pair (1, 2) will do.",
        "task_name": "272_B. Dima and Sequence",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math\n\ndef listfullzero(n):\n    list = [0] * n\n    return list\nn = int(input())\nq = raw_input().split(' ');\ni = 0;\nres = 0\nlist = listfullzero(35)\nwhile i < n:\n    a = int(q[i])\n    tmp = 0\n    while a > 0:\n        if a % 2:\n            a = (a - 1) / 2\n            tmp += 1\n        else:\n            a = a / 2\n    list[tmp] += 1\n    i += 1\ni = 0\nwhile i < 35:\n    res += list[i] * (list[i] - 1) / 2\n    i += 1\nprint(res)",
        "correct": true,
        "task_id": "0182",
        "depth": 2
    },
    {
        "description": "Mad scientist Mike has just finished constructing a new device to search for extraterrestrial intelligence! He was in such a hurry to launch it for the first time that he plugged in the power wires without giving it a proper glance and started experimenting right away. After a while Mike observed that the wires ended up entangled and now have to be untangled again.\n\nThe device is powered by two wires \"plus\" and \"minus\". The wires run along the floor from the wall (on the left) to the device (on the right). Both the wall and the device have two contacts in them on the same level, into which the wires are plugged in some order. The wires are considered entangled if there are one or more places where one wire runs above the other one. For example, the picture below has four such places (top view):\n\n<image>\n\nMike knows the sequence in which the wires run above each other. Mike also noticed that on the left side, the \"plus\" wire is always plugged into the top contact (as seen on the picture). He would like to untangle the wires without unplugging them and without moving the device. Determine if it is possible to do that. A wire can be freely moved and stretched on the floor, but cannot be cut.\n\nTo understand the problem better please read the notes to the test samples.\n\nInput\n\nThe single line of the input contains a sequence of characters \"+\" and \"-\" of length n (1 \u2264 n \u2264 100000). The i-th (1 \u2264 i \u2264 n) position of the sequence contains the character \"+\", if on the i-th step from the wall the \"plus\" wire runs above the \"minus\" wire, and the character \"-\" otherwise.\n\nOutput\n\nPrint either \"Yes\" (without the quotes) if the wires can be untangled or \"No\" (without the quotes) if the wires cannot be untangled.\n\nExamples\n\nInput\n\n-++-\n\n\nOutput\n\nYes\n\n\nInput\n\n+-\n\n\nOutput\n\nNo\n\n\nInput\n\n++\n\n\nOutput\n\nYes\n\n\nInput\n\n-\n\n\nOutput\n\nNo\n\nNote\n\nThe first testcase corresponds to the picture in the statement. To untangle the wires, one can first move the \"plus\" wire lower, thus eliminating the two crosses in the middle, and then draw it under the \"minus\" wire, eliminating also the remaining two crosses.\n\nIn the second testcase the \"plus\" wire makes one full revolution around the \"minus\" wire. Thus the wires cannot be untangled: \n\n<image>\n\nIn the third testcase the \"plus\" wire simply runs above the \"minus\" wire twice in sequence. The wires can be untangled by lifting \"plus\" and moving it higher: \n\n<image>\n\nIn the fourth testcase the \"minus\" wire runs above the \"plus\" wire once. The wires cannot be untangled without moving the device itself: \n\n<image>",
        "task_name": "343_B. Alternating Current",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Enter your code here. Read input from STDIN. Print output to STDOUT# ===============================================================================================\n# importing some useful libraries.\nfrom __future__ import division, print_function\nfrom fractions import Fraction\nimport sys\nimport os\nfrom io import BytesIO, IOBase\nfrom itertools import *\nimport bisect\nfrom heapq import *\nfrom math import ceil, floor\nfrom copy import *\nfrom collections import deque, defaultdict\nfrom collections import Counter as counter  # Counter(list)  return a dict with {key: count}\nfrom itertools import combinations  # if a = [1,2,3] then print(list(comb(a,2))) -----> [(1, 2), (1, 3), (2, 3)]\nfrom itertools import permutations as permutate\nfrom bisect import bisect_left as bl\nfrom operator import *\n# If the element is already present in the list,\n\n# the left most position where element has to be inserted is returned.\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n\n# If the element is already present in the list,\n# the right most position where element has to be inserted is returned\n\n# ==============================================================================================\n# fast I/O region\n\nBUFSIZE = 8192\nfrom sys import stderr\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"A\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for A in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(A))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n# inp = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# ===============================================================================================\n### START ITERATE RECURSION ###\nfrom types import GeneratorType\n\n\ndef iterative(f, stack=[]):\n    def wrapped_func(*args, **kwargs):\n        if stack: return f(*args, **kwargs)\n        to = f(*args, **kwargs)\n        while True:\n            if type(to) is GeneratorType:\n                stack.append(to)\n                to = next(to)\n                continue\n            stack.pop()\n            if not stack: break\n            to = stack[-1].send(to)\n        return to\n\n    return wrapped_func\n\n\n#### END ITERATE RECURSION ####\n###########################\n# Sorted list\nclass SortedList:\n    def __init__(self, iterable=[], _load=200):\n        \"\"\"Initialize sorted list instance.\"\"\"\n        values = sorted(iterable)\n        self._len = _len = len(values)\n        self._load = _load\n        self._lists = _lists = [values[start:start + _load] for start in range(0, _len, _load)]\n        self._list_lens = [len(_list) for _list in _lists]\n        self._mins = [_list[0] for _list in _lists]\n        self._fen_tree = []\n        self._rebuild = True\n\n    def _fen_build(self):\n        \"\"\"Build a fenwick tree instance.\"\"\"\n        self._fen_tree[:] = self._list_lens\n        _fen_tree = self._fen_tree\n        for start in range(len(_fen_tree)):\n            if start | start + 1 < len(_fen_tree):\n                _fen_tree[start | start + 1] += _fen_tree[start]\n        self._rebuild = False\n\n    def _fen_update(self, index, value):\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\n        if not self._rebuild:\n            _fen_tree = self._fen_tree\n            while index < len(_fen_tree):\n                _fen_tree[index] += value\n                index |= index + 1\n\n    def _fen_query(self, end):\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        A = 0\n        while end:\n            A += _fen_tree[end - 1]\n            end &= end - 1\n        return A\n\n    def _fen_findkth(self, k):\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\n        _list_lens = self._list_lens\n        if k < _list_lens[0]:\n            return 0, k\n        if k >= self._len - _list_lens[-1]:\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        idx = -1\n        for d in reversed(range(len(_fen_tree).bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\n                idx = right_idx\n                k -= _fen_tree[idx]\n        return idx + 1, k\n\n    def _delete(self, pos, idx):\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len -= 1\n        self._fen_update(pos, -1)\n        del _lists[pos][idx]\n        _list_lens[pos] -= 1\n\n        if _list_lens[pos]:\n            _mins[pos] = _lists[pos][0]\n        else:\n            del _lists[pos]\n            del _list_lens[pos]\n            del _mins[pos]\n            self._rebuild = True\n\n    def _loc_left(self, value):\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        lo, pos = -1, len(_lists) - 1\n        while lo + 1 < pos:\n            mi = (lo + pos) >> 1\n            if value <= _mins[mi]:\n                pos = mi\n            else:\n                lo = mi\n\n        if pos and value <= _lists[pos - 1][-1]:\n            pos -= 1\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value <= _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def _loc_right(self, value):\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        pos, hi = 0, len(_lists)\n        while pos + 1 < hi:\n            mi = (pos + hi) >> 1\n            if value < _mins[mi]:\n                hi = mi\n            else:\n                pos = mi\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value < _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def add(self, value):\n        \"\"\"Add `value` to sorted list.\"\"\"\n        _load = self._load\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len += 1\n        if _lists:\n            pos, idx = self._loc_right(value)\n            self._fen_update(pos, 1)\n            _list = _lists[pos]\n            _list.insert(idx, value)\n            _list_lens[pos] += 1\n            _mins[pos] = _list[0]\n            if _load + _load < len(_list):\n                _lists.insert(pos + 1, _list[_load:])\n                _list_lens.insert(pos + 1, len(_list) - _load)\n                _mins.insert(pos + 1, _list[_load])\n                _list_lens[pos] = _load\n                del _list[_load:]\n                self._rebuild = True\n        else:\n            _lists.append([value])\n            _mins.append(value)\n            _list_lens.append(1)\n            self._rebuild = True\n\n    def discard(self, value):\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_right(value)\n            if idx and _lists[pos][idx - 1] == value:\n                self._delete(pos, idx - 1)\n\n    def remove(self, value):\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\n        _len = self._len\n        self.discard(value)\n        if _len == self._len:\n            raise ValueError('{0!r} not in list'.format(value))\n\n    def pop(self, index=-1):\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        value = self._lists[pos][idx]\n        self._delete(pos, idx)\n        return value\n\n    def bisect_left(self, value):\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_left(value)\n        return self._fen_query(pos) + idx\n\n    def bisect_right(self, value):\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_right(value)\n        return self._fen_query(pos) + idx\n\n    def count(self, value):\n        \"\"\"Return number of occurrences of `value` in the sorted list.\"\"\"\n        return self.bisect_right(value) - self.bisect_left(value)\n\n    def __len__(self):\n        \"\"\"Return the size of the sorted list.\"\"\"\n        return self._len\n\n    def __getitem__(self, index):\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        return self._lists[pos][idx]\n\n    def __delitem__(self, index):\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        self._delete(pos, idx)\n\n    def __contains__(self, value):\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_left(value)\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\n        return False\n\n    def __iter__(self):\n        \"\"\"Return an iterator over the sorted list.\"\"\"\n        return (value for _list in self._lists for value in _list)\n\n    def __reversed__(self):\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\n\n    def __repr__(self):\n        \"\"\"Return string representation of sorted list.\"\"\"\n        return 'SortedList({0})'.format(list(self))\n\n\n# ===============================================================================================\n# some shortcuts\n\nmod = 1000000007\n\n\ndef testcase(t):\n    for p in range(t):\n        solve()\n\n\ndef pow(A, B, p):\n    res = 1  # Initialize result\n    A = A % p  # Update A if it is more , than or equal to p\n    if (A == 0):\n        return 0\n    while (B > 0):\n        if ((B & 1) == 1):  # If B is odd, multiply, A with result\n            res = (res * A) % p\n\n        B = B >> 1  # B = B/2\n        A = (A * A) % p\n    return res\n\n\nfrom functools import reduce\n\n\ndef factors(n):\n    return set(reduce(list.__add__,\n                      ([start, n // start] for start in range(1, int(n ** 0.5) + 1) if n % start == 0)))\n\n\ndef gcd(a, b):\n    if a == b: return a\n    while b > 0: a, b = b, a % b\n    return a\n\n\n# discrete binary search\n# minimise:\n# def search():\n#     l = 0\n#     r = 10 ** 15\n#\n#     for start in range(200):\n#         if isvalid(l):\n#             return l\n#         if l == r:\n#             return l\n#         m = (l + r) // 2\n#         if isvalid(m) and not isvalid(m - 1):\n#             return m\n#         if isvalid(m):\n#             r = m + 1\n#         else:\n#             l = m\n#     return m\n\n# maximise:\n# def search():\n#     l = 0\n#     r = 10 ** 15\n#\n#     for start in range(200):\n#         # print(l,r)\n#         if isvalid(r):\n#             return r\n#         if l == r:\n#             return l\n#         m = (l + r) // 2\n#         if isvalid(m) and not isvalid(m + 1):\n#             return m\n#         if isvalid(m):\n#             l = m\n#         else:\n#             r = m - 1\n#     return m\n\n\n##############Find sum of product of subsets of size k in a array\n# ar=[0,1,2,3]\n# k=3\n# n=len(ar)-1\n# dp=[0]*(n+1)\n# dp[0]=1\n# for pos in range(1,n+1):\n#     dp[pos]=0\n#     l=max(1,k+pos-n-1)\n#     for j in range(min(pos,k),l-1,-1):\n#         dp[j]=dp[j]+ar[pos]*dp[j-1]\n# print(dp[k])\n\ndef prefix_sum(ar):  # [1,2,3,4]->[1,3,6,10]\n    return list(accumulate(ar))\n\n\ndef suffix_sum(ar):  # [1,2,3,4]->[10,9,7,4]\n    return list(accumulate(ar[::-1]))[::-1]\n\n\ndef N():\n    return int(inp())\n\n\ndx = [0, 0, 1, -1]\ndy = [1, -1, 0, 0]\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\n# =========================================================================================\nfrom collections import defaultdict\n\n\ndef numberOfSetBits(start):\n    start = start - ((start >> 1) & 0x55555555)\n    start = (start & 0x33333333) + ((start >> 2) & 0x33333333)\n    return (((start + (start >> 4) & 0xF0F0F0F) * 0x1010101) & 0xffffffff) >> 24\n\n\nclass MergeFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n        # self.lista = [[_] for _ in range(n)]\n\n    def find(self, a):\n        to_update = []\n        while a != self.parent[a]:\n            to_update.append(a)\n            a = self.parent[a]\n        for b in to_update:\n            self.parent[b] = a\n        return self.parent[a]\n\n    def merge(self, a, b):\n        a = self.find(a)\n        b = self.find(b)\n        if a == b:\n            return\n        if self.size[a] < self.size[b]:\n            a, b = b, a\n        self.num_sets -= 1\n        self.parent[b] = a\n        self.size[a] += self.size[b]\n        # self.lista[a] += self.lista[b]\n        # self.lista[b] = []\n\n    def set_size(self, a):\n        return self.size[self.find(a)]\n\n    def __len__(self):\n        return self.num_sets\n\n\ndef lcm(a, b):\n    return abs((a // gcd(a, b)) * b)\n\n\n# #\n# to find factorial and ncr\n# tot = 100005\n# mod = 10**9 + 7\n# fac = [1, 1]\n# finv = [1, 1]\n# inv = [0, 1]\n#\n# for start in range(2, tot + 1):\n#     fac.append((fac[-1] * start) % mod)\n#     inv.append(mod - (inv[mod % start] * (mod // start) % mod))\n#     finv.append(finv[-1] * inv[-1] % mod)\n\n\ndef comb(n, r):\n    if n < r:\n        return 0\n    else:\n        return fac[n] * (finv[r] * finv[n - r] % mod) % mod\n\n\ndef inp(): return sys.stdin.readline().rstrip(\"\\r\\n\")  # for fast input\n\n\ndef out(var): sys.stdout.write(str(var))  # for fast output, always take string\n\n\ndef lis(): return list(map(int, inp().split()))\n\n\ndef stringlis(): return list(map(str, inp().split()))\n\n\ndef sep(): return map(int, inp().split())\n\n\ndef strsep(): return map(str, inp().split())\n\n\ndef fsep(): return map(float, inp().split())\n\n\ndef nextline(): out(\"\\n\")  # as stdout.write always print sring.\n\n\ndef arr1d(n, v):\n    return [v] * n\n\n\ndef arr2d(n, m, v):\n    return [[v] * m for _ in range(n)]\n\n\ndef arr3d(n, m, p, v):\n    return [[[v] * p for _ in range(m)] for start in range(n)]\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\n# co-ordinate compression\n# ma={s:idx for idx,s in enumerate(sorted(set(l+r)))}\n\n# mxn=100005\n# lrg=[0]*mxn\n# for start in range(2,mxn-3):\n#     if (lrg[start]==0):\n#         for j in range(start,mxn-3,start):\n#             lrg[j]=start\n\n\ndef solve():\n    s=inp()\n    ar=[s[0]]\n    n=len(s)\n    for i in range(1,n):\n        if(ar and ar[-1]==s[i]):ar.pop()\n        else:ar.append(s[i])\n    if(len(ar)==0):\n        Yes()\n    else:\n        No()\n\n\n\n\nsolve()\n#testcase(N())",
        "correct": true,
        "task_id": "0184",
        "depth": 1
    },
    {
        "description": "Dima and Inna love spending time together. The problem is, Seryozha isn't too enthusiastic to leave his room for some reason. But Dima and Inna love each other so much that they decided to get criminal...\n\nDima constructed a trap graph. He shouted: \"Hey Seryozha, have a look at my cool graph!\" to get his roommate interested and kicked him into the first node.\n\nA trap graph is an undirected graph consisting of n nodes and m edges. For edge number k, Dima denoted a range of integers from lk to rk (lk \u2264 rk). In order to get out of the trap graph, Seryozha initially (before starting his movements) should pick some integer (let's call it x), then Seryozha must go some way from the starting node with number 1 to the final node with number n. At that, Seryozha can go along edge k only if lk \u2264 x \u2264 rk.\n\nSeryozha is a mathematician. He defined the loyalty of some path from the 1-st node to the n-th one as the number of integers x, such that if he initially chooses one of them, he passes the whole path. Help Seryozha find the path of maximum loyalty and return to his room as quickly as possible!\n\nInput\n\nThe first line of the input contains two integers n and m (2 \u2264 n \u2264 103, 0 \u2264 m \u2264 3\u00b7103). Then follow m lines describing the edges. Each line contains four integers ak, bk, lk and rk (1 \u2264 ak, bk \u2264 n, 1 \u2264 lk \u2264 rk \u2264 106). The numbers mean that in the trap graph the k-th edge connects nodes ak and bk, this edge corresponds to the range of integers from lk to rk.\n\nNote that the given graph can have loops and multiple edges.\n\nOutput\n\nIn a single line of the output print an integer \u2014 the maximum loyalty among all paths from the first node to the n-th one. If such paths do not exist or the maximum loyalty equals 0, print in a single line \"Nice work, Dima!\" without the quotes.\n\nExamples\n\nInput\n\n4 4\n1 2 1 10\n2 4 3 5\n1 3 1 5\n2 4 2 7\n\n\nOutput\n\n6\n\n\nInput\n\n5 6\n1 2 1 10\n2 5 11 20\n1 4 2 5\n1 3 10 11\n3 4 12 10000\n4 5 6 6\n\n\nOutput\n\nNice work, Dima!\n\nNote\n\nExplanation of the first example.\n\nOverall, we have 2 ways to get from node 1 to node 4: first you must go along the edge 1-2 with range [1-10], then along one of the two edges 2-4. \n\nOne of them contains range [3-5], that is, we can pass through with numbers 3, 4, 5. So the loyalty of such path is 3.\n\nIf we go along edge 2-4 with range [2-7], then we can pass through with numbers 2, 3, 4, 5, 6, 7. The loyalty is 6. That is the answer.\n\nThe edge 1-2 have no influence on the answer because its range includes both ranges of the following edges.",
        "task_name": "366_D. Dima and Trap Graph",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n\nfrom Queue import Queue\ndef bfs(l, r):\n    mark = [False] * n\n    cola = Queue()\n    cola.put(0)\n    mark[0] = True\n    while not cola.empty():\n        u = cola.get()\n        if u == n - 1:\n            return True\n        for v, e in graph[u]:\n            if not mark[v] and edges[e][0] <= l <= r <= edges[e][1]:\n                mark[v] = True\n                cola.put(v)\n    return False\n\n\nn, m = map(int, raw_input().split())\ngraph = [[] for _ in range(n)]\nedges = []\nevents = []\n\nfor i in range(m):\n    ak, bk, lk, rk = map(int, raw_input().split())\n    edges.append((lk, rk))\n    graph[ak - 1].append((bk - 1, i))\n    graph[bk - 1].append((ak - 1, i))\n    events.append(lk)\n    events.append(rk)\n\n\nl = 0\nr = 0\nresp = 0\nwhile r < len(events):\n    if r < l:\n        r = l\n    while r < len(events) and bfs(events[l], events[r]):\n        resp = max(resp, events[r] - events[l] + 1)\n        r += 1\n    l += 1\n\n\nif resp > 0:\n    print(resp)\nelse:\n    print('Nice work, Dima!')\n",
        "correct": false,
        "task_id": "0185",
        "depth": 2
    },
    {
        "description": "The blinds are known to consist of opaque horizontal stripes that can be rotated thus regulating the amount of light flowing in the room. There are n blind stripes with the width of 1 in the factory warehouse for blind production. The problem is that all of them are spare details from different orders, that is, they may not have the same length (it is even possible for them to have different lengths)\n\nEvery stripe can be cut into two or more parts. The cuttings are made perpendicularly to the side along which the length is measured. Thus the cuttings do not change the width of a stripe but each of the resulting pieces has a lesser length (the sum of which is equal to the length of the initial stripe)\n\nAfter all the cuttings the blinds are constructed through consecutive joining of several parts, similar in length, along sides, along which length is measured. Also, apart from the resulting pieces an initial stripe can be used as a blind if it hasn't been cut. It is forbidden to construct blinds in any other way.\n\nThus, if the blinds consist of k pieces each d in length, then they are of form of a rectangle of k \u00d7 d bourlemeters. \n\nYour task is to find for what window possessing the largest possible area the blinds can be made from the given stripes if on technical grounds it is forbidden to use pieces shorter than l bourlemeter. The window is of form of a rectangle with side lengths as positive integers.\n\nInput\n\nThe first output line contains two space-separated integers n and l (1 \u2264 n, l \u2264 100). They are the number of stripes in the warehouse and the minimal acceptable length of a blind stripe in bourlemeters. The second line contains space-separated n integers ai. They are the lengths of initial stripes in bourlemeters (1 \u2264 ai \u2264 100).\n\nOutput\n\nPrint the single number \u2014 the maximal area of the window in square bourlemeters that can be completely covered. If no window with a positive area that can be covered completely without breaking any of the given rules exist, then print the single number 0.\n\nExamples\n\nInput\n\n4 2\n1 2 3 4\n\n\nOutput\n\n8\n\n\nInput\n\n5 3\n5 5 7 3 1\n\n\nOutput\n\n15\n\n\nInput\n\n2 3\n1 2\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample test the required window is 2 \u00d7 4 in size and the blinds for it consist of 4 parts, each 2 bourlemeters long. One of the parts is the initial stripe with the length of 2, the other one is a part of a cut stripe with the length of 3 and the two remaining stripes are parts of a stripe with the length of 4 cut in halves.",
        "task_name": "38_C. Blinds",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nimport math\n\nnl = raw_input().split(\" \")\nn = nl[0]\nl = nl[1]\n\na = raw_input().split(\" \")\n\nd = []\nj = 0\nwhile 1==1:\n    co = 0\n    for i in range(len(a)):\n        co += int(int(a[i])/(int(l) + j))\n        \n    d.append(co)\n    j += 1\n    if co == 0:\n        break\n\nd.sort()\no = d[len(d) - 1] * int(l)\nprint(str(o))",
        "correct": false,
        "task_id": "0186",
        "depth": 2
    },
    {
        "description": "You have two friends. You want to present each of them several positive integers. You want to present cnt1 numbers to the first friend and cnt2 numbers to the second friend. Moreover, you want all presented numbers to be distinct, that also means that no number should be presented to both friends.\n\nIn addition, the first friend does not like the numbers that are divisible without remainder by prime number x. The second one does not like the numbers that are divisible without remainder by prime number y. Of course, you're not going to present your friends numbers they don't like.\n\nYour task is to find such minimum number v, that you can form presents using numbers from a set 1, 2, ..., v. Of course you may choose not to present some numbers at all.\n\nA positive integer number greater than 1 is called prime if it has no positive divisors other than 1 and itself.\n\nInput\n\nThe only line contains four positive integers cnt1, cnt2, x, y (1 \u2264 cnt1, cnt2 < 109; cnt1 + cnt2 \u2264 109; 2 \u2264 x < y \u2264 3\u00b7104) \u2014 the numbers that are described in the statement. It is guaranteed that numbers x, y are prime.\n\nOutput\n\nPrint a single integer \u2014 the answer to the problem.\n\nExamples\n\nInput\n\n3 1 2 3\n\n\nOutput\n\n5\n\n\nInput\n\n1 3 2 3\n\n\nOutput\n\n4\n\nNote\n\nIn the first sample you give the set of numbers {1, 3, 5} to the first friend and the set of numbers {2} to the second friend. Note that if you give set {1, 3, 5} to the first friend, then we cannot give any of the numbers 1, 3, 5 to the second friend. \n\nIn the second sample you give the set of numbers {3} to the first friend, and the set of numbers {1, 2, 4} to the second friend. Thus, the answer to the problem is 4.",
        "task_name": "483_B. Friends and Presents",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"Template for Python Competitive Programmers prepared by Mayank Chaudhary \"\"\"\n\n#to use the print and division function of Python3\nfrom __future__ import division, print_function\n\n\"\"\"value of mod\"\"\"\nMOD = 998244353\nmod = 10**9 + 7\n\n\"\"\"use resource\"\"\"\n# import resource\n# resource.setrlimit(resource.RLIMIT_STACK, [0x100000000, resource.RLIM_INFINITY])\n\n\"\"\"for factorial\"\"\"\n\n# def prepare_factorial():\n#     fact = [1]\n#     for i in range(1, 1000005):\n#         fact.append((fact[-1] * i) % mod)\n#     ifact = [0] * 1000005\n#     ifact[1000004] = pow(fact[1000004], mod - 2, mod)\n#     for i in range(1000004, 0, -1):\n#         ifact[i - 1] = (i * ifact[i]) % mod\n#\n#     return fact, ifact\n\n\"\"\"uncomment next 4 lines while doing recursion based question\"\"\"\n# import threading\n# threading.stack_size(2**27)\nimport sys\n# sys.setrecursionlimit(30000)\n\n\n\"\"\"uncomment modules according to your need\"\"\"\n# from bisect import bisect_left, bisect_right, insort\n# import itertools\n# from math import floor, ceil, sqrt, degrees, atan, pi\n# from heapq import heappop, heapify, heappush\n# from random import randint as rn\n# from Queue import Queue as Q\nfrom collections import Counter, defaultdict, deque\n\n'''\ndef modinv(n, p):\n    return pow(n, p - 2, p)\n'''\n\n\n# def ncr(n, r,  fact, ifact):  # for using this uncomment the lines calculating fact and ifact\n#     t = (fact[n] * (ifact[r]*ifact[n-r]) % mod)% mod\n#     return t\n\n\n\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef input(): return sys.stdin.readline().strip()\n\n\n# def GCD(x, y):\n#     while (y):\n#         x, y = y, x % y\n#     return x\n#\n# def lcm(x, y):\n#     return (x*y)//(GCD(x, y))\n#\n# def get_xor(n):\n#     return [n,1,n+1,0][n%4]\n\n\"\"\"*******************************************************\"\"\"\n\ndef main():\n\n    def check(N):\n\n        extra =  N - (N//x + N//y)\n        if extra-(max(cnt1 - N//y, 0) + max(cnt2 - N//x, 0)) >=0:\n            return True\n        else:\n            return False\n\n    cnt1, cnt2, x, y = get_ints()\n\n    left, right = cnt1 + cnt2 , 10**12\n    ans = left\n    while left <= right:\n        mid = left + ((right-left)>>1)\n        if check(mid):\n            ans = mid\n            right = mid-1\n        else:\n            left = mid + 1\n\n    print(ans)\n\n\n\"\"\" -------- Python 2 and 3 footer by Pajenegod and c1729 ---------\"\"\"\n\npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n    range = xrange\n\nimport os, sys\nfrom io import IOBase, BytesIO\n\nBUFSIZE = 8192\n\n\nclass FastIO(BytesIO):\n    newlines = 0\n\n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n\n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0, 2), super(FastIO, self).write(s))[0])\n        return s\n\n    def read(self):\n        while self._fill(): pass\n        return super(FastIO, self).read()\n\n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill();\n            self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s: self.buffer.write(s.encode('ascii'))\n            self.read = lambda: self.buffer.read().decode('ascii')\n            self.readline = lambda: self.buffer.readline().decode('ascii')\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n\"\"\" main function\"\"\"\n\nif __name__ == '__main__':\n    main()\n    # threading.Thread(target=main).start()",
        "correct": false,
        "task_id": "0188",
        "depth": 1
    },
    {
        "description": "Andrewid the Android is a galaxy-famous detective. He is now investigating the case of vandalism at the exhibition of contemporary art.\n\nThe main exhibit is a construction of n matryoshka dolls that can be nested one into another. The matryoshka dolls are numbered from 1 to n. A matryoshka with a smaller number can be nested in a matryoshka with a higher number, two matryoshkas can not be directly nested in the same doll, but there may be chain nestings, for example, 1 \u2192 2 \u2192 4 \u2192 5. \n\nIn one second, you can perform one of the two following operations:\n\n  * Having a matryoshka a that isn't nested in any other matryoshka and a matryoshka b, such that b doesn't contain any other matryoshka and is not nested in any other matryoshka, you may put a in b; \n  * Having a matryoshka a directly contained in matryoshka b, such that b is not nested in any other matryoshka, you may get a out of b. \n\n\n\nAccording to the modern aesthetic norms the matryoshka dolls on display were assembled in a specific configuration, i.e. as several separate chains of nested matryoshkas, but the criminal, following the mysterious plan, took out all the dolls and assembled them into a single large chain (1 \u2192 2 \u2192 ... \u2192 n). In order to continue the investigation Andrewid needs to know in what minimum time it is possible to perform this action.\n\nInput\n\nThe first line contains integers n (1 \u2264 n \u2264 105) and k (1 \u2264 k \u2264 105) \u2014 the number of matryoshkas and matryoshka chains in the initial configuration.\n\nThe next k lines contain the descriptions of the chains: the i-th line first contains number mi (1 \u2264 mi \u2264 n), and then mi numbers ai1, ai2, ..., aimi \u2014 the numbers of matryoshkas in the chain (matryoshka ai1 is nested into matryoshka ai2, that is nested into matryoshka ai3, and so on till the matryoshka aimi that isn't nested into any other matryoshka).\n\nIt is guaranteed that m1 + m2 + ... + mk = n, the numbers of matryoshkas in all the chains are distinct, in each chain the numbers of matryoshkas follow in the ascending order.\n\nOutput\n\nIn the single line print the minimum number of seconds needed to assemble one large chain from the initial configuration.\n\nExamples\n\nInput\n\n3 2\n2 1 2\n1 3\n\n\nOutput\n\n1\n\n\nInput\n\n7 3\n3 1 3 7\n2 2 5\n2 4 6\n\n\nOutput\n\n10\n\nNote\n\nIn the first sample test there are two chains: 1 \u2192 2 and 3. In one second you can nest the first chain into the second one and get 1 \u2192 2 \u2192 3.\n\nIn the second sample test you need to disassemble all the three chains into individual matryoshkas in 2 + 1 + 1 = 4 seconds and then assemble one big chain in 6 seconds.",
        "task_name": "556_C. Case of Matryoshkas",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "'''\nn, k = [int(s) for s in raw_input().split()]\nif k == 1:\n    print(0)\nelse:\n    first = [int(s) for s in raw_input().split()]\n    i = 2\n    while (i < len(first)):\n        if first[i] == first[i-1] + 1:\n            i += 1\n        else:\n            break\n    ans = len(first) - i\n    for j in xrange(k-1):\n        inp = [s for s in raw_input().split()]\n        ans += int(inp[0]) - 1\n    ans += n - 1\n    ans -= i - 2\n    print (ans)\n'''\nn, k = [int(s) for s in raw_input().split()]\nans = 0\nif k == 1:\n    print(0)\nelse:\n    for j in xrange(k):\n        inp = [s for s in raw_input().split()]\n        if int(inp[1]) == 1:\n            i = 2\n            while (i < int(inp[0]) + 1):\n                if int(inp[i]) == int(inp[i-1]) + 1:\n                    i += 1\n                else:\n                    break\n            ans += int(inp[0]) - i + 1\n        else:\n            ans += int(inp[0]) - 1\n    ans += n - 1\n    ans -= i - 2\n    print (ans)\n\n",
        "correct": true,
        "task_id": "0190",
        "depth": 2
    },
    {
        "description": "The GCD table G of size n \u00d7 n for an array of positive integers a of length n is defined by formula \n\n<image>\n\nLet us remind you that the greatest common divisor (GCD) of two positive integers x and y is the greatest integer that is divisor of both x and y, it is denoted as <image>. For example, for array a = {4, 3, 6, 2} of length 4 the GCD table will look as follows:\n\n<image>\n\nGiven all the numbers of the GCD table G, restore array a.\n\nInput\n\nThe first line contains number n (1 \u2264 n \u2264 500) \u2014 the length of array a. The second line contains n2 space-separated numbers \u2014 the elements of the GCD table of G for array a. \n\nAll the numbers in the table are positive integers, not exceeding 109. Note that the elements are given in an arbitrary order. It is guaranteed that the set of the input data corresponds to some array a.\n\nOutput\n\nIn the single line print n positive integers \u2014 the elements of array a. If there are multiple possible solutions, you are allowed to print any of them.\n\nExamples\n\nInput\n\n4\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\n\n\nOutput\n\n4 3 6 2\n\nInput\n\n1\n42\n\n\nOutput\n\n42 \n\nInput\n\n2\n1 1 1 1\n\n\nOutput\n\n1 1 ",
        "task_name": "582_A. GCD Table",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def gcd(x, y):\n    while y > 0:\n        x, y = y, x % y\n    return x\n\n\nn = int(raw_input())\nseq = [int(x) for x in raw_input().split()]\n\n\nseq.sort(reverse=True)\n\nelems = [seq[0]]\ngcds = {}\nfor elem in seq:\n    gcds[elem] = 0\n\ni = 1\nj = 1\nwhile i < n:\n    if gcds[seq[j]] != 0:\n        gcds[seq[j]] -= 1\n        j += 2\n    else:\n        l = len(elems)\n        for k in xrange(l):\n            gcds[gcd(elems[k], seq[j])] += 1\n\n        elems.append(seq[j])\n        j += 1\n        i += 1\n\n\n\nprint(' '.join([str(x) for x in elems]))\n\n\n\n",
        "correct": true,
        "task_id": "0191",
        "depth": 2
    },
    {
        "description": "Kevin Sun has just finished competing in Codeforces Round #334! The round was 120 minutes long and featured five problems with maximum point values of 500, 1000, 1500, 2000, and 2500, respectively. Despite the challenging tasks, Kevin was uncowed and bulldozed through all of them, distinguishing himself from the herd as the best cowmputer scientist in all of Bovinia. Kevin knows his submission time for each problem, the number of wrong submissions that he made on each problem, and his total numbers of successful and unsuccessful hacks. Because Codeforces scoring is complicated, Kevin wants you to write a program to compute his final score.\n\nCodeforces scores are computed as follows: If the maximum point value of a problem is x, and Kevin submitted correctly at minute m but made w wrong submissions, then his score on that problem is <image>. His total score is equal to the sum of his scores for each problem. In addition, Kevin's total score gets increased by 100 points for each successful hack, but gets decreased by 50 points for each unsuccessful hack.\n\nAll arithmetic operations are performed with absolute precision and no rounding. It is guaranteed that Kevin's final score is an integer.\n\nInput\n\nThe first line of the input contains five space-separated integers m1, m2, m3, m4, m5, where mi (0 \u2264 mi \u2264 119) is the time of Kevin's last submission for problem i. His last submission is always correct and gets accepted.\n\nThe second line contains five space-separated integers w1, w2, w3, w4, w5, where wi (0 \u2264 wi \u2264 10) is Kevin's number of wrong submissions on problem i.\n\nThe last line contains two space-separated integers hs and hu (0 \u2264 hs, hu \u2264 20), denoting the Kevin's numbers of successful and unsuccessful hacks, respectively.\n\nOutput\n\nPrint a single integer, the value of Kevin's final score.\n\nExamples\n\nInput\n\n20 40 60 80 100\n0 1 2 3 4\n1 0\n\n\nOutput\n\n4900\n\n\nInput\n\n119 119 119 119 119\n0 0 0 0 0\n10 0\n\n\nOutput\n\n4930\n\nNote\n\nIn the second sample, Kevin takes 119 minutes on all of the problems. Therefore, he gets <image> of the points on each problem. So his score from solving problems is <image>. Adding in 10\u00b7100 = 1000 points from hacks, his total score becomes 3930 + 1000 = 4930.",
        "task_name": "604_A. Uncowed Forces",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "m = raw_input().split(\" \")\nw = raw_input().split(\" \")\nh = raw_input().split(\" \")\n\nans = 0\n\nfor i in range(5):\n  x = 500*(i+1)\n  m1 = int(m[i])\n  w1 = int(w[i])\n  pts = max(0.3*x, (1 - (m1/250))*x - 50*w1)\n  ans = ans + pts\n\nans = ans + 100*int(h[0])\nans = ans - 50*int(h[1])\n\nprint(ans)\n\n",
        "correct": false,
        "task_id": "0192",
        "depth": 1
    },
    {
        "description": "Andrew and Jerry are playing a game with Harry as the scorekeeper. The game consists of three rounds. In each round, Andrew and Jerry draw randomly without replacement from a jar containing n balls, each labeled with a distinct positive integer. Without looking, they hand their balls to Harry, who awards the point to the player with the larger number and returns the balls to the jar. The winner of the game is the one who wins at least two of the three rounds.\n\nAndrew wins rounds 1 and 2 while Jerry wins round 3, so Andrew wins the game. However, Jerry is unhappy with this system, claiming that he will often lose the match despite having the higher overall total. What is the probability that the sum of the three balls Jerry drew is strictly higher than the sum of the three balls Andrew drew?\n\nInput\n\nThe first line of input contains a single integer n (2 \u2264 n \u2264 2000) \u2014 the number of balls in the jar.\n\nThe second line contains n integers ai (1 \u2264 ai \u2264 5000) \u2014 the number written on the ith ball. It is guaranteed that no two balls have the same number.\n\nOutput\n\nPrint a single real value \u2014 the probability that Jerry has a higher total, given that Andrew wins the first two rounds and Jerry wins the third. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6. \n\nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if <image>.\n\nExamples\n\nInput\n\n2\n1 2\n\n\nOutput\n\n0.0000000000\n\n\nInput\n\n3\n1 2 10\n\n\nOutput\n\n0.0740740741\n\nNote\n\nIn the first case, there are only two balls. In the first two rounds, Andrew must have drawn the 2 and Jerry must have drawn the 1, and vice versa in the final round. Thus, Andrew's sum is 5 and Jerry's sum is 4, so Jerry never has a higher total.\n\nIn the second case, each game could've had three outcomes \u2014 10 - 2, 10 - 1, or 2 - 1. Jerry has a higher total if and only if Andrew won 2 - 1 in both of the first two rounds, and Jerry drew the 10 in the last round. This has probability <image>.",
        "task_name": "626_D. Jerry's Protest",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\na = map(int, raw_input().split())\n\nd = [0] * 5000\nfor i in xrange(n):\n    for j in xrange(i+1, n):\n        d[a[j]-a[i]] += 1\n\nc = [0] * 5000\nfor i in xrange(1, 5000):\n    c[i] = c[i-1] + d[i]\n\nans, m = 0.0, float(sum(d))\nfor i in xrange(4999, 0, -1):\n    if d[i] == 0:\n        continue\n    for j in xrange(i):\n        ans += (d[i] / m) * (d[j] / m) * (c[i-j-1] / m)\n\nprint(\"{0:.10f}\".format(ans))\n",
        "correct": false,
        "task_id": "0193",
        "depth": 2
    },
    {
        "description": "Vasya's telephone contains n photos. Photo number 1 is currently opened on the phone. It is allowed to move left and right to the adjacent photo by swiping finger over the screen. If you swipe left from the first photo, you reach photo n. Similarly, by swiping right from the last photo you reach photo 1. It takes a seconds to swipe from photo to adjacent.\n\nFor each photo it is known which orientation is intended for it \u2014 horizontal or vertical. Phone is in the vertical orientation and can't be rotated. It takes b second to change orientation of the photo.\n\nVasya has T seconds to watch photos. He want to watch as many photos as possible. If Vasya opens the photo for the first time, he spends 1 second to notice all details in it. If photo is in the wrong orientation, he spends b seconds on rotating it before watching it. If Vasya has already opened the photo, he just skips it (so he doesn't spend any time for watching it or for changing its orientation). It is not allowed to skip unseen photos.\n\nHelp Vasya find the maximum number of photos he is able to watch during T seconds.\n\nInput\n\nThe first line of the input contains 4 integers n, a, b, T (1 \u2264 n \u2264 5\u00b7105, 1 \u2264 a, b \u2264 1000, 1 \u2264 T \u2264 109) \u2014 the number of photos, time to move from a photo to adjacent, time to change orientation of a photo and time Vasya can spend for watching photo.\n\nSecond line of the input contains a string of length n containing symbols 'w' and 'h'. \n\nIf the i-th position of a string contains 'w', then the photo i should be seen in the horizontal orientation.\n\nIf the i-th position of a string contains 'h', then the photo i should be seen in vertical orientation.\n\nOutput\n\nOutput the only integer, the maximum number of photos Vasya is able to watch during those T seconds.\n\nExamples\n\nInput\n\n4 2 3 10\nwwhw\n\n\nOutput\n\n2\n\n\nInput\n\n5 2 4 13\nhhwhh\n\n\nOutput\n\n4\n\n\nInput\n\n5 2 4 1000\nhhwhh\n\n\nOutput\n\n5\n\n\nInput\n\n3 1 100 10\nwhw\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample test you can rotate the first photo (3 seconds), watch the first photo (1 seconds), move left (2 second), rotate fourth photo (3 seconds), watch fourth photo (1 second). The whole process takes exactly 10 seconds.\n\nNote that in the last sample test the time is not enough even to watch the first photo, also you can't skip it.",
        "task_name": "650_B. Image Preview",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, a, b, t = map(int, raw_input().split())\ncosts = [ 1 if ch == 'h' else b + 1 for ch in raw_input().strip() ]\nbest = 0\n\nleft_t = -a\nleft_pos = n\nwhile True:\n  left_pos -= 1\n  if left_pos == -1 or left_t + a + costs[left_pos] > t:\n    left_pos += 1\n    break\n  left_t += a + costs[left_pos]\nright_t = -a\nright_pos = -1\nwhile True:\n  right_pos += 1\n  if right_pos == n or right_t + a + costs[right_pos] > t:\n    break\n  right_t += a + costs[right_pos]\n  left_t += a\n  while left_pos != n and right_t + left_t > t:\n    left_t -= a + costs[left_pos]\n    left_pos += 1\n  best = max(best, 1 + right_pos + n - left_pos)\n\nbest = min(n, best)    \nprint(best)\n",
        "correct": false,
        "task_id": "0194",
        "depth": 2
    },
    {
        "description": "Artsem has a friend Saunders from University of Chicago. Saunders presented him with the following problem.\n\nLet [n] denote the set {1, ..., n}. We will also write f: [x] \u2192 [y] when a function f is defined in integer points 1, ..., x, and all its values are integers from 1 to y.\n\nNow then, you are given a function f: [n] \u2192 [n]. Your task is to find a positive integer m, and two functions g: [n] \u2192 [m], h: [m] \u2192 [n], such that g(h(x)) = x for all <image>, and h(g(x)) = f(x) for all <image>, or determine that finding these is impossible.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 105).\n\nThe second line contains n space-separated integers \u2014 values f(1), ..., f(n) (1 \u2264 f(i) \u2264 n).\n\nOutput\n\nIf there is no answer, print one integer -1.\n\nOtherwise, on the first line print the number m (1 \u2264 m \u2264 106). On the second line print n numbers g(1), ..., g(n). On the third line print m numbers h(1), ..., h(m).\n\nIf there are several correct answers, you may output any of them. It is guaranteed that if a valid answer exists, then there is an answer satisfying the above restrictions.\n\nExamples\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\n3\n1 2 3\n1 2 3\n\n\nInput\n\n3\n2 2 2\n\n\nOutput\n\n1\n1 1 1\n2\n\n\nInput\n\n2\n2 1\n\n\nOutput\n\n-1",
        "task_name": "765_D. Artsem and Saunders",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom bisect import *\n\nn, a = int(input()), [int(x) for x in stdin.readline().split()]\ndis = sorted(set(a))\nfor i in dis:\n    if a[i - 1] != i:\n        print(-1)\n        exit()\n\ntem = []\nfor i in range(n):\n    tem.append(bisect_left(dis, a[i]) + 1)\n\nprint('%d\\n%s\\n%s' % (max(tem), ' '.join(map(str, tem)), ' '.join(map(str, dis))))\n",
        "correct": true,
        "task_id": "0195",
        "depth": 1
    },
    {
        "description": "Anastasia loves going for a walk in Central Uzhlyandian Park. But she became uninterested in simple walking, so she began to collect Uzhlyandian pebbles. At first, she decided to collect all the pebbles she could find in the park.\n\nShe has only two pockets. She can put at most k pebbles in each pocket at the same time. There are n different pebble types in the park, and there are wi pebbles of the i-th type. Anastasia is very responsible, so she never mixes pebbles of different types in same pocket. However, she can put different kinds of pebbles in different pockets at the same time. Unfortunately, she can't spend all her time collecting pebbles, so she can collect pebbles from the park only once a day.\n\nHelp her to find the minimum number of days needed to collect all the pebbles of Uzhlyandian Central Park, taking into consideration that Anastasia can't place pebbles of different types in same pocket.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 105, 1 \u2264 k \u2264 109) \u2014 the number of different pebble types and number of pebbles Anastasia can place in one pocket.\n\nThe second line contains n integers w1, w2, ..., wn (1 \u2264 wi \u2264 104) \u2014 number of pebbles of each type. \n\nOutput\n\nThe only line of output contains one integer \u2014 the minimum number of days Anastasia needs to collect all the pebbles.\n\nExamples\n\nInput\n\n3 2\n2 3 4\n\n\nOutput\n\n3\n\n\nInput\n\n5 4\n3 1 8 9 7\n\n\nOutput\n\n5\n\nNote\n\nIn the first sample case, Anastasia can collect all pebbles of the first type on the first day, of second type \u2014 on the second day, and of third type \u2014 on the third day.\n\nOptimal sequence of actions in the second sample case: \n\n  * In the first day Anastasia collects 8 pebbles of the third type. \n  * In the second day she collects 8 pebbles of the fourth type. \n  * In the third day she collects 3 pebbles of the first type and 1 pebble of the fourth type. \n  * In the fourth day she collects 7 pebbles of the fifth type. \n  * In the fifth day she collects 1 pebble of the second type. ",
        "task_name": "789_A. Anastasia and pebbles",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nline_one = sys.stdin.readline().split()\nline_two = sys.stdin.readline().split()\n\ntypes = int(line_one[0])\npocket_limit = int(line_one[1])\n\npebbles = map(int, line_two)\n\ndays = 0\nremaining_pebbles = sum(pebbles)\n\nwhile remaining_pebbles > 0:\n  days += 1\n  pebbles = [pebble for pebble in pebbles if pebble > 0]\n  pebbles.sort()\n  if len(pebbles) > 1:\n    pebbles[0] -= pocket_limit\n    pebbles[1] -= pocket_limit\n  elif len(pebbles) > 0:\n    pebbles[0] -= 2 * pocket_limit\n  remaining_pebbles = sum(pebbles)\n\nprint(days)\n",
        "correct": false,
        "task_id": "0196",
        "depth": 1
    },
    {
        "description": "Programmer Vasya is studying a new programming language &K*. The &K* language resembles the languages of the C family in its syntax. However, it is more powerful, which is why the rules of the actual C-like languages are unapplicable to it. To fully understand the statement, please read the language's description below carefully and follow it and not the similar rules in real programming languages.\n\nThere is a very powerful system of pointers on &K* \u2014 you can add an asterisk to the right of the existing type X \u2014 that will result in new type X * . That is called pointer-definition operation. Also, there is the operation that does the opposite \u2014 to any type of X, which is a pointer, you can add an ampersand \u2014 that will result in a type &X, to which refers X. That is called a dereference operation.\n\nThe &K* language has only two basic data types \u2014 void and errtype. Also, the language has operators typedef and typeof.\n\n  * The operator \"typedef A B\" defines a new data type B, which is equivalent to A. A can have asterisks and ampersands, and B cannot have them. For example, the operator typedef void** ptptvoid will create a new type ptptvoid, that can be used as void**.\n  * The operator \"typeof A\" returns type of A, brought to void, that is, returns the type void**...*, equivalent to it with the necessary number of asterisks (the number can possibly be zero). That is, having defined the ptptvoid type, as shown above, the typeof ptptvoid operator will return void**.\n\n\n\nAn attempt of dereferencing of the void type will lead to an error: to a special data type errtype. For errtype the following equation holds true: errtype* = &errtype = errtype. An attempt to use the data type that hasn't been defined before that will also lead to the errtype.\n\nUsing typedef, we can define one type several times. Of all the definitions only the last one is valid. However, all the types that have been defined earlier using this type do not change.\n\nLet us also note that the dereference operation has the lower priority that the pointer operation, in other words &T *  is always equal to T.\n\nNote, that the operators are executed consecutively one by one. If we have two operators \"typedef &void a\" and \"typedef a* b\", then at first a becomes errtype, and after that b becomes errtype* = errtype, but not &void* = void (see sample 2).\n\nVasya does not yet fully understand this powerful technology, that's why he asked you to help him. Write a program that analyzes these operators. \n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 100) \u2014 the number of operators. Then follow n lines with operators. Each operator is of one of two types: either \"typedef A B\", or \"typeof A\". In the first case the B type differs from void and errtype types, and besides, doesn't have any asterisks and ampersands.\n\nAll the data type names are non-empty lines of no more than 20 lowercase Latin letters. The number of asterisks and ampersands separately in one type in any operator does not exceed 10, however if we bring some types to void with several asterisks, their number may exceed 10.\n\nOutput\n\nFor every typeof operator print on the single line the answer to that operator \u2014 the type that the given operator returned.\n\nExamples\n\nInput\n\n5\ntypedef void* ptv\ntypeof ptv\ntypedef &amp;&amp;ptv node\ntypeof node\ntypeof &amp;ptv\n\n\nOutput\n\nvoid*\nerrtype\nvoid\n\n\nInput\n\n17\ntypedef void* b\ntypedef b* c\ntypeof b\ntypeof c\ntypedef &amp;b b\ntypeof b\ntypeof c\ntypedef &amp;&amp;b* c\ntypeof c\ntypedef &amp;b* c\ntypeof c\ntypedef &amp;void b\ntypeof b\ntypedef b******* c\ntypeof c\ntypedef &amp;&amp;b* c\ntypeof c\n\n\nOutput\n\nvoid*\nvoid**\nvoid\nvoid**\nerrtype\nvoid\nerrtype\nerrtype\nerrtype\n\nNote\n\nLet's look at the second sample.\n\nAfter the first two queries typedef the b type is equivalent to void*, and \u0441 \u2014 to void**.\n\nThe next query typedef redefines b \u2014 it is now equal to &b = &void* = void. At that, the \u0441 type doesn't change.\n\nAfter that the \u0441 type is defined as &&b* = &&void* = &void = errtype. It doesn't influence the b type, that's why the next typedef defines c as &void* = void.\n\nThen the b type is again redefined as &void = errtype. \n\nPlease note that the c type in the next query is defined exactly as errtype******* = errtype, and not &void******* = void******. The same happens in the last typedef.",
        "task_name": "87_B. Vasya and Types",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python2\n\nn = int(raw_input())\ninf = -10000\nM = {\"void\": 0, \"errtype\": inf}\nfor i in xrange(n):\n\tline = raw_input().split()\n\ts1 = line[0]\n\ts2 = line[1]\n\tif len(line) > 2: s3 = line[2]\n\td = s2.count(\"*\") - s2.count(\"&\")\n\ts2 = s2.strip('*&')\n\td += M.get(s2, inf)\n\tif d < 0: d = inf\n\tif s1 == \"typedef\":\n\t\tM[s3] = d\n\telse:\n\t\tif d < 0:\n\t\t\tprint(\"errtype\")\n\t\telse:\n\t\t\tprint(\"void\" + ('*' * d))\n",
        "correct": true,
        "task_id": "0199",
        "depth": 1
    },
    {
        "description": "Let's denote a function \n\n<image>\n\nYou are given an array a consisting of n integers. You have to calculate the sum of d(ai, aj) over all pairs (i, j) such that 1 \u2264 i \u2264 j \u2264 n.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 200000) \u2014 the number of elements in a.\n\nThe second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 109) \u2014 elements of the array. \n\nOutput\n\nPrint one integer \u2014 the sum of d(ai, aj) over all pairs (i, j) such that 1 \u2264 i \u2264 j \u2264 n.\n\nExamples\n\nInput\n\n5\n1 2 3 1 3\n\n\nOutput\n\n4\n\n\nInput\n\n4\n6 6 5 5\n\n\nOutput\n\n0\n\n\nInput\n\n4\n6 6 4 4\n\n\nOutput\n\n-8\n\nNote\n\nIn the first example:\n\n  1. d(a1, a2) = 0; \n  2. d(a1, a3) = 2; \n  3. d(a1, a4) = 0; \n  4. d(a1, a5) = 2; \n  5. d(a2, a3) = 0; \n  6. d(a2, a4) = 0; \n  7. d(a2, a5) = 0; \n  8. d(a3, a4) = - 2; \n  9. d(a3, a5) = 0; \n  10. d(a4, a5) = 2. ",
        "task_name": "903_D. Almost Difference",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\na = list(map(int, raw_input().split()))\nsm = 0\nm = dict()\nans = 0\nfor i in range(n-1, -1, -1):\n    cnt = 0\n    diff = 0\n    if a[i] in m:\n        cnt += m[a[i]]\n        diff += a[i]*m[a[i]]\n    if a[i]+1 in m:\n        cnt += m[a[i]+1]\n        diff += (a[i]+1)*m[a[i]+1]\n    if a[i]-1 in m:\n        cnt += m[a[i]-1]\n        diff += (a[i]-1)*m[a[i]-1]\n    ans += sm-diff-a[i]*(n-i-1-cnt)\n    sm += a[i]\n    if a[i] in m:\n        m[a[i]] += 1\n    else:\n        m[a[i]] = 1\nprint(ans)\n",
        "correct": true,
        "task_id": "0200",
        "depth": 1
    },
    {
        "description": "The nation of Panel holds an annual show called The Number Games, where each district in the nation will be represented by one contestant.\n\nThe nation has n districts numbered from 1 to n, each district has exactly one path connecting it to every other district. The number of fans of a contestant from district i is equal to 2^i.\n\nThis year, the president decided to reduce the costs. He wants to remove k contestants from the games. However, the districts of the removed contestants will be furious and will not allow anyone to cross through their districts. \n\nThe president wants to ensure that all remaining contestants are from districts that can be reached from one another. He also wishes to maximize the total number of fans of the participating contestants.\n\nWhich contestants should the president remove?\n\nInput\n\nThe first line of input contains two integers n and k (1 \u2264 k < n \u2264 10^6) \u2014 the number of districts in Panel, and the number of contestants the president wishes to remove, respectively.\n\nThe next n-1 lines each contains two integers a and b (1 \u2264 a, b \u2264 n, a \u2260 b), that describe a road that connects two different districts a and b in the nation. It is guaranteed that there is exactly one path between every two districts.\n\nOutput\n\nPrint k space-separated integers: the numbers of the districts of which the contestants should be removed, in increasing order of district number.\n\nExamples\n\nInput\n\n6 3\n2 1\n2 6\n4 2\n5 6\n2 3\n\n\nOutput\n\n1 3 4\n\n\nInput\n\n8 4\n2 6\n2 7\n7 8\n1 2\n3 1\n2 4\n7 5\n\n\nOutput\n\n1 3 4 5\n\nNote\n\nIn the first sample, the maximum possible total number of fans is 2^2 + 2^5 + 2^6 = 100. We can achieve it by removing the contestants of the districts 1, 3, and 4.",
        "task_name": "980_E. The Number Games",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n# import time\n\n\ndef calc_result(n, k, edges):\n    # t1 = time.clock()\n\n    storage = [-1] * (4 * n)\n    storage_index = 0\n    lookup = [-1] * (n + 1)\n    for u, v in edges:\n        storage[storage_index] = lookup[u]\n        storage[storage_index + 1] = v\n        lookup[u] = storage_index\n        storage_index += 2\n        storage[storage_index] = lookup[v]\n        storage[storage_index + 1] = u\n        lookup[v] = storage_index\n        storage_index += 2\n\n    # t2 = time.clock()\n\n    nodes = [0] * (2 * (n + 1))\n\n    # t3 = time.clock()\n\n    stack = [n]\n    stack_pop = stack.pop\n    stack_append = stack.append\n    while stack:\n        index = stack_pop()\n        parent_index = nodes[index * 2]\n        t = lookup[index]\n        while t >= 0:\n            v = storage[t + 1]\n            t = storage[t]\n            if v == parent_index:\n                continue\n            nodes[v * 2] = index\n            stack_append(v)\n\n    # t4 = time.clock()\n\n    count = n - k\n    for i in xrange(n, 0, -1):\n        new_nodes = []\n\n        p = i * 2\n        abort = False\n        while True:\n            flag = nodes[p + 1]\n            if flag == -1:\n                abort = True\n                break\n            elif flag == 1:\n                break\n            new_nodes.append(p)\n            index = nodes[p]\n            if index <= 0:\n                break\n            p = index * 2\n        if abort:\n            for p in new_nodes:\n                nodes[p + 1] = -1\n            continue\n\n        c = count - len(new_nodes)\n        if c >= 0:\n            for p in new_nodes:\n                nodes[p + 1] = 1\n            count = c\n            if count == 0:\n                break\n        else:\n            for j in xrange(-c):\n                nodes[new_nodes[j] + 1] = -1\n\n    # t5 = time.clock()\n    #\n    # print('---t5 - t1: %s' % (t5 - t1))\n    # print('---t2 - t1: %s' % (t2 - t1))\n    # print('---t3 - t2: %s' % (t3 - t2))\n    # print('---t4 - t3: %s' % (t4 - t3))\n    # print('---t5 - t4: %s' % (t5 - t4))\n\n    result = [i for i in xrange(1, n + 1) if nodes[i * 2 + 1] != 1]\n\n    print(' '.join(map(str, result)))\n\n\ndef main():\n    sys.setcheckinterval(2147483647)\n\n    n, k = map(int, sys.stdin.readline().split())\n    edges = [map(int, sys.stdin.readline().split()) for _ in xrange(n - 1)]\n\n    # import random\n    # n, k = 1000000, 19\n    # edges = []\n    # rnd = random.Random()\n    # rnd.seed(1)\n    # t = range(1, n + 1)\n    # random.shuffle(t, random=rnd.random)\n    # for i in xrange(2, n + 1):\n    #     j = rnd.randint(1, i - 1)\n    #     edges.append([i, j])\n\n    calc_result(n, k, edges)\n\n\nif __name__ == '__main__':\n    main()\n",
        "correct": true,
        "task_id": "0201",
        "depth": 2
    },
    {
        "description": "Given is a positive integer N. How many tuples (A,B,C) of positive integers satisfy A \\times B + C = N?\n\nConstraints\n\n* 2 \\leq N \\leq 10^6\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\n\n\nOutput\n\nPrint the answer.\n\nExamples\n\nInput\n\n3\n\n\nOutput\n\n3\n\n\nInput\n\n100\n\n\nOutput\n\n473\n\n\nInput\n\n1000000\n\n\nOutput\n\n13969985",
        "task_name": "p02548 AtCoder Beginner Contest 179 - A x B + C",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n // i:\n                upper_divisors.append(n//i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\n\nN = int(input())\n\ncount = 0\nfor i in range(1,N):\n    count += len(make_divisors(N-i))\nprint(count)",
        "correct": false,
        "task_id": "0202",
        "depth": 1
    },
    {
        "description": "We have caught N sardines. The deliciousness and fragrantness of the i-th sardine is A_i and B_i, respectively.\n\nWe will choose one or more of these sardines and put them into a cooler. However, two sardines on bad terms cannot be chosen at the same time.\n\nThe i-th and j-th sardines (i \\neq j) are on bad terms if and only if A_i \\cdot A_j + B_i \\cdot B_j = 0.\n\nIn how many ways can we choose the set of sardines to put into the cooler? Since the count can be enormous, print it modulo 1000000007.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 2 \\times 10^5\n* -10^{18} \\leq A_i, B_i \\leq 10^{18}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 B_1\n:\nA_N B_N\n\n\nOutput\n\nPrint the count modulo 1000000007.\n\nExamples\n\nInput\n\n3\n1 2\n-1 1\n2 -1\n\n\nOutput\n\n5\n\n\nInput\n\n10\n3 2\n3 2\n-1 1\n2 -1\n-3 -9\n-8 12\n7 7\n8 1\n8 2\n8 4\n\n\nOutput\n\n479",
        "task_name": "p02679 AtCoder Beginner Contest 168 - \u2219 (Bullet)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from collections import defaultdict\n\nMOD = (10 ** 9) + 7\n\ndef gcd(a, b):\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\n\nn = int(raw_input())\n\nns = []\nd = defaultdict(int)\n\nfor i in xrange(n):\n    a, b = map(int, raw_input().split())\n    ns.append((a, b))\n    if a and b:\n        s = 1 if a * b >= 0 else -1\n        g = gcd(abs(a), abs(b))\n        m1 = (s * abs(a) / g, abs(b) / g)\n        m2 = (-s * abs(b) / g, abs(a) / g)\n    elif a == 0 and b == 0:\n        continue\n    elif a == 0:\n        m1 = (1, 0)\n        m2 = (0, 1)\n    elif b == 0:\n        m1 = (0, 1)\n        m2 = (1, 0)\n\n    d[m1] += 1\n    d[m2] += 0\n\npre = 1\nfor k in d.keys():\n    if k[0] < 0:\n        assert (k[1], -k[0]) in d\n        continue\n    elif k[0] == 0:\n        pre = pre * d[k] % MOD\n    else:\n        k1 = k\n        k2 = (-k[1], k[0])\n\n        tot = pow(2, d[k1], MOD) + pow(2, d[k2], MOD) - 1\n        pre = pre * tot % MOD\nprint (pre - 1 + MOD) % MOD\n",
        "correct": false,
        "task_id": "0203",
        "depth": 1
    },
    {
        "description": "There are N people numbered 1 to N. Each person wears a red hat or a blue hat.\n\nYou are given a string s representing the colors of the people. Person i wears a red hat if s_i is `R`, and a blue hat if s_i is `B`.\n\nDetermine if there are more people wearing a red hat than people wearing a blue hat.\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* |s| = N\n* s_i is `R` or `B`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\ns\n\n\nOutput\n\nIf there are more people wearing a red hat than there are people wearing a blue hat, print `Yes`; otherwise, print `No`.\n\nExamples\n\nInput\n\n4\nRRBR\n\n\nOutput\n\nYes\n\n\nInput\n\n4\nBRBR\n\n\nOutput\n\nNo",
        "task_name": "p03080 ExaWizards 2019 - Red or Blue",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s = raw_input()\nl = raw_input()\n\nb=0\nr=0\n\nfor idx in range (0, (int)(s)-1):\n\tif (l[idx] == 'R'):\n\t\tr = r+1\n\telse: \n\t\tb = b+1\n\nif (r>b):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")",
        "correct": false,
        "task_id": "0204",
        "depth": 1
    },
    {
        "description": "You are given a positive integer N. Find the number of the pairs of integers u and v (0\u2266u,v\u2266N) such that there exist two non-negative integers a and b satisfying a xor b=u and a+b=v. Here, xor denotes the bitwise exclusive OR. Since it can be extremely large, compute the answer modulo 10^9+7.\n\nConstraints\n\n* 1\u2266N\u226610^{18}\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\n\n\nOutput\n\nPrint the number of the possible pairs of integers u and v, modulo 10^9+7.\n\nExamples\n\nInput\n\n3\n\n\nOutput\n\n5\n\n\nInput\n\n1422\n\n\nOutput\n\n52277\n\n\nInput\n\n1000000000000000000\n\n\nOutput\n\n787014179",
        "task_name": "p03849 AtCoder Regular Contest 066 - Xor Sum",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#N = int(raw_input())\nN = 1422\nbitlen = len(bin(N))-2\nMOD = 10**9 + 7\ndp = [[0 for i in range(N+1)] for j in range(bitlen + 1)]\ndp[bitlen][0] = 1\nfor i in range(bitlen, 0, -1):\n\tfor j in range(N+1):\n\t\tif dp[i][j] > 0:\n\t\t\ttest = 1 << (i-1)\n\t\t\tdp[i-1][j] += dp[i][j]\n\t\t\tif j+test <= N:\n\t\t\t\tdp[i-1][j+test] += dp[i][j]\n\t\t\t\tif j+2*test <= N:\n\t\t\t\t\tdp[i-1][j+2*test] += dp[i][j]\nprint(sum(dp[0]) % MOD)\n",
        "correct": false,
        "task_id": "0207",
        "depth": 2
    },
    {
        "description": "There is data on sales of your company. Your task is to write a program which identifies good workers.\n\nThe program should read a list of data where each item includes the employee ID i, the amount of sales q and the corresponding unit price p. Then, the program should print IDs of employees whose total sales proceeds (i.e. sum of p \u00d7 q) is greater than or equal to 1,000,000 in the order of inputting. If there is no such employees, the program should print \"NA\". You can suppose that n < 4000, and each employee has an unique ID. The unit price p is less than or equal to 1,000,000 and the amount of sales q is less than or equal to 100,000.\n\n\n\nInput\n\nThe input consists of several datasets. The input ends with a line including a single 0. Each dataset consists of:\n\n\nn (the number of data in the list)\ni p q\ni p q\n:\n:\ni p q\n\n\nOutput\n\nFor each dataset, print a list of employee IDs or a text \"NA\"\n\nExample\n\nInput\n\n4\n1001 2000 520\n1002 1800 450\n1003 1600 625\n1001 200 1220\n2\n1001 100 3\n1005 1000 100\n2\n2013 5000 100\n2013 5000 100\n0\n\n\nOutput\n\n1001\n1003\nNA\n2013",
        "task_name": "p00100 Sale Result",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\nfrom sys import stdin, exit\nfrom collections import Counter\n\n\ndef main(readline=stdin.readline):\n    count = Counter()\n    member = []\n\n    while 1:\n        n = int(readline())\n        if not n:\n            exit()\n\n        count.clear()\n        del member[:]\n\n        for _ in range(n):\n            i, price, num = (int(s) for s in readline().split())\n            count[i] += price * num\n            if i not in member:\n                member.append(i)\n\n        member = [i for i in member if count[i] >= 1000000]\n\n        if member:\n            print(*member, sep='\\n')\n        else:\n            print('NA')\n\n\nif __name__ == '__main__':\n    main()",
        "correct": true,
        "task_id": "0209",
        "depth": 2
    },
    {
        "description": "Natasha is going to fly to Mars. She needs to build a rocket, which consists of several stages in some order. Each of the stages is defined by a lowercase Latin letter. This way, the rocket can be described by the string \u2014 concatenation of letters, which correspond to the stages.\n\nThere are n stages available. The rocket must contain exactly k of them. Stages in the rocket should be ordered by their weight. So, after the stage with some letter can go only stage with a letter, which is at least two positions after in the alphabet (skipping one letter in between, or even more). For example, after letter 'c' can't go letters 'a', 'b', 'c' and 'd', but can go letters 'e', 'f', ..., 'z'.\n\nFor the rocket to fly as far as possible, its weight should be minimal. The weight of the rocket is equal to the sum of the weights of its stages. The weight of the stage is the number of its letter in the alphabet. For example, the stage 'a 'weighs one ton,' b 'weighs two tons, and' z' \u2014 26 tons.\n\nBuild the rocket with the minimal weight or determine, that it is impossible to build a rocket at all. Each stage can be used at most once.\n\nInput\n\nThe first line of input contains two integers \u2014 n and k (1 \u2264 k \u2264 n \u2264 50) \u2013 the number of available stages and the number of stages to use in the rocket.\n\nThe second line contains string s, which consists of exactly n lowercase Latin letters. Each letter defines a new stage, which can be used to build the rocket. Each stage can be used at most once.\n\nOutput\n\nPrint a single integer \u2014 the minimal total weight of the rocket or -1, if it is impossible to build the rocket at all.\n\nExamples\n\nInput\n\n5 3\nxyabd\n\n\nOutput\n\n29\n\nInput\n\n7 4\nproblem\n\n\nOutput\n\n34\n\nInput\n\n2 2\nab\n\n\nOutput\n\n-1\n\nInput\n\n12 1\nabaabbaaabbb\n\n\nOutput\n\n1\n\nNote\n\nIn the first example, the following rockets satisfy the condition:\n\n  * \"adx\" (weight is 1+4+24=29);\n  * \"ady\" (weight is 1+4+25=30);\n  * \"bdx\" (weight is 2+4+24=30);\n  * \"bdy\" (weight is 2+4+25=31).\n\n\n\nRocket \"adx\" has the minimal weight, so the answer is 29.\n\nIn the second example, target rocket is \"belo\". Its weight is 2+5+12+15=34.\n\nIn the third example, n=k=2, so the rocket must have both stages: 'a' and 'b'. This rocket doesn't satisfy the condition, because these letters are adjacent in the alphabet. Answer is -1.",
        "task_name": "1011_A. Stages",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom string import ascii_lowercase\n\ndef readints():\n    return map(int, stdin.readline().split())\n\n\nn, k = readints()\nsteps = sorted(stdin.readline().strip())\nw = 0\ni = 0\nnb = 0\nwhile i < n and nb < k:\n    step = steps[i]\n    w += (ascii_lowercase.index(step) + 1)\n    i += 2\n    nb += 1\n\nprint -1 if nb != k else w",
        "correct": false,
        "task_id": "0211",
        "depth": 1
    },
    {
        "description": "Mikhail walks on a Cartesian plane. He starts at the point (0, 0), and in one move he can go to any of eight adjacent points. For example, if Mikhail is currently at the point (0, 0), he can go to any of the following points in one move: \n\n  * (1, 0); \n  * (1, 1); \n  * (0, 1); \n  * (-1, 1); \n  * (-1, 0); \n  * (-1, -1); \n  * (0, -1); \n  * (1, -1). \n\n\n\nIf Mikhail goes from the point (x1, y1) to the point (x2, y2) in one move, and x1 \u2260 x2 and y1 \u2260 y2, then such a move is called a diagonal move.\n\nMikhail has q queries. For the i-th query Mikhail's target is to go to the point (n_i, m_i) from the point (0, 0) in exactly k_i moves. Among all possible movements he want to choose one with the maximum number of diagonal moves. Your task is to find the maximum number of diagonal moves or find that it is impossible to go from the point (0, 0) to the point (n_i, m_i) in k_i moves.\n\nNote that Mikhail can visit any point any number of times (even the destination point!).\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 10^4) \u2014 the number of queries.\n\nThen q lines follow. The i-th of these q lines contains three integers n_i, m_i and k_i (1 \u2264 n_i, m_i, k_i \u2264 10^{18}) \u2014 x-coordinate of the destination point of the query, y-coordinate of the destination point of the query and the number of moves in the query, correspondingly.\n\nOutput\n\nPrint q integers. The i-th integer should be equal to -1 if Mikhail cannot go from the point (0, 0) to the point (n_i, m_i) in exactly k_i moves described above. Otherwise the i-th integer should be equal to the the maximum number of diagonal moves among all possible movements.\n\nExample\n\nInput\n\n3\n2 2 3\n4 3 7\n10 1 9\n\n\nOutput\n\n1\n6\n-1\n\nNote\n\nOne of the possible answers to the first test case: (0, 0) \u2192 (1, 0) \u2192 (1, 1) \u2192 (2, 2).\n\nOne of the possible answers to the second test case: (0, 0) \u2192 (0, 1) \u2192 (1, 2) \u2192 (0, 3) \u2192 (1, 4) \u2192 (2, 3) \u2192 (3, 2) \u2192 (4, 3).\n\nIn the third test case Mikhail cannot reach the point (10, 1) in 9 moves.",
        "task_name": "1036_B. Diagonal Walking v.2",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# PYTHON3---------------------------------------------------------------------#\nfrom __future__ import division, print_function\nrange = xrange\n\n# IMPORTS---------------------------------------------------------------------#\nimport math\nimport operator\nimport random\nfrom atexit import register\nfrom collections import Counter, defaultdict, deque\nfrom fractions import Fraction, gcd\nfrom io import BytesIO\n#from decimal import Decimal, getcontext\nfrom itertools import combinations, permutations, product\nfrom Queue import PriorityQueue, Queue\nfrom string import ascii_lowercase, ascii_uppercase\nfrom sys import __stdout__, setrecursionlimit, stdin, stdout\n\n# SETTINGS--------------------------------------------------------------------#\n#getcontext().prec = 100\n#setrecursionlimit(100000)\n\n# CONSTANTS-------------------------------------------------------------------#\nMOD = 10**9 + 7\nINF = float('+inf')\n\n# FASTIO----------------------------------------------------------------------#\nstdout = BytesIO()\nregister(lambda: __stdout__.write(stdout.getvalue()))\n#stdin = BytesIO(stdin.read())\n\ninput = lambda: stdin.readline().rstrip()\nprint = lambda *args: stdout.write(' '.join(str(x) for x in args) + '\\n')\nflush = stdout.flush()\n\n# MAIN------------------------------------------------------------------------#\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n, m, k = map (int, input().split())\n        \n        if k < max(n, m):\n            print(-1)\n        else:\n            if n == m:\n                if (k - n) % 2 == 0:\n                    print(k)\n                else:\n                    print(k-2)\n            else:\n                if (m-n) % 2 == 0:\n                    steps = max(n, m)\n                    if (k - steps) % 2 == 0:\n                        print(k)\n                    else:\n                        print(k-2)\n                else:\n                    steps = max(m, n)\n                    if (k - steps) % 2 == 0:\n                        print(k-1)\n                    else:\n                        print(k-1)                    \n                    \n\n\nif __name__ == '__main__':\n    main()",
        "correct": true,
        "task_id": "0212",
        "depth": 1
    },
    {
        "description": "Vasya has recently got a job as a cashier at a local store. His day at work is L minutes long. Vasya has already memorized n regular customers, the i-th of which comes after t_{i} minutes after the beginning of the day, and his service consumes l_{i} minutes. It is guaranteed that no customer will arrive while Vasya is servicing another customer. \n\nVasya is a bit lazy, so he likes taking smoke breaks for a minutes each. Those breaks may go one after another, but Vasya must be present at work during all the time periods he must serve regular customers, otherwise one of them may alert his boss. What is the maximum number of breaks Vasya can take during the day?\n\nInput\n\nThe first line contains three integers n, L and a (0 \u2264 n \u2264 10^{5}, 1 \u2264 L \u2264 10^{9}, 1 \u2264 a \u2264 L).\n\nThe i-th of the next n lines contains two integers t_{i} and l_{i} (0 \u2264 t_{i} \u2264 L - 1, 1 \u2264 l_{i} \u2264 L). It is guaranteed that t_{i} + l_{i} \u2264 t_{i + 1} and t_{n} + l_{n} \u2264 L.\n\nOutput\n\nOutput one integer \u2014 the maximum number of breaks.\n\nExamples\n\nInput\n\n2 11 3\n0 1\n1 1\n\n\nOutput\n\n3\n\nInput\n\n0 5 2\n\n\nOutput\n\n2\n\nInput\n\n1 3 2\n1 2\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample Vasya can take 3 breaks starting after 2, 5 and 8 minutes after the beginning of the day.\n\nIn the second sample Vasya can take 2 breaks starting after 0 and 2 minutes after the beginning of the day.\n\nIn the third sample Vasya can't take any breaks.",
        "task_name": "1059_A. Cashier",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\nn, L, a = map(int, raw_input().split())\nltime = 0\nallb = 0\nfor i in range(n):\n    ti, li = map(int, raw_input().split())\n    btime = ti - ltime\n    if btime > a:\n        allb = allb + (btime // a)\n    ltime = ti + li\nif L > ltime:\n    btime = L - ltime\n    allb = allb + (btime // a)\nprint(allb)\n\n  \t\t  \t\t\t       \t\t\t\t\t    \t\t  \t",
        "correct": false,
        "task_id": "0213",
        "depth": 1
    },
    {
        "description": "Recently, Masha was presented with a chessboard with a height of n and a width of m.\n\nThe rows on the chessboard are numbered from 1 to n from bottom to top. The columns are numbered from 1 to m from left to right. Therefore, each cell can be specified with the coordinates (x,y), where x is the column number, and y is the row number (do not mix up).\n\nLet us call a rectangle with coordinates (a,b,c,d) a rectangle lower left point of which has coordinates (a,b), and the upper right one \u2014 (c,d).\n\nThe chessboard is painted black and white as follows:\n\n<image> An example of a chessboard.\n\nMasha was very happy with the gift and, therefore, invited her friends Maxim and Denis to show off. The guys decided to make her a treat \u2014 they bought her a can of white and a can of black paint, so that if the old board deteriorates, it can be repainted. When they came to Masha, something unpleasant happened: first, Maxim went over the threshold and spilled white paint on the rectangle (x_1,y_1,x_2,y_2). Then after him Denis spilled black paint on the rectangle (x_3,y_3,x_4,y_4).\n\nTo spill paint of color color onto a certain rectangle means that all the cells that belong to the given rectangle become color. The cell dyeing is superimposed on each other (if at first some cell is spilled with white paint and then with black one, then its color will be black).\n\nMasha was shocked! She drove away from the guests and decided to find out how spoiled the gift was. For this, she needs to know the number of cells of white and black color. Help her find these numbers!\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^3) \u2014 the number of test cases.\n\nEach of them is described in the following format:\n\nThe first line contains two integers n and m (1 \u2264 n,m \u2264 10^9) \u2014 the size of the board.\n\nThe second line contains four integers x_1, y_1, x_2, y_2 (1 \u2264 x_1 \u2264 x_2 \u2264 m, 1 \u2264 y_1 \u2264 y_2 \u2264 n) \u2014 the coordinates of the rectangle, the white paint was spilled on.\n\nThe third line contains four integers x_3, y_3, x_4, y_4 (1 \u2264 x_3 \u2264 x_4 \u2264 m, 1 \u2264 y_3 \u2264 y_4 \u2264 n) \u2014 the coordinates of the rectangle, the black paint was spilled on.\n\nOutput\n\nOutput t lines, each of which contains two numbers \u2014 the number of white and black cells after spilling paint, respectively.\n\nExample\n\nInput\n\n\n5\n2 2\n1 1 2 2\n1 1 2 2\n3 4\n2 2 3 2\n3 1 4 3\n1 5\n1 1 5 1\n3 1 5 1\n4 4\n1 1 4 2\n1 3 4 4\n3 4\n1 2 4 2\n2 1 3 3\n\n\nOutput\n\n\n0 4\n3 9\n2 3\n8 8\n4 8\n\nNote\n\nExplanation for examples:\n\nThe first picture of each illustration shows how the field looked before the dyes were spilled. The second picture of each illustration shows how the field looked after Maxim spoiled white dye (the rectangle on which the dye was spilled is highlighted with red). The third picture in each illustration shows how the field looked after Denis spoiled black dye (the rectangle on which the dye was spilled is highlighted with red).\n\nIn the first test, the paint on the field changed as follows:\n\n<image>\n\nIn the second test, the paint on the field changed as follows:\n\n<image>\n\nIn the third test, the paint on the field changed as follows:\n\n<image>\n\nIn the fourth test, the paint on the field changed as follows:\n\n<image>\n\nIn the fifth test, the paint on the field changed as follows:\n\n<image>",
        "task_name": "1080_C. Masha and two friends",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n\"\"\"\nThis file is part of https://github.com/Cheran-Senthil/PyRival.\n\nCopyright 2018 Cheran Senthilkumar all rights reserved,\nCheran Senthilkumar <hello@cheran.io>\nPermission to use, modify, and distribute this software is given under the\nterms of the MIT License.\n\n\"\"\"\nfrom __future__ import division, print_function\n\nimport cmath\nimport itertools\nimport math\nimport operator as op\n# import random\nimport sys\nfrom atexit import register\nfrom bisect import bisect_left, bisect_right\n# from collections import Counter, MutableSequence, defaultdict, deque\n# from copy import deepcopy\n# from decimal import Decimal\n# from difflib import SequenceMatcher\n# from fractions import Fraction\n# from heapq import heappop, heappush\n\nif sys.version_info[0] < 3:\n    # from cPickle import dumps\n    from io import BytesIO as stream\n    # from Queue import PriorityQueue, Queue\nelse:\n    # from functools import reduce\n    from io import StringIO as stream\n    from math import gcd\n    # from pickle import dumps\n    # from queue import PriorityQueue, Queue\n\n\nif sys.version_info[0] < 3:\n    class dict(dict):\n        \"\"\"dict() -> new empty dictionary\"\"\"\n        def items(self):\n            \"\"\"D.items() -> a set-like object providing a view on D's items\"\"\"\n            return dict.iteritems(self)\n\n        def keys(self):\n            \"\"\"D.keys() -> a set-like object providing a view on D's keys\"\"\"\n            return dict.iterkeys(self)\n\n        def values(self):\n            \"\"\"D.values() -> an object providing a view on D's values\"\"\"\n            return dict.itervalues(self)\n\n    def gcd(x, y):\n        \"\"\"gcd(x, y) -> int\n        greatest common divisor of x and y\n        \"\"\"\n        while y:\n            x, y = y, x % y\n        return x\n\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\n\ndef sync_with_stdio(sync=True):\n    \"\"\"Set whether the standard Python streams are allowed to buffer their I/O.\n\n    Args:\n        sync (bool, optional): The new synchronization setting.\n\n    \"\"\"\n    global input, flush\n\n    if sync:\n        flush = sys.stdout.flush\n    else:\n        sys.stdin = stream(sys.stdin.read())\n        input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n        sys.stdout = stream()\n        register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split(' '))\n        white_sq_0 = (n*m + 1) // 2\n\n        x1, y1, x2, y2 = map(int, input().split(' '))\n        col_cnt_1 = x2 - x1 + 1\n        row_cnt_1 = y2 - y1 + 1\n\n        if x1 % 2 == 0:\n            if y1 % 2 == 0:\n                white_sq_1 = (col_cnt_1*row_cnt_1 + 1) // 2\n            else:\n                white_sq_1 = (col_cnt_1*row_cnt_1) // 2\n        else:\n            if y1 % 2 == 0:\n                white_sq_1 = (col_cnt_1*row_cnt_1) // 2\n            else:\n                white_sq_1 = (col_cnt_1*row_cnt_1 + 1) // 2\n\n        x3, y3, x4, y4 = map(int, input().split(' '))\n        col_cnt_2 = x4 - x3 + 1\n        row_cnt_2 = y4 - y3 + 1\n\n        if x3 % 2 == 0:\n            if y3 % 2 == 0:\n                white_sq_2 = (col_cnt_2*row_cnt_2 + 1) // 2\n            else:\n                white_sq_2 = (col_cnt_2*row_cnt_2) // 2\n        else:\n            if y3 % 2 == 0:\n                white_sq_2 = (col_cnt_2*row_cnt_2) // 2\n            else:\n                white_sq_2 = (col_cnt_2*row_cnt_2 + 1) // 2\n\n        if (x3 > x2) or (y3 > y2) or (x4 < x1) or (y4 < y1):\n            white_cnt = white_sq_0 + (col_cnt_1*row_cnt_1 - white_sq_1) - white_sq_2\n            black_cnt = n*m - white_cnt\n            print(white_cnt, black_cnt)\n        else:\n            x5, x6 = max(x1, x3), min(x2, x4)\n            y5, y6 = max(y1, y3), min(y2, y4)\n\n            col_cnt_3 = x6 - x5 + 1\n            row_cnt_3 = y6 - y5 + 1\n\n            if x5 % 2 == 0:\n                if y5 % 2 == 0:\n                    white_sq_3 = (col_cnt_3*row_cnt_3) // 2\n                else:\n                    white_sq_3 = (col_cnt_3*row_cnt_3 + 1) // 2\n            else:\n                if y5 % 2 == 0:\n                    white_sq_3 = (col_cnt_3*row_cnt_3 + 1) // 2\n                else:\n                    white_sq_3 = (col_cnt_3*row_cnt_3) // 2\n\n            white_cnt = white_sq_0 + (col_cnt_1*row_cnt_1 - white_sq_1) - white_sq_2\n            black_cnt = n*m - white_cnt\n            print(white_cnt - white_sq_3, black_cnt + white_sq_3)\n\n\nif __name__ == '__main__':\n    sync_with_stdio(False)\n    main()\n",
        "correct": true,
        "task_id": "0214",
        "depth": 1
    },
    {
        "description": "Everybody knows that the m-coder Tournament will happen soon. m schools participate in the tournament, and only one student from each school participates.\n\nThere are a total of n students in those schools. Before the tournament, all students put their names and the names of their schools into the Technogoblet of Fire. After that, Technogoblet selects the strongest student from each school to participate. \n\nArkady is a hacker who wants to have k Chosen Ones selected by the Technogoblet. Unfortunately, not all of them are the strongest in their schools, but Arkady can make up some new school names and replace some names from Technogoblet with those. You can't use each made-up name more than once. In that case, Technogoblet would select the strongest student in those made-up schools too.\n\nYou know the power of each student and schools they study in. Calculate the minimal number of schools Arkady has to make up so that k Chosen Ones would be selected by the Technogoblet.\n\nInput\n\nThe first line contains three integers n, m and k (1 \u2264 n \u2264 100, 1 \u2264 m, k \u2264 n) \u2014 the total number of students, the number of schools and the number of the Chosen Ones.\n\nThe second line contains n different integers p_1, p_2, \u2026, p_n (1 \u2264 p_i \u2264 n), where p_i denotes the power of i-th student. The bigger the power, the stronger the student.\n\nThe third line contains n integers s_1, s_2, \u2026, s_n (1 \u2264 s_i \u2264 m), where s_i denotes the school the i-th student goes to. At least one student studies in each of the schools. \n\nThe fourth line contains k different integers c_1, c_2, \u2026, c_k (1 \u2264 c_i \u2264 n) \u2014 the id's of the Chosen Ones.\n\nOutput\n\nOutput a single integer \u2014 the minimal number of schools to be made up by Arkady so that k Chosen Ones would be selected by the Technogoblet.\n\nExamples\n\nInput\n\n\n7 3 1\n1 5 3 4 6 7 2\n1 3 1 2 1 2 3\n3\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n8 4 4\n1 2 3 4 5 6 7 8\n4 3 2 1 4 3 2 1\n3 4 5 6\n\n\nOutput\n\n\n2\n\nNote\n\nIn the first example there's just a single Chosen One with id 3. His power is equal to 3, but in the same school 1, there's a student with id 5 and power 6, and that means inaction would not lead to the latter being chosen. If we, however, make up a new school (let its id be 4) for the Chosen One, Technogoblet would select students with ids 2 (strongest in 3), 5 (strongest in 1), 6 (strongest in 2) and 3 (strongest in 4).\n\nIn the second example, you can change the school of student 3 to the made-up 5 and the school of student 4 to the made-up 6. It will cause the Technogoblet to choose students 8, 7, 6, 5, 3 and 4.",
        "task_name": "1121_A. Technogoblet of Fire",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nfrom collections import defaultdict\nstrInp = lambda : raw_input().strip().split()\nintInp = lambda : list(map(int,strInp()))\n\nn , m, k = intInp()\narr = intInp()\nschool = intInp()\nindex = intInp()\nvalues = []\nfor i in index:\n    values.append(arr[i-1]) \n\ns_in_s = defaultdict(list)\n\nfor i in range(n):\n    s_in_s[school[i]].append(arr[i])\nans = 0\nfor j in values:\n    for i in range(1,m+1):\n        if j != max(s_in_s[i]) and j in s_in_s[i]:\n            ans += 1\n            break\nprint(ans)            \n\n",
        "correct": true,
        "task_id": "0216",
        "depth": 2
    },
    {
        "description": "You are given a permutation p of integers from 1 to n, where n is an even number. \n\nYour goal is to sort the permutation. To do so, you can perform zero or more operations of the following type: \n\n  * take two indices i and j such that 2 \u22c5 |i - j| \u2265 n and swap p_i and p_j. \n\n\n\nThere is no need to minimize the number of operations, however you should use no more than 5 \u22c5 n operations. One can show that it is always possible to do that.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 3 \u22c5 10^5, n is even) \u2014 the length of the permutation. \n\nThe second line contains n distinct integers p_1, p_2, \u2026, p_n (1 \u2264 p_i \u2264 n) \u2014 the given permutation.\n\nOutput\n\nOn the first line print m (0 \u2264 m \u2264 5 \u22c5 n) \u2014 the number of swaps to perform.\n\nEach of the following m lines should contain integers a_i, b_i (1 \u2264 a_i, b_i \u2264 n, |a_i - b_i| \u2265 n/2) \u2014 the indices that should be swapped in the corresponding swap.\n\nNote that there is no need to minimize the number of operations. We can show that an answer always exists.\n\nExamples\n\nInput\n\n\n2\n2 1\n\n\nOutput\n\n\n1\n1 2\n\nInput\n\n\n4\n3 4 1 2\n\n\nOutput\n\n\n4\n1 4\n1 4\n1 3\n2 4\n\n\nInput\n\n\n6\n2 5 3 1 4 6\n\n\nOutput\n\n\n3\n1 5\n2 5\n1 4\n\nNote\n\nIn the first example, when one swap elements on positions 1 and 2, the array becomes sorted.\n\nIn the second example, pay attention that there is no need to minimize number of swaps.\n\nIn the third example, after swapping elements on positions 1 and 5 the array becomes: [4, 5, 3, 1, 2, 6]. After swapping elements on positions 2 and 5 the array becomes [4, 2, 3, 1, 5, 6] and finally after swapping elements on positions 1 and 4 the array becomes sorted: [1, 2, 3, 4, 5, 6].",
        "task_name": "1148_C. Crazy Diamond",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"                         \nBeautiful is better than ugly.\n    Explicit is better than implicit.\nSimple is better than complex.\n    Complex is better than complicated.\nFlat is better than nested.\n    Sparse is better than dense.\n                    \n    * Readability counts *\n\n // Author : raj1307 - Raj Singh\n // Date   : 13.06.19\n\n\"\"\"\n\nfrom __future__ import division, print_function\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    _str = str\n    str = lambda x=b\"\": x if type(x) is bytes else _str(x).encode()\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial,pow,pi\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod,MOD=1000000007,998244353\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p1\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n# For getting input from input.txt file \n#sys.stdin = open('input.txt', 'r')  \n  \n# Printing the Output to output.txt file \n#sys.stdout = open('output.txt', 'w') \n\ndef main():\n    \n    \n    \n    n=ii()\n    l=li()\n    \n    d={}\n    \n    for i in range(n):\n        d[l[i]]=i\n    \n    a=l[::]\n    a.sort()\n    \n    ans=[]\n    for i in range(n):\n        \n        if a[i]==l[i]:\n            continue\n        \n        \n        \n        if abs(d[a[i]]-i)>=n//2:\n            \n            x=d[a[i]]\n            y=i\n            \n            l[y],l[x]=l[x],l[y]\n            \n    \n            \n            ans.append([x+1,y+1])\n            \n            #print(d)\n        else:\n            \n            \n            \n                \n            x=d[a[i]]\n            if x<n//2:\n                y=n-1\n            else:\n                y=0\n                \n            \n            l[y],l[x]=l[x],l[y]\n              \n  \n                \n            ans.append([x+1,y+1])\n                \n                \n            if (d[a[i]]-i)<=n//2:\n                x=d[a[i]]\n                if x<n//2:\n                    y=n-1\n                else:\n                    y=0\n                    \n                \n                l[y],l[x]=l[x],l[y]\n                  \n        \n                    \n                ans.append([x+1,y+1])\n                \n                \n                \n                \n                \n            \n            x=d[a[i]]\n            #print(d[a[i]],'i')\n            y=i\n            \n            l[y],l[x]=l[x],l[y]\n            \n            \n            #print('i')\n            ans.append([x+1,y+1])\n            \n    print(len(ans))\n    for i in ans:\n        print(*i)\n            \n            \n            \n            \n            \n    \n    \n    \n    \n        \n    \n            \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        if self.buffer.tell():\n            return self.buffer.read()\n        return os.read(self._fd, os.fstat(self._fd).st_size)\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", b\" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", b\"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nsys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(b\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n    #dmain()",
        "correct": false,
        "task_id": "0217",
        "depth": 1
    },
    {
        "description": "The only difference between easy and hard versions is constraints.\n\nThe BerTV channel every day broadcasts one episode of one of the k TV shows. You know the schedule for the next n days: a sequence of integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 k), where a_i is the show, the episode of which will be shown in i-th day.\n\nThe subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.\n\nHow many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows d (1 \u2264 d \u2264 n) days in a row? In other words, you want to buy the minimum number of TV shows so that there is some segment of d consecutive days in which all episodes belong to the purchased shows.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases in the input. Then t test case descriptions follow.\n\nThe first line of each test case contains three integers n, k and d (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 100, 1 \u2264 d \u2264 n). The second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 k), where a_i is the show that is broadcasted on the i-th day.\n\nIt is guaranteed that the sum of the values \u200b\u200bof n for all test cases in the input does not exceed 100.\n\nOutput\n\nPrint t integers \u2014 the answers to the test cases in the input in the order they follow. The answer to a test case is the minimum number of TV shows for which you need to purchase a subscription so that you can watch episodes of the purchased TV shows on BerTV for d consecutive days. Please note that it is permissible that you will be able to watch more than d days in a row.\n\nExample\n\nInput\n\n\n4\n5 2 2\n1 2 1 2 1\n9 3 3\n3 3 3 2 2 2 1 1 1\n4 10 4\n10 8 6 4\n16 9 8\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\n\n\nOutput\n\n\n2\n1\n4\n5\n\nNote\n\nIn the first test case to have an opportunity to watch shows for two consecutive days, you need to buy a subscription on show 1 and on show 2. So the answer is two.\n\nIn the second test case, you can buy a subscription to any show because for each show you can find a segment of three consecutive days, consisting only of episodes of this show.\n\nIn the third test case in the unique segment of four days, you have four different shows, so you need to buy a subscription to all these four shows.\n\nIn the fourth test case, you can buy subscriptions to shows 3,5,7,8,9, and you will be able to watch shows for the last eight days.",
        "task_name": "1225_B1. TV Subscriptions (Easy Version)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from collections import Counter\nt=int(input())\nfor i in range(t):\n    n,k,d=map(int,raw_input().split())\n    arr=list(map(int,raw_input().split()))\n\n    def solve(arr,n,k,d):\n        if n==d:\n            return len(set(arr))\n        m=float('inf')\n        freq=Counter(arr[:d])\n\n\n        for i in range(1,n-d+1):\n\n            freq[arr[i-1]]-=1\n            if freq[arr[i-1]]==0:\n                del freq[arr[i-1]]\n\n            if arr[i+d-1] in freq:\n                freq[arr[i+d-1]]+=1\n            else:\n                freq[arr[i+d-1]]=1\n            m=min(m,len(freq))\n\n        return m\n\n    print(solve(arr,n,k,d))\n\n",
        "correct": false,
        "task_id": "0218",
        "depth": 2
    },
    {
        "description": "The only difference between easy and hard versions is constraints.\n\nYou are given n segments on the coordinate axis OX. Segments can intersect, lie inside each other and even coincide. The i-th segment is [l_i; r_i] (l_i \u2264 r_i) and it covers all integer points j such that l_i \u2264 j \u2264 r_i.\n\nThe integer point is called bad if it is covered by strictly more than k segments.\n\nYour task is to remove the minimum number of segments so that there are no bad points at all.\n\nInput\n\nThe first line of the input contains two integers n and k (1 \u2264 k \u2264 n \u2264 200) \u2014 the number of segments and the maximum number of segments by which each integer point can be covered.\n\nThe next n lines contain segments. The i-th line contains two integers l_i and r_i (1 \u2264 l_i \u2264 r_i \u2264 200) \u2014 the endpoints of the i-th segment.\n\nOutput\n\nIn the first line print one integer m (0 \u2264 m \u2264 n) \u2014 the minimum number of segments you need to remove so that there are no bad points.\n\nIn the second line print m distinct integers p_1, p_2, ..., p_m (1 \u2264 p_i \u2264 n) \u2014 indices of segments you remove in any order. If there are multiple answers, you can print any of them.\n\nExamples\n\nInput\n\n\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\n\nOutput\n\n\n3\n1 4 7 \n\n\nInput\n\n\n5 1\n29 30\n30 30\n29 29\n28 30\n30 30\n\n\nOutput\n\n\n3\n1 2 4 \n\n\nInput\n\n\n6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n\n\nOutput\n\n\n4\n1 3 5 6 ",
        "task_name": "1249_D1. Too Many Segments (easy version)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from heapq import *\ninput = __import__(\"sys\").stdin.readline\nn, k = map(int, input().split())\nseg = []\nevents = []\nremove = __import__(\"collections\").defaultdict(int)\nfor _ in xrange(n):\n\tl, r = map(int, input().split())\n\tseg.append((l, r))\n\tevents.append((l, True, r))\n\tevents.append((r + 1, False, None))\nevents.sort(reverse=True)\ncover = 0\nheap = []  # (-end, start)\nrem = 0\npost = __import__(\"collections\").defaultdict(int)\nwhile events:\n\tind, add, release = events.pop()\n\tif add:\n\t\tcover += 1\n\t\theappush(heap, (-release, ind))\n\telif post[ind]:\n\t\tpost[ind] -= 1\n\telse:\n\t\tcover -= 1\n\twhile events and events[-1][0] == ind:\n\t\tind, add, release = events.pop()\n\t\tif add:\n\t\t\tcover += 1\n\t\t\theappush(heap, (-release, ind))\n\t\telif post[ind]:\n\t\t\tpost[ind] -= 1\n\t\telse:\n\t\t\tcover -= 1\n\twhile cover > k:\n\t\tend, start = heappop(heap)\n\t\tend = -end\n\t\tpost[end + 1] += 1\n\t\tremove[(start, end)] += 1\n\t\trem += 1\n\t\tcover -= 1\nprint(rem)\nfor i in xrange(len(seg)):\n\tif remove[seg[i]]:\n\t\tprint(i + 1),\n\t\tremove[seg[i]] -= 1\nprint",
        "correct": true,
        "task_id": "0219",
        "depth": 2
    },
    {
        "description": "Lucy likes letters. She studied the definition of the lexicographical order at school and plays with it.\n\nAt first, she tried to construct the lexicographically smallest word out of given letters. It was so easy! Then she tried to build multiple words and minimize one of them. This was much harder!\n\nFormally, Lucy wants to make n words of length l each out of the given n \u22c5 l letters, so that the k-th of them in the lexicographic order is lexicographically as small as possible.\n\nInput\n\nThe first line contains three integers n, l, and k (1\u2264 k \u2264 n \u2264 1 000; 1 \u2264 l \u2264 1 000) \u2014 the total number of words, the length of each word, and the index of the word Lucy wants to minimize.\n\nThe next line contains a string of n \u22c5 l lowercase letters of the English alphabet.\n\nOutput\n\nOutput n words of l letters each, one per line, using the letters from the input. Words must be sorted in the lexicographic order, and the k-th of them must be lexicographically as small as possible. If there are multiple answers with the smallest k-th word, output any of them.\n\nExamples\n\nInput\n\n\n3 2 2\nabcdef\n\n\nOutput\n\n\naf\nbc\ned\n\nInput\n\n\n2 3 1\nabcabc\n\n\nOutput\n\n\naab\nbcc",
        "task_name": "1267_L. Lexicography",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nn, l, k = map(int, stdin.readline().split())\ns, out = sorted(stdin.readline().strip())[::-1], [[] for _ in range(n)]\n\nfor i in range(l):\n    for j in range(k):\n        out[j].append(s.pop())\n\n    if k == 1 or out[k - 1][-1] > out[k - 2][-1]:\n        break\n\nwhile len(out[k - 1]) < l:\n    out[k - 1].append(s.pop())\n\nfor i in range(n):\n    while len(out[i]) < l:\n        out[i].append(s.pop())\n\nprint('\\n'.join([''.join(x) for x in out]))\n",
        "correct": false,
        "task_id": "0220",
        "depth": 2
    },
    {
        "description": "You are given a board of size n \u00d7 n, where n is odd (not divisible by 2). Initially, each cell of the board contains one figure.\n\nIn one move, you can select exactly one figure presented in some cell and move it to one of the cells sharing a side or a corner with the current cell, i.e. from the cell (i, j) you can move the figure to cells: \n\n  * (i - 1, j - 1); \n  * (i - 1, j); \n  * (i - 1, j + 1); \n  * (i, j - 1); \n  * (i, j + 1); \n  * (i + 1, j - 1); \n  * (i + 1, j); \n  * (i + 1, j + 1); \n\n\n\nOf course, you can not move figures to cells out of the board. It is allowed that after a move there will be several figures in one cell.\n\nYour task is to find the minimum number of moves needed to get all the figures into one cell (i.e. n^2-1 cells should contain 0 figures and one cell should contain n^2 figures).\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 200) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (1 \u2264 n < 5 \u22c5 10^5) \u2014 the size of the board. It is guaranteed that n is odd (not divisible by 2).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 5 \u22c5 10^5 (\u2211 n \u2264 5 \u22c5 10^5).\n\nOutput\n\nFor each test case print the answer \u2014 the minimum number of moves needed to get all the figures into one cell.\n\nExample\n\nInput\n\n\n3\n1\n5\n499993\n\n\nOutput\n\n\n0\n40\n41664916690999888",
        "task_name": "1353_C. Board Moves",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "t=int(raw_input())\nfor i in range(t):\n    n=int(raw_input())\n    print (n*(n**2-1))/3",
        "correct": true,
        "task_id": "0222",
        "depth": 1
    },
    {
        "description": "Alica and Bob are playing a game.\n\nInitially they have a binary string s consisting of only characters 0 and 1.\n\nAlice and Bob make alternating moves: Alice makes the first move, Bob makes the second move, Alice makes the third one, and so on. During each move, the current player must choose two different adjacent characters of string s and delete them. For example, if s = 1011001 then the following moves are possible: \n\n  1. delete s_1 and s_2: 1011001 \u2192 11001; \n  2. delete s_2 and s_3: 1011001 \u2192 11001; \n  3. delete s_4 and s_5: 1011001 \u2192 10101; \n  4. delete s_6 and s_7: 1011001 \u2192 10110. \n\n\n\nIf a player can't make any move, they lose. Both players play optimally. You have to determine if Alice can win.\n\nInput\n\nFirst line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nOnly line of each test case contains one string s (1 \u2264 |s| \u2264 100), consisting of only characters 0 and 1.\n\nOutput\n\nFor each test case print answer in the single line.\n\nIf Alice can win print DA (YES in Russian) in any register. Otherwise print NET (NO in Russian) in any register.\n\nExample\n\nInput\n\n\n3\n01\n1111\n0011\n\n\nOutput\n\n\nDA\nNET\nNET\n\nNote\n\nIn the first test case after Alice's move string s become empty and Bob can not make any move.\n\nIn the second test case Alice can not make any move initially.\n\nIn the third test case after Alice's move string s turn into 01. Then, after Bob's move string s become empty and Alice can not make any move.",
        "task_name": "1373_B. 01 Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def string(s):\n    s3 = list(s)\n    i = 1\n    j = 0\n    s1 = ''\n    while i < len(s3):\n        if s[i] != s[i - 1]:\n            s3.pop(i)\n            s3.pop(i - 1)\n            s = s1.join(s3)\n            j += 1\n            i = 0\n        else:\n            i += 1\n            continue\n\n        i += 1\n    if j == 0 or j % 2 == 0:\n        w=\"NET\"\n    else:\n        w=\"DA\"\n    return w\ns5=[]\nfor t in range(int(raw_input())):\n    s = raw_input()\n    a=str(s)\n    s5.append(a)\nfor t1 in s5:\n    print(t1)",
        "correct": false,
        "task_id": "0223",
        "depth": 1
    },
    {
        "description": "You are given an array a of n integers.\n\nYou want to make all elements of a equal to zero by doing the following operation exactly three times:\n\n  * Select a segment, for each number in this segment we can add a multiple of len to it, where len is the length of this segment (added integers can be different). \n\n\n\nIt can be proven that it is always possible to make all elements of a equal to zero.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 100 000): the number of elements of the array.\n\nThe second line contains n elements of an array a separated by spaces: a_1, a_2, ..., a_n (-10^9 \u2264 a_i \u2264 10^9).\n\nOutput\n\nThe output should contain six lines representing three operations.\n\nFor each operation, print two lines:\n\n  * The first line contains two integers l, r (1 \u2264 l \u2264 r \u2264 n): the bounds of the selected segment.\n\n  * The second line contains r-l+1 integers b_l, b_{l+1}, ..., b_r (-10^{18} \u2264 b_i \u2264 10^{18}): the numbers to add to a_l, a_{l+1}, \u2026, a_r, respectively; b_i should be divisible by r - l + 1.\n\nExample\n\nInput\n\n\n4\n1 3 2 4\n\n\nOutput\n\n\n1 1 \n-1\n3 4\n4 2\n2 4\n-3 -6 -6",
        "task_name": "1396_A. Multiples of Length",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\nimport sys\nfrom atexit import register\n\nif sys.version_info[0] < 3:\n    from io import BytesIO as stream\nelse:\n    from io import StringIO as stream\n\n\nsys.stdin = stream(sys.stdin.read())\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\nsys.stdout = stream()\nregister(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\ndef egcd(a, b):\n    x,y, u,v = 0,1, 1,0\n    while a != 0:\n        q, r = b//a, b%a\n        m, n = x-u*q, y-v*q\n        b,a, x,y, u,v = a,r, u,v, m,n\n    gcd = b\n    return gcd, x, y\n\n\ndef solve():\n    N = read_int()\n    A = read_ints()\n    if N == 1:\n        print(1, 1)\n        print(-A[0])\n        print(1, 1)\n        print(0)\n        print(1, 1)\n        print(0)\n        return\n    gcd, x, y = egcd(N-1, N)\n    B = []\n    for a in A[:N-1]:\n        B.append(-a*(N-1)*x)\n    B.append(0)\n    print(1, N-1)\n    print(*B[:N-1])\n    A = [a+b for a, b in zip(A, B)]\n    print(N, N)\n    print(N-A[-1])\n    A[-1] = N\n    print(1, N)\n    print(*[-a for a in A])\n\n\nif __name__ == '__main__':\n    solve()\n",
        "correct": true,
        "task_id": "0224",
        "depth": 1
    },
    {
        "description": "In the Main Berland Bank n people stand in a queue at the cashier, everyone knows his/her height hi, and the heights of the other people in the queue. Each of them keeps in mind number ai \u2014 how many people who are taller than him/her and stand in queue in front of him.\n\nAfter a while the cashier has a lunch break and the people in the queue seat on the chairs in the waiting room in a random order.\n\nWhen the lunch break was over, it turned out that nobody can remember the exact order of the people in the queue, but everyone remembers his number ai.\n\nYour task is to restore the order in which the people stood in the queue if it is possible. There may be several acceptable orders, but you need to find any of them. Also, you need to print a possible set of numbers hi \u2014 the heights of people in the queue, so that the numbers ai are correct.\n\nInput\n\nThe first input line contains integer n \u2014 the number of people in the queue (1 \u2264 n \u2264 3000). Then n lines contain descriptions of the people as \"namei ai\" (one description on one line), where namei is a non-empty string consisting of lowercase Latin letters whose length does not exceed 10 characters (the i-th person's name), ai is an integer (0 \u2264 ai \u2264 n - 1), that represents the number of people who are higher and stand in the queue in front of person i. It is guaranteed that all names are different.\n\nOutput\n\nIf there's no acceptable order of the people in the queue, print the single line containing \"-1\" without the quotes. Otherwise, print in n lines the people as \"namei hi\", where hi is the integer from 1 to 109 (inclusive), the possible height of a man whose name is namei. Print the people in the order in which they stand in the queue, starting from the head of the queue and moving to its tail. Numbers hi are not necessarily unique.\n\nExamples\n\nInput\n\n4\na 0\nb 2\nc 0\nd 0\n\n\nOutput\n\na 150\nc 170\nd 180\nb 160\n\n\nInput\n\n4\nvasya 0\npetya 1\nmanya 3\ndunay 3\n\n\nOutput\n\n-1",
        "task_name": "141_C. Queue",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nrstrs = lambda: [str(x) for x in stdin.readline().split()]\nn = int(input())\ns, ans = sorted([rstrs() for _ in range(n)], key=lambda x: int(x[1])), []\n\n# print(s)\nfor i in range(n):\n    if int(s[i][1]) > i:\n        print(-1)\n        exit()\n\n    ans.insert(int(s[i][1]), ' '.join([s[i][0], str(n)]))\n    n -= 1\n\nprint('\\n'.join(ans))\n",
        "correct": true,
        "task_id": "0225",
        "depth": 1
    },
    {
        "description": "You are given an array [a_1, a_2, ..., a_n] such that 1 \u2264 a_i \u2264 10^9. Let S be the sum of all elements of the array a.\n\nLet's call an array b of n integers beautiful if:\n\n  * 1 \u2264 b_i \u2264 10^9 for each i from 1 to n; \n  * for every pair of adjacent integers from the array (b_i, b_{i + 1}), either b_i divides b_{i + 1}, or b_{i + 1} divides b_i (or both); \n  * 2 \u2211 _{i = 1}^{n} |a_i - b_i| \u2264 S. \n\n\n\nYour task is to find any beautiful array. It can be shown that at least one beautiful array always exists.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nEach test case consists of two lines. The first line contains one integer n (2 \u2264 n \u2264 50).\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9).\n\nOutput\n\nFor each test case, print the beautiful array b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^9) on a separate line. It can be shown that at least one beautiful array exists under these circumstances. If there are multiple answers, print any of them.\n\nExample\n\nInput\n\n\n4\n5\n1 2 3 4 5\n2\n4 6\n2\n1 1000000000\n6\n3 4 8 1 2 3\n\n\nOutput\n\n\n3 3 3 3 3\n3 6\n1 1000000000\n4 4 8 1 3 3",
        "task_name": "1463_B. Find The Array",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\nimport bisect\nimport math\nimport heapq\nimport itertools\nimport sys\nfrom collections import deque\nfrom atexit import register\nfrom collections import Counter\nfrom functools import reduce\nsys.setrecursionlimit(100000)\nif sys.version_info[0] < 3:\n    from io import BytesIO as stream\nelse:\n    from io import StringIO as stream\n \n \nif sys.version_info[0] < 3:\n    class dict(dict):\n        \"\"\"dict() -> new empty dictionary\"\"\"\n        def items(self):\n            \"\"\"D.items() -> a set-like object providing a view on D's items\"\"\"\n            return dict.iteritems(self)\n \n        def keys(self):\n            \"\"\"D.keys() -> a set-like object providing a view on D's keys\"\"\"\n            return dict.iterkeys(self)\n \n        def values(self):\n            \"\"\"D.values() -> an object providing a view on D's values\"\"\"\n            return dict.itervalues(self)\n \n    input = raw_input\n    range = xrange\n \n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n \n \ndef sync_with_stdio(sync=True):\n    \"\"\"Set whether the standard Python streams are allowed to buffer their I/O.\n \n    Args:\n        sync (bool, optional): The new synchronization setting.\n \n    \"\"\"\n    global input, flush\n \n    if sync:\n        flush = sys.stdout.flush\n    else:\n        sys.stdin = stream(sys.stdin.read())\n        input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n \n        sys.stdout = stream()\n        register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n\ndef dd():\n    return map(int,input().split())    \ndef arr():\n    return list(map(int,input().split()))\ndef twinSort(X,Y):\n    #sorting X wrt Y\n    return [x for _,x in sorted(zip(Y,X))]\n\ndef solve():\n    n=int(input())\n    ar=arr()\n    ans=[]\n\n    for i in range(n-1):\n        if ar[i]%ar[i+1]==0 or ar[i+1]%ar[i]==0:\n            ans.append(ar[i])\n        else:\n            if ar[i]<ar[i+1]:\n                ans.append(ar[i])\n                ar[i+1]-=(ar[i+1]%ar[i])\n            else:\n                ans.append(ar[i])\n                ar[i+1]+=(ar[i+1]%ar[i])\n\n        \n    ans.append(ar[i+1])\n    for i in ans:\n        print(i,end=' ')\n    print()\n\n\n        \n    # print(sum(ans)*2,sum(ar))\n\ndef main():\n    testCase=1\n    if testCase:\n        for _ in range(int(input())):\n            solve()\n    else:\n        solve()\n    \nif __name__ == '__main__':\n    sync_with_stdio(False)\n    main()",
        "correct": false,
        "task_id": "0227",
        "depth": 1
    },
    {
        "description": "The princess is going to escape the dragon's cave, and she needs to plan it carefully.\n\nThe princess runs at vp miles per hour, and the dragon flies at vd miles per hour. The dragon will discover the escape after t hours and will chase the princess immediately. Looks like there's no chance to success, but the princess noticed that the dragon is very greedy and not too smart. To delay him, the princess decides to borrow a couple of bijous from his treasury. Once the dragon overtakes the princess, she will drop one bijou to distract him. In this case he will stop, pick up the item, return to the cave and spend f hours to straighten the things out in the treasury. Only after this will he resume the chase again from the very beginning.\n\nThe princess is going to run on the straight. The distance between the cave and the king's castle she's aiming for is c miles. How many bijous will she need to take from the treasury to be able to reach the castle? If the dragon overtakes the princess at exactly the same moment she has reached the castle, we assume that she reached the castle before the dragon reached her, and doesn't need an extra bijou to hold him off.\n\nInput\n\nThe input data contains integers vp, vd, t, f and c, one per line (1 \u2264 vp, vd \u2264 100, 1 \u2264 t, f \u2264 10, 1 \u2264 c \u2264 1000).\n\nOutput\n\nOutput the minimal number of bijous required for the escape to succeed.\n\nExamples\n\nInput\n\n1\n2\n1\n1\n10\n\n\nOutput\n\n2\n\n\nInput\n\n1\n2\n1\n1\n8\n\n\nOutput\n\n1\n\nNote\n\nIn the first case one hour after the escape the dragon will discover it, and the princess will be 1 mile away from the cave. In two hours the dragon will overtake the princess 2 miles away from the cave, and she will need to drop the first bijou. Return to the cave and fixing the treasury will take the dragon two more hours; meanwhile the princess will be 4 miles away from the cave. Next time the dragon will overtake the princess 8 miles away from the cave, and she will need the second bijou, but after this she will reach the castle without any further trouble.\n\nThe second case is similar to the first one, but the second time the dragon overtakes the princess when she has reached the castle, and she won't need the second bijou.",
        "task_name": "148_B. Escape",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "vp = int(raw_input())\nvd = int(raw_input())\nt_read = int(raw_input())\nf = int(raw_input())\nc = int(raw_input())\n\n\npl = 0\ndl = 0\nt = 1\ncount = 0\n\n# print(vp, vd, t_read, f, c)\n\n\nwhile (pl + vp <= c):\n    \n    pl += vp\n\n\n    if (t > t_read):\n        dl += vd\n        if (dl >= pl and pl + vp <= c):\n            count += 1\n            dl = pl\n            pl += ((2 * (dl / vd)) + f) * vp\n            # print((str(t), str(count), str(dl), str(pl)))  \n\n            # while (dl > 0 and pl + vp <= c):\n            #     dl = max(dl - vd, 0)\n            #     print((str(t), str(count), str(dl), str(pl)))\n            #     pl += vp\n            # pl += f * vp\n            # if (pl + vp >= c):\n            #     break\n            \n            \n            \n\n\n    \n    t += 1\n\nprint(count)\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# while (pl < c - vp):\n\n#     # if (t == 0):\n#     #     t += 1\n#     #     print((str(t), str(count), str(dl), str(pl), 'BBE'))\n#     #     continue\n\n#     pl += vp\n    \n\n#     if (t > t_read - 1):\n#         dl += vd\n    \n#     lc = 0\n#     if (pl <= dl):\n#         count+=1\n#         lc+=1\n#         t = (t_read) - dl/vd - f\n#         print((str(t), str(count), str(dl), str(pl), 'CC'))\n#         # pl = pl + vp\n#         # if ()\n#         dl = 0\n#         # continue\n#     if (lc == 1):\n#         t_read -=1\n#     # print((str(t), str(count), str(dl), str(pl), 'BB'))\n#     t += 1\n   \n\n# print(count)\n\n# 1\n# 2\n# 1\n# 1\n# 8\n\n\n    ",
        "correct": false,
        "task_id": "0228",
        "depth": 1
    },
    {
        "description": "Lena is the most economical girl in Moscow. So, when her dad asks her to buy some food for a trip to the country, she goes to the best store \u2014 \"PriceFixed\". Here are some rules of that store:\n\n  * The store has an infinite number of items of every product. \n  * All products have the same price: 2 rubles per item. \n  * For every product i there is a discount for experienced buyers: if you buy b_i items of products (of any type, not necessarily type i), then for all future purchases of the i-th product there is a 50\\% discount (so you can buy an item of the i-th product for 1 ruble!). \n\n\n\nLena needs to buy n products: she must purchase at least a_i items of the i-th product. Help Lena to calculate the minimum amount of money she needs to spend if she optimally chooses the order of purchasing. Note that if she wants, she can buy more items of some product than needed.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100 000) \u2014 the number of products.\n\nEach of next n lines contains a product description. Each description consists of two integers a_i and b_i (1 \u2264 a_i \u2264 10^{14}, 1 \u2264 b_i \u2264 10^{14}) \u2014 the required number of the i-th product and how many products you need to buy to get the discount on the i-th product. \n\nThe sum of all a_i does not exceed 10^{14}.\n\nOutput\n\nOutput the minimum sum that Lena needs to make all purchases. \n\nExamples\n\nInput\n\n\n3\n3 4\n1 3\n1 5\n\n\nOutput\n\n\n8\n\n\nInput\n\n\n5\n2 7\n2 8\n1 2\n2 4\n1 8\n\n\nOutput\n\n\n12\n\nNote\n\nIn the first example, Lena can purchase the products in the following way:\n\n  1. one item of product 3 for 2 rubles, \n  2. one item of product 1 for 2 rubles, \n  3. one item of product 1 for 2 rubles, \n  4. one item of product 2 for 1 ruble (she can use the discount because 3 items are already purchased), \n  5. one item of product 1 for 1 ruble (she can use the discount because 4 items are already purchased). \n\n\n\nIn total, she spends 8 rubles. It can be proved that it is impossible to spend less.\n\nIn the second example Lena can purchase the products in the following way:\n\n  1. one item of product 1 for 2 rubles, \n  2. two items of product 2 for 2 rubles for each, \n  3. one item of product 5 for 2 rubles, \n  4. one item of product 3 for 1 ruble, \n  5. two items of product 4 for 1 ruble for each, \n  6. one item of product 1 for 1 ruble. \n\n\n\nIn total, she spends 12 rubles.",
        "task_name": "1539_D. PriceFixed",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ninput = sys.stdin.readline\nn = int(input())\nl = []\nfor i in range(n):\n    a,b = map(int,input().split())\n    l.append([a,b])\n\nl.sort(key = lambda x: x[1])\n# print(l)\ni = 0\nj = n-1\nans = 0\ncnt = 0\nwhile i <= j:\n    # print(i,j,cnt,ans)\n    if i == j:\n        e1 = l[i][0]\n        e2 = l[i][1]\n        if cnt >= e1:\n            ans += e1\n            break\n\n        diff = e2-cnt\n        if diff < e1:\n            l[i][0] -= diff\n            ans += (diff * 2)\n            cnt += diff\n            ans += (l[i][0])\n            cnt += (l[i][0])\n            break\n\n        else:\n            diff = e1\n            ans += (diff * 2)\n            cnt += diff\n            break\n\n    else:\n        if cnt >= l[i][1]:\n            req = l[i][0]\n            ans += req\n            cnt += req\n            i += 1\n\n        else:\n            diff = l[i][1]-cnt\n            if diff > l[j][0]:\n                 diff = l[j][0]\n                 l[j][0] = 0\n                 ans += (diff* 2)\n                 cnt += diff\n                 j -= 1\n\n            else:\n                l[j][0] -= diff\n                ans += (diff*2)\n                cnt += diff\n                req = l[i][0]\n                ans += req\n                cnt += req\n                if l[j][0] == 0:\n                    j -= 1\n\n                i += 1\n\nsys.stdout.write(str(ans)+\"\\n\")",
        "correct": false,
        "task_id": "0229",
        "depth": 1
    },
    {
        "description": "Another programming contest is over. You got hold of the contest's final results table. The table has the following data. For each team we are shown two numbers: the number of problems and the total penalty time. However, for no team we are shown its final place.\n\nYou know the rules of comparing the results of two given teams very well. Let's say that team a solved pa problems with total penalty time ta and team b solved pb problems with total penalty time tb. Team a gets a higher place than team b in the end, if it either solved more problems on the contest, or solved the same number of problems but in less total time. In other words, team a gets a higher place than team b in the final results' table if either pa > pb, or pa = pb and ta < tb. \n\nIt is considered that the teams that solve the same number of problems with the same penalty time share all corresponding places. More formally, let's say there is a group of x teams that solved the same number of problems with the same penalty time. Let's also say that y teams performed better than the teams from this group. In this case all teams from the group share places y + 1, y + 2, ..., y + x. The teams that performed worse than the teams from this group, get their places in the results table starting from the y + x + 1-th place.\n\nYour task is to count what number of teams from the given list shared the k-th place. \n\nInput\n\nThe first line contains two integers n and k (1 \u2264 k \u2264 n \u2264 50). Then n lines contain the description of the teams: the i-th line contains two integers pi and ti (1 \u2264 pi, ti \u2264 50) \u2014 the number of solved problems and the total penalty time of the i-th team, correspondingly. All numbers in the lines are separated by spaces. \n\nOutput\n\nIn the only line print the sought number of teams that got the k-th place in the final results' table.\n\nExamples\n\nInput\n\n7 2\n4 10\n4 10\n4 10\n3 20\n2 1\n2 1\n1 10\n\n\nOutput\n\n3\n\n\nInput\n\n5 4\n3 1\n3 1\n5 3\n3 1\n3 1\n\n\nOutput\n\n4\n\nNote\n\nThe final results' table for the first sample is: \n\n  * 1-3 places \u2014 4 solved problems, the penalty time equals 10 \n  * 4 place \u2014 3 solved problems, the penalty time equals 20 \n  * 5-6 places \u2014 2 solved problems, the penalty time equals 1 \n  * 7 place \u2014 1 solved problem, the penalty time equals 10 \n\n\n\nThe table shows that the second place is shared by the teams that solved 4 problems with penalty time 10. There are 3 such teams.\n\nThe final table for the second sample is:\n\n  * 1 place \u2014 5 solved problems, the penalty time equals 3 \n  * 2-5 places \u2014 3 solved problems, the penalty time equals 1 \n\n\n\nThe table shows that the fourth place is shared by the teams that solved 3 problems with penalty time 1. There are 4 such teams.",
        "task_name": "166_A. Rank List",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nfrom math import *\n\ntry:\n    fi = open(\"input.txt\", \"r\")\n    fo = open(\"output.txt\", \"w\")\nexcept:\n    fi = sys.stdin\n    fo = sys.stdout\n \nn,k=map(int,fi.readline().split())\na=[0 for i in range(n)]\nb=[0 for i in range(n)]\n\nfor i in range(n):\n    a[i],b[i]=map(int,fi.readline().split())\n\nfor i in range(n-1):\n    for j in range(n-i-1):\n        if ((a[j]<a[j+1]) | ((a[j]==a[j+1]) & (b[j]>b[j+1]))):\n            x=a[j]\n            a[j]=a[j+1]\n            a[j+1]=x\n            x=b[j]\n            b[j]=b[j+1]\n            b[j+1]=x\nans=0\nfor i in range(n):\n    ans+=(a[i]==a[k-1])&(b[i]==b[k-1])\nfo.write(str(ans))",
        "correct": true,
        "task_id": "0230",
        "depth": 2
    },
    {
        "description": "John Doe started thinking about graphs. After some thought he decided that he wants to paint an undirected graph, containing exactly k cycles of length 3. \n\nA cycle of length 3 is an unordered group of three distinct graph vertices a, b and c, such that each pair of them is connected by a graph edge. \n\nJohn has been painting for long, but he has not been a success. Help him find such graph. Note that the number of vertices there shouldn't exceed 100, or else John will have problems painting it.\n\nInput\n\nA single line contains an integer k (1 \u2264 k \u2264 105) \u2014 the number of cycles of length 3 in the required graph.\n\nOutput\n\nIn the first line print integer n (3 \u2264 n \u2264 100) \u2014 the number of vertices in the found graph. In each of next n lines print n characters \"0\" and \"1\": the i-th character of the j-th line should equal \"0\", if vertices i and j do not have an edge between them, otherwise it should equal \"1\". Note that as the required graph is undirected, the i-th character of the j-th line must equal the j-th character of the i-th line. The graph shouldn't contain self-loops, so the i-th character of the i-th line must equal \"0\" for all i.\n\nExamples\n\nInput\n\n1\n\n\nOutput\n\n3\n011\n101\n110\n\n\nInput\n\n10\n\n\nOutput\n\n5\n01111\n10111\n11011\n11101\n11110",
        "task_name": "233_C. Cycles",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "k = int(raw_input())\n\nn = 0\na = [[0 for x in xrange(100)] for x in xrange(100)] \n\nwhile(k > 0):\n\tm = n\n\twhile(m * (m - 1) / 2 > k):\n\t\tm = m - 1\n\tfor i in range(0, m):\n\t\ta[n][i] = 1\n\t\ta[i][n] = 1\n\tk = k - m * (m - 1) / 2\n\tn = n + 1\n\nprint(n)\nfor i in range(0, n):\n\tfor j in range(0, n):\n\t\tprint(a[i][j]),\n\tprint",
        "correct": false,
        "task_id": "0231",
        "depth": 2
    },
    {
        "description": "The Bitlandians are quite weird people. They have very peculiar customs.\n\nAs is customary, Uncle J. wants to have n eggs painted for Bitruz (an ancient Bitland festival). He has asked G. and A. to do the work.\n\nThe kids are excited because just as is customary, they're going to be paid for the job! \n\nOverall uncle J. has got n eggs. G. named his price for painting each egg. Similarly, A. named his price for painting each egg. It turns out that for each egg the sum of the money both A. and G. want for the painting equals 1000.\n\nUncle J. wants to distribute the eggs between the children so as to give each egg to exactly one child. Also, Uncle J. wants the total money paid to A. to be different from the total money paid to G. by no more than 500.\n\nHelp Uncle J. Find the required distribution of eggs or otherwise say that distributing the eggs in the required manner is impossible.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 106) \u2014 the number of eggs.\n\nNext n lines contain two integers ai and gi each (0 \u2264 ai, gi \u2264 1000; ai + gi = 1000): ai is the price said by A. for the i-th egg and gi is the price said by G. for the i-th egg.\n\nOutput\n\nIf it is impossible to assign the painting, print \"-1\" (without quotes).\n\nOtherwise print a string, consisting of n letters \"G\" and \"A\". The i-th letter of this string should represent the child who will get the i-th egg in the required distribution. Letter \"A\" represents A. and letter \"G\" represents G. If we denote the money Uncle J. must pay A. for the painting as Sa, and the money Uncle J. must pay G. for the painting as Sg, then this inequality must hold: |Sa - Sg| \u2264 500. \n\nIf there are several solutions, you are allowed to print any of them.\n\nExamples\n\nInput\n\n2\n1 999\n999 1\n\n\nOutput\n\nAG\n\n\nInput\n\n3\n400 600\n400 600\n400 600\n\n\nOutput\n\nAGA",
        "task_name": "282_B. Painting Eggs",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def Payment (A,G):\n\tglobal Cheque\n\tglobal backlog\n\tglobal size\n\tif size ==2:\n\t\tfor i in range (2):\n\t\t\tif min(A[i],G[i]) == A[i]:\n\t\t\t\tCheque += 'A'\n\t\t\telse:\n\t\t\t\tCheque += 'G'\n\telse:\n\t\tfor i in range(size):\n\t\t\ta,g = abs(backlog-A[i]),abs(backlog-G[i])\n\t\t\tif i%2 != 0:\n\t\t\t\tif max(a,g) == g:\n\t\t\t\t\tif g<=500:\n\t\t\t\t\t\tCheque += 'G'\n\t\t\t\t\t\tbacklog = g\n\t\t\t\t\telif a <=500:\n\t\t\t\t\t\tCheque += 'A'\n\t\t\t\t\t\tbacklog =a \n\t\t\t\telif a <=500:\n\t\t\t\t\tCheque += 'A'\n\t\t\t\t\tbacklog =a\n\t\t\t\telif g <=500:\n\t\t\t\t\tCheque += 'G'\n\t\t\t\t\tbacklog = g\n\t\t\telse:\n\t\t\t\tif min(a,g) == a:\n\t\t\t\t\tif a<=500:\n\t\t\t\t\t\tCheque += 'A'\n\t\t\t\t\t\tbacklog = a\n\t\t\t\t\telif g<=500:\n\t\t\t\t\t\tCheque += 'G'\n\t\t\t\t\t\tbacklog =g \n\t\t\t\telif g <=500:\n\t\t\t\t\tCheque += 'G'\n\t\t\t\t\tbacklog =g \n\t\t\t\telif a<=500:\n\t\t\t\t\tCheque += 'A'\n\t\t\t\t\tbacklog = a\n\tprint(Cheque)\n\nA,G =[],[]\nsize = input()\nfor i in range(size):\n\ta,b = map(int,raw_input().split())\n\tA.append(a);G.append(b)\nbacklog = 0\nCheque =''\nPayment(A,G)",
        "correct": false,
        "task_id": "0233",
        "depth": 1
    },
    {
        "description": "Unfortunately, Vasya can only sum pairs of integers (a, b), such that for any decimal place at least one number has digit 0 in this place. For example, Vasya can sum numbers 505 and 50, but he cannot sum 1 and 4.\n\nVasya has a set of k distinct non-negative integers d1, d2, ..., dk.\n\nVasya wants to choose some integers from this set so that he could sum any two chosen numbers. What maximal number of integers can he choose in the required manner?\n\nInput\n\nThe first input line contains integer k (1 \u2264 k \u2264 100) \u2014 the number of integers.\n\nThe second line contains k distinct space-separated integers d1, d2, ..., dk (0 \u2264 di \u2264 100).\n\nOutput\n\nIn the first line print a single integer n the maximum number of the chosen integers. In the second line print n distinct non-negative integers \u2014 the required integers.\n\nIf there are multiple solutions, print any of them. You can print the numbers in any order.\n\nExamples\n\nInput\n\n4\n100 10 1 0\n\n\nOutput\n\n4\n0 1 10 100 \n\nInput\n\n3\n2 70 3\n\n\nOutput\n\n2\n2 70 ",
        "task_name": "305_A. Strange Addition",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "input()\nA = map(int, raw_input().split())\nans = []\nfor i in A:\n  if i in range(1, 10):\n    ans += [i]\n    break\nfor i in A:\n  if i in range(10, 100, 10):\n    ans += [i]\n    break\nif len(ans) == 0:\n  for i in A:\n    if i not in (0, 100):\n      ans += [i]\n      break\nif 100 in A:\n  ans += [100]\nif 0 in A:\n  ans += [0]\nprint(len(ans))\nprint(\" \".join(map(str,ans)))",
        "correct": true,
        "task_id": "0234",
        "depth": 1
    },
    {
        "description": "Pavel loves grid mazes. A grid maze is an n \u00d7 m rectangle maze where each cell is either empty, or is a wall. You can go from one cell to another only if both cells are empty and have a common side.\n\nPavel drew a grid maze with all empty cells forming a connected area. That is, you can go from any empty cell to any other one. Pavel doesn't like it when his maze has too little walls. He wants to turn exactly k empty cells into walls so that all the remaining cells still formed a connected area. Help him.\n\nInput\n\nThe first line contains three integers n, m, k (1 \u2264 n, m \u2264 500, 0 \u2264 k < s), where n and m are the maze's height and width, correspondingly, k is the number of walls Pavel wants to add and letter s represents the number of empty cells in the original maze.\n\nEach of the next n lines contains m characters. They describe the original maze. If a character on a line equals \".\", then the corresponding cell is empty and if the character equals \"#\", then the cell is a wall.\n\nOutput\n\nPrint n lines containing m characters each: the new maze that fits Pavel's requirements. Mark the empty cells that you transformed into walls as \"X\", the other cells must be left without changes (that is, \".\" and \"#\").\n\nIt is guaranteed that a solution exists. If there are multiple solutions you can output any of them.\n\nExamples\n\nInput\n\n3 4 2\n#..#\n..#.\n#...\n\n\nOutput\n\n#.X#\nX.#.\n#...\n\n\nInput\n\n5 4 5\n#...\n#.#.\n.#..\n...#\n.#.#\n\n\nOutput\n\n#XXX\n#X#.\nX#..\n...#\n.#.#",
        "task_name": "377_A. Maze",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from collections import deque\n\ndef valid_point(grid, row, col):\n\treturn row >= 0 and row < len(grid) \\\n\tand col >= 0 and col < len(grid[0]) \\\n\tand grid[row][col] == \"nv\"\n\ndef traverse(grid, row, col):\n\tglobal points\n\n\tstack = [(row, col)]\n\twhile stack:\n\t\trow, col = stack.pop()\n\t\tif grid[row][col] != \"nv\": return\n\t\tgrid[row][col] = \".\"\n\t\tpoints.append((row,col))\n\t\t\n\t\tif valid_point(grid, row-1, col): stack.append((row-1, col))\n\t\tif valid_point(grid, row, col-1): stack.append((row, col-1))\n\t\tif valid_point(grid, row+1, col): stack.append((row+1, col))\n\t\tif valid_point(grid, row, col+1): stack.append((row, col+1))\n\nn, m, walls = map(int, raw_input().strip().split())\n\ngrid = []\nfor line in range(n):\n\tgrid.append([c for c in raw_input().strip()])\n\npoints = deque(maxlen=walls)\n\nif walls > 0:\n\tfor r in range(n):\n\t\tfor c in range(m):\n\t\t\tif grid[r][c] == \".\":\n\t\t\t\tstart = r, c\n\t\t\t\tgrid[r][c] = \"nv\" # Not visited\n\t\n\ttraverse(grid, start[0], start[1])\n\n\nwhile points:\n\tr,c = points.pop()\n\tgrid[r][c] = \"X\"\n\nfor line in grid:\n\tfor i in range(len(line)):\n\t\tif line[i] == \"nv\":\n\t\t\tline[i] = \".\"\n\tprint(\"\".join(line))\n",
        "correct": false,
        "task_id": "0235",
        "depth": 2
    },
    {
        "description": "User ainta loves to play with cards. He has a cards containing letter \"o\" and b cards containing letter \"x\". He arranges the cards in a row, and calculates the score of the deck by the formula below.\n\n  1. At first, the score is 0. \n  2. For each block of contiguous \"o\"s with length x the score increases by x2. \n  3. For each block of contiguous \"x\"s with length y the score decreases by y2. \n\n\n\nFor example, if a = 6, b = 3 and ainta have arranged the cards in the order, that is described by string \"ooxoooxxo\", the score of the deck equals 22 - 12 + 32 - 22 + 12 = 9. That is because the deck has 5 blocks in total: \"oo\", \"x\", \"ooo\", \"xx\", \"o\".\n\nUser ainta likes big numbers, so he wants to maximize the score with the given cards. Help ainta make the score as big as possible. Note, that he has to arrange all his cards.\n\nInput\n\nThe first line contains two space-separated integers a and b (0 \u2264 a, b \u2264 105; a + b \u2265 1) \u2014 the number of \"o\" cards and the number of \"x\" cards.\n\nOutput\n\nIn the first line print a single integer v \u2014 the maximum score that ainta can obtain.\n\nIn the second line print a + b characters describing the deck. If the k-th card of the deck contains \"o\", the k-th character must be \"o\". If the k-th card of the deck contains \"x\", the k-th character must be \"x\". The number of \"o\" characters must be equal to a, and the number of \"x \" characters must be equal to b. If there are many ways to maximize v, print any.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nExamples\n\nInput\n\n2 3\n\n\nOutput\n\n-1\nxoxox\n\n\nInput\n\n4 0\n\n\nOutput\n\n16\noooo\n\nInput\n\n0 4\n\n\nOutput\n\n-16\nxxxx",
        "task_name": "399_C. Cards",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdout\ndef main():\n    a, b = map(int, raw_input().split())\n    if not a or not b:\n        stdout.write(str(a * a - b * b) + '\\n')\n        stdout.write('o' * a + 'x' * b)\n        return\n    ans = -10 ** 17\n    v = 0\n    for i in xrange(1, a+1):\n        x, y = divmod(b, i + 1)\n        t = i - 1 + (a - i + 1) * (a - i + 1) - y * (x + 1) * (x + 1) - (i + 1 - y) * x * x\n        if ans < t:\n            ans = t\n            v = i\n    x, y = divmod(b, v + 1)\n    c = ['o'] * (v - 1) + ['o' * (a - v + 1)]\n    d = ['x' * (x + 1)] * y + ['x' * x] * (a + 1 - y)\n    e = []\n    for j in xrange(v):\n        e.append(d[j])\n        e.append(c[j])\n    e.append(d[-1])       \n    stdout.write(str(ans) + '\\n')\n    stdout.write(''.join(e))\nmain()\n",
        "correct": true,
        "task_id": "0236",
        "depth": 1
    },
    {
        "description": "Bizon the Champion isn't just a bison. He also is a favorite of the \"Bizons\" team.\n\nAt a competition the \"Bizons\" got the following problem: \"You are given two distinct words (strings of English letters), s and t. You need to transform word s into word t\". The task looked simple to the guys because they know the suffix data structures well. Bizon Senior loves suffix automaton. By applying it once to a string, he can remove from this string any single character. Bizon Middle knows suffix array well. By applying it once to a string, he can swap any two characters of this string. The guys do not know anything about the suffix tree, but it can help them do much more. \n\nBizon the Champion wonders whether the \"Bizons\" can solve the problem. Perhaps, the solution do not require both data structures. Find out whether the guys can solve the problem and if they can, how do they do it? Can they solve it either only with use of suffix automaton or only with use of suffix array or they need both structures? Note that any structure may be used an unlimited number of times, the structures may be used in any order.\n\nInput\n\nThe first line contains a non-empty word s. The second line contains a non-empty word t. Words s and t are different. Each word consists only of lowercase English letters. Each word contains at most 100 letters.\n\nOutput\n\nIn the single line print the answer to the problem. Print \"need tree\" (without the quotes) if word s cannot be transformed into word t even with use of both suffix array and suffix automaton. Print \"automaton\" (without the quotes) if you need only the suffix automaton to solve the problem. Print \"array\" (without the quotes) if you need only the suffix array to solve the problem. Print \"both\" (without the quotes), if you need both data structures to solve the problem.\n\nIt's guaranteed that if you can solve the problem only with use of suffix array, then it is impossible to solve it only with use of suffix automaton. This is also true for suffix automaton.\n\nExamples\n\nInput\n\nautomaton\ntomat\n\n\nOutput\n\nautomaton\n\n\nInput\n\narray\narary\n\n\nOutput\n\narray\n\n\nInput\n\nboth\nhot\n\n\nOutput\n\nboth\n\n\nInput\n\nneed\ntree\n\n\nOutput\n\nneed tree\n\nNote\n\nIn the third sample you can act like that: first transform \"both\" into \"oth\" by removing the first character using the suffix automaton and then make two swaps of the string using the suffix array and get \"hot\".",
        "task_name": "448_B. Suffix Structures",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def isss(s,s1):\n    ln= len(s1)\n    lll= len(s)\n    i=0\n    j=0\n    while i<ln and j<lll:\n        if s1[i]==s[j]:\n            j=j+1\n        i=i+1\n    if j==lll:\n        return True\n    return False\ndef main():\n    s = raw_input()\n    s2= raw_input()\n    if ''.join(sorted(s)) == ''.join(sorted(s2)):\n        print(\"array\")\n        return 0;\n    if isss(s2,s) == True:\n        print(\"automaton\")\n        return 0;\n    if isss(sorted(s2),sorted(s)):\n        print(\"both\")\n        return 0;\n    print(\"need tree\")\n#print(isss('tomat','automaton'))\nmain()\n",
        "correct": true,
        "task_id": "0237",
        "depth": 1
    },
    {
        "description": "Vanya and his friend Vova play a computer game where they need to destroy n monsters to pass a level. Vanya's character performs attack with frequency x hits per second and Vova's character performs attack with frequency y hits per second. Each character spends fixed time to raise a weapon and then he hits (the time to raise the weapon is 1 / x seconds for the first character and 1 / y seconds for the second one). The i-th monster dies after he receives ai hits. \n\nVanya and Vova wonder who makes the last hit on each monster. If Vanya and Vova make the last hit at the same time, we assume that both of them have made the last hit.\n\nInput\n\nThe first line contains three integers n,x,y (1 \u2264 n \u2264 105, 1 \u2264 x, y \u2264 106) \u2014 the number of monsters, the frequency of Vanya's and Vova's attack, correspondingly.\n\nNext n lines contain integers ai (1 \u2264 ai \u2264 109) \u2014 the number of hits needed do destroy the i-th monster.\n\nOutput\n\nPrint n lines. In the i-th line print word \"Vanya\", if the last hit on the i-th monster was performed by Vanya, \"Vova\", if Vova performed the last hit, or \"Both\", if both boys performed it at the same time.\n\nExamples\n\nInput\n\n4 3 2\n1\n2\n3\n4\n\n\nOutput\n\nVanya\nVova\nVanya\nBoth\n\n\nInput\n\n2 1 1\n1\n2\n\n\nOutput\n\nBoth\nBoth\n\nNote\n\nIn the first sample Vanya makes the first hit at time 1 / 3, Vova makes the second hit at time 1 / 2, Vanya makes the third hit at time 2 / 3, and both boys make the fourth and fifth hit simultaneously at the time 1.\n\nIn the second sample Vanya and Vova make the first and second hit simultaneously at time 1.",
        "task_name": "492_D. Vanya and Computer Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\na=map(int,raw_input().split())\nn=a[0]\nx=float(a[1])\ny=float(a[2])\nmonstor=[]\nfor i in xrange(0,n):\n    monstor.append(int(raw_input()))\nMaxMonstor=max(monstor)\norder=[]\nx_pointer=1/x\ny_pointer=1/y\ni=0\n\nwhile(i<MaxMonstor):\n    if(x_pointer==y_pointer):\n        order.append(\"Both\")\n        order.append(\"Both\")\n        x_pointer=x_pointer+1/x\n        y_pointer=y_pointer+1/y\n        i=i+2\n        continue\n    if(x_pointer<y_pointer):\n        order.append(\"Vanya\")\n        x_pointer=x_pointer+1/x\n        i=i+1\n    if(x_pointer>y_pointer):\n        order.append(\"Vova\")\n        y_pointer=y_pointer+1/y\n        i=i+1\n        \nfor i in xrange(0,n):\n    print(order[monstor[i]-1])\n    \n",
        "correct": false,
        "task_id": "0238",
        "depth": 1
    },
    {
        "description": "Vasya is interested in arranging dominoes. He is fed up with common dominoes and he uses the dominoes of different heights. He put n dominoes on the table along one axis, going from left to right. Every domino stands perpendicular to that axis so that the axis passes through the center of its base. The i-th domino has the coordinate xi and the height hi. Now Vasya wants to learn for every domino, how many dominoes will fall if he pushes it to the right. Help him do that. \n\nConsider that a domino falls if it is touched strictly above the base. In other words, the fall of the domino with the initial coordinate x and height h leads to the fall of all dominoes on the segment [x + 1, x + h - 1].\n\n<image>\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 105) which is the number of dominoes. Then follow n lines containing two integers xi and hi ( - 108 \u2264 xi \u2264 108, 2 \u2264 hi \u2264 108) each, which are the coordinate and height of every domino. No two dominoes stand on one point.\n\nOutput\n\nPrint n space-separated numbers zi \u2014 the number of dominoes that will fall if Vasya pushes the i-th domino to the right (including the domino itself).\n\nExamples\n\nInput\n\n4\n16 5\n20 5\n10 10\n18 2\n\n\nOutput\n\n3 1 4 1 \n\nInput\n\n4\n0 10\n1 5\n9 10\n15 10\n\n\nOutput\n\n4 1 2 1 ",
        "task_name": "56_E. Domino Principle",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n\nimport sys\n\ndef get():\n    return sys.stdin.readline().split()\n\ndom = []\nn = int (get()[0])\nfor i in range (n):\n    dom.append (get())\n    dom[i].append (i)\n    for j in range (len (dom[i])):\n        dom[i][j] = int (dom[i][j])\ndom.sort()\n\nseg = 4 * n * [0]\nres = n * [0]\ninf = 1000 * 1000 * 100 + 10\n\ndef update (i, val, s, e, x):\n    seg[x] = max (seg[x], val)\n    if e - s < 2:\n        return;\n    m = (e + s) / 2\n    if i < m:\n        update (i, val, s, m, 2 * x)\n    else:\n        update (i, val, m, e, 2 * x + 1)\n\ndef find (x, s, e, l, r):\n    print (\"infind %d %d-%d %d-%d\" % (x, s, e, l, r))\n    if s >= r or e <= l:\n        return 0\n    print (\"passed\")\n    if (s == l and e == r) or e - s < 2:\n        print (\"wtf? %d\" % (seg[x]))\n        return seg[x]\n    m = (e + s) / 2\n    return max (find (2 * x, s, m, l, min (r, m)), find (2 * x + 1, m, e, max (m, l), r))\n\ndef query (i):\n    [x, h] = dom[i][0:2]\n    s = i; e = n\n    while e - s > 1:\n        m = int ((e + s) / 2)\n        print (\"bs %d\" % m)\n        if dom[m][0] < x + h:\n            s = m\n        else:\n            e = m\n\n    print (\"find %d %d - %d %d\" % (i, e, x, h))\n    return find (1, 0, n, i, e)\n\nindx = n\nwhile indx > 0:\n    indx -= 1\n    res[indx] = [dom[indx][2], max (indx + 1, query(indx)), indx]\n    print (\"res %d: %d\" % (indx, res[indx][1]))\n    update (indx, res[indx][1], 0, n, 1)\n    log = ''\n    for x in seg:\n        log += str (x) + ' '\n    print (log)\n\nprint (res)\n\nres.sort()\n\nout = ''\nfor i in range (n):\n    out += str (res[i][1] - res[i][2]) + ' '\nprint (out)",
        "correct": false,
        "task_id": "0239",
        "depth": 2
    },
    {
        "description": "A schoolboy named Vasya loves reading books on programming and mathematics. He has recently read an encyclopedia article that described the method of median smoothing (or median filter) and its many applications in science and engineering. Vasya liked the idea of the method very much, and he decided to try it in practice.\n\nApplying the simplest variant of median smoothing to the sequence of numbers a1, a2, ..., an will result a new sequence b1, b2, ..., bn obtained by the following algorithm:\n\n  * b1 = a1, bn = an, that is, the first and the last number of the new sequence match the corresponding numbers of the original sequence. \n  * For i = 2, ..., n - 1 value bi is equal to the median of three values ai - 1, ai and ai + 1. \n\n\n\nThe median of a set of three numbers is the number that goes on the second place, when these three numbers are written in the non-decreasing order. For example, the median of the set 5, 1, 2 is number 2, and the median of set 1, 0, 1 is equal to 1.\n\nIn order to make the task easier, Vasya decided to apply the method to sequences consisting of zeros and ones only.\n\nHaving made the procedure once, Vasya looked at the resulting sequence and thought: what if I apply the algorithm to it once again, and then apply it to the next result, and so on? Vasya tried a couple of examples and found out that after some number of median smoothing algorithm applications the sequence can stop changing. We say that the sequence is stable, if it does not change when the median smoothing is applied to it.\n\nNow Vasya wonders, whether the sequence always eventually becomes stable. He asks you to write a program that, given a sequence of zeros and ones, will determine whether it ever becomes stable. Moreover, if it ever becomes stable, then you should determine what will it look like and how many times one needs to apply the median smoothing algorithm to initial sequence in order to obtain a stable one.\n\nInput\n\nThe first input line of the input contains a single integer n (3 \u2264 n \u2264 500 000) \u2014 the length of the initial sequence.\n\nThe next line contains n integers a1, a2, ..., an (ai = 0 or ai = 1), giving the initial sequence itself.\n\nOutput\n\nIf the sequence will never become stable, print a single number  - 1.\n\nOtherwise, first print a single integer \u2014 the minimum number of times one needs to apply the median smoothing algorithm to the initial sequence before it becomes is stable. In the second line print n numbers separated by a space \u2014 the resulting sequence itself.\n\nExamples\n\nInput\n\n4\n0 0 1 1\n\n\nOutput\n\n0\n0 0 1 1\n\n\nInput\n\n5\n0 1 0 1 0\n\n\nOutput\n\n2\n0 0 0 0 0\n\nNote\n\nIn the second sample the stabilization occurs in two steps: <image>, and the sequence 00000 is obviously stable.",
        "task_name": "591_C. Median Smoothing",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from math import *\nfrom Queue import *\nfrom sys import *\n\n\ndef update(l):\n    new = []\n    new.append(l[0])\n    for i in range(1,len(l)-1):\n        new.append((l[i-1]+l[i]+l[i+1])/2)\n    new.append(l[-1])\n    return new\n        \n        \n\nn = int(raw_input())\nl = map(int, raw_input().split())\nbr = []\nfor i in range(n-1):\n    if l[i] == l[i+1]:\n        br.append(i+1)\nc = []\nfor i in range(len(br)-1):\n    if br[i+1] == br[i] + 1:\n        pass\n    else:\n        c.append((br[i+1] - br[i] - 2)/2)\nif len(c) == 0:\n    m = (n-1)/2\nelse:\n    m = max(c)\nfor i in range(m):\n    l = update(l)\nprint(m)\nprint(' '.join(map(str, l)))\n",
        "correct": false,
        "task_id": "0240",
        "depth": 1
    },
    {
        "description": "Peter got a new snow blower as a New Year present. Of course, Peter decided to try it immediately. After reading the instructions he realized that it does not work like regular snow blowing machines. In order to make it work, you need to tie it to some point that it does not cover, and then switch it on. As a result it will go along a circle around this point and will remove all the snow from its path.\n\nFormally, we assume that Peter's machine is a polygon on a plane. Then, after the machine is switched on, it will make a circle around the point to which Peter tied it (this point lies strictly outside the polygon). That is, each of the points lying within or on the border of the polygon will move along the circular trajectory, with the center of the circle at the point to which Peter tied his machine.\n\nPeter decided to tie his car to point P and now he is wondering what is the area of \u200b\u200bthe region that will be cleared from snow. Help him.\n\nInput\n\nThe first line of the input contains three integers \u2014 the number of vertices of the polygon n (<image>), and coordinates of point P.\n\nEach of the next n lines contains two integers \u2014 coordinates of the vertices of the polygon in the clockwise or counterclockwise order. It is guaranteed that no three consecutive vertices lie on a common straight line.\n\nAll the numbers in the input are integers that do not exceed 1 000 000 in their absolute value.\n\nOutput\n\nPrint a single real value number \u2014 the area of the region that will be cleared. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6. \n\nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if <image>.\n\nExamples\n\nInput\n\n3 0 0\n0 1\n-1 2\n1 2\n\n\nOutput\n\n12.566370614359172464\n\n\nInput\n\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n\n\nOutput\n\n21.991148575128551812\n\nNote\n\nIn the first sample snow will be removed from that area:\n\n<image>",
        "task_name": "613_A. Peter and Snow Blower",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def main():\n\tfrom sys import stdin,stdout\n\tfrom math import pi\n\tr,w=stdin.readline,stdout.write\n\tn,x,y = map(int,r().split())\n\tpoints = [map(int,r().split()) for i in xrange(n)]\n\tmaxD,minD = 0,10000000\n\tfor i in xrange(n):\n\t\tdistance = ((abs(x-points[i][0]))**2 + (abs(y-points[i][1]))**2)**(1/2.)\n\t\tif distance > maxD:\tmaxD = distance \n\t\tif distance < minD: minD = distance\n\tfor i in xrange(n):\n\t\tp1,p2 = points[i],points[(i+1)%n]\n\t\tpx = p2[0]-p1[0]; py = p2[1]-p1[1]\n\t\tu = ((x-p1[0])*px + (y-p1[1])*py)/((px*1.)**2 + (py*1.)**2)\n\t\tif u > 1: u = 1\n\t\tif u < 0: u = 0\n\t\tx1 = p1[0] + u*px; y1 = p1[1] + u*py\n\t\tdx = x1 - x; dy = y1 - y\n\t\tdistance = (dx*dx + dy*dy)**(0.5)\n\t\tif distance > maxD:\tmaxD = distance \n\t\tif distance < minD: minD = distance\n\tminA = pi*(minD)**2\n\tmaxA = pi*(maxD)**2\n\tw(str(maxA-minA))\nmain()",
        "correct": true,
        "task_id": "0241",
        "depth": 1
    },
    {
        "description": "Dante is engaged in a fight with \"The Savior\". Before he can fight it with his sword, he needs to break its shields. He has two guns, Ebony and Ivory, each of them is able to perform any non-negative number of shots.\n\nFor every bullet that hits the shield, Ebony deals a units of damage while Ivory deals b units of damage. In order to break the shield Dante has to deal exactly c units of damage. Find out if this is possible.\n\nInput\n\nThe first line of the input contains three integers a, b, c (1 \u2264 a, b \u2264 100, 1 \u2264 c \u2264 10 000) \u2014 the number of units of damage dealt by Ebony gun and Ivory gun, and the total number of damage required to break the shield, respectively.\n\nOutput\n\nPrint \"Yes\" (without quotes) if Dante can deal exactly c damage to the shield and \"No\" (without quotes) otherwise.\n\nExamples\n\nInput\n\n4 6 15\n\n\nOutput\n\nNo\n\n\nInput\n\n3 2 7\n\n\nOutput\n\nYes\n\n\nInput\n\n6 11 6\n\n\nOutput\n\nYes\n\nNote\n\nIn the second sample, Dante can fire 1 bullet from Ebony and 2 from Ivory to deal exactly 1\u00b73 + 2\u00b72 = 7 damage. In the third sample, Dante can fire 1 bullet from ebony and no bullets from ivory to do 1\u00b76 + 0\u00b711 = 6 damage. ",
        "task_name": "633_A. Ebony and Ivory",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a,b,c = map(int,raw_input().split())\n\nf = False\n\nif ((c% a == 0) or (c % b == 0)):\n    print(\"Yes\")\n    f = True\n\nelse:\n\ti1 = 1\n\ti2 = 1\n\twhile(a < c):\n\t\ta = a*i1\n\t\twhile(b < c):\n\t\t\tb = b*i2\n\t\t\td = a + b\n\t\t\tif(d == c):\n\t\t\t\tprint(\"Yes\")\n\t\t\t\tf = True\n\t\t\t\tbreak\n\t\t\ti2+=1\n\t\ti1+=1\n\nif (f == False):\n\tprint(\"No\")\n\n\t\t\t\t\n\t\t\t\t\n\n\t   \t  \t    \t\t \t\t\t \t\t \t\t \t\t \t",
        "correct": false,
        "task_id": "0242",
        "depth": 2
    },
    {
        "description": "In one of the games Arkady is fond of the game process happens on a rectangular field. In the game process Arkady can buy extensions for his field, each extension enlarges one of the field sizes in a particular number of times. Formally, there are n extensions, the i-th of them multiplies the width or the length (by Arkady's choice) by ai. Each extension can't be used more than once, the extensions can be used in any order.\n\nNow Arkady's field has size h \u00d7 w. He wants to enlarge it so that it is possible to place a rectangle of size a \u00d7 b on it (along the width or along the length, with sides parallel to the field sides). Find the minimum number of extensions needed to reach Arkady's goal.\n\nInput\n\nThe first line contains five integers a, b, h, w and n (1 \u2264 a, b, h, w, n \u2264 100 000) \u2014 the sizes of the rectangle needed to be placed, the initial sizes of the field and the number of available extensions.\n\nThe second line contains n integers a1, a2, ..., an (2 \u2264 ai \u2264 100 000), where ai equals the integer a side multiplies by when the i-th extension is applied.\n\nOutput\n\nPrint the minimum number of extensions needed to reach Arkady's goal. If it is not possible to place the rectangle on the field with all extensions, print -1. If the rectangle can be placed on the initial field, print 0.\n\nExamples\n\nInput\n\n3 3 2 4 4\n2 5 4 10\n\n\nOutput\n\n1\n\n\nInput\n\n3 3 3 3 5\n2 3 5 4 2\n\n\nOutput\n\n0\n\n\nInput\n\n5 5 1 2 3\n2 2 3\n\n\nOutput\n\n-1\n\n\nInput\n\n3 4 1 1 3\n2 3 2\n\n\nOutput\n\n3\n\nNote\n\nIn the first example it is enough to use any of the extensions available. For example, we can enlarge h in 5 times using the second extension. Then h becomes equal 10 and it is now possible to place the rectangle on the field.",
        "task_name": "799_D. Field expansion",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "f = lambda: map(int, raw_input().split())\na, b, h, w, n = f()\nc = sorted(list(f()), key=lambda x: -x)\nd = {(h, w), (w, h)}\nfor i, q in enumerate([1] + c):\n    for u, v in d.copy():\n        h, w = u, v * q\n        if a <= w and b <= h or a <= h and b <= w:\n            print(i)\n            exit()\n        d.add((h, w))\n        d.add((w, h))\nprint(-1)",
        "correct": true,
        "task_id": "0244",
        "depth": 2
    },
    {
        "description": "Luba has a ticket consisting of 6 digits. In one move she can choose digit in any position and replace it with arbitrary digit. She wants to know the minimum number of digits she needs to replace in order to make the ticket lucky.\n\nThe ticket is considered lucky if the sum of first three digits equals to the sum of last three digits.\n\nInput\n\nYou are given a string consisting of 6 characters (all characters are digits from 0 to 9) \u2014 this string denotes Luba's ticket. The ticket can start with the digit 0.\n\nOutput\n\nPrint one number \u2014 the minimum possible number of digits Luba needs to replace to make the ticket lucky.\n\nExamples\n\nInput\n\n000000\n\n\nOutput\n\n0\n\n\nInput\n\n123456\n\n\nOutput\n\n2\n\n\nInput\n\n111000\n\n\nOutput\n\n1\n\nNote\n\nIn the first example the ticket is already lucky, so the answer is 0.\n\nIn the second example Luba can replace 4 and 5 with zeroes, and the ticket will become lucky. It's easy to see that at least two replacements are required.\n\nIn the third example Luba can replace any zero with 3. It's easy to see that at least one replacement is required.",
        "task_name": "845_B. Luba And The Ticket",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\ns, ans = stdin.readline().strip(), float('inf')\nfor i in range(0, 10 ** 6):\n    cur, tem = i, 0\n    for j in range(5, -1, -1):\n        tem += (cur % 10) != int(s[j])\n        cur //= 10\n\n    if sum([int(x) for x in str(i)[:3]]) == sum([int(y) for y in str(i)[3:]]):\n        ans = min(ans, tem)\nprint(ans)\n",
        "correct": false,
        "task_id": "0245",
        "depth": 2
    },
    {
        "description": "You can perfectly predict the price of a certain stock for the next N days. You would like to profit on this knowledge, but only want to transact one share of stock per day. That is, each day you will either buy one share, sell one share, or do nothing. Initially you own zero shares, and you cannot sell shares when you don't own any. At the end of the N days you would like to again own zero shares, but want to have as much money as possible.\n\nInput\n\nInput begins with an integer N (2 \u2264 N \u2264 3\u00b7105), the number of days.\n\nFollowing this is a line with exactly N integers p1, p2, ..., pN (1 \u2264 pi \u2264 106). The price of one share of stock on the i-th day is given by pi.\n\nOutput\n\nPrint the maximum amount of money you can end up with at the end of N days.\n\nExamples\n\nInput\n\n9\n10 5 4 7 9 12 6 2 10\n\n\nOutput\n\n20\n\n\nInput\n\n20\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4\n\n\nOutput\n\n41\n\nNote\n\nIn the first example, buy a share at 5, buy another at 4, sell one at 9 and another at 12. Then buy at 2 and sell at 10. The total profit is  - 5 - 4 + 9 + 12 - 2 + 10 = 20.",
        "task_name": "865_D. Buy Low Sell High",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from heapq import heappush, heappop\n\nn = int(raw_input())\np = map(int, raw_input().split())\n\nh, ans = [], 0\nfor i in range(n):\n    if len(h) > 0 and p[i] > h[0]:\n        ans += p[i] - h[0]\n        heappop(h)\n        heappush(h, p[i])\n    heappush(h, p[i])\nprint (ans)\n",
        "correct": true,
        "task_id": "0246",
        "depth": 1
    },
    {
        "description": "To become a millionaire, M-kun has decided to make money by trading in the next N days. Currently, he has 1000 yen and no stocks - only one kind of stock is issued in the country where he lives.\n\nHe is famous across the country for his ability to foresee the future. He already knows that the price of one stock in the next N days will be as follows:\n\n* A_1 yen on the 1-st day, A_2 yen on the 2-nd day, ..., A_N yen on the N-th day.\n\n\n\nIn the i-th day, M-kun can make the following trade any number of times (possibly zero), within the amount of money and stocks that he has at the time.\n\n* Buy stock: Pay A_i yen and receive one stock.\n* Sell stock: Sell one stock for A_i yen.\n\n\n\nWhat is the maximum possible amount of money that M-kun can have in the end by trading optimally?\n\nConstraints\n\n* 2 \\leq N \\leq 80\n* 100 \\leq A_i \\leq 200\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 \\cdots A_N\n\n\nOutput\n\nPrint the maximum possible amount of money that M-kun can have in the end, as an integer.\n\nExamples\n\nInput\n\n7\n100 130 130 130 115 115 150\n\n\nOutput\n\n1685\n\n\nInput\n\n6\n200 180 160 140 120 100\n\n\nOutput\n\n1000\n\n\nInput\n\n2\n157 193\n\n\nOutput\n\n1216",
        "task_name": "p02603 M-SOLUTIONS Programming Contest 2020 - Road to Millionaire",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "FAST_IO = 1\nif FAST_IO:\n    import io, sys, atexit\n    rr = iter(sys.stdin.read().splitlines()).next\n    sys.stdout = _OUTPUT_BUFFER = io.BytesIO()\n\n    @atexit.register\n    def write():\n        sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\nelse:\n    rr = raw_input\nrri = lambda: int(rr())\nrrm = lambda: map(int, rr().split())\nrrmm = lambda n: [rrm() for _ in xrange(n)]\nN = rri()\narr = rrm()\ndef solve(N, arr):\n    memo = {}\n    def find(status, cur_money, idx):\n        if (status, cur_money, idx) in memo:\n            return memo[(status, cur_money, idx)]\n        if idx == N-1:\n            if not status:\n                return cur_money\n            else:\n                return cur_money+ status * arr[idx]\n        ans = cur_money\n        if status == 0:\n            nxt_status = cur_money//arr[idx]\n            nxt_money = cur_money % arr[idx]\n            for i in range(idx+1, N):\n                ans = max(find(nxt_status, nxt_money, i), ans)\n                ans = max(ans, find(status, cur_money, i))\n        else:\n            nxt_status = 0\n            nxt_money = cur_money+status*arr[idx]\n            for i in range(idx+1, N):\n                ans = max(find(nxt_status, nxt_money, i), ans)\n                ans = max(ans, find(status, cur_money, i))\n        memo[(status, cur_money, idx)] = ans;\n        return ans\n    return find(0, 1000, 0)\nprint(solve(N, arr))\n        ",
        "correct": false,
        "task_id": "0249",
        "depth": 1
    },
    {
        "description": "You are given two integer sequences S and T of length N and M, respectively, both consisting of integers between 1 and 10^5 (inclusive).\n\nIn how many pairs of a subsequence of S and a subsequence of T do the two subsequences are the same in content?\n\nHere the subsequence of A is a sequence obtained by removing zero or more elements from A and concatenating the remaining elements without changing the order.\n\nFor both S and T, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.\n\nSince the answer can be tremendous, print the number modulo 10^9+7.\n\nConstraints\n\n* 1 \\leq N, M \\leq 2 \\times 10^3\n* The length of S is N.\n* The length of T is M.\n* 1 \\leq S_i, T_i \\leq 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nS_1 S_2 ... S_{N-1} S_{N}\nT_1 T_2 ... T_{M-1} T_{M}\n\n\nOutput\n\nPrint the number of pairs of a subsequence of S and a subsequence of T such that the subsequences are the same in content, modulo 10^9+7.\n\nExamples\n\nInput\n\n2 2\n1 3\n3 1\n\n\nOutput\n\n3\n\n\nInput\n\n2 2\n1 1\n1 1\n\n\nOutput\n\n6\n\n\nInput\n\n4 4\n3 4 5 6\n3 4 5 6\n\n\nOutput\n\n16\n\n\nInput\n\n10 9\n9 6 5 7 5 9 8 5 6 7\n8 6 8 5 5 7 9 9 7\n\n\nOutput\n\n191\n\n\nInput\n\n20 20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\nOutput\n\n846527861",
        "task_name": "p03003 AtCoder Beginner Contest 130 - Common Subsequence",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "source = raw_input()\ninput = source.split(\" \")\nn, m = int(input[0]), int(input[1])\ns = [0] + [int(i) for i in raw_input().split(\" \")]\nt = [0] + [int(i) for i in raw_input().split(\" \")]\nMOD = 10**9 + 7\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n        if s[i] == t[j]:\n            dp[i][j] += dp[i - 1][j - 1] + 1\n        dp[i][j] %= MOD\n\nprint((dp[n][m] + 1) % MOD)",
        "correct": false,
        "task_id": "0250",
        "depth": 2
    },
    {
        "description": "There are N boxes arranged in a row from left to right. The i-th box from the left contains A_i candies.\n\nYou will take out the candies from some consecutive boxes and distribute them evenly to M children.\n\nSuch being the case, find the number of the pairs (l, r) that satisfy the following:\n\n* l and r are both integers and satisfy 1 \\leq l \\leq r \\leq N.\n* A_l + A_{l+1} + ... + A_r is a multiple of M.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 2 \\leq M \\leq 10^9\n* 1 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 A_2 ... A_N\n\n\nOutput\n\nPrint the number of the pairs (l, r) that satisfy the conditions.\n\nNote that the number may not fit into a 32-bit integer type.\n\nExamples\n\nInput\n\n3 2\n4 1 5\n\n\nOutput\n\n3\n\n\nInput\n\n13 17\n29 7 5 7 9 51 7 13 8 55 42 9 81\n\n\nOutput\n\n6\n\n\nInput\n\n10 400000000\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n25",
        "task_name": "p03287 AtCoder Beginner Contest 105 - Candy Distribution",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N, M = map(int, raw_input().split())\nA = map(int, raw_input().split())\n\nAX = [0]\ns = 0\nfor a in A:\n    s += a\n    AX.append(s)\n\nresult = 0\nfor i in range(1, N+1):\n    for j in range(i, N+1):\n        if (AX[j] - AX[i-1]) % M == 0:\n            result += 1\nprint(result)\n",
        "correct": false,
        "task_id": "0251",
        "depth": 2
    },
    {
        "description": "Let's play Hit and Blow game. A imagines four numbers and B guesses the numbers. After B picks out four numbers, A answers:\n\n* The number of numbers which have the same place with numbers A imagined (Hit)\n* The number of numbers included (but different place) in the numbers A imagined (Blow)\n\n\n\nFor example, if A imagined numbers:\n\n\n9 1 8 2\n\n\nand B chose:\n\n\n4 1 5 9\n\n\nA should say 1 Hit and 1 Blow.\n\nWrite a program which reads four numbers A imagined and four numbers B chose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\n\n\n\nInput\n\nThe input consists of multiple datasets. Each dataset set consists of:\n\n\na1 a2 a3 a4\nb1 b2 b3 b4\n\n\n, where ai (0 \u2264 ai \u2264 9) is i-th number A imagined and bi (0 \u2264 bi \u2264 9) is i-th number B chose.\n\nThe input ends with EOF. The number of datasets is less than or equal to 50.\n\nOutput\n\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\n\nExample\n\nInput\n\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\n\n\nOutput\n\n1 1\n3 0",
        "task_name": "p00025 Hit and Blow",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import (division, absolute_import, print_function,\n                        unicode_literals)\nfrom sys import stdin\n\nwhile True:\n    a = stdin.readline().strip()\n    if not a:\n        break\n    b = stdin.readline().strip()\n    if a == b:\n        print('4 0')\n        continue\n    hit = sum(int(a[i] == b[i]) for i in xrange(0, 7, 2))\n    blow = sum(int(b[i] in a) for i in xrange(0, 7, 2)) - hit\n    print(hit, blow)",
        "correct": true,
        "task_id": "0253",
        "depth": 1
    },
    {
        "description": "How Many Divisors?\n\nWrite a program which reads three integers a, b and c, and prints the number of divisors of c between a and b.\n\nConstraints\n\n* 1 \u2264 a, b, c \u2264 10000\n* a \u2264 b\n\nInput\n\nThree integers a, b and c are given in a line separated by a single space.\n\nOutput\n\nPrint the number of divisors in a line.\n\nExample\n\nInput\n\n5 14 80\n\n\nOutput\n\n3",
        "task_name": "p02398 How Many Divisors?",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "temp = raw_input()\ntemp_list = temp.split()\na = temp_list[0]\nb = temp_list[1]\nc = temp_list[2]\n\ncount = 0\nfor i in range(a,b):\n  if c/i == 0:\n    count += 1\n\nprint(count)\n",
        "correct": false,
        "task_id": "0254",
        "depth": 1
    },
    {
        "description": "Vasya's house is situated in a forest, and there is a mushroom glade near it. The glade consists of two rows, each of which can be divided into n consecutive cells. For each cell Vasya knows how fast the mushrooms grow in this cell (more formally, how many grams of mushrooms grow in this cell each minute). Vasya spends exactly one minute to move to some adjacent cell. Vasya cannot leave the glade. Two cells are considered adjacent if they share a common side. When Vasya enters some cell, he instantly collects all the mushrooms growing there.\n\nVasya begins his journey in the left upper cell. Every minute Vasya must move to some adjacent cell, he cannot wait for the mushrooms to grow. He wants to visit all the cells exactly once and maximize the total weight of the collected mushrooms. Initially, all mushrooms have a weight of 0. Note that Vasya doesn't need to return to the starting cell.\n\nHelp Vasya! Calculate the maximum total weight of mushrooms he can collect.\n\nInput\n\nThe first line contains the number n (1 \u2264 n \u2264 3\u00b7105) \u2014 the length of the glade.\n\nThe second line contains n numbers a1, a2, ..., an (1 \u2264 ai \u2264 106) \u2014 the growth rate of mushrooms in the first row of the glade.\n\nThe third line contains n numbers b1, b2, ..., bn (1 \u2264 bi \u2264 106) is the growth rate of mushrooms in the second row of the glade.\n\nOutput\n\nOutput one number \u2014 the maximum total weight of mushrooms that Vasya can collect by choosing the optimal route. Pay attention that Vasya must visit every cell of the glade exactly once.\n\nExamples\n\nInput\n\n3\n1 2 3\n6 5 4\n\n\nOutput\n\n70\n\n\nInput\n\n3\n1 1000 10000\n10 100 100000\n\n\nOutput\n\n543210\n\nNote\n\nIn the first test case, the optimal route is as follows: \n\n<image> Thus, the collected weight of mushrooms will be 0\u00b71 + 1\u00b72 + 2\u00b73 + 3\u00b74 + 4\u00b75 + 5\u00b76 = 70.\n\nIn the second test case, the optimal route is as follows: \n\n<image> Thus, the collected weight of mushrooms will be 0\u00b71 + 1\u00b710 + 2\u00b7100 + 3\u00b71000 + 4\u00b710000 + 5\u00b7100000 = 543210.",
        "task_name": "1016_C. Vasya And The Mushrooms",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function,division\nimport sys\nif sys.version_info < (3, 0):\n    range = xrange\ninput = sys.stdin.readline\n\nn = int(input())\n\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\n\nDP = [0]*2*(n+1)\n\nroundwina = 0\nt = 1\nsa = 0\nfor a in A[1:]:\n    roundwina += t*a\n    sa += a\n    t += 1\nfor b in reversed(B[1:]):\n    roundwina += t*b\n    sa += b\n    t += 1\n\nroundwinb = 0\nsb = 0\nt = 1\nfor b in B[1:]:\n    roundwinb += t*b\n    sb += b\n    t += 1\nfor a in reversed(A[1:]):\n    roundwinb += t*a\n    sb += a\n    t += 1\n\ntop = True\nbest = 0\nwin = 0\ni = 0\n\n#print('round',roundwina,roundwinb)\nfor t in range(2*n):\n    if top:\n        win += t*A[i]\n        endnow = win + roundwina + t*sa\n        if t%2 == 0:\n            endnow += (2*n-1)*B[i]\n    else:\n        win += t*B[i]\n        endnow = win + roundwinb + t*sb\n        if t%2 == 0:\n            endnow += (2*n-1)*A[i]\n\n    if t%2 == 1:\n        i += 1\n        if i != n:\n            #print(A[i],B[i])\n            #print('summa',sa,sb)\n            #print(2*(n-i-1)*A[i])\n            #print(2*(n-i-1)*B[i])\n            roundwina -= sa + (2*(n-i)-1)*B[i]\n            roundwinb -= sb + (2*(n-i)-1)*A[i]\n            sa -= A[i] + B[i]\n            sb -= A[i] + B[i]\n        #print('round',roundwina,roundwinb)\n    else:\n        top = not top\n\n    best = max(best, endnow)\nbest = max(win,best)\n\nprint(best)\n",
        "correct": true,
        "task_id": "0255",
        "depth": 1
    },
    {
        "description": "After all the events in Orlando we all know, Sasha and Roma decided to find out who is still the team's biggest loser. Thankfully, Masha found somewhere a revolver with a rotating cylinder of n bullet slots able to contain exactly k bullets, now the boys have a chance to resolve the problem once and for all. \n\nSasha selects any k out of n slots he wishes and puts bullets there. Roma spins the cylinder so that every of n possible cylinder's shifts is equiprobable. Then the game starts, the players take turns, Sasha starts: he puts the gun to his head and shoots. If there was no bullet in front of the trigger, the cylinder shifts by one position and the weapon is given to Roma for make the same move. The game continues until someone is shot, the survivor is the winner. \n\nSasha does not want to lose, so he must choose slots for bullets in such a way as to minimize the probability of its own loss. Of all the possible variant he wants to select the lexicographically minimal one, where an empty slot is lexicographically less than a charged one. \n\nMore formally, the cylinder of n bullet slots able to contain k bullets can be represented as a string of n characters. Exactly k of them are \"X\" (charged slots) and the others are \".\" (uncharged slots). \n\nLet us describe the process of a shot. Suppose that the trigger is in front of the first character of the string (the first slot). If a shot doesn't kill anyone and the cylinder shifts, then the string shifts left. So the first character becomes the last one, the second character becomes the first one, and so on. But the trigger doesn't move. It will be in front of the first character of the resulting string.\n\nAmong all the strings that give the minimal probability of loss, Sasha choose the lexicographically minimal one. According to this very string, he charges the gun. You have to help Sasha to charge the gun. For that, each xi query must be answered: is there a bullet in the positions xi?\n\nInput\n\nThe first line contains three integers n, k and p (1 \u2264 n \u2264 1018, 0 \u2264 k \u2264 n, 1 \u2264 p \u2264 1000) \u2014 the number of slots in the cylinder, the number of bullets and the number of queries. Then follow p lines; they are the queries. Each line contains one integer xi (1 \u2264 xi \u2264 n) the number of slot to describe.\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in \u0421++. It is preferred to use cin, cout streams or the %I64d specificator.\n\nOutput\n\nFor each query print \".\" if the slot should be empty and \"X\" if the slot should be charged.\n\nExamples\n\nInput\n\n3 1 3\n1\n2\n3\n\n\nOutput\n\n..X\n\nInput\n\n6 3 6\n1\n2\n3\n4\n5\n6\n\n\nOutput\n\n.X.X.X\n\nInput\n\n5 2 5\n1\n2\n3\n4\n5\n\n\nOutput\n\n...XX\n\nNote\n\nThe lexicographical comparison of is performed by the < operator in modern programming languages. The a string is lexicographically less that the b string, if there exists such i (1 \u2264 i \u2264 n), that ai < bi, and for any j (1 \u2264 j < i) aj = bj.",
        "task_name": "103_C. Russian Roulette",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nrint = lambda: int(stdin.readline())\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrint_2d = lambda n: [rint() for _ in range(n)]\n\nn, k, p = rints()\nqur, out = rint_2d(p), []\nif n & 1:\n    n -= 1\n    k -= 1\n\nfor i in qur:\n    if not (i & 1):\n        out.append('X' if n - ((n - i) >> 1) > (n - k) else '.')\n    elif i > n:\n        out.append('X' if k > -1 else '.')\n    else:\n        out.append('X' if (i >> 1) >= (n - k) else '.')\n\nprint(''.join(out))\n",
        "correct": true,
        "task_id": "0256",
        "depth": 1
    },
    {
        "description": "You are given a positive integer n greater or equal to 2. For every pair of integers a and b (2 \u2264 |a|, |b| \u2264 n), you can transform a into b if and only if there exists an integer x such that 1 < |x| and (a \u22c5 x = b or b \u22c5 x = a), where |x| denotes the absolute value of x.\n\nAfter such a transformation, your score increases by |x| points and you are not allowed to transform a into b nor b into a anymore.\n\nInitially, you have a score of 0. You can start at any integer and transform it as many times as you like. What is the maximum score you can achieve?\n\nInput\n\nA single line contains a single integer n (2 \u2264 n \u2264 100 000) \u2014 the given integer described above.\n\nOutput\n\nPrint an only integer \u2014 the maximum score that can be achieved with the transformations. If it is not possible to perform even a single transformation for all possible starting integers, print 0.\n\nExamples\n\nInput\n\n4\n\n\nOutput\n\n8\n\nInput\n\n6\n\n\nOutput\n\n28\n\nInput\n\n2\n\n\nOutput\n\n0\n\nNote\n\nIn the first example, the transformations are 2 \u2192 4 \u2192 (-2) \u2192 (-4) \u2192 2.\n\nIn the third example, it is impossible to perform even a single transformation.",
        "task_name": "1062_D. Fun with Integers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division\nfrom sys import stdin, stdout\n# from fractions import gcd\n# from math import *\n# from operator import mul\n# from functools import reduce\n# from copy import copy\nfrom collections import deque, defaultdict, Counter\n\nrstr = lambda: stdin.readline().strip()\nrstrs = lambda: [str(x) for x in stdin.readline().split()]\nrint = lambda: int(stdin.readline())\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrstr_2d = lambda n: [rstr() for _ in range(n)]\nrint_2d = lambda n: [rint() for _ in range(n)]\nrints_2d = lambda n: [rints() for _ in range(n)]\npr = lambda args, sep: stdout.write(sep.join(map(str, args)) + '\\n')\nout = []\nn, ans = int(input()), 0\nfor i in range(2, n + 1):\n    cur = 2\n\n    while i * cur <= n:\n        ans += 4 * cur\n        cur += 1\n\nprint(ans)",
        "correct": true,
        "task_id": "0257",
        "depth": 2
    },
    {
        "description": "The Fair Nut found a string s. The string consists of lowercase Latin letters. The Nut is a curious guy, so he wants to find the number of strictly increasing sequences p_1, p_2, \u2026, p_k, such that: \n\n  1. For each i (1 \u2264 i \u2264 k), s_{p_i} = 'a'. \n  2. For each i (1 \u2264 i < k), there is such j that p_i < j < p_{i + 1} and s_j = 'b'. \n\n\n\nThe Nut is upset because he doesn't know how to find the number. Help him.\n\nThis number should be calculated modulo 10^9 + 7.\n\nInput\n\nThe first line contains the string s (1 \u2264 |s| \u2264 10^5) consisting of lowercase Latin letters.\n\nOutput\n\nIn a single line print the answer to the problem \u2014 the number of such sequences p_1, p_2, \u2026, p_k modulo 10^9 + 7.\n\nExamples\n\nInput\n\nabbaa\n\n\nOutput\n\n5\n\nInput\n\nbaaaa\n\n\nOutput\n\n4\n\nInput\n\nagaa\n\n\nOutput\n\n3\n\nNote\n\nIn the first example, there are 5 possible sequences. [1], [4], [5], [1, 4], [1, 5].\n\nIn the second example, there are 4 possible sequences. [2], [3], [4], [5].\n\nIn the third example, there are 3 possible sequences. [1], [3], [4].",
        "task_name": "1084_C. The Fair Nut and String",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "mod = 1000000007\nres = 1\nca = 1\ns = raw_input()\nfor i in s:\n\tif i == 'a':\n\t\tca+=1\n\telif i == 'b':\n\t\tres = (res*ca)%mod\n\t\tca = 1\nres = (res*ca)%mod\nprint (res-1)%mod\n\t\t \t\t \t\t\t \t\t\t \t \t      \t\t\t\t \t\t\t",
        "correct": true,
        "task_id": "0258",
        "depth": 1
    },
    {
        "description": "On a random day, Neko found n treasure chests and m keys. The i-th chest has an integer a_i written on it and the j-th key has an integer b_j on it. Neko knows those chests contain the powerful mysterious green Grapes, thus Neko wants to open as many treasure chests as possible.\n\nThe j-th key can be used to unlock the i-th chest if and only if the sum of the key number and the chest number is an odd number. Formally, a_i + b_j \u2261 1 \\pmod{2}. One key can be used to open at most one chest, and one chest can be opened at most once.\n\nFind the maximum number of chests Neko can open.\n\nInput\n\nThe first line contains integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the number of chests and the number of keys.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9) \u2014 the numbers written on the treasure chests.\n\nThe third line contains m integers b_1, b_2, \u2026, b_m (1 \u2264 b_i \u2264 10^9) \u2014 the numbers written on the keys.\n\nOutput\n\nPrint the maximum number of chests you can open.\n\nExamples\n\nInput\n\n\n5 4\n9 14 6 2 11\n8 4 7 20\n\n\nOutput\n\n\n3\n\nInput\n\n\n5 1\n2 4 6 8 10\n5\n\n\nOutput\n\n\n1\n\nInput\n\n\n1 4\n10\n20 30 40 50\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first example, one possible way to unlock 3 chests is as follows:\n\n  * Use first key to unlock the fifth chest, \n  * Use third key to unlock the second chest, \n  * Use fourth key to unlock the first chest. \n\n\n\nIn the second example, you can use the only key to unlock any single chest (note that one key can't be used twice).\n\nIn the third example, no key can unlock the given chest.",
        "task_name": "1152_A. Neko Finds Grapes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    _str = str\n    str = lambda x=b\"\": x if type(x) is bytes else _str(x).encode()\n\n\ndef main():\n    n, m = readlist()\n    a = readlist()\n    b = readlist()\n\n    ano = sum(i % 2 for i in a)\n    ane = n - ano\n    bno = sum(i % 2 for i in b)\n    bne = m - bno\n\n    print(max(min(ano, bne), min(ane, bno)))\n\n\n# region template\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._buffer = BytesIO()\n        self._fd = file.fileno()\n        self._writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self._buffer.write if self._writable else None\n\n    def read(self):\n        if self._buffer.tell():\n            return self._buffer.read()\n        return os.read(self._fd, os.fstat(self._fd).st_size)\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self._buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(b), self._buffer.seek(ptr)\n        self.newlines -= 1\n        return self._buffer.readline()\n\n    def flush(self):\n        if self._writable:\n            os.write(self._fd, self._buffer.getvalue())\n            self._buffer.truncate(0), self._buffer.seek(0)\n\n\nclass ostream:\n    def __lshift__(self, a):\n        if a is endl:\n            sys.stdout.write(b\"\\n\")\n            sys.stdout.flush()\n        else:\n            sys.stdout.write(str(a))\n        return self\n\n\ndef print(*args, **kwargs):\n    sep, file = kwargs.pop(\"sep\", b\" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", b\"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nsys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\ncout, endl = ostream(), object()\n\nreadline = sys.stdin.readline\nreadlist = lambda var=int: [var(n) for n in readline().split()]\ninput = lambda: readline().rstrip(b\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": false,
        "task_id": "0259",
        "depth": 1
    },
    {
        "description": "Recently, Tokitsukaze found an interesting game. Tokitsukaze had n items at the beginning of this game. However, she thought there were too many items, so now she wants to discard m (1 \u2264 m \u2264 n) special items of them.\n\nThese n items are marked with indices from 1 to n. In the beginning, the item with index i is placed on the i-th position. Items are divided into several pages orderly, such that each page contains exactly k positions and the last positions on the last page may be left empty.\n\nTokitsukaze would do the following operation: focus on the first special page that contains at least one special item, and at one time, Tokitsukaze would discard all special items on this page. After an item is discarded or moved, its old position would be empty, and then the item below it, if exists, would move up to this empty position. The movement may bring many items forward and even into previous pages, so Tokitsukaze would keep waiting until all the items stop moving, and then do the operation (i.e. check the special page and discard the special items) repeatedly until there is no item need to be discarded.\n\n<image> Consider the first example from the statement: n=10, m=4, k=5, p=[3, 5, 7, 10]. The are two pages. Initially, the first page is special (since it is the first page containing a special item). So Tokitsukaze discards the special items with indices 3 and 5. After, the first page remains to be special. It contains [1, 2, 4, 6, 7], Tokitsukaze discards the special item with index 7. After, the second page is special (since it is the first page containing a special item). It contains [9, 10], Tokitsukaze discards the special item with index 10.\n\nTokitsukaze wants to know the number of operations she would do in total.\n\nInput\n\nThe first line contains three integers n, m and k (1 \u2264 n \u2264 10^{18}, 1 \u2264 m \u2264 10^5, 1 \u2264 m, k \u2264 n) \u2014 the number of items, the number of special items to be discarded and the number of positions in each page.\n\nThe second line contains m distinct integers p_1, p_2, \u2026, p_m (1 \u2264 p_1 < p_2 < \u2026 < p_m \u2264 n) \u2014 the indices of special items which should be discarded.\n\nOutput\n\nPrint a single integer \u2014 the number of operations that Tokitsukaze would do in total.\n\nExamples\n\nInput\n\n\n10 4 5\n3 5 7 10\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n13 4 5\n7 8 9 10\n\n\nOutput\n\n\n1\n\nNote\n\nFor the first example:\n\n  * In the first operation, Tokitsukaze would focus on the first page [1, 2, 3, 4, 5] and discard items with indices 3 and 5; \n  * In the second operation, Tokitsukaze would focus on the first page [1, 2, 4, 6, 7] and discard item with index 7; \n  * In the third operation, Tokitsukaze would focus on the second page [9, 10] and discard item with index 10. \n\n\n\nFor the second example, Tokitsukaze would focus on the second page [6, 7, 8, 9, 10] and discard all special items at once.",
        "task_name": "1191_C. Tokitsukaze and Discard Items",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "data = list(map(int, raw_input().split()))\nn = data[0]\nm = data[1]\nk = data[2]\n\nnums = list(map(int, raw_input().split()))\n\ncurr = 0\noffset = 0\ni = 0\nop = 0\nwhile i < m:\n    if nums[i] <= offset + curr * k + k:\n        while i < m and nums[i] <= offset + curr * k + k:\n            i += 1\n        offset = i\n        op += 1\n    else :\n        curr += (nums[i] - (offset + curr * k) - 1) / k\nprint(op)\n",
        "correct": true,
        "task_id": "0260",
        "depth": 2
    },
    {
        "description": "The map of the capital of Berland can be viewed on the infinite coordinate plane. Each point with integer coordinates contains a building, and there are streets connecting every building to four neighbouring buildings. All streets are parallel to the coordinate axes.\n\nThe main school of the capital is located in (s_x, s_y). There are n students attending this school, the i-th of them lives in the house located in (x_i, y_i). It is possible that some students live in the same house, but no student lives in (s_x, s_y).\n\nAfter classes end, each student walks from the school to his house along one of the shortest paths. So the distance the i-th student goes from the school to his house is |s_x - x_i| + |s_y - y_i|.\n\nThe Provision Department of Berland has decided to open a shawarma tent somewhere in the capital (at some point with integer coordinates). It is considered that the i-th student will buy a shawarma if at least one of the shortest paths from the school to the i-th student's house goes through the point where the shawarma tent is located. It is forbidden to place the shawarma tent at the point where the school is located, but the coordinates of the shawarma tent may coincide with the coordinates of the house of some student (or even multiple students).\n\nYou want to find the maximum possible number of students buying shawarma and the optimal location for the tent itself.\n\nInput\n\nThe first line contains three integers n, s_x, s_y (1 \u2264 n \u2264 200 000, 0 \u2264 s_x, s_y \u2264 10^{9}) \u2014 the number of students and the coordinates of the school, respectively.\n\nThen n lines follow. The i-th of them contains two integers x_i, y_i (0 \u2264 x_i, y_i \u2264 10^{9}) \u2014 the location of the house where the i-th student lives. Some locations of houses may coincide, but no student lives in the same location where the school is situated.\n\nOutput\n\nThe output should consist of two lines. The first of them should contain one integer c \u2014 the maximum number of students that will buy shawarmas at the tent. \n\nThe second line should contain two integers p_x and p_y \u2014 the coordinates where the tent should be located. If there are multiple answers, print any of them. Note that each of p_x and p_y should be not less than 0 and not greater than 10^{9}.\n\nExamples\n\nInput\n\n\n4 3 2\n1 3\n4 2\n5 1\n4 1\n\n\nOutput\n\n\n3\n4 2\n\n\nInput\n\n\n3 100 100\n0 0\n0 0\n100 200\n\n\nOutput\n\n\n2\n99 100\n\n\nInput\n\n\n7 10 12\n5 6\n20 23\n15 4\n16 5\n4 54\n12 1\n4 15\n\n\nOutput\n\n\n4\n10 11\n\nNote\n\nIn the first example, If we build the shawarma tent in (4, 2), then the students living in (4, 2), (4, 1) and (5, 1) will visit it.\n\nIn the second example, it is possible to build the shawarma tent in (1, 1), then both students living in (0, 0) will visit it.",
        "task_name": "1271_C. Shawarma Tent",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "input = raw_input\nN,X,Y = map(int, input().split())\n\narr = [[int(x) for x in input().split()] for _ in range(N)]\n\na = b = c = d = 0\nfor x in arr:\n  if x[0] <= X-1: a += 1\n  elif x[0] >= X+1: b += 1\n\n  if x[1] <= Y-1: c += 1\n  else: d += 1\n\nif X == 0: a = 0\nif Y == 0: c = 0\nm = max(a,b,c,d)\n\nprint(m)\nif m == a:\n  print(X-1,Y)\nelif m == b:\n  print(X+1, Y)\nelif m == c:\n  print(X, Y-1)\nelse:\n  print(X, Y+1)\n",
        "correct": false,
        "task_id": "0262",
        "depth": 1
    },
    {
        "description": "Recall that MEX of an array is a minimum non-negative integer that does not belong to the array. Examples:\n\n  * for the array [0, 0, 1, 0, 2] MEX equals to 3 because numbers 0, 1 and 2 are presented in the array and 3 is the minimum non-negative integer not presented in the array; \n  * for the array [1, 2, 3, 4] MEX equals to 0 because 0 is the minimum non-negative integer not presented in the array; \n  * for the array [0, 1, 4, 3] MEX equals to 2 because 2 is the minimum non-negative integer not presented in the array. \n\n\n\nYou are given an empty array a=[] (in other words, a zero-length array). You are also given a positive integer x.\n\nYou are also given q queries. The j-th query consists of one integer y_j and means that you have to append one element y_j to the array. The array length increases by 1 after a query.\n\nIn one move, you can choose any index i and set a_i := a_i + x or a_i := a_i - x (i.e. increase or decrease any element of the array by x). The only restriction is that a_i cannot become negative. Since initially the array is empty, you can perform moves only after the first query.\n\nYou have to maximize the MEX (minimum excluded) of the array if you can perform any number of such operations (you can even perform the operation multiple times with one element).\n\nYou have to find the answer after each of q queries (i.e. the j-th answer corresponds to the array of length j).\n\nOperations are discarded before each query. I.e. the array a after the j-th query equals to [y_1, y_2, ..., y_j].\n\nInput\n\nThe first line of the input contains two integers q, x (1 \u2264 q, x \u2264 4 \u22c5 10^5) \u2014 the number of queries and the value of x.\n\nThe next q lines describe queries. The j-th query consists of one integer y_j (0 \u2264 y_j \u2264 10^9) and means that you have to append one element y_j to the array.\n\nOutput\n\nPrint the answer to the initial problem after each query \u2014 for the query j print the maximum value of MEX after first j queries. Note that queries are dependent (the array changes after each query) but operations are independent between queries.\n\nExamples\n\nInput\n\n\n7 3\n0\n1\n2\n2\n0\n0\n10\n\n\nOutput\n\n\n1\n2\n3\n3\n4\n4\n7\n\n\nInput\n\n\n4 3\n1\n2\n1\n2\n\n\nOutput\n\n\n0\n0\n0\n0\n\nNote\n\nIn the first example:\n\n  * After the first query, the array is a=[0]: you don't need to perform any operations, maximum possible MEX is 1. \n  * After the second query, the array is a=[0, 1]: you don't need to perform any operations, maximum possible MEX is 2. \n  * After the third query, the array is a=[0, 1, 2]: you don't need to perform any operations, maximum possible MEX is 3. \n  * After the fourth query, the array is a=[0, 1, 2, 2]: you don't need to perform any operations, maximum possible MEX is 3 (you can't make it greater with operations). \n  * After the fifth query, the array is a=[0, 1, 2, 2, 0]: you can perform a[4] := a[4] + 3 = 3. The array changes to be a=[0, 1, 2, 2, 3]. Now MEX is maximum possible and equals to 4. \n  * After the sixth query, the array is a=[0, 1, 2, 2, 0, 0]: you can perform a[4] := a[4] + 3 = 0 + 3 = 3. The array changes to be a=[0, 1, 2, 2, 3, 0]. Now MEX is maximum possible and equals to 4. \n  * After the seventh query, the array is a=[0, 1, 2, 2, 0, 0, 10]. You can perform the following operations: \n    * a[3] := a[3] + 3 = 2 + 3 = 5, \n    * a[4] := a[4] + 3 = 0 + 3 = 3, \n    * a[5] := a[5] + 3 = 0 + 3 = 3, \n    * a[5] := a[5] + 3 = 3 + 3 = 6, \n    * a[6] := a[6] - 3 = 10 - 3 = 7, \n    * a[6] := a[6] - 3 = 7 - 3 = 4. \nThe resulting array will be a=[0, 1, 2, 5, 3, 6, 4]. Now MEX is maximum possible and equals to 7. ",
        "task_name": "1294_D. MEX maximizing",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n# Author : raj1307 - Raj Singh\n# Date   : 14.02.2020\n\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef msi(): return map(str,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \nfrom collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n#from itertools import permutations\n#Copy 2D list  m = [x[:] for x in mark] .. Avoid Using Deepcopy\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[1] \ndef sort2(l):return sorted(l, key=getKey,reverse=True)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n\ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\n\n\n\ndef main():\n        \n\n \n    #for _ in range(ii()):\n        \n        \n\n    if True:\n        q,x=mi()\n \n \n        mex=0\n        f={}          \n        nex=[0]*x\n        for i in range(x):\n            nex[i]=i\n        \n        for _ in range(q):\n \n            a=ii()\n \n            if mex==a:\n \n                f[a]=1\n                nex[mex%x]+=x   \n \n                for i in range(mex+1,400001):\n                    if f.get(i,0)==0:\n                        mex=i\n                        break\n \n            elif mex<a:\n \n                if (a-mex)%x==0:\n \n                    f[mex]=1\n                    if mex==nex[mex%x]:        \n                        nex[mex%x]+=x\n \n                    for i in range(mex+1,400001):\n                        if f.get(i,0)==0:\n                            mex=i\n                            break\n \n                else:\n                  \n\n                    m=a%x\n                    f[nex[m]]=1\n                    nex[m]+=x\n \n            else:\n                if (mex-a)%x==0:\n\n                    f[mex]=1\n                    if mex==nex[mex%x]:        \n                        nex[mex%x]+=x\n\n                    for i in range(mex+1,400001):\n                        if f.get(i,0)==0:\n                            mex=i\n                            break\n \n                else:\n                  \n\n                    m=a%x\n                    f[nex[m]]=1\n                    nex[m]+=x\n\n \n            print(mex)\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    #read()\n    main()\n    #dmain()\n\n# Comment Read()\n",
        "correct": true,
        "task_id": "0263",
        "depth": 2
    },
    {
        "description": "Alice and Bob are playing yet another card game. This time the rules are the following. There are n cards lying in a row in front of them. The i-th card has value a_i. \n\nFirst, Alice chooses a non-empty consecutive segment of cards [l; r] (l \u2264 r). After that Bob removes a single card j from that segment (l \u2264 j \u2264 r). The score of the game is the total value of the remaining cards on the segment (a_l + a_{l + 1} + ... + a_{j - 1} + a_{j + 1} + ... + a_{r - 1} + a_r). In particular, if Alice chooses a segment with just one element, then the score after Bob removes the only card is 0.\n\nAlice wants to make the score as big as possible. Bob takes such a card that the score is as small as possible.\n\nWhat segment should Alice choose so that the score is maximum possible? Output the maximum score.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of cards.\n\nThe second line contains n integers a_1, a_2, ..., a_n (-30 \u2264 a_i \u2264 30) \u2014 the values on the cards.\n\nOutput\n\nPrint a single integer \u2014 the final score of the game.\n\nExamples\n\nInput\n\n\n5\n5 -2 10 -1 4\n\n\nOutput\n\n\n6\n\n\nInput\n\n\n8\n5 2 5 3 -30 -30 6 9\n\n\nOutput\n\n\n10\n\n\nInput\n\n\n3\n-10 6 -15\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first example Alice chooses a segment [1;5] \u2014 the entire row of cards. Bob removes card 3 with the value 10 from the segment. Thus, the final score is 5 + (-2) + (-1) + 4 = 6.\n\nIn the second example Alice chooses a segment [1;4], so that Bob removes either card 1 or 3 with the value 5, making the answer 5 + 2 + 3 = 10.\n\nIn the third example Alice can choose any of the segments of length 1: [1;1], [2;2] or [3;3]. Bob removes the only card, so the score is 0. If Alice chooses some other segment then the answer will be less than 0.",
        "task_name": "1359_D. Yet Another Yet Another Task",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import collections\nFAST_IO = 0\nif FAST_IO:\n    import io, sys, atexit\n    rr = iter(sys.stdin.read().splitlines()).next\n    sys.stdout = _OUTPUT_BUFFER = io.BytesIO()\n    @atexit.register\n    def write():\n        sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\nelse:\n    rr = raw_input\nrri = lambda: int(rr())\nrrm = lambda: map(int, rr().split())\n \n \n \ndef solve(N, A):\n    NINF = float('-inf')\n    #dp[m] = max subarray sum ending at A[i] with max m\n    dp = [NINF] * 61\n    ans = 0\n    for x in A:\n        ndp = [NINF] * 61\n        ndp[x] = max(x, 0)\n        bns = NINF\n        for m1 in xrange(0, x):\n            bns = max(bns, dp[m1])\n        for m1 in xrange(x, 31):\n            bns = max(bns, dp[m1])\n            ndp[m1] = max(ndp[m1], bns + x)\n        dp = ndp\n        for i in xrange(-30, 31):\n            ans = max(ans, dp[i] - max(0, i))\n        #print(\"!\", x, ans)\n    return ans\n    \n    \nn = rri()\narr = rrm()\nprint(solve(n, arr))",
        "correct": true,
        "task_id": "0264",
        "depth": 2
    },
    {
        "description": "Andrey's favourite number is n. Andrey's friends gave him two identical numbers n as a New Year present. He hung them on a wall and watched them adoringly.\n\nThen Andrey got bored from looking at the same number and he started to swap digits first in one, then in the other number, then again in the first number and so on (arbitrary number of changes could be made in each number). At some point it turned out that if we sum the resulting numbers, then the number of zeroes with which the sum will end would be maximum among the possible variants of digit permutations in those numbers.\n\nGiven number n, can you find the two digit permutations that have this property?\n\nInput\n\nThe first line contains a positive integer n \u2014 the original number. The number of digits in this number does not exceed 105. The number is written without any leading zeroes.\n\nOutput\n\nPrint two permutations of digits of number n, such that the sum of these numbers ends with the maximum number of zeroes. The permutations can have leading zeroes (if they are present, they all should be printed). The permutations do not have to be different. If there are several answers, print any of them.\n\nExamples\n\nInput\n\n198\n\n\nOutput\n\n981\n819\n\n\nInput\n\n500\n\n\nOutput\n\n500\n500",
        "task_name": "139_D. Digits Permutations",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\n\ndef d( digits ):\n  pair9s = {}\n  for i in range(10): pair9s[i] = 9 - i\n  baseCounts = [0]*10\n\n  for digit in digits: baseCounts[int(digit)] += 1\n\n\n  iTen = -1\n  mxZeros = 0\n  for i in range(1,6):\n\n    countsa = baseCounts[:]\n    countsb = baseCounts[:]\n    zeros=0\n    i10 = 10 - i\n    mn9s = [0]*10\n    mni10 = min(1,countsa[i],countsb[i10])\n\n    print( dict(i=i,countsa=countsa,countsb=countsb,mxZeros=mxZeros,mni10=mni10) )\n\n    if mni10>0:\n      countsa[i] -= 1\n      countsb[i10] -= 1\n      zeros = 1\n      for j in range(10):\n        j9 = pair9s[j]\n        mn = min( countsa[j],countsb[j9])\n        if mn>0:\n          countsa[j] -= mn\n          countsb[j9] -= mn\n          zeros += mn\n          mn9s[j] = mn\n\n    mn0 = min(countsa[0],countsb[0])\n    \n    countsa[0] -= mn0\n    countsb[0] -= mn0\n    zeros += mn0\n\n    if mxZeros < zeros:\n      mxZeros = zeros\n      mxZString = ['']*2\n      for j in range(10):\n         mxZString[0] += str(j) * countsa[j]\n         mxZString[1] += str(j) * countsb[j]\n      for j in range(10):\n         mxZString[0] += str(j)*mn9s[j]\n         mxZString[1] += str(9-j)*mn9s[j]\n      mxZString[0] += str(i)*mni10 + '0' * mn0 \n      mxZString[1] += str(i10)*mni10 + '0' * mn0 \n      print( dict(v=2,mxZString=mxZString) )\n\n  if mxZeros==0: return (digits,digits)\n\n  return tuple(mxZString)\n\nif __name__==\"__main__\":\n\n  digits = sys.stdin.readline().strip('\\n\\r ')\n\n  print( \"%s\\n%s\" % d(digits) )\n",
        "correct": false,
        "task_id": "0265",
        "depth": 2
    },
    {
        "description": "Today the kindergarten has a new group of n kids who need to be seated at the dinner table. The chairs at the table are numbered from 1 to 4n. Two kids can't sit on the same chair. It is known that two kids who sit on chairs with numbers a and b (a \u2260 b) will indulge if: \n\n  1. gcd(a, b) = 1 or, \n  2. a divides b or b divides a. \n\n\n\ngcd(a, b) \u2014 the maximum number x such that a is divisible by x and b is divisible by x.\n\nFor example, if n=3 and the kids sit on chairs with numbers 2, 3, 4, then they will indulge since 4 is divided by 2 and gcd(2, 3) = 1. If kids sit on chairs with numbers 4, 6, 10, then they will not indulge.\n\nThe teacher really doesn't want the mess at the table, so she wants to seat the kids so there are no 2 of the kid that can indulge. More formally, she wants no pair of chairs a and b that the kids occupy to fulfill the condition above.\n\nSince the teacher is very busy with the entertainment of the kids, she asked you to solve this problem.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of one line containing an integer n (1 \u2264 n \u2264 100) \u2014 the number of kids.\n\nOutput\n\nOutput t lines, which contain n distinct integers from 1 to 4n \u2014 the numbers of chairs that the kids should occupy in the corresponding test case. If there are multiple answers, print any of them. You can print n numbers in any order.\n\nExample\n\nInput\n\n\n3\n2\n3\n4\n\n\nOutput\n\n\n6 4\n4 6 10\n14 10 12 8",
        "task_name": "1443_A. Kids Seating",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n# Author : raj1307 - Raj Singh\n# Date   : 02.11.2020\n\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii():  return int(input())\ndef si():  return input()\ndef mi():  return map(int,input().strip().split(\" \"))\ndef msi(): return map(str,input().strip().split(\" \"))\ndef li():  return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(1000000)\n    threading.stack_size(1024000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import log,sqrt,factorial,cos,tan,sin,radians\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *\n#import threading\n#from itertools import permutations\n#Copy 2D list  m = [x[:] for x in mark] .. Avoid Using Deepcopy\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[1] \ndef sort2(l):return sorted(l, key=getKey,reverse=True)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\ndef ncr(n,r): return factorial(n)//(factorial(r)*factorial(max(n-r,1)))\n\ndef ceil(x,y):\n    if x%y==0:\n        return x//y\n    else:\n        return x//y+1\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n\ndef read():\n    sys.stdin  = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\n\n\n\n\ndef main():\n\n\n\n    #for _ in range(ii()):\n\n    \n    # l=[]\n    # f=[0]*405\n    # for i in range(2,401,2):\n    #     if f[i]==1:\n    #         continue\n    #     if isPrime(i):\n    #         f[i]=1\n    #     else:\n    #         for j in range(i+i,401,i):\n    #             f[j]=1\n    #         l.append(i)\n\n\n    # print(len(l))\n\n    # x=[]\n    # p=0\n    # for i in range(len(l)):\n\n    #     if len(x)>=100:\n    #         break\n\n\n    #     for j in range(i+1,len(l)):\n\n    #         if l[i]*l[j]<=400:\n    #             x.append(l[i]*l[j])\n    #return\n\n    # for i in range(len(l)):\n\n    #     if l[i]*2>400:\n    #         break\n\n    #     x.append(2*l[i])\n\n    # print(len(x))\n\n    #x.sort()\n\n    for _ in range(ii()):\n\n        n=ii()\n\n        cnt=0\n        for i in range(4*n,0,-2):\n            cnt+=1\n            print(i,end=' ')\n            if cnt==n:\n                break\n        print()\n\n\n        #print(*l[:n])\n\n\n\n\n\n\n\n\n\n        \n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# region fastio\n# template taken from https://github.com/cheran-senthil/PyRival/blob/master/templates/template.py\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    #read()\n    main()\n    #dmain()\n\n# Comment Read()\n",
        "correct": true,
        "task_id": "0266",
        "depth": 2
    },
    {
        "description": "There are n cities and m bidirectional roads in Berland. The i-th road connects the cities x_i and y_i, and has the speed limit s_i. The road network allows everyone to get from any city to any other city. \n\nThe Berland Transport Ministry is planning a road reform.\n\nFirst of all, maintaining all m roads is too costly, so m - (n - 1) roads will be demolished in such a way that the remaining (n - 1) roads still allow to get to any city from any other city. Formally, the remaining roads should represent an undirected tree.\n\nSecondly, the speed limits on the remaining roads might be changed. The changes will be done sequentially, each change is either increasing the speed limit on some road by 1, or decreasing it by 1. Since changing the speed limit requires a lot of work, the Ministry wants to minimize the number of changes.\n\nThe goal of the Ministry is to have a road network of (n - 1) roads with the maximum speed limit over all roads equal to exactly k. They assigned you the task of calculating the minimum number of speed limit changes they have to perform so the road network meets their requirements.\n\nFor example, suppose the initial map of Berland looks like that, and k = 7:\n\n<image>\n\nThen one of the optimal courses of action is to demolish the roads 1\u20134 and 3\u20134, and then decrease the speed limit on the road 2\u20133 by 1, so the resulting road network looks like that:\n\n<image>\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe first line of each test case contains three integers n, m and k (2 \u2264 n \u2264 2 \u22c5 10^5; n - 1 \u2264 m \u2264 min(2 \u22c5 10^5, (n(n-1))/(2)); 1 \u2264 k \u2264 10^9) \u2014 the number of cities, the number of roads and the required maximum speed limit, respectively.\n\nThen m lines follow. The i-th line contains three integers x_i, y_i and s_i (1 \u2264 x_i, y_i \u2264 n; x_i \u2260 y_i; 1 \u2264 s_i \u2264 10^9) \u2014 the cities connected by the i-th road and the speed limit on it, respectively. All roads are bidirectional.\n\nThe road network in each test case is connected (that is, it is possible to reach any city from any other city by traveling along the road), and each pair of cities is connected by at most one road.\n\nThe sum of n over all test cases does not exceed 2 \u22c5 10^5. Similarly, the sum of m over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum number of changes the Ministry has to perform so that the maximum speed limit among the remaining (n - 1) roads is exactly k.\n\nExample\n\nInput\n\n\n4\n4 5 7\n4 1 3\n1 2 5\n2 3 8\n2 4 1\n3 4 4\n4 6 5\n1 2 1\n1 3 1\n1 4 2\n2 4 1\n4 3 1\n3 2 1\n3 2 10\n1 2 8\n1 3 10\n5 5 15\n1 2 17\n3 1 15\n2 3 10\n1 4 14\n2 5 8\n\n\nOutput\n\n\n1\n3\n0\n0\n\nNote\n\nThe explanation for the example test:\n\nThe first test case is described in the problem statement.\n\nIn the second test case, the road network initially looks like that:\n\n<image>\n\nThe Ministry can demolish the roads 1\u20132, 3\u20132 and 3\u20134, and then increase the speed limit on the road 1\u20134 three times.\n\nIn the third test case, the road network already meets all the requirements.\n\nIn the fourth test case, it is enough to demolish the road 1\u20132 so the resulting road network meets the requirements.",
        "task_name": "1468_J. Road Reform",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\n\nclass disjointset:\n    def __init__(self, n):\n        self.rank, self.parent, self.n, self.nsets = [0] * (n + 1), [i for i in range(n + 1)], n, [1] * (n + 1)\n\n    def find(self, x):\n        xcopy = x\n        while x != self.parent[x]:\n            x = self.parent[x]\n\n        while xcopy != x:\n            self.parent[xcopy], xcopy = x, self.parent[xcopy]\n\n        return x\n\n    def union(self, x, y):\n        xpar, ypar = self.find(x), self.find(y)\n\n        # already union\n        if xpar == ypar:\n            return\n        # perform union by rank\n        par, child = xpar, ypar\n        if self.rank[xpar] < self.rank[ypar]:\n            par, child = ypar, xpar\n\n        elif self.rank[xpar] == self.rank[ypar]:\n            self.rank[xpar] += 1\n\n        self.parent[child] = par\n        self.nsets[par] += self.nsets[child]\n        self.n -= 1\n\n    # find min total weight tree\n    def kruskal(self, edges):\n        result, all, rem = 0, [], []\n\n        # loop over v-1\n        for u, v, w in edges:\n            upar, vpar = self.find(u), self.find(v)\n\n            # no cycle\n            if upar != vpar:\n                all.append(w)\n                self.union(upar, vpar)\n                result += max(0, w - k)\n            else:\n                rem.append(w)\n\n        if all and all[-1] < k:\n            try:\n                result += min([abs(i - k) for i in rem])\n            except:\n                result += k - all[-1]\n        print(result)\n\n\nrints = lambda: tuple([int(x) for x in stdin.readline().split()])\nrints_2d = lambda n: [rints() for _ in range(n)]\nout = []\nfor _ in range(int(input())):\n    n, m, k = rints()\n    dis = disjointset(n)\n    a = sorted(rints_2d(m), key=lambda x: x[-1])\n    dis.kruskal(a)\n",
        "correct": false,
        "task_id": "0267",
        "depth": 1
    },
    {
        "description": "You are given a string s consisting of lowercase English letters and a number k. Let's call a string consisting of lowercase English letters beautiful if the number of occurrences of each letter in that string is divisible by k. You are asked to find the lexicographically smallest beautiful string of length n, which is lexicographically greater or equal to string s. If such a string does not exist, output -1.\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds: \n\n  * a is a prefix of b, but a \u2260 b; \n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b. \n\nInput\n\nThe first line contains a single integer T (1 \u2264 T \u2264 10 000) \u2014 the number of test cases.\n\nThe next 2 \u22c5 T lines contain the description of test cases. The description of each test case consists of two lines.\n\nThe first line of the description contains two integers n and k (1 \u2264 k \u2264 n \u2264 10^5) \u2014 the length of string s and number k respectively.\n\nThe second line contains string s consisting of lowercase English letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case output in a separate line lexicographically smallest beautiful string of length n, which is greater or equal to string s, or -1 if such a string does not exist.\n\nExample\n\nInput\n\n\n4\n4 2\nabcd\n3 1\nabc\n4 3\naaaa\n9 3\nabaabaaaa\n\n\nOutput\n\n\nacac\nabc\n-1\nabaabaaab\n\nNote\n\nIn the first test case \"acac\" is greater than or equal to s, and each letter appears 2 or 0 times in it, so it is beautiful.\n\nIn the second test case each letter appears 0 or 1 times in s, so s itself is the answer.\n\nWe can show that there is no suitable string in the third test case.\n\nIn the fourth test case each letter appears 0, 3, or 6 times in \"abaabaaab\". All these integers are divisible by 3.",
        "task_name": "1493_C. K-beautiful Strings",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def inc(s, freq, k, i):\n\tif i == len(s):\n\t\treturn False\n\n\tfreq[ord(s[i]) - ord('a')] += 1\n\n\tif inc(s, freq, k, i+1):\n\t\treturn s\n\n\tfreq[ord(s[i]) - ord('a')] -= 1\t\n\n\tif s[i] == 'z':\n\t\treturn False\n\telse:\n\t\t\n\t\tfor c in range(ord(s[i]) + 1, ord('z') + 1):\n\n\t\t\tfreq[c-ord('a')] += 1\n\n\t\t\tmand = 0\n\t\t\tfor j in range(26):\n\t\t\t\tif freq[j] % k != 0:\n\t\t\t\t\tmand += (k - freq[j]%k)\n\n\t\t\tleft = n-i-1\n\n\t\t\tif left < mand or (left-mand) % k != 0:\n\t\t\t\tfreq[c-ord('a')] -= 1\n\t\t\t\tcontinue\n\n\t\t\telse:\n\t\t\t\ts[i] = chr(c)\n\t\t\t\tremain = []\n\t\t\t\tfor j in range(26):\n\t\t\t\t\tif freq[j] % k != 0:\n\t\t\t\t\t\tremain += [chr(ord('a') + j)] * (k - freq[j]%k)\n\n\t\t\t\tif mand < left:\n\t\t\t\t\tremain += ['a'] * (left - mand)\n\n\t\t\t\tremain.sort()\n\n\t\t\t\ts[i+1:] = remain\n\n\t\t\t\treturn True\n\n\t\treturn False\n\t\t\n\n\nfor _ in range(input()):\n\tn, k = map(int, raw_input().split())\n\ts = list(raw_input())\n\n\tfreq = [0] * 26\n\n\tif inc(s, freq, k, 0):\n\t\tprint(''.join(s))\n\telse:\n\t\tprint(-1)\n\n",
        "correct": false,
        "task_id": "0268",
        "depth": 2
    },
    {
        "description": "Highway 201 is the most busy street in Rockport. Traffic cars cause a lot of hindrances to races, especially when there are a lot of them. The track which passes through this highway can be divided into n sub-tracks. You are given an array a where a_i represents the number of traffic cars in the i-th sub-track. You define the inconvenience of the track as \u2211_{i=1}^{n} \u2211_{j=i+1}^{n} \\lvert a_i-a_j\\rvert, where |x| is the absolute value of x. \n\nYou can perform the following operation any (possibly zero) number of times: choose a traffic car and move it from its current sub-track to any other sub-track.\n\nFind the minimum inconvenience you can achieve.\n\nInput\n\nThe first line of input contains a single integer t (1\u2264 t\u2264 10 000) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1\u2264 n\u2264 2\u22c5 10^5).\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (0\u2264 a_i\u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2\u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line containing a single integer: the minimum inconvenience you can achieve by applying the given operation any (possibly zero) number of times.\n\nExample\n\nInput\n\n\n3\n3\n1 2 3\n4\n0 1 1 0\n10\n8 3 6 11 5 2 1 7 10 4\n\n\nOutput\n\n\n0\n4\n21\n\nNote\n\nFor the first test case, you can move a car from the 3-rd sub-track to the 1-st sub-track to obtain 0 inconvenience.\n\nFor the second test case, moving any car won't decrease the inconvenience of the track.",
        "task_name": "1543_B. Customising the Track",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\nimport bisect\nimport math\nimport heapq\nimport itertools\nimport sys\nfrom collections import deque\nfrom atexit import register\nfrom collections import Counter\nfrom functools import reduce\nsys.setrecursionlimit(100000)\nif sys.version_info[0] < 3:\n    from io import BytesIO as stream\nelse:\n    from io import StringIO as stream\n \n \nif sys.version_info[0] < 3:\n    class dict(dict):\n        \"\"\"dict() -> new empty dictionary\"\"\"\n \n        def items(self):\n            \"\"\"D.items() -> a set-like object providing a view on D's items\"\"\"\n            return dict.iteritems(self)\n \n        def keys(self):\n            \"\"\"D.keys() -> a set-like object providing a view on D's keys\"\"\"\n            return dict.iterkeys(self)\n \n        def values(self):\n            \"\"\"D.values() -> an object providing a view on D's values\"\"\"\n            return dict.itervalues(self)\n \n    input = raw_input\n    range = xrange\n \n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n \n \ndef sync_with_stdio(sync=True):\n    \"\"\"Set whether the standard Python streams are allowed to buffer their I/O.\n \n    Args:\n        sync (bool, optional): The new synchronization setting.\n \n    \"\"\"\n    global input, flush\n \n    if sync:\n        flush = sys.stdout.flush\n    else:\n        sys.stdin = stream(sys.stdin.read())\n        def input(): return sys.stdin.readline().rstrip('\\r\\n')\n \n        sys.stdout = stream()\n        register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n \n \ndef dd():\n    return map(int, input().split())\n \n \ndef arr():\n    return list(map(int, input().split()))\n \n \ndef twinSort(X, Y):\n    # sorting X wrt Y\n    return [x for _, x in sorted(zip(Y, X))]\n\n \ndef solve():\n    n=int(input())\n    ar=arr()\n    s=sum(ar)\n    fillWith=math.ceil(s/n)\n    last=s-fillWith*(s//fillWith)\n    if s%n==0:\n        print(0)\n    elif s//n==0:\n        print(int(s*(n-s)))\n    else:\n        aaa=s-(s//n)*n\n        print(int(aaa*last))\n\n    \n    \n \n \ndef main():\n    testCase = 1\n    if testCase:\n        for _ in range(int(input())):\n            solve()\n    else:\n        solve()\n \n \nif __name__ == '__main__':\n    sync_with_stdio(False)\n    main()",
        "correct": false,
        "task_id": "0269",
        "depth": 1
    },
    {
        "description": "How to make a cake you'll never eat.\n\nIngredients. \n\n  * 2 carrots\n  * 0 calories\n  * 100 g chocolate spread\n  * 1 pack of flour\n  * 1 egg\n\n\n\nMethod. \n\n  1. Put calories into the mixing bowl.\n  2. Take carrots from refrigerator.\n  3. Chop carrots.\n  4. Take chocolate spread from refrigerator.\n  5. Put chocolate spread into the mixing bowl.\n  6. Combine pack of flour into the mixing bowl.\n  7. Fold chocolate spread into the mixing bowl.\n  8. Add chocolate spread into the mixing bowl.\n  9. Put pack of flour into the mixing bowl.\n  10. Add egg into the mixing bowl.\n  11. Fold pack of flour into the mixing bowl.\n  12. Chop carrots until choped.\n  13. Pour contents of the mixing bowl into the baking dish.\n\n\n\nServes 1.\n\nInput\n\nThe only line of input contains a sequence of integers a0, a1, ... (1 \u2264 a0 \u2264 100, 0 \u2264 ai \u2264 1000 for i \u2265 1).\n\nOutput\n\nOutput a single integer.\n\nExamples\n\nInput\n\n4 1 2 3 4\n\n\nOutput\n\n30",
        "task_name": "171_C. A Piece of Cake",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nFIN = sys.stdin\nFOUT = sys.stdout\na = list(map(int, FIN.readline().split()))\nans = 0\nfor i in range(1, len(a)):\n    ans += a[i] * i\n\nFOUT.write(str(ans))\n",
        "correct": true,
        "task_id": "0270",
        "depth": 1
    },
    {
        "description": "The ancient Berlanders believed that the longer the name, the more important its bearer is. Thus, Berland kings were famous for their long names. But long names are somewhat inconvenient, so the Berlanders started to abbreviate the names of their kings. They called every king by the first letters of its name. Thus, the king, whose name was Victorious Vasily Pupkin, was always called by the berlanders VVP.\n\nIn Berland over its long history many dynasties of kings replaced each other, but they were all united by common traditions. Thus, according to one Berland traditions, to maintain stability in the country, the first name of the heir should be the same as the last name his predecessor (hence, the first letter of the abbreviated name of the heir coincides with the last letter of the abbreviated name of the predecessor). Berlanders appreciate stability, so this tradition has never been broken. Also Berlanders like perfection, so another tradition requires that the first name of the first king in the dynasty coincides with the last name of the last king in this dynasty (hence, the first letter of the abbreviated name of the first king coincides with the last letter of the abbreviated name of the last king). This tradition, of course, has also been always observed.\n\nThe name of a dynasty is formed by very simple rules: we take all the short names of the kings in the order in which they ruled, and write them in one line. Thus, a dynasty of kings \"ab\" and \"ba\" is called \"abba\", and the dynasty, which had only the king \"abca\", is called \"abca\".\n\nVasya, a historian, has recently found a list of abbreviated names of all Berland kings and their relatives. Help Vasya to find the maximally long name of the dynasty that could have existed in Berland.\n\nNote that in his list all the names are ordered by the time, that is, if name A is earlier in the list than B, then if A and B were kings, then king A ruled before king B.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 5\u00b7105) \u2014 the number of names in Vasya's list. Next n lines contain n abbreviated names, one per line. An abbreviated name is a non-empty sequence of lowercase Latin letters. Its length does not exceed 10 characters.\n\nOutput\n\nPrint a single number \u2014 length of the sought dynasty's name in letters.\n\nIf Vasya's list is wrong and no dynasty can be found there, print a single number 0.\n\nExamples\n\nInput\n\n3\nabc\nca\ncba\n\n\nOutput\n\n6\n\n\nInput\n\n4\nvvp\nvvp\ndam\nvvp\n\n\nOutput\n\n0\n\n\nInput\n\n3\nab\nc\ndef\n\n\nOutput\n\n1\n\nNote\n\nIn the first sample two dynasties can exist: the one called \"abcca\" (with the first and second kings) and the one called \"abccba\" (with the first and third kings). \n\nIn the second sample there aren't acceptable dynasties.\n\nThe only dynasty in the third sample consists of one king, his name is \"c\".",
        "task_name": "191_A. Dynasty Puzzles",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "__author__ = 'Rikishi'\n\nn = int(raw_input())\ndyn = [[0] * 26 for i in range(26)]\nfor i in range(n):\n    s = raw_input()\n    first = ord(s[0]) - ord('a')\n    last = ord(s[-1]) - ord('a')\n    for j in range(26):\n        if (dyn[j][first] > 0):\n            dyn[j][last] = dyn[j][first] + len(s)\n    dyn[first][last] = max(dyn[first][last], len(s))\n\nans = max([dyn[i][i] for i in range(26)])\n\nprint(ans)",
        "correct": false,
        "task_id": "0271",
        "depth": 2
    },
    {
        "description": "Vasya's bicycle chain drive consists of two parts: n stars are attached to the pedal axle, m stars are attached to the rear wheel axle. The chain helps to rotate the rear wheel by transmitting the pedal rotation.\n\nWe know that the i-th star on the pedal axle has ai (0 < a1 < a2 < ... < an) teeth, and the j-th star on the rear wheel axle has bj (0 < b1 < b2 < ... < bm) teeth. Any pair (i, j) (1 \u2264 i \u2264 n; 1 \u2264 j \u2264 m) is called a gear and sets the indexes of stars to which the chain is currently attached. Gear (i, j) has a gear ratio, equal to the value <image>.\n\nSince Vasya likes integers, he wants to find such gears (i, j), that their ratios are integers. On the other hand, Vasya likes fast driving, so among all \"integer\" gears (i, j) he wants to choose a gear with the maximum ratio. Help him to find the number of such gears.\n\nIn the problem, fraction <image> denotes division in real numbers, that is, no rounding is performed.\n\nInput\n\nThe first input line contains integer n (1 \u2264 n \u2264 50) \u2014 the number of stars on the bicycle's pedal axle. The second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 104) in the order of strict increasing.\n\nThe third input line contains integer m (1 \u2264 m \u2264 50) \u2014 the number of stars on the rear wheel axle. The fourth line contains m integers b1, b2, ..., bm (1 \u2264 bi \u2264 104) in the order of strict increasing.\n\nIt is guaranteed that there exists at least one gear (i, j), that its gear ratio is an integer. The numbers on the lines are separated by spaces.\n\nOutput\n\nPrint the number of \"integer\" gears with the maximum ratio among all \"integer\" gears.\n\nExamples\n\nInput\n\n2\n4 5\n3\n12 13 15\n\n\nOutput\n\n2\n\n\nInput\n\n4\n1 2 3 4\n5\n10 11 12 13 14\n\n\nOutput\n\n1\n\nNote\n\nIn the first sample the maximum \"integer\" gear ratio equals 3. There are two gears that have such gear ratio. For one of them a1 = 4, b1 = 12, and for the other a2 = 5, b3 = 15.",
        "task_name": "215_A. Bicycle Chain",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n \nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n \n \ndef main():\n    pass\n \n \n# region fastio\n \nBUFSIZE = 8192\n \n \nclass FastIO(IOBase):\n    newlines = 0\n \n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n \n \nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n#from math import ceil, log2\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\n\n\n\ndef solution():\n\tn=int(input())\n\ta=list(map(int,input().split()))\n\tm=int(input())\n\tb=list(map(int,input().split()))\n\n\tans=0\n\tmx=float('-Inf')\n\tfor j in range(m-1,-1,-1):\n\t\tfor i in range(n-1,-1,-1):\n\t\t\tk=b[j]/a[i]\n\t\t\tif k==int(k):\n\t\t\t\tif k>mx:\n\t\t\t\t\tmx=k\n\t\t\t\t\tans=1\n\t\t\t\telif k==mx:\n\t\t\t\t\tans+=1\n\tprint(ans)\n\n\treturn\n\n\n\n\nif __name__=='__main__':\n\tsolution()\n",
        "correct": true,
        "task_id": "0272",
        "depth": 2
    },
    {
        "description": "Valera had two bags of potatoes, the first of these bags contains x (x \u2265 1) potatoes, and the second \u2014 y (y \u2265 1) potatoes. Valera \u2014 very scattered boy, so the first bag of potatoes (it contains x potatoes) Valera lost. Valera remembers that the total amount of potatoes (x + y) in the two bags, firstly, was not gerater than n, and, secondly, was divisible by k.\n\nHelp Valera to determine how many potatoes could be in the first bag. Print all such possible numbers in ascending order.\n\nInput\n\nThe first line of input contains three integers y, k, n (1 \u2264 y, k, n \u2264 109; <image> \u2264 105).\n\nOutput\n\nPrint the list of whitespace-separated integers \u2014 all possible values of x in ascending order. You should print each possible value of x exactly once.\n\nIf there are no such values of x print a single integer -1.\n\nExamples\n\nInput\n\n10 1 10\n\n\nOutput\n\n-1\n\n\nInput\n\n10 6 40\n\n\nOutput\n\n2 8 14 20 26 ",
        "task_name": "239_A. Two Bags of Potatoes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\n\n\ndef main():\n    pass\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\ny, k, n = list(map(int, input().rstrip().split()))\nn1 = int(y/k)\nn1 = (n1+1)*k\nif n1 >= n:\n    print(-1)\nelse:\n    n1 = n1-y\n    list1 = range(n1, n-y+1, k)\n    print(*list1)\n",
        "correct": false,
        "task_id": "0273",
        "depth": 1
    },
    {
        "description": "You've got a undirected graph G, consisting of n nodes. We will consider the nodes of the graph indexed by integers from 1 to n. We know that each node of graph G is connected by edges with at least k other nodes of this graph. Your task is to find in the given graph a simple cycle of length of at least k + 1.\n\nA simple cycle of length d (d > 1) in graph G is a sequence of distinct graph nodes v1, v2, ..., vd such, that nodes v1 and vd are connected by an edge of the graph, also for any integer i (1 \u2264 i < d) nodes vi and vi + 1 are connected by an edge of the graph.\n\nInput\n\nThe first line contains three integers n, m, k (3 \u2264 n, m \u2264 105; 2 \u2264 k \u2264 n - 1) \u2014 the number of the nodes of the graph, the number of the graph's edges and the lower limit on the degree of the graph node. Next m lines contain pairs of integers. The i-th line contains integers ai, bi (1 \u2264 ai, bi \u2264 n; ai \u2260 bi) \u2014 the indexes of the graph nodes that are connected by the i-th edge. \n\nIt is guaranteed that the given graph doesn't contain any multiple edges or self-loops. It is guaranteed that each node of the graph is connected by the edges with at least k other nodes of the graph.\n\nOutput\n\nIn the first line print integer r (r \u2265 k + 1) \u2014 the length of the found cycle. In the next line print r distinct integers v1, v2, ..., vr (1 \u2264 vi \u2264 n) \u2014 the found simple cycle.\n\nIt is guaranteed that the answer exists. If there are multiple correct answers, you are allowed to print any of them.\n\nExamples\n\nInput\n\n3 3 2\n1 2\n2 3\n3 1\n\n\nOutput\n\n3\n1 2 3 \n\nInput\n\n4 6 3\n4 3\n1 2\n1 3\n1 4\n2 3\n2 4\n\n\nOutput\n\n4\n3 4 1 2 ",
        "task_name": "263_D. Cycle in Graph",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom collections import *\n\n\nclass graph:\n    # initialize graph\n    def __init__(self, gdict=None):\n        self.gdict = [[] for _ in range(n + 1)]\n\n    # add edge\n    def addEdge(self, node1, node2, w=None):\n        self.gdict[node1].append(node2)\n        self.gdict[node2].append(node1)\n\n    def dfsUtil(self, v):\n        stack, self.visit = v, [-1] * (n + 1)\n        ans, d = [], 0\n\n        while (stack):\n            ans.append(stack)\n            self.visit[stack] = d\n            d += 1\n\n            for i in self.gdict[stack]:\n                if self.visit[i] == -1:\n                    stack = i\n                    break\n            else:\n                be = ans.index(min(self.gdict[stack], key=lambda x: self.visit[x]))\n                print('%d\\n%s' % (len(ans) - be, ' '.join(map(str, ans[be:]))))\n                exit()\n\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nn, m, k = rints()\ng = graph()\nfor _ in range(m):\n    u, v = rints()\n    g.addEdge(u, v)\n\ng.dfsUtil(1)\n",
        "correct": true,
        "task_id": "0274",
        "depth": 2
    },
    {
        "description": "Given a string s, determine if it contains any palindrome of length exactly 100 as a subsequence. If it has any, print any one of them. If it doesn't have any, print a palindrome that is a subsequence of s and is as long as possible.\n\nInput\n\nThe only line of the input contains one string s of length n (1 \u2264 n \u2264 5\u00b7104) containing only lowercase English letters.\n\nOutput\n\nIf s contains a palindrome of length exactly 100 as a subsequence, print any palindrome of length 100 which is a subsequence of s. If s doesn't contain any palindromes of length exactly 100, print a palindrome that is a subsequence of s and is as long as possible.\n\nIf there exists multiple answers, you are allowed to print any of them.\n\nExamples\n\nInput\n\nbbbabcbbb\n\n\nOutput\n\nbbbcbbb\n\n\nInput\n\nrquwmzexectvnbanemsmdufrg\n\n\nOutput\n\nrumenanemur\n\nNote\n\nA subsequence of a string is a string that can be derived from it by deleting some characters without changing the order of the remaining characters. A palindrome is a string that reads the same forward or backward.",
        "task_name": "335_B. Palindrome",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s = raw_input()\nn = 100\nletters = {}\nfor x in s:\n    if x in letters:\n        letters[x] += 1\n    else:\n        letters[x] = 1\n\ns = ''\nfor x in letters:\n    if letters[x] > 1:\n        s += x * (letters[x] / 2)\n    if len(s) == n / 2:\n        break\n\nif len(s) == n / 2:\n    print(s + s[::-1])\nelse:\n    for x in letters:\n        if letters[x] % 2:\n            s += x\n            break\n    print(s + s[:-1][::-1])\n",
        "correct": false,
        "task_id": "0275",
        "depth": 1
    },
    {
        "description": "Seryozha has a very changeable character. This time he refused to leave the room to Dima and his girlfriend (her hame is Inna, by the way). However, the two lovebirds can always find a way to communicate. Today they are writing text messages to each other.\n\nDima and Inna are using a secret code in their text messages. When Dima wants to send Inna some sentence, he writes out all words, inserting a heart before each word and after the last word. A heart is a sequence of two characters: the \"less\" characters (<) and the digit three (3). After applying the code, a test message looks like that: <3word1<3word2<3 ... wordn<3.\n\nEncoding doesn't end here. Then Dima inserts a random number of small English characters, digits, signs \"more\" and \"less\" into any places of the message.\n\nInna knows Dima perfectly well, so she knows what phrase Dima is going to send her beforehand. Inna has just got a text message. Help her find out if Dima encoded the message correctly. In other words, find out if a text message could have been received by encoding in the manner that is described above.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 105) \u2014 the number of words in Dima's message. Next n lines contain non-empty words, one word per line. The words only consist of small English letters. The total length of all words doesn't exceed 105. \n\nThe last line contains non-empty text message that Inna has got. The number of characters in the text message doesn't exceed 105. A text message can contain only small English letters, digits and signs more and less.\n\nOutput\n\nIn a single line, print \"yes\" (without the quotes), if Dima decoded the text message correctly, and \"no\" (without the quotes) otherwise.\n\nExamples\n\nInput\n\n3\ni\nlove\nyou\n&lt;3i&lt;3love&lt;23you&lt;3\n\n\nOutput\n\nyes\n\n\nInput\n\n7\ni\nam\nnot\nmain\nin\nthe\nfamily\n&lt;3i&lt;&gt;3am&lt;3the&lt;3&lt;main&lt;3in&lt;3the&lt;3&gt;&lt;3family&lt;3\n\n\nOutput\n\nno\n\nNote\n\nPlease note that Dima got a good old kick in the pants for the second sample from the statement.",
        "task_name": "358_B. Dima and Text Messages",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n\ndef normalize(string):\n    return ''.join(filter(lambda x: x.isalpha(), string))\n\ndef is_valid_encoding(encoding, word_list):\n    encoding_toks = encoding.split('<3')\n    message_str = ''.join(word_list)\n    encoding_str = ''\n    for enc in encoding_toks[1:-1]:\n        enc = normalize(enc)\n        if not enc:\n            return \"no\"\n        encoding_str += enc \n    if encoding_str == message_str:\n        return \"yes\"\n    else:\n        return \"no\"\n\nif __name__ == '__main__':\n    n = int(raw_input())\n    word_list = []\n    for i in range(n):\n        word_list.append(raw_input())\n    encoding = raw_input()\n",
        "correct": false,
        "task_id": "0276",
        "depth": 1
    },
    {
        "description": "Sereja and Dima play a game. The rules of the game are very simple. The players have n cards in a row. Each card contains a number, all numbers on the cards are distinct. The players take turns, Sereja moves first. During his turn a player can take one card: either the leftmost card in a row, or the rightmost one. The game ends when there is no more cards. The player who has the maximum sum of numbers on his cards by the end of the game, wins.\n\nSereja and Dima are being greedy. Each of them chooses the card with the larger number during his move.\n\nInna is a friend of Sereja and Dima. She knows which strategy the guys are using, so she wants to determine the final score, given the initial state of the game. Help her.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 1000) \u2014 the number of cards on the table. The second line contains space-separated numbers on the cards from left to right. The numbers on the cards are distinct integers from 1 to 1000.\n\nOutput\n\nOn a single line, print two integers. The first number is the number of Sereja's points at the end of the game, the second number is the number of Dima's points at the end of the game.\n\nExamples\n\nInput\n\n4\n4 1 2 10\n\n\nOutput\n\n12 5\n\n\nInput\n\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n16 12\n\nNote\n\nIn the first sample Sereja will take cards with numbers 10 and 2, so Sereja's sum is 12. Dima will take cards with numbers 4 and 1, so Dima's sum is 5.",
        "task_name": "381_A. Sereja and Dima",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "num = int(raw_input())\na = raw_input().split()\na = [int(x) for x in a]\na.sort()\na.reverse()\nsereja = 0\ndima = 0\n\nfor i in range(0,len(a),2):\n    sereja = sereja + a[i]\n\nfor i in range (1,len(a),2):\n    dima = dima + a[i]\n\nprint(\"{} {}\".format(sereja,dima))\n",
        "correct": false,
        "task_id": "0277",
        "depth": 1
    },
    {
        "description": "We call a string good, if after merging all the consecutive equal characters, the resulting string is palindrome. For example, \"aabba\" is good, because after the merging step it will become \"aba\".\n\nGiven a string, you have to find two values:\n\n  1. the number of good substrings of even length; \n  2. the number of good substrings of odd length. \n\nInput\n\nThe first line of the input contains a single string of length n (1 \u2264 n \u2264 105). Each character of the string will be either 'a' or 'b'.\n\nOutput\n\nPrint two space-separated integers: the number of good substrings of even length and the number of good substrings of odd length.\n\nExamples\n\nInput\n\nbb\n\n\nOutput\n\n1 2\n\n\nInput\n\nbaab\n\n\nOutput\n\n2 4\n\n\nInput\n\nbabb\n\n\nOutput\n\n2 5\n\n\nInput\n\nbabaa\n\n\nOutput\n\n2 7\n\nNote\n\nIn example 1, there are three good substrings (\"b\", \"b\", and \"bb\"). One of them has even length and two of them have odd length.\n\nIn example 2, there are six good substrings (i.e. \"b\", \"a\", \"a\", \"b\", \"aa\", \"baab\"). Two of them have even length and four of them have odd length.\n\nIn example 3, there are seven good substrings (i.e. \"b\", \"a\", \"b\", \"b\", \"bb\", \"bab\", \"babb\"). Two of them have even length and five of them have odd length.\n\nDefinitions\n\nA substring s[l, r] (1 \u2264 l \u2264 r \u2264 n) of string s = s1s2... sn is string slsl + 1... sr.\n\nA string s = s1s2... sn is a palindrome if it is equal to string snsn - 1... s1.",
        "task_name": "451_D. Count Good Substrings",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import re\nimport sys\n\nans = [0, 0]\ns = raw_input()\nn = len(s)\n\nfor i in xrange(n):\n    j = 0\n    while j <= min(i, n - i - 1):\n        t = ''\n        t = re.sub(r'[^\\w\\s]|(.)(?=\\1)', '', s[i - j:i + j + 1])\n        if t[::-1] != t:\n            if not (i - j > 0 and i + j < n - 1 and s[i - j - 1] == s[i + j + 1]):\n                break\n        else:\n            ans[1] += 1\n            #print 'ODD %s %s %s' % (s[i - j:i + j + 1], i + j, n)\n        j += 1\n\nfor i in xrange(n):\n    j = 0\n    while j <= min(i, n - i - 2):\n        t = re.sub(r'[^\\w\\s]|(.)(?=\\1)', '', s[i - j:i + j + 2])\n        if t[::-1] != t:\n            if not (i - j > 0 and i + j < n - 2 and s[i - j - 1] == s[i + j + 2]):\n                break\n        else:\n            ans[0] += 1\n            #print 'EVEN ' + s[i - j:i + j + 2]\n        j += 1\n\n'''\n\nfor i in xrange(n):\n    j = 0\n    while i - j >= 0 and i + j < n:\n        t = re.sub(r'[^\\w\\s]|(.)(?=\\1)', '', s[i - j:i + j + 1])\n        if t[::-1] != t:\n            break\n        if i + j < n - 1:\n            t = re.sub(r'[^\\w\\s]|(.)(?=\\1)', '', s[i - j:i + j + 2])\n            if t[::-1] != t:\n                break\n        j += 1\n        ans[\n'''\n\nsys.stdout.write('%s %s' % tuple(ans))\n",
        "correct": false,
        "task_id": "0279",
        "depth": 2
    },
    {
        "description": "It turns out that you are a great fan of rock band AC/PE. Peter learned that and started the following game: he plays the first song of the list of n songs of the group, and you have to find out the name of the song. After you tell the song name, Peter immediately plays the following song in order, and so on.\n\nThe i-th song of AC/PE has its recognizability pi. This means that if the song has not yet been recognized by you, you listen to it for exactly one more second and with probability of pi percent you recognize it and tell it's name. Otherwise you continue listening it. Note that you can only try to guess it only when it is integer number of seconds after the moment the song starts playing.\n\nIn all AC/PE songs the first words of chorus are the same as the title, so when you've heard the first ti seconds of i-th song and its chorus starts, you immediately guess its name for sure.\n\nFor example, in the song Highway To Red the chorus sounds pretty late, but the song has high recognizability. In the song Back In Blue, on the other hand, the words from the title sound close to the beginning of the song, but it's hard to name it before hearing those words. You can name both of these songs during a few more first seconds.\n\nDetermine the expected number songs of you will recognize if the game lasts for exactly T seconds (i. e. you can make the last guess on the second T, after that the game stops).\n\nIf all songs are recognized faster than in T seconds, the game stops after the last song is recognized.\n\nInput\n\nThe first line of the input contains numbers n and T (1 \u2264 n \u2264 5000, 1 \u2264 T \u2264 5000), separated by a space. Next n lines contain pairs of numbers pi and ti (0 \u2264 pi \u2264 100, 1 \u2264 ti \u2264 T). The songs are given in the same order as in Petya's list.\n\nOutput\n\nOutput a single number \u2014 the expected number of the number of songs you will recognize in T seconds. Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6.\n\nExamples\n\nInput\n\n2 2\n50 2\n10 1\n\n\nOutput\n\n1.500000000\n\n\nInput\n\n2 2\n0 2\n100 2\n\n\nOutput\n\n1.000000000\n\n\nInput\n\n3 3\n50 3\n50 2\n25 2\n\n\nOutput\n\n1.687500000\n\n\nInput\n\n2 2\n0 2\n0 2\n\n\nOutput\n\n1.000000000",
        "task_name": "498_B. Name That Tune",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def main():\n    n, time = map(int, raw_input().split())\n    pp, qq, tt, qqtt = [], [], [], []\n    for i in xrange(n):\n        a, b = raw_input().split()\n        p = float(a) / 100.\n        pp.append(p)\n        q = 1. - p\n        qq.append(q)\n        t = int(b) - 1\n        tt.append(t)\n        qqtt.append(q ** t)\n    t_cur, u_cur, t_prev, u_prev = ([0.] * (time + 1) for _ in '1234')\n    for k in xrange(n - 1, 0, -1):\n        q_1, t_1, qt_1 = qq[k - 1], tt[k - 1], qqtt[k - 1]\n        p, t, qt = pp[k], tt[k], qqtt[k]\n        q = w = qq[k]\n        for i in xrange(time):\n            t_cur[i + 1] = x = ((p * u_prev[i] + 1. - w) if i < t else\n                                (p * u_prev[i] + qt * t_prev[i - t] + 1.))\n            u_cur[i + 1] = ((q_1 * u_cur[i] + x) if i + 1 < t_1 else\n                            (q_1 * u_cur[i] + x - qt_1 * t_cur[i - t_1 + 1]))\n            w *= q\n        t_cur, u_cur, t_prev, u_prev = t_prev, u_prev, t_cur, u_cur\n        t_cur[0] = u_cur[0] = 0.\n    p, t, qt = pp[0], tt[0], qqtt[0]\n    q = w = qq[0]\n    for i in xrange(t):\n        t_cur[i + 1] = p * u_prev[i] + 1. - w\n        w *= q\n    for i in xrange(t, time):\n        t_cur[i + 1] = p * u_prev[i] + qt * t_prev[i - t] + 1.\n    print('{:.12f}'.format(t_cur[-1]))\n\n\nif __name__ == '__main__':\n    main()\n",
        "correct": true,
        "task_id": "0281",
        "depth": 2
    },
    {
        "description": "Bob has a permutation of integers from 1 to n. Denote this permutation as p. The i-th element of p will be denoted as pi. For all pairs of distinct integers i, j between 1 and n, he wrote the number ai, j = min(pi, pj). He writes ai, i = 0 for all integer i from 1 to n.\n\nBob gave you all the values of ai, j that he wrote down. Your job is to reconstruct any permutation that could have generated these values. The input will be formed so that it is guaranteed that there is at least one solution that is consistent with the information given.\n\nInput\n\nThe first line of the input will contain a single integer n (2 \u2264 n \u2264 50).\n\nThe next n lines will contain the values of ai, j. The j-th number on the i-th line will represent ai, j. The i-th number on the i-th line will be 0. It's guaranteed that ai, j = aj, i and there is at least one solution consistent with the information given.\n\nOutput\n\nPrint n space separated integers, which represents a permutation that could have generated these values. If there are multiple possible solutions, print any of them.\n\nExamples\n\nInput\n\n2\n0 1\n1 0\n\n\nOutput\n\n2 1\n\n\nInput\n\n5\n0 2 2 1 2\n2 0 4 1 3\n2 4 0 1 3\n1 1 1 0 1\n2 3 3 1 0\n\n\nOutput\n\n2 5 4 1 3\n\nNote\n\nIn the first case, the answer can be {1, 2} or {2, 1}.\n\nIn the second case, another possible answer is {2, 4, 5, 1, 3}.",
        "task_name": "618_B. Guess the Permutation",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "i = input()\nfor j in range(0,i):\n\tdic = {}\n\tq = raw_input()\n\ta = q.split(\" \")\n\tma = False\n\tfor k in a:\n\t\tif (int(k) == i-1):\n\t\t\tprint(q.replace(\" 0 \",\" \"+str(i)+\" \"))\n\t\t\tma = True\n\t\t\tbreak\n\tif (ma):\n\t\tbreak",
        "correct": false,
        "task_id": "0282",
        "depth": 2
    },
    {
        "description": "Tonight is brain dinner night and all zombies will gather together to scarf down some delicious brains. The artful Heidi plans to crash the party, incognito, disguised as one of them. Her objective is to get away with at least one brain, so she can analyze the zombies' mindset back home and gain a strategic advantage.\n\nThey will be N guests tonight: N - 1 real zombies and a fake one, our Heidi. The living-dead love hierarchies as much as they love brains: each one has a unique rank in the range 1 to N - 1, and Heidi, who still appears slightly different from the others, is attributed the highest rank, N. Tonight there will be a chest with brains on display and every attendee sees how many there are. These will then be split among the attendees according to the following procedure:\n\nThe zombie of the highest rank makes a suggestion on who gets how many brains (every brain is an indivisible entity). A vote follows. If at least half of the attendees accept the offer, the brains are shared in the suggested way and the feast begins. But if majority is not reached, then the highest-ranked zombie is killed, and the next zombie in hierarchy has to make a suggestion. If he is killed too, then the third highest-ranked makes one, etc. (It's enough to have exactly half of the votes \u2013 in case of a tie, the vote of the highest-ranked alive zombie counts twice, and he will of course vote in favor of his own suggestion in order to stay alive.)\n\nYou should know that zombies are very greedy and sly, and they know this too \u2013 basically all zombie brains are alike. Consequently, a zombie will never accept an offer which is suboptimal for him. That is, if an offer is not strictly better than a potential later offer, he will vote against it. And make no mistake: while zombies may normally seem rather dull, tonight their intellects are perfect. Each zombie's priorities for tonight are, in descending order: \n\n  1. survive the event (they experienced death already once and know it is no fun), \n  2. get as many brains as possible. \n\n\n\nHeidi goes first and must make an offer which at least half of the attendees will accept, and which allocates at least one brain for Heidi herself.\n\nWhat is the smallest number of brains that have to be in the chest for this to be possible?\n\nInput\n\nThe only line of input contains one integer: N, the number of attendees (1 \u2264 N \u2264 109).\n\nOutput\n\nOutput one integer: the smallest number of brains in the chest which allows Heidi to take one brain home.\n\nExamples\n\nInput\n\n1\n\n\nOutput\n\n1\n\n\nInput\n\n4\n\n\nOutput\n\n2\n\nNote",
        "task_name": "690_A1. Collective Mindsets (easy)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import fileinput\nimport math\n\nfor line in fileinput.input():\n    attendees = int(line.strip())\n    min_brains = math.ceil(attendees / 2)\n    min_brains = max(1, min_brains)\n    print(min_brains)\n    ",
        "correct": false,
        "task_id": "0283",
        "depth": 1
    },
    {
        "description": "There was an epidemic in Monstropolis and all monsters became sick. To recover, all monsters lined up in queue for an appointment to the only doctor in the city.\n\nSoon, monsters became hungry and began to eat each other. \n\nOne monster can eat other monster if its weight is strictly greater than the weight of the monster being eaten, and they stand in the queue next to each other. Monsters eat each other instantly. There are no monsters which are being eaten at the same moment. After the monster A eats the monster B, the weight of the monster A increases by the weight of the eaten monster B. In result of such eating the length of the queue decreases by one, all monsters after the eaten one step forward so that there is no empty places in the queue again. A monster can eat several monsters one after another. Initially there were n monsters in the queue, the i-th of which had weight ai.\n\nFor example, if weights are [1, 2, 2, 2, 1, 2] (in order of queue, monsters are numbered from 1 to 6 from left to right) then some of the options are:\n\n  1. the first monster can't eat the second monster because a1 = 1 is not greater than a2 = 2; \n  2. the second monster can't eat the third monster because a2 = 2 is not greater than a3 = 2; \n  3. the second monster can't eat the fifth monster because they are not neighbors; \n  4. the second monster can eat the first monster, the queue will be transformed to [3, 2, 2, 1, 2]. \n\n\n\nAfter some time, someone said a good joke and all monsters recovered. At that moment there were k (k \u2264 n) monsters in the queue, the j-th of which had weight bj. Both sequences (a and b) contain the weights of the monsters in the order from the first to the last.\n\nYou are required to provide one of the possible orders of eating monsters which led to the current queue, or to determine that this could not happen. Assume that the doctor didn't make any appointments while monsters were eating each other.\n\nInput\n\nThe first line contains single integer n (1 \u2264 n \u2264 500) \u2014 the number of monsters in the initial queue.\n\nThe second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 106) \u2014 the initial weights of the monsters.\n\nThe third line contains single integer k (1 \u2264 k \u2264 n) \u2014 the number of monsters in the queue after the joke. \n\nThe fourth line contains k integers b1, b2, ..., bk (1 \u2264 bj \u2264 5\u00b7108) \u2014 the weights of the monsters after the joke. \n\nMonsters are listed in the order from the beginning of the queue to the end.\n\nOutput\n\nIn case if no actions could lead to the final queue, print \"NO\" (without quotes) in the only line. \n\nOtherwise print \"YES\" (without quotes) in the first line. In the next n - k lines print actions in the chronological order. In each line print x \u2014 the index number of the monster in the current queue which eats and, separated by space, the symbol 'L' if the monster which stays the x-th in the queue eats the monster in front of him, or 'R' if the monster which stays the x-th in the queue eats the monster behind him. After each eating the queue is enumerated again. \n\nWhen one monster eats another the queue decreases. If there are several answers, print any of them.\n\nExamples\n\nInput\n\n6\n1 2 2 2 1 2\n2\n5 5\n\n\nOutput\n\nYES\n2 L\n1 R\n4 L\n3 L\n\n\nInput\n\n5\n1 2 3 4 5\n1\n15\n\n\nOutput\n\nYES\n5 L\n4 L\n3 L\n2 L\n\n\nInput\n\n5\n1 1 1 3 3\n3\n2 1 6\n\n\nOutput\n\nNO\n\nNote\n\nIn the first example, initially there were n = 6 monsters, their weights are [1, 2, 2, 2, 1, 2] (in order of queue from the first monster to the last monster). The final queue should be [5, 5]. The following sequence of eatings leads to the final queue:\n\n  * the second monster eats the monster to the left (i.e. the first monster), queue becomes [3, 2, 2, 1, 2]; \n  * the first monster (note, it was the second on the previous step) eats the monster to the right (i.e. the second monster), queue becomes [5, 2, 1, 2]; \n  * the fourth monster eats the mosnter to the left (i.e. the third monster), queue becomes [5, 2, 3]; \n  * the finally, the third monster eats the monster to the left (i.e. the second monster), queue becomes [5, 5]. \n\n\n\nNote that for each step the output contains numbers of the monsters in their current order in the queue.",
        "task_name": "733_C. Epidemic in Monstropolis",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nn = int(sys.stdin.readline())\noriginal = map(int, sys.stdin.readline().split())\n\nk = int(sys.stdin.readline())\nfinal = map(int, sys.stdin.readline().split())\n\nif sum(original) != sum(final):\n    print('NO')\n    exit(0)\n\n\ndef _solve(o, i, r):\n    # print >> sys.stderr, i, o\n    if len(o) == 1:\n        return o[0]\n    for k, e in enumerate(o):\n        if k > 0 and o[k - 1] < e:\n            r.append((i + k + 1, 'L'))\n            return _solve(o[:k-1] + [o[k-1] + o[k]] + o[k+1:], i, r)\n        elif k < (len(o) - 1) and e > o[k + 1]:\n            r.append((i + k + 1, 'R'))\n            return _solve(o[:k] + [o[k+1] + o[k]] + o[k+2:], i, r)\n    print('NO')\n    exit(0)\n\nresult = []\n\ni = 0\nfor k, e in enumerate(final):\n    j = i\n    s = 0\n    while e > s:\n        s += original[i]\n        i += 1\n    if e < s:\n        print('NO')\n        exit(0)\n    _solve(original[j:i], k, result)\n\nprint('YES')\nfor i, s in result:\n    print('%d %s' % (i, s))\n",
        "correct": false,
        "task_id": "0284",
        "depth": 2
    },
    {
        "description": "In Berland each high school student is characterized by academic performance \u2014 integer value between 1 and 5.\n\nIn high school 0xFF there are two groups of pupils: the group A and the group B. Each group consists of exactly n students. An academic performance of each student is known \u2014 integer value between 1 and 5.\n\nThe school director wants to redistribute students between groups so that each of the two groups has the same number of students whose academic performance is equal to 1, the same number of students whose academic performance is 2 and so on. In other words, the purpose of the school director is to change the composition of groups, so that for each value of academic performance the numbers of students in both groups are equal.\n\nTo achieve this, there is a plan to produce a series of exchanges of students between groups. During the single exchange the director selects one student from the class A and one student of class B. After that, they both change their groups.\n\nPrint the least number of exchanges, in order to achieve the desired equal numbers of students for each academic performance.\n\nInput\n\nThe first line of the input contains integer number n (1 \u2264 n \u2264 100) \u2014 number of students in both groups.\n\nThe second line contains sequence of integer numbers a1, a2, ..., an (1 \u2264 ai \u2264 5), where ai is academic performance of the i-th student of the group A.\n\nThe third line contains sequence of integer numbers b1, b2, ..., bn (1 \u2264 bi \u2264 5), where bi is academic performance of the i-th student of the group B.\n\nOutput\n\nPrint the required minimum number of exchanges or -1, if the desired distribution of students can not be obtained.\n\nExamples\n\nInput\n\n4\n5 4 4 4\n5 5 4 5\n\n\nOutput\n\n1\n\n\nInput\n\n6\n1 1 1 1 1 1\n5 5 5 5 5 5\n\n\nOutput\n\n3\n\n\nInput\n\n1\n5\n3\n\n\nOutput\n\n-1\n\n\nInput\n\n9\n3 2 5 5 2 3 3 3 2\n4 1 4 1 1 2 4 4 1\n\n\nOutput\n\n4",
        "task_name": "779_A. Pupils Redistribution",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nn, a, b, mem = int(input()), rints(), rints(), [[0 for _ in range(6)] for _ in range(2)]\nans = 0\n\nfor i in range(n):\n    mem[0][a[i]] += 1\n    mem[1][b[i]] += 1\n\nfor i in range(1, 6):\n    if (mem[0][i] + mem[1][i]) & 1:\n        ans = -1\n        break\n\n    ans += max((mem[0][i] - mem[1][i]) // 2, 0)\n\nprint(ans)\n",
        "correct": true,
        "task_id": "0285",
        "depth": 1
    },
    {
        "description": "You are given a directed acyclic graph with n vertices and m edges. There are no self-loops or multiple edges between any pair of vertices. Graph can be disconnected.\n\nYou should assign labels to all vertices in such a way that:\n\n  * Labels form a valid permutation of length n \u2014 an integer sequence such that each integer from 1 to n appears exactly once in it. \n  * If there exists an edge from vertex v to vertex u then labelv should be smaller than labelu. \n  * Permutation should be lexicographically smallest among all suitable. \n\n\n\nFind such sequence of labels to satisfy all the conditions.\n\nInput\n\nThe first line contains two integer numbers n, m (2 \u2264 n \u2264 105, 1 \u2264 m \u2264 105).\n\nNext m lines contain two integer numbers v and u (1 \u2264 v, u \u2264 n, v \u2260 u) \u2014 edges of the graph. Edges are directed, graph doesn't contain loops or multiple edges.\n\nOutput\n\nPrint n numbers \u2014 lexicographically smallest correct permutation of labels of vertices.\n\nExamples\n\nInput\n\n3 3\n1 2\n1 3\n3 2\n\n\nOutput\n\n1 3 2 \n\n\nInput\n\n4 5\n3 1\n4 1\n2 3\n3 4\n2 4\n\n\nOutput\n\n4 1 2 3 \n\n\nInput\n\n5 4\n3 1\n2 1\n2 3\n4 5\n\n\nOutput\n\n3 1 2 4 5 ",
        "task_name": "825_E. Minimal Labels",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\nimport sys,heapq\n#sys.stdin=open(\"data.txt\")\ninput=sys.stdin.readline\n\n# heap\navail=[]\n\nn,m=map(int,input().split())\nindeg=[0]*n\n\ng=[[] for _ in range(n)]\nfor _ in range(m):\n    u,v=map(int,input().split())\n    indeg[v-1]+=1\n    g[u-1].append(v-1)\n\nfor i in range(n):\n    if indeg[i]==0:\n        heapq.heappush(avail,i)\n\n# label nodes\nans=[0]*n\nlabel=1\n\nwhile avail:\n    u=heapq.heappop(avail)\n    ans[u]=label\n    label+=1\n    for v in g[u]:\n        indeg[v]-=1\n        if indeg[v]==0:\n            heapq.heappush(avail,v)\n\nprint(\" \".join(map(str,ans)))\n",
        "correct": false,
        "task_id": "0286",
        "depth": 2
    },
    {
        "description": "You are given two lists of non-zero digits.\n\nLet's call an integer pretty if its (base 10) representation has at least one digit from the first list and at least one digit from the second list. What is the smallest positive pretty integer?\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 9) \u2014 the lengths of the first and the second lists, respectively.\n\nThe second line contains n distinct digits a1, a2, ..., an (1 \u2264 ai \u2264 9) \u2014 the elements of the first list.\n\nThe third line contains m distinct digits b1, b2, ..., bm (1 \u2264 bi \u2264 9) \u2014 the elements of the second list.\n\nOutput\n\nPrint the smallest pretty integer.\n\nExamples\n\nInput\n\n2 3\n4 2\n5 7 6\n\n\nOutput\n\n25\n\n\nInput\n\n8 8\n1 2 3 4 5 6 7 8\n8 7 6 5 4 3 2 1\n\n\nOutput\n\n1\n\nNote\n\nIn the first example 25, 46, 24567 are pretty, as well as many other integers. The smallest among them is 25. 42 and 24 are not pretty because they don't have digits from the second list.\n\nIn the second example all integers that have at least one digit different from 9 are pretty. It's obvious that the smallest among them is 1, because it's the smallest positive integer.",
        "task_name": "870_A. Search for Pretty Integers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "size1, size2 = map(int, raw_input().split())\n\n\nlista1 = map(int,raw_input().split())\nlista2 = map(int,raw_input().split())\n\ndef intersection(lst1, lst2): \n    lst3 = [value for value in lst1 if value in lst2] \n    return lst3\n\nintersec = intersection(lista1,lista2)\n\nif(len(intersec) > 0):\n    menorInter = intersec[0]\n    for i in range(len(intersec)):\n        if(intersec[i] < menorInter):\n            menorInter = intersec[i]\n    print(menorInter)\nelse:\n    menor1 = lista1[0]\n    for i in range(size1):\n        if(lista1[i] < menor1):\n            menor1 = lista1[i]\n    \n    menor2 = lista2[0]\n    for i in range(size2):\n        if(lista2[i] < menor2):\n            menor2 = lista2[i]\n    if(menor1 == menor2):\n        print(menor1)\n    elif(menor1 < menor2):\n        print(str(menor1) + str(menor2))\n    else:\n        print(str(menor2) + str(menor1))\n\n",
        "correct": true,
        "task_id": "0287",
        "depth": 1
    },
    {
        "description": "Eleven wants to choose a new name for herself. As a bunch of geeks, her friends suggested an algorithm to choose a name for her. Eleven wants her name to have exactly n characters. \n\n<image>\n\nHer friend suggested that her name should only consist of uppercase and lowercase letters 'O'. More precisely, they suggested that the i-th letter of her name should be 'O' (uppercase) if i is a member of Fibonacci sequence, and 'o' (lowercase) otherwise. The letters in the name are numbered from 1 to n. Fibonacci sequence is the sequence f where\n\n  * f1 = 1, \n  * f2 = 1, \n  * fn = fn - 2 + fn - 1 (n > 2). \n\n\n\nAs her friends are too young to know what Fibonacci sequence is, they asked you to help Eleven determine her new name.\n\nInput\n\nThe first and only line of input contains an integer n (1 \u2264 n \u2264 1000).\n\nOutput\n\nPrint Eleven's new name on the first and only line of output.\n\nExamples\n\nInput\n\n8\n\n\nOutput\n\nOOOoOooO\n\n\nInput\n\n15\n\n\nOutput\n\nOOOoOooOooooOoo",
        "task_name": "918_A. Eleven",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import os \nimport sys\nfrom sys import stdin, stdout\n\ndp = {}\n\ndef fib(n):\n    res = -1\n    \n    if n in dp:\n        res = dp[n]\n    elif n == 1:\n        res = 1\n    elif n == 2:\n        res = 1\n    else:\n        res = fib(n-1) + fib(n-2)\n    dp[n] = res\n    return res\n\nline = stdin.readline()\nN = int(line)\nfib(N)\nres = ''\nfor i in range(N):\n    if i+1 in dp.values():\n        res = res + 'O'\n    else:\n        res = res + 'o'\nprint(res)\n",
        "correct": false,
        "task_id": "0288",
        "depth": 1
    },
    {
        "description": "We've got no test cases. A big olympiad is coming up. But the problemsetters' number one priority should be adding another problem to the round.\n\nThe diameter of a multiset of points on the line is the largest distance between two points from this set. For example, the diameter of the multiset {1, 3, 2, 1} is 2.\n\nDiameter of multiset consisting of one point is 0.\n\nYou are given n points on the line. What is the minimum number of points you have to remove, so that the diameter of the multiset of the remaining points will not exceed d?\n\nInput\n\nThe first line contains two integers n and d (1 \u2264 n \u2264 100, 0 \u2264 d \u2264 100) \u2014 the amount of points and the maximum allowed diameter respectively.\n\nThe second line contains n space separated integers (1 \u2264 xi \u2264 100) \u2014 the coordinates of the points.\n\nOutput\n\nOutput a single integer \u2014 the minimum number of points you have to remove.\n\nExamples\n\nInput\n\n3 1\n2 1 4\n\n\nOutput\n\n1\n\n\nInput\n\n3 0\n7 7 7\n\n\nOutput\n\n0\n\n\nInput\n\n6 3\n1 3 4 6 9 10\n\n\nOutput\n\n3\n\nNote\n\nIn the first test case the optimal strategy is to remove the point with coordinate 4. The remaining points will have coordinates 1 and 2, so the diameter will be equal to 2 - 1 = 1.\n\nIn the second test case the diameter is equal to 0, so its is unnecessary to remove any points. \n\nIn the third test case the optimal strategy is to remove points with coordinates 1, 9 and 10. The remaining points will have coordinates 3, 4 and 6, so the diameter will be equal to 6 - 3 = 3.",
        "task_name": "940_A. Points on the line",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "R = raw_input()\nQ = R.split()\ng = int(Q[1])\nW = raw_input()\nV = W.split()\nl = len(V)\n\nB = []\nfor i in range(l):\n\tB.append(int(V[i]))\n\nA = sorted(B)\ncount = l\nk = 0\nfor i in range(l):\n\twhile(A[k] - A[i] <= g):\n\t\tk += 1\n\t\tif(k == l):\n\t\t\tbreak\n\tif l-k+i < count:\n\t\tcount = l-k+i\n\t\trm_elem_lower = A[:i]  #elements before index 'i'\n\t\trm_elem_upper = A[k:]  #elements from index 'k'\n\t\trm_elem_total = rm_elem_lower + rm_elem_upper\n\n\tif(k == l):\n\t\tbreak\n\t\t\nprint(count)",
        "correct": true,
        "task_id": "0289",
        "depth": 2
    },
    {
        "description": "You have a sequence A composed of N positive integers: A_{1}, A_{2}, \\cdots, A_{N}.\n\nYou will now successively do the following Q operations:\n\n* In the i-th operation, you replace every element whose value is B_{i} with C_{i}.\n\n\n\nFor each i (1 \\leq i \\leq Q), find S_{i}: the sum of all elements in A just after the i-th operation.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N, Q, A_{i}, B_{i}, C_{i} \\leq 10^{5}\n* B_{i} \\neq C_{i}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_{1} A_{2} \\cdots A_{N}\nQ\nB_{1} C_{1}\nB_{2} C_{2}\n\\vdots\nB_{Q} C_{Q}\n\n\nOutput\n\nPrint Q integers S_{i} to Standard Output in the following format:\n\n\nS_{1}\nS_{2}\n\\vdots\nS_{Q}\n\n\nNote that S_{i} may not fit into a 32-bit integer.\n\nExamples\n\nInput\n\n4\n1 2 3 4\n3\n1 2\n3 4\n2 4\n\n\nOutput\n\n11\n12\n16\n\n\nInput\n\n4\n1 1 1 1\n3\n1 2\n2 1\n3 5\n\n\nOutput\n\n8\n4\n4\n\n\nInput\n\n2\n1 2\n3\n1 100\n2 100\n100 1000\n\n\nOutput\n\n102\n200\n2000",
        "task_name": "p02630 AtCoder Beginner Contest 171 - Replacing",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from collections import Counter\ninput = raw_input\nn = int(input())\nAs = map(int, input().split(\" \"))\n\ncounter = Counter(As)\ncur_sum = sum(As)\n\nq = int(input())\nfor i in range(q):\n    b, c = map(int, input().split(\" \"))\n    try:\n        num1 = counter[b]\n    except:\n        num1 = 0\n    try:\n        counter[c] += num1\n    except:\n        counter[c] = num1\n\n    diff = (c - b) * num1\n    cur_sum += diff\n    print(cur_sum)",
        "correct": false,
        "task_id": "0291",
        "depth": 1
    },
    {
        "description": "If there is an integer not less than 0 satisfying the following conditions, print the smallest such integer; otherwise, print `-1`.\n\n* The integer has exactly N digits in base ten. (We assume 0 to be a 1-digit integer. For other integers, leading zeros are not allowed.)\n* The s_i-th digit from the left is c_i. \\left(i = 1, 2, \\cdots, M\\right)\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 3\n* 0 \\leq M \\leq 5\n* 1 \\leq s_i \\leq N\n* 0 \\leq c_i \\leq 9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\ns_1 c_1\n\\vdots\ns_M c_M\n\n\nOutput\n\nPrint the answer.\n\nExamples\n\nInput\n\n3 3\n1 7\n3 2\n1 7\n\n\nOutput\n\n702\n\n\nInput\n\n3 2\n2 1\n2 3\n\n\nOutput\n\n-1\n\n\nInput\n\n3 1\n1 0\n\n\nOutput\n\n-1",
        "task_name": "p02761 AtCoder Beginner Contest 157 - Guess The Number",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"\n// Author : snape_here - Susanta Mukherjee\n     \n\"\"\"\n \nfrom __future__ import division, print_function\n \nimport os,sys\nfrom io import BytesIO, IOBase\n \nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n \n \ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().split())\ndef li(): return list(mi())\n \n \ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \n \ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n \n \nimport math\n\nfrom itertools import permutations\n\nmod=100000007 \n\ndef main():\n\n    n,m=mi()\n    s=[0]*n\n    for i in range(m):\n        a,b=mi()\n        if s[a-1] and s[a-1]!=b:\n            print(-1)\n            exit()\n        else:\n            s[a-1]=b\n    #print(s)\n    if min(s)==0:\n        print(-1)\n        exit()\n    ans=\"\"\n    for i in range(n):\n        ans+=str(s[i])\n    print(ans)\n        \n\n# region fastio#\n \nBUFSIZE = 8192\n \n \nclass FastIO(IOBase):\n    newlines = 0\n \n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n \n \nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n \ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n \n# endregion\n \n \nif __name__ == \"__main__\":\n    #read()\n    main() \n#Comment read()\n",
        "correct": false,
        "task_id": "0292",
        "depth": 1
    },
    {
        "description": "We have N switches with \"on\" and \"off\" state, and M bulbs. The switches are numbered 1 to N, and the bulbs are numbered 1 to M.\n\nBulb i is connected to k_i switches: Switch s_{i1}, s_{i2}, ..., and s_{ik_i}. It is lighted when the number of switches that are \"on\" among these switches is congruent to p_i modulo 2.\n\nHow many combinations of \"on\" and \"off\" states of the switches light all the bulbs?\n\nConstraints\n\n* 1 \\leq N, M \\leq 10\n* 1 \\leq k_i \\leq N\n* 1 \\leq s_{ij} \\leq N\n* s_{ia} \\neq s_{ib} (a \\neq b)\n* p_i is 0 or 1.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nk_1 s_{11} s_{12} ... s_{1k_1}\n:\nk_M s_{M1} s_{M2} ... s_{Mk_M}\np_1 p_2 ... p_M\n\n\nOutput\n\nPrint the number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs.\n\nExamples\n\nInput\n\n2 2\n2 1 2\n1 2\n0 1\n\n\nOutput\n\n1\n\n\nInput\n\n2 3\n2 1 2\n1 1\n1 2\n0 0 1\n\n\nOutput\n\n0\n\n\nInput\n\n5 2\n3 1 2 5\n2 2 3\n1 0\n\n\nOutput\n\n8",
        "task_name": "p03031 AtCoder Beginner Contest 128 - Switches",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def multy(a,b):\n\tc = 0\n\tfor i in range(len(a)):\n\t\tc += a[i]*b[i]\n\treturn c\nN,M = map(int, raw_input().split())\nks = []\nfor i in range(M):\n\tks2 = map(int, raw_input().split())\n\tks.append(ks2)\npm = map(int, raw_input().split())\nplist = []\nfor i in ks:\n\tt = [0]*N\n\tini = 1\n\tfor j in i:\n\t\tif(ini == 1):\n\t\t\tini = 0\n\t\t\tcontinue\n\t\telse:\n\t\t\tt[j-1] = 1\n\tplist.append(t)\nslist = []\nfor i in range(2**N):\n\tt = []\n\tfor j in range(N):\n\t\tt.append(i%2)\n\t\ti = i/2\n\tslist.append(t)\nr = 0\nfor p in plist:\n\ts2 = []\n\tfor s in slist:\n\t\tif(multy(p,s)%2 == pm[r]):\n\t\t\ts2.append(s)\n\tr = r+1\n\tslist = s2\nprint(len(slist))",
        "correct": true,
        "task_id": "0293",
        "depth": 2
    },
    {
        "description": "There are N children, numbered 1, 2, \\ldots, N.\n\nThey have decided to share K candies among themselves. Here, for each i (1 \\leq i \\leq N), Child i must receive between 0 and a_i candies (inclusive). Also, no candies should be left over.\n\nFind the number of ways for them to share candies, modulo 10^9 + 7. Here, two ways are said to be different when there exists a child who receives a different number of candies.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 100\n* 0 \\leq K \\leq 10^5\n* 0 \\leq a_i \\leq K\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\na_1 a_2 \\ldots a_N\n\n\nOutput\n\nPrint the number of ways for the children to share candies, modulo 10^9 + 7.\n\nExamples\n\nInput\n\n3 4\n1 2 3\n\n\nOutput\n\n5\n\n\nInput\n\n1 10\n9\n\n\nOutput\n\n0\n\n\nInput\n\n2 0\n0 0\n\n\nOutput\n\n1\n\n\nInput\n\n4 100000\n100000 100000 100000 100000\n\n\nOutput\n\n665683269",
        "task_name": "p03172 Educational DP Contest - Candies",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n\nMOD = 1000000007\n\nn, k = map(int, raw_input().split())\na = map(int, raw_input().split())\n\ndp = [[0] * (k + 1) for _ in range(n + 1)]\ndp[0][0] = 1\nfor i in range(1, n + 1):\n    suma = 0\n    l = 0\n    r = 0\n    for j in range(k + 1):\n        if l < j - a[i - 1]:\n            suma -= dp[i - 1][l]\n            l += 1\n        if r <= j:\n            suma += dp[i - 1][r]\n            r += 1\n        suma %= MOD\n        dp[i][j] += suma\n        dp[i][j] %= MOD\nprint(dp[n][k])\n",
        "correct": true,
        "task_id": "0294",
        "depth": 2
    },
    {
        "description": "We have a sequence of length N, a = (a_1, a_2, ..., a_N). Each a_i is a positive integer.\n\nSnuke's objective is to permute the element in a so that the following condition is satisfied:\n\n* For each 1 \u2264 i \u2264 N - 1, the product of a_i and a_{i + 1} is a multiple of 4.\n\n\n\nDetermine whether Snuke can achieve his objective.\n\nConstraints\n\n* 2 \u2264 N \u2264 10^5\n* a_i is an integer.\n* 1 \u2264 a_i \u2264 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N\n\n\nOutput\n\nIf Snuke can achieve his objective, print `Yes`; otherwise, print `No`.\n\nExamples\n\nInput\n\n3\n1 10 100\n\n\nOutput\n\nYes\n\n\nInput\n\n4\n1 2 3 4\n\n\nOutput\n\nNo\n\n\nInput\n\n3\n1 4 1\n\n\nOutput\n\nYes\n\n\nInput\n\n2\n1 1\n\n\nOutput\n\nNo\n\n\nInput\n\n6\n2 7 1 8 2 8\n\n\nOutput\n\nYes",
        "task_name": "p03637 AtCoder Beginner Contest 069 - 4-adjacent",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "num = input()\nlist = map(int, raw_input().split())\ncount1 = 0\ncount4 = 0\nfor x in list:\n    if x % 2 == 1:\n        count1 = count1 + 1\n    if x % 4 == 0:\n        count4 = count4 + 1\nif count1 > count4 and num > 3:\n    print(\"No\")\nelif num == 2 and count4 - count1 < 0:\n    print(\"No\")\nelif num == 3 and count4 == 0 and count1 > 0:\n    print(\"No\") \nelse:\n    print(\"Yes\")",
        "correct": false,
        "task_id": "0296",
        "depth": 1
    },
    {
        "description": "Assume that a, b, and n are all positive integers. Let f (i) be the i-th fraction of the fraction a / b (0 \u2264 f (i) \u2264 9). At this time, let s be the sum of f (i) from i = 1 to n.\n\ns = f (1) + f (2) + ... + f (n)\n\n\nCreate a program that reads a, b, n, outputs s, and exits.\n\n\n\nInput\n\nThe input consists of multiple datasets. For each dataset, three integers a (1 \u2264 a \u2264 1000), b (1 \u2264 b \u2264 10000), n (1 \u2264 n \u2264 100) are given on one line, separated by blanks.\n\nThe number of datasets does not exceed 100.\n\nOutput\n\nPrints s on one line for each dataset.\n\nExample\n\nInput\n\n1 2 3\n2 3 4\n5 4 3\n4 3 2\n\n\nOutput\n\n5\n24\n7\n6",
        "task_name": "p00054 Sum of Nth decimal places",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom __future__ import (division, absolute_import, print_function,\n                        unicode_literals)\nfrom sys import stdin\n\nfor line in stdin:\n    a, b, n = (int(s) for s in line.split())\n    result = 0\n    for i in xrange(1, n+1):\n        result += (a * (10 ** i) // b) % 10\n    print(result)",
        "correct": true,
        "task_id": "0298",
        "depth": 2
    },
    {
        "description": "You are given a rectangular parallelepiped with sides of positive integer lengths A, B and C. \n\nFind the number of different groups of three integers (a, b, c) such that 1\u2264 a\u2264 b\u2264 c and parallelepiped A\u00d7 B\u00d7 C can be paved with parallelepipeds a\u00d7 b\u00d7 c. Note, that all small parallelepipeds have to be rotated in the same direction.\n\nFor example, parallelepiped 1\u00d7 5\u00d7 6 can be divided into parallelepipeds 1\u00d7 3\u00d7 5, but can not be divided into parallelepipeds 1\u00d7 2\u00d7 3.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases.\n\nEach of the next t lines contains three integers A, B and C (1 \u2264 A, B, C \u2264 10^5) \u2014 the sizes of the parallelepiped.\n\nOutput\n\nFor each test case, print the number of different groups of three points that satisfy all given conditions.\n\nExample\n\nInput\n\n4\n1 1 1\n1 6 1\n2 2 2\n100 100 100\n\n\nOutput\n\n1\n4\n4\n165\n\nNote\n\nIn the first test case, rectangular parallelepiped (1, 1, 1) can be only divided into rectangular parallelepiped with sizes (1, 1, 1).\n\nIn the second test case, rectangular parallelepiped (1, 6, 1) can be divided into rectangular parallelepipeds with sizes (1, 1, 1), (1, 1, 2), (1, 1, 3) and (1, 1, 6).\n\nIn the third test case, rectangular parallelepiped (2, 2, 2) can be divided into rectangular parallelepipeds with sizes (1, 1, 1), (1, 1, 2), (1, 2, 2) and (2, 2, 2). ",
        "task_name": "1008_D. Pave the Parallelepiped",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "fac=[0 for i in range(100001)]\nfor i in range(1,100001):\n    for j in range(i,100001,i):\n        fac[j]+=1\ndef gcd(a,b):\n        if a<b:\n            a,b=b,a\n        while b>0:\n            a,b=b,a%b\n        return a\nn=input()\nfor i in range(n):\n    A,B,C = map(int,raw_input().split())\n    la=fac[A]\n    lb=fac[B]\n    lc=fac[C]\n    ab=gcd(A,B)\n    ac=gcd(A,C)\n    bc=gcd(B,C)\n    abc=gcd(ab,C)\n    dupabc=fac[abc]\n    dupac=fac[ac]-dupabc\n    dupbc=fac[bc]-dupabc\n    dupab=fac[ab]-dupabc\n    lax=la-dupabc-dupab-dupac\n    lbx=lb-dupabc-dupab-dupbc\n    lcx=lc-dupabc-dupac-dupbc\n    ctx=lax*lbx*lcx\n    ctx+=lax*lbx*(lc-lcx)\n    ctx+=lax*lcx*(lb-lbx)\n    ctx+=lcx*lbx*(la-lax)\n    ctx+=lax*((lb-lbx)*(lc-lcx)-(dupabc+dupbc)*(dupabc+dupbc-1)/2)\n    ctx+=lbx*((la-lax)*(lc-lcx)-(dupabc+dupac)*(dupabc+dupac-1)/2)\n    ctx+=lcx*((la-lax)*(lb-lbx)-(dupabc+dupab)*(dupabc+dupab-1)/2)\n    ctx+=dupab*dupac*dupbc\n    ctx+=dupab*dupac*(dupab+dupac+2)/2\n    ctx+=dupab*dupbc*(dupab+dupbc+2)/2\n    ctx+=dupbc*dupac*(dupbc+dupac+2)/2\n    ctx+=dupabc*(dupab*dupac+dupab*dupbc+dupbc*dupac)\n    ctx+=dupabc*(dupab*(dupab+1)+(dupbc+1)*dupbc+(dupac+1)*dupac)/2\n    ctx+=(dupabc+1)*dupabc*(dupab+dupac+dupbc)/2\n    ctx+=(dupabc*dupabc+dupabc*(dupabc-1)*(dupabc-2)/6)\n    print(ctx)\nexit()",
        "correct": true,
        "task_id": "0299",
        "depth": 2
    },
    {
        "description": "Initially Ildar has an empty array. He performs n steps. On each step he takes a subset of integers already added to the array and appends the mex of this subset to the array. \n\nThe mex of an multiset of integers is the smallest non-negative integer not presented in the multiset. For example, the mex of the multiset [0, 2, 3] is 1, while the mex of the multiset [1, 2, 1] is 0.\n\nMore formally, on the step m, when Ildar already has an array a_1, a_2, \u2026, a_{m-1}, he chooses some subset of indices 1 \u2264 i_1 < i_2 < \u2026 < i_k < m (possibly, empty), where 0 \u2264 k < m, and appends the mex(a_{i_1}, a_{i_2}, \u2026 a_{i_k}) to the end of the array.\n\nAfter performing all the steps Ildar thinks that he might have made a mistake somewhere. He asks you to determine for a given array a_1, a_2, \u2026, a_n the minimum step t such that he has definitely made a mistake on at least one of the steps 1, 2, \u2026, t, or determine that he could have obtained this array without mistakes.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100 000) \u2014 the number of steps Ildar made.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 10^9) \u2014 the array Ildar obtained.\n\nOutput\n\nIf Ildar could have chosen the subsets on each step in such a way that the resulting array is a_1, a_2, \u2026, a_n, print -1.\n\nOtherwise print a single integer t \u2014 the smallest index of a step such that a mistake was made on at least one step among steps 1, 2, \u2026, t.\n\nExamples\n\nInput\n\n4\n0 1 2 1\n\n\nOutput\n\n-1\n\nInput\n\n3\n1 0 1\n\n\nOutput\n\n1\n\nInput\n\n4\n0 1 2 239\n\n\nOutput\n\n4\n\nNote\n\nIn the first example it is possible that Ildar made no mistakes. Here is the process he could have followed.\n\n  * 1-st step. The initial array is empty. He can choose an empty subset and obtain 0, because the mex of an empty set is 0. Appending this value to the end he gets the array [0]. \n  * 2-nd step. The current array is [0]. He can choose a subset [0] and obtain an integer 1, because mex(0) = 1. Appending this value to the end he gets the array [0,1]. \n  * 3-rd step. The current array is [0,1]. He can choose a subset [0,1] and obtain an integer 2, because mex(0,1) = 2. Appending this value to the end he gets the array [0,1,2]. \n  * 4-th step. The current array is [0,1,2]. He can choose a subset [0] and obtain an integer 1, because mex(0) = 1. Appending this value to the end he gets the array [0,1,2,1]. \n\n\n\nThus, he can get the array without mistakes, so the answer is -1.\n\nIn the second example he has definitely made a mistake on the very first step, because he could not have obtained anything different from 0.\n\nIn the third example he could have obtained [0, 1, 2] without mistakes, but 239 is definitely wrong.",
        "task_name": "1054_B. Appending Mex",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "t=int(input())\nli=[int(x) for x in raw_input().split()]\nflag=0\nmaxi=0\nif li[0]==0 and t!=1:    \n     for x in range(1,t):\n         if li[x]>maxi and li[x]!=maxi+1:\n             print((x+1))\n             flag=1\n             break\n         maxi=max(maxi,li[x])\n     if flag==0:\n        print(\"-1\")\nelse:\n    if t==1 and li[0]==0:\n        print(\"-1\")\n    else:    \n        print(\"1\")\n        \n    ",
        "correct": true,
        "task_id": "0301",
        "depth": 1
    },
    {
        "description": "You are given an integer number n. The following algorithm is applied to it:\n\n  1. if n = 0, then end algorithm; \n  2. find the smallest prime divisor d of n; \n  3. subtract d from n and go to step 1. \n\n\n\nDetermine the number of subtrations the algorithm will make.\n\nInput\n\nThe only line contains a single integer n (2 \u2264 n \u2264 10^{10}).\n\nOutput\n\nPrint a single integer \u2014 the number of subtractions the algorithm will make.\n\nExamples\n\nInput\n\n\n5\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n4\n\n\nOutput\n\n\n2\n\nNote\n\nIn the first example 5 is the smallest prime divisor, thus it gets subtracted right away to make a 0.\n\nIn the second example 2 is the smallest prime divisor at both steps.",
        "task_name": "1076_B. Divisor Subtraction",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\n\ndef prime(n):\n  for i in range(2, n):\n    if n % i == 0:\n      return i\n  return n\n\ncont = 0\n\nif n%2 != 0:\n  n -= prime(n)\n  cont += 1\n\nprint (cont+n)/2\n  \t \t\t\t\t\t\t \t\t\t\t\t\t\t\t\t \t\t\t \t   \t",
        "correct": false,
        "task_id": "0302",
        "depth": 1
    },
    {
        "description": "Petr has just bought a new car. He's just arrived at the most known Petersburg's petrol station to refuel it when he suddenly discovered that the petrol tank is secured with a combination lock! The lock has a scale of 360 degrees and a pointer which initially points at zero:\n\n<image>\n\nPetr called his car dealer, who instructed him to rotate the lock's wheel exactly n times. The i-th rotation should be a_i degrees, either clockwise or counterclockwise, and after all n rotations the pointer should again point at zero.\n\nThis confused Petr a little bit as he isn't sure which rotations should be done clockwise and which should be done counterclockwise. As there are many possible ways of rotating the lock, help him and find out whether there exists at least one, such that after all n rotations the pointer will point at zero again.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 15) \u2014 the number of rotations.\n\nEach of the following n lines contains one integer a_i (1 \u2264 a_i \u2264 180) \u2014 the angle of the i-th rotation in degrees.\n\nOutput\n\nIf it is possible to do all the rotations so that the pointer will point at zero after all of them are performed, print a single word \"YES\". Otherwise, print \"NO\". Petr will probably buy a new car in this case.\n\nYou can print each letter in any case (upper or lower).\n\nExamples\n\nInput\n\n\n3\n10\n20\n30\n\n\nOutput\n\n\nYES\n\n\nInput\n\n\n3\n10\n10\n10\n\n\nOutput\n\n\nNO\n\n\nInput\n\n\n3\n120\n120\n120\n\n\nOutput\n\n\nYES\n\nNote\n\nIn the first example, we can achieve our goal by applying the first and the second rotation clockwise, and performing the third rotation counterclockwise.\n\nIn the second example, it's impossible to perform the rotations in order to make the pointer point at zero in the end.\n\nIn the third example, Petr can do all three rotations clockwise. In this case, the whole wheel will be rotated by 360 degrees clockwise and the pointer will point at zero again.",
        "task_name": "1097_B. Petr and a Combination Lock",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "y = int(input())\nyes = []\nfor _ in range(y) :\n    x = yes.append(int(input()))\ni = 1\nif (yes[0] - yes[i] == 0) or (yes[0] + yes[i] == 2*yes[i+1]) or (yes[0] + yes[1] == yes[2]):\n    if (yes[0] + yes[i] + yes[i+1] == 360) :\n        print('YES')\n    else :\n        print('NO')\n\n",
        "correct": false,
        "task_id": "0303",
        "depth": 1
    },
    {
        "description": "Let's call some square matrix with integer values in its cells palindromic if it doesn't change after the order of rows is reversed and it doesn't change after the order of columns is reversed.\n\nFor example, the following matrices are palindromic:\n\n<image>\n\nThe following matrices are not palindromic because they change after the order of rows is reversed:\n\n<image>\n\nThe following matrices are not palindromic because they change after the order of columns is reversed:\n\n<image>\n\nYou are given n^2 integers. Put them into a matrix of n rows and n columns so that each number is used exactly once, each cell contains exactly one number and the resulting matrix is palindromic. If there are multiple answers, print any. If there is no solution, print \"NO\".\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 20).\n\nThe second line contains n^2 integers a_1, a_2, ..., a_{n^2} (1 \u2264 a_i \u2264 1000) \u2014 the numbers to put into a matrix of n rows and n columns.\n\nOutput\n\nIf it is possible to put all of the n^2 numbers into a matrix of n rows and n columns so that each number is used exactly once, each cell contains exactly one number and the resulting matrix is palindromic, then print \"YES\". Then print n lines with n space-separated numbers \u2014 the resulting matrix.\n\nIf it's impossible to construct any matrix, then print \"NO\".\n\nYou can print each letter in any case (upper or lower). For example, \"YeS\", \"no\" and \"yES\" are all acceptable.\n\nExamples\n\nInput\n\n\n4\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\n\n\nOutput\n\n\nYES\n1 2 2 1\n8 2 2 8\n8 2 2 8\n1 2 2 1\n\n\nInput\n\n\n3\n1 1 1 1 1 3 3 3 3\n\n\nOutput\n\n\nYES\n1 3 1\n3 1 3\n1 3 1\n\n\nInput\n\n\n4\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\n\n\nOutput\n\n\nNO\n\n\nInput\n\n\n1\n10\n\n\nOutput\n\n\nYES\n10 \n\nNote\n\nNote that there exist multiple answers for the first two examples.",
        "task_name": "1118_C. Palindromic Matrix",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division\n\"\"\"x1,y1=map(int,raw_input().split())\nx2,y2=map(int,raw_input().split())\nn=int(input())\nd={\"U\":(0,1),\"D\":(0,-1),\"R\":(1,0),\"L\":(-1,0)}\ndi=[(0,0)]\ndef f(a,b):\n    return (a[0]+b[0],a[1]+b[1])\nfor k in raw_input():\n    di.append(f(di[-1],d[k]))\"\"\"\nN=1001\nl=[0]*N\nn=int(input())\nfor k in map(int,raw_input().split()):\n    l[k]+=1\nif n%2:\n    r=[0]*4\n    for k in l:\n        r[k%4]+=1\n    if r[1]+r[3]>1:\n        print(\"NO\")\n    else:\n        ma=[[0]*n for k in range(n)]\n        for a,b in enumerate(l):\n            if b%2:\n                ma[n//2][n//2]=a\n        r[0]+=r[1]\n        r[2]+=r[3]\n        l=[k-k%2 for k in l]\n        if r[2]>=n:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            mi=[a for a,b in enumerate(l) if b%4]\n            li=[]\n            for a,b in enumerate(l):\n                li+=[a]*(b//4)\n            while len(mi)<n-1:\n                mi.append(li[-1])\n                mi.append(li[-1])\n                li.pop()\n            for x in range(n//2):\n                ma[n//2][x]=mi[-1]\n                ma[n//2][n-1-x]=mi[-1]\n                mi.pop()\n                ma[x][n//2]=mi[-1]\n                ma[n-1-x][n//2]=mi[-1]\n                mi.pop()\n            for x in range(n//2):\n                for y in range(n//2):\n                    ma[x][y]=li[-1]\n                    ma[n-1-x][y]=li[-1]\n                    ma[x][n-1-y]=li[-1]\n                    ma[n-1-x][n-1-y]=li[-1]\n                    li.pop()\n            print(\"\\n\".join(map(lambda x:\" \".join(map(str,x)),ma)))       \nelse:\n    if max(k%4 for k in l):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        li=[]\n        ma=[[0]*n for k in range(n)]\n        for a,b in enumerate(l):\n            li+=[a]*(b//4)\n        for x in range(n//2):\n            for y in range(n//2):\n                ma[x][y]=li[-1]\n                ma[n-1-x][y]=li[-1]\n                ma[x][n-1-y]=li[-1]\n                ma[n-1-x][n-1-y]=li[-1]\n                li.pop()\n        print(\"\\n\".join(map(lambda x:\" \".join(map(str,x)),ma)))\n",
        "correct": true,
        "task_id": "0304",
        "depth": 2
    },
    {
        "description": "You are given a connected undirected graph consisting of n vertices and m edges. There are no self-loops or multiple edges in the given graph.\n\nYou have to direct its edges in such a way that the obtained directed graph does not contain any paths of length two or greater (where the length of path is denoted as the number of traversed edges).\n\nInput\n\nThe first line contains two integer numbers n and m (2 \u2264 n \u2264 2 \u22c5 10^5, n - 1 \u2264 m \u2264 2 \u22c5 10^5) \u2014 the number of vertices and edges, respectively.\n\nThe following m lines contain edges: edge i is given as a pair of vertices u_i, v_i (1 \u2264 u_i, v_i \u2264 n, u_i \u2260 v_i). There are no multiple edges in the given graph, i. e. for each pair (u_i, v_i) there are no other pairs (u_i, v_i) and (v_i, u_i) in the list of edges. It is also guaranteed that the given graph is connected (there is a path between any pair of vertex in the given graph).\n\nOutput\n\nIf it is impossible to direct edges of the given graph in such a way that the obtained directed graph does not contain paths of length at least two, print \"NO\" in the first line.\n\nOtherwise print \"YES\" in the first line, and then print any suitable orientation of edges: a binary string (the string consisting only of '0' and '1') of length m. The i-th element of this string should be '0' if the i-th edge of the graph should be directed from u_i to v_i, and '1' otherwise. Edges are numbered in the order they are given in the input.\n\nExample\n\nInput\n\n\n6 5\n1 5\n2 1\n1 4\n3 1\n6 1\n\n\nOutput\n\n\nYES\n10100\n\nNote\n\nThe picture corresponding to the first example: <image>\n\nAnd one of possible answers: <image>",
        "task_name": "1144_F. Graph Without Long Directed Paths",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"\nAuthor    : raj1307 - Raj Singh\nInstitute : Jalpaiguri Government Engineering College\nDate      : 18.04.19\n\"\"\"\nfrom __future__ import division, print_function\nimport itertools,os,sys,threading\nfrom collections import deque, Counter, OrderedDict, defaultdict\n#from heapq import nsmallest, nlargest, heapify, #heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial,pow,pi\n#from bisect import bisect_left,bisect_right\n#from decimal import *\n\n\n\n\n\n\ndef ii(): return int(input())\ndef si(): return str(input())\ndef mi():return map(int,input().strip().split(\" \"))\ndef li():return list(mi())\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef ntl(n):return [int(i) for i in str(n)]\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p1\n    return res\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\n# For getting input from input.txt file \n#sys.stdin = open('input.txt', 'r')  \n  \n# Printing the Output to output.txt file \n#sys.stdout = open('output.txt', 'w') \n\nvis=[0]*1000000\ncol=[0]*1000000\ndef dfs(u,c):\n    \n    if vis[u]:\n        if col[u]!=c:\n            print('NO')\n            exit()\n        return\n    col[u]=c\n    vis[u]=1\n    for i in g[u]:\n        dfs(i,c^1)\n    \ng=defaultdict(list)\n\ndef main():\n   \n    n,m=mi()\n    uu=[0]*1000000\n    for i in range(m):\n        x,y=mi()\n        uu[i]=x\n        g[x].append(y)\n        g[y].append(x)\n        \n    dfs(1,0)\n    print('YES')\n    for i in range(m):\n        if col[uu[i]]:\n            print(1,end='')\n        else:\n            print(0,end='')\n    \n    \n    \n\nif __name__ == \"__main__\":\n    sys.setrecursionlimit(1000000)\n    threading.stack_size(20480000)\n    thread = threading.Thread(target=main)\n    thread.start()",
        "correct": false,
        "task_id": "0305",
        "depth": 1
    },
    {
        "description": "You are given two arrays a and b, both of length n.\n\nLet's define a function f(l, r) = \u2211_{l \u2264 i \u2264 r} a_i \u22c5 b_i.\n\nYour task is to reorder the elements (choose an arbitrary order of elements) of the array b to minimize the value of \u2211_{1 \u2264 l \u2264 r \u2264 n} f(l, r). Since the answer can be very large, you have to print it modulo 998244353. Note that you should minimize the answer but not its remainder.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in a and b.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^6), where a_i is the i-th element of a.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (1 \u2264 b_j \u2264 10^6), where b_j is the j-th element of b.\n\nOutput\n\nPrint one integer \u2014 the minimum possible value of \u2211_{1 \u2264 l \u2264 r \u2264 n} f(l, r) after rearranging elements of b, taken modulo 998244353. Note that you should minimize the answer but not its remainder.\n\nExamples\n\nInput\n\n\n5\n1 8 7 2 4\n9 7 2 9 3\n\n\nOutput\n\n\n646\n\n\nInput\n\n\n1\n1000000\n1000000\n\n\nOutput\n\n\n757402647\n\n\nInput\n\n\n2\n1 3\n4 2\n\n\nOutput\n\n\n20",
        "task_name": "1165_E. Two Arrays and Sum of Functions",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n\"\"\"<https://github.com/cheran-senthil/PyRival>\"\"\"\nfrom __future__ import division, print_function\n\nimport operator as op\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    _str = str\n    str = lambda x=b\"\": x if type(x) is bytes else _str(x).encode()\n\n\ndef main():\n    n = int(input())\n    a = [int(x) * (n - i) * (i + 1) for i, x in enumerate(input().split())]\n    b = [int(x) for x in input().split()]\n\n    a.sort()\n    b.sort(reverse=True)\n\n    res = 0\n    for ai, bi in zip(a, b):\n        res = (res + ai * bi) % 998244353\n    print(res)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._buffer = BytesIO()\n        self._fd = file.fileno()\n        self._writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self._buffer.write if self._writable else None\n\n    def read(self):\n        if self._buffer.tell():\n            return self._buffer.read()\n        return os.read(self._fd, os.fstat(self._fd).st_size)\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self._buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(b), self._buffer.seek(ptr)\n        self.newlines -= 1\n        return self._buffer.readline()\n\n    def flush(self):\n        if self._writable:\n            os.write(self._fd, self._buffer.getvalue())\n            self._buffer.truncate(0), self._buffer.seek(0)\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", b\" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", b\"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nsys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(b\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": true,
        "task_id": "0306",
        "depth": 1
    },
    {
        "description": "The Third Doctor Who once correctly said that travel between parallel universes is \"like travelling sideways\". However, he incorrectly thought that there were infinite parallel universes, whereas in fact, as we now all know, there will never be more than 250.\n\nHeidi recently got her hands on a multiverse observation tool. She was able to see all n universes lined up in a row, with non-existent links between them. She also noticed that the Doctor was in the k-th universe.\n\nThe tool also points out that due to restrictions originating from the space-time discontinuum, the number of universes will never exceed m.\n\nObviously, the multiverse is unstable because of free will. Each time a decision is made, one of two events will randomly happen: a new parallel universe is created, or a non-existent link is broken.\n\nMore specifically, \n\n  * When a universe is created, it will manifest itself between any two adjacent universes or at one of the ends. \n  * When a link is broken, it could be cut between any two adjacent universes. After separating the multiverse into two segments, the segment NOT containing the Doctor will cease to exist. \n\n\n\nHeidi wants to perform a simulation of t decisions. Each time a decision is made, Heidi wants to know the length of the multiverse (i.e. the number of universes), and the position of the Doctor.\n\nInput\n\nThe first line contains four integers n, k, m and t (2 \u2264 k \u2264 n \u2264 m \u2264 250, 1 \u2264 t \u2264 1000).\n\nEach of the following t lines is in one of the following formats: \n\n  * \"1 i\" \u2014 meaning that a universe is inserted at the position i (1 \u2264 i \u2264 l + 1), where l denotes the current length of the multiverse. \n  * \"0 i\" \u2014 meaning that the i-th link is broken (1 \u2264 i \u2264 l - 1), where l denotes the current length of the multiverse. \n\nOutput\n\nOutput t lines. Each line should contain l, the current length of the multiverse and k, the current position of the Doctor.\n\nIt is guaranteed that the sequence of the steps will be valid, i.e. the multiverse will have length at most m and when the link breaking is performed, there will be at least one universe in the multiverse.\n\nExample\n\nInput\n\n\n5 2 10 4\n0 1\n1 1\n0 4\n1 2\n\n\nOutput\n\n\n4 1\n5 2\n4 2\n5 3\n\nNote\n\nThe multiverse initially consisted of 5 universes, with the Doctor being in the second.\n\nFirst, link 1 was broken, leaving the multiverse with 4 universes, and the Doctor in the first.\n\nThen, a universe was added to the leftmost end of the multiverse, increasing the multiverse length to 5, and the Doctor was then in the second universe.\n\nThen, the rightmost link was broken.\n\nFinally, a universe was added between the first and the second universe.",
        "task_name": "1184_D1. Parallel Universes (Easy)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"                         \nBeautiful is better than ugly.\n    Explicit is better than implicit.\nSimple is better than complex.\n    Complex is better than complicated.\nFlat is better than nested.\n    Sparse is better than dense.\n                    \n    * Readability counts *\n\n // Author : raj1307 - Raj Singh\n // Date   : 7.07.19\n\n\"\"\"\n\nfrom __future__ import division, print_function\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    _str = str\n    str = lambda x=b\"\": x if type(x) is bytes else _str(x).encode()\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial,pow,pi\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n#from itertools import permutations\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod,MOD=1000000007,998244353\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [i for i in str(n)]\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p1\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n# For getting input from input.txt file \n#sys.stdin = open('input.txt', 'r')  \n  \n# Printing the Output to output.txt file \n#sys.stdout = open('output.txt', 'w') \n\n    \n\ndef main():\n    \n    \n    n,k,m,t=mi()\n    \n    for i in range(t):\n        \n        a,b=mi()\n        \n        if a==1:\n            n+=1\n            if b<=k:\n                k+=1\n            \n        else:\n            \n            if b<k:\n                n-=b\n                k-=b\n            else:\n                n-=(n-b)\n        \n        print(n,k)\n            \n            \n    \n    \n    \n    \n\n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        if self.buffer.tell():\n            return self.buffer.read()\n        return os.read(self._fd, os.fstat(self._fd).st_size)\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", b\" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", b\"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nsys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(b\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n    #dmain()",
        "correct": true,
        "task_id": "0307",
        "depth": 1
    },
    {
        "description": "There are n students standing in a circle in some order. The index of the i-th student is p_i. It is guaranteed that all indices of students are distinct integers from 1 to n (i. e. they form a permutation).\n\nStudents want to start a round dance. A clockwise round dance can be started if the student 2 comes right after the student 1 in clockwise order (there are no students between them), the student 3 comes right after the student 2 in clockwise order, and so on, and the student n comes right after the student n - 1 in clockwise order. A counterclockwise round dance is almost the same thing \u2014 the only difference is that the student i should be right after the student i - 1 in counterclockwise order (this condition should be met for every i from 2 to n). \n\nFor example, if the indices of students listed in clockwise order are [2, 3, 4, 5, 1], then they can start a clockwise round dance. If the students have indices [3, 2, 1, 4] in clockwise order, then they can start a counterclockwise round dance.\n\nYour task is to determine whether it is possible to start a round dance. Note that the students cannot change their positions before starting the dance; they cannot swap or leave the circle, and no other student can enter the circle. \n\nYou have to answer q independent queries.\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 200) \u2014 the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 \u2264 n \u2264 200) \u2014 the number of students.\n\nThe second line of the query contains a permutation of indices p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n), where p_i is the index of the i-th student (in clockwise order). It is guaranteed that all p_i are distinct integers from 1 to n (i. e. they form a permutation).\n\nOutput\n\nFor each query, print the answer on it. If a round dance can be started with the given order of students, print \"YES\". Otherwise print \"NO\".\n\nExample\n\nInput\n\n\n5\n4\n1 2 3 4\n3\n1 3 2\n5\n1 2 3 5 4\n1\n1\n5\n3 2 1 5 4\n\n\nOutput\n\n\nYES\nYES\nNO\nYES\nYES",
        "task_name": "1203_A. Circle of Students",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# a, b, c, d = [int (x) for x in input().split()]\n\nimport sys \ninput = sys.stdin.readline\n\nfrom collections import defaultdict\n\n\n\ndef solve():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tflag = True\n\tfor i in range(1, n-1):\n\t\tleft = a[i-1] if a[i-1] <= n // 2 else n - a[i-1] + 1\n\t\tright = a[i+1] if a[i+1] <= n // 2 else n - a[i+1] + 1\n\t\ta[i] = a[i] if a[i] <= n // 2 else n - a[i] + 1\n\t\tif abs(left - a[i]) > 1 or abs(right - a[i]) > 1:\n\t\t\t\tflag = False\n\t\t\t\tbreak\n\tprint(\"YES\" if flag else \"NO\")\n\n\nif __name__ == \"__main__\":\n\tfor _ in range(int(input())):\n\t\tsolve()\n",
        "correct": false,
        "task_id": "0308",
        "depth": 1
    },
    {
        "description": "Petya loves lucky numbers. Everybody knows that lucky numbers are positive integers whose decimal representation contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nOne day Petya dreamt of a lexicographically k-th permutation of integers from 1 to n. Determine how many lucky numbers in the permutation are located on the positions whose indexes are also lucky numbers.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 109) \u2014 the number of elements in the permutation and the lexicographical number of the permutation.\n\nOutput\n\nIf the k-th permutation of numbers from 1 to n does not exist, print the single number \"-1\" (without the quotes). Otherwise, print the answer to the problem: the number of such indexes i, that i and ai are both lucky numbers.\n\nExamples\n\nInput\n\n7 4\n\n\nOutput\n\n1\n\n\nInput\n\n4 7\n\n\nOutput\n\n1\n\nNote\n\nA permutation is an ordered set of n elements, where each integer from 1 to n occurs exactly once. The element of permutation in position with index i is denoted as ai (1 \u2264 i \u2264 n). Permutation a is lexicographically smaller that permutation b if there is such a i (1 \u2264 i \u2264 n), that ai < bi, and for any j (1 \u2264 j < i) aj = bj. Let's make a list of all possible permutations of n elements and sort it in the order of lexicographical increasing. Then the lexicographically k-th permutation is the k-th element of this list of permutations.\n\nIn the first sample the permutation looks like that:\n\n1 2 3 4 6 7 5\n\nThe only suitable position is 4.\n\nIn the second sample the permutation looks like that:\n\n2 1 3 4\n\nThe only suitable position is 4.",
        "task_name": "121_C. Lucky Permutation",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "debug = False\n\nimport sys, math\n\n\n\ndef out():\n    FIN.close()\n    FOUT.close()\n    sys.exit()\n\ndef num(ind):\n    i = 0\n    k = ind\n    while k > 0:\n        i += 1\n        if not f[i]:\n            k -= 1\n    return i\n\ndef nextlucky(x):\n    s = str(x)\n    lens = len(s)\n    for i in range(lens - 1, -1, -1):\n        if s[i] == '4':\n            res = s[:i] + '7' + '4' * (lens - i - 1)\n            return int(res)\n    return int('4' * (lens + 1))\n\n\nif debug:\n    FIN = open('input.txt', 'r')\n    FOUT = open('output.txt', 'w')\nelse:\n    FIN = sys.stdin\n    FOUT = sys.stdout\n\nn, k = map(int, FIN.readline().split())\n\nfact = [0] * 14\nfact[0] = 1\nfor i in range(1, 14):\n    fact[i] = fact[i - 1] * i\nif n < 14 and fact[n] < k:\n    FOUT.write('-1')\n    out()\na = [0] * 14\np = [0] * 14\nf = [False] * 14\nfor i in range(1, 14):\n    a[i] = n - 13 + i\nind = 0\nfor i in range(1, 14):\n    j = 1\n    while ind < k:\n        j += 1\n        ind += fact[13 - i]\n    ind -= fact[13 - i]\n    j -= 1\n    p[i] = num(j)\n    f[p[i]] = True\n\nlucky = [0] * 2000\nlucky[0] = 4\ncount = 0\nwhile lucky[count] <= n:\n    count += 1\n    lucky[count] = nextlucky(lucky[count - 1])\n\nans = 0\nind = count\nfor i in range(count):\n    if lucky[i] < n - 12:\n        ans += 1\n    else:\n      #  ind = i\n        break\nfor i in range(1, 14):\n    if (i + n - 13) > 0 and (a[p[i]] > 0):\n        if ((i + n - 13) in lucky) and ((a[p[i]]) in lucky):\n            ans += 1\n    \nFOUT.write(str(ans))        \nout()\n\n",
        "correct": true,
        "task_id": "0309",
        "depth": 2
    },
    {
        "description": "Demonstrative competitions will be held in the run-up to the 20NN Berlatov Olympic Games. Today is the day for the running competition!\n\nBerlatov team consists of 2n runners which are placed on two running tracks; n runners are placed on each track. The runners are numbered from 1 to n on each track. The runner with number i runs through the entire track in i seconds.\n\nThe competition is held as follows: first runners on both tracks start running at the same time; when the slower of them arrives at the end of the track, second runners on both tracks start running, and everyone waits until the slower of them finishes running, and so on, until all n pairs run through the track.\n\nThe organizers want the run to be as long as possible, but if it lasts for more than k seconds, the crowd will get bored. As the coach of the team, you may choose any order in which the runners are arranged on each track (but you can't change the number of runners on each track or swap runners between different tracks).\n\nYou have to choose the order of runners on each track so that the duration of the competition is as long as possible, but does not exceed k seconds.\n\nFormally, you want to find two permutations p and q (both consisting of n elements) such that sum = \u2211_{i=1}^{n} max(p_i, q_i) is maximum possible, but does not exceed k. If there is no such pair, report about it.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 10^6, 1 \u2264 k \u2264 n^2) \u2014 the number of runners on each track and the maximum possible duration of the competition, respectively.\n\nOutput\n\nIf it is impossible to reorder the runners so that the duration of the competition does not exceed k seconds, print -1. \n\nOtherwise, print three lines. The first line should contain one integer sum \u2014 the maximum possible duration of the competition not exceeding k. The second line should contain a permutation of n integers p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n, all p_i should be pairwise distinct) \u2014 the numbers of runners on the first track in the order they participate in the competition. The third line should contain a permutation of n integers q_1, q_2, ..., q_n (1 \u2264 q_i \u2264 n, all q_i should be pairwise distinct) \u2014 the numbers of runners on the second track in the order they participate in the competition. The value of sum = \u2211_{i=1}^{n} max(p_i, q_i) should be maximum possible, but should not exceed k. If there are multiple answers, print any of them.\n\nExamples\n\nInput\n\n\n5 20\n\n\nOutput\n\n\n20\n1 2 3 4 5 \n5 2 4 3 1 \n\n\nInput\n\n\n3 9\n\n\nOutput\n\n\n8\n1 2 3 \n3 2 1 \n\n\nInput\n\n\n10 54\n\n\nOutput\n\n\n-1\n\nNote\n\nIn the first example the order of runners on the first track should be [5, 3, 2, 1, 4], and the order of runners on the second track should be [1, 4, 2, 5, 3]. Then the duration of the competition is max(5, 1) + max(3, 4) + max(2, 2) + max(1, 5) + max(4, 3) = 5 + 4 + 2 + 5 + 4 = 20, so it is equal to the maximum allowed duration.\n\nIn the first example the order of runners on the first track should be [2, 3, 1], and the order of runners on the second track should be [2, 1, 3]. Then the duration of the competition is 8, and it is the maximum possible duration for n = 3.",
        "task_name": "1244_G. Running in Pairs",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ninput = sys.stdin.readline\n\ndef sum1n(n):\n    return (n*(n+1))//2\ndef count_max(n):\n    k1 = n//2\n    k2 = n - k1\n    return 2*sum1n(n) - sum1n(k1) - sum1n(k2)\n    \nn, k = map(int, input().split())\n\nmn = n*(n+1) // 2\nif k < mn:\n    print(\"-1\")\nelse:\n    mx = count_max(n)\n    target = min(k, mx)\n    print(str(target)+\"\\n\")\n\n    a = [i for i in range(1, n+1)]\n    b = [i for i in range(1, n+1)]\n    cur = mn\n    i = n-1\n    while cur != target:\n        f = a[i]\n        s = n+1-a[i]\n        if f-s < target-cur:\n##            print(i)\n##            print(a)\n##            print(b)\n            b[i], b[n-1-i] = b[n-1-i], b[i]\n            cur += f-s\n            i -= 1\n        else:\n            j = a[i] - (target-cur) - 1\n            b[i], b[j] = b[j], b[i]\n            cur = target\n##    print(\"11\")\n    print(\" \".join(map(str, a)))\n    print(\" \".join(map(str, b)))\n",
        "correct": true,
        "task_id": "0310",
        "depth": 1
    },
    {
        "description": "Now that Kuroni has reached 10 years old, he is a big boy and doesn't like arrays of integers as presents anymore. This year he wants a Bracket sequence as a Birthday present. More specifically, he wants a bracket sequence so complex that no matter how hard he tries, he will not be able to remove a simple subsequence!\n\nWe say that a string formed by n characters '(' or ')' is simple if its length n is even and positive, its first n/2 characters are '(', and its last n/2 characters are ')'. For example, the strings () and (()) are simple, while the strings )( and ()() are not simple.\n\nKuroni will be given a string formed by characters '(' and ')' (the given string is not necessarily simple). An operation consists of choosing a subsequence of the characters of the string that forms a simple string and removing all the characters of this subsequence from the string. Note that this subsequence doesn't have to be continuous. For example, he can apply the operation to the string ')()(()))', to choose a subsequence of bold characters, as it forms a simple string '(())', delete these bold characters from the string and to get '))()'. \n\nKuroni has to perform the minimum possible number of operations on the string, in such a way that no more operations can be performed on the remaining string. The resulting string does not have to be empty.\n\nSince the given string is too large, Kuroni is unable to figure out how to minimize the number of operations. Can you help him do it instead?\n\nA sequence of characters a is a subsequence of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters.\n\nInput\n\nThe only line of input contains a string s (1 \u2264 |s| \u2264 1000) formed by characters '(' and ')', where |s| is the length of s.\n\nOutput\n\nIn the first line, print an integer k \u2014 the minimum number of operations you have to apply. Then, print 2k lines describing the operations in the following format:\n\nFor each operation, print a line containing an integer m \u2014 the number of characters in the subsequence you will remove.\n\nThen, print a line containing m integers 1 \u2264 a_1 < a_2 < ... < a_m \u2014 the indices of the characters you will remove. All integers must be less than or equal to the length of the current string, and the corresponding subsequence must form a simple string.\n\nIf there are multiple valid sequences of operations with the smallest k, you may print any of them.\n\nExamples\n\nInput\n\n\n(()((\n\n\nOutput\n\n\n1\n2\n1 3 \n\n\nInput\n\n\n)(\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n(()())\n\n\nOutput\n\n\n1\n4\n1 2 5 6 \n\nNote\n\nIn the first sample, the string is '(()(('. The operation described corresponds to deleting the bolded subsequence. The resulting string is '(((', and no more operations can be performed on it. Another valid answer is choosing indices 2 and 3, which results in the same final string.\n\nIn the second sample, it is already impossible to perform any operations.",
        "task_name": "1305_B. Kuroni and Simple Strings",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s=raw_input()\nz=list(s)\nmin=[]\nmax=[]\nfinal=[]\nfor i in range(len(z)):\n\tif z[i]=='(':\n\t\tmin.append(i)\nfor i in range(len(z)-1,-1,-1):\t\t\n\tif z[i]==')':\n\t\tmax.append(i)\nif len(max)>=len(min):\n\tc=len(min)\nelse:\n\tc=len(max)\t\t\t\nfor i in range(c):\n\tif min[i]<max[i]:\n\t\tfinal.append(min[i])\n\t\tfinal.append(max[i])\nfinal=sorted(final)\nif len(final)==0:\n\tprint('0')\nelse:\t\n\tprint('1')\n\tprint(len(final))\n\tfor i in range(len(final)):\n\t\tprint(final[i]+1),\t\t\n\n",
        "correct": true,
        "task_id": "0312",
        "depth": 1
    },
    {
        "description": "Little Petya very much likes computers. Recently he has received a new \"Ternatron IV\" as a gift from his mother. Unlike other modern computers, \"Ternatron IV\" operates with ternary and not binary logic. Petya immediately wondered how the xor operation is performed on this computer (and whether there is anything like it).\n\nIt turned out that the operation does exist (however, it is called tor) and it works like this. Suppose that we need to calculate the value of the expression a tor b. Both numbers a and b are written in the ternary notation one under the other one (b under a). If they have a different number of digits, then leading zeroes are added to the shorter number until the lengths are the same. Then the numbers are summed together digit by digit. The result of summing each two digits is calculated modulo 3. Note that there is no carry between digits (i. e. during this operation the digits aren't transferred). For example: 1410 tor 5010 = 01123 tor 12123 = 10213 = 3410.\n\nPetya wrote numbers a and c on a piece of paper. Help him find such number b, that a tor b = c. If there are several such numbers, print the smallest one.\n\nInput\n\nThe first line contains two integers a and c (0 \u2264 a, c \u2264 109). Both numbers are written in decimal notation.\n\nOutput\n\nPrint the single integer b, such that a tor b = c. If there are several possible numbers b, print the smallest one. You should print the number in decimal notation.\n\nExamples\n\nInput\n\n14 34\n\n\nOutput\n\n50\n\n\nInput\n\n50 34\n\n\nOutput\n\n14\n\n\nInput\n\n387420489 225159023\n\n\nOutput\n\n1000000001\n\n\nInput\n\n5 5\n\n\nOutput\n\n0",
        "task_name": "136_B. Ternary Logic",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nans = 0\n\n(a, b) = [int(x) for x in sys.stdin.readline().strip().split()]\n\nwhile a > 0 and b > 0:\n    ans *= 3\n    ans += (3 - a % 3 + b % 3) % 3\n    a //= 3\n    b //= 3\n\nprint(ans)",
        "correct": false,
        "task_id": "0313",
        "depth": 1
    },
    {
        "description": "Being stuck at home, Ray became extremely bored. To pass time, he asks Lord Omkar to use his time bending power: Infinity Clock! However, Lord Omkar will only listen to mortals who can solve the following problem:\n\nYou are given an array a of n integers. You are also given an integer k. Lord Omkar wants you to do k operations with this array.\n\nDefine one operation as the following: \n\n  1. Set d to be the maximum value of your array. \n  2. For every i from 1 to n, replace a_{i} with d-a_{i}. \n\n\n\nThe goal is to predict the contents in the array after k operations. Please help Ray determine what the final sequence will look like!\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and k (1 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 k \u2264 10^{18}) \u2013 the length of your array and the number of operations to perform.\n\nThe second line of each test case contains n integers a_{1},a_{2},...,a_{n} (-10^9 \u2264 a_{i} \u2264 10^9) \u2013 the initial contents of your array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each case, print the final version of array a after k operations described above.\n\nExample\n\nInput\n\n\n3\n2 1\n-199 192\n5 19\n5 -1 4 2 0\n1 2\n69\n\n\nOutput\n\n\n391 0\n0 6 1 3 5\n0\n\nNote\n\nIn the first test case the array changes as follows:\n\n  * Initially, the array is [-199, 192]. d = 192.\n\n  * After the operation, the array becomes [d-(-199), d-192] = [391, 0].",
        "task_name": "1392_B. Omkar and Infinity Clock",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n_interactive = False\n\ndef main():\n    for _ in range(int(input())):\n        n, k = input_as_list()\n        ar = input_as_list()\n\n        mx = max(ar)\n        a1 = [mx-e for e in ar]\n        mx = max(a1)\n        a2 = [mx-e for e in a1]\n\n        print(*([a2, a1][k%2]))\n\n\n# Constants\nINF = float('inf')\nMOD = 10**9+7\nalphabets = 'abcdefghijklmnopqrstuvwxyz'\n\n# Python3 equivalent names\nimport os, sys, itertools\nif sys.version_info[0] < 3:\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\n# print-flush in interactive problems\nif _interactive:\n    flush = sys.stdout.flush\n    def printf(*args, **kwargs):\n        print(*args, **kwargs)\n        flush()\n\n# Debug print, only works on local machine\nLOCAL = \"LOCAL_\" in os.environ\ndebug_print = (print) if LOCAL else (lambda *x, **y: None)\n\n# Fast IO\nif (not LOCAL) and (not _interactive):\n    from io import BytesIO\n    from atexit import register\n    sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\n    sys.stdout = BytesIO()\n    register(lambda: os.write(1, sys.stdout.getvalue()))\n    input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# Some utility functions(Input, N-dimensional lists, ...)\ndef input_as_list():\n    return [int(x) for x in input().split()]\n\ndef input_with_offset(o):\n    return [int(x)+o for x in input().split()]\n\ndef input_as_matrix(n, m):\n    return [input_as_list() for _ in range(n)]\n\ndef array_of(f, *dim):\n    return [array_of(f, *dim[1:]) for _ in range(dim[0])] if dim else f()\n\nmain()\n",
        "correct": true,
        "task_id": "0314",
        "depth": 1
    },
    {
        "description": "There are n piranhas with sizes a_1, a_2, \u2026, a_n in the aquarium. Piranhas are numbered from left to right in order they live in the aquarium.\n\nScientists of the Berland State University want to find if there is dominant piranha in the aquarium. The piranha is called dominant if it can eat all the other piranhas in the aquarium (except itself, of course). Other piranhas will do nothing while the dominant piranha will eat them.\n\nBecause the aquarium is pretty narrow and long, the piranha can eat only one of the adjacent piranhas during one move. Piranha can do as many moves as it needs (or as it can). More precisely: \n\n  * The piranha i can eat the piranha i-1 if the piranha i-1 exists and a_{i - 1} < a_i. \n  * The piranha i can eat the piranha i+1 if the piranha i+1 exists and a_{i + 1} < a_i. \n\n\n\nWhen the piranha i eats some piranha, its size increases by one (a_i becomes a_i + 1).\n\nYour task is to find any dominant piranha in the aquarium or determine if there are no such piranhas.\n\nNote that you have to find any (exactly one) dominant piranha, you don't have to find all of them.\n\nFor example, if a = [5, 3, 4, 4, 5], then the third piranha can be dominant. Consider the sequence of its moves: \n\n  * The piranha eats the second piranha and a becomes [5, \\underline{5}, 4, 5] (the underlined piranha is our candidate). \n  * The piranha eats the third piranha and a becomes [5, \\underline{6}, 5]. \n  * The piranha eats the first piranha and a becomes [\\underline{7}, 5]. \n  * The piranha eats the second piranha and a becomes [\\underline{8}]. \n\n\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (2 \u2264 n \u2264 3 \u22c5 10^5) \u2014 the number of piranhas in the aquarium. The second line of the test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9), where a_i is the size of the i-th piranha.\n\nIt is guaranteed that the sum of n does not exceed 3 \u22c5 10^5 (\u2211 n \u2264 3 \u22c5 10^5).\n\nOutput\n\nFor each test case, print the answer: -1 if there are no dominant piranhas in the aquarium or index of any dominant piranha otherwise. If there are several answers, you can print any.\n\nExample\n\nInput\n\n\n6\n5\n5 3 4 4 5\n3\n1 1 1\n5\n4 4 3 4 4\n5\n5 5 4 3 2\n3\n1 1 2\n5\n5 4 3 5 5\n\n\nOutput\n\n\n3\n-1\n4\n3\n3\n1\n\nNote\n\nThe first test case of the example is described in the problem statement.\n\nIn the second test case of the example, there are no dominant piranhas in the aquarium.\n\nIn the third test case of the example, the fourth piranha can firstly eat the piranha to the left and the aquarium becomes [4, 4, 5, 4], then it can eat any other piranha in the aquarium.",
        "task_name": "1433_C. Dominant Piranha",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\nfrom collections import Counter\nimport math\n\n\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    t=int(input())\n    for _ in range(t):\n        n=int(input())\n        a=list(map(int,input().split()))\n        m=(max(a))\n        f=0\n        for i in range(n):\n            if(a[i]==m):\n                if( (i-1>=0 and a[i]>a[i-1]) or (i+1<n and a[i]>a[i+1])):\n                    print(i+1)\n                    f=1\n                    break\n        if(f==0):\n            print(-1)\n\n\n\n\n\n            \n\n\n\n\n\n        \n        \n        \n\n    # region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# zz=not __debug__\n# if not zz:\n#     sys.stdin=open('input.txt', 'r')\n#     sys.stdout=open('output.txt','w')\n# # endregion\n\nif __name__ == \"__main__\":\n    main()",
        "correct": true,
        "task_id": "0315",
        "depth": 2
    },
    {
        "description": "After reaching your destination, you want to build a new colony on the new planet. Since this planet has many mountains and the colony must be built on a flat surface you decided to flatten the mountains using boulders (you are still dreaming so this makes sense to you).\n\n<image>\n\nYou are given an array h_1, h_2, ..., h_n, where h_i is the height of the i-th mountain, and k \u2014 the number of boulders you have.\n\nYou will start throwing boulders from the top of the first mountain one by one and they will roll as follows (let's assume that the height of the current mountain is h_i): \n\n  * if h_i \u2265 h_{i + 1}, the boulder will roll to the next mountain; \n  * if h_i < h_{i + 1}, the boulder will stop rolling and increase the mountain height by 1 (h_i = h_i + 1); \n  * if the boulder reaches the last mountain it will fall to the waste collection system and disappear. \n\n\n\nYou want to find the position of the k-th boulder or determine that it will fall into the waste collection system.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nEach test case consists of two lines. The first line in each test case contains two integers n and k (1 \u2264 n \u2264 100; 1 \u2264 k \u2264 10^9) \u2014 the number of mountains and the number of boulders.\n\nThe second line contains n integers h_1, h_2, ..., h_n (1 \u2264 h_i \u2264 100) \u2014 the height of the mountains.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 100.\n\nOutput\n\nFor each test case, print -1 if the k-th boulder will fall into the collection system. Otherwise, print the position of the k-th boulder.\n\nExample\n\nInput\n\n\n4\n4 3\n4 1 2 3\n2 7\n1 8\n4 5\n4 1 2 3\n3 1\n5 3 1\n\n\nOutput\n\n\n2\n1\n-1\n-1\n\nNote\n\nLet's simulate the first case:\n\n  * The first boulder starts at i = 1; since h_1 \u2265 h_2 it rolls to i = 2 and stops there because h_2 < h_3. \n  * The new heights are [4,2,2,3]. \n  * The second boulder starts at i = 1; since h_1 \u2265 h_2 the boulder rolls to i = 2; since h_2 \u2265 h_3 the boulder rolls to i = 3 and stops there because h_3 < h_4. \n  * The new heights are [4,2,3,3]. \n  * The third boulder starts at i = 1; since h_1 \u2265 h_2 it rolls to i = 2 and stops there because h_2 < h_3. \n  * The new heights are [4,3,3,3]. \n\n\n\nThe positions where each boulder stopped are the following: [2,3,2].\n\nIn the second case, all 7 boulders will stop right at the first mountain rising its height from 1 to 8.\n\nThe third case is similar to the first one but now you'll throw 5 boulders. The first three will roll in the same way as in the first test case. After that, mountain heights will be equal to [4, 3, 3, 3], that's why the other two boulders will fall into the collection system.\n\nIn the fourth case, the first and only boulders will fall straight into the collection system.",
        "task_name": "1481_B. New Colony",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\ninputData = InputData()\ninput = inputData.input\n\ndef intin():\n    return(int(input()))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(input()))\ndef strin():\n    return input()\ndef lout(l, sep=\"\\n\"):\n    print(sep.join(l))\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\n# from collections import defaultdict as ddict, Counter\n# from heapq import *\n# from Queue import Queue\n\ndef main():\n    n,k = intlin()\n    h = intlin()\n    if n == 1:\n        print(-1)\n        return\n    while k > 0:\n        i = 1\n        while i < n:\n            if h[i-1] >= h[i]:\n                i += 1\n            else:\n                h[i-1] += 1\n                k -= 1\n                break\n        if i == n:\n            print(-1)\n            return\n    print(i)\n\n\n\nfor _ in xrange(intin()):\n    main()\n    # print(\"YES\" if main() else \"NO\")\n# main()\n\nif testing:\n    sys.stdout = cmd\n    print(int(round(time() * 1000))  - start_time)",
        "correct": true,
        "task_id": "0316",
        "depth": 2
    },
    {
        "description": "This is an interactive problem.\n\nLittle Dormi was faced with an awkward problem at the carnival: he has to guess the edges of an unweighted tree of n nodes! The nodes of the tree are numbered from 1 to n.\n\nThe game master only allows him to ask one type of question:\n\n  * Little Dormi picks a node r (1 \u2264 r \u2264 n), and the game master will reply with an array d_1, d_2, \u2026, d_n, where d_i is the length of the shortest path from node r to i, for all 1 \u2264 i \u2264 n.\n\n\n\nAdditionally, to make the game unfair challenge Little Dormi the game master will allow at most \u2308n/2\u2309 questions, where \u2308 x \u2309 denotes the smallest integer greater than or equal to x.\n\nFaced with the stomach-churning possibility of not being able to guess the tree, Little Dormi needs your help to devise a winning strategy!\n\nNote that the game master creates the tree before the game starts, and does not change it during the game.\n\nInput\n\nThe first line of input contains the integer n (2 \u2264 n \u2264 2 000), the number of nodes in the tree.\n\nYou will then begin interaction.\n\nOutput\n\nWhen your program has found the tree, first output a line consisting of a single \"!\" followed by n-1 lines each with two space separated integers a and b, denoting an edge connecting nodes a and b (1 \u2264 a, b \u2264 n). Once you are done, terminate your program normally immediately after flushing the output stream.\n\nYou may output the edges in any order and an edge (a,b) is considered the same as an edge (b,a). Answering is not considered as a query.\n\nInteraction\n\nAfter taking input, you may make at most \u2308n/2\u2309 queries. Each query is made in the format \"? r\", where r is an integer 1 \u2264 r \u2264 n that denotes the node you want to pick for that query.\n\nYou will then receive n space separated integers d_1, d_2, \u2026, d_n, where d_i is the length of the shortest path from node r to i, followed by a newline.\n\nAfter printing a query do not forget to output end of line and flush the output. Otherwise, you will get Idleness limit exceeded. To do this, use:\n\n  * fflush(stdout) or cout.flush() in C++; \n  * System.out.flush() in Java; \n  * flush(output) in Pascal; \n  * stdout.flush() in Python; \n  * see documentation for other languages. \n\n\n\nIf at any point you make an invalid query or try to make more than \u2308 n/2 \u2309 queries, the interaction will terminate immediately and you will receive a Wrong Answer verdict.\n\nHacks\n\nTo hack a solution, use the following format.\n\nThe first line contains the integer n (2 \u2264 n \u2264 2 000).\n\nThe next n\u22121 lines contain two integers u and v (1 \u2264 u,v \u2264 n) denoting an edge between u and v (u \u2260 v). These n-1 edges must form a tree.\n\nExamples\n\nInput\n\n\n4\n\n0 1 2 2\n\n1 0 1 1\n\nOutput\n\n\n? 1\n\n? 2\n\n!\n4 2\n1 2\n2 3\n\n\nInput\n\n\n5\n\n2 2 1 1 0\n\n\nOutput\n\n\n? 5\n\n!\n4 5\n3 5\n2 4\n1 3\n\nNote\n\nHere is the tree from the first example.\n\n<image>\n\nNotice that the edges can be output in any order.\n\nAdditionally, here are the answers for querying every single node in example 1:\n\n  * 1: [0,1,2,2] \n  * 2: [1,0,1,1] \n  * 3: [2,1,0,2] \n  * 4: [2,1,2,0]\n\n\n\nBelow is the tree from the second example interaction.\n\n<image>\n\nLastly, here are the answers for querying every single node in example 2:\n\n  * 1: [0,4,1,3,2] \n  * 2: [4,0,3,1,2] \n  * 3: [1,3,0,2,1] \n  * 4: [3,1,2,0,1] \n  * 5: [2,2,1,1,0]",
        "task_name": "1534_D. Lost Tree",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division,print_function\nfrom heapq import*\nfrom random import*\nimport sys\nn=int(input())\ndef ask(i):\n    print(\"?\",i+1)\n    sys.__stdout__.flush()\n    return list(map(int,raw_input().split()))\nse=set(k for k in range(n))\nar=[[] for k in range(n)]\nd={}\nwhile se:\n    u=min(se)\n    d[u] = ask(u)\n    for k in range(n):\n        if d[u][k]<2:\n            if k in se:\n                se.remove(k)\n            if k!=u:\n                ar[u].append(k)\n                ar[k].append(u)\ndef untiersdeuxtiers(k,i):#to apply between point at distance 3 and both asked to know who is on the path between them\n    for j in range(n):\n        if d[k][j]==1 and d[i][j]==2:\n            return j\nfor k in d:\n    for i in d:\n        if d[k][i]==3:\n            u=untiersdeuxtiers(k,i)\n            v=untiersdeuxtiers(i,k)\n            ar[u].append(v)\n            ar[v].append(u)\nfor k in range(n):\n    ar[k]=list(set(ar[k]))\nprint('!')\nfor k in range(n):\n    for i in ar[k]:\n        if i>k:\n            print(k+1,i+1)\n",
        "correct": false,
        "task_id": "0317",
        "depth": 2
    },
    {
        "description": "You are given n points on a plane. All points are different.\n\nFind the number of different groups of three points (A, B, C) such that point B is the middle of segment AC. \n\nThe groups of three points are considered unordered, that is, if point B is the middle of segment AC, then groups (A, B, C) and (C, B, A) are considered the same.\n\nInput\n\nThe first line contains a single integer n (3 \u2264 n \u2264 3000) \u2014 the number of points. \n\nNext n lines contain the points. The i-th line contains coordinates of the i-th point: two space-separated integers xi, yi ( - 1000 \u2264 xi, yi \u2264 1000).\n\nIt is guaranteed that all given points are different.\n\nOutput\n\nPrint the single number \u2014 the answer to the problem. \n\nExamples\n\nInput\n\n3\n1 1\n2 2\n3 3\n\n\nOutput\n\n1\n\n\nInput\n\n3\n0 0\n-1 0\n0 1\n\n\nOutput\n\n0",
        "task_name": "181_B. Number of Triplets",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s, n = 0, int(raw_input())\na = [0] * n\nfor i in range(n):\n    x, y = map(int, raw_input().split())\n    a[i] = 10000 * (x + 1000) + y + 1000\na.sort()\nb = set(2 * k for k in a)\nfor i, u in enumerate(a, 2):        \n    for v in a[i: ]:\n        if v + u in b: s += 1 \nprint(s)",
        "correct": true,
        "task_id": "0318",
        "depth": 2
    },
    {
        "description": "Vitaly has an array of n distinct integers. Vitaly wants to divide this array into three non-empty sets so as the following conditions hold: \n\n  1. The product of all numbers in the first set is less than zero ( < 0). \n  2. The product of all numbers in the second set is greater than zero ( > 0). \n  3. The product of all numbers in the third set is equal to zero. \n  4. Each number from the initial array must occur in exactly one set. \n\n\n\nHelp Vitaly. Divide the given array.\n\nInput\n\nThe first line of the input contains integer n (3 \u2264 n \u2264 100). The second line contains n space-separated distinct integers a1, a2, ..., an (|ai| \u2264 103) \u2014 the array elements.\n\nOutput\n\nIn the first line print integer n1 (n1 > 0) \u2014 the number of elements in the first set. Then print n1 numbers \u2014 the elements that got to the first set.\n\nIn the next line print integer n2 (n2 > 0) \u2014 the number of elements in the second set. Then print n2 numbers \u2014 the elements that got to the second set.\n\nIn the next line print integer n3 (n3 > 0) \u2014 the number of elements in the third set. Then print n3 numbers \u2014 the elements that got to the third set.\n\nThe printed sets must meet the described conditions. It is guaranteed that the solution exists. If there are several solutions, you are allowed to print any of them.\n\nExamples\n\nInput\n\n3\n-1 2 0\n\n\nOutput\n\n1 -1\n1 2\n1 0\n\n\nInput\n\n4\n-1 -2 -3 0\n\n\nOutput\n\n1 -1\n2 -3 -2\n1 0",
        "task_name": "300_A. Array",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\na = map(int, raw_input().split())\nzero = [i for i in a if i == 0]\npos = [i for i in a if i > 0]\nneg = [i for i in a if i < 0]\nif len(pos) == 0:\n    pos.append(neg.pop())\n    pos.append(neg.pop())\nif len(neg) % 2 == 0:\n    zero.append(neg.pop())\ns = str(len(neg))\nfor i in neg:\n    s += ' ' + str(i)\nprint(s)\ns = str(len(zero))\nfor i in zero:\n    s += ' ' + str(i)\nprint(s)\ns = str(len(pos))\nfor i in pos:\n    s += ' ' + str(i)\nprint(s)\n",
        "correct": false,
        "task_id": "0320",
        "depth": 1
    },
    {
        "description": "There are n kangaroos with pockets. Each kangaroo has a size (integer number). A kangaroo can go into another kangaroo's pocket if and only if the size of kangaroo who hold the kangaroo is at least twice as large as the size of kangaroo who is held.\n\nEach kangaroo can hold at most one kangaroo, and the kangaroo who is held by another kangaroo cannot hold any kangaroos.\n\nThe kangaroo who is held by another kangaroo cannot be visible from outside. Please, find a plan of holding kangaroos with the minimal number of kangaroos who is visible.\n\nInput\n\nThe first line contains a single integer \u2014 n (1 \u2264 n \u2264 5\u00b7105). Each of the next n lines contains an integer si \u2014 the size of the i-th kangaroo (1 \u2264 si \u2264 105).\n\nOutput\n\nOutput a single integer \u2014 the optimal number of visible kangaroos.\n\nExamples\n\nInput\n\n8\n2\n5\n7\n6\n9\n8\n4\n2\n\n\nOutput\n\n5\n\n\nInput\n\n8\n9\n1\n6\n2\n6\n5\n8\n3\n\n\nOutput\n\n5",
        "task_name": "372_A. Counting Kangaroos is Fun",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\n\ndef main(arr):\n    if len(arr) == 1:\n        return 1\n\n    arr.sort()\n    start = 0\n    move = len(arr) // 2\n    ans = len(arr)\n    while move < len(arr):\n        if arr[start] is None:\n            move += 1\n        elif arr[start] * 2 > arr[move]:\n            # Try to find a match for start.\n            move += 1\n        else:\n            # Can do a grouping.\n            arr[move] = None\n            ans -= 1\n            move += 1\n            start += 1\n    return ans\n\n\nif __name__ == \"__main__\":\n    arr = []\n    for e, line in enumerate(sys.stdin.readlines()):\n        if e == 0:\n            continue\n        arr.append(int(line.strip()))\n    print(main(arr))\n",
        "correct": true,
        "task_id": "0321",
        "depth": 1
    },
    {
        "description": "Kolya got string s for his birthday, the string consists of small English letters. He immediately added k more characters to the right of the string.\n\nThen Borya came and said that the new string contained a tandem repeat of length l as a substring. How large could l be?\n\nSee notes for definition of a tandem repeat.\n\nInput\n\nThe first line contains s (1 \u2264 |s| \u2264 200). This string contains only small English letters. The second line contains number k (1 \u2264 k \u2264 200) \u2014 the number of the added characters.\n\nOutput\n\nPrint a single number \u2014 the maximum length of the tandem repeat that could have occurred in the new string.\n\nExamples\n\nInput\n\naaba\n2\n\n\nOutput\n\n6\n\n\nInput\n\naaabbbb\n2\n\n\nOutput\n\n6\n\n\nInput\n\nabracadabra\n10\n\n\nOutput\n\n20\n\nNote\n\nA tandem repeat of length 2n is string s, where for any position i (1 \u2264 i \u2264 n) the following condition fulfills: si = si + n.\n\nIn the first sample Kolya could obtain a string aabaab, in the second \u2014 aaabbbbbb, in the third \u2014 abracadabrabracadabra.",
        "task_name": "443_B. Kolya and Tandem Repeat",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import os\na = str(raw_input())\nk = int(raw_input())\nla = len(a)\ni = la -1\njudge = True\nif k >= la:\n    judge = False\n    print (la + k)/2*2\nwhile i >= 0 and judge:\n    if a[i:la] in a[0:i-k+1]:\n        i -= 1\n    else:\n        break\nif judge:\n    print (la - i - 1  + k)/2*2*2",
        "correct": false,
        "task_id": "0322",
        "depth": 1
    },
    {
        "description": "A number is called quasibinary if its decimal representation contains only digits 0 or 1. For example, numbers 0, 1, 101, 110011 \u2014 are quasibinary and numbers 2, 12, 900 are not.\n\nYou are given a positive integer n. Represent it as a sum of minimum number of quasibinary numbers.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 106).\n\nOutput\n\nIn the first line print a single integer k \u2014 the minimum number of numbers in the representation of number n as a sum of quasibinary numbers.\n\nIn the second line print k numbers \u2014 the elements of the sum. All these numbers should be quasibinary according to the definition above, their sum should equal n. Do not have to print the leading zeroes in the numbers. The order of numbers doesn't matter. If there are multiple possible representations, you are allowed to print any of them.\n\nExamples\n\nInput\n\n9\n\n\nOutput\n\n9\n1 1 1 1 1 1 1 1 1 \n\n\nInput\n\n32\n\n\nOutput\n\n3\n10 11 11 ",
        "task_name": "538_B. Quasi Binary",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function\nimport io\nimport sys\nimport math\n\nf = sys.stdin\n\nif len(sys.argv) > 1:\n    f = open(sys.argv[1], \"rt\")\n\ntarget = int(f.readline().strip())\ntarget_str = str(target)\n\nnums = []\nX = target\n\nnum_bin = 2 ** len(target_str) - 1\nnum = int(str.format('{:b}', num_bin))\n\nwhile num_bin > 0:\n    while num <= X:\n        nums.append(num)\n        X -= num\n    num_bin -= 1\n    num = int(str.format('{:b}', num_bin))\n\nprint(len(nums))\nprint(str.join(' ', map(str, nums)))\n",
        "correct": false,
        "task_id": "0326",
        "depth": 2
    },
    {
        "description": "Limak is a little polar bear. He loves connecting with other bears via social networks. He has n friends and his relation with the i-th of them is described by a unique integer ti. The bigger this value is, the better the friendship is. No two friends have the same value ti.\n\nSpring is starting and the Winter sleep is over for bears. Limak has just woken up and logged in. All his friends still sleep and thus none of them is online. Some (maybe all) of them will appear online in the next hours, one at a time.\n\nThe system displays friends who are online. On the screen there is space to display at most k friends. If there are more than k friends online then the system displays only k best of them \u2014 those with biggest ti.\n\nYour task is to handle queries of two types:\n\n  * \"1 id\" \u2014 Friend id becomes online. It's guaranteed that he wasn't online before. \n  * \"2 id\" \u2014 Check whether friend id is displayed by the system. Print \"YES\" or \"NO\" in a separate line. \n\n\n\nAre you able to help Limak and answer all queries of the second type?\n\nInput\n\nThe first line contains three integers n, k and q (1 \u2264 n, q \u2264 150 000, 1 \u2264 k \u2264 min(6, n)) \u2014 the number of friends, the maximum number of displayed online friends and the number of queries, respectively.\n\nThe second line contains n integers t1, t2, ..., tn (1 \u2264 ti \u2264 109) where ti describes how good is Limak's relation with the i-th friend.\n\nThe i-th of the following q lines contains two integers typei and idi (1 \u2264 typei \u2264 2, 1 \u2264 idi \u2264 n) \u2014 the i-th query. If typei = 1 then a friend idi becomes online. If typei = 2 then you should check whether a friend idi is displayed.\n\nIt's guaranteed that no two queries of the first type will have the same idi becuase one friend can't become online twice. Also, it's guaranteed that at least one query will be of the second type (typei = 2) so the output won't be empty.\n\nOutput\n\nFor each query of the second type print one line with the answer \u2014 \"YES\" (without quotes) if the given friend is displayed and \"NO\" (without quotes) otherwise.\n\nExamples\n\nInput\n\n4 2 8\n300 950 500 200\n1 3\n2 4\n2 3\n1 1\n1 2\n2 1\n2 2\n2 3\n\n\nOutput\n\nNO\nYES\nNO\nYES\nYES\n\n\nInput\n\n6 3 9\n50 20 51 17 99 24\n1 3\n1 4\n1 5\n1 2\n2 4\n2 2\n1 1\n2 4\n2 3\n\n\nOutput\n\nNO\nYES\nNO\nYES\n\nNote\n\nIn the first sample, Limak has 4 friends who all sleep initially. At first, the system displays nobody because nobody is online. There are the following 8 queries:\n\n  1. \"1 3\" \u2014 Friend 3 becomes online. \n  2. \"2 4\" \u2014 We should check if friend 4 is displayed. He isn't even online and thus we print \"NO\". \n  3. \"2 3\" \u2014 We should check if friend 3 is displayed. Right now he is the only friend online and the system displays him. We should print \"YES\". \n  4. \"1 1\" \u2014 Friend 1 becomes online. The system now displays both friend 1 and friend 3. \n  5. \"1 2\" \u2014 Friend 2 becomes online. There are 3 friends online now but we were given k = 2 so only two friends can be displayed. Limak has worse relation with friend 1 than with other two online friends (t1 < t2, t3) so friend 1 won't be displayed \n  6. \"2 1\" \u2014 Print \"NO\". \n  7. \"2 2\" \u2014 Print \"YES\". \n  8. \"2 3\" \u2014 Print \"YES\". ",
        "task_name": "658_B. Bear and Displayed Friends",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\n\ndef siftup(ind):\n    global tree\n    while (ind != 1) and (frendly[tree[ind]] < frendly[tree[ind // 2]]):\n        tree[ind], tree[ind // 2] = tree[ind // 2], tree[ind]\n        ind //= 2\n    \n\ndef siftdown(ind):\n    global tree\n    while (ind * 2 + 1 <= len(tree) - 1) and (frendly[tree[ind]] > frendly[tree[ind * 2]] or frendly[tree[ind]] > frendly[tree[ind * 2 + 1]]):\n        if frendly[tree[ind * 2]] > frendly[tree[ind * 2 + 1]]:\n            tree[ind], tree[ind * 2 + 1] = tree[ind * 2 + 1], tree[ind]\n            ind = ind * 2 + 1\n        else:\n            tree[ind], tree[ind * 2] = tree[ind * 2], tree[ind]\n            ind *= 2\n    if (ind * 2 <= len(tree) - 1) and (frendly[tree[ind]] > frendly[tree[ind * 2]]):\n        tree[ind], tree[ind * 2] = tree[ind * 2], tree[ind]\n        ind *= 2\n        \n    \nn, k, q = map(int, sys.stdin.readline().split())\nfrendly = [0] + list(map(int, sys.stdin.readline().split()))\nbearsout = set([i for i in range(1, n + 1)])\ntree = [0]\nfor i in range(q):\n    lab, b = map(int, sys.stdin.readline().split())\n    if lab == 1:\n        if len(tree) > k:\n            if frendly[b] > frendly[tree[1]]:\n                bearsout.discard(b)\n                bearsout.add(tree[1])\n                tree[1] = b\n                siftdown(1)\n        else:\n            tree.append(b)\n            bearsout.discard(b)\n            siftup(len(tree) - 1)\n    else:\n        if b in bearsout:\n            sys.stdout.write('NO' + '\\n')\n        else:\n            sys.stdout.write('YES' + '\\n')\n            #",
        "correct": true,
        "task_id": "0328",
        "depth": 1
    },
    {
        "description": "Limak is a little polar bear. He plays by building towers from blocks. Every block is a cube with positive integer length of side. Limak has infinitely many blocks of each side length.\n\nA block with side a has volume a3. A tower consisting of blocks with sides a1, a2, ..., ak has the total volume a13 + a23 + ... + ak3.\n\nLimak is going to build a tower. First, he asks you to tell him a positive integer X \u2014 the required total volume of the tower. Then, Limak adds new blocks greedily, one by one. Each time he adds the biggest block such that the total volume doesn't exceed X.\n\nLimak asks you to choose X not greater than m. Also, he wants to maximize the number of blocks in the tower at the end (however, he still behaves greedily). Secondarily, he wants to maximize X.\n\nCan you help Limak? Find the maximum number of blocks his tower can have and the maximum X \u2264 m that results this number of blocks.\n\nInput\n\nThe only line of the input contains one integer m (1 \u2264 m \u2264 1015), meaning that Limak wants you to choose X between 1 and m, inclusive.\n\nOutput\n\nPrint two integers \u2014 the maximum number of blocks in the tower and the maximum required total volume X, resulting in the maximum number of blocks.\n\nExamples\n\nInput\n\n48\n\n\nOutput\n\n9 42\n\n\nInput\n\n6\n\n\nOutput\n\n6 6\n\nNote\n\nIn the first sample test, there will be 9 blocks if you choose X = 23 or X = 42. Limak wants to maximize X secondarily so you should choose 42.\n\nIn more detail, after choosing X = 42 the process of building a tower is:\n\n  * Limak takes a block with side 3 because it's the biggest block with volume not greater than 42. The remaining volume is 42 - 27 = 15. \n  * The second added block has side 2, so the remaining volume is 15 - 8 = 7. \n  * Finally, Limak adds 7 blocks with side 1, one by one. \n\n\n\nSo, there are 9 blocks in the tower. The total volume is is 33 + 23 + 7\u00b713 = 27 + 8 + 7 = 42.",
        "task_name": "680_D. Bear and Tower of Cubes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function\n\nm = int(raw_input())\n\ndef recurse(m):\n    if m == 0:\n        return 0, 0\n    l = 0\n    h = m + 1\n    while l + 1 != h:\n        mid = (l + h) / 2\n        if mid ** 3 <= m:\n            l = mid\n        else:\n            h = mid\n    a = l\n    one = m - a ** 3\n    two = a ** 3 - 1 - (a - 1) ** 3\n    if one >= two:\n        return map(sum, zip(recurse(one), (1, a ** 3)))\n    else:\n        return map(sum, zip(recurse(two), (1, (a - 1) ** 3)))\n\nprint(*recurse(m))\n",
        "correct": false,
        "task_id": "0329",
        "depth": 1
    },
    {
        "description": "Let\u2019s define a grid to be a set of tiles with 2 rows and 13 columns. Each tile has an English letter written in it. The letters don't have to be unique: there might be two or more tiles with the same letter written on them. Here is an example of a grid:\n    \n    \n    ABCDEFGHIJKLM  \n    NOPQRSTUVWXYZ\n\nWe say that two tiles are adjacent if they share a side or a corner. In the example grid above, the tile with the letter 'A' is adjacent only to the tiles with letters 'B', 'N', and 'O'. A tile is not adjacent to itself.\n\nA sequence of tiles is called a path if each tile in the sequence is adjacent to the tile which follows it (except for the last tile in the sequence, which of course has no successor). In this example, \"ABC\" is a path, and so is \"KXWIHIJK\". \"MAB\" is not a path because 'M' is not adjacent to 'A'. A single tile can be used more than once by a path (though the tile cannot occupy two consecutive places in the path because no tile is adjacent to itself).\n\nYou\u2019re given a string s which consists of 27 upper-case English letters. Each English letter occurs at least once in s. Find a grid that contains a path whose tiles, viewed in the order that the path visits them, form the string s. If there\u2019s no solution, print \"Impossible\" (without the quotes).\n\nInput\n\nThe only line of the input contains the string s, consisting of 27 upper-case English letters. Each English letter occurs at least once in s.\n\nOutput\n\nOutput two lines, each consisting of 13 upper-case English characters, representing the rows of the grid. If there are multiple solutions, print any of them. If there is no solution print \"Impossible\".\n\nExamples\n\nInput\n\nABCDEFGHIJKLMNOPQRSGTUVWXYZ\n\n\nOutput\n\nYXWVUTGHIJKLM\nZABCDEFSRQPON\n\n\nInput\n\nBUVTYZFQSNRIWOXXGJLKACPEMDH\n\n\nOutput\n\nImpossible",
        "task_name": "725_C. Hidden Word",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s = raw_input()\n\nx = str()\ntmp = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nfor i in range(26):\n\tif s.count(tmp[i]) == 2:\n\t\tx = tmp[i]\n\t\tbreak\n\na = s.split(x)\n\nif a[1] == '':\n\tprint('Impossible')\nelif a[0] == '' and a[2] == '':\n\tprint(x + a[1][:12])\n\tprint(a[1][:-14:-1])\nelif a[0] == '':\n\tx1 = a[2][:12 - (len(a[1]) // 2)]\n\tx2 = a[1][:(len(a[1]) // 2)]\n\tx3 = a[2][12 - (len(a[1]) // 2):]\n\tx4 = a[1][(len(a[1]) // 2):]\n\tprint(x1[::-1] + x + x2)\n\tprint(x3 + x4[::-1])\nelif a[2] == '':\n\ta = s[::-1].split(x)\n\tx1 = a[2][:12 - (len(a[1]) // 2)]\n\tx2 = a[1][:(len(a[1]) // 2)]\n\tx3 = a[2][12 - (len(a[1]) // 2):]\n\tx4 = a[1][(len(a[1]) // 2):]\n\tprint(x1[::-1] + x + x2)\n\tprint(x3 + x4[::-1])\nelse:\n\ta = ['', a[1], a[2] + a[0]]\n\tx1 = a[2][:12 - (len(a[1]) // 2)]\n\tx2 = a[1][:(len(a[1]) // 2)]\n\tx3 = a[2][12 - (len(a[1]) // 2):]\n\tx4 = a[1][(len(a[1]) // 2):]\n\tprint(x1[::-1] + x + x2)\n\tprint(x3 + x4[::-1])\n",
        "correct": true,
        "task_id": "0330",
        "depth": 1
    },
    {
        "description": "There are n servers in a laboratory, each of them can perform tasks. Each server has a unique id \u2014 integer from 1 to n.\n\nIt is known that during the day q tasks will come, the i-th of them is characterized with three integers: ti \u2014 the moment in seconds in which the task will come, ki \u2014 the number of servers needed to perform it, and di \u2014 the time needed to perform this task in seconds. All ti are distinct.\n\nTo perform the i-th task you need ki servers which are unoccupied in the second ti. After the servers begin to perform the task, each of them will be busy over the next di seconds. Thus, they will be busy in seconds ti, ti + 1, ..., ti + di - 1. For performing the task, ki servers with the smallest ids will be chosen from all the unoccupied servers. If in the second ti there are not enough unoccupied servers, the task is ignored.\n\nWrite the program that determines which tasks will be performed and which will be ignored.\n\nInput\n\nThe first line contains two positive integers n and q (1 \u2264 n \u2264 100, 1 \u2264 q \u2264 105) \u2014 the number of servers and the number of tasks. \n\nNext q lines contains three integers each, the i-th line contains integers ti, ki and di (1 \u2264 ti \u2264 106, 1 \u2264 ki \u2264 n, 1 \u2264 di \u2264 1000) \u2014 the moment in seconds in which the i-th task will come, the number of servers needed to perform it, and the time needed to perform this task in seconds. The tasks are given in a chronological order and they will come in distinct seconds. \n\nOutput\n\nPrint q lines. If the i-th task will be performed by the servers, print in the i-th line the sum of servers' ids on which this task will be performed. Otherwise, print -1.\n\nExamples\n\nInput\n\n4 3\n1 3 2\n2 2 1\n3 4 3\n\n\nOutput\n\n6\n-1\n10\n\n\nInput\n\n3 2\n3 2 3\n5 1 2\n\n\nOutput\n\n3\n3\n\n\nInput\n\n8 6\n1 3 20\n4 2 1\n6 5 5\n10 1 1\n15 3 6\n21 8 8\n\n\nOutput\n\n6\n9\n30\n-1\n15\n36\n\nNote\n\nIn the first example in the second 1 the first task will come, it will be performed on the servers with ids 1, 2 and 3 (the sum of the ids equals 6) during two seconds. In the second 2 the second task will come, it will be ignored, because only the server 4 will be unoccupied at that second. In the second 3 the third task will come. By this time, servers with the ids 1, 2 and 3 will be unoccupied again, so the third task will be done on all the servers with the ids 1, 2, 3 and 4 (the sum of the ids is 10).\n\nIn the second example in the second 3 the first task will come, it will be performed on the servers with ids 1 and 2 (the sum of the ids is 3) during three seconds. In the second 5 the second task will come, it will be performed on the server 3, because the first two servers will be busy performing the first task.",
        "task_name": "747_C. Servers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nfrom collections import deque\nn, q = map(int, stdin.readline().split())\nqueue = deque()\ncnt = 0\n\n\ndef mergesort(l, r):\n    if r != l:\n        ind = (r + l) // 2\n        mergesort(l, ind)\n        mergesort(ind + 1, r)\n        merge(l, ind, ind + 1, r)\n\n\ndef merge(lf, rf, ls, rs):\n    a = []\n    ind1 = lf\n    ind2 = ls\n    \n    while (ind1 <= rf and ind2 <= rs):\n        if queue[ind1] < queue[ind2]:\n            a.append(queue[ind1])\n            ind1 += 1\n        else:\n            a.append(queue[ind2])\n            ind2 += 1\n    \n    while (ind1 <= rf):\n        a.append(queue[ind1])\n        ind1 += 1\n    \n    while (ind2 <= rs):\n        a.append(queue[ind2])\n        ind2 += 1\n    \n    for i in range(lf, rs + 1):\n        queue[i] = a[i - lf]\n            \n\nused = [0 for i in range(n + 1)]\nlabel = 1\nfor i in range(q):\n    s = set()\n    tc, k, tp = map(int, stdin.readline().split())\n    \n    if queue:\n        mergesort(0, len(queue) - 1)\n    \n    while (queue and tc >= queue[0][0]):\n        s.add(queue[0][2])\n        cnt -= queue[0][1]\n        queue.popleft()\n\n    for i in range(1, n + 1):\n        if used[i] in s:\n            used[i] = 0\n    \n    if cnt + k <= n:\n        ans = 0\n        value = 0\n        for i in range(1, n + 1):\n            if not used[i]:\n                ans += i\n                value += 1\n                used[i] = label\n            if value == k:\n                break\n            \n        stdout.write(str(ans) + '\\n')\n        cnt += k\n        queue.append((tc + tp, k, label))\n        label += 1\n    else:\n        stdout.write('-1\\n')\n        ",
        "correct": true,
        "task_id": "0331",
        "depth": 2
    },
    {
        "description": "Oleg the client and Igor the analyst are good friends. However, sometimes they argue over little things. Recently, they started a new company, but they are having trouble finding a name for the company.\n\nTo settle this problem, they've decided to play a game. The company name will consist of n letters. Oleg and Igor each have a set of n letters (which might contain multiple copies of the same letter, the sets can be different). Initially, the company name is denoted by n question marks. Oleg and Igor takes turns to play the game, Oleg moves first. In each turn, a player can choose one of the letters c in his set and replace any of the question marks with c. Then, a copy of the letter c is removed from his set. The game ends when all the question marks has been replaced by some letter.\n\nFor example, suppose Oleg has the set of letters {i, o, i} and Igor has the set of letters {i, m, o}. One possible game is as follows :\n\nInitially, the company name is ???.\n\nOleg replaces the second question mark with 'i'. The company name becomes ?i?. The set of letters Oleg have now is {i, o}.\n\nIgor replaces the third question mark with 'o'. The company name becomes ?io. The set of letters Igor have now is {i, m}.\n\nFinally, Oleg replaces the first question mark with 'o'. The company name becomes oio. The set of letters Oleg have now is {i}.\n\nIn the end, the company name is oio.\n\nOleg wants the company name to be as lexicographically small as possible while Igor wants the company name to be as lexicographically large as possible. What will be the company name if Oleg and Igor always play optimally?\n\nA string s = s1s2...sm is called lexicographically smaller than a string t = t1t2...tm (where s \u2260 t) if si < ti where i is the smallest index such that si \u2260 ti. (so sj = tj for all j < i)\n\nInput\n\nThe first line of input contains a string s of length n (1 \u2264 n \u2264 3\u00b7105). All characters of the string are lowercase English letters. This string denotes the set of letters Oleg has initially.\n\nThe second line of input contains a string t of length n. All characters of the string are lowercase English letters. This string denotes the set of letters Igor has initially.\n\nOutput\n\nThe output should contain a string of n lowercase English letters, denoting the company name if Oleg and Igor plays optimally.\n\nExamples\n\nInput\n\ntinkoff\nzscoder\n\n\nOutput\n\nfzfsirk\n\n\nInput\n\nxxxxxx\nxxxxxx\n\n\nOutput\n\nxxxxxx\n\n\nInput\n\nioi\nimo\n\n\nOutput\n\nioi\n\nNote\n\nOne way to play optimally in the first sample is as follows :\n\n  * Initially, the company name is ???????.\n  * Oleg replaces the first question mark with 'f'. The company name becomes f??????.\n  * Igor replaces the second question mark with 'z'. The company name becomes fz?????.\n  * Oleg replaces the third question mark with 'f'. The company name becomes fzf????.\n  * Igor replaces the fourth question mark with 's'. The company name becomes fzfs???.\n  * Oleg replaces the fifth question mark with 'i'. The company name becomes fzfsi??.\n  * Igor replaces the sixth question mark with 'r'. The company name becomes fzfsir?.\n  * Oleg replaces the seventh question mark with 'k'. The company name becomes fzfsirk.\n\n\n\nFor the second sample, no matter how they play, the company name will always be xxxxxx.",
        "task_name": "794_C. Naming Company",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division\nfrom sys import stdin\nfrom math import ceil\n\nrstr = lambda: stdin.readline().strip()\ns, t = sorted(rstr()), sorted(rstr(), reverse=True)\nle = len(s)\n\nif le == 1:\n    print(s[0])\nelif le == 2:\n    print(min(s[0] + t[0], t[0] + s[0]))\nelif s[0] <= t[0]:\n    ans = []\n    for i in range(le):\n        ans.append(t[i >> 1] if (i & 1) else s[i >> 1])\n\n    if le & 1 and ans[-1] > ans[-2]:\n        ans[-1], ans[-2] = ans[-2], ans[-1]\n\n    print(''.join(ans))\nelse:\n    mds, mdt, ans = int(ceil(le / 2)) - 1, (le >> 1) - 1, []\n    for i in range(le):\n        if i & 1:\n            ans.append(t[mdt])\n            mdt -= 1\n        else:\n            ans.append(s[mds])\n            mds -= 1\n\n    print(''.join(ans[::-1]))\n",
        "correct": false,
        "task_id": "0332",
        "depth": 1
    },
    {
        "description": "Karen has just arrived at school, and she has a math test today!\n\n<image>\n\nThe test is about basic addition and subtraction. Unfortunately, the teachers were too busy writing tasks for Codeforces rounds, and had no time to make an actual test. So, they just put one question in the test that is worth all the points.\n\nThere are n integers written on a row. Karen must alternately add and subtract each pair of adjacent integers, and write down the sums or differences on the next row. She must repeat this process on the values on the next row, and so on, until only one integer remains. The first operation should be addition.\n\nNote that, if she ended the previous row by adding the integers, she should start the next row by subtracting, and vice versa.\n\nThe teachers will simply look at the last integer, and then if it is correct, Karen gets a perfect score, otherwise, she gets a zero for the test.\n\nKaren has studied well for this test, but she is scared that she might make a mistake somewhere and it will cause her final answer to be wrong. If the process is followed, what number can she expect to be written on the last row?\n\nSince this number can be quite large, output only the non-negative remainder after dividing it by 109 + 7.\n\nInput\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 200000), the number of numbers written on the first row.\n\nThe next line contains n integers. Specifically, the i-th one among these is ai (1 \u2264 ai \u2264 109), the i-th number on the first row.\n\nOutput\n\nOutput a single integer on a line by itself, the number on the final row after performing the process above.\n\nSince this number can be quite large, print only the non-negative remainder after dividing it by 109 + 7.\n\nExamples\n\nInput\n\n5\n3 6 9 12 15\n\n\nOutput\n\n36\n\n\nInput\n\n4\n3 7 5 2\n\n\nOutput\n\n1000000006\n\nNote\n\nIn the first test case, the numbers written on the first row are 3, 6, 9, 12 and 15.\n\nKaren performs the operations as follows:\n\n<image>\n\nThe non-negative remainder after dividing the final number by 109 + 7 is still 36, so this is the correct output.\n\nIn the second test case, the numbers written on the first row are 3, 7, 5 and 2.\n\nKaren performs the operations as follows:\n\n<image>\n\nThe non-negative remainder after dividing the final number by 109 + 7 is 109 + 6, so this is the correct output.",
        "task_name": "815_B. Karen and Test",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def binseq(n,p):\n    l = [1]*(n+1)\n    for i in range(n):\n        l[i+1] = (l[i]*(n-i)*pow(i+1,p-2,p)) % p\n    return l\ndef altseq(n,p):\n    l = []\n    if n % 4 == 0:\n        for e in binseq(n//2-1,p):\n            l+=[e,-e]\n        return l\n    if n % 4 == 1:\n        for e in binseq(n//2,p):\n            l+=[e,0]\n        l.pop(-1)\n        return l\n    if n % 4 == 2:\n        for e in binseq(n//2-1,p):\n            l+=[e,e]\n        return l\n    pre_l = []\n    for e in binseq(n//2-1,p):\n        pre_l += [e,e]\n    l.append(pre_l[0])\n    for i in range(1,n-1):\n        l.append(pre_l[i] + pre_l[i-1]*(-1)**(i+1))\n    l.append(pre_l[n-2]*(-1)**n)\n    return l\nif __name__ == '__main__':\n    n = int(raw_input())\n    s = altseq(n,10**9+7)\n    t = 0\n    l = map(lambda x: int(x), raw_input().split(\" \"))\n    for i in range(n):\n        t += s[i]*l[i]\n        t %= 10**9+7\n    print(str(t))\n",
        "correct": true,
        "task_id": "0333",
        "depth": 1
    },
    {
        "description": "Absent-minded Masha got set of n cubes for her birthday.\n\nAt each of 6 faces of each cube, there is exactly one digit from 0 to 9. Masha became interested what is the largest natural x such she can make using her new cubes all integers from 1 to x.\n\nTo make a number Masha can rotate her cubes and put them in a row. After that, she looks at upper faces of cubes from left to right and reads the number.\n\nThe number can't contain leading zeros. It's not required to use all cubes to build a number.\n\nPay attention: Masha can't make digit 6 from digit 9 and vice-versa using cube rotations.\n\nInput\n\nIn first line integer n is given (1 \u2264 n \u2264 3) \u2014 the number of cubes, Masha got for her birthday.\n\nEach of next n lines contains 6 integers aij (0 \u2264 aij \u2264 9) \u2014 number on j-th face of i-th cube.\n\nOutput\n\nPrint single integer \u2014 maximum number x such Masha can make any integers from 1 to x using her cubes or 0 if Masha can't make even 1.\n\nExamples\n\nInput\n\n3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n\n\nOutput\n\n87\n\nInput\n\n3\n0 1 3 5 6 8\n1 2 4 5 7 8\n2 3 4 6 7 9\n\n\nOutput\n\n98\n\nNote\n\nIn the first test case, Masha can build all numbers from 1 to 87, but she can't make 88 because there are no two cubes with digit 8.",
        "task_name": "887_B. Cubes for Masha",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = input()\n\nd = []\n\nfor _ in range(n):\n    d.append({'0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0})\n    for i in raw_input().split(\" \"):\n        d[-1][i] = 1\n\ni = -1\nwhile(i < 10**n):\n    i += 1\n    ns = str(i+1)\n\n    if n==1:\n        if len(ns) == 1:\n            if d[0][ns[0]] == 1:\n                continue\n            else:\n                break\n        else:\n            break\n    elif n==2:\n        if len(ns) == 1:\n            if d[0][ns[0]] == 1:\n                continue\n            elif d[1][ns[0]] == 1:\n                continue\n            else:\n                break\n        elif len(ns) == 2:\n            if d[0][ns[0]] == 1 and d[1][ns[1]] == 1:\n                continue\n            elif d[1][ns[0]] == 1 and d[0][ns[1]] == 1:\n                continue\n            else:\n                break\n        else:\n            break\n\n    elif n==3:\n        if len(ns) == 1:\n            if d[0][ns[0]] == 1:\n                continue\n            elif d[1][ns[0]] == 1:\n                continue\n            elif d[2][ns[0]] == 1:\n                continue\n            else:\n                break\n        elif len(ns) == 2:\n            if d[0][ns[0]] == 1 and (d[1][ns[1]] == 1 or d[2][ns[1]] == 1):\n                continue\n            elif d[1][ns[0]] == 1 and (d[0][ns[1]] == 1 or d[2][ns[1]] == 1):\n                continue\n            elif d[2][ns[0]] == 1 and (d[1][ns[1]] == 1 or d[0][ns[1]] == 1):\n                continue\n            else:\n                break\n        elif len(ns) == 3:\n            if d[0][ns[0]] == 1 and d[1][ns[1]] == 1 and d[2][ns[2]] == 1:\n                continue\n            elif d[0][ns[0]] == 1 and d[2][ns[1]] == 1 and d[1][ns[2]] == 1:\n                continue\n            elif d[1][ns[0]] == 1 and d[0][ns[1]] == 1 and d[2][ns[2]] == 1:\n                continue\n            elif d[1][ns[0]] == 1 and d[2][ns[1]] == 1 and d[0][ns[2]] == 1:\n                continue\n            elif d[2][ns[0]] == 1 and d[1][ns[1]] == 1 and d[0][ns[2]] == 1:\n                continue\n            elif d[2][ns[0]] == 1 and d[0][ns[1]] == 1 and d[1][ns[2]] == 1:\n                continue\n            else:\n                break\n        else:\n            break\n\nprint(i)\n\n",
        "correct": true,
        "task_id": "0334",
        "depth": 2
    },
    {
        "description": "An African crossword is a rectangular table n \u00d7 m in size. Each cell of the table contains exactly one letter. This table (it is also referred to as grid) contains some encrypted word that needs to be decoded.\n\nTo solve the crossword you should cross out all repeated letters in rows and columns. In other words, a letter should only be crossed out if and only if the corresponding column or row contains at least one more letter that is exactly the same. Besides, all such letters are crossed out simultaneously.\n\nWhen all repeated letters have been crossed out, we should write the remaining letters in a string. The letters that occupy a higher position follow before the letters that occupy a lower position. If the letters are located in one row, then the letter to the left goes first. The resulting word is the answer to the problem.\n\nYou are suggested to solve an African crossword and print the word encrypted there.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 100). Next n lines contain m lowercase Latin letters each. That is the crossword grid.\n\nOutput\n\nPrint the encrypted word on a single line. It is guaranteed that the answer consists of at least one letter.\n\nExamples\n\nInput\n\n3 3\ncba\nbcd\ncbc\n\n\nOutput\n\nabcd\n\nInput\n\n5 5\nfcofd\nooedo\nafaoa\nrdcdf\neofsf\n\n\nOutput\n\ncodeforces",
        "task_name": "90_B. African Crossword",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def main():\n\tn, m = list(map(int, raw_input(\"\").split()))\n\n\tmatrix = []\n\tselected_words = \"\"\n\n\tfor i in range(n):\n\t\tletters = raw_input(\"\")\n\t\trow = []\n\t\tfor letter in letters:\n\t\t\trow.append(letter)\n\t\tmatrix.append(row)\n\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif not(word_not_repeated(matrix, i, j)):\n\t\t\t\tselected_words += matrix[i][j]\n\tprint(selected_words)\n\ndef word_not_repeated(matrix, i, j):\n\tletter = matrix[i][j]\n\tmatrix[i][j] = '_'\n\tresult = letter in matrix[i] or letter in zip(*matrix)[j]\n\tmatrix[i][j] = letter\n\treturn result\n\n\nif __name__ == '__main__':\n\tmain()\n\t    \t\t \t  \t\t\t\t\t\t \t \t\t \t\t\t\t",
        "correct": true,
        "task_id": "0335",
        "depth": 2
    },
    {
        "description": "Mishka received a gift of multicolored pencils for his birthday! Unfortunately he lives in a monochrome world, where everything is of the same color and only saturation differs. This pack can be represented as a sequence a1, a2, ..., an of n integer numbers \u2014 saturation of the color of each pencil. Now Mishka wants to put all the mess in the pack in order. He has an infinite number of empty boxes to do this. He would like to fill some boxes in such a way that:\n\n  * Each pencil belongs to exactly one box; \n  * Each non-empty box has at least k pencils in it; \n  * If pencils i and j belong to the same box, then |ai - aj| \u2264 d, where |x| means absolute value of x. Note that the opposite is optional, there can be pencils i and j such that |ai - aj| \u2264 d and they belong to different boxes. \n\n\n\nHelp Mishka to determine if it's possible to distribute all the pencils into boxes. Print \"YES\" if there exists such a distribution. Otherwise print \"NO\".\n\nInput\n\nThe first line contains three integer numbers n, k and d (1 \u2264 k \u2264 n \u2264 5\u00b7105, 0 \u2264 d \u2264 109) \u2014 the number of pencils, minimal size of any non-empty box and maximal difference in saturation between any pair of pencils in the same box, respectively.\n\nThe second line contains n integer numbers a1, a2, ..., an (1 \u2264 ai \u2264 109) \u2014 saturation of color of each pencil.\n\nOutput\n\nPrint \"YES\" if it's possible to distribute all the pencils into boxes and satisfy all the conditions. Otherwise print \"NO\".\n\nExamples\n\nInput\n\n6 3 10\n7 2 7 7 4 2\n\n\nOutput\n\nYES\n\n\nInput\n\n6 2 3\n4 5 3 13 4 10\n\n\nOutput\n\nYES\n\n\nInput\n\n3 2 5\n10 16 22\n\n\nOutput\n\nNO\n\nNote\n\nIn the first example it is possible to distribute pencils into 2 boxes with 3 pencils in each with any distribution. And you also can put all the pencils into the same box, difference of any pair in it won't exceed 10.\n\nIn the second example you can split pencils of saturations [4, 5, 3, 4] into 2 boxes of size 2 and put the remaining ones into another box.",
        "task_name": "985_E. Pencils and Boxes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from bisect import bisect\nfrom sys import exit\n\n[n, k, d] = map(int,raw_input().strip().split())\nais = list(map(int,raw_input().strip().split()))\nif k == 1:\n\tprint ('YES')\n\texit()\n\nais.sort()\n\n# can do ais[i:]\ncando = [False for _ in range(n)]\nj = n - 1 \ncount = 0 \nfor i in reversed(range(n)):\n\tif i + k < n and cando[i + k]:\n\t\tcount += 1\n\tif n - i < k:\n\t\tcontinue\n\tif ais[-1] - ais[i] <= d:\n\t\tcando[i] = True\n\t\tcontinue\n\twhile ais[j - 1] > ais[i] + d:\n\t\tif cando[j]:\n\t\t\tcount -= 1\n\t\tj -= 1\n\tcando[i] = (count > 0)\n\t\n\nif cando[0]:\n\tprint ('YES')\nelse:\n\tprint ('NO')",
        "correct": true,
        "task_id": "0336",
        "depth": 2
    },
    {
        "description": "N persons are standing in a row. The height of the i-th person from the front is A_i.\n\nWe want to have each person stand on a stool of some heights - at least zero - so that the following condition is satisfied for every person:\n\nCondition: Nobody in front of the person is taller than the person. Here, the height of a person includes the stool.\n\nFind the minimum total height of the stools needed to meet this goal.\n\nConstraints\n\n* 1 \\leq N \\leq 2\\times 10^5\n* 1 \\leq A_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 \\ldots A_N\n\n\nOutput\n\nPrint the minimum total height of the stools needed to meet the goal.\n\nExamples\n\nInput\n\n5\n2 1 5 4 3\n\n\nOutput\n\n4\n\n\nInput\n\n5\n3 3 3 3 3\n\n\nOutput\n\n0",
        "task_name": "p02578 AtCoder Beginner Contest 176 - Step",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(input())\na = list(map(int, input().split()))\n\nans = 0\nmax_ = 0\nfor i in range(n):\n    ans += max(max_ - a[i], 0)\n    max_ = max(max_, a[i])\nprint(ans)",
        "correct": false,
        "task_id": "0337",
        "depth": 1
    },
    {
        "description": "We have N integers. The i-th integer is A_i.\n\nFind \\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N} (A_i \\mbox{ XOR } A_j), modulo (10^9+7).\n\nWhat is \\mbox{ XOR }?\n\nThe XOR of integers A and B, A \\mbox{ XOR } B, is defined as follows:\n\n* When A \\mbox{ XOR } B is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if either A or B, but not both, has 1 in the 2^k's place, and 0 otherwise.\n\nFor example, 3 \\mbox{ XOR } 5 = 6. (In base two: 011 \\mbox{ XOR } 101 = 110.)\n\nConstraints\n\n* 2 \\leq N \\leq 3 \\times 10^5\n* 0 \\leq A_i < 2^{60}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N\n\n\nOutput\n\nPrint the value \\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N} (A_i \\mbox{ XOR } A_j), modulo (10^9+7).\n\nExamples\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\n6\n\n\nInput\n\n10\n3 1 4 1 5 9 2 6 5 3\n\n\nOutput\n\n237\n\n\nInput\n\n10\n3 14 159 2653 58979 323846 2643383 27950288 419716939 9375105820\n\n\nOutput\n\n103715602",
        "task_name": "p02838 AtCoder Beginner Contest 147 - Xor Sum 4",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ninput = sys.stdin.readline\n# sys.setrecursionlimit(100000)\n\n\ndef solve(n, arr):\n    sum = 0\n    bitcount = [0]*100\n    for num in arr:\n        b = reversed(bin(num)[2:])\n        for i, s in enumerate(b):\n            if i != \"0\":\n                bitcount[i] += int(s)\n    for i, b in enumerate(bitcount):\n        sum += b * (n-b) * 2**i\n    return sum % (10**9 + 7)\n\n\ndef main():\n    N = int(input())\n    A_l = [int(i) for i in input().split()]\n    print(solve(N, A_l))\n\n\nif __name__ == \"__main__\":\n    main()",
        "correct": true,
        "task_id": "0339",
        "depth": 2
    },
    {
        "description": "Snuke has N hats. The i-th hat has an integer a_i written on it.\n\nThere are N camels standing in a circle. Snuke will put one of his hats on each of these camels.\n\nIf there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print `Yes`; otherwise, print `No`.\n\n* The bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.\n\nWhat is XOR? The bitwise XOR x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows: - When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even. For example, 3 \\oplus 5 = 6.\n\nConstraints\n\n* All values in input are integers.\n* 3 \\leq N \\leq 10^{5}\n* 0 \\leq a_i \\leq 10^{9}\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 \\ldots a_{N}\n\n\nOutput\n\nPrint the answer.\n\nExamples\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\nYes\n\n\nInput\n\n4\n1 2 4 8\n\n\nOutput\n\nNo",
        "task_name": "p02975 AtCoder Grand Contest 035 - XOR Circle",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N = int(input())\nA = map(int, raw_input().split())\n\nk = 0\ng = 0\n\nfor i in range(N):\n    if A[i] % 2 == 0:\n        g += 1\n    else:\n        k += 1\n\nif k == 0 or (g != 0 and k % g == 0 and k / g == 2):\n    print('Yes')\nelse:\n    print('No')",
        "correct": false,
        "task_id": "0340",
        "depth": 1
    },
    {
        "description": "You are given an H \u00d7 W grid.\nThe squares in the grid are described by H strings, S_1,...,S_H.\nThe j-th character in the string S_i corresponds to the square at the i-th row from the top and j-th column from the left (1 \\leq i \\leq H,1 \\leq j \\leq W).\n`.` stands for an empty square, and `#` stands for a square containing a bomb.\n\nDolphin is interested in how many bomb squares are horizontally, vertically or diagonally adjacent to each empty square.\n(Below, we will simply say \"adjacent\" for this meaning. For each square, there are at most eight adjacent squares.)\nHe decides to replace each `.` in our H strings with a digit that represents the number of bomb squares adjacent to the corresponding empty square.\n\nPrint the strings after the process.\n\nConstraints\n\n* 1 \\leq H,W \\leq 50\n* S_i is a string of length W consisting of `#` and `.`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W\nS_1\n:\nS_H\n\n\nOutput\n\nPrint the H strings after the process.\nThe i-th line should contain a string T_i of length W, where the j-th character in T_i corresponds to the square at the i-th row from the top and j-th row from the left in the grid (1 \\leq i \\leq H, 1 \\leq j \\leq W).\n\nExamples\n\nInput\n\n3 5\n.....\n.#.#.\n.....\n\n\nOutput\n\n11211\n1#2#1\n11211\n\n\nInput\n\n3 5\n\n\nOutput\n\n\n\n\nInput\n\n6 6\n.\n.#.##\n.#\n.#..#.\n.##..\n.#...\n\n\nOutput\n\n3\n8#7##\n5#\n4#65#2\n5##21\n4#310",
        "task_name": "p03574 AtCoder Beginner Contest 075 - Minesweeper",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import numpy as np\n\nH, W = map(int, raw_input().split())\narr=np.array([])\ns=0\nwhile s != H:\n  li=list(raw_input())\n  li=np.array(li)\n  arr=np.hstack((arr,li))\n\n  s+=1\narr=arr.reshape((H,W))\ncount=0\ndef check(x,y):\n    global count\n    if arr[x,y] == \"#\":\n        count+=1\n\nfor x in range(H):\n    stri=\"\"\n    for y in range(W):\n        if arr[x,y] == \".\":\n            count=0\n            top= None\n            right =None\n            left=None\n            if y != 0:\n                top=True\n                check(x,(y-1))\n            if x != 0:\n                if top:\n                    check((x-1),(y-1))\n                check((x-1),y)\n                left=True\n            if x != (W-1):\n                if top:\n                    check((x+1),(y-1))\n                right=True\n                check((x+1),y)\n            if y != (H-1):\n                if left:\n                    check(x-1,y+1)\n                if right:\n                    check(x+1,y+1)\n                check(x,(y+1))\n            stri=stri+str(count)\n        else:\n            stri=stri+\"#\"\n    print(stri)\n",
        "correct": false,
        "task_id": "0342",
        "depth": 2
    },
    {
        "description": "problem\n\nGiven two strings, find the longest of the strings contained in both strings and write a program that answers that length.\n\nHere, the string s included in the string t means that s appears consecutively in t. An empty string, that is, a string of length 0, is included in any string. For example, the string ABRACADABRA contains the following strings: ABRA, RAC, D, ACADABRA, ABRACADABRA, the empty string, etc. On the other hand, the string ABRACADABRA does not contain the following strings: ABRC, RAA, BA , K etc.\n\n\n\ninput\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nThe input consists of two lines, the first line is given the first string and the second line is given the second string. The strings consist of uppercase letters and each string is 1 in length. More than 4000 and less.\n\nOf the scoring data, for 30% of the points, the length of each character string is 1 or more and 50 or less.\n\nThe end of input is indicated by EOF. The number of datasets does not exceed 10.\n\noutput\n\nOutputs the length of the longest string contained in both of the two strings given for each dataset on one line.\n\nExamples\n\nInput\n\nABRACADABRA\nECADADABRBCRDARA\nUPWJCIRUCAXIIRGL\nSBQNYBSBZDFNEV\n\n\nOutput\n\n5\n0\n\n\nInput\n\nNone\n\n\nOutput\n\nNone",
        "task_name": "p00451 Common Sub-String",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# coding:utf-8\nfrom __future__ import division, print_function\ntry:\n    input = raw_input\n    range = xrange\nexcept NameError:\n    pass\n\np, q = 10 ** 9 + 7, 0xffffffff\npow_p = [1]\nfor i in range(4010):\n    pow_p.append(pow_p[-1] * p & q)\n\n\ndef exists(a, b, k):\n    n, m = len(a), len(b)\n\n    s = [a[k + i] - a[i] * pow_p[k] & q for i in range(n - k)]\n    t = [b[k + i] - b[i] * pow_p[k] & q for i in range(m - k)]\n    return len(set(s).intersection(set(t))) > 0\n\n\ndef hash(s):\n    t = 0\n    yield t\n    for c in s:\n        t = t * p + ord(c) & q\n        yield t\n    return\n\n\ndef solve(s, t):\n    n, m = len(s), len(t)\n    a, b = list(hash(s)), list(hash(t))\n\n    l, r = 0, min(n, m) + 1\n    while l + 1 < r:\n        m = (l + r) // 2\n        if exists(a, b, m):\n            l = m\n        else:\n            r = m\n    return l\n\n\nwhile True:\n    try:\n        s = input().strip()\n        t = input().strip()\n    except EOFError:\n        break\n\n    print(solve(s, t))",
        "correct": true,
        "task_id": "0344",
        "depth": 1
    },
    {
        "description": "You are given n segments on a coordinate line; each endpoint of every segment has integer coordinates. Some segments can degenerate to points. Segments can intersect with each other, be nested in each other or even coincide.\n\nYour task is the following: for every k \u2208 [1..n], calculate the number of points with integer coordinates such that the number of segments that cover these points equals k. A segment with endpoints l_i and r_i covers point x if and only if l_i \u2264 x \u2264 r_i.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of segments.\n\nThe next n lines contain segments. The i-th line contains a pair of integers l_i, r_i (0 \u2264 l_i \u2264 r_i \u2264 10^{18}) \u2014 the endpoints of the i-th segment.\n\nOutput\n\nPrint n space separated integers cnt_1, cnt_2, ..., cnt_n, where cnt_i is equal to the number of points such that the number of segments that cover these points equals to i.\n\nExamples\n\nInput\n\n3\n0 3\n1 3\n3 8\n\n\nOutput\n\n6 2 1 \n\n\nInput\n\n3\n1 3\n2 4\n5 7\n\n\nOutput\n\n5 2 0 \n\nNote\n\nThe picture describing the first example:\n\n<image>\n\nPoints with coordinates [0, 4, 5, 6, 7, 8] are covered by one segment, points [1, 2] are covered by two segments and point [3] is covered by three segments.\n\nThe picture describing the second example:\n\n<image>\n\nPoints [1, 4, 5, 6, 7] are covered by one segment, points [2, 3] are covered by two segments and there are no points covered by three segments.",
        "task_name": "1000_C. Covered Points Count",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\" \n3\n0 3\n1 3\n3 8\n\"\"\"\n\nimport sys\nimport bisect\nimport heapq\nimport math\n\nsys.setrecursionlimit(10**9+7)\n\ndef fi():\n    return int(sys.stdin.readline())\ndef fi2():\n    return map(int, sys.stdin.readline().split())\ndef fi3():\n    return sys.stdin.readline().rstrip()\ndef fo(*args):\n    for s in args:\n        sys.stdout.write(str(s)+' ')\n    sys.stdout.write('\\n')\n##    sys.stdout.flush()\ndef puts(*args):\n    for s in args:\n        sys.stdout.write(str(s))\n\n##\nOUT = []\ndef bfo(*args):\n    for s in args:\n        OUT.append(str(s)+' ')\n    OUT.append('\\n')\ndef bputs(*args):\n    for s in args:\n        OUT.append(str(s))        \ndef flush():\n    sto = ''.join(OUT)\n    fo(sto)\n##\n\nalpha = 'abcdefghijklmnopqrstuvwxyz'\nnax = 101010\nmod = 10**9+7\ninf = 10**18+5\n\n##\n\n\n##\n#main\n\nn = fi()\nT = []\nM = []\nfor i in range(n):\n    a, b = fi2()\n    T.append((a, b))\n    M.append(a)\n    M.append(b)\n\nM.sort()\n\nf = {}\ninvf = {}\n\nfor x in M:\n    if x not in f:\n        f[x] = len(f)\n        invf[len(f)-1] = x\n\ncomp = len(f)\n\nF = [0 for i in range(comp+5)]\nE = [0 for i in range(comp+5)]\n\nfor t in T:\n    a, b = t\n    a = f[a]\n    b = f[b]\n    E[b] += 1\n    F[a] += 1\n    F[b+1] -= 1\n\nfor i in range(1, len(F)):\n    F[i] = F[i-1]+F[i]\n\nres = [0 for i in range(n+1)]\n\nfor i in range(comp):\n    k = F[i]\n    res[k] += 1\n\nfor i in range(comp-1):\n    k = F[i] - E[i]\n    res[k] += (invf[i+1]-invf[i]-1)\n\nfor i in range(1, n+1):\n    bputs(res[i],' ')\n\nflush()\n",
        "correct": true,
        "task_id": "0345",
        "depth": 1
    },
    {
        "description": "Petya loves lucky numbers. We all know that lucky numbers are the positive integers whose decimal representations contain only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nPetya recently learned to determine whether a string of lowercase Latin letters is lucky. For each individual letter all its positions in the string are written out in the increasing order. This results in 26 lists of numbers; some of them can be empty. A string is considered lucky if and only if in each list the absolute difference of any two adjacent numbers is a lucky number. \n\nFor example, let's consider string \"zbcdzefdzc\". The lists of positions of equal letters are:\n\n  * b: 2\n  * c: 3, 10\n  * d: 4, 8\n  * e: 6\n  * f: 7\n  * z: 1, 5, 9\n  * Lists of positions of letters a, g, h, ..., y are empty.\n\n\n\nThis string is lucky as all differences are lucky numbers. For letters z: 5 - 1 = 4, 9 - 5 = 4, for letters c: 10 - 3 = 7, for letters d: 8 - 4 = 4. \n\nNote that if some letter occurs only once in a string, it doesn't influence the string's luckiness after building the lists of positions of equal letters. The string where all the letters are distinct is considered lucky.\n\nFind the lexicographically minimal lucky string whose length equals n.\n\nInput\n\nThe single line contains a positive integer n (1 \u2264 n \u2264 105) \u2014 the length of the sought string.\n\nOutput\n\nPrint on the single line the lexicographically minimal lucky string whose length equals n.\n\nExamples\n\nInput\n\n5\n\n\nOutput\n\nabcda\n\n\nInput\n\n3\n\n\nOutput\n\nabc\n\nNote\n\nThe lexical comparison of strings is performed by the < operator in modern programming languages. String a is lexicographically less than string b if exists such i (1 \u2264 i \u2264 n), that ai < bi, and for any j (1 \u2264 j < i) aj = bj.",
        "task_name": "110_B. Lucky String",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nn=int(raw_input())\nl=\"abcd\"\ni=0\nflag=0\nwhile i<n:\n    x=n/4\n    if n<=4:\n        x=1\n    if x==flag:\n        break\n    if i==n-1:\n        i=0\n        flag+=1\n    sys.stdout.write(l[i])\n    #print l[i],end=\"\"\n    i+=1\n \t  \t \t  \t\t\t\t\t \t \t\t \t\t \t \t \t",
        "correct": false,
        "task_id": "0346",
        "depth": 1
    },
    {
        "description": "You are given two arrays a and b, both of length n. All elements of both arrays are from 0 to n-1.\n\nYou can reorder elements of the array b (if you want, you may leave the order of elements as it is). After that, let array c be the array of length n, the i-th element of this array is c_i = (a_i + b_i) \\% n, where x \\% y is x modulo y.\n\nYour task is to reorder elements of the array b to obtain the lexicographically minimum possible array c.\n\nArray x of length n is lexicographically less than array y of length n, if there exists such i (1 \u2264 i \u2264 n), that x_i < y_i, and for any j (1 \u2264 j < i) x_j = y_j.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in a, b and c.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i < n), where a_i is the i-th element of a.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (0 \u2264 b_i < n), where b_i is the i-th element of b.\n\nOutput\n\nPrint the lexicographically minimum possible array c. Recall that your task is to reorder elements of the array b and obtain the lexicographically minimum possible array c, where the i-th element of c is c_i = (a_i + b_i) \\% n.\n\nExamples\n\nInput\n\n\n4\n0 1 2 1\n3 2 1 1\n\n\nOutput\n\n\n1 0 0 2 \n\n\nInput\n\n\n7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n\n\nOutput\n\n\n0 0 0 1 0 2 4 ",
        "task_name": "1157_E. Minimum Array",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\n# Testing code by c1729\n\nimport os\nimport random\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    _str = str\n    str = lambda x=b\"\": x if type(x) is bytes else _str(x).encode()\n\nMX = 2 * 10 ** 5 + 10\nlt = [0] * MX\nrt = [0] * MX\nk = [0] * MX\npr = [0.0] * MX\ncur = 1\n\ndef merge(left, right):\n    tmp = [0]\n    where, pos = tmp, 0\n    while left and right:\n        if pr[left] > pr[right]:\n            where[pos] = left\n            where, pos = rt, left\n            left = rt[left]\n        else:\n            where[pos] = right\n            where, pos = lt, right\n            right = lt[right]\n    where[pos] = left and right\n    return tmp[0]\n\n\ndef erase(n, key):\n    if k[n] == key:\n        return merge(lt[n], rt[n])\n    m = n\n    while 1:\n        if key < k[n]:\n            if not lt[n]:\n                break\n            if k[lt[n]] == key:\n                lt[n] = merge(lt[lt[n]], rt[lt[n]])\n                break\n            n = lt[n]\n        else:\n            if not rt[n]:\n                break\n            if  k[rt[n]] == key:\n                rt[n] = merge(lt[rt[n]], rt[rt[n]])\n                break\n            n = rt[n]\n    return m\n\ndef lower_bound(n, key):\n    while n and k[n] < key: \n        n = rt[n]\n    if not n: return 0\n    best_node = n\n    best = k[n]\n    while n:\n        if k[n] < key:\n            n = rt[n]\n        else:\n            if k[n] < best:\n                best = k[n]\n                best_node = n\n            n = lt[n]\n    return best_node\n\n\ndef main():\n    n = int(readline())\n    a = readlist()\n    _b = sorted(map(int, readline().split()))\n\n    def build(i, j):\n        global cur\n        if i == j:\n            return 0\n        mid = (i + j) // 2\n        root = cur\n        cur += 1\n        pr[root] = random.random()\n        k[root] = _b[mid]\n        lt[root] = build(i, mid)\n        rt[root] = build(mid + 1, j)\n        return root\n\n    b = build(0, len(_b))\n    for ai in a:\n        it = lower_bound(b, n - ai)\n        if not it:\n            ptr = b\n            while lt[ptr]:\n                ptr = lt[ptr]\n            it = ptr\n        print((k[it] + ai) % n, end=' ')\n        b = erase(b, k[it])\n\n\n# region template\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._buffer = BytesIO()\n        self._fd = file.fileno()\n        self._writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self._buffer.write if self._writable else None\n\n    def read(self):\n        if self._buffer.tell():\n            return self._buffer.read()\n        return os.read(self._fd, os.fstat(self._fd).st_size)\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self._buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(b), self._buffer.seek(ptr)\n        self.newlines -= 1\n        return self._buffer.readline()\n\n    def flush(self):\n        if self._writable:\n            os.write(self._fd, self._buffer.getvalue())\n            self._buffer.truncate(0), self._buffer.seek(0)\n\n\nclass ostream:\n    def __lshift__(self, a):\n        if a is endl:\n            sys.stdout.write(b\"\\n\")\n            sys.stdout.flush()\n        else:\n            sys.stdout.write(str(a))\n        return self\n\n\ndef print(*args, **kwargs):\n    sep, file = kwargs.pop(\"sep\", b\" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", b\"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nsys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\ncout, endl = ostream(), object()\n\nreadline = sys.stdin.readline\nreadlist = lambda var=int: [var(n) for n in readline().split()]\ninput = lambda: readline().rstrip(b\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()",
        "correct": false,
        "task_id": "0347",
        "depth": 2
    },
    {
        "description": "In a very ancient country the following game was popular. Two people play the game. Initially first player writes a string s1, consisting of exactly nine digits and representing a number that does not exceed a. After that second player looks at s1 and writes a string s2, consisting of exactly nine digits and representing a number that does not exceed b. Here a and b are some given constants, s1 and s2 are chosen by the players. The strings are allowed to contain leading zeroes.\n\nIf a number obtained by the concatenation (joining together) of strings s1 and s2 is divisible by mod, then the second player wins. Otherwise the first player wins. You are given numbers a, b, mod. Your task is to determine who wins if both players play in the optimal manner. If the first player wins, you are also required to find the lexicographically minimum winning move.\n\nInput\n\nThe first line contains three integers a, b, mod (0 \u2264 a, b \u2264 109, 1 \u2264 mod \u2264 107).\n\nOutput\n\nIf the first player wins, print \"1\" and the lexicographically minimum string s1 he has to write to win. If the second player wins, print the single number \"2\".\n\nExamples\n\nInput\n\n1 10 7\n\n\nOutput\n\n2\n\n\nInput\n\n4 0 9\n\n\nOutput\n\n1 000000001\n\nNote\n\nThe lexical comparison of strings is performed by the < operator in modern programming languages. String x is lexicographically less than string y if exists such i (1 \u2264 i \u2264 9), that xi < yi, and for any j (1 \u2264 j < i) xj = yj. These strings always have length 9.",
        "task_name": "117_B. Very Interesting Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\na,b,m=map(int,raw_input().split())\nfor i in range (1,min(a+1,m+1)):\n    if (m-i*(10**9)%m)%m>b:\n        print(1,'%(x)09d'%{'x':i})\n        sys.exit()\nprint(2)",
        "correct": false,
        "task_id": "0348",
        "depth": 1
    },
    {
        "description": "You are given a sequence a_1, a_2, ..., a_n consisting of n non-zero integers (i.e. a_i \u2260 0). \n\nYou have to calculate two following values:\n\n  1. the number of pairs of indices (l, r) (l \u2264 r) such that a_l \u22c5 a_{l + 1} ... a_{r - 1} \u22c5 a_r is negative; \n  2. the number of pairs of indices (l, r) (l \u2264 r) such that a_l \u22c5 a_{l + 1} ... a_{r - 1} \u22c5 a_r is positive; \n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^{5}) \u2014 the number of elements in the sequence.\n\nThe second line contains n integers a_1, a_2, ..., a_n (-10^{9} \u2264 a_i \u2264 10^{9}; a_i \u2260 0) \u2014 the elements of the sequence.\n\nOutput\n\nPrint two integers \u2014 the number of subsegments with negative product and the number of subsegments with positive product, respectively.\n\nExamples\n\nInput\n\n\n5\n5 -3 3 -1 1\n\n\nOutput\n\n\n8 7\n\n\nInput\n\n\n10\n4 2 -4 3 1 2 -4 3 2 3\n\n\nOutput\n\n\n28 27\n\n\nInput\n\n\n5\n-1 -2 -3 -4 -5\n\n\nOutput\n\n\n9 6",
        "task_name": "1215_B. The Number of Products",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport collections\nimport bisect\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\nimport math\nn = int(raw_input())\nA = map(int, input().split())\nidx, size = 0, len(A)\ntotal = size * (1+size) / 2\np = [0] * size\nq = [0] * size\n\nif A[0] > 0:\n    p[0], q[0] = 1, 0\nelse:\n    q[0], p[0] = 1, 0\n\nfor i in xrange(1, size):\n    if A[i] > 0:\n        p[i] = p[i-1] + 1\n        q[i] = q[i-1]\n    else:\n        p[i] = q[i - 1]\n        q[i] = p[i-1] + 1\nprint('%s %s' % (sum(q), sum(p)))",
        "correct": true,
        "task_id": "0350",
        "depth": 1
    },
    {
        "description": "The string t_1t_2 ... t_k is good if each letter of this string belongs to at least one palindrome of length greater than 1.\n\nA palindrome is a string that reads the same backward as forward. For example, the strings A, BAB, ABBA, BAABBBAAB are palindromes, but the strings AB, ABBBAA, BBBA are not.\n\nHere are some examples of good strings: \n\n  * t = AABBB (letters t_1, t_2 belong to palindrome t_1 ... t_2 and letters t_3, t_4, t_5 belong to palindrome t_3 ... t_5); \n  * t = ABAA (letters t_1, t_2, t_3 belong to palindrome t_1 ... t_3 and letter t_4 belongs to palindrome t_3 ... t_4); \n  * t = AAAAA (all letters belong to palindrome t_1 ... t_5); \n\n\n\nYou are given a string s of length n, consisting of only letters A and B.\n\nYou have to calculate the number of good substrings of string s.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 3 \u22c5 10^5) \u2014 the length of the string s.\n\nThe second line contains the string s, consisting of letters A and B.\n\nOutput\n\nPrint one integer \u2014 the number of good substrings of string s.\n\nExamples\n\nInput\n\n\n5\nAABBB\n\n\nOutput\n\n\n6\n\n\nInput\n\n\n3\nAAA\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n7\nAAABABB\n\n\nOutput\n\n\n15\n\nNote\n\nIn the first test case there are six good substrings: s_1 ... s_2, s_1 ... s_4, s_1 ... s_5, s_3 ... s_4, s_3 ... s_5 and s_4 ... s_5.\n\nIn the second test case there are three good substrings: s_1 ... s_2, s_1 ... s_3 and s_2 ... s_3.",
        "task_name": "1238_D. AB-string",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\nimport bisect\nimport math\nimport heapq\nimport itertools\nimport sys\nfrom collections import deque\nfrom atexit import register\nfrom collections import Counter\nfrom functools import reduce\nsys.setrecursionlimit(10000000)\nif sys.version_info[0] < 3:\n    from io import BytesIO as stream\nelse:\n    from io import StringIO as stream\n \n \nif sys.version_info[0] < 3:\n    class dict(dict):\n        \"\"\"dict() -> new empty dictionary\"\"\"\n        def items(self):\n            \"\"\"D.items() -> a set-like object providing a view on D's items\"\"\"\n            return dict.iteritems(self)\n \n        def keys(self):\n            \"\"\"D.keys() -> a set-like object providing a view on D's keys\"\"\"\n            return dict.iterkeys(self)\n \n        def values(self):\n            \"\"\"D.values() -> an object providing a view on D's values\"\"\"\n            return dict.itervalues(self)\n \n    input = raw_input\n    range = xrange\n \n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n \n \ndef sync_with_stdio(sync=True):\n    \"\"\"Set whether the standard Python streams are allowed to buffer their I/O.\n \n    Args:\n        sync (bool, optional): The new synchronization setting.\n \n    \"\"\"\n    global input, flush\n \n    if sync:\n        flush = sys.stdout.flush\n    else:\n        sys.stdin = stream(sys.stdin.read())\n        input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n \n        sys.stdout = stream()\n        register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n\ndef main():\n\n    n=int(input())\n    s=input()\n    ans=(n*(n-1))//2\n  #  print(ans)\n    a=[]\n    b=[]\n    for i in range(n):\n        if s[i]==\"A\":\n            a.append(i)\n        else:\n            b.append(i)\n    se=set()\n    if a:\n        for i in range(a[-1]+1,n):\n            se.add(str([a[-1],i]))\n        for i in range(a[0]):\n            se.add(str([i,a[0]]))\n    if b:\n        for i in range(b[-1]+1,n):\n            se.add(str([b[-1],i]))\n        for i in range(b[0]):\n            se.add(str([i,b[0]]))\n  #  print(ans)\n    for i in range(len(a)-1):\n        for j in range(a[i]+1,a[i+1]):\n            se.add(str([a[i],j]))\n    for i in range(len(b)-1):\n        for j in range(b[i]+1,b[i+1]):\n            se.add(str([b[i],j]))\n    print(ans-len(se))\n\nif __name__ == '__main__':\n    sync_with_stdio(False)\n    main()",
        "correct": false,
        "task_id": "0351",
        "depth": 2
    },
    {
        "description": "Calculate the number of ways to place n rooks on n \u00d7 n chessboard so that both following conditions are met:\n\n  * each empty cell is under attack; \n  * exactly k pairs of rooks attack each other. \n\n\n\nAn empty cell is under attack if there is at least one rook in the same row or at least one rook in the same column. Two rooks attack each other if they share the same row or column, and there are no other rooks between them. For example, there are only two pairs of rooks that attack each other in the following picture:\n\n<image> One of the ways to place the rooks for n = 3 and k = 2\n\nTwo ways to place the rooks are considered different if there exists at least one cell which is empty in one of the ways but contains a rook in another way.\n\nThe answer might be large, so print it modulo 998244353.\n\nInput\n\nThe only line of the input contains two integers n and k (1 \u2264 n \u2264 200000; 0 \u2264 k \u2264 (n(n - 1))/(2)).\n\nOutput\n\nPrint one integer \u2014 the number of ways to place the rooks, taken modulo 998244353.\n\nExamples\n\nInput\n\n\n3 2\n\n\nOutput\n\n\n6\n\n\nInput\n\n\n3 3\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n4 0\n\n\nOutput\n\n\n24\n\n\nInput\n\n\n1337 42\n\n\nOutput\n\n\n807905441",
        "task_name": "1342_E. Placing Rooks",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n__interactive = False\n\ndef main():\n    def add(x, y):\n        return (x+y)%MOD\n    n, k = input_as_list()\n    a = n-k\n    ans = pow(a, n, MOD)\n    m = 1\n    p = -1\n    for i in range(1, a):\n        b = pow(a-i, n, MOD)\n        m = mulmod(mulmod(m, a-i+1), modinv(i))\n        m = mulmod(m, p)\n        ans = add(ans, mulmod(m, b))\n    lm = 1 if k==0 else 2\n    for i in range(n-a+1, n+1):\n        lm = mulmod(lm, i)\n    for i in range(1, a+1):\n        lm = mulmod(lm, modinv(i))\n    print(mulmod(ans, lm))\n\n\nINF = float('inf')\nMOD = 998244353\nalphabets = 'abcdefghijklmnopqrstuvwxyz'\n\nimport os, sys\nsys.modules[\"hashlib\"] = sys.sha512 = sys\nfrom atexit import register\nfrom io import BytesIO\nimport itertools\nimport __pypy__\n\nif sys.version_info[0] < 3:\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\nif \"LOCAL_\" in os.environ:\n    debug_print = print\nelse:\n    if not __interactive:\n        sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\n        sys.stdout = BytesIO()\n        register(lambda: os.write(1, sys.stdout.getvalue()))\n\n        input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n    debug_print = lambda *x, **y: None\n\nflush = sys.stdout.flush\n\ndef mulmod(x, y):\n    return __pypy__.intop.int_mulmod(x, y, MOD)\n\ndef modinv(x):\n    return pow(x, MOD-2, MOD)\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef input_as_list():\n    return [int(x) for x in input().split()]\n\ndef input_with_offset(o):\n    return [int(x)+o for x in input().split()]\n\ndef input_as_matrix(n, m):\n    return [input_as_list() for _ in range(n)]\n\ndef array_of(f, *dim):\n    return [array_of(f, *dim[1:]) for _ in range(dim[0])] if dim else f()\n\ndef range_with_count(start, step, count):\n    return range(start, start + step * count, step)\n\ndef indices(l, start=0, end=0):\n    return range(start, len(l)+end)\n\ndef ceil_power_of_2(n):\n    \"\"\" [0, 1, 2, 4, 4, 8, 8, 8, 8, 16, 16, ...] \"\"\"\n    return 2 ** ((n - 1).bit_length())\n\ndef ceil_div(x, r):\n    \"\"\" = ceil(x / r) \"\"\"\n    return (x + r - 1) // r\n\nmain()",
        "correct": false,
        "task_id": "0353",
        "depth": 1
    },
    {
        "description": "You are given a deck of n cards numbered from 1 to n (not necessarily in this order in the deck). You have to sort the deck by repeating the following operation. \n\n  * Choose 2 \u2264 k \u2264 n and split the deck in k nonempty contiguous parts D_1, D_2,..., D_k (D_1 contains the first |D_1| cards of the deck, D_2 contains the following |D_2| cards and so on). Then reverse the order of the parts, transforming the deck into D_k, D_{k-1}, ..., D_2, D_1 (so, the first |D_k| cards of the new deck are D_k, the following |D_{k-1}| cards are D_{k-1} and so on). The internal order of each packet of cards D_i is unchanged by the operation. \n\n\n\nYou have to obtain a sorted deck (i.e., a deck where the first card is 1, the second is 2 and so on) performing at most n operations. It can be proven that it is always possible to sort the deck performing at most n operations.\n\nExamples of operation: The following are three examples of valid operations (on three decks with different sizes). \n\n  * If the deck is [3 6 2 1 4 5 7] (so 3 is the first card and 7 is the last card), we may apply the operation with k=4 and D_1=[3 6], D_2=[2 1 4], D_3=[5], D_4=[7]. Doing so, the deck becomes [7 5 2 1 4 3 6]. \n  * If the deck is [3 1 2], we may apply the operation with k=3 and D_1=[3], D_2=[1], D_3=[2]. Doing so, the deck becomes [2 1 3]. \n  * If the deck is [5 1 2 4 3 6], we may apply the operation with k=2 and D_1=[5 1], D_2=[2 4 3 6]. Doing so, the deck becomes [2 4 3 6 5 1]. \n\nInput\n\nThe first line of the input contains one integer n (1\u2264 n\u2264 52) \u2014 the number of cards in the deck.\n\nThe second line contains n integers c_1, c_2, ..., c_n \u2014 the cards in the deck. The first card is c_1, the second is c_2 and so on.\n\nIt is guaranteed that for all i=1,...,n there is exactly one j\u2208\\{1,...,n\\} such that c_j = i.\n\nOutput\n\nOn the first line, print the number q of operations you perform (it must hold 0\u2264 q\u2264 n).\n\nThen, print q lines, each describing one operation.\n\nTo describe an operation, print on a single line the number k of parts you are going to split the deck in, followed by the size of the k parts: |D_1|, |D_2|, ... , |D_k|. \n\nIt must hold 2\u2264 k\u2264 n, and |D_i|\u2265 1 for all i=1,...,k, and |D_1|+|D_2|+\u22c5\u22c5\u22c5 + |D_k| = n.\n\nIt can be proven that it is always possible to sort the deck performing at most n operations. If there are several ways to sort the deck you can output any of them.\n\nExamples\n\nInput\n\n\n4\n3 1 2 4\n\n\nOutput\n\n\n2\n3 1 2 1\n2 1 3\n\n\nInput\n\n\n6\n6 5 4 3 2 1\n\n\nOutput\n\n\n1\n6 1 1 1 1 1 1\n\n\nInput\n\n\n1\n1\n\n\nOutput\n\n\n0\n\nNote\n\nExplanation of the first testcase: Initially the deck is [3 1 2 4]. \n\n  * The first operation splits the deck as [(3) (1 2) (4)] and then transforms it into [4 1 2 3]. \n  * The second operation splits the deck as [(4) (1 2 3)] and then transforms it into [1 2 3 4]. \n\nExplanation of the second testcase: Initially the deck is [6 5 4 3 2 1]. \n\n  * The first (and only) operation splits the deck as [(6) (5) (4) (3) (2) (1)] and then transforms it into [1 2 3 4 5 6]. ",
        "task_name": "1427_D. Unshuffling a Deck",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(input ())\ni = 1\nsq = False\nwhile i <= n:\n    if i == n:\n        sq = True \n    i   = i * 3\nif sq :\n    print(\"YES\")\nelse :\n    print(\"NO\")",
        "correct": false,
        "task_id": "0355",
        "depth": 1
    },
    {
        "description": "On the competitive programming platform CodeCook, every person has a rating graph described by an array of integers a of length n. You are now updating the infrastructure, so you've created a program to compress these graphs.\n\nThe program works as follows. Given an integer parameter k, the program takes the minimum of each contiguous subarray of length k in a.\n\nMore formally, for an array a of length n and an integer k, define the k-compression array of a as an array b of length n-k+1, such that $$$b_j =min_{j\u2264 i\u2264 j+k-1}a_i$$$\n\nFor example, the 3-compression array of [1, 3, 4, 5, 2] is [min\\{1, 3, 4\\}, min\\{3, 4, 5\\}, min\\{4, 5, 2\\}]=[1, 3, 2].\n\nA permutation of length m is an array consisting of m distinct integers from 1 to m in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (m=3 but there is 4 in the array).\n\nA k-compression array will make CodeCook users happy if it will be a permutation. Given an array a, determine for all 1\u2264 k\u2264 n if CodeCook users will be happy after a k-compression of this array or not.\n\nInput\n\nThe first line contains a single integer t (1\u2264 t\u2264 10^4) \u2014 the number of test cases.\n\nThe first line of the description of each test case contains a single integer n (1\u2264 n\u2264 3\u22c5 10^5) \u2014 the length of the array.\n\nThe second line of the description of each test case contains n integers a_1,\u2026,a_n (1\u2264 a_i\u2264 n) \u2014 the elements of the array.\n\nIt is guaranteed, that the sum of n for all test cases does not exceed 3\u22c5 10^5.\n\nOutput\n\nFor each test case, print a binary string of length n. \n\nThe k-th character of the string should be 1 if CodeCook users will be happy after a k-compression of the array a, and 0 otherwise. \n\nExample\n\nInput\n\n\n5\n5\n1 5 3 4 2\n4\n1 3 2 1\n5\n1 3 3 3 2\n10\n1 2 3 4 5 6 7 8 9 10\n3\n3 3 2\n\n\nOutput\n\n\n10111\n0001\n00111\n1111111111\n000\n\nNote\n\nIn the first test case, a=[1, 5, 3, 4, 2].\n\n  * The 1-compression of a is [1, 5, 3, 4, 2] and it is a permutation. \n  * The 2-compression of a is [1, 3, 3, 2] and it is not a permutation, since 3 appears twice. \n  * The 3-compression of a is [1, 3, 2] and it is a permutation. \n  * The 4-compression of a is [1, 2] and it is a permutation. \n  * The 5-compression of a is [1] and it is a permutation. ",
        "task_name": "1450_D. Rating Compression",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nrint = lambda: int(stdin.readline())\nrints = lambda: [int(x) for x in stdin.readline().split()]\nout = []\nfor _ in range(int(input())):\n    n, a = rint(), rints()\n    ans, mem = ['0'] * n, [0] * (n + 1)\n    ans[0], l, r = '1', 0, n - 1\n\n    for i in range(n):\n        mem[a[i]] += 1\n        if mem[a[i]] == 2:\n            ans[0] = '0'\n\n    for i in range(1, n):\n        if not mem[i]:\n            break\n        ans[n - i] = '1'\n\n        if a[l] != i and a[r] != i or a[l] == a[r] == i:\n            break\n        elif a[l] == i:\n            l += 1\n        else:\n            r -= 1\n\n    out.append(''.join(ans))\n\nprint('\\n'.join(out))\n",
        "correct": false,
        "task_id": "0356",
        "depth": 2
    },
    {
        "description": "Positive integer x is called divisor of positive integer y, if y is divisible by x without remainder. For example, 1 is a divisor of 7 and 3 is not divisor of 8.\n\nWe gave you an integer d and asked you to find the smallest positive integer a, such that \n\n  * a has at least 4 divisors; \n  * difference between any two divisors of a is at least d.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 3000) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer d (1 \u2264 d \u2264 10000).\n\nOutput\n\nFor each test case print one integer a \u2014 the answer for this test case.\n\nExample\n\nInput\n\n\n2\n1\n2\n\n\nOutput\n\n\n6\n15\n\nNote\n\nIn the first test case, integer 6 have following divisors: [1, 2, 3, 6]. There are 4 of them and the difference between any two of them is at least 1. There is no smaller integer with at least 4 divisors.\n\nIn the second test case, integer 15 have following divisors: [1, 3, 5, 15]. There are 4 of them and the difference between any two of them is at least 2.\n\nThe answer 12 is INVALID because divisors are [1, 2, 3, 4, 6, 12]. And the difference between, for example, divisors 2 and 3 is less than d=2.",
        "task_name": "1474_B. Different Divisors",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    input = open(sys.argv[1], 'r').readline\n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    input = sys.stdin.readline\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\n# class InputData:\n#     def __init__(self):\n#         self.lines = readAll().split('\\n')\n#         self.n = len(self.lines)\n#         self.ii = -1\n#     def input(self):\n#         self.ii += 1\n#         assert self.ii < self.n\n#         return self.lines[self.ii]\n# inputData = InputData()\n# input = inputData.input\n\ndef intin():\n    return(int(input()))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef strin():\n    s = input()\n    return s[:len(s) - 1]\ndef intlout(l, sep=\" \"):\n    print(sep.join(map(str, l)))\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\n# from collections import defaultdict as dd\n# from heapq import *\n# from Queue import Queue\n\ndef getDiv(n):\n    i = 1\n    sq_n = n**0.5\n    divs = []\n    while i <= sq_n:\n        if n%i==0:\n            divs.append(i)\n            if n / i != i:\n                divs.append(n/i)\n        i = i + 1\n    return sorted(divs)     # unsorted\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    i = 5\n    while i*i <= n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i += 6\n    return True\n\ndef BS(arr, x, low, high):\n    if high >= low:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return mid, mid\n        elif arr[mid] > x:\n            return BS(arr, x, low, mid - 1)\n        else:\n            return BS(arr, x, mid + 1, high)\n    else:\n        return high, low\n\np = [False]*21001\nfor i in xrange(1,21001):\n    p[i] = isPrime(i)\nprimes = [i for i,x in enumerate(p) if x]\n# print(primes)\ndef main():\n    d = intin()\n    i = BS(primes, d+1, 0, len(primes)-1)[1]\n    j = i+1\n    while primes[j] - primes[i] < d:\n        j += 1\n    print(primes[i]*primes[j])\n    \n\n\nif __name__ == \"__main__\":\n    for _ in xrange(intin()):\n        main()\n    # for i in xrange(1,11001):\n    #     a = getDiv(i)\n    #     if len(a) >= 4:\n    #         print(i, a)\n        # print(\"YES\" if main() else \"NO\")\n    # main()\n\n    if testing:\n        sys.stdout = cmd\n        print(int(round(time() * 1000))  - start_time)",
        "correct": true,
        "task_id": "0357",
        "depth": 1
    },
    {
        "description": "Sergey attends lessons of the N-ish language. Each lesson he receives a hometask. This time the task is to translate some sentence to the N-ish language. Sentences of the N-ish language can be represented as strings consisting of lowercase Latin letters without spaces or punctuation marks.\n\nSergey totally forgot about the task until half an hour before the next lesson and hastily scribbled something down. But then he recollected that in the last lesson he learned the grammar of N-ish. The spelling rules state that N-ish contains some \"forbidden\" pairs of letters: such letters can never occur in a sentence next to each other. Also, the order of the letters doesn't matter (for example, if the pair of letters \"ab\" is forbidden, then any occurrences of substrings \"ab\" and \"ba\" are also forbidden). Also, each pair has different letters and each letter occurs in no more than one forbidden pair.\n\nNow Sergey wants to correct his sentence so that it doesn't contain any \"forbidden\" pairs of letters that stand next to each other. However, he is running out of time, so he decided to simply cross out some letters from the sentence. What smallest number of letters will he have to cross out? When a letter is crossed out, it is \"removed\" so that the letters to its left and right (if they existed), become neighboring. For example, if we cross out the first letter from the string \"aba\", we get the string \"ba\", and if we cross out the second letter, we get \"aa\".\n\nInput\n\nThe first line contains a non-empty string s, consisting of lowercase Latin letters \u2014 that's the initial sentence in N-ish, written by Sergey. The length of string s doesn't exceed 105.\n\nThe next line contains integer k (0 \u2264 k \u2264 13) \u2014 the number of forbidden pairs of letters.\n\nNext k lines contain descriptions of forbidden pairs of letters. Each line contains exactly two different lowercase Latin letters without separators that represent the forbidden pairs. It is guaranteed that each letter is included in no more than one pair.\n\nOutput\n\nPrint the single number \u2014 the smallest number of letters that need to be removed to get a string without any forbidden pairs of neighboring letters. Please note that the answer always exists as it is always possible to remove all letters.\n\nExamples\n\nInput\n\nababa\n1\nab\n\n\nOutput\n\n2\n\n\nInput\n\ncodeforces\n2\ndo\ncs\n\n\nOutput\n\n1\n\nNote\n\nIn the first sample you should remove two letters b.\n\nIn the second sample you should remove the second or the third letter. The second restriction doesn't influence the solution.",
        "task_name": "155_C. Hometask",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n\n# Created\n#       by zaquest\n#       on 01.03.2012\n\n\nclass Parser(object):\n\n    def __init__(self, string, pairs):\n        self.string = string\n        self.str_len = len(string)\n        self.pairs = pairs\n\n    def min_deletions(self):\n        deletions = 0\n        start = -1\n        for pair in self.pairs:\n            a = pair[0]\n            b = pair[1]\n            a_count = b_count = 0\n            i = 0\n            start = -1\n            stop = -1\n            while i < self.str_len:\n                if a == self.string[i]:\n                    a_count += 1\n                    if start == -1:\n                        start = i\n                elif b == self.string[i]:\n                    b_count += 1\n                    if start == -1:\n                        start = i\n                elif start != -1:\n                    stop = i\n                    if stop != start:\n                        if a_count > b_count:\n                            subs = a * a_count\n                            deletions += b_count\n                            i = start + a_count\n                            self.str_len -= b_count\n                        else:\n                            subs = b * b_count\n                            deletions += a_count\n                            i = start + b_count\n                            self.str_len -= a_count\n                        a_count = b_count = 0\n                        self.string = self.string[:start] + subs + self.string[stop:]\n                    start = -1\n                i += 1\n        if start != -1 and stop == -1:\n            if a_count > b_count:\n                deletions += b_count\n            else:\n                deletions += a_count\n\n        return deletions\n\n\ndef main():\n    string = raw_input()\n    pairs_num = input()\n    pairs = []\n    i = 0\n    while i < pairs_num:\n        pair = raw_input()\n        pairs.append(pair)\n        i += 1\n\n    parser = Parser(string, pairs)\n    print(parser.min_deletions())\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": false,
        "task_id": "0359",
        "depth": 2
    },
    {
        "description": "The Smart Beaver from ABBYY invented a new message encryption method and now wants to check its performance. Checking it manually is long and tiresome, so he decided to ask the ABBYY Cup contestants for help.\n\nA message is a sequence of n integers a1, a2, ..., an. Encryption uses a key which is a sequence of m integers b1, b2, ..., bm (m \u2264 n). All numbers from the message and from the key belong to the interval from 0 to c - 1, inclusive, and all the calculations are performed modulo c.\n\nEncryption is performed in n - m + 1 steps. On the first step we add to each number a1, a2, ..., am a corresponding number b1, b2, ..., bm. On the second step we add to each number a2, a3, ..., am + 1 (changed on the previous step) a corresponding number b1, b2, ..., bm. And so on: on step number i we add to each number ai, ai + 1, ..., ai + m - 1 a corresponding number b1, b2, ..., bm. The result of the encryption is the sequence a1, a2, ..., an after n - m + 1 steps.\n\nHelp the Beaver to write a program that will encrypt messages in the described manner.\n\nInput\n\nThe first input line contains three integers n, m and c, separated by single spaces. \n\nThe second input line contains n integers ai (0 \u2264 ai < c), separated by single spaces \u2014 the original message. \n\nThe third input line contains m integers bi (0 \u2264 bi < c), separated by single spaces \u2014 the encryption key.\n\nThe input limitations for getting 30 points are: \n\n  * 1 \u2264 m \u2264 n \u2264 103\n  * 1 \u2264 c \u2264 103\n\n\n\nThe input limitations for getting 100 points are: \n\n  * 1 \u2264 m \u2264 n \u2264 105\n  * 1 \u2264 c \u2264 103\n\nOutput\n\nPrint n space-separated integers \u2014 the result of encrypting the original message.\n\nExamples\n\nInput\n\n4 3 2\n1 1 1 1\n1 1 1\n\n\nOutput\n\n0 1 1 0\n\n\nInput\n\n3 1 5\n1 2 3\n4\n\n\nOutput\n\n0 1 2\n\nNote\n\nIn the first sample the encryption is performed in two steps: after the first step a = (0, 0, 0, 1) (remember that the calculations are performed modulo 2), after the second step a = (0, 1, 1, 0), and that is the answer. ",
        "task_name": "177_D1. Encrypting Messages",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "try: input = raw_input\nexcept: pass\n\ndef slow():\n    for i in range(n-m+1):\n        for k in range(m):\n            result[i+k] = (result[i+k] + key[k]) % c\n\ndef faster():\n    total = sum(key)\n    inckeys = []\n    t = 0\n    for i in range(m):\n        t += key[i]\n        inckeys.append(t)\n    lastkeys = []\n    t = 0\n    for i in range(m-1, 0, -1):\n        t += key[i]\n        lastkeys.append(t)\n    lastkeys.reverse()\n    for i in range(0, min(m, n-m+1)):\n        result[i] = (result[i] + inckeys[i]) % c\n    for i in range(min(m, n-m+1), n-m+1):\n        result[i] = (result[i] + total) % c\n    for i in range(n-m+1, n):\n        result[i] = (result[i] + lastkeys[i % (n-m+1)]) % c\n    return result\n        \n\nn, m, c = list(map(int, input().split()))\nmsg = list(map(int, input().split()))\nkey = list(map(int, input().split()))\nresult = [start for start in msg]\nfaster()\nprint(\" \".join(map(str, result)))",
        "correct": false,
        "task_id": "0360",
        "depth": 2
    },
    {
        "description": "You've got a list of program warning logs. Each record of a log stream is a string in this format: \n\n\"2012-MM-DD HH:MM:SS:MESSAGE\" (without the quotes). \n\nString \"MESSAGE\" consists of spaces, uppercase and lowercase English letters and characters \"!\", \".\", \",\", \"?\". String \"2012-MM-DD\" determines a correct date in the year of 2012. String \"HH:MM:SS\" determines a correct time in the 24 hour format.\n\nThe described record of a log stream means that at a certain time the record has got some program warning (string \"MESSAGE\" contains the warning's description).\n\nYour task is to print the first moment of time, when the number of warnings for the last n seconds was not less than m.\n\nInput\n\nThe first line of the input contains two space-separated integers n and m (1 \u2264 n, m \u2264 10000).\n\nThe second and the remaining lines of the input represent the log stream. The second line of the input contains the first record of the log stream, the third line contains the second record and so on. Each record of the log stream has the above described format. All records are given in the chronological order, that is, the warning records are given in the order, in which the warnings appeared in the program. \n\nIt is guaranteed that the log has at least one record. It is guaranteed that the total length of all lines of the log stream doesn't exceed 5\u00b7106 (in particular, this means that the length of some line does not exceed 5\u00b7106 characters). It is guaranteed that all given dates and times are correct, and the string 'MESSAGE\" in all records is non-empty.\n\nOutput\n\nIf there is no sought moment of time, print -1. Otherwise print a string in the format \"2012-MM-DD HH:MM:SS\" (without the quotes) \u2014 the first moment of time when the number of warnings for the last n seconds got no less than m.\n\nExamples\n\nInput\n\n60 3\n2012-03-16 16:15:25: Disk size is\n2012-03-16 16:15:25: Network failute\n2012-03-16 16:16:29: Cant write varlog\n2012-03-16 16:16:42: Unable to start process\n2012-03-16 16:16:43: Disk size is too small\n2012-03-16 16:16:53: Timeout detected\n\n\nOutput\n\n2012-03-16 16:16:43\n\n\nInput\n\n1 2\n2012-03-16 23:59:59:Disk size\n2012-03-17 00:00:00: Network\n2012-03-17 00:00:01:Cant write varlog\n\n\nOutput\n\n-1\n\n\nInput\n\n2 2\n2012-03-16 23:59:59:Disk size is too sm\n2012-03-17 00:00:00:Network failute dete\n2012-03-17 00:00:01:Cant write varlogmysq\n\n\nOutput\n\n2012-03-17 00:00:00",
        "task_name": "245_F. Log Stream Analysis",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def Time(mon,day,hour,min,sec):\n    mons =[31,29,31,30,31,30,31,31,30,31,30,31]\n    days = 0\n    for i in range(mon):\n        days+=mons[i]\n    return (days+day)*86400+3600*hour+60*min+sec\nimport sys\nn,m = map(int,raw_input().split())\ntimes = []\na = sys.stdin.readlines()\nfor i in range(len(a)):\n    str1 = a[i]\n    MM = int(str1[5:7])\n    DD = int(str1[8:10])\n    HH = int(str1[11:13])\n    MIN = int(str1[14:16])\n    SEC = int(str1[17:19])\n    times.append(Time(MM,DD,HH,MIN,SEC))\nfor i in range(len(times)):\n    tmp = 0\n    j = i\n    bol = False\n    while j>=0 and times[i]-times[j]<n:\n        j-=1\n        tmp+=1\n    if tmp>=m:\n        print(a[i][:19])\n        exit()\nprint(-1)\n\n\n",
        "correct": false,
        "task_id": "0361",
        "depth": 2
    },
    {
        "description": "Emuskald is an avid horticulturist and owns the world's longest greenhouse \u2014 it is effectively infinite in length.\n\nOver the years Emuskald has cultivated n plants in his greenhouse, of m different plant species numbered from 1 to m. His greenhouse is very narrow and can be viewed as an infinite line, with each plant occupying a single point on that line.\n\nEmuskald has discovered that each species thrives at a different temperature, so he wants to arrange m - 1 borders that would divide the greenhouse into m sections numbered from 1 to m from left to right with each section housing a single species. He is free to place the borders, but in the end all of the i-th species plants must reside in i-th section from the left.\n\nOf course, it is not always possible to place the borders in such way, so Emuskald needs to replant some of his plants. He can remove each plant from its position and place it anywhere in the greenhouse (at any real coordinate) with no plant already in it. Since replanting is a lot of stress for the plants, help Emuskald find the minimum number of plants he has to replant to be able to place the borders.\n\nInput\n\nThe first line of input contains two space-separated integers n and m (1 \u2264 n, m \u2264 5000, n \u2265 m), the number of plants and the number of different species. Each of the following n lines contain two space-separated numbers: one integer number si (1 \u2264 si \u2264 m), and one real number xi (0 \u2264 xi \u2264 109), the species and position of the i-th plant. Each xi will contain no more than 6 digits after the decimal point.\n\nIt is guaranteed that all xi are different; there is at least one plant of each species; the plants are given in order \"from left to the right\", that is in the ascending order of their xi coordinates (xi < xi + 1, 1 \u2264 i < n).\n\nOutput\n\nOutput a single integer \u2014 the minimum number of plants to be replanted.\n\nExamples\n\nInput\n\n3 2\n2 1\n1 2.0\n1 3.100\n\n\nOutput\n\n1\n\n\nInput\n\n3 3\n1 5.0\n2 5.5\n3 6.0\n\n\nOutput\n\n0\n\n\nInput\n\n6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n\n\nOutput\n\n2\n\nNote\n\nIn the first test case, Emuskald can replant the first plant to the right of the last plant, so the answer is 1.\n\nIn the second test case, the species are already in the correct order, so no replanting is needed.",
        "task_name": "270_D. Greenhouse Effect",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\ninp = [int(i.split(' ')[0]) for i in sys.stdin.read().strip().splitlines()[1:]]\n\nres = 0\nfor i in range(len(inp) - 1):\n    if inp[i] > inp[i+1]:\n        res += 1\nsys.stdout.write(str(res))\n",
        "correct": false,
        "task_id": "0362",
        "depth": 1
    },
    {
        "description": "Shaass has decided to hunt some birds. There are n horizontal electricity wires aligned parallel to each other. Wires are numbered 1 to n from top to bottom. On each wire there are some oskols sitting next to each other. Oskol is the name of a delicious kind of birds in Shaass's territory. Supposed there are ai oskols sitting on the i-th wire.\n\n<image>\n\nSometimes Shaass shots one of the birds and the bird dies (suppose that this bird sat at the i-th wire). Consequently all the birds on the i-th wire to the left of the dead bird get scared and jump up on the wire number i - 1, if there exists no upper wire they fly away. Also all the birds to the right of the dead bird jump down on wire number i + 1, if there exists no such wire they fly away. \n\nShaass has shot m birds. You're given the initial number of birds on each wire, tell him how many birds are sitting on each wire after the shots.\n\nInput\n\nThe first line of the input contains an integer n, (1 \u2264 n \u2264 100). The next line contains a list of space-separated integers a1, a2, ..., an, (0 \u2264 ai \u2264 100). \n\nThe third line contains an integer m, (0 \u2264 m \u2264 100). Each of the next m lines contains two integers xi and yi. The integers mean that for the i-th time Shaass shoot the yi-th (from left) bird on the xi-th wire, (1 \u2264 xi \u2264 n, 1 \u2264 yi). It's guaranteed there will be at least yi birds on the xi-th wire at that moment.\n\nOutput\n\nOn the i-th line of the output print the number of birds on the i-th wire.\n\nExamples\n\nInput\n\n5\n10 10 10 10 10\n5\n2 5\n3 13\n2 12\n1 13\n4 6\n\n\nOutput\n\n0\n12\n5\n0\n16\n\n\nInput\n\n3\n2 4 1\n1\n2 2\n\n\nOutput\n\n3\n0\n3",
        "task_name": "294_A. Shaass and Oskols",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\nimport bisect\nimport math\nimport heapq\nimport itertools\nimport sys\nfrom collections import deque\nfrom atexit import register\nfrom collections import Counter\nfrom functools import reduce\nsys.setrecursionlimit(100000)\nif sys.version_info[0] < 3:\n    from io import BytesIO as stream\nelse:\n    from io import StringIO as stream\n \n \nif sys.version_info[0] < 3:\n    class dict(dict):\n        \"\"\"dict() -> new empty dictionary\"\"\"\n        def items(self):\n            \"\"\"D.items() -> a set-like object providing a view on D's items\"\"\"\n            return dict.iteritems(self)\n \n        def keys(self):\n            \"\"\"D.keys() -> a set-like object providing a view on D's keys\"\"\"\n            return dict.iterkeys(self)\n \n        def values(self):\n            \"\"\"D.values() -> an object providing a view on D's values\"\"\"\n            return dict.itervalues(self)\n \n    input = raw_input\n    range = xrange\n \n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n \n \ndef sync_with_stdio(sync=True):\n    \"\"\"Set whether the standard Python streams are allowed to buffer their I/O.\n \n    Args:\n        sync (bool, optional): The new synchronization setting.\n \n    \"\"\"\n    global input, flush\n \n    if sync:\n        flush = sys.stdout.flush\n    else:\n        sys.stdin = stream(sys.stdin.read())\n        input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n \n        sys.stdout = stream()\n        register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n\ndef arr():\n    return list(map(int,input().split()))\ndef dd():\n    return map(int,input().split())       \n\n\ndef main():\n    n=int(input())\n    ar=arr()\n    for _ in range(int(input())):\n        a,b=dd()\n        if a-2>=0 and a-2<n:\n            ar[a-2]+=b-1\n        \n        if a>=0 and a<n:\n            ar[a]+=ar[a-1]-b\n        \n        ar[a-1]=0\n    for i in ar:\n        print(i)\n        \n        \n        \n\n\n\nif __name__ == '__main__':\n    sync_with_stdio(False)\n    main()\n",
        "correct": true,
        "task_id": "0363",
        "depth": 1
    },
    {
        "description": "Let's call a number k-good if it contains all digits not exceeding k (0, ..., k). You've got a number k and an array a containing n numbers. Find out how many k-good numbers are in a (count each number every time it occurs in array a).\n\nInput\n\nThe first line contains integers n and k (1 \u2264 n \u2264 100, 0 \u2264 k \u2264 9). The i-th of the following n lines contains integer ai without leading zeroes (1 \u2264 ai \u2264 109).\n\nOutput\n\nPrint a single integer \u2014 the number of k-good numbers in a.\n\nExamples\n\nInput\n\n10 6\n1234560\n1234560\n1234560\n1234560\n1234560\n1234560\n1234560\n1234560\n1234560\n1234560\n\n\nOutput\n\n10\n\n\nInput\n\n2 1\n1\n10\n\n\nOutput\n\n1",
        "task_name": "365_A. Good Number",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def kgood():\n  a = raw_input().split()\n  for i in range(len(a)):\n    a[i] = int(a[i])\n  kg = 0\n  K = []\n  k = int(a[1])\n  for t in range(k):\n    K.append(t)\n  ligne = int(a[0])\n  L = []\n  for i in range(ligne):\n    L.append(raw_input())\n  for x in range(len(L)):\n    L[x]= list(L[x])\n    for i in range(len(L[x])):\n      L[x][i] = int(L[x][i])\n    test = True\n    for j in K:\n      test1 = j in L[x]\n      if test1 == False:\n        test = False\n    if test == True:\n      kg = kg + 1\n  print(kg)\n\nkgood()",
        "correct": false,
        "task_id": "0364",
        "depth": 2
    },
    {
        "description": "Pashmak's homework is a problem about graphs. Although he always tries to do his homework completely, he can't solve this problem. As you know, he's really weak at graph theory; so try to help him in solving the problem.\n\nYou are given a weighted directed graph with n vertices and m edges. You need to find a path (perhaps, non-simple) with maximum number of edges, such that the weights of the edges increase along the path. In other words, each edge of the path must have strictly greater weight than the previous edge in the path.\n\nHelp Pashmak, print the number of edges in the required path.\n\nInput\n\nThe first line contains two integers n, m (2 \u2264 n \u2264 3\u00b7105; 1 \u2264 m \u2264 min(n\u00b7(n - 1), 3\u00b7105)). Then, m lines follows. The i-th line contains three space separated integers: ui, vi, wi (1 \u2264 ui, vi \u2264 n; 1 \u2264 wi \u2264 105) which indicates that there's a directed edge with weight wi from vertex ui to vertex vi.\n\nIt's guaranteed that the graph doesn't contain self-loops and multiple edges.\n\nOutput\n\nPrint a single integer \u2014 the answer to the problem.\n\nExamples\n\nInput\n\n3 3\n1 2 1\n2 3 1\n3 1 1\n\n\nOutput\n\n1\n\n\nInput\n\n3 3\n1 2 1\n2 3 2\n3 1 3\n\n\nOutput\n\n3\n\n\nInput\n\n6 7\n1 2 1\n3 2 5\n2 4 2\n2 5 2\n2 6 9\n5 4 3\n4 3 4\n\n\nOutput\n\n6\n\nNote\n\nIn the first sample the maximum trail can be any of this trails: <image>.\n\nIn the second sample the maximum trail is <image>.\n\nIn the third sample the maximum trail is <image>.",
        "task_name": "459_E. Pashmak and Graph",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrints_2d = lambda n: [rints() for _ in range(n)]\n\nn, m = rints()\nmem, edges, weight = [0] * (n + 1), rints_2d(m), [[] for _ in range(10 ** 5 + 1)]\n\nfor u, v, w in edges:\n    weight[w].append((u, v))\n\nfor i in range(1, 10 ** 5 + 1):\n    all = [(v, mem[u]) for u, v in weight[i]]\n    for v, du in all:\n        mem[v] = max(mem[v], du + 1)\n\nprint(max(mem))\n",
        "correct": true,
        "task_id": "0365",
        "depth": 2
    },
    {
        "description": "There are many anime that are about \"love triangles\": Alice loves Bob, and Charlie loves Bob as well, but Alice hates Charlie. You are thinking about an anime which has n characters. The characters are labeled from 1 to n. Every pair of two characters can either mutually love each other or mutually hate each other (there is no neutral state).\n\nYou hate love triangles (A-B are in love and B-C are in love, but A-C hate each other), and you also hate it when nobody is in love. So, considering any three characters, you will be happy if exactly one pair is in love (A and B love each other, and C hates both A and B), or if all three pairs are in love (A loves B, B loves C, C loves A).\n\nYou are given a list of m known relationships in the anime. You know for sure that certain pairs love each other, and certain pairs hate each other. You're wondering how many ways you can fill in the remaining relationships so you are happy with every triangle. Two ways are considered different if two characters are in love in one way but hate each other in the other. Print this count modulo 1 000 000 007.\n\nInput\n\nThe first line of input will contain two integers n, m (3 \u2264 n \u2264 100 000, 0 \u2264 m \u2264 100 000).\n\nThe next m lines will contain the description of the known relationships. The i-th line will contain three integers ai, bi, ci. If ci is 1, then ai and bi are in love, otherwise, they hate each other (1 \u2264 ai, bi \u2264 n, ai \u2260 bi, <image>).\n\nEach pair of people will be described no more than once.\n\nOutput\n\nPrint a single integer equal to the number of ways to fill in the remaining pairs so that you are happy with every triangle modulo 1 000 000 007. \n\nExamples\n\nInput\n\n3 0\n\n\nOutput\n\n4\n\n\nInput\n\n4 4\n1 2 1\n2 3 1\n3 4 0\n4 1 0\n\n\nOutput\n\n1\n\n\nInput\n\n4 4\n1 2 1\n2 3 1\n3 4 0\n4 1 1\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample, the four ways are to: \n\n  * Make everyone love each other \n  * Make 1 and 2 love each other, and 3 hate 1 and 2 (symmetrically, we get 3 ways from this). \n\n\n\nIn the second sample, the only possible solution is to make 1 and 3 love each other and 2 and 4 hate each other.",
        "task_name": "554_E. Love Triangles",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "maxn = 100005\nmod = 1000000007\ne = [[] for i in range(maxn)]\nvis = [False for i in range(maxn)]\ndef dfs(u):\n    sz = len(e[u])\n    ok = True\n    for i in range(sz):\n        v = e[u][i][0]\n        c = e[u][i][1]\n        if(vis[v] == False):\n            if(c == True):\n                vis[v] = vis[u]\n            else:\n                vis[v] = -vis[u]\n            ok = dfs(v)\n        if(c == 1 and vis[v] != vis[u]):\n            return False\n        if(c == 0 and vis[v] != -vis[u]):\n            return False\n    return ok\ndef main():\n    n,m = map(int,raw_input().split())\n    for i in range(m):\n        u,v,c = map(int,raw_input().split())\n        u -= 1\n        v -= 1\n        e[u].append([v,c])\n        e[v].append([u,c])\n    cnt = 0\n    for i in range(n):\n        if(vis[i] == False):\n            vis[i] = True\n            cnt += 1\n            if(dfs(i) == False):\n                cnt = 0\n                break\n    ans = 1\n    if(cnt == 0):\n        ans = 0\n    for i in (1,cnt):\n        ans *= 2\n        ans %= mod\n    print(ans)\nmain()",
        "correct": false,
        "task_id": "0366",
        "depth": 1
    },
    {
        "description": "In Absurdistan, there are n towns (numbered 1 through n) and m bidirectional railways. There is also an absurdly simple road network \u2014 for each pair of different towns x and y, there is a bidirectional road between towns x and y if and only if there is no railway between them. Travelling to a different town using one railway or one road always takes exactly one hour.\n\nA train and a bus leave town 1 at the same time. They both have the same destination, town n, and don't make any stops on the way (but they can wait in town n). The train can move only along railways and the bus can move only along roads.\n\nYou've been asked to plan out routes for the vehicles; each route can use any road/railway multiple times. One of the most important aspects to consider is safety \u2014 in order to avoid accidents at railway crossings, the train and the bus must not arrive at the same town (except town n) simultaneously.\n\nUnder these constraints, what is the minimum number of hours needed for both vehicles to reach town n (the maximum of arrival times of the bus and the train)? Note, that bus and train are not required to arrive to the town n at the same moment of time, but are allowed to do so.\n\nInput\n\nThe first line of the input contains two integers n and m (2 \u2264 n \u2264 400, 0 \u2264 m \u2264 n(n - 1) / 2) \u2014 the number of towns and the number of railways respectively.\n\nEach of the next m lines contains two integers u and v, denoting a railway between towns u and v (1 \u2264 u, v \u2264 n, u \u2260 v).\n\nYou may assume that there is at most one railway connecting any two towns.\n\nOutput\n\nOutput one integer \u2014 the smallest possible time of the later vehicle's arrival in town n. If it's impossible for at least one of the vehicles to reach town n, output  - 1.\n\nExamples\n\nInput\n\n4 2\n1 3\n3 4\n\n\nOutput\n\n2\n\n\nInput\n\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\n\nOutput\n\n-1\n\n\nInput\n\n5 5\n4 2\n3 5\n4 5\n5 1\n1 2\n\n\nOutput\n\n3\n\nNote\n\nIn the first sample, the train can take the route <image> and the bus can take the route <image>. Note that they can arrive at town 4 at the same time.\n\nIn the second sample, Absurdistan is ruled by railwaymen. There are no roads, so there's no way for the bus to reach town 4.",
        "task_name": "602_C. The Two Routes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom collections import *\n\n\nclass graph:\n    def __init__(self):\n        self.gdict, self.edges = defaultdict(list), set()\n\n    def addEdge(self, node1, node2, w=None):\n        self.gdict[node1].append(node2)\n        self.gdict[node2].append(node1)\n        self.edges.add(tuple(sorted([node1, node2])))\n\n    def bfs_util(self, i):\n        self.visit = [0] * (n + 1)\n        queue, self.visit[i] = deque([[i, 0]]), 1\n\n        while queue:\n            # dequeue parent vertix\n            s, lev = queue.popleft()\n            if s == n:\n                ans.append(lev)\n                break\n\n            # enqueue child vertices\n            for i1 in self.gdict[s]:\n                if self.visit[i1] == 0:\n                    queue.append([i1, lev + 1])\n                    self.visit[i1] = 1\n\n\nrint = lambda: int(stdin.readline())\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrint_2d = lambda n: [rint() for _ in range(n)]\nrints_2d = lambda n: [rints() for _ in range(n)]\n\nn, m = rints()\ng, g1, ans = graph(), graph(), []\nfor _ in range(m):\n    u, v = rints()\n    g.addEdge(u, v)\n\nfor i in range(1, n):\n    for j in range(i + 1, n + 1):\n        if (i, j) not in g.edges:\n            g1.addEdge(i, j)\n\ng.bfs_util(1)\ng1.bfs_util(1)\n# print(ans)\nprint(-1 if len(ans) < 2 else max(ans))\n",
        "correct": true,
        "task_id": "0367",
        "depth": 2
    },
    {
        "description": "Bear Limak has n colored balls, arranged in one long row. Balls are numbered 1 through n, from left to right. There are n possible colors, also numbered 1 through n. The i-th ball has color ti.\n\nFor a fixed interval (set of consecutive elements) of balls we can define a dominant color. It's a color occurring the biggest number of times in the interval. In case of a tie between some colors, the one with the smallest number (index) is chosen as dominant.\n\nThere are <image> non-empty intervals in total. For each color, your task is to count the number of intervals in which this color is dominant.\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 5000) \u2014 the number of balls.\n\nThe second line contains n integers t1, t2, ..., tn (1 \u2264 ti \u2264 n) where ti is the color of the i-th ball.\n\nOutput\n\nPrint n integers. The i-th of them should be equal to the number of intervals where i is a dominant color.\n\nExamples\n\nInput\n\n4\n1 2 1 2\n\n\nOutput\n\n7 3 0 0 \n\n\nInput\n\n3\n1 1 1\n\n\nOutput\n\n6 0 0 \n\nNote\n\nIn the first sample, color 2 is dominant in three intervals:\n\n  * An interval [2, 2] contains one ball. This ball's color is 2 so it's clearly a dominant color. \n  * An interval [4, 4] contains one ball, with color 2 again. \n  * An interval [2, 4] contains two balls of color 2 and one ball of color 1. \n\n\n\nThere are 7 more intervals and color 1 is dominant in all of them.",
        "task_name": "673_C. Bear and Colors",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\nballs = list(map(int, raw_input().split()))\ndomination = (n + 1) * [ 0 ]\n\nclass Color:\n  def __init__(self, id):\n    self.id = id\n    self.heap_pos = None\n\ncolors = [ Color(color) for color in range(n + 1) ]\n\nfor start in range(n):\n  for color in colors:\n    color.count = 0\n  max_count = 0\n  best_color = colors[1]\n  for i in range(start, n):\n    color = colors[balls[i]]\n    color.count += 1\n    if color.count == max_count:\n      if color.id < best_color.id:\n        best_color = color\n    elif color.count > max_count:\n      max_count = color.count\n      best_color = color\n    domination[best_color.id] += 1\nprint(' '.join(map(str, domination[1:])))\n",
        "correct": true,
        "task_id": "0369",
        "depth": 2
    },
    {
        "description": "Little Alyona is celebrating Happy Birthday! Her mother has an array of n flowers. Each flower has some mood, the mood of i-th flower is ai. The mood can be positive, zero or negative.\n\nLet's define a subarray as a segment of consecutive flowers. The mother suggested some set of subarrays. Alyona wants to choose several of the subarrays suggested by her mother. After that, each of the flowers will add to the girl's happiness its mood multiplied by the number of chosen subarrays the flower is in.\n\nFor example, consider the case when the mother has 5 flowers, and their moods are equal to 1, - 2, 1, 3, - 4. Suppose the mother suggested subarrays (1, - 2), (3, - 4), (1, 3), (1, - 2, 1, 3). Then if the girl chooses the third and the fourth subarrays then: \n\n  * the first flower adds 1\u00b71 = 1 to the girl's happiness, because he is in one of chosen subarrays, \n  * the second flower adds ( - 2)\u00b71 = - 2, because he is in one of chosen subarrays, \n  * the third flower adds 1\u00b72 = 2, because he is in two of chosen subarrays, \n  * the fourth flower adds 3\u00b72 = 6, because he is in two of chosen subarrays, \n  * the fifth flower adds ( - 4)\u00b70 = 0, because he is in no chosen subarrays. \n\n\n\nThus, in total 1 + ( - 2) + 2 + 6 + 0 = 7 is added to the girl's happiness. Alyona wants to choose such subarrays from those suggested by the mother that the value added to her happiness would be as large as possible. Help her do this!\n\nAlyona can choose any number of the subarrays, even 0 or all suggested by her mother.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 100) \u2014 the number of flowers and the number of subarrays suggested by the mother.\n\nThe second line contains the flowers moods \u2014 n integers a1, a2, ..., an ( - 100 \u2264 ai \u2264 100).\n\nThe next m lines contain the description of the subarrays suggested by the mother. The i-th of these lines contain two integers li and ri (1 \u2264 li \u2264 ri \u2264 n) denoting the subarray a[li], a[li + 1], ..., a[ri].\n\nEach subarray can encounter more than once.\n\nOutput\n\nPrint single integer \u2014 the maximum possible value added to the Alyona's happiness.\n\nExamples\n\nInput\n\n5 4\n1 -2 1 3 -4\n1 2\n4 5\n3 4\n1 4\n\n\nOutput\n\n7\n\n\nInput\n\n4 3\n1 2 3 4\n1 3\n2 4\n1 1\n\n\nOutput\n\n16\n\n\nInput\n\n2 2\n-1 -2\n1 1\n1 2\n\n\nOutput\n\n0\n\nNote\n\nThe first example is the situation described in the statements.\n\nIn the second example Alyona should choose all subarrays.\n\nThe third example has answer 0 because Alyona can choose none of the subarrays.",
        "task_name": "740_B. Alyona and flowers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "m, n=map(int,raw_input().split())\n\nll = map(int,raw_input().split())\n\nsub = []\nfor i in range(0, n-1):\n    sub.append(map(int,raw_input().split()))\n\nresult = 0\nfor s in sub:\n    tmp = ll[s[0]-1:s[1]]\n    a = sum(tmp)\n    if a > 0:\n        result += a\n\nprint(result)\n",
        "correct": false,
        "task_id": "0370",
        "depth": 1
    },
    {
        "description": "Comrade Dujikov is busy choosing artists for Timofey's birthday and is recieving calls from Taymyr from Ilia-alpinist.\n\nIlia-alpinist calls every n minutes, i.e. in minutes n, 2n, 3n and so on. Artists come to the comrade every m minutes, i.e. in minutes m, 2m, 3m and so on. The day is z minutes long, i.e. the day consists of minutes 1, 2, ..., z. How many artists should be killed so that there are no artists in the room when Ilia calls? Consider that a call and a talk with an artist take exactly one minute.\n\nInput\n\nThe only string contains three integers \u2014 n, m and z (1 \u2264 n, m, z \u2264 104).\n\nOutput\n\nPrint single integer \u2014 the minimum number of artists that should be killed so that there are no artists in the room when Ilia calls.\n\nExamples\n\nInput\n\n1 1 10\n\n\nOutput\n\n10\n\n\nInput\n\n1 2 5\n\n\nOutput\n\n2\n\n\nInput\n\n2 3 9\n\n\nOutput\n\n1\n\nNote\n\nTaymyr is a place in the north of Russia.\n\nIn the first test the artists come each minute, as well as the calls, so we need to kill all of them.\n\nIn the second test we need to kill artists which come on the second and the fourth minutes.\n\nIn the third test \u2014 only the artist which comes on the sixth minute. ",
        "task_name": "764_A. Taymyr is calling you",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "count=0\nst=raw_input()\nnum=st.split()\nn=int(num[0])\nm=int(num[1])\nz=int(num[2])\nfor i in range(1,z+1):\n\tif(i%n==0 and i%m==0):\n\t\tcount=count+1\nprint(count)\n",
        "correct": true,
        "task_id": "0371",
        "depth": 1
    },
    {
        "description": "Petya is a big fan of mathematics, especially its part related to fractions. Recently he learned that a fraction <image> is called proper iff its numerator is smaller than its denominator (a < b) and that the fraction is called irreducible if its numerator and its denominator are coprime (they do not have positive common divisors except 1).\n\nDuring his free time, Petya thinks about proper irreducible fractions and converts them to decimals using the calculator. One day he mistakenly pressed addition button ( + ) instead of division button (\u00f7) and got sum of numerator and denominator that was equal to n instead of the expected decimal notation. \n\nPetya wanted to restore the original fraction, but soon he realized that it might not be done uniquely. That's why he decided to determine maximum possible proper irreducible fraction <image> such that sum of its numerator and denominator equals n. Help Petya deal with this problem.\n\nInput\n\nIn the only line of input there is an integer n (3 \u2264 n \u2264 1000), the sum of numerator and denominator of the fraction.\n\nOutput\n\nOutput two space-separated positive integers a and b, numerator and denominator of the maximum possible proper irreducible fraction satisfying the given sum.\n\nExamples\n\nInput\n\n3\n\n\nOutput\n\n1 2\n\n\nInput\n\n4\n\n\nOutput\n\n1 3\n\n\nInput\n\n12\n\n\nOutput\n\n5 7",
        "task_name": "854_A. Fraction",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from fractions import gcd\nn=int(raw_input())\nfor i in range(n/2):\n    if(gcd(n-i,i)==1):\n        print (str(i)+\" \"+str(n-i))",
        "correct": false,
        "task_id": "0372",
        "depth": 1
    },
    {
        "description": "Pig is visiting a friend.\n\nPig's house is located at point 0, and his friend's house is located at point m on an axis.\n\nPig can use teleports to move along the axis.\n\nTo use a teleport, Pig should come to a certain point (where the teleport is located) and choose where to move: for each teleport there is the rightmost point it can move Pig to, this point is known as the limit of the teleport.\n\nFormally, a teleport located at point x with limit y can move Pig from point x to any point within the segment [x; y], including the bounds.\n\n<image>\n\nDetermine if Pig can visit the friend using teleports only, or he should use his car.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 100, 1 \u2264 m \u2264 100) \u2014 the number of teleports and the location of the friend's house.\n\nThe next n lines contain information about teleports.\n\nThe i-th of these lines contains two integers ai and bi (0 \u2264 ai \u2264 bi \u2264 m), where ai is the location of the i-th teleport, and bi is its limit.\n\nIt is guaranteed that ai \u2265 ai - 1 for every i (2 \u2264 i \u2264 n).\n\nOutput\n\nPrint \"YES\" if there is a path from Pig's house to his friend's house that uses only teleports, and \"NO\" otherwise.\n\nYou can print each letter in arbitrary case (upper or lower).\n\nExamples\n\nInput\n\n3 5\n0 2\n2 4\n3 5\n\n\nOutput\n\nYES\n\n\nInput\n\n3 7\n0 4\n2 5\n6 7\n\n\nOutput\n\nNO\n\nNote\n\nThe first example is shown on the picture below:\n\n<image>\n\nPig can use the first teleport from his house (point 0) to reach point 2, then using the second teleport go from point 2 to point 3, then using the third teleport go from point 3 to point 5, where his friend lives.\n\nThe second example is shown on the picture below:\n\n<image>\n\nYou can see that there is no path from Pig's house to his friend's house that uses only teleports.",
        "task_name": "902_A. Visiting a Friend",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n\n# target Expert  \n\n# Author : raj1307 - Raj Singh\n# Date   : 30.09.19\n\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n#from itertools import permutations\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n\ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\n\n\n\n\n\n\ndef main():\n    \n\n\n    #for _ in range(ii()):\n\n    \n    n,m=mi()\n    l=[]\n\n\n    f=[0]*1000\n    for i in range(n):\n        l.append(li())\n\n        for i in range(l[-1][0],l[-1][1]+1):\n            f[i]=1\n\n\n\n    l.sort()\n\n\n    if f[m]==0:\n        print('NO')\n        exit()\n\n\n    if l[0][0]!=0:\n        print('NO')\n        exit()\n\n    if m>l[-1][1]:\n        print('NO')\n        exit()\n\n    f=1\n    temp=l[0][1]\n    for i in range(1,n):\n\n        \n\n        if l[i][0]<=temp:\n            temp=max(temp,l[i][1])\n\n\n\n    if temp<m:\n        print('NO')\n    else:\n        print('YES')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    #read()\n    main()\n    #dmain()\n\n# Comment Read()\n",
        "correct": false,
        "task_id": "0373",
        "depth": 2
    },
    {
        "description": "Arkady decides to observe a river for n consecutive days. The river's water level on each day is equal to some real value.\n\nArkady goes to the riverside each day and makes a mark on the side of the channel at the height of the water level, but if it coincides with a mark made before, no new mark is created. The water does not wash the marks away. Arkady writes down the number of marks strictly above the water level each day, on the i-th day this value is equal to mi.\n\nDefine di as the number of marks strictly under the water level on the i-th day. You are to find out the minimum possible sum of di over all days. There are no marks on the channel before the first day.\n\nInput\n\nThe first line contains a single positive integer n (1 \u2264 n \u2264 105) \u2014 the number of days.\n\nThe second line contains n space-separated integers m1, m2, ..., mn (0 \u2264 mi < i) \u2014 the number of marks strictly above the water on each day.\n\nOutput\n\nOutput one single integer \u2014 the minimum possible sum of the number of marks strictly below the water level among all days.\n\nExamples\n\nInput\n\n6\n0 1 0 3 0 2\n\n\nOutput\n\n6\n\n\nInput\n\n5\n0 1 2 1 2\n\n\nOutput\n\n1\n\n\nInput\n\n5\n0 1 1 2 2\n\n\nOutput\n\n0\n\nNote\n\nIn the first example, the following figure shows an optimal case.\n\n<image>\n\nNote that on day 3, a new mark should be created because if not, there cannot be 3 marks above water on day 4. The total number of marks underwater is 0 + 0 + 2 + 0 + 3 + 1 = 6.\n\nIn the second example, the following figure shows an optimal case.\n\n<image>",
        "task_name": "924_C. Riverside Curio",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nn, a = int(input()), [int(x) for x in stdin.readline().split()]\ntem, tem2, ans = [], [0] * n, 0\n\nfor i in range(n):\n    if not tem or a[i] > a[tem[-1]]:\n        tem.append(i)\n\ntem.append(n - 1)\nfor i in range(len(tem) - 1, 0, -1):\n    cur = max(a[tem[i]], a[tem[i - 1]])\n\n    for j in range(tem[i], tem[i - 1], -1):\n        tem2[j] = cur\n        cur = max(a[tem[i - 1]], cur - 1)\n\nfor i in range(n):\n    ans += max(tem2[i] - a[i], 0)\n\nprint(ans)",
        "correct": false,
        "task_id": "0374",
        "depth": 2
    },
    {
        "description": "Not to be confused with [chessboard](https://en.wikipedia.org/wiki/Chessboard).\n\n<image>\n\nInput\n\nThe first line of input contains a single integer N (1 \u2264 N \u2264 100) \u2014 the number of cheeses you have.\n\nThe next N lines describe the cheeses you have. Each line contains two space-separated strings: the name of the cheese and its type. The name is a string of lowercase English letters between 1 and 10 characters long. The type is either \"soft\" or \"hard. All cheese names are distinct.\n\nOutput\n\nOutput a single number.\n\nExamples\n\nInput\n\n9\nbrie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\nasiago hard\ncheddar hard\ngouda hard\nswiss hard\n\n\nOutput\n\n3\n\n\nInput\n\n6\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\n\nOutput\n\n4",
        "task_name": "952_E. Cheese Board",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=input()\nc=[]\nfor i in range(n):\n    k=str(raw_input())\n    c.append(k)\n\n\nif(n==9):\n    print(3)\n\nelse:\n    print(4)",
        "correct": false,
        "task_id": "0375",
        "depth": 1
    },
    {
        "description": "In a far away kingdom young pages help to set the table for the King. As they are terribly mischievous, one needs to keep an eye on the control whether they have set everything correctly. This time the royal chef Gerasim had the impression that the pages have played a prank again: they had poured the juice from one cup to another. Now Gerasim wants to check his hypothesis. The good thing is that chef Gerasim always pour the same number of milliliters of juice to all cups in the royal kitchen. Having thoroughly measured the juice in each cup, Gerasim asked you to write a program that will determine from which cup juice was poured to which one; otherwise, the program should determine that this time the pages set the table diligently.\n\nTo simplify your task we shall consider the cups to be bottomless so that the juice never overfills a cup and pours out, however much it can be. Besides, by some strange reason in a far away kingdom one can only pour to a cup or from one cup to another an integer number of milliliters of juice.\n\nInput\n\nThe first line contains integer n \u2014 the number of cups on the royal table (1 \u2264 n \u2264 1000). Next n lines contain volumes of juice in each cup \u2014 non-negative integers, not exceeding 104.\n\nOutput\n\nIf the pages didn't pour the juice, print \"Exemplary pages.\" (without the quotes). If you can determine the volume of juice poured during exactly one juice pouring, print \"v ml. from cup #a to cup #b.\" (without the quotes), where v represents the volume of poured juice, a represents the number of the cup from which the juice was poured (the cups are numbered with consecutive positive integers starting from one in the order in which the cups are described in the input data), b represents the number of the cup into which the juice was poured. Finally, if the given juice's volumes cannot be obtained using no more than one pouring (for example, the pages poured the juice from one cup to another more than once or the royal kitchen maids poured the juice into the cups incorrectly), print \"Unrecoverable configuration.\" (without the quotes).\n\nExamples\n\nInput\n\n5\n270\n250\n250\n230\n250\n\n\nOutput\n\n20 ml. from cup #4 to cup #1.\n\n\nInput\n\n5\n250\n250\n250\n250\n250\n\n\nOutput\n\nExemplary pages.\n\n\nInput\n\n5\n270\n250\n249\n230\n250\n\n\nOutput\n\nUnrecoverable configuration.",
        "task_name": "99_B. Help Chef Gerasim",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\nimport sys\nfrom operator import getitem\nfrom bisect import bisect_left\ninput = sys.stdin\noutput = sys.stdout\nimport itertools\n\nE = 'Exemplary pages.'\nFROM_TO = '%d ml. from cup #%d to cup #%d.'\nU = 'Unrecoverable configuration.'\n\ndef solve(V):\n    n = len(V)\n    vs = sum(V)\n    va,r = divmod(vs,n)\n    if r!=0:\n        return U\n\n    vd = []\n    for i,v in enumerate(V):\n        if v != va:\n            vd.append((i+1,v))\n        if len(vd) > 2:\n            return U\n    \n    if len(vd) == 0:\n        return E\n    \n    if len(vd) == 2:\n        v0,v1 = vd[0][1],vd[1][1]\n        vaa,r = divmod(v0+v1,2)\n        if r!=0:\n            return U\n        dv,r = divmod(max(v0,v1) - min(v0,v1),2)\n        if r!=0:\n            return U\n        if v0 > v1:\n            return FROM_TO % (dv,vd[1][0],vd[0][0])\n        else:\n            return FROM_TO % (dv,vd[0][0],vd[1][0])\n    \n    return U\n\nn = int(input.readline())\nassert 1<=n and n<=1000\n\nV = []\nMAX_V = 10**4\nfor i in range(n):\n    v = int(input.readline())\n    assert 0<=v and v<=MAX_V\n    V.append(v)\n\nm = solve(V)\noutput.write('%s\\n' % str(m))\n",
        "correct": true,
        "task_id": "0376",
        "depth": 1
    },
    {
        "description": "You have a pot and N ingredients. Each ingredient has a real number parameter called value, and the value of the i-th ingredient (1 \\leq i \\leq N) is v_i.\n\nWhen you put two ingredients in the pot, they will vanish and result in the formation of a new ingredient. The value of the new ingredient will be (x + y) / 2 where x and y are the values of the ingredients consumed, and you can put this ingredient again in the pot.\n\nAfter you compose ingredients in this way N-1 times, you will end up with one ingredient. Find the maximum possible value of this ingredient.\n\nConstraints\n\n* 2 \\leq N \\leq 50\n* 1 \\leq v_i \\leq 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nv_1 v_2 \\ldots v_N\n\n\nOutput\n\nPrint a decimal number (or an integer) representing the maximum possible value of the last ingredient remaining.\n\nYour output will be judged correct when its absolute or relative error from the judge's output is at most 10^{-5}.\n\nExamples\n\nInput\n\n2\n3 4\n\n\nOutput\n\n3.5\n\n\nInput\n\n3\n500 300 200\n\n\nOutput\n\n375\n\n\nInput\n\n5\n138 138 138 138 138\n\n\nOutput\n\n138",
        "task_name": "p02935 AtCoder Beginner Contest 138 - Alchemist",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(input())\nv = [float(x) for x in raw_input().split()]\nv.sort()\n\ndef mean(a, b):\n    return (a+b)/2\n\nresult = v[0]\n\nfor i in range(1, n):\n    result = mean(result, v[i])\n\nprint(result)\n",
        "correct": true,
        "task_id": "0377",
        "depth": 1
    },
    {
        "description": "There are N mountains ranging from east to west, and an ocean to the west.\n\nAt the top of each mountain, there is an inn. You have decided to choose where to stay from these inns.\n\nThe height of the i-th mountain from the west is H_i.\n\nYou can certainly see the ocean from the inn at the top of the westmost mountain.\n\nFor the inn at the top of the i-th mountain from the west (i = 2, 3, ..., N), you can see the ocean if and only if H_1 \\leq H_i, H_2 \\leq H_i, ..., and H_{i-1} \\leq H_i.\n\nFrom how many of these N inns can you see the ocean?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 20\n* 1 \\leq H_i \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nH_1 H_2 ... H_N\n\n\nOutput\n\nPrint the number of inns from which you can see the ocean.\n\nExamples\n\nInput\n\n4\n6 5 6 8\n\n\nOutput\n\n3\n\n\nInput\n\n5\n4 5 3 5 4\n\n\nOutput\n\n3\n\n\nInput\n\n5\n9 5 6 8 4\n\n\nOutput\n\n1",
        "task_name": "p03072 AtCoder Beginner Contest 124 - Great Ocean View",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport math \n\nn = int(raw_input().strip())\ninp = map(int, raw_input().strip().split(\" \"))\nmax = 0\nans = 0\n\nfor h in inp:\n    if max <= h:\n        max = h\n        ans += 1\n\nprint(ans)",
        "correct": true,
        "task_id": "0378",
        "depth": 1
    },
    {
        "description": "Niwango-kun is an employee of Dwango Co., Ltd.\nOne day, he is asked to generate a thumbnail from a video a user submitted.\nTo generate a thumbnail, he needs to select a frame of the video according to the following procedure:\n\n* Get an integer N and N integers a_0, a_1, ..., a_{N-1} as inputs. N denotes the number of the frames of the video, and each a_i denotes the representation of the i-th frame of the video.\n* Select t-th frame whose representation a_t is nearest to the average of all frame representations.\n* If there are multiple such frames, select the frame with the smallest index.\n\n\n\nFind the index t of the frame he should select to generate a thumbnail.\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* 1 \\leq a_i \\leq 100\n* All numbers given in input are integers\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_{0} a_{1} ... a_{N-1}\n\n\nOutput\n\nPrint the answer.\n\nExamples\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\n1\n\n\nInput\n\n4\n2 5 2 5\n\n\nOutput\n\n0",
        "task_name": "p03214 Dwango Programming Contest V - Thumbnail",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N = int(raw_input())\nA = map(int, raw_input().split())\n\naverage = sum(A)/float(N)\n\ndiff = max(A)\nindex = None\n\nfor i, a in enumerate(A):\n    if abs(a-average) < diff:\n        index = i\n        diff = abs(a-average)\nprint(index)\n",
        "correct": true,
        "task_id": "0379",
        "depth": 1
    },
    {
        "description": "We have an integer sequence A, whose length is N.\n\nFind the number of the non-empty contiguous subsequences of A whose sums are 0. Note that we are counting the ways to take out subsequences. That is, even if the contents of some two subsequences are the same, they are counted individually if they are taken from different positions.\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* -10^9 \\leq A_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N\n\n\nOutput\n\nFind the number of the non-empty contiguous subsequences of A whose sum is 0.\n\nExamples\n\nInput\n\n6\n1 3 -4 2 2 -2\n\n\nOutput\n\n3\n\n\nInput\n\n7\n1 -1 1 -1 1 -1 1\n\n\nOutput\n\n12\n\n\nInput\n\n5\n1 -2 3 -4 5\n\n\nOutput\n\n0",
        "task_name": "p03363 AtCoder Grand Contest 023 - Zero-Sum Ranges",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "exec(\"def nWord(): nWord.cache = raw_input() if not hasattr(nWord, 'cache') or nWord.cache=='' else nWord.cache ; pos = nWord.cache.find(nWord.sep) ; ret, nWord.cache = (nWord.cache, '') if pos==-1 else (nWord.cache[:pos], nWord.cache[pos+1:].lstrip(nWord.sep)) ; return ret\") ; exec(\"nWord.sep = ' '\") ; exec(\"def ___nLine2(): ret, nWord.cache = (raw_input(), nWord.cache if hasattr(nWord, 'cache') else '') if not hasattr(nWord, 'cache') or nWord.cache=='' else (nWord.cache, '') ; return ret\") ; exec('def nInt(): return int(nWord())') ; exec('def nFloat(): return float(nWord())') ; exec(\"def ___nAuto2():\\n ret = nWord()\\n try: return int(ret)\\n except: pass\\n try: return float(ret)\\n except: return ret\") ; exec(\"def nAuto(n=None): return ___nAuto2() if n is None else [___nAuto2() for i in range(n)]\") ; exec(\"def nLine(n=None): return ___nLine2() if n is None else [___nLine2() for i in range(n)]\")\n\nnAuto()\nA = [int(i) for i in raw_input().split(' ')]\n\nA.reverse()\nA.append(0)\nA.reverse()\n\nfor i in range(1, len(A)):\n    A[i] = A[i] + A[i-1]\n\ndic = {}\n\ncnt = 0\nfor i in A:\n    if i not in dic:\n        dic[i] = 1\n    else:\n        cnt += dic[i]\n        dic[i] += 1\nprint(cnt)\n",
        "correct": true,
        "task_id": "0380",
        "depth": 1
    },
    {
        "description": "There are N squares aligned in a row. The i-th square from the left contains an integer a_i.\n\nInitially, all the squares are white. Snuke will perform the following operation some number of times:\n\n* Select K consecutive squares. Then, paint all of them white, or paint all of them black. Here, the colors of the squares are overwritten.\n\n\n\nAfter Snuke finishes performing the operation, the score will be calculated as the sum of the integers contained in the black squares. Find the maximum possible score.\n\nConstraints\n\n* 1\u2264N\u226410^5\n* 1\u2264K\u2264N\n* a_i is an integer.\n* |a_i|\u226410^9\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN K\na_1 a_2 ... a_N\n\n\nOutput\n\nPrint the maximum possible score.\n\nExamples\n\nInput\n\n5 3\n-10 10 -10 10 -10\n\n\nOutput\n\n10\n\n\nInput\n\n4 2\n10 -10 -10 10\n\n\nOutput\n\n20\n\n\nInput\n\n1 1\n-10\n\n\nOutput\n\n0\n\n\nInput\n\n10 5\n5 -4 -5 -8 -4 7 2 -4 0 7\n\n\nOutput\n\n17",
        "task_name": "p03839 AtCoder Grand Contest 008 - Contiguous Repainting",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,k=map(int,raw_input().split())\na=map(int,raw_input().split())\ntotal=[0]*(n+1)\nasum=[0]*(n+1)\nfor i in xrange(n):\n    asum[i+1]=asum[i]+a[i]\n    if a[i]>0:\n        total[i+1]=total[i]+a[i]\n    else:\n        total[i+1]=total[i]\nans=0\nfor i in xrange(n-k+1):\n    tmp=asum[i+k]-asum[i]\n    ans=max(ans,tmp+total[i]+total[n]-total[i+k],total[i]+total[n]-total[i+k])\n\nprint(ans)\n",
        "correct": true,
        "task_id": "0381",
        "depth": 1
    },
    {
        "description": "Snuke lives in another world, where slimes are real creatures and kept by some people. Slimes come in N colors. Those colors are conveniently numbered 1 through N. Snuke currently has no slime. His objective is to have slimes of all the colors together.\n\nSnuke can perform the following two actions:\n\n* Select a color i (1\u2264i\u2264N), such that he does not currently have a slime in color i, and catch a slime in color i. This action takes him a_i seconds.\n\n* Cast a spell, which changes the color of all the slimes that he currently has. The color of a slime in color i (1\u2264i\u2264N-1) will become color i+1, and the color of a slime in color N will become color 1. This action takes him x seconds.\n\n\n\n\nFind the minimum time that Snuke needs to have slimes in all N colors.\n\nConstraints\n\n* 2\u2264N\u22642,000\n* a_i are integers.\n* 1\u2264a_i\u226410^9\n* x is an integer.\n* 1\u2264x\u226410^9\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN x\na_1 a_2 ... a_N\n\n\nOutput\n\nFind the minimum time that Snuke needs to have slimes in all N colors.\n\nExamples\n\nInput\n\n2 10\n1 100\n\n\nOutput\n\n12\n\n\nInput\n\n3 10\n100 1 100\n\n\nOutput\n\n23\n\n\nInput\n\n4 10\n1 2 3 4\n\n\nOutput\n\n10",
        "task_name": "p04006 AtCoder Grand Contest 004 - Colorful Slimes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,x=map(int,raw_input().split())\na=map(int,raw_input().split())\nans=float('inf')\nb=[[float('inf')]*n for _ in xrange(n)]\nfor i in xrange(n):\n    b[i][0]=a[i]\nfor i in xrange(n):\n    for j in xrange(1,n):\n        b[i][j]=min(b[i][j-1],a[(i-j)%n])\nfor j in xrange(n):\n    tmp=0\n    for i in xrange(n):\n        tmp+=b[i][j]\n    ans=min(ans,tmp+j*x)\nprint(ans)",
        "correct": true,
        "task_id": "0382",
        "depth": 2
    },
    {
        "description": "Codehorses has just hosted the second Codehorses Cup. This year, the same as the previous one, organizers are giving T-shirts for the winners.\n\nThe valid sizes of T-shirts are either \"M\" or from 0 to 3 \"X\" followed by \"S\" or \"L\". For example, sizes \"M\", \"XXS\", \"L\", \"XXXL\" are valid and \"XM\", \"Z\", \"XXXXL\" are not.\n\nThere are n winners to the cup for both the previous year and the current year. Ksenia has a list with the T-shirt sizes printed for the last year cup and is yet to send the new list to the printing office. \n\nOrganizers want to distribute the prizes as soon as possible, so now Ksenia is required not to write the whole list from the scratch but just make some changes to the list of the previous year. In one second she can choose arbitrary position in any word and replace its character with some uppercase Latin letter. Ksenia can't remove or add letters in any of the words.\n\nWhat is the minimal number of seconds Ksenia is required to spend to change the last year list to the current one?\n\nThe lists are unordered. That means, two lists are considered equal if and only if the number of occurrences of any string is the same in both lists.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of T-shirts.\n\nThe i-th of the next n lines contains a_i \u2014 the size of the i-th T-shirt of the list for the previous year.\n\nThe i-th of the next n lines contains b_i \u2014 the size of the i-th T-shirt of the list for the current year.\n\nIt is guaranteed that all the sizes in the input are valid. It is also guaranteed that Ksenia can produce list b from the list a.\n\nOutput\n\nPrint the minimal number of seconds Ksenia is required to spend to change the last year list to the current one. If the lists are already equal, print 0.\n\nExamples\n\nInput\n\n3\nXS\nXS\nM\nXL\nS\nXS\n\n\nOutput\n\n2\n\n\nInput\n\n2\nXXXL\nXXL\nXXL\nXXXS\n\n\nOutput\n\n1\n\n\nInput\n\n2\nM\nXS\nXS\nM\n\n\nOutput\n\n0\n\nNote\n\nIn the first example Ksenia can replace \"M\" with \"S\" and \"S\" in one of the occurrences of \"XS\" with \"L\".\n\nIn the second example Ksenia should replace \"L\" in \"XXXL\" with \"S\".\n\nIn the third example lists are equal.",
        "task_name": "1000_A. Codehorses T-shirts",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#coding=utf-8\nimport sys\nif __name__ == \"__main__\":\n\tn = int(raw_input())\n\tdic = {}\n\tfor i in xrange(n):\n\t\ts = raw_input()\n\t\tif not dic.has_key(s):\n\t\t\tdic[s] = 1\n\t\telse:\n\t\t\tdic[s] += 1\n\tans = 0\n\tfor i in xrange(n):\n\t\ts = raw_input()\n\t\tif dic.has_key(s) and dic[s] > 0:\n\t\t\tdic[s] -= 1\n\t\telse:\n\t\t\tans += 1\n\tprint(ans)\n",
        "correct": true,
        "task_id": "0384",
        "depth": 1
    },
    {
        "description": "During the research on properties of the greatest common divisor (GCD) of a set of numbers, Ildar, a famous mathematician, introduced a brand new concept of the weakened common divisor (WCD) of a list of pairs of integers.\n\nFor a given list of pairs of integers (a_1, b_1), (a_2, b_2), ..., (a_n, b_n) their WCD is arbitrary integer greater than 1, such that it divides at least one element in each pair. WCD may not exist for some lists.\n\nFor example, if the list looks like [(12, 15), (25, 18), (10, 24)], then their WCD can be equal to 2, 3, 5 or 6 (each of these numbers is strictly greater than 1 and divides at least one number in each pair).\n\nYou're currently pursuing your PhD degree under Ildar's mentorship, and that's why this problem was delegated to you. Your task is to calculate WCD efficiently.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 150 000) \u2014 the number of pairs.\n\nEach of the next n lines contains two integer values a_i, b_i (2 \u2264 a_i, b_i \u2264 2 \u22c5 10^9).\n\nOutput\n\nPrint a single integer \u2014 the WCD of the set of pairs. \n\nIf there are multiple possible answers, output any; if there is no answer, print -1.\n\nExamples\n\nInput\n\n3\n17 18\n15 24\n12 15\n\n\nOutput\n\n6\n\nInput\n\n2\n10 16\n7 17\n\n\nOutput\n\n-1\n\n\nInput\n\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n\n\nOutput\n\n5\n\nNote\n\nIn the first example the answer is 6 since it divides 18 from the first pair, 24 from the second and 12 from the third ones. Note that other valid answers will also be accepted.\n\nIn the second example there are no integers greater than 1 satisfying the conditions.\n\nIn the third example one of the possible answers is 5. Note that, for example, 15 is also allowed, but it's not necessary to maximize the output.",
        "task_name": "1025_B. Weakened Common Divisor",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin,stdout\nfrom sets import Set\n\ndef seive(max_num):\n    newp = []\n    max_num += 1 #include the number itself\n    prime = [0]*max_num\n    for i in range(2,max_num):\n        if(prime[i] == 0):\n            for j in range(i*i,max_num,i):\n                prime[j] = i\n    for i in range(2,max_num):\n        if(prime[i] == 0):\n            newp.append(i)\n    return newp\n\n\ndef prime_factorize(spf,x):\n    s = {}\n    for i in spf:\n        if(i <= x):\n            if(x%i == 0):\n                s[i] = 1\n        else:\n            break\n    s[x] = 1\n    return s\n\n\nn = int(stdin.readline())\na = []\nfor i in range(n):\n    x = map(int,stdin.readline().split())\n    a.append(x)\nspf = seive(20000000)\ns1 = prime_factorize(spf,a[0][0])\ns2 = prime_factorize(spf,a[0][1])\n#print s1,s2\nfor i in s1:\n    s2[i] = 1\nflag = 1\nfor i in range(1,n):\n    if(len(s2) == 0):\n        flag = 0\n        break\n    else:\n        kata = {}\n        for j in s2:\n            if(j<=a[i][0] and a[i][0]%j==0):\n                kata[j] = 1\n            if(j<=a[i][1] and a[i][1]%j==0):\n                kata[j] = 1\n        s2 = kata\nif(flag==1 and len(s2)>=1):\n    for i in s2:\n        stdout.write(str(i))\n        break\nelse:\n    stdout.write(str(-1))\n\n\n\n",
        "correct": false,
        "task_id": "0385",
        "depth": 2
    },
    {
        "description": "The only difference between problems C1 and C2 is that all values in input of problem C1 are distinct (this condition may be false for problem C2).\n\nYou are given a sequence a consisting of n integers.\n\nYou are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).\n\nFor example, for the sequence [1, 2, 4, 3, 2] the answer is 4 (you take 1 and the sequence becomes [2, 4, 3, 2], then you take the rightmost element 2 and the sequence becomes [2, 4, 3], then you take 3 and the sequence becomes [2, 4] and then you take 4 and the sequence becomes [2], the obtained increasing sequence is [1, 2, 3, 4]).\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 2 \u22c5 10^5), where a_i is the i-th element of a.\n\nOutput\n\nIn the first line of the output print k \u2014 the maximum number of elements in a strictly increasing sequence you can obtain.\n\nIn the second line print a string s of length k, where the j-th character of this string s_j should be 'L' if you take the leftmost element during the j-th move and 'R' otherwise. If there are multiple answers, you can print any.\n\nExamples\n\nInput\n\n\n5\n1 2 4 3 2\n\n\nOutput\n\n\n4\nLRRR\n\n\nInput\n\n\n7\n1 3 5 6 5 4 2\n\n\nOutput\n\n\n6\nLRLRRR\n\n\nInput\n\n\n3\n2 2 2\n\n\nOutput\n\n\n1\nR\n\n\nInput\n\n\n4\n1 2 4 3\n\n\nOutput\n\n\n4\nLLRR\n\nNote\n\nThe first example is described in the problem statement.",
        "task_name": "1157_C2. Increasing Subsequence (hard version)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Enter your code here. Read input from STDIN. Print output to STDOUT# ===============================================================================================\n# importing some useful libraries.\nfrom __future__ import division, print_function\nfrom fractions import Fraction\nimport sys\nimport os\nfrom io import BytesIO, IOBase\nfrom itertools import *\nimport bisect\nfrom heapq import *\nfrom math import ceil, floor\nfrom copy import *\nfrom collections import deque, defaultdict\nfrom collections import Counter as counter  # Counter(list)  return a dict with {key: count}\nfrom itertools import combinations  # if a = [1,2,3] then print(list(comb(a,2))) -----> [(1, 2), (1, 3), (2, 3)]\nfrom itertools import permutations as permutate\nfrom bisect import bisect_left as bl\nfrom operator import *\n# If the element is already present in the list,\n\n# the left most position where element has to be inserted is returned.\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n\n# If the element is already present in the list,\n# the right most position where element has to be inserted is returned\n\n# ==============================================================================================\n# fast I/O region\n\nBUFSIZE = 8192\nfrom sys import stderr\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n# inp = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# ===============================================================================================\n### START ITERATE RECURSION ###\nfrom types import GeneratorType\n\n\ndef iterative(f, stack=[]):\n    def wrapped_func(*args, **kwargs):\n        if stack: return f(*args, **kwargs)\n        to = f(*args, **kwargs)\n        while True:\n            if type(to) is GeneratorType:\n                stack.append(to)\n                to = next(to)\n                continue\n            stack.pop()\n            if not stack: break\n            to = stack[-1].send(to)\n        return to\n\n    return wrapped_func\n\n\n#### END ITERATE RECURSION ####\n###########################\n# Sorted list\nclass SortedList:\n    def __init__(self, iterable=[], _load=200):\n        \"\"\"Initialize sorted list instance.\"\"\"\n        values = sorted(iterable)\n        self._len = _len = len(values)\n        self._load = _load\n        self._lists = _lists = [values[i:i + _load] for i in range(0, _len, _load)]\n        self._list_lens = [len(_list) for _list in _lists]\n        self._mins = [_list[0] for _list in _lists]\n        self._fen_tree = []\n        self._rebuild = True\n\n    def _fen_build(self):\n        \"\"\"Build a fenwick tree instance.\"\"\"\n        self._fen_tree[:] = self._list_lens\n        _fen_tree = self._fen_tree\n        for i in range(len(_fen_tree)):\n            if i | i + 1 < len(_fen_tree):\n                _fen_tree[i | i + 1] += _fen_tree[i]\n        self._rebuild = False\n\n    def _fen_update(self, index, value):\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\n        if not self._rebuild:\n            _fen_tree = self._fen_tree\n            while index < len(_fen_tree):\n                _fen_tree[index] += value\n                index |= index + 1\n\n    def _fen_query(self, end):\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        x = 0\n        while end:\n            x += _fen_tree[end - 1]\n            end &= end - 1\n        return x\n\n    def _fen_findkth(self, k):\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\n        _list_lens = self._list_lens\n        if k < _list_lens[0]:\n            return 0, k\n        if k >= self._len - _list_lens[-1]:\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        idx = -1\n        for d in reversed(range(len(_fen_tree).bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\n                idx = right_idx\n                k -= _fen_tree[idx]\n        return idx + 1, k\n\n    def _delete(self, pos, idx):\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len -= 1\n        self._fen_update(pos, -1)\n        del _lists[pos][idx]\n        _list_lens[pos] -= 1\n\n        if _list_lens[pos]:\n            _mins[pos] = _lists[pos][0]\n        else:\n            del _lists[pos]\n            del _list_lens[pos]\n            del _mins[pos]\n            self._rebuild = True\n\n    def _loc_left(self, value):\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        lo, pos = -1, len(_lists) - 1\n        while lo + 1 < pos:\n            mi = (lo + pos) >> 1\n            if value <= _mins[mi]:\n                pos = mi\n            else:\n                lo = mi\n\n        if pos and value <= _lists[pos - 1][-1]:\n            pos -= 1\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value <= _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def _loc_right(self, value):\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        pos, hi = 0, len(_lists)\n        while pos + 1 < hi:\n            mi = (pos + hi) >> 1\n            if value < _mins[mi]:\n                hi = mi\n            else:\n                pos = mi\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value < _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def add(self, value):\n        \"\"\"Add `value` to sorted list.\"\"\"\n        _load = self._load\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len += 1\n        if _lists:\n            pos, idx = self._loc_right(value)\n            self._fen_update(pos, 1)\n            _list = _lists[pos]\n            _list.insert(idx, value)\n            _list_lens[pos] += 1\n            _mins[pos] = _list[0]\n            if _load + _load < len(_list):\n                _lists.insert(pos + 1, _list[_load:])\n                _list_lens.insert(pos + 1, len(_list) - _load)\n                _mins.insert(pos + 1, _list[_load])\n                _list_lens[pos] = _load\n                del _list[_load:]\n                self._rebuild = True\n        else:\n            _lists.append([value])\n            _mins.append(value)\n            _list_lens.append(1)\n            self._rebuild = True\n\n    def discard(self, value):\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_right(value)\n            if idx and _lists[pos][idx - 1] == value:\n                self._delete(pos, idx - 1)\n\n    def remove(self, value):\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\n        _len = self._len\n        self.discard(value)\n        if _len == self._len:\n            raise ValueError('{0!r} not in list'.format(value))\n\n    def pop(self, index=-1):\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        value = self._lists[pos][idx]\n        self._delete(pos, idx)\n        return value\n\n    def bisect_left(self, value):\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_left(value)\n        return self._fen_query(pos) + idx\n\n    def bisect_right(self, value):\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_right(value)\n        return self._fen_query(pos) + idx\n\n    def count(self, value):\n        \"\"\"Return number of occurrences of `value` in the sorted list.\"\"\"\n        return self.bisect_right(value) - self.bisect_left(value)\n\n    def __len__(self):\n        \"\"\"Return the size of the sorted list.\"\"\"\n        return self._len\n\n    def __getitem__(self, index):\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        return self._lists[pos][idx]\n\n    def __delitem__(self, index):\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        self._delete(pos, idx)\n\n    def __contains__(self, value):\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_left(value)\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\n        return False\n\n    def __iter__(self):\n        \"\"\"Return an iterator over the sorted list.\"\"\"\n        return (value for _list in self._lists for value in _list)\n\n    def __reversed__(self):\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\n\n    def __repr__(self):\n        \"\"\"Return string representation of sorted list.\"\"\"\n        return 'SortedList({0})'.format(list(self))\n\n\n# ===============================================================================================\n# some shortcuts\n\nmod = 1000000007\n\n\ndef testcase(t):\n    for p in range(t):\n        solve()\n\n\ndef pow(x, y, p):\n    res = 1  # Initialize result\n    x = x % p  # Update x if it is more , than or equal to p\n    if (x == 0):\n        return 0\n    while (y > 0):\n        if ((y & 1) == 1):  # If y is odd, multiply, x with result\n            res = (res * x) % p\n\n        y = y >> 1  # y = y/2\n        x = (x * x) % p\n    return res\n\n\nfrom functools import reduce\n\n\ndef factors(n):\n    return set(reduce(list.__add__,\n                      ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\n\n\ndef gcd(a, b):\n    if a == b: return a\n    while b > 0: a, b = b, a % b\n    return a\n\n\n# discrete binary search\n# minimise:\n# def search():\n#     l = 0\n#     r = 10 ** 15\n#\n#     for i in range(200):\n#         if isvalid(l):\n#             return l\n#         if l == r:\n#             return l\n#         m = (l + r) // 2\n#         if isvalid(m) and not isvalid(m - 1):\n#             return m\n#         if isvalid(m):\n#             r = m + 1\n#         else:\n#             l = m\n#     return m\n\n# maximise:\n# def search():\n#     l = 0\n#     r = 10 ** 15\n#\n#     for i in range(200):\n#         # print(l,r)\n#         if isvalid(r):\n#             return r\n#         if l == r:\n#             return l\n#         m = (l + r) // 2\n#         if isvalid(m) and not isvalid(m + 1):\n#             return m\n#         if isvalid(m):\n#             l = m\n#         else:\n#             r = m - 1\n#     return m\n\n\n##############Find sum of product of subsets of size k in a array\n# ar=[0,1,2,3]\n# k=3\n# n=len(ar)-1\n# dp=[0]*(n+1)\n# dp[0]=1\n# for pos in range(1,n+1):\n#     dp[pos]=0\n#     l=max(1,k+pos-n-1)\n#     for j in range(min(pos,k),l-1,-1):\n#         dp[j]=dp[j]+ar[pos]*dp[j-1]\n# print(dp[k])\n\ndef prefix_sum(ar):  # [1,2,3,4]->[1,3,6,10]\n    return list(accumulate(ar))\n\n\ndef suffix_sum(ar):  # [1,2,3,4]->[10,9,7,4]\n    return list(accumulate(ar[::-1]))[::-1]\n\n\ndef N():\n    return int(inp())\n\n\ndx = [0, 0, 1, -1]\ndy = [1, -1, 0, 0]\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\n# =========================================================================================\nfrom collections import defaultdict\n\n\ndef numberOfSetBits(i):\n    i = i - ((i >> 1) & 0x55555555)\n    i = (i & 0x33333333) + ((i >> 2) & 0x33333333)\n    return (((i + (i >> 4) & 0xF0F0F0F) * 0x1010101) & 0xffffffff) >> 24\n\n\nclass MergeFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n        # self.lista = [[_] for _ in range(n)]\n\n    def find(self, a):\n        to_update = []\n        while a != self.parent[a]:\n            to_update.append(a)\n            a = self.parent[a]\n        for b in to_update:\n            self.parent[b] = a\n        return self.parent[a]\n\n    def merge(self, a, b):\n        a = self.find(a)\n        b = self.find(b)\n        if a == b:\n            return\n        if self.size[a] < self.size[b]:\n            a, b = b, a\n        self.num_sets -= 1\n        self.parent[b] = a\n        self.size[a] += self.size[b]\n        # self.lista[a] += self.lista[b]\n        # self.lista[b] = []\n\n    def set_size(self, a):\n        return self.size[self.find(a)]\n\n    def __len__(self):\n        return self.num_sets\n\n\ndef lcm(a, b):\n    return abs((a // gcd(a, b)) * b)\n\n\n#\n# to find factorial and ncr\n# tot = 200005\n# mod = 10**9 + 7\n# fac = [1, 1]\n# finv = [1, 1]\n# inv = [0, 1]\n#\n# for i in range(2, tot + 1):\n#     fac.append((fac[-1] * i) % mod)\n#     inv.append(mod - (inv[mod % i] * (mod // i) % mod))\n#     finv.append(finv[-1] * inv[-1] % mod)\n\n\ndef comb(n, r):\n    if n < r:\n        return 0\n    else:\n        return fac[n] * (finv[r] * finv[n - r] % mod) % mod\n\n\ndef inp(): return sys.stdin.readline().rstrip(\"\\r\\n\")  # for fast input\n\n\ndef out(var): sys.stdout.write(str(var))  # for fast output, always take string\n\n\ndef lis(): return list(map(int, inp().split()))\n\n\ndef stringlis(): return list(map(str, inp().split()))\n\n\ndef sep(): return map(int, inp().split())\n\n\ndef strsep(): return map(str, inp().split())\n\n\ndef fsep(): return map(float, inp().split())\n\n\ndef nextline(): out(\"\\n\")  # as stdout.write always print sring.\n\n\ndef arr1d(n, v):\n    return [v] * n\n\n\ndef arr2d(n, m, v):\n    return [[v] * m for _ in range(n)]\n\n\ndef arr3d(n, m, p, v):\n    return [[[v] * p for _ in range(m)] for i in range(n)]\n\ndef ceil(a,b):\n    return (a+b-1)//b\n\n#co-ordinate compression\n#ma={s:idx for idx,s in enumerate(sorted(set(l+r)))}\n\ndef solve():\n    n=N()\n    ar=deque(lis())\n    ans=[]\n    prev=-1\n    while(1):\n\n        if not ar:\n            break\n        lef=ar[0]\n        right=ar[-1]\n        poss=[]\n        if lef>prev:\n            poss.append(lef)\n        if right>prev:\n            poss.append(right)\n        if not poss:\n            break\n        if len(poss)==1:\n            if lef>right:\n                ans.append(\"L\")\n                prev=lef\n                ar.popleft()\n            if lef<right:\n                ans.append(\"R\")\n                prev=right\n                ar.pop()\n        if len(poss)==2:\n            if lef<right:\n                ans.append(\"L\")\n                prev=lef\n                ar.popleft()\n            if lef>right:\n                ans.append(\"R\")\n                prev=right\n                ar.pop()\n            if lef==right:\n                templef=[]\n                tempright=[]\n                prevlef=prev\n                for i in range(0,len(ar)):\n                    if ar[i]>prevlef:\n                        templef.append(\"L\")\n                        prevlef=ar[i]\n                    else:\n                        break\n                prevright = prev\n                for i in range( len(ar)-1,-1,-1):\n                    if ar[i] > prevright:\n                        tempright.append(\"R\")\n                        prevright = ar[i]\n                    else:\n                        break\n                if len(templef)>=len(tempright):\n                    ans+=templef\n                    break\n                else:\n                    ans+=tempright\n                    break\n    print(len(ans))\n    print(\"\".join(ans))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsolve()\n#testcase(int(inp()))\n",
        "correct": true,
        "task_id": "0387",
        "depth": 2
    },
    {
        "description": "One common way of digitalizing sound is to record sound intensity at particular time moments. For each time moment intensity is recorded as a non-negative integer. Thus we can represent a sound file as an array of n non-negative integers.\n\nIf there are exactly K distinct values in the array, then we need k = \u2308 log_{2} K \u2309 bits to store each value. It then takes nk bits to store the whole file.\n\nTo reduce the memory consumption we need to apply some compression. One common way is to reduce the number of possible intensity values. We choose two integers l \u2264 r, and after that all intensity values are changed in the following way: if the intensity value is within the range [l;r], we don't change it. If it is less than l, we change it to l; if it is greater than r, we change it to r. You can see that we lose some low and some high intensities.\n\nYour task is to apply this compression in such a way that the file fits onto a disk of size I bytes, and the number of changed elements in the array is minimal possible.\n\nWe remind you that 1 byte contains 8 bits.\n\nk = \u2308 log_{2} K \u2309 is the smallest integer such that K \u2264 2^{k}. In particular, if K = 1, then k = 0.\n\nInput\n\nThe first line contains two integers n and I (1 \u2264 n \u2264 4 \u22c5 10^{5}, 1 \u2264 I \u2264 10^{8}) \u2014 the length of the array and the size of the disk in bytes, respectively.\n\nThe next line contains n integers a_{i} (0 \u2264 a_{i} \u2264 10^{9}) \u2014 the array denoting the sound file.\n\nOutput\n\nPrint a single integer \u2014 the minimal possible number of changed elements.\n\nExamples\n\nInput\n\n\n6 1\n2 1 2 3 4 3\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n6 2\n2 1 2 3 4 3\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n6 1\n1 1 2 2 3 3\n\n\nOutput\n\n\n2\n\nNote\n\nIn the first example we can choose l=2, r=3. The array becomes 2 2 2 3 3 3, the number of distinct elements is K=2, and the sound file fits onto the disk. Only two values are changed.\n\nIn the second example the disk is larger, so the initial file fits it and no changes are required.\n\nIn the third example we have to change both 1s or both 3s.",
        "task_name": "1198_A. MP3",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom collections import Counter\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    n, i = map(int, input().split())\n    ca = sorted(Counter(map(int, input().split())).items(), key=lambda x: x[0])\n\n    md = int(2 ** ((8 * i) / n))\n\n    pref = [0]\n    for _, j in ca:\n        pref.append(pref[-1] + j)\n\n    s = n\n    for i in range(len(pref) - md):\n        u = pref[i + md] - pref[i]\n        s = min(s, n - u)\n\n    if len(pref) - md <= 0:\n        s = 0\n\n    print(s)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": false,
        "task_id": "0388",
        "depth": 1
    },
    {
        "description": "Ivan plays an old action game called Heretic. He's stuck on one of the final levels of this game, so he needs some help with killing the monsters.\n\nThe main part of the level is a large corridor (so large and narrow that it can be represented as an infinite coordinate line). The corridor is divided into two parts; let's assume that the point x = 0 is where these parts meet.\n\nThe right part of the corridor is filled with n monsters \u2014 for each monster, its initial coordinate x_i is given (and since all monsters are in the right part, every x_i is positive).\n\nThe left part of the corridor is filled with crusher traps. If some monster enters the left part of the corridor or the origin (so, its current coordinate becomes less than or equal to 0), it gets instantly killed by a trap.\n\nThe main weapon Ivan uses to kill the monsters is the Phoenix Rod. It can launch a missile that explodes upon impact, obliterating every monster caught in the explosion and throwing all other monsters away from the epicenter. Formally, suppose that Ivan launches a missile so that it explodes in the point c. Then every monster is either killed by explosion or pushed away. Let some monster's current coordinate be y, then:\n\n  * if c = y, then the monster is killed; \n  * if y < c, then the monster is pushed r units to the left, so its current coordinate becomes y - r; \n  * if y > c, then the monster is pushed r units to the right, so its current coordinate becomes y + r. \n\n\n\nIvan is going to kill the monsters as follows: choose some integer point d and launch a missile into that point, then wait until it explodes and all the monsters which are pushed to the left part of the corridor are killed by crusher traps, then, if at least one monster is still alive, choose another integer point (probably the one that was already used) and launch a missile there, and so on.\n\nWhat is the minimum number of missiles Ivan has to launch in order to kill all of the monsters? You may assume that every time Ivan fires the Phoenix Rod, he chooses the impact point optimally.\n\nYou have to answer q independent queries.\n\nInput\n\nThe first line contains one integer q (1 \u2264 q \u2264 10^5) \u2014 the number of queries.\n\nThe first line of each query contains two integers n and r (1 \u2264 n, r \u2264 10^5) \u2014 the number of enemies and the distance that the enemies are thrown away from the epicenter of the explosion.\n\nThe second line of each query contains n integers x_i (1 \u2264 x_i \u2264 10^5) \u2014 the initial positions of the monsters.\n\nIt is guaranteed that sum of all n over all queries does not exceed 10^5.\n\nOutput\n\nFor each query print one integer \u2014 the minimum number of shots from the Phoenix Rod required to kill all monsters.\n\nExample\n\nInput\n\n\n2\n3 2\n1 3 5\n4 1\n5 2 3 5\n\n\nOutput\n\n\n2\n2\n\nNote\n\nIn the first test case, Ivan acts as follows: \n\n  * choose the point 3, the first monster dies from a crusher trap at the point -1, the second monster dies from the explosion, the third monster is pushed to the point 7; \n  * choose the point 7, the third monster dies from the explosion. \n\n\n\nIn the second test case, Ivan acts as follows: \n\n  * choose the point 5, the first and fourth monsters die from the explosion, the second monster is pushed to the point 1, the third monster is pushed to the point 2; \n  * choose the point 2, the first monster dies from a crusher trap at the point 0, the second monster dies from the explosion. ",
        "task_name": "1238_B. Kill 'Em All",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "for i in range(int(raw_input())):\n    n, r = map(int, raw_input().split())\n    xs = map(int, raw_input().split())\n    result = 1\n    push = r\n    xs = sorted(set(xs))\n\n    j = len(xs) - 2\n    while xs[j] - push > 0 and j >= 0:\n        result += 1\n        push += r\n        j -= 1 \n     \n    print(result)",
        "correct": true,
        "task_id": "0389",
        "depth": 2
    },
    {
        "description": "There is a river of width n. The left bank of the river is cell 0 and the right bank is cell n + 1 (more formally, the river can be represented as a sequence of n + 2 cells numbered from 0 to n + 1). There are also m wooden platforms on a river, the i-th platform has length c_i (so the i-th platform takes c_i consecutive cells of the river). It is guaranteed that the sum of lengths of platforms does not exceed n.\n\nYou are standing at 0 and want to reach n+1 somehow. If you are standing at the position x, you can jump to any position in the range [x + 1; x + d]. However you don't really like the water so you can jump only to such cells that belong to some wooden platform. For example, if d=1, you can jump only to the next position (if it belongs to the wooden platform). You can assume that cells 0 and n+1 belong to wooden platforms.\n\nYou want to know if it is possible to reach n+1 from 0 if you can move any platform to the left or to the right arbitrary number of times (possibly, zero) as long as they do not intersect each other (but two platforms can touch each other). It also means that you cannot change the relative order of platforms.\n\nNote that you should move platforms until you start jumping (in other words, you first move the platforms and then start jumping).\n\nFor example, if n=7, m=3, d=2 and c = [1, 2, 1], then one of the ways to reach 8 from 0 is follow:\n\n<image> The first example: n=7.\n\nInput\n\nThe first line of the input contains three integers n, m and d (1 \u2264 n, m, d \u2264 1000, m \u2264 n) \u2014 the width of the river, the number of platforms and the maximum distance of your jump, correspondingly.\n\nThe second line of the input contains m integers c_1, c_2, ..., c_m (1 \u2264 c_i \u2264 n, \u2211_{i=1}^{m} c_i \u2264 n), where c_i is the length of the i-th platform.\n\nOutput\n\nIf it is impossible to reach n+1 from 0, print NO in the first line. Otherwise, print YES in the first line and the array a of length n in the second line \u2014 the sequence of river cells (excluding cell 0 and cell n + 1).\n\nIf the cell i does not belong to any platform, a_i should be 0. Otherwise, it should be equal to the index of the platform (1-indexed, platforms are numbered from 1 to m in order of input) to which the cell i belongs.\n\nNote that all a_i equal to 1 should form a contiguous subsegment of the array a of length c_1, all a_i equal to 2 should form a contiguous subsegment of the array a of length c_2, ..., all a_i equal to m should form a contiguous subsegment of the array a of length c_m. The leftmost position of 2 in a should be greater than the rightmost position of 1, the leftmost position of 3 in a should be greater than the rightmost position of 2, ..., the leftmost position of m in a should be greater than the rightmost position of m-1.\n\nSee example outputs for better understanding.\n\nExamples\n\nInput\n\n\n7 3 2\n1 2 1\n\n\nOutput\n\n\nYES\n0 1 0 2 2 0 3 \n\n\nInput\n\n\n10 1 11\n1\n\n\nOutput\n\n\nYES\n0 0 0 0 0 0 0 0 0 1 \n\n\nInput\n\n\n10 1 5\n2\n\n\nOutput\n\n\nYES\n0 0 0 0 1 1 0 0 0 0 \n\nNote\n\nConsider the first example: the answer is [0, 1, 0, 2, 2, 0, 3]. The sequence of jumps you perform is 0 \u2192 2 \u2192 4 \u2192 5 \u2192 7 \u2192 8.\n\nConsider the second example: it does not matter how to place the platform because you always can jump from 0 to 11.\n\nConsider the third example: the answer is [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]. The sequence of jumps you perform is 0 \u2192 5 \u2192 6 \u2192 11.",
        "task_name": "1256_C. Platforms Jumping",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nn, m, d = rints()\nc, ans = rints(), [0] * n\npos, su = [], 0\n\nfor i in range(m - 1, -1, -1):\n    pos.append(n + 1 - su - c[i])\n    su += c[i]\n\npos.append(0)\npos.reverse()\n\nfor i in range(m):\n    if pos[i + 1] - pos[i] <= d:\n        for j in range(pos[i + 1], pos[i + 1] + c[i]):\n            ans[j - 1] = i + 1\n        continue\n\n    pos[i + 1] = min(pos[i] + d, n)\n\n    for j in range(pos[i + 1], pos[i + 1] + c[i]):\n        ans[j - 1] = i + 1\n\n    pos[i + 1] += c[i] - 1\n\n# print(pos)\nif (n + 1) - (pos[-1] + c[-1] - 1) > d:\n    print('NO')\nelse:\n    print('YES')\n    print(' '.join(map(str, ans)))\n",
        "correct": false,
        "task_id": "0390",
        "depth": 2
    },
    {
        "description": "Bob is about to take a hot bath. \n\nThere are two taps to fill the bath: a hot water tap and a cold water tap. The cold water's temperature is t1, and the hot water's temperature is t2. The cold water tap can transmit any integer number of water units per second from 0 to x1, inclusive. Similarly, the hot water tap can transmit from 0 to x2 water units per second.\n\nIf y1 water units per second flow through the first tap and y2 water units per second flow through the second tap, then the resulting bath water temperature will be:\n\n<image>\n\nBob wants to open both taps so that the bath water temperature was not less than t0. However, the temperature should be as close as possible to this value. If there are several optimal variants, Bob chooses the one that lets fill the bath in the quickest way possible.\n\nDetermine how much each tap should be opened so that Bob was pleased with the result in the end.\n\nInput\n\nYou are given five integers t1, t2, x1, x2 and t0 (1 \u2264 t1 \u2264 t0 \u2264 t2 \u2264 106, 1 \u2264 x1, x2 \u2264 106).\n\nOutput\n\nPrint two space-separated integers y1 and y2 (0 \u2264 y1 \u2264 x1, 0 \u2264 y2 \u2264 x2).\n\nExamples\n\nInput\n\n10 70 100 100 25\n\n\nOutput\n\n99 33\n\nInput\n\n300 500 1000 1000 300\n\n\nOutput\n\n1000 0\n\nInput\n\n143 456 110 117 273\n\n\nOutput\n\n76 54\n\nNote\n\nIn the second sample the hot water tap shouldn't be opened, but the cold water tap should be opened at full capacity in order to fill the bath in the quickest way possible.",
        "task_name": "127_C. Hot Bath",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import fractions\nimport sys\nimport math\n\ndef a( t1, t2, y1max, y2max, t0):\n  dt1 = t0 - t1\n  dt2 = t2 - t0\n\n  if   dt1==0 and dt2==0: return y1max,y2max\n  elif dt1==0: return y1max,0\n  elif dt2==0: return 0,y2max\n\n  calc1max = (y2max * dt2) / dt1\n  if calc1max<y1max: y1max = calc1max\n\n  if y1max < 1: return 0,y2max\n\n  calc2max = (y1max * dt1 + dt2 - 1) / dt2\n  if calc2max<y2max: y2max = calc2max\n\n  if y1max*dt1 == y2max*dt2: return y1max,y2max\n\n  if y1max==0: return 0,y2max\n\n  if dt1<=y2max and dt2<=y1max:\n    n = min( y1max/dt2, y2max/dt1)\n    y1,y2 = n*dt2, n*dt1\n    g = fractions.gcd( y1,y2)\n    fr1,fr2 = y1/g, y2/g\n    n = min( (y1max-y1)/fr1, (y2max-y2)/fr2)\n    return y1+n*fr1, y2+n*fr2\n\n  y1,y2 = y1max,y2max\n\n  if y1<y2: d1,d2 = 1,0\n  else    : d1,d2 = 0,1\n\n  ###sys.stderr.write( str( dict(y1max=y1,y2max=y2,d1=d1,d2=d2,err=(y1*t1+y2*t2)/float(y1+y2)-t0))+'\\n' )\n\n  y1out,y2out = y1,y2\n  errMin = (y1*t1+y2*t2)/float(y1+y2) - t0\n  while y1>1 and y2>1:\n    y1 -= d1\n    y2 -= d2\n    rem = y2*dt2 - y1*dt1\n    if rem==0: return y1,y2\n    if dt1 and rem>=dt2: y2 -= (rem/dt2)\n    elif dt2 and rem<0: y1 -= (dt1-(rem+1))/dt1\n    err = (y1*t1+y2*t2)/float(y1+y2) - t0\n    ###print( (y1,y2,rem,err,errMin,) )\n    if err<errMin: errMin,y1out,y2out = err,y1,y2\n\n  return y1out,y2out\n\n\nif __name__==\"__main__\":\n  toks = sys.stdin.readline().split()\n  t1 = int(toks[0])\n  t2 = int(toks[1])\n  y1max = int(toks[2])\n  y2max = int(toks[3])\n  t0 = int(toks[4])\n\n  print( \"%d %d\" % a(t1,t2,y1max,y2max,t0) )\n",
        "correct": true,
        "task_id": "0391",
        "depth": 1
    },
    {
        "description": "One cold winter evening Alice and her older brother Bob was sitting at home near the fireplace and giving each other interesting problems to solve. When it was Alice's turn, she told the number n to Bob and said:\n\n\u2014Shuffle the digits in this number in order to obtain the smallest possible number without leading zeroes.\n\n\u2014No problem! \u2014 said Bob and immediately gave her an answer.\n\nAlice said a random number, so she doesn't know whether Bob's answer is correct. Help her to find this out, because impatient brother is waiting for the verdict.\n\nInput\n\nThe first line contains one integer n (0 \u2264 n \u2264 109) without leading zeroes. The second lines contains one integer m (0 \u2264 m \u2264 109) \u2014 Bob's answer, possibly with leading zeroes.\n\nOutput\n\nPrint OK if Bob's answer is correct and WRONG_ANSWER otherwise.\n\nExamples\n\nInput\n\n3310\n1033\n\n\nOutput\n\nOK\n\n\nInput\n\n4\n5\n\n\nOutput\n\nWRONG_ANSWER",
        "task_name": "12_B. Correct Solution?",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "I=raw_input\nn=I()\nm=I()\nn=sorted(list(n))\nfor i in range(len(n)):\n    if n[i] != '0':\n        break\nif n[i] != '0':\n    n[0],n[i]=n[i],n[0]\nprint ['OK', 'WRONG_ANSWER'][n != list(m)]",
        "correct": true,
        "task_id": "0392",
        "depth": 1
    },
    {
        "description": "You are given two integers a and b, and q queries. The i-th query consists of two numbers l_i and r_i, and the answer to it is the number of integers x such that l_i \u2264 x \u2264 r_i, and ((x mod a) mod b) \u2260 ((x mod b) mod a). Calculate the answer for each query.\n\nRecall that y mod z is the remainder of the division of y by z. For example, 5 mod 3 = 2, 7 mod 8 = 7, 9 mod 4 = 1, 9 mod 9 = 0.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then the test cases follow.\n\nThe first line of each test case contains three integers a, b and q (1 \u2264 a, b \u2264 200; 1 \u2264 q \u2264 500).\n\nThen q lines follow, each containing two integers l_i and r_i (1 \u2264 l_i \u2264 r_i \u2264 10^{18}) for the corresponding query.\n\nOutput\n\nFor each test case, print q integers \u2014 the answers to the queries of this test case in the order they appear.\n\nExample\n\nInput\n\n\n2\n4 6 5\n1 1\n1 3\n1 5\n1 7\n1 9\n7 10 2\n7 8\n100 200\n\n\nOutput\n\n\n0 0 0 2 4 \n0 91 ",
        "task_name": "1342_C. Yet Another Counting Problem",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"\n// Author : snape_here - Susanta Mukherjee\n     \n \"\"\"\n \nfrom __future__ import division, print_function\n \nimport os,sys\nfrom io import BytesIO, IOBase\n \nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n \n \ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().split())\ndef li(): return list(mi())\n \n \ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n \ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef lcm(a , b):\n    return (a*b)//gcd(a,b)\n\nmod=1000000007\n\nimport math\n\nimport bisect\n\nabc=\"abcdefghijklmnopqrstuvwxyz\"\n\ndef main():\n\n    for _ in range(ii()):\n        a,b,qu=mi()\n        x=lcm(a,b)\n        d=max(a,b)\n        for i in range(qu):\n            l,r=mi()\n            y=l//x \n            z=r//x\n            c=(z-y)*d\n            y*=x \n            z*=x\n            p=l%x\n            f=g=1\n            if p>=0 and p<=d-1:\n                p+=(d-1-p)\n                f=0\n            q=r%x \n            if q>=0 and q<=d-1:\n                q+=(d-1-q)\n                g=0\n            ans=0\n            ans+=(z-y-p+q)\n            ans-=c \n            if f:\n                ans+=1\n            print(ans,end=\" \")\n        print()\n\n# region fastio\n\n \nBUFSIZE = 8192\n \n \nclass FastIO(IOBase):\n    newlines = 0\n \n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n \n \nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n \ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n \n# endregion\n \n \nif __name__ == \"__main__\":\n    #read()\n    main()",
        "correct": true,
        "task_id": "0393",
        "depth": 2
    },
    {
        "description": "Given an array a of length n, find another array, b, of length n such that:\n\n  * for each i (1 \u2264 i \u2264 n) MEX(\\\\{b_1, b_2, \u2026, b_i\\})=a_i. \n\n\n\nThe MEX of a set of integers is the smallest non-negative integer that doesn't belong to this set.\n\nIf such array doesn't exist, determine this.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the array a.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 i) \u2014 the elements of the array a. It's guaranteed that a_i \u2264 a_{i+1} for 1\u2264 i < n.\n\nOutput\n\nIf there's no such array, print a single line containing -1.\n\nOtherwise, print a single line containing n integers b_1, b_2, \u2026, b_n (0 \u2264 b_i \u2264 10^6)\n\nIf there are multiple answers, print any.\n\nExamples\n\nInput\n\n\n3\n1 2 3\n\n\nOutput\n\n\n0 1 2 \n\nInput\n\n\n4\n0 0 0 2\n\n\nOutput\n\n\n1 3 4 0 \n\nInput\n\n\n3\n1 1 3\n\n\nOutput\n\n\n0 2 1 \n\nNote\n\nIn the second test case, other answers like [1,1,1,0], for example, are valid.",
        "task_name": "1364_C. Ehab and Prefix MEXs",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport math\n \nn = int(sys.stdin.readline().strip())\nl = list(map(int, sys.stdin.readline().strip().split(' ')))\n\npossible = True\nfor i,li in enumerate(l):\n\tif li > i+1:\n\t\tpossible = False\n\nif not possible:\n\tprint(-1)\nelse:\n\tinf = 10**6\n\tres = [inf for i in range(n)]\n\n\ttaken = set(l)\n\n\tfor i in range(n-1):\n\t\tif l[i] != l[i+1]:\n\t\t\tres[i+1] = l[i]\n\n\tcurr = 0\n\twhile curr in taken:\n\t\tcurr += 1\n\tfor i in range(n):\n\t\tif res[i] == inf:\n\t\t\tres[i] = curr\n\t\t\tcurr += 1\n\t\t\twhile curr in taken:\n\t\t\t\tcurr += 1\n\n\tprint(' '.join([str(x) for x in res]))\n\n",
        "correct": true,
        "task_id": "0394",
        "depth": 2
    },
    {
        "description": "Given a set of integers (it can contain equal elements).\n\nYou have to split it into two subsets A and B (both of them can contain equal elements or be empty). You have to maximize the value of mex(A)+mex(B).\n\nHere mex of a set denotes the smallest non-negative integer that doesn't exist in the set. For example: \n\n  * mex(\\{1,4,0,2,2,1\\})=3 \n  * mex(\\{3,3,2,1,3,0,0\\})=4 \n  * mex(\u2205)=0 (mex for empty set) \n\n\n\nThe set is splitted into two subsets A and B if for any integer number x the number of occurrences of x into this set is equal to the sum of the number of occurrences of x into A and the number of occurrences of x into B.\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1\u2264 t\u2264 100) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer n (1\u2264 n\u2264 100) \u2014 the size of the set.\n\nThe second line of each testcase contains n integers a_1,a_2,... a_n (0\u2264 a_i\u2264 100) \u2014 the numbers in the set.\n\nOutput\n\nFor each test case, print the maximum value of mex(A)+mex(B).\n\nExample\n\nInput\n\n\n4\n6\n0 2 1 5 0 1\n3\n0 1 2\n4\n0 2 0 1\n6\n1 2 3 4 5 6\n\n\nOutput\n\n\n5\n3\n4\n0\n\nNote\n\nIn the first test case, A=\\left\\{0,1,2\\right\\},B=\\left\\{0,1,5\\right\\} is a possible choice.\n\nIn the second test case, A=\\left\\{0,1,2\\right\\},B=\u2205 is a possible choice.\n\nIn the third test case, A=\\left\\{0,1,2\\right\\},B=\\left\\{0\\right\\} is a possible choice.\n\nIn the fourth test case, A=\\left\\{1,3,5\\right\\},B=\\left\\{2,4,6\\right\\} is a possible choice.",
        "task_name": "1406_A. Subset Mex",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#   Author: yumtam\n#   Created at: 2020-09-12 22:33\n\nfrom __future__ import division, print_function\n_interactive = False\n\ndef main():\n    from collections import Counter\n    for _ in range(int(input())):\n        n = int(input())\n        ar = input_as_list()\n\n        ctr = Counter(ar)\n        i = 0\n        ans = 0\n        while ctr[i] >= 2:\n            i += 1\n            ans += 2\n        while ctr[i] >= 1:\n            i += 1\n            ans += 1\n\n        print(ans)\n\n\n# Constants\nINF = float('inf')\nMOD = 10**9+7\n\n# Python3 equivalent names\nimport os, sys, itertools\nif sys.version_info[0] < 3:\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\n# print-flush in interactive problems\nif _interactive:\n    flush = sys.stdout.flush\n    def printf(*args, **kwargs):\n        print(*args, **kwargs)\n        flush()\n\n# Debug print, only works on local machine\nLOCAL = \"LOCAL_\" in os.environ\ndebug_print = (print) if LOCAL else (lambda *x, **y: None)\n\n# Fast IO\nif (not LOCAL) and (not _interactive):\n    from io import BytesIO\n    from atexit import register\n    sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\n    sys.stdout = BytesIO()\n    register(lambda: os.write(1, sys.stdout.getvalue()))\n    input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# Some utility functions(Input, N-dimensional lists, ...)\ndef input_as_list():\n    return [int(x) for x in input().split()]\n\ndef input_with_offset(o):\n    return [int(x)+o for x in input().split()]\n\ndef input_as_matrix(n, m):\n    return [input_as_list() for _ in range(n)]\n\ndef array_of(f, *dim):\n    return [array_of(f, *dim[1:]) for _ in range(dim[0])] if dim else f()\n\n# Start of external code templates...\n# End of external code templates.\n\nmain()\n",
        "correct": true,
        "task_id": "0395",
        "depth": 2
    },
    {
        "description": "You have n distinct points (x_1, y_1),\u2026,(x_n,y_n) on the plane and a non-negative integer parameter k. Each point is a microscopic steel ball and k is the attract power of a ball when it's charged. The attract power is the same for all balls.\n\nIn one operation, you can select a ball i to charge it. Once charged, all balls with Manhattan distance at most k from ball i move to the position of ball i. Many balls may have the same coordinate after an operation.\n\nMore formally, for all balls j such that |x_i - x_j| + |y_i - y_j| \u2264 k, we assign x_j:=x_i and y_j:=y_i.\n\n<image> An example of an operation. After charging the ball in the center, two other balls move to its position. On the right side, the red dot in the center is the common position of those balls. \n\nYour task is to find the minimum number of operations to move all balls to the same position, or report that this is impossible.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe first line of each test case contains two integers n, k (2 \u2264 n \u2264 100, 0 \u2264 k \u2264 10^6) \u2014 the number of balls and the attract power of all balls, respectively.\n\nThe following n lines describe the balls' coordinates. The i-th of these lines contains two integers x_i, y_i (0 \u2264 x_i, y_i \u2264 10^5) \u2014 the coordinates of the i-th ball.\n\nIt is guaranteed that all points are distinct.\n\nOutput\n\nFor each test case print a single integer \u2014 the minimum number of operations to move all balls to the same position, or -1 if it is impossible.\n\nExample\n\nInput\n\n\n3\n3 2\n0 0\n3 3\n1 1\n3 3\n6 7\n8 8\n6 9\n4 1\n0 0\n0 1\n0 2\n0 3\n\n\nOutput\n\n\n-1\n1\n-1\n\nNote\n\nIn the first test case, there are three balls at (0, 0), (3, 3), and (1, 1) and the attract power is 2. It is possible to move two balls together with one operation, but not all three balls together with any number of operations.\n\nIn the second test case, there are three balls at (6, 7), (8, 8), and (6, 9) and the attract power is 3. If we charge any ball, the other two will move to the same position, so we only require one operation.\n\nIn the third test case, there are four balls at (0, 0), (0, 1), (0, 2), and (0, 3), and the attract power is 1. We can show that it is impossible to move all balls to the same position with a sequence of operations.",
        "task_name": "1450_B. Balls of Steel",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env pypy\nfrom __future__ import division, print_function\nfrom collections import defaultdict, Counter, deque\nfrom future_builtins import ascii, filter, hex, map, oct, zip\nfrom itertools import imap as map, izip as zip, permutations, combinations, combinations_with_replacement\nfrom __builtin__ import xrange as range\nfrom math import ceil, factorial, log, sqrt\nfrom _continuation import continulet\nfrom cStringIO import StringIO\nfrom io import IOBase\nimport __pypy__\nfrom bisect import bisect, insort, bisect_left, bisect_right\nfrom fractions import Fraction\nimport heapq\nfrom functools import reduce\nimport string\nimport sys\nimport os\nimport re\ninf = float('inf')\nmod = int(1e9) + 7\nmod_ = 998244353\n\n\ndef dist(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\ndef solve():\n    n, k = map(int, input().split())\n    arr = [tuple(map(int, input().split())) for i in range(n)]\n    max_dist = 0\n    for i in range(n):\n        for j in range(n):\n            max_dist = max(max_dist, dist(arr[i], arr[j]))\n    if max_dist <= k:\n        print(1)\n    else:\n        print(-1)\n\n\ndef main():\n    for _ in range(int(input())):\n        solve()\n\nBUFSIZE = 8192\nclass FastI(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = StringIO()\n        self.newlines = 0\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(\"\\n\") + (not b)\n            ptr = self._buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(\n                b), self._buffer.seek(ptr)\n        self.newlines -= 1\n        return self._buffer.readline()\nclass FastO(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = __pypy__.builders.StringBuilder()\n        self.write = lambda s: self._buffer.append(s)\n\n    def flush(self):\n        os.write(self._fd, self._buffer.build())\n        self._buffer = __pypy__.builders.StringBuilder()\ndef print(*args, **kwargs):\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\nsys.stdin, sys.stdout = FastI(sys.stdin), FastO(sys.stdout)\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\nif __name__ == \"__main__\":\n    def bootstrap(cont):\n        call, arg = cont.switch()\n        while True:\n            call, arg = cont.switch(to=continulet(\n                lambda _, f, args: f(*args), call, arg))\n    cont = continulet(bootstrap)\n    cont.switch()\n    main()",
        "correct": false,
        "task_id": "0397",
        "depth": 2
    },
    {
        "description": "Having stayed home alone, Petya decided to watch forbidden films on the Net in secret. \"What ungentlemanly behavior!\" \u2014 you can say that, of course, but don't be too harsh on the kid. In his country films about the Martians and other extraterrestrial civilizations are forbidden. It was very unfair to Petya as he adored adventure stories that featured lasers and robots. \n\nToday Petya is watching a shocking blockbuster about the Martians called \"R2:D2\". What can \"R2:D2\" possibly mean? It might be the Martian time represented in the Martian numeral system. Petya knows that time on Mars is counted just like on the Earth (that is, there are 24 hours and each hour has 60 minutes). The time is written as \"a:b\", where the string a stands for the number of hours (from 0 to 23 inclusive), and string b stands for the number of minutes (from 0 to 59 inclusive). The only thing Petya doesn't know is in what numeral system the Martian time is written.\n\nYour task is to print the radixes of all numeral system which can contain the time \"a:b\".\n\nInput\n\nThe first line contains a single string as \"a:b\" (without the quotes). There a is a non-empty string, consisting of numbers and uppercase Latin letters. String a shows the number of hours. String b is a non-empty string that consists of numbers and uppercase Latin letters. String b shows the number of minutes. The lengths of strings a and b are from 1 to 5 characters, inclusive. Please note that strings a and b can have leading zeroes that do not influence the result in any way (for example, string \"008:1\" in decimal notation denotes correctly written time).\n\nWe consider characters 0, 1, ..., 9 as denoting the corresponding digits of the number's representation in some numeral system, and characters A, B, ..., Z correspond to numbers 10, 11, ..., 35.\n\nOutput\n\nPrint the radixes of the numeral systems that can represent the time \"a:b\" in the increasing order. Separate the numbers with spaces or line breaks. If there is no numeral system that can represent time \"a:b\", print the single integer 0. If there are infinitely many numeral systems that can represent the time \"a:b\", print the single integer -1.\n\nNote that on Mars any positional numeral systems with positive radix strictly larger than one are possible.\n\nExamples\n\nInput\n\n11:20\n\n\nOutput\n\n3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\n\nInput\n\n2A:13\n\n\nOutput\n\n0\n\n\nInput\n\n000B:00001\n\n\nOutput\n\n-1\n\nNote\n\nLet's consider the first sample. String \"11:20\" can be perceived, for example, as time 4:6, represented in the ternary numeral system or as time 17:32 in hexadecimal system. \n\nLet's consider the second sample test. String \"2A:13\" can't be perceived as correct time in any notation. For example, let's take the base-11 numeral notation. There the given string represents time 32:14 that isn't a correct time.\n\nLet's consider the third sample. String \"000B:00001\" can be perceived as a correct time in the infinite number of numeral systems. If you need an example, you can take any numeral system with radix no less than 12.",
        "task_name": "149_B. Martian Clock",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import os\nimport sys\nimport traceback\n\ndoprint='DOPRINT' in os.environ\n\nord9 = ord('9')\nord0 = ord('0')\nordA = ord('A')\ndef conv(d):\n  ordd = ord(d)\n  if ordd <= ord9: return ordd - ord0\n  return 10 + ordd - ordA\n\ndef processds( ds):\n  rtn = map( conv, list(ds))\n  while rtn and not rtn[0]:\n    if doprint: print( rtn )\n    rtn.pop(0)\n  return rtn\n\ndef solveone( ds, ub):\n  if doprint: print( (ds,ub) )\n  if len(ds) == 0: return [-1, -1]\n  maxds = max(ds)\n  if maxds > ub: return [0,0]\n  if len(ds) == 1: return [-1,-1]\n  lo = maxds + 1\n  summ = 0\n  for d in ds: summ = summ * lo + d\n  if doprint: print( ('A',lo,summ,ub,summ>ub) )\n  if summ>ub: return [0,0]\n  hi = lo\n  while True:\n    hi += 1\n    summ = 0\n    for d in ds: summ = summ * hi + d\n    if doprint: print( ('B',hi,summ,ub,summ>ub) )\n    if summ>ub: return [lo,hi-1]\n\ndef solve():\n  hs,ms = map( processds, sys.stdin.readline().strip('\\n\\r ').split(':') )\n\n  if doprint: print( (hs,ms) )\n\n  hminmax = solveone( hs, 23 )\n  if hminmax[0]==0: return [0]\n  mminmax = solveone( ms, 59 )\n  if mminmax[0]==0: return [0]\n\n  if hminmax[0]==-1 and mminmax[0]==-1: return [-1]\n  if hminmax[0]==-1: return range(mminmax[0],mminmax[1]+1)\n  if mminmax[0]==-1: return range(hminmax[0],hminmax[1]+1)\n  if hminmax[0] > mminmax[1]: return [0]\n  if mminmax[0] > hminmax[1]: return [0]\n  return range(max([hminmax[0],mminmax[0]]), min([hminmax[1],mminmax[1]])+1 )\n\nif __name__==\"__main__\":\n  pfx=''\n  for i in solve():\n    sys.stdout.write( pfx+str(i) )\n    pfx=' '\n  sys.stdout.write( '\\n' )\n",
        "correct": false,
        "task_id": "0398",
        "depth": 2
    },
    {
        "description": "<image>\n\nWhile trading on his favorite exchange trader William realized that he found a vulnerability. Using this vulnerability he could change the values of certain internal variables to his advantage. To play around he decided to change the values of all internal variables from a_1, a_2, \u2026, a_n to -a_1, -a_2, \u2026, -a_n. For some unknown reason, the number of service variables is always an even number.\n\nWilliam understands that with his every action he attracts more and more attention from the exchange's security team, so the number of his actions must not exceed 5 000 and after every operation no variable can have an absolute value greater than 10^{18}. William can perform actions of two types for two chosen variables with indices i and j, where i < j:\n\n  1. Perform assignment a_i = a_i + a_j \n  2. Perform assignment a_j = a_j - a_i \n\nWilliam wants you to develop a strategy that will get all the internal variables to the desired values.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 20). Description of the test cases follows.\n\nThe first line of each test case contains a single even integer n (2 \u2264 n \u2264 10^3), which is the number of internal variables.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9), which are initial values of internal variables.\n\nOutput\n\nFor each test case print the answer in the following format:\n\nThe first line of output must contain the total number of actions k, which the strategy will perform. Note that you do not have to minimize k. The inequality k \u2264 5 000 must be satisfied. \n\nEach of the next k lines must contain actions formatted as \"type i j\", where \"type\" is equal to \"1\" if the strategy needs to perform an assignment of the first type and \"2\" if the strategy needs to perform an assignment of the second type. Note that i < j should hold.\n\nWe can show that an answer always exists.\n\nExample\n\nInput\n\n\n2\n4\n1 1 1 1\n4\n4 3 1 2\n\n\nOutput\n\n\n8\n2 1 2\n2 1 2\n2 1 3\n2 1 3\n2 1 4\n2 1 4\n1 1 2\n1 1 2\n8\n2 1 4\n1 2 4\n1 2 4\n1 2 4\n1 3 4\n1 1 2\n1 1 2\n1 1 4\n\nNote\n\nFor the first sample test case one possible sequence of operations is as follows:\n\n  1. \"2 1 2\". Values of variables after performing the operation: [1, 0, 1, 1] \n  2. \"2 1 2\". Values of variables after performing the operation: [1, -1, 1, 1] \n  3. \"2 1 3\". Values of variables after performing the operation: [1, -1, 0, 1] \n  4. \"2 1 3\". Values of variables after performing the operation: [1, -1, -1, 1] \n  5. \"2 1 4\". Values of variables after performing the operation: [1, -1, -1, 0] \n  6. \"2 1 4\". Values of variables after performing the operation: [1, -1, -1, -1] \n  7. \"1 1 2\". Values of variables after performing the operation: [0, -1, -1, -1] \n  8. \"1 1 2\". Values of variables after performing the operation: [-1, -1, -1, -1] \n\n\n\nFor the second sample test case one possible sequence of operations is as follows:\n\n  1. \"2 1 4\". Values of variables after performing the operation: [4, 3, 1, -2] \n  2. \"1 2 4\". Values of variables after performing the operation: [4, 1, 1, -2] \n  3. \"1 2 4\". Values of variables after performing the operation: [4, -1, 1, -2] \n  4. \"1 2 4\". Values of variables after performing the operation: [4, -3, 1, -2] \n  5. \"1 3 4\". Values of variables after performing the operation: [4, -3, -1, -2] \n  6. \"1 1 2\". Values of variables after performing the operation: [1, -3, -1, -2] \n  7. \"1 1 2\". Values of variables after performing the operation: [-2, -3, -1, -2] \n  8. \"1 1 4\". Values of variables after performing the operation: [-4, -3, -1, -2] ",
        "task_name": "1523_B. Lord of the Values",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nflush = sys.stdout.flush\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\ninputData = InputData()\ninput = inputData.input\n\n\ndef intin():\n    return(int(input()))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(input()))\ndef strin():\n    return input()\ndef lout(l, sep=\"\\n\", toStr=True):\n    print(sep.join(map(str, l) if toStr else l))\ndef dout(*args, **kargs):\n    if not testing: return\n    if args: print(args[0] if len(args)==1 else args)\n    if kargs: print([(k,v) for k,v in kargs.items()])\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\n# from collections import defaultdict as ddict, Counter\n# from heapq import *\n# from Queue import Queue\n\n\"\"\"\na b c d\nad b c d\nad b c -a\nd b c -a\nd-a b c -a\nd-a b c -a-d+a=-d\n-a b c -d\n\"\"\"\n\ndef main():\n    n = intin()\n    a = intlin()\n    ans = []\n    for i in xrange(n):\n        ans.append(\"1 %d %d\" % (a[i], a[n-i-1]))\n        ans.append(\"2 %d %d\" % (a[i], a[n-i-1]))\n        ans.append(\"1 %d %d\" % (a[i], a[n-i-1]))\n        ans.append(\"1 %d %d\" % (a[i], a[n-i-1]))\n        ans.append(\"2 %d %d\" % (a[i], a[n-i-1]))\n        ans.append(\"1 %d %d\" % (a[i], a[n-i-1]))\n    return str(len(ans))+ '\\n' + '\\n'.join(ans)\n\n\nanss = []\nfor _ in xrange(intin()):\n    anss.append(main())\n    # anss.append(\"YES\" if main() else \"NO\")\nlout(anss)\n\nif testing:\n    sys.stdout = cmd\n    print(int(round(time() * 1000))  - start_time)",
        "correct": false,
        "task_id": "0399",
        "depth": 1
    },
    {
        "description": "Vasya adores sport programming. He can't write programs but he loves to watch the contests' progress. Vasya even has a favorite coder and Vasya pays special attention to him.\n\nOne day Vasya decided to collect the results of all contests where his favorite coder participated and track the progress of his coolness. For each contest where this coder participated, he wrote out a single non-negative number \u2014 the number of points his favorite coder earned in the contest. Vasya wrote out the points for the contest in the order, in which the contests run (naturally, no two contests ran simultaneously).\n\nVasya considers a coder's performance in a contest amazing in two situations: he can break either his best or his worst performance record. First, it is amazing if during the contest the coder earns strictly more points that he earned on each past contest. Second, it is amazing if during the contest the coder earns strictly less points that he earned on each past contest. A coder's first contest isn't considered amazing. Now he wants to count the number of amazing performances the coder had throughout his whole history of participating in contests. But the list of earned points turned out long and Vasya can't code... That's why he asks you to help him.\n\nInput\n\nThe first line contains the single integer n (1 \u2264 n \u2264 1000) \u2014 the number of contests where the coder participated.\n\nThe next line contains n space-separated non-negative integer numbers \u2014 they are the points which the coder has earned. The points are given in the chronological order. All points do not exceed 10000.\n\nOutput\n\nPrint the single number \u2014 the number of amazing performances the coder has had during his whole history of participating in the contests.\n\nExamples\n\nInput\n\n5\n100 50 200 150 200\n\n\nOutput\n\n2\n\n\nInput\n\n10\n4664 6496 5814 7010 5762 5736 6944 4850 3698 7242\n\n\nOutput\n\n4\n\nNote\n\nIn the first sample the performances number 2 and 3 are amazing.\n\nIn the second sample the performances number 2, 4, 9 and 10 are amazing.",
        "task_name": "155_A. I_love_%username%",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    pass\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n#start from here\nn=int(input())\nl=list(map(int,input().split()))\nfrom itertools import count\nc=0\nfor i in count(1):\n    if l[i]>l[i-1]:\n        c+=1\n    if i==len(l)-1:\n        break",
        "correct": false,
        "task_id": "0400",
        "depth": 1
    },
    {
        "description": "The Little Elephant has got a problem \u2014 somebody has been touching his sorted by non-decreasing array a of length n and possibly swapped some elements of the array.\n\nThe Little Elephant doesn't want to call the police until he understands if he could have accidentally changed the array himself. He thinks that he could have accidentally changed array a, only if array a can be sorted in no more than one operation of swapping elements (not necessarily adjacent). That is, the Little Elephant could have accidentally swapped some two elements.\n\nHelp the Little Elephant, determine if he could have accidentally changed the array a, sorted by non-decreasing, himself.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 105) \u2014 the size of array a. The next line contains n positive integers, separated by single spaces and not exceeding 109, \u2014 array a.\n\nNote that the elements of the array are not necessarily distinct numbers.\n\nOutput\n\nIn a single line print \"YES\" (without the quotes) if the Little Elephant could have accidentally changed the array himself, and \"NO\" (without the quotes) otherwise.\n\nExamples\n\nInput\n\n2\n1 2\n\n\nOutput\n\nYES\n\n\nInput\n\n3\n3 2 1\n\n\nOutput\n\nYES\n\n\nInput\n\n4\n4 3 2 1\n\n\nOutput\n\nNO\n\nNote\n\nIn the first sample the array has already been sorted, so to sort it, we need 0 swap operations, that is not more than 1. Thus, the answer is \"YES\".\n\nIn the second sample we can sort the array if we swap elements 1 and 3, so we need 1 swap operation to sort the array. Thus, the answer is \"YES\".\n\nIn the third sample we can't sort the array in more than one swap operation, so the answer is \"NO\".",
        "task_name": "221_C. Little Elephant and Problem",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\na = list(map(int, raw_input().split()))\nk = 0\nfor i in range(n - 1):\n    if a[i] > a[i + 1]:\n        k += 1\nif k <= 2:\n    print('YES')\nelse:\n    print('NO')",
        "correct": false,
        "task_id": "0402",
        "depth": 1
    },
    {
        "description": "Recently Polycarpus has learned the \"bitwise AND\" operation (which is also called \"AND\") of non-negative integers. Now he wants to demonstrate the school IT teacher his superb manipulation with the learned operation.\n\nFor that Polycarpus came to school a little earlier and wrote on the board a sequence of non-negative integers a1, a2, ..., an. He also wrote a square matrix b of size n \u00d7 n. The element of matrix b that sits in the i-th row in the j-th column (we'll denote it as bij) equals:\n\n  * the \"bitwise AND\" of numbers ai and aj (that is, bij = ai & aj), if i \u2260 j; \n  * -1, if i = j. \n\n\n\nHaving written out matrix b, Polycarpus got very happy and wiped a off the blackboard. But the thing is, the teacher will want this sequence to check whether Polycarpus' calculations were correct. Polycarus urgently needs to restore the removed sequence of integers, or else he won't prove that he can count correctly.\n\nHelp Polycarpus, given matrix b, restore the sequence of numbers a1, a2, ..., an, that he has removed from the board. Polycarpus doesn't like large numbers, so any number in the restored sequence mustn't exceed 109.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the size of square matrix b. Next n lines contain matrix b. The i-th of these lines contains n space-separated integers: the j-th number represents the element of matrix bij. It is guaranteed, that for all i (1 \u2264 i \u2264 n) the following condition fulfills: bii = -1. It is guaranteed that for all i, j (1 \u2264 i, j \u2264 n; i \u2260 j) the following condition fulfills: 0 \u2264 bij \u2264 109, bij = bji.\n\nOutput\n\nPrint n non-negative integers a1, a2, ..., an (0 \u2264 ai \u2264 109) \u2014 the sequence that Polycarpus wiped off the board. Separate the numbers by whitespaces. \n\nIt is guaranteed that there is sequence a that satisfies the problem conditions. If there are multiple such sequences, you are allowed to print any of them.\n\nExamples\n\nInput\n\n1\n-1\n\n\nOutput\n\n0 \n\nInput\n\n3\n-1 18 0\n18 -1 0\n0 0 -1\n\n\nOutput\n\n18 18 0 \n\nInput\n\n4\n-1 128 128 128\n128 -1 148 160\n128 148 -1 128\n128 160 128 -1\n\n\nOutput\n\n128 180 148 160 \n\nNote\n\nIf you do not know what is the \"bitwise AND\" operation please read: http://en.wikipedia.org/wiki/Bitwise_operation.",
        "task_name": "245_D. Restoring Table",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n\nn = int(raw_input())\na = []\nfor _ in range(n):\n  y = 0\n  for x in map(int, raw_input().split()):\n    y |= x if x != -1 else 0\n  a.append(y)\nprint(' '.join(map(str, a)))\n",
        "correct": true,
        "task_id": "0403",
        "depth": 2
    },
    {
        "description": "Emuskald is addicted to Codeforces, and keeps refreshing the main page not to miss any changes in the \"recent actions\" list. He likes to read thread conversations where each thread consists of multiple messages.\n\nRecent actions shows a list of n different threads ordered by the time of the latest message in the thread. When a new message is posted in a thread that thread jumps on the top of the list. No two messages of different threads are ever posted at the same time.\n\nEmuskald has just finished reading all his opened threads and refreshes the main page for some more messages to feed his addiction. He notices that no new threads have appeared in the list and at the i-th place in the list there is a thread that was at the ai-th place before the refresh. He doesn't want to waste any time reading old messages so he wants to open only threads with new messages.\n\nHelp Emuskald find out the number of threads that surely have new messages. A thread x surely has a new message if there is no such sequence of thread updates (posting messages) that both conditions hold: \n\n  1. thread x is not updated (it has no new messages); \n  2. the list order 1, 2, ..., n changes to a1, a2, ..., an. \n\nInput\n\nThe first line of input contains an integer n, the number of threads (1 \u2264 n \u2264 105). The next line contains a list of n space-separated integers a1, a2, ..., an where ai (1 \u2264 ai \u2264 n) is the old position of the i-th thread in the new list. It is guaranteed that all of the ai are distinct.\n\nOutput\n\nOutput a single integer \u2014 the number of threads that surely contain a new message.\n\nExamples\n\nInput\n\n5\n5 2 1 3 4\n\n\nOutput\n\n2\n\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\n0\n\n\nInput\n\n4\n4 3 2 1\n\n\nOutput\n\n3\n\nNote\n\nIn the first test case, threads 2 and 5 are placed before the thread 1, so these threads must contain new messages. Threads 1, 3 and 4 may contain no new messages, if only threads 2 and 5 have new messages.\n\nIn the second test case, there may be no new messages at all, since the thread order hasn't changed.\n\nIn the third test case, only thread 1 can contain no new messages.",
        "task_name": "270_B. Multithreading",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#! /usr/bin/python2.7\n# -*- coding: utf-8 -*-\n\nimport sys, os, re, math\n\nn = int(raw_input())\n\na = [int(x) for x in raw_input().split(' ')][::-1]\n\ni = n-1\nwhile i > 0 and a[i] > a[i-1]:\n    i -= 1\n\n\nprint(n-i-1)\n",
        "correct": false,
        "task_id": "0404",
        "depth": 1
    },
    {
        "description": "Iahub recently has learned Bubble Sort, an algorithm that is used to sort a permutation with n elements a1, a2, ..., an in ascending order. He is bored of this so simple algorithm, so he invents his own graph. The graph (let's call it G) initially has n vertices and 0 edges. During Bubble Sort execution, edges appear as described in the following algorithm (pseudocode). \n    \n    \n      \n    procedure bubbleSortGraph()  \n        build a graph G with n vertices and 0 edges  \n        repeat  \n            swapped = false  \n            for i = 1 to n - 1 inclusive do:  \n                if a[i] > a[i + 1] then  \n                    add an undirected edge in G between a[i] and a[i + 1]  \n                    swap( a[i], a[i + 1] )  \n                    swapped = true  \n                end if  \n            end for  \n        until not swapped   \n        /* repeat the algorithm as long as swapped value is true. */   \n    end procedure  \n    \n\nFor a graph, an independent set is a set of vertices in a graph, no two of which are adjacent (so there are no edges between vertices of an independent set). A maximum independent set is an independent set which has maximum cardinality. Given the permutation, find the size of the maximum independent set of graph G, if we use such permutation as the premutation a in procedure bubbleSortGraph.\n\nInput\n\nThe first line of the input contains an integer n (2 \u2264 n \u2264 105). The next line contains n distinct integers a1, a2, ..., an (1 \u2264 ai \u2264 n).\n\nOutput\n\nOutput a single integer \u2014 the answer to the problem. \n\nExamples\n\nInput\n\n3\n3 1 2\n\n\nOutput\n\n2\n\nNote\n\nConsider the first example. Bubble sort swaps elements 3 and 1. We add edge (1, 3). Permutation is now [1, 3, 2]. Then bubble sort swaps elements 3 and 2. We add edge (2, 3). Permutation is now sorted. We have a graph with 3 vertices and 2 edges (1, 3) and (2, 3). Its maximal independent set is [1, 2].",
        "task_name": "341_B. Bubble Sort Graph",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom bisect import *\n\n\nclass segmenttree:\n    def __init__(self, arr, n):\n        self.tree, self.n = [0] * (2 * n), n\n        # build tree\n        if arr:\n            for i in range(2 * n - 1, 0, -1):\n                if i >= n:\n                    self.tree[i] = arr[i - n]\n                else:\n                    self.tree[i] = max(self.tree[i << 1], self.tree[(i << 1) + 1])\n\n    # get interval[l,r)\n    def query(self, l, r):\n        res = 0\n        l += self.n\n        r += self.n\n        while l < r:\n            if l & 1:\n                res = max(self.tree[l], res)\n                l += 1\n\n            if r & 1:\n                r -= 1\n                res = max(self.tree[r], res)\n\n            l >>= 1\n            r >>= 1\n\n        return res\n\n    def update(self, ix, val):\n        ix += self.n\n\n        # set new value\n        self.tree[ix] = val\n\n        # move up\n        while ix > 1:\n            self.tree[ix >> 1] = max(self.tree[ix], self.tree[ix ^ 1])\n            ix >>= 1\n\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nn, a, tree = int(input()), rints(), segmenttree([], 10 ** 5 + 1)\n\nfor i in range(n):\n    val = tree.query(0, a[i])\n    tree.update(a[i], val + 1)\n\nprint(tree.query(0, n + 1))\n",
        "correct": true,
        "task_id": "0405",
        "depth": 1
    },
    {
        "description": "Two teams meet in The Game World Championship. Some scientists consider this game to be the most intellectually challenging game in the world. You are given two strings describing the teams' actions in the final battle. Figure out who became the champion.\n\nInput\n\nThe input contains two strings of equal length (between 2 and 20 characters, inclusive). Each line describes the actions of one team.\n\nOutput\n\nOutput \"TEAM 1 WINS\" if the first team won, \"TEAM 2 WINS\" if the second team won, and \"TIE\" if there was a tie.\n\nExamples\n\nInput\n\n[]()[]8&lt;\n8&lt;[]()8&lt;\n\n\nOutput\n\nTEAM 2 WINS\n\n\nInput\n\n8&lt;8&lt;()\n[]8&lt;[]\n\n\nOutput\n\nTIE",
        "task_name": "409_A. The Great Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a, b, v, s = raw_input(), raw_input(), 0, '[(8'\nfor i in range(len(a)/2):\n  v += [0,1,-1][s.find(a[2*i]) - s.find(b[2*i])]\nprint (\"TEAM \" + (\"2\" if v > 0 else \"1\") + \" WINS\") if v else \"TIE\"\n",
        "correct": true,
        "task_id": "0406",
        "depth": 1
    },
    {
        "description": "Om Nom really likes candies and doesn't like spiders as they frequently steal candies. One day Om Nom fancied a walk in a park. Unfortunately, the park has some spiders and Om Nom doesn't want to see them at all.\n\n<image>\n\nThe park can be represented as a rectangular n \u00d7 m field. The park has k spiders, each spider at time 0 is at some cell of the field. The spiders move all the time, and each spider always moves in one of the four directions (left, right, down, up). In a unit of time, a spider crawls from his cell to the side-adjacent cell in the corresponding direction. If there is no cell in the given direction, then the spider leaves the park. The spiders do not interfere with each other as they move. Specifically, one cell can have multiple spiders at the same time.\n\nOm Nom isn't yet sure where to start his walk from but he definitely wants:\n\n  * to start walking at time 0 at an upper row cell of the field (it is guaranteed that the cells in this row do not contain any spiders); \n  * to walk by moving down the field towards the lowest row (the walk ends when Om Nom leaves the boundaries of the park). \n\n\n\nWe know that Om Nom moves by jumping. One jump takes one time unit and transports the little monster from his cell to either a side-adjacent cell on the lower row or outside the park boundaries.\n\nEach time Om Nom lands in a cell he sees all the spiders that have come to that cell at this moment of time. Om Nom wants to choose the optimal cell to start the walk from. That's why he wonders: for each possible starting cell, how many spiders will he see during the walk if he starts from this cell? Help him and calculate the required value for each possible starting cell.\n\nInput\n\nThe first line contains three integers n, m, k (2 \u2264 n, m \u2264 2000; 0 \u2264 k \u2264 m(n - 1)). \n\nEach of the next n lines contains m characters \u2014 the description of the park. The characters in the i-th line describe the i-th row of the park field. If the character in the line equals \".\", that means that the corresponding cell of the field is empty; otherwise, the character in the line will equal one of the four characters: \"L\" (meaning that this cell has a spider at time 0, moving left), \"R\" (a spider moving right), \"U\" (a spider moving up), \"D\" (a spider moving down). \n\nIt is guaranteed that the first row doesn't contain any spiders. It is guaranteed that the description of the field contains no extra characters. It is guaranteed that at time 0 the field contains exactly k spiders.\n\nOutput\n\nPrint m integers: the j-th integer must show the number of spiders Om Nom will see if he starts his walk from the j-th cell of the first row. The cells in any row of the field are numbered from left to right.\n\nExamples\n\nInput\n\n3 3 4\n...\nR.L\nR.U\n\n\nOutput\n\n0 2 2 \n\nInput\n\n2 2 2\n..\nRL\n\n\nOutput\n\n1 1 \n\nInput\n\n2 2 2\n..\nLR\n\n\nOutput\n\n0 0 \n\nInput\n\n3 4 8\n....\nRRLL\nUUUU\n\n\nOutput\n\n1 3 3 1 \n\nInput\n\n2 2 2\n..\nUU\n\n\nOutput\n\n0 0 \n\nNote\n\nConsider the first sample. The notes below show how the spider arrangement changes on the field over time:\n    \n    \n      \n    ...        ...        ..U       ...  \n    R.L   ->   .*U   ->   L.R   ->  ...  \n    R.U        .R.        ..R       ...  \n      \n    \n\nCharacter \"*\" represents a cell that contains two spiders at the same time.\n\n  * If Om Nom starts from the first cell of the first row, he won't see any spiders. \n  * If he starts from the second cell, he will see two spiders at time 1. \n  * If he starts from the third cell, he will see two spiders: one at time 1, the other one at time 2. ",
        "task_name": "436_B. Om Nom and Spiders",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s=raw_input().split()\nn=int(s[0])\nm=int(s[1])\nk=int(s[2])\ni=0\nrectangular=[]\nwhile i<n:\n    x =raw_input()\n    rectangular.append(x)\n    i=i+1\nj=0\nwhile j<m:\n    contador=0\n    i=1\n    while i<n:\n        if (j+i)< m and rectangular [i][j+i]==\"L\":\n            contador =contador+1\n        if (j-i)>= 0 and rectangular [i][j-i]==\"R\":\n            contador =contador+1\n        if (i+i)< n and rectangular [i+i][j]==\"U\":\n             contador =contador+1\n        i=i+1\n    print (contador)\n    j=j+1\n",
        "correct": true,
        "task_id": "0407",
        "depth": 2
    },
    {
        "description": "Recently Pashmak has been employed in a transportation company. The company has k buses and has a contract with a school which has n students. The school planned to take the students to d different places for d days (each day in one place). Each day the company provides all the buses for the trip. Pashmak has to arrange the students in the buses. He wants to arrange the students in a way that no two students become close friends. In his ridiculous idea, two students will become close friends if and only if they are in the same buses for all d days.\n\nPlease help Pashmak with his weird idea. Assume that each bus has an unlimited capacity.\n\nInput\n\nThe first line of input contains three space-separated integers n, k, d (1 \u2264 n, d \u2264 1000; 1 \u2264 k \u2264 109).\n\nOutput\n\nIf there is no valid arrangement just print -1. Otherwise print d lines, in each of them print n integers. The j-th integer of the i-th line shows which bus the j-th student has to take on the i-th day. You can assume that the buses are numbered from 1 to k.\n\nExamples\n\nInput\n\n3 2 2\n\n\nOutput\n\n1 1 2 \n1 2 1 \n\n\nInput\n\n3 2 1\n\n\nOutput\n\n-1\n\nNote\n\nNote that two students become close friends only if they share a bus each day. But the bus they share can differ from day to day.",
        "task_name": "459_C. Pashmak and Buses",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def incr(a, k):\n    carry = 1\n    for i in range(len(a) - 1, -1, -1):\n        newval = a[i] + carry\n        if newval >= k:\n            if i == 0:\n                return False\n            newval = 0\n            carry = 1\n        else:\n            carry = 0\n        a[i] = newval\n    return True\ndef sol():\n    n, k, d = map(int, raw_input().split())\n    a = [0] * d\n    res = list()\n    nextFine = True\n    for want in xrange(n):\n        if not nextFine:\n            print(-1)\n            return\n        res.append(list(val + 1 for val in a))\n        nextFine = incr(a, k)\n    print('\\n'.join(' '.join(map(str, l)) for l in res))\nsol()",
        "correct": false,
        "task_id": "0408",
        "depth": 1
    },
    {
        "description": "Valery is a PE teacher at a school in Berland. Soon the students are going to take a test in long jumps, and Valery has lost his favorite ruler! \n\nHowever, there is no reason for disappointment, as Valery has found another ruler, its length is l centimeters. The ruler already has n marks, with which he can make measurements. We assume that the marks are numbered from 1 to n in the order they appear from the beginning of the ruler to its end. The first point coincides with the beginning of the ruler and represents the origin. The last mark coincides with the end of the ruler, at distance l from the origin. This ruler can be repesented by an increasing sequence a1, a2, ..., an, where ai denotes the distance of the i-th mark from the origin (a1 = 0, an = l).\n\nValery believes that with a ruler he can measure the distance of d centimeters, if there is a pair of integers i and j (1 \u2264 i \u2264 j \u2264 n), such that the distance between the i-th and the j-th mark is exactly equal to d (in other words, aj - ai = d). \n\nUnder the rules, the girls should be able to jump at least x centimeters, and the boys should be able to jump at least y (x < y) centimeters. To test the children's abilities, Valery needs a ruler to measure each of the distances x and y. \n\nYour task is to determine what is the minimum number of additional marks you need to add on the ruler so that they can be used to measure the distances x and y. Valery can add the marks at any integer non-negative distance from the origin not exceeding the length of the ruler.\n\nInput\n\nThe first line contains four positive space-separated integers n, l, x, y (2 \u2264 n \u2264 105, 2 \u2264 l \u2264 109, 1 \u2264 x < y \u2264 l) \u2014 the number of marks, the length of the ruler and the jump norms for girls and boys, correspondingly.\n\nThe second line contains a sequence of n integers a1, a2, ..., an (0 = a1 < a2 < ... < an = l), where ai shows the distance from the i-th mark to the origin.\n\nOutput\n\nIn the first line print a single non-negative integer v \u2014 the minimum number of marks that you need to add on the ruler.\n\nIn the second line print v space-separated integers p1, p2, ..., pv (0 \u2264 pi \u2264 l). Number pi means that the i-th mark should be at the distance of pi centimeters from the origin. Print the marks in any order. If there are multiple solutions, print any of them.\n\nExamples\n\nInput\n\n3 250 185 230\n0 185 250\n\n\nOutput\n\n1\n230\n\n\nInput\n\n4 250 185 230\n0 20 185 250\n\n\nOutput\n\n0\n\n\nInput\n\n2 300 185 230\n0 300\n\n\nOutput\n\n2\n185 230\n\nNote\n\nIn the first sample it is impossible to initially measure the distance of 230 centimeters. For that it is enough to add a 20 centimeter mark or a 230 centimeter mark.\n\nIn the second sample you already can use the ruler to measure the distances of 185 and 230 centimeters, so you don't have to add new marks.\n\nIn the third sample the ruler only contains the initial and the final marks. We will need to add two marks to be able to test the children's skills.",
        "task_name": "480_B. Long Jumps",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport bisect\n\nimport numpy as np\n\n\nn, l, x, y = map(int, sys.stdin.next().split())\nmarks = map(int, sys.stdin.next().split())\n\nx_solved = False\ny_solved = False\n\nmagic_tick = None\n\nfor i, mark in enumerate(marks):\n\n    if mark + x > l:\n        break\n\n    res_y = bisect.bisect_left(marks, mark + y, lo=i)\n    res_x = bisect.bisect_left(marks, mark + x, lo=i, hi=min(res_y + 1, n))\n\n    res_x = min(max(0, res_x), n - 1)\n    res_y = min(max(0, res_y), n - 1)\n\n    if (marks[res_x] == mark + x):\n        x_solved = True\n    if (marks[res_y] == mark + y):\n        y_solved = True\n\nif x_solved and y_solved:\n    print(0)\nelif x_solved and not(y_solved):\n    print(1)\n    print(y)\nelif not(x_solved) and x_solved:\n    print(1)\n    print(x)\nelse:\n\n    for shift_x, shift_y in [(x, y), (-x, y), (x, -y), (x, y)]:\n        i, j = 0, 0\n        while True:\n            if (i >= n) or (j >= n):\n                break\n\n            if marks[i] + shift_x > marks[j] + shift_y:\n                j += 1\n            elif marks[i] + shift_x < marks[j] + shift_y:\n                i += 1\n            else:\n                if 0 <= marks[i] + shift_x <= l:\n                    magic_tick = marks[i] + shift_x\n                    break\n                else:\n                    i += 1\n                    j += 1\n\n    if magic_tick:\n        print(1)\n        print(magic_tick)\n    else:\n        print(2)\n        print(\"%i %i\" % (x, y))\n",
        "correct": false,
        "task_id": "0409",
        "depth": 2
    },
    {
        "description": "Mr. Kitayuta has just bought an undirected graph consisting of n vertices and m edges. The vertices of the graph are numbered from 1 to n. Each edge, namely edge i, has a color ci, connecting vertex ai and bi.\n\nMr. Kitayuta wants you to process the following q queries.\n\nIn the i-th query, he gives you two integers \u2014 ui and vi.\n\nFind the number of the colors that satisfy the following condition: the edges of that color connect vertex ui and vertex vi directly or indirectly.\n\nInput\n\nThe first line of the input contains space-separated two integers \u2014 n and m (2 \u2264 n \u2264 100, 1 \u2264 m \u2264 100), denoting the number of the vertices and the number of the edges, respectively.\n\nThe next m lines contain space-separated three integers \u2014 ai, bi (1 \u2264 ai < bi \u2264 n) and ci (1 \u2264 ci \u2264 m). Note that there can be multiple edges between two vertices. However, there are no multiple edges of the same color between two vertices, that is, if i \u2260 j, (ai, bi, ci) \u2260 (aj, bj, cj).\n\nThe next line contains a integer \u2014 q (1 \u2264 q \u2264 100), denoting the number of the queries.\n\nThen follows q lines, containing space-separated two integers \u2014 ui and vi (1 \u2264 ui, vi \u2264 n). It is guaranteed that ui \u2260 vi.\n\nOutput\n\nFor each query, print the answer in a separate line.\n\nExamples\n\nInput\n\n4 5\n1 2 1\n1 2 2\n2 3 1\n2 3 3\n2 4 3\n3\n1 2\n3 4\n1 4\n\n\nOutput\n\n2\n1\n0\n\n\nInput\n\n5 7\n1 5 1\n2 5 1\n3 5 1\n4 5 1\n1 2 2\n2 3 2\n3 4 2\n5\n1 5\n5 1\n2 5\n1 5\n1 4\n\n\nOutput\n\n1\n1\n1\n1\n2\n\nNote\n\nLet's consider the first sample. \n\n<image> The figure above shows the first sample. \n\n  * Vertex 1 and vertex 2 are connected by color 1 and 2. \n  * Vertex 3 and vertex 4 are connected by color 3. \n  * Vertex 1 and vertex 4 are not connected by any single color. ",
        "task_name": "505_B. Mr. Kitayuta's Colorful Graph",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, m = map(int, raw_input().split())\ngraph = []\nedges = {}\nvertex_edges = {}\nqueries = []\nvisited = [False] * n\n\n\ndef dfs(u, edge):\n    if (not visited[u]):\n        visited[u] = True\n        for i in range(len(graph)):\n            vertex_1 = (min(graph[i][1], u + 1), max(graph[i][1], u + 1))\n            vertex_2 = (min(graph[i][0], u + 1), max(graph[i][0], u + 1))\n\n            if (graph[i][0] == u + 1 and vertex_1 in edges and edge in edges[vertex_1]):\n                dfs(graph[i][1] - 1, edge)\n            if (graph[i][1] == u + 1 and vertex_2 in edges and edge in edges[vertex_2]):\n                dfs(graph[i][0] - 1, edge)\n\n\nfor i in range(m):\n    a, b, c = map(int, raw_input().split())\n    graph.append((a, b))\n    vertex = (min(a, b), max(a, b))\n\n    if (vertex in edges):\n        edges[vertex].append(c)\n    else:\n        edges[vertex] = [c]\n\n    if (a in vertex_edges):\n        vertex_edges[a].append(c)\n    else:\n        vertex_edges[a] = [c]\n\n    if (b in vertex_edges):\n        vertex_edges[b].append(c)\n    else:\n        vertex_edges[b] = [c]\n\nq = input()\n\nfor i in range(q):\n    u, v = map(int, raw_input().split())\n    count = 0\n\n    if (u in vertex_edges):\n        vertex_edges[u] = list(set(vertex_edges[u]))\n\n        for j in vertex_edges[u]:\n            visited = [False] * n\n            dfs(u - 1, j)\n            if (visited[v - 1]):\n                count += 1\n\n    print(count)\n",
        "correct": true,
        "task_id": "0410",
        "depth": 2
    },
    {
        "description": "Kyoya Ootori has a bag with n colored balls that are colored with k different colors. The colors are labeled from 1 to k. Balls of the same color are indistinguishable. He draws balls from the bag one by one until the bag is empty. He noticed that he drew the last ball of color i before drawing the last ball of color i + 1 for all i from 1 to k - 1. Now he wonders how many different ways this can happen. \n\nInput\n\nThe first line of input will have one integer k (1 \u2264 k \u2264 1000) the number of colors.\n\nThen, k lines will follow. The i-th line will contain ci, the number of balls of the i-th color (1 \u2264 ci \u2264 1000).\n\nThe total number of balls doesn't exceed 1000.\n\nOutput\n\nA single integer, the number of ways that Kyoya can draw the balls from the bag as described in the statement, modulo 1 000 000 007. \n\nExamples\n\nInput\n\n3\n2\n2\n1\n\n\nOutput\n\n3\n\n\nInput\n\n4\n1\n2\n3\n4\n\n\nOutput\n\n1680\n\nNote\n\nIn the first sample, we have 2 balls of color 1, 2 balls of color 2, and 1 ball of color 3. The three ways for Kyoya are: \n    \n    \n      \n    1 2 1 2 3  \n    1 1 2 2 3  \n    2 1 1 2 3  \n    ",
        "task_name": "554_C. Kyoya and Colored Balls",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "mod = 1000000007\n\nraspuns = 1\nv = []\nn = 0\n\ndef factorial( n ):\n    p = 1\n    for i in range( 1, n + 1 ):\n        p *= i\n    #print( n, \" -> \", p )\n    return p\n\ndef combinari( n, k ):\n    p = factorial( n ) / ( factorial( k ) * factorial( n - k ) )\n    #print( n, k, \" - > \", p )\n    return p\n\nk = input()\nfor i in range( k ):\n    x = input()\n    n += x\n    v.append( x )\n\nfor i in v[::-1]:\n    n -= 1\n    i -= 1\n    if i:\n        raspuns *= combinari( n, i )\n    n -= i\n\nraspuns %= mod\n\nprint( raspuns )",
        "correct": true,
        "task_id": "0411",
        "depth": 1
    },
    {
        "description": "Kefa wants to celebrate his first big salary by going to restaurant. However, he needs company. \n\nKefa has n friends, each friend will agree to go to the restaurant if Kefa asks. Each friend is characterized by the amount of money he has and the friendship factor in respect to Kefa. The parrot doesn't want any friend to feel poor compared to somebody else in the company (Kefa doesn't count). A friend feels poor if in the company there is someone who has at least d units of money more than he does. Also, Kefa wants the total friendship factor of the members of the company to be maximum. Help him invite an optimal company!\n\nInput\n\nThe first line of the input contains two space-separated integers, n and d (1 \u2264 n \u2264 105, <image>) \u2014 the number of Kefa's friends and the minimum difference between the amount of money in order to feel poor, respectively.\n\nNext n lines contain the descriptions of Kefa's friends, the (i + 1)-th line contains the description of the i-th friend of type mi, si (0 \u2264 mi, si \u2264 109) \u2014 the amount of money and the friendship factor, respectively. \n\nOutput\n\nPrint the maximum total friendship factir that can be reached.\n\nExamples\n\nInput\n\n4 5\n75 5\n0 100\n150 20\n75 1\n\n\nOutput\n\n100\n\n\nInput\n\n5 100\n0 7\n11 32\n99 10\n46 8\n87 54\n\n\nOutput\n\n111\n\nNote\n\nIn the first sample test the most profitable strategy is to form a company from only the second friend. At all other variants the total degree of friendship will be worse.\n\nIn the second sample test we can take all the friends.",
        "task_name": "580_B. Kefa and Company",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#encoding: utf-8\nread_input = map(int, raw_input().split())\n\nn = read_input[0]\nd = read_input[1]\n\ninput_list = []\n\nfor i in range(n):\n    user_input = map(int, raw_input().split())\n    input_list.append((user_input[0], user_input[1]))\n\ninput_list.sort()\n\nmax_factor = input_list[0][1]\npartial_sum = input_list[0][1]\n\nj = 0\nfor i in range(1, n):\n    while((input_list[i][0] - input_list[j][0]) >= d):\n        partial_sum -= input_list[j][1]\n        j += 1\n\n    partial_sum += input_list[i][1]\n    max_factor = max(max_factor, partial_sum)\n\nprint(max_factor)",
        "correct": true,
        "task_id": "0412",
        "depth": 2
    },
    {
        "description": "After seeing the \"ALL YOUR BASE ARE BELONG TO US\" meme for the first time, numbers X and Y realised that they have different bases, which complicated their relations.\n\nYou're given a number X represented in base bx and a number Y represented in base by. Compare those two numbers.\n\nInput\n\nThe first line of the input contains two space-separated integers n and bx (1 \u2264 n \u2264 10, 2 \u2264 bx \u2264 40), where n is the number of digits in the bx-based representation of X. \n\nThe second line contains n space-separated integers x1, x2, ..., xn (0 \u2264 xi < bx) \u2014 the digits of X. They are given in the order from the most significant digit to the least significant one.\n\nThe following two lines describe Y in the same way: the third line contains two space-separated integers m and by (1 \u2264 m \u2264 10, 2 \u2264 by \u2264 40, bx \u2260 by), where m is the number of digits in the by-based representation of Y, and the fourth line contains m space-separated integers y1, y2, ..., ym (0 \u2264 yi < by) \u2014 the digits of Y.\n\nThere will be no leading zeroes. Both X and Y will be positive. All digits of both numbers are given in the standard decimal numeral system.\n\nOutput\n\nOutput a single character (quotes for clarity): \n\n  * '<' if X < Y\n  * '>' if X > Y\n  * '=' if X = Y\n\nExamples\n\nInput\n\n6 2\n1 0 1 1 1 1\n2 10\n4 7\n\n\nOutput\n\n=\n\n\nInput\n\n3 3\n1 0 2\n2 5\n2 4\n\n\nOutput\n\n&lt;\n\n\nInput\n\n7 16\n15 15 4 0 0 7 10\n7 9\n4 8 0 3 1 5 0\n\n\nOutput\n\n&gt;\n\nNote\n\nIn the first sample, X = 1011112 = 4710 = Y.\n\nIn the second sample, X = 1023 = 215 and Y = 245 = 1123, thus X < Y.\n\nIn the third sample, <image> and Y = 48031509. We may notice that X starts with much larger digits and bx is much larger than by, so X is clearly larger than Y.",
        "task_name": "602_A. Two Bases",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s = raw_input().split(\" \")\nn = int(s[0])\nbx = int(s[1])\n\nx = 0\nxs = raw_input().split(\" \")\nfor i in range(n-1, -1, -1):\n    a = int(xs[n-1-i])\n    x = x + ((bx**i) * a)\n\ns = raw_input().split(\" \")\nm = int(s[0])\nby = int(s[1])\n\ny = 0\nys = raw_input().split(\" \")\nfor i in range(m-1, -1, -1):\n    a = int(ys[m-1-i])\n    y = y + ((by**i) * a)\n\nif (x == y): ans = \"=\"\nelif (x > y): ans = \">\"\nelse : ans = \"<\"\n\nprint(ans)\n",
        "correct": true,
        "task_id": "0413",
        "depth": 1
    },
    {
        "description": "Bear Limak likes watching sports on TV. He is going to watch a game today. The game lasts 90 minutes and there are no breaks.\n\nEach minute can be either interesting or boring. If 15 consecutive minutes are boring then Limak immediately turns TV off.\n\nYou know that there will be n interesting minutes t1, t2, ..., tn. Your task is to calculate for how many minutes Limak will watch the game.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 90) \u2014 the number of interesting minutes.\n\nThe second line contains n integers t1, t2, ..., tn (1 \u2264 t1 < t2 < ... tn \u2264 90), given in the increasing order.\n\nOutput\n\nPrint the number of minutes Limak will watch the game.\n\nExamples\n\nInput\n\n3\n7 20 88\n\n\nOutput\n\n35\n\n\nInput\n\n9\n16 20 30 40 50 60 70 80 90\n\n\nOutput\n\n15\n\n\nInput\n\n9\n15 20 30 40 50 60 70 80 90\n\n\nOutput\n\n90\n\nNote\n\nIn the first sample, minutes 21, 22, ..., 35 are all boring and thus Limak will turn TV off immediately after the 35-th minute. So, he would watch the game for 35 minutes.\n\nIn the second sample, the first 15 minutes are boring.\n\nIn the third sample, there are no consecutive 15 boring minutes. So, Limak will watch the whole game.",
        "task_name": "673_A. Bear and Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "raw_input()\ninteresting = set(map(int, raw_input().split()))\nboredom = 0\nfor x in range(1, 91):\n  boredom += 1\n  if x in interesting:\n    boredom = 0\n  elif boredom == 15:\n    print(x)\n    import sys; sys.exit()\nprint(90)\n",
        "correct": true,
        "task_id": "0414",
        "depth": 1
    },
    {
        "description": "A tree is an undirected connected graph without cycles.\n\nLet's consider a rooted undirected tree with n vertices, numbered 1 through n. There are many ways to represent such a tree. One way is to create an array with n integers p1, p2, ..., pn, where pi denotes a parent of vertex i (here, for convenience a root is considered its own parent).\n\n<image> For this rooted tree the array p is [2, 3, 3, 2].\n\nGiven a sequence p1, p2, ..., pn, one is able to restore a tree:\n\n  1. There must be exactly one index r that pr = r. A vertex r is a root of the tree. \n  2. For all other n - 1 vertices i, there is an edge between vertex i and vertex pi. \n\n\n\nA sequence p1, p2, ..., pn is called valid if the described procedure generates some (any) rooted tree. For example, for n = 3 sequences (1,2,2), (2,3,1) and (2,1,3) are not valid.\n\nYou are given a sequence a1, a2, ..., an, not necessarily valid. Your task is to change the minimum number of elements, in order to get a valid sequence. Print the minimum number of changes and an example of a valid sequence after that number of changes. If there are many valid sequences achievable in the minimum number of changes, print any of them.\n\nInput\n\nThe first line of the input contains an integer n (2 \u2264 n \u2264 200 000) \u2014 the number of vertices in the tree.\n\nThe second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 n).\n\nOutput\n\nIn the first line print the minimum number of elements to change, in order to get a valid sequence.\n\nIn the second line, print any valid sequence possible to get from (a1, a2, ..., an) in the minimum number of changes. If there are many such sequences, any of them will be accepted.\n\nExamples\n\nInput\n\n4\n2 3 3 4\n\n\nOutput\n\n1\n2 3 4 4 \n\n\nInput\n\n5\n3 2 2 5 3\n\n\nOutput\n\n0\n3 2 2 5 3 \n\n\nInput\n\n8\n2 3 5 4 1 6 6 7\n\n\nOutput\n\n2\n2 3 7 8 1 6 6 7\n\nNote\n\nIn the first sample, it's enough to change one element. In the provided output, a sequence represents a tree rooted in a vertex 4 (because p4 = 4), which you can see on the left drawing below. One of other correct solutions would be a sequence 2 3 3 2, representing a tree rooted in vertex 3 (right drawing below). On both drawings, roots are painted red.\n\n<image>\n\nIn the second sample, the given sequence is already valid.",
        "task_name": "698_B. Fix a Tree",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import itertools\nimport sys\n\n\ndef readline_int(delta=0):\n    return [int(i) + delta for i in raw_input().split()]\n\nclass Solution(object):\n    def find(self, ident, fa):\n        if fa[ident] != ident:\n             fa[ident] = self.find(fa[ident], fa)\n        return fa[ident]\n\n    def merge(self, ident_child, ident_father, fa):\n        fa_child = fa[ident_child]\n        fa_father = fa[ident_father]\n        fa[fa_child] = fa_father\n\n    def solve(self):\n        n = self.n\n        p = self.p\n        issues = []\n        roots = []\n        fa = [i for i in xrange(n)]\n\n        for current in xrange(n):\n            parent = p[current]\n            if parent == current:\n                roots.append(current)\n                continue\n\n            parent_set_id = self.find(parent, fa)\n            if parent_set_id == current:\n                issues.append(current)\n                continue\n\n            self.merge(current, parent, fa)\n\n        root = None\n        changes = 0\n        if len(roots) > 0:\n            root = roots[0]\n            changes = len(roots) + len(issues) - 1\n        elif len(roots) == 0:\n            root = roots[0] if len(roots) > 0 else issues[0]\n            changes = len(roots) + len(issues)\n\n        for ident in itertools.chain(roots, issues):\n            p[ident] = root\n\n        return (changes, p, )\n\n    def read_data(self):\n        self.n = readline_int()[0]\n        self.p = readline_int(delta=-1) # make sure to restore index while printing result\n\n    def print_result(self, result):\n        changes, p = result\n        print(changes)\n        for idx, parent in enumerate(p):\n            sys.stdout.write(str(parent))\n            if idx != len(p) - 1:\n                sys.stdout.write(' ')\n        sys.stdout.write('\\n')\n\n\n    def run(self):\n        self.read_data()\n        result = self.solve()\n        self.print_result(result)\n\nif len(sys.argv) > 1:\n    sys.stdin = open(sys.argv[1], 'r')\n    print('Redirect stdin to {0}'.format(sys.argv[1]))\n\nSolution().run()\n\n",
        "correct": false,
        "task_id": "0415",
        "depth": 1
    },
    {
        "description": "Anatoly lives in the university dorm as many other students do. As you know, cockroaches are also living there together with students. Cockroaches might be of two colors: black and red. There are n cockroaches living in Anatoly's room.\n\nAnatoly just made all his cockroaches to form a single line. As he is a perfectionist, he would like the colors of cockroaches in the line to alternate. He has a can of black paint and a can of red paint. In one turn he can either swap any two cockroaches, or take any single cockroach and change it's color.\n\nHelp Anatoly find out the minimum number of turns he needs to make the colors of cockroaches in the line alternate.\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000) \u2014 the number of cockroaches.\n\nThe second line contains a string of length n, consisting of characters 'b' and 'r' that denote black cockroach and red cockroach respectively.\n\nOutput\n\nPrint one integer \u2014 the minimum number of moves Anatoly has to perform in order to make the colors of cockroaches in the line to alternate.\n\nExamples\n\nInput\n\n5\nrbbrr\n\n\nOutput\n\n1\n\n\nInput\n\n5\nbbbbb\n\n\nOutput\n\n2\n\n\nInput\n\n3\nrbr\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample, Anatoly has to swap third and fourth cockroaches. He needs 1 turn to do this.\n\nIn the second sample, the optimum answer is to paint the second and the fourth cockroaches red. This requires 2 turns.\n\nIn the third sample, the colors of cockroaches in the line are alternating already, thus the answer is 0.",
        "task_name": "719_B. Anatoly and Cockroaches",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\nline = raw_input()\n\nchange_red = 0\nchange_black = 0\nfor idx,val in enumerate(line):\n\tif idx%2 == 0 and val == 'b':\n\t\tchange_black += 1\n\tif idx%2 == 1 and val == 'r':\n\t\tchange_red += 1\nswaps = min(change_red, change_black)\ncolor = max(change_red, change_black) - swaps\n\ntotal = swaps + color\n\nchange_red2 = 0\nchange_black2 = 0\nfor idx,val in enumerate(line):\n\tif idx%2 == 1 and val == 'b':\n\t\tchange_black2 += 1\n\tif idx%2 == 0 and val == 'r':\n\t\tchange_red2 += 1\n\n\nswaps2 = min(change_red2, change_black2)\ncolor2 = max(change_red2, change_black2) - swaps2\n\ntotal2 = swaps2 + color2\n\nprint(min(total, total2))\n\n\n\n",
        "correct": true,
        "task_id": "0416",
        "depth": 1
    },
    {
        "description": "A monster is chasing after Rick and Morty on another planet. They're so frightened that sometimes they scream. More accurately, Rick screams at times b, b + a, b + 2a, b + 3a, ... and Morty screams at times d, d + c, d + 2c, d + 3c, .... \n\n<image>\n\nThe Monster will catch them if at any point they scream at the same time, so it wants to know when it will catch them (the first time they scream at the same time) or that they will never scream at the same time.\n\nInput\n\nThe first line of input contains two integers a and b (1 \u2264 a, b \u2264 100). \n\nThe second line contains two integers c and d (1 \u2264 c, d \u2264 100).\n\nOutput\n\nPrint the first time Rick and Morty will scream at the same time, or  - 1 if they will never scream at the same time.\n\nExamples\n\nInput\n\n20 2\n9 19\n\n\nOutput\n\n82\n\n\nInput\n\n2 1\n16 12\n\n\nOutput\n\n-1\n\nNote\n\nIn the first sample testcase, Rick's 5th scream and Morty's 8th time are at time 82. \n\nIn the second sample testcase, all Rick's screams will be at odd times and Morty's will be at even times, so they will never scream at the same time.",
        "task_name": "787_A. The Monster",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a , b = map(int, raw_input().split()) \nc, d = map(int, raw_input().split()) \nimport sys \nif (b == d):\n\tprint (b )\n\tsys.exit() \nt = d - b \nfor x in range((a*c+d+b)/a+11): \n\tif (a*x - t)%c == 0: \n\t\tprint(b+ a*x) \n\t\tsys.exit() \nprint(- 1)",
        "correct": false,
        "task_id": "0417",
        "depth": 1
    },
    {
        "description": "After several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.\n\nThis morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight wi and cost ci. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.\n\nHelp Petya to determine maximum possible total cost.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 100000, 1 \u2264 m \u2264 300000) \u2014 the number of Petya's souvenirs and total weight that he can carry to the market.\n\nThen n lines follow. ith line contains two integers wi and ci (1 \u2264 wi \u2264 3, 1 \u2264 ci \u2264 109) \u2014 the weight and the cost of ith souvenir.\n\nOutput\n\nPrint one number \u2014 maximum possible total cost of souvenirs that Petya can carry to the market.\n\nExamples\n\nInput\n\n1 1\n2 1\n\n\nOutput\n\n0\n\n\nInput\n\n2 2\n1 3\n2 2\n\n\nOutput\n\n3\n\n\nInput\n\n4 3\n3 10\n2 7\n2 8\n1 1\n\n\nOutput\n\n10",
        "task_name": "808_E. Selling Souvenirs",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n\n\n\n\ndata = [[] for i in range(4)]\n\n\nn,m = map(int,raw_input().split())\n\n\nfor i in range(0,n):\n    w,c = map(int,raw_input().split())\n    data[w].append(c)\n#print(data)\n\nfor i in range(1,4):\n    data[i].sort()\n    data[i].reverse()\n\ndp = []\nfor i in range(0,300010):\n    dp.append((0,0,0))\n\n\n\n\nfor i in range(1,m+1):\n    for j in range(1,3):\n        if(i-j<0 or dp[i-j][j] >= len(data[j])):\n            continue\n\n        val = dp[i-j][0] + data[j][dp[i-j][j]]\n        if(val > dp[i][0]):\n            a0 = val\n            a1 = dp[i-j][1]\n            a2 = dp[i-j][2]\n            if(j == 1):\n                a1 += 1\n            else :\n                a2 += 1\n            dp[i] = (a0,a1,a2)\n        if(dp[i][0] < dp[i-1][0]) :\n            dp[i] = dp[i-1]\n\nans = dp[w][0]\nsum = 0\n\nfor i in range(0,len(data[3])):\n    if (i+1) * 3 > w :\n        break\n    sum += data[3][i]\n    if ans < sum + dp[w - 3 * (i+1)][0] :\n        ans = sum + dp[w-3*(i+1)][0]\n\n\n\n\nprint(ans)\n\n",
        "correct": false,
        "task_id": "0418",
        "depth": 2
    },
    {
        "description": "There is a rectangular grid of n rows of m initially-white cells each.\n\nArkady performed a certain number (possibly zero) of operations on it. In the i-th operation, a non-empty subset of rows Ri and a non-empty subset of columns Ci are chosen. For each row r in Ri and each column c in Ci, the intersection of row r and column c is coloured black.\n\nThere's another constraint: a row or a column can only be chosen at most once among all operations. In other words, it means that no pair of (i, j) (i < j) exists such that <image> or <image>, where <image> denotes intersection of sets, and <image> denotes the empty set.\n\nYou are to determine whether a valid sequence of operations exists that produces a given final grid.\n\nInput\n\nThe first line contains two space-separated integers n and m (1 \u2264 n, m \u2264 50) \u2014 the number of rows and columns of the grid, respectively.\n\nEach of the following n lines contains a string of m characters, each being either '.' (denoting a white cell) or '#' (denoting a black cell), representing the desired setup.\n\nOutput\n\nIf the given grid can be achieved by any valid sequence of operations, output \"Yes\"; otherwise output \"No\" (both without quotes).\n\nYou can print each character in any case (upper or lower).\n\nExamples\n\nInput\n\n5 8\n.#.#..#.\n.....#..\n.#.#..#.\n#.#....#\n.....#..\n\n\nOutput\n\nYes\n\n\nInput\n\n5 5\n..#..\n..#..\n#####\n..#..\n..#..\n\n\nOutput\n\nNo\n\n\nInput\n\n5 9\n........#\n#........\n..##.#...\n.......#.\n....#.#.#\n\n\nOutput\n\nNo\n\nNote\n\nFor the first example, the desired setup can be produced by 3 operations, as is shown below.\n\n<image>\n\nFor the second example, the desired setup cannot be produced, since in order to colour the center row, the third row and all columns must be selected in one operation, but after that no column can be selected again, hence it won't be possible to colour the other cells in the center column.",
        "task_name": "924_A. Mystical Mosaic",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division\nfrom sys import stdin, stdout\n# from fractions import gcd\n# from math import *\n# from operator import mul\n# from functools import reduce\n# from copy import copy\nfrom collections import deque, defaultdict, Counter\n\nrstr = lambda: stdin.readline().strip()\nrstrs = lambda: [str(x) for x in stdin.readline().split()]\nrint = lambda: int(stdin.readline())\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrstr_2d = lambda n: [rstr() for _ in range(n)]\nrint_2d = lambda n: [rint() for _ in range(n)]\nrints_2d = lambda n: [rints() for _ in range(n)]\npr = lambda args, sep: stdout.write(sep.join(map(str, args)) + '\\n')\nout = []\n\nn, m = rints()\ngrid, all, ans = rstr_2d(n), [], 'YES'\n\nfor i in range(m):\n    tem = set()\n    for j in range(n):\n        if grid[j][i] == '#':\n            tem.add(j)\n\n    if tem:\n        for j in all:\n            inter = tem.intersection(j)\n            # print(tem,inter,ans)\n            if inter:\n                if inter != tem:\n                    ans = 'NO'\n                break\n\n        if tem not in all:\n            all.append(tem)\n    # print(all)\n\nprint(ans)\n",
        "correct": false,
        "task_id": "0420",
        "depth": 2
    },
    {
        "description": "Everybody knows of [spaghetti sort](https://en.wikipedia.org/wiki/Spaghetti_sort). You decided to implement an analog sorting algorithm yourself, but as you survey your pantry you realize you're out of spaghetti! The only type of pasta you have is ravioli, but you are not going to let this stop you...\n\nYou come up with the following algorithm. For each number in the array ai, build a stack of ai ravioli. The image shows the stack for ai = 4.\n\n<image>\n\nArrange the stacks in one row in the order in which the corresponding numbers appear in the input array. Find the tallest one (if there are several stacks of maximal height, use the leftmost one). Remove it and add its height to the end of the output array. Shift the stacks in the row so that there is no gap between them. Repeat the procedure until all stacks have been removed.\n\nAt first you are very happy with your algorithm, but as you try it on more inputs you realize that it doesn't always produce the right sorted array. Turns out when two stacks of ravioli are next to each other (at any step of the process) and differ in height by two or more, the top ravioli of the taller stack slides down on top of the lower stack.\n\nGiven an input array, figure out whether the described algorithm will sort it correctly.\n\nInput\n\nThe first line of input contains a single number n (1 \u2264 n \u2264 10) \u2014 the size of the array.\n\nThe second line of input contains n space-separated integers ai (1 \u2264 ai \u2264 100) \u2014 the elements of the array.\n\nOutput\n\nOutput \"YES\" if the array can be sorted using the described procedure and \"NO\" if it can not.\n\nExamples\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\nYES\n\n\nInput\n\n3\n3 1 2\n\n\nOutput\n\nNO\n\nNote\n\nIn the second example the array will change even before the tallest stack is chosen for the first time: ravioli from stack of height 3 will slide on the stack of height 1, and the algorithm will output an array {2, 2, 2}.",
        "task_name": "952_C. Ravioli Sort",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=input();flag=True\nnums=map(int,raw_input().split())\nwhile flag and nums:\n  for i in xrange(len(nums)-1):\n    if abs(nums[i]-nums[i+1])>=2:\n      flag=False\n      break\n  nums.remove(max(nums))\nprint [\"NO\",\"YES\"][flag]\n",
        "correct": true,
        "task_id": "0421",
        "depth": 2
    },
    {
        "description": "You are given a sequence A_1, A_2, ..., A_N and an integer K.\n\nPrint the maximum possible length of a sequence B that satisfies the following conditions:\n\n* B is a (not necessarily continuous) subsequence of A.\n* For each pair of adjacents elements of B, the absolute difference of the elements is at most K.\n\nConstraints\n\n* 1 \\leq N \\leq 300,000\n* 0 \\leq A_i \\leq 300,000\n* 0 \\leq K \\leq 300,000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nA_1\nA_2\n:\nA_N\n\n\nOutput\n\nPrint the answer.\n\nExample\n\nInput\n\n10 3\n1\n5\n4\n3\n8\n6\n9\n7\n2\n4\n\n\nOutput\n\n7",
        "task_name": "p02537 ACL Beginner Contest - Flat Subsequence",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\n\nn, k = map(int, input().split(\" \"))\n\nnums = [int(input()) for i in range(n)]\ngraph = [[] for i in range(n)]\n\nfor node1 in range(n-1):\n    num1 = nums[node1]\n    for node2 in range(node1+1, n):\n        num2 = nums[node2]\n        if abs(num1-num2) <= k:\n            graph[node2].append(node1)\n\nlens = []\nmax_ = 0\nfor node in range(n):\n    if len(graph[node]) == 0:\n        len_ = 1\n    else:\n        len_ = max([lens[kid] for kid in graph[node]]) + 1\n    lens.append(len_)\n    max_ = max(len_, max_)\n\nprint(max_)",
        "correct": false,
        "task_id": "0423",
        "depth": 2
    },
    {
        "description": "There are N stones arranged in a row. Every stone is painted white or black. A string S represents the color of the stones. The i-th stone from the left is white if the i-th character of S is `.`, and the stone is black if the character is `#`.\n\nTakahashi wants to change the colors of some stones to black or white so that there will be no white stone immediately to the right of a black stone. Find the minimum number of stones that needs to be recolored.\n\nConstraints\n\n* 1 \\leq N \\leq 2\\times 10^5\n* S is a string of length N consisting of `.` and `#`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS\n\n\nOutput\n\nPrint the minimum number of stones that needs to be recolored.\n\nExamples\n\nInput\n\n3\n#.#\n\n\nOutput\n\n1\n\n\nInput\n\n3\n.#\n\n\nOutput\n\n1\n\n\nInput\n\n5\n.##.\n\n\nOutput\n\n2\n\n\nInput\n\n9\n.........\n\n\nOutput\n\n0",
        "task_name": "p03069 Tenka1 Programmer Beginner Contest 2019 - Stones",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=int(raw_input())\ns=raw_input()\n\ntemp=s.count(\"#\")\nif temp==0 or temp==n:\n    print(0)\nelse:\n    head=0\n    tail=n-temp\n    ret=tail+head\n    for c in s:\n        if c==\"#\":\n            head+=1\n        else:\n            tail-=1\n        temp2=head+tail\n        if temp2<ret:\n            ret=temp2\n    print(ret)\n",
        "correct": true,
        "task_id": "0426",
        "depth": 1
    },
    {
        "description": "You are given an integer N. Among the integers between 1 and N (inclusive), how many Shichi-Go-San numbers (literally \"Seven-Five-Three numbers\") are there?\n\nHere, a Shichi-Go-San number is a positive integer that satisfies the following condition:\n\n* When the number is written in base ten, each of the digits `7`, `5` and `3` appears at least once, and the other digits never appear.\n\nConstraints\n\n* 1 \\leq N < 10^9\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\n\n\nOutput\n\nPrint the number of the Shichi-Go-San numbers between 1 and N (inclusive).\n\nExamples\n\nInput\n\n575\n\n\nOutput\n\n4\n\n\nInput\n\n3600\n\n\nOutput\n\n13\n\n\nInput\n\n999999999\n\n\nOutput\n\n26484",
        "task_name": "p03212 AtCoder Beginner Contest 114 - 755",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import itertools\nimport math\nn = input()\n\nchars = [\"3\", \"5\", \"7\"]\nndigits = int(math.log10(n)) + 1\n\ncount = 0\nfor digit in range(3, ndigits + 1):\n    for string in itertools.product(chars, repeat=digit):\n        if(string.count(\"3\") == 0):\n            continue\n        if(string.count(\"5\") == 0):\n            continue\n        if(string.count(\"7\") == 0):\n            continue\n        if n >= int(\"\".join(string)):\n            count += 1\n\nprint(count)\n",
        "correct": true,
        "task_id": "0427",
        "depth": 2
    },
    {
        "description": "We have a canvas divided into a grid with H rows and W columns. The square at the i-th row from the top and the j-th column from the left is represented as (i, j).\nInitially, all the squares are white. square1001 wants to draw a picture with black paint. His specific objective is to make Square (i, j) black when s_{i, j}= `#`, and to make Square (i, j) white when s_{i, j}= `.`.\nHowever, since he is not a good painter, he can only choose two squares that are horizontally or vertically adjacent and paint those squares black, for some number of times (possibly zero). He may choose squares that are already painted black, in which case the color of those squares remain black.\nDetermine if square1001 can achieve his objective.\n\nConstraints\n\n* H is an integer between 1 and 50 (inclusive).\n* W is an integer between 1 and 50 (inclusive).\n* For every (i, j) (1 \\leq i \\leq H, 1 \\leq j \\leq W), s_{i, j} is `#` or `.`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W\ns_{1, 1} s_{1, 2} s_{1, 3} ... s_{1, W}\ns_{2, 1} s_{2, 2} s_{2, 3} ... s_{2, W}\n:   :\ns_{H, 1} s_{H, 2} s_{H, 3} ... s_{H, W}\n\n\nOutput\n\nIf square1001 can achieve his objective, print `Yes`; if he cannot, print `No`.\n\nExamples\n\nInput\n\n3 3\n.#.\n###\n.#.\n\n\nOutput\n\nYes\n\n\nInput\n\n3 3\n.#.\n\n.#.\n\n\nOutput\n\nYes\n\n\nInput\n\n5 5\n.#.#\n.#.#.\n.#.#\n.#.#.\n.#.#\n\n\nOutput\n\nNo\n\n\nInput\n\n11 11\n...#####...\n.##.....##.\n..##.##..#\n..##.##..#\n.........#\n...###...#\n.#########.\n.#.#.#.#.#.\n.#.#.#.##\n..##.#.##..\n.##..#..##.\n\n\nOutput\n\nYes",
        "task_name": "p03361 AtCoder Beginner Contest 096 - Grid Repainting 2",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import numpy as np\n\nH, W = map(int, raw_input().split())\n\nS = np.zeros((H, W))\n\nfor i in range(H):\n    tmp = list(raw_input())\n    for j in range(W):\n        if tmp[j] == \"#\":\n            S[i, j] = 1\n        else:\n            S[i, j] = 0\n\nan = [-1, 1]\nd_flag = 1\n\nfor i in range(H):\n    for j in range(W):\n        if S[i, j] == 1:\n            flag = 0\n            if i>1:\n                a1 = S[i-1, j]\n            else:\n                a1 = S[i+1, j]\n            if j>1:\n                a2 = S[i, j-1]\n            else:\n                a2 = S[i, j+1]\n            if i<H-1:\n                a3 = S[i+1, j]\n            else:\n                a3 = S[i-1, j]\n            if j>W-1:\n                a4 = S[i, j+1]\n            else:\n                a4 = S[i, j-1]\n            if a1+a2+a3+a4 == 0:\n                d_flag = 0\n                \nif d_flag == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "correct": false,
        "task_id": "0428",
        "depth": 2
    },
    {
        "description": "You are given an undirected connected weighted graph with N vertices and M edges that contains neither self-loops nor double edges.\nThe i-th (1\u2264i\u2264M) edge connects vertex a_i and vertex b_i with a distance of c_i.\nHere, a self-loop is an edge where a_i = b_i (1\u2264i\u2264M), and double edges are two edges where (a_i,b_i)=(a_j,b_j) or (a_i,b_i)=(b_j,a_j) (1\u2264i<j\u2264M).\nA connected graph is a graph where there is a path between every pair of different vertices.\nFind the number of the edges that are not contained in any shortest path between any pair of different vertices.\n\nConstraints\n\n* 2\u2264N\u2264100\n* N-1\u2264M\u2264min(N(N-1)/2,1000)\n* 1\u2264a_i,b_i\u2264N\n* 1\u2264c_i\u22641000\n* c_i is an integer.\n* The given graph contains neither self-loops nor double edges.\n* The given graph is connected.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN M\na_1 b_1 c_1\na_2 b_2 c_2\n:\na_M b_M c_M\n\n\nOutput\n\nPrint the number of the edges in the graph that are not contained in any shortest path between any pair of different vertices.\n\nExamples\n\nInput\n\n3 3\n1 2 1\n1 3 1\n2 3 3\n\n\nOutput\n\n1\n\n\nInput\n\n3 2\n1 2 1\n2 3 1\n\n\nOutput\n\n0",
        "task_name": "p03837 AtCoder Beginner Contest 051 - Candidates of No Shortest Paths",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Python program for Dijkstra's \n# single source shortest \n# path algorithm. The program \n# is for adjacency matrix \nans=[]\np=[]\n# representation of the graph \n\nfrom collections import defaultdict \npa=[]\n#Class to represent a graph \nclass Graph: \n\n\t# A utility function to find the \n\t# vertex with minimum dist value, from \n\t# the set of vertices still in queue \n\tdef minDistance(self,dist,queue): \n\t\t# Initialize min value and min_index as -1 \n\t\tminimum = float(\"Inf\") \n\t\tmin_index = -1\n\t\t\n\t\t# from the dist array,pick one which \n\t\t# has min value and is till in queue \n\t\tfor i in range(len(dist)): \n\t\t\tif dist[i] < minimum and i in queue: \n\t\t\t\tminimum = dist[i] \n\t\t\t\tmin_index = i \n\t\treturn min_index \n\n\n\t# Function to print shortest path \n\t# from source to j \n\t# using parent array \n\tdef printPath(self, parent, j): \n\t\tglobal p\n\t\tglobal pa \n\t\t#Base Case : If j is source \n\t\tif parent[j] == -1 : \n\t\t#\tprint j, \n\t\t\tp.append(j)\n\t\t\tpa.append(p)\n\t\t\treturn\n\t\tself.printPath(parent , parent[j]) \n\t\t#print j, \n\t\tp.append(j)\n        \n\t# A utility function to print \n\t# the constructed distance \n\t# array \n\tdef printSolution(self, dist, parent): \n\t\tsrc = 0\n\t\tglobal p\n\t#\tprint(\"Vertex \\t\\tDistance from Source\\tPath\") \n\t\tfor i in range(1, len(dist)): \n\t\t#\tprint(\"\\n%d --> %d \\t\\t%d \\t\\t\\t\\t\\t\" % (src, i, dist[i])), \n\t\t\tp=[]\n\t\t\tself.printPath(parent,i) \n\t\t\t#print(p,'fun')\n\t\t#\tpa.append(p)\n\n\t'''Function that implements Dijkstra's single source shortest path \n\talgorithm for a graph represented using adjacency matrix \n\trepresentation'''\n\tdef dijkstra(self, graph, src): \n\n\t\trow = len(graph) \n\t\tcol = len(graph[0]) \n\n\t\t# The output array. dist[i] will hold \n\t\t# the shortest distance from src to i \n\t\t# Initialize all distances as INFINITE \n\t\tdist = [float(\"Inf\")] * row \n\n\t\t#Parent array to store \n\t\t# shortest path tree \n\t\tparent = [-1] * row \n\n\t\t# Distance of source vertex \n\t\t# from itself is always 0 \n\t\tdist[src] = 0\n\t\n\t\t# Add all vertices in queue \n\t\tqueue = [] \n\t\tfor i in range(row): \n\t\t\tqueue.append(i) \n\t\t\t\n\t\t#Find shortest path for all vertices \n\t\twhile queue: \n\n\t\t\t# Pick the minimum dist vertex \n\t\t\t# from the set of vertices \n\t\t\t# still in queue \n\t\t\tu = self.minDistance(dist,queue) \n\n\t\t\t# remove min element\t \n\t\t\tqueue.remove(u) \n\n\t\t\t# Update dist value and parent \n\t\t\t# index of the adjacent vertices of \n\t\t\t# the picked vertex. Consider only \n\t\t\t# those vertices which are still in \n\t\t\t# queue \n\t\t\tfor i in range(col): \n\t\t\t\t'''Update dist[i] only if it is in queue, there is \n\t\t\t\tan edge from u to i, and total weight of path from \n\t\t\t\tsrc to i through u is smaller than current value of \n\t\t\t\tdist[i]'''\n\t\t\t\tif graph[u][i] and i in queue: \n\t\t\t\t\tif dist[u] + graph[u][i] < dist[i]: \n\t\t\t\t\t\tdist[i] = dist[u] + graph[u][i] \n\t\t\t\t\t\tparent[i] = u \n\n\n\t\t# print the constructed distance array \n\t\tself.printSolution(dist,parent) \n\ng= Graph() \nedge=[]\nn,m=map(int,raw_input().split())\ngraph=[[0 for j in range(n)]for i in range(n)]\nfor i in range(m):\n    a,b,c=map(int,raw_input().split())\n    a,b=min(a,b),max(a,b)\n    edge.append([a-1,b-1])\n    graph[a-1][b-1]=c \n    graph[b-1][a-1]=c \n\n\t\t\n\nans={}\nfor i in range(n):\n    p=[]\n    g.dijkstra(graph,i) \n   # print(p)\n    for i in range(len(p)-1):\n        a,b=p[i],p[i+1]\n        a,b=min(a,b),max(a,b)\n        ans[(a,b)]=1 \n#print(ans)\n#print(pa)\n# This code is contributed by Neelam Yadav \ncnt=0 \nfor i in edge: \n    if ans.get((i[0],i[1]),-1)!=-1:\n        cnt+=1 \nprint(m-cnt)",
        "correct": false,
        "task_id": "0429",
        "depth": 2
    },
    {
        "description": "Stick n circular stickers with a radius of 1 on a square origami paper with a side length of 10. The stickers can be stacked. Create a program that reads the coordinates of the position where the stickers are to be attached and outputs the number of stickers at the place where the stickers overlap most on the origami paper (assuming that even one sticker \"overlaps\"). ..\n\nGives the x and y coordinates with the lower left corner of the origami as the origin. Let's put the sticker with these x and y as the center of the circle. The center of the circle never goes out of the origami. Also, multiple stickers will not be attached at the same coordinates.\n\nHint\n\nIt is a figure with a sticker attached as shown in the input example. The circle represents the sticker, and the number represents the number of lines in the input example. At point (2.3, 4.6), the four stickers on the second, third, sixth, and tenth lines of the input example overlap.\n\n<image>\n\nThe distance between the centers of 6 and 9 is 2.01293, so the seals do not overlap. The distance between the centers of 1 and 12 is 1.98231, so the seals overlap.\n\nWhen two circles are in contact (when the distance between the centers is 2), they are assumed to overlap.\n\n\n\nInput\n\nGiven multiple datasets. Each dataset is given in the following format:\n\n\nn\nx1, y1\nx2, y2\n::\nxn, yn\n\n\nThe first line gives the number of stickers n (0 \u2264 100). The next n lines give the center coordinates of each seal. xi and yi represent the x and y coordinates of the center of the i-th sticker. Each value is given as a real number, including up to 6 digits after the decimal point.\n\nWhen n is 0, it is the end of the input. The number of datasets does not exceed 50.\n\nOutput\n\nFor each data set, output the number of stickers (integer) at the place where the stickers overlap most on the origami paper.\n\nExample\n\nInput\n\n15\n3.14979,8.51743\n2.39506,3.84915\n2.68432,5.39095\n5.61904,9.16332\n7.85653,4.75593\n2.84021,5.41511\n1.79500,8.59211\n7.55389,8.17604\n4.70665,4.66125\n1.63470,4.42538\n7.34959,4.61981\n5.09003,8.11122\n5.24373,1.30066\n0.13517,1.83659\n7.57313,1.58150\n0\n\n\nOutput\n\n4",
        "task_name": "p00090 Overlaps of Seals",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\"\"\"Reference\nhttp://homepage1.nifty.com/gfk/circle-circle.htm\n\"\"\"\nfrom __future__ import (division, absolute_import, print_function,\n                        unicode_literals)\nfrom sys import stdin\nimport math\n\nRADIUS, RADIUS_2 = 1 + 1.0e-12, 2 + 1.0e-12\n\nnum_data = int(stdin.readline())\ndata = []\nfor _ in range(num_data):\n    data.append(tuple(float(s) for s in stdin.readline().split(',')))\n\ncross_points = []\nfor i in range(num_data):\n    x1, y1 = data[i]\n    for j in range(num_data):\n        if i == j:\n            continue\n        x2, y2 = data[j]\n\n        distance = math.hypot(x2-x1, y2-y1)\n        if distance <= RADIUS_2:\n            if x1 == x2 and y1 == y2:\n                cp1 = cp2 = (x1, y1)\n            else:\n                th = math.atan2(y2-y1, x2-x1)\n                al = math.acos(distance**2 / (2.0*distance))\n                cp1 = (x1 + math.cos(th + al), y1 + math.sin(th + al))\n                cp2 = (x1 + math.cos(th - al), y1 + math.sin(th - al))\n\n            if 0.0 <= cp1[0] <= 10.0 and 0.0 <= cp1[1] <= 10.0:\n                cross_points.append(cp1)\n            if 0.0 <= cp2[0] <= 10.0 and 0.0 <= cp2[1] <= 10.0:\n                cross_points.append(cp2)\n\nmax_overlap = 0\nfor cx, cy in cross_points:\n    count = 0\n    for x, y in data:\n        if math.hypot(cx-x, cy-y) <= RADIUS:\n            count += 1\n    if max_overlap < count:\n        max_overlap = count\nprint(max_overlap)",
        "correct": false,
        "task_id": "0430",
        "depth": 2
    },
    {
        "description": "Three-valued logic is a logic system that has, in addition to \"true\" and \"false\", \"unknown\" as a valid value. In the following, logical values \"false\", \"unknown\" and \"true\" are represented by 0, 1 and 2 respectively.\n\nLet \"-\" be a unary operator (i.e. a symbol representing one argument function) and let both \"*\" and \"+\" be binary operators (i.e. symbols representing two argument functions). These operators represent negation (NOT), conjunction (AND) and disjunction (OR) respectively. These operators in three-valued logic can be defined in Table C-1.\n\nTable C-1: Truth tables of three-valued logic operators\n-X| | (X*Y)| | (X+Y) | <image>|  | <image>|  | <image> |\n---|---|---|---|---|---\n\nLet P, Q and R be variables ranging over three-valued logic values. For a given formula, you are asked to answer the number of triples (P,Q,R) that satisfy the formula, that is, those which make the value of the given formula 2. A formula is one of the following form (X and Y represent formulas).\n\n* Constants: 0, 1 or 2\n* Variables: P, Q or R\n* Negations: -X\n* Conjunctions: (X*Y)\n* Disjunctions: (X+Y)\n\n\nNote that conjunctions and disjunctions of two formulas are always parenthesized.\n\nFor example, when formula (P*Q) is given as an input, the value of this formula is 2 when and only when (P,Q,R) is (2,2,0), (2,2,1) or (2,2,2). Therefore, you should output 3.\n\nInput\n\nThe input consists of one or more lines. Each line contains a formula. A formula is a string which consists of 0, 1, 2, P, Q, R, -, *, +, (, ). Other characters such as spaces are not contained. The grammar of formulas is given by the following BNF.\n\n\n<formula> ::= 0 | 1 | 2 | P | Q | R |\n-<formula> | (<formula>*<formula>) | (<formula>+<formula>)\n\n\nAll the formulas obey this syntax and thus you do not have to care about grammatical errors. Input lines never exceed 80 characters.\n\nFinally, a line which contains only a \".\" (period) comes, indicating the end of the input.\n\nOutput\n\nYou should answer the number (in decimal) of triples (P,Q,R) that make the value of the given formula 2. One line containing the number should be output for each of the formulas, and no other characters should be output.\n\nSample Input\n\n\n(P*Q)\n(--R+(P*Q))\n(P*-P)\n2\n1\n(-1+(((---P+Q)*(--Q+---R))*(-R+-P)))\n.\n\n\nOutput for the Sample Input\n\n\n3\n11\n0\n27\n0\n7\n\n\n\n\n\n\nExample\n\nInput\n\n(P*Q)\n(--R+(P*Q))\n(P*-P)\n2\n1\n(-1+(((---P+Q)*(--Q+---R))*(-R+-P)))\n.\n\n\nOutput\n\n3\n11\n0\n27\n0\n7",
        "task_name": "p00736 How can I satisfy thee? Let me count the ways...",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/python\nclass Ternary:\n\tdef __init__(self,n): \n\t\tself.n=n\n\tdef __int__(self):\n\t\treturn self.n\n\tdef __neg__(self):\n\t\treturn Ternary(2-int(self))\n\tdef __mul__(self,o):\n\t\treturn Ternary(min(int(self),int(o)))\n\tdef __add__(self,o):\n\t\treturn Ternary(max(int(self),int(o)))\n\nimport sys, itertools\nfrom functools import reduce\nR=[0,1,2]\nwhile True:\n\ts=sys.stdin.readline().rstrip()\n\tif s=='.': break\n\tr=0\n\tfor (a,b,c) in itertools.product(R,repeat=3):\n\t\tt=reduce(lambda t,e:t.replace(e[0],'Ternary(%d)'%e[1]),[['0',0],['1',1],['2',2],['P',a],['Q',b],['R',c]],s)\n\t\tif int(eval(t))==2: r+=1\n\tprint(r)\n\n",
        "correct": true,
        "task_id": "0431",
        "depth": 2
    },
    {
        "description": "From tomorrow, the long-awaited summer vacation will begin. So I decided to invite my friends to go out to the sea.\n\nHowever, many of my friends are shy. They would hate it if they knew that too many people would come with them.\n\nBesides, many of my friends want to stand out. They will probably hate it if they know that not many people come with them.\n\nAlso, some of my friends are always shy, though they always want to stand out. They will surely hate if too many or too few people come with them.\n\nThis kind of thing should be more fun to do in large numbers. That's why I want to invite as many friends as possible. However, it is not good to force a friend you dislike.\n\nHow many friends can I invite up to?\n\nI'm not very good at this kind of problem that seems to use my head. So I have a request for you. If you don't mind, could you solve this problem for me? No, I'm not overdoing it. But if I'm slacking off, I'm very happy.\n\n\n\nInput\n\nN\na1 b1\na2 b2\n..\n..\n..\naN bN\n\n\nThe integer N (1 \u2264 N \u2264 100,000) is written on the first line of the input. This represents the number of friends.\n\nOn the following N lines, the integer ai and the integer bi (2 \u2264 ai \u2264 bi \u2264 100,001) are written separated by blanks. The integers ai and bi written on the 1 + i line indicate that the i-th friend does not want to go to the sea unless the number of people going to the sea is ai or more and bi or less. Note that the number of people going to the sea includes \"I\".\n\nOutput\n\nOutput the maximum number of friends you can invite to the sea so that no friends dislike it.\n\nExamples\n\nInput\n\n4\n2 5\n4 7\n2 4\n3 6\n\n\nOutput\n\n3\n\n\nInput\n\n5\n8 100001\n7 100001\n12 100001\n8 100001\n3 100001\n\n\nOutput\n\n0\n\n\nInput\n\n6\n2 9\n4 8\n6 7\n6 6\n5 7\n2 100001\n\n\nOutput\n\n5",
        "task_name": "p01448 A Way to Invite Friends",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def appoint(x, l, h):\n    if l <= x <= h:\n        return 1\n    else:\n        return 0\n\n\nN = int(input())\nfriends = [list(map(int, input().split())) for i in range(N)]\nmin_group = min(x[0] for x in friends)\nmax_group = max(x[0] for x in friends)\n\nt = 0\nans = 1\nfor i in range(min_group, max_group):\n    z = sum([appoint(i + 1, lo, hi) for lo, hi in friends])\n    if i + 1 == z:\n        ans = z\n        t = 1\n    if t == 1 and i + 1 != z:\n        break\n\nprint(ans - 1)",
        "correct": false,
        "task_id": "0432",
        "depth": 1
    },
    {
        "description": "For a given sequence A = {a0, a1, ... , an-1}, find the length of the longest increasing subsequnece (LIS) in A.\n\nAn increasing subsequence of A is defined by a subsequence {ai0, ai1, ... , aik} where 0 \u2264 i0 < i1 < ... < ik < n and ai0 < ai1 < ... < aik.\n\nConstraints\n\n* 1 \u2264 n \u2264 100000\n* 0 \u2264 ai \u2264 109\n\nInput\n\n\nn\na0\na1\n:\nan-1\n\n\n\nIn the first line, an integer n is given. In the next n lines, elements of A are given.\n\nOutput\n\nThe length of the longest increasing subsequence of A.\n\nExamples\n\nInput\n\n5\n5\n1\n3\n2\n4\n\n\nOutput\n\n3\n\n\nInput\n\n3\n1\n1\n1\n\n\nOutput\n\n1",
        "task_name": "p02317 Longest Increasing Subsequence",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import bisect\nn=input()\na=[input() for i in xrange(n)]\ndp=[float('inf') for _ in xrange(n)]\nfor i in xrange(n):\n    dp[bisect.bisect_left(dp,a[i])]=a[i]\nfor i in xrange(n):\n    if dp[i]==float('inf'):\n        print(i)\n        break",
        "correct": false,
        "task_id": "0433",
        "depth": 1
    },
    {
        "description": "Enough is enough. Too many times it happened that Vasya forgot to dispose of garbage and his apartment stank afterwards. Now he wants to create a garbage disposal plan and stick to it.\n\nFor each of next n days Vasya knows a_i \u2014 number of units of garbage he will produce on the i-th day. Each unit of garbage must be disposed of either on the day it was produced or on the next day. Vasya disposes of garbage by putting it inside a bag and dropping the bag into a garbage container. Each bag can contain up to k units of garbage. It is allowed to compose and drop multiple bags into a garbage container in a single day.\n\nBeing economical, Vasya wants to use as few bags as possible. You are to compute the minimum number of bags Vasya needs to dispose of all of his garbage for the given n days. No garbage should be left after the n-th day.\n\nInput\n\nThe first line of the input contains two integers n and k (1 \u2264 n \u2264 2\u22c510^5, 1 \u2264 k \u2264 10^9) \u2014 number of days to consider and bag's capacity. The second line contains n space separated integers a_i (0 \u2264 a_i \u2264 10^9) \u2014 the number of units of garbage produced on the i-th day.\n\nOutput\n\nOutput a single integer \u2014 the minimum number of bags Vasya needs to dispose of all garbage. Each unit of garbage should be disposed on the day it was produced or on the next day. No garbage can be left after the n-th day. In a day it is allowed to compose and drop multiple bags.\n\nExamples\n\nInput\n\n3 2\n3 2 1\n\n\nOutput\n\n3\n\n\nInput\n\n5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n5000000000\n\n\nInput\n\n3 2\n1 0 1\n\n\nOutput\n\n2\n\n\nInput\n\n4 4\n2 8 4 1\n\n\nOutput\n\n4",
        "task_name": "1070_D. Garbage Disposal",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"\nWhat I cannot create, I do not understand.\n\nhttps://github.com/Cheran-Senthil/PyRival\nCopyright (c) 2018 Cheran Senthilkumar\n\"\"\"\n# IMPORTS---------------------------------------------------------------------#\nfrom __future__ import division, print_function\n\nimport itertools\nimport sys\nfrom atexit import register\nfrom io import BytesIO\n\n# import cmath\nimport math\n# import operator as op\n# import random\n# from bisect import bisect_left as bl, bisect_right as br\n# from collections import Counter, defaultdict, deque\n# from copy import deepcopy\n# from cPickle import dumps\n# from decimal import Decimal, getcontext\n# from difflib import SequenceMatcher\n# from fractions import Fraction, gcd\n# from heapq import heappop, heappush\n# from Queue import PriorityQueue, Queue\n\n\n# PYTHON3---------------------------------------------------------------------#\nclass dict(dict):\n    def items(self):\n        return dict.iteritems(self)\n\n    def keys(self):\n        return dict.iterkeys(self)\n\n    def values(self):\n        return dict.itervalues(self)\n\n\nfilter = itertools.ifilter\nmap = itertools.imap\nzip = itertools.izip\n\ninput = raw_input\nrange = xrange\n\n\n# FASTIO----------------------------------------------------------------------#\n# sys.stdout = BytesIO()\n# register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n# sys.stdin = BytesIO(sys.stdin.read())\n\n# input = lambda: sys.stdin.readline().rstrip()\n# print = lambda *args: sys.stdout.write(' '.join(str(x) for x in args) + '\\n')\n# flush = sys.stdout.flush\n\n\n# SETTINGS--------------------------------------------------------------------#\n# getcontext().prec = 100\n# sys.setrecursionlimit(32768)\n\n\n# CONSTANTS-------------------------------------------------------------------#\nMOD = 1000000007\nINF = float('+inf')\n\nASCII_LOWERCASE = 'abcdefghijklmnopqrstuvwxyz'\nASCII_UPPERCASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n\n# MAIN------------------------------------------------------------------------#\ndef helper(a, k):\n    bags, carry = 0, 0\n    for i in a:\n        if carry != 0:\n            bags += 1\n            i = max(0, i - carry)\n        bags += i // k\n        carry = i % k\n\n    if carry != 0:\n        bags += 1\n    \n    return bags\n\ndef main():\n    _, k = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    print(min(helper(a, k), helper(a[::-1], k)))\n\n    \n    \n\n\nif __name__ == '__main__':\n    main()\n",
        "correct": false,
        "task_id": "0435",
        "depth": 1
    },
    {
        "description": "You have a playlist consisting of n songs. The i-th song is characterized by two numbers t_i and b_i \u2014 its length and beauty respectively. The pleasure of listening to set of songs is equal to the total length of the songs in the set multiplied by the minimum beauty among them. For example, the pleasure of listening to a set of 3 songs having lengths [5, 7, 4] and beauty values [11, 14, 6] is equal to (5 + 7 + 4) \u22c5 6 = 96.\n\nYou need to choose at most k songs from your playlist, so the pleasure of listening to the set of these songs them is maximum possible.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 k \u2264 n \u2264 3 \u22c5 10^5) \u2013 the number of songs in the playlist and the maximum number of songs you can choose, respectively.\n\nEach of the next n lines contains two integers t_i and b_i (1 \u2264 t_i, b_i \u2264 10^6) \u2014 the length and beauty of i-th song.\n\nOutput\n\nPrint one integer \u2014 the maximum pleasure you can get.\n\nExamples\n\nInput\n\n\n4 3\n4 7\n15 1\n3 6\n6 8\n\n\nOutput\n\n\n78\n\n\nInput\n\n\n5 3\n12 31\n112 4\n100 100\n13 55\n55 50\n\n\nOutput\n\n\n10000\n\nNote\n\nIn the first test case we can choose songs {1, 3, 4}, so the total pleasure is (4 + 3 + 6) \u22c5 6 = 78.\n\nIn the second test case we can choose song 3. The total pleasure will be equal to 100 \u22c5 100 = 10000.",
        "task_name": "1140_C. Playlist",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport io\nimport os\nimport sys\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from cStringIO import StringIO\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    from io import BytesIO as StringIO\n\nsys.stdout, stream = io.IOBase(), StringIO()\nsys.stdout.flush = lambda: os.write(1, stream.getvalue()) and not stream.truncate(0) and stream.seek(0)\nsys.stdout.write = stream.write if sys.version_info[0] < 3 else lambda s: stream.write(s.encode())\n\ninput, flush = sys.stdin.readline, sys.stdout.flush\ninput = StringIO(os.read(0, os.fstat(0).st_size)).readline\n\n\ndef main():\n    n, k = map(int, input().split())\n    songs = [[int(i) for i in input().split()] for _ in range(n)]\n    songs = sorted(songs, key=lambda x: (-x[1], x[0]))\n\n    prefix = [0]\n    for i in songs:\n        prefix.append(prefix[-1] + i[0])\n\n\n    print(max((prefix[i + 1] - prefix[max(0, i + 1 - k)]) * songs[i][1] for i in range(n)))\n\n    #m = 0\n    #b = songs[0][1]\n    #for i, song in enumerate(songs):\n    #    if song[1] != b:\n    #        m = max(m, (prefix[i] - prefix[max(0, i - k)]) * b)\n    #    b = song[1]\n    #m = max(m, (prefix[n] - prefix[max(0, n - k)]) * b)\n\n    #print(m)\n\n\nif __name__ == '__main__':\n    main()\n",
        "correct": false,
        "task_id": "0436",
        "depth": 1
    },
    {
        "description": "Vasya has a pile, that consists of some number of stones. n times he either took one stone from the pile or added one stone to the pile. The pile was non-empty before each operation of taking one stone from the pile.\n\nYou are given n operations which Vasya has made. Find the minimal possible number of stones that can be in the pile after making these operations.\n\nInput\n\nThe first line contains one positive integer n \u2014 the number of operations, that have been made by Vasya (1 \u2264 n \u2264 100).\n\nThe next line contains the string s, consisting of n symbols, equal to \"-\" (without quotes) or \"+\" (without quotes). If Vasya took the stone on i-th operation, s_i is equal to \"-\" (without quotes), if added, s_i is equal to \"+\" (without quotes).\n\nOutput\n\nPrint one integer \u2014 the minimal possible number of stones that can be in the pile after these n operations.\n\nExamples\n\nInput\n\n\n3\n---\n\n\nOutput\n\n\n0\n\nInput\n\n\n4\n++++\n\n\nOutput\n\n\n4\n\nInput\n\n\n2\n-+\n\n\nOutput\n\n\n1\n\nInput\n\n\n5\n++-++\n\n\nOutput\n\n\n3\n\nNote\n\nIn the first test, if Vasya had 3 stones in the pile at the beginning, after making operations the number of stones will be equal to 0. It is impossible to have less number of piles, so the answer is 0. Please notice, that the number of stones at the beginning can't be less, than 3, because in this case, Vasya won't be able to take a stone on some operation (the pile will be empty).\n\nIn the second test, if Vasya had 0 stones in the pile at the beginning, after making operations the number of stones will be equal to 4. It is impossible to have less number of piles because after making 4 operations the number of stones in the pile increases on 4 stones. So, the answer is 4.\n\nIn the third test, if Vasya had 1 stone in the pile at the beginning, after making operations the number of stones will be equal to 1. It can be proved, that it is impossible to have less number of stones after making the operations.\n\nIn the fourth test, if Vasya had 0 stones in the pile at the beginning, after making operations the number of stones will be equal to 3.",
        "task_name": "1159_A. A pile of stones",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n\"\"\"<https://github.com/cheran-senthil/PyRival>\"\"\"\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    _str = str\n    str = lambda x=b\"\": x if type(x) is bytes else _str(x).encode()\n\n\ndef main():\n    n = int(input())\n    s = input()\n    cnt = 0\n    for i in range(n):\n        cnt += 1 if s[i] == '+' else -1\n        if cnt < 0:\n            cnt = 0\n    print(cnt)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._buffer = BytesIO()\n        self._fd = file.fileno()\n        self._writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self._buffer.write if self._writable else None\n\n    def read(self):\n        if self._buffer.tell():\n            return self._buffer.read()\n        return os.read(self._fd, os.fstat(self._fd).st_size)\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self._buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(b), self._buffer.seek(ptr)\n        self.newlines -= 1\n        return self._buffer.readline()\n\n    def flush(self):\n        if self._writable:\n            os.write(self._fd, self._buffer.getvalue())\n            self._buffer.truncate(0), self._buffer.seek(0)\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", b\" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", b\"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nsys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(b\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": true,
        "task_id": "0437",
        "depth": 1
    },
    {
        "description": "The only difference between the easy and the hard versions is the maximum value of k.\n\nYou are given an infinite sequence of form \"112123123412345...\" which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from 1 to 1, the second one \u2014 from 1 to 2, the third one \u2014 from 1 to 3, ..., the i-th block consists of all numbers from 1 to i. \n\nSo the first 56 elements of the sequence are \"11212312341234512345612345671234567812345678912345678910\". Elements of the sequence are numbered from one. For example, the 1-st element of the sequence is 1, the 3-rd element of the sequence is 2, the 20-th element of the sequence is 5, the 38-th element is 2, the 56-th element of the sequence is 0.\n\nYour task is to answer q independent queries. In the i-th query you are given one integer k_i. Calculate the digit at the position k_i of the sequence.\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 500) \u2014 the number of queries.\n\nThe i-th of the following q lines contains one integer k_i (1 \u2264 k_i \u2264 10^9) \u2014 the description of the corresponding query.\n\nOutput\n\nPrint q lines. In the i-th line print one digit x_i (0 \u2264 x_i \u2264 9) \u2014 the answer to the query i, i.e. x_i should be equal to the element at the position k_i of the sequence.\n\nExamples\n\nInput\n\n\n5\n1\n3\n20\n38\n56\n\n\nOutput\n\n\n1\n2\n5\n2\n0\n\n\nInput\n\n\n4\n2132\n506\n999999999\n1000000000\n\n\nOutput\n\n\n8\n2\n9\n8\n\nNote\n\nAnswers on queries from the first example are described in the problem statement.",
        "task_name": "1216_E1. Numerical Sequence (easy version)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s=''\nfor i in range(1,28342):\n    s+=str(i)\ndef getNthChar(n):\n    return s[n]\nP=28342\ndp=[0]*(P)\nfor i in range(1,10):\n    dp[i]=i\nfor i in range(10,100):\n    dp[i]=(i-9)*2+9\nprev=dp[99]\nfor i in range(100,1000):\n    dp[i]=(i-99)*3+dp[99]\nfor i in range(1000,10000):\n    dp[i]=(i-999)*4+dp[999]\nfor i in range(10000,P):\n    dp[i]=(i-9999)*5+dp[i-9999]\nfor i in range(1,P):\n    dp[i]+=dp[i-1]\n#print(dp[10**4])\nfor _ in range(int(raw_input())):\n    k=int(raw_input())\n    lo=0\n    hi=P-1\n    while lo<=hi:\n        mi=(lo+hi)>>1\n        if dp[mi]==k:\n            ans=mi\n            break\n        if dp[mi]<=k:\n            ans=mi\n            #print(ans)\n            lo=mi+1\n        else:\n            hi=mi-1\n    mi=ans\n    rem=k-dp[mi]\n    #print(rem)\n    print(getNthChar(rem-1))",
        "correct": false,
        "task_id": "0439",
        "depth": 2
    },
    {
        "description": "Ayoub thinks that he is a very smart person, so he created a function f(s), where s is a binary string (a string which contains only symbols \"0\" and \"1\"). The function f(s) is equal to the number of substrings in the string s that contains at least one symbol, that is equal to \"1\".\n\nMore formally, f(s) is equal to the number of pairs of integers (l, r), such that 1 \u2264 l \u2264 r \u2264 |s| (where |s| is equal to the length of string s), such that at least one of the symbols s_l, s_{l+1}, \u2026, s_r is equal to \"1\". \n\nFor example, if s = \"01010\" then f(s) = 12, because there are 12 such pairs (l, r): (1, 2), (1, 3), (1, 4), (1, 5), (2, 2), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 4), (4, 5).\n\nAyoub also thinks that he is smarter than Mahmoud so he gave him two integers n and m and asked him this problem. For all binary strings s of length n which contains exactly m symbols equal to \"1\", find the maximum value of f(s).\n\nMahmoud couldn't solve the problem so he asked you for help. Can you help him? \n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of the test cases follows.\n\nThe only line for each test case contains two integers n, m (1 \u2264 n \u2264 10^{9}, 0 \u2264 m \u2264 n) \u2014 the length of the string and the number of symbols equal to \"1\" in it.\n\nOutput\n\nFor every test case print one integer number \u2014 the maximum value of f(s) over all strings s of length n, which has exactly m symbols, equal to \"1\".\n\nExample\n\nInput\n\n\n5\n3 1\n3 2\n3 3\n4 0\n5 2\n\n\nOutput\n\n\n4\n5\n6\n0\n12\n\nNote\n\nIn the first test case, there exists only 3 strings of length 3, which has exactly 1 symbol, equal to \"1\". These strings are: s_1 = \"100\", s_2 = \"010\", s_3 = \"001\". The values of f for them are: f(s_1) = 3, f(s_2) = 4, f(s_3) = 3, so the maximum value is 4 and the answer is 4.\n\nIn the second test case, the string s with the maximum value is \"101\".\n\nIn the third test case, the string s with the maximum value is \"111\".\n\nIn the fourth test case, the only string s of length 4, which has exactly 0 symbols, equal to \"1\" is \"0000\" and the value of f for that string is 0, so the answer is 0.\n\nIn the fifth test case, the string s with the maximum value is \"01010\" and it is described as an example in the problem statement.",
        "task_name": "1301_C. Ayoub's function",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def f(n):\n\treturn n * (n + 1) / 2\n\nt = int(raw_input())\nfor i in xrange(t):\n\tn, m = map(int, (raw_input().split(\" \")))\n\t\n\tif m == 0:\n\t\tprint(0)\n\t\tcontinue\n\n\tmd = (n - m) % (m + 1)\n\td = (n - m) / (m + 1)\n\tprint(f(n) - md * f(d + 1) - (m + 1 - md) * f(d))\n\n",
        "correct": true,
        "task_id": "0441",
        "depth": 1
    },
    {
        "description": "You are given a tree consisting of n nodes. You want to write some labels on the tree's edges such that the following conditions hold:\n\n  * Every label is an integer between 0 and n-2 inclusive. \n  * All the written labels are distinct. \n  * The largest value among MEX(u,v) over all pairs of nodes (u,v) is as small as possible. \n\n\n\nHere, MEX(u,v) denotes the smallest non-negative integer that isn't written on any edge on the unique simple path from node u to node v.\n\nInput\n\nThe first line contains the integer n (2 \u2264 n \u2264 10^5) \u2014 the number of nodes in the tree.\n\nEach of the next n-1 lines contains two space-separated integers u and v (1 \u2264 u,v \u2264 n) that mean there's an edge between nodes u and v. It's guaranteed that the given graph is a tree.\n\nOutput\n\nOutput n-1 integers. The i^{th} of them will be the number written on the i^{th} edge (in the input order).\n\nExamples\n\nInput\n\n\n3\n1 2\n1 3\n\n\nOutput\n\n\n0\n1\n\n\nInput\n\n\n6\n1 2\n1 3\n2 4\n2 5\n5 6\n\n\nOutput\n\n\n0\n3\n2\n4\n1\n\nNote\n\nThe tree from the second sample:\n\n<image>",
        "task_name": "1325_C. Ehab and Path-etic MEXs",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nfrom itertools import repeat\ndef main():\n    n = int(stdin.readline())\n    dat = map(int, stdin.read().split(), repeat(10, 2 * n - 2))\n    d = [0] * n\n    p = [-1] * n\n    for i in xrange(n - 1):\n        x, y = dat[i*2] - 1, dat[i*2+1] - 1\n        d[x] += 1\n        d[y] += 1\n        p[x] = p[y] = i\n    c = 0\n    a = [-1] * (n - 1)\n    for i in xrange(n):\n        if d[i] == 1:\n            a[p[i]] = c\n            c += 1\n    for i in xrange(n - 1):\n        if a[i] == -1:\n            a[i] = c\n            c += 1\n    stdout.write('\\n'.join(map(str, a)))\nmain()\n",
        "correct": false,
        "task_id": "0442",
        "depth": 1
    },
    {
        "description": "A monopole magnet is a magnet that only has one pole, either north or south. They don't actually exist since real magnets have two poles, but this is a programming contest problem, so we don't care.\n\nThere is an n\u00d7 m grid. Initially, you may place some north magnets and some south magnets into the cells. You are allowed to place as many magnets as you like, even multiple in the same cell.\n\nAn operation is performed as follows. Choose a north magnet and a south magnet to activate. If they are in the same row or the same column and they occupy different cells, then the north magnet moves one unit closer to the south magnet. Otherwise, if they occupy the same cell or do not share a row or column, then nothing changes. Note that the south magnets are immovable.\n\nEach cell of the grid is colored black or white. Let's consider ways to place magnets in the cells so that the following conditions are met.\n\n  1. There is at least one south magnet in every row and every column. \n  2. If a cell is colored black, then it is possible for a north magnet to occupy this cell after some sequence of operations from the initial placement. \n  3. If a cell is colored white, then it is impossible for a north magnet to occupy this cell after some sequence of operations from the initial placement. \n\n\n\nDetermine if it is possible to place magnets such that these conditions are met. If it is possible, find the minimum number of north magnets required (there are no requirements on the number of south magnets).\n\nInput\n\nThe first line contains two integers n and m (1\u2264 n,m\u2264 1000) \u2014 the number of rows and the number of columns, respectively.\n\nThe next n lines describe the coloring. The i-th of these lines contains a string of length m, where the j-th character denotes the color of the cell in row i and column j. The characters \"#\" and \".\" represent black and white, respectively. It is guaranteed, that the string will not contain any other characters.\n\nOutput\n\nOutput a single integer, the minimum possible number of north magnets required.\n\nIf there is no placement of magnets that satisfies all conditions, print a single integer -1.\n\nExamples\n\nInput\n\n\n3 3\n.#.\n###\n##.\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n4 2\n##\n.#\n.#\n##\n\n\nOutput\n\n\n-1\n\n\nInput\n\n\n4 5\n....#\n####.\n.###.\n.#...\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n2 1\n.\n#\n\n\nOutput\n\n\n-1\n\n\nInput\n\n\n3 5\n.....\n.....\n.....\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first test, here is an example placement of magnets:\n\n<image>\n\nIn the second test, we can show that no required placement of magnets exists. Here are three example placements that fail to meet the requirements. The first example violates rule 3 since we can move the north magnet down onto a white square. The second example violates rule 2 since we cannot move the north magnet to the bottom-left black square by any sequence of operations. The third example violates rule 1 since there is no south magnet in the first column.\n\n<image>\n\nIn the third test, here is an example placement of magnets. We can show that there is no required placement of magnets with fewer north magnets.\n\n<image>\n\nIn the fourth test, we can show that no required placement of magnets exists. Here are two example placements that fail to meet the requirements. The first example violates rule 1 since there is no south magnet in the first row. The second example violates rules 1 and 3 since there is no south magnet in the second row and we can move the north magnet up one unit onto a white square.\n\n<image>\n\nIn the fifth test, we can put the south magnet in each cell and no north magnets. Because there are no black cells, it will be a correct placement.",
        "task_name": "1344_B. Monopole Magnets",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\nclass DisjointSetUnion:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n\n    def find(self, a):\n        acopy = a\n        while a != self.parent[a]:\n            a = self.parent[a]\n        while acopy != a:\n            self.parent[acopy], acopy = a, self.parent[acopy]\n        return a\n\n    def union(self, a, b):\n        a, b = self.find(a), self.find(b)\n        if a != b:\n            if self.size[a] < self.size[b]:\n                a, b = b, a\n\n            self.num_sets -= 1\n            self.parent[b] = a\n            self.size[a] += self.size[b]\n\n    def set_size(self, a):\n        return self.size[self.find(a)]\n\n    def __len__(self):\n        return self.num_sets\n\n\ndef main():\n    n, m = map(int, input().split())\n\n    dsu = DisjointSetUnion(n * m)\n\n    f_col = [-1] * n\n    f_row = [-1] * m\n\n    cols = set(range(n))\n    rows = set(range(m))\n\n    exists = True\n    black = False\n\n    white = 0\n    prev_row = '.' * m\n    for i in range(n):\n        row = input()\n        for j in range(m):\n            if row[j] == prev_row[j] == '#':\n                dsu.union((i * m) + j, ((i - 1) * m) + j)\n            if j and row[j] == row[j - 1] == '#':\n                dsu.union((i * m) + j, (i * m) + j - 1)\n\n            if row[j] == '#':\n                black = True\n                f_col[i] = f_col[i] if f_col[i] != -1 else j\n                f_row[j] = f_row[j] if f_row[j] != -1 else i\n                exists &= abs(f_col[i] - j) < 2\n                exists &= abs(f_row[j] - i) < 2\n                f_col[i] = j\n                f_row[j] = i\n                cols.discard(i)\n                rows.discard(j)\n            else:\n                white += 1\n\n        prev_row = row\n\n    if (((not cols) and (not rows)) or (not black)) and exists:\n        print(len(dsu) - white)\n    else:\n        print(-1)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": false,
        "task_id": "0443",
        "depth": 2
    },
    {
        "description": "You are given an array consisting of n integers a_1, a_2, ..., a_n. Initially a_x = 1, all other elements are equal to 0.\n\nYou have to perform m operations. During the i-th operation, you choose two indices c and d such that l_i \u2264 c, d \u2264 r_i, and swap a_c and a_d.\n\nCalculate the number of indices k such that it is possible to choose the operations so that a_k = 1 in the end.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then the description of t testcases follow.\n\nThe first line of each test case contains three integers n, x and m (1 \u2264 n \u2264 10^9; 1 \u2264 m \u2264 100; 1 \u2264 x \u2264 n).\n\nEach of next m lines contains the descriptions of the operations; the i-th line contains two integers l_i and r_i (1 \u2264 l_i \u2264 r_i \u2264 n).\n\nOutput\n\nFor each test case print one integer \u2014 the number of indices k such that it is possible to choose the operations so that a_k = 1 in the end.\n\nExample\n\nInput\n\n\n3\n6 4 3\n1 6\n2 3\n5 5\n4 1 2\n2 4\n1 2\n3 3 2\n2 3\n1 2\n\n\nOutput\n\n\n6\n2\n3\n\nNote\n\nIn the first test case, it is possible to achieve a_k = 1 for every k. To do so, you may use the following operations:\n\n  1. swap a_k and a_4; \n  2. swap a_2 and a_2; \n  3. swap a_5 and a_5. \n\n\n\nIn the second test case, only k = 1 and k = 2 are possible answers. To achieve a_1 = 1, you have to swap a_1 and a_1 during the second operation. To achieve a_2 = 1, you have to swap a_1 and a_2 during the second operation.",
        "task_name": "1366_B. Shuffle",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "FAST_IO = 1\nif FAST_IO:\n    import io, sys, atexit\n    rr = iter(sys.stdin.read().splitlines()).next\n    sys.stdout = _OUTPUT_BUFFER = io.BytesIO()\n    @atexit.register\n    def write():\n        sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\nelse:\n    rr = raw_input\nrri = lambda: int(rr())\nrrm = lambda: map(int, rr().split())\n                  \ndef solve(arr, n, x, m):\n    ans = 1\n    before = [x,x]\n    for a, b in arr:\n        if a<=before[0] and before[0]<=b<=before[1]:\n            ans+=before[0] -a\n            before = [a, before[1]]\n        elif before[0]<=a<=before[1] and b>=before[1]:\n            ans += b-before[1]\n            before = [before[0], b]\n        elif a<=before[0] and b>=before[1]:\n            ans += before[0]-a\n            ans+= b-before[1]\n            before = [a, b]\n    return ans\nt  = rri()\nfor _ in range(t):\n    n, x, m = rrm()\n    arr = []\n    for _ in range(m):\n        arr.append(rrm())\n    print(solve(arr, n, x, m))\n    ",
        "correct": true,
        "task_id": "0444",
        "depth": 2
    },
    {
        "description": "You are given a non-decreasing array of non-negative integers a_1, a_2, \u2026, a_n. Also you are given a positive integer k.\n\nYou want to find m non-decreasing arrays of non-negative integers b_1, b_2, \u2026, b_m, such that:\n\n  * The size of b_i is equal to n for all 1 \u2264 i \u2264 m. \n  * For all 1 \u2264 j \u2264 n, a_j = b_{1, j} + b_{2, j} + \u2026 + b_{m, j}. In the other word, array a is the sum of arrays b_i. \n  * The number of different elements in the array b_i is at most k for all 1 \u2264 i \u2264 m. \n\n\n\nFind the minimum possible value of m, or report that there is no possible m.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100): the number of test cases.\n\nThe first line of each test case contains two integers n, k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 n).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_1 \u2264 a_2 \u2264 \u2026 \u2264 a_n \u2264 100, a_n > 0).\n\nOutput\n\nFor each test case print a single integer: the minimum possible value of m. If there is no such m, print -1.\n\nExample\n\nInput\n\n\n6\n4 1\n0 0 0 1\n3 1\n3 3 3\n11 3\n0 1 2 2 3 3 3 4 4 4 4\n5 3\n1 2 3 4 5\n9 4\n2 2 3 5 7 11 13 13 17\n10 7\n0 1 1 2 3 3 4 5 5 6\n\n\nOutput\n\n\n-1\n1\n2\n2\n2\n1\n\nNote\n\nIn the first test case, there is no possible m, because all elements of all arrays should be equal to 0. But in this case, it is impossible to get a_4 = 1 as the sum of zeros.\n\nIn the second test case, we can take b_1 = [3, 3, 3]. 1 is the smallest possible value of m.\n\nIn the third test case, we can take b_1 = [0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2] and b_2 = [0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2]. It's easy to see, that a_i = b_{1, i} + b_{2, i} for all i and the number of different elements in b_1 and in b_2 is equal to 3 (so it is at most 3). It can be proven that 2 is the smallest possible value of m.",
        "task_name": "1408_B. Arrays Sum",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n# Author : raj1307 - Raj Singh\n# Date   : 01.10.2020\n\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii():  return int(input())\ndef si():  return input()\ndef mi():  return map(int,input().strip().split(\" \"))\ndef msi(): return map(str,input().strip().split(\" \"))\ndef li():  return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(1000000)\n    threading.stack_size(1024000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import log,sqrt,factorial,cos,tan,sin,radians\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *\n#import threading\n#from itertools import permutations\n#Copy 2D list  m = [x[:] for x in mark] .. Avoid Using Deepcopy\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[1] \ndef sort2(l):return sorted(l, key=getKey,reverse=True)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\ndef ncr(n,r): return factorial(n)//(factorial(r)*factorial(max(n-r,1)))\n\ndef ceil(x,y):\n    if x%y==0:\n        return x//y\n    else:\n        return x//y+1\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n\ndef read():\n    sys.stdin  = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\n\n\n\n\n\ndef main():\n\n    \n    for _ in range(ii()):\n        \n            \n        n,k=mi()\n        a=li()\n\n        cnt=0\n        for i in range(1,n):\n            if a[i]!=a[i-1]:\n                cnt+=1\n\n        if k==1:\n            if cnt==0:\n                print(1)\n            else:\n                print(-1)\n            continue\n\n        print(max(1,ceil(cnt,k-1)))\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# region fastio\n# template taken from https://github.com/cheran-senthil/PyRival/blob/master/templates/template.py\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    #read()\n    main()\n    #dmain()\n\n# Comment Read()\n",
        "correct": true,
        "task_id": "0445",
        "depth": 2
    },
    {
        "description": "Masha works in an advertising agency. In order to promote the new brand, she wants to conclude contracts with some bloggers. In total, Masha has connections of n different bloggers. Blogger numbered i has a_i followers.\n\nSince Masha has a limited budget, she can only sign a contract with k different bloggers. Of course, Masha wants her ad to be seen by as many people as possible. Therefore, she must hire bloggers with the maximum total number of followers.\n\nHelp her, find the number of ways to select k bloggers so that the total number of their followers is maximum possible. Two ways are considered different if there is at least one blogger in the first way, which is not in the second way. Masha believes that all bloggers have different followers (that is, there is no follower who would follow two different bloggers).\n\nFor example, if n=4, k=3, a=[1, 3, 1, 2], then Masha has two ways to select 3 bloggers with the maximum total number of followers: \n\n  * conclude contracts with bloggers with numbers 1, 2 and 4. In this case, the number of followers will be equal to a_1 + a_2 + a_4 = 6. \n  * conclude contracts with bloggers with numbers 2, 3 and 4. In this case, the number of followers will be equal to a_2 + a_3 + a_4 = 6. \n\n\n\nSince the answer can be quite large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains two integers n and k (1 \u2264 k \u2264 n \u2264 1000) \u2014 the number of bloggers and how many of them you can sign a contract with.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026 a_n (1 \u2264 a_i \u2264 n) \u2014 the number of followers of each blogger.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 1000.\n\nOutput\n\nFor each test case, on a separate line output one integer \u2014 the number of ways to select k bloggers so that the total number of their followers is maximum possible.\n\nExample\n\nInput\n\n\n3\n4 3\n1 3 1 2\n4 2\n1 1 1 1\n2 1\n1 2\n\n\nOutput\n\n\n2\n6\n1\n\nNote\n\nThe test case is explained in the statements.\n\nIn the second test case, the following ways are valid: \n\n  * conclude contracts with bloggers with numbers 1 and 2. In this case, the number of followers will be equal to a_1 + a_2 = 2; \n  * conclude contracts with bloggers with numbers 1 and 3. In this case, the number of followers will be equal to a_1 + a_3 = 2; \n  * conclude contracts with bloggers with numbers 1 and 4. In this case, the number of followers will be equal to a_1 + a_4 = 2; \n  * conclude contracts with bloggers with numbers 2 and 3. In this case, the number of followers will be equal to a_2 + a_3 = 2; \n  * conclude contracts with bloggers with numbers 2 and 4. In this case, the number of followers will be equal to a_2 + a_4 = 2; \n  * conclude contracts with bloggers with numbers 3 and 4. In this case, the number of followers will be equal to a_3 + a_4 = 2. \n\n\n\nIn the third test case, the following ways are valid: \n\n  * concludes a contract with a blogger with the number 2. In this case, the number of followers will be equal to a_2 = 2. ",
        "task_name": "1475_E. Advertising Agency",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#   Template by yumtam\n#   Author: babaiserror\n#   Created at: 2021-01-25 11:04\n\nfrom __future__ import division, print_function\n_interactive = False\n\nfact = [1]\n\ndef mod_mul(a, b):\n    return (a*b) % MOD\n\ndef mod_fact(n):\n    if len(fact) >= n:\n        return fact[n-1]\n    else:\n        i = len(fact) + 1\n        while i <= n:\n            fact.append(mod_mul(fact[-1],i))\n            i += 1\n        return fact[-1]\n\ndef pow_mod(x, n):\n    y = 1\n    while n > 0:\n        if n % 2:\n            y = mod_mul(y,x)\n        n = n // 2\n        x = mod_mul(x,x)\n    return y\n\ndef nCr(n, r):\n    if n == r: return 1\n    return mod_mul(mod_fact(n), pow_mod(mod_mul(mod_fact(r), mod_fact(n-r)), MOD-2))\n\n\ndef main():\n    for _ in range(int(input())):\n        n,k = input_as_list()\n        freq = {}\n        A = input_as_list()\n        for elem in A:\n            if elem not in freq:\n                freq[elem] = 1\n            else:\n                freq[elem] += 1\n\n        ans = 0\n        for elem in sorted(freq.keys(), reverse=True):\n            if freq[elem] < k:\n                k -= freq[elem]\n            else:\n                ans = nCr(freq[elem], k)\n        print(ans)\n\n\n# Constants\nINF = float('inf')\nMOD = 10**9+7\n\n# Python3 equivalent names\nimport os, sys, itertools\nif sys.version_info[0] < 3:\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\n# print-flush in interactive problems\nif _interactive:\n    flush = sys.stdout.flush\n    def printf(*args, **kwargs):\n        print(*args, **kwargs)\n        flush()\n\n# Debug print, only works on local machine\nLOCAL = \"LOCAL_\" in os.environ\ndebug_print = (print) if LOCAL else (lambda *x, **y: None)\n\n# Fast IO\nif (not LOCAL) and (not _interactive):\n    from io import BytesIO\n    from atexit import register\n    sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\n    sys.stdout = BytesIO()\n    register(lambda: os.write(1, sys.stdout.getvalue()))\n    input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# Some utility functions(Input, N-dimensional lists, ...)\ndef input_as_list():\n    return [int(x) for x in input().split()]\n\ndef input_with_offset(o):\n    return [int(x)+o for x in input().split()]\n\ndef input_as_matrix(n, m):\n    return [input_as_list() for _ in range(n)]\n\ndef array_of(f, *dim):\n    return [array_of(f, *dim[1:]) for _ in range(dim[0])] if dim else f()\n\n# Start of external code templates...\n# End of external code templates.\n\nmain()",
        "correct": false,
        "task_id": "0447",
        "depth": 2
    },
    {
        "description": "One day, as Sherlock Holmes was tracking down one very important criminal, he found a wonderful painting on the wall. This wall could be represented as a plane. The painting had several concentric circles that divided the wall into several parts. Some parts were painted red and all the other were painted blue. Besides, any two neighboring parts were painted different colors, that is, the red and the blue color were alternating, i. e. followed one after the other. The outer area of the wall (the area that lied outside all circles) was painted blue. Help Sherlock Holmes determine the total area of red parts of the wall.\n\nLet us remind you that two circles are called concentric if their centers coincide. Several circles are called concentric if any two of them are concentric.\n\nInput\n\nThe first line contains the single integer n (1 \u2264 n \u2264 100). The second line contains n space-separated integers ri (1 \u2264 ri \u2264 1000) \u2014 the circles' radii. It is guaranteed that all circles are different.\n\nOutput\n\nPrint the single real number \u2014 total area of the part of the wall that is painted red. The answer is accepted if absolute or relative error doesn't exceed 10 - 4.\n\nExamples\n\nInput\n\n1\n1\n\n\nOutput\n\n3.1415926536\n\n\nInput\n\n3\n1 4 2\n\n\nOutput\n\n40.8407044967\n\nNote\n\nIn the first sample the picture is just one circle of radius 1. Inner part of the circle is painted red. The area of the red part equals \u03c0 \u00d7 12 = \u03c0.\n\nIn the second sample there are three circles of radii 1, 4 and 2. Outside part of the second circle is painted blue. Part between the second and the third circles is painted red. Part between the first and the third is painted blue. And, finally, the inner part of the first circle is painted red. Overall there are two red parts: the ring between the second and the third circles and the inner part of the first circle. Total area of the red parts is equal (\u03c0 \u00d7 42 - \u03c0 \u00d7 22) + \u03c0 \u00d7 12 = \u03c0 \u00d7 12 + \u03c0 = 13\u03c0",
        "task_name": "157_B. Trace",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport math\n\nnCircles = int(sys.stdin.readline())\n\nif nCircles < 1:\n    sys.stdout.write('0\\n')\n    sys.exit()\n\nareas = []\ninput = sys.stdin.readline()\nfor radius in input.split(' '):\n    areas.append(int(radius)*int(radius))\n\nareas.sort()\n\ntotalArea = 0\nfor index, area in enumerate(areas):\n    if index == 0:\n        totalArea += area\n    elif index % 2 == 0:\n        totalArea += (areas[index] - areas[index-1])\n\ntotalArea *= math.pi\nsys.stdout.write(str(totalArea)+'\\n')\n",
        "correct": false,
        "task_id": "0449",
        "depth": 1
    },
    {
        "description": "Dima's got a staircase that consists of n stairs. The first stair is at height a1, the second one is at a2, the last one is at an (1 \u2264 a1 \u2264 a2 \u2264 ... \u2264 an). \n\nDima decided to play with the staircase, so he is throwing rectangular boxes at the staircase from above. The i-th box has width wi and height hi. Dima throws each box vertically down on the first wi stairs of the staircase, that is, the box covers stairs with numbers 1, 2, ..., wi. Each thrown box flies vertically down until at least one of the two following events happen:\n\n  * the bottom of the box touches the top of a stair; \n  * the bottom of the box touches the top of a box, thrown earlier. \n\n\n\nWe only consider touching of the horizontal sides of stairs and boxes, at that touching with the corners isn't taken into consideration. Specifically, that implies that a box with width wi cannot touch the stair number wi + 1.\n\nYou are given the description of the staircase and the sequence in which Dima threw the boxes at it. For each box, determine how high the bottom of the box after landing will be. Consider a box to fall after the previous one lands.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 105) \u2014 the number of stairs in the staircase. The second line contains a non-decreasing sequence, consisting of n integers, a1, a2, ..., an (1 \u2264 ai \u2264 109; ai \u2264 ai + 1).\n\nThe next line contains integer m (1 \u2264 m \u2264 105) \u2014 the number of boxes. Each of the following m lines contains a pair of integers wi, hi (1 \u2264 wi \u2264 n; 1 \u2264 hi \u2264 109) \u2014 the size of the i-th thrown box.\n\nThe numbers in the lines are separated by spaces.\n\nOutput\n\nPrint m integers \u2014 for each box the height, where the bottom of the box will be after landing. Print the answers for the boxes in the order, in which the boxes are given in the input.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nExamples\n\nInput\n\n5\n1 2 3 6 6\n4\n1 1\n3 1\n1 1\n4 3\n\n\nOutput\n\n1\n3\n4\n6\n\n\nInput\n\n3\n1 2 3\n2\n1 1\n3 1\n\n\nOutput\n\n1\n3\n\n\nInput\n\n1\n1\n5\n1 2\n1 10\n1 10\n1 10\n1 10\n\n\nOutput\n\n1\n3\n13\n23\n33\n\nNote\n\nThe first sample are shown on the picture.\n\n<image>",
        "task_name": "272_C. Dima and Staircase",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function, division\ninput = raw_input\n\n\nm = int(input())\na = map(int, input().split())\n\ncur_h = 0\nn = int(input())\nfor i in xrange(n):\n    w, h = map(int, input().split())\n    ch = a[w-1]    \n    if ch > cur_h:\n        print(ch)\n        cur_h = ch + h\n    else:\n        print(cur_h)\n        cur_h += h\n        \n    \n",
        "correct": true,
        "task_id": "0451",
        "depth": 1
    },
    {
        "description": "Kalila and Dimna are two jackals living in a huge jungle. One day they decided to join a logging factory in order to make money. \n\nThe manager of logging factory wants them to go to the jungle and cut n trees with heights a1, a2, ..., an. They bought a chain saw from a shop. Each time they use the chain saw on the tree number i, they can decrease the height of this tree by one unit. Each time that Kalila and Dimna use the chain saw, they need to recharge it. Cost of charging depends on the id of the trees which have been cut completely (a tree is cut completely if its height equal to 0). If the maximum id of a tree which has been cut completely is i (the tree that have height ai in the beginning), then the cost of charging the chain saw would be bi. If no tree is cut completely, Kalila and Dimna cannot charge the chain saw. The chainsaw is charged in the beginning. We know that for each i < j, ai < aj and bi > bj and also bn = 0 and a1 = 1. Kalila and Dimna want to cut all the trees completely, with minimum cost. \n\nThey want you to help them! Will you?\n\nInput\n\nThe first line of input contains an integer n (1 \u2264 n \u2264 105). The second line of input contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 109). The third line of input contains n integers b1, b2, ..., bn (0 \u2264 bi \u2264 109).\n\nIt's guaranteed that a1 = 1, bn = 0, a1 < a2 < ... < an and b1 > b2 > ... > bn.\n\nOutput\n\nThe only line of output must contain the minimum cost of cutting all the trees completely.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nExamples\n\nInput\n\n5\n1 2 3 4 5\n5 4 3 2 0\n\n\nOutput\n\n25\n\n\nInput\n\n6\n1 2 3 10 20 30\n6 5 4 3 2 0\n\n\nOutput\n\n138",
        "task_name": "319_C. Kalila and Dimna in the Logging Industry",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "class pt(object):\n  def __init__(self, x = 0, y = 0):\n    self.x = x\n    self.y = y\n\n  def __sub__(self, other):\n    return pt(self.x-other.x, self.y-other.y)\n\n  def __mod__(self, other):\n    return self.x * other.y - self.y * other.x\n\nT = []\nini = 0\nfin = 0\n\ndef add(x, y):\n  p = pt(x, y)\n  global T, fin\n  while fin - ini >= 2 and\\\n      (p-T[fin-1]) % (p-T[fin-2]) <= 0:\n    fin -= 1\n  T[fin] = p\n  fin += 1\n\ndef remove(x):\n  global T, ini\n  while fin - ini >= 2 and\\\n      T[ini].x*x + T[ini].y > T[ini+1].x*x + T[ini+1].y:\n        ini += 1\n\nn = int(raw_input())\nT = [pt()] * n\nA = [int(x) for x in raw_input().split()]\nB = [int(x) for x in raw_input().split()]\n\nres_a = 0\n\nfor i in xrange(1, n):\n  add(B[i-1], res_a)\n  remove(A[i])\n  res = T[ini].x*A[i] + T[ini].y\n  res_a = res\n\nprint(res)\n",
        "correct": true,
        "task_id": "0452",
        "depth": 1
    },
    {
        "description": "Permutation p is an ordered set of integers p1, p2, ..., pn, consisting of n distinct positive integers not larger than n. We'll denote as n the length of permutation p1, p2, ..., pn.\n\nYour task is to find such permutation p of length n, that the group of numbers |p1 - p2|, |p2 - p3|, ..., |pn - 1 - pn| has exactly k distinct elements.\n\nInput\n\nThe single line of the input contains two space-separated positive integers n, k (1 \u2264 k < n \u2264 105).\n\nOutput\n\nPrint n integers forming the permutation. If there are multiple answers, print any of them.\n\nExamples\n\nInput\n\n3 2\n\n\nOutput\n\n1 3 2\n\n\nInput\n\n3 1\n\n\nOutput\n\n1 2 3\n\n\nInput\n\n5 2\n\n\nOutput\n\n1 3 2 4 5\n\nNote\n\nBy |x| we denote the absolute value of number x. ",
        "task_name": "483_C. Diverse Permutation",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def main(data):\n    n, k = map(int, data.split())\n    result = [0]\n    n -= 1\n    k -= 1\n    cur_delta = 0\n    while k < n and n > 0:\n        result.append(result[-1] + 1)\n        n -= 1\n        cur_delta += 1\n    while n > 0:\n        if cur_delta > 0:\n            cur_delta = -(cur_delta + 1)\n        else:\n            cur_delta = -(cur_delta - 1)\n        result.append(result[-1] + cur_delta)\n        n -= 1\n    m = min(result)\n    for r in result:\n        print (r-m)+1,\n\nimport sys\nmain(sys.stdin.readline())\n",
        "correct": true,
        "task_id": "0454",
        "depth": 1
    },
    {
        "description": "A guy named Vasya attends the final grade of a high school. One day Vasya decided to watch a match of his favorite hockey team. And, as the boy loves hockey very much, even more than physics, he forgot to do the homework. Specifically, he forgot to complete his physics tasks. Next day the teacher got very angry at Vasya and decided to teach him a lesson. He gave the lazy student a seemingly easy task: You are given an idle body in space and the forces that affect it. The body can be considered as a material point with coordinates (0; 0; 0). Vasya had only to answer whether it is in equilibrium. \"Piece of cake\" \u2014 thought Vasya, we need only to check if the sum of all vectors is equal to 0. So, Vasya began to solve the problem. But later it turned out that there can be lots and lots of these forces, and Vasya can not cope without your help. Help him. Write a program that determines whether a body is idle or is moving by the given vectors of forces.\n\nInput\n\nThe first line contains a positive integer n (1 \u2264 n \u2264 100), then follow n lines containing three integers each: the xi coordinate, the yi coordinate and the zi coordinate of the force vector, applied to the body ( - 100 \u2264 xi, yi, zi \u2264 100).\n\nOutput\n\nPrint the word \"YES\" if the body is in equilibrium, or the word \"NO\" if it is not.\n\nExamples\n\nInput\n\n3\n4 1 7\n-2 4 -1\n1 -5 -3\n\n\nOutput\n\nNO\n\nInput\n\n3\n3 -1 7\n-5 2 -4\n2 -1 -3\n\n\nOutput\n\nYES",
        "task_name": "69_A. Young Physicist",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "class Vector:\n    def __init__(self, x = 0, y = 0, z = 0):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __add__(self, v):\n        ans = Vector(self.x + v.x, self.y + v.y, self.z + v.z)\n        return ans\n\n    def __sub__(self, v):\n        ans = Vector(self.x - v.x, self.y - v.y, self.z - v.z)\n        return ans\n\n    def __str__(self):\n        return \"x: %d y: %d z: %d\"%(self.x, self.y, self.z)\n\n    def inEquilibrium(self):\n        return \"YES\" if self.x == 0 and self.y == 0 and self.z == 0 else \"NO\"\n\nn = int(raw_input())\n\nv_list = []\nwhile(n > 0):\n    s = list(map(int, raw_input().split()))\n    v = Vector(s[0], s[1], s[2])\n    v_list.append(v)\n    n -= 1\n\n_sum = Vector()\nfor v in v_list:\n    _sum -= v\n\nprint(_sum.inEquilibrium())\n",
        "correct": true,
        "task_id": "0458",
        "depth": 1
    },
    {
        "description": "Masha really loves algebra. On the last lesson, her strict teacher Dvastan gave she new exercise.\n\nYou are given geometric progression b defined by two integers b1 and q. Remind that a geometric progression is a sequence of integers b1, b2, b3, ..., where for each i > 1 the respective term satisfies the condition bi = bi - 1\u00b7q, where q is called the common ratio of the progression. Progressions in Uzhlyandia are unusual: both b1 and q can equal 0. Also, Dvastan gave Masha m \"bad\" integers a1, a2, ..., am, and an integer l.\n\nMasha writes all progression terms one by one onto the board (including repetitive) while condition |bi| \u2264 l is satisfied (|x| means absolute value of x). There is an exception: if a term equals one of the \"bad\" integers, Masha skips it (doesn't write onto the board) and moves forward to the next term.\n\nBut the lesson is going to end soon, so Masha has to calculate how many integers will be written on the board. In order not to get into depression, Masha asked you for help: help her calculate how many numbers she will write, or print \"inf\" in case she needs to write infinitely many integers.\n\nInput\n\nThe first line of input contains four integers b1, q, l, m (-109 \u2264 b1, q \u2264 109, 1 \u2264 l \u2264 109, 1 \u2264 m \u2264 105) \u2014 the initial term and the common ratio of progression, absolute value of maximal number that can be written on the board and the number of \"bad\" integers, respectively.\n\nThe second line contains m distinct integers a1, a2, ..., am (-109 \u2264 ai \u2264 109) \u2014 numbers that will never be written on the board.\n\nOutput\n\nPrint the only integer, meaning the number of progression terms that will be written on the board if it is finite, or \"inf\" (without quotes) otherwise.\n\nExamples\n\nInput\n\n3 2 30 4\n6 14 25 48\n\n\nOutput\n\n3\n\nInput\n\n123 1 2143435 4\n123 11 -5453 141245\n\n\nOutput\n\n0\n\nInput\n\n123 1 2143435 4\n54343 -13 6 124\n\n\nOutput\n\ninf\n\nNote\n\nIn the first sample case, Masha will write integers 3, 12, 24. Progression term 6 will be skipped because it is a \"bad\" integer. Terms bigger than 24 won't be written because they exceed l by absolute value.\n\nIn the second case, Masha won't write any number because all terms are equal 123 and this is a \"bad\" integer.\n\nIn the third case, Masha will write infinitely integers 123. ",
        "task_name": "789_B. Masha and geometric depression",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom collections import *\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nb1, q, l, m = rints()\na, ans, vis = set(rints()), 0, defaultdict(int)\n\nwhile abs(b1) <= l and vis[b1] < 2:\n    if vis[b1] and b1 not in a:\n        print('inf')\n        exit()\n\n    ans += (b1 not in a and not vis[b1])\n    vis[b1] += 1\n    b1 *= q\n\nprint(ans)\n",
        "correct": true,
        "task_id": "0460",
        "depth": 1
    },
    {
        "description": "For some reason in many American cartoons anvils fall from time to time onto heroes' heads. Of course, safes, wardrobes, cruisers, planes fall sometimes too... But anvils do so most of all.\n\nAnvils come in different sizes and shapes. Quite often they get the hero stuck deep in the ground. But have you ever thought who throws anvils from the sky? From what height? We are sure that such questions have never troubled you!\n\nIt turns out that throwing an anvil properly is not an easy task at all. Let's describe one of the most popular anvil throwing models.\n\nLet the height p of the potential victim vary in the range [0;a] and the direction of the wind q vary in the range [ - b;b]. p and q could be any real (floating) numbers. Then we can assume that the anvil will fit the toon's head perfectly only if the following equation has at least one real root: \n\n<image>\n\nDetermine the probability with which an aim can be successfully hit by an anvil.\n\nYou can assume that the p and q coefficients are chosen equiprobably and independently in their ranges.\n\nInput\n\nThe first line contains integer t (1 \u2264 t \u2264 10000) \u2014 amount of testcases.\n\nEach of the following t lines contain two space-separated integers a and b (0 \u2264 a, b \u2264 106).\n\nPretests contain all the tests with 0 < a < 10, 0 \u2264 b < 10.\n\nOutput\n\nPrint t lines \u2014 the probability of a successful anvil hit for each testcase. The absolute or relative error of the answer should not exceed 10 - 6.\n\nExamples\n\nInput\n\n2\n4 2\n1 2\n\n\nOutput\n\n0.6250000000\n0.5312500000",
        "task_name": "80_D. Falling Anvils",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "t = int(raw_input())\nfor i in range(0, t):\n    a, b = map(int, raw_input().split())\n    if(b == 0):\n        print(1)\n        continue\n    if(a == 0):\n        print(0.5)\n        continue\n    p = a * b + max(a-4*b, 0) * b\n    q = a * 2 * b\n    a = min(a, 4 * b)\n    p = p + a * a / 8.0\n    print(p / (1.0 * q))",
        "correct": true,
        "task_id": "0461",
        "depth": 1
    },
    {
        "description": "Two best friends Serozha and Gena play a game.\n\nInitially there is one pile consisting of n stones on the table. During one move one pile should be taken and divided into an arbitrary number of piles consisting of a1 > a2 > ... > ak > 0 stones. The piles should meet the condition a1 - a2 = a2 - a3 = ... = ak - 1 - ak = 1. Naturally, the number of piles k should be no less than two.\n\nThe friends play in turns. The player who cannot make a move loses. Serozha makes the first move. Who will win if both players play in the optimal way?\n\nInput\n\nThe single line contains a single integer n (1 \u2264 n \u2264 105).\n\nOutput\n\nIf Serozha wins, print k, which represents the minimal number of piles into which he can split the initial one during the first move in order to win the game.\n\nIf Gena wins, print \"-1\" (without the quotes).\n\nExamples\n\nInput\n\n3\n\n\nOutput\n\n2\n\n\nInput\n\n6\n\n\nOutput\n\n-1\n\n\nInput\n\n100\n\n\nOutput\n\n8",
        "task_name": "87_C. Interesting Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n\n\nn = input()\n\n\nspg = [0] * (n + 1)\nxor = [0] * (n + 1)\n\nfor i in range(3, n + 1):\n    k = 2\n    movs = set()\n    while k * (k + 1) <= 2 * i:\n        s = 2 * i - k * (k - 1)\n\n        if s % (2 * k) == 0:\n            a = s / 2 / k\n            movs.add(xor[a + k - 1] ^ xor[a - 1])\n        k += 1\n\n    mex = 0\n    while mex in movs:\n        mex += 1\n    spg[i] = mex\n    xor[i] = xor[i - 1] ^ mex\n\nif spg[n]:\n    k = 2\n    while k * (k + 1) <= 2 * i:\n        s = 2 * i - k * (k - 1)\n\n        if s % (2 * k) == 0:\n            a = s / 2 / k\n            if (xor[a + k - 1] ^ xor[a - 1]) == 0:\n                break\n        k += 1\n    print(k)\nelse:\n    print(-1)\n",
        "correct": true,
        "task_id": "0463",
        "depth": 2
    },
    {
        "description": "There are N cells arranged in a row, numbered 1, 2, \\ldots, N from left to right.\n\nTak lives in these cells and is currently on Cell 1. He is trying to reach Cell N by using the procedure described below.\n\nYou are given an integer K that is less than or equal to 10, and K non-intersecting segments [L_1, R_1], [L_2, R_2], \\ldots, [L_K, R_K]. Let S be the union of these K segments. Here, the segment [l, r] denotes the set consisting of all integers i that satisfy l \\leq i \\leq r.\n\n* \bWhen you are on Cell i, pick an integer d from S and move to Cell i + d. You cannot move out of the cells.\n\n\n\nTo help Tak, find the number of ways to go to Cell N, modulo 998244353.\n\nConstraints\n\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq K \\leq \\min(N, 10)\n* 1 \\leq L_i \\leq R_i \\leq N\n* [L_i, R_i] and [L_j, R_j] do not intersect (i \\neq j)\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nL_1 R_1\nL_2 R_2\n:\nL_K R_K\n\n\nOutput\n\nPrint the number of ways for Tak to go from Cell 1 to Cell N, modulo 998244353.\n\nExamples\n\nInput\n\n5 2\n1 1\n3 4\n\n\nOutput\n\n4\n\n\nInput\n\n5 2\n3 3\n5 5\n\n\nOutput\n\n0\n\n\nInput\n\n5 1\n1 2\n\n\nOutput\n\n5\n\n\nInput\n\n60 3\n5 8\n1 3\n10 15\n\n\nOutput\n\n221823067",
        "task_name": "p02549 AtCoder Beginner Contest 179 - Leaping Tak",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# \u521d\u671f\u5165\u529b\nimport sys\ninput = sys.stdin.readline  #\u6587\u5b57\u5217\u3067\u306f\u4f7f\u308f\u306a\u3044\nN,K = map(int, input().split())\nS =set()\nfor _ in range(K):\n    l,r = map(int, input().split())\n    S |=set(list(range(l,r+1)))\nS =list(S)\nS.sort()\nDP =[0]*(N+1)\nDP[1] =1\nfor i in range(1,N+1):\n    for s in S:\n        if i +s <=N:\n            DP[i+s] +=DP[i]\n        else:\n            break\nans =DP[N] %998244353 \nprint(ans)",
        "correct": false,
        "task_id": "0465",
        "depth": 2
    },
    {
        "description": "There are N squares numbered 1 to N from left to right. Each square has a character written on it, and Square i has a letter s_i. Besides, there is initially one golem on each square.\n\nSnuke cast Q spells to move the golems.\n\nThe i-th spell consisted of two characters t_i and d_i, where d_i is `L` or `R`. When Snuke cast this spell, for each square with the character t_i, all golems on that square moved to the square adjacent to the left if d_i is `L`, and moved to the square adjacent to the right if d_i is `R`.\n\nHowever, when a golem tried to move left from Square 1 or move right from Square N, it disappeared.\n\nFind the number of golems remaining after Snuke cast the Q spells.\n\nConstraints\n\n* 1 \\leq N,Q \\leq 2 \\times 10^{5}\n* |s| = N\n* s_i and t_i are uppercase English letters.\n* d_i is `L` or `R`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN Q\ns\nt_1 d_1\n\\vdots\nt_{Q} d_Q\n\n\nOutput\n\nPrint the answer.\n\nExamples\n\nInput\n\n3 4\nABC\nA L\nB L\nB R\nA R\n\n\nOutput\n\n2\n\n\nInput\n\n8 3\nAABCBDBA\nA L\nB R\nA R\n\n\nOutput\n\n5\n\n\nInput\n\n10 15\nSNCZWRCEWB\nB R\nR R\nE R\nW R\nZ L\nS R\nQ L\nW L\nB R\nC L\nA L\nN L\nE R\nZ L\nS L\n\n\nOutput\n\n3",
        "task_name": "p03081 ExaWizards 2019 - Snuke the Wizard",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "input = raw_input\n\nN,Q = map(int,input().split(\" \"))\ns=list(input())\nju = []\nfor i in range(Q):\n    ju.append(input().split(\" \"))\n\ndef isdeadleft(xp):\n    oxp = xp\n    for i in range(Q):\n        com = ju[i]\n        if s[xp] == com[0]:\n            if com[1] == \"L\":\n                xp -= 1\n            else:\n                xp += 1\n        if xp < 0:\n            return True\n        if xp > N-1:\n            xp = N-1\n    return False\n\ndef isdeadright(xp):\n    oxp = xp\n    for i in range(Q):\n        com = ju[i]\n        if s[xp] == com[0]:\n            if com[1] == \"L\":\n                xp -= 1\n            else:\n                xp += 1\n        if xp < 0:\n            xp = 0\n        if xp > N-1:\n            return True\n    return False\n\ndef mid(x1,x2):\n    return int((x1+x2)/2)\n\nif isdeadleft(N-1) or isdeadright(0):\n    print(0)\n    exit()\n\n#left\np1 = 0\np3 = N-1\np2 = mid(p1,p3)\nwhile p3 - p1 != 1:\n    if isdeadleft(p2):\n        p1,p2 = p2,mid(p2,p3)\n    else:\n        p2,p3 = mid(p1,p2),p2\nif isdeadleft(p1):\n    p = p3\nelse:\n    p = p1\n#right\np1 = 0\np3 = N-1\np2 = mid(p1,p3)\nwhile p3 - p1 != 1:\n    if isdeadright(p2):\n        p2,p3 = mid(p1,p2),p2\n    else:\n        p1,p2 = p2,mid(p2,p3)\nif isdeadright(p3):\n    q = p1\nelse:\n    q = p3\n\nif p > q:\n    print(0)\nelse:\n    print(q-p+1)\n",
        "correct": true,
        "task_id": "0466",
        "depth": 1
    },
    {
        "description": "In AtCoder, a person who has participated in a contest receives a color, which corresponds to the person's rating as follows:\n\n* Rating 1-399 : gray\n* Rating 400-799 : brown\n* Rating 800-1199 : green\n* Rating 1200-1599 : cyan\n* Rating 1600-1999 : blue\n* Rating 2000-2399 : yellow\n* Rating 2400-2799 : orange\n* Rating 2800-3199 : red\n\n\n\nOther than the above, a person whose rating is 3200 or higher can freely pick his/her color, which can be one of the eight colors above or not.\nCurrently, there are N users who have participated in a contest in AtCoder, and the i-th user has a rating of a_i.\nFind the minimum and maximum possible numbers of different colors of the users.\n\nConstraints\n\n* 1 \u2264 N \u2264 100\n* 1 \u2264 a_i \u2264 4800\n* a_i is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N\n\n\nOutput\n\nPrint the minimum possible number of different colors of the users, and the maximum possible number of different colors, with a space in between.\n\nExamples\n\nInput\n\n4\n2100 2500 2700 2700\n\n\nOutput\n\n2 2\n\n\nInput\n\n5\n1100 1900 2800 3200 3200\n\n\nOutput\n\n3 5\n\n\nInput\n\n20\n800 810 820 830 840 850 860 870 880 890 900 910 920 930 940 950 960 970 980 990\n\n\nOutput\n\n1 1",
        "task_name": "p03695 AtCoder Beginner Contest 064 - Colorful Leaderboard",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N = input()\na = []\na.append(map(int, raw_input().split()))\n\na=a[0]\n\nc=[0,0,0,0,0,0,0,0]\n\nfree=0\n\nfor i in a:\n    if 1<=i and i<=399:\n        c[0]=1\n    elif 400<=i and i<=799:\n        c[1]=1\n    elif 800<=i and i<=1199:\n        c[2]=1\n    elif 1200<=i and i<=1599:\n        c[3]=1\n    elif 1600<=i and i<=1999:\n        c[4]=1\n    elif 2000<=i and i<=2399:\n        c[5]=1\n    elif 2400<=i and i<=2799:\n        c[6]=1\n    elif 2800<=i and i<=3199:\n        c[7]=1\n    elif 3200<=i:\n        free+=1\n\nma=sum(c)+free\n\n\n\nmi=sum(c)\nif mi<1:\n    mi=1\n\n\nprint(str(mi) + \" \" + str(ma))",
        "correct": true,
        "task_id": "0467",
        "depth": 1
    },
    {
        "description": "N hotels are located on a straight line. The coordinate of the i-th hotel (1 \\leq i \\leq N) is x_i.\n\nTak the traveler has the following two personal principles:\n\n* He never travels a distance of more than L in a single day.\n* He never sleeps in the open. That is, he must stay at a hotel at the end of a day.\n\n\n\nYou are given Q queries. The j-th (1 \\leq j \\leq Q) query is described by two distinct integers a_j and b_j. For each query, find the minimum number of days that Tak needs to travel from the a_j-th hotel to the b_j-th hotel following his principles. It is guaranteed that he can always travel from the a_j-th hotel to the b_j-th hotel, in any given input.\n\nConstraints\n\n* 2 \\leq N \\leq 10^5\n* 1 \\leq L \\leq 10^9\n* 1 \\leq Q \\leq 10^5\n* 1 \\leq x_i < x_2 < ... < x_N \\leq 10^9\n* x_{i+1} - x_i \\leq L\n* 1 \\leq a_j,b_j \\leq N\n* a_j \\neq b_j\n* N,\\,L,\\,Q,\\,x_i,\\,a_j,\\,b_j are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nx_1 x_2 ... x_N\nL\nQ\na_1 b_1\na_2 b_2\n:\na_Q b_Q\n\n\nOutput\n\nPrint Q lines. The j-th line (1 \\leq j \\leq Q) should contain the minimum number of days that Tak needs to travel from the a_j-th hotel to the b_j-th hotel.\n\nExample\n\nInput\n\n9\n1 3 6 13 15 18 19 29 31\n10\n4\n1 8\n7 3\n6 7\n8 5\n\n\nOutput\n\n4\n2\n1\n2",
        "task_name": "p04017 AtCoder Regular Contest 060 - Tak and Hotels",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import bisect\n\nn=int(raw_input())\nx=map(int,raw_input().split())+[float('inf')]\nl=int(raw_input())\nq=int(raw_input())\nr=[[0]*20 for _ in xrange(n)]\n\nfor i in xrange(n):\n    if x[i]+l==x[bisect.bisect_left(x,x[i]+l)]:\n        r[i][0]=bisect.bisect_left(x,x[i]+l)\n    else:\n        r[i][0]=bisect.bisect_left(x,x[i]+l)-1\n\nfor k in xrange(19):\n    for i in xrange(n):\n        r[i][k+1]=r[r[i][k]][k]\n        \nfor i in xrange(q):\n    a,b=map(int,raw_input().split())\n    a-=1\n    b-=1\n    ans=0\n    if a>b:\n        a,b=b,a\n    while 1:\n        if bisect.bisect_left(r[a],b)>=1:\n            ans+=1<<(bisect.bisect_left(r[a],b)-1)\n            a=r[a][bisect.bisect_left(r[a],b)-1]\n        else :\n            ans+=1<<bisect.bisect_left(r[a],b)\n            break\n    print(ans)",
        "correct": true,
        "task_id": "0468",
        "depth": 2
    },
    {
        "description": "An English booklet has been created for publicizing Aizu to the world. When you read it carefully, you found a misnomer (an error in writing) on the last name of Masayuki Hoshina, the lord of the Aizu domain. The booklet says \"Hoshino\" not \"Hoshina\".\n\nYour task is to write a program which replace all the words \"Hoshino\" with \"Hoshina\". You can assume that the number of characters in a text is less than or equal to 1000.\n\n\n\nInput\n\nThe input consists of several datasets. There will be the number of datasets n in the first line. There will be n lines. A line consisting of english texts will be given for each dataset.\n\nOutput\n\nFor each dataset, print the converted texts in a line.\n\nExample\n\nInput\n\n3\nHoshino\nHashino\nMasayuki Hoshino was the grandson of Ieyasu Tokugawa.\n\n\nOutput\n\nHoshina\nHashino\nMasayuki Hoshina was the grandson of Ieyasu Tokugawa.",
        "task_name": "p00101 Aizu PR",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\nfrom sys import stdin, exit\n\n\ndef main(readline=stdin.readline):\n    for _ in range(int(readline())):\n        print(readline().replace('Hoshino', 'Hoshina'), end='')\n    exit()\n\n\nif __name__ == '__main__':\n    main()",
        "correct": true,
        "task_id": "0469",
        "depth": 1
    },
    {
        "description": "You received a notebook which is called Death Note. This notebook has infinite number of pages. A rule is written on the last page (huh) of this notebook. It says: \"You have to write names in this notebook during n consecutive days. During the i-th day you have to write exactly a_i names.\". You got scared (of course you got scared, who wouldn't get scared if he just receive a notebook which is named Death Note with a some strange rule written in it?).\n\nOf course, you decided to follow this rule. When you calmed down, you came up with a strategy how you will write names in the notebook. You have calculated that each page of the notebook can contain exactly m names. You will start writing names from the first page. You will write names on the current page as long as the limit on the number of names on this page is not exceeded. When the current page is over, you turn the page. Note that you always turn the page when it ends, it doesn't matter if it is the last day or not. If after some day the current page still can hold at least one name, during the next day you will continue writing the names from the current page.\n\nNow you are interested in the following question: how many times will you turn the page during each day? You are interested in the number of pages you will turn each day from 1 to n.\n\nInput\n\nThe first line of the input contains two integers n, m (1 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 m \u2264 10^9) \u2014 the number of days you will write names in the notebook and the number of names which can be written on each page of the notebook.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9), where a_i means the number of names you will write in the notebook during the i-th day.\n\nOutput\n\nPrint exactly n integers t_1, t_2, ..., t_n, where t_i is the number of times you will turn the page during the i-th day.\n\nExamples\n\nInput\n\n3 5\n3 7 9\n\n\nOutput\n\n0 2 1 \n\n\nInput\n\n4 20\n10 9 19 2\n\n\nOutput\n\n0 0 1 1 \n\n\nInput\n\n1 100\n99\n\n\nOutput\n\n0 \n\nNote\n\nIn the first example pages of the Death Note will look like this [1, 1, 1, 2, 2], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3], [3, 3, 3, 3]. Each number of the array describes during which day name on the corresponding position will be written. It is easy to see that you should turn the first and the second page during the second day and the third page during the third day.",
        "task_name": "1016_A. Death Note",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nti = lambda : stdin.readline().strip()\nma = lambda fxn, ti : map(fxn, ti.split())\nol = lambda arr : stdout.write(' '.join(str(i) for i in arr) + '\\n')\nos = lambda i : stdout.write(str(i) + '\\n')\nolws = lambda arr : stdout.write(''.join(str(i) for i in arr) + '\\n')\nimport math\n\n\nn, m = ma(int, ti())\na = ma(int, ti())\n\nremaining = m\nans = []\nfor i in range(n):\n\tif remaining > a[i]:\n\t\tans.append(0)\n\t\tremaining -= a[i]\n\telif remaining == a[i]:\n\t\tans.append(1)\n\t\tremaining = m\n\telse:\n\t\ttemp = 0\n\t\ta[i] -= remaining\n\t\ttemp = 1\n\t\ttemp += int(math.floor(a[i]/m))\n\t\tremaining = m - a[i]%m\n\t\tans.append(temp)\n\nol(ans)",
        "correct": true,
        "task_id": "0470",
        "depth": 1
    },
    {
        "description": "The average miner Vaganych took refresher courses. As soon as a miner completes the courses, he should take exams. The hardest one is a computer test called \"Testing Pants for Sadness\".\n\nThe test consists of n questions; the questions are to be answered strictly in the order in which they are given, from question 1 to question n. Question i contains ai answer variants, exactly one of them is correct. \n\nA click is regarded as selecting any answer in any question. The goal is to select the correct answer for each of the n questions. If Vaganych selects a wrong answer for some question, then all selected answers become unselected and the test starts from the very beginning, from question 1 again. But Vaganych remembers everything. The order of answers for each question and the order of questions remain unchanged, as well as the question and answers themselves.\n\nVaganych is very smart and his memory is superb, yet he is unbelievably unlucky and knows nothing whatsoever about the test's theme. How many clicks will he have to perform in the worst case?\n\nInput\n\nThe first line contains a positive integer n (1 \u2264 n \u2264 100). It is the number of questions in the test. The second line contains space-separated n positive integers ai (1 \u2264 ai \u2264 109), the number of answer variants to question i.\n\nOutput\n\nPrint a single number \u2014 the minimal number of clicks needed to pass the test it the worst-case scenario. \n\nPlease do not use the %lld specificator to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specificator.\n\nExamples\n\nInput\n\n2\n1 1\n\n\nOutput\n\n2\n\nInput\n\n2\n2 2\n\n\nOutput\n\n5\n\nInput\n\n1\n10\n\n\nOutput\n\n10\n\nNote\n\nNote to the second sample. In the worst-case scenario you will need five clicks: \n\n  * the first click selects the first variant to the first question, this answer turns out to be wrong. \n  * the second click selects the second variant to the first question, it proves correct and we move on to the second question; \n  * the third click selects the first variant to the second question, it is wrong and we go back to question 1; \n  * the fourth click selects the second variant to the first question, it proves as correct as it was and we move on to the second question; \n  * the fifth click selects the second variant to the second question, it proves correct, the test is finished. ",
        "task_name": "103_A. Testing Pants for Sadness",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = input()\na = list(map(int, raw_input().split()))\na = [0] + a\nans = 0\nfor i in range(1, n + 1):\n\tans += 1 + (a[i] - 1) * i\nprint(ans)\n",
        "correct": true,
        "task_id": "0471",
        "depth": 1
    },
    {
        "description": "The Fair Nut lives in n story house. a_i people live on the i-th floor of the house. Every person uses elevator twice a day: to get from the floor where he/she lives to the ground (first) floor and to get from the first floor to the floor where he/she lives, when he/she comes back home in the evening. \n\nIt was decided that elevator, when it is not used, will stay on the x-th floor, but x hasn't been chosen yet. When a person needs to get from floor a to floor b, elevator follows the simple algorithm: \n\n  * Moves from the x-th floor (initially it stays on the x-th floor) to the a-th and takes the passenger. \n  * Moves from the a-th floor to the b-th floor and lets out the passenger (if a equals b, elevator just opens and closes the doors, but still comes to the floor from the x-th floor). \n  * Moves from the b-th floor back to the x-th. \n\nThe elevator never transposes more than one person and always goes back to the floor x before transposing a next passenger. The elevator spends one unit of electricity to move between neighboring floors. So moving from the a-th floor to the b-th floor requires |a - b| units of electricity.\n\nYour task is to help Nut to find the minimum number of electricity units, that it would be enough for one day, by choosing an optimal the x-th floor. Don't forget than elevator initially stays on the x-th floor. \n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of floors.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 100) \u2014 the number of people on each floor.\n\nOutput\n\nIn a single line, print the answer to the problem \u2014 the minimum number of electricity units.\n\nExamples\n\nInput\n\n3\n0 2 1\n\n\nOutput\n\n16\n\nInput\n\n2\n1 1\n\n\nOutput\n\n4\n\nNote\n\nIn the first example, the answer can be achieved by choosing the second floor as the x-th floor. Each person from the second floor (there are two of them) would spend 4 units of electricity per day (2 to get down and 2 to get up), and one person from the third would spend 8 units of electricity per day (4 to get down and 4 to get up). 4 \u22c5 2 + 8 \u22c5 1 = 16.\n\nIn the second example, the answer can be achieved by choosing the first floor as the x-th floor.",
        "task_name": "1084_A. The Fair Nut and Elevator",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\n\ndef FairNut(peoples):\n\tmini=10**10\n\tfor x in xrange(len(peoples)):\n\t\tunit_pp=0\n\t\tfor i in xrange(len(peoples)):\n\t\t\tunit_pp+=(abs(i-x)+i+x)*peoples[i]\n\t\tmini=min(unit_pp,mini)\n\treturn(mini)\n\nn=int(raw_input())\nl=map(int,raw_input().split())\nprint(FairNut(l)*2)\n",
        "correct": true,
        "task_id": "0473",
        "depth": 2
    },
    {
        "description": "Cowboy Vlad has a birthday today! There are n children who came to the celebration. In order to greet Vlad, the children decided to form a circle around him. Among the children who came, there are both tall and low, so if they stand in a circle arbitrarily, it may turn out, that there is a tall and low child standing next to each other, and it will be difficult for them to hold hands. Therefore, children want to stand in a circle so that the maximum difference between the growth of two neighboring children would be minimal possible.\n\nFormally, let's number children from 1 to n in a circle order, that is, for every i child with number i will stand next to the child with number i+1, also the child with number 1 stands next to the child with number n. Then we will call the discomfort of the circle the maximum absolute difference of heights of the children, who stand next to each other.\n\nPlease help children to find out how they should reorder themselves, so that the resulting discomfort is smallest possible.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 100) \u2014 the number of the children who came to the cowboy Vlad's birthday.\n\nThe second line contains integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9) denoting heights of every child.\n\nOutput\n\nPrint exactly n integers \u2014 heights of the children in the order in which they should stand in a circle. You can start printing a circle with any child.\n\nIf there are multiple possible answers, print any of them.\n\nExamples\n\nInput\n\n\n5\n2 1 1 3 2\n\n\nOutput\n\n\n1 2 3 2 1\n\n\nInput\n\n\n3\n30 10 20\n\n\nOutput\n\n\n10 20 30\n\nNote\n\nIn the first example, the discomfort of the circle is equal to 1, since the corresponding absolute differences are 1, 1, 1 and 0. Note, that sequences [2, 3, 2, 1, 1] and [3, 2, 1, 1, 2] form the same circles and differ only by the selection of the starting point.\n\nIn the second example, the discomfort of the circle is equal to 20, since the absolute difference of 10 and 30 is equal to 20.",
        "task_name": "1131_C. Birthday",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport random, math\nfrom collections import defaultdict\n\nn = int(raw_input())\narr = [int(__) for __ in raw_input().split()]\narr.sort(reverse = True)\nnewl = list()\nfl = 0\nfor el in arr:\n    if fl == 0:\n        newl.append(el)\n        fl = 1\n    else:\n        newl = [el] + newl\n        fl = 0\nprint(' '.join([str(x) for x in newl]))",
        "correct": true,
        "task_id": "0474",
        "depth": 1
    },
    {
        "description": "Nauuo is a girl who loves drawing circles.\n\nOne day she has drawn a circle and wanted to draw a tree on it.\n\nThe tree is a connected undirected graph consisting of n nodes and n-1 edges. The nodes are numbered from 1 to n.\n\nNauuo wants to draw a tree on the circle, the nodes of the tree should be in n distinct points on the circle, and the edges should be straight without crossing each other.\n\n\"Without crossing each other\" means that every two edges have no common point or the only common point is an endpoint of both edges.\n\nNauuo wants to draw the tree using a permutation of n elements. A permutation of n elements is a sequence of integers p_1,p_2,\u2026,p_n in which every integer from 1 to n appears exactly once.\n\nAfter a permutation is chosen Nauuo draws the i-th node in the p_i-th point on the circle, then draws the edges connecting the nodes.\n\nThe tree is given, Nauuo wants to know how many permutations are there so that the tree drawn satisfies the rule (the edges are straight without crossing each other). She only wants to know the answer modulo 998244353, can you help her?\n\nIt is obvious that whether a permutation is valid or not does not depend on which n points on the circle are chosen.\n\nInput\n\nThe first line contains a single integer n (2\u2264 n\u2264 2\u22c5 10^5) \u2014 the number of nodes in the tree.\n\nEach of the next n-1 lines contains two integers u and v (1\u2264 u,v\u2264 n), denoting there is an edge between u and v.\n\nIt is guaranteed that the given edges form a tree.\n\nOutput\n\nThe output contains a single integer \u2014 the number of permutations suitable to draw the given tree on a circle satisfying the rule, modulo 998244353.\n\nExamples\n\nInput\n\n\n4\n1 2\n1 3\n2 4\n\n\nOutput\n\n\n16\n\nInput\n\n\n4\n1 2\n1 3\n1 4\n\n\nOutput\n\n\n24\n\nNote\n\nExample 1\n\nAll valid permutations and their spanning trees are as follows.\n\n<image>\n\nHere is an example of invalid permutation: the edges (1,3) and (2,4) are crossed.\n\n<image>\n\nExample 2\n\nEvery permutation leads to a valid tree, so the answer is 4! = 24.",
        "task_name": "1173_D. Nauuo and Circle",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys,math\nfrom fractions import gcd\nfrom bisect import bisect_left, bisect\nfrom collections import defaultdict\nfrom io import BytesIO\nsys.stdin = BytesIO(sys.stdin.read())\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nn = int(input())\n#arr = [int(_) for _ in input().split()]\n\ndv = defaultdict(set)\ndp = defaultdict(int)\n\nfor i in range(n-1):\n    s,f = [int(_) for _ in input().split()]\n    dv[s].add(f)\n    dp[f] = s\narr = [0] * (n+1)\nlv = set()\nfor i in range(1,n+1):\n    if i not in dv:\n        lv.add(i)\n    if i not in dp:\n        head = i\nmlt = 1\nmod = 998244353\nwhile len(lv):\n    cur = lv.pop()\n    if cur == head:\n        break\n    arr[dp[cur]] += 1\n    dv[dp[cur]].remove(cur)\n    if len(dv[dp[cur]]) == 0:\n        lv.add(dp[cur])\n    while arr[cur] > 0:\n        mlt = mlt * (arr[cur] + 1)\n        arr[cur] -= 1\n        mlt %= mod\n\nwhile arr[cur] > 1:\n    mlt = mlt * (arr[cur])\n    arr[cur] -= 1\n    mlt %= mod\nmlt *= n\nprint(mlt % mod)",
        "correct": false,
        "task_id": "0475",
        "depth": 2
    },
    {
        "description": "Tokitsukaze is one of the characters in the game \"Kantai Collection\". In this game, every character has a common attribute \u2014 health points, shortened to HP.\n\nIn general, different values of HP are grouped into 4 categories:\n\n  * Category A if HP is in the form of (4 n + 1), that is, when divided by 4, the remainder is 1; \n  * Category B if HP is in the form of (4 n + 3), that is, when divided by 4, the remainder is 3; \n  * Category C if HP is in the form of (4 n + 2), that is, when divided by 4, the remainder is 2; \n  * Category D if HP is in the form of 4 n, that is, when divided by 4, the remainder is 0. \n\n\n\nThe above-mentioned n can be any integer.\n\nThese 4 categories ordered from highest to lowest as A > B > C > D, which means category A is the highest and category D is the lowest.\n\nWhile playing the game, players can increase the HP of the character. Now, Tokitsukaze wants you to increase her HP by at most 2 (that is, either by 0, 1 or 2). How much should she increase her HP so that it has the highest possible category?\n\nInput\n\nThe only line contains a single integer x (30 \u2264 x \u2264 100) \u2014 the value Tokitsukaze's HP currently.\n\nOutput\n\nPrint an integer a (0 \u2264 a \u2264 2) and an uppercase letter b (b \u2208 { A, B, C, D }), representing that the best way is to increase her HP by a, and then the category becomes b.\n\nNote that the output characters are case-sensitive.\n\nExamples\n\nInput\n\n\n33\n\n\nOutput\n\n\n0 A\n\n\nInput\n\n\n98\n\n\nOutput\n\n\n1 B\n\nNote\n\nFor the first example, the category of Tokitsukaze's HP is already A, so you don't need to enhance her ability.\n\nFor the second example:\n\n  * If you don't increase her HP, its value is still 98, which equals to (4 \u00d7 24 + 2), and its category is C. \n  * If you increase her HP by 1, its value becomes 99, which equals to (4 \u00d7 24 + 3), and its category becomes B. \n  * If you increase her HP by 2, its value becomes 100, which equals to (4 \u00d7 25), and its category becomes D. \n\n\n\nTherefore, the best way is to increase her HP by 1 so that the category of her HP becomes B.",
        "task_name": "1191_A. Tokitsukaze and Enhancement",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "input_value = int(input())\n\nvalue_class = [3, 0, 2, 1]\nvalue_label = [\"A\", \"B\", \"C\", \"D\"]\n\ndef value_num(n):\n    return value_class[n % 4]\n\ntop_value = value_num(input_value)\ntop_add = 0\nfor add in [1, 2]:\n    add_val = value_num(input_value + add)\n    if add_val < top_value:\n        top_add = add\n        top_value = add_val\nprint( str(top_add) + \" \" + value_label[top_value] )\n",
        "correct": true,
        "task_id": "0476",
        "depth": 1
    },
    {
        "description": "Petya loves lucky numbers. Everybody knows that lucky numbers are positive integers whose decimal representation contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nPetya has a number consisting of n digits without leading zeroes. He represented it as an array of digits without leading zeroes. Let's call it d. The numeration starts with 1, starting from the most significant digit. Petya wants to perform the following operation k times: find the minimum x (1 \u2264 x < n) such that dx = 4 and dx + 1 = 7, if x is odd, then to assign dx = dx + 1 = 4, otherwise to assign dx = dx + 1 = 7. Note that if no x was found, then the operation counts as completed and the array doesn't change at all.\n\nYou are given the initial number as an array of digits and the number k. Help Petya find the result of completing k operations.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 105, 0 \u2264 k \u2264 109) \u2014 the number of digits in the number and the number of completed operations. The second line contains n digits without spaces representing the array of digits d, starting with d1. It is guaranteed that the first digit of the number does not equal zero.\n\nOutput\n\nIn the single line print the result without spaces \u2014 the number after the k operations are fulfilled.\n\nExamples\n\nInput\n\n7 4\n4727447\n\n\nOutput\n\n4427477\n\n\nInput\n\n4 2\n4478\n\n\nOutput\n\n4478\n\nNote\n\nIn the first sample the number changes in the following sequence: 4727447 \u2192 4427447 \u2192 4427477 \u2192 4427447 \u2192 4427477.\n\nIn the second sample: 4478 \u2192 4778 \u2192 4478.",
        "task_name": "122_D. Lucky Transformation",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrstr = lambda: list(stdin.readline().strip())\n\nn, k = rints()\ns = rstr()\n\nfor i, j in enumerate(s[:-1]):\n    if not k:\n        break\n\n    if ''.join(s[i:i + 2]) == '47':\n        tem = '77' if i % 2 else '44'\n\n        if tem == '44':\n            if i < len(s) - 2 and s[i + 2] == '7':\n                s[i:i + 3] = ['4', '4', '7'] if k % 2 else ['4', '7', '7']\n                k = 0\n            else:\n                k -= 1\n                s[i:i + 2] = ['4', '4']\n\n        else:\n            if i and s[i - 1] == '4':\n                s[i - 1:i + 2] = ['4', '7', '7'] if k % 2 else ['4', '4', '7']\n                k = 0\n            else:\n                k -= 1\n                s[i:i + 2] = ['7', '7']\n\nprint(''.join(s))\n",
        "correct": true,
        "task_id": "0477",
        "depth": 1
    },
    {
        "description": "You are given a huge integer a consisting of n digits (n is between 1 and 3 \u22c5 10^5, inclusive). It may contain leading zeros.\n\nYou can swap two digits on adjacent (neighboring) positions if the swapping digits are of different parity (that is, they have different remainders when divided by 2). \n\nFor example, if a = 032867235 you can get the following integers in a single operation: \n\n  * 302867235 if you swap the first and the second digits; \n  * 023867235 if you swap the second and the third digits; \n  * 032876235 if you swap the fifth and the sixth digits; \n  * 032862735 if you swap the sixth and the seventh digits; \n  * 032867325 if you swap the seventh and the eighth digits. \n\n\n\nNote, that you can't swap digits on positions 2 and 4 because the positions are not adjacent. Also, you can't swap digits on positions 3 and 4 because the digits have the same parity.\n\nYou can perform any number (possibly, zero) of such operations.\n\nFind the minimum integer you can obtain.\n\nNote that the resulting integer also may contain leading zeros.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases in the input.\n\nThe only line of each test case contains the integer a, its length n is between 1 and 3 \u22c5 10^5, inclusive.\n\nIt is guaranteed that the sum of all values n does not exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case print line \u2014 the minimum integer you can obtain.\n\nExample\n\nInput\n\n\n3\n0709\n1337\n246432\n\n\nOutput\n\n\n0079\n1337\n234642\n\nNote\n\nIn the first test case, you can perform the following sequence of operations (the pair of swapped digits is highlighted): 0 \\underline{70} 9 \u2192 0079.\n\nIn the second test case, the initial integer is optimal. \n\nIn the third test case you can perform the following sequence of operations: 246 \\underline{43} 2 \u2192 24 \\underline{63}42 \u2192 2 \\underline{43} 642 \u2192 234642.",
        "task_name": "1251_C. Minimize The Integer",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# <editor-fold desc=\"Fast IO\">\n# !/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport itertools\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\nBUFFER_SIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = 'x' in file.mode or 'r' not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFFER_SIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFFER_SIZE))\n            self.newlines = b.count(b'\\n') + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode('ascii'))\n        self.read = lambda: self.buffer.read().decode('ascii')\n        self.readline = lambda: self.buffer.readline().decode('ascii')\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop('sep', ' '), kwargs.pop('file', sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop('end', '\\n'))\n    if kwargs.pop('flush', False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# </editor-fold>\n\nimport collections\n\n\ndef solve(num):\n    num = [ord(x) - ord('0') for x in num]\n\n    even_digits, odd_digits = collections.deque(), collections.deque()\n\n    for digit in num:\n        if digit & 1 == 0:\n            even_digits.append(digit)\n        else:\n            odd_digits.append(digit)\n\n    ret = []\n\n    for _ in range(len(num)):\n        if not odd_digits or (even_digits and even_digits[0] < odd_digits[0]):\n            ret.append(even_digits.popleft())\n        else:\n            ret.append(odd_digits.popleft())\n\n    return ''.join(map(str, ret))\n\n\n# xx\n\n\nDEBUG = False\n\nif not DEBUG:\n    t = int(input())\n\n    while t > 0:\n        t -= 1\n        s = input()\n        print(solve(s))\n\nelse:\n    print(solve('246432'))\n    print(solve('2464321'))\n    print(solve('264721'))\n    #\n    print(solve('999999992222222'))\n    print(solve('7772648'))\n    print(solve('737572464282'))\n\n    print(solve('12'))\n    print(solve('21'))\n    print(solve('221'))\n    print(solve('221'))\n",
        "correct": true,
        "task_id": "0478",
        "depth": 1
    },
    {
        "description": "Having bought his own apartment, Boris decided to paper the walls in every room. Boris's flat has n rooms, each of which has the form of a rectangular parallelepiped. For every room we known its length, width and height of the walls in meters (different rooms can have different dimensions, including height).\n\nBoris chose m types of wallpaper to paper the walls of the rooms with (but it is not necessary to use all the types). Each type of wallpaper is sold in rolls of a fixed length and width (the length, naturally, shows how long the unfolded roll will be). In addition, for each type we know the price of one roll of this type.\n\nThe wallpaper of each type contains strips running along the length of the roll. When gluing the strips must be located strictly vertically (so the roll cannot be rotated, even if the length is less than the width). Besides, a roll can be cut in an arbitrary manner, but the joints of glued pieces should also be vertical. In addition, each room should be papered by only one type of wallpaper. And pieces of the same roll cannot be used to paper different rooms. That is, for each room the rolls are purchased separately. Also, some rolls can be used not completely.\n\nAfter buying an apartment Boris is short of cash, so he wants to spend the minimum money on wallpaper. Help him.\n\nInput\n\nThe first line contains a positive integer n (1 \u2264 n \u2264 500) \u2014 the number of rooms in Boris's apartment.\n\nEach of the next n lines contains three space-separated positive integers \u2014 the length, width and height of the walls in a given room in meters, respectively.\n\nThe next line contains a positive integer m (1 \u2264 m \u2264 500) \u2014 the number of available wallpaper types.\n\nEach of the following m lines contains three space-separated positive integers \u2014 the length and width in meters of a given wallpaper and the price of one roll, respectively.\n\nAll numbers in the input data do not exceed 500. It is guaranteed that each room can be papered using these types of wallpaper.\n\nOutput\n\nPrint a single number \u2014 the minimum total cost of the rolls.\n\nExamples\n\nInput\n\n1\n5 5 3\n3\n10 1 100\n15 2 320\n3 19 500\n\n\nOutput\n\n640\n\nNote\n\nNote to the sample:\n\nThe total length of the walls (the perimeter) of the room is 20 m.\n\nOne roll of the first type can be cut into pieces to get three vertical 1 meter wide strips, ergo you need 7 rolls of this type, the price equals 700.\n\nA roll of the second type can be cut into pieces to get five 2 meter wide strips, we need 2 rolls, the price is 640.\n\nOne roll of the third type can immediately paper 19 meters out of 20, but we cannot use other types and we have to buy a second roll, the price is 1000.",
        "task_name": "139_B. Wallpaper",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import fractions\nimport sys\nimport math\n\nP='perim'\nL='length'\nW='width'\nH='height'\nC='cost'\n\ndef b( rs, ws):\n  rtn = 0\n  for r in rs:\n    mx = 1000000000\n    for w in ws:\n      if w[L] < r[P]: continue\n      wpw = (w[L] / r[H] ) *  w[W]\n      mx = min( mx, w[C] * ((r[P] + wpw -1 ) / wpw) )\n    rtn += mx\n  return mx\n\nif __name__==\"__main__\":\n  nr = int(sys.stdin.readline().split()[0])\n  rs= []\n  for i in range(nr):\n    toks = sys.stdin.readline().split()\n    rs += [ { P:2*(int(toks[0]) + int(toks[1])), H:int(toks[2]) } ]\n\n  nw = int(sys.stdin.readline().split()[0])\n  ws= []\n  for i in range(nw):\n    toks = sys.stdin.readline().split()\n    ws += [ { L:int(toks[0]), W:int(toks[1]), C:int(toks[2]) } ]\n  \n  print( \"%d\" % b(rs, ws) )\n",
        "correct": false,
        "task_id": "0483",
        "depth": 2
    },
    {
        "description": "You are given two integers n and k. You are asked to choose maximum number of distinct integers from 1 to n so that there is no subset of chosen numbers with sum equal to k.\n\nA subset of a set is a set that can be obtained from initial one by removing some (possibly all or none) elements of it.\n\nInput\n\nThe first line contains the number of test cases T (1 \u2264 T \u2264 100).\n\nEach of the next T lines contains two integers n and k (1 \u2264 k \u2264 n \u2264 1000) \u2014 the description of test cases.\n\nOutput\n\nFor each test case output two lines. In the first line output a single integer m \u2014 the number of chosen integers.\n\nIn the second line output m distinct integers from 1 to n \u2014 the chosen numbers.\n\nIf there are multiple answers, print any. You can print the numbers in any order.\n\nExample\n\nInput\n\n\n3\n3 2\n5 3\n1 1\n\n\nOutput\n\n\n2\n3 1 \n3\n4 5 2 \n0",
        "task_name": "1493_A. Anti-knapsack",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nfor _ in range(int(input())):\n    n, k = map(int, stdin.readline().split())\n    ans = [x for x in range(1, k // 2 + 1)] + [x for x in range(k + 1, n + 1)]\n    print('%d\\n%s' % (len(ans), ' '.join(map(str, ans))))\n",
        "correct": false,
        "task_id": "0484",
        "depth": 1
    },
    {
        "description": "Berland starts to seize the initiative on the war with Flatland. To drive the enemy from their native land, the berlanders need to know exactly how many more flatland soldiers are left in the enemy's reserve. Fortunately, the scouts captured an enemy in the morning, who had a secret encrypted message with the information the berlanders needed so much.\n\nThe captured enemy had an array of positive integers. Berland intelligence have long been aware of the flatland code: to convey the message, which contained a number m, the enemies use an array of integers a. The number of its subarrays, in which there are at least k equal numbers, equals m. The number k has long been known in the Berland army so General Touristov has once again asked Corporal Vasya to perform a simple task: to decipher the flatlanders' message.\n\nHelp Vasya, given an array of integers a and number k, find the number of subarrays of the array of numbers a, which has at least k equal numbers.\n\nSubarray a[i... j] (1 \u2264 i \u2264 j \u2264 n) of array a = (a1, a2, ..., an) is an array, made from its consecutive elements, starting from the i-th one and ending with the j-th one: a[i... j] = (ai, ai + 1, ..., aj).\n\nInput\n\nThe first line contains two space-separated integers n, k (1 \u2264 k \u2264 n \u2264 4\u00b7105), showing how many numbers an array has and how many equal numbers the subarrays are required to have, correspondingly. \n\nThe second line contains n space-separated integers ai (1 \u2264 ai \u2264 109) \u2014 elements of the array.\n\nOutput\n\nPrint the single number \u2014 the number of such subarrays of array a, that they have at least k equal integers.\n\nPlease do not use the %lld specifier to read or write 64-bit integers in \u0421++. In is preferred to use the cin, cout streams or the %I64d specifier.\n\nExamples\n\nInput\n\n4 2\n1 2 1 2\n\n\nOutput\n\n3\n\nInput\n\n5 3\n1 2 1 1 3\n\n\nOutput\n\n2\n\nInput\n\n3 1\n1 1 1\n\n\nOutput\n\n6\n\nNote\n\nIn the first sample are three subarrays, containing at least two equal numbers: (1,2,1), (2,1,2) and (1,2,1,2).\n\nIn the second sample are two subarrays, containing three equal numbers: (1,2,1,1,3) and (1,2,1,1).\n\nIn the third sample any subarray contains at least one 1 number. Overall they are 6: (1), (1), (1), (1,1), (1,1) and (1,1,1).",
        "task_name": "190_D. Non-Secret Cypher",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import os\nimport sys\n\ndebug=\"DEBUG\" in os.environ\n\nn,k= map( int, sys.stdin.readline().split()[:2] )\nvals = map( int, sys.stdin.readline().strip('\\n\\r ').split()[:n] )\nif k==1:\n  count = (n*(n+1))/2 \nelse:\n  count = 0\n  d = {}\n  leftmost = -1\n  for i,val in enumerate(vals):\n    if val in d:\n      d[val] += [i]\n      dval = d[val]\n      if len(dval) < k: pass\n      else:\n        dvalk = dval[-k]\n        if dvalk > leftmost: leftmost = dvalk\n    else:\n      d[val] = [i]\n\n    count += leftmost + 1\n\nprint( count )\n",
        "correct": true,
        "task_id": "0486",
        "depth": 1
    },
    {
        "description": "There is a programming language in which every program is a non-empty sequence of \"<\" and \">\" signs and digits. Let's explain how the interpreter of this programming language works. A program is interpreted using movement of instruction pointer (IP) which consists of two parts.\n\n  * Current character pointer (CP); \n  * Direction pointer (DP) which can point left or right; \n\n\n\nInitially CP points to the leftmost character of the sequence and DP points to the right.\n\nWe repeat the following steps until the first moment that CP points to somewhere outside the sequence.\n\n  * If CP is pointing to a digit the interpreter prints that digit then CP moves one step according to the direction of DP. After that the value of the printed digit in the sequence decreases by one. If the printed digit was 0 then it cannot be decreased therefore it's erased from the sequence and the length of the sequence decreases by one. \n  * If CP is pointing to \"<\" or \">\" then the direction of DP changes to \"left\" or \"right\" correspondingly. Then CP moves one step according to DP. If the new character that CP is pointing to is \"<\" or \">\" then the previous character will be erased from the sequence. \n\n\n\nIf at any moment the CP goes outside of the sequence the execution is terminated.\n\nIt's obvious the every program in this language terminates after some steps.\n\nWe have a sequence s1, s2, ..., sn of \"<\", \">\" and digits. You should answer q queries. Each query gives you l and r and asks how many of each digit will be printed if we run the sequence sl, sl + 1, ..., sr as an independent program in this language.\n\nInput\n\nThe first line of input contains two integers n and q (1 \u2264 n, q \u2264 105) \u2014 represents the length of the sequence s and the number of queries. \n\nThe second line contains s, a sequence of \"<\", \">\" and digits (0..9) written from left to right. Note, that the characters of s are not separated with spaces. \n\nThe next q lines each contains two integers li and ri (1 \u2264 li \u2264 ri \u2264 n) \u2014 the i-th query.\n\nOutput\n\nFor each query print 10 space separated integers: x0, x1, ..., x9 where xi equals the number of times the interpreter prints i while running the corresponding program. Print answers to the queries in the order they are given in input.\n\nExamples\n\nInput\n\n7 4\n1&gt;3&gt;22&lt;\n1 3\n4 7\n7 7\n1 7\n\n\nOutput\n\n0 1 0 1 0 0 0 0 0 0\n2 2 2 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0\n2 3 2 1 0 0 0 0 0 0",
        "task_name": "238_D. Tape Programming",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "l,n=map(int,raw_input().split())\ns=str(raw_input())\nfor i in range (n):\n    begin,end=map(int,raw_input().split())\n    st=s[begin-1:end]\n    arr=[0 for j in range (10)]\n    pnt=0\n    dir=1\n    while (pnt>=0) and (pnt<len(st)):\n        if st[pnt].isdigit():\n            arr[int(st[pnt])]+=1\n            if (int(st[pnt])-1>=0):\n                st=st[:pnt]+str(int(st[pnt])-1)+st[pnt+1:]\n                pnt+=dir    \n            else:\n               st=st[:pnt]+st[pnt+1:]\n               if dir<0:\n                    pnt+=dir\n        elif st[pnt]=='>':\n            dir=1\n            if ((pnt<len(st)-1) and (dir>0) and ((st[pnt+dir]=='>') or (st[pnt+dir]=='<'))) or ((pnt>0) and (dir<0) and ((st[pnt+dir]=='>') or (st[pnt+dir]=='<'))):\n                st=st[:pnt]+st[pnt+1:]\n            \n            pnt+=dir\n        elif st[pnt]=='<':\n            dir=-1\n            if ((pnt<len(st)-1) and (dir>0) and ((st[pnt+dir]=='>') or (st[pnt+dir]=='<'))) or ((pnt>0) and (dir<0) and ((st[pnt+dir]=='>') or (st[pnt+dir]=='<'))):\n                st=st[:pnt]+st[pnt+1:]\n            \n            pnt+=dir\n    ss= ' '.join(str(arr).split(','))[1:-1]\n    print (ss)\n            \n                ",
        "correct": false,
        "task_id": "0488",
        "depth": 2
    },
    {
        "description": "Vova, the Ultimate Thule new shaman, wants to build a pipeline. As there are exactly n houses in Ultimate Thule, Vova wants the city to have exactly n pipes, each such pipe should be connected to the water supply. A pipe can be connected to the water supply if there's water flowing out of it. Initially Vova has only one pipe with flowing water. Besides, Vova has several splitters.\n\nA splitter is a construction that consists of one input (it can be connected to a water pipe) and x output pipes. When a splitter is connected to a water pipe, water flows from each output pipe. You can assume that the output pipes are ordinary pipes. For example, you can connect water supply to such pipe if there's water flowing out from it. At most one splitter can be connected to any water pipe.\n\n<image> The figure shows a 4-output splitter\n\nVova has one splitter of each kind: with 2, 3, 4, ..., k outputs. Help Vova use the minimum number of splitters to build the required pipeline or otherwise state that it's impossible.\n\nVova needs the pipeline to have exactly n pipes with flowing out water. Note that some of those pipes can be the output pipes of the splitters.\n\nInput\n\nThe first line contains two space-separated integers n and k (1 \u2264 n \u2264 1018, 2 \u2264 k \u2264 109).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nOutput\n\nPrint a single integer \u2014 the minimum number of splitters needed to build the pipeline. If it is impossible to build a pipeline with the given splitters, print -1.\n\nExamples\n\nInput\n\n4 3\n\n\nOutput\n\n2\n\n\nInput\n\n5 5\n\n\nOutput\n\n1\n\n\nInput\n\n8 4\n\n\nOutput\n\n-1",
        "task_name": "287_B. Pipeline",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "f=lambda k,x:(2*k-x+1)*x/2-x\nn,k=map(long,raw_input().split())\nif (n<=k):\n    print [-1,1][n!=1]\n    exit(0)\nt,n,k=1,n-k,k-1\nfor i in reversed(range(60)):\n    if (2**i<k)&(f(k,2**i)<=n):n,t,k=n-f(k,2**i),t+2**i,k-2**i\nprint [-1,t+(n>0)][(n<k)&(n>=0)]\n",
        "correct": false,
        "task_id": "0490",
        "depth": 1
    },
    {
        "description": "SmallR is an archer. SmallR is taking a match of archer with Zanoes. They try to shoot in the target in turns, and SmallR shoots first. The probability of shooting the target each time is <image> for SmallR while <image> for Zanoes. The one who shoots in the target first should be the winner.\n\nOutput the probability that SmallR will win the match.\n\nInput\n\nA single line contains four integers <image>.\n\nOutput\n\nPrint a single real number, the probability that SmallR will win the match.\n\nThe answer will be considered correct if the absolute or relative error doesn't exceed 10 - 6.\n\nExamples\n\nInput\n\n1 2 1 2\n\n\nOutput\n\n0.666666666667",
        "task_name": "312_B. Archer",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division;\nfrom bisect import *;\nfrom fractions import Fraction;\nimport sys;\nfrom math import *;\nfrom fractions import *;\nimport io;\nimport re;\n\nINF = 987654321987654321987654321;\n\ndef readint(delimiter=' ') :\n\treturn map(int, raw_input().split(delimiter));\n\ndef readstr(delimiter=' ') :\n\treturn raw_input().split(delimiter);\n\ndef readfloat(delimiter=' ') :\n\treturn map(float, raw_input().split(delimiter));\n\ndef index(a, x):\n\t'Locate the leftmost value exactly equal to x'\n\ti = bisect_left(a, x)\n\tif i != len(a) and a[i] == x:\n\t\treturn i\n\traise ValueError\n\ndef find_lt(a, x):\n\t'Find rightmost value less than x'\n\ti = bisect_left(a, x)\n\tif i:\n\t\treturn a[i-1]\n\traise ValueError\n\ndef find_le(a, x):\n\t'Find rightmost value less than or equal to x'\n\ti = bisect_right(a, x)\n\tif i:\n\t\treturn a[i-1]\n\traise ValueError\n\ndef find_gt(a, x):\n\t'Find leftmost value greater than x'\n\ti = bisect_right(a, x)\n\tif i != len(a):\n\t\treturn a[i]\n\traise ValueError\n\ndef find_ge(a, x):\n\t'Find leftmost item greater than or equal to x'\n\ti = bisect_left(a, x)\n\tif i != len(a):\n\t\treturn a[i]\n\traise ValueError\n\ndef bin_search(a, x, left, right) :\n\n\twhile left<=right :\n\t\tmid = (left + right)//2;\n\t\t\n\t\tif a[mid] == x :\n\t\t\treturn mid;\n\t\telif a[mid] < x :\n\t\t\tleft = mid + 1; \n\t\telif a[mid] > x :\n\t\t\tright = mid - 1;\n\t\t\t\t\t   \n\t\tpass\n\t\n\treturn -1;\n\tpass\n\ndef printf(format, *args):\n\t\"\"\"Format args with the first argument as format string, and write.\n\tReturn the last arg, or format itself if there are no args.\"\"\"\n\tsys.stdout.write(str(format) % args)\n\t\n\nfrom datetime import date;\n\nif __name__ == '__main__':\n\n\ta, b, c, d = readint();\n\n\tprob_a = a/b;\n\tprob_b = c/d;\n\n\tprev = 0;\n\tnow = 0;\n\tnow += prob_a;\n\tacc = (1-prob_a)*(1-prob_b);\n\tii = 0;\n\twhile (now - prev > 0.0000001) :\n\t\tprev = now;\n\t\tii += 1;\n\t\tnow += acc*prob_a;\n\t\tacc *= (1-prob_a)*(1-prob_b);\n\t\tpass\n\n\tprintf('%.6f\\n', now);\n\t\n\tpass",
        "correct": false,
        "task_id": "0491",
        "depth": 1
    },
    {
        "description": "Iahub and Sorin are the best competitive programmers in their town. However, they can't both qualify to an important contest. The selection will be made with the help of a single problem. Blatnatalag, a friend of Iahub, managed to get hold of the problem before the contest. Because he wants to make sure Iahub will be the one qualified, he tells Iahub the following task.\n\nYou're given an (1-based) array a with n elements. Let's define function f(i, j) (1 \u2264 i, j \u2264 n) as (i - j)2 + g(i, j)2. Function g is calculated by the following pseudo-code:\n    \n    \n      \n    int g(int i, int j) {  \n        int sum = 0;  \n        for (int k = min(i, j) + 1; k <= max(i, j); k = k + 1)  \n            sum = sum + a[k];  \n        return sum;  \n    }  \n    \n\nFind a value mini \u2260 j f(i, j).\n\nProbably by now Iahub already figured out the solution to this problem. Can you?\n\nInput\n\nThe first line of input contains a single integer n (2 \u2264 n \u2264 100000). Next line contains n integers a[1], a[2], ..., a[n] ( - 104 \u2264 a[i] \u2264 104). \n\nOutput\n\nOutput a single integer \u2014 the value of mini \u2260 j f(i, j).\n\nExamples\n\nInput\n\n4\n1 0 0 -1\n\n\nOutput\n\n1\n\n\nInput\n\n2\n1 -1\n\n\nOutput\n\n2",
        "task_name": "429_D. Tricky Function",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import os,math\nrange = xrange\ncumsum = [int(x) for x in os.read(0,os.fstat(0).st_size).split()]\nn = cumsum[0]\ncumsum[0] = 0\nfor i in range(n):\n    cumsum[i+1] += cumsum[i]\n\ndef work(besta, i, sqrtbesta, lowerbound, upperbound, cumsumi):\n    for j in range(i+1, min(n, i - 1 + sqrtbesta) + 1):\n        if lowerbound < cumsum[j] < upperbound and (j-i)**2 + (cumsum[j] - cumsumi)**2 < besta:\n            besta = (j-i)**2 + (cumsum[j] - cumsumi)**2\n    return besta\n\nbesta = 10100**2\nfor i in range(1,n):\n    sqrtbesta = int(math.sqrt(besta))\n    lowerbound = -sqrtbesta + cumsum[i]\n    upperbound = sqrtbesta + cumsum[i]\n    besta = work(besta, i, sqrtbesta, lowerbound, upperbound, cumsum[i])\nprint(besta)",
        "correct": false,
        "task_id": "0494",
        "depth": 1
    },
    {
        "description": "Being a programmer, you like arrays a lot. For your birthday, your friends have given you an array a consisting of n distinct integers.\n\nUnfortunately, the size of a is too small. You want a bigger array! Your friends agree to give you a bigger array, but only if you are able to answer the following question correctly: is it possible to sort the array a (in increasing order) by reversing exactly one segment of a? See definitions of segment and reversing in the notes.\n\nInput\n\nThe first line of the input contains an integer n (1 \u2264 n \u2264 105) \u2014 the size of array a.\n\nThe second line contains n distinct space-separated integers: a[1], a[2], ..., a[n] (1 \u2264 a[i] \u2264 109).\n\nOutput\n\nPrint \"yes\" or \"no\" (without quotes), depending on the answer.\n\nIf your answer is \"yes\", then also print two space-separated integers denoting start and end (start must not be greater than end) indices of the segment to be reversed. If there are multiple ways of selecting these indices, print any of them.\n\nExamples\n\nInput\n\n3\n3 2 1\n\n\nOutput\n\nyes\n1 3\n\n\nInput\n\n4\n2 1 3 4\n\n\nOutput\n\nyes\n1 2\n\n\nInput\n\n4\n3 1 2 4\n\n\nOutput\n\nno\n\n\nInput\n\n2\n1 2\n\n\nOutput\n\nyes\n1 1\n\nNote\n\nSample 1. You can reverse the entire array to get [1, 2, 3], which is sorted.\n\nSample 3. No segment can be reversed such that the array will be sorted.\n\nDefinitions\n\nA segment [l, r] of array a is the sequence a[l], a[l + 1], ..., a[r].\n\nIf you have an array a of size n and you reverse its segment [l, r], the array will become:\n\na[1], a[2], ..., a[l - 2], a[l - 1], a[r], a[r - 1], ..., a[l + 1], a[l], a[r + 1], a[r + 2], ..., a[n - 1], a[n].",
        "task_name": "451_B. Sort the Array",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nn = int(raw_input())\na = [int(x) for x in raw_input().split(' ')]\n\nb = sorted(a)\nf, t = 0, 0\n\n\nfor i in xrange(n):\n    if a[i] != b[i]:\n        f = i\n        break\nfor i in xrange(n - 1, 0, -1):\n    if a[i] != b[i]:\n        t = i\n        break\nif a[:f] + a[f:t + 1][::-1] + a[t + 1:] == b:\n    sys.stdout.write('yes\\n%s %s' % (f + 1, t + 1))\nelse:\n    sys.stdout.write('no')\n",
        "correct": true,
        "task_id": "0495",
        "depth": 1
    },
    {
        "description": "Our good friend Mole is trying to code a big message. He is typing on an unusual keyboard with characters arranged in following way:\n    \n    \n      \n    qwertyuiop  \n    asdfghjkl;  \n    zxcvbnm,./  \n    \n\nUnfortunately Mole is blind, so sometimes it is problem for him to put his hands accurately. He accidentally moved both his hands with one position to the left or to the right. That means that now he presses not a button he wants, but one neighboring button (left or right, as specified in input).\n\nWe have a sequence of characters he has typed and we want to find the original message.\n\nInput\n\nFirst line of the input contains one letter describing direction of shifting ('L' or 'R' respectively for left or right).\n\nSecond line contains a sequence of characters written by Mole. The size of this sequence will be no more than 100. Sequence contains only symbols that appear on Mole's keyboard. It doesn't contain spaces as there is no space on Mole's keyboard.\n\nIt is guaranteed that even though Mole hands are moved, he is still pressing buttons on keyboard and not hitting outside it.\n\nOutput\n\nPrint a line that contains the original message.\n\nExamples\n\nInput\n\nR\ns;;upimrrfod;pbr\n\n\nOutput\n\nallyouneedislove",
        "task_name": "474_A. Keyboard",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nl1=['q','w','e','r','t','y','u','i','o','p','a','s','d','f','g','h','j','k','l',';','z','x','c','v','b','n','m',',','.','/']\nchar=raw_input()\nword=raw_input()\nl=list(word)\nj=0\nif(char=='R'):\n\tfor j in range(0,len(word)):\n\t\tfor i in range(0,len(l1)):\n\t\t\tif(l1[i]==word[j]):\n\t\t\t\tsys.stdout.write(l1[i-1])\n\t\t\nif(char=='L'):\n\tfor i in range(0,len(l1)):\n\t\tif(l1[i]==word[j]):\n\t\t\tsys.stdout.write(l1[i+1])\n\t\t\tj=j+1\n\nprint",
        "correct": false,
        "task_id": "0496",
        "depth": 2
    },
    {
        "description": "Vasya became interested in bioinformatics. He's going to write an article about similar cyclic DNA sequences, so he invented a new method for determining the similarity of cyclic sequences.\n\nLet's assume that strings s and t have the same length n, then the function h(s, t) is defined as the number of positions in which the respective symbols of s and t are the same. Function h(s, t) can be used to define the function of Vasya distance \u03c1(s, t): \n\n<image> where <image> is obtained from string s, by applying left circular shift i times. For example, \u03c1(\"AGC\", \"CGT\") =  h(\"AGC\", \"CGT\") + h(\"AGC\", \"GTC\") + h(\"AGC\", \"TCG\") +  h(\"GCA\", \"CGT\") + h(\"GCA\", \"GTC\") + h(\"GCA\", \"TCG\") +  h(\"CAG\", \"CGT\") + h(\"CAG\", \"GTC\") + h(\"CAG\", \"TCG\") =  1 + 1 + 0 + 0 + 1 + 1 + 1 + 0 + 1 = 6\n\nVasya found a string s of length n on the Internet. Now he wants to count how many strings t there are such that the Vasya distance from the string s attains maximum possible value. Formally speaking, t must satisfy the equation: <image>.\n\nVasya could not try all possible strings to find an answer, so he needs your help. As the answer may be very large, count the number of such strings modulo 109 + 7.\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 105).\n\nThe second line of the input contains a single string of length n, consisting of characters \"ACGT\".\n\nOutput\n\nPrint a single number \u2014 the answer modulo 109 + 7.\n\nExamples\n\nInput\n\n1\nC\n\n\nOutput\n\n1\n\n\nInput\n\n2\nAG\n\n\nOutput\n\n4\n\n\nInput\n\n3\nTTT\n\n\nOutput\n\n1\n\nNote\n\nPlease note that if for two distinct strings t1 and t2 values \u03c1(s, t1) \u0438 \u03c1(s, t2) are maximum among all possible t, then both strings must be taken into account in the answer even if one of them can be obtained by a circular shift of another one.\n\nIn the first sample, there is \u03c1(\"C\", \"C\") = 1, for the remaining strings t of length 1 the value of \u03c1(s, t) is 0.\n\nIn the second sample, \u03c1(\"AG\", \"AG\") = \u03c1(\"AG\", \"GA\") = \u03c1(\"AG\", \"AA\") = \u03c1(\"AG\", \"GG\") = 4.\n\nIn the third sample, \u03c1(\"TTT\", \"TTT\") = 27",
        "task_name": "521_A. DNA Alignment",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function, division\nimport sys\nit = iter(sys.stdin.read().splitlines())\nn = int(next(it))\ns = next(it)\nm = set()\nfor char in s:\n    m.add(char)\nk = len(m)\nprint((k**n) % (10**9 + 7))",
        "correct": false,
        "task_id": "0497",
        "depth": 1
    },
    {
        "description": "Wilbur is playing with a set of n points on the coordinate plane. All points have non-negative integer coordinates. Moreover, if some point (x, y) belongs to the set, then all points (x', y'), such that 0 \u2264 x' \u2264 x and 0 \u2264 y' \u2264 y also belong to this set.\n\nNow Wilbur wants to number the points in the set he has, that is assign them distinct integer numbers from 1 to n. In order to make the numbering aesthetically pleasing, Wilbur imposes the condition that if some point (x, y) gets number i, then all (x',y') from the set, such that x' \u2265 x and y' \u2265 y must be assigned a number not less than i. For example, for a set of four points (0, 0), (0, 1), (1, 0) and (1, 1), there are two aesthetically pleasing numberings. One is 1, 2, 3, 4 and another one is 1, 3, 2, 4.\n\nWilbur's friend comes along and challenges Wilbur. For any point he defines it's special value as s(x, y) = y - x. Now he gives Wilbur some w1, w2,..., wn, and asks him to find an aesthetically pleasing numbering of the points in the set, such that the point that gets number i has it's special value equal to wi, that is s(xi, yi) = yi - xi = wi.\n\nNow Wilbur asks you to help him with this challenge.\n\nInput\n\nThe first line of the input consists of a single integer n (1 \u2264 n \u2264 100 000) \u2014 the number of points in the set Wilbur is playing with.\n\nNext follow n lines with points descriptions. Each line contains two integers x and y (0 \u2264 x, y \u2264 100 000), that give one point in Wilbur's set. It's guaranteed that all points are distinct. Also, it is guaranteed that if some point (x, y) is present in the input, then all points (x', y'), such that 0 \u2264 x' \u2264 x and 0 \u2264 y' \u2264 y, are also present in the input.\n\nThe last line of the input contains n integers. The i-th of them is wi ( - 100 000 \u2264 wi \u2264 100 000) \u2014 the required special value of the point that gets number i in any aesthetically pleasing numbering.\n\nOutput\n\nIf there exists an aesthetically pleasant numbering of points in the set, such that s(xi, yi) = yi - xi = wi, then print \"YES\" on the first line of the output. Otherwise, print \"NO\".\n\nIf a solution exists, proceed output with n lines. On the i-th of these lines print the point of the set that gets number i. If there are multiple solutions, print any of them.\n\nExamples\n\nInput\n\n5\n2 0\n0 0\n1 0\n1 1\n0 1\n0 -1 -2 1 0\n\n\nOutput\n\nYES\n0 0\n1 0\n2 0\n0 1\n1 1\n\n\nInput\n\n3\n1 0\n0 0\n2 0\n0 1 2\n\n\nOutput\n\nNO\n\nNote\n\nIn the first sample, point (2, 0) gets number 3, point (0, 0) gets number one, point (1, 0) gets number 2, point (1, 1) gets number 5 and point (0, 1) gets number 4. One can easily check that this numbering is aesthetically pleasing and yi - xi = wi.\n\nIn the second sample, the special values of the points in the set are 0,  - 1, and  - 2 while the sequence that the friend gives to Wilbur is 0, 1, 2. Therefore, the answer does not exist.",
        "task_name": "596_C. Wilbur and Points",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom collections import *\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\n\n\ndef solve():\n    mem, mem2, out = Counter(w), defaultdict(list), []\n    for x, y in a:\n        mem2[y - x].append([x, y])\n\n    for i, j in mem.items():\n        if len(mem2[i]) != j:\n            print('NO')\n            exit()\n        mem2[i].sort(reverse=True)\n\n    for i in range(n):\n        x, y = mem2[w[i]][-1]\n        labels[x][y] = i + 1\n\n        if i and labels[x + 1][y] < labels[x][y] or labels[x][y + 1] < labels[x][y]:\n            print('NO')\n            exit()\n        out.append(' '.join(map(str, mem2[w[i]].pop())))\n\n    print('YES')\n    print('\\n'.join(out))\n\n\nn, labels = int(input()), [[0 for _ in range(1000)] for _ in range(1000)]\na, w = [rints() for _ in range(n)], rints()\nsolve()\n",
        "correct": false,
        "task_id": "0498",
        "depth": 1
    },
    {
        "description": "Berland scientists face a very important task - given the parts of short DNA fragments, restore the dinosaur DNA! The genome of a berland dinosaur has noting in common with the genome that we've used to: it can have 26 distinct nucleotide types, a nucleotide of each type can occur at most once. If we assign distinct English letters to all nucleotides, then the genome of a Berland dinosaur will represent a non-empty string consisting of small English letters, such that each letter occurs in it at most once.\n\nScientists have n genome fragments that are represented as substrings (non-empty sequences of consecutive nucleotides) of the sought genome.\n\nYou face the following problem: help scientists restore the dinosaur genome. It is guaranteed that the input is not contradictory and at least one suitable line always exists. When the scientists found out that you are a strong programmer, they asked you in addition to choose the one with the minimum length. If there are multiple such strings, choose any string.\n\nInput\n\nThe first line of the input contains a positive integer n (1 \u2264 n \u2264 100) \u2014 the number of genome fragments.\n\nEach of the next lines contains one descriptions of a fragment. Each fragment is a non-empty string consisting of distinct small letters of the English alphabet. It is not guaranteed that the given fragments are distinct. Fragments could arbitrarily overlap and one fragment could be a substring of another one.\n\nIt is guaranteed that there is such string of distinct letters that contains all the given fragments as substrings.\n\nOutput\n\nIn the single line of the output print the genome of the minimum length that contains all the given parts. All the nucleotides in the genome must be distinct. If there are multiple suitable strings, print the string of the minimum length. If there also are multiple suitable strings, you can print any of them.\n\nExamples\n\nInput\n\n3\nbcd\nab\ncdef\n\n\nOutput\n\nabcdef\n\n\nInput\n\n4\nx\ny\nz\nw\n\n\nOutput\n\nxyzw",
        "task_name": "638_B. Making Genome in Berland",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def validate_and_join(next, genom):\n    for c, chunk in enumerate(genom):\n        if next in chunk:\n            return False\n\n        # next is head of chunk\n        if next[-1] in chunk:\n            i = chunk.index(next[-1])\n            for j in range(len(next) - 1, i - 1, -1):\n                if chunk.startswith(next[-j:]):\n                    genom[c] = next + chunk[j:]\n                    return True\n\n        # next is tail of chunk\n        if next[0] in chunk:\n            i = chunk.rindex(next[0])\n            for j in range(len(next) - 1, i - 1, -1):\n                if chunk.endswith(next[:j]):\n                    genom[c] = chunk + next[j:]\n                    return True\n\n    genom.insert(0, next)\n\nimport sys\ndata = sys.stdin.read().split()\nn, i = int(data.pop(0)), 0\nassert len(data) == n\ndata = sorted(data, key=len)\ngenom = [data.pop()]\nwhile data:\n    next = data.pop()\n    validate_and_join(next, genom)\n\nsys.stdout.write(''.join(genom))",
        "correct": false,
        "task_id": "0499",
        "depth": 2
    },
    {
        "description": "Memory is performing a walk on the two-dimensional plane, starting at the origin. He is given a string s with his directions for motion:\n\n  * An 'L' indicates he should move one unit left. \n  * An 'R' indicates he should move one unit right. \n  * A 'U' indicates he should move one unit up. \n  * A 'D' indicates he should move one unit down.\n\n\n\nBut now Memory wants to end at the origin. To do this, he has a special trident. This trident can replace any character in s with any of 'L', 'R', 'U', or 'D'. However, because he doesn't want to wear out the trident, he wants to make the minimum number of edits possible. Please tell Memory what is the minimum number of changes he needs to make to produce a string that, when walked, will end at the origin, or if there is no such string.\n\nInput\n\nThe first and only line contains the string s (1 \u2264 |s| \u2264 100 000) \u2014 the instructions Memory is given.\n\nOutput\n\nIf there is a string satisfying the conditions, output a single integer \u2014 the minimum number of edits required. In case it's not possible to change the sequence in such a way that it will bring Memory to to the origin, output -1.\n\nExamples\n\nInput\n\nRRU\n\n\nOutput\n\n-1\n\n\nInput\n\nUDUR\n\n\nOutput\n\n1\n\n\nInput\n\nRUUR\n\n\nOutput\n\n2\n\nNote\n\nIn the first sample test, Memory is told to walk right, then right, then up. It is easy to see that it is impossible to edit these instructions to form a valid walk.\n\nIn the second sample test, Memory is told to walk up, then down, then up, then right. One possible solution is to change s to \"LDUR\". This string uses 1 edit, which is the minimum possible. It also ends at the origin.",
        "task_name": "712_B. Memory and Trident",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s=raw_input()\nln=len(s)\nif ln%2==1:\n\tprint -1\nelse:\n\tll,rr,uu,dd=0,0,0,0\n\tfor ch in s:\n\t\tif ch=='L':\n\t\t\tll+=1\n\t\telif ch=='R':\n\t\t\trr+=1\n\t\telif ch=='U':\n\t\t\tuu+=1\n\t\telif ch=='D':\n\t\t\tdd+=1\n\tprint (max((max(ll,rr)-min(ll,rr)),(max(dd,uu)-min(dd,uu)))+1)/2\n\n",
        "correct": false,
        "task_id": "0500",
        "depth": 1
    },
    {
        "description": "One day, the Grasshopper was jumping on the lawn and found a piece of paper with a string. Grasshopper became interested what is the minimum jump ability he should have in order to be able to reach the far end of the string, jumping only on vowels of the English alphabet. Jump ability is the maximum possible length of his jump. \n\nFormally, consider that at the begginning the Grasshopper is located directly in front of the leftmost character of the string. His goal is to reach the position right after the rightmost character of the string. In one jump the Grasshopper could jump to the right any distance from 1 to the value of his jump ability.\n\n<image> The picture corresponds to the first example.\n\nThe following letters are vowels: 'A', 'E', 'I', 'O', 'U' and 'Y'.\n\nInput\n\nThe first line contains non-empty string consisting of capital English letters. It is guaranteed that the length of the string does not exceed 100. \n\nOutput\n\nPrint single integer a \u2014 the minimum jump ability of the Grasshopper (in the number of symbols) that is needed to overcome the given string, jumping only on vowels.\n\nExamples\n\nInput\n\nABABBBACFEYUKOTT\n\n\nOutput\n\n4\n\nInput\n\nAAA\n\n\nOutput\n\n1",
        "task_name": "733_A. Grasshopper And the String",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "letters = raw_input()\ntemp = 0\ntemp2 = 0\n\nfor i in letters:\n    if i in \"AEIOUY\":\n        temp += 1\n        if(temp > temp2):\n            temp2 = temp\n        temp = 0\n    else:\n        temp += 1\ntemp += 1\nif(temp > temp2):\n    temp2 = temp\nprint(temp2)",
        "correct": true,
        "task_id": "0501",
        "depth": 1
    },
    {
        "description": "Bash has set out on a journey to become the greatest Pokemon master. To get his first Pokemon, he went to Professor Zulu's Lab. Since Bash is Professor Zulu's favourite student, Zulu allows him to take as many Pokemon from his lab as he pleases.\n\nBut Zulu warns him that a group of k > 1 Pokemon with strengths {s1, s2, s3, ..., sk} tend to fight among each other if gcd(s1, s2, s3, ..., sk) = 1 (see notes for gcd definition).\n\nBash, being smart, does not want his Pokemon to fight among each other. However, he also wants to maximize the number of Pokemon he takes from the lab. Can you help Bash find out the maximum number of Pokemon he can take? \n\nNote: A Pokemon cannot fight with itself.\n\nInput\n\nThe input consists of two lines.\n\nThe first line contains an integer n (1 \u2264 n \u2264 105), the number of Pokemon in the lab.\n\nThe next line contains n space separated integers, where the i-th of them denotes si (1 \u2264 si \u2264 105), the strength of the i-th Pokemon.\n\nOutput\n\nPrint single integer \u2014 the maximum number of Pokemons Bash can take.\n\nExamples\n\nInput\n\n3\n2 3 4\n\n\nOutput\n\n2\n\n\nInput\n\n5\n2 3 4 6 7\n\n\nOutput\n\n3\n\nNote\n\ngcd (greatest common divisor) of positive integers set {a1, a2, ..., an} is the maximum positive integer that divides all the integers {a1, a2, ..., an}.\n\nIn the first sample, we can take Pokemons with strengths {2, 4} since gcd(2, 4) = 2.\n\nIn the second sample, we can take Pokemons with strengths {2, 4, 6}, and there is no larger group with gcd \u2260 1.",
        "task_name": "757_B. Bash's Big Day",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom collections import Counter\n\n\ndef count_prime(n):\n    prim, ans = [0] * (n + 1), 0\n\n    for i in range(2, n):\n        if not prim[i]:\n            prim[i] = a[i]\n            for j in range(i << 1, n, i):\n                prim[j] = i\n                prim[i] += a[j]\n\n            ans = max(ans, prim[i])\n\n    print(max(ans, 1))\n\n\nn, a = int(input()), Counter([int(x) for x in stdin.readline().split()])\ncount_prime(10 ** 5 + 1)\n",
        "correct": true,
        "task_id": "0502",
        "depth": 2
    },
    {
        "description": "As it's the first of April, Heidi is suspecting that the news she reads today are fake, and she does not want to look silly in front of all the contestants. She knows that a newspiece is fake if it contains heidi as a subsequence. Help Heidi assess whether the given piece is true, but please be discreet about it...\n\nInput\n\nThe first and only line of input contains a single nonempty string s of length at most 1000 composed of lowercase letters (a-z).\n\nOutput\n\nOutput YES if the string s contains heidi as a subsequence and NO otherwise.\n\nExamples\n\nInput\n\nabcheaibcdi\n\n\nOutput\n\nYES\n\nInput\n\nhiedi\n\n\nOutput\n\nNO\n\nNote\n\nA string s contains another string p as a subsequence if it is possible to delete some characters from s and obtain p.",
        "task_name": "802_G. Fake News (easy)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\npattern = 'heidi'\ntext = sys.stdin.readline()\n\nmatch = False\nmax_match = 0\nfor char in text:\n\tif char == pattern[max_match]:\n\t\tmax_match += 1\n\tif max_match == len(pattern):\n\t\tmatch = True\n\t\tbreak\n\nprint('YES' if match else 'NO')",
        "correct": true,
        "task_id": "0503",
        "depth": 1
    },
    {
        "description": "Makes solves problems on Decoforces and lots of other different online judges. Each problem is denoted by its difficulty \u2014 a positive integer number. Difficulties are measured the same across all the judges (the problem with difficulty d on Decoforces is as hard as the problem with difficulty d on any other judge). \n\nMakes has chosen n problems to solve on Decoforces with difficulties a1, a2, ..., an. He can solve these problems in arbitrary order. Though he can solve problem i with difficulty ai only if he had already solved some problem with difficulty <image> (no matter on what online judge was it).\n\nBefore starting this chosen list of problems, Makes has already solved problems with maximum difficulty k.\n\nWith given conditions it's easy to see that Makes sometimes can't solve all the chosen problems, no matter what order he chooses. So he wants to solve some problems on other judges to finish solving problems from his list. \n\nFor every positive integer y there exist some problem with difficulty y on at least one judge besides Decoforces.\n\nMakes can solve problems on any judge at any time, it isn't necessary to do problems from the chosen list one right after another.\n\nMakes doesn't have too much free time, so he asked you to calculate the minimum number of problems he should solve on other judges in order to solve all the chosen problems from Decoforces.\n\nInput\n\nThe first line contains two integer numbers n, k (1 \u2264 n \u2264 103, 1 \u2264 k \u2264 109).\n\nThe second line contains n space-separated integer numbers a1, a2, ..., an (1 \u2264 ai \u2264 109).\n\nOutput\n\nPrint minimum number of problems Makes should solve on other judges in order to solve all chosen problems on Decoforces.\n\nExamples\n\nInput\n\n3 3\n2 1 9\n\n\nOutput\n\n1\n\n\nInput\n\n4 20\n10 3 6 3\n\n\nOutput\n\n0\n\nNote\n\nIn the first example Makes at first solves problems 1 and 2. Then in order to solve the problem with difficulty 9, he should solve problem with difficulty no less than 5. The only available are difficulties 5 and 6 on some other judge. Solving any of these will give Makes opportunity to solve problem 3.\n\nIn the second example he can solve every problem right from the start.",
        "task_name": "825_C. Multi-judge Solving",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n\nn,k=map(int,raw_input().strip().split())\nA=map(int,raw_input().strip().split())\n\n\"\"\"\nn,k=4,20\nA=[10,3,6,3]\n\"\"\"\nA.sort()\n\nc = 0\nfor ai in A:\n    while ai > 2 * k:\n        k *= 2\n        c += 1\n    k = max(k, ai)\nprint(c)\nexit()",
        "correct": true,
        "task_id": "0504",
        "depth": 2
    },
    {
        "description": "From beginning till end, this message has been waiting to be conveyed.\n\nFor a given unordered multiset of n lowercase English letters (\"multi\" means that a letter may appear more than once), we treat all letters as strings of length 1, and repeat the following operation n - 1 times:\n\n  * Remove any two elements s and t from the set, and add their concatenation s + t to the set. \n\n\n\nThe cost of such operation is defined to be <image>, where f(s, c) denotes the number of times character c appears in string s.\n\nGiven a non-negative integer k, construct any valid non-empty set of no more than 100 000 letters, such that the minimum accumulative cost of the whole process is exactly k. It can be shown that a solution always exists.\n\nInput\n\nThe first and only line of input contains a non-negative integer k (0 \u2264 k \u2264 100 000) \u2014 the required minimum cost.\n\nOutput\n\nOutput a non-empty string of no more than 100 000 lowercase English letters \u2014 any multiset satisfying the requirements, concatenated to be a string.\n\nNote that the printed string doesn't need to be the final concatenated string. It only needs to represent an unordered multiset of letters.\n\nExamples\n\nInput\n\n12\n\n\nOutput\n\nabababab\n\n\nInput\n\n3\n\n\nOutput\n\ncodeforces\n\nNote\n\nFor the multiset {'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b'}, one of the ways to complete the process is as follows:\n\n  * {\"ab\", \"a\", \"b\", \"a\", \"b\", \"a\", \"b\"}, with a cost of 0; \n  * {\"aba\", \"b\", \"a\", \"b\", \"a\", \"b\"}, with a cost of 1; \n  * {\"abab\", \"a\", \"b\", \"a\", \"b\"}, with a cost of 1; \n  * {\"abab\", \"ab\", \"a\", \"b\"}, with a cost of 0; \n  * {\"abab\", \"aba\", \"b\"}, with a cost of 1; \n  * {\"abab\", \"abab\"}, with a cost of 1; \n  * {\"abababab\"}, with a cost of 8. \n\n\n\nThe total cost is 12, and it can be proved to be the minimum cost of the process.",
        "task_name": "848_A. From Y to Y",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#k = int(raw_input())\n\n\ndef one_letter_thingy(number):\n    if number == 0:\n        return 0\n    if number == 1:\n        return 0\n    return (one_letter_thingy(number - (number/2)) + one_letter_thingy((number/2))) + ((number - (number/2)) * (number/2))\n\nletters = [0] * 26\n\nk = int(raw_input())\n\nfor letter in range(26):\n    if k == 0:\n        break\n    i = 0\n    while True:\n        if one_letter_thingy(i) <=k:\n            letters[letter] = i\n        else:\n            break\n        i += 1\n    k -= one_letter_thingy(letters[letter])\n\nlet = \"abcdefghijklmnopqrstuvwxyz\"\n\nst = \"\"\nfor idx, l in enumerate(letters):\n    st += let[idx] * letters[idx]\nprint(st)",
        "correct": false,
        "task_id": "0505",
        "depth": 2
    },
    {
        "description": "Arkady wants to water his only flower. Unfortunately, he has a very poor watering system that was designed for n flowers and so it looks like a pipe with n holes. Arkady can only use the water that flows from the first hole.\n\nArkady can block some of the holes, and then pour A liters of water into the pipe. After that, the water will flow out from the non-blocked holes proportionally to their sizes s_1, s_2, \u2026, s_n. In other words, if the sum of sizes of non-blocked holes is S, and the i-th hole is not blocked, (s_i \u22c5 A)/(S) liters of water will flow out of it.\n\nWhat is the minimum number of holes Arkady should block to make at least B liters of water flow out of the first hole?\n\nInput\n\nThe first line contains three integers n, A, B (1 \u2264 n \u2264 100 000, 1 \u2264 B \u2264 A \u2264 10^4) \u2014 the number of holes, the volume of water Arkady will pour into the system, and the volume he wants to get out of the first hole.\n\nThe second line contains n integers s_1, s_2, \u2026, s_n (1 \u2264 s_i \u2264 10^4) \u2014 the sizes of the holes.\n\nOutput\n\nPrint a single integer \u2014 the number of holes Arkady should block.\n\nExamples\n\nInput\n\n4 10 3\n2 2 2 2\n\n\nOutput\n\n1\n\n\nInput\n\n4 80 20\n3 2 1 4\n\n\nOutput\n\n0\n\n\nInput\n\n5 10 10\n1000 1 1 1 1\n\n\nOutput\n\n4\n\nNote\n\nIn the first example Arkady should block at least one hole. After that, (10 \u22c5 2)/(6) \u2248 3.333 liters of water will flow out of the first hole, and that suits Arkady.\n\nIn the second example even without blocking any hole, (80 \u22c5 3)/(10) = 24 liters will flow out of the first hole, that is not less than 20.\n\nIn the third example Arkady has to block all holes except the first to make all water flow out of the first hole.",
        "task_name": "967_B. Watering System",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division\nfrom sys import stdin, stdout\nfrom collections import *\n\nrstr = lambda: stdin.readline().strip()\nrstrs = lambda: [str(x) for x in stdin.readline().split()]\nrstr_2d = lambda n: [rstr() for _ in range(n)]\nrint = lambda: int(stdin.readline())\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrint_2d = lambda n: [rint() for _ in range(n)]\nrints_2d = lambda n: [rints() for _ in range(n)]\npr = lambda args, sep: stdout.write(sep.join(map(str, args)) + '\\n')\nceil1, out = lambda a, b: (a + b - 1) // b, []\n\nn, a, b = rints()\ns = rints()\next, ans, su = (a * s[0]) // b, 0, sum(s)\nfor i in sorted(s[1:])[::-1]:\n    if su <= ext:\n        break\n    su -= i\n    ans += 1\nprint(ans)\n",
        "correct": true,
        "task_id": "0507",
        "depth": 1
    },
    {
        "description": "Two participants are each given a pair of distinct numbers from 1 to 9 such that there's exactly one number that is present in both pairs. They want to figure out the number that matches by using a communication channel you have access to without revealing it to you.\n\nBoth participants communicated to each other a set of pairs of numbers, that includes the pair given to them. Each pair in the communicated sets comprises two different numbers.\n\nDetermine if you can with certainty deduce the common number, or if you can determine with certainty that both participants know the number but you do not.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 12) \u2014 the number of pairs the first participant communicated to the second and vice versa.\n\nThe second line contains n pairs of integers, each between 1 and 9, \u2014 pairs of numbers communicated from first participant to the second.\n\nThe third line contains m pairs of integers, each between 1 and 9, \u2014 pairs of numbers communicated from the second participant to the first.\n\nAll pairs within each set are distinct (in particular, if there is a pair (1,2), there will be no pair (2,1) within the same set), and no pair contains the same number twice.\n\nIt is guaranteed that the two sets do not contradict the statements, in other words, there is pair from the first set and a pair from the second set that share exactly one number.\n\nOutput\n\nIf you can deduce the shared number with certainty, print that number.\n\nIf you can with certainty deduce that both participants know the shared number, but you do not know it, print 0.\n\nOtherwise print -1.\n\nExamples\n\nInput\n\n2 2\n1 2 3 4\n1 5 3 4\n\n\nOutput\n\n1\n\n\nInput\n\n2 2\n1 2 3 4\n1 5 6 4\n\n\nOutput\n\n0\n\n\nInput\n\n2 3\n1 2 4 5\n1 2 1 3 2 3\n\n\nOutput\n\n-1\n\nNote\n\nIn the first example the first participant communicated pairs (1,2) and (3,4), and the second communicated (1,5), (3,4). Since we know that the actual pairs they received share exactly one number, it can't be that they both have (3,4). Thus, the first participant has (1,2) and the second has (1,5), and at this point you already know the shared number is 1.\n\nIn the second example either the first participant has (1,2) and the second has (1,5), or the first has (3,4) and the second has (6,4). In the first case both of them know the shared number is 1, in the second case both of them know the shared number is 4. You don't have enough information to tell 1 and 4 apart.\n\nIn the third case if the first participant was given (1,2), they don't know what the shared number is, since from their perspective the second participant might have been given either (1,3), in which case the shared number is 1, or (2,3), in which case the shared number is 2. While the second participant does know the number with certainty, neither you nor the first participant do, so the output is -1.",
        "task_name": "993_B. Open Communication",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, m = map(int, raw_input().split())\np1 = list(map(int,raw_input().split()))\np2 = list(map(int,raw_input().split()))\ncand = set()\ncc = [set() for i in range(n)]\ndd = [set() for i in range(m)]\nfor i in range(n):\n    for j in range(m):\n        a, b = p1[2 * i], p1[2 * i + 1]\n        c, d = p2[2 * j], p2[2 * j + 1]\n        if a not in (c, d) and b not in (c, d):\n            continue\n        if a in (c, d) and b in (c, d):\n            continue\n        if a in (c, d):\n            kandidat = a\n        else:\n            kandidat = b\n        cand.add(kandidat)\n        cc[i].add(kandidat)\n        dd[j].add(kandidat)\nif len(cand) == 1:\n    print(cand.pop())\nelif max(len(cc[i]) for i in range(n)) <= 1 and\\\n        max(len(dd[i]) for i in range(m)) <= 1:\n    print(0)\nelse:\n    print(-1)",
        "correct": true,
        "task_id": "0508",
        "depth": 2
    },
    {
        "description": "We have A apples and P pieces of apple.\n\nWe can cut an apple into three pieces of apple, and make one apple pie by simmering two pieces of apple in a pan.\n\nFind the maximum number of apple pies we can make with what we have now.\n\nConstraints\n\n* All values in input are integers.\n* 0 \\leq A, P \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA P\n\n\nOutput\n\nPrint the maximum number of apple pies we can make with what we have.\n\nExamples\n\nInput\n\n1 3\n\n\nOutput\n\n3\n\n\nInput\n\n0 1\n\n\nOutput\n\n0\n\n\nInput\n\n32 21\n\n\nOutput\n\n58",
        "task_name": "p03029 AtCoder Beginner Contest 128 - Apple Pie",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import numpy as np\nn = int(input())\nSP=[]\nSPs=[]\nfor i in range(n):\n    SP=[i]\n    for j in input().split():\n        \n        SP.append(j)\n    SPs.append(SP)\n\nSPs=np.array(SPs)\nSPs2=SPs[SPs[:,2].astype(int).argsort()[::-1],:]\nSPs3=SPs2[SPs2[:,1].argsort(),:][:,0]\n\nfor i in range(n):\n    print(int(SPs3[i])+1)\n",
        "correct": false,
        "task_id": "0511",
        "depth": 2
    },
    {
        "description": "There is a set A = \\\\{ a_1, a_2, \\ldots, a_N \\\\} consisting of N positive integers. Taro and Jiro will play the following game against each other.\n\nInitially, we have a pile consisting of K stones. The two players perform the following operation alternately, starting from Taro:\n\n* Choose an element x in A, and remove exactly x stones from the pile.\n\n\n\nA player loses when he becomes unable to play. Assuming that both players play optimally, determine the winner.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 100\n* 1 \\leq K \\leq 10^5\n* 1 \\leq a_1 < a_2 < \\cdots < a_N \\leq K\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\na_1 a_2 \\ldots a_N\n\n\nOutput\n\nIf Taro will win, print `First`; if Jiro will win, print `Second`.\n\nExamples\n\nInput\n\n2 4\n2 3\n\n\nOutput\n\nFirst\n\n\nInput\n\n2 5\n2 3\n\n\nOutput\n\nSecond\n\n\nInput\n\n2 7\n2 3\n\n\nOutput\n\nFirst\n\n\nInput\n\n3 20\n1 2 3\n\n\nOutput\n\nSecond\n\n\nInput\n\n3 21\n1 2 3\n\n\nOutput\n\nFirst\n\n\nInput\n\n1 100000\n1\n\n\nOutput\n\nSecond",
        "task_name": "p03170 Educational DP Contest - Stones",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import os\nfrom io import BytesIO\n\ninput = BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\nn, k = map(int, input().split())\na = [int(i) for i in input().split()]\n\ndp = [False] * (k + 1)\n\nfor ai in a:\n    dp[ai] = True\n\nfor i in xrange(max(a) + 1, k + 1):\n    dp[i] = any(not dp[i - ai] for ai in a)\n\nos.write(1, 'First' if dp[k] else 'Second')",
        "correct": false,
        "task_id": "0512",
        "depth": 1
    },
    {
        "description": "You are going out for a walk, when you suddenly encounter a monster. Fortunately, you have N katana (swords), Katana 1, Katana 2, \u2026, Katana N, and can perform the following two kinds of attacks in any order:\n\n* Wield one of the katana you have. When you wield Katana i (1 \u2264 i \u2264 N), the monster receives a_i points of damage. The same katana can be wielded any number of times.\n* Throw one of the katana you have. When you throw Katana i (1 \u2264 i \u2264 N) at the monster, it receives b_i points of damage, and you lose the katana. That is, you can no longer wield or throw that katana.\n\n\n\nThe monster will vanish when the total damage it has received is H points or more. At least how many attacks do you need in order to vanish it in total?\n\nConstraints\n\n* 1 \u2264 N \u2264 10^5\n* 1 \u2264 H \u2264 10^9\n* 1 \u2264 a_i \u2264 b_i \u2264 10^9\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN H\na_1 b_1\n:\na_N b_N\n\n\nOutput\n\nPrint the minimum total number of attacks required to vanish the monster.\n\nExamples\n\nInput\n\n1 10\n3 5\n\n\nOutput\n\n3\n\n\nInput\n\n2 10\n3 5\n2 6\n\n\nOutput\n\n2\n\n\nInput\n\n4 1000000000\n1 1\n1 10000000\n1 30000000\n1 99999999\n\n\nOutput\n\n860000004\n\n\nInput\n\n5 500\n35 44\n28 83\n46 62\n31 79\n40 43\n\n\nOutput\n\n9",
        "task_name": "p03472 AtCoder Beginner Contest 085 - Katana Thrower",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# -*- coding: utf-8 -*-\n\nimport sys\n\nn, h = [int(e) for e in raw_input().split()]\n\nkl = []\nfor i in range(0, n):\n    a, b = [int(e) for e in raw_input().split()]\n    kl.append((b, 0))\n    kl.append((a, 1))\n\nkl.sort(reverse=True)\n# print kl\n\nn = 0\ni = 0\nwhile h > 0:\n    k = kl[i]\n    if k[1] == 0:\n        h -= k[0]\n        i += 1\n        n += 1\n    else:\n        n = n + ((h + k[0] - 1) / k[0])\n        break\n\nsys.stdout.write('%d\\n' % (n))\nsys.stdout.flush()\n",
        "correct": true,
        "task_id": "0514",
        "depth": 1
    },
    {
        "description": "You are given a tree with N vertices.\nHere, a tree is a kind of graph, and more specifically, a connected undirected graph with N-1 edges, where N is the number of its vertices.\nThe i-th edge (1\u2264i\u2264N-1) connects Vertices a_i and b_i, and has a length of c_i.\n\nYou are also given Q queries and an integer K. In the j-th query (1\u2264j\u2264Q):\n\n* find the length of the shortest path from Vertex x_j and Vertex y_j via Vertex K.\n\nConstraints\n\n* 3\u2264N\u226410^5\n* 1\u2264a_i,b_i\u2264N (1\u2264i\u2264N-1)\n* 1\u2264c_i\u226410^9 (1\u2264i\u2264N-1)\n* The given graph is a tree.\n* 1\u2264Q\u226410^5\n* 1\u2264K\u2264N\n* 1\u2264x_j,y_j\u2264N (1\u2264j\u2264Q)\n* x_j\u2260y_j (1\u2264j\u2264Q)\n* x_j\u2260K,y_j\u2260K (1\u2264j\u2264Q)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 b_1 c_1\n:\na_{N-1} b_{N-1} c_{N-1}\nQ K\nx_1 y_1\n:\nx_{Q} y_{Q}\n\n\nOutput\n\nPrint the responses to the queries in Q lines.\nIn the j-th line j(1\u2264j\u2264Q), print the response to the j-th query.\n\nExamples\n\nInput\n\n5\n1 2 1\n1 3 1\n2 4 1\n3 5 1\n3 1\n2 4\n2 3\n4 5\n\n\nOutput\n\n3\n2\n4\n\n\nInput\n\n7\n1 2 1\n1 3 3\n1 4 5\n1 5 7\n1 6 9\n1 7 11\n3 2\n1 3\n4 5\n6 7\n\n\nOutput\n\n5\n14\n22\n\n\nInput\n\n10\n1 2 1000000000\n2 3 1000000000\n3 4 1000000000\n4 5 1000000000\n5 6 1000000000\n6 7 1000000000\n7 8 1000000000\n8 9 1000000000\n9 10 1000000000\n1 1\n9 10\n\n\nOutput\n\n17000000000",
        "task_name": "p03634 AtCoder Beginner Contest 070 - Transit Tree Path",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nfrom scipy.sparse import*\nf=lambda*z:map(int,sys.stdin.readline().split())\nn,=f();a,b,c=zip(*map(f,xrange(~-n)));q,k=f();r=[0]*q\nz=map(int,csgraph.dijkstra(csr_matrix((c,(a,b)),[n+1]*2),0,k)[1:])\nfor _ in range(q):x,y=f();r[_]=str(z[x-1]+z[y-1])\nsys.stdout.write('\\n'.join(r))",
        "correct": false,
        "task_id": "0515",
        "depth": 1
    },
    {
        "description": "There is a square-shaped grid with N vertical rows and N horizontal columns. We will denote the square at the i-th row from the top and the j-th column from the left as (i,\\ j).\n\nInitially, each square is either white or black. The initial color of the grid is given to you as characters a_{ij}, arranged in a square shape. If the square (i,\\ j) is white, a_{ij} is `.`. If it is black, a_{ij} is `#`.\n\nYou are developing a robot that repaints the grid. It can repeatedly perform the following operation:\n\n* Select two integers i, j (1 \u2264 i,\\ j \u2264 N). Memorize the colors of the squares (i,\\ 1), (i,\\ 2), ..., (i,\\ N) as c_1, c_2, ..., c_N, respectively. Then, repaint the squares (1,\\ j), (2,\\ j), ..., (N,\\ j) with the colors c_1, c_2, ..., c_N, respectively.\n\n\n\nYour objective is to turn all the squares black. Determine whether it is possible, and find the minimum necessary number of operations to achieve it if the answer is positive.\n\nConstraints\n\n* 2 \u2264 N \u2264 500\n* a_{ij} is either `.` or `#`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\na_{11}...a_{1N}\n:\na_{N1}...a_{NN}\n\n\nOutput\n\nIf it is possible to turn all the squares black, print the minimum necessary number of operations to achieve the objective. If it is impossible, print `-1` instead.\n\nExamples\n\nInput\n\n2\n#.\n.#\n\n\nOutput\n\n3\n\n\nInput\n\n2\n.\n.#\n\n\nOutput\n\n3\n\n\nInput\n\n2\n..\n..\n\n\nOutput\n\n-1\n\n\nInput\n\n2\n\n\nOutput\n\n0\n\n\nInput\n\n3\n.#.\n\n.#.\n\n\nOutput\n\n2\n\n\nInput\n\n3\n...\n.#.\n...\n\n\nOutput\n\n5",
        "task_name": "p03792 Mujin Programming Challenge 2017 - Row to Column",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = input()\nA = [raw_input() for i in xrange(n)]\n\nR = [sum(e[j] == '#' for j in xrange(n)) for e in A]\nC = [sum(A[j][i] == '#' for j in xrange(n)) for i in xrange(n)]\n\nc_need = sum(e < n for e in C)\n\nINF = 10**9+7\nans = INF\nfor i in xrange(n):\n    if R[i] == C[i] == 0:\n        continue\n    if C[i] == 0:\n        ans = min(ans, n-R[i] + c_need + 1)\n    else:\n        ans = min(ans, n-R[i] + c_need)\nprint -1 if ans == INF else ans\n",
        "correct": true,
        "task_id": "0516",
        "depth": 1
    },
    {
        "description": "One day Mr. Takahashi picked up a dictionary containing all of the N! permutations of integers 1 through N. The dictionary has N! pages, and page i (1 \u2264 i \u2264 N!) contains the i-th permutation in the lexicographical order.\n\nMr. Takahashi wanted to look up a certain permutation of length N in this dictionary, but he forgot some part of it.\n\nHis memory of the permutation is described by a sequence P_1, P_2, ..., P_N. If P_i = 0, it means that he forgot the i-th element of the permutation; otherwise, it means that he remembered the i-th element of the permutation and it is P_i.\n\nHe decided to look up all the possible permutations in the dictionary. Compute the sum of the page numbers of the pages he has to check, modulo 10^9 + 7.\n\nConstraints\n\n* 1 \u2264 N \u2264 500000\n* 0 \u2264 P_i \u2264 N\n* P_i \u2260 P_j if i \u2260 j (1 \u2264 i, j \u2264 N), P_i \u2260 0 and P_j \u2260 0.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nP_1 P_2 ... P_N\n\n\nOutput\n\nPrint the sum of the page numbers of the pages he has to check, as modulo 10^9 + 7.\n\nExamples\n\nInput\n\n4\n0 2 3 0\n\n\nOutput\n\n23\n\n\nInput\n\n3\n0 0 0\n\n\nOutput\n\n21\n\n\nInput\n\n5\n1 2 3 5 4\n\n\nOutput\n\n2\n\n\nInput\n\n1\n0\n\n\nOutput\n\n1\n\n\nInput\n\n10\n0 3 0 0 1 0 4 0 0 0\n\n\nOutput\n\n953330050",
        "task_name": "p03961 CODE FESTIVAL 2016 qual C - Encyclopedia of Permutations",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N = int(raw_input())\na = [int(x)-1 for x in raw_input().split()]\nweight = [1] * N\nM = 10**9+7\ndef factorial(n):\n    acc = 1\n    for i in xrange(1, 1 + n):\n        acc = (acc * i) % M\n    return acc\ndef inv(n):\n    return pow(n, M-2, M)\nfor i in xrange(N-1):\n    weight[N-2-i] = (weight[N-1-i] * (i+1)) % M\nmissing = list(set(xrange(N)) - set(a))\nmissing.sort()\nn_missing = len(missing)\nsum_missing = sum(missing)\navg_missing = sum_missing * inv(n_missing)\nn_present = N - n_missing\nn_rows = factorial(n_missing)\nacc = 0\ni_missing = 0\ni_present = 0\nmissing_lt_tot = 0\nfor i, (w, x) in enumerate(zip(weight, a)):\n    if x == -1:\n        ai = avg_missing\n        bi = i_missing * inv(2) + i_present - missing_lt_tot * inv(n_missing)\n        i_missing += 1\n    else:\n        ai = x\n        bi = 0\n        for j in xrange(i):\n            if a[j] != -1 and a[j] < a[i]:\n                bi += 1\n        missing_lt = 0\n        for j in missing:\n            if j < a[i]:\n                missing_lt += 1\n        missing_lt_tot += missing_lt\n        #print '@', missing_lt, n_missing, i_missing, n_rows\n        bi += missing_lt * inv(n_missing) * i_missing\n        coeff = 1\n        i_present += 1\n    #print (ai * n_rows) % M, (bi * n_rows) % M, w\n    acc = (acc + ((ai - bi) * n_rows) * w) % M\nprint (acc + n_rows) % M\n",
        "correct": false,
        "task_id": "0517",
        "depth": 2
    },
    {
        "description": "n! = n \u00d7 (n \u2212 1) \u00d7 (n \u2212 2) \u00d7 ... \u00d7 3 \u00d7 2 \u00d7 1\n\nIs called the factorial of n. For example, the factorial of 12\n\n12! = 12 x 11 x 10 x 9 x 8 x 7 x 6 x 5 x 4 x 3 x 2 x 1 = 479001600\n\nAnd there are two consecutive 0s at the end.\n\nWrite a program that inputs the integer n and outputs the number of consecutive 0s at the end of n !. However, n is a positive integer less than or equal to 20000.\n\n\n\nInput\n\nMultiple data are given. Each piece of data is given n (n \u2264 20000) on one line. When n is 0, it is the last input.\n\nThe number of data does not exceed 20.\n\nOutput\n\nFor each data, output the number of 0s that are consecutively arranged at the end of n! On one line.\n\nExample\n\nInput\n\n2\n12\n10000\n0\n\n\nOutput\n\n0\n2\n2499",
        "task_name": "p00052 Factorial II",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "while(True):\n    n = input()\n    if(n == 0):\n        break\n    ans = 0\n    a = 5\n    count = 0\n    while(True):\n        count = n / a\n        if(count == 0):\n            break\n        ans += count\n        a *= 5\n    print(ans)",
        "correct": true,
        "task_id": "0518",
        "depth": 2
    },
    {
        "description": "Quick sort is based on the Divide-and-conquer approach. In QuickSort(A, p, r), first, a procedure Partition(A, p, r) divides an array A[p..r] into two subarrays A[p..q-1] and A[q+1..r] such that each element of A[p..q-1] is less than or equal to A[q], which is, inturn, less than or equal to each element of A[q+1..r]. It also computes the index q.\n\nIn the conquer processes, the two subarrays A[p..q-1] and A[q+1..r] are sorted by recursive calls of QuickSort(A, p, q-1) and QuickSort(A, q+1, r).\n\nYour task is to read a sequence A and perform the Partition based on the following pseudocode:\n\n\nPartition(A, p, r)\n1 x = A[r]\n2 i = p-1\n3 for j = p to r-1\n4     do if A[j] <= x\n5        then i = i+1\n6            exchange A[i] and A[j]\n7 exchange A[i+1] and A[r]\n8 return i+1\n\n\nNote that, in this algorithm, Partition always selects an element A[r] as a pivot element around which to partition the array A[p..r].\n\nConstraints\n\n* 1 \u2264 n \u2264 100,000\n* 0 \u2264 Ai \u2264 100,000\n\nInput\n\nThe first line of the input includes an integer n, the number of elements in the sequence A.\n\nIn the second line, Ai (i = 1,2,...,n), elements of the sequence are given separated by space characters.\n\nOutput\n\nPrint the sorted sequence. Two contiguous elements of the sequence should be separated by a space character. The element which is selected as the pivot of the partition should be indicated by [  ].\n\nExample\n\nInput\n\n12\n13 19 9 5 12 8 7 4 21 2 6 11\n\n\nOutput\n\n9 5 8 7 4 2 6 [11] 21 13 19 12",
        "task_name": "p02276 Partition",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\nfrom sys import stdin\n\n\ndef patition(a, p, r):\n    x = a[r]\n    i = p-1\n    for j in range(p, r):\n        if a[j] <= x:\n            i += 1\n            a[i], a[j] = a[j], a[i]\n    a[i+1], a[r] = a[r], a[i+1]\n    return i+1\n\n\nn = int(stdin.readline())\ndata = [int(s) for s in stdin.readline().split()]\npat = patition(data, 0, data[-1])\nprint(*data[:pat], end=' ')\nprint('[{}]'.format(data[pat]), *data[pat+1:])",
        "correct": false,
        "task_id": "0519",
        "depth": 1
    },
    {
        "description": "There are n people sitting in a circle, numbered from 1 to n in the order in which they are seated. That is, for all i from 1 to n-1, the people with id i and i+1 are adjacent. People with id n and 1 are adjacent as well.\n\nThe person with id 1 initially has a ball. He picks a positive integer k at most n, and passes the ball to his k-th neighbour in the direction of increasing ids, that person passes the ball to his k-th neighbour in the same direction, and so on until the person with the id 1 gets the ball back. When he gets it back, people do not pass the ball any more.\n\nFor instance, if n = 6 and k = 4, the ball is passed in order [1, 5, 3, 1]. \n\nConsider the set of all people that touched the ball. The fun value of the game is the sum of the ids of people that touched it. In the above example, the fun value would be 1 + 5 + 3 = 9.\n\nFind and report the set of possible fun values for all choices of positive integer k. It can be shown that under the constraints of the problem, the ball always gets back to the 1-st player after finitely many steps, and there are no more than 10^5 possible fun values for given n.\n\nInput\n\nThe only line consists of a single integer n (2 \u2264 n \u2264 10^9) \u2014 the number of people playing with the ball.\n\nOutput\n\nSuppose the set of all fun values is f_1, f_2, ..., f_m.\n\nOutput a single line containing m space separated integers f_1 through f_m in increasing order.\n\nExamples\n\nInput\n\n\n6\n\n\nOutput\n\n\n1 5 9 21\n\n\nInput\n\n\n16\n\n\nOutput\n\n\n1 10 28 64 136\n\nNote\n\nIn the first sample, we've already shown that picking k = 4 yields fun value 9, as does k = 2. Picking k = 6 results in fun value of 1. For k = 3 we get fun value 5 and with k = 1 or k = 5 we get 21. \n\n<image>\n\nIn the second sample, the values 1, 10, 28, 64 and 136 are achieved for instance for k = 16, 8, 4, 10 and 11, respectively.",
        "task_name": "1091_C. New Year and the Sphere Transmission",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math;\nn=input();\ni=0;\ns=[];\nif round(math.sqrt(n))==math.sqrt(n):\n    while i<math.sqrt(n):\n        i+=1;\n        if n%i==0:\n            res=(n/i)*(float((n+1-i)+1)/2);\n            s.append(int(res));\n            if i!=math.sqrt(n):\n                res=i*(float((n+1-(n/i))+1)/2);\n                s.append(int(res));                                    \nelse:\n    while i<round(math.sqrt(n)):\n        i+=1;\n        if n%i==0:\n            res=(n/i)*(float((n+1-i)+1)/2);\n            s.append(int(res));\n            res=i*(float((n+1-(n/i))+1)/2);\n            s.append(int(res));        \ns.sort();\nprint(s);",
        "correct": false,
        "task_id": "0521",
        "depth": 1
    },
    {
        "description": "You are given an integer n (n \u2265 0) represented with k digits in base (radix) b. So,\n\n$$$n = a_1 \u22c5 b^{k-1} + a_2 \u22c5 b^{k-2} + \u2026 a_{k-1} \u22c5 b + a_k.$$$\n\nFor example, if b=17, k=3 and a=[11, 15, 7] then n=11\u22c517^2+15\u22c517+7=3179+255+7=3441.\n\nDetermine whether n is even or odd.\n\nInput\n\nThe first line contains two integers b and k (2\u2264 b\u2264 100, 1\u2264 k\u2264 10^5) \u2014 the base of the number and the number of digits.\n\nThe second line contains k integers a_1, a_2, \u2026, a_k (0\u2264 a_i < b) \u2014 the digits of n.\n\nThe representation of n contains no unnecessary leading zero. That is, a_1 can be equal to 0 only if k = 1.\n\nOutput\n\nPrint \"even\" if n is even, otherwise print \"odd\".\n\nYou can print each letter in any case (upper or lower).\n\nExamples\n\nInput\n\n13 3\n3 2 7\n\n\nOutput\n\neven\n\n\nInput\n\n10 9\n1 2 3 4 5 6 7 8 9\n\n\nOutput\n\nodd\n\n\nInput\n\n99 5\n32 92 85 74 4\n\n\nOutput\n\nodd\n\n\nInput\n\n2 2\n1 0\n\n\nOutput\n\neven\n\nNote\n\nIn the first example, n = 3 \u22c5 13^2 + 2 \u22c5 13 + 7 = 540, which is even.\n\nIn the second example, n = 123456789 is odd.\n\nIn the third example, n = 32 \u22c5 99^4 + 92 \u22c5 99^3 + 85 \u22c5 99^2 + 74 \u22c5 99 + 4 = 3164015155 is odd.\n\nIn the fourth example n = 2.",
        "task_name": "1110_A. Parity",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n\"\"\"\nThis file is part of https://github.com/Cheran-Senthil/PyRival.\nCopyright 2019 Cheran Senthilkumar <hello@cheran.io>\n\n\"\"\"\nfrom __future__ import division, print_function\n\nimport cmath\nimport itertools\nimport math\nimport operator as op\n# import random\nimport sys\nfrom atexit import register\nfrom bisect import bisect_left, bisect_right\n# from collections import Counter, defaultdict, deque\n# from copy import deepcopy\n# from decimal import Decimal\n# from difflib import SequenceMatcher\n# from functools import reduce\n# from heapq import heappop, heappush\nfrom io import BytesIO, FileIO, StringIO\n\n\nif sys.version_info[0] < 3:\n    class dict(dict):\n        \"\"\"dict() -> new empty dictionary\"\"\"\n        def items(self):\n            \"\"\"D.items() -> a set-like object providing a view on D's items\"\"\"\n            return dict.iteritems(self)\n\n        def keys(self):\n            \"\"\"D.keys() -> a set-like object providing a view on D's keys\"\"\"\n            return dict.iterkeys(self)\n\n        def values(self):\n            \"\"\"D.values() -> an object providing a view on D's values\"\"\"\n            return dict.itervalues(self)\n\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\n\nINP_FILE = 0\nOUT_FILE = 1\n\nif sys.version_info[0] < 3:\n    sys.stdin = BytesIO(FileIO(INP_FILE).read())\n    sys.stdout = BytesIO()\n    register(lambda: FileIO(OUT_FILE, 'w').write(sys.stdout.getvalue()))\nelse:\n    sys.stdin = StringIO(FileIO(INP_FILE).read().decode())\n    sys.stdout = StringIO()\n    register(lambda: FileIO(OUT_FILE, 'w').write(sys.stdout.getvalue().encode()))\n\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n\ndef main():\n    b, k = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    n = k % 2\n    m = a[-1] % 2\n    if n == 1:\n        for i in a[:-1]:\n            if i % 2 == 1:\n                m = not m\n\n    print('odd' if m else 'even')\n\n\nif __name__ == '__main__':\n    main()\n",
        "correct": false,
        "task_id": "0522",
        "depth": 1
    },
    {
        "description": "While playing with geometric figures Alex has accidentally invented a concept of a n-th order rhombus in a cell grid.\n\nA 1-st order rhombus is just a square 1 \u00d7 1 (i.e just a cell).\n\nA n-th order rhombus for all n \u2265 2 one obtains from a n-1-th order rhombus adding all cells which have a common side with it to it (look at the picture to understand it better).\n\n<image>\n\nAlex asks you to compute the number of cells in a n-th order rhombus.\n\nInput\n\nThe first and only input line contains integer n (1 \u2264 n \u2264 100) \u2014 order of a rhombus whose numbers of cells should be computed.\n\nOutput\n\nPrint exactly one integer \u2014 the number of cells in a n-th order rhombus.\n\nExamples\n\nInput\n\n\n1\n\n\nOutput\n\n\n1\n\nInput\n\n\n2\n\n\nOutput\n\n\n5\n\nInput\n\n\n3\n\n\nOutput\n\n\n13\n\nNote\n\nImages of rhombus corresponding to the examples are given in the statement.",
        "task_name": "1180_A. Alex and a Rhombus",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"                         \nBeautiful is better than ugly.\n    Explicit is better than implicit.\nSimple is better than complex.\n    Complex is better than complicated.\nFlat is better than nested.\n    Sparse is better than dense.\n                    \n    * Readability counts *\n\n // Author : raj1307 - Raj Singh\n // Date   : 21.06.19\n\n\"\"\"\n\nfrom __future__ import division, print_function\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    _str = str\n    str = lambda x=b\"\": x if type(x) is bytes else _str(x).encode()\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial,pow,pi\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod,MOD=1000000007,998244353\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p1\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n# For getting input from input.txt file \n#sys.stdin = open('input.txt', 'r')  \n  \n# Printing the Output to output.txt file \n#sys.stdout = open('output.txt', 'w') \n\ndef main():\n    \n    \n    #for _ in range(ii()):\n    \n    n=ii()\n    \n    if n==1: \n        print(1)\n    else:\n        \n        r=1\n        ans=1\n        for i in range(2,n+1):\n            \n            m=(r*r)%ans\n            r+=2\n            ans+=4+m\n            \n        print(ans)    \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        if self.buffer.tell():\n            return self.buffer.read()\n        return os.read(self._fd, os.fstat(self._fd).st_size)\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", b\" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", b\"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nsys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(b\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n    #dmain()",
        "correct": false,
        "task_id": "0524",
        "depth": 1
    },
    {
        "description": "For years, the Day of city N was held in the most rainy day of summer. New mayor decided to break this tradition and select a not-so-rainy day for the celebration. The mayor knows the weather forecast for the n days of summer. On the i-th day, a_i millimeters of rain will fall. All values a_i are distinct.\n\nThe mayor knows that citizens will watch the weather x days before the celebration and y days after. Because of that, he says that a day d is not-so-rainy if a_d is smaller than rain amounts at each of x days before day d and and each of y days after day d. In other words, a_d < a_j should hold for all d - x \u2264 j < d and d < j \u2264 d + y. Citizens only watch the weather during summer, so we only consider such j that 1 \u2264 j \u2264 n.\n\nHelp mayor find the earliest not-so-rainy day of summer.\n\nInput\n\nThe first line contains three integers n, x and y (1 \u2264 n \u2264 100 000, 0 \u2264 x, y \u2264 7) \u2014 the number of days in summer, the number of days citizens watch the weather before the celebration and the number of days they do that after.\n\nThe second line contains n distinct integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9), where a_i denotes the rain amount on the i-th day.\n\nOutput\n\nPrint a single integer \u2014 the index of the earliest not-so-rainy day of summer. We can show that the answer always exists.\n\nExamples\n\nInput\n\n\n10 2 2\n10 9 6 7 8 3 2 1 4 5\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n10 2 3\n10 9 6 7 8 3 2 1 4 5\n\n\nOutput\n\n\n8\n\n\nInput\n\n\n5 5 5\n100000 10000 1000 100 10\n\n\nOutput\n\n\n5\n\nNote\n\nIn the first example days 3 and 8 are not-so-rainy. The 3-rd day is earlier.\n\nIn the second example day 3 is not not-so-rainy, because 3 + y = 6 and a_3 > a_6. Thus, day 8 is the answer. Note that 8 + y = 11, but we don't consider day 11, because it is not summer.",
        "task_name": "1199_A. City Day",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nsys.setrecursionlimit(10 ** 6)\n# pow(3,2,5)==4\n\nn,x,y=map(int,raw_input().split())\ninp2=map(int,raw_input().split())\nfor i in range(n):\n    flag=True\n    val=inp2[i]\n    for bef in range(1,x+1):\n        indis=i-bef\n        if indis<0:\n            break\n        if indis>=n:\n            break\n        if val>inp2[indis]:\n            flag=False\n            break\n    for aft in range(1,y+1):\n        indis=i+aft\n        if indis<0:\n            break\n        if indis>=n:\n            break\n        if val>inp2[indis]:\n            flag=False\n            break\n    if flag:\n        print(i+1)\n        break\n",
        "correct": true,
        "task_id": "0525",
        "depth": 2
    },
    {
        "description": "Recently Ivan the Fool decided to become smarter and study the probability theory. He thinks that he understands the subject fairly well, and so he began to behave like he already got PhD in that area.\n\nTo prove his skills, Ivan decided to demonstrate his friends a concept of random picture. A picture is a field of n rows and m columns, where each cell is either black or white. Ivan calls the picture random if for every cell it has at most one adjacent cell of the same color. Two cells are considered adjacent if they share a side.\n\nIvan's brothers spent some time trying to explain that it's not how the randomness usually works. Trying to convince Ivan, they want to count the number of different random (according to Ivan) pictures. Two pictures are considered different if at least one cell on those two picture is colored differently. Since the number of such pictures may be quite large, print it modulo 10^9 + 7.\n\nInput\n\nThe only line contains two integers n and m (1 \u2264 n, m \u2264 100 000), the number of rows and the number of columns of the field.\n\nOutput\n\nPrint one integer, the number of random pictures modulo 10^9 + 7.\n\nExample\n\nInput\n\n\n2 3\n\n\nOutput\n\n\n8\n\nNote\n\nThe picture below shows all possible random pictures of size 2 by 3. \n\n<image>",
        "task_name": "1239_A. Ivan the Fool and the Probability Theory",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,m=map(int,raw_input().split())\n\nmod=(10**9)+7\ndp=[0]*100005\n\nif n>m:\n\tn,m=m,n\n\ndp[0],dp[1],dp[2]=0,2,4\n\nfor i in xrange(3, m+1):\n\tdp[i]=dp[i-1]+dp[i-2]\n\tdp[i]%=mod\nprint (dp[n]+dp[m]-2+mod)%mod",
        "correct": true,
        "task_id": "0526",
        "depth": 1
    },
    {
        "description": "Let's call an array t dominated by value v in the next situation.\n\nAt first, array t should have at least 2 elements. Now, let's calculate number of occurrences of each number num in t and define it as occ(num). Then t is dominated (by v) if (and only if) occ(v) > occ(v') for any other number v'. For example, arrays [1, 2, 3, 4, 5, 2], [11, 11] and [3, 2, 3, 2, 3] are dominated (by 2, 11 and 3 respectevitely) but arrays [3], [1, 2] and [3, 3, 2, 2, 1] are not.\n\nSmall remark: since any array can be dominated only by one number, we can not specify this number and just say that array is either dominated or not.\n\nYou are given array a_1, a_2, ..., a_n. Calculate its shortest dominated subarray or say that there are no such subarrays.\n\nThe subarray of a is a contiguous part of the array a, i. e. the array a_i, a_{i + 1}, ..., a_j for some 1 \u2264 i \u2264 j \u2264 n.\n\nInput\n\nThe first line contains single integer T (1 \u2264 T \u2264 1000) \u2014 the number of test cases. Each test case consists of two lines.\n\nThe first line contains single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 n) \u2014 the corresponding values of the array a.\n\nIt's guaranteed that the total length of all arrays in one test doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint T integers \u2014 one per test case. For each test case print the only integer \u2014 the length of the shortest dominated subarray, or -1 if there are no such subarrays.\n\nExample\n\nInput\n\n\n4\n1\n1\n6\n1 2 3 4 5 1\n9\n4 1 2 4 5 4 3 2 1\n4\n3 3 3 3\n\n\nOutput\n\n\n-1\n6\n3\n2\n\nNote\n\nIn the first test case, there are no subarrays of length at least 2, so the answer is -1.\n\nIn the second test case, the whole array is dominated (by 1) and it's the only dominated subarray.\n\nIn the third test case, the subarray a_4, a_5, a_6 is the shortest dominated subarray.\n\nIn the fourth test case, all subarrays of length more than one are dominated.",
        "task_name": "1257_C. Dominated Subarray",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom collections import Counter\n\n\ndef solve():\n    be, en, ans, cur, most = -1, -1, float('inf'), 0, Counter(a).most_common(1)[0][0]\n\n    for i in range(n):\n        if a[i] == most:\n            if be == -1:\n                be = i\n            else:\n                ans = min(ans, i - be + 1)\n                be = i\n\n    return str(ans)\n\n\nout = []\nfor i in range(int(stdin.readline())):\n    n, a = int(stdin.readline()), list(map(int, stdin.readline().split()))\n    out.append(str(-1) if n == 1 else solve())\n\nprint('\\n'.join(out))\n",
        "correct": false,
        "task_id": "0527",
        "depth": 1
    },
    {
        "description": "Anu has created her own function f: f(x, y) = (x | y) - y where | denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR). For example, f(11, 6) = (11|6) - 6 = 15 - 6 = 9. It can be proved that for any nonnegative numbers x and y value of f(x, y) is also nonnegative. \n\nShe would like to research more about this function and has created multiple problems for herself. But she isn't able to solve all of them and needs your help. Here is one of these problems.\n\nA value of an array [a_1, a_2, ..., a_n] is defined as f(f(... f(f(a_1, a_2), a_3), ... a_{n-1}), a_n) (see notes). You are given an array with not necessarily distinct elements. How should you reorder its elements so that the value of the array is maximal possible?\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 10^9). Elements of the array are not guaranteed to be different.\n\nOutput\n\nOutput n integers, the reordering of the array with maximum value. If there are multiple answers, print any.\n\nExamples\n\nInput\n\n\n4\n4 0 11 6\n\n\nOutput\n\n\n11 6 4 0\n\nInput\n\n\n1\n13\n\n\nOutput\n\n\n13 \n\nNote\n\nIn the first testcase, value of the array [11, 6, 4, 0] is f(f(f(11, 6), 4), 0) = f(f(9, 4), 0) = f(9, 0) = 9.\n\n[11, 4, 0, 6] is also a valid answer.",
        "task_name": "1300_C. Anu Has a Function",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env pypy\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom __builtin__ import xrange as range\nfrom cStringIO import StringIO\nfrom future_builtins import ascii, filter, hex, map, oct, zip\nfrom io import IOBase\n\nimport __pypy__\n\n\ndef f(x, y):\n    return (x | y) - y\n\n\ndef main():\n    n = int(input())\n    a = [int(ai) for ai in input().split()]\n    a.sort()\n    res = a[0]\n    for i in range(n - 1):\n        res = f(res, a[i + 1])\n\n    print(res)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastI(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = StringIO()\n        self.newlines = 0\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(\"\\n\") + (not b)\n            ptr = self._buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(b), self._buffer.seek(ptr)\n        self.newlines -= 1\n        return self._buffer.readline()\n\n\nclass FastO(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = __pypy__.builders.StringBuilder()\n        self.write = lambda s: self._buffer.append(s)\n\n    def flush(self):\n        os.write(self._fd, self._buffer.build())\n        self._buffer = __pypy__.builders.StringBuilder()\n\n\ndef print(*args, **kwargs):\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nsys.stdin, sys.stdout = FastI(sys.stdin), FastO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": false,
        "task_id": "0528",
        "depth": 1
    },
    {
        "description": "The next lecture in a high school requires two topics to be discussed. The i-th topic is interesting by a_i units for the teacher and by b_i units for the students.\n\nThe pair of topics i and j (i < j) is called good if a_i + a_j > b_i + b_j (i.e. it is more interesting for the teacher).\n\nYour task is to find the number of good pairs of topics.\n\nInput\n\nThe first line of the input contains one integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of topics.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9), where a_i is the interestingness of the i-th topic for the teacher.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 10^9), where b_i is the interestingness of the i-th topic for the students.\n\nOutput\n\nPrint one integer \u2014 the number of good pairs of topic.\n\nExamples\n\nInput\n\n\n5\n4 8 2 6 2\n4 5 4 1 3\n\n\nOutput\n\n\n7\n\n\nInput\n\n\n4\n1 3 2 4\n1 3 2 4\n\n\nOutput\n\n\n0",
        "task_name": "1324_D. Pair of Topics",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom collections import *\nfrom bisect import *\n\n\ndef arr_inp(n):\n    if n == 1:\n        return [int(x) for x in stdin.readline().split()]\n    elif n == 2:\n        return [float(x) for x in stdin.readline().split()]\n    else:\n        return list(stdin.readline()[:-1])\n\n\nclass segmenttree:\n    def __init__(self, arr, n):\n        self.tree, self.n, self.map1 = [0] * (2 * n), n, defaultdict(int)\n        # build tree\n        if arr:\n            for i in range(2 * n - 1, 0, -1):\n                if i >= n:\n                    self.tree[i] = arr[i - n][1]\n                    self.map1[arr[i - n][0]] = i\n                else:\n                    self.tree[i] = self.tree[i << 1] + self.tree[(i << 1) + 1]\n\n    # get interval[l,r)\n    def query(self, l, r):\n        res = 0\n        # l += self.n\n        # r += self.n\n        while l < r:\n            if l & 1:\n                res += self.tree[l]\n                l += 1\n            if r & 1:\n                r -= 1\n                res += self.tree[r]\n            l >>= 1\n            r >>= 1\n\n        return res\n\n    def update(self, ix, val):\n        # ix += self.n\n        # set new value\n        self.tree[ix] = val\n        # move up\n        while ix > 1:\n            self.tree[ix >> 1] = self.tree[ix] + self.tree[ix ^ 1]\n            ix >>= 1\n\n\nn, a, b, mem = int(stdin.readline()), arr_inp(1), arr_inp(1), defaultdict(int)\nfor i in range(n):\n    mem[a[i] - b[i]] += 1\n\ntree = segmenttree(sorted(mem.items(), key=lambda x: x[0]), len(mem.values()))\ndis, ans, ext = set(), 0, 0 if min(mem.keys()) >= 0 else -(min(mem.keys()))\n\nfor i, j in mem.items():\n    dis.add(ext + i)\n\nfor i in range(n):\n    val = a[i] - b[i]\n    mem[val] -= 1\n\n    if not mem[val]:\n        dis.discard(val + ext)\n\n    tree.update(tree.map1[val], mem[val])\n    ix = bisect_right(list(dis), max(-(val - 1) + ext, 0))\n\n    if ix != len(dis):\n        if ix > 0 and list(dis)[ix - 1] == max(-(val - 1) + ext, 0):\n            ix -= 1\n        ans += tree.query(tree.map1[list(dis)[ix] - ext], tree.map1[list(dis)[-1] - ext] + 1)\n    # print(ix, dis, ans, max(-(val - 1) + ext, 0))\nprint(ans)\n",
        "correct": false,
        "task_id": "0529",
        "depth": 1
    },
    {
        "description": "Recall that the sequence b is a a subsequence of the sequence a if b can be derived from a by removing zero or more elements without changing the order of the remaining elements. For example, if a=[1, 2, 1, 3, 1, 2, 1], then possible subsequences are: [1, 1, 1, 1], [3] and [1, 2, 1, 3, 1, 2, 1], but not [3, 2, 3] and [1, 1, 1, 1, 2].\n\nYou are given a sequence a consisting of n positive and negative elements (there is no zeros in the sequence).\n\nYour task is to choose maximum by size (length) alternating subsequence of the given sequence (i.e. the sign of each next element is the opposite from the sign of the current element, like positive-negative-positive and so on or negative-positive-negative and so on). Among all such subsequences, you have to choose one which has the maximum sum of elements.\n\nIn other words, if the maximum length of alternating subsequence is k then your task is to find the maximum sum of elements of some alternating subsequence of length k.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in a. The second line of the test case contains n integers a_1, a_2, ..., a_n (-10^9 \u2264 a_i \u2264 10^9, a_i \u2260 0), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5 (\u2211 n \u2264 2 \u22c5 10^5).\n\nOutput\n\nFor each test case, print the answer \u2014 the maximum sum of the maximum by size (length) alternating subsequence of a.\n\nExample\n\nInput\n\n\n4\n5\n1 2 3 -1 -2\n4\n-1 -2 -1 -3\n10\n-2 8 3 8 -4 -15 5 -2 -3 1\n6\n1 -1000000000 1 -1000000000 1 -1000000000\n\n\nOutput\n\n\n2\n-1\n6\n-2999999997\n\nNote\n\nIn the first test case of the example, one of the possible answers is [1, 2, \\underline{3}, \\underline{-1}, -2].\n\nIn the second test case of the example, one of the possible answers is [-1, -2, \\underline{-1}, -3].\n\nIn the third test case of the example, one of the possible answers is [\\underline{-2}, 8, 3, \\underline{8}, \\underline{-4}, -15, \\underline{5}, \\underline{-2}, -3, \\underline{1}].\n\nIn the fourth test case of the example, one of the possible answers is [\\underline{1}, \\underline{-1000000000}, \\underline{1}, \\underline{-1000000000}, \\underline{1}, \\underline{-1000000000}].",
        "task_name": "1343_C. Alternating Subsequence",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    pass\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\ndef checker(a,b):\n    if a<0 and b<0:\n        return 'negative'\n    elif a>0 and b>0:\n        return 'positive'\n    else:\n        return 'change'\n    \nt=int(input())\nwhile t>0:\n    t-=1\n    n=int(input())\n    arr=list(map(int,input().split()))\n    maxx=arr[0]\n    summ=0\n    for i in range(1,n-1):\n        verdict=checker(arr[i],arr[i-1])\n        if verdict=='positive':\n            maxx=max(maxx,arr[i])\n        elif verdict=='negative':\n            maxx=max(maxx,arr[i])\n        else:\n            summ+=maxx\n            maxx=arr[i]\n    summ+=maxx\n    if checker(maxx,arr[-1])=='change':\n        summ+=arr[-1]\n            \n            \n    \n    print(summ)\n            \n            \n            ",
        "correct": false,
        "task_id": "0530",
        "depth": 2
    },
    {
        "description": "You are given a string s[1 ... n] consisting of lowercase Latin letters. It is guaranteed that n = 2^k for some integer k \u2265 0.\n\nThe string s[1 ... n] is called c-good if at least one of the following three conditions is satisfied:\n\n  * The length of s is 1, and it consists of the character c (i.e. s_1=c);\n  * The length of s is greater than 1, the first half of the string consists of only the character c (i.e. s_1=s_2=...=s_{n/2}=c) and the second half of the string (i.e. the string s_{n/2 + 1}s_{n/2 + 2} ... s_n) is a (c+1)-good string; \n  * The length of s is greater than 1, the second half of the string consists of only the character c (i.e. s_{n/2 + 1}=s_{n/2 + 2}=...=s_n=c) and the first half of the string (i.e. the string s_1s_2 ... s_{n/2}) is a (c+1)-good string. \n\n\n\nFor example: \"aabc\" is 'a'-good, \"ffgheeee\" is 'e'-good.\n\nIn one move, you can choose one index i from 1 to n and replace s_i with any lowercase Latin letter (any character from 'a' to 'z').\n\nYour task is to find the minimum number of moves required to obtain an 'a'-good string from s (i.e. c-good string for c= 'a'). It is guaranteed that the answer always exists.\n\nYou have to answer t independent test cases.\n\nAnother example of an 'a'-good string is as follows. Consider the string s = \"cdbbaaaa\". It is an 'a'-good string, because:\n\n  * the second half of the string (\"aaaa\") consists of only the character 'a'; \n  * the first half of the string (\"cdbb\") is 'b'-good string, because: \n    * the second half of the string (\"bb\") consists of only the character 'b'; \n    * the first half of the string (\"cd\") is 'c'-good string, because: \n      * the first half of the string (\"c\") consists of only the character 'c'; \n      * the second half of the string (\"d\") is 'd'-good string. \n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 \u2264 n \u2264 131~072) \u2014 the length of s. It is guaranteed that n = 2^k for some integer k \u2265 0. The second line of the test case contains the string s consisting of n lowercase Latin letters.\n\nIt is guaranteed that the sum of n does not exceed 2 \u22c5 10^5 (\u2211 n \u2264 2 \u22c5 10^5).\n\nOutput\n\nFor each test case, print the answer \u2014 the minimum number of moves required to obtain an 'a'-good string from s (i.e. c-good string with c = 'a'). It is guaranteed that the answer exists.\n\nExample\n\nInput\n\n\n6\n8\nbbdcaaaa\n8\nasdfghjk\n8\nceaaaabb\n8\nbbaaddcc\n1\nz\n2\nac\n\n\nOutput\n\n\n0\n7\n4\n5\n1\n1",
        "task_name": "1385_D. a-Good String",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "t = int(raw_input())\n\ndef aux(s, string):\n    if(len(s) == 1):\n        return int(s != string) \n        \n    i = len(s) / 2\n \n    s1 = s[:i] \n    s2 = s[i:]\n    stringOrd1 = chr(ord(string)+1)\n    \n    first = aux(s1, stringOrd1)\n    count = 0\n    for i in s2:\n      if(i == string):\n        count += 1\n        \n    first += len(s) / 2 - count  \n    \n    second = aux(s2, stringOrd1)\n    count = 0\n    for i in s1:\n      if(i == string):\n        count += 1\n        \n    second += len(s) / 2 - count\n \n    return min(first, second)\n    \nfor _ in range(t):\n    n = int(raw_input())\n    s = raw_input()\n    print(aux(s, 'a'))\n\n",
        "correct": true,
        "task_id": "0532",
        "depth": 1
    },
    {
        "description": "Several months later Alex finally got his brother Bob's creation by post. And now, in his turn, Alex wants to boast about something to his brother. He thought for a while, and came to the conclusion that he has no ready creations, and decided to write a program for rectangles detection. According to his plan, the program detects if the four given segments form a rectangle of a positive area and with sides parallel to coordinate axes. As Alex does badly at school and can't write this program by himself, he asks you to help him.\n\nInput\n\nThe input data contain four lines. Each of these lines contains four integers x1, y1, x2, y2 ( - 109 \u2264 x1, y1, x2, y2 \u2264 109) \u2014 coordinates of segment's beginning and end positions. The given segments can degenerate into points.\n\nOutput\n\nOutput the word \u00abYES\u00bb, if the given four segments form the required rectangle, otherwise output \u00abNO\u00bb.\n\nExamples\n\nInput\n\n1 1 6 1\n1 0 6 0\n6 0 6 1\n1 1 1 0\n\n\nOutput\n\nYES\n\n\nInput\n\n0 0 0 3\n2 0 0 0\n2 2 2 0\n0 2 2 2\n\n\nOutput\n\nNO",
        "task_name": "14_C. Four Segments",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import heapq\nimport sys\nimport unittest\n\ndef dist(seg):\n    return (seg[0][0]-seg[1][0])**2 + (seg[0][1]-seg[1][1])**2\n\ndef dosolve(inf):   \n    points = []\n    ret = []\n    for i in range(4):\n        x,y,x1,y1 = map(int,inf.readline().split())\n        f,t = [x,y],[x1,y1]\n        points.append(f)\n        points.append(t)\n        ret.append([f,t])\n    points.sort()\n    #print 'Points:%s' % points\n    #print 'Ret:%s' % ret\n    for i in range(4):\n        if points[2*i] != points[2*i+1]: return 'NO'\n    #print 'p2\\n'\n    m = [dist(d) for d in ret]\n    m.sort()\n    if m[0] != m[1]: return 'NO'\n    if m[2] != m[3]: return 'NO'\n    #print 'p3\\n' \n    if m[0] == 0: return 'NO'\n    #\n    #for r in ret:\n    #    if dist(r) != d: \n    #        print 'D:%s' % ((r,dist(r)),)\n    #        return 'NO'\n    #print 'p4\\n'\n    if dist([points[0],points[4]]) != dist([points[2],points[6]]): return 'NO'\n    #print 'p5\\n'\n    return 'YES'\n\ndef solvecase(inf,outf):\n    outf.write('%s\\n' % dosolve(inf))\n\nif __name__==\"__main__\":\n    solvecase(sys.stdin,sys.stdout)\n",
        "correct": false,
        "task_id": "0534",
        "depth": 1
    },
    {
        "description": "As Sherlock Holmes was investigating a crime, he identified n suspects. He knows for sure that exactly one of them committed the crime. To find out which one did it, the detective lines up the suspects and numbered them from 1 to n. After that, he asked each one: \"Which one committed the crime?\". Suspect number i answered either \"The crime was committed by suspect number ai\", or \"Suspect number ai didn't commit the crime\". Also, the suspect could say so about himself (ai = i).\n\nSherlock Holmes understood for sure that exactly m answers were the truth and all other answers were a lie. Now help him understand this: which suspect lied and which one told the truth?\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 105, 0 \u2264 m \u2264 n) \u2014 the total number of suspects and the number of suspects who told the truth. Next n lines contain the suspects' answers. The i-th line contains either \"+ai\" (without the quotes), if the suspect number i says that the crime was committed by suspect number ai, or \"-ai\" (without the quotes), if the suspect number i says that the suspect number ai didn't commit the crime (ai is an integer, 1 \u2264 ai \u2264 n).\n\nIt is guaranteed that at least one suspect exists, such that if he committed the crime, then exactly m people told the truth.\n\nOutput\n\nPrint n lines. Line number i should contain \"Truth\" if suspect number i has told the truth for sure. Print \"Lie\" if the suspect number i lied for sure and print \"Not defined\" if he could lie and could tell the truth, too, depending on who committed the crime.\n\nExamples\n\nInput\n\n1 1\n+1\n\n\nOutput\n\nTruth\n\n\nInput\n\n3 2\n-1\n-2\n-3\n\n\nOutput\n\nNot defined\nNot defined\nNot defined\n\n\nInput\n\n4 1\n+2\n-3\n+4\n-1\n\n\nOutput\n\nLie\nNot defined\nLie\nNot defined\n\nNote\n\nThe first sample has the single person and he confesses to the crime, and Sherlock Holmes knows that one person is telling the truth. That means that this person is telling the truth.\n\nIn the second sample there are three suspects and each one denies his guilt. Sherlock Holmes knows that only two of them are telling the truth. Any one of them can be the criminal, so we don't know for any of them, whether this person is telling the truth or not.\n\nIn the third sample the second and the fourth suspect defend the first and the third one. But only one is telling the truth, thus, the first or the third one is the criminal. Both of them can be criminals, so the second and the fourth one can either be lying or telling the truth. The first and the third one are lying for sure as they are blaming the second and the fourth one.",
        "task_name": "156_B. Suspects",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from math import *\nn,m=map(int,raw_input().split())\nr=range(0,n)\ns=map(int,(raw_input() for _ in r))\np=len(filter(lambda i: i<0,s))\na,b=[0]*n,[0]*n\nfor i in r:\n    if s[i]>0: a[s[i]-1]+=1\n    else: b[-s[i]-1]+=1\nd=map(lambda i: a[i]+p-b[i],r)\nk=len(filter(lambda i: i==m, d))\nfor i in r: print ['Truth','Lie','Not defined'][(d[abs(s[i])-1]==m)!=(s[i]>0) if k==1 else (2 if d[abs(s[i])-1]==m else s[i]>0)]\n",
        "correct": true,
        "task_id": "0535",
        "depth": 1
    },
    {
        "description": "The Smart Beaver from ABBYY was offered a job of a screenwriter for the ongoing TV series. In particular, he needs to automate the hard decision: which main characters will get married by the end of the series.\n\nThere are n single men and n single women among the main characters. An opinion poll showed that viewers like several couples, and a marriage of any of them will make the audience happy. The Smart Beaver formalized this fact as k triples of numbers (h, w, r), where h is the index of the man, w is the index of the woman, and r is the measure of the audience's delight in case of the marriage of this couple. The same poll showed that the marriage of any other couple will leave the audience indifferent, so the screenwriters decided not to include any such marriages in the plot.\n\nThe script allows you to arrange several marriages between the heroes or not to arrange marriages at all. A subset of some of the k marriages is considered acceptable if each man and each woman is involved in at most one marriage of the subset (the series won't allow any divorces). The value of the acceptable set of marriages is the total delight the spectators will get from the marriages included in this set.\n\nObviously, there is a finite number of acceptable sets, and they all describe some variants of the script. The screenwriters do not want to choose a set with maximum value \u2014 it would make the plot too predictable. So the Smart Beaver offers the following option: sort all the acceptable sets in increasing order of value and choose the t-th set from the sorted list. Thus, t = 1 corresponds to a plot without marriages, t = 2 \u2014 to a single marriage resulting in minimal delight for the audience, and so on.\n\nHelp the Beaver to implement the algorithm for selecting the desired set.\n\nInput\n\nThe first input line contains integers n, k and t (1 \u2264 k \u2264 min(100, n2), 1 \u2264 t \u2264 2\u00b7105), separated by single spaces. Next k lines contain triples of integers (h, w, r) (1 \u2264 h, w \u2264 n; 1 \u2264 r \u2264 1000), separated by single spaces, which describe the possible marriages. It is guaranteed that the input data is correct: t doesn't exceed the total number of acceptable sets, and each pair (h, w) is present in at most one triple.\n\nThe input limitations for getting 30 points are: \n\n  * 1 \u2264 n \u2264 5\n\n\n\nThe input limitations for getting 100 points are: \n\n  * 1 \u2264 n \u2264 20\n\nOutput\n\nPrint a single number \u2014 the value of the t-th acceptable variant.\n\nExamples\n\nInput\n\n2 4 3\n1 1 1\n1 2 2\n2 1 3\n2 2 7\n\n\nOutput\n\n2\n\n\nInput\n\n2 4 7\n1 1 1\n1 2 2\n2 1 3\n2 2 7\n\n\nOutput\n\n8\n\nNote\n\nThe figure shows 7 acceptable sets of marriages that exist in the first sample. \n\n<image>",
        "task_name": "177_F1. Script Generation",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import os\nimport Queue\n\nn = 0\nk = 0\nt = 0\nP = {}\nQ = Queue.PriorityQueue()\nM = []\n\ndef solve():\n    # read data\n    global n, k, t, P\n    read = reader()\n    n, k, t = list(map(int, next(read).split()))\n    t -= 1\n    if t == 0:\n        print(0)\n        return\n    for i in range(n):\n        P[i] = []\n    for i in range(k):\n        m = tuple(map(int, next(read).split()))\n        m = (m[0] - 1, m[1] - 1, m[2])\n        M.append(m)\n        Q.put((m[2], m, [set(), set()]))\n    \n    # solve\n    step = 0\n    points = -1\n    print(\"{0}: {1} {2} {3}\".format(1, 0, (-1, -1, 0), ()))\n    while not Q.empty():\n        step += 1\n        if step >= t:\n            break\n        points, m, used = Q.get()\n        print(\"{0}: {1} {2} {3}\".format(step+1, points, m, used))\n        usedA, usedB = set(used[0]), set(used[1])\n        usedA.add(m[0])\n        usedB.add(m[1])\n        for possibleM in M:\n            if possibleM[0] in usedA or possibleM[1] in usedB or possibleM > m:\n                continue\n            Q.put((points + possibleM[2], possibleM, [usedA, usedB]))\n    print(points)\n    \n\ndef reader():\n    if False:\n        with open(\"F.in\", \"r\") as fin:\n            while True:\n                yield next(fin)\n    else:\n        try: input = raw_input\n        except: pass\n        while True:\n            yield input()\n\nsolve()",
        "correct": false,
        "task_id": "0536",
        "depth": 2
    },
    {
        "description": "Qwerty the Ranger took up a government job and arrived on planet Mars. He should stay in the secret lab and conduct some experiments on bacteria that have funny and abnormal properties. The job isn't difficult, but the salary is high.\n\nAt the beginning of the first experiment there is a single bacterium in the test tube. Every second each bacterium in the test tube divides itself into k bacteria. After that some abnormal effects create b more bacteria in the test tube. Thus, if at the beginning of some second the test tube had x bacteria, then at the end of the second it will have kx + b bacteria.\n\nThe experiment showed that after n seconds there were exactly z bacteria and the experiment ended at this point.\n\nFor the second experiment Qwerty is going to sterilize the test tube and put there t bacteria. He hasn't started the experiment yet but he already wonders, how many seconds he will need to grow at least z bacteria. The ranger thinks that the bacteria will divide by the same rule as in the first experiment. \n\nHelp Qwerty and find the minimum number of seconds needed to get a tube with at least z bacteria in the second experiment.\n\nInput\n\nThe first line contains four space-separated integers k, b, n and t (1 \u2264 k, b, n, t \u2264 106) \u2014 the parameters of bacterial growth, the time Qwerty needed to grow z bacteria in the first experiment and the initial number of bacteria in the second experiment, correspondingly.\n\nOutput\n\nPrint a single number \u2014 the minimum number of seconds Qwerty needs to grow at least z bacteria in the tube.\n\nExamples\n\nInput\n\n3 1 3 5\n\n\nOutput\n\n2\n\nInput\n\n1 4 4 7\n\n\nOutput\n\n3\n\nInput\n\n2 2 4 100\n\n\nOutput\n\n0",
        "task_name": "199_C. About Bacteria",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from math import log, ceil\n\nk,b,n,t = map(int, raw_input('').split(' '))\nif k!=1:\n    c = k**(n-1)*(k-1+b)-b\n    if t*(k-1) >= c:\n        i = 0\n    else:\n        #i = ceil(log(c+1, k))\n        i = log(c+b, k) - log(t*(k-1)+b, k) + 1\n        '''i = int(i)\n        amount = k**(i-1)*(t+b/float(k-1))-b/float(k-1)\n        while amount < z:\n            i += 1\n            amount = k**(i-1)*(t+b/float(k-1))-b/float(k-1)'''\nelse:\n    z = k+b*(n-1)\n    if t >= z:\n        i = 0\n    else:\n        i = int((z-t)/float(b) + 1)\n        amount = t+b*(i-1)\n        while amount < z:\n            i += 1\n            amount = t+b*(i-1)\n\n#print(i)\nprint(int(ceil(i)))",
        "correct": false,
        "task_id": "0537",
        "depth": 1
    },
    {
        "description": "A boy named Vasya has taken part in an Olympiad. His teacher knows that in total Vasya got at least x points for both tours of the Olympiad. The teacher has the results of the first and the second tour of the Olympiad but the problem is, the results have only points, no names. The teacher has to know Vasya's chances.\n\nHelp Vasya's teacher, find two numbers \u2014 the best and the worst place Vasya could have won. Note that the total results' table sorts the participants by the sum of points for both tours (the first place has the participant who has got the most points). If two or more participants have got the same number of points, it's up to the jury to assign places to them according to their choice. It is guaranteed that each participant of the Olympiad participated in both tours of the Olympiad.\n\nInput\n\nThe first line contains two space-separated integers n, x (1 \u2264 n \u2264 105; 0 \u2264 x \u2264 2\u00b7105) \u2014 the number of Olympiad participants and the minimum number of points Vasya earned.\n\nThe second line contains n space-separated integers: a1, a2, ..., an (0 \u2264 ai \u2264 105) \u2014 the participants' points in the first tour.\n\nThe third line contains n space-separated integers: b1, b2, ..., bn (0 \u2264 bi \u2264 105) \u2014 the participants' points in the second tour.\n\nThe participants' points are given in the arbitrary order. It is guaranteed that Vasya was present in the Olympiad \u2014 there are two integers i, j (1 \u2264 i, j \u2264 n) such, that ai + bj \u2265 x.\n\nOutput\n\nPrint two space-separated integers \u2014 the best and the worst place Vasya could have got on the Olympiad.\n\nExamples\n\nInput\n\n5 2\n1 1 1 1 1\n1 1 1 1 1\n\n\nOutput\n\n1 5\n\n\nInput\n\n6 7\n4 3 5 6 4 4\n8 6 0 4 3 4\n\n\nOutput\n\n1 5\n\nNote\n\nIn the first text sample all 5 participants earn 2 points each in any case. Depending on the jury's decision, Vasya can get the first (the best) as well as the last (the worst) fifth place.\n\nIn the second test sample in the best case scenario Vasya wins again: he can win 12 points and become the absolute winner if the total results' table looks like that \u2014 {4:8, 6:4, 3:6, 4:4, 4:3, 5:0}.\n\nIn this table all participants are sorted by decreasing points and we can see how much a participant earned in the first and in the second tour.\n\nIn the worst case scenario Vasya can get the fifth place if the table looks like that \u2014 {4:8, 4:6, 6:4, 5:4, 4:3, 3:0}, and he earned 4 and 3 points in the first and second tours, correspondingly.",
        "task_name": "222_D. Olympiad",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nn, x = map(int, raw_input().split())\na, b, c = list(map(int, raw_input().split())), list(map(int, raw_input().split())), [0] * n\nfor i in range(n): c[i] = a[i] + b[i]\nc.sort(); \nfor i in range(n):\n    if c[i] >= x:\n        print('1 ' + str(n - i))\n        break\n    \n",
        "correct": false,
        "task_id": "0538",
        "depth": 1
    },
    {
        "description": "Let us call a pair of integer numbers m-perfect, if at least one number in the pair is greater than or equal to m. Thus, the pairs (3, 3) and (0, 2) are 2-perfect while the pair (-1, 1) is not.\n\nTwo integers x, y are written on the blackboard. It is allowed to erase one of them and replace it with the sum of the numbers, (x + y).\n\nWhat is the minimum number of such operations one has to perform in order to make the given pair of integers m-perfect?\n\nInput\n\nSingle line of the input contains three integers x, y and m ( - 1018 \u2264 x, y, m \u2264 1018).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preffered to use the cin, cout streams or the %I64d specifier.\n\nOutput\n\nPrint the minimum number of operations or \"-1\" (without quotes), if it is impossible to transform the given pair to the m-perfect one.\n\nExamples\n\nInput\n\n1 2 5\n\n\nOutput\n\n2\n\n\nInput\n\n-1 4 15\n\n\nOutput\n\n4\n\n\nInput\n\n0 -1 5\n\n\nOutput\n\n-1\n\nNote\n\nIn the first sample the following sequence of operations is suitable: (1, 2) <image> (3, 2) <image> (5, 2).\n\nIn the second sample: (-1, 4) <image> (3, 4) <image> (7, 4) <image> (11, 4) <image> (15, 4).\n\nFinally, in the third sample x, y cannot be made positive, hence there is no proper sequence of operations.",
        "task_name": "318_C. Perfect Pair",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\ninp = [map(int, i.split(' ')) for i in sys.stdin.read().strip().splitlines()]\n\nx, y, m = inp[0]\n\ndef check():\n    global x, y, m\n    return x >= m or y >= m\n\nif x <= 0 and y <= 0:\n    if check():\n        res = 0\n    else:\n        res = -1\nelse:\n    res = 0\n    while not check():\n        x, y = max(x, y), min(x, y)\n        if x > 0 and y < 0 and abs(x) < abs(y):\n            res += -y/x\n            y += x*(-y/x)\n        y += x\n        res += 1\n\nsys.stdout.write(str(res))\n",
        "correct": true,
        "task_id": "0541",
        "depth": 1
    },
    {
        "description": "A girl named Xenia has a cupboard that looks like an arc from ahead. The arc is made of a semicircle with radius r (the cupboard's top) and two walls of height h (the cupboard's sides). The cupboard's depth is r, that is, it looks like a rectangle with base r and height h + r from the sides. The figure below shows what the cupboard looks like (the front view is on the left, the side view is on the right).\n\n<image>\n\nXenia got lots of balloons for her birthday. The girl hates the mess, so she wants to store the balloons in the cupboard. Luckily, each balloon is a sphere with radius <image>. Help Xenia calculate the maximum number of balloons she can put in her cupboard. \n\nYou can say that a balloon is in the cupboard if you can't see any part of the balloon on the left or right view. The balloons in the cupboard can touch each other. It is not allowed to squeeze the balloons or deform them in any way. You can assume that the cupboard's walls are negligibly thin.\n\nInput\n\nThe single line contains two integers r, h (1 \u2264 r, h \u2264 107).\n\nOutput\n\nPrint a single integer \u2014 the maximum number of balloons Xenia can put in the cupboard.\n\nExamples\n\nInput\n\n1 1\n\n\nOutput\n\n3\n\n\nInput\n\n1 2\n\n\nOutput\n\n5\n\n\nInput\n\n2 1\n\n\nOutput\n\n2",
        "task_name": "342_C. Cupboard and Balloons",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math\n\n\ndef div(n, d):\n    q, r = 0, n\n    while r >= d:\n        q = q+1\n        r = r-d\n    return [q, r]\n\n\nnums = [int(x) for x in raw_input().split()]  # r, h\nr, h = float(nums[0]), nums[1]\n# For the lower part it's to count how many times does r fit in h.\n[n, d] = div(h, r)  # Post: h = n*r + d, d >= 0.\nif d < r/2:\n    print(2*n+1)\nelse:\n    x = math.sqrt((r**2)-(r/2)**2)\n    if x+r+n*r <= h+r:\n        print(2*n+3)\n    else:\n        print(2*n+2)\n",
        "correct": true,
        "task_id": "0542",
        "depth": 1
    },
    {
        "description": "Fox Ciel wants to write a task for a programming contest. The task is: \"You are given a simple undirected graph with n vertexes. Each its edge has unit length. You should calculate the number of shortest paths between vertex 1 and vertex 2.\"\n\nSame with some writers, she wants to make an example with some certain output: for example, her birthday or the number of her boyfriend. Can you help her to make a test case with answer equal exactly to k?\n\nInput\n\nThe first line contains a single integer k (1 \u2264 k \u2264 109).\n\nOutput\n\nYou should output a graph G with n vertexes (2 \u2264 n \u2264 1000). There must be exactly k shortest paths between vertex 1 and vertex 2 of the graph.\n\nThe first line must contain an integer n. Then adjacency matrix G with n rows and n columns must follow. Each element of the matrix must be 'N' or 'Y'. If Gij is 'Y', then graph G has a edge connecting vertex i and vertex j. Consider the graph vertexes are numbered from 1 to n.\n\nThe graph must be undirected and simple: Gii = 'N' and Gij = Gji must hold. And there must be at least one path between vertex 1 and vertex 2. It's guaranteed that the answer exists. If there multiple correct answers, you can output any of them. \n\nExamples\n\nInput\n\n2\n\nOutput\n\n4\nNNYY\nNNYY\nYYNN\nYYNN\n\nInput\n\n9\n\nOutput\n\n8\nNNYYYNNN\nNNNNNYYY\nYNNNNYYY\nYNNNNYYY\nYNNNNYYY\nNYYYYNNN\nNYYYYNNN\nNYYYYNNN\n\nInput\n\n1\n\nOutput\n\n2\nNY\nYN\n\nNote\n\nIn first example, there are 2 shortest paths: 1-3-2 and 1-4-2.\n\nIn second example, there are 9 shortest paths: 1-3-6-2, 1-3-7-2, 1-3-8-2, 1-4-6-2, 1-4-7-2, 1-4-8-2, 1-5-6-2, 1-5-7-2, 1-5-8-2.",
        "task_name": "389_D. Fox and Minimal path",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nk = int(sys.stdin.read().strip())\n\nif k == 1:\n    sys.stdout.write('2\\nNY\\nYN')\nelif k == 2:\n    sys.stdout.write('4\\nNNYY\\nNNYY\\nYYNN\\nYYNN')\nelif k == 3:\n    sys.stdout.write('5\\nNNYYY\\nNNYYY\\nYYNNN\\nYYNNN\\nYYNNN')\nelse:\n    pwr = 0\n    while 2**(pwr+1) <= k:\n        pwr += 1\n\n    vert = []\n    v = -1\n    for i in xrange(pwr):\n        if i == 0:\n            vert += [(1, 3), (1, 4), (3, 5), (4, 5)]\n            v = 5\n        elif i == pwr - 1:\n            vert += [(v, v+1), (v, v+2), (v+1, 2), (v+2, 2)]\n            v += 2\n        else:\n            vert += [(v, v+1), (v, v+2), (v+1, v+3), (v+2, v+3)]\n            v += 3\n    for i in xrange(pwr-1):\n        if k & (2 ** i):\n            if i == 0:\n                vstart = 1\n            else:\n                vstart = 2 + 3*i\n\n            vert += [(vstart, v+1)]\n            v += 1\n            for j in xrange(2 * (pwr-i-1)):\n                vert += [(v, v+1)]\n                v += 1\n            vert += [(v, 2)]\n\n    sys.stdout.write(\"%d\\n\" % v)\n    vz = [(['N']*v) for i in xrange(v)]\n\n    for a, b in vert:\n        vz[a-1][b-1] = vz[b-1][a-1] = 'Y'\n\n    sys.stdout.write('\\n'.join([''.join(i) for i in vz]))\n",
        "correct": false,
        "task_id": "0543",
        "depth": 2
    },
    {
        "description": "At the children's day, the child came to Picks's house, and messed his house up. Picks was angry at him. A lot of important things were lost, in particular the favorite set of Picks.\n\nFortunately, Picks remembers something about his set S:\n\n  * its elements were distinct integers from 1 to limit; \n  * the value of <image> was equal to sum; here lowbit(x) equals 2k where k is the position of the first one in the binary representation of x. For example, lowbit(100102) = 102, lowbit(100012) = 12, lowbit(100002) = 100002 (binary representation). \n\n\n\nCan you help Picks and find any set S, that satisfies all the above conditions?\n\nInput\n\nThe first line contains two integers: sum, limit (1 \u2264 sum, limit \u2264 105).\n\nOutput\n\nIn the first line print an integer n (1 \u2264 n \u2264 105), denoting the size of S. Then print the elements of set S in any order. If there are multiple answers, print any of them.\n\nIf it's impossible to find a suitable set, print -1.\n\nExamples\n\nInput\n\n5 5\n\n\nOutput\n\n2\n4 5\n\n\nInput\n\n4 3\n\n\nOutput\n\n3\n2 3 1\n\n\nInput\n\n5 1\n\n\nOutput\n\n-1\n\nNote\n\nIn sample test 1: lowbit(4) = 4, lowbit(5) = 1, 4 + 1 = 5.\n\nIn sample test 2: lowbit(1) = 1, lowbit(2) = 2, lowbit(3) = 1, 1 + 2 + 1 = 4.",
        "task_name": "437_B. The Child and Set",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math\ntarget, n = map(int, raw_input().split())\n\nA = []\ns = 0\n\nfor i in range(1,n+1):\n    k = (i & -i)-1\n    if i != 1 and k == i-1:\n        k = int(math.log(i,2))\n    A.append((2**k, i))\n    s += A[-1][0]\n\nif s < target:\n    print(-1)\n    exit()\n\nA.sort()\n\nselected = []\nfor tup in A:\n    target -= tup[0]\n    selected.append(tup[1])\n    if target <= 0:\n        break\n\nprint(len(selected))\nprint(\" \".join(map(str,selected)))\n\n\n\n",
        "correct": false,
        "task_id": "0544",
        "depth": 1
    },
    {
        "description": "On a history lesson the teacher asked Vasya to name the dates when n famous events took place. He doesn't remembers the exact dates but he remembers a segment of days [li, ri] (inclusive) on which the event could have taken place. However Vasya also remembers that there was at most one event in one day. Help him choose such n dates of famous events that will fulfill both conditions. It is guaranteed that it is possible.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of known events. Then follow n lines containing two integers li and ri each (1 \u2264 li \u2264 ri \u2264 107) \u2014 the earliest acceptable date and the latest acceptable date of the i-th event.\n\nOutput\n\nPrint n numbers \u2014 the dates on which the events took place. If there are several solutions, print any of them. It is guaranteed that a solution exists.\n\nExamples\n\nInput\n\n3\n1 2\n2 3\n3 4\n\n\nOutput\n\n1 2 3 \n\n\nInput\n\n2\n1 3\n1 3\n\n\nOutput\n\n1 2 ",
        "task_name": "45_D. Event Dates",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrints_2d = lambda n: [rints() + [i] for i in range(n)]\n\nn = int(input())\na = sorted(rints_2d(n), key=lambda x: x[1])\nout, cur = [0] * n, float('inf')\n\nwhile a:\n    cur, mi = min(cur - 1, a[-1][1]), [-1, float('inf')]\n\n    for l, r, ix in a:\n        if l <= cur <= r and l > mi[0]:\n            mi = [l, r, ix]\n\n    out[mi[-1]] = cur\n    a.remove(mi)\n\nprint(' '.join(map(str, out)))\n",
        "correct": true,
        "task_id": "0545",
        "depth": 2
    },
    {
        "description": "You are given a n \u00d7 m field consisting only of periods ('.') and asterisks ('*'). Your task is to count all right triangles with two sides parallel to the square sides, whose vertices are in the centers of '*'-cells. A right triangle is a triangle in which one angle is a right angle (that is, a 90 degree angle).\n\nInput\n\nThe first line contains two positive integer numbers n and m (1 \u2264 n, m \u2264 1000). The following n lines consist of m characters each, describing the field. Only '.' and '*' are allowed.\n\nOutput\n\nOutput a single number \u2014 total number of square triangles in the field. Please, do not use %lld specificator to read or write 64-bit integers in C++. It is preffered to use cout (also you may use %I64d).\n\nExamples\n\nInput\n\n2 2\n**\n*.\n\n\nOutput\n\n1\n\n\nInput\n\n3 4\n*..*\n.**.\n*.**\n\n\nOutput\n\n9",
        "task_name": "52_B. Right Triangles",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, m = map(int, raw_input().split())\ngrid = [ raw_input().strip() for r in range(n) ]\n\ncol_dirs = [ [ 0 for c in range(m) ] for r in range(n) ]\nfor c in range(m):\n    count = -1\n    for r in range(n):\n        if grid[r][c] == '*':\n            count += 1\n            col_dirs[r][c] += count\n    count = -1\n    for r in range(n - 1, -1, -1):\n        if grid[r][c] == '*':\n            count += 1\n            col_dirs[r][c] += count\n\nrow_dirs = [ [ 0 for c in range(m) ] for r in range(n) ]\nfor r in range(n):\n    count = -1\n    for c in range(m):\n        if grid[r][c] == '*':\n            count += 1\n            row_dirs[r][c] += count\n    count = -1\n    for c in range(m - 1, -1, -1):\n        if grid[r][c] == '*':\n            count += 1\n            row_dirs[r][c] += count\n\n#print(grid)\n#print(col_dirs)\n#print(row_dirs)\n\ntotal = 0\nfor r in range(n):\n    for c in range(m):\n        total += row_dirs[r][c] * col_dirs[r][c]\nprint(total)\n",
        "correct": true,
        "task_id": "0546",
        "depth": 2
    },
    {
        "description": "Petya loves computer games. Finally a game that he's been waiting for so long came out!\n\nThe main character of this game has n different skills, each of which is characterized by an integer ai from 0 to 100. The higher the number ai is, the higher is the i-th skill of the character. The total rating of the character is calculated as the sum of the values \u200b\u200bof <image> for all i from 1 to n. The expression \u230a x\u230b denotes the result of rounding the number x down to the nearest integer.\n\nAt the beginning of the game Petya got k improvement units as a bonus that he can use to increase the skills of his character and his total rating. One improvement unit can increase any skill of Petya's character by exactly one. For example, if a4 = 46, after using one imporvement unit to this skill, it becomes equal to 47. A hero's skill cannot rise higher more than 100. Thus, it is permissible that some of the units will remain unused.\n\nYour task is to determine the optimal way of using the improvement units so as to maximize the overall rating of the character. It is not necessary to use all the improvement units.\n\nInput\n\nThe first line of the input contains two positive integers n and k (1 \u2264 n \u2264 105, 0 \u2264 k \u2264 107) \u2014 the number of skills of the character and the number of units of improvements at Petya's disposal.\n\nThe second line of the input contains a sequence of n integers ai (0 \u2264 ai \u2264 100), where ai characterizes the level of the i-th skill of the character.\n\nOutput\n\nThe first line of the output should contain a single non-negative integer \u2014 the maximum total rating of the character that Petya can get using k or less improvement units.\n\nExamples\n\nInput\n\n2 4\n7 9\n\n\nOutput\n\n2\n\n\nInput\n\n3 8\n17 15 19\n\n\nOutput\n\n5\n\n\nInput\n\n2 2\n99 100\n\n\nOutput\n\n20\n\nNote\n\nIn the first test case the optimal strategy is as follows. Petya has to improve the first skill to 10 by spending 3 improvement units, and the second skill to 10, by spending one improvement unit. Thus, Petya spends all his improvement units and the total rating of the character becomes equal to  lfloor frac{100}{10} rfloor + lfloor frac{100}{10} rfloor = 10 + 10 =  20.\n\nIn the second test the optimal strategy for Petya is to improve the first skill to 20 (by spending 3 improvement units) and to improve the third skill to 20 (in this case by spending 1 improvement units). Thus, Petya is left with 4 improvement units and he will be able to increase the second skill to 19 (which does not change the overall rating, so Petya does not necessarily have to do it). Therefore, the highest possible total rating in this example is <image>.\n\nIn the third test case the optimal strategy for Petya is to increase the first skill to 100 by spending 1 improvement unit. Thereafter, both skills of the character will be equal to 100, so Petya will not be able to spend the remaining improvement unit. So the answer is equal to <image>. ",
        "task_name": "581_C. Developing Skills",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n#\n# http://codeforces.com/problemset/problem/581/C\n\ntry:\n    n, k = raw_input().split()\n    n, k = int(n), int(k)\n    nums = raw_input().split()\n    nums = [int(num) for num in nums]\n\n    nums.sort(cmp = lambda a, b: b%10 - a%10)\n\n    stop = False\n    while not stop:\n        stop = True\n        for i in range(0, n):\n            if k == 0: break\n            if nums[i] == 100: continue\n            delta = 10 - nums[i] % 10\n            if k < delta: break\n            stop = False\n            nums[i] = nums[i] + delta\n            k = k - delta\n\n    print(sum([num / 10 for num in nums]))\nexcept IOError:\n    pass        \n",
        "correct": true,
        "task_id": "0547",
        "depth": 2
    },
    {
        "description": "You are given a description of a depot. It is a rectangular checkered field of n \u00d7 m size. Each cell in a field can be empty (\".\") or it can be occupied by a wall (\"*\"). \n\nYou have one bomb. If you lay the bomb at the cell (x, y), then after triggering it will wipe out all walls in the row x and all walls in the column y.\n\nYou are to determine if it is possible to wipe out all walls in the depot by placing and triggering exactly one bomb. The bomb can be laid both in an empty cell or in a cell occupied by a wall.\n\nInput\n\nThe first line contains two positive integers n and m (1 \u2264 n, m \u2264 1000) \u2014 the number of rows and columns in the depot field. \n\nThe next n lines contain m symbols \".\" and \"*\" each \u2014 the description of the field. j-th symbol in i-th of them stands for cell (i, j). If the symbol is equal to \".\", then the corresponding cell is empty, otherwise it equals \"*\" and the corresponding cell is occupied by a wall.\n\nOutput\n\nIf it is impossible to wipe out all walls by placing and triggering exactly one bomb, then print \"NO\" in the first line (without quotes).\n\nOtherwise print \"YES\" (without quotes) in the first line and two integers in the second line \u2014 the coordinates of the cell at which the bomb should be laid. If there are multiple answers, print any of them.\n\nExamples\n\nInput\n\n3 4\n.*..\n....\n.*..\n\n\nOutput\n\nYES\n1 2\n\n\nInput\n\n3 3\n..*\n.*.\n*..\n\n\nOutput\n\nNO\n\n\nInput\n\n6 5\n..*..\n..*..\n*****\n..*..\n..*..\n..*..\n\n\nOutput\n\nYES\n3 3",
        "task_name": "699_B. One Bomb",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, m = map(int, raw_input().split())\ng = [ raw_input().strip() for r in range(n) ]\nrow_count = [ 0 for r in range(n) ]\ncol_count = [ 0 for c in range(m) ]\ntotal = 0\nfor r in range(n):\n  for c in range(m):\n    if g[r][c] == '*':\n      row_count[r] += 1\n      col_count[c] += 1\n      total += 1\nresult = 'NO'\nfor r in range(n):\n  for c in range(m):\n    x = row_count[r] + col_count[c] + (-1 if g[r][c] == '*' else 0)\n    if x == total:\n      print('YES\\n%d %d' % (r + 1, c + 1))\n      import sys; sys.exit()\nprint(result)\n",
        "correct": true,
        "task_id": "0550",
        "depth": 2
    },
    {
        "description": "As you have noticed, there are lovely girls in Arpa\u2019s land.\n\nPeople in Arpa's land are numbered from 1 to n. Everyone has exactly one crush, i-th person's crush is person with the number crushi.\n\n<image>\n\nSomeday Arpa shouted Owf loudly from the top of the palace and a funny game started in Arpa's land. The rules are as follows.\n\nThe game consists of rounds. Assume person x wants to start a round, he calls crushx and says: \"Oww...wwf\" (the letter w is repeated t times) and cuts off the phone immediately. If t > 1 then crushx calls crushcrushx and says: \"Oww...wwf\" (the letter w is repeated t - 1 times) and cuts off the phone immediately. The round continues until some person receives an \"Owf\" (t = 1). This person is called the Joon-Joon of the round. There can't be two rounds at the same time.\n\nMehrdad has an evil plan to make the game more funny, he wants to find smallest t (t \u2265 1) such that for each person x, if x starts some round and y becomes the Joon-Joon of the round, then by starting from y, x would become the Joon-Joon of the round. Find such t for Mehrdad if it's possible.\n\nSome strange fact in Arpa's land is that someone can be himself's crush (i.e. crushi = i).\n\nInput\n\nThe first line of input contains integer n (1 \u2264 n \u2264 100) \u2014 the number of people in Arpa's land.\n\nThe second line contains n integers, i-th of them is crushi (1 \u2264 crushi \u2264 n) \u2014 the number of i-th person's crush.\n\nOutput\n\nIf there is no t satisfying the condition, print -1. Otherwise print such smallest t.\n\nExamples\n\nInput\n\n4\n2 3 1 4\n\n\nOutput\n\n3\n\n\nInput\n\n4\n4 4 4 4\n\n\nOutput\n\n-1\n\n\nInput\n\n4\n2 1 4 3\n\n\nOutput\n\n1\n\nNote\n\nIn the first sample suppose t = 3. \n\nIf the first person starts some round:\n\nThe first person calls the second person and says \"Owwwf\", then the second person calls the third person and says \"Owwf\", then the third person calls the first person and says \"Owf\", so the first person becomes Joon-Joon of the round. So the condition is satisfied if x is 1.\n\nThe process is similar for the second and the third person.\n\nIf the fourth person starts some round:\n\nThe fourth person calls himself and says \"Owwwf\", then he calls himself again and says \"Owwf\", then he calls himself for another time and says \"Owf\", so the fourth person becomes Joon-Joon of the round. So the condition is satisfied when x is 4.\n\nIn the last example if the first person starts a round, then the second person becomes the Joon-Joon, and vice versa.",
        "task_name": "741_A. Arpa's loud Owf and Mehrdad's evil plan",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=input()\na=[0]+map(int,raw_input().split())\nb=[a[a[x]] for x in range(n+1)]\nt=200\nfor x in range(1,n+1):\n  if a[x]!=x:\n    u=x\n    v=[0]*111\n    z=0\n    while not v[u]:\n      v[u]=1\n      u=b[u]\n      z+=1\n    if u==x:\n      t=min(t,z)\nprint -1 if t>100 else t\n",
        "correct": false,
        "task_id": "0551",
        "depth": 2
    },
    {
        "description": "<image>\n\nIt's the end of July \u2013 the time when a festive evening is held at Jelly Castle! Guests from all over the kingdom gather here to discuss new trends in the world of confectionery. Yet some of the things discussed here are not supposed to be disclosed to the general public: the information can cause discord in the kingdom of Sweetland in case it turns out to reach the wrong hands. So it's a necessity to not let any uninvited guests in.\n\nThere are 26 entrances in Jelly Castle, enumerated with uppercase English letters from A to Z. Because of security measures, each guest is known to be assigned an entrance he should enter the castle through. The door of each entrance is opened right before the first guest's arrival and closed right after the arrival of the last guest that should enter the castle through this entrance. No two guests can enter the castle simultaneously.\n\nFor an entrance to be protected from possible intrusion, a candy guard should be assigned to it. There are k such guards in the castle, so if there are more than k opened doors, one of them is going to be left unguarded! Notice that a guard can't leave his post until the door he is assigned to is closed.\n\nSlastyona had a suspicion that there could be uninvited guests at the evening. She knows the order in which the invited guests entered the castle, and wants you to help her check whether there was a moment when more than k doors were opened.\n\nInput\n\nTwo integers are given in the first string: the number of guests n and the number of guards k (1 \u2264 n \u2264 106, 1 \u2264 k \u2264 26).\n\nIn the second string, n uppercase English letters s1s2... sn are given, where si is the entrance used by the i-th guest.\n\nOutput\n\nOutput \u00abYES\u00bb if at least one door was unguarded during some time, and \u00abNO\u00bb otherwise.\n\nYou can output each letter in arbitrary case (upper or lower).\n\nExamples\n\nInput\n\n5 1\nAABBB\n\n\nOutput\n\nNO\n\n\nInput\n\n5 1\nABABB\n\n\nOutput\n\nYES\n\nNote\n\nIn the first sample case, the door A is opened right before the first guest's arrival and closed when the second guest enters the castle. The door B is opened right before the arrival of the third guest, and closed after the fifth one arrives. One guard can handle both doors, as the first one is closed before the second one is opened.\n\nIn the second sample case, the door B is opened before the second guest's arrival, but the only guard can't leave the door A unattended, as there is still one more guest that should enter the castle through this door. ",
        "task_name": "834_B. The Festive Evening",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\ndef FindIfGuarded(k, n, s):\n\talphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\tcount1 = {}\n\tcount2 = {}\n\tfor ch in alphabet:\n\t\tcount1[ch] = 0\n\t\tcount2[ch] = 0\n\tfor ch in s:\n\t\tcount1[ch] += 1\n\tNumOfOpenGates = 0\n\tfor ch in s:\n\t\tif count2[ch] == 0:\n\t\t\tif NumOfOpenGates == k:\n\t\t\t\treturn 'Yes'\n\t\t\tNumOfOpenGates += 1\n\t\tif count2[ch] == count1[ch]-1:\n\t\t\tNumOfOpenGates -= 1\n\t\tcount2[ch] += 1\n\treturn 'No'\n\t\t \n\t\t\t\n\n\n\n\nn, k = map(int, raw_input().split(' '))\ns = raw_input()\n\nprint (FindIfGuarded(k, n, s))\n",
        "correct": true,
        "task_id": "0552",
        "depth": 1
    },
    {
        "description": "Petya learned a new programming language CALPAS. A program in this language always takes one non-negative integer and returns one non-negative integer as well.\n\nIn the language, there are only three commands: apply a bitwise operation AND, OR or XOR with a given constant to the current integer. A program can contain an arbitrary sequence of these operations with arbitrary constants from 0 to 1023. When the program is run, all operations are applied (in the given order) to the argument and in the end the result integer is returned.\n\nPetya wrote a program in this language, but it turned out to be too long. Write a program in CALPAS that does the same thing as the Petya's program, and consists of no more than 5 lines. Your program should return the same integer as Petya's program for all arguments from 0 to 1023.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 5\u00b7105) \u2014 the number of lines.\n\nNext n lines contain commands. A command consists of a character that represents the operation (\"&\", \"|\" or \"^\" for AND, OR or XOR respectively), and the constant xi 0 \u2264 xi \u2264 1023.\n\nOutput\n\nOutput an integer k (0 \u2264 k \u2264 5) \u2014 the length of your program.\n\nNext k lines must contain commands in the same format as in the input.\n\nExamples\n\nInput\n\n3\n| 3\n^ 2\n| 1\n\n\nOutput\n\n2\n| 3\n^ 2\n\n\nInput\n\n3\n&amp; 1\n&amp; 3\n&amp; 5\n\n\nOutput\n\n1\n&amp; 1\n\n\nInput\n\n3\n^ 1\n^ 2\n^ 3\n\n\nOutput\n\n0\n\nNote\n\nYou can read about bitwise operations in <https://en.wikipedia.org/wiki/Bitwise_operation>.\n\nSecond sample:\n\nLet x be an input of the Petya's program. It's output is ((x&1)&3)&5 = x&(1&3&5) = x&1. So these two programs always give the same outputs.",
        "task_name": "879_C. Short Program",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\nz, o = 0, 1023\nfor _ in xrange(n):\n\top, num = raw_input().split()\n\tnum = int(num)\n\tz, o = eval(\"{0} {1} {2}\".format(z, op, num)), eval(\"{0} {1} {2}\".format(o, op, num))\n\nn2, n3, n4 = 0, 0, 1023\nfor i in xrange(10):\n\tx = (1 << i)\n\tq = z & x\n\tw = o & x\n\tif q and (not w) == 0:\n\t\tn2 |= x\n\telif q and w:\n\t\tn3 |= x\n\telif (not q) and (not w):\n\t\tn4 &= ~x\n\nprint(3)\nprint(\"^ \" + str(n2))\nprint(\"| \" + str(n3))\nprint(\"& \" + str(n4))\n",
        "correct": false,
        "task_id": "0553",
        "depth": 1
    },
    {
        "description": "In the year of 30XX participants of some world programming championship live in a single large hotel. The hotel has n floors. Each floor has m sections with a single corridor connecting all of them. The sections are enumerated from 1 to m along the corridor, and all sections with equal numbers on different floors are located exactly one above the other. Thus, the hotel can be represented as a rectangle of height n and width m. We can denote sections with pairs of integers (i, j), where i is the floor, and j is the section number on the floor.\n\nThe guests can walk along the corridor on each floor, use stairs and elevators. Each stairs or elevator occupies all sections (1, x), (2, x), \u2026, (n, x) for some x between 1 and m. All sections not occupied with stairs or elevators contain guest rooms. It takes one time unit to move between neighboring sections on the same floor or to move one floor up or down using stairs. It takes one time unit to move up to v floors in any direction using an elevator. You can assume you don't have to wait for an elevator, and the time needed to enter or exit an elevator is negligible.\n\nYou are to process q queries. Each query is a question \"what is the minimum time needed to go from a room in section (x_1, y_1) to a room in section (x_2, y_2)?\"\n\nInput\n\nThe first line contains five integers n, m, c_l, c_e, v (2 \u2264 n, m \u2264 10^8, 0 \u2264 c_l, c_e \u2264 10^5, 1 \u2264 c_l + c_e \u2264 m - 1, 1 \u2264 v \u2264 n - 1) \u2014 the number of floors and section on each floor, the number of stairs, the number of elevators and the maximum speed of an elevator, respectively.\n\nThe second line contains c_l integers l_1, \u2026, l_{c_l} in increasing order (1 \u2264 l_i \u2264 m), denoting the positions of the stairs. If c_l = 0, the second line is empty.\n\nThe third line contains c_e integers e_1, \u2026, e_{c_e} in increasing order, denoting the elevators positions in the same format. It is guaranteed that all integers l_i and e_i are distinct.\n\nThe fourth line contains a single integer q (1 \u2264 q \u2264 10^5) \u2014 the number of queries.\n\nThe next q lines describe queries. Each of these lines contains four integers x_1, y_1, x_2, y_2 (1 \u2264 x_1, x_2 \u2264 n, 1 \u2264 y_1, y_2 \u2264 m) \u2014 the coordinates of starting and finishing sections for the query. It is guaranteed that the starting and finishing sections are distinct. It is also guaranteed that these sections contain guest rooms, i. e. y_1 and y_2 are not among l_i and e_i.\n\nOutput\n\nPrint q integers, one per line \u2014 the answers for the queries.\n\nExample\n\nInput\n\n5 6 1 1 3\n2\n5\n3\n1 1 5 6\n1 3 5 4\n3 3 5 3\n\n\nOutput\n\n7\n5\n4\n\nNote\n\nIn the first query the optimal way is to go to the elevator in the 5-th section in four time units, use it to go to the fifth floor in two time units and go to the destination in one more time unit.\n\nIn the second query it is still optimal to use the elevator, but in the third query it is better to use the stairs in the section 2.",
        "task_name": "925_A. Stairs and Elevators",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Enter your code here. Read input from STDIN. Print output to STDOUT# ===============================================================================================\n# importing some useful libraries.\nfrom __future__ import division, print_function\nfrom fractions import Fraction\nimport sys\nimport os\nfrom io import BytesIO, IOBase\nfrom itertools import *\nimport bisect\nfrom heapq import *\nfrom math import ceil, floor\nfrom copy import *\nfrom collections import deque, defaultdict\nfrom collections import Counter as counter  # Counter(list)  return a dict with {key: count}\nfrom itertools import combinations  # if a = [1,2,3] then print(list(comb(a,2))) -----> [(1, 2), (1, 3), (2, 3)]\nfrom itertools import permutations as permutate\nfrom bisect import bisect_left as bl\nfrom operator import *\n# If the element is already present in the list,\n\n# the left most position where element has to be inserted is returned.\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n\n# If the element is already present in the list,\n# the right most position where element has to be inserted is returned\n\n# ==============================================================================================\n# fast I/O region\n\nBUFSIZE = 8192\nfrom sys import stderr\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"A\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for A in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(A))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n# inp = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# ===============================================================================================\n### START ITERATE RECURSION ###\nfrom types import GeneratorType\n\n\ndef iterative(f, stack=[]):\n    def wrapped_func(*args, **kwargs):\n        if stack: return f(*args, **kwargs)\n        to = f(*args, **kwargs)\n        while True:\n            if type(to) is GeneratorType:\n                stack.append(to)\n                to = next(to)\n                continue\n            stack.pop()\n            if not stack: break\n            to = stack[-1].send(to)\n        return to\n\n    return wrapped_func\n\n\n#### END ITERATE RECURSION ####\n###########################\n# Sorted list\nclass SortedList:\n    def __init__(self, iterable=[], _load=200):\n        \"\"\"Initialize sorted list instance.\"\"\"\n        values = sorted(iterable)\n        self._len = _len = len(values)\n        self._load = _load\n        self._lists = _lists = [values[start:start + _load] for start in range(0, _len, _load)]\n        self._list_lens = [len(_list) for _list in _lists]\n        self._mins = [_list[0] for _list in _lists]\n        self._fen_tree = []\n        self._rebuild = True\n\n    def _fen_build(self):\n        \"\"\"Build a fenwick tree instance.\"\"\"\n        self._fen_tree[:] = self._list_lens\n        _fen_tree = self._fen_tree\n        for start in range(len(_fen_tree)):\n            if start | start + 1 < len(_fen_tree):\n                _fen_tree[start | start + 1] += _fen_tree[start]\n        self._rebuild = False\n\n    def _fen_update(self, index, value):\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\n        if not self._rebuild:\n            _fen_tree = self._fen_tree\n            while index < len(_fen_tree):\n                _fen_tree[index] += value\n                index |= index + 1\n\n    def _fen_query(self, end):\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        A = 0\n        while end:\n            A += _fen_tree[end - 1]\n            end &= end - 1\n        return A\n\n    def _fen_findkth(self, k):\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\n        _list_lens = self._list_lens\n        if k < _list_lens[0]:\n            return 0, k\n        if k >= self._len - _list_lens[-1]:\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        idx = -1\n        for d in reversed(range(len(_fen_tree).bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\n                idx = right_idx\n                k -= _fen_tree[idx]\n        return idx + 1, k\n\n    def _delete(self, pos, idx):\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len -= 1\n        self._fen_update(pos, -1)\n        del _lists[pos][idx]\n        _list_lens[pos] -= 1\n\n        if _list_lens[pos]:\n            _mins[pos] = _lists[pos][0]\n        else:\n            del _lists[pos]\n            del _list_lens[pos]\n            del _mins[pos]\n            self._rebuild = True\n\n    def _loc_left(self, value):\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        lo, pos = -1, len(_lists) - 1\n        while lo + 1 < pos:\n            mi = (lo + pos) >> 1\n            if value <= _mins[mi]:\n                pos = mi\n            else:\n                lo = mi\n\n        if pos and value <= _lists[pos - 1][-1]:\n            pos -= 1\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value <= _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def _loc_right(self, value):\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        pos, hi = 0, len(_lists)\n        while pos + 1 < hi:\n            mi = (pos + hi) >> 1\n            if value < _mins[mi]:\n                hi = mi\n            else:\n                pos = mi\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value < _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def add(self, value):\n        \"\"\"Add `value` to sorted list.\"\"\"\n        _load = self._load\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len += 1\n        if _lists:\n            pos, idx = self._loc_right(value)\n            self._fen_update(pos, 1)\n            _list = _lists[pos]\n            _list.insert(idx, value)\n            _list_lens[pos] += 1\n            _mins[pos] = _list[0]\n            if _load + _load < len(_list):\n                _lists.insert(pos + 1, _list[_load:])\n                _list_lens.insert(pos + 1, len(_list) - _load)\n                _mins.insert(pos + 1, _list[_load])\n                _list_lens[pos] = _load\n                del _list[_load:]\n                self._rebuild = True\n        else:\n            _lists.append([value])\n            _mins.append(value)\n            _list_lens.append(1)\n            self._rebuild = True\n\n    def discard(self, value):\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_right(value)\n            if idx and _lists[pos][idx - 1] == value:\n                self._delete(pos, idx - 1)\n\n    def remove(self, value):\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\n        _len = self._len\n        self.discard(value)\n        if _len == self._len:\n            raise ValueError('{0!r} not in list'.format(value))\n\n    def pop(self, index=-1):\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        value = self._lists[pos][idx]\n        self._delete(pos, idx)\n        return value\n\n    def bisect_left(self, value):\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_left(value)\n        return self._fen_query(pos) + idx\n\n    def bisect_right(self, value):\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_right(value)\n        return self._fen_query(pos) + idx\n\n    def count(self, value):\n        \"\"\"Return number of ofinansurrences of `value` in the sorted list.\"\"\"\n        return self.bisect_right(value) - self.bisect_left(value)\n\n    def __len__(self):\n        \"\"\"Return the size of the sorted list.\"\"\"\n        return self._len\n\n    def __getitem__(self, index):\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        return self._lists[pos][idx]\n\n    def __delitem__(self, index):\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        self._delete(pos, idx)\n\n    def __contains__(self, value):\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_left(value)\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\n        return False\n\n    def __iter__(self):\n        \"\"\"Return an iterator over the sorted list.\"\"\"\n        return (value for _list in self._lists for value in _list)\n\n    def __reversed__(self):\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\n\n    def __repr__(self):\n        \"\"\"Return string representation of sorted list.\"\"\"\n        return 'SortedList({0})'.format(list(self))\n\n\n# ===============================================================================================\n# some shortcuts\n\nmod = 1000000007\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\ndef pow(A, B, p):\n    res = 1  # Initialize result\n    A = A % p  # Update A if it is more , than or equal to p\n    if (A == 0):\n        return 0\n    while (B > 0):\n        if ((B & 1) == 1):  # If B is odd, multiply, A with result\n            res = (res * A) % p\n\n        B = B >> 1  # B = B/2\n        A = (A * A) % p\n    return res\n\n\nfrom functools import reduce\n\n\ndef numberOfSetBits(n):\n    n = (n & 0x5555555555555555) + ((n & 0xAAAAAAAAAAAAAAAA) >> 1)\n    n = (n & 0x3333333333333333) + ((n & 0xCCCCCCCCCCCCCCCC) >> 2)\n    n = (n & 0x0F0F0F0F0F0F0F0F) + ((n & 0xF0F0F0F0F0F0F0F0) >> 4)\n    n = (n & 0x00FF00FF00FF00FF) + ((n & 0xFF00FF00FF00FF00) >> 8)\n    n = (n & 0x0000FFFF0000FFFF) + ((n & 0xFFFF0000FFFF0000) >> 16)\n    n = (n & 0x00000000FFFFFFFF) + ((n & 0xFFFFFFFF00000000) >> 32)  # This last & isn't strictly necessary.\n    return n\n\n\ndef factors(n):\n    return set(reduce(list.__add__,\n                      ([start, n // start] for start in range(1, int(n ** 0.5) + 1) if n % start == 0)))\n\n\nclass MergeFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n        # self.lista = [[_] for _ in range(n)]\n\n    def find(self, a):\n        to_update = []\n        while a != self.parent[a]:\n            to_update.append(a)\n            a = self.parent[a]\n        for b in to_update:\n            self.parent[b] = a\n        return self.parent[a]\n\n    def merge(self, a, b):\n        a = self.find(a)\n        b = self.find(b)\n        if a == b:\n            return\n        if self.size[a] < self.size[b]:\n            a, b = b, a\n        self.num_sets -= 1\n        self.parent[b] = a\n        self.size[a] += self.size[b]\n        # self.lista[a] += self.lista[b]\n        # self.lista[b] = []\n\n    def set_size(self, a):\n        return self.size[self.find(a)]\n\n    def __len__(self):\n        return self.num_sets\n\n\ndef gcd(a, b):\n    if a == b: return a\n    while b > 0: a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return abs((a // gcd(a, b)) * b)\n\n\ninf = float(\"inf\")\n\n##############Find sum of product of subsets of size k in a array\n\n\n# ar=[0,1,2,3]\n# k=3\n# n=len(ar)-1\n# dp=[0]*(n+1)\n# dp[0]=1\n# for pos in range(1,n+1):\n#     dp[pos]=0\n#     l=max(1,k+pos-n-1)\n#     for j in range(min(pos,k),l-1,-1):\n#         dp[j]=dp[j]+ar[pos]*dp[j-1]\n# print(dp[k])\n\n\n##two pointer method\n\n\n# l=0\n# for r in range(n):\n#     add(r)\n#     while(not ok(l,r)):#l,r included\n#         remove(l)\n#         l+=1\n#     #[l,r] is valid\n#     if(ok()):\n#         do()\n\n\n# #==========================\n\n\n# r=-1\n# for l in range(n):\n#     while (r + 1 < l):\n#         r=l-1\n#         reset state\n#\n#\n#\n#     while(r+1<n and  ok_to_include_r+1()):\n#         add(r)\n#         r+=1\n#     #[l,r) is valid\n#     if(ok()):\n#         do()\n#     remove(l)\n\n\n# #############################\n\n\n# discrete binary search\n# minimise:\n# def search(l,r):\n#     ans=inf\n#     while(l<=r):\n#         mid=(r-l)//2 + l\n#         if(check(mid)):\n#             ans=min(ans,mid)\n#             r=mid-1\n#         else:\n#             l=mid+1\n#\n#     return ans\n\n# maximise:\n# def search(l,r):\n#\n#     ans=-1\n#     while(l<=r):\n#         mid=l+(r-l)//2\n#         if(check(mid)):\n#             ans=max(ans,mid)\n#             l=mid+1\n#         else:\n#             r=mid-1\n#\n#     return ans\n\n\n# =========================================================================================\nfrom collections import defaultdict\n\n\n# #\n# to find factorial and ncr\n# tot = 40\n# mod = 10**9 +7\n# fac = [1, 1]\n# finv = [1, 1]\n# inv = [0, 1]\n#\n# for start in range(2, tot + 1):\n#     fac.append((fac[-1] * start) % mod)\n#     inv.append(mod - (inv[mod % start] * (mod // start) % mod))\n#     finv.append(finv[-1] * inv[-1] % mod)\n#\n#\n# def comb(n, r):\n#     if(r==0 or r==n):return 1\n#     if n < r:\n#         return 0\n#     else:\n#         return fac[n] * (finv[r] * finv[n - r] % mod) % mod\n#\n#\n# from functools import lru_cache\n# p=3\n# def ncr_small_mod_p(n,r):\n#     ans=1\n#     while(n>0):\n#         x=n%p\n#         y=r%p\n#         n//=p\n#         r//=p\n#         ans*=comb(x,y)\n#         ans%=p\n#     return ans\n\n\n#\n\ndef inp(): return sys.stdin.readline().rstrip(\"\\r\\n\")  # for fast input\n\n\ndef N():\n    return int(inp())\n\n\ndef out(var): sys.stdout.write(str(var))  # for fast output, always take string\n\n\ndef lis(): return list(map(int, inp().split()))\n\n\ndef stringlis(): return list(map(str, inp().split()))\n\n\ndef sep(): return map(int, inp().split())\n\n\ndef strsep(): return map(str, inp().split())\n\n\ndef fsep(): return map(float, inp().split())\n\n\ndef nextline(): out(\"\\n\")  # as stdout.write always print sring.\n\n\ndef arr1d(n, v):\n    return [v] * n\n\n\ndef arr2d(n, m, v):\n    return [[v] * m for _ in range(n)]\n\n\ndef arr3d(n, m, p, v):\n    return [[[v] * p for _ in range(m)] for sta in range(n)]\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\n# co-ordinate compression\n# ma={s:idx for idx,s in enumerate(sorted(set(l+r)))}\n\n# mxn=100005\n# lrg=[0]*mxn\n# for start in range(2,mxn-3):\n#     if (lrg[start]==0):\n#         for j in range(start,mxn-3,start):\n#             lrg[j]=start\n\ntest_count = 1\n\n\ndef testcase(t):\n    global test_count\n    for p in range(t):\n        global test_count\n        # print(\"Case #{}:\".format(test_count), end=\" \")\n        solve()\n        test_count += 1\n\n\ndef solve():\n    n,m,cs,ce,v=sep()\n    stairs=lis()\n    elevators=lis()\n    q=N()\n    inf=9999999999999999999999999\n    for _ in range(q):\n        y1,x1,y2,x2=sep()\n        if(y1==y2):\n            print(abs(x1-x2))\n            return\n        if(x1>x2):\n            x1,y1,x2,y2=x2,y2,x1,y1\n        ans=inf\n\n        t = bl(stairs, x1) - 1\n        if (t >= 0):\n            ans = min(ans, abs(y2 - y1) + abs(x1 - stairs[t]) + abs(x2 - stairs[t]))\n\n        t = bl(stairs, x1)\n        if (t < len(stairs)):\n            ans = min(ans, abs(y2 - y1) + abs(x1 - stairs[t]) + abs(x2 - stairs[t]))\n\n        t = bl(stairs, x2)\n        if (t < len(stairs)):\n            ans = min(ans, abs(y2 - y1) + abs(x1 - stairs[t]) + abs(x2 - stairs[t]))\n\n\n        t=bl(elevators,x1)-1\n        if(t>=0):\n            ans=min(ans,ceil(abs(y2-y1),v)+abs(x1-elevators[t])+abs(x2-elevators[t]))\n\n        t = bl(elevators, x1)\n        if (t < len(elevators)):\n            ans = min(ans, ceil(abs(y2-y1),v) + abs(x1 - elevators[t]) + abs(x2 - elevators[t]))\n\n        t = bl(elevators, x2)\n        if (t < len(elevators)):\n            ans = min(ans, ceil(abs(y2-y1),v) + abs(x1 - elevators[t]) + abs(x2 - elevators[t]))\n\n        print(ans)\n\n\n\n\n\n\n\nsolve()\n# testcase(N())\n",
        "correct": false,
        "task_id": "0554",
        "depth": 1
    },
    {
        "description": "You are given a string s consisting of n lowercase Latin letters. You have to type this string using your keyboard.\n\nInitially, you have an empty string. Until you type the whole string, you may perform the following operation:\n\n  * add a character to the end of the string. \n\n\n\nBesides, at most once you may perform one additional operation: copy the string and append it to itself.\n\nFor example, if you have to type string abcabca, you can type it in 7 operations if you type all the characters one by one. However, you can type it in 5 operations if you type the string abc first and then copy it and type the last character.\n\nIf you have to type string aaaaaaaaa, the best option is to type 4 characters one by one, then copy the string, and then type the remaining character.\n\nPrint the minimum number of operations you need to type the given string.\n\nInput\n\nThe first line of the input containing only one integer number n (1 \u2264 n \u2264 100) \u2014 the length of the string you have to type. The second line containing the string s consisting of n lowercase Latin letters.\n\nOutput\n\nPrint one integer number \u2014 the minimum number of operations you need to type the given string.\n\nExamples\n\nInput\n\n7\nabcabca\n\n\nOutput\n\n5\n\n\nInput\n\n8\nabcdefgh\n\n\nOutput\n\n8\n\nNote\n\nThe first test described in the problem statement.\n\nIn the second test you can only type all the characters one by one.",
        "task_name": "954_B. String Typing",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def solution(count, s):      \n    dup = 0                  \n    for i in range(0, count+1, 2):                         \n        if s[:i/2] == s[i/2:i]:                            \n            dup = i/2        \n    if dup == 0:             \n        return count         \n    return count - dup + 1   \n\nif __name__ == '__main__':   \n    c = int(raw_input())     \n    s = raw_input()          \n    print(solution(c, s))",
        "correct": true,
        "task_id": "0555",
        "depth": 1
    },
    {
        "description": "Takahashi has a maze, which is a grid of H \\times W squares with H horizontal rows and W vertical columns.\n\nThe square at the i-th row from the top and the j-th column is a \"wall\" square if S_{ij} is `#`, and a \"road\" square if S_{ij} is `.`.\n\nFrom a road square, you can move to a horizontally or vertically adjacent road square.\n\nYou cannot move out of the maze, move to a wall square, or move diagonally.\n\nTakahashi will choose a starting square and a goal square, which can be any road squares, and give the maze to Aoki.\n\nAoki will then travel from the starting square to the goal square, in the minimum number of moves required.\n\nIn this situation, find the maximum possible number of moves Aoki has to make.\n\nConstraints\n\n* 1 \\leq H,W \\leq 20\n* S_{ij} is `.` or `#`.\n* S contains at least two occurrences of `.`.\n* Any road square can be reached from any road square in zero or more moves.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W\nS_{11}...S_{1W}\n:\nS_{H1}...S_{HW}\n\n\nOutput\n\nPrint the maximum possible number of moves Aoki has to make.\n\nExamples\n\nInput\n\n3 3\n...\n...\n...\n\n\nOutput\n\n4\n\n\nInput\n\n3 5\n...#.\n.#.#.\n.#...\n\n\nOutput\n\n10",
        "task_name": "p02803 AtCoder Beginner Contest 151 - Maze Master",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "input = raw_input\n\nh, w = map(int, input().split(\" \"))\n\nmeiro = []\ncoords = []\nfor i in range(h):\n    line = list(input())\n    cur_coords = [(j, i) for j in range(w) if line[j] == \".\"]\n    coords += cur_coords\n    meiro.append(line)\n\ngraphs = []\ngraph = {}\nfor cur_coord in coords:\n    x, y = cur_coord\n    tugi_kouhos = [(x+dx, y) for dx in [-1, 1] if 0 <= x+dx < w]\n    tugi_kouhos += [(x, y+dy) for dy in [-1, 1] if 0 <= y+dy < h]\n    childs = []\n    for tugi_kouho in tugi_kouhos:\n        if tugi_kouho in coords:\n            childs.append(tugi_kouho)\n    graph[cur_coord] = childs\n\n\ndepth_dict_org = {}\nfor coord in coords:\n    depth_dict_org[coord] = None\n\ndef calc_depth(coord1, coord2):\n    depth_dict = depth_dict_org.copy()\n\n    cur_coord = coord1\n    end_coord = coord2\n    cur_depth = 0\n    used_coords = [coord1]\n\n    childs = graph[coord1]\n    while len(childs) != 0:\n        cur_depth += 1\n        next_childs = []\n        used_coords += childs\n        for child in childs:\n            res = get_childs(child, coord2, used_coords)\n            #print(\"child\", child, res)\n            #print(used_coords)\n            if res == \"found\":\n                return cur_depth + 1\n            next_childs += res\n\n        childs = list(set(next_childs))\n        #print(childs)\n\n    return 0\n\ndef get_childs(jibun, target, used_coords):\n    \n    childs = []\n    for child in graph[jibun]:\n        if child == target:\n            return \"found\"\n        if child not in used_coords:\n            childs.append(child)\n    return childs\n       \n\nn_coords = len(coords)\nmax_depth = 0\nfor i in range(n_coords):\n    coord1 = coords[i]\n    for j in range(i+1, n_coords):\n        coord2 = coords[j]\n        cur_depth = calc_depth(coord1, coord2)\n        #print(coord1, coord2, cur_depth)\n        max_depth = max(max_depth, cur_depth)\n\nprint(max_depth)",
        "correct": false,
        "task_id": "0559",
        "depth": 2
    },
    {
        "description": "Given is a string S consisting of lowercase English letters. Find the maximum positive integer K that satisfies the following condition:\n\n* There exists a partition of S into K non-empty strings S=S_1S_2...S_K such that S_i \\neq S_{i+1} (1 \\leq i \\leq K-1).\n\n\n\nHere S_1S_2...S_K represents the concatenation of S_1,S_2,...,S_K in this order.\n\nConstraints\n\n* 1 \\leq |S| \\leq 2 \\times 10^5\n* S consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\n\n\nOutput\n\nPrint the maximum positive integer K that satisfies the condition.\n\nExamples\n\nInput\n\naabbaa\n\n\nOutput\n\n4\n\n\nInput\n\naaaccacabaababc\n\n\nOutput\n\n12",
        "task_name": "p02939 AtCoder Grand Contest 037 - Dividing a String",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#El Patron\nS = list(input())\n\npre_list = []\ntar_list = [S[0]]\ncount = 1\na = 1\ntry:\n\twhile a < len(S):\n\t\tpre_list = tar_list \n\t\ttar_list = []\n\t\ttar_list.append(S[i])\n\t\ta += 1\n\t\n\t\twhile tar_list == pre_list:\n\t\t\ttar_list.append(S[i])\n\t\t\ta += 1\n\t\n\t\tcount += 1\n\nexcept IndexError:\n\tpass\nprint(count)\n",
        "correct": false,
        "task_id": "0560",
        "depth": 2
    },
    {
        "description": "The restaurant AtCoder serves the following five dishes:\n\n* ABC Don (rice bowl): takes A minutes to serve.\n* ARC Curry: takes B minutes to serve.\n* AGC Pasta: takes C minutes to serve.\n* APC Ramen: takes D minutes to serve.\n* ATC Hanbagu (hamburger patty): takes E minutes to serve.\n\n\n\nHere, the time to serve a dish is the time between when an order is placed and when the dish is delivered.\n\nThis restaurant has the following rules on orders:\n\n* An order can only be placed at a time that is a multiple of 10 (time 0, 10, 20, ...).\n* Only one dish can be ordered at a time.\n* No new order can be placed when an order is already placed and the dish is still not delivered, but a new order can be placed at the exact time when the dish is delivered.\n\n\n\nE869120 arrives at this restaurant at time 0. He will order all five dishes. Find the earliest possible time for the last dish to be delivered.\nHere, he can order the dishes in any order he likes, and he can place an order already at time 0.\n\nConstraints\n\n* A, B, C, D and E are integers between 1 and 123 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA\nB\nC\nD\nE\n\n\nOutput\n\nPrint the earliest possible time for the last dish to be delivered, as an integer.\n\nExamples\n\nInput\n\n29\n20\n7\n35\n120\n\n\nOutput\n\n215\n\n\nInput\n\n101\n86\n119\n108\n57\n\n\nOutput\n\n481\n\n\nInput\n\n123\n123\n123\n123\n123\n\n\nOutput\n\n643",
        "task_name": "p03076 AtCoder Beginner Contest 123 - Five Dishes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a=[]\nfor i in range(5):\n    a.append(int(input()))\nb=set(map(lambda x: x%10,a))\nif 0 in b:\n    b.remove(0)\nprint(sum(map(lambda x:(x/10+1)*10 if x%10 != 0 else (x/10)*10,a))+min(b)-10)",
        "correct": false,
        "task_id": "0561",
        "depth": 1
    },
    {
        "description": "The screen that displays digital numbers that you often see on calculators is called a \"7-segment display\" because the digital numbers consist of seven parts (segments).\n\nThe new product to be launched by Wakamatsu will incorporate a 7-segment display into the product, and as an employee, you will create a program to display the given number on the 7-segment display.\n\nThis 7-segment display will not change until the next switch instruction is sent. By sending a signal consisting of 7 bits, the display information of each corresponding segment can be switched. Bits have a value of 1 or 0, where 1 stands for \"switch\" and 0 stands for \"as is\".\n\nThe correspondence between each bit and segment is shown in the figure below. The signal sends 7 bits in the order of \"gfedcba\". For example, in order to display \"0\" from the hidden state, \"0111111\" must be sent to the display as a signal. To change from \"0\" to \"5\", send \"1010010\". If you want to change \"5\" to \"1\" in succession, send \"1101011\".\n\n<image>\n\n\n\nCreate a program that takes n (1 \u2264 n \u2264 100) numbers that you want to display and outputs the signal sequence required to correctly display those numbers di (0 \u2264 di \u2264 9) on the 7-segment display. please. It is assumed that the initial state of the 7-segment display is all hidden.\n\n\n\nInput\n\nA sequence of multiple datasets is given as input. The end of the input is indicated by a single line of -1. Each dataset is given in the following format:\n\n\nn\nd1\nd2\n::\ndn\n\n\nThe number of datasets does not exceed 120.\n\nOutput\n\nFor each input dataset, output the sequence of signals needed to properly output the numbers to the display.\n\nExample\n\nInput\n\n3\n0\n5\n1\n1\n0\n-1\n\n\nOutput\n\n0111111\n1010010\n1101011\n0111111",
        "task_name": "p00228 Seven Segments",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "ref=[63,6,91,79,102,109,125,39,127,111]\nwhile 1:\n\tn=int(raw_input())\n\tif n==-1:break\n\te=0\n\t#for i in range(n):\n\t#\ta=ref[int(raw_input())]\n\t#\tprint \"{:07b}\".format(a^e)\n\t#\te=a",
        "correct": false,
        "task_id": "0563",
        "depth": 1
    },
    {
        "description": "The heat during the last few days has been really intense. Scientists from all over the Berland study how the temperatures and weather change, and they claim that this summer is abnormally hot. But any scientific claim sounds a lot more reasonable if there are some numbers involved, so they have decided to actually calculate some value which would represent how high the temperatures are.\n\nMathematicians of Berland State University came up with a special heat intensity value. This value is calculated as follows:\n\nSuppose we want to analyze the segment of n consecutive days. We have measured the temperatures during these n days; the temperature during i-th day equals a_i.\n\nWe denote the average temperature of a segment of some consecutive days as the arithmetic mean of the temperature measures during this segment of days. So, if we want to analyze the average temperature from day x to day y, we calculate it as \\frac{\u2211 _{i = x}^{y} a_i}{y - x + 1} (note that division is performed without any rounding). The heat intensity value is the maximum of average temperatures over all segments of not less than k consecutive days. For example, if analyzing the measures [3, 4, 1, 2] and k = 3, we are interested in segments [3, 4, 1], [4, 1, 2] and [3, 4, 1, 2] (we want to find the maximum value of average temperature over these segments).\n\nYou have been hired by Berland State University to write a program that would compute the heat intensity value of a given period of days. Are you up to this task?\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 k \u2264 n \u2264 5000) \u2014 the number of days in the given period, and the minimum number of days in a segment we consider when calculating heat intensity value, respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 5000) \u2014 the temperature measures during given n days.\n\nOutput\n\nPrint one real number \u2014 the heat intensity value, i. e., the maximum of average temperatures over all segments of not less than k consecutive days.\n\nYour answer will be considered correct if the following condition holds: |res - res_0| < 10^{-6}, where res is your answer, and res_0 is the answer given by the jury's solution.\n\nExample\n\nInput\n\n4 3\n3 4 1 2\n\n\nOutput\n\n2.666666666666667",
        "task_name": "1003_C. Intense Heat",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,k = map(int,raw_input().split())\narr = map(int,raw_input().split())\nmax_avg = 0\nfor i in range(k,n+1):\n\tcur = sum(arr[:i])\n\tcur_max = cur\n\tfor j in range(i,n):\n\t\tcur = cur - arr[j-i] + arr[j]\n\t\tif cur>cur_max:\n\t\t\tcur_max = cur\n\tif cur_max/float(i)>max_avg:\n\t\tmax_avg = cur_max/float(i)\nprint(max_avg)",
        "correct": true,
        "task_id": "0567",
        "depth": 2
    },
    {
        "description": "Medicine faculty of Berland State University has just finished their admission campaign. As usual, about 80\\% of applicants are girls and majority of them are going to live in the university dormitory for the next 4 (hopefully) years.\n\nThe dormitory consists of n rooms and a single mouse! Girls decided to set mouse traps in some rooms to get rid of the horrible monster. Setting a trap in room number i costs c_i burles. Rooms are numbered from 1 to n.\n\nMouse doesn't sit in place all the time, it constantly runs. If it is in room i in second t then it will run to room a_i in second t + 1 without visiting any other rooms inbetween (i = a_i means that mouse won't leave room i). It's second 0 in the start. If the mouse is in some room with a mouse trap in it, then the mouse get caught into this trap.\n\nThat would have been so easy if the girls actually knew where the mouse at. Unfortunately, that's not the case, mouse can be in any room from 1 to n at second 0.\n\nWhat it the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from?\n\nInput\n\nThe first line contains as single integers n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of rooms in the dormitory.\n\nThe second line contains n integers c_1, c_2, ..., c_n (1 \u2264 c_i \u2264 10^4) \u2014 c_i is the cost of setting the trap in room number i.\n\nThe third line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 n) \u2014 a_i is the room the mouse will run to the next second after being in room i.\n\nOutput\n\nPrint a single integer \u2014 the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from.\n\nExamples\n\nInput\n\n5\n1 2 3 2 10\n1 3 4 3 3\n\n\nOutput\n\n3\n\n\nInput\n\n4\n1 10 2 10\n2 4 2 2\n\n\nOutput\n\n10\n\n\nInput\n\n7\n1 1 1 1 1 1 1\n2 2 2 3 6 7 6\n\n\nOutput\n\n2\n\nNote\n\nIn the first example it is enough to set mouse trap in rooms 1 and 4. If mouse starts in room 1 then it gets caught immideately. If mouse starts in any other room then it eventually comes to room 4.\n\nIn the second example it is enough to set mouse trap in room 2. If mouse starts in room 2 then it gets caught immideately. If mouse starts in any other room then it runs to room 2 in second 1.\n\nHere are the paths of the mouse from different starts from the third example:\n\n  * 1 \u2192 2 \u2192 2 \u2192 ...; \n  * 2 \u2192 2 \u2192 ...; \n  * 3 \u2192 2 \u2192 2 \u2192 ...; \n  * 4 \u2192 3 \u2192 2 \u2192 2 \u2192 ...; \n  * 5 \u2192 6 \u2192 7 \u2192 6 \u2192 ...; \n  * 6 \u2192 7 \u2192 6 \u2192 ...; \n  * 7 \u2192 6 \u2192 7 \u2192 ...; \n\n\n\nSo it's enough to set traps in rooms 2 and 6.",
        "task_name": "1027_D. Mouse Hunt",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom collections import *\n\n\nclass graph:\n    # initialize graph\n    def __init__(self, gdict=None):\n        self.gdict = [[] for _ in range(n)]\n\n    # add edge\n    def addEdge(self, node1, node2, w=None):\n        self.gdict[node1].append(node2)\n\n    def find_SCC(self):\n        SCC, S, P, d = [], [], [], 0\n        depth, stack = [0] * n, list(range(n))\n\n        while stack:\n            # print(stack, S, P)\n            node = stack.pop()\n            if node < 0:\n                if P[-1] == depth[~node]:\n                    P.pop()\n                    scc = []\n                    SCC.append(scc)\n\n                    root = ~node\n                    while node != root:\n                        node = S.pop()\n                        scc.append(node)\n                        depth[node] = -1\n\n            elif depth[node] > 0:\n                while P[-1] > depth[node]:\n                    P.pop()\n\n            elif depth[node] == 0:\n                depth[node] = d = d + 1\n                P.append(d)\n                S.append(node)\n                stack.append(~node)\n                stack += g.gdict[node]\n\n        return SCC[::-1]\n\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nn, c, a = int(input()), rints(), rints()\ng = graph()\nfor i in range(n):\n    g.addEdge(i, a[i] - 1)\n\nans = 0\nfor cnt in g.find_SCC():\n    if len(cnt) == 1 and a[cnt[0]] == cnt[0] + 1:\n        ans += c[cnt[0]]\n\n    elif len(cnt) > 1:\n        ans += min([c[i] for i in cnt])\n\nprint(ans)\n",
        "correct": true,
        "task_id": "0568",
        "depth": 2
    },
    {
        "description": "Formula 1 officials decided to introduce new competition. Cars are replaced by space ships and number of points awarded can differ per race.\n\nGiven the current ranking in the competition and points distribution for the next race, your task is to calculate the best possible ranking for a given astronaut after the next race. It's guaranteed that given astronaut will have unique number of points before the race.\n\nInput\n\nThe first line contains two integer numbers N (1 \u2264 N \u2264 200000) representing number of F1 astronauts, and current position of astronaut D (1 \u2264 D \u2264 N) you want to calculate best ranking for (no other competitor will have the same number of points before the race).\n\nThe second line contains N integer numbers S_k (0 \u2264 S_k \u2264 10^8, k=1...N), separated by a single space, representing current ranking of astronauts. Points are sorted in non-increasing order.\n\nThe third line contains N integer numbers P_k (0 \u2264 P_k \u2264 10^8, k=1...N), separated by a single space, representing point awards for the next race. Points are sorted in non-increasing order, so winner of the race gets the maximum number of points.\n\nOutput\n\nOutput contains one integer number \u2014 the best possible ranking for astronaut after the race. If multiple astronauts have the same score after the race, they all share the best ranking.\n\nExample\n\nInput\n\n4 3\n50 30 20 10\n15 10 7 3\n\n\nOutput\n\n2\n\nNote\n\nIf the third ranked astronaut wins the race, he will have 35 points. He cannot take the leading position, but he can overtake the second position if the second ranked astronaut finishes the race at the last position.",
        "task_name": "1046_C. Space Formula",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"\nAres hates those who hesitate.\n\nhttps://github.com/Cheran-Senthil/PyRival\nCopyright (c) 2018 Cheran Senthilkumar\n\"\"\"\n# IMPORTS---------------------------------------------------------------------#\nfrom __future__ import division, print_function\n\nimport itertools\n# import math\n# import operator as op\n# import random\n# from collections import Counter, defaultdict, deque\n# from fractions import Fraction, gcd\n# from itertools import combinations, permutations, product\n# from Queue import PriorityQueue, Queue\n\n\n# PYTHON3---------------------------------------------------------------------#\nclass dict(dict):\n    def keys(self):\n        return dict.iterkeys(self)\n\n    def items(self):\n        return dict.iteritems(self)\n\n    def values(self):\n        return dict.itervalues(self)\n\n\nfilter = itertools.ifilter\nmap = itertools.imap\nzip = itertools.izip\n\nrange = xrange\ninput = raw_input\n\n\n# FASTIO----------------------------------------------------------------------#\n# from atexit import register\n# from io import BytesIO\n# from sys import __stdout__, stdin, stdout\n\n# stdout = BytesIO()\n# register(lambda: __stdout__.write(stdout.getvalue()))\n# stdin = BytesIO(stdin.read())\n\n# input = lambda: stdin.readline().rstrip()\n# print = lambda *args: stdout.write(' '.join(str(x) for x in args) + '\\n')\n# flush = stdout.flush()\n\n\n# SETTINGS--------------------------------------------------------------------#\n# from decimal import Decimal, getcontext\n# from sys import setrecursionlimit\n\n# getcontext().prec = 100\n# setrecursionlimit(100000)\n\n\n# CONSTANTS-------------------------------------------------------------------#\nMOD = 1000000007\nINF = float('+inf')\n\nASCII_LOWERCASE = 'abcdefghijklmnopqrstuvwxyz'\nASCII_UPPERCASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n\n# MAIN------------------------------------------------------------------------#\nfrom bisect import bisect_left\n\n\ndef main():\n    n, d = map(int, input().split(' '))\n\n    if d == 1:\n        print(1)\n        quit()\n\n    s = list(map(int, input().split(' ')))\n    p = list(map(int, input().split(' ')))[::-1]\n\n    v = s[d-1]\n    cnt = 0\n    ind = bisect_left(p, v + p[-1] - s[d - 2 - cnt])\n\n    while s[d - 2 - cnt] + p[ind - 1] < v + p[-1]:\n        if ind == 0:\n            break\n        cnt += 1\n        if ind == 1:\n            break\n        ind = bisect_left(p, v + p[-1] - s[d - 2 - cnt], lo=0, hi=ind)\n\n    print(d - cnt)\n\n\nif __name__ == '__main__':\n    main()\n",
        "correct": false,
        "task_id": "0569",
        "depth": 1
    },
    {
        "description": "Ivan recently bought a detective book. The book is so interesting that each page of this book introduces some sort of a mystery, which will be explained later. The i-th page contains some mystery that will be explained on page a_i (a_i \u2265 i).\n\nIvan wants to read the whole book. Each day, he reads the first page he didn't read earlier, and continues to read the following pages one by one, until all the mysteries he read about are explained and clear to him (Ivan stops if there does not exist any page i such that Ivan already has read it, but hasn't read page a_i). After that, he closes the book and continues to read it on the following day from the next page.\n\nHow many days will it take to read the whole book?\n\nInput\n\nThe first line contains single integer n (1 \u2264 n \u2264 10^4) \u2014 the number of pages in the book.\n\nThe second line contains n integers a_1, a_2, ..., a_n (i \u2264 a_i \u2264 n), where a_i is the number of page which contains the explanation of the mystery on page i.\n\nOutput\n\nPrint one integer \u2014 the number of days it will take to read the whole book.\n\nExample\n\nInput\n\n\n9\n1 3 3 6 7 6 8 8 9\n\n\nOutput\n\n\n4\n\nNote\n\nExplanation of the example test:\n\nDuring the first day Ivan will read only the first page. During the second day Ivan will read pages number 2 and 3. During the third day \u2014 pages 4-8. During the fourth (and the last) day Ivan will read remaining page number 9.",
        "task_name": "1140_A. Detective Book",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input()) + 1\na = [0] + [int(i) for i in raw_input().strip().split(' ')]\nhead = 1\nans = 0\nwhile (head < n):\n\tm = a[head]\n\twhile head < m:\n\t\thead += 1\n\t\tif head == n:\n\t\t\tbreak\n\t\tif a[head] > m:\n\t\t\tm = a[head]\n\tans += 1\n\thead += 1\nprint (ans)",
        "correct": true,
        "task_id": "0571",
        "depth": 2
    },
    {
        "description": "There is a country with n citizens. The i-th of them initially has a_{i} money. The government strictly controls the wealth of its citizens. Whenever a citizen makes a purchase or earns some money, they must send a receipt to the social services mentioning the amount of money they currently have.\n\nSometimes the government makes payouts to the poor: all citizens who have strictly less money than x are paid accordingly so that after the payout they have exactly x money. In this case the citizens don't send a receipt.\n\nYou know the initial wealth of every citizen and the log of all events: receipts and payouts. Restore the amount of money each citizen has after all events.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^{5}) \u2014 the numer of citizens.\n\nThe next line contains n integers a_1, a_2, ..., a_n (0 \u2264 a_{i} \u2264 10^{9}) \u2014 the initial balances of citizens.\n\nThe next line contains a single integer q (1 \u2264 q \u2264 2 \u22c5 10^{5}) \u2014 the number of events.\n\nEach of the next q lines contains a single event. The events are given in chronological order.\n\nEach event is described as either 1 p x (1 \u2264 p \u2264 n, 0 \u2264 x \u2264 10^{9}), or 2 x (0 \u2264 x \u2264 10^{9}). In the first case we have a receipt that the balance of the p-th person becomes equal to x. In the second case we have a payoff with parameter x.\n\nOutput\n\nPrint n integers \u2014 the balances of all citizens after all events.\n\nExamples\n\nInput\n\n\n4\n1 2 3 4\n3\n2 3\n1 2 2\n2 1\n\n\nOutput\n\n\n3 2 3 4 \n\n\nInput\n\n\n5\n3 50 2 1 10\n3\n1 2 0\n2 8\n1 3 20\n\n\nOutput\n\n\n8 8 20 8 10 \n\nNote\n\nIn the first example the balances change as follows: 1 2 3 4 \u2192 3 3 3 4 \u2192 3 2 3 4 \u2192 3 2 3 4\n\nIn the second example the balances change as follows: 3 50 2 1 10 \u2192 3 0 2 1 10 \u2192 8 8 8 8 10 \u2192 8 8 20 8 10",
        "task_name": "1199_D. Welfare State",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\nimport bisect\nimport math\nimport itertools\nimport sys\nfrom atexit import register\n \nif sys.version_info[0] < 3:\n    from io import BytesIO as stream\nelse:\n    from io import StringIO as stream\n \n \nif sys.version_info[0] < 3:\n    class dict(dict):\n        \"\"\"dict() -> new empty dictionary\"\"\"\n        def items(self):\n            \"\"\"D.items() -> a set-like object providing a view on D's items\"\"\"\n            return dict.iteritems(self)\n \n        def keys(self):\n            \"\"\"D.keys() -> a set-like object providing a view on D's keys\"\"\"\n            return dict.iterkeys(self)\n \n        def values(self):\n            \"\"\"D.values() -> an object providing a view on D's values\"\"\"\n            return dict.itervalues(self)\n \n    input = raw_input\n    range = xrange\n \n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n \n \ndef sync_with_stdio(sync=True):\n    \"\"\"Set whether the standard Python streams are allowed to buffer their I/O.\n \n    Args:\n        sync (bool, optional): The new synchronization setting.\n \n    \"\"\"\n    global input, flush\n \n    if sync:\n        flush = sys.stdout.flush\n    else:\n        sys.stdin = stream(sys.stdin.read())\n        input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n \n        sys.stdout = stream()\n        register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n \ndef main():\n    n=int(input()) \n    a=list(map(int, input().split()))\n    k=int(input())\n    m=-1\n    ma=0\n    c=[]\n    for i in range(k):\n      b=list(map(int, input().split()))\n      if b[0]==2:\n        if b[1]>=m:\n          m=b[1]\n          ma=i\n      c.append(b)\n    p=0\n    #print(m,ma,c)\n    for i in range(ma):\n      if c[i][0]==1:\n        a[c[i][1]-1]=c[i][2]      \n    for i in range(k-1,ma-1,-1):\n      if c[i][0]==1 and p==0:\n        continue\n      if c[i][0]==2 :\n        x=c[i][1]\n        p=1 \n      if c[i][0]==1 and p==1:\n        c[i][2]=max(x,c[i][2])\n    for i in range(n):\n      if a[i]<m and m!=-1:\n        a[i]=m\n    \n    for i in range(ma,k):\n      if c[i][0]==1:\n        a[c[i][1]-1]=c[i][2]\n    print(*a)\n\n\n \n        \nif __name__ == '__main__':\n    sync_with_stdio(False)\n    main()",
        "correct": false,
        "task_id": "0572",
        "depth": 1
    },
    {
        "description": "There is a white sheet of paper lying on a rectangle table. The sheet is a rectangle with its sides parallel to the sides of the table. If you will take a look from above and assume that the bottom left corner of the table has coordinates (0, 0), and coordinate axes are left and bottom sides of the table, then the bottom left corner of the white sheet has coordinates (x_1, y_1), and the top right \u2014 (x_2, y_2).\n\nAfter that two black sheets of paper are placed on the table. Sides of both black sheets are also parallel to the sides of the table. Coordinates of the bottom left corner of the first black sheet are (x_3, y_3), and the top right \u2014 (x_4, y_4). Coordinates of the bottom left corner of the second black sheet are (x_5, y_5), and the top right \u2014 (x_6, y_6). \n\n<image> Example of three rectangles.\n\nDetermine if some part of the white sheet can be seen from the above after the two black sheets are placed. The part of the white sheet can be seen if there is at least one point lying not strictly inside the white sheet and strictly outside of both black sheets.\n\nInput\n\nThe first line of the input contains four integers x_1, y_1, x_2, y_2 (0 \u2264 x_1 < x_2 \u2264 10^{6}, 0 \u2264 y_1 < y_2 \u2264 10^{6}) \u2014 coordinates of the bottom left and the top right corners of the white sheet.\n\nThe second line of the input contains four integers x_3, y_3, x_4, y_4 (0 \u2264 x_3 < x_4 \u2264 10^{6}, 0 \u2264 y_3 < y_4 \u2264 10^{6}) \u2014 coordinates of the bottom left and the top right corners of the first black sheet.\n\nThe third line of the input contains four integers x_5, y_5, x_6, y_6 (0 \u2264 x_5 < x_6 \u2264 10^{6}, 0 \u2264 y_5 < y_6 \u2264 10^{6}) \u2014 coordinates of the bottom left and the top right corners of the second black sheet.\n\nThe sides of each sheet of paper are parallel (perpendicular) to the coordinate axes.\n\nOutput\n\nIf some part of the white sheet can be seen from the above after the two black sheets are placed, print \"YES\" (without quotes). Otherwise print \"NO\".\n\nExamples\n\nInput\n\n\n2 2 4 4\n1 1 3 5\n3 1 5 5\n\n\nOutput\n\n\nNO\n\n\nInput\n\n\n3 3 7 5\n0 0 4 6\n0 0 7 4\n\n\nOutput\n\n\nYES\n\n\nInput\n\n\n5 2 10 5\n3 1 7 6\n8 1 11 7\n\n\nOutput\n\n\nYES\n\n\nInput\n\n\n0 0 1000000 1000000\n0 0 499999 1000000\n500000 0 1000000 1000000\n\n\nOutput\n\n\nYES\n\nNote\n\nIn the first example the white sheet is fully covered by black sheets.\n\nIn the second example the part of the white sheet can be seen after two black sheets are placed. For example, the point (6.5, 4.5) lies not strictly inside the white sheet and lies strictly outside of both black sheets.",
        "task_name": "1216_C. White Sheet",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n\n# target Expert  \n\n# Author : raj1307 - Raj Singh\n# Date   : 21.09.19\n\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n#from itertools import permutations\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n\ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\n\n\ndef yes():\n    print('YES')\n\ndef no():\n    print('NO')\n\n\ndef main():\n\n    \n\n\n    #for _ in range(ii()):\n\n\n\n    x1,y1,x2,y2=mi()\n    x3,y3,x4,y4=mi()\n    x5,y5,x6,y6=mi()\n\n    one=two=True\n    \n    if x5>x2 or y6<y1 or x6<x1 or y5>y2:\n        one=False\n\n    if y3>y2 or y4<y1 or x3>x2 or x4<x1:\n        two=False\n\n\n    if  (not one) and (not two):\n        yes()\n        exit()\n\n    if True:\n\n        y4=min(y4,y2)\n        y3=max(y3,y1)\n\n        y6=min(y6,y2)\n        y5=max(y5,y1)\n\n        x4=min(x4,x2)\n        x3=max(x3,x1)\n\n        x6=min(x6,x2)\n        x5=max(x5,x1)\n\n\n        if two and one:\n\n            area=abs(x1-x2)*abs(y1-y2)\n\n            a1=abs(x3-x4)*abs(y3-y4)\n\n            a2=abs(x5-x6)*abs(y5-y6)\n\n            if a1+a2<area:\n                yes()\n            else:\n                no()\n\n        elif one==True:\n\n            a2=abs(x5-x6)*abs(y5-y6)\n\n            if a2<area:\n                yes()\n            else:\n                no()\n\n\n        elif two:\n\n            a1=abs(x3-x4)*abs(y3-y4)\n\n            if a1<area:\n                yes()\n            else:\n                no()\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    #read()\n    main()\n    #dmain()\n\n# Comment Read()\n",
        "correct": false,
        "task_id": "0573",
        "depth": 1
    },
    {
        "description": "We just discovered a new data structure in our research group: a suffix three!\n\nIt's very useful for natural language processing. Given three languages and three suffixes, a suffix three can determine which language a sentence is written in.\n\nIt's super simple, 100% accurate, and doesn't involve advanced machine learning algorithms.\n\nLet us tell you how it works.\n\n  * If a sentence ends with \"po\" the language is Filipino. \n  * If a sentence ends with \"desu\" or \"masu\" the language is Japanese. \n  * If a sentence ends with \"mnida\" the language is Korean. \n\n\n\nGiven this, we need you to implement a suffix three that can differentiate Filipino, Japanese, and Korean.\n\nOh, did I say three suffixes? I meant four.\n\nInput\n\nThe first line of input contains a single integer t (1 \u2264 t \u2264 30) denoting the number of test cases. The next lines contain descriptions of the test cases. \n\nEach test case consists of a single line containing a single string denoting the sentence. Spaces are represented as underscores (the symbol \"_\") for ease of reading. The sentence has at least 1 and at most 1000 characters, and consists only of lowercase English letters and underscores. The sentence has no leading or trailing underscores and no two consecutive underscores. It is guaranteed that the sentence ends with one of the four suffixes mentioned above.\n\nOutput\n\nFor each test case, print a single line containing either \"FILIPINO\", \"JAPANESE\", or \"KOREAN\" (all in uppercase, without quotes), depending on the detected language.\n\nExample\n\nInput\n\n\n8\nkamusta_po\ngenki_desu\nohayou_gozaimasu\nannyeong_hashimnida\nhajime_no_ippo\nbensamu_no_sentou_houhou_ga_okama_kenpo\nang_halaman_doon_ay_sarisari_singkamasu\nsi_roy_mustang_ay_namamasu\n\n\nOutput\n\n\nFILIPINO\nJAPANESE\nJAPANESE\nKOREAN\nFILIPINO\nFILIPINO\nJAPANESE\nJAPANESE\n\nNote\n\nThe first sentence ends with \"po\", so it is written in Filipino.\n\nThe second and third sentences end with \"desu\" and \"masu\", so they are written in Japanese.\n\nThe fourth sentence ends with \"mnida\", so it is written in Korean.",
        "task_name": "1281_A. Suffix Three",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#Codeforces Contest Problems 1281 A Suffix Three\n\nlimit = int(input())\n\nfor x in range(limit):\n    text = raw_input()\n\n    if \"po\" in text:\n        print (\"FILIPINO\")\n    elif \"masu\" in text:\n        print (\"JAPANESE\")\n    elif \"desu\" in text:\n        print (\"JAPANESE\")\n    else:\n        print (\"KOREAN\")\n",
        "correct": false,
        "task_id": "0574",
        "depth": 1
    },
    {
        "description": "You are given three strings a, b and c of the same length n. The strings consist of lowercase English letters only. The i-th letter of a is a_i, the i-th letter of b is b_i, the i-th letter of c is c_i.\n\nFor every i (1 \u2264 i \u2264 n) you must swap (i.e. exchange) c_i with either a_i or b_i. So in total you'll perform exactly n swap operations, each of them either c_i \u2194 a_i or c_i \u2194 b_i (i iterates over all integers between 1 and n, inclusive).\n\nFor example, if a is \"code\", b is \"true\", and c is \"help\", you can make c equal to \"crue\" taking the 1-st and the 4-th letters from a and the others from b. In this way a becomes \"hodp\" and b becomes \"tele\".\n\nIs it possible that after these swaps the string a becomes exactly the same as the string b?\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a string of lowercase English letters a.\n\nThe second line of each test case contains a string of lowercase English letters b.\n\nThe third line of each test case contains a string of lowercase English letters c.\n\nIt is guaranteed that in each test case these three strings are non-empty and have the same length, which is not exceeding 100.\n\nOutput\n\nPrint t lines with answers for all test cases. For each test case:\n\nIf it is possible to make string a equal to string b print \"YES\" (without quotes), otherwise print \"NO\" (without quotes).\n\nYou can print either lowercase or uppercase letters in the answers.\n\nExample\n\nInput\n\n\n4\naaa\nbbb\nccc\nabc\nbca\nbca\naabb\nbbaa\nbaba\nimi\nmii\niim\n\n\nOutput\n\n\nNO\nYES\nYES\nNO\n\nNote\n\nIn the first test case, it is impossible to do the swaps so that string a becomes exactly the same as string b.\n\nIn the second test case, you should swap c_i with a_i for all possible i. After the swaps a becomes \"bca\", b becomes \"bca\" and c becomes \"abc\". Here the strings a and b are equal.\n\nIn the third test case, you should swap c_1 with a_1, c_2 with b_2, c_3 with b_3 and c_4 with a_4. Then string a becomes \"baba\", string b becomes \"baba\" and string c becomes \"abab\". Here the strings a and b are equal.\n\nIn the fourth test case, it is impossible to do the swaps so that string a becomes exactly the same as string b.",
        "task_name": "1301_A. Three Strings",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math\nimport heapq\nimport sys\nnum = int(raw_input())\nfor i in range(num):\n    a = raw_input()\n    b = raw_input()\n    c = raw_input()\n    f = 0\n    for j in range(len(a)):\n        if b[j]!=c[j] and a[j]!=c[j]:\n            f = 1\n            break\n    if f==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
        "correct": true,
        "task_id": "0575",
        "depth": 2
    },
    {
        "description": "You are given a positive integer x. Find any such 2 positive integers a and b such that GCD(a,b)+LCM(a,b)=x.\n\nAs a reminder, GCD(a,b) is the greatest integer that divides both a and b. Similarly, LCM(a,b) is the smallest integer such that both a and b divide it.\n\nIt's guaranteed that the solution always exists. If there are several such pairs (a, b), you can output any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 100) \u2014 the number of testcases.\n\nEach testcase consists of one line containing a single integer, x (2 \u2264 x \u2264 10^9).\n\nOutput\n\nFor each testcase, output a pair of positive integers a and b (1 \u2264 a, b \u2264 10^9) such that GCD(a,b)+LCM(a,b)=x. It's guaranteed that the solution always exists. If there are several such pairs (a, b), you can output any of them.\n\nExample\n\nInput\n\n\n2\n2\n14\n\n\nOutput\n\n\n1 1\n6 4\n\nNote\n\nIn the first testcase of the sample, GCD(1,1)+LCM(1,1)=1+1=2.\n\nIn the second testcase of the sample, GCD(6,4)+LCM(6,4)=2+12=14.",
        "task_name": "1325_A. EhAb AnD gCd",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "t = (int)(input())\n\nfor item in range(0, t):\n\n    x = (int)(input())\n    print(1, x-1)",
        "correct": false,
        "task_id": "0576",
        "depth": 1
    },
    {
        "description": "Zookeeper is playing a game. In this game, Zookeeper must use bombs to bomb a string that consists of letters 'A' and 'B'. He can use bombs to bomb a substring which is either \"AB\" or \"BB\". When he bombs such a substring, the substring gets deleted from the string and the remaining parts of the string get concatenated.\n\nFor example, Zookeeper can use two such operations: AABABBA \u2192 AABBA \u2192 AAA.\n\nZookeeper wonders what the shortest string he can make is. Can you help him find the length of the shortest string?\n\nInput\n\nEach test contains multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 20000) \u2014 the number of test cases. The description of the test cases follows.\n\nEach of the next t lines contains a single test case each, consisting of a non-empty string s: the string that Zookeeper needs to bomb. It is guaranteed that all symbols of s are either 'A' or 'B'.\n\nIt is guaranteed that the sum of |s| (length of s) among all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single integer: the length of the shortest string that Zookeeper can make.\n\nExample\n\nInput\n\n\n3\nAAA\nBABA\nAABBBABBBB\n\n\nOutput\n\n\n3\n2\n0\n\nNote\n\nFor the first test case, you can't make any moves, so the answer is 3.\n\nFor the second test case, one optimal sequence of moves is BABA \u2192 BA. So, the answer is 2.\n\nFor the third test case, one optimal sequence of moves is AABBBABBBB \u2192 AABBBABB \u2192 AABBBB \u2192 ABBB \u2192 AB \u2192 (empty string). So, the answer is 0.",
        "task_name": "1428_C. ABBB",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\nimport math\nimport os, sys\nfrom sys import maxint\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii():  return int(input())\n\n\ndef si():  return input()\n\n\ndef mi():  return map(int, input().strip().split(\" \"))\n\n\ndef msi(): return map(str, input().strip().split(\" \"))\n\n\ndef li():  return list(mi())\n\n\ndef dmain():\n    sys.setrecursionlimit(1000000)\n    threading.stack_size(1024000)\n    thread = threading.Thread(target=main)\n    thread.start()\n\n\n# from collections import deque, Counter, OrderedDict,defaultdict\n# from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n# from math import log,sqrt,factorial,cos,tan,sin,radians\n# from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n# from decimal import *\n# import threading\nfrom itertools import permutations\n\n# Copy 2D list  m = [x[:] for x in mark] .. Avoid Using Deepcopy\n\nabc = 'abcdefghijklmnopqrstuvwxyz'\nabd = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12,\n       'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24,\n       'z': 25}\nmod = 1000000007\n# mod=998244353\ninf = float(\"inf\")\nvow = ['a', 'e', 'i', 'o', 'u']\ndx, dy = [-1, 1, 0, 0], [0, 0, 1, -1]\n\n\ndef getKey(item): return item[1]\n\n\ndef sort2(l): return sorted(l, key=getKey, reverse=True)\n\n\ndef d2(n, m, num): return [[num for x in range(m)] for y in range(n)]\n\n\ndef isPowerOfTwo(x): return (x and (not (x & (x - 1))))\n\n\ndef decimalToBinary(n): return bin(n).replace(\"0b\", \"\")\n\n\ndef ntl(n): return [int(i) for i in str(n)]\n\n\ndef ceil(x, y):\n    if x % y == 0:\n        return x // y\n    else:\n        return x // y + 1\n\n\ndef powerMod(x, y, p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\n\ndef isPrime(n):  # Check Prime Number or not\n    if (n <= 1): return False\n    if (n <= 3): return True\n    if (n % 2 == 0 or n % 3 == 0): return False\n    i = 5\n    while (i * i <= n):\n        if (n % i == 0 or n % (i + 2) == 0):\n            return False\n        i = i + 6\n    return True\n\n\ndef read():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\n\ndef main():\n    for _ in range(int(input())):\n        s = raw_input()\n\n        def solve(s):\n            if s.find(\"AB\") == -1 and s.find(\"BB\") == -1:\n                return len(s)\n\n            while s.find(\"AB\") != -1:\n                s = s.replace(\"AB\", \"\")\n\n            while s.find(\"BB\") != -1:\n                s = s.replace(\"BB\", \"\")\n\n            return len(s)\n\n        print(solve(s))\n\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    # read()\n    main()\n    # dmain()\n\n# Comment Read()\n",
        "correct": false,
        "task_id": "0577",
        "depth": 2
    },
    {
        "description": "Ashish has two strings a and b, each of length n, and an integer k. The strings only contain lowercase English letters.\n\nHe wants to convert string a into string b by performing some (possibly zero) operations on a.\n\nIn one move, he can either \n\n  * choose an index i (1 \u2264 i\u2264 n-1) and swap a_i and a_{i+1}, or \n  * choose an index i (1 \u2264 i \u2264 n-k+1) and if a_i, a_{i+1}, \u2026, a_{i+k-1} are all equal to some character c (c \u2260 'z'), replace each one with the next character (c+1), that is, 'a' is replaced by 'b', 'b' is replaced by 'c' and so on. \n\n\n\nNote that he can perform any number of operations, and the operations can only be performed on string a. \n\nHelp Ashish determine if it is possible to convert string a into b after performing some (possibly zero) operations on it.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. The description of each test case is as follows.\n\nThe first line of each test case contains two integers n (2 \u2264 n \u2264 10^6) and k (1 \u2264 k \u2264 n).\n\nThe second line of each test case contains the string a of length n consisting of lowercase English letters.\n\nThe third line of each test case contains the string b of length n consisting of lowercase English letters.\n\nIt is guaranteed that the sum of values n among all test cases does not exceed 10^6.\n\nOutput\n\nFor each test case, print \"Yes\" if Ashish can convert a into b after some moves, else print \"No\".\n\nYou may print the letters of the answer in any case (upper or lower).\n\nExample\n\nInput\n\n\n4\n3 3\nabc\nbcd\n4 2\nabba\nazza\n2 1\nzz\naa\n6 2\naaabba\nddddcc\n\n\nOutput\n\n\nNo\nYes\nNo\nYes\n\nNote\n\nIn the first test case it can be shown that it is impossible to convert a into b.\n\nIn the second test case,\n\n\"abba\" \\xrightarrow{inc} \"acca\" \\xrightarrow{inc} \u2026 \\xrightarrow{inc} \"azza\".\n\nHere \"swap\" denotes an operation of the first type, and \"inc\" denotes an operation of the second type.\n\nIn the fourth test case,\n\n\"aaabba\" \\xrightarrow{swap} \"aaabab\" \\xrightarrow{swap} \"aaaabb\" \\xrightarrow{inc} \u2026 \\xrightarrow{inc} \"ddaabb\" \\xrightarrow{inc} \u2026 \\xrightarrow{inc} \"ddddbb\" \\xrightarrow{inc} \u2026 \\xrightarrow{inc} \"ddddcc\".",
        "task_name": "1451_C. String Equality",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env pypy\nfrom __future__ import division, print_function\nfrom collections import defaultdict, Counter, deque\nfrom future_builtins import ascii, filter, hex, map, oct, zip\nfrom itertools import imap as map, izip as zip, permutations, combinations, combinations_with_replacement\nfrom __builtin__ import xrange as range\nfrom math import ceil, factorial, log, sqrt\nfrom _continuation import continulet\nfrom cStringIO import StringIO\nfrom io import IOBase\nimport __pypy__\nfrom bisect import bisect, insort, bisect_left, bisect_right\nfrom fractions import Fraction\nimport heapq\nfrom functools import reduce\nimport string\nimport sys\nimport os\nimport re\ninf = float('inf')\nmod = int(1e9) + 7\nmod_ = 998244353\n\ndef solve():\n    n, k = map(int, input().split())\n    s = input()\n    t = input()\n    freq = Counter(s)\n    groups = [m.group(0) for m in re.finditer(r\"([a-z])\\1*\", t)]\n\n    for group in groups:\n        div = len(group) // k\n        rem = len(group) % k\n        if freq[group[0]] < rem:\n            print('No')\n            return\n        freq[group[0]] -= rem\n        if div == 0:\n            continue\n        for i in range(string.ascii_lowercase.index(group[0]) - 1, -1, -1):\n            if freq[string.ascii_lowercase[i]] >= div:\n                freq[string.ascii_lowercase[i]] -= div\n                break\n        else:\n            print('No')\n            return\n    print('Yes')\n\n\ndef main():\n    for _ in range(int(input())):\n        solve()\n\nBUFSIZE = 8192\nclass FastI(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = StringIO()\n        self.newlines = 0\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(\"\\n\") + (not b)\n            ptr = self._buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(\n                b), self._buffer.seek(ptr)\n        self.newlines -= 1\n        return self._buffer.readline()\nclass FastO(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = __pypy__.builders.StringBuilder()\n        self.write = lambda s: self._buffer.append(s)\n\n    def flush(self):\n        os.write(self._fd, self._buffer.build())\n        self._buffer = __pypy__.builders.StringBuilder()\ndef print(*args, **kwargs):\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\nsys.stdin, sys.stdout = FastI(sys.stdin), FastO(sys.stdout)\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\nif __name__ == \"__main__\":\n    def bootstrap(cont):\n        call, arg = cont.switch()\n        while True:\n            call, arg = cont.switch(to=continulet(\n                lambda _, f, args: f(*args), call, arg))\n    cont = continulet(bootstrap)\n    cont.switch()\n    main()",
        "correct": false,
        "task_id": "0578",
        "depth": 2
    },
    {
        "description": "At the school where Vasya is studying, preparations are underway for the graduation ceremony. One of the planned performances is a ball, which will be attended by pairs of boys and girls.\n\nEach class must present two couples to the ball. In Vasya's class, a boys and b girls wish to participate. But not all boys and not all girls are ready to dance in pairs.\n\nFormally, you know k possible one-boy-one-girl pairs. You need to choose two of these pairs so that no person is in more than one pair.\n\nFor example, if a=3, b=4, k=4 and the couples (1, 2), (1, 3), (2, 2), (3, 4) are ready to dance together (in each pair, the boy's number comes first, then the girl's number), then the following combinations of two pairs are possible (not all possible options are listed below): \n\n  * (1, 3) and (2, 2); \n  * (3, 4) and (1, 3); \n\n\n\nBut the following combinations are not possible: \n\n  * (1, 3) and (1, 2) \u2014 the first boy enters two pairs; \n  * (1, 2) and (2, 2) \u2014 the second girl enters two pairs; \n\n\n\nFind the number of ways to select two pairs that match the condition above. Two ways are considered different if they consist of different pairs.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains three integers a, b and k (1 \u2264 a, b, k \u2264 2 \u22c5 10^5) \u2014 the number of boys and girls in the class and the number of couples ready to dance together.\n\nThe second line of each test case contains k integers a_1, a_2, \u2026 a_k. (1 \u2264 a_i \u2264 a), where a_i is the number of the boy in the pair with the number i.\n\nThe third line of each test case contains k integers b_1, b_2, \u2026 b_k. (1 \u2264 b_i \u2264 b), where b_i is the number of the girl in the pair with the number i.\n\nIt is guaranteed that the sums of a, b, and k over all test cases do not exceed 2 \u22c5 10^5.\n\nIt is guaranteed that each pair is specified at most once in one test case.\n\nOutput\n\nFor each test case, on a separate line print one integer \u2014 the number of ways to choose two pairs that match the condition above.\n\nExample\n\nInput\n\n\n3\n3 4 4\n1 1 2 3\n2 3 2 4\n1 1 1\n1\n1\n2 2 4\n1 1 2 2\n1 2 1 2\n\n\nOutput\n\n\n4\n0\n2\n\nNote\n\nIn the first test case, the following combinations of pairs fit: \n\n  * (1, 2) and (3, 4); \n  * (1, 3) and (2, 2); \n  * (1, 3) and (3, 4); \n  * (2, 2) and (3, 4). \n\n\n\nThere is only one pair in the second test case.\n\nIn the third test case, the following combinations of pairs fit: \n\n  * (1, 1) and (2, 2); \n  * (1, 2) and (2, 1). ",
        "task_name": "1475_C. Ball in Berland",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    input = open(sys.argv[1], 'r').readline\n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    input = sys.stdin.readline\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\ninputData = InputData()\ninput = inputData.input\n\ndef intin():\n    return(int(input()))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(input()))\ndef strin():\n    return input()\ndef lout(l, sep=\"\\n\"):\n    print(sep.join(l))\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\nfrom collections import defaultdict as ddict, Counter\n# from heapq import *\n# from Queue import Queue\n\ndef main():\n    n,m,k = intlin()\n    a = intlin()\n    b = intlin()\n    cntA = Counter(a)\n    cntB = Counter(b)\n    ans = 0\n    for i in xrange(k):\n        ans += k-cntA[a[i]]-cntB[b[i]]+1\n    print(ans/2)\n\n\nfor _ in xrange(intin()):\n    main()\n    # print(\"YES\" if main() else \"NO\")\n# main()\n\nif testing:\n    sys.stdout = cmd\n    print(int(round(time() * 1000))  - start_time)",
        "correct": true,
        "task_id": "0579",
        "depth": 1
    },
    {
        "description": "Everyone knows that 2010 FIFA World Cup is being held in South Africa now. By the decision of BFA (Berland's Football Association) next World Cup will be held in Berland. BFA took the decision to change some World Cup regulations:\n\n  * the final tournament features n teams (n is always even) \n  * the first n / 2 teams (according to the standings) come through to the knockout stage \n  * the standings are made on the following principle: for a victory a team gets 3 points, for a draw \u2014 1 point, for a defeat \u2014 0 points. In the first place, teams are ordered in the standings in decreasing order of their points; in the second place \u2014 in decreasing order of the difference between scored and missed goals; in the third place \u2014 in the decreasing order of scored goals \n  * it's written in Berland's Constitution that the previous regulation helps to order the teams without ambiguity. \n\n\n\nYou are asked to write a program that, by the given list of the competing teams and the results of all the matches, will find the list of teams that managed to get through to the knockout stage.\n\nInput\n\nThe first input line contains the only integer n (1 \u2264 n \u2264 50) \u2014 amount of the teams, taking part in the final tournament of World Cup. The following n lines contain the names of these teams, a name is a string of lower-case and upper-case Latin letters, its length doesn't exceed 30 characters. The following n\u00b7(n - 1) / 2 lines describe the held matches in the format name1-name2 num1:num2, where name1, name2 \u2014 names of the teams; num1, num2 (0 \u2264 num1, num2 \u2264 100) \u2014 amount of the goals, scored by the corresponding teams. Accuracy of the descriptions is guaranteed: there are no two team names coinciding accurate to the letters' case; there is no match, where a team plays with itself; each match is met in the descriptions only once.\n\nOutput\n\nOutput n / 2 lines \u2014 names of the teams, which managed to get through to the knockout stage in lexicographical order. Output each name in a separate line. No odd characters (including spaces) are allowed. It's guaranteed that the described regulations help to order the teams without ambiguity.\n\nExamples\n\nInput\n\n4\nA\nB\nC\nD\nA-B 1:1\nA-C 2:2\nA-D 1:0\nB-C 1:0\nB-D 0:3\nC-D 0:3\n\n\nOutput\n\nA\nD\n\n\nInput\n\n2\na\nA\na-A 2:1\n\n\nOutput\n\na",
        "task_name": "19_A. World Football Cup",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\nimport sys\nifs = sys.stdin\nofs = sys.stdout\n\nclass TeamResult:\n    \n    def __init__(self):\n        self.points = 0\n        self.goals_scored = 0\n        self.goals_missed = 0\n        \n    def update(self,scored,missed):\n        if scored > missed:\n            self.points += 3\n        elif scored == missed:\n            self.points += 1\n        self.goals_scored += scored\n        self.goals_missed += missed\n    \n    def to_tuple(self):\n        return (self.points,self.goals_missed,self.goals_missed)\n    \n\ndef solve(teams,matches):\n    \n    for m in matches:\n        tr1,tr2 = m\n        name1,goals1 = tr1\n        name2,goals2 = tr2\n        teams[name1].update(goals1,goals2)\n        teams[name2].update(goals2,goals1)\n    \n    T = [(name,tr.to_tuple()) for name,tr in teams.iteritems()]\n    \n    T.sort(key=lambda t: t[1], reverse=True)\n    #print T\n\n    n = len(T)\n    T_names = [t[0] for t in T[:(n/2)] ]\n    return sorted(T_names)\n\n\ndef numbers_from_line(d=' '):\n    return [int(s) for s in ifs.readline().strip().split(d) if len(s.strip())>0]\n\n\nn = int(ifs.readline())\n\nteams = {}\nfor _ in range(n):\n    name = ifs.readline().strip()\n    teams[name] = TeamResult()\n\nmatches = []\nfor _ in range(n*(n-1)/2):\n    marks,goals = ifs.readline().strip().split(' ')\n    t1,t2 = marks.split('-')\n    g1,g2 = goals.split(':')\n    matches.append( ((t1,int(g1)), (t2,int(g2))) )\n\nwinners = solve(teams,matches)\n\nfor name in winners:\n    ofs.write('%s\\n' % name)\n",
        "correct": false,
        "task_id": "0581",
        "depth": 1
    },
    {
        "description": "Polycarpus got hold of a family tree. The found tree describes the family relations of n people, numbered from 1 to n. Every person in this tree has at most one direct ancestor. Also, each person in the tree has a name, the names are not necessarily unique.\n\nWe call the man with a number a a 1-ancestor of the man with a number b, if the man with a number a is a direct ancestor of the man with a number b.\n\nWe call the man with a number a a k-ancestor (k > 1) of the man with a number b, if the man with a number b has a 1-ancestor, and the man with a number a is a (k - 1)-ancestor of the 1-ancestor of the man with a number b.\n\nIn the tree the family ties do not form cycles. In other words there isn't a person who is his own direct or indirect ancestor (that is, who is an x-ancestor of himself, for some x, x > 0).\n\nWe call a man with a number a the k-son of the man with a number b, if the man with a number b is a k-ancestor of the man with a number a.\n\nPolycarpus is very much interested in how many sons and which sons each person has. He took a piece of paper and wrote m pairs of numbers vi, ki. Help him to learn for each pair vi, ki the number of distinct names among all names of the ki-sons of the man with number vi.\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 105) \u2014 the number of people in the tree. Next n lines contain the description of people in the tree. The i-th line contains space-separated string si and integer ri (0 \u2264 ri \u2264 n), where si is the name of the man with a number i, and ri is either the number of the direct ancestor of the man with a number i or 0, if the man with a number i has no direct ancestor. \n\nThe next line contains a single integer m (1 \u2264 m \u2264 105) \u2014 the number of Polycarpus's records. Next m lines contain space-separated pairs of integers. The i-th line contains integers vi, ki (1 \u2264 vi, ki \u2264 n).\n\nIt is guaranteed that the family relationships do not form cycles. The names of all people are non-empty strings, consisting of no more than 20 lowercase English letters.\n\nOutput\n\nPrint m whitespace-separated integers \u2014 the answers to Polycarpus's records. Print the answers to the records in the order, in which the records occur in the input.\n\nExamples\n\nInput\n\n6\npasha 0\ngerald 1\ngerald 1\nvalera 2\nigor 3\nolesya 1\n5\n1 1\n1 2\n1 3\n3 1\n6 1\n\n\nOutput\n\n2\n2\n0\n1\n0\n\n\nInput\n\n6\nvalera 0\nvalera 1\nvalera 1\ngerald 0\nvalera 4\nkolya 4\n7\n1 1\n1 2\n2 1\n2 2\n4 1\n5 1\n6 1\n\n\nOutput\n\n1\n0\n0\n0\n2\n0\n0",
        "task_name": "246_E. Blood Cousins Return",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\nchild = [set({}) for i in range(0, n + 1)]\nquery = [list({}) for i in range(0, n + 1)]\nans = [dict(set({})) for i in range(0, n + 1)]\nss = [0 for i in range(0, n + 1)]\nfa = [0 for i in range(0, n + 1)]\nhash_string = dict()\nnowstrings = 0\nfor i in range(1, n + 1):\n    s = raw_input().split()\n    child[int(s[1])] |= {i}\n    fa[i] = int(s[1])\n    if s[0] not in hash_string:\n        nowstrings += 1\n        hash_string[s[0]] = nowstrings\n    ss[i] = hash_string[s[0]]\nfa[0] = -1\nChild = [list(child[i]) for i in range(0, n+1)]\nlenChild = [len(Child[i]) for i in range(0, n+1)]\nnowChild = [0 for i in range(0, n+1)]\nm = int(raw_input())\nanswer = [0 for i in range(0, m)]\nfor i in range(0, m):\n    s = raw_input().split()\n    query[int(s[0])] += {int(s[1])}\n    query[int(s[0])] += {i}\ndef dfs(x, dep):\n    while x != -1:\n        if nowChild[x] == lenChild[x]:\n            if x != 0:\n                ans[x][dep] = {ss[x]}\n                for nowlistindex in range(0, len(query[x]), 2):\n                    i = query[x][nowlistindex]\n                    j = query[x][nowlistindex+1]\n                    if dep + i not in ans[x]:\n                        answer[j] = 0\n                    else:\n                        answer[j] = len(ans[x][dep + i])\n                \"\"\"count ans\"\"\"\n                if len(ans[x]) < len(ans[fa[x]]):\n                    for j in ans[x]:\n                        if j not in ans[fa[x]]:\n                            ans[fa[x]][j] = ans[x][j]\n                        elif len(ans[x][j]) < len(ans[fa[x]][j]):\n                            ans[fa[x]][j] |= ans[x][j]\n                            ans[x][j].clear()\n                        else:\n                            ans[x][j] |= ans[fa[x]][j]\n                            ans[fa[x]][j].clear()\n                            ans[fa[x]][j] = ans[x][j]\n                    ans[x].clear()\n                else:\n                    for j in ans[fa[x]]:\n                        if j not in ans[x]:\n                            ans[x][j] = ans[fa[x]][j]\n                        elif len(ans[x][j]) > len(ans[fa[x]][j]):\n                            ans[x][j] |= ans[fa[x]][j]\n                            ans[fa[x]][j].clear()\n                        else:\n                            ans[fa[x]][j] |= ans[x][j]\n                            ans[x][j].clear()\n                            ans[x][j] = ans[fa[x]][j]\n                    ans[fa[x]].clear()\n                    ans[fa[x]] = ans[x]\n            x = fa[x]\n            nowChild[x] += 1\n            dep -= 1\n        else:\n            x = Child[x][nowChild[x]]\n            dep += 1\ndfs(0, 0)\nfor i in range(0, m):\n    print(answer[i])\n",
        "correct": true,
        "task_id": "0582",
        "depth": 2
    },
    {
        "description": "Dima and his friends have been playing hide and seek at Dima's place all night. As a result, Dima's place got messy. In the morning they decided that they need to clean the place.\n\nTo decide who exactly would clean the apartment, the friends want to play a counting-out game. First, all the guys stand in a circle, and then each of them shows some number of fingers on one hand (one to five), and then the boys count in a circle, starting from Dima, the number of people, respective to the total number of fingers shown. The person on who the countdown stops will clean the apartment.\n\nFor example, if Dima and one of his friends played hide and seek, and 7 fingers were shown during the counting-out, then Dima would clean the place. If there were 2 or say, 8 fingers shown, then his friend would clean the place.\n\nDima knows how many fingers each of his friends will show during the counting-out. Now he is interested in the number of ways to show some number of fingers on one hand (one to five), so that he did not have to clean the place. Help Dima.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of Dima's friends. Dima himself isn't considered to be his own friend. The second line contains n positive integers, not exceeding 5, representing, how many fingers the Dima's friends will show. \n\nThe numbers in the lines are separated by a single space.\n\nOutput\n\nIn a single line print the answer to the problem.\n\nExamples\n\nInput\n\n1\n1\n\n\nOutput\n\n3\n\n\nInput\n\n1\n2\n\n\nOutput\n\n2\n\n\nInput\n\n2\n3 5\n\n\nOutput\n\n3\n\nNote\n\nIn the first sample Dima can show 1, 3 or 5 fingers. If Dima shows 3 fingers, then the counting-out will go like that: Dima, his friend, Dima, his friend.\n\nIn the second sample Dima can show 2 or 4 fingers.",
        "task_name": "272_A. Dima and Friends",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = input()\n\ns = sum(map(int,raw_input().split()))\n\nk = n+1\ntemp=0\nfor i in range(5):\n    if (s+i)%k==0:\n        temp += 1\n\nprint(5-temp)",
        "correct": true,
        "task_id": "0583",
        "depth": 1
    },
    {
        "description": "As a tradition, every year before IOI all the members of Natalia Fan Club are invited to Malek Dance Club to have a fun night together. Malek Dance Club has 2n members and coincidentally Natalia Fan Club also has 2n members. Each member of MDC is assigned a unique id i from 0 to 2n - 1. The same holds for each member of NFC.\n\nOne of the parts of this tradition is one by one dance, where each member of MDC dances with a member of NFC. A dance pair is a pair of numbers (a, b) such that member a from MDC dances with member b from NFC.\n\nThe complexity of a pairs' assignment is the number of pairs of dancing pairs (a, b) and (c, d) such that a < c and b > d.\n\nYou are given a binary number of length n named x. We know that member i from MDC dances with member <image> from NFC. Your task is to calculate the complexity of this assignment modulo 1000000007 (109 + 7).\n\nExpression <image> denotes applying \u00abXOR\u00bb to numbers x and y. This operation exists in all modern programming languages, for example, in C++ and Java it denotes as \u00ab^\u00bb, in Pascal \u2014 \u00abxor\u00bb.\n\nInput\n\nThe first line of input contains a binary number x of lenght n, (1 \u2264 n \u2264 100).\n\nThis number may contain leading zeros.\n\nOutput\n\nPrint the complexity of the given dance assignent modulo 1000000007 (109 + 7).\n\nExamples\n\nInput\n\n11\n\n\nOutput\n\n6\n\n\nInput\n\n01\n\n\nOutput\n\n2\n\n\nInput\n\n1\n\n\nOutput\n\n1",
        "task_name": "319_A. Malek Dance Club",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math \n\nn = raw_input()\nmod = 1000000007\n\ncnt =0\nl = len(n)\nfor x in range (l):\n    if n[x] == '0':\n        cnt=cnt+1\n    else:\n        if n[x] == '1':\n            break\n\nnum = int(n,2)\n\nif num != 0:\n    npow=int(math.log(num,2))\nelse:\n    npow = 0\n\nif num != 0 and ((num & (num - 1)) == 0):\n    if cnt != 0:\n        print (num*(2**cnt))%mod\n    else:\n        print (2**num)%mod\nelse :\n    if cnt != 0:\n        print (num*(2**cnt)*(2**npow))%mod\n    else:\n        print (num*(2**npow))%mod\n\n\n",
        "correct": false,
        "task_id": "0584",
        "depth": 1
    },
    {
        "description": "Dima, Inna and Seryozha have gathered in a room. That's right, someone's got to go. To cheer Seryozha up and inspire him to have a walk, Inna decided to cook something. \n\nDima and Seryozha have n fruits in the fridge. Each fruit has two parameters: the taste and the number of calories. Inna decided to make a fruit salad, so she wants to take some fruits from the fridge for it. Inna follows a certain principle as she chooses the fruits: the total taste to the total calories ratio of the chosen fruits must equal k. In other words, <image> , where aj is the taste of the j-th chosen fruit and bj is its calories.\n\nInna hasn't chosen the fruits yet, she is thinking: what is the maximum taste of the chosen fruits if she strictly follows her principle? Help Inna solve this culinary problem \u2014 now the happiness of a young couple is in your hands!\n\nInna loves Dima very much so she wants to make the salad from at least one fruit.\n\nInput\n\nThe first line of the input contains two integers n, k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 10). The second line of the input contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 100) \u2014 the fruits' tastes. The third line of the input contains n integers b1, b2, ..., bn (1 \u2264 bi \u2264 100) \u2014 the fruits' calories. Fruit number i has taste ai and calories bi.\n\nOutput\n\nIf there is no way Inna can choose the fruits for the salad, print in the single line number -1. Otherwise, print a single integer \u2014 the maximum possible sum of the taste values of the chosen fruits.\n\nExamples\n\nInput\n\n3 2\n10 8 1\n2 7 1\n\n\nOutput\n\n18\n\n\nInput\n\n5 3\n4 4 4 4 4\n2 2 2 2 2\n\n\nOutput\n\n-1\n\nNote\n\nIn the first test sample we can get the total taste of the fruits equal to 18 if we choose fruit number 1 and fruit number 2, then the total calories will equal 9. The condition <image> fulfills, that's exactly what Inna wants.\n\nIn the second test sample we cannot choose the fruits so as to follow Inna's principle.",
        "task_name": "366_C. Dima and Salad",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from collections import defaultdict\n\nn, k = map(int, raw_input().split())\nA = map(int, raw_input().split())\nB = map(int, raw_input().split())\ndp1 = defaultdict(lambda: 0, {0 : 0})\npos = 0\nfor a, b in zip(A, B):\n    cur = a - b * k\n    dp2 = dp1.copy()\n    for x, y in dp1.iteritems():\n        dp2[x + cur] = max(dp2[x + cur], y + a)\n    dp1 = dp2\nif dp1[0] > 0:\n    print(dp1[0])\nelse:\n    print(-1)",
        "correct": true,
        "task_id": "0586",
        "depth": 2
    },
    {
        "description": "Two chess pieces, a rook and a knight, stand on a standard chessboard 8 \u00d7 8 in size. The positions in which they are situated are known. It is guaranteed that none of them beats the other one.\n\nYour task is to find the number of ways to place another knight on the board so that none of the three pieces on the board beat another one. A new piece can only be placed on an empty square.\n\nInput\n\nThe first input line contains the description of the rook's position on the board. This description is a line which is 2 in length. Its first symbol is a lower-case Latin letter from a to h, and its second symbol is a number from 1 to 8. The second line contains the description of the knight's position in a similar way. It is guaranteed that their positions do not coincide.\n\nOutput\n\nPrint a single number which is the required number of ways.\n\nExamples\n\nInput\n\na1\nb2\n\n\nOutput\n\n44\n\n\nInput\n\na8\nd4\n\n\nOutput\n\n38",
        "task_name": "38_B. Chess",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\n\ndef main():\n    # Template 1.0\n    import sys, re, math\n    from collections import deque, defaultdict, Counter, OrderedDict\n    from math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\n    from heapq import heappush, heappop, heapify, nlargest, nsmallest\n    def STR(): return list(input())\n\n    def INT(): return int(input())\n\n    def MAP(): return map(int, input().split())\n\n    def LIST(): return list(map(int, input().split()))\n\n    def list2d(a, b, c): return [[c] * b for i in range(a)]\n\n    def sortListWithIndex(listOfTuples, idx):   return (sorted(listOfTuples, key=lambda x: x[idx]))\n\n    def sortDictWithVal(passedDic):\n        temp = sorted(passedDic.items(), key=lambda kv: (kv[1], kv[0]))\n        toret = {}\n        for tup in temp:\n            toret[tup[0]] = tup[1]\n        return toret\n\n    def sortDictWithKey(passedDic):\n        return dict(OrderedDict(sorted(passedDic.items())))\n\n    INF = float('inf')\n    mod = 10 ** 9 + 7\n    def setAdd(a, b):\n        if(a>=0 and a<8 and b>=0 and b<8):\n            set1.add((a, b))\n\n    def ADD(knR, knC):\n        setAdd(knR + 1, knC + 2)\n        setAdd(knR + 2, knC + 1)\n        setAdd(knR - 1, knC + 2)\n        setAdd(knR - 1, knC - 2)\n        setAdd(knR + 2, knC - 1)\n        setAdd(knR - 2, knC + 1)\n        setAdd(knR - 2, knC - 1)\n        setAdd(knR + 1, knC - 2)\n\n\n    rook = input()\n    knight = input()\n\n    rookR = ord(rook[0]) - 97\n    rookC = int(rook[1]) - 1\n\n    knR = ord(knight[0]) - 97\n    knC = int(knight[1]) - 1\n\n    set1 = set()\n\n    for i in range(8):\n        set1.add((rookR, i))\n        set1.add((i, rookC))\n\n    ADD(knR, knC)\n    ADD(rookR, rookC)\n\n\n\n    setAdd(rookR,rookC)\n    setAdd(knR, knC)\n\n    # print(set1)\n    print(64-len(set1))\n\n\n\n\n######## Python 2 and 3 footer by Pajenegod and c1729\n\n# Note because cf runs old PyPy3 version which doesn't have the sped up\n# unicode strings, PyPy3 strings will many times be slower than pypy2.\n# There is a way to get around this by using binary strings in PyPy3\n# but its syntax is different which makes it kind of a mess to use.\n\n# So on cf, use PyPy2 for best string performance.\n\npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n    range = xrange\n\nimport os, sys\nfrom io import IOBase, BytesIO\n\nBUFSIZE = 8192\n\n\nclass FastIO(BytesIO):\n    newlines = 0\n\n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n\n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0, 2), super(FastIO, self).write(s))[0])\n        return s\n\n    def read(self):\n        while self._fill(): pass\n        return super(FastIO, self).read()\n\n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill();\n            self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s: self.buffer.write(s.encode('ascii'))\n            self.read = lambda: self.buffer.read().decode('ascii')\n            self.readline = lambda: self.buffer.readline().decode('ascii')\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# Cout implemented in Python\nimport sys\n\n\nclass ostream:\n    def __lshift__(self, a):\n        sys.stdout.write(str(a))\n        return self\n\n\ncout = ostream()\nendl = '\\n'\n\n\n# Read all remaining integers in stdin, type is given by optional argument, this is fast\ndef readnumbers(zero=0):\n    conv = ord if py2 else lambda x: x\n    A = [];\n    numb = zero;\n    sign = 1;\n    i = 0;\n    s = sys.stdin.buffer.read()\n    try:\n        while True:\n            if s[i] >= b'0'[0]:\n                numb = 10 * numb + conv(s[i]) - 48\n            elif s[i] == b'-'[0]:\n                sign = -1\n            elif s[i] != b'\\r'[0]:\n                A.append(sign * numb)\n                numb = zero;\n                sign = 1\n            i += 1\n    except:\n        pass\n    if s and s[-1] >= b'0'[0]:\n        A.append(sign * numb)\n    return A\n\n\nif __name__ == \"__main__\":\n    main()",
        "correct": true,
        "task_id": "0587",
        "depth": 1
    },
    {
        "description": "Your friend has recently learned about coprime numbers. A pair of numbers {a, b} is called coprime if the maximum number that divides both a and b is equal to one. \n\nYour friend often comes up with different statements. He has recently supposed that if the pair (a, b) is coprime and the pair (b, c) is coprime, then the pair (a, c) is coprime. \n\nYou want to find a counterexample for your friend's statement. Therefore, your task is to find three distinct numbers (a, b, c), for which the statement is false, and the numbers meet the condition l \u2264 a < b < c \u2264 r. \n\nMore specifically, you need to find three numbers (a, b, c), such that l \u2264 a < b < c \u2264 r, pairs (a, b) and (b, c) are coprime, and pair (a, c) is not coprime.\n\nInput\n\nThe single line contains two positive space-separated integers l, r (1 \u2264 l \u2264 r \u2264 1018; r - l \u2264 50).\n\nOutput\n\nPrint three positive space-separated integers a, b, c \u2014 three distinct numbers (a, b, c) that form the counterexample. If there are several solutions, you are allowed to print any of them. The numbers must be printed in ascending order. \n\nIf the counterexample does not exist, print the single number -1.\n\nExamples\n\nInput\n\n2 4\n\n\nOutput\n\n2 3 4\n\n\nInput\n\n10 11\n\n\nOutput\n\n-1\n\n\nInput\n\n900000000000000009 900000000000000029\n\n\nOutput\n\n900000000000000009 900000000000000010 900000000000000021\n\nNote\n\nIn the first sample pair (2, 4) is not coprime and pairs (2, 3) and (3, 4) are. \n\nIn the second sample you cannot form a group of three distinct integers, so the answer is -1. \n\nIn the third sample it is easy to see that numbers 900000000000000009 and 900000000000000021 are divisible by three. ",
        "task_name": "483_A. Counterexample ",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import os\nimport sys\nfrom atexit import register\nfrom io import BytesIO\n\nsys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\nsys.stdout = BytesIO()\nregister(lambda: os.write(1, sys.stdout.getvalue()))\n\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# ref. https://codeforces.com/blog/entry/71884\n# 1) inp(), For taking integer inputs.\n# 2) inlt(), For taking List inputs.\n# 3) insr(), For taking string inputs. \n#           Actually it returns a List of Characters, \n#           instead of a string, which is easier to use in Python, \n#           because in Python, Strings are Immutable.\n# 4) invr(), For taking space seperated integer variable inputs.\n\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s)]))\ndef invr():\n    return(map(int,input().split()))\n\ndef gcd(a, b):\n    while a % b > 0:\n        c = a % b\n        a = b\n        b = c\n    \n    return b\n\ndef findC(l, r):\n    for a in range(l, r + 1):\n        for b in range(a + 1, r + 1):\n            # print(a, b, r, gcd(b, a), gcd(r, b))\n            if gcd(r, b) == 1 and gcd(b, a) != 1:\n                return (a, b, r)\n\n    return (-1, -1, -1)\n\nl, r = inlt()\n\nif gcd(r, l) == 1:\n    a, b, c = findC(l, r)\n    if a == -1:\n        sys.stdout.write('-1\\n')\n    sys.stdout.write(str(a) + ' ' + str(b)+ ' ' + str(c) + '\\n')\nelse:\n    sys.stdout.write(str(l) + ' ' + str(l + 1)+ ' ' + str(r) + '\\n')\n",
        "correct": false,
        "task_id": "0589",
        "depth": 2
    },
    {
        "description": "Amr is a young coder who likes music a lot. He always wanted to learn how to play music but he was busy coding so he got an idea.\n\nAmr has n instruments, it takes ai days to learn i-th instrument. Being busy, Amr dedicated k days to learn how to play the maximum possible number of instruments.\n\nAmr asked for your help to distribute his free days between instruments so that he can achieve his goal.\n\nInput\n\nThe first line contains two numbers n, k (1 \u2264 n \u2264 100, 0 \u2264 k \u2264 10 000), the number of instruments and number of days respectively.\n\nThe second line contains n integers ai (1 \u2264 ai \u2264 100), representing number of days required to learn the i-th instrument.\n\nOutput\n\nIn the first line output one integer m representing the maximum number of instruments Amr can learn.\n\nIn the second line output m space-separated integers: the indices of instruments to be learnt. You may output indices in any order.\n\nif there are multiple optimal solutions output any. It is not necessary to use all days for studying.\n\nExamples\n\nInput\n\n4 10\n4 3 1 2\n\n\nOutput\n\n4\n1 2 3 4\n\nInput\n\n5 6\n4 3 1 1 2\n\n\nOutput\n\n3\n1 3 4\n\nInput\n\n1 3\n4\n\n\nOutput\n\n0\n\nNote\n\nIn the first test Amr can learn all 4 instruments.\n\nIn the second test other possible solutions are: {2, 3, 5} or {3, 4, 5}.\n\nIn the third test Amr doesn't have enough time to learn the only presented instrument.",
        "task_name": "507_A. Amr and Music",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "array_buffer = []\nn, m = map(int, raw_input().split())\narray = map(int, raw_input().split())\narray = [(array[i], i + 1) for i in range(n)]\narray.sort()\nfor i in range(n):\n    if m - array[i][0] >= 0:\n        array_buffer.append(array[i][1])\n        m -= array[i][0]\nprint(len(array_buffer))\nprint(' '.join(str(i) for i in array_buffer))",
        "correct": true,
        "task_id": "0590",
        "depth": 1
    },
    {
        "description": "Students in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.\n\nThe students don\u2019t want to use too many blocks, but they also want to be unique, so no two students\u2019 towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.\n\nInput\n\nThe first line of the input contains two space-separated integers n and m (0 \u2264 n, m \u2264 1 000 000, n + m > 0) \u2014 the number of students using two-block pieces and the number of students using three-block pieces, respectively.\n\nOutput\n\nPrint a single integer, denoting the minimum possible height of the tallest tower.\n\nExamples\n\nInput\n\n1 3\n\n\nOutput\n\n9\n\n\nInput\n\n3 2\n\n\nOutput\n\n8\n\n\nInput\n\n5 0\n\n\nOutput\n\n10\n\nNote\n\nIn the first case, the student using two-block pieces can make a tower of height 4, and the students using three-block pieces can make towers of height 3, 6, and 9 blocks. The tallest tower has a height of 9 blocks.\n\nIn the second case, the students can make towers of heights 2, 4, and 8 with two-block pieces and towers of heights 3 and 6 with three-block pieces, for a maximum height of 8 blocks.",
        "task_name": "626_C. Block Towers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n# Author : raj1307 - Raj Singh\n# Date   : 30.04.2020\n\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef msi(): return map(str,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import log,sqrt,factorial\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n#from itertools import permutations\n#Copy 2D list  m = [x[:] for x in mark] .. Avoid Using Deepcopy\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[1] \ndef sort2(l):return sorted(l, key=getKey,reverse=True)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\ndef ncr(n,r): return factorial(n)//(factorial(r)*factorial(n-r))\n\ndef ceil(x,y):\n    if x%y==0:\n        return x//y\n    else:\n        return x//y+1\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n\ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\n\n\n\n\ndef main():\n        \n\n    #for _ in range(ii()):\n    \n    \n    n,m=mi()\n\n\n    for i in range(1,1000001):\n\n        if n<=i//2 and m<=i//3 and n+m<=i//2+i//2-i//6:\n            print(i)\n            break\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n    \n       \n\n\n\n    \n\n\n\n\n\n\n# region fastio\n# template taken from https://github.com/cheran-senthil/PyRival/blob/master/templates/template.py\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    #read()\n    main()\n    #dmain()\n\n# Comment Read()\n",
        "correct": false,
        "task_id": "0592",
        "depth": 1
    },
    {
        "description": "Watchmen are in a danger and Doctor Manhattan together with his friend Daniel Dreiberg should warn them as soon as possible. There are n watchmen on a plane, the i-th watchman is located at point (xi, yi).\n\nThey need to arrange a plan, but there are some difficulties on their way. As you know, Doctor Manhattan considers the distance between watchmen i and j to be |xi - xj| + |yi - yj|. Daniel, as an ordinary person, calculates the distance using the formula <image>.\n\nThe success of the operation relies on the number of pairs (i, j) (1 \u2264 i < j \u2264 n), such that the distance between watchman i and watchmen j calculated by Doctor Manhattan is equal to the distance between them calculated by Daniel. You were asked to compute the number of such pairs.\n\nInput\n\nThe first line of the input contains the single integer n (1 \u2264 n \u2264 200 000) \u2014 the number of watchmen.\n\nEach of the following n lines contains two integers xi and yi (|xi|, |yi| \u2264 109).\n\nSome positions may coincide.\n\nOutput\n\nPrint the number of pairs of watchmen such that the distance between them calculated by Doctor Manhattan is equal to the distance calculated by Daniel.\n\nExamples\n\nInput\n\n3\n1 1\n7 5\n1 5\n\n\nOutput\n\n2\n\n\nInput\n\n6\n0 0\n0 1\n0 2\n-1 1\n0 1\n1 1\n\n\nOutput\n\n11\n\nNote\n\nIn the first sample, the distance between watchman 1 and watchman 2 is equal to |1 - 7| + |1 - 5| = 10 for Doctor Manhattan and <image> for Daniel. For pairs (1, 1), (1, 5) and (7, 5), (1, 5) Doctor Manhattan and Daniel will calculate the same distances.",
        "task_name": "650_A. Watchmen",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def solve(p):\n    dic = {}\n    dicx = {}\n    dicy = {}\n    for t in p:\n        dic[t] = 0\n        x, y = t.split()\n        dicx[int(x)] = 0\n        dicy[int(y)] = 0\n    for t in p:\n        dic[t] += 1\n        x, y = t.split()\n        dicx[int(x)] += 1\n        dicy[int(y)] += 1\n\n    ret = 0\n    for x in dicx.values():\n        ret += (x * (x - 1)) / 2\n    for x in dicy.values():\n        ret += (x * (x - 1)) / 2\n    for x in dic.values():\n        ret -= (x * (x - 1)) / 2\n    return ret\n\nn = int(raw_input())\npairs = []\nfor i in range(n):\n    pairs.append(raw_input())\n\nprint(solve(pairs))\n",
        "correct": true,
        "task_id": "0593",
        "depth": 1
    },
    {
        "description": "During the programming classes Vasya was assigned a difficult problem. However, he doesn't know how to code and was unable to find the solution in the Internet, so he asks you to help.\n\nYou are given a sequence a, consisting of n distinct integers, that is used to construct the binary search tree. Below is the formal description of the construction process.\n\n  1. First element a_1 becomes the root of the tree. \n  2. Elements a_2, a_3, \u2026, a_n are added one by one. To add element a_i one needs to traverse the tree starting from the root and using the following rules: \n    1. The pointer to the current node is set to the root. \n    2. If a_i is greater than the value in the current node, then its right child becomes the current node. Otherwise, the left child of the current node becomes the new current node. \n    3. If at some point there is no required child, the new node is created, it is assigned value a_i and becomes the corresponding child of the current node. \n\nInput\n\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 100 000) \u2014 the length of the sequence a.\n\nThe second line contains n distinct integers a_i (1 \u2264 a_i \u2264 10^9) \u2014 the sequence a itself.\n\nOutput\n\nOutput n - 1 integers. For all i > 1 print the value written in the node that is the parent of the node with value a_i in it.\n\nExamples\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\n1 2\n\n\nInput\n\n5\n4 2 3 1 6\n\n\nOutput\n\n4 2 2 4",
        "task_name": "675_D. Tree Construction",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import random\n\nclass TreapNode:\n  def __init__(self, key, value, parent=None):\n    self.priority = random.randrange(1000000000)\n    self.key = key\n    self.value = value\n    self.parent = parent\n    self.left_child, self.right_child = None, None\n\nclass Treap:\n  def __init__(self):\n    self.root = None\n  \n  def add(self, key, value):\n    if self.root == None:\n      self.root = TreapNode(key, value)\n      return\n    node = self.root\n    # Descend the BST and insert a new node.\n    while True:\n      if node.key == key:\n        return\n      elif node.key > key:\n        if node.left_child:\n          node = node.left_child\n          continue\n        child = node.left_child = TreapNode(key, value, node)\n        break\n      else:\n        if node.right_child:\n          node = node.right_child\n          continue\n        child = node.right_child = TreapNode(key, value, node)\n        break\n    # Perform tree rotations until node priorities are min-heap-ordered.\n    while node.priority > child.priority:\n      if child == node.left_child:\n        if child.right_child:\n          child.right_child.parent = node\n        node.left_child, child.right_child = child.right_child, node\n      else:\n        if child.left_child:\n          child.left_child.parent = node\n        node.right_child, child.left_child = child.left_child, node\n      grandparent = node.parent\n      child.parent, node.parent = grandparent, child\n      if grandparent == None:\n        self.root = child\n        break\n      if node == grandparent.left_child:\n        grandparent.left_child = child\n      else:\n        grandparent.right_child = child\n      node = grandparent\n\n  def traverse(self, node, keys):\n    if node == None:\n      return\n    self.traverse(node.left_child, keys)\n    keys.append(node.key)\n    self.traverse(node.right_child, keys)\n\n  def display(self):\n    keys = []\n    self.traverse(self.root, keys)\n    print('traversal: ' + ' '.join(map(str, keys)))\n\n  def find(self, key):\n    node = self.root\n    while node != None:\n      if node.key < key:\n        node = node.right_child\n      elif node.key > key:\n        node = node.left_child\n      else:\n        return node\n    return None\n\n  def find_around(self, key):  # Assume that key is not in the treap.\n    smaller, bigger = None, None\n    node = self.root\n    while node != None:\n      if node.key < key:\n        if smaller == None or smaller.key < node.key:\n          smaller = node\n        node = node.right_child\n      else:\n        if bigger == None or bigger.key > node.key:\n          bigger = node\n        node = node.left_child\n    return (smaller, bigger)\n\nclass BSTNode:\n  def __init__(self, key):\n    self.key = key\n    self.left_child, self.right_child = None, None\n\n\nn = int(raw_input())\ndata = list(map(int, raw_input().split()))\nbst_root = BSTNode(data[0])\ntreap = Treap()\ntreap.add(data[0], bst_root)\nresult = []\nsorted_keys = [ data[0] ]\nfor key in data[1:n]:\n  smaller, bigger = treap.find_around(key)\n  #print('smaller %s, key %d, bigger %s' % (smaller.key if smaller else '_',\n  #    key, bigger.key if bigger else '_'))\n  #print(sorted_keys)\n  if bigger == None or bigger.value.left_child != None:\n    result.append(smaller.key)\n    bst_node = smaller.value.right_child = BSTNode(key)\n  else:\n    result.append(bigger.key)\n    bst_node = bigger.value.left_child = BSTNode(key)\n  treap.add(key, bst_node)\n  #sorted_keys = sorted(sorted_keys + [ key ])\nprint(' '.join(map(str, result)))\n#treap.display()\n",
        "correct": true,
        "task_id": "0594",
        "depth": 1
    },
    {
        "description": "Vasya the programmer lives in the middle of the Programming subway branch. He has two girlfriends: Dasha and Masha, who live at the different ends of the branch, each one is unaware of the other one's existence.\n\nWhen Vasya has some free time, he goes to one of his girlfriends. He descends into the subway at some time, waits the first train to come and rides on it to the end of the branch to the corresponding girl. However, the trains run with different frequencies: a train goes to Dasha's direction every a minutes, but a train goes to Masha's direction every b minutes. If two trains approach at the same time, Vasya goes toward the direction with the lower frequency of going trains, that is, to the girl, to whose directions the trains go less frequently (see the note to the third sample).\n\nWe know that the trains begin to go simultaneously before Vasya appears. That is the train schedule is such that there exists a moment of time when the two trains arrive simultaneously.\n\nHelp Vasya count to which girlfriend he will go more often.\n\nInput\n\nThe first line contains two integers a and b (a \u2260 b, 1 \u2264 a, b \u2264 106).\n\nOutput\n\nPrint \"Dasha\" if Vasya will go to Dasha more frequently, \"Masha\" if he will go to Masha more frequently, or \"Equal\" if he will go to both girlfriends with the same frequency.\n\nExamples\n\nInput\n\n3 7\n\n\nOutput\n\nDasha\n\n\nInput\n\n5 3\n\n\nOutput\n\nMasha\n\n\nInput\n\n2 3\n\n\nOutput\n\nEqual\n\nNote\n\nLet's take a look at the third sample. Let the trains start to go at the zero moment of time. It is clear that the moments of the trains' arrival will be periodic with period 6. That's why it is enough to show that if Vasya descends to the subway at a moment of time inside the interval (0, 6], he will go to both girls equally often. \n\nIf he descends to the subway at a moment of time from 0 to 2, he leaves for Dasha on the train that arrives by the second minute.\n\nIf he descends to the subway at a moment of time from 2 to 3, he leaves for Masha on the train that arrives by the third minute.\n\nIf he descends to the subway at a moment of time from 3 to 4, he leaves for Dasha on the train that arrives by the fourth minute.\n\nIf he descends to the subway at a moment of time from 4 to 6, he waits for both trains to arrive by the sixth minute and goes to Masha as trains go less often in Masha's direction.\n\nIn sum Masha and Dasha get equal time \u2014 three minutes for each one, thus, Vasya will go to both girlfriends equally often.",
        "task_name": "87_A. Trains",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\nimport sys\ninput = sys.stdin\noutput = sys.stdout\n\nMAX = 10**6\n\nDa = 'Dasha'\nMa = 'Masha'\n\ndef gcd(a,b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a,b):\n    assert (a*b)/gcd(a,b) == (a/gcd(a,b))*b \n    #return (a*b)/gcd(a,b)\n    return (a/gcd(a,b))*b\n\ndef GCD(numbers):\n    return reduce(lambda a,b: gcd(a,b), numbers)\n\ndef LCM(numbers):\n    return reduce(lambda a,b: lcm(a,b), numbers)\n\n\ndef f1(n):\n    return n*(n+1)/2\n\ndef solve(a,b):\n    G = gcd(a,b)\n    L = lcm(a,b)\n    if a<b:\n        M = (L/b - 1)*G\n        D = L - M\n        if D>M:\n            return Ma\n        else:\n            return Da\n    else:\n        M = (L/a - 1)*G\n        D = L - M\n        if D>M:\n            return Ma\n        else:\n            return Da\n\nS = input.readline().split(' ')\na = int(S[0])\nb = int(S[1])\nassert 1<=a and a<=MAX \nassert 1<=b and b<=MAX\nassert a != b \n\nanswer = solve(a,b)\n    \noutput.write('%s\\n' % (answer))\n",
        "correct": false,
        "task_id": "0597",
        "depth": 1
    },
    {
        "description": "Mishka has got n empty boxes. For every i (1 \u2264 i \u2264 n), i-th box is a cube with side length ai.\n\nMishka can put a box i into another box j if the following conditions are met:\n\n  * i-th box is not put into another box; \n  * j-th box doesn't contain any other boxes; \n  * box i is smaller than box j (ai < aj). \n\n\n\nMishka can put boxes into each other an arbitrary number of times. He wants to minimize the number of visible boxes. A box is called visible iff it is not put into some another box.\n\nHelp Mishka to determine the minimum possible number of visible boxes!\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 5000) \u2014 the number of boxes Mishka has got.\n\nThe second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 109), where ai is the side length of i-th box.\n\nOutput\n\nPrint the minimum possible number of visible boxes.\n\nExamples\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\n1\n\n\nInput\n\n4\n4 2 4 3\n\n\nOutput\n\n2\n\nNote\n\nIn the first example it is possible to put box 1 into box 2, and 2 into 3.\n\nIn the second example Mishka can put box 2 into box 3, and box 4 into box 1.",
        "task_name": "903_C. Boxes Packing",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\n\n\ndef main():\n    pass\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\n\n\nn = int(input().rstrip())\nlist1 = list(map(int, input().rstrip().split()))\nlist1.sort()\nt1 = 0\nt2 = 1\nwhile t2 < n:\n    if list1[t1] < list1[t2]:\n        t1 += 1\n        t2 += 1\n    else:\n        t2 += 1\nprint(t2-t1)",
        "correct": true,
        "task_id": "0598",
        "depth": 1
    },
    {
        "description": "Consider a system of n water taps all pouring water into the same container. The i-th water tap can be set to deliver any amount of water from 0 to ai ml per second (this amount may be a real number). The water delivered by i-th tap has temperature ti.\n\nIf for every <image> you set i-th tap to deliver exactly xi ml of water per second, then the resulting temperature of water will be <image> (if <image>, then to avoid division by zero we state that the resulting water temperature is 0).\n\nYou have to set all the water taps in such a way that the resulting temperature is exactly T. What is the maximum amount of water you may get per second if its temperature has to be T?\n\nInput\n\nThe first line contains two integers n and T (1 \u2264 n \u2264 200000, 1 \u2264 T \u2264 106) \u2014 the number of water taps and the desired temperature of water, respectively.\n\nThe second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 106) where ai is the maximum amount of water i-th tap can deliver per second.\n\nThe third line contains n integers t1, t2, ..., tn (1 \u2264 ti \u2264 106) \u2014 the temperature of water each tap delivers.\n\nOutput\n\nPrint the maximum possible amount of water with temperature exactly T you can get per second (if it is impossible to obtain water with such temperature, then the answer is considered to be 0).\n\nYour answer is considered correct if its absolute or relative error doesn't exceed 10 - 6.\n\nExamples\n\nInput\n\n2 100\n3 10\n50 150\n\n\nOutput\n\n6.000000000000000\n\n\nInput\n\n3 9\n5 5 30\n6 6 10\n\n\nOutput\n\n40.000000000000000\n\n\nInput\n\n2 12\n1 3\n10 15\n\n\nOutput\n\n1.666666666666667",
        "task_name": "954_E. Water Taps",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,t=map(int,raw_input().strip().split(' '))\nx= list(map(int,raw_input().strip().split(' ')))\n\ntemp= list(map(int,raw_input().strip().split(' ')))\nfor i in xrange(n):\n  temp[i]-=t\npos = []\nneg = []\nans = 0\nnegsum = 0\npossum = 0\nfor i in xrange(n):\n  if(temp[i]<0):\n    negsum+=temp[i]*x[i]\n    neg.append([temp[i],x[i]])\n  elif(temp[i]>0):\n    possum+=temp[i]*x[i]\n    pos.append([temp[i],x[i]])\n  else:\n    ans+=x[i]\nif(abs(negsum)>possum):\n  for i in pos:\n    ans+=i[1]\n  neg.sort()\n  for i in neg:\n    t = i[0]*i[1]\n    if(t+possum<0):\n      ans+= possum*1.0/i[0]\n      break\n    else:\n      ans+=i[1]\n      possum+=t\n  print(ans)\nelif(possum>abs(negsum)):\n  for i in neg:\n    ans+=i[1]\n  pos.sort()\n  for i in pos:\n    t = i[0]*i[1]\n    if(t+negsum>0):\n      ans+= abs(negsum*1.0/i[0])\n      break\n    else:\n      ans+=i[1]\n      negsum+=t\n  print(ans)\nelse:\n  print(sum(x))\n\n\n",
        "correct": false,
        "task_id": "0599",
        "depth": 1
    },
    {
        "description": "Tak performed the following action N times: rolling two dice. The result of the i-th roll is D_{i,1} and D_{i,2}.\n\nCheck if doublets occurred at least three times in a row. Specifically, check if there exists at lease one i such that D_{i,1}=D_{i,2}, D_{i+1,1}=D_{i+1,2} and D_{i+2,1}=D_{i+2,2} hold.\n\nConstraints\n\n* 3 \\leq N \\leq 100\n* 1\\leq D_{i,j} \\leq 6\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nD_{1,1} D_{1,2}\n\\vdots\nD_{N,1} D_{N,2}\n\n\nOutput\n\nPrint `Yes` if doublets occurred at least three times in a row. Print `No` otherwise.\n\nExamples\n\nInput\n\n5\n1 2\n6 6\n4 4\n3 3\n3 2\n\n\nOutput\n\nYes\n\n\nInput\n\n5\n1 1\n2 2\n3 4\n5 5\n6 6\n\n\nOutput\n\nNo\n\n\nInput\n\n6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n\n\nOutput\n\nYes",
        "task_name": "p02547 AtCoder Beginner Contest 179 - Go to Jail",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import os\nimport sys\nfrom atexit import register\nfrom io import BytesIO\nsys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\nsys.stdout = BytesIO()\nregister(lambda: os.write(1, sys.stdout.getvalue()))\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nraw_input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\nn = int(input())\nok = False\ncont = 0\nfor i in xrange(n):\n    a,b = (int(x) for x in input().split())\n    if a == b:\n        cont += 1\n        if cont == 3:\n            ok = True\n    else:\n        cont = 0\nif ok:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "correct": true,
        "task_id": "0601",
        "depth": 1
    },
    {
        "description": "There is a cave.\n\nThe cave has N rooms and M passages. The rooms are numbered 1 to N, and the passages are numbered 1 to M. Passage i connects Room A_i and Room B_i bidirectionally. One can travel between any two rooms by traversing passages. Room 1 is a special room with an entrance from the outside.\n\nIt is dark in the cave, so we have decided to place a signpost in each room except Room 1. The signpost in each room will point to one of the rooms directly connected to that room with a passage.\n\nSince it is dangerous in the cave, our objective is to satisfy the condition below for each room except Room 1.\n\n* If you start in that room and repeatedly move to the room indicated by the signpost in the room you are in, you will reach Room 1 after traversing the minimum number of passages possible.\n\n\n\nDetermine whether there is a way to place signposts satisfying our objective, and print one such way if it exists.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 2 \\times 10^5\n* 1 \\leq A_i, B_i \\leq N\\ (1 \\leq i \\leq M)\n* A_i \\neq B_i\\ (1 \\leq i \\leq M)\n* One can travel between any two rooms by traversing passages.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\n:\nA_M B_M\n\n\nOutput\n\nIf there is no way to place signposts satisfying the objective, print `No`.\n\nOtherwise, print N lines. The first line should contain `Yes`, and the i-th line (2 \\leq i \\leq N) should contain the integer representing the room indicated by the signpost in Room i.\n\nExamples\n\nInput\n\n4 4\n1 2\n2 3\n3 4\n4 2\n\n\nOutput\n\nYes\n1\n2\n2\n\n\nInput\n\n6 9\n3 4\n6 1\n2 4\n5 3\n4 6\n1 5\n6 2\n4 5\n5 6\n\n\nOutput\n\nYes\n6\n5\n5\n1\n1",
        "task_name": "p02678 AtCoder Beginner Contest 168 - .. (Double Dots)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef bfs(graph, start=0):\n    used = [False] * len(graph)\n    used[start] = True\n    q = [start]\n\n    depth = [-1] * len(graph)\n    post = [-1] * len(graph)\n\n    depth[0] = 0\n\n    for v in q:\n        for w in graph[v]:\n            if depth[w] != -1 and (depth[w] < depth[v] or depth[v] == -1):\n                depth[v] = depth[w] + 1\n                post[v] = w\n\n            if not used[w]:\n                used[w] = True\n                q.append(w)\n\n    return post\n\n\ndef main():\n    n, m = map(int, input().split())\n\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, input().split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    post = bfs(graph)[1:]\n\n    if -1 in post:\n        print(\"No\")\n        return\n\n    print(\"Yes\")\n    for i in post:\n        print(i + 1)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": true,
        "task_id": "0602",
        "depth": 2
    },
    {
        "description": "Akaki, a patissier, can make N kinds of doughnut using only a certain powder called \"Okashi no Moto\" (literally \"material of pastry\", simply called Moto below) as ingredient. These doughnuts are called Doughnut 1, Doughnut 2, ..., Doughnut N. In order to make one Doughnut i (1 \u2264 i \u2264 N), she needs to consume m_i grams of Moto. She cannot make a non-integer number of doughnuts, such as 0.5 doughnuts.\n\nNow, she has X grams of Moto. She decides to make as many doughnuts as possible for a party tonight. However, since the tastes of the guests differ, she will obey the following condition:\n\n* For each of the N kinds of doughnuts, make at least one doughnut of that kind.\n\n\n\nAt most how many doughnuts can be made here? She does not necessarily need to consume all of her Moto. Also, under the constraints of this problem, it is always possible to obey the condition.\n\nConstraints\n\n* 2 \u2264 N \u2264 100\n* 1 \u2264 m_i \u2264 1000\n* m_1 + m_2 + ... + m_N \u2264 X \u2264 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN X\nm_1\nm_2\n:\nm_N\n\n\nOutput\n\nPrint the maximum number of doughnuts that can be made under the condition.\n\nExamples\n\nInput\n\n3 1000\n120\n100\n140\n\n\nOutput\n\n9\n\n\nInput\n\n4 360\n90\n90\n90\n90\n\n\nOutput\n\n4\n\n\nInput\n\n5 3000\n150\n130\n150\n130\n110\n\n\nOutput\n\n26",
        "task_name": "p03370 AtCoder Beginner Contest 095 - Bitter Alchemy",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "S = map(int, raw_input().split())\nN = S[0]\nX = S[1]\n\nm = []\nfor i in range(N):\n    m.append(int(raw_input()))\n\nX -= sum(m)\n\nprint(len(m) + X // sorted(m)[0])\n",
        "correct": true,
        "task_id": "0604",
        "depth": 1
    },
    {
        "description": "There are N people, conveniently numbered 1 through N. They were standing in a row yesterday, but now they are unsure of the order in which they were standing. However, each person remembered the following fact: the absolute difference of the number of the people who were standing to the left of that person, and the number of the people who were standing to the right of that person. According to their reports, the difference above for person i is A_i.\n\nBased on these reports, find the number of the possible orders in which they were standing. Since it can be extremely large, print the answer modulo 10^9+7. Note that the reports may be incorrect and thus there may be no consistent order. In such a case, print 0.\n\nConstraints\n\n* 1\u2266N\u226610^5\n* 0\u2266A_i\u2266N-1\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N\n\n\nOutput\n\nPrint the number of the possible orders in which they were standing, modulo 10^9+7.\n\nExamples\n\nInput\n\n5\n2 4 4 0 2\n\n\nOutput\n\n4\n\n\nInput\n\n7\n6 4 0 2 4 0 2\n\n\nOutput\n\n0\n\n\nInput\n\n8\n7 5 1 1 7 3 5 3\n\n\nOutput\n\n16",
        "task_name": "p03846 AtCoder Beginner Contest 050 - Lining Up",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# -*- coding: utf-8 -*-\n\nn = input()\na = map(int,raw_input().split())\n\nmod = 10**9+7\nflg = [False]*n\n      \nfor i in range(n):\n    if(flg[a[i]]==False):\n        flg[a[i]] = True\n    elif(flg[a[i]-1]==False and a[i]-1>=0):\n        flg[a[i]-1] = True\n    \n           \nif(n%2==0):\n    if(all(flg)):\n        print(2**(n/2) % mod)\n    else:\n        print('0')\nelse:\n    if(all(flg)):\n        print(2**((n-1)/2) % mod)\n    else:\n        print('0')\n        ",
        "correct": true,
        "task_id": "0606",
        "depth": 1
    },
    {
        "description": "A smelt fishing tournament was held at Lake Hibara. It seems that catch and release is recommended this time.\n\nCreate a program that reads the participant number and the number of fish caught or released in order as one event, and outputs the participant number and the number of animals that have acquired the most smelt immediately after each event. please. If there are multiple participants with the highest number of participants (or if all participants are 0), output the one with the lowest participant number.\n\n\n\ninput\n\nThe input is given in the following format.\n\n\nn q\na1 v1\na2 v2\n::\naq vq\n\n\nn (1 \u2264 n \u2264 1000000) represents the number of participants and q (1 \u2264 q \u2264 100000) represents the number of events. ai (1 \u2264 ai \u2264 n) vi (-100 \u2264 vi \u2264 100) indicates that participant ai acquired or released vi at the i-th event. For vi, a positive value indicates acquisition, a negative value indicates release, and 0 is never given.\n\noutput\n\nFor each event, the participant number and the number of participants who have acquired the most smelt at hand are output on one line separated by one blank.\n\nExample\n\nInput\n\n3 5\n1 4\n2 5\n1 3\n3 6\n2 7\n\n\nOutput\n\n1 4\n2 5\n1 7\n1 7\n2 12",
        "task_name": "p00099 Surf Smelt Fishing Contest II",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\nfrom sys import stdin, exit\n\n\ndef main(readline=stdin.readline):\n    n, q = (int(s) for s in readline().split())\n\n    base = [0] * n\n    midway = [0] * (n//100 + 1)\n    last = [0] * (n//10000 + 1)\n\n    for _ in range(q):\n        a, v = (int(s) for s in readline().split())\n\n        a -= 1\n        base[a] += v\n\n        b = a - a % 100\n\n        index = b\n        value = base[b]\n        end = b + 100 if b + 100 < n else n\n        for i in range(b, end):\n            if value < base[i]:\n                value = base[i]\n                index = i\n        midway[b//100] = index\n\n        c = a - a % 10000\n        cc = c // 100\n\n        index = c\n        value = base[c]\n        for i in midway[cc:cc+100]:\n            if value < base[i]:\n                value = base[i]\n                index = i\n        last[c//10000] = index\n\n        index = last[0]\n        value = base[index]\n        for i in last:\n            if value < base[i]:\n                value = base[i]\n                index = i\n\n        print(index+1, value)\n    exit()\n\n\nif __name__ == '__main__':\n    main()",
        "correct": true,
        "task_id": "0607",
        "depth": 2
    },
    {
        "description": "Pablo Squarson is a well-known cubism artist. This year's theme for Pablo Squarson is \"Squares\". Today we are visiting his studio to see how his masterpieces are given birth.\n\nAt the center of his studio, there is a huuuuuge table and beside it are many, many squares of the same size. Pablo Squarson puts one of the squares on the table. Then he places some other squares on the table in sequence. It seems his methodical nature forces him to place each square side by side to the one that he already placed on, with machine-like precision.\n\nOh! The first piece of artwork is done. Pablo Squarson seems satisfied with it. Look at his happy face.\n\nOh, what's wrong with Pablo? He is tearing his hair! Oh, I see. He wants to find a box that fits the new piece of work but he has trouble figuring out its size. Let's help him!\n\nYour mission is to write a program that takes instructions that record how Pablo made a piece of his artwork and computes its width and height. It is known that the size of each square is 1. You may assume that Pablo does not put a square on another.\n\nI hear someone murmured \"A smaller box will do\". No, poor Pablo, shaking his head, is grumbling \"My square style does not seem to be understood by illiterates\".\n\n<image>\n\nInput\n\nThe input consists of a number of datasets. Each dataset represents the way Pablo made a piece of his artwork. The format of a dataset is as follows.\n\n> N\nn1 d1\nn2 d2\n...\nnN-1 dN-1\n\n\nThe first line contains the number of squares (= N) used to make the piece of artwork. The number is a positive integer and is smaller than 200.\n\nThe remaining (N-1) lines in the dataset are square placement instructions. The line \"ni di\" indicates placement of the square numbered i (\u2264 N-1). The rules of numbering squares are as follows. The first square is numbered \"zero\". Subsequently placed squares are numbered 1, 2, ..., (N-1). Note that the input does not give any placement instruction to the first square, which is numbered zero.\n\nA square placement instruction for the square numbered i, namely \"ni di\", directs it to be placed next to the one that is numbered ni, towards the direction given by di, which denotes leftward (= 0), downward (= 1), rightward (= 2), and upward (= 3).\n\nFor example, pieces of artwork corresponding to the four datasets shown in Sample Input are depicted below. Squares are labeled by their numbers.\n\n<image>\n\nThe end of the input is indicated by a line that contains a single zero.\n\nOutput\n\nFor each dataset, output a line that contains the width and the height of the piece of artwork as decimal numbers, separated by a space. Each line should not contain any other characters.\n\nSample Input\n\n\n1\n5\n0 0\n0 1\n0 2\n0 3\n12\n0 0\n1 0\n2 0\n3 1\n4 1\n5 1\n6 2\n7 2\n8 2\n9 3\n10 3\n10\n0 2\n1 2\n2 2\n3 2\n2 1\n5 1\n6 1\n7 1\n8 1\n0\n\n\nOutput for the Sample Input\n\n\n1 1\n3 3\n4 4\n5 6\n\n\n\n\n\n\nExample\n\nInput\n\n1\n5\n0 0\n0 1\n0 2\n0 3\n12\n0 0\n1 0\n2 0\n3 1\n4 1\n5 1\n6 2\n7 2\n8 2\n9 3\n10 3\n10\n0 2\n1 2\n2 2\n3 2\n2 1\n5 1\n6 1\n7 1\n8 1\n0\n\n\nOutput\n\n1 1\n3 3\n4 4\n5 6",
        "task_name": "p00746 Pablo Squarson's Headache",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "while True:\n    N=int(input())\n    if N==0:break\n    t=[0]\n    y=[0]\n    lst=list(range(N))\n    for k in lst[1:]:\n        [x,d]=input().slice()\n        [x,d]=[int(x),int(d)]\n        if d==0:\n            t=t+[t[x]]\n            y=y+[y[x]-1]\n        if d==1:\n            t=t+[t[x]-1]\n            y=y+[y[x]]\n        if d==2:\n            t=t+[t[x]]\n            y=y+[y[x]+1]\n        if d==3:\n            t=t+[t[x]+1]\n            y=y+[y[x]]\n    ht=0\n    lt=0\n    hy=0\n    ly=0\n    for f in range(N):\n        if ht<t[f]:\n            ht+=1\n        if lt>t[f]:\n            lt-=1\n        if hy<y[f]:\n            hy+=1\n        if ly>y[f]:\n            ly-=1\n    print(ht-lt+1,hy-ly+1)",
        "correct": false,
        "task_id": "0608",
        "depth": 2
    },
    {
        "description": "Given a matrix (H \u00d7 W) which contains only 1 and 0, find the area of the largest square matrix which only contains 0s.\n\nConstraints\n\n* 1 \u2264 H, W \u2264 1,400\n\nInput\n\n\nH W\nc1,1 c1,2 ... c1,W\nc2,1 c2,2 ... c2,W\n:\ncH,1 cH,2 ... cH,W\n\n\nIn the first line, two integers H and W separated by a space character are given. In the following H lines, ci,j, elements of the H \u00d7 W matrix, are given.\n\nOutput\n\nPrint the area (the number of 0s) of the largest square.\n\nExample\n\nInput\n\n4 5\n0 0 1 0 0\n1 0 0 0 0\n0 0 0 1 0\n0 0 0 1 0\n\n\nOutput\n\n4",
        "task_name": "p02326 Largest Square",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "h,w=map(int,raw_input().split())\nc=[[1]*(w+1)]+[[1]+map(int,raw_input().split()) for _ in xrange(h)]\ndp=[[0]*(w+1) for i in xrange(h+1)]\nfor i in xrange(h):\n\tfor j in xrange(w):\n\t\tif c[i+1][j+1]==0:\n\t\t\tdp[i+1][j+1]=min(dp[i][j+1],dp[i+1][j],dp[i][j])+1\nprint(max(max(dp)))",
        "correct": false,
        "task_id": "0609",
        "depth": 2
    },
    {
        "description": "Extended Euclid Algorithm\n\n\n\n\nGiven positive integers a and b, find the integer solution (x, y) to ax + by = gcd(a, b), where gcd(a, b) is the greatest common divisor of a and b.\n\nConstraints\n\n* 1 \u2264 a, b \u2264 109\n\nInput\n\n\na b\n\n\nTwo positive integers a and b are given separated by a space in a line.\n\nOutput\n\nPrint two integers x and y separated by a space. If there are several pairs of such x and y, print that pair for which |x| + |y| is the minimal (primarily) and x \u2264 y (secondarily).\n\nExamples\n\nInput\n\n4 12\n\n\nOutput\n\n1 0\n\n\nInput\n\n3 8\n\n\nOutput\n\n3 -1",
        "task_name": "p02471 Extended Euclid Algorithm",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# -*- coding: utf-8 -*-\nfrom __future__ import print_function\n\n\ndef rec(a, b):\n    \"\"\"a * x + b * y = gcd(a, b) ??\u00a8??????????????? (x, y, gcd) ?????????\"\"\"\n    assert a >= b\n    q, r = divmod(a, b)\n    if r == 0:\n        return 0, 1, b\n    x, y, gcd = rec(b, r)\n    # a = b * q + r\n    # b * x + r * y = gcd\n    # a * y + b * (x - q * y) = gcd\n    return y, x - q * y, gcd\n\n\na, b = [int(_) for _ in raw_input().split()]\n\nif a < b:\n    y0, x0, gcd = rec(b, a)\nelse:\n    x0, y0, gcd = rec(a, b)\n\n# -a/gcd * (x - x0) = b/gcd * (y - y0)\n# x = x0 + (b/gcd) * k, y = y0 + (-a/gcd) * k\ndx = b // gcd\ndy = -a // gcd\nif dx < 0:\n    dx = -dx\n    dy = -dy\nx = x0\ny = y0\nmag = abs(x) + abs(y)\n\nwhile True:\n    x1 = x + dx\n    y1 = y + dy\n    mag1 = abs(x1) + abs(y1)\n    if mag1 >= mag:\n        break\n    mag = mag1\n    x = x1\n    y = y1\n\nwhile True:\n    x1 = x - dx\n    y1 = y - dy\n    mag1 = abs(x1) + abs(y1)\n    if mag1 > mag:\n        break\n    mag = mag1\n    x = x1\n    y = y1\n\nprint(x, y)",
        "correct": true,
        "task_id": "0610",
        "depth": 1
    },
    {
        "description": "Vitya has just started learning Berlanese language. It is known that Berlanese uses the Latin alphabet. Vowel letters are \"a\", \"o\", \"u\", \"i\", and \"e\". Other letters are consonant.\n\nIn Berlanese, there has to be a vowel after every consonant, but there can be any letter after any vowel. The only exception is a consonant \"n\"; after this letter, there can be any letter (not only a vowel) or there can be no letter at all. For example, the words \"harakiri\", \"yupie\", \"man\", and \"nbo\" are Berlanese while the words \"horse\", \"king\", \"my\", and \"nz\" are not.\n\nHelp Vitya find out if a word s is Berlanese.\n\nInput\n\nThe first line of the input contains the string s consisting of |s| (1\u2264 |s|\u2264 100) lowercase Latin letters.\n\nOutput\n\nPrint \"YES\" (without quotes) if there is a vowel after every consonant except \"n\", otherwise print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\nExamples\n\nInput\n\nsumimasen\n\n\nOutput\n\nYES\n\n\nInput\n\nninja\n\n\nOutput\n\nYES\n\n\nInput\n\ncodeforces\n\n\nOutput\n\nNO\n\nNote\n\nIn the first and second samples, a vowel goes after each consonant except \"n\", so the word is Berlanese.\n\nIn the third sample, the consonant \"c\" goes after the consonant \"r\", and the consonant \"s\" stands on the end, so the word is not Berlanese.",
        "task_name": "1008_A. Romaji",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s=raw_input().strip()\nletters = list(map(chr, range(ord('a'),ord('z')+1)))\nvowels = list('aeiou')\nconst = list(set(letters) - set(vowels) - set(['n']))\np = True\nfor i in xrange(len(s)):\n    if s[i] in const and (i+1 == len(s) or s[i+1] not in vowels):\n        p=False\n        break\nprint [\"NO\",\"YES\"][p]\n",
        "correct": true,
        "task_id": "0611",
        "depth": 1
    },
    {
        "description": "A permutation of size n is an array of size n such that each integer from 1 to n occurs exactly once in this array. An inversion in a permutation p is a pair of indices (i, j) such that i > j and a_i < a_j. For example, a permutation [4, 1, 3, 2] contains 4 inversions: (2, 1), (3, 1), (4, 1), (4, 3).\n\nYou are given a permutation p of size n. However, the numbers on some positions are replaced by -1. Let the valid permutation be such a replacement of -1 in this sequence back to numbers from 1 to n in such a way that the resulting sequence is a permutation of size n.\n\nThe given sequence was turned into a valid permutation randomly with the equal probability of getting each valid permutation.\n\nCalculate the expected total number of inversions in the resulting valid permutation.\n\nIt can be shown that it is in the form of P/Q where P and Q are non-negative integers and Q \u2260 0. Report the value of P \u22c5 Q^{-1} \\pmod {998244353}.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the sequence.\n\nThe second line contains n integers p_1, p_2, ..., p_n (-1 \u2264 p_i \u2264 n, p_i \u2260 0) \u2014 the initial sequence.\n\nIt is guaranteed that all elements not equal to -1 are pairwise distinct.\n\nOutput\n\nPrint a single integer \u2014 the expected total number of inversions in the resulting valid permutation.\n\nIt can be shown that it is in the form of P/Q where P and Q are non-negative integers and Q \u2260 0. Report the value of P \u22c5 Q^{-1} \\pmod {998244353}.\n\nExamples\n\nInput\n\n\n3\n3 -1 -1\n\n\nOutput\n\n\n499122179\n\n\nInput\n\n\n2\n1 2\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n2\n-1 -1\n\n\nOutput\n\n\n499122177\n\nNote\n\nIn the first example two resulting valid permutations are possible:\n\n  * [3, 1, 2] \u2014 2 inversions; \n  * [3, 2, 1] \u2014 3 inversions. \n\n\n\nThe expected value is (2 \u22c5 1 + 3 \u22c5 1)/(2) = 2.5.\n\nIn the second example no -1 are present, thus the only valid permutation is possible \u2014 the given one. It has 0 inversions.\n\nIn the third example there are two resulting valid permutations \u2014 one with 0 inversions and one with 1 inversion.",
        "task_name": "1096_F. Inversion Expectation",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def fenwicktree(arr):\n    fwtree = [0]*(len(arr)+1)\n    for i in range(len(arr)):\n        updatebit(fwtree,i,arr[i])\n    return fwtree\n\ndef updatebit(fwtree,i,val):\n    i += 1\n    while i < len(fwtree):\n        fwtree[i] += val\n        i += i&(-i)\n\n# get sum of [0, i]\ndef getsum(fwtree,i):\n    s = 0\n    i += 1\n    while i > 0:\n        s += fwtree[i]\n        i -= i&(-i)\n    return s\n\nmod = 998244353\nfac = [1]\nfor i in range(1,200010):\n    fac.append((i*fac[-1])%mod)\nfacInv = []\nfor i in fac:\n    facInv.append( pow(i, mod-2, mod) )\n\nn = input()\np = list(map(lambda x: int(x)-1, raw_input().split()))\n\nnumMissing = len([x for x in p if x == -2])\n\nA = [0 for i in range(n)]\nA = fenwicktree(A)\ncnt = 0\n\nfor i in p:\n    if i == -2: continue\n    cnt += getsum(A, n-1) - getsum(A, i)\n    updatebit(A, i, 1)\ncnt *= fac[numMissing]\n\ncntNeg = 0\nfor i in p:\n    if i == -2:\n        cntNeg += 1\n        continue\n    missingGreater = (n-i-1) - (getsum(A, n-1) - getsum(A, i))\n    missingSmaller = i - getsum(A, i-1)\n\n    missingLeftPos = cntNeg\n    missingRightPos = numMissing - cntNeg\n\n    cnt += fac[numMissing - 1] * missingGreater * missingLeftPos + fac[numMissing - 1] * missingSmaller * missingRightPos\n\n\ncnt += fac[numMissing] * numMissing * (numMissing - 1) / 4\ncnt %= mod\n\nprint((cnt * facInv[numMissing])%mod)\n",
        "correct": true,
        "task_id": "0612",
        "depth": 1
    },
    {
        "description": "Two integer sequences existed initially \u2014 one of them was strictly increasing, and the other one \u2014 strictly decreasing.\n\nStrictly increasing sequence is a sequence of integers [x_1 < x_2 < ... < x_k]. And strictly decreasing sequence is a sequence of integers [y_1 > y_2 > ... > y_l]. Note that the empty sequence and the sequence consisting of one element can be considered as increasing or decreasing.\n\nThey were merged into one sequence a. After that sequence a got shuffled. For example, some of the possible resulting sequences a for an increasing sequence [1, 3, 4] and a decreasing sequence [10, 4, 2] are sequences [1, 2, 3, 4, 4, 10] or [4, 2, 1, 10, 4, 3].\n\nThis shuffled sequence a is given in the input.\n\nYour task is to find any two suitable initial sequences. One of them should be strictly increasing and the other one \u2014 strictly decreasing. Note that the empty sequence and the sequence consisting of one element can be considered as increasing or decreasing.\n\nIf there is a contradiction in the input and it is impossible to split the given sequence a to increasing and decreasing sequences, print \"NO\".\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2 \u22c5 10^5), where a_i is the i-th element of a.\n\nOutput\n\nIf there is a contradiction in the input and it is impossible to split the given sequence a to increasing and decreasing sequences, print \"NO\" in the first line.\n\nOtherwise print \"YES\" in the first line and any two suitable sequences. Note that the empty sequence and the sequence consisting of one element can be considered as increasing or decreasing.\n\nIn the second line print n_i \u2014 the number of elements in the strictly increasing sequence. n_i can be zero, in this case the increasing sequence is empty.\n\nIn the third line print n_i integers inc_1, inc_2, ..., inc_{n_i} in the increasing order of its values (inc_1 < inc_2 < ... < inc_{n_i}) \u2014 the strictly increasing sequence itself. You can keep this line empty if n_i = 0 (or just print the empty line).\n\nIn the fourth line print n_d \u2014 the number of elements in the strictly decreasing sequence. n_d can be zero, in this case the decreasing sequence is empty.\n\nIn the fifth line print n_d integers dec_1, dec_2, ..., dec_{n_d} in the decreasing order of its values (dec_1 > dec_2 > ... > dec_{n_d}) \u2014 the strictly decreasing sequence itself. You can keep this line empty if n_d = 0 (or just print the empty line).\n\nn_i + n_d should be equal to n and the union of printed sequences should be a permutation of the given sequence (in case of \"YES\" answer).\n\nExamples\n\nInput\n\n\n7\n7 2 7 3 3 1 4\n\n\nOutput\n\n\nYES\n2\n3 7 \n5\n7 4 3 2 1 \n\n\nInput\n\n\n5\n4 3 1 5 3\n\n\nOutput\n\n\nYES\n1\n3 \n4\n5 4 3 1 \n\n\nInput\n\n\n5\n1 1 2 1 2\n\n\nOutput\n\n\nNO\n\n\nInput\n\n\n5\n0 1 2 3 4\n\n\nOutput\n\n\nYES\n0\n\n5\n4 3 2 1 0 ",
        "task_name": "1144_C. Two Shuffled Sequences",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nfrom collections import Counter\ncin, cout = stdin.readline, stdout.write\nsize = int(cin())\narray = map(int, cin().split())\ncheck = Counter(array)\npossible = True\ninc, dec = list(), list()\nfor num in check:\n    if check[num]>2: \n        possible = False\n        break\n    elif check[num]==2:\n        inc.append(num)\n        dec.append(num)\n    else: inc.append(num)\nif possible:\n    cout(\"Yes\\n\")\n    inc.sort()\n    dec.sort(reverse = True)\n    cout(\"%d\\n\"%len(inc))\n    for i in xrange(len(inc)): cout(\"%d \"%inc[i])\n    cout(\"\\n%d\\n\"%len(dec))\n    for i in xrange(len(dec)): cout(\"%d \"%dec[i])\n    cout(\"\\n\")\nelse: cout(\"No\\n\")\n\n\n\n\n",
        "correct": true,
        "task_id": "0613",
        "depth": 1
    },
    {
        "description": "Polycarp wants to train before another programming competition. During the first day of his training he should solve exactly 1 problem, during the second day \u2014 exactly 2 problems, during the third day \u2014 exactly 3 problems, and so on. During the k-th day he should solve k problems.\n\nPolycarp has a list of n contests, the i-th contest consists of a_i problems. During each day Polycarp has to choose exactly one of the contests he didn't solve yet and solve it. He solves exactly k problems from this contest. Other problems are discarded from it. If there are no contests consisting of at least k problems that Polycarp didn't solve yet during the k-th day, then Polycarp stops his training.\n\nHow many days Polycarp can train if he chooses the contests optimally?\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of contests.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 2 \u22c5 10^5) \u2014 the number of problems in the i-th contest.\n\nOutput\n\nPrint one integer \u2014 the maximum number of days Polycarp can train if he chooses the contests optimally.\n\nExamples\n\nInput\n\n\n4\n3 1 4 1\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n3\n1 1 1\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n5\n1 1 1 2 2\n\n\nOutput\n\n\n2",
        "task_name": "1165_B. Polycarp Training",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = raw_input()\nn = int(n)\ncontests = raw_input().split(' ')\ncontests = [int(i) for i in contests]\n\nday = 1\nidx = 0\nwhile day < n+1:\n\tif idx >= n:\n\t\tbreak\n\tif contests[idx] >= day:\n\t\tidx += 1\n\t\tday += 1\n\telse:\n\t\tidx += 1\n\nprint(day)",
        "correct": false,
        "task_id": "0614",
        "depth": 1
    },
    {
        "description": "The Cybermen and the Daleks have long been the Doctor's main enemies. Everyone knows that both these species enjoy destroying everything they encounter. However, a little-known fact about them is that they both also love taking Turing tests!\n\nHeidi designed a series of increasingly difficult tasks for them to spend their time on, which would allow the Doctor enough time to save innocent lives!\n\nThe funny part is that these tasks would be very easy for a human to solve.\n\nThe first task is as follows. There are some points on the plane. All but one of them are on the boundary of an axis-aligned square (its sides are parallel to the axes). Identify that point.\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 10).\n\nEach of the following 4n + 1 lines contains two integers x_i, y_i (0 \u2264 x_i, y_i \u2264 50), describing the coordinates of the next point.\n\nIt is guaranteed that there are at least n points on each side of the square and all 4n + 1 points are distinct.\n\nOutput\n\nPrint two integers \u2014 the coordinates of the point that is not on the boundary of the square.\n\nExamples\n\nInput\n\n\n2\n0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n\n\nOutput\n\n\n1 1\n\n\nInput\n\n\n2\n0 0\n0 1\n0 2\n0 3\n1 0\n1 2\n2 0\n2 1\n2 2\n\n\nOutput\n\n\n0 3\n\nNote\n\nIn both examples, the square has four sides x=0, x=2, y=0, y=2.",
        "task_name": "1184_C1. Heidi and the Turing Test (Easy)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom collections import *\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrints_2d = lambda n: [rints() for _ in range(n)]\nget_col = lambda arr, i: [row[i] for row in arr]\n\nn = int(input()) * 4 + 1\na, memx, memy = rints_2d(n), [float('inf'), -1], [float('inf'), -1]\nxs, ys = Counter(get_col(a, 0)), Counter(get_col(a, 1))\n\nfor x, y in a:\n    if xs[x] >= (n - 1) >> 2:\n        memx = [min(memx[0], x), max(memx[1], x)]\n    if ys[y] >= (n - 1) >> 2:\n        memy = [min(memy[0], y), max(memy[1], y)]\n\nfor x, y in a:\n    if not ((memx[0] < x < memx[1] and y in memy) or (x in memx and memy[0] <= y <= memy[1])):\n        print('%d %d' % (x, y))\n        exit()\n",
        "correct": true,
        "task_id": "0615",
        "depth": 1
    },
    {
        "description": "The subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.\n\nYou are given an integer n. \n\nYou have to find a sequence s consisting of digits \\{1, 3, 7\\} such that it has exactly n subsequences equal to 1337.\n\nFor example, sequence 337133377 has 6 subsequences equal to 1337: \n\n  1. 337\\underline{1}3\\underline{3}\\underline{3}7\\underline{7} (you can remove the second and fifth characters); \n  2. 337\\underline{1}\\underline{3}3\\underline{3}7\\underline{7} (you can remove the third and fifth characters); \n  3. 337\\underline{1}\\underline{3}\\underline{3}37\\underline{7} (you can remove the fourth and fifth characters); \n  4. 337\\underline{1}3\\underline{3}\\underline{3}\\underline{7}7 (you can remove the second and sixth characters); \n  5. 337\\underline{1}\\underline{3}3\\underline{3}\\underline{7}7 (you can remove the third and sixth characters); \n  6. 337\\underline{1}\\underline{3}\\underline{3}3\\underline{7}7 (you can remove the fourth and sixth characters). \n\n\n\nNote that the length of the sequence s must not exceed 10^5.\n\nYou have to answer t independent queries.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10) \u2014 the number of queries. \n\nNext t lines contains a description of queries: the i-th line contains one integer n_i (1 \u2264 n_i \u2264 10^9).\n\nOutput\n\nFor the i-th query print one string s_i (1 \u2264 |s_i| \u2264 10^5) consisting of digits \\{1, 3, 7\\}. String s_i must have exactly n_i subsequences 1337. If there are multiple such strings, print any of them.\n\nExample\n\nInput\n\n\n2\n6\n1\n\n\nOutput\n\n\n113337\n1337",
        "task_name": "1202_D. Print a 1337-string...",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import fileinput\ndef D(a):print(a)\ndef S(s,I):return int(s.split(\" \")[I])\ndef main():\n    z=0\n    C=44850\n    for l in fileinput.input():\n        z+=1\n        if(z<2):continue\n        I=int(l)\n        D(\"133\"+I%C*\"7\"+298*\"3\"+I/C*\"7\")\nmain()\n",
        "correct": true,
        "task_id": "0616",
        "depth": 1
    },
    {
        "description": "You are given a tree consisting of n vertices. A tree is an undirected connected acyclic graph.\n\n<image> Example of a tree.\n\nYou have to paint each vertex into one of three colors. For each vertex, you know the cost of painting it in every color.\n\nYou have to paint the vertices so that any path consisting of exactly three distinct vertices does not contain any vertices with equal colors. In other words, let's consider all triples (x, y, z) such that x \u2260 y, y \u2260 z, x \u2260 z, x is connected by an edge with y, and y is connected by an edge with z. The colours of x, y and z should be pairwise distinct. Let's call a painting which meets this condition good.\n\nYou have to calculate the minimum cost of a good painting and find one of the optimal paintings. If there is no good painting, report about it.\n\nInput\n\nThe first line contains one integer n (3 \u2264 n \u2264 100 000) \u2014 the number of vertices.\n\nThe second line contains a sequence of integers c_{1, 1}, c_{1, 2}, ..., c_{1, n} (1 \u2264 c_{1, i} \u2264 10^{9}), where c_{1, i} is the cost of painting the i-th vertex into the first color.\n\nThe third line contains a sequence of integers c_{2, 1}, c_{2, 2}, ..., c_{2, n} (1 \u2264 c_{2, i} \u2264 10^{9}), where c_{2, i} is the cost of painting the i-th vertex into the second color.\n\nThe fourth line contains a sequence of integers c_{3, 1}, c_{3, 2}, ..., c_{3, n} (1 \u2264 c_{3, i} \u2264 10^{9}), where c_{3, i} is the cost of painting the i-th vertex into the third color.\n\nThen (n - 1) lines follow, each containing two integers u_j and v_j (1 \u2264 u_j, v_j \u2264 n, u_j \u2260 v_j) \u2014 the numbers of vertices connected by the j-th undirected edge. It is guaranteed that these edges denote a tree.\n\nOutput\n\nIf there is no good painting, print -1.\n\nOtherwise, print the minimum cost of a good painting in the first line. In the second line print n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 3), where the i-th integer should denote the color of the i-th vertex. If there are multiple good paintings with minimum cost, print any of them.\n\nExamples\n\nInput\n\n\n3\n3 2 3\n4 3 2\n3 1 3\n1 2\n2 3\n\n\nOutput\n\n\n6\n1 3 2 \n\n\nInput\n\n\n5\n3 4 2 1 2\n4 2 1 5 4\n5 3 2 1 1\n1 2\n3 2\n4 3\n5 3\n\n\nOutput\n\n\n-1\n\n\nInput\n\n\n5\n3 4 2 1 2\n4 2 1 5 4\n5 3 2 1 1\n1 2\n3 2\n4 3\n5 4\n\n\nOutput\n\n\n9\n1 3 2 1 3 \n\nNote\n\nAll vertices should be painted in different colors in the first example. The optimal way to do it is to paint the first vertex into color 1, the second vertex \u2014 into color 3, and the third vertex \u2014 into color 2. The cost of this painting is 3 + 2 + 1 = 6.",
        "task_name": "1244_D. Paint the Tree",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom collections import defaultdict\nfrom itertools import permutations\n\n\ndef fast2():\n    import os, sys, atexit\n    from cStringIO import StringIO as BytesIO\n    # range = xrange\n    sys.stdout = BytesIO()\n    atexit.register(lambda: os.write(1, sys.stdout.getvalue()))\n    return BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\n\nclass graph:\n    # initialize graph\n    def __init__(self, gdict=None):\n        if gdict is None:\n            gdict = defaultdict(list)\n        self.gdict, self.edges, self.l = gdict, defaultdict(int), [0] * (n + 1)\n\n    # add edge\n    def addEdge(self, node1, node2, w=None):\n        self.gdict[node1].append(node2)\n        self.gdict[node2].append(node1)\n        self.l[node1] += 1\n        self.l[node2] += 1\n\n    def dfsUtil(self, v, per):\n        global ans, out\n        stack, self.visit = [[v, 0]], [0] * (n + 1)\n        self.visit[v], tem = per[0] + 1, color[per[0]][v - 1]\n\n        while (stack):\n            s, c = stack.pop()\n\n            for i in self.gdict[s]:\n                if not self.visit[i]:\n                    val = (c + 1) % 3\n                    stack.append([i, val])\n                    self.visit[i] = per[val] + 1\n                    tem += color[per[val]][i - 1]\n\n        if tem < ans:\n            ans, out = tem, self.visit[1:]\n\n    def dfs(self):\n        v = 0\n\n        for i in range(1, n + 1):\n            if self.l[i] == 1:\n                v = i\n                break\n\n        for per in permutations([0, 1, 2], 3):\n            self.dfsUtil(v, per)\n\n\ninput = fast2()\nrints = lambda: [int(x) for x in input().split()]\nn = int(input())\ncolor = [rints() for _ in range(3)]\ng, ans, out = graph(), float('inf'), []\n\nfor _ in range(n - 1):\n    u, v = rints()\n    g.addEdge(u, v)\n\nif list(filter(lambda x: x > 2, g.l)):\n    print(-1)\nelse:\n    g.dfs()\n    print('%d\\n%s' % (ans, ' '.join(map(str, out))))\n",
        "correct": true,
        "task_id": "0617",
        "depth": 2
    },
    {
        "description": "An integer sequence is called beautiful if the difference between any two consecutive numbers is equal to 1. More formally, a sequence s_1, s_2, \u2026, s_{n} is beautiful if |s_i - s_{i+1}| = 1 for all 1 \u2264 i \u2264 n - 1.\n\nTrans has a numbers 0, b numbers 1, c numbers 2 and d numbers 3. He wants to construct a beautiful sequence using all of these a + b + c + d numbers.\n\nHowever, it turns out to be a non-trivial task, and Trans was not able to do it. Could you please help Trans?\n\nInput\n\nThe only input line contains four non-negative integers a, b, c and d (0 < a+b+c+d \u2264 10^5).\n\nOutput\n\nIf it is impossible to construct a beautiful sequence satisfying the above constraints, print \"NO\" (without quotes) in one line.\n\nOtherwise, print \"YES\" (without quotes) in the first line. Then in the second line print a + b + c + d integers, separated by spaces \u2014 a beautiful sequence. There should be a numbers equal to 0, b numbers equal to 1, c numbers equal to 2 and d numbers equal to 3.\n\nIf there are multiple answers, you can print any of them.\n\nExamples\n\nInput\n\n\n2 2 2 1\n\n\nOutput\n\n\nYES\n0 1 0 1 2 3 2\n\n\nInput\n\n\n1 2 3 4\n\n\nOutput\n\n\nNO\n\n\nInput\n\n\n2 2 2 3\n\n\nOutput\n\n\nNO\n\nNote\n\nIn the first test, it is easy to see, that the sequence is beautiful because the difference between any two consecutive numbers is equal to 1. Also, there are exactly two numbers, equal to 0, 1, 2 and exactly one number, equal to 3.\n\nIt can be proved, that it is impossible to construct beautiful sequences in the second and third tests.",
        "task_name": "1264_B. Beautiful Sequence",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\ndef main():\n    a, b, c, d = input_as_list()\n    s1 = b-a\n    s2 = c-d\n    if s1 == s2:\n        out = [1, 0]*a + [1, 2]*(b-a) + [3, 2]*d\n    elif s1+1 == s2:\n        if a > 0:\n            a -= 1\n            out = [0] + [1, 0]*a + [1, 2]*(b-a) + [3, 2]*d\n        else:\n            c -= 1\n            out = [2] + [1, 0]*a + [1, 2]*(b-a) + [3, 2]*d\n    elif s1 == s2+1:\n        if d > 0:\n            d -= 1\n            out = [1, 0]*a + [1, 2]*(b-a) + [3, 2]*d + [3]\n        else:\n            b -= 1\n            out = [1, 0]*a + [1, 2]*(b-a) + [3, 2]*d + [1]\n    else:\n        print(\"NO\")\n        return\n    print(\"YES\")\n    print(*out)\n\nINF = float('inf')\nMOD = 10 ** 9 + 7\n__interactive = False\n\nimport os, sys\nfrom atexit import register\nfrom io import BytesIO\nimport itertools\nimport __pypy__\n\nif sys.version_info[0] < 3:\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\nmulmod = __pypy__.intop.int_mulmod\n\nif \"LOCAL_\" in os.environ:\n    debug_print = print\nelse:\n    if not __interactive:\n        sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\n        sys.stdout = BytesIO()\n        register(lambda: os.write(1, sys.stdout.getvalue()))\n\n        input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n    else:\n        flush = sys.stdout.flush\n    debug_print = lambda *x, **y: None\n\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef input_as_list():\n    return list(map(int, input().split()))\n\ndef array_of(f, *dim):\n    return [array_of(f, *dim[1:]) for _ in range(dim[0])] if dim else f()\n\ndef range_with_count(start, step, count):\n    return range(start, start + step * count, step)\n\ndef indices(l, start=0, end=0):\n    return range(start, len(l)+end)\n\ndef ceil_power_of_2(n):\n    return 2 ** ((n - 1).bit_length())\n\ndef ceil_div(x, r):\n    return (x + r - 1) // r\n\nmain()",
        "correct": false,
        "task_id": "0618",
        "depth": 1
    },
    {
        "description": "Today, as a friendship gift, Bakry gave Badawy n integers a_1, a_2, ..., a_n and challenged him to choose an integer X such that the value \\underset{1 \u2264 i \u2264 n}{max} (a_i \u2295 X) is minimum possible, where \u2295 denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).\n\nAs always, Badawy is too lazy, so you decided to help him and find the minimum possible value of \\underset{1 \u2264 i \u2264 n}{max} (a_i \u2295 X).\n\nInput\n\nThe first line contains integer n (1\u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 2^{30}-1).\n\nOutput\n\nPrint one integer \u2014 the minimum possible value of \\underset{1 \u2264 i \u2264 n}{max} (a_i \u2295 X).\n\nExamples\n\nInput\n\n\n3\n1 2 3\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n2\n1 5\n\n\nOutput\n\n\n4\n\nNote\n\nIn the first sample, we can choose X = 3.\n\nIn the second sample, we can choose X = 5.",
        "task_name": "1285_D. Dr. Evil Underscores",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n\nn=int(raw_input())\na=list(map(int,raw_input().split()))\n\ns=[]\n\nfor i in a:\n\tts=bin(i)[2:]\n\tts=ts[::-1]\n\twhile(len(ts)<32):\n\t\tts+=\"0\"\n\n\ts.append(ts)\n\n\nans=\"\"\nbrk=-1\n\nleftp=0\nansl=-1\nansr=-1\n\nfor j in range(31,-1,-1):\n\tc1=0\n\tc0=0\n\n\tfor i in range(n):\n\t\tif(s[i][j]=='0'):\n\t\t\tc0+=1\n\t\telse:\n\t\t\tc1+=1\n\n\n\tif(c1==n):\n\t\tans+=\"1\"\n\telif(c0==n):\n\t\tans+=\"0\"\n\telse:\n\n\t\tmx0=0\n\t\tmx1=0\n\n\t\tans+=\"1\"\n\t\t\n\t\tleftp=int(ans,2)\n\t\tleftp<<=j\n\n\t\tfor i in range(n):\n\t\t\tif(s[i][j]=='0'):\n\t\t\t\tmx0=max(mx0,int((s[i][:j])[::-1],2))\n\t\t\telse:\n\t\t\t\tmx1=max(mx1,int((s[i][:j])[::-1],2))\n\n\n\t\tansl=leftp+mx0\n\t\tansr=leftp+mx1\n\t\tbreak\n\n\nif(ansl==-1):\n\tleftp=int(ans,2)\n\n\ta1=0\n\n\tfor i in a:\n\t\ta1=max(a1,leftp^i)\n\n\tprint(a1)\nelse:\n\n\tm1=0\n\tm0=0\n\n\tfor i in a:\n\t\tm1=max(m1,ansr^i)\n\t\tm0=max(m0,ansl^i)\n\n\tprint(min(m1,m0))\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\n\n",
        "correct": false,
        "task_id": "0619",
        "depth": 2
    },
    {
        "description": "Dreamoon likes coloring cells very much.\n\nThere is a row of n cells. Initially, all cells are empty (don't contain any color). Cells are numbered from 1 to n.\n\nYou are given an integer m and m integers l_1, l_2, \u2026, l_m (1 \u2264 l_i \u2264 n)\n\nDreamoon will perform m operations.\n\nIn i-th operation, Dreamoon will choose a number p_i from range [1, n-l_i+1] (inclusive) and will paint all cells from p_i to p_i+l_i-1 (inclusive) in i-th color. Note that cells may be colored more one than once, in this case, cell will have the color from the latest operation.\n\nDreamoon hopes that after these m operations, all colors will appear at least once and all cells will be colored. Please help Dreamoon to choose p_i in each operation to satisfy all constraints.\n\nInput\n\nThe first line contains two integers n,m (1 \u2264 m \u2264 n \u2264 100 000).\n\nThe second line contains m integers l_1, l_2, \u2026, l_m (1 \u2264 l_i \u2264 n).\n\nOutput\n\nIf it's impossible to perform m operations to satisfy all constraints, print \"'-1\" (without quotes).\n\nOtherwise, print m integers p_1, p_2, \u2026, p_m (1 \u2264 p_i \u2264 n - l_i + 1), after these m operations, all colors should appear at least once and all cells should be colored.\n\nIf there are several possible solutions, you can print any.\n\nExamples\n\nInput\n\n\n5 3\n3 2 2\n\n\nOutput\n\n\n2 4 1\n\n\nInput\n\n\n10 1\n1\n\n\nOutput\n\n\n-1",
        "task_name": "1329_A. Dreamoon Likes Coloring",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nn,m=map(int, stdin.readline().split())\narr=map(int, stdin.readline().split())\nsums=[0]*(m+1)\nl=0\nres=[]\nfor i in xrange(m-1, -1, -1):\n    sums[i]=sums[i+1]+arr[i]\nfor i in xrange(m):\n    res.append(max(i, n-sums[i])+1)\nstdout.write(' '.join(map(str, res)))",
        "correct": false,
        "task_id": "0620",
        "depth": 1
    },
    {
        "description": "For the multiset of positive integers s=\\\\{s_1,s_2,...,s_k\\}, define the Greatest Common Divisor (GCD) and Least Common Multiple (LCM) of s as follow:\n\n  * \\gcd(s) is the maximum positive integer x, such that all integers in s are divisible on x.\n  * lcm(s) is the minimum positive integer x, that divisible on all integers from s.\n\n\n\nFor example, \\gcd(\\{8,12\\})=4,\\gcd(\\{12,18,6\\})=6 and lcm(\\{4,6\\})=12. Note that for any positive integer x, \\gcd(\\\\{x\\})=lcm(\\\\{x\\})=x.\n\nOrac has a sequence a with length n. He come up with the multiset t=\\{lcm(\\\\{a_i,a_j\\})\\ |\\ i<j\\}, and asked you to find the value of \\gcd(t) for him. In other words, you need to calculate the GCD of LCMs of all pairs of elements in the given sequence.\n\nInput\n\nThe first line contains one integer n\\ (2\u2264 n\u2264 100 000).\n\nThe second line contains n integers, a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 200 000).\n\nOutput\n\nPrint one integer: \\gcd(\\{lcm(\\\\{a_i,a_j\\})\\ |\\ i<j\\}).\n\nExamples\n\nInput\n\n\n2\n1 1\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n4\n10 24 40 80\n\n\nOutput\n\n\n40\n\n\nInput\n\n\n10\n540 648 810 648 720 540 594 864 972 648\n\n\nOutput\n\n\n54\n\nNote\n\nFor the first example, t=\\{lcm(\\{1,1\\})\\}=\\{1\\}, so \\gcd(t)=1.\n\nFor the second example, t=\\{120,40,80,120,240,80\\}, and it's not hard to see that \\gcd(t)=40.",
        "task_name": "1349_A. Orac and LCM",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nle = sys.__stdin__.read().split(\"\\n\")[::-1]\nn = int(le.pop())\nN = 6#200001\npr = [True]*N\nl = list(map(int,le.pop().split()))\nr=1\ndef v(p):\n    r2 = 20\n    r1 = 20\n    for a in l:\n        lr=0\n        while a%p==0:\n            a//=p\n            lr += 1\n        r1,r2,x=sorted([lr,r1,r2])\n        #print(a,lr,p)\n        if r2==0:\n            return 1\n\n    return p**r2\n\n\nfor k in range(2,N):\n    if pr[k]:\n        r *= v(k)\n        for i in range(2*k,N,k):\n            pr[i]=False\n\nprint(r)\n",
        "correct": false,
        "task_id": "0621",
        "depth": 2
    },
    {
        "description": "A binary matrix is called good if every even length square sub-matrix has an odd number of ones. \n\nGiven a binary matrix a consisting of n rows and m columns, determine the minimum number of cells you need to change to make it good, or report that there is no way to make it good at all. \n\nAll the terms above have their usual meanings \u2014 refer to the Notes section for their formal definitions. \n\nInput\n\nThe first line of input contains two integers n and m (1 \u2264 n \u2264 m \u2264 10^6 and n\u22c5 m \u2264 10^6) \u2014 the number of rows and columns in a, respectively. \n\nThe following n lines each contain m characters, each of which is one of 0 and 1. If the j-th character on the i-th line is 1, then a_{i,j} = 1. Similarly, if the j-th character on the i-th line is 0, then a_{i,j} = 0.\n\nOutput\n\nOutput the minimum number of cells you need to change to make a good, or output -1 if it's not possible at all.\n\nExamples\n\nInput\n\n\n3 3\n101\n001\n110\n\n\nOutput\n\n\n2\n\nInput\n\n\n7 15\n000100001010010\n100111010110001\n101101111100100\n010000111111010\n111010010100001\n000011001111101\n111111011010011\n\n\nOutput\n\n\n-1\n\nNote\n\nIn the first case, changing a_{1,1} to 0 and a_{2,2} to 1 is enough. \n\nYou can verify that there is no way to make the matrix in the second case good. \n\nSome definitions \u2014 \n\n  * A binary matrix is one in which every element is either 1 or 0. \n  * A sub-matrix is described by 4 parameters \u2014 r_1, r_2, c_1, and c_2; here, 1 \u2264 r_1 \u2264 r_2 \u2264 n and 1 \u2264 c_1 \u2264 c_2 \u2264 m. \n  * This sub-matrix contains all elements a_{i,j} that satisfy both r_1 \u2264 i \u2264 r_2 and c_1 \u2264 j \u2264 c_2. \n  * A sub-matrix is, further, called an even length square if r_2-r_1 = c_2-c_1 and r_2-r_1+1 is divisible by 2. ",
        "task_name": "1391_D. 505",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\n\nrstr = lambda: stdin.readline().strip()\nrints = lambda: [int(x) for x in stdin.readline().split()]\nxor = lambda x, y: sum([x[i] != y[i] for i in range(m)])\nMax = 10 ** 6 + 2\n\n\ndef valid(x, y):\n    for i in range(1, m):\n        val = int(x[i - 1]) + int(x[i]) + int(y[i - 1]) + int(y[i])\n        if val % 2 == 0:\n            return False\n    return True\n\n\nn, m = rints()\nmat = [rstr() for _ in range(n)]\n\nif min(n, m) >= 4:\n    print(-1)\nelif min(n, m) == 1:\n    print(0)\nelse:\n    if m > n:\n        mat = [[mat[j][i] for j in range(n)] for i in range(m)]\n        n, m = m, n\n\n    mem = [[Max for _ in range(8)] for _ in range(n)]\n    bits = ['0' * m] + ['0' * (m - i.bit_length()) + bin(i)[2:] for i in range(1, 1 << m)]\n    d = {0: [2, 5], 1: [3, 4], 2: [0, 7], 3: [1, 6], 4: [1, 6], 5: [0, 7], 6: [3, 4], 7: [2, 5]}\n\n    if m == 2:\n        d = {0: [1, 2], 1: [0, 3], 2: [0, 3], 3: [1, 2]}\n\n    for i in range(1 << m):\n        mem[0][i] = xor(bits[i], mat[0])\n\n    for i in range(1, n):\n        for j in range(1 << m):\n            mem[i][j] = min(mem[i - 1][d[j][0]], mem[i - 1][d[j][1]]) + xor(mat[i], bits[j])\n\n    print(min(mem[-1]))\n",
        "correct": true,
        "task_id": "0622",
        "depth": 2
    },
    {
        "description": "You are given an array a consisting of n integers numbered from 1 to n.\n\nLet's define the k-amazing number of the array as the minimum number that occurs in all of the subsegments of the array having length k (recall that a subsegment of a of length k is a contiguous part of a containing exactly k elements). If there is no integer occuring in all subsegments of length k for some value of k, then the k-amazing number is -1.\n\nFor each k from 1 to n calculate the k-amazing number of the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 \u2264 n \u2264 3 \u22c5 10^5) \u2014 the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 n) \u2014 the elements of the array. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case print n integers, where the i-th integer is equal to the i-amazing number of the array.\n\nExample\n\nInput\n\n\n3\n5\n1 2 3 4 5\n5\n4 4 4 4 2\n6\n1 3 1 5 3 1\n\n\nOutput\n\n\n-1 -1 3 2 1 \n-1 4 4 4 2 \n-1 -1 1 1 1 1 ",
        "task_name": "1416_A. k-Amazing Numbers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n# import threading\n# threading.stack_size(2**27)\nimport sys\nsys.setrecursionlimit(10**4)\n# sys.stdin = open('inpy.txt', 'r')\n# sys.stdout = open('outpy.txt', 'w')\nfrom sys import stdin, stdout\nimport bisect            #c++ upperbound\nimport math\nimport heapq\ni_m=9223372036854775807\ndef modinv(n,p):\n    return pow(n,p-2,p)\ndef cin():\n    return map(int,sin().split())\ndef ain():                           #takes array as input\n    return list(map(int,sin().split()))\ndef sin():\n    return input()\ndef inin():\n    return int(input())\nimport math  \ndef GCD(x, y): \n    x=abs(x)\n    y=abs(y)\n    if(min(x,y)==0):\n        return max(x,y)\n    while(y): \n        x, y = y, x % y \n    return x \ndef Divisors(n) : \n    l = []  \n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if (n % i == 0) : \n            if (n // i == i) : \n                l.append(i) \n            else : \n                l.append(i)\n                l.append(n//i)\n    return l\nprime=[]\ndef SieveOfEratosthenes(n): \n    global prime\n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    f=[]\n    for p in range(2, n): \n        if prime[p]: \n            f.append(p)\n    return f\ndef primeFactors(n): \n    a=[]\n    # Print the number of two's that divide n \n    while n % 2 == 0: \n        a.append(2) \n        n = n // 2\n          \n    # n must be odd at this point \n    # so a skip of 2 ( i = i + 2) can be used \n    for i in range(3,int(math.sqrt(n))+1,2): \n          \n        # while i divides n , print i ad divide n \n        while n % i== 0: \n            a.append(i) \n            n = n // i \n              \n    # Condition if n is a prime \n    # number greater than 2 \n    if n > 2: \n        a.append(n)\n    return a\n\n\"\"\"*******************************************************\"\"\"\ndef main():\n    t=inin()\n    for _ in range(t):\n        n=inin()\n        a=ain()\n        d={}\n        ans=n\n        e={}\n        for i in a:\n            d[i]=-1\n            e[i]=0\n        for i in range(n):\n            e[a[i]]=max(e[a[i]],i-d[a[i]])\n            d[a[i]]=i\n        for i in range(n):\n            e[a[i]]=max(e[a[i]],n-d[a[i]])\n        b=[100000000000]*n\n        for i in e:\n            b[e[i]-1]=min(b[e[i]-1],i)\n        x=100000000000\n        for i in range(n):\n            x=min(x,b[i])\n            b[i]=x\n        for i in range(n):\n            if b[i]==100000000000:\n                b[i]=-1\n        print(b)\n\n######## Python 2 and 3 footer by Pajenegod and c1729\n \n# Note because cf runs old PyPy3 version which doesn't have the sped up\n# unicode strings, PyPy3 strings will many times be slower than pypy2.\n# There is a way to get around this by using binary strings in PyPy3\n# but its syntax is different which makes it kind of a mess to use.\n \n# So on cf, use PyPy2 for best string performance.\n \npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\n \nimport os, sys\nfrom io import IOBase, BytesIO\n \nBUFSIZE = 8192\nclass FastIO(BytesIO):\n    newlines = 0\n \n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n \n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0,2), super(FastIO, self).write(s))[0])\n        return s\n \n    def read(self):\n        while self._fill(): pass\n        return super(FastIO,self).read()\n \n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill(); self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s:self.buffer.write(s.encode('ascii'))\n            self.read = lambda:self.buffer.read().decode('ascii')\n            self.readline = lambda:self.buffer.readline().decode('ascii')\n \n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n \n# Cout implemented in Python\nimport sys\nclass ostream:\n    def __lshift__(self,a):\n        sys.stdout.write(str(a))\n        return self\ncout = ostream()\nendl = '\\n'\n \n# Read all remaining integers in stdin, type is given by optional argument, this is fast\ndef readnumbers(zero = 0):\n    conv = ord if py2 else lambda x:x\n    A = []; numb = zero; sign = 1; i = 0; s = sys.stdin.buffer.read()\n    try:\n        while True:\n            if s[i] >= b'R' [0]:\n                numb = 10 * numb + conv(s[i]) - 48\n            elif s[i] == b'-' [0]: sign = -1\n            elif s[i] != b'\\r' [0]:\n                A.append(sign*numb)\n                numb = zero; sign = 1\n            i += 1\n    except:pass\n    if s and s[-1] >= b'R' [0]:\n        A.append(sign*numb)\n    return A\n \n# threading.Thread(target=main).start()\nif __name__== \"__main__\":\n  main()",
        "correct": false,
        "task_id": "0623",
        "depth": 2
    },
    {
        "description": "Homer has two friends Alice and Bob. Both of them are string fans. \n\nOne day, Alice and Bob decide to play a game on a string s = s_1 s_2 ... s_n of length n consisting of lowercase English letters. They move in turns alternatively and Alice makes the first move.\n\nIn a move, a player must choose an index i (1 \u2264 i \u2264 n) that has not been chosen before, and change s_i to any other lowercase English letter c that c \u2260 s_i.\n\nWhen all indices have been chosen, the game ends. \n\nThe goal of Alice is to make the final string lexicographically as small as possible, while the goal of Bob is to make the final string lexicographically as large as possible. Both of them are game experts, so they always play games optimally. Homer is not a game expert, so he wonders what the final string will be.\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds: \n\n  * a is a prefix of b, but a \u2260 b; \n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b. \n\nInput\n\nEach test contains multiple test cases. The first line contains t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains a single string s (1 \u2264 |s| \u2264 50) consisting of lowercase English letters.\n\nOutput\n\nFor each test case, print the final string in a single line.\n\nExample\n\nInput\n\n\n3\na\nbbbb\naz\n\n\nOutput\n\n\nb\nazaz\nby\n\nNote\n\nIn the first test case: Alice makes the first move and must change the only letter to a different one, so she changes it to 'b'.\n\nIn the second test case: Alice changes the first letter to 'a', then Bob changes the second letter to 'z', Alice changes the third letter to 'a' and then Bob changes the fourth letter to 'z'.\n\nIn the third test case: Alice changes the first letter to 'b', and then Bob changes the second letter to 'y'.",
        "task_name": "1480_A. Yet Another String Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "t=int(raw_input())\nfor _ in range(t):\n    s=list(raw_input())\n    s.pop(-1)\n    for i in range(len(s)):\n        if i%2==0:\n            if s[i]!='a':\n                s[i]='a'\n            else:\n                s[i]='b'\n        else:\n            if s[i]!='z':\n                s[i]='z'\n            else:\n                s[i]='y'\n    print(''.join(s))\n    ",
        "correct": false,
        "task_id": "0624",
        "depth": 2
    },
    {
        "description": "You are given a string s, consisting of lowercase Latin letters. While there is at least one character in the string s that is repeated at least twice, you perform the following operation: \n\n  * you choose the index i (1 \u2264 i \u2264 |s|) such that the character at position i occurs at least two times in the string s, and delete the character at position i, that is, replace s with s_1 s_2 \u2026 s_{i-1} s_{i+1} s_{i+2} \u2026 s_n. \n\n\n\nFor example, if s=\"codeforces\", then you can apply the following sequence of operations: \n\n  * i=6 \u21d2 s=\"codefrces\"; \n  * i=1 \u21d2 s=\"odefrces\"; \n  * i=7 \u21d2 s=\"odefrcs\"; \n\n\n\nGiven a given string s, find the lexicographically maximum string that can be obtained after applying a certain sequence of operations after which all characters in the string become unique.\n\nA string a of length n is lexicographically less than a string b of length m, if: \n\n  * there is an index i (1 \u2264 i \u2264 min(n, m)) such that the first i-1 characters of the strings a and b are the same, and the i-th character of the string a is less than i-th character of string b; \n  * or the first min(n, m) characters in the strings a and b are the same and n < m. \n\n\n\nFor example, the string a=\"aezakmi\" is lexicographically less than the string b=\"aezus\".\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4). Then t test cases follow.\n\nEach test case is characterized by a string s, consisting of lowercase Latin letters (1 \u2264 |s| \u2264 2 \u22c5 10^5).\n\nIt is guaranteed that the sum of the lengths of the strings in all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output the lexicographically maximum string that can be obtained after applying a certain sequence of operations after which all characters in the string become unique.\n\nExample\n\nInput\n\n\n6\ncodeforces\naezakmi\nabacaba\nconvexhull\nswflldjgpaxs\nmyneeocktxpqjpz\n\n\nOutput\n\n\nodfrces\nezakmi\ncba\nconvexhul\nwfldjgpaxs\nmyneocktxqjpz",
        "task_name": "1506_G. Maximize the Remaining String",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Enter your code here. Read input from STDIN. Print output to STDOUT# ===============================================================================================\n# importing some useful libraries.\nfrom __future__ import division, print_function\nfrom fractions import Fraction\nimport sys\nimport os\nfrom io import BytesIO, IOBase\nfrom itertools import *\nimport bisect\nfrom heapq import *\nfrom math import ceil, floor\nfrom copy import *\nfrom collections import deque, defaultdict\nfrom collections import Counter as counter  # Counter(list)  return a dict with {key: count}\nfrom itertools import combinations  # if a = [1,2,3] then print(list(comb(a,2))) -----> [(1, 2), (1, 3), (2, 3)]\nfrom itertools import permutations as permutate\nfrom bisect import bisect_left as bl\nfrom operator import *\n# If the element is already present in the list,\n\n# the left most position where element has to be inserted is returned.\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n\n# If the element is already present in the list,\n# the right most position where element has to be inserted is returned\n\n# ==============================================================================================\n# fast I/O region\n\nBUFSIZE = 8192\nfrom sys import stderr\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"A\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for A in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(A))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n# inp = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# ===============================================================================================\n### START ITERATE RECURSION ###\nfrom types import GeneratorType\n\n\ndef iterative(f, stack=[]):\n    def wrapped_func(*args, **kwargs):\n        if stack: return f(*args, **kwargs)\n        to = f(*args, **kwargs)\n        while True:\n            if type(to) is GeneratorType:\n                stack.append(to)\n                to = next(to)\n                continue\n            stack.pop()\n            if not stack: break\n            to = stack[-1].send(to)\n        return to\n\n    return wrapped_func\n\n\n#### END ITERATE RECURSION ####\n###########################\n# Sorted list\nclass SortedList:\n    def __init__(self, iterable=[], _load=200):\n        \"\"\"Initialize sorted list instance.\"\"\"\n        values = sorted(iterable)\n        self._len = _len = len(values)\n        self._load = _load\n        self._lists = _lists = [values[start:start + _load] for start in range(0, _len, _load)]\n        self._list_lens = [len(_list) for _list in _lists]\n        self._mins = [_list[0] for _list in _lists]\n        self._fen_tree = []\n        self._rebuild = True\n\n    def _fen_build(self):\n        \"\"\"Build a fenwick tree instance.\"\"\"\n        self._fen_tree[:] = self._list_lens\n        _fen_tree = self._fen_tree\n        for start in range(len(_fen_tree)):\n            if start | start + 1 < len(_fen_tree):\n                _fen_tree[start | start + 1] += _fen_tree[start]\n        self._rebuild = False\n\n    def _fen_update(self, index, value):\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\n        if not self._rebuild:\n            _fen_tree = self._fen_tree\n            while index < len(_fen_tree):\n                _fen_tree[index] += value\n                index |= index + 1\n\n    def _fen_query(self, end):\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        A = 0\n        while end:\n            A += _fen_tree[end - 1]\n            end &= end - 1\n        return A\n\n    def _fen_findkth(self, k):\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\n        _list_lens = self._list_lens\n        if k < _list_lens[0]:\n            return 0, k\n        if k >= self._len - _list_lens[-1]:\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        idx = -1\n        for d in reversed(range(len(_fen_tree).bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\n                idx = right_idx\n                k -= _fen_tree[idx]\n        return idx + 1, k\n\n    def _delete(self, pos, idx):\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len -= 1\n        self._fen_update(pos, -1)\n        del _lists[pos][idx]\n        _list_lens[pos] -= 1\n\n        if _list_lens[pos]:\n            _mins[pos] = _lists[pos][0]\n        else:\n            del _lists[pos]\n            del _list_lens[pos]\n            del _mins[pos]\n            self._rebuild = True\n\n    def _loc_left(self, value):\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        lo, pos = -1, len(_lists) - 1\n        while lo + 1 < pos:\n            mi = (lo + pos) >> 1\n            if value <= _mins[mi]:\n                pos = mi\n            else:\n                lo = mi\n\n        if pos and value <= _lists[pos - 1][-1]:\n            pos -= 1\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value <= _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def _loc_right(self, value):\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        pos, hi = 0, len(_lists)\n        while pos + 1 < hi:\n            mi = (pos + hi) >> 1\n            if value < _mins[mi]:\n                hi = mi\n            else:\n                pos = mi\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value < _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def add(self, value):\n        \"\"\"Add `value` to sorted list.\"\"\"\n        _load = self._load\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len += 1\n        if _lists:\n            pos, idx = self._loc_right(value)\n            self._fen_update(pos, 1)\n            _list = _lists[pos]\n            _list.insert(idx, value)\n            _list_lens[pos] += 1\n            _mins[pos] = _list[0]\n            if _load + _load < len(_list):\n                _lists.insert(pos + 1, _list[_load:])\n                _list_lens.insert(pos + 1, len(_list) - _load)\n                _mins.insert(pos + 1, _list[_load])\n                _list_lens[pos] = _load\n                del _list[_load:]\n                self._rebuild = True\n        else:\n            _lists.append([value])\n            _mins.append(value)\n            _list_lens.append(1)\n            self._rebuild = True\n\n    def discard(self, value):\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_right(value)\n            if idx and _lists[pos][idx - 1] == value:\n                self._delete(pos, idx - 1)\n\n    def remove(self, value):\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\n        _len = self._len\n        self.discard(value)\n        if _len == self._len:\n            raise ValueError('{0!r} not in list'.format(value))\n\n    def pop(self, index=-1):\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        value = self._lists[pos][idx]\n        self._delete(pos, idx)\n        return value\n\n    def bisect_left(self, value):\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_left(value)\n        return self._fen_query(pos) + idx\n\n    def bisect_right(self, value):\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_right(value)\n        return self._fen_query(pos) + idx\n\n    def count(self, value):\n        \"\"\"Return number of occurrences of `value` in the sorted list.\"\"\"\n        return self.bisect_right(value) - self.bisect_left(value)\n\n    def __len__(self):\n        \"\"\"Return the size of the sorted list.\"\"\"\n        return self._len\n\n    def __getitem__(self, index):\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        return self._lists[pos][idx]\n\n    def __delitem__(self, index):\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        self._delete(pos, idx)\n\n    def __contains__(self, value):\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_left(value)\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\n        return False\n\n    def __iter__(self):\n        \"\"\"Return an iterator over the sorted list.\"\"\"\n        return (value for _list in self._lists for value in _list)\n\n    def __reversed__(self):\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\n\n    def __repr__(self):\n        \"\"\"Return string representation of sorted list.\"\"\"\n        return 'SortedList({0})'.format(list(self))\n\n\n# ===============================================================================================\n# some shortcuts\n\nmod = 1000000007\n\n\ndef testcase(t):\n    for p in range(t):\n        solve()\n\n\ndef pow(A, B, p):\n    res = 1  # Initialize result\n    A = A % p  # Update A if it is more , than or equal to p\n    if (A == 0):\n        return 0\n    while (B > 0):\n        if ((B & 1) == 1):  # If B is odd, multiply, A with result\n            res = (res * A) % p\n\n        B = B >> 1  # B = B/2\n        A = (A * A) % p\n    return res\n\n\nfrom functools import reduce\n\n\ndef factors(n):\n    return set(reduce(list.__add__,\n                      ([start, n // start] for start in range(1, int(n ** 0.5) + 1) if n % start == 0)))\n\n\ndef gcd(a, b):\n    if a == b: return a\n    while b > 0: a, b = b, a % b\n    return a\n\n\n# discrete binary search\n# minimise:\n# def search():\n#     l = 0\n#     r = 10 ** 15\n#\n#     for start in range(200):\n#         if isvalid(l):\n#             return l\n#         if l == r:\n#             return l\n#         m = (l + r) // 2\n#         if isvalid(m) and not isvalid(m - 1):\n#             return m\n#         if isvalid(m):\n#             r = m + 1\n#         else:\n#             l = m\n#     return m\n\n# maximise:\n# def search():\n#     l = 0\n#     r = 10 ** 15\n#\n#     for start in range(200):\n#         # print(l,r)\n#         if isvalid(r):\n#             return r\n#         if l == r:\n#             return l\n#         m = (l + r) // 2\n#         if isvalid(m) and not isvalid(m + 1):\n#             return m\n#         if isvalid(m):\n#             l = m\n#         else:\n#             r = m - 1\n#     return m\n\n\n##############Find sum of product of subsets of size k in a array\n# ar=[0,1,2,3]\n# k=3\n# n=len(ar)-1\n# dp=[0]*(n+1)\n# dp[0]=1\n# for pos in range(1,n+1):\n#     dp[pos]=0\n#     l=max(1,k+pos-n-1)\n#     for j in range(min(pos,k),l-1,-1):\n#         dp[j]=dp[j]+ar[pos]*dp[j-1]\n# print(dp[k])\n\ndef prefix_sum(ar):  # [1,2,3,4]->[1,3,6,10]\n    return list(accumulate(ar))\n\n\ndef suffix_sum(ar):  # [1,2,3,4]->[10,9,7,4]\n    return list(accumulate(ar[::-1]))[::-1]\n\n\ndef N():\n    return int(inp())\n\n\ndx = [0, 0, 1, -1]\ndy = [1, -1, 0, 0]\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\n# =========================================================================================\nfrom collections import defaultdict\n\n\ndef numberOfSetBits(start):\n    start = start - ((start >> 1) & 0x55555555)\n    start = (start & 0x33333333) + ((start >> 2) & 0x33333333)\n    return (((start + (start >> 4) & 0xF0F0F0F) * 0x1010101) & 0xffffffff) >> 24\n\n\nclass MergeFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n        # self.lista = [[_] for _ in range(n)]\n\n    def find(self, a):\n        to_update = []\n        while a != self.parent[a]:\n            to_update.append(a)\n            a = self.parent[a]\n        for b in to_update:\n            self.parent[b] = a\n        return self.parent[a]\n\n    def merge(self, a, b):\n        a = self.find(a)\n        b = self.find(b)\n        if a == b:\n            return\n        if self.size[a] < self.size[b]:\n            a, b = b, a\n        self.num_sets -= 1\n        self.parent[b] = a\n        self.size[a] += self.size[b]\n        # self.lista[a] += self.lista[b]\n        # self.lista[b] = []\n\n    def set_size(self, a):\n        return self.size[self.find(a)]\n\n    def __len__(self):\n        return self.num_sets\n\n\ndef lcm(a, b):\n    return abs((a // gcd(a, b)) * b)\n\n\n# #\n# to find factorial and ncr\n# tot = 100005\n# mod = 10**9 + 7\n# fac = [1, 1]\n# finv = [1, 1]\n# inv = [0, 1]\n#\n# for start in range(2, tot + 1):\n#     fac.append((fac[-1] * start) % mod)\n#     inv.append(mod - (inv[mod % start] * (mod // start) % mod))\n#     finv.append(finv[-1] * inv[-1] % mod)\n\n\ndef comb(n, r):\n    if n < r:\n        return 0\n    else:\n        return fac[n] * (finv[r] * finv[n - r] % mod) % mod\n\n\ndef inp(): return sys.stdin.readline().rstrip(\"\\r\\n\")  # for fast input\n\n\ndef out(var): sys.stdout.write(str(var))  # for fast output, always take string\n\n\ndef lis(): return list(map(int, inp().split()))\n\n\ndef stringlis(): return list(map(str, inp().split()))\n\n\ndef sep(): return map(int, inp().split())\n\n\ndef strsep(): return map(str, inp().split())\n\n\ndef fsep(): return map(float, inp().split())\n\n\ndef nextline(): out(\"\\n\")  # as stdout.write always print sring.\n\n\ndef arr1d(n, v):\n    return [v] * n\n\n\ndef arr2d(n, m, v):\n    return [[v] * m for _ in range(n)]\n\n\ndef arr3d(n, m, p, v):\n    return [[[v] * p for _ in range(m)] for start in range(n)]\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\n# co-ordinate compression\n# ma={s:idx for idx,s in enumerate(sorted(set(l+r)))}\n\n# mxn=100005\n# lrg=[0]*mxn\n# for start in range(2,mxn-3):\n#     if (lrg[start]==0):\n#         for j in range(start,mxn-3,start):\n#             lrg[j]=start\n\n\ndef solve():\n    s=inp()\n    ans=[]\n    n=len(s)\n    c=counter(s)\n    torem=set()\n    for i in range(n-1):\n        # print(s[i],ans)\n        if(s[i] in torem):\n            c[s[i]]-=1\n            continue\n        if(c[s[i]]==1):\n            if (ans):\n                if (s[i] > ans[-1]):\n                    if (c[ans[-1]] > 0):\n                        if(ans[-1] in torem):\n                            torem.remove(ans[-1])\n                        ans.pop()\n            ans.append(s[i])\n            c[s[i]] -= 1\n            continue\n        if(s[i] < s[i+1]):\n            c[s[i]]-=1\n            continue\n        else:\n            if(ans):\n                if(s[i]>ans[-1]):\n                    if(c[ans[-1]] >0):\n                        ans.pop()\n            ans.append(s[i])\n            torem.add(s[i])\n            c[s[i]] -= 1\n\n            continue\n    if(s[-1] not in torem):\n        ans.append(s[-1])\n    print(\"\".join(ans))\n\n\n\n\n\n\n\n\n# solve()\ntestcase(N())",
        "correct": false,
        "task_id": "0625",
        "depth": 1
    },
    {
        "description": "Today we will be playing a red and white colouring game (no, this is not the Russian Civil War; these are just the colours of the Canadian flag).\n\nYou are given an n \u00d7 m grid of \"R\", \"W\", and \".\" characters. \"R\" is red, \"W\" is white and \".\" is blank. The neighbours of a cell are those that share an edge with it (those that only share a corner do not count).\n\nYour job is to colour the blank cells red or white so that every red cell only has white neighbours (and no red ones) and every white cell only has red neighbours (and no white ones). You are not allowed to recolour already coloured cells.\n\nInput\n\nThe first line contains t (1 \u2264 t \u2264 100), the number of test cases.\n\nIn each test case, the first line will contain n (1 \u2264 n \u2264 50) and m (1 \u2264 m \u2264 50), the height and width of the grid respectively.\n\nThe next n lines will contain the grid. Each character of the grid is either 'R', 'W', or '.'.\n\nOutput\n\nFor each test case, output \"YES\" if there is a valid grid or \"NO\" if there is not.\n\nIf there is, output the grid on the next n lines. If there are multiple answers, print any.\n\nIn the output, the \"YES\"s and \"NO\"s are case-insensitive, meaning that outputs such as \"yEs\" and \"nO\" are valid. However, the grid is case-sensitive.\n\nExample\n\nInput\n\n\n3\n4 6\n.R....\n......\n......\n.W....\n4 4\n.R.W\n....\n....\n....\n5 1\nR\nW\nR\nW\nR\n\n\nOutput\n\n\nYES\nWRWRWR\nRWRWRW\nWRWRWR\nRWRWRW\nNO\nYES\nR\nW\nR\nW\nR\n\nNote\n\nThe answer for the first example case is given in the example output, and it can be proven that no grid exists that satisfies the requirements of the second example case. In the third example all cells are initially coloured, and the colouring is valid.",
        "task_name": "1534_A. Colour the Flag",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Enter your code here. Read input from STDIN. Print output to STDOUT# ===============================================================================================\n# importing some useful libraries.\nfrom __future__ import division, print_function\nfrom fractions import Fraction\nimport sys\nimport os\nfrom io import BytesIO, IOBase\nfrom itertools import *\nimport bisect\nfrom heapq import *\nfrom math import ceil, floor\nfrom copy import *\nfrom collections import deque, defaultdict\nfrom collections import Counter as counter  # Counter(list)  return a dict with {key: count}\nfrom itertools import combinations  # if a = [1,2,3] then print(list(comb(a,2))) -----> [(1, 2), (1, 3), (2, 3)]\nfrom itertools import permutations as permutate\nfrom bisect import bisect_left as bl\nfrom operator import *\n# If the element is already present in the list,\n\n# the left most position where element has to be inserted is returned.\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n\n# If the element is already present in the list,\n# the right most position where element has to be inserted is returned\n\n# ==============================================================================================\n# fast I/O region\n\nBUFSIZE = 8192\nfrom sys import stderr\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"A\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for A in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(A))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n# inp = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# ===============================================================================================\n### START ITERATE RECURSION ###\nfrom types import GeneratorType\n\n\ndef iterative(f, stack=[]):\n    def wrapped_func(*args, **kwargs):\n        if stack: return f(*args, **kwargs)\n        to = f(*args, **kwargs)\n        while True:\n            if type(to) is GeneratorType:\n                stack.append(to)\n                to = next(to)\n                continue\n            stack.pop()\n            if not stack: break\n            to = stack[-1].send(to)\n        return to\n\n    return wrapped_func\n\n\n#### END ITERATE RECURSION ####\n###########################\n# Sorted list\nclass SortedList:\n    def __init__(self, iterable=[], _load=200):\n        \"\"\"Initialize sorted list instance.\"\"\"\n        values = sorted(iterable)\n        self._len = _len = len(values)\n        self._load = _load\n        self._lists = _lists = [values[start:start + _load] for start in range(0, _len, _load)]\n        self._list_lens = [len(_list) for _list in _lists]\n        self._mins = [_list[0] for _list in _lists]\n        self._fen_tree = []\n        self._rebuild = True\n\n    def _fen_build(self):\n        \"\"\"Build a fenwick tree instance.\"\"\"\n        self._fen_tree[:] = self._list_lens\n        _fen_tree = self._fen_tree\n        for start in range(len(_fen_tree)):\n            if start | start + 1 < len(_fen_tree):\n                _fen_tree[start | start + 1] += _fen_tree[start]\n        self._rebuild = False\n\n    def _fen_update(self, index, value):\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\n        if not self._rebuild:\n            _fen_tree = self._fen_tree\n            while index < len(_fen_tree):\n                _fen_tree[index] += value\n                index |= index + 1\n\n    def _fen_query(self, end):\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        A = 0\n        while end:\n            A += _fen_tree[end - 1]\n            end &= end - 1\n        return A\n\n    def _fen_findkth(self, k):\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\n        _list_lens = self._list_lens\n        if k < _list_lens[0]:\n            return 0, k\n        if k >= self._len - _list_lens[-1]:\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        idx = -1\n        for d in reversed(range(len(_fen_tree).bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\n                idx = right_idx\n                k -= _fen_tree[idx]\n        return idx + 1, k\n\n    def _delete(self, pos, idx):\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len -= 1\n        self._fen_update(pos, -1)\n        del _lists[pos][idx]\n        _list_lens[pos] -= 1\n\n        if _list_lens[pos]:\n            _mins[pos] = _lists[pos][0]\n        else:\n            del _lists[pos]\n            del _list_lens[pos]\n            del _mins[pos]\n            self._rebuild = True\n\n    def _loc_left(self, value):\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        lo, pos = -1, len(_lists) - 1\n        while lo + 1 < pos:\n            mi = (lo + pos) >> 1\n            if value <= _mins[mi]:\n                pos = mi\n            else:\n                lo = mi\n\n        if pos and value <= _lists[pos - 1][-1]:\n            pos -= 1\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value <= _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def _loc_right(self, value):\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        pos, hi = 0, len(_lists)\n        while pos + 1 < hi:\n            mi = (pos + hi) >> 1\n            if value < _mins[mi]:\n                hi = mi\n            else:\n                pos = mi\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value < _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def add(self, value):\n        \"\"\"Add `value` to sorted list.\"\"\"\n        _load = self._load\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len += 1\n        if _lists:\n            pos, idx = self._loc_right(value)\n            self._fen_update(pos, 1)\n            _list = _lists[pos]\n            _list.insert(idx, value)\n            _list_lens[pos] += 1\n            _mins[pos] = _list[0]\n            if _load + _load < len(_list):\n                _lists.insert(pos + 1, _list[_load:])\n                _list_lens.insert(pos + 1, len(_list) - _load)\n                _mins.insert(pos + 1, _list[_load])\n                _list_lens[pos] = _load\n                del _list[_load:]\n                self._rebuild = True\n        else:\n            _lists.append([value])\n            _mins.append(value)\n            _list_lens.append(1)\n            self._rebuild = True\n\n    def discard(self, value):\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_right(value)\n            if idx and _lists[pos][idx - 1] == value:\n                self._delete(pos, idx - 1)\n\n    def remove(self, value):\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\n        _len = self._len\n        self.discard(value)\n        if _len == self._len:\n            raise ValueError('{0!r} not in list'.format(value))\n\n    def pop(self, index=-1):\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        value = self._lists[pos][idx]\n        self._delete(pos, idx)\n        return value\n\n    def bisect_left(self, value):\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_left(value)\n        return self._fen_query(pos) + idx\n\n    def bisect_right(self, value):\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_right(value)\n        return self._fen_query(pos) + idx\n\n    def count(self, value):\n        \"\"\"Return number of ofinansurrences of `value` in the sorted list.\"\"\"\n        return self.bisect_right(value) - self.bisect_left(value)\n\n    def __len__(self):\n        \"\"\"Return the size of the sorted list.\"\"\"\n        return self._len\n\n    def __getitem__(self, index):\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        return self._lists[pos][idx]\n\n    def __delitem__(self, index):\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        self._delete(pos, idx)\n\n    def __contains__(self, value):\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_left(value)\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\n        return False\n\n    def __iter__(self):\n        \"\"\"Return an iterator over the sorted list.\"\"\"\n        return (value for _list in self._lists for value in _list)\n\n    def __reversed__(self):\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\n\n    def __repr__(self):\n        \"\"\"Return string representation of sorted list.\"\"\"\n        return 'SortedList({0})'.format(list(self))\n\n\n# ===============================================================================================\n# some shortcuts\n\nmod = 1000000007\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\ndef pow(A, B, p):\n    res = 1  # Initialize result\n    A = A % p  # Update A if it is more , than or equal to p\n    if (A == 0):\n        return 0\n    while (B > 0):\n        if ((B & 1) == 1):  # If B is odd, multiply, A with result\n            res = (res * A) % p\n\n        B = B >> 1  # B = B/2\n        A = (A * A) % p\n    return res\n\n\nfrom functools import reduce\n\n\ndef numberOfSetBits(n):\n    n = (n & 0x5555555555555555) + ((n & 0xAAAAAAAAAAAAAAAA) >> 1)\n    n = (n & 0x3333333333333333) + ((n & 0xCCCCCCCCCCCCCCCC) >> 2)\n    n = (n & 0x0F0F0F0F0F0F0F0F) + ((n & 0xF0F0F0F0F0F0F0F0) >> 4)\n    n = (n & 0x00FF00FF00FF00FF) + ((n & 0xFF00FF00FF00FF00) >> 8)\n    n = (n & 0x0000FFFF0000FFFF) + ((n & 0xFFFF0000FFFF0000) >> 16)\n    n = (n & 0x00000000FFFFFFFF) + ((n & 0xFFFFFFFF00000000) >> 32)  # This last & isn't strictly necessary.\n    return n\n\n\ndef factors(n):\n    return set(reduce(list.__add__,\n                      ([start, n // start] for start in range(1, int(n ** 0.5) + 1) if n % start == 0)))\n\n\nclass MergeFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n        # self.lista = [[_] for _ in range(n)]\n\n    def find(self, a):\n        to_update = []\n        while a != self.parent[a]:\n            to_update.append(a)\n            a = self.parent[a]\n        for b in to_update:\n            self.parent[b] = a\n        return self.parent[a]\n\n    def merge(self, a, b):\n        a = self.find(a)\n        b = self.find(b)\n        if a == b:\n            return\n        if self.size[a] < self.size[b]:\n            a, b = b, a\n        self.num_sets -= 1\n        self.parent[b] = a\n        self.size[a] += self.size[b]\n        # self.lista[a] += self.lista[b]\n        # self.lista[b] = []\n\n    def set_size(self, a):\n        return self.size[self.find(a)]\n\n    def __len__(self):\n        return self.num_sets\n\n\ndef gcd(a, b):\n    if a == b: return a\n    while b > 0: a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return abs((a // gcd(a, b)) * b)\n\n\ninf = float(\"inf\")\n\n##############Find sum of product of subsets of size k in a array\n\n\n# ar=[0,1,2,3]\n# k=3\n# n=len(ar)-1\n# dp=[0]*(n+1)\n# dp[0]=1\n# for pos in range(1,n+1):\n#     dp[pos]=0\n#     l=max(1,k+pos-n-1)\n#     for j in range(min(pos,k),l-1,-1):\n#         dp[j]=dp[j]+ar[pos]*dp[j-1]\n# print(dp[k])\n\n\n##two pointer method\n\n\n# l=0\n# for r in range(n):\n#     add(r)\n#     while(not ok(l,r)):#l,r included\n#         remove(l)\n#         l+=1\n#     #[l,r] is valid\n#     if(ok()):\n#         do()\n\n\n# #==========================\n\n\n# r=-1\n# for l in range(n):\n#     while (r + 1 < l):\n#         r=l-1\n#         reset state\n#\n#\n#\n#     while(r+1<n and  ok_to_include_r+1()):\n#         add(r)\n#         r+=1\n#     #[l,r) is valid\n#     if(ok()):\n#         do()\n#     remove(l)\n\n\n# #############################\n\n\n# discrete binary search\n# minimise:\n# def search(l,r):\n#     ans=inf\n#     while(l<=r):\n#         mid=(r-l)//2 + l\n#         if(check(mid)):\n#             ans=min(ans,mid)\n#             r=mid-1\n#         else:\n#             l=mid+1\n#\n#     return ans\n\n# maximise:\n# def search(l,r):\n#\n#     ans=-1\n#     while(l<=r):\n#         mid=l+(r-l)//2\n#         if(check(mid)):\n#             ans=max(ans,mid)\n#             l=mid+1\n#         else:\n#             r=mid-1\n#\n#     return ans\n\n\n# =========================================================================================\nfrom collections import defaultdict\n\n\n# #\n# to find factorial and ncr\n# tot = 2005\n# mod = 998244353\n# fac = [1, 1]\n# finv = [1, 1]\n# inv = [0, 1]\n#\n# for start in range(2, tot + 1):\n#     fac.append((fac[-1] * start) % mod)\n#     inv.append(mod - (inv[mod % start] * (mod // start) % mod))\n#     finv.append(finv[-1] * inv[-1] % mod)\n\n\ndef comb(n, r):\n    if (r == 0 or r == n): return 1\n    if n < r:\n        return 0\n    else:\n        return fac[n] * (finv[r] * finv[n - r] % mod) % mod\n\n\n#\n# from functools import lru_cache\n# p=3\n# def ncr_small_mod_p(n,r):\n#     ans=1\n#     while(n>0):\n#         x=n%p\n#         y=r%p\n#         n//=p\n#         r//=p\n#         ans*=comb(x,y)\n#         ans%=p\n#     return ans\n\n\n#\n\ndef inp(): return sys.stdin.readline().rstrip(\"\\r\\n\")  # for fast input\n\n\ndef N():\n    return int(inp())\n\n\ndef out(var): sys.stdout.write(str(var))  # for fast output, always take string\n\n\ndef lis(): return list(map(int, inp().split()))\n\n\ndef stringlis(): return list(map(str, inp().split()))\n\n\ndef sep(): return map(int, inp().split())\n\n\ndef strsep(): return map(str, inp().split())\n\n\ndef fsep(): return map(float, inp().split())\n\n\ndef nextline(): out(\"\\n\")  # as stdout.write always print sring.\n\n\ndef arr1d(n, v):\n    return [v] * n\n\n\ndef arr2d(n, m, v):\n    return [[v] * m for _ in range(n)]\n\n\ndef arr3d(n, m, p, v):\n    return [[[v] * p for _ in range(m)] for sta in range(n)]\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\n# co-ordinate compression\n# ma={s:idx for idx,s in enumerate(sorted(set(l+r)))}\n\n# mxn=100005\n# lrg=[0]*mxn\n# for start in range(2,mxn-3):\n#     if (lrg[start]==0):\n#         for j in range(start,mxn-3,start):\n#             lrg[j]=start\n\ntest_count = 1\n\n\ndef testcase(t):\n    global test_count\n    for p in range(t):\n        global test_count\n        # print(\"Case #{}:\".format(test_count), end=\" \")\n        solve()\n        test_count += 1\n\n\ndef solve():\n    n,m=sep()\n    ar=[inp() for _ in range(n)]\n    r=set()\n    w=set()\n    for i in range(n):\n        for j in range(m):\n            if(ar[i][j]==\"R\"):\n                r.add((i+j)%2)\n            if(ar[i][j]==\"W\"):\n                w.add((i+j)%2)\n    inter=r.intersection(w)\n    if(inter):\n        NO()\n        return\n    if(len(r)>=2 or len(w)>=2):\n        NO()\n        return\n    if(r):\n        r=list(r)\n        YES()\n        for i in range(n):\n            for j in range(m):\n                if((i+j)%2==r[0]):\n                    print(\"R\",end=\"\")\n                else:\n                    print(\"W\",end=\"\")\n            print()\n        return\n    if(w):\n        w = list(w)\n        YES()\n        for i in range(n):\n            for j in range(m):\n                if ((i + j) % 2 == w[0]):\n                    print(\"W\", end=\"\")\n                else:\n                    print(\"R\", end=\"\")\n            print()\n        return\n\n    r.add(0)\n    r = list(r)\n    YES()\n    for i in range(n):\n        for j in range(m):\n            if ((i + j) % 2 == r[0]):\n                print(\"R\", end=\"\")\n            else:\n                print(\"W\", end=\"\")\n        print()\n    return\n\n\n\n\n\n\n#solve()\ntestcase(N())\n\n\n\n",
        "correct": true,
        "task_id": "0626",
        "depth": 2
    },
    {
        "description": "The Little Elephant very much loves sums on intervals.\n\nThis time he has a pair of integers l and r (l \u2264 r). The Little Elephant has to find the number of such integers x (l \u2264 x \u2264 r), that the first digit of integer x equals the last one (in decimal notation). For example, such numbers as 101, 477474 or 9 will be included in the answer and 47, 253 or 1020 will not.\n\nHelp him and count the number of described numbers x for a given pair l and r.\n\nInput\n\nThe single line contains a pair of integers l and r (1 \u2264 l \u2264 r \u2264 1018) \u2014 the boundaries of the interval.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier.\n\nOutput\n\nOn a single line print a single integer \u2014 the answer to the problem.\n\nExamples\n\nInput\n\n2 47\n\n\nOutput\n\n12\n\n\nInput\n\n47 1024\n\n\nOutput\n\n98\n\nNote\n\nIn the first sample the answer includes integers 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44. ",
        "task_name": "204_A. Little Elephant and Interval",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def sol():\n    lower, upper = map(int, raw_input().split())\n    res = 0\n    for val in range(1, 10):\n        if lower <= val <= upper: res+=1 \n    for length in range(2, 19):\n        for startend in range(1, 10):\n            alreadyval = startend * pow(10, length - 1) + (0 if length == 1 else startend)\n            smallestpos = max(0, (lower - alreadyval + 9) / 10)\n            largestpos = min(pow(10, length - 2) - 1, (upper - alreadyval) / 10)\n            res += max(0, largestpos - smallestpos + 1)\n    print(res)\nsol()",
        "correct": true,
        "task_id": "0628",
        "depth": 2
    },
    {
        "description": "Little Petya likes points a lot. Recently his mom has presented him n points lying on the line OX. Now Petya is wondering in how many ways he can choose three distinct points so that the distance between the two farthest of them doesn't exceed d.\n\nNote that the order of the points inside the group of three chosen points doesn't matter.\n\nInput\n\nThe first line contains two integers: n and d (1 \u2264 n \u2264 105; 1 \u2264 d \u2264 109). The next line contains n integers x1, x2, ..., xn, their absolute value doesn't exceed 109 \u2014 the x-coordinates of the points that Petya has got.\n\nIt is guaranteed that the coordinates of the points in the input strictly increase.\n\nOutput\n\nPrint a single integer \u2014 the number of groups of three points, where the distance between two farthest points doesn't exceed d.\n\nPlease do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nExamples\n\nInput\n\n4 3\n1 2 3 4\n\n\nOutput\n\n4\n\n\nInput\n\n4 2\n-3 -2 -1 0\n\n\nOutput\n\n2\n\n\nInput\n\n5 19\n1 10 20 30 50\n\n\nOutput\n\n1\n\nNote\n\nIn the first sample any group of three points meets our conditions.\n\nIn the seconds sample only 2 groups of three points meet our conditions: {-3, -2, -1} and {-2, -1, 0}.\n\nIn the third sample only one group does: {1, 10, 20}.",
        "task_name": "252_C. Points on Line",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# ------------------------------------------------\n# -- Codeforces #252 - Problem C (Points on Line)\n# -- http://codeforces.com/contest/252/problem/C\n# -- Author: James Lawson <mail@jameslawson.io>\n# ------------------------------------------------\nfrom sys import stdin\nfrom bisect import bisect_left\n\n# -- O(nlgn)\ndef main(xs, d):\n  total = 0\n  start, count = 0, 1\n  for i in range(1, len(xs)):\n    if abs(xs[i] - xs[start]) <= d:\n      # -- xs[i] is less than d distance from \"start\"\n      #    so add it to the set\n      count += 1\n    else:\n      # -- xs[i] is more than d distance from \"start\"\n      #    so break apart the set, removing elements that\n      #    are too far away from xs[i]\n      #    before breaking, we'll add C(count, 3) to the total\n      #    where count is size of the set\n      new_start = bisect_left(xs, xs[i] - d, start, i)\n      overlap = (i - 1) - new_start + 1\n      total += (count * (count - 1) * (count - 2)) / 6\n      if overlap > 0:\n        total -= (overlap * (overlap - 1) * (overlap - 2)) / 6\n      start = new_start\n      count = i - new_start + 1\n  total += (count * (count - 1) * (count - 2)) / 6\n  return total\n\nif __name__ == \"__main__\":\n  n, d = map(int, stdin.readline().strip('\\n').split(' '))\n  xs = map(int, stdin.readline().strip('\\n').split(' '))\n  result = main(xs, d)\n  print(result)\n",
        "correct": true,
        "task_id": "0629",
        "depth": 1
    },
    {
        "description": "The winner of the card game popular in Berland \"Berlogging\" is determined according to the following rules. If at the end of the game there is only one player with the maximum number of points, he is the winner. The situation becomes more difficult if the number of such players is more than one. During each round a player gains or loses a particular number of points. In the course of the game the number of points is registered in the line \"name score\", where name is a player's name, and score is the number of points gained in this round, which is an integer number. If score is negative, this means that the player has lost in the round. So, if two or more players have the maximum number of points (say, it equals to m) at the end of the game, than wins the one of them who scored at least m points first. Initially each player has 0 points. It's guaranteed that at the end of the game at least one player has a positive number of points.\n\nInput\n\nThe first line contains an integer number n (1 \u2264 n \u2264 1000), n is the number of rounds played. Then follow n lines, containing the information about the rounds in \"name score\" format in chronological order, where name is a string of lower-case Latin letters with the length from 1 to 32, and score is an integer number between -1000 and 1000, inclusive.\n\nOutput\n\nPrint the name of the winner.\n\nExamples\n\nInput\n\n3\nmike 3\nandrew 5\nmike 2\n\n\nOutput\n\nandrew\n\n\nInput\n\n3\nandrew 3\nandrew 2\nmike 5\n\n\nOutput\n\nandrew",
        "task_name": "2_A. Winner",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport io\nimport os\nimport sys\nfrom collections import defaultdict\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from cStringIO import StringIO\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    from io import BytesIO as StringIO\n\nsys.stdout, stream = io.IOBase(), StringIO()\nsys.stdout.flush = lambda: os.write(1, stream.getvalue()) and not stream.truncate(0) and stream.seek(0)\nsys.stdout.write = stream.write if sys.version_info[0] < 3 else lambda s: stream.write(s.encode())\n\ninput, flush = sys.stdin.readline, sys.stdout.flush\ninput = StringIO(os.read(0, os.fstat(0).st_size)).readline\n\n\ndef main():\n    n = int(input())\n    rounds = [input().split() for _ in range(n)]\n    rounds = [(name, int(score)) for name, score in rounds]\n\n    final_scores = defaultdict(int)\n    for name, score in rounds:\n        final_scores[name] += score\n\n    m = max(final_scores.values())\n    winner_candidates = {player for player, score in final_scores.items() if score == m}\n\n    curr_scores = defaultdict(int)\n    for name, score in rounds:\n        curr_scores[name] += score\n        if (curr_scores[name] >= m) and (name in winner_candidates):\n            print(name)\n            break\n\n\nif __name__ == '__main__':\n    main()\n",
        "correct": true,
        "task_id": "0630",
        "depth": 1
    },
    {
        "description": "You are given n rectangles. The corners of rectangles have integer coordinates and their edges are parallel to the Ox and Oy axes. The rectangles may touch each other, but they do not overlap (that is, there are no points that belong to the interior of more than one rectangle). \n\nYour task is to determine if the rectangles form a square. In other words, determine if the set of points inside or on the border of at least one rectangle is precisely equal to the set of points inside or on the border of some square.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 5). Next n lines contain four integers each, describing a single rectangle: x1, y1, x2, y2 (0 \u2264 x1 < x2 \u2264 31400, 0 \u2264 y1 < y2 \u2264 31400) \u2014 x1 and x2 are x-coordinates of the left and right edges of the rectangle, and y1 and y2 are y-coordinates of the bottom and top edges of the rectangle. \n\nNo two rectangles overlap (that is, there are no points that belong to the interior of more than one rectangle).\n\nOutput\n\nIn a single line print \"YES\", if the given rectangles form a square, or \"NO\" otherwise.\n\nExamples\n\nInput\n\n5\n0 0 2 3\n0 3 3 5\n2 0 5 2\n3 2 5 5\n2 2 3 3\n\n\nOutput\n\nYES\n\n\nInput\n\n4\n0 0 2 3\n0 3 3 5\n2 0 5 2\n3 2 5 5\n\n\nOutput\n\nNO",
        "task_name": "325_A. Square and Rectangles",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\n\narea = 0\nfor i in range(0,n):\n    x1,y1,x2,y2 = map(int,raw_input().split())\n\n    if (i == 0):\n        minx = x1\n        miny = y1\n        maxx = x2\n        maxy = y2\n    else:\n        minx = min(minx,x1)\n        miny = min(miny,y1)\n        maxx = max(maxx,x2)\n        maxy = max(maxy,y2)\n\n    area += (x2-x1)*(y2-y1)\n    \n\ndx = maxx - minx\ndy = maxy - miny\n\nif (dx != dy or dx*dy != area):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n\n\n    \n    \n",
        "correct": true,
        "task_id": "0631",
        "depth": 1
    },
    {
        "description": "You are given a rooted tree with n vertices. In each leaf vertex there's a single integer \u2014 the number of apples in this vertex. \n\nThe weight of a subtree is the sum of all numbers in this subtree leaves. For instance, the weight of a subtree that corresponds to some leaf is the number written in the leaf.\n\nA tree is balanced if for every vertex v of the tree all its subtrees, corresponding to the children of vertex v, are of equal weight. \n\nCount the minimum number of apples that you need to remove from the tree (specifically, from some of its leaves) in order to make the tree balanced. Notice that you can always achieve the goal by just removing all apples.\n\nInput\n\nThe first line contains integer n (2 \u2264 n \u2264 105), showing the number of vertices in the tree. The next line contains n integers a1, a2, ..., an (0 \u2264 ai \u2264 108), ai is the number of apples in the vertex number i. The number of apples in non-leaf vertices is guaranteed to be zero. \n\nThen follow n - 1 lines, describing the tree edges. Each line contains a pair of integers xi, yi (1 \u2264 xi, yi \u2264 n, xi \u2260 yi) \u2014 the vertices connected by an edge. \n\nThe vertices are indexed from 1 to n. Vertex 1 is the root.\n\nOutput\n\nPrint a single integer \u2014 the minimum number of apples to remove in order to make the tree balanced.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the sin, cout streams cin, cout or the %I64d specifier.\n\nExamples\n\nInput\n\n6\n0 0 12 13 5 6\n1 2\n1 3\n1 4\n2 5\n2 6\n\n\nOutput\n\n6",
        "task_name": "348_B. Apple Tree",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/python\n\nimport sys\nimport math \nimport re\nfrom datetime import datetime\n\nsys.setrecursionlimit(20000)\nstartTime = datetime.now()\n\ndef readn(n):\n    return [raw_input().strip() for i in range(n)]\ndef read():\n    return raw_input().strip()\ndef readints():\n    return map(int, read().split())\ndef readint():\n    return readints()[0]\ndef wl(o):\n    print(o)\n\ndef GCD(a,b):\n    while b!=0:\n        a %= b;\n        a,b = b,a\n    return a\n    \ndef LCM(a,b):\n    return (a / GCD(a,b)) * b;\n    \ndef SetParent(node, parent):\n    ii = -1\n    for i in range(len(node[2])):\n        \n        if node[2][i] != parent:\n            SetParent(node[2][i], node)\n        else:\n            ii = i\n    if ii >= 0: node[2].pop(ii)\n        \ndef Calc(node):\n    if node[1] >= 0: return\n    \n    lcm = 1\n    max = -1\n    for child in node[2]:\n        Calc(child)\n        lcm = LCM(lcm, child[0])\n    for child in node[2]:\n        t = (child[1] / lcm) * lcm\n        if max < 0 or max > t:\n            max = t\n    node[0] = lcm\n    node[1] = max * len(node[2])\n    \nn=readint()\nsum = 0\nar = [0] * n\nxx = readints()\nfor i in range(len(xx)):\n    x = xx[i]\n    if x == 0:\n        ar[i] = [1, -1, []]\n    else:\n        ar[i] = [1, x, []]\n    sum += x\nfor i in range(n-1):\n    x, y = readints()\n    x -= 1\n    y -= 1\n    ar[x][2].append(ar[y])\n    ar[y][2].append(ar[x])\n    \nSetParent(ar[0], [])\nCalc(ar[0])\nwl(sum - ar[0][1])\n\n\n#print(datetime.now()-startTime)",
        "correct": false,
        "task_id": "0632",
        "depth": 1
    },
    {
        "description": "Polycarpus loves hamburgers very much. He especially adores the hamburgers he makes with his own hands. Polycarpus thinks that there are only three decent ingredients to make hamburgers from: a bread, sausage and cheese. He writes down the recipe of his favorite \"Le Hamburger de Polycarpus\" as a string of letters 'B' (bread), 'S' (sausage) \u0438 'C' (cheese). The ingredients in the recipe go from bottom to top, for example, recipe \"\u0412SCBS\" represents the hamburger where the ingredients go from bottom to top as bread, sausage, cheese, bread and sausage again.\n\nPolycarpus has nb pieces of bread, ns pieces of sausage and nc pieces of cheese in the kitchen. Besides, the shop nearby has all three ingredients, the prices are pb rubles for a piece of bread, ps for a piece of sausage and pc for a piece of cheese.\n\nPolycarpus has r rubles and he is ready to shop on them. What maximum number of hamburgers can he cook? You can assume that Polycarpus cannot break or slice any of the pieces of bread, sausage or cheese. Besides, the shop has an unlimited number of pieces of each ingredient.\n\nInput\n\nThe first line of the input contains a non-empty string that describes the recipe of \"Le Hamburger de Polycarpus\". The length of the string doesn't exceed 100, the string contains only letters 'B' (uppercase English B), 'S' (uppercase English S) and 'C' (uppercase English C).\n\nThe second line contains three integers nb, ns, nc (1 \u2264 nb, ns, nc \u2264 100) \u2014 the number of the pieces of bread, sausage and cheese on Polycarpus' kitchen. The third line contains three integers pb, ps, pc (1 \u2264 pb, ps, pc \u2264 100) \u2014 the price of one piece of bread, sausage and cheese in the shop. Finally, the fourth line contains integer r (1 \u2264 r \u2264 1012) \u2014 the number of rubles Polycarpus has.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nOutput\n\nPrint the maximum number of hamburgers Polycarpus can make. If he can't make any hamburger, print 0.\n\nExamples\n\nInput\n\nBBBSSC\n6 4 1\n1 2 3\n4\n\n\nOutput\n\n2\n\n\nInput\n\nBBC\n1 10 1\n1 10 1\n21\n\n\nOutput\n\n7\n\n\nInput\n\nBSC\n1 1 1\n1 1 3\n1000000000000\n\n\nOutput\n\n200000000001",
        "task_name": "371_C. Hamburgers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"Template for Python Competitive Programmers prepared by Mayank Chaudhary \"\"\"\n\n#to use the print and division function of Python3\nfrom __future__ import division, print_function\n\n\"\"\"value of mod\"\"\"\nMOD = 998244353\nmod = 10**9 + 7\n\n\"\"\"use resource\"\"\"\n# import resource\n# resource.setrlimit(resource.RLIMIT_STACK, [0x100000000, resource.RLIM_INFINITY])\n\n\"\"\"for factorial\"\"\"\n\n# def prepare_factorial():\n#     fact = [1]\n#     for i in range(1, 1000005):\n#         fact.append((fact[-1] * i) % mod)\n#     ifact = [0] * 1000005\n#     ifact[1000004] = pow(fact[1000004], mod - 2, mod)\n#     for i in range(1000004, 0, -1):\n#         ifact[i - 1] = (i * ifact[i]) % mod\n#\n#     return fact, ifact\n\n\"\"\"uncomment next 4 lines while doing recursion based question\"\"\"\n# import threading\n# threading.stack_size(2**27)\nimport sys\n# sys.setrecursionlimit(30000)\n\n\n\"\"\"uncomment modules according to your need\"\"\"\n# from bisect import bisect_left, bisect_right, insort\n# import itertools\n# from math import floor, ceil, sqrt, degrees, atan, pi\n# from heapq import heappop, heapify, heappush\n# from random import randint as rn\n# from Queue import Queue as Q\nfrom collections import Counter, defaultdict, deque\n\n'''\ndef modinv(n, p):\n    return pow(n, p - 2, p)\n'''\n\n\n# def ncr(n, r,  fact, ifact):  # for using this uncomment the lines calculating fact and ifact\n#     t = (fact[n] * (ifact[r]*ifact[n-r]) % mod)% mod\n#     return t\n\n\n\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef input(): return sys.stdin.readline().strip()\n\n\n# def GCD(x, y):\n#     while (y):\n#         x, y = y, x % y\n#     return x\n#\n# def lcm(x, y):\n#     return (x*y)//(GCD(x, y))\n#\n# def get_xor(n):\n#     return [n,1,n+1,0][n%4]\n\n\"\"\"*******************************************************\"\"\"\n\ndef main():\n\n    string = input()\n    B = S = C = 0\n    for i in string:\n        if i=='B': B += 1\n        elif i=='S': S += 1\n        else: C += 1\n\n    nb, ns, nc = get_ints()\n    pb, ps, pc = get_ints()\n\n    paisa = int(input())                    # itna paisa hai hmare pass\n\n    low, high = 0, 10**15\n    ans = 0\n    while low<=high:\n\n        mid = low + ((high-low)>>1)  # itne burger bnaane ki kosis krte hai\n        # print(mid)\n        required = max(B*mid-nb, 0)*pb + max(S*mid-ns, 0)*ps + max(C*mid-nc, 0)*pc\n\n        if paisa>=required:\n            low = mid+1\n            ans = mid\n        else:\n            high = mid-1\n\n    print(ans)\n\n\n\"\"\" -------- Python 2 and 3 footer by Pajenegod and c1729 ---------\"\"\"\n\npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n    range = xrange\n\nimport os, sys\nfrom io import IOBase, BytesIO\n\nBUFSIZE = 8192\n\n\nclass FastIO(BytesIO):\n    newlines = 0\n\n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n\n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0, 2), super(FastIO, self).write(s))[0])\n        return s\n\n    def read(self):\n        while self._fill(): pass\n        return super(FastIO, self).read()\n\n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill();\n            self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s: self.buffer.write(s.encode('ascii'))\n            self.read = lambda: self.buffer.read().decode('ascii')\n            self.readline = lambda: self.buffer.readline().decode('ascii')\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n\"\"\" main function\"\"\"\n\nif __name__ == '__main__':\n    main()\n    # threading.Thread(target=main).start()",
        "correct": true,
        "task_id": "0633",
        "depth": 1
    },
    {
        "description": "A TV show called \"Guess a number!\" is gathering popularity. The whole Berland, the old and the young, are watching the show.\n\nThe rules are simple. The host thinks of an integer y and the participants guess it by asking questions to the host. There are four types of acceptable questions:\n\n  * Is it true that y is strictly larger than number x? \n  * Is it true that y is strictly smaller than number x? \n  * Is it true that y is larger than or equal to number x? \n  * Is it true that y is smaller than or equal to number x? \n\n\n\nOn each question the host answers truthfully, \"yes\" or \"no\".\n\nGiven the sequence of questions and answers, find any integer value of y that meets the criteria of all answers. If there isn't such value, print \"Impossible\".\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 10000) \u2014 the number of questions (and answers). Next n lines each contain one question and one answer to it. The format of each line is like that: \"sign x answer\", where the sign is:\n\n  * \">\" (for the first type queries), \n  * \"<\" (for the second type queries), \n  * \">=\" (for the third type queries), \n  * \"<=\" (for the fourth type queries). \n\n\n\nAll values of x are integer and meet the inequation  - 109 \u2264 x \u2264 109. The answer is an English letter \"Y\" (for \"yes\") or \"N\" (for \"no\").\n\nConsequtive elements in lines are separated by a single space.\n\nOutput\n\nPrint any of such integers y, that the answers to all the queries are correct. The printed number y must meet the inequation  - 2\u00b7109 \u2264 y \u2264 2\u00b7109. If there are many answers, print any of them. If such value doesn't exist, print word \"Impossible\" (without the quotes).\n\nExamples\n\nInput\n\n4\n&gt;= 1 Y\n&lt; 3 N\n&lt;= -3 N\n&gt; 55 N\n\n\nOutput\n\n17\n\n\nInput\n\n2\n&gt; 100 Y\n&lt; -100 Y\n\n\nOutput\n\nImpossible",
        "task_name": "416_A. Guess a number!",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nl = sys.stdin.readlines()\nt = []\nfor s in l[1:]:\n    t.append(s.split())\n\nleft = -1 * (2 * 10**9)\nright = 2 * 10**9\nfor c in t:\n    if c[2] == 'N':\n        if(c[0] == '>'):\n            c[0] = '<='\n        elif(c[0] == '<'):\n            c[0] = '>='\n        elif(c[0] == '>='):\n            c[0] = '<'\n        elif(c[0] == '<='):\n            c[0] = '>'\n\n    if(c[0] == '>'):\n        if(int(c[1]) >= left):\n            left = int(c[1])+1\n    elif(c[0] == '<'):\n        if(int(c[1]) <= right):\n            right = int(c[1])-1\n    elif(c[0] == '>='):\n        if(int(c[1]) > left):\n            left = int(c[1])\n    elif(c[0] == '<='):\n        if(int(c[1]) < right):\n            right = int(c[1])\n\n    if(left > right):\n        print('Impossible')\n        sys.exit(0)\n\nprint(left)",
        "correct": true,
        "task_id": "0634",
        "depth": 1
    },
    {
        "description": "Recently, Duff has been practicing weight lifting. As a hard practice, Malek gave her a task. He gave her a sequence of weights. Weight of i-th of them is 2wi pounds. In each step, Duff can lift some of the remaining weights and throw them away. She does this until there's no more weight left. Malek asked her to minimize the number of steps.\n\n<image>\n\nDuff is a competitive programming fan. That's why in each step, she can only lift and throw away a sequence of weights 2a1, ..., 2ak if and only if there exists a non-negative integer x such that 2a1 + 2a2 + ... + 2ak = 2x, i. e. the sum of those numbers is a power of two.\n\nDuff is a competitive programming fan, but not a programmer. That's why she asked for your help. Help her minimize the number of steps. \n\nInput\n\nThe first line of input contains integer n (1 \u2264 n \u2264 106), the number of weights.\n\nThe second line contains n integers w1, ..., wn separated by spaces (0 \u2264 wi \u2264 106 for each 1 \u2264 i \u2264 n), the powers of two forming the weights values.\n\nOutput\n\nPrint the minimum number of steps in a single line.\n\nExamples\n\nInput\n\n5\n1 1 2 3 3\n\n\nOutput\n\n2\n\n\nInput\n\n4\n0 1 2 3\n\n\nOutput\n\n4\n\nNote\n\nIn the first sample case: One optimal way would be to throw away the first three in the first step and the rest in the second step. Also, it's not possible to do it in one step because their sum is not a power of two.\n\nIn the second sample case: The only optimal way is to throw away one weight in each step. It's not possible to do it in less than 4 steps because there's no subset of weights with more than one weight and sum equal to a power of two.",
        "task_name": "587_A. Duff and Weight Lifting",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys,math\ninput=sys.stdin\nwrite=sys.stdout.write\nn=int(input.readline())\ns=input.readline().split()\nA=[int(a) for a in s]\nA.sort()\nA.append(10**12)\ncarry=0\nnum=0\ni=0\nsum=0\nwhile i<n:\n    j=i\n    while A[i]==A[j+1]:\n        j+=1\n    num=j-i+1+carry\n#    print num,carry\n    k=0\n    while num>0 and A[j+1]>k+A[i]:\n        sum+=(num%2)\n        num=(num-(num%2))//2\n        k+=1\n    if num>0:\n        carry=num\n    i=j+1\nwrite(str(sum))\n",
        "correct": false,
        "task_id": "0635",
        "depth": 2
    },
    {
        "description": "In the school computer room there are n servers which are responsible for processing several computing tasks. You know the number of scheduled tasks for each server: there are mi tasks assigned to the i-th server.\n\nIn order to balance the load for each server, you want to reassign some tasks to make the difference between the most loaded server and the least loaded server as small as possible. In other words you want to minimize expression ma - mb, where a is the most loaded server and b is the least loaded one.\n\nIn one second you can reassign a single task. Thus in one second you can choose any pair of servers and move a single task from one server to another.\n\nWrite a program to find the minimum number of seconds needed to balance the load of servers.\n\nInput\n\nThe first line contains positive number n (1 \u2264 n \u2264 105) \u2014 the number of the servers. \n\nThe second line contains the sequence of non-negative integers m1, m2, ..., mn (0 \u2264 mi \u2264 2\u00b7104), where mi is the number of tasks assigned to the i-th server.\n\nOutput\n\nPrint the minimum number of seconds required to balance the load.\n\nExamples\n\nInput\n\n2\n1 6\n\n\nOutput\n\n2\n\n\nInput\n\n7\n10 11 10 11 10 11 11\n\n\nOutput\n\n0\n\n\nInput\n\n5\n1 2 3 4 5\n\n\nOutput\n\n3\n\nNote\n\nIn the first example two seconds are needed. In each second, a single task from server #2 should be moved to server #1. After two seconds there should be 3 tasks on server #1 and 4 tasks on server #2.\n\nIn the second example the load is already balanced.\n\nA possible sequence of task movements for the third example is:\n\n  1. move a task from server #4 to server #1 (the sequence m becomes: 2 2 3 3 5); \n  2. then move task from server #5 to server #1 (the sequence m becomes: 3 2 3 3 4); \n  3. then move task from server #5 to server #2 (the sequence m becomes: 3 3 3 3 3). \n\n\n\nThe above sequence is one of several possible ways to balance the load of servers in three seconds.",
        "task_name": "609_C. Load Balancing",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "if(__name__ == '__main__'):\n\tserversCnt = int(raw_input())\n\ttasks = [int(tmp) for tmp in raw_input().split(' ')]\n\ttotal = sum(tasks)\n\tbalancedTask = total // serversCnt\n\tmore = total % serversCnt\n\tless = total - more\n\ttaskNeedToBalance = 0\n\tfor t in tasks:\n\t\tif(t <= balancedTask):\n\t\t\ttaskNeedToBalance += balancedTask - t\n\t\t\tif(less > 0):\n\t\t\t\tless -= 1\n\t\t\telse:\n\t\t\t\tmore -= 1\n\t\t\t\ttaskNeedToBalance += 1\n\t\telse:\n\t\t\ttaskNeedToBalance += t - balancedTask - 1\n\t\t\tif(more > 0):\n\t\t\t\tmore -= 1\n\t\t\telse:\n\t\t\t\tless -= 1\n\t\t\t\ttaskNeedToBalance += 1\n\tprint(taskNeedToBalance//2)",
        "correct": false,
        "task_id": "0636",
        "depth": 1
    },
    {
        "description": "A little bear Limak plays a game. He has five cards. There is one number written on each card. Each number is a positive integer.\n\nLimak can discard (throw out) some cards. His goal is to minimize the sum of numbers written on remaining (not discarded) cards.\n\nHe is allowed to at most once discard two or three cards with the same number. Of course, he won't discard cards if it's impossible to choose two or three cards with the same number.\n\nGiven five numbers written on cards, cay you find the minimum sum of numbers on remaining cards?\n\nInput\n\nThe only line of the input contains five integers t1, t2, t3, t4 and t5 (1 \u2264 ti \u2264 100) \u2014 numbers written on cards.\n\nOutput\n\nPrint the minimum possible sum of numbers written on remaining cards.\n\nExamples\n\nInput\n\n7 3 7 3 20\n\n\nOutput\n\n26\n\n\nInput\n\n7 9 3 1 8\n\n\nOutput\n\n28\n\n\nInput\n\n10 10 10 10 10\n\n\nOutput\n\n20\n\nNote\n\nIn the first sample, Limak has cards with numbers 7, 3, 7, 3 and 20. Limak can do one of the following.\n\n  * Do nothing and the sum would be 7 + 3 + 7 + 3 + 20 = 40. \n  * Remove two cards with a number 7. The remaining sum would be 3 + 3 + 20 = 26. \n  * Remove two cards with a number 3. The remaining sum would be 7 + 7 + 20 = 34. \n\n\n\nYou are asked to minimize the sum so the answer is 26.\n\nIn the second sample, it's impossible to find two or three cards with the same number. Hence, Limak does nothing and the sum is 7 + 9 + 1 + 3 + 8 = 28.\n\nIn the third sample, all cards have the same number. It's optimal to discard any three cards. The sum of two remaining numbers is 10 + 10 = 20.",
        "task_name": "680_A. Bear and Five Cards",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# -*- coding: utf-8 -*-\nfrom collections import Counter\n\ncards = map(int, raw_input().split())\nc = Counter(cards)\n\nc = c.most_common(5)\nif len(c) == 5:\n    print(sum(cards))\n    exit(0)\n\n_max = 0\nfor card, _count in c:\n    if _count in [2, 3]:\n        _max = max(_max, card * min(_count, 3))\n\nprint(sum(cards) - _max)\n",
        "correct": false,
        "task_id": "0638",
        "depth": 1
    },
    {
        "description": "One quite ordinary day Valera went to school (there's nowhere else he should go on a week day). In a maths lesson his favorite teacher Ms. Evans told students about divisors. Despite the fact that Valera loved math, he didn't find this particular topic interesting. Even more, it seemed so boring that he fell asleep in the middle of a lesson. And only a loud ringing of a school bell could interrupt his sweet dream.\n\nOf course, the valuable material and the teacher's explanations were lost. However, Valera will one way or another have to do the homework. As he does not know the new material absolutely, he cannot do the job himself. That's why he asked you to help. You're his best friend after all, you just cannot refuse to help.\n\nValera's home task has only one problem, which, though formulated in a very simple way, has not a trivial solution. Its statement looks as follows: if we consider all positive integers in the interval [a;b] then it is required to count the amount of such numbers in this interval that their smallest divisor will be a certain integer k (you do not have to consider divisor equal to one). In other words, you should count the amount of such numbers from the interval [a;b], that are not divisible by any number between 2 and k - 1 and yet are divisible by k. \n\nInput\n\nThe first and only line contains three positive integers a, b, k (1 \u2264 a \u2264 b \u2264 2\u00b7109, 2 \u2264 k \u2264 2\u00b7109). \n\nOutput\n\nPrint on a single line the answer to the given problem. \n\nExamples\n\nInput\n\n1 10 2\n\n\nOutput\n\n5\n\n\nInput\n\n12 23 3\n\n\nOutput\n\n2\n\n\nInput\n\n6 19 5\n\n\nOutput\n\n0\n\nNote\n\nComments to the samples from the statement: \n\nIn the first sample the answer is numbers 2, 4, 6, 8, 10.\n\nIn the second one \u2014 15, 21\n\nIn the third one there are no such numbers.",
        "task_name": "83_D. Numbers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def isPrime(x):\n    i = 2\n    while i * i <= x:\n        if x % i == 0: return 0\n        i += 1\n    return 1\ndef solve(x, k):\n    def dfs(dep, n, p, x):\n        if (dep == len(v) or v[dep] * p > x):\n            return - (x // p) * (n % 2 * 2 - 1)\n        return dfs(dep + 1, n, p, x) + dfs(dep + 1, n + 1, v[dep] * p, x)\n    if k <= 5000:\n        v = [i for i in range(2, k)]\n        return dfs(0, 0, 1, x // k)\n    else:\n        r, last, i = 0, x // k, i\n        v = [0] * (last + 1)\n        while i * i <= last:\n            if (v[i] == 0):\n                c = i\n                while c <= last:\n                    if (v[c] == 0): v[c] = i\n                    c += i\n            i += 1\n        for i in range(1, last + 1):\n            r += i == 1 or (v[i] == 0 and i >= k) or v[i] >= k\n        return r\na,b,k = raw_input().split(\" \")\nk = int(k)\nif not isPrime(k):\n    print(0)\nelse:\n    print(solve(int(b), k) - solve(int(a) - 1, k))\n",
        "correct": false,
        "task_id": "0639",
        "depth": 2
    },
    {
        "description": "The last stage of Football World Cup is played using the play-off system.\n\nThere are n teams left in this stage, they are enumerated from 1 to n. Several rounds are held, in each round the remaining teams are sorted in the order of their ids, then the first in this order plays with the second, the third \u2014 with the fourth, the fifth \u2014 with the sixth, and so on. It is guaranteed that in each round there is even number of teams. The winner of each game advances to the next round, the loser is eliminated from the tournament, there are no draws. In the last round there is the only game with two remaining teams: the round is called the Final, the winner is called the champion, and the tournament is over.\n\nArkady wants his two favorite teams to play in the Final. Unfortunately, the team ids are already determined, and it may happen that it is impossible for teams to meet in the Final, because they are to meet in some earlier stage, if they are strong enough. Determine, in which round the teams with ids a and b can meet.\n\nInput\n\nThe only line contains three integers n, a and b (2 \u2264 n \u2264 256, 1 \u2264 a, b \u2264 n) \u2014 the total number of teams, and the ids of the teams that Arkady is interested in. \n\nIt is guaranteed that n is such that in each round an even number of team advance, and that a and b are not equal.\n\nOutput\n\nIn the only line print \"Final!\" (without quotes), if teams a and b can meet in the Final.\n\nOtherwise, print a single integer \u2014 the number of the round in which teams a and b can meet. The round are enumerated from 1.\n\nExamples\n\nInput\n\n4 1 2\n\n\nOutput\n\n1\n\n\nInput\n\n8 2 6\n\n\nOutput\n\nFinal!\n\n\nInput\n\n8 7 5\n\n\nOutput\n\n2\n\nNote\n\nIn the first example teams 1 and 2 meet in the first round.\n\nIn the second example teams 2 and 6 can only meet in the third round, which is the Final, if they win all their opponents in earlier rounds.\n\nIn the third example the teams with ids 7 and 5 can meet in the second round, if they win their opponents in the first round.",
        "task_name": "931_B. World Cup",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#To take input\n# str = raw_input()\n# R = float(str.split()[0])\n# real = int(str.split()[1])\n# R, x1, y1, x2, y2 = map(int, raw_input().split(' '))\n# print \"{} {} {}\".format(x3, y3, r)\n\nn, a, b = map(int, raw_input().split(' '))\ni=0\nif((a>n/2 and b<=n/2) or (a<=n/2 and b>n/2)):\n    print(\"Final!\")\n    exit(0)\n\nwhile(a!=b):\n    i += 1\n    a = (a+1)/2\n    b = (b+1)/2\n\nprint(i)\n",
        "correct": true,
        "task_id": "0641",
        "depth": 1
    },
    {
        "description": "You are given n switches and m lamps. The i-th switch turns on some subset of the lamps. This information is given as the matrix a consisting of n rows and m columns where ai, j = 1 if the i-th switch turns on the j-th lamp and ai, j = 0 if the i-th switch is not connected to the j-th lamp.\n\nInitially all m lamps are turned off.\n\nSwitches change state only from \"off\" to \"on\". It means that if you press two or more switches connected to the same lamp then the lamp will be turned on after any of this switches is pressed and will remain its state even if any switch connected to this lamp is pressed afterwards.\n\nIt is guaranteed that if you push all n switches then all m lamps will be turned on.\n\nYour think that you have too many switches and you would like to ignore one of them. \n\nYour task is to say if there exists such a switch that if you will ignore (not use) it but press all the other n - 1 switches then all the m lamps will be turned on.\n\nInput\n\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 2000) \u2014 the number of the switches and the number of the lamps.\n\nThe following n lines contain m characters each. The character ai, j is equal to '1' if the i-th switch turns on the j-th lamp and '0' otherwise.\n\nIt is guaranteed that if you press all n switches all m lamps will be turned on.\n\nOutput\n\nPrint \"YES\" if there is a switch that if you will ignore it and press all the other n - 1 switches then all m lamps will be turned on. Print \"NO\" if there is no such switch.\n\nExamples\n\nInput\n\n4 5\n10101\n01000\n00111\n10000\n\n\nOutput\n\nYES\n\n\nInput\n\n4 5\n10100\n01000\n00110\n00101\n\n\nOutput\n\nNO",
        "task_name": "985_B. Switches and Lamps",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n# Author : raj1307 - Raj Singh\n# Date   : 09.04.2020\n\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef msi(): return map(str,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial,pi\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n#from itertools import permutations\n#Copy 2D list  m = [x[:] for x in mark] .. Avoid Using Deepcopy\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\ndef ncr(n,r): return factorial(n)//(factorial(r)*factorial(n-r))\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n\ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\n\n\n\n\n\ndef main():\n    \n\n    \n    #for _ in range(ii()):\n\n\n    n,m=mi()\n    l=[]\n    f=[0]*m\n    for i in range(n):\n        l.append(si())\n\n\n    for i in range(n):\n        for j in range(m):\n\n            f[j]+=int(l[i][j])\n    ans=0\n\n    for i in range(n):\n        ff=1\n        \n        for j in range(m):\n\n            if f[j]==1 and l[i][j]=='1':\n                ff=0\n                break\n\n\n        if ff==1:\n            #print(i,f)\n            ans=1\n            break\n\n\n    if ans:\n        print('YES')\n    else:\n        print('NO')\n\n\n\n\n\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# region fastio \n# template taken from https://github.com/cheran-senthil/PyRival/blob/master/templates/template.py\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    #read()\n    main()\n    #dmain()\n\n# Comment Read()\n",
        "correct": true,
        "task_id": "0642",
        "depth": 2
    },
    {
        "description": "Takahashi has N days of summer vacation.\n\nHis teacher gave him M summer assignments. It will take A_i days for him to do the i-th assignment.\n\nHe cannot do multiple assignments on the same day, or hang out on a day he does an assignment.\n\nWhat is the maximum number of days Takahashi can hang out during the vacation if he finishes all the assignments during this vacation?\n\nIf Takahashi cannot finish all the assignments during the vacation, print `-1` instead.\n\nConstraints\n\n* 1 \\leq N \\leq 10^6\n* 1 \\leq M \\leq 10^4\n* 1 \\leq A_i \\leq 10^4\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 ... A_M\n\n\nOutput\n\nPrint the maximum number of days Takahashi can hang out during the vacation, or `-1`.\n\nExamples\n\nInput\n\n41 2\n5 6\n\n\nOutput\n\n30\n\n\nInput\n\n10 2\n5 6\n\n\nOutput\n\n-1\n\n\nInput\n\n11 2\n5 6\n\n\nOutput\n\n0\n\n\nInput\n\n314 15\n9 26 5 35 8 9 79 3 23 8 46 2 6 43 3\n\n\nOutput\n\n9",
        "task_name": "p02706 AtCoder Beginner Contest 163 - Homework",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"\n// Author : snape_here - Susanta Mukherjee\n     \n \"\"\"\n \nfrom __future__ import division, print_function\n \nimport os,sys\nfrom io import BytesIO, IOBase\n \nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n \n \ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().split())\ndef li(): return list(mi())\n \n \ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n \ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\nmod=1000000007\n\nimport math\n\nimport bisect\n\nabc=\"abcdefghijklmnopqrstuvwxyz\"\n\ndef main():\n\n    n,m=mi()\n    a=li()\n    s=sum(a)\n    if s>n:\n        print(-1)\n    else:\n        print(n-sum(a))\n\n        \n# region fastio\n\n \nBUFSIZE = 8192\n \n \nclass FastIO(IOBase):\n    newlines = 0\n \n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n \n \nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n \ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n \n# endregion\n \n \nif __name__ == \"__main__\":\n    #read()\n    main()",
        "correct": true,
        "task_id": "0643",
        "depth": 1
    },
    {
        "description": "There are N empty boxes arranged in a row from left to right. The integer i is written on the i-th box from the left (1 \\leq i \\leq N).\n\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\n\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\n* For every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\n\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 2 \\times 10^5\n* a_i is 0 or 1.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N\n\n\nOutput\n\nIf a good set of choices does not exist, print `-1`.\n\nIf a good set of choices exists, print one such set of choices in the following format:\n\n\nM\nb_1 b_2 ... b_M\n\n\nwhere M denotes the number of boxes that will contain a ball, and b_1,\\ b_2,\\ ...,\\ b_M are the integers written on these boxes, in any order.\n\nExamples\n\nInput\n\n3\n1 0 0\n\n\nOutput\n\n1\n1\n\n\nInput\n\n5\n0 0 0 0 0\n\n\nOutput\n\n0",
        "task_name": "p02972 AtCoder Beginner Contest 134 - Preparing Boxes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from collections import *\nimport sys\ninp = raw_input\n\ndef err(s):\n    sys.stderr.write('{}\\n'.format(s))\n\ndef ni():\n    return int(inp())\n\ndef nl():\n    return [int(_) for _ in inp().split()]\n\nN = ni()\nA = nl()\n\nout = [0]*N\nfail = False\nB = []\nfor i in range(N-1, -1, -1):\n    j = i + 1\n    S = 0\n    for k in range(i, N, j):\n        S += out[k]\n    if S%2 != A[i]:\n        out[i] = 1\n        B.append(j)\nprint(len(B))\nif len(B):\n    print(' '.join(map(str, B)))\n\n",
        "correct": true,
        "task_id": "0645",
        "depth": 2
    },
    {
        "description": "There are N islands and M bridges.\n\nThe i-th bridge connects the A_i-th and B_i-th islands bidirectionally.\n\nInitially, we can travel between any two islands using some of these bridges.\n\nHowever, the results of a survey show that these bridges will all collapse because of aging, in the order from the first bridge to the M-th bridge.\n\nLet the inconvenience be the number of pairs of islands (a, b) (a < b) such that we are no longer able to travel between the a-th and b-th islands using some of the bridges remaining.\n\nFor each i (1 \\leq i \\leq M), find the inconvenience just after the i-th bridge collapses.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* 1 \\leq A_i < B_i \\leq N\n* All pairs (A_i, B_i) are distinct.\n* The inconvenience is initially 0.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\nA_2 B_2\n\\vdots\nA_M B_M\n\n\nOutput\n\nIn the order i = 1, 2, ..., M, print the inconvenience just after the i-th bridge collapses. Note that the answer may not fit into a 32-bit integer type.\n\nExamples\n\nInput\n\n4 5\n1 2\n3 4\n1 3\n2 3\n1 4\n\n\nOutput\n\n0\n0\n4\n5\n6\n\n\nInput\n\n6 5\n2 3\n1 2\n5 6\n3 4\n4 5\n\n\nOutput\n\n8\n9\n12\n14\n15\n\n\nInput\n\n2 1\n1 2\n\n\nOutput\n\n1",
        "task_name": "p03108 AtCoder Beginner Contest 120 - Decayed Bridges",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, m = map(int, raw_input().split())\nrev_ans = []\npar = {i: i for i in range(1, n + 1)}\nsize = {i: 1 for i in range(1, n + 1)}\ninput_ab = []\n\n\ndef root(_i):\n    if par[_i] == _i:\n        return _i\n    else:\n        return root(par[_i])\n\n\nfor i in range(m):\n    input_ab.append(raw_input())\n\ncount = (n * (n - 1)) / 2\nfor ab in reversed(input_ab):\n\n    rev_ans.append(count)\n    a, b = map(int, ab.split())\n    ra = root(a)\n    rb = root(b)\n    if ra != rb:\n        sa = size[ra]\n        sb = size[rb]\n        count -= sa * sb\n        par[rb] = ra\n        size[ra] += sb\n\nfor i in reversed(rev_ans):\n    print(i)\n\n",
        "correct": false,
        "task_id": "0646",
        "depth": 1
    },
    {
        "description": "Snuke has decided to use a robot to clean his room.\n\nThere are N pieces of trash on a number line. The i-th piece from the left is at position x_i. We would like to put all of them in a trash bin at position 0.\n\nFor the positions of the pieces of trash, 0 < x_1 < x_2 < ... < x_{N} \\leq 10^{9} holds.\n\nThe robot is initially at position 0. It can freely move left and right along the number line, pick up a piece of trash when it comes to the position of that piece, carry any number of pieces of trash and put them in the trash bin when it comes to position 0. It is not allowed to put pieces of trash anywhere except in the trash bin.\n\nThe robot consumes X points of energy when the robot picks up a piece of trash, or put pieces of trash in the trash bin. (Putting any number of pieces of trash in the trash bin consumes X points of energy.) Also, the robot consumes (k+1)^{2} points of energy to travel by a distance of 1 when the robot is carrying k pieces of trash.\n\nFind the minimum amount of energy required to put all the N pieces of trash in the trash bin.\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^{5}\n* 0 < x_1 < ... < x_N \\leq 10^9\n* 1 \\leq X \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN X\nx_1 x_2 ... x_{N}\n\n\nOutput\n\nPrint the answer.\n\nExamples\n\nInput\n\n2 100\n1 10\n\n\nOutput\n\n355\n\n\nInput\n\n5 1\n1 999999997 999999998 999999999 1000000000\n\n\nOutput\n\n19999999983\n\n\nInput\n\n10 8851025\n38 87 668 3175 22601 65499 90236 790604 4290609 4894746\n\n\nOutput\n\n150710136\n\n\nInput\n\n16 10\n1 7 12 27 52 75 731 13856 395504 534840 1276551 2356789 9384806 19108104 82684732 535447408\n\n\nOutput\n\n3256017715",
        "task_name": "p03255 AtCoder Grand Contest 027 - Garbage Collector",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N, X = map(int, raw_input().split())\nx = map(int, raw_input().split())\n\nsize = len(x)\n\nsum = 0\n\nfor i in range(size-1):\n  sum = sum + (x[size-1-i]-x[size-2-i])*(i+2)*(i+2)+X\n  \nsum = sum + x[size-1] + x[0]*(N+1)*(N+1) + X*2\n\nsum1 = 0\nfor i in range(size):\n  sum1 = sum1 + x[i]*5\n  \nsum1 = sum1 + (N-1)*2*X\n  \nprint(min(sum, sum1))\n  \n  ",
        "correct": false,
        "task_id": "0647",
        "depth": 1
    },
    {
        "description": "Takahashi has N blue cards and M red cards. A string is written on each card. The string written on the i-th blue card is s_i, and the string written on the i-th red card is t_i.\n\nTakahashi will now announce a string, and then check every card. Each time he finds a blue card with the string announced by him, he will earn 1 yen (the currency of Japan); each time he finds a red card with that string, he will lose 1 yen.\n\nHere, we only consider the case where the string announced by Takahashi and the string on the card are exactly the same. For example, if he announces `atcoder`, he will not earn money even if there are blue cards with `atcoderr`, `atcode`, `btcoder`, and so on. (On the other hand, he will not lose money even if there are red cards with such strings, either.)\n\nAt most how much can he earn on balance?\n\nNote that the same string may be written on multiple cards.\n\nConstraints\n\n* N and M are integers.\n* 1 \\leq N, M \\leq 100\n* s_1, s_2, ..., s_N, t_1, t_2, ..., t_M are all strings of lengths between 1 and 10 (inclusive) consisting of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\ns_1\ns_2\n:\ns_N\nM\nt_1\nt_2\n:\nt_M\n\n\nOutput\n\nIf Takahashi can earn at most X yen on balance, print X.\n\nExamples\n\nInput\n\n3\napple\norange\napple\n1\ngrape\n\n\nOutput\n\n2\n\n\nInput\n\n3\napple\norange\napple\n5\napple\napple\napple\napple\napple\n\n\nOutput\n\n1\n\n\nInput\n\n1\nvoldemort\n10\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\n\n\nOutput\n\n0\n\n\nInput\n\n6\nred\nred\nblue\nyellow\nyellow\nred\n5\nred\nred\nyellow\ngreen\nblue\n\n\nOutput\n\n1",
        "task_name": "p03408 AtCoder Beginner Contest 091 - Two Colors Card Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N = input()\nn = []\nfor i in range(N):\n    n.append(raw_input())\nM = input()\nm = []\nfor i in range(M):\n    m.append(raw_input())\n\nresult = [n.count(a) - m.count(a) for a in n]\nmax_ = max(result)\nif max_ < 0:\n    print(0)\nelse:\n    print(max_)",
        "correct": true,
        "task_id": "0648",
        "depth": 1
    },
    {
        "description": "Given an undirected tree, let the distance between vertices u and v be the number of edges on the simple path from u to v. The diameter of a tree is the maximum among the distances between any two vertices. We will call a tree good if and only if its diameter is at most K.\n\nYou are given an undirected tree with N vertices numbered 1 through N. For each i (1\u2266i\u2266N-1), there is an edge connecting vertices A_i and B_i.\n\nYou want to remove zero or more vertices from the tree, so that the resulting tree is good. When a vertex is removed, all incident edges will also be removed. The resulting graph must be connected.\n\nFind the minimum number of vertices that you need to remove in order to produce a good tree.\n\nConstraints\n\n* 2\u2266N\u22662000\n* 1\u2266K\u2266N-1\n* 1\u2266A_i\u2266N, 1\u2266B_i\u2266N\n* The graph defined by A_i and B_i is a tree.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN K\nA_1 B_1\nA_2 B_2\n:\nA_{N-1} B_{N-1}\n\n\nOutput\n\nPrint the minimum number of vertices that you need to remove in order to produce a good tree.\n\nExamples\n\nInput\n\n6 2\n1 2\n3 2\n4 2\n1 6\n5 6\n\n\nOutput\n\n2\n\n\nInput\n\n6 5\n1 2\n3 2\n4 2\n1 6\n5 6\n\n\nOutput\n\n0",
        "task_name": "p04049 AtCoder Grand Contest 001 - Shorten Diameter",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from collections import deque\nimport sys\nsys.setrecursionlimit(10**6)\n\ndef bfs1(c):\n    visited[c]=1\n    q=deque([c])\n    while len(q)>0:\n        p=q.popleft()\n        for i in v[p]:\n            if visited[i]==0:\n                q.append(i)\n                visited[i]=1\n                d[c][i]=d[c][p]+1\n\ndef bfs2(c1,c2):\n    visited[c2]=1\n    bfs1(c1)\n    bfs1(c2)\n\nn,k=map(int,raw_input().split())\nd=[[0]*n for _ in xrange(n)]\nv=[[] for _ in xrange(n)]\ne=[]\nfor i in xrange(n-1):\n    a,b=map(int,raw_input().split())\n    a-=1\n    b-=1\n    v[a].append(b)\n    v[b].append(a)\n    e.append([a,b])\nif k%2==0:\n    min_del=1000000\n    for i in xrange(n):\n        cnt=0\n        visited=[0]*n\n        bfs1(i)\n        for j in xrange(n):\n            if d[i][j]>k/2:\n                cnt+=1\n        min_del=min(min_del,cnt)\n    print(min_del)\nelse:\n    min_del=1000000\n    for i,j in e:\n        cnt=0\n        visited=[0]*n\n        d=[[0]*n for _ in xrange(n)]\n        bfs2(i,j)\n        for l in xrange(n):\n            if d[i][l]>(k-1)/2 or d[j][l]>(k-1)/2:\n                cnt+=1\n        min_del=min(min_del,cnt)\n    print(min_del)",
        "correct": false,
        "task_id": "0649",
        "depth": 2
    },
    {
        "description": "Pavel made a photo of his favourite stars in the sky. His camera takes a photo of all points of the sky that belong to some rectangle with sides parallel to the coordinate axes.\n\nStrictly speaking, it makes a photo of all points with coordinates (x, y), such that x_1 \u2264 x \u2264 x_2 and y_1 \u2264 y \u2264 y_2, where (x_1, y_1) and (x_2, y_2) are coordinates of the left bottom and the right top corners of the rectangle being photographed. The area of this rectangle can be zero.\n\nAfter taking the photo, Pavel wrote down coordinates of n of his favourite stars which appeared in the photo. These points are not necessarily distinct, there can be multiple stars in the same point of the sky.\n\nPavel has lost his camera recently and wants to buy a similar one. Specifically, he wants to know the dimensions of the photo he took earlier. Unfortunately, the photo is also lost. His notes are also of not much help; numbers are written in random order all over his notepad, so it's impossible to tell which numbers specify coordinates of which points.\n\nPavel asked you to help him to determine what are the possible dimensions of the photo according to his notes. As there are multiple possible answers, find the dimensions with the minimal possible area of the rectangle.\n\nInput\n\nThe first line of the input contains an only integer n (1 \u2264 n \u2264 100 000), the number of points in Pavel's records.\n\nThe second line contains 2 \u22c5 n integers a_1, a_2, ..., a_{2 \u22c5 n} (1 \u2264 a_i \u2264 10^9), coordinates, written by Pavel in some order.\n\nOutput\n\nPrint the only integer, the minimal area of the rectangle which could have contained all points from Pavel's records.\n\nExamples\n\nInput\n\n4\n4 1 3 2 3 2 1 3\n\n\nOutput\n\n1\n\nInput\n\n3\n5 8 5 5 7 5\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample stars in Pavel's records can be (1, 3), (1, 3), (2, 3), (2, 4). In this case, the minimal area of the rectangle, which contains all these points is 1 (rectangle with corners at (1, 3) and (2, 4)).",
        "task_name": "1012_A. Photo of The Sky",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\ndef solve(n, a):\n  if n == 1:\n    print(0)\n    return\n  l = len(a)\n  a.sort()\n  least = -1\n  for shift in range(0, l):\n    curr = sub_solve(a, shift)\n    if least == -1 or least > curr:\n      least = curr\n  print(least)\n\ndef sub_solve(a, s):\n  l = len(a)\n  min_x = a[s % l]\n  max_x = a[(l/2 - 1 + s) % l]\n  min_y = a[(l/2 + s) % l]\n  max_y = a[(l-1 + s) % l]\n  return abs(max_x - min_x) * abs(max_y - min_y)\n\nn = sys.stdin.readline()\nn = int(n)\n\nar = sys.stdin.readline()\nar = ar.split()\nar = [int(a) for a in ar if a and len(a) > 0]\n\nsolve(n, ar)\n",
        "correct": false,
        "task_id": "0652",
        "depth": 1
    },
    {
        "description": "On his free time, Chouti likes doing some housework. He has got one new task, paint some bricks in the yard.\n\nThere are n bricks lined in a row on the ground. Chouti has got m paint buckets of different colors at hand, so he painted each brick in one of those m colors.\n\nHaving finished painting all bricks, Chouti was satisfied. He stood back and decided to find something fun with these bricks. After some counting, he found there are k bricks with a color different from the color of the brick on its left (the first brick is not counted, for sure).\n\nSo as usual, he needs your help in counting how many ways could he paint the bricks. Two ways of painting bricks are different if there is at least one brick painted in different colors in these two ways. Because the answer might be quite big, you only need to output the number of ways modulo 998 244 353.\n\nInput\n\nThe first and only line contains three integers n, m and k (1 \u2264 n,m \u2264 2000, 0 \u2264 k \u2264 n-1) \u2014 the number of bricks, the number of colors, and the number of bricks, such that its color differs from the color of brick to the left of it.\n\nOutput\n\nPrint one integer \u2014 the number of ways to color bricks modulo 998 244 353.\n\nExamples\n\nInput\n\n\n3 3 0\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n3 2 1\n\n\nOutput\n\n\n4\n\nNote\n\nIn the first example, since k=0, the color of every brick should be the same, so there will be exactly m=3 ways to color the bricks.\n\nIn the second example, suppose the two colors in the buckets are yellow and lime, the following image shows all 4 possible colorings.\n\n<image>",
        "task_name": "1081_C. Colorful Bricks",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n\"\"\"\nThis file is part of https://github.com/Cheran-Senthil/PyRival.\n\nCopyright 2018 Cheran Senthilkumar all rights reserved,\nCheran Senthilkumar <hello@cheran.io>\nPermission to use, modify, and distribute this software is given under the\nterms of the MIT License.\n\n\"\"\"\nfrom __future__ import division, print_function\n\nimport cmath\nimport itertools\nimport math\nimport operator as op\n# import random\nimport sys\nfrom atexit import register\nfrom bisect import bisect_left, bisect_right\n# from collections import Counter, MutableSequence, defaultdict, deque\n# from copy import deepcopy\n# from decimal import Decimal\n# from difflib import SequenceMatcher\n# from fractions import Fraction\n# from heapq import heappop, heappush\n\nif sys.version_info[0] < 3:\n    # from cPickle import dumps\n    from io import BytesIO as stream\n    # from Queue import PriorityQueue, Queue\nelse:\n    from functools import reduce\n    from io import StringIO as stream\n    from math import gcd\n    # from pickle import dumps\n    # from queue import PriorityQueue, Queue\n\n\nif sys.version_info[0] < 3:\n    class dict(dict):\n        \"\"\"dict() -> new empty dictionary\"\"\"\n        def items(self):\n            \"\"\"D.items() -> a set-like object providing a view on D's items\"\"\"\n            return dict.iteritems(self)\n\n        def keys(self):\n            \"\"\"D.keys() -> a set-like object providing a view on D's keys\"\"\"\n            return dict.iterkeys(self)\n\n        def values(self):\n            \"\"\"D.values() -> an object providing a view on D's values\"\"\"\n            return dict.itervalues(self)\n\n    def gcd(x, y):\n        \"\"\"gcd(x, y) -> int\n        greatest common divisor of x and y\n        \"\"\"\n        while y:\n            x, y = y, x % y\n        return x\n\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\n\ndef sync_with_stdio(sync=True):\n    \"\"\"Set whether the standard Python streams are allowed to buffer their I/O.\n\n    Args:\n        sync (bool, optional): The new synchronization setting.\n\n    \"\"\"\n    global input, flush\n\n    if sync:\n        flush = sys.stdout.flush\n    else:\n        sys.stdin = stream(sys.stdin.read())\n        input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n        sys.stdout = stream()\n        register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n\nMOD = 998244353\n\ndef main():\n    n, m, k = map(int, input().split())\n\n    a = 1\n    for i in range((n - 1) - k + 1, n):\n        a *= i\n        a %= MOD\n    b = 1\n    for i in range(1, k+1):\n        b *= i\n        b %= MOD\n\n    nck = a // b\n\n    print((m * pow((m - 1), k, MOD) * nck) % MOD)\n\nif __name__ == '__main__':\n    sync_with_stdio(False)\n    main()\n",
        "correct": false,
        "task_id": "0654",
        "depth": 1
    },
    {
        "description": "NN is an experienced internet user and that means he spends a lot of time on the social media. Once he found the following image on the Net, which asked him to compare the sizes of inner circles:\n\n<image>\n\nIt turned out that the circles are equal. NN was very surprised by this fact, so he decided to create a similar picture himself.\n\nHe managed to calculate the number of outer circles n and the radius of the inner circle r. NN thinks that, using this information, you can exactly determine the radius of the outer circles R so that the inner circle touches all of the outer ones externally and each pair of neighboring outer circles also touches each other. While NN tried very hard to guess the required radius, he didn't manage to do that. \n\nHelp NN find the required radius for building the required picture.\n\nInput\n\nThe first and the only line of the input file contains two numbers n and r (3 \u2264 n \u2264 100, 1 \u2264 r \u2264 100) \u2014 the number of the outer circles and the radius of the inner circle respectively.\n\nOutput\n\nOutput a single number R \u2014 the radius of the outer circle required for building the required picture. \n\nYour answer will be accepted if its relative or absolute error does not exceed 10^{-6}.\n\nFormally, if your answer is a and the jury's answer is b. Your answer is accepted if and only when (|a-b|)/(max(1, |b|)) \u2264 10^{-6}.\n\nExamples\n\nInput\n\n3 1\n\n\nOutput\n\n6.4641016\n\n\nInput\n\n6 1\n\n\nOutput\n\n1.0000000\n\n\nInput\n\n100 100\n\n\nOutput\n\n3.2429391",
        "task_name": "1100_C. NN and the Optical Illusion",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n\"\"\"\nThis file is part of https://github.com/Cheran-Senthil/PyRival.\n\nCopyright 2018 Cheran Senthilkumar all rights reserved,\nCheran Senthilkumar <hello@cheran.io>\nPermission to use, modify, and distribute this software is given under the\nterms of the MIT License.\n\n\"\"\"\nfrom __future__ import division, print_function\n\nimport cmath\nimport itertools\nimport math\nimport operator as op\n# import random\nimport sys\nfrom atexit import register\nfrom bisect import bisect_left, bisect_right\n# from collections import Counter, MutableSequence, defaultdict, deque\n# from copy import deepcopy\n# from decimal import Decimal\n# from difflib import SequenceMatcher\n# from fractions import Fraction\n# from heapq import heappop, heappush\n\nif sys.version_info[0] < 3:\n    # from cPickle import dumps\n    from io import BytesIO as stream\n    # from Queue import PriorityQueue, Queue\nelse:\n    # from functools import reduce\n    from io import StringIO as stream\n    # from pickle import dumps\n    # from queue import PriorityQueue, Queue\n\n\nif sys.version_info[0] < 3:\n    class dict(dict):\n        \"\"\"dict() -> new empty dictionary\"\"\"\n        def items(self):\n            \"\"\"D.items() -> a set-like object providing a view on D's items\"\"\"\n            return dict.iteritems(self)\n\n        def keys(self):\n            \"\"\"D.keys() -> a set-like object providing a view on D's keys\"\"\"\n            return dict.iterkeys(self)\n\n        def values(self):\n            \"\"\"D.values() -> an object providing a view on D's values\"\"\"\n            return dict.itervalues(self)\n\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\n\ndef sync_with_stdio(sync=True):\n    \"\"\"Set whether the standard Python streams are allowed to buffer their I/O.\n\n    Args:\n        sync (bool, optional): The new synchronization setting.\n\n    \"\"\"\n    global input, flush\n\n    if sync:\n        flush = sys.stdout.flush\n    else:\n        sys.stdin = stream(sys.stdin.read())\n        input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n        sys.stdout = stream()\n        register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n\n\ndef gcd(x, y):\n    \"\"\"greatest common divisor of x and y\"\"\"\n    while y:\n        x, y = y, x % y\n    return x\n\n\ndef main():\n    n, r = map(int, input().split(' '))\n    x = (2 - 2*math.cos(2*math.pi / n))**0.5\n    print((r * x) / (2 - x))\n\n\nif __name__ == '__main__':\n    sync_with_stdio(False)\n    main()\n",
        "correct": true,
        "task_id": "0655",
        "depth": 1
    },
    {
        "description": "This is a simplified version of the task Toy Train. These two versions differ only in the constraints. Hacks for this version are disabled.\n\nAlice received a set of Toy Train\u2122 from Bob. It consists of one train and a connected railway network of n stations, enumerated from 1 through n. The train occupies one station at a time and travels around the network of stations in a circular manner. More precisely, the immediate station that the train will visit after station i is station i+1 if 1 \u2264 i < n or station 1 if i = n. It takes the train 1 second to travel to its next station as described.\n\nBob gave Alice a fun task before he left: to deliver m candies that are initially at some stations to their independent destinations using the train. The candies are enumerated from 1 through m. Candy i (1 \u2264 i \u2264 m), now at station a_i, should be delivered to station b_i (a_i \u2260 b_i).\n\n<image> The blue numbers on the candies correspond to b_i values. The image corresponds to the 1-st example.\n\nThe train has infinite capacity, and it is possible to load off any number of candies at a station. However, only at most one candy can be loaded from a station onto the train before it leaves the station. You can choose any candy at this station. The time it takes to move the candies is negligible.\n\nNow, Alice wonders how much time is needed for the train to deliver all candies. Your task is to find, for each station, the minimum time the train would need to deliver all the candies were it to start from there.\n\nInput\n\nThe first line contains two space-separated integers n and m (2 \u2264 n \u2264 100; 1 \u2264 m \u2264 200) \u2014 the number of stations and the number of candies, respectively.\n\nThe i-th of the following m lines contains two space-separated integers a_i and b_i (1 \u2264 a_i, b_i \u2264 n; a_i \u2260 b_i) \u2014 the station that initially contains candy i and the destination station of the candy, respectively.\n\nOutput\n\nIn the first and only line, print n space-separated integers, the i-th of which is the minimum time, in seconds, the train would need to deliver all the candies were it to start from station i.\n\nExamples\n\nInput\n\n\n5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n\n\nOutput\n\n\n10 9 10 10 9 \n\n\nInput\n\n\n2 3\n1 2\n1 2\n1 2\n\n\nOutput\n\n\n5 6 \n\nNote\n\nConsider the second sample.\n\nIf the train started at station 1, the optimal strategy is as follows.\n\n  1. Load the first candy onto the train. \n  2. Proceed to station 2. This step takes 1 second. \n  3. Deliver the first candy. \n  4. Proceed to station 1. This step takes 1 second. \n  5. Load the second candy onto the train. \n  6. Proceed to station 2. This step takes 1 second. \n  7. Deliver the second candy. \n  8. Proceed to station 1. This step takes 1 second. \n  9. Load the third candy onto the train. \n  10. Proceed to station 2. This step takes 1 second. \n  11. Deliver the third candy. \n\n\n\nHence, the train needs 5 seconds to complete the tasks.\n\nIf the train were to start at station 2, however, it would need to move to station 1 before it could load the first candy, which would take one additional second. Thus, the answer in this scenario is 5+1 = 6 seconds.",
        "task_name": "1129_A1. Toy Train (Simplified)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python2\n\"\"\"\nThis file is part of https://github.com/cheran-senthil/PyRival\nCopyright 2019 Cheran Senthilkumar <hello@cheran.io>\n\n\"\"\"\nfrom __future__ import division, print_function\n\nimport itertools\nimport os\nimport sys\nfrom atexit import register\nfrom io import BytesIO\n\n\nclass dict(dict):\n    \"\"\"dict() -> new empty dictionary\"\"\"\n\n    def items(self):\n        \"\"\"D.items() -> a set-like object providing a view on D's items\"\"\"\n        return dict.iteritems(self)\n\n    def keys(self):\n        \"\"\"D.keys() -> a set-like object providing a view on D's keys\"\"\"\n        return dict.iterkeys(self)\n\n    def values(self):\n        \"\"\"D.values() -> an object providing a view on D's values\"\"\"\n        return dict.itervalues(self)\n\n\ndef gcd(x, y):\n    \"\"\"greatest common divisor of x and y\"\"\"\n    while y:\n        x, y = y, x % y\n    return x\n\n\nrange = xrange\n\nfilter = itertools.ifilter\nmap = itertools.imap\nzip = itertools.izip\n\nsys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\nsys.stdout = BytesIO()\nregister(lambda: os.write(1, sys.stdout.getvalue()))\n\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n\ndef main():\n    n, m = map(int, input().split())\n\n    station = [[] for _ in range(n)]\n    for i in range(m):\n        a, b = map(int, input().split())\n        station[a - 1].append(b - 1)\n\n    max_candy = [0] * n\n    for i in range(n):\n        try:\n            max_candy[i] = min(station[i], key=lambda x: x + n - i if x < i else x - i)\n        except ValueError:\n            pass\n\n    for i in range(n):\n        res = 0\n\n        for j in range(i, i + n):\n            if len(station[j % n]) == 0:\n                continue\n\n            dist = j - i\n            j %= n\n            dist += (len(station[j]) - 1) * n + (max_candy[j] + n - j if max_candy[j] < j else max_candy[j] - j)\n\n            res = max(res, dist)\n\n        print(res, end=' ')\n\n\nif __name__ == '__main__':\n    main()\n",
        "correct": true,
        "task_id": "0656",
        "depth": 2
    },
    {
        "description": "We're giving away nice huge bags containing number tiles! A bag we want to present to you contains n tiles. Each of them has a single number written on it \u2014 either 1 or 2.\n\nHowever, there is one condition you must fulfill in order to receive the prize. You will need to put all the tiles from the bag in a sequence, in any order you wish. We will then compute the sums of all prefixes in the sequence, and then count how many of these sums are prime numbers. If you want to keep the prize, you will need to maximize the number of primes you get.\n\nCan you win the prize? Hurry up, the bags are waiting!\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000) \u2014 the number of number tiles in the bag. The following line contains n space-separated integers a_1, a_2, ..., a_n (a_i \u2208 \\{1, 2\\}) \u2014 the values written on the tiles.\n\nOutput\n\nOutput a permutation b_1, b_2, ..., b_n of the input sequence (a_1, a_2, ..., a_n) maximizing the number of the prefix sums being prime numbers. If there are multiple optimal permutations, output any.\n\nExamples\n\nInput\n\n\n5\n1 2 1 2 1\n\n\nOutput\n\n\n1 1 1 2 2\n\n\nInput\n\n\n9\n1 1 2 1 1 1 2 1 1\n\n\nOutput\n\n\n1 1 1 2 1 1 1 2 1\n\nNote\n\nThe first solution produces the prefix sums 1, \\mathbf{\\color{blue}{2}}, \\mathbf{\\color{blue}{3}}, \\mathbf{\\color{blue}{5}}, \\mathbf{\\color{blue}{7}} (four primes constructed), while the prefix sums in the second solution are 1, \\mathbf{\\color{blue}{2}}, \\mathbf{\\color{blue}{3}}, \\mathbf{\\color{blue}{5}}, 6, \\mathbf{\\color{blue}{7}}, 8, 10, \\mathbf{\\color{blue}{11}} (five primes). Primes are marked bold and blue. In each of these cases, the number of produced primes is maximum possible.",
        "task_name": "1149_A. Prefix Sum Primes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"\nAuthor    : raj1307 - Raj Singh\nInstitute : Jalpaiguri Government Engineering College\nDate      : 29.04.19\n\"\"\"\nfrom __future__ import division, print_function\nimport itertools,os,sys\n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify, #heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial,pow,pi\n#from bisect import bisect_left,bisect_right\n#from decimal import *,threading\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    from builtins import str as __str__\n    str = lambda x=b'': x if type(x) is bytes else __str__(x).encode()\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._buffer = BytesIO()\n        self._fd = file.fileno()\n        self._writable = 'x' in file.mode or 'r' not in file.mode\n        self.write = self._buffer.write if self._writable else None\n\n    def read(self):\n        return self._buffer.read() if self._buffer.tell() else os.read(self._fd, os.fstat(self._fd).st_size)\n\n    def readline(self):\n        while self.newlines == 0:\n            b, ptr = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE)), self._buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(b), self._buffer.seek(ptr)\n            self.newlines += b.count(b'\\n') + (not b)\n        self.newlines -= 1\n        return self._buffer.readline()\n\n    def flush(self):\n        if self._writable:\n            os.write(self._fd, self._buffer.getvalue())\n            self._buffer.truncate(0), self._buffer.seek(0)\n\n\nsys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(b'\\r\\n')\n\n\ndef print(*args, **kwargs):\n    sep, file = kwargs.pop('sep', b' '), kwargs.pop('file', sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop('end', b'\\n'))\n    if kwargs.pop('flush', False):\n        file.flush()\n\n\n\n\n\ndef ii(): return int(input())\ndef si(): return str(input())\ndef mi():return map(int,input().strip().split(\" \"))\ndef li():return list(mi())\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p1\n    return res\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\n# For getting input from input.txt file \n#sys.stdin = open('input.txt', 'r')  \n  \n# Printing the Output to output.txt file \n#sys.stdout = open('output.txt', 'w') \n\ndef main():\n   \n    n=ii()\n    l=li()\n    a=[1,1,1,2]*50000\n    s=[]\n    one=l.count(1)\n    two=l.count(2)\n    \n    \"\"\"if two==one:\n        for i in range(n):\n            if i%2==0:\n                s.append(2)\n            else:\n                s.append(1)\n        print(*s)\n        exit()\n        \n    \n    for i in range(n):\n        if a[i]==1:\n            if one !=0:\n                s.append(1)\n                one-=1\n            else:\n                s.append(2)\n                two-=1\n        else:\n            if two!=0:\n                s.append(2)\n                two-=1\n            else:\n                s.append(1)\n                one-=1\n    print(*s)   \"\"\"\n    \n    s=[2]\n    p=[2]\n    two-=1\n    for i in range(1,n):\n        if p[-1]%2==0:\n            if one!=0:\n                s.append(1)\n                p.append(p[-1]+1)\n                one-=1\n            else:\n                s.append(2)\n                p.append(p[-1]+2)\n                two-=1\n        else:\n            if two!=0:\n                s.append(2)\n                p.append(p[-1]+2)\n                two-=1\n            else:\n                s.append(1)\n                p.append(p[-1]+1)\n                one-=1\n                \n   \n    print(*s)\n   \n   \n   \n   \n   \n   \n   \n   \n   \n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": false,
        "task_id": "0657",
        "depth": 1
    },
    {
        "description": "You are given a string s, consisting of small Latin letters. Let's denote the length of the string as |s|. The characters in the string are numbered starting from 1. \n\nYour task is to find out if it is possible to rearrange characters in string s so that for any prime number p \u2264 |s| and for any integer i ranging from 1 to |s| / p (inclusive) the following condition was fulfilled sp = sp \u00d7 i. If the answer is positive, find one way to rearrange the characters.\n\nInput\n\nThe only line contains the initial string s, consisting of small Latin letters (1 \u2264 |s| \u2264 1000).\n\nOutput\n\nIf it is possible to rearrange the characters in the string so that the above-mentioned conditions were fulfilled, then print in the first line \"YES\" (without the quotes) and print on the second line one of the possible resulting strings. If such permutation is impossible to perform, then print the single string \"NO\".\n\nExamples\n\nInput\n\nabc\n\n\nOutput\n\nYES\nabc\n\n\nInput\n\nabcd\n\n\nOutput\n\nNO\n\n\nInput\n\nxxxyxxx\n\n\nOutput\n\nYES\nxxxxxxy\n\nNote\n\nIn the first sample any of the six possible strings will do: \"abc\", \"acb\", \"bac\", \"bca\", \"cab\" or \"cba\".\n\nIn the second sample no letter permutation will satisfy the condition at p = 2 (s2 = s4).\n\nIn the third test any string where character \"y\" doesn't occupy positions 2, 3, 4, 6 will be valid.",
        "task_name": "124_C. Prime Permutation",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom collections import *\n\n\ndef prime(n):\n    if n in [2, 3]:\n        return True\n    if n < 2 or n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while (i * i <= n):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\nclass graph:\n    # initialize graph\n    def __init__(self, gdict=None):\n        if gdict is None:\n            gdict = defaultdict(list)\n        self.gdict, self.edges, self.l = gdict, [], defaultdict(int)\n\n    # add edge\n    def addEdge(self, node1, node2, w=None):\n        self.gdict[node1].append(node2)\n        self.gdict[node2].append(node1)\n\n    def dfsUtil(self, v):\n        stack, all, cur = [v], [v], ['a', float('inf')]\n\n        while (stack):\n            s = stack.pop()\n\n            for i in self.gdict[s]:\n                if not self.visit[i]:\n                    stack.append(i)\n                    all.append(i)\n                    self.visit[i] = 1\n\n        for i, j in mem.items():\n            if j >= len(all) and j < cur[1]:\n                cur = [i, j]\n\n        if cur[1] == float('inf'):\n            print('NO')\n            exit()\n        else:\n            for i in all:\n                ans[i - 1] = cur[0]\n                mem[cur[0]] -= 1\n\n    def dfs(self):\n        self.cnt, self.visit = 0, [0] * (n + 1)\n\n        for i in range(1, n + 1):\n            if self.visit[i] == 0:\n                self.visit[i] = 1\n                self.dfsUtil(i)\n\n\nrstr = lambda: stdin.readline().strip()\ns = rstr()\nn, g, mem = len(s), graph(), Counter(s)\nans = [''] * (n)\n\nfor i in range(1, n + 1):\n    if prime(i):\n        for j in range(i * 2, n + 1, i):\n            g.addEdge(j, j - i)\n\ng.dfs()\nprint('YES')\nprint(''.join(ans))\n",
        "correct": true,
        "task_id": "0658",
        "depth": 2
    },
    {
        "description": "Let's call a positive integer composite if it has at least one divisor other than 1 and itself. For example:\n\n  * the following numbers are composite: 1024, 4, 6, 9; \n  * the following numbers are not composite: 13, 1, 2, 3, 37. \n\n\n\nYou are given a positive integer n. Find two composite integers a,b such that a-b=n.\n\nIt can be proven that solution always exists.\n\nInput\n\nThe input contains one integer n (1 \u2264 n \u2264 10^7): the given integer.\n\nOutput\n\nPrint two composite integers a,b (2 \u2264 a, b \u2264 10^9, a-b=n).\n\nIt can be proven, that solution always exists.\n\nIf there are several possible solutions, you can print any. \n\nExamples\n\nInput\n\n\n1\n\n\nOutput\n\n\n9 8\n\n\nInput\n\n\n512\n\n\nOutput\n\n\n4608 4096",
        "task_name": "1269_A. Equation",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Fall 7, Stand 8...\n# !/ankit_SM/bin/env python\n\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\ndef main():\n    tinn=1; #tinn=int(input())\n    for tin in range(tinn):\n        n=int(input())\n        print(9*n,8*n)\n\n\n\n\n\n\n\n# region fastio\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    newlines = 0\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\ndef print(*args, **kwargs):\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n# endregion\nif __name__ == \"__main__\":\n    main()",
        "correct": true,
        "task_id": "0659",
        "depth": 1
    },
    {
        "description": "Let's define a number ebne (even but not even) if and only if its sum of digits is divisible by 2 but the number itself is not divisible by 2. For example, 13, 1227, 185217 are ebne numbers, while 12, 2, 177013, 265918 are not. If you're still unsure what ebne numbers are, you can look at the sample notes for more clarification.\n\nYou are given a non-negative integer s, consisting of n digits. You can delete some digits (they are not necessary consecutive/successive) to make the given number ebne. You cannot change the order of the digits, that is, after deleting the digits the remaining digits collapse. The resulting number shouldn't contain leading zeros. You can delete any number of digits between 0 (do not delete any digits at all) and n-1.\n\nFor example, if you are given s=222373204424185217171912 then one of possible ways to make it ebne is: 222373204424185217171912 \u2192 2237344218521717191. The sum of digits of 2237344218521717191 is equal to 70 and is divisible by 2, but number itself is not divisible by 2: it means that the resulting number is ebne.\n\nFind any resulting number that is ebne. If it's impossible to create an ebne number from the given number report about it.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 3000) \u2014 the number of digits in the original number.\n\nThe second line of each test case contains a non-negative integer number s, consisting of n digits.\n\nIt is guaranteed that s does not contain leading zeros and the sum of n over all test cases does not exceed 3000.\n\nOutput\n\nFor each test case given in the input print the answer in the following format:\n\n  * If it is impossible to create an ebne number, print \"-1\" (without quotes);\n  * Otherwise, print the resulting number after deleting some, possibly zero, but not all digits. This number should be ebne. If there are multiple answers, you can print any of them. Note that answers with leading zeros or empty strings are not accepted. It's not necessary to minimize or maximize the number of deleted digits.\n\nExample\n\nInput\n\n\n4\n4\n1227\n1\n0\n6\n177013\n24\n222373204424185217171912\n\n\nOutput\n\n\n1227\n-1\n17703\n2237344218521717191\n\nNote\n\nIn the first test case of the example, 1227 is already an ebne number (as 1 + 2 + 2 + 7 = 12, 12 is divisible by 2, while in the same time, 1227 is not divisible by 2) so we don't need to delete any digits. Answers such as 127 and 17 will also be accepted.\n\nIn the second test case of the example, it is clearly impossible to create an ebne number from the given number.\n\nIn the third test case of the example, there are many ebne numbers we can obtain by deleting, for example, 1 digit such as 17703, 77013 or 17013. Answers such as 1701 or 770 will not be accepted as they are not ebne numbers. Answer 013 will not be accepted as it contains leading zeroes.\n\nExplanation:\n\n  * 1 + 7 + 7 + 0 + 3 = 18. As 18 is divisible by 2 while 17703 is not divisible by 2, we can see that 17703 is an ebne number. Same with 77013 and 17013;\n  * 1 + 7 + 0 + 1 = 9. Because 9 is not divisible by 2, 1701 is not an ebne number;\n  * 7 + 7 + 0 = 14. This time, 14 is divisible by 2 but 770 is also divisible by 2, therefore, 770 is not an ebne number.\n\n\n\nIn the last test case of the example, one of many other possible answers is given. Another possible answer is: 222373204424185217171912 \u2192 22237320442418521717191 (delete the last digit).",
        "task_name": "1291_A. Even But Not Even",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def ebne(n):\n    if n % 2 == 0:\n        return False\n    if sum([int(i) for i in str(n)]) % 2 == 0:\n        return True\n    else:\n        return False\n\ndef ebnifier(n):\n    if all(int(i) % 2 == 0 for i in str(n)):\n        return -1\n    if ebne(n):\n        return n\n    else:\n        if n % 2 == 0:\n            for i in range(len(str(n))-1, -1, -1):\n                if int(str(n)[i]) % 2 == 0:\n                    n = int(str(n)[0:len(str(n)) - 1])\n                else:\n                    break\n        else:\n            for i in range(1, 10, 2):\n                if str(i) in str(n):\n                    n = int(str(n).replace(str(i), \"\", 1))\n                    break\n        return ebnifier(n)\n\nnum = int(input(\"n of test\"))\nebnes = []\nfor i in range(num):\n    dig = input(\"digits\")\n    n = input(\"number\")\n    ebnes.append(int(n))\nfor i in ebnes:\n    print(ebnifier(i))\n",
        "correct": false,
        "task_id": "0660",
        "depth": 1
    },
    {
        "description": "Kate has a set S of n integers \\{1, ..., n\\} . \n\nShe thinks that imperfection of a subset M \u2286 S is equal to the maximum of gcd(a, b) over all pairs (a, b) such that both a and b are in M and a \u2260 b. \n\nKate is a very neat girl and for each k \u2208 \\{2, ..., n\\} she wants to find a subset that has the smallest imperfection among all subsets in S of size k. There can be more than one subset with the smallest imperfection and the same size, but you don't need to worry about it. Kate wants to find all the subsets herself, but she needs your help to find the smallest possible imperfection for each size k, will name it I_k. \n\nPlease, help Kate to find I_2, I_3, ..., I_n.\n\nInput\n\nThe first and only line in the input consists of only one integer n (2\u2264 n \u2264 5 \u22c5 10^5) \u2014 the size of the given set S.\n\nOutput\n\nOutput contains only one line that includes n - 1 integers: I_2, I_3, ..., I_n.\n\nExamples\n\nInput\n\n\n2\n\n\nOutput\n\n\n1 \n\nInput\n\n\n3\n\n\nOutput\n\n\n1 1 \n\nNote\n\nFirst sample: answer is 1, because gcd(1, 2) = 1.\n\nSecond sample: there are subsets of S with sizes 2, 3 with imperfection equal to 1. For example, \\{2,3\\} and \\{1, 2, 3\\}.",
        "task_name": "1333_F. Kate and imperfection",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\ndef main():\n    def generate_primes(n):\n        primes=[True for i in range(n+1)]\n        for p in range(2,n+1):\n            if p*p<=n and primes[p]:\n                for i in range(p*p,n+1,p):\n                    primes[i]=False\n    \n        prime_list=[]\n        for i in range(2,n+1):\n            if primes[i]:\n                prime_list.append(i)\n        return prime_list\n\n    n = int(input())\n    prime_list = generate_primes(n)\n    prime_list.append(1)\n    result = [1] * len(prime_list)\n    if len(result) == n:\n        result.pop()\n    prime_list.sort()\n    used = set(prime_list)\n    for i in range(2, n + 1):\n        for p in prime_list:\n            if p > i:\n                break\n            if i * p in used:\n                continue\n            if i * p > n:\n                break\n            used.add(i*p)\n            result.append(i)\n            if len(result) == n - 1:\n                break\n        if len(result) == n - 1:\n            break\n\n    print(*result)\n        \n        \n      \n\n            \n######## Python 2 and 3 footer by Pajenegod and c1729\n\n# Note because cf runs old PyPy3 version which doesn't have the sped up\n# unicode strings, PyPy3 strings will many times be slower than pypy2.\n# There is a way to get around this by using binary strings in PyPy3\n# but its syntax is different which makes it kind of a mess to use.\n\n# So on cf, use PyPy2 for best string performance.\n\npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\n\nimport os, sys\nfrom io import IOBase, BytesIO\n\nBUFSIZE = 8192\nclass FastIO(BytesIO):\n    newlines = 0\n\n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n\n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0,2), super(FastIO, self).write(s))[0])\n        return s\n\n    def read(self):\n        while self._fill(): pass\n        return super(FastIO,self).read()\n\n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill(); self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s:self.buffer.write(s.encode('ascii'))\n            self.read = lambda:self.buffer.read().decode('ascii')\n            self.readline = lambda:self.buffer.readline().decode('ascii')\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# Cout implemented in Python\nimport sys\nclass ostream:\n    def __lshift__(self,a):\n        sys.stdout.write(str(a))\n        return self\ncout = ostream()\nendl = '\\n'\n\n# Read all remaining integers in stdin, type is given by optional argument, this is fast\ndef readnumbers(zero = 0):\n    conv = ord if py2 else lambda x:x\n    A = []; numb = zero; sign = 1; i = 0; s = sys.stdin.buffer.read()\n    try:\n        while True:\n            if s[i] >= b'0' [0]:\n                numb = 10 * numb + conv(s[i]) - 48\n            elif s[i] == b'-' [0]: sign = -1\n            elif s[i] != b'\\r' [0]:\n                A.append(sign*numb)\n                numb = zero; sign = 1\n            i += 1\n    except:pass\n    if s and s[-1] >= b'0' [0]:\n        A.append(sign*numb)\n    return A\n\nif __name__== \"__main__\":\n  main()",
        "correct": false,
        "task_id": "0662",
        "depth": 2
    },
    {
        "description": "The statement of this problem is the same as the statement of problem C2. The only difference is that, in problem C1, n is always even, and in C2, n is always odd.\n\nYou are given a regular polygon with 2 \u22c5 n vertices (it's convex and has equal sides and equal angles) and all its sides have length 1. Let's name it as 2n-gon.\n\nYour task is to find the square of the minimum size such that you can embed 2n-gon in the square. Embedding 2n-gon in the square means that you need to place 2n-gon in the square in such way that each point which lies inside or on a border of 2n-gon should also lie inside or on a border of the square.\n\nYou can rotate 2n-gon and/or the square.\n\nInput\n\nThe first line contains a single integer T (1 \u2264 T \u2264 200) \u2014 the number of test cases.\n\nNext T lines contain descriptions of test cases \u2014 one per line. Each line contains single even integer n (2 \u2264 n \u2264 200). Don't forget you need to embed 2n-gon, not an n-gon.\n\nOutput\n\nPrint T real numbers \u2014 one per test case. For each test case, print the minimum length of a side of the square 2n-gon can be embedded in. Your answer will be considered correct if its absolute or relative error doesn't exceed 10^{-6}.\n\nExample\n\nInput\n\n\n3\n2\n4\n200\n\n\nOutput\n\n\n1.000000000\n2.414213562\n127.321336469",
        "task_name": "1354_C1. Simple Polygon Embedding",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from math import sin,pi,sqrt\nfor _ in range(input()):\n    n=input()\n    print (sin(pi/4+pi/(2*n))/sin(pi/(2*n)))*sqrt(2)",
        "correct": false,
        "task_id": "0663",
        "depth": 1
    },
    {
        "description": "You are given three integers x, y and n. Your task is to find the maximum integer k such that 0 \u2264 k \u2264 n that k mod x = y, where mod is modulo operation. Many programming languages use percent operator % to implement it.\n\nIn other words, with given x, y and n you need to find the maximum possible integer from 0 to n that has the remainder y modulo x.\n\nYou have to answer t independent test cases. It is guaranteed that such k exists for each test case.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 5 \u22c5 10^4) \u2014 the number of test cases. The next t lines contain test cases.\n\nThe only line of the test case contains three integers x, y and n (2 \u2264 x \u2264 10^9;~ 0 \u2264 y < x;~ y \u2264 n \u2264 10^9).\n\nIt can be shown that such k always exists under the given constraints.\n\nOutput\n\nFor each test case, print the answer \u2014 maximum non-negative integer k such that 0 \u2264 k \u2264 n and k mod x = y. It is guaranteed that the answer always exists.\n\nExample\n\nInput\n\n\n7\n7 5 12345\n5 0 4\n10 5 15\n17 8 54321\n499999993 9 1000000000\n10 5 187\n2 0 999999999\n\n\nOutput\n\n\n12339\n0\n15\n54306\n999999995\n185\n999999998\n\nNote\n\nIn the first test case of the example, the answer is 12339 = 7 \u22c5 1762 + 5 (thus, 12339 mod 7 = 5). It is obvious that there is no greater integer not exceeding 12345 which has the remainder 5 modulo 7.",
        "task_name": "1374_A. Required Remainder",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "l=[]\nfor i in range(int(raw_input())):\n    x, y, n = map(int, raw_input().split())\n    if n<x:\n        l.append(0)\n    else:\n        a=(n//x)*x\n        if a+y>n:\n            l.append(a-(x-y))\n        else:\n            l.append(a+y)\nfor j in l:\n    print(j)",
        "correct": false,
        "task_id": "0664",
        "depth": 1
    },
    {
        "description": "Let's call a list of positive integers a_0, a_1, ..., a_{n-1} a power sequence if there is a positive integer c, so that for every 0 \u2264 i \u2264 n-1 then a_i = c^i.\n\nGiven a list of n positive integers a_0, a_1, ..., a_{n-1}, you are allowed to:\n\n  * Reorder the list (i.e. pick a permutation p of \\{0,1,...,n - 1\\} and change a_i to a_{p_i}), then \n  * Do the following operation any number of times: pick an index i and change a_i to a_i - 1 or a_i + 1 (i.e. increment or decrement a_i by 1) with a cost of 1. \n\n\n\nFind the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.\n\nInput\n\nThe first line contains an integer n (3 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_0, a_1, ..., a_{n-1} (1 \u2264 a_i \u2264 10^9).\n\nOutput\n\nPrint the minimum cost to transform a_0, a_1, ..., a_{n-1} into a power sequence.\n\nExamples\n\nInput\n\n\n3\n1 3 2\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n3\n1000000000 1000000000 1000000000\n\n\nOutput\n\n\n1999982505\n\nNote\n\nIn the first example, we first reorder \\{1, 3, 2\\} into \\{1, 2, 3\\}, then increment a_2 to 4 with cost 1 to get a power sequence \\{1, 2, 4\\}.",
        "task_name": "1397_B. Power Sequence",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# template begins \n##################################### \n  \n# import libraries for input/ output handling \n# on generic level \nimport atexit, io, sys \n  \n# A stream implementation using an in-memory bytes  \n# buffer. It inherits BufferedIOBase. \nbuffer = io.BytesIO() \nsys.stdout = buffer\n  \n# print via here \n@atexit.register \ndef write(): \n    sys.__stdout__.write(buffer.getvalue()) \n  \n##################################### \n# template ends \n \n \nimport math\nn=int(raw_input())\nl=[int(x) for x in raw_input().split()]\nl.sort()\nmx=l[n-1]\nx=math.log(mx,2)\nc=pow(2,(x/(n-1)))\n# print(x)\nfloor_c=int(c)\nif(floor_c<=0):\n    floor_c+=1                                                                                                                                           \nnxt_num=floor_c+1\nans=pow(10,16)\nres=0\nmul=1\nc=floor_c\nfor i in range(0,n):\n    res+=abs(mul-l[i])\n    mul=mul*c\nans=min(ans,res)\nres2=0\nmul=1\nc=nxt_num\nfor i in range(0,n):\n    res2+=abs(mul-l[i])\n    mul=mul*c\nans=min(ans,res2)\nprint(int(ans))",
        "correct": true,
        "task_id": "0665",
        "depth": 1
    },
    {
        "description": "This is the hard version of the problem. The difference between the versions is that the easy version has no swap operations. You can make hacks only if all versions of the problem are solved.\n\nPikachu is a cute and friendly pok\u00e9mon living in the wild pikachu herd.\n\nBut it has become known recently that infamous team R wanted to steal all these pok\u00e9mon! Pok\u00e9mon trainer Andrew decided to help Pikachu to build a pok\u00e9mon army to resist.\n\nFirst, Andrew counted all the pok\u00e9mon \u2014 there were exactly n pikachu. The strength of the i-th pok\u00e9mon is equal to a_i, and all these numbers are distinct.\n\nAs an army, Andrew can choose any non-empty subsequence of pokemons. In other words, Andrew chooses some array b from k indices such that 1 \u2264 b_1 < b_2 < ... < b_k \u2264 n, and his army will consist of pok\u00e9mons with forces a_{b_1}, a_{b_2}, ..., a_{b_k}.\n\nThe strength of the army is equal to the alternating sum of elements of the subsequence; that is, a_{b_1} - a_{b_2} + a_{b_3} - a_{b_4} + ....\n\nAndrew is experimenting with pok\u00e9mon order. He performs q operations. In i-th operation Andrew swaps l_i-th and r_i-th pok\u00e9mon.\n\nAndrew wants to know the maximal stregth of the army he can achieve with the initial pok\u00e9mon placement. He also needs to know the maximal strength after each operation.\n\nHelp Andrew and the pok\u00e9mon, or team R will realize their tricky plan!\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 \u2264 t \u2264 10^3) denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains two integers n and q (1 \u2264 n \u2264 3 \u22c5 10^5, 0 \u2264 q \u2264 3 \u22c5 10^5) denoting the number of pok\u00e9mon and number of operations respectively.\n\nThe second line contains n distinct positive integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 n) denoting the strengths of the pok\u00e9mon.\n\ni-th of the last q lines contains two positive integers l_i and r_i (1 \u2264 l_i \u2264 r_i \u2264 n) denoting the indices of pok\u00e9mon that were swapped in the i-th operation.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 \u22c5 10^5, and the sum of q over all test cases does not exceed 3 \u22c5 10^5. \n\nOutput\n\nFor each test case, print q+1 integers: the maximal strength of army before the swaps and after each swap.\n\nExample\n\nInput\n\n\n3\n3 1\n1 3 2\n1 2\n2 2\n1 2\n1 2\n1 2\n7 5\n1 2 5 4 3 6 7\n1 2\n6 7\n3 4\n1 2\n2 3\n\n\nOutput\n\n\n3\n4\n2\n2\n2\n9\n10\n10\n10\n9\n11\n\nNote\n\nLet's look at the third test case:\n\nInitially we can build an army in such way: [1 2 5 4 3 6 7], its strength will be 5-3+7=9.\n\nAfter first operation we can build an army in such way: [2 1 5 4 3 6 7], its strength will be 2-1+5-3+7=10.\n\nAfter second operation we can build an army in such way: [2 1 5 4 3 7 6], its strength will be 2-1+5-3+7=10.\n\nAfter third operation we can build an army in such way: [2 1 4 5 3 7 6], its strength will be 2-1+5-3+7=10.\n\nAfter forth operation we can build an army in such way: [1 2 4 5 3 7 6], its strength will be 5-3+7=9.\n\nAfter all operations we can build an army in such way: [1 4 2 5 3 7 6], its strength will be 4-2+5-3+7=11.",
        "task_name": "1420_C2. Pok\u00e9mon Army (hard version)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nfrom itertools import repeat\ndef solve():\n    n, q = map(int, stdin.readline().split())\n    a = [0] + map(int, stdin.readline().split(), repeat(10, n)) + [0]\n    b = [map(int, stdin.readline().split(), (10, 10)) for _ in xrange(q)]\n    s = 0\n    for i in xrange(1, n + 1):\n        if a[i-1] < a[i] > a[i+1]:\n            s += a[i]\n        if a[i-1] > a[i] < a[i+1]:\n            s -= a[i]\n    stdout.write('%d\\n' % s)\n    if not q:\n        return\n    ans = [0] * q\n    d = 0\n    for i, x in enumerate(b):\n        l, r = x\n        if r == l:\n            ans[i] = d\n            continue\n        Ll, L, Lr = a[l-1], a[l], a[l+1]\n        Rl, R, Rr = a[r-1], a[r], a[r+1]\n        if l > 1:\n            if a[l-2] < Ll > L:\n                d -= Ll\n            elif a[l-2] > Ll < L:\n                d += Ll\n        if Ll < L > Lr:\n            d -= L\n        elif Ll > L < Lr:\n            d += L\n        if r - l > 1:\n            if a[l+2] < Lr > L:\n                d -= Lr\n            elif a[l+2] > Lr < L:\n                d += Lr\n        if r - l > 2:\n            if a[r-2] < Rl > R:\n                d -= Rl\n            elif a[r-2] > Rl < R:\n                d += Rl\n        if Rl < R > Rr:\n            d -= R\n        elif Rl > R < Rr:\n            d += R\n        if r < n:\n            if a[r+2] < Rr > R:\n                d -= Rr\n            elif a[r+2] > Rr < R:\n                d += Rr\n        a[l], a[r] = a[r], a[l]\n        Ll, L, Lr = a[l-1], a[l], a[l+1]\n        Rl, R, Rr = a[r-1], a[r], a[r+1]\n        if l > 1:\n            if a[l-2] < Ll > L:\n                d += Ll\n            elif a[l-2] > Ll < L:\n                d -= Ll\n        if Ll < L > Lr:\n            d += L\n        elif Ll > L < Lr:\n            d -= L\n        if r - l > 1:\n            if a[l+2] < Lr > L:\n                d += Lr\n            elif a[l+2] > Lr < L:\n                d -= Lr\n        if r - l > 2:\n            if a[r-2] < Rl > R:\n                d += Rl\n            elif a[r-2] > Rl < R:\n                d -= Rl\n        if Rl < R > Rr:\n            d += R\n        elif Rl > R < Rr:\n            d -= R\n        if r < n:\n            if a[r+2] < Rr > R:\n                d += Rr\n            elif a[r+2] > Rr < R:\n                d -= Rr\n        ans[i] = d\n    stdout.write(''.join('%d\\n' % (s + x) for x in ans))\nT = int(stdin.readline())\nfor _ in xrange(T):\n    solve()\n",
        "correct": true,
        "task_id": "0666",
        "depth": 1
    },
    {
        "description": "Athenaeus has just finished creating his latest musical composition and will present it tomorrow to the people of Athens. Unfortunately, the melody is rather dull and highly likely won't be met with a warm reception. \n\nHis song consists of n notes, which we will treat as positive integers. The diversity of a song is the number of different notes it contains. As a patron of music, Euterpe watches over composers and guides them throughout the process of creating new melodies. She decided to help Athenaeus by changing his song to make it more diverse.\n\nBeing a minor goddess, she cannot arbitrarily change the song. Instead, for each of the n notes in the song, she can either leave it as it is or increase it by 1.\n\nGiven the song as a sequence of integers describing the notes, find out the maximal, achievable diversity.\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1 \u2264 t \u2264 10 000) \u2014 the number of test cases. Then t test cases follow, each one is described in two lines.\n\nIn the first line of each test case there is a single integer n (1 \u2264 n \u2264 10^5) denoting the length of the song. The next line contains a sequence of n integers x_1, x_2, \u2026, x_n (1 \u2264 x_1 \u2264 x_2 \u2264 \u2026 \u2264 x_n \u2264 2 \u22c5 n), describing the song.\n\nThe sum of n over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case, you should output a single line containing precisely one integer, the maximal diversity of the song, i.e. the maximal possible number of different elements in the final sequence.\n\nExample\n\nInput\n\n\n5\n6\n1 2 2 2 5 6\n2\n4 4\n6\n1 1 3 4 4 5\n1\n1\n6\n1 1 1 2 2 2\n\n\nOutput\n\n\n5\n2\n6\n1\n3\n\nNote\n\nIn the first test case, Euterpe can increase the second, fifth and sixth element to obtain the sequence 1, \\underline{3}, 2, 2, \\underline{6}, \\underline{7}, which has 5 different elements (increased elements are underlined).\n\nIn the second test case, Euterpe can increase the first element to obtain the sequence \\underline{5}, 4, which has 2 different elements.\n\nIn the third test case, Euterpe can increase the second, fifth and sixth element to obtain the sequence 1, \\underline{2}, 3, 4, \\underline{5}, \\underline{6}, which has 6 different elements.",
        "task_name": "1466_B. Last minute enhancements",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    t = int(input())\n\n    for _ in range(t):\n        n = int(input())\n        x = [int(xi) for xi in input().split()]\n\n        prev = 0\n        cnt = 0\n        sol = 0\n\n        for i in x:\n            if i != prev and cnt > 1:\n                prev += 1\n                sol += 1\n\n            if i == prev:\n                cnt += 1\n            else:\n                prev = i\n                sol += 1\n                cnt = 1\n\n        if cnt > 1:\n            sol += 1\n\n        print(sol)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": true,
        "task_id": "0668",
        "depth": 2
    },
    {
        "description": "You are given a positive integer x. Check whether the number x is representable as the sum of the cubes of two positive integers.\n\nFormally, you need to check if there are two integers a and b (1 \u2264 a, b) such that a^3+b^3=x.\n\nFor example, if x = 35, then the numbers a=2 and b=3 are suitable (2^3+3^3=8+27=35). If x=4, then no pair of numbers a and b is suitable.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case contains one integer x (1 \u2264 x \u2264 10^{12}).\n\nPlease note, that the input for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language.\n\nOutput\n\nFor each test case, output on a separate line: \n\n  * \"YES\" if x is representable as the sum of the cubes of two positive integers. \n  * \"NO\" otherwise. \n\n\n\nYou can output \"YES\" and \"NO\" in any case (for example, the strings yEs, yes, Yes and YES will be recognized as positive).\n\nExample\n\nInput\n\n\n7\n1\n2\n4\n34\n35\n16\n703657519796\n\n\nOutput\n\n\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n\nNote\n\nThe number 1 is not representable as the sum of two cubes.\n\nThe number 2 is represented as 1^3+1^3.\n\nThe number 4 is not representable as the sum of two cubes.\n\nThe number 34 is not representable as the sum of two cubes.\n\nThe number 35 is represented as 2^3+3^3.\n\nThe number 16 is represented as 2^3+2^3.\n\nThe number 703657519796 is represented as 5779^3+7993^3.",
        "task_name": "1490_C. Sum of Cubes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def vali(a):\n    b=int(a**0.5)\n    flag=False\n    for i in range(1,b+1):\n        if a%i==0:\n            j=a/i\n            delta=12*j-3*i**2\n            if delta<0:\n                continue\n            #x1=(3*i+delta**0.5)/6\n            x2=(3*i-delta**0.5)/6\n            if x2-int(x2)==0 and x2>=1:\n                flag=True\n                break\n    return flag\nif __name__ == \"__main__\":\n    N=input()\n    results=[]\n    for k in range(1,N+1):\n        results.append(vali(input()))\n    for result in results:\n        print(result)",
        "correct": false,
        "task_id": "0669",
        "depth": 1
    },
    {
        "description": "Polycarpus plays with red and blue marbles. He put n marbles from the left to the right in a row. As it turned out, the marbles form a zebroid.\n\nA non-empty sequence of red and blue marbles is a zebroid, if the colors of the marbles in this sequence alternate. For example, sequences (red; blue; red) and (blue) are zebroids and sequence (red; red) is not a zebroid.\n\nNow Polycarpus wonders, how many ways there are to pick a zebroid subsequence from this sequence. Help him solve the problem, find the number of ways modulo 1000000007 (109 + 7).\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 106) \u2014 the number of marbles in Polycarpus's sequence.\n\nOutput\n\nPrint a single number \u2014 the answer to the problem modulo 1000000007 (109 + 7).\n\nExamples\n\nInput\n\n3\n\n\nOutput\n\n6\n\n\nInput\n\n4\n\n\nOutput\n\n11\n\nNote\n\nLet's consider the first test sample. Let's assume that Polycarpus initially had sequence (red; blue; red), so there are six ways to pick a zebroid: \n\n  * pick the first marble; \n  * pick the second marble; \n  * pick the third marble; \n  * pick the first and second marbles; \n  * pick the second and third marbles; \n  * pick the first, second and third marbles. \n\n\n\nIt can be proven that if Polycarpus picks (blue; red; blue) as the initial sequence, the number of ways won't change.",
        "task_name": "209_A. Multicolored Marbles",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "[n]=[int(i) for i in raw_input().split()]\nans=1\ni=1\nstep=2\nwhile(i<n):\n    ans+=step\n    ans=ans%1000000007\n    step+=i\n    i+=1\nprint(ans%1000000007)\n\t\t\t\t\t   \t  \t \t\t \t\t \t\t \t\t  \t",
        "correct": false,
        "task_id": "0670",
        "depth": 1
    },
    {
        "description": "Vasya has n items lying in a line. The items are consecutively numbered by numbers from 1 to n in such a way that the leftmost item has number 1, the rightmost item has number n. Each item has a weight, the i-th item weights wi kilograms.\n\nVasya needs to collect all these items, however he won't do it by himself. He uses his brand new robot. The robot has two different arms \u2014 the left one and the right one. The robot can consecutively perform the following actions: \n\n  1. Take the leftmost item with the left hand and spend wi \u00b7 l energy units (wi is a weight of the leftmost item, l is some parameter). If the previous action was the same (left-hand), then the robot spends extra Ql energy units; \n  2. Take the rightmost item with the right hand and spend wj \u00b7 r energy units (wj is a weight of the rightmost item, r is some parameter). If the previous action was the same (right-hand), then the robot spends extra Qr energy units; \n\n\n\nNaturally, Vasya wants to program the robot in a way that the robot spends as little energy as possible. He asked you to solve this problem. Your task is to find the minimum number of energy units robot spends to collect all items.\n\nInput\n\nThe first line contains five integers n, l, r, Ql, Qr (1 \u2264 n \u2264 105; 1 \u2264 l, r \u2264 100; 1 \u2264 Ql, Qr \u2264 104).\n\nThe second line contains n integers w1, w2, ..., wn (1 \u2264 wi \u2264 100).\n\nOutput\n\nIn the single line print a single number \u2014 the answer to the problem.\n\nExamples\n\nInput\n\n3 4 4 19 1\n42 3 99\n\n\nOutput\n\n576\n\n\nInput\n\n4 7 2 3 9\n1 2 3 4\n\n\nOutput\n\n34\n\nNote\n\nConsider the first sample. As l = r, we can take an item in turns: first from the left side, then from the right one and last item from the left. In total the robot spends 4\u00b742 + 4\u00b799 + 4\u00b73 = 576 energy units.\n\nThe second sample. The optimal solution is to take one item from the right, then one item from the left and two items from the right. In total the robot spends (2\u00b74) + (7\u00b71) + (2\u00b73) + (2\u00b72 + 9) = 34 energy units.",
        "task_name": "354_A. Vasya and Robot",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\ninp = [map(int, i.split(' ')) for i in sys.stdin.read().splitlines()]\n\nn, L, R, QL, QR = inp[0]\nw = inp[1]\n\ndef test(f):\n    global L, R, QL, QR, w\n    ret = 0\n    l, r = 0, len(w)\n    action = None\n    while l != r:\n        cost_l = w[l  ]*L + (QL if action == 0 else 0)\n        cost_r = w[r-1]*R + (QR if action == 1 else 0)\n        if action is not None:\n            if cost_l < cost_r:\n                action = 0\n            elif cost_l > cost_r:\n                action = 1\n        else:\n            action = f\n        if action == 0:\n            ret += cost_l\n            l += 1\n        else:\n            ret += cost_r\n            r -= 1\n    return ret\n\nres = min(test(0), test(1))\n\nsys.stdout.write(str(res))\n",
        "correct": false,
        "task_id": "0671",
        "depth": 1
    },
    {
        "description": "Two semifinals have just been in the running tournament. Each semifinal had n participants. There are n participants advancing to the finals, they are chosen as follows: from each semifinal, we choose k people (0 \u2264 2k \u2264 n) who showed the best result in their semifinals and all other places in the finals go to the people who haven't ranked in the top k in their semifinal but got to the n - 2k of the best among the others.\n\nThe tournament organizers hasn't yet determined the k value, so the participants want to know who else has any chance to get to the finals and who can go home.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 105) \u2014 the number of participants in each semifinal.\n\nEach of the next n lines contains two integers ai and bi (1 \u2264 ai, bi \u2264 109) \u2014 the results of the i-th participant (the number of milliseconds he needs to cover the semifinals distance) of the first and second semifinals, correspondingly. All results are distinct. Sequences a1, a2, ..., an and b1, b2, ..., bn are sorted in ascending order, i.e. in the order the participants finished in the corresponding semifinal.\n\nOutput\n\nPrint two strings consisting of n characters, each equals either \"0\" or \"1\". The first line should correspond to the participants of the first semifinal, the second line should correspond to the participants of the second semifinal. The i-th character in the j-th line should equal \"1\" if the i-th participant of the j-th semifinal has any chances to advance to the finals, otherwise it should equal a \"0\".\n\nExamples\n\nInput\n\n4\n9840 9920\n9860 9980\n9930 10020\n10040 10090\n\n\nOutput\n\n1110\n1100\n\n\nInput\n\n4\n9900 9850\n9940 9930\n10000 10020\n10060 10110\n\n\nOutput\n\n1100\n1100\n\nNote\n\nConsider the first sample. Each semifinal has 4 participants. The results of the first semifinal are 9840, 9860, 9930, 10040. The results of the second semifinal are 9920, 9980, 10020, 10090.\n\n  * If k = 0, the finalists are determined by the time only, so players 9840, 9860, 9920 and 9930 advance to the finals. \n  * If k = 1, the winners from both semifinals move to the finals (with results 9840 and 9920), and the other places are determined by the time (these places go to the sportsmen who run the distance in 9860 and 9930 milliseconds). \n  * If k = 2, then first and second places advance from each seminfial, these are participants with results 9840, 9860, 9920 and 9980 milliseconds. ",
        "task_name": "378_B. Semifinals",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nn=int(sys.stdin.readline())\nA=[]\nB=[]\nT=[]\nfor i in range(n):\n    a,b=map(int,sys.stdin.readline().split())\n    A.append(a)\n    B.append(b)\n    T.append((a,i,0))\n    T.append((b,i,1))\nT.sort()\na=[0]*n\nb=[0]*n\nfor i in range(n//2):\n    a[i]=1\n    b[i]=1\nfor i in range(n):\n    if(T[i][-1]==0):\n        a[T[i][1]]=1\n    else:\n        b[T[i][1]]=1\nAns=\"\"\nfor i in range(n):\n    Ans+=str(a[i])\nAns+=\"\\n\"\nfor i in range(n):\n    Ans+=str(b[i])\nsys.stdout.write(Ans)",
        "correct": true,
        "task_id": "0672",
        "depth": 1
    },
    {
        "description": "You can find anything whatsoever in our Galaxy! A cubical planet goes round an icosahedral star. Let us introduce a system of axes so that the edges of the cubical planet are parallel to the coordinate axes and two opposite vertices lay in the points (0, 0, 0) and (1, 1, 1). Two flies live on the planet. At the moment they are sitting on two different vertices of the cubical planet. Your task is to determine whether they see each other or not. The flies see each other when the vertices they occupy lie on the same face of the cube.\n\nInput\n\nThe first line contains three space-separated integers (0 or 1) \u2014 the coordinates of the first fly, the second line analogously contains the coordinates of the second fly.\n\nOutput\n\nOutput \"YES\" (without quotes) if the flies see each other. Otherwise, output \"NO\".\n\nExamples\n\nInput\n\n0 0 0\n0 1 0\n\n\nOutput\n\nYES\n\n\nInput\n\n1 1 0\n0 1 0\n\n\nOutput\n\nYES\n\n\nInput\n\n0 0 0\n1 1 1\n\n\nOutput\n\nNO",
        "task_name": "39_D. Cubical Planet",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a=map(int,raw_input().split())\nb= map(int,raw_input().split())\n\nans= 0\nfor i in range(3):\n\tans +=abs(a[i]-b[i])\n\nif(ans == 3):\n\tprint(\"NO\")\nelse:\n\tprint(\"YES\")",
        "correct": true,
        "task_id": "0673",
        "depth": 1
    },
    {
        "description": "Ilya got tired of sports programming, left university and got a job in the subway. He was given the task to determine the escalator load factor. \n\nLet's assume that n people stand in the queue for the escalator. At each second one of the two following possibilities takes place: either the first person in the queue enters the escalator with probability p, or the first person in the queue doesn't move with probability (1 - p), paralyzed by his fear of escalators and making the whole queue wait behind him.\n\nFormally speaking, the i-th person in the queue cannot enter the escalator until people with indices from 1 to i - 1 inclusive enter it. In one second only one person can enter the escalator. The escalator is infinite, so if a person enters it, he never leaves it, that is he will be standing on the escalator at any following second. Ilya needs to count the expected value of the number of people standing on the escalator after t seconds. \n\nYour task is to help him solve this complicated task.\n\nInput\n\nThe first line of the input contains three numbers n, p, t (1 \u2264 n, t \u2264 2000, 0 \u2264 p \u2264 1). Numbers n and t are integers, number p is real, given with exactly two digits after the decimal point.\n\nOutput\n\nPrint a single real number \u2014 the expected number of people who will be standing on the escalator after t seconds. The absolute or relative error mustn't exceed 10 - 6.\n\nExamples\n\nInput\n\n1 0.50 1\n\n\nOutput\n\n0.5\n\n\nInput\n\n1 0.50 4\n\n\nOutput\n\n0.9375\n\n\nInput\n\n4 0.20 2\n\n\nOutput\n\n0.4",
        "task_name": "518_D. Ilya and Escalator",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "MAXN = 2005\ndp = [[0 for col in range(MAXN)] for row in range(MAXN)]\n\nline = raw_input()\nn, q, t = line.split()\nn = int(n)\nt = int(t)\nq = float(q)\n\nif t <= n:\n    print(t*q)\nelse:\n    dp[0][0] = 1\n    for i in range(t+1):\n        for j in range(min(t, n)+1):\n            if j == n:\n                dp[i+1][j] += dp[i][j]\n            else:\n                dp[i+1][j] += (1-q) * dp[i][j]\n                dp[i+1][j+1] += q * dp[i][j]\n\n    ans = 0\n    for i in range(n+1):\n        ans += i * dp[t][i]\n    print(ans)\n \t\t\t\t\t \t\t\t\t\t  \t\t \t        \t \t",
        "correct": true,
        "task_id": "0674",
        "depth": 2
    },
    {
        "description": "You are given three sticks with positive integer lengths of a, b, and c centimeters. You can increase length of some of them by some positive integer number of centimeters (different sticks can be increased by a different length), but in total by at most l centimeters. In particular, it is allowed not to increase the length of any stick.\n\nDetermine the number of ways to increase the lengths of some sticks so that you can form from them a non-degenerate (that is, having a positive area) triangle. Two ways are considered different, if the length of some stick is increased by different number of centimeters in them.\n\nInput\n\nThe single line contains 4 integers a, b, c, l (1 \u2264 a, b, c \u2264 3\u00b7105, 0 \u2264 l \u2264 3\u00b7105).\n\nOutput\n\nPrint a single integer \u2014 the number of ways to increase the sizes of the sticks by the total of at most l centimeters, so that you can make a non-degenerate triangle from it.\n\nExamples\n\nInput\n\n1 1 1 2\n\n\nOutput\n\n4\n\n\nInput\n\n1 2 3 1\n\n\nOutput\n\n2\n\n\nInput\n\n10 2 1 7\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample test you can either not increase any stick or increase any two sticks by 1 centimeter.\n\nIn the second sample test you can increase either the first or the second stick by one centimeter. Note that the triangle made from the initial sticks is degenerate and thus, doesn't meet the conditions.",
        "task_name": "571_A. Lengthening Sticks",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def counts(a, b, c, l):\n    res=0\n    lb = max(a, b+c)\n    ub = a+l\n    for i in xrange(lb, ub+1):\n        temp = i-a\n        x = min(a-b-c+temp, l-temp)\n        if x>=0:\n            res += ((x+1)*(x+2))/2\n    return res\n\na, b, c, l = map(int, raw_input().split())\nprint ((l+1)*(l+2)*(l+3))/6 - counts(a, b, c, l) - counts(b, a, c, l) - counts(c,a , b, l)",
        "correct": true,
        "task_id": "0676",
        "depth": 1
    },
    {
        "description": "Ari the monster is not an ordinary monster. She is the hidden identity of Super M, the Byteforces\u2019 superhero. Byteforces is a country that consists of n cities, connected by n - 1 bidirectional roads. Every road connects exactly two distinct cities, and the whole road system is designed in a way that one is able to go from any city to any other city using only the given roads. There are m cities being attacked by humans. So Ari... we meant Super M have to immediately go to each of the cities being attacked to scare those bad humans. Super M can pass from one city to another only using the given roads. Moreover, passing through one road takes her exactly one kron - the time unit used in Byteforces. \n\n<image>\n\nHowever, Super M is not on Byteforces now - she is attending a training camp located in a nearby country Codeforces. Fortunately, there is a special device in Codeforces that allows her to instantly teleport from Codeforces to any city of Byteforces. The way back is too long, so for the purpose of this problem teleportation is used exactly once.\n\nYou are to help Super M, by calculating the city in which she should teleport at the beginning in order to end her job in the minimum time (measured in krons). Also, provide her with this time so she can plan her way back to Codeforces.\n\nInput\n\nThe first line of the input contains two integers n and m (1 \u2264 m \u2264 n \u2264 123456) - the number of cities in Byteforces, and the number of cities being attacked respectively.\n\nThen follow n - 1 lines, describing the road system. Each line contains two city numbers ui and vi (1 \u2264 ui, vi \u2264 n) - the ends of the road i.\n\nThe last line contains m distinct integers - numbers of cities being attacked. These numbers are given in no particular order.\n\nOutput\n\nFirst print the number of the city Super M should teleport to. If there are many possible optimal answers, print the one with the lowest city number.\n\nThen print the minimum possible time needed to scare all humans in cities being attacked, measured in Krons.\n\nNote that the correct answer is always unique.\n\nExamples\n\nInput\n\n7 2\n1 2\n1 3\n1 4\n3 5\n3 6\n3 7\n2 7\n\n\nOutput\n\n2\n3\n\n\nInput\n\n6 4\n1 2\n2 3\n2 4\n4 5\n4 6\n2 4 5 6\n\n\nOutput\n\n2\n4\n\nNote\n\nIn the first sample, there are two possibilities to finish the Super M's job in 3 krons. They are:\n\n<image> and <image>.\n\nHowever, you should choose the first one as it starts in the city with the lower number.",
        "task_name": "592_D. Super M",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from collections import deque\nfrom sys import stdin\n\n#parser\ndef parser():\n    return map(int, stdin.readline().split())\n\ndef DFS_Discriminiting():\n    #visitados\n    visited=[False for x in range(n)]\n    visited[numbers_of_attacked_cities[0]]=True\n    stack=[]\n    intrudoction_order=[]\n    stack.append(numbers_of_attacked_cities[0])\n    while len(stack)>0:\n        v=stack.pop()\n        for u in adjacents_list[v]:\n            if not visited[u]:\n                pi[u]=v\n                visited[u]=True\n                if attacked_city[u]:\n                    count_attacked_cities_subtree[u]+=1\n                stack.append(u)\n                intrudoction_order.append(u)    \n    for v in intrudoction_order[::-1]:\n        count_attacked_cities_subtree[pi[v]]+=count_attacked_cities_subtree[v]\n        if count_attacked_cities_subtree[v]==0:\n            important_cities[v]=False\n\ndef DFS_Heigths():\n    #visitados\n    visited=[False for x in range(n)]\n    visited[numbers_of_attacked_cities[0]]=True\n    stack=[]\n    intrudoction_order=[]\n    stack.append(numbers_of_attacked_cities[0])\n    while len(stack)>0:\n        v=stack.pop()\n        for u in adjacents_list[v]:\n            if not visited[u]:\n                pi[u]=v\n                visited[u]=True\n                stack.append(u)\n                intrudoction_order.append(u)\n    for v in intrudoction_order[::-1]:\n        if heights1[pi[v]] < heights1[v]+1:\n            heights2[pi[v]]=heights1[pi[v]]\n            heights1[pi[v]]=heights1[v]+1\n        elif heights2[pi[v]]<heights1[v]+1:\n            heights2[pi[v]]=heights1[v]+1\n        #print(v,pi[v],heights1[pi[v]],heights2[pi[v]])    \n\ndef Distance_Root(s):\n    for v in adjacents_list[s]:\n        if heights1[v]+1>distances1[s]:\n            distances1[s]=heights1[v]+1\n            distances2=distances1\n        elif heights1[v]+1>distances2[s]:\n            distances2=heights1[v]+1\n\ndef DFS_Distances():\n    #visitados\n    visited=[False for x in range(n)]\n    visited[numbers_of_attacked_cities[0]]=True\n    stack=[]\n    stack.append(numbers_of_attacked_cities[0])\n    Distance_Root(numbers_of_attacked_cities[0])\n    while len(stack)>0:\n        v=stack.pop()\n        for u in adjacents_list[v]:\n            if not visited[u]:\n                pi[u]=v\n                visited[u]=True\n                determinate=False\n                stack.append(u)\n                if heights1[u]+1==distances1[v]:\n                    if heights1[u]+1>distances2[v]:\n                        determinate=True\n                        distances1[u]=max(heights1[u],distances2[v]+1)\n                        if distances1[u]==heights1[u]:\n                            distances2[u]=max(distances2[v]+1,heights2[u])\n                        else:\n                            distances2[u]=heights1[u]\n                if not determinate:\n                    distances1[u]=distances1[v]+1\n                    distances2[u]=heights1[u]\n\ndef BFS(s):\n    distance=[-1 for x in range(n)]\n    distance[s]=0\n    q=deque()\n    q.append(s)\n    while len(q)>0:\n        v=q.popleft()\n        for u in adjacents_list[v]:\n            if distance[u] == -1:\n                distance[u]=distance[v]+1\n                q.append(u)\n    return distance\n\n\nn,m=parser()\n#Creando los arrays necesarios para la ejecucion de DFS\n#padres\npi=[0 for x in range(n)]\n#ciudades atacadas en el subarbol\ncount_attacked_cities_subtree=[0 for x in range(n)]\n#ciudad atacada o no atacada\nattacked_city=[False for x in range(n)]\n#ciudades_que_son atacadas o sirven para llegar a las mismas\nimportant_cities=[True for x in range(n)]\n\nadjacents_list=[[] for x in range(n)]\nfor i in range(n-1):\n    v1,v2=parser()\n    adjacents_list[v1-1].append(v2-1)\n    adjacents_list[v2-1].append(v1-1)\n\n#numero de ciudades atacadas\nnumbers_of_attacked_cities=[x-1 for x in parser()]\n\n#marcando las ciudades atacadas\nfor i in numbers_of_attacked_cities:\n    attacked_city[i]=True\n\nDFS_Discriminiting()\n\nadjacents_list=[[] for x in range(n)]\n\ncount_edges=0\nfor v in range(n):\n    if v==numbers_of_attacked_cities[0]:\n        continue\n    elif important_cities[v] and important_cities[pi[v]]:\n        adjacents_list[v].append(pi[v])\n        adjacents_list[pi[v]].append(v)\n        count_edges+=1\n\n#padres\npi=[0 for x in range(n)]\n\n#alturas\nheights1=[0 for x in range(n)]\nheights2=[0 for x in range(n)]\n\nDFS_Heigths()\n\n#distances\ndistances1=[0 for x in range(n)]\ndistances2=[0 for x in range(n)]\n\nDFS_Distances()\n\nlower=distances1[numbers_of_attacked_cities[0]]\nfor i in range(n):\n    if important_cities[i] and lower>distances1[i]:\n        lower=distances1[i]\n\ncenters=[]\nfor i in range(n):\n    if distances1[i]==lower:\n        centers.append(i)\n\nposibles_begin_cities=[]\n\nfor i in centers:\n    distances_center=BFS(i)\n    max_distance=0\n    for j in range(n):\n        if distances_center[j]>max_distance:\n            max_distance=distances_center[j]\n    for j in range(n):\n        if distances_center[j]==max_distance:\n            posibles_begin_cities.append(j)\n\n\nprint(min(posibles_begin_cities)+1)\n\nprint(2*count_edges-(distances1[centers[0]]+distances2[centers[0]]))",
        "correct": false,
        "task_id": "0677",
        "depth": 2
    },
    {
        "description": "It's the year 4527 and the tanks game that we all know and love still exists. There also exists Great Gena's code, written in 2016. The problem this code solves is: given the number of tanks that go into the battle from each country, find their product. If it is turns to be too large, then the servers might have not enough time to assign tanks into teams and the whole game will collapse!\n\nThere are exactly n distinct countries in the world and the i-th country added ai tanks to the game. As the developers of the game are perfectionists, the number of tanks from each country is beautiful. A beautiful number, according to the developers, is such number that its decimal representation consists only of digits '1' and '0', moreover it contains at most one digit '1'. However, due to complaints from players, some number of tanks of one country was removed from the game, hence the number of tanks of this country may not remain beautiful.\n\nYour task is to write the program that solves exactly the same problem in order to verify Gena's code correctness. Just in case.\n\nInput\n\nThe first line of the input contains the number of countries n (1 \u2264 n \u2264 100 000). The second line contains n non-negative integers ai without leading zeroes \u2014 the number of tanks of the i-th country.\n\nIt is guaranteed that the second line contains at least n - 1 beautiful numbers and the total length of all these number's representations doesn't exceed 100 000.\n\nOutput\n\nPrint a single number without leading zeroes \u2014 the product of the number of tanks presented by each country.\n\nExamples\n\nInput\n\n3\n5 10 1\n\n\nOutput\n\n50\n\nInput\n\n4\n1 1 10 11\n\n\nOutput\n\n110\n\nInput\n\n5\n0 3 1 100 1\n\n\nOutput\n\n0\n\nNote\n\nIn sample 1 numbers 10 and 1 are beautiful, number 5 is not not.\n\nIn sample 2 number 11 is not beautiful (contains two '1's), all others are beautiful.\n\nIn sample 3 number 3 is not beautiful, all others are beautiful.",
        "task_name": "614_B. Gena's Code",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n# sys.stdin = open('input.txt')\nn = int(raw_input())\na = raw_input().split()\nif '0' in a:\n    sys.stdout.write('0')\n    exit()\nzc = 0\nhasBad = False\nfor x in a:\n    f = True\n    c = 0\n    c1 = 0\n    for ch in x:\n        if ch == '0':\n            c += 1\n        if ch == '1':\n            c1 += 1\n        if (ch != '1' and ch != '0') or c1 > 1:\n            f = False\n            break\n    if f:\n        zc += c\n    else:\n        hasBad = True\n        sys.stdout.write(x)\nif not hasBad:\n    sys.stdout.write('1')\nsys.stdout.write('0' * zc)\n",
        "correct": true,
        "task_id": "0678",
        "depth": 2
    },
    {
        "description": "One spring day on his way to university Lesha found an array A. Lesha likes to split arrays into several parts. This time Lesha decided to split the array A into several, possibly one, new arrays so that the sum of elements in each of the new arrays is not zero. One more condition is that if we place the new arrays one after another they will form the old array A.\n\nLesha is tired now so he asked you to split the array. Help Lesha!\n\nInput\n\nThe first line contains single integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array A.\n\nThe next line contains n integers a1, a2, ..., an ( - 103 \u2264 ai \u2264 103) \u2014 the elements of the array A.\n\nOutput\n\nIf it is not possible to split the array A and satisfy all the constraints, print single line containing \"NO\" (without quotes).\n\nOtherwise in the first line print \"YES\" (without quotes). In the next line print single integer k \u2014 the number of new arrays. In each of the next k lines print two integers li and ri which denote the subarray A[li... ri] of the initial array A being the i-th new array. Integers li, ri should satisfy the following conditions:\n\n  * l1 = 1\n  * rk = n\n  * ri + 1 = li + 1 for each 1 \u2264 i < k. \n\n\n\nIf there are multiple answers, print any of them.\n\nExamples\n\nInput\n\n3\n1 2 -3\n\n\nOutput\n\nYES\n2\n1 2\n3 3\n\n\nInput\n\n8\n9 -12 3 4 -4 -10 7 3\n\n\nOutput\n\nYES\n2\n1 2\n3 8\n\n\nInput\n\n1\n0\n\n\nOutput\n\nNO\n\n\nInput\n\n4\n1 2 3 -5\n\n\nOutput\n\nYES\n4\n1 1\n2 2\n3 3\n4 4",
        "task_name": "754_A. Lesha and array splitting",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "num_elements=input('Num elements: ')\ndata=raw_input('Elements: ')\narray = data.split(' ')\narray = [int(x) for x in array]\n\ndef numZeroes(array):\n    num=0\n    for e in array:\n        if e != 0: num+=1\n    return num\ndef resolve():\n    if numZeroes(array)<=1:\n        print ('NO')\n        return\n    elif sum(array)!=0:\n        print ('YES')\n        print ('1')\n        print ('1' + ' ' + str(len(array)))\n        return\n    else:\n        i = 0\n        while array[i]==0:\n            i+=1\n        print ('YES')\n        print ('1')\n        print(str(i+1) + ' ' + str(len(array)))\n        return\n\nresolve()\n",
        "correct": false,
        "task_id": "0680",
        "depth": 1
    },
    {
        "description": "Well, the series which Stepan watched for a very long time, ended. In total, the series had n episodes. For each of them, Stepan remembers either that he definitely has watched it, or that he definitely hasn't watched it, or he is unsure, has he watched this episode or not. \n\nStepan's dissatisfaction is the maximum number of consecutive series that Stepan did not watch.\n\nYour task is to determine according to Stepan's memories if his dissatisfaction could be exactly equal to k.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 100, 0 \u2264 k \u2264 n) \u2014 the number of episodes in the series and the dissatisfaction which should be checked. \n\nThe second line contains the sequence which consists of n symbols \"Y\", \"N\" and \"?\". If the i-th symbol equals \"Y\", Stepan remembers that he has watched the episode number i. If the i-th symbol equals \"N\", Stepan remembers that he hasn't watched the epizode number i. If the i-th symbol equals \"?\", Stepan doesn't exactly remember if he has watched the episode number i or not.\n\nOutput\n\nIf Stepan's dissatisfaction can be exactly equal to k, then print \"YES\" (without qoutes). Otherwise print \"NO\" (without qoutes).\n\nExamples\n\nInput\n\n5 2\nNYNNY\n\n\nOutput\n\nYES\n\n\nInput\n\n6 1\n????NN\n\n\nOutput\n\nNO\n\nNote\n\nIn the first test Stepan remembers about all the episodes whether he has watched them or not. His dissatisfaction is 2, because he hasn't watch two episodes in a row \u2014 the episode number 3 and the episode number 4. The answer is \"YES\", because k = 2.\n\nIn the second test k = 1, Stepan's dissatisfaction is greater than or equal to 2 (because he remembers that he hasn't watch at least two episodes in a row \u2014 number 5 and number 6), even if he has watched the episodes from the first to the fourth, inclusive.",
        "task_name": "774_J. Stepan's Series",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport re\n[n, k] = map(int, sys.stdin.readline().split())\nseq = sys.stdin.readline().split()[0]\n\n#print n, k, seq\n\ndef max_N(s):\n    r = 0\n    max_r = 0\n    for i in range(len(s)):\n        if s[i] == 'N':\n            r += 1\n        else:\n            r = 0\n        if r > max_r:\n            max_r = r\n    return max_r\n\ndef is_possible(s, k):\n    s1 = \"Y\" + s + \"Y\"\n    seq_N = s1.replace(\"?\", \"N\")\n    for i in range(len(seq_N)):\n        if seq_N[i:i + k] == 'N' * k:\n            if (s1[i - 1] in [\"Y\", \"?\"]) and (s1[i + k] in [\"Y\", \"?\"]):\n                return 1\n    return 0\n\nseq_Y = seq.replace(\"?\", \"Y\")\nmax_N_Y = max_N(seq_Y)\n\nif max_N_Y > k:\n    print(\"NO\")\nelif max_N_Y == k:\n    print(\"YES\")\nelse:\n    if is_possible(seq, k):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
        "correct": true,
        "task_id": "0681",
        "depth": 1
    },
    {
        "description": "After Fox Ciel got off a bus, she found that the bus she was on was a wrong bus and she lost her way in a strange town. However, she fortunately met her friend Beaver Taro and asked which way to go to her castle. Taro's response to her was a string s, and she tried to remember the string s correctly.\n\nHowever, Ciel feels n strings b1, b2, ... , bn are really boring, and unfortunately she dislikes to remember a string that contains a boring substring. To make the thing worse, what she can remember is only the contiguous substring of s.\n\nDetermine the longest contiguous substring of s that does not contain any boring string, so that she can remember the longest part of Taro's response.\n\nInput\n\nIn the first line there is a string s. The length of s will be between 1 and 105, inclusive.\n\nIn the second line there is a single integer n (1 \u2264 n \u2264 10). Next n lines, there is a string bi (1 \u2264 i \u2264 n). Each length of bi will be between 1 and 10, inclusive.\n\nEach character of the given strings will be either a English alphabet (both lowercase and uppercase) or a underscore ('_') or a digit. Assume that these strings are case-sensitive.\n\nOutput\n\nOutput in the first line two space-separated integers len and pos: the length of the longest contiguous substring of s that does not contain any bi, and the first position of the substring (0-indexed). The position pos must be between 0 and |s| - len inclusive, where |s| is the length of string s.\n\nIf there are several solutions, output any.\n\nExamples\n\nInput\n\nGo_straight_along_this_street\n5\nstr\nlong\ntree\nbiginteger\nellipse\n\n\nOutput\n\n12 4\n\n\nInput\n\nIhaveNoIdea\n9\nI\nh\na\nv\ne\nN\no\nI\nd\n\n\nOutput\n\n0 0\n\n\nInput\n\nunagioisii\n2\nioi\nunagi\n\n\nOutput\n\n5 5\n\nNote\n\nIn the first sample, the solution is traight_alon.\n\nIn the second sample, the solution is an empty string, so the output can be \u00ab0 0\u00bb, \u00ab0 1\u00bb, \u00ab0 2\u00bb, and so on.\n\nIn the third sample, the solution is either nagio or oisii.",
        "task_name": "79_C. Beaver",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s = raw_input().strip()\nkeys = [ None for i in range(int(raw_input())) ]\nfor i in range(len(keys)):\n    keys[i] = raw_input().strip()\nbest_length, best_pos = 0, 0\n\ndef kosher(left, right):\n    pos_range = range(right - 1, left - 1, -1)\n    #print(left, right)\n    for key in keys:\n        for pos in pos_range:\n            key_pos = len(key) - right + pos\n            #print(pos, key, key_pos)\n            if key_pos == -1 or key[key_pos] != s[pos]:\n                break\n            if key_pos == 0:\n                return False\n    return True\n\nleft, right = 0, 0\nwhile True:\n        if kosher(left, right + 1):\n            right += 1\n            length = right - left\n            if length > best_length:\n                best_length = length\n                best_pos = left\n            if right == len(s):\n                break\n        else:\n            left += 1\n\nprint('%d %d' % (best_length, best_pos))\n",
        "correct": true,
        "task_id": "0682",
        "depth": 2
    },
    {
        "description": "Hideo Kojima has just quit his job at Konami. Now he is going to find a new place to work. Despite being such a well-known person, he still needs a CV to apply for a job.\n\nDuring all his career Hideo has produced n games. Some of them were successful, some were not. Hideo wants to remove several of them (possibly zero) from his CV to make a better impression on employers. As a result there should be no unsuccessful game which comes right after successful one in his CV.\n\nMore formally, you are given an array s1, s2, ..., sn of zeros and ones. Zero corresponds to an unsuccessful game, one \u2014 to a successful one. Games are given in order they were produced, and Hideo can't swap these values. He should remove some elements from this array in such a way that no zero comes right after one.\n\nBesides that, Hideo still wants to mention as much games in his CV as possible. Help this genius of a man determine the maximum number of games he can leave in his CV.\n\nInput\n\nThe first line contains one integer number n (1 \u2264 n \u2264 100).\n\nThe second line contains n space-separated integer numbers s1, s2, ..., sn (0 \u2264 si \u2264 1). 0 corresponds to an unsuccessful game, 1 \u2014 to a successful one.\n\nOutput\n\nPrint one integer \u2014 the maximum number of games Hideo can leave in his CV so that no unsuccessful game comes after a successful one.\n\nExamples\n\nInput\n\n4\n1 1 0 1\n\n\nOutput\n\n3\n\n\nInput\n\n6\n0 1 0 0 1 0\n\n\nOutput\n\n4\n\n\nInput\n\n1\n0\n\n\nOutput\n\n1",
        "task_name": "846_A. Curriculum Vitae",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N = int(raw_input())\nnums = [int(i) for i in raw_input().split(' ')]\nzeroFound = False\noutput = []\nzeros_after_1 = 0\nfor i in range(N):\n    if nums[i] == 0 and zeroFound:\n        zeros_after_1 += 1\n    elif nums[i] == 1:\n        zeroFound = True\n        output.append(\"1\")\n    else:\n        output.append(\"0\")\nprint(len(output))\n",
        "correct": false,
        "task_id": "0683",
        "depth": 1
    },
    {
        "description": "The cities of Byteland and Berland are located on the axis Ox. In addition, on this axis there are also disputed cities, which belong to each of the countries in their opinion. Thus, on the line Ox there are three types of cities:\n\n  * the cities of Byteland, \n  * the cities of Berland, \n  * disputed cities. \n\n\n\nRecently, the project BNET has been launched \u2014 a computer network of a new generation. Now the task of the both countries is to connect the cities so that the network of this country is connected.\n\nThe countries agreed to connect the pairs of cities with BNET cables in such a way that:\n\n  * If you look at the only cities of Byteland and the disputed cities, then in the resulting set of cities, any city should be reachable from any other one by one or more cables, \n  * If you look at the only cities of Berland and the disputed cities, then in the resulting set of cities, any city should be reachable from any other one by one or more cables. \n\n\n\nThus, it is necessary to choose a set of pairs of cities to connect by cables in such a way that both conditions are satisfied simultaneously. Cables allow bi-directional data transfer. Each cable connects exactly two distinct cities.\n\nThe cost of laying a cable from one city to another is equal to the distance between them. Find the minimum total cost of laying a set of cables so that two subsets of cities (Byteland and disputed cities, Berland and disputed cities) are connected.\n\nEach city is a point on the line Ox. It is technically possible to connect the cities a and b with a cable so that the city c (a < c < b) is not connected to this cable, where a, b and c are simultaneously coordinates of the cities a, b and c.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 2 \u22c5 10^{5}) \u2014 the number of cities.\n\nThe following n lines contains an integer x_i and the letter c_i (-10^{9} \u2264 x_i \u2264 10^{9}) \u2014 the coordinate of the city and its type. If the city belongs to Byteland, c_i equals to 'B'. If the city belongs to Berland, c_i equals to \u00abR\u00bb. If the city is disputed, c_i equals to 'P'. \n\nAll cities have distinct coordinates. Guaranteed, that the cities are given in the increasing order of their coordinates.\n\nOutput\n\nPrint the minimal total length of such set of cables, that if we delete all Berland cities (c_i='R'), it will be possible to find a way from any remaining city to any other remaining city, moving only by cables. Similarly, if we delete all Byteland cities (c_i='B'), it will be possible to find a way from any remaining city to any other remaining city, moving only by cables.\n\nExamples\n\nInput\n\n4\n-5 R\n0 P\n3 P\n7 B\n\n\nOutput\n\n12\n\n\nInput\n\n5\n10 R\n14 B\n16 B\n21 R\n32 R\n\n\nOutput\n\n24\n\nNote\n\nIn the first example, you should connect the first city with the second, the second with the third, and the third with the fourth. The total length of the cables will be 5 + 3 + 4 = 12.\n\nIn the second example there are no disputed cities, so you need to connect all the neighboring cities of Byteland and all the neighboring cities of Berland. The cities of Berland have coordinates 10, 21, 32, so to connect them you need two cables of length 11 and 11. The cities of Byteland have coordinates 14 and 16, so to connect them you need one cable of length 2. Thus, the total length of all cables is 11 + 11 + 2 = 24.",
        "task_name": "962_E. Byteland, Berland and Disputed Cities",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\ndef solv(p1,p2,a1):\n\n        \n    ans1=0\n    r=[]\n    b=[]\n    for i in a1:\n        if(i[1]=='R'):\n            r.append(i[0])\n        elif(i[1]=='B'):\n            b.append(i[0])\n    ans1=2*(p2-p1)\n\n    ans2=p2-p1\n    if(len(r)):\n        L=[r[0]-p1]\n        R=[p2-r[-1]]\n    \n        for i in range(1,len(r)):\n            L.append(r[i]-r[i-1] + L[-1])\n        for i in range(len(r)-1,0,-1):\n            R.append(r[i]-r[i-1] + R[-1])\n        min1=min(L[-1],R[-1])\n        for i in range(len(r)-1):\n            min1=min(min1,L[i]+R[len(r)-i-2])\n        ans2+=min1\n    #print('ans2 due to r ',ans2,L,R)\n    if(len(b)):\n        L=[b[0]-p1]\n        R=[p2-b[-1]]\n    \n        for i in range(1,len(b)):\n            L.append(b[i]-b[i-1] + L[-1])\n        for i in range(len(b)-1,0,-1):\n            R.append(b[i]-b[i-1] + R[-1])\n        min1=min(L[-1],R[-1])\n        for i in range(len(b)-1):\n            min1=min(min1,L[i]+R[len(b)-i-2])\n        ans2+=min1\n    #print('ans2 due to r ',ans2,L,R)\n    #print('in solv ',ans1,ans2,p1,p2)\n    return min(ans1,ans2)\n\n\nn=int(raw_input())\n\na=[]\n        \nfor i in range(n):\n    x,y=raw_input().split()\n    x=int(x)\n    a.append([x,y])\nfirst=-1\nlast=-1\nans=0\nfor i in range(n):\n    if(a[i][1]=='P'):\n        if(first==-1):\n            first=i\n        else:\n            ans+=solv(a[last][0],a[i][0],a[last+1:i])\n        last=i\n    ans1=0\nr=[]\nb=[]\n#print(ans)\nif(first!=-1):\n    for i in a[:first]:\n        if(i[1]=='R'):\n            r.append(i[0])\n        elif(i[1]=='B'):\n            b.append(i[0])\n    for i in range(len(r)-1):\n        ans+=r[i+1]-r[i]\n    for i in range(len(b)-1):\n        ans+=b[i+1]-b[i]\n    if(len(r)):\n        ans+=a[first][0]-r[-1]\n    if(len(b)):\n        ans+=a[first][0]-b[-1]\n    r=[]\n    b=[]\n#    print(ans,r,b,first,a[:1])\n    for i in a[last:]:\n        if(i[1]=='R'):\n            r.append(i[0])\n        elif(i[1]=='B'):\n            b.append(i[0])\n    for i in range(len(r)-1):\n        ans+=r[i+1]-r[i]\n    for i in range(len(b)-1):\n        ans+=b[i+1]-b[i]\n    if(len(r)):\n        ans+=r[0]-a[last][0]\n    if(len(b)):\n        ans+=b[0]-a[last][0]\nelse:\n    r=[]\n    b=[]\n    \n    for i in a:\n        if(i[1]=='R'):\n            r.append(i[0])\n        elif(i[1]=='B'):\n            b.append(i[0])\n    for i in range(len(r)-1):\n        ans+=r[i+1]-r[i]\n    for i in range(len(b)-1):\n        ans+=b[i+1]-b[i]\nprint(ans)\n\n\n\n\n",
        "correct": true,
        "task_id": "0685",
        "depth": 1
    },
    {
        "description": "Let \\mathrm{popcount}(n) be the number of `1`s in the binary representation of n. For example, \\mathrm{popcount}(3) = 2, \\mathrm{popcount}(7) = 3, and \\mathrm{popcount}(0) = 0.\n\nLet f(n) be the number of times the following operation will be done when we repeat it until n becomes 0: \"replace n with the remainder when n is divided by \\mathrm{popcount}(n).\" (It can be proved that, under the constraints of this problem, n always becomes 0 after a finite number of operations.)\n\nFor example, when n=7, it becomes 0 after two operations, as follows:\n\n* \\mathrm{popcount}(7)=3, so we divide 7 by 3 and replace it with the remainder, 1.\n* \\mathrm{popcount}(1)=1, so we divide 1 by 1 and replace it with the remainder, 0.\n\n\n\nYou are given an integer X with N digits in binary. For each integer i such that 1 \\leq i \\leq N, let X_i be what X becomes when the i-th bit from the top is inverted. Find f(X_1), f(X_2), \\ldots, f(X_N).\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* X is an integer with N digits in binary, possibly with leading zeros.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nX\n\n\nOutput\n\nPrint N lines. The i-th line should contain the value f(X_i).\n\nExamples\n\nInput\n\n3\n011\n\n\nOutput\n\n2\n1\n1\n\n\nInput\n\n23\n00110111001011011001110\n\n\nOutput\n\n2\n1\n2\n2\n1\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n1\n3",
        "task_name": "p02609 AIsing Programming Contest 2020 - Anything Goes to Zero",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "FAST_IO = 1\nif FAST_IO:\n    import io, sys, atexit\n    rr = iter(sys.stdin.read().splitlines()).next\n    sys.stdout = _OUTPUT_BUFFER = io.BytesIO()\n\n    @atexit.register\n    def write():\n        sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\nelse:\n    rr = raw_input\nrri = lambda: int(rr())\nrrm = lambda: map(int, rr().split())\nrrmm = lambda n: [rrm() for _ in xrange(n)]\n\n\ndic = {}\ndef f(x):\n    if x in dic:\n        return dic[x]\n    if x== 0:\n        return 0\n    tmp = x% bin(x).count('1')\n    dic[x] = f(tmp)+1\n    return dic[x]\n    \nN = rri()\nnum = int('0b'+rr(),2)\ncount = bin(num).count('1')\nfor i in range(N):\n    if not num & (1<<(N-i-1)):\n        cur_count = count+1\n    else:\n        cur_count =count-1\n    if cur_count ==0:\n        print(0)\n    else:\n        cur_num = num ^ (1<<(N-i-1))\n        cur_num = cur_num%cur_count\n        print(f(cur_num)+1)\n",
        "correct": false,
        "task_id": "0687",
        "depth": 1
    },
    {
        "description": "You are given four digits N_1, N_2, N_3 and N_4. Determine if these can be arranged into the sequence of digits \"1974\".\n\nConstraints\n\n* 0 \\leq N_1, N_2, N_3, N_4 \\leq 9\n* N_1, N_2, N_3 and N_4 are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN_1 N_2 N_3 N_4\n\n\nOutput\n\nIf N_1, N_2, N_3 and N_4 can be arranged into the sequence of digits \"1974\", print `YES`; if they cannot, print `NO`.\n\nExamples\n\nInput\n\n1 7 9 4\n\n\nOutput\n\nYES\n\n\nInput\n\n1 9 7 4\n\n\nOutput\n\nYES\n\n\nInput\n\n1 2 9 1\n\n\nOutput\n\nNO\n\n\nInput\n\n4 9 0 8\n\n\nOutput\n\nNO",
        "task_name": "p03149 KEYENCE Programming Contest 2019 - Beginning",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "num_string = raw_input()\n\n\nnum_hash = {'1': True, '9': True, '7': True, '4': True}\n\nfor s in num_string:\n  if num_hash.has_key(s):\n    del num_hash[s]\n\nif len(num_hash) == 0:\n  print(\"YES\")\nelse:\n  print(\"NO\")",
        "correct": true,
        "task_id": "0688",
        "depth": 1
    },
    {
        "description": "We have a 2 \\times N grid. We will denote the square at the i-th row and j-th column (1 \\leq i \\leq 2, 1 \\leq j \\leq N) as (i, j).\n\nYou are initially in the top-left square, (1, 1). You will travel to the bottom-right square, (2, N), by repeatedly moving right or down.\n\nThe square (i, j) contains A_{i, j} candies. You will collect all the candies you visit during the travel. The top-left and bottom-right squares also contain candies, and you will also collect them.\n\nAt most how many candies can you collect when you choose the best way to travel?\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* 1 \\leq A_{i, j} \\leq 100 (1 \\leq i \\leq 2, 1 \\leq j \\leq N)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_{1, 1} A_{1, 2} ... A_{1, N}\nA_{2, 1} A_{2, 2} ... A_{2, N}\n\n\nOutput\n\nPrint the maximum number of candies that can be collected.\n\nExamples\n\nInput\n\n5\n3 2 2 4 1\n1 2 2 2 1\n\n\nOutput\n\n14\n\n\nInput\n\n4\n1 1 1 1\n1 1 1 1\n\n\nOutput\n\n5\n\n\nInput\n\n7\n3 3 4 5 4 5 3\n5 3 4 4 2 3 2\n\n\nOutput\n\n29\n\n\nInput\n\n1\n2\n3\n\n\nOutput\n\n5",
        "task_name": "p03449 AtCoder Beginner Contest 087 - Candies",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N=int(raw_input())\nA=raw_input().split(\" \")\nB=raw_input().split(\" \")\n\nA = map(int, A)\nB = map(int, B)\n\nmaxim=0\nfor i in xrange(1,N+1):\n\ttemp=sum(A[0:i]) + sum(B[i-1:N])\n\tprint(sum(A[0:i]),sum(B[i-1:N]))\n\tif maxim < temp:\n\t\tmaxim = temp\nprint(maxim)",
        "correct": false,
        "task_id": "0690",
        "depth": 1
    },
    {
        "description": "<image>\n\n\nMy grandmother uses a balance. The balance will balance if you place the same size on both of the two dishes, otherwise it will tilt to the heavier side. The weights of the 10 weights are 1g, 2g, 4g, 8g, 16g, 32g, 64g, 128g, 256g, 512g in order of lightness.\n\nMy grandmother says, \"Weigh up to about 1 kg in grams.\" \"Then, try to weigh the juice here,\" and my grandmother put the juice on the left plate and the 8g, 64g, and 128g weights on the right plate to balance. Then he answered, \"The total weight is 200g, so the juice is 200g. How is it correct?\"\n\nSince the weight of the item to be placed on the left plate is given, create a program that outputs the weight to be placed on the right plate in order of lightness when balancing with the item of the weight given by the balance. However, the weight of the item to be weighed shall be less than or equal to the total weight of all weights (= 1023g).\n\nHint\n\nThe weight of the weight is 2 to the nth power (n = 0, 1, .... 9) g.\n\n\n\nInput\n\nGiven multiple datasets. For each dataset, the weight of the item to be placed on the left plate is given in one line. Please process until the end of the input. The number of datasets does not exceed 50.\n\nOutput\n\nFor each data set, separate the weights (ascending order) to be placed on the right plate with one blank and output them on one line.\n\nExample\n\nInput\n\n5\n7\n127\n\n\nOutput\n\n1 4\n1 2 4\n1 2 4 8 16 32 64",
        "task_name": "p00031 Weight",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n\nwhile True:\n\ttry:\n\t\tn = input()\n\texcept:\n\t\tbreak\n\tans = []\n\tfor j in range(10):\n\t\tif n & (2 ** j):\n\t\t\tans.append(str(2 ** j))\n\tprint(\" \".join(ans))\n",
        "correct": true,
        "task_id": "0692",
        "depth": 2
    },
    {
        "description": "Write a program which finds the greatest common divisor of two natural numbers a and b\n\nHint\n\nYou can use the following observation:\n\nFor integers x and y, if x \u2265 y, then gcd(x, y) = gcd(y, x%y)\n\nConstrants\n\n1 \u2264 a, b \u2264 109\n\nInput\n\na and b are given in a line sparated by a single space.\n\nOutput\n\nOutput the greatest common divisor of a and b.\n\nExamples\n\nInput\n\n54 20\n\n\nOutput\n\n2\n\n\nInput\n\n147 105\n\n\nOutput\n\n21",
        "task_name": "p02256 Greatest Common Divisor",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\nfrom sys import stdin\na, b = (int(s) for s in stdin.readline().split())\nwhile b:\n    a, b = b, a % b\nprint(a)",
        "correct": true,
        "task_id": "0693",
        "depth": 1
    },
    {
        "description": "IA has so many colorful magnets on her fridge! Exactly one letter is written on each magnet, 'a' or 'b'. She loves to play with them, placing all magnets in a row. However, the girl is quickly bored and usually thinks how to make her entertainment more interesting.\n\nToday, when IA looked at the fridge, she noticed that the word formed by magnets is really messy. \"It would look much better when I'll swap some of them!\" \u2014 thought the girl \u2014 \"but how to do it?\". After a while, she got an idea. IA will look at all prefixes with lengths from 1 to the length of the word and for each prefix she will either reverse this prefix or leave it as it is. She will consider the prefixes in the fixed order: from the shortest to the largest. She wants to get the lexicographically smallest possible word after she considers all prefixes. Can you help her, telling which prefixes should be chosen for reversing?\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds:\n\n  * a is a prefix of b, but a \u2260 b;\n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b.\n\nInput\n\nThe first and the only line contains a string s (1 \u2264 |s| \u2264 1000), describing the initial string formed by magnets. The string s consists only of characters 'a' and 'b'.\n\nOutput\n\nOutput exactly |s| integers. If IA should reverse the i-th prefix (that is, the substring from 1 to i), the i-th integer should be equal to 1, and it should be equal to 0 otherwise.\n\nIf there are multiple possible sequences leading to the optimal answer, print any of them.\n\nExamples\n\nInput\n\nbbab\n\n\nOutput\n\n0 1 1 0\n\n\nInput\n\naaaaa\n\n\nOutput\n\n1 0 0 0 1\n\nNote\n\nIn the first example, IA can reverse the second and the third prefix and get a string \"abbb\". She cannot get better result, since it is also lexicographically smallest string obtainable by permuting characters of the initial string.\n\nIn the second example, she can reverse any subset of prefixes \u2014 all letters are 'a'.",
        "task_name": "1043_C. Smallest Word",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from collections import defaultdict\nimport sys\ns = raw_input()\n\nmina = (s[0],'0')\nmaxa = (s[0],'0')\n\nfor i in range(1,len(s)):\n    str1 = (mina[0] + s[i])[::-1]\n    str2 = (mina[0] + s[i])\n    str3 = (maxa[0] + s[i])[::-1]\n    str4 = (maxa[0] + s[i])\n    min_s = min(str1,str2,str3,str4)\n    max_s = max(str1,str2,str3,str4)\n    if min_s == str1:\n        mina = (str1,mina[1] + '1')\n    elif min_s == str2:\n        mina = (str2,mina[1] + '0')\n    elif min_s == str3:\n        mina = (str3,mina[1] + '1')\n    else:\n        mina = (str4,mina[1] + '0')\n\n    if max_s == str1:\n        maxa = (str1,maxa[1] + '1')\n    elif min_s == str2:\n        maxa = (str2,maxa[1] + '0')\n    elif max_s == str3:\n        maxa = (str3,maxa[1] + '1')\n    else:\n        maxa = (str4,maxa[1] + '0')\n    #print(mina,maxa)\nprint(mina[1])\n\n#for i in range(n):\n#   query = raw_input()\n\n\n#   print(count)\n#   sys.stdout.flush()\n",
        "correct": false,
        "task_id": "0695",
        "depth": 1
    },
    {
        "description": "Vova plans to go to the conference by train. Initially, the train is at the point 1 and the destination point of the path is the point L. The speed of the train is 1 length unit per minute (i.e. at the first minute the train is at the point 1, at the second minute \u2014 at the point 2 and so on).\n\nThere are lanterns on the path. They are placed at the points with coordinates divisible by v (i.e. the first lantern is at the point v, the second is at the point 2v and so on).\n\nThere is also exactly one standing train which occupies all the points from l to r inclusive.\n\nVova can see the lantern at the point p if p is divisible by v and there is no standing train at this position (p not\u2208 [l; r]). Thus, if the point with the lantern is one of the points covered by the standing train, Vova can't see this lantern.\n\nYour problem is to say the number of lanterns Vova will see during the path. Vova plans to go to t different conferences, so you should answer t independent queries.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of queries.\n\nThen t lines follow. The i-th line contains four integers L_i, v_i, l_i, r_i (1 \u2264 L, v \u2264 10^9, 1 \u2264 l \u2264 r \u2264 L) \u2014 destination point of the i-th path, the period of the lantern appearance and the segment occupied by the standing train.\n\nOutput\n\nPrint t lines. The i-th line should contain one integer \u2014 the answer for the i-th query.\n\nExample\n\nInput\n\n4\n10 2 3 7\n100 51 51 51\n1234 1 100 199\n1000000000 1 1 1000000000\n\n\nOutput\n\n3\n0\n1134\n0\n\nNote\n\nFor the first example query, the answer is 3. There are lanterns at positions 2, 4, 6, 8 and 10, but Vova didn't see the lanterns at positions 4 and 6 because of the standing train.\n\nFor the second example query, the answer is 0 because the only lantern is at the point 51 and there is also a standing train at this point.\n\nFor the third example query, the answer is 1134 because there are 1234 lanterns, but Vova didn't see the lanterns from the position 100 to the position 199 inclusive.\n\nFor the fourth example query, the answer is 0 because the standing train covers the whole path.",
        "task_name": "1066_A. Vova and Train",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "t = input()\nlist = []\n\nfor arr in range(0, t):\n    list.append(map(int, raw_input().split()))\n\nfor data in list:\n    L = data[0]\n    v = data[1]\n    head = data[2]\n    tale = data[3]\n\n    lampsTotal = int(L/v)\n\n    if tale == head:\n        lampsMissed = int(head/v)\n    else:\n        lampsMissed = int((tale - head + 1)/v)\n    \n    print (lampsTotal - lampsMissed)\n",
        "correct": false,
        "task_id": "0696",
        "depth": 1
    },
    {
        "description": "Dora loves adventures quite a lot. During some journey she encountered an amazing city, which is formed by n streets along the Eastern direction and m streets across the Southern direction. Naturally, this city has nm intersections. At any intersection of i-th Eastern street and j-th Southern street there is a monumental skyscraper. Dora instantly became curious and decided to explore the heights of the city buildings.\n\nWhen Dora passes through the intersection of the i-th Eastern and j-th Southern street she examines those two streets. After Dora learns the heights of all the skyscrapers on those two streets she wonders: how one should reassign heights to the skyscrapers on those two streets, so that the maximum height would be as small as possible and the result of comparing the heights of any two skyscrapers on one street wouldn't change.\n\nFormally, on every of nm intersections Dora solves an independent problem. She sees n + m - 1 skyscrapers and for each of them she knows its real height. Moreover, any two heights can be compared to get a result \"greater\", \"smaller\" or \"equal\". Now Dora wants to select some integer x and assign every skyscraper a height from 1 to x. When assigning heights, Dora wants to preserve the relative order of the skyscrapers in both streets. That is, the result of any comparison of heights of two skyscrapers in the current Eastern street shouldn't change and the result of any comparison of heights of two skyscrapers in current Southern street shouldn't change as well. Note that skyscrapers located on the Southern street are not compared with skyscrapers located on the Eastern street only. However, the skyscraper located at the streets intersection can be compared with both Southern and Eastern skyscrapers. For every intersection Dora wants to independently calculate the minimum possible x.\n\nFor example, if the intersection and the two streets corresponding to it look as follows:\n\n<image>\n\nThen it is optimal to replace the heights of the skyscrapers as follows (note that all comparisons \"less\", \"equal\", \"greater\" inside the Eastern street and inside the Southern street are preserved)\n\n<image>\n\nThe largest used number is 5, hence the answer for this intersection would be 5.\n\nHelp Dora to compute the answers for each intersection.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 1000) \u2014 the number of streets going in the Eastern direction and the number of the streets going in Southern direction.\n\nEach of the following n lines contains m integers a_{i,1}, a_{i,2}, ..., a_{i,m} (1 \u2264 a_{i,j} \u2264 10^9). The integer a_{i,j}, located on j-th position in the i-th line denotes the height of the skyscraper at the intersection of the i-th Eastern street and j-th Southern direction.\n\nOutput\n\nPrint n lines containing m integers each. The integer x_{i,j}, located on j-th position inside the i-th line is an answer for the problem at the intersection of i-th Eastern street and j-th Southern street.\n\nExamples\n\nInput\n\n\n2 3\n1 2 1\n2 1 2\n\n\nOutput\n\n\n2 2 2 \n2 2 2 \n\n\nInput\n\n\n2 2\n1 2\n3 4\n\n\nOutput\n\n\n2 3 \n3 2 \n\nNote\n\nIn the first example, it's not possible to decrease the maximum used height for the problem at any intersection, hence we don't have to change any heights.\n\nIn the second example, the answers are as follows: \n\n  * For the intersection of the first line and the first column <image>\n  * For the intersection of the first line and the second column <image>\n  * For the intersection of the second line and the first column <image>\n  * For the intersection of the second line and the second column <image>",
        "task_name": "1137_A. Skyscrapers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nn,m = map(int, raw_input().split(' '))\nlines = stdin.readlines()\nrows = [None]*n\nfor i in xrange(n):\n\trows[i] = map(int, lines[i].split(' '))\n\ndef equivalently_sorted_list(xs):\n\t'example: [10,20,14,10] -> ([1,3,2,1], 3). returns list of positive integers with equivalent pairwise comparisons (<,=,>) to list.'\n\n\txs = sorted([xs[i]*1000+i for i in xrange(len(xs))])\n\tys = [0]*len(xs)\n\tlast_x = None\n\tj = 0\n\tfor w in xs:\n\t\tx = w/1000\n\t\ti = w%1000\n\t\tif x == last_x:\n\t\t\tys[i] = j\n\t\telse:\n\t\t\tj += 1\n\t\t\tys[i] = j\n\t\tlast_x = x\n\treturn ys, j\n\ncolumns = [[rows[i][j] for i in xrange(n)] for j in xrange(m)]\n\nrows_ordered = [equivalently_sorted_list(row) for row in rows]\ncolumns_ordered = [equivalently_sorted_list(column) for column in columns]\n\ndef answer(i,j):\n\tif rows_ordered[i][0][j] > columns_ordered[j][0][i]:\n\t\tdifference = rows_ordered[i][0][j] - columns_ordered[j][0][i]\n\t\treturn max(rows_ordered[i][1], columns_ordered[j][1] + difference)\n\telse:\n\t\tdifference = columns_ordered[j][0][i] - rows_ordered[i][0][j]\n\t\treturn max(columns_ordered[j][1], rows_ordered[i][1] + difference)\n\nanswer_matrix = [[answer(i,j) for i in xrange(n)] for j in xrange(m)]\n\nstdout.write('\\n'.join([' '.join([str(answer_matrix[j][i]) for j in xrange(m)]) for i in xrange(n)]))",
        "correct": true,
        "task_id": "0697",
        "depth": 1
    },
    {
        "description": "Ivan is going to sleep now and wants to set his alarm clock. There will be many necessary events tomorrow, the i-th of them will start during the x_i-th minute. Ivan doesn't want to skip any of the events, so he has to set his alarm clock in such a way that it rings during minutes x_1, x_2, ..., x_n, so he will be awake during each of these minutes (note that it does not matter if his alarm clock will ring during any other minute).\n\nIvan can choose two properties for the alarm clock \u2014 the first minute it will ring (let's denote it as y) and the interval between two consecutive signals (let's denote it by p). After the clock is set, it will ring during minutes y, y + p, y + 2p, y + 3p and so on.\n\nIvan can choose any minute as the first one, but he cannot choose any arbitrary value of p. He has to pick it among the given values p_1, p_2, ..., p_m (his phone does not support any other options for this setting).\n\nSo Ivan has to choose the first minute y when the alarm clock should start ringing and the interval between two consecutive signals p_j in such a way that it will ring during all given minutes x_1, x_2, ..., x_n (and it does not matter if his alarm clock will ring in any other minutes).\n\nYour task is to tell the first minute y and the index j such that if Ivan sets his alarm clock with properties y and p_j it will ring during all given minutes x_1, x_2, ..., x_n or say that it is impossible to choose such values of the given properties. If there are multiple answers, you can print any.\n\nInput\n\nThe first line of the input contains two integers n and m (2 \u2264 n \u2264 3 \u22c5 10^5, 1 \u2264 m \u2264 3 \u22c5 10^5) \u2014 the number of events and the number of possible settings for the interval between signals.\n\nThe second line of the input contains n integers x_1, x_2, ..., x_n (1 \u2264 x_i \u2264 10^{18}), where x_i is the minute when i-th event starts. It is guaranteed that all x_i are given in increasing order (i. e. the condition x_1 < x_2 < ... < x_n holds).\n\nThe third line of the input contains m integers p_1, p_2, ..., p_m (1 \u2264 p_j \u2264 10^{18}), where p_j is the j-th option for the interval between two consecutive signals.\n\nOutput\n\nIf it's impossible to choose such values y and j so all constraints are satisfied, print \"NO\" in the first line.\n\nOtherwise print \"YES\" in the first line. Then print two integers y (1 \u2264 y \u2264 10^{18}) and j (1 \u2264 j \u2264 m) in the second line, where y is the first minute Ivan's alarm clock should start ringing and j is the index of the option for the interval between two consecutive signals (options are numbered from 1 to m in the order they are given input). These values should be chosen in such a way that the alarm clock will ring during all given minutes x_1, x_2, ..., x_n. If there are multiple answers, you can print any.\n\nExamples\n\nInput\n\n\n3 5\n3 12 18\n2 6 5 3 3\n\n\nOutput\n\n\nYES\n3 4\n\n\nInput\n\n\n4 2\n1 5 17 19\n4 5\n\n\nOutput\n\n\nNO\n\n\nInput\n\n\n4 2\n1 5 17 19\n2 1\n\n\nOutput\n\n\nYES\n1 1",
        "task_name": "1155_C. Alarm Clocks Everywhere",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom functools import reduce\nfrom fractions import gcd\n\nrint = lambda: int(stdin.readline())\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrint_2d = lambda n: [rint() for _ in range(n)]\nrints_2d = lambda n: [rints() for _ in range(n)]\n\nn, m = rints()\nx, p = rints(), rints()\ng = reduce(gcd, x)\n\nfor i in range(m):\n    if g % p[i] == 0:\n        print('YES\\n%d %d' % (x[0], i + 1))\n        exit()\nprint('NO')\n",
        "correct": false,
        "task_id": "0698",
        "depth": 1
    },
    {
        "description": "Polycarp analyzes the prices of the new berPhone. At his disposal are the prices for n last days: a_1, a_2, ..., a_n, where a_i is the price of berPhone on the day i.\n\nPolycarp considers the price on the day i to be bad if later (that is, a day with a greater number) berPhone was sold at a lower price. For example, if n=6 and a=[3, 9, 4, 6, 7, 5], then the number of days with a bad price is 3 \u2014 these are days 2 (a_2=9), 4 (a_4=6) and 5 (a_5=7).\n\nPrint the number of days with a bad price.\n\nYou have to answer t independent data sets.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer n (1 \u2264 n \u2264 150000) \u2014 the number of days. The second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^6), where a_i is the price on the i-th day.\n\nIt is guaranteed that the sum of n over all data sets in the test does not exceed 150000.\n\nOutput\n\nPrint t integers, the j-th of which should be equal to the number of days with a bad price in the j-th input data set.\n\nExample\n\nInput\n\n\n5\n6\n3 9 4 6 7 5\n1\n1000000\n2\n2 1\n10\n31 41 59 26 53 58 97 93 23 84\n7\n3 2 1 2 3 4 5\n\n\nOutput\n\n\n3\n0\n1\n8\n2",
        "task_name": "1213_B. Bad Prices",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "for i in range(input()):\n\tn=input()\n\tl=[int(j) for j in raw_input().split(' ')]\n\tminAr = l[-1]\n\tsm =0\n\tfor j in range(len(l)-2,-1,-1):\n\t\tif l[j] < minAr:\n\t\t\tminAr = l[j]\n\t\telif l[j] > minAr:\n\t\t\tsm+=1\n\tprint(sm)\n",
        "correct": true,
        "task_id": "0700",
        "depth": 2
    },
    {
        "description": "In order to do some research, n^2 labs are built on different heights of a mountain. Let's enumerate them with integers from 1 to n^2, such that the lab with the number 1 is at the lowest place, the lab with the number 2 is at the second-lowest place, \u2026, the lab with the number n^2 is at the highest place.\n\nTo transport water between the labs, pipes are built between every pair of labs. A pipe can transport at most one unit of water at a time from the lab with the number u to the lab with the number v if u > v.\n\nNow the labs need to be divided into n groups, each group should contain exactly n labs. The labs from different groups can transport water to each other. The sum of units of water that can be sent from a group A to a group B is equal to the number of pairs of labs (u, v) such that the lab with the number u is from the group A, the lab with the number v is from the group B and u > v. Let's denote this value as f(A,B) (i.e. f(A,B) is the sum of units of water that can be sent from a group A to a group B).\n\nFor example, if n=3 and there are 3 groups X, Y and Z: X = \\{1, 5, 6\\}, Y = \\{2, 4, 9\\} and Z = \\{3, 7, 8\\}. In this case, the values of f are equal to:\n\n  * f(X,Y)=4 because of 5 \u2192 2, 5 \u2192 4, 6 \u2192 2, 6 \u2192 4, \n  * f(X,Z)=2 because of 5 \u2192 3, 6 \u2192 3, \n  * f(Y,X)=5 because of 2 \u2192 1, 4 \u2192 1, 9 \u2192 1, 9 \u2192 5, 9 \u2192 6, \n  * f(Y,Z)=4 because of 4 \u2192 3, 9 \u2192 3, 9 \u2192 7, 9 \u2192 8, \n  * f(Z,X)=7 because of 3 \u2192 1, 7 \u2192 1, 7 \u2192 5, 7 \u2192 6, 8 \u2192 1, 8 \u2192 5, 8 \u2192 6, \n  * f(Z,Y)=5 because of 3 \u2192 2, 7 \u2192 2, 7 \u2192 4, 8 \u2192 2, 8 \u2192 4. \n\n\n\nPlease, divide labs into n groups with size n, such that the value min f(A,B) over all possible pairs of groups A and B (A \u2260 B) is maximal.\n\nIn other words, divide labs into n groups with size n, such that minimum number of the sum of units of water that can be transported from a group A to a group B for every pair of different groups A and B (A \u2260 B) as big as possible.\n\nNote, that the example above doesn't demonstrate an optimal division, but it demonstrates how to calculate the values f for some division.\n\nIf there are many optimal divisions, you can find any.\n\nInput\n\nThe only line contains one number n (2 \u2264 n \u2264 300).\n\nOutput\n\nOutput n lines:\n\nIn the i-th line print n numbers, the numbers of labs of the i-th group, in any order you want.\n\nIf there are multiple answers, that maximize the minimum number of the sum of units of water that can be transported from one group the another, you can print any.\n\nExample\n\nInput\n\n\n3\n\n\nOutput\n\n\n2 8 5\n9 3 4\n7 6 1\n\nNote\n\nIn the first test we can divide 9 labs into groups \\{2, 8, 5\\}, \\{9, 3, 4\\}, \\{7, 6, 1\\}.\n\nFrom the first group to the second group we can transport 4 units of water (8 \u2192 3, 8 \u2192 4, 5 \u2192 3, 5 \u2192 4).\n\nFrom the first group to the third group we can transport 5 units of water (2 \u2192 1, 8 \u2192 7, 8 \u2192 6, 8 \u2192 1, 5 \u2192 1).\n\nFrom the second group to the first group we can transport 5 units of water (9 \u2192 2, 9 \u2192 8, 9 \u2192 5, 3 \u2192 2, 4 \u2192 2).\n\nFrom the second group to the third group we can transport 5 units of water (9 \u2192 7, 9 \u2192 6, 9 \u2192 1, 3 \u2192 1, 4 \u2192 1).\n\nFrom the third group to the first group we can transport 4 units of water (7 \u2192 2, 7 \u2192 5, 6 \u2192 2, 6 \u2192 5).\n\nFrom the third group to the second group we can transport 4 units of water (7 \u2192 3, 7 \u2192 4, 6 \u2192 3, 6 \u2192 4).\n\nThe minimal number of the sum of units of water, that can be transported from one group to another is equal to 4. It can be proved, that it is impossible to make a better division.",
        "task_name": "1236_C. Labs",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys,math,fractions,bisect\ndef fi():\n    return int(sys.stdin.readline())\n\ndef fi2():\n    return map(int, sys.stdin.readline().split())\n\ndef fi3():\n    return sys.stdin.readline()\n\ndef fo(*args):\n    for s in args:\n        sys.stdout.write(str(s)+' ')\n    sys.stdout.write('\\n')\nINF=2000000000\nMOD=10**9+7\nsys.setrecursionlimit(INF)\n\n#main\nn=fi()\nans=[[] for i in range(n)]\n\nx=1\nstart=0\nwhile x<=n**2:\n    for i in range(start,start+n):\n        ans[i%n].append(x)\n        x+=1\n    start+=1\nfor i in range(n):\n    for j in range(n):\n        ans[i][j]=str(ans[i][j])\nfor i in range(n):\n    fo(\" \".join(ans[i]))\n        \n        \n    \n    \n           \n\n                           \n                \n\n            \n        \n\n        \n        \n        \n    \n    \n    \n            \n\n\n\n\n    \n            \n\n\n    \n\n        \n    \n    \n        \n        \n        \n    \n    \n    \n            \n            \n            \n            \n    \n                \n    \n        \n    \n\n        \n        \n    \n\n\n    \n    \n            \n                \n            \n            \n        \n    \n    \n        \n    \n    \n    \n            \n\n    \n    \n\n\n\n    \n        \n            \n    \n        \n",
        "correct": false,
        "task_id": "0701",
        "depth": 2
    },
    {
        "description": "Polycarp has built his own web service. Being a modern web service it includes login feature. And that always implies password security problems.\n\nPolycarp decided to store the hash of the password, generated by the following algorithm:\n\n  1. take the password p, consisting of lowercase Latin letters, and shuffle the letters randomly in it to obtain p' (p' can still be equal to p); \n  2. generate two random strings, consisting of lowercase Latin letters, s_1 and s_2 (any of these strings can be empty); \n  3. the resulting hash h = s_1 + p' + s_2, where addition is string concatenation. \n\n\n\nFor example, let the password p = \"abacaba\". Then p' can be equal to \"aabcaab\". Random strings s1 = \"zyx\" and s2 = \"kjh\". Then h = \"zyxaabcaabkjh\".\n\nNote that no letters could be deleted or added to p to obtain p', only the order could be changed.\n\nNow Polycarp asks you to help him to implement the password check module. Given the password p and the hash h, check that h can be the hash for the password p.\n\nYour program should answer t independent test cases.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe first line of each test case contains a non-empty string p, consisting of lowercase Latin letters. The length of p does not exceed 100.\n\nThe second line of each test case contains a non-empty string h, consisting of lowercase Latin letters. The length of h does not exceed 100.\n\nOutput\n\nFor each test case print the answer to it \u2014 \"YES\" if the given hash h could be obtained from the given password p or \"NO\" otherwise.\n\nExample\n\nInput\n\n\n5\nabacaba\nzyxaabcaabkjh\nonetwothree\nthreetwoone\none\nzzonneyy\none\nnone\ntwenty\nten\n\n\nOutput\n\n\nYES\nYES\nNO\nYES\nNO\n\nNote\n\nThe first test case is explained in the statement.\n\nIn the second test case both s_1 and s_2 are empty and p'= \"threetwoone\" is p shuffled.\n\nIn the third test case the hash could not be obtained from the password.\n\nIn the fourth test case s_1= \"n\", s_2 is empty and p'= \"one\" is p shuffled (even thought it stayed the same). \n\nIn the fifth test case the hash could not be obtained from the password.",
        "task_name": "1278_A. Shuffle Hashing",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\nimport collections\ndef f(p,h):\n    cc = collections.Counter(p)\n    if len(h) < len(p):\n        return False\n    k = len(cc)\n    for i,e in enumerate(h):\n        if e in cc:\n            cc[e]-= 1\n            if cc[e] == 0:\n                k -= 1\n        if i-len(p) >=0:\n            if h[i - len(p)] in cc:\n                cc[h[i-len(p)]]+=1 \n                if cc[h[i-len(p)]] > 0:\n                    k +=1\n        if k == 0:\n            return True\n    return False\n\n\n\nfor _ in range(int(raw_input())):\n    p,h = raw_input(),raw_input()\n    print ('Yes' if f(p,h) else 'No').upper()",
        "correct": false,
        "task_id": "0702",
        "depth": 1
    },
    {
        "description": "Tanya wants to go on a journey across the cities of Berland. There are n cities situated along the main railroad line of Berland, and these cities are numbered from 1 to n. \n\nTanya plans her journey as follows. First of all, she will choose some city c_1 to start her journey. She will visit it, and after that go to some other city c_2 > c_1, then to some other city c_3 > c_2, and so on, until she chooses to end her journey in some city c_k > c_{k - 1}. So, the sequence of visited cities [c_1, c_2, ..., c_k] should be strictly increasing.\n\nThere are some additional constraints on the sequence of cities Tanya visits. Each city i has a beauty value b_i associated with it. If there is only one city in Tanya's journey, these beauty values imply no additional constraints. But if there are multiple cities in the sequence, then for any pair of adjacent cities c_i and c_{i + 1}, the condition c_{i + 1} - c_i = b_{c_{i + 1}} - b_{c_i} must hold.\n\nFor example, if n = 8 and b = [3, 4, 4, 6, 6, 7, 8, 9], there are several three possible ways to plan a journey:\n\n  * c = [1, 2, 4]; \n  * c = [3, 5, 6, 8]; \n  * c = [7] (a journey consisting of one city is also valid). \n\n\n\nThere are some additional ways to plan a journey that are not listed above.\n\nTanya wants her journey to be as beautiful as possible. The beauty value of the whole journey is the sum of beauty values over all visited cities. Can you help her to choose the optimal plan, that is, to maximize the beauty value of the journey?\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of cities in Berland.\n\nThe second line contains n integers b_1, b_2, ..., b_n (1 \u2264 b_i \u2264 4 \u22c5 10^5), where b_i is the beauty value of the i-th city.\n\nOutput\n\nPrint one integer \u2014 the maximum beauty of a journey Tanya can choose.\n\nExamples\n\nInput\n\n\n6\n10 7 1 9 10 15\n\n\nOutput\n\n\n26\n\n\nInput\n\n\n1\n400000\n\n\nOutput\n\n\n400000\n\n\nInput\n\n\n7\n8 9 26 11 12 29 14\n\n\nOutput\n\n\n55\n\nNote\n\nThe optimal journey plan in the first example is c = [2, 4, 5].\n\nThe optimal journey plan in the second example is c = [1].\n\nThe optimal journey plan in the third example is c = [3, 6].",
        "task_name": "1321_B. Journey Planning",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nseq = sorted(((int(x)-i,int(x)) for i,x in enumerate(input().split())), key=lambda x:x[0])\nd = dict()\nans = 0\nansb = 0\nfor g,val in seq:\n    try:\n        d[abs(g)] += val\n    except:\n        d[abs(g)] = val\n    ans = max(ans, d[abs(g)])\n    ansb = max(val, ansb)\nif ans == 0:\n    ans = ansb\nprint(ans)\n",
        "correct": false,
        "task_id": "0703",
        "depth": 1
    },
    {
        "description": "Denis was very sad after Nastya rejected him. So he decided to walk through the gateways to have some fun. And luck smiled at him! When he entered the first courtyard, he met a strange man who was selling something. \n\nDenis bought a mysterious item and it was... Random permutation generator! Denis could not believed his luck.\n\nWhen he arrived home, he began to study how his generator works and learned the algorithm. The process of generating a permutation consists of n steps. At the i-th step, a place is chosen for the number i (1 \u2264 i \u2264 n). The position for the number i is defined as follows:\n\n  * For all j from 1 to n, we calculate r_j \u2014 the minimum index such that j \u2264 r_j \u2264 n, and the position r_j is not yet occupied in the permutation. If there are no such positions, then we assume that the value of r_j is not defined. \n  * For all t from 1 to n, we calculate count_t \u2014 the number of positions 1 \u2264 j \u2264 n such that r_j is defined and r_j = t. \n  * Consider the positions that are still not occupied by permutation and among those we consider the positions for which the value in the count array is maximum. \n  * The generator selects one of these positions for the number i. The generator can choose any position. \n\n\n\nLet's have a look at the operation of the algorithm in the following example:\n\n<image>\n\nLet n = 5 and the algorithm has already arranged the numbers 1, 2, 3 in the permutation. Consider how the generator will choose a position for the number 4:\n\n  * The values of r will be r = [3, 3, 3, 4, \u00d7], where \u00d7 means an indefinite value. \n  * Then the count values will be count = [0, 0, 3, 1, 0]. \n  * There are only two unoccupied positions in the permutation: 3 and 4. The value in the count array for position 3 is 3, for position 4 it is 1. \n  * The maximum value is reached only for position 3, so the algorithm will uniquely select this position for number 4. \n\n\n\nSatisfied with his purchase, Denis went home. For several days without a break, he generated permutations. He believes that he can come up with random permutations no worse than a generator. After that, he wrote out the first permutation that came to mind p_1, p_2, \u2026, p_n and decided to find out if it could be obtained as a result of the generator.\n\nUnfortunately, this task was too difficult for him, and he asked you for help. It is necessary to define whether the written permutation could be obtained using the described algorithm if the generator always selects the position Denis needs.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^5) \u2014 the number of test cases. Then the descriptions of the test cases follow.\n\nThe first line of the test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the size of the permutation.\n\nThe second line of the test case contains n different integers p_1, p_2, \u2026, p_n (1 \u2264 p_i \u2264 n) \u2014 the permutation written by Denis.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 10^5.\n\nOutput\n\nPrint \"Yes\" if this permutation could be obtained as a result of the generator. Otherwise, print \"No\".\n\nAll letters can be displayed in any case.\n\nExample\n\nInput\n\n\n5\n5\n2 3 4 5 1\n1\n1\n3\n1 3 2\n4\n4 2 3 1\n5\n1 5 2 4 3\n\n\nOutput\n\n\nYes\nYes\nNo\nYes\nNo\n\nNote\n\nLet's simulate the operation of the generator in the first test.\n\nAt the 1 step, r = [1, 2, 3, 4, 5], count = [1, 1, 1, 1, 1]. The maximum value is reached in any free position, so the generator can choose a random position from 1 to 5. In our example, it chose 5.\n\nAt the 2 step, r = [1, 2, 3, 4, \u00d7], count = [1, 1, 1, 1, 0]. The maximum value is reached in positions from 1 to 4, so the generator can choose a random position among them. In our example, it chose 1.\n\nAt the 3 step, r = [2, 2, 3, 4, \u00d7], count = [0, 2, 1, 1, 0]. The maximum value is 2 and is reached only at the 2 position, so the generator will choose this position.\n\nAt the 4 step, r = [3, 3, 3, 4, \u00d7], count = [0, 0, 3, 1, 0]. The maximum value is 3 and is reached only at the 3 position, so the generator will choose this position.\n\nAt the 5 step, r = [4, 4, 4, 4, \u00d7], count = [0, 0, 0, 4, 0]. The maximum value is 4 and is reached only at the 4 position, so the generator will choose this position.\n\nIn total, we got a permutation of 2, 3, 4, 5, 1, that is, a generator could generate it.",
        "task_name": "1340_A. Nastya and Strange Generator",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    t = int(input())\n\n    for _ in range(t):\n        n = int(input())\n        p = [int(pi) - 1 for pi in input().split()]\n\n        idx = [0] * n\n        for i, j in enumerate(p):\n            idx[j] = i\n\n        poss = True\n        prev = idx[0]\n        end = n - 1\n\n        for i, j in enumerate(idx[1:]):\n            if prev != end and j != prev + 1:\n                poss = False\n                break\n            if prev == end:\n                end = prev - 1\n\n            prev = j\n\n        print(\"Yes\" if poss else \"No\")\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": false,
        "task_id": "0704",
        "depth": 2
    },
    {
        "description": "This is the easy version of the problem. The difference between the versions is the constraint on n and the required number of operations. You can make hacks only if all versions of the problem are solved.\n\nThere are two binary strings a and b of length n (a binary string is a string consisting of symbols 0 and 1). In an operation, you select a prefix of a, and simultaneously invert the bits in the prefix (0 changes to 1 and 1 changes to 0) and reverse the order of the bits in the prefix.\n\nFor example, if a=001011 and you select the prefix of length 3, it becomes 011011. Then if you select the entire string, it becomes 001001.\n\nYour task is to transform the string a into b in at most 3n operations. It can be proved that it is always possible.\n\nInput\n\nThe first line contains a single integer t (1\u2264 t\u2264 1000) \u2014 the number of test cases. Next 3t lines contain descriptions of test cases.\n\nThe first line of each test case contains a single integer n (1\u2264 n\u2264 1000) \u2014 the length of the binary strings.\n\nThe next two lines contain two binary strings a and b of length n.\n\nIt is guaranteed that the sum of n across all test cases does not exceed 1000.\n\nOutput\n\nFor each test case, output an integer k (0\u2264 k\u2264 3n), followed by k integers p_1,\u2026,p_k (1\u2264 p_i\u2264 n). Here k is the number of operations you use and p_i is the length of the prefix you flip in the i-th operation.\n\nExample\n\nInput\n\n\n5\n2\n01\n10\n5\n01011\n11100\n2\n01\n01\n10\n0110011011\n1000110100\n1\n0\n1\n\n\nOutput\n\n\n3 1 2 1\n6 5 2 5 3 1 2\n0\n9 4 1 2 10 4 1 2 1 5\n1 1\n\nNote\n\nIn the first test case, we have 01\u2192 11\u2192 00\u2192 10.\n\nIn the second test case, we have 01011\u2192 00101\u2192 11101\u2192 01000\u2192 10100\u2192 00100\u2192 11100.\n\nIn the third test case, the strings are already the same. Another solution is to flip the prefix of length 2, which will leave a unchanged.",
        "task_name": "1382_C1. Prefix Flip (Easy Version)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"\n    Satwik_Tiwari ;) .\n    21st july , 2020  - tuesday\n\"\"\"\n\n#===============================================================================================\n#importing some useful libraries.\nfrom __future__ import division, print_function\n\nfrom fractions import Fraction\nimport sys\nimport os\nfrom io import BytesIO, IOBase\n\nfrom itertools import *\nimport bisect\nfrom heapq import *\nfrom math import *\nfrom copy import *\nfrom collections import deque\nfrom collections import Counter as counter  # Counter(list)  return a dict with {key: count}\nfrom itertools import combinations as comb # if a = [1,2,3] then print(list(comb(a,2))) -----> [(1, 2), (1, 3), (2, 3)]\nfrom itertools import permutations as permutate\nfrom bisect import bisect_left as bl\n#If the element is already present in the list,\n# the left most position where element has to be inserted is returned.\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n#If the element is already present in the list,\n# the right most position where element has to be inserted is returned\n\n#==============================================================================================\n#fast I/O region\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n# inp = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n#===============================================================================================\n#some shortcuts\n\nmod = 1000000007\ndef inp(): return sys.stdin.readline().rstrip(\"\\r\\n\") #for fast input\ndef out(var): sys.stdout.write(str(var))  #for fast output, always take string\ndef lis(): return list(map(int, inp().split()))\ndef stringlis(): return list(map(str, inp().split()))\ndef sep(): return map(int, inp().split())\ndef strsep(): return map(str, inp().split())\n# def graph(vertex): return [[] for i in range(0,vertex+1)]\ndef zerolist(n): return [0]*n\ndef nextline(): out(\"\\n\")  #as stdout.write always print sring.\ndef testcase(t):\n    for p in range(t):\n        solve()\ndef printlist(a) :\n    for p in range(0,len(a)):\n        out(str(a[p]) + ' ')\ndef lcm(a,b): return (a*b)//gcd(a,b)\ndef power(a,b):\n    ans = 1\n    while(b>0):\n        if(b%2==1):\n            ans*=a\n        a*=a\n        b//=2\n    return ans\ndef ncr(n,r): return factorial(n)//(factorial(r)*factorial(max(n-r,1)))\ndef isPrime(n) :\n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) :\n        if (n % i == 0 or n % (i + 2) == 0) :\n            return False\n        i = i + 6\n    return True\n\n#===============================================================================================\n# code here ;))\n\n\ndef solve():\n    n = int(inp())\n    a = list(inp())\n    b = list(inp())\n    ans = []\n    for i in range(n-1,-1,-1):\n        if(a[i] == b[i]):\n            continue\n\n        if(a[0] != b[i]):\n            new = []\n            for j in range(i+1):\n                if(a[j] == '0'):\n                    new.append('1')\n                else:\n                    new.append('0')\n            new = new[::-1]\n            a = new + a[i+1:]\n            ans.append(i+1)\n        else:\n            ans.append(1)\n            if(a[0] == '0'):\n                a[0] = '1'\n            else:\n                a[0] = '0'\n            new = []\n            for j in range(i+1):\n                if(a[j] == '0'):\n                    new.append('1')\n                else:\n                    new.append('0')\n            new = new[::-1]\n            a = new + a[i+1:]\n            ans.append(i+1)\n\n    print(len(ans),end=' ')\n    print(' '.join(str(ans[i]) for i in range(len(ans))))\n\n\n\n\n# testcase(1)\ntestcase(int(inp()))\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "correct": true,
        "task_id": "0706",
        "depth": 2
    },
    {
        "description": "You are given an array a of length n, and an integer x. You can perform the following operation as many times as you would like (possibly zero): replace two adjacent elements of the array by their sum. For example, if the initial array was [3, 6, 9], in a single operation one can replace the last two elements by their sum, yielding an array [3, 15], or replace the first two elements to get an array [9, 9]. Note that the size of the array decreases after each operation.\n\nThe beauty of an array b=[b_1, \u2026, b_k] is defined as \u2211_{i=1}^k \\left\u2308 (b_i)/(x) \\right\u2309, which means that we divide each element by x, round it up to the nearest integer, and sum up the resulting values. For example, if x = 3, and the array is [4, 11, 6], the beauty of the array is equal to \\left\u2308 4/3 \\right\u2309 + \\left\u2308 11/3 \\right\u2309 + \\left\u2308 6/3 \\right\u2309 = 2 + 4 + 2 = 8.\n\nPlease determine the minimum and the maximum beauty you can get by performing some operations on the original array.\n\nInput\n\nThe first input line contains a single integer t \u2014 the number of test cases (1 \u2264 t \u2264 1000).\n\nThe first line of each test case contains two integers n and x (1 \u2264 n \u2264 10^5, 1 \u2264 x \u2264 10^9).\n\nThe next line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9), the elements of the array a. \n\nIt is guaranteed that the sum of values of n over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case output two integers \u2014 the minimal and the maximal possible beauty.\n\nExample\n\nInput\n\n\n2\n3 3\n3 6 9\n3 3\n6 4 11\n\n\nOutput\n\n\n6 6\n7 8\n\nNote\n\nIn the first test case the beauty of the array does not change if we perform any operations.\n\nIn the second example we can leave the array unchanged to attain the maximum beauty, and to get the minimum beauty one can replace two elements 4 and 11 with their sum, yielding an array [6, 15], which has its beauty equal to 7.",
        "task_name": "1471_A. Strange Partition",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import os\nimport sys\nfrom atexit import register\nfrom io import BytesIO\nsys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\nsys.stdout = BytesIO()\nregister(lambda: os.write(1, sys.stdout.getvalue()))\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nraw_input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\nfor _ in xrange(int(input())):\n    n, x = (int(q) for q in input().split())\n    lst = [int(q) for q in input().split()]\n    ans_min = (sum(lst)+x-1)//x\n    ans_max = sum([(val+x-1)//x for val in lst])\n    print(\"{} {}\".format(ans_min, ans_max))",
        "correct": true,
        "task_id": "0707",
        "depth": 1
    },
    {
        "description": "The \\text{gcdSum} of a positive integer is the gcd of that integer with its sum of digits. Formally, \\text{gcdSum}(x) = gcd(x,  sum of digits of  x) for a positive integer x. gcd(a, b) denotes the greatest common divisor of a and b \u2014 the largest integer d such that both integers a and b are divisible by d.\n\nFor example: \\text{gcdSum}(762) = gcd(762, 7 + 6 + 2)=gcd(762,15) = 3.\n\nGiven an integer n, find the smallest integer x \u2265 n such that \\text{gcdSum}(x) > 1.\n\nInput\n\nThe first line of input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. \n\nThen t lines follow, each containing a single integer n (1 \u2264 n \u2264 10^{18}).\n\nAll test cases in one test are different.\n\nOutput\n\nOutput t lines, where the i-th line is a single integer containing the answer to the i-th test case.\n\nExample\n\nInput\n\n\n3\n11\n31\n75\n\n\nOutput\n\n\n12\n33\n75\n\nNote\n\nLet us explain the three test cases in the sample.\n\nTest case 1: n = 11: \n\n\\text{gcdSum}(11) = gcd(11, 1 + 1) = gcd(11,\\ 2) = 1.\n\n\\text{gcdSum}(12) = gcd(12, 1 + 2) = gcd(12,\\ 3) = 3.\n\nSo the smallest number \u2265 11 whose gcdSum > 1 is 12.\n\nTest case 2: n = 31: \n\n\\text{gcdSum}(31) = gcd(31, 3 + 1) = gcd(31,\\ 4) = 1.\n\n\\text{gcdSum}(32) = gcd(32, 3 + 2) = gcd(32,\\ 5) = 1.\n\n\\text{gcdSum}(33) = gcd(33, 3 + 3) = gcd(33,\\ 6) = 3.\n\nSo the smallest number \u2265 31 whose gcdSum > 1 is 33.\n\nTest case 3: \\ n = 75: \n\n\\text{gcdSum}(75) = gcd(75, 7 + 5) = gcd(75,\\ 12) = 3.\n\nThe \\text{gcdSum} of 75 is already > 1. Hence, it is the answer.",
        "task_name": "1498_A. GCD Sum",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def gcd(a, b):\n\tif a < b:\n\t\ta, b = b, a\n\twhile b != 0:\n\t\ttemp = a % b\n\t\ta = b\n\t\tb = temp\n\treturn a\n\nn = int(input(\"n:\"))\ndata = []\nfor i in range(n):\n\tdata.append(int(input(\"data:\")))\ndef getSum(a):\n\ttemp = a\n\tt = 0\n\twhile temp:\n\t\tt += temp%10\n\t\ttemp /=10\n\tif gcd(a,t)>1:\n\t\treturn True,gcd(a,t)\n\telse:\n\t\treturn False,0\n\nfor i in data:\n\tj = i\n\twhile not getSum(j)[0]:\n\t\tj += 1\n\tprint(j)\n",
        "correct": false,
        "task_id": "0708",
        "depth": 2
    },
    {
        "description": "Vasya has been playing Plane of Tanks with his friends the whole year. Now it is time to divide the participants into several categories depending on their results. \n\nA player is given a non-negative integer number of points in each round of the Plane of Tanks. Vasya wrote results for each round of the last year. He has n records in total.\n\nIn order to determine a player's category consider the best result obtained by the player and the best results of other players. The player belongs to category: \n\n  * \"noob\" \u2014 if more than 50% of players have better results; \n  * \"random\" \u2014 if his result is not worse than the result that 50% of players have, but more than 20% of players have better results; \n  * \"average\" \u2014 if his result is not worse than the result that 80% of players have, but more than 10% of players have better results; \n  * \"hardcore\" \u2014 if his result is not worse than the result that 90% of players have, but more than 1% of players have better results; \n  * \"pro\" \u2014 if his result is not worse than the result that 99% of players have. \n\n\n\nWhen the percentage is calculated the player himself is taken into account. That means that if two players played the game and the first one gained 100 points and the second one 1000 points, then the first player's result is not worse than the result that 50% of players have, and the second one is not worse than the result that 100% of players have.\n\nVasya gave you the last year Plane of Tanks results. Help Vasya determine each player's category.\n\nInput\n\nThe first line contains the only integer number n (1 \u2264 n \u2264 1000) \u2014 a number of records with the players' results.\n\nEach of the next n lines contains a player's name and the amount of points, obtained by the player for the round, separated with a space. The name contains not less than 1 and no more than 10 characters. The name consists of lowercase Latin letters only. It is guaranteed that any two different players have different names. The amount of points, obtained by the player for the round, is a non-negative integer number and does not exceed 1000.\n\nOutput\n\nPrint on the first line the number m \u2014 the number of players, who participated in one round at least.\n\nEach one of the next m lines should contain a player name and a category he belongs to, separated with space. Category can be one of the following: \"noob\", \"random\", \"average\", \"hardcore\" or \"pro\" (without quotes). The name of each player should be printed only once. Player names with respective categories can be printed in an arbitrary order.\n\nExamples\n\nInput\n\n5\nvasya 100\nvasya 200\nartem 100\nkolya 200\nigor 250\n\n\nOutput\n\n4\nartem noob\nigor pro\nkolya random\nvasya random\n\n\nInput\n\n3\nvasya 200\nkolya 1000\nvasya 1000\n\n\nOutput\n\n2\nkolya pro\nvasya pro\n\nNote\n\nIn the first example the best result, obtained by artem is not worse than the result that 25% of players have (his own result), so he belongs to category \"noob\". vasya and kolya have best results not worse than the results that 75% players have (both of them and artem), so they belong to category \"random\". igor has best result not worse than the result that 100% of players have (all other players and himself), so he belongs to category \"pro\".\n\nIn the second example both players have the same amount of points, so they have results not worse than 100% players have, so they belong to category \"pro\".",
        "task_name": "175_B. Plane of Tanks: Pro",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nn = int(input());\nd = {};\nfor i in range (n):\n\t[s, a] = list(sys.stdin.readline().split());\n\tif s in d:\n\t\td[s] = max (d[s], int(a));\n\telse:\n\t\td[s] = int(a);\n\nn = len(d);\nprint (n);\nfor i, iv in d.items():\n\tcnt = 0;\n\tfor j, jv in d.items():\n\t\tif jv <= iv:\n\t\t\tcnt += 1;\n\trt = float (cnt) / n;\n\tif rt >= 0.99:\n\t\tprint (i + ' pro')\n\telif rt >= 0.9:\n\t\tprint (i + ' hardcore')\n\telif rt >= 0.8:\n\t\tprint (i + ' average')\n\telif rt >= 0.5:\n\t\tprint (i + ' random')\n\telif rt < 0.5:\n\t\tprint (i +  ' noob')\n",
        "correct": true,
        "task_id": "0709",
        "depth": 2
    },
    {
        "description": "Vasya is developing his own programming language VPL (Vasya Programming Language). Right now he is busy making the system of exceptions. He thinks that the system of exceptions must function like that.\n\nThe exceptions are processed by try-catch-blocks. There are two operators that work with the blocks:\n\n  1. The try operator. It opens a new try-catch-block. \n  2. The catch(<exception_type>, <message>) operator. It closes the try-catch-block that was started last and haven't yet been closed. This block can be activated only via exception of type <exception_type>. When we activate this block, the screen displays the <message>. If at the given moment there is no open try-catch-block, then we can't use the catch operator.\n\n\n\nThe exceptions can occur in the program in only one case: when we use the throw operator. The throw(<exception_type>) operator creates the exception of the given type.\n\nLet's suggest that as a result of using some throw operator the program created an exception of type a. In this case a try-catch-block is activated, such that this block's try operator was described in the program earlier than the used throw operator. Also, this block's catch operator was given an exception type a as a parameter and this block's catch operator is described later that the used throw operator. If there are several such try-catch-blocks, then the system activates the block whose catch operator occurs earlier than others. If no try-catch-block was activated, then the screen displays message \"Unhandled Exception\".\n\nTo test the system, Vasya wrote a program that contains only try, catch and throw operators, one line contains no more than one operator, the whole program contains exactly one throw operator.\n\nYour task is: given a program in VPL, determine, what message will be displayed on the screen.\n\nInput\n\nThe first line contains a single integer: n (1 \u2264 n \u2264 105) the number of lines in the program. Next n lines contain the program in language VPL. Each line contains no more than one operator. It means that input file can contain empty lines and lines, consisting only of spaces.\n\nThe program contains only operators try, catch and throw. It is guaranteed that the program is correct. It means that each started try-catch-block was closed, the catch operators aren't used unless there is an open try-catch-block. The program has exactly one throw operator. The program may have spaces at the beginning of a line, at the end of a line, before and after a bracket, a comma or a quote mark.\n\nThe exception type is a nonempty string, that consists only of upper and lower case english letters. The length of the string does not exceed 20 symbols. Message is a nonempty string, that consists only of upper and lower case english letters, digits and spaces. Message is surrounded with quote marks. Quote marks shouldn't be printed. The length of the string does not exceed 20 symbols.\n\nLength of any line in the input file does not exceed 50 symbols. \n\nOutput\n\nPrint the message the screen will show after the given program is executed.\n\nExamples\n\nInput\n\n8\ntry\n    try\n        throw ( AE ) \n    catch ( BE, \"BE in line 3\")\n\n    try\n    catch(AE, \"AE in line 5\") \ncatch(AE,\"AE somewhere\")\n\n\nOutput\n\nAE somewhere\n\n\nInput\n\n8\ntry\n    try\n        throw ( AE ) \n    catch ( AE, \"AE in line 3\")\n\n    try\n    catch(BE, \"BE in line 5\") \ncatch(AE,\"AE somewhere\")\n\n\nOutput\n\nAE in line 3\n\n\nInput\n\n8\ntry\n    try\n        throw ( CE ) \n    catch ( BE, \"BE in line 3\")\n\n    try\n    catch(AE, \"AE in line 5\") \ncatch(AE,\"AE somewhere\")\n\n\nOutput\n\nUnhandled Exception\n\nNote\n\nIn the first sample there are 2 try-catch-blocks such that try operator is described earlier than throw operator and catch operator is described later than throw operator: try-catch(BE,\"BE in line 3\") and try-catch(AE,\"AE somewhere\"). Exception type is AE, so the second block will be activated, because operator catch(AE,\"AE somewhere\") has exception type AE as parameter and operator catch(BE,\"BE in line 3\") has exception type BE.\n\nIn the second sample there are 2 try-catch-blocks such that try operator is described earlier than throw operator and catch operator is described later than throw operator: try-catch(AE,\"AE in line 3\") and try-catch(AE,\"AE somewhere\"). Exception type is AE, so both blocks can be activated, but only the first one will be activated, because operator catch(AE,\"AE in line 3\") is described earlier than catch(AE,\"AE somewhere\")\n\nIn the third sample there is no blocks that can be activated by an exception of type CE.",
        "task_name": "195_C. Try and Catch",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport math\n\n\ndef get_exc(s):\n    return s.split('(')[1].split(',')[0].strip()\n\n\ndef get_alert(s):\n    return s.split('\"')[1]\n\ndef solve(data, exception):\n    counter = 0\n    for x in data:\n        if x == 'try':\n            counter += 1\n        elif x.startswith('catch'):\n            exc = get_exc(x)\n            if exc == exception and not counter:\n                return get_alert(x)\n            counter = max(0, counter - 1)\n    return 'Unhandled Exception'\n\nif __name__ == '__main__':\n    sys.stdin.readline()\n    data = []\n    exception = None\n    for s in sys.stdin.readlines():\n        s = s.replace('\\n', '').strip()\n        \n        if s.startswith('throw'):\n            exception = s.split('(')[1].split(')')[0].strip()\n            continue\n        if not exception:\n            continue\n        \n        data.append(s)\n        \n    sys.stdout.write(str(solve(data, exception)))",
        "correct": true,
        "task_id": "0710",
        "depth": 1
    },
    {
        "description": "A colored stripe is represented by a horizontal row of n square cells, each cell is pained one of k colors. Your task is to repaint the minimum number of cells so that no two neighbouring cells are of the same color. You can use any color from 1 to k to repaint the cells.\n\nInput\n\nThe first input line contains two integers n and k (1 \u2264 n \u2264 5\u00b7105; 2 \u2264 k \u2264 26). The second line contains n uppercase English letters. Letter \"A\" stands for the first color, letter \"B\" stands for the second color and so on. The first k English letters may be used. Each letter represents the color of the corresponding cell of the stripe.\n\nOutput\n\nPrint a single integer \u2014 the required minimum number of repaintings. In the second line print any possible variant of the repainted stripe.\n\nExamples\n\nInput\n\n6 3\nABBACC\n\n\nOutput\n\n2\nABCACA\n\n\nInput\n\n3 2\nBBB\n\n\nOutput\n\n1\nBAB",
        "task_name": "219_C. Color Stripe",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#-*-coding=utf8-*-\n\nimport string\n\nn, k = map(int, raw_input().split())\ns = raw_input()\nalpha = string.uppercase[:k]\nans1 = list(s)\nans2 = list(s)\nrec1, rec2 = 0, 0\nfor i in range(0, len(s), 2):\n    neigh = ()\n    if (i > 0):\n        neigh += (s[i - 1], )\n    if (i < n - 1):\n        neigh += (s[i+1], )\n    if (i > 0 and s[i] == s[i - 1] or i < n - 1 and s[i] == s[i + 1]):\n        for c in alpha:\n            if c not in neigh:\n                chosen = c\n                break\n        else:\n            break\n        ans1[i] = chosen\n        rec1 += 1\n\nfor i in range(1, len(s), 2):\n    neigh = ()\n    if (i > 0):\n        neigh += (s[i - 1], )\n    if (i < n - 1):\n        neigh += (s[i + 1], )\n    if (i > 0 and s[i] == s[i - 1] or i < n - 1 and s[i] == s[i + 1]):\n        for c in alpha:\n            if c not in neigh:\n                chosen = c\n                break\n        else:\n            break\n        ans2[i] = chosen\n        rec2 += 1\n\nvalid1 = True\nfor i in range(1, len(ans1)):\n    if ans1[i] == ans1[i - 1]:\n        valid1 = False\n        break\n\nvalid2 = True\nfor i in range(1, len(ans2)):\n    if ans2[i] == ans2[i - 1]:\n        valid2 = False\n        break\n\nif (rec1 < rec2 and valid1 or not valid2):\n    print(rec1)\n    print(''.join(ans1))\nelse:\n    print(rec2)\n    print(''.join(ans2))",
        "correct": false,
        "task_id": "0711",
        "depth": 2
    },
    {
        "description": "Manao has invented a new mathematical term \u2014 a beautiful set of points. He calls a set of points on a plane beautiful if it meets the following conditions:\n\n  1. The coordinates of each point in the set are integers. \n  2. For any two points from the set, the distance between them is a non-integer. \n\n\n\nConsider all points (x, y) which satisfy the inequations: 0 \u2264 x \u2264 n; 0 \u2264 y \u2264 m; x + y > 0. Choose their subset of maximum size such that it is also a beautiful set of points.\n\nInput\n\nThe single line contains two space-separated integers n and m (1 \u2264 n, m \u2264 100).\n\nOutput\n\nIn the first line print a single integer \u2014 the size k of the found beautiful set. In each of the next k lines print a pair of space-separated integers \u2014 the x- and y- coordinates, respectively, of a point from the set.\n\nIf there are several optimal solutions, you may print any of them.\n\nExamples\n\nInput\n\n2 2\n\n\nOutput\n\n3\n0 1\n1 2\n2 0\n\n\nInput\n\n4 3\n\n\nOutput\n\n4\n0 3\n2 1\n3 0\n4 2\n\nNote\n\nConsider the first sample. The distance between points (0, 1) and (1, 2) equals <image>, between (0, 1) and (2, 0) \u2014 <image>, between (1, 2) and (2, 0) \u2014 <image>. Thus, these points form a beautiful set. You cannot form a beautiful set with more than three points out of the given points. Note that this is not the only solution.",
        "task_name": "268_C. Beautiful Sets of Points",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def main():\n    x,y = map(int,raw_input().split())\n\n    n = min(x,y)+1\n    print(n)\n    for i in range(n):\n        print(' '.join([str(i)]*2))\n\nmain()",
        "correct": false,
        "task_id": "0712",
        "depth": 1
    },
    {
        "description": "Xenia has a set of weights and pan scales. Each weight has an integer weight from 1 to 10 kilos. Xenia is going to play with scales and weights a little. For this, she puts weights on the scalepans, one by one. The first weight goes on the left scalepan, the second weight goes on the right scalepan, the third one goes on the left scalepan, the fourth one goes on the right scalepan and so on. Xenia wants to put the total of m weights on the scalepans.\n\nSimply putting weights on the scales is not interesting, so Xenia has set some rules. First, she does not put on the scales two consecutive weights of the same weight. That is, the weight that goes i-th should be different from the (i + 1)-th weight for any i (1 \u2264 i < m). Second, every time Xenia puts a weight on some scalepan, she wants this scalepan to outweigh the other one. That is, the sum of the weights on the corresponding scalepan must be strictly greater than the sum on the other pan.\n\nYou are given all types of weights available for Xenia. You can assume that the girl has an infinite number of weights of each specified type. Your task is to help Xenia lay m weights on \u200b\u200bthe scales or to say that it can't be done.\n\nInput\n\nThe first line contains a string consisting of exactly ten zeroes and ones: the i-th (i \u2265 1) character in the line equals \"1\" if Xenia has i kilo weights, otherwise the character equals \"0\". The second line contains integer m (1 \u2264 m \u2264 1000).\n\nOutput\n\nIn the first line print \"YES\", if there is a way to put m weights on the scales by all rules. Otherwise, print in the first line \"NO\". If you can put m weights on the scales, then print in the next line m integers \u2014 the weights' weights in the order you put them on the scales.\n\nIf there are multiple solutions, you can print any of them.\n\nExamples\n\nInput\n\n0000000101\n3\n\n\nOutput\n\nYES\n8 10 8\n\n\nInput\n\n1000000000\n2\n\n\nOutput\n\nNO",
        "task_name": "339_C. Xenia and Weights",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\nx=raw_input(\"\")\nx1=raw_input(\"\")\n\n\nx2=[]\nfor i in range(len(x)):\n    if x[i]==\"1\":\n        x2.append(i+1)\n\nres=\"\"\n\n#left=0\n#right=0\n#k=min(x2)\nk1=1\n\ndef vybor(x2,left,right,k,res,k1):    \n    if left<right:\n        for i in range(len(x2)):    \n            if x2[i] == k:\n                continue\n            if (x2[i]+left) > right:\n                k=x2[i]                  \n                left=left+x2[i]\n                res+=str(x2[i])+\" \"\n                k2=1\n                break\n                \n            \n            \n            \n\n    if left>right:\n        for i in range(len(x2)):\n            if x2[i] == k:\n                continue\n            if (x2[i]+right)>left:\n                k=x2[i]\n                right=right+x2[i]\n                res+=str(x2[i])+\" \"   \n                k2=1\n                break\n                \n            \n    if k2==0:\n        k1=0\n            \n    return (x2,left,right,k,res,k1)\n    \n                \n                \nif len(x2)!=0:        \n    \n    \n    k=min(x2)\n    left=k\n    right=0\n    res+=str(k)+\" \"\n   \n\n\n    for i in range(int(x1)-1):\n        if k1==0:\n            break\n        x2,left,right,k,res,k1=vybor(x2,left,right,k,res,k1)\n\n\nif k1==1:    \n    print(\"YES\")\n    print(res[:-1])\n\nelse:\n    print(\"NO\")",
        "correct": false,
        "task_id": "0713",
        "depth": 1
    },
    {
        "description": "Recently, the bear started studying data structures and faced the following problem.\n\nYou are given a sequence of integers x1, x2, ..., xn of length n and m queries, each of them is characterized by two integers li, ri. Let's introduce f(p) to represent the number of such indexes k, that xk is divisible by p. The answer to the query li, ri is the sum: <image>, where S(li, ri) is a set of prime numbers from segment [li, ri] (both borders are included in the segment).\n\nHelp the bear cope with the problem.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 106). The second line contains n integers x1, x2, ..., xn (2 \u2264 xi \u2264 107). The numbers are not necessarily distinct.\n\nThe third line contains integer m (1 \u2264 m \u2264 50000). Each of the following m lines contains a pair of space-separated integers, li and ri (2 \u2264 li \u2264 ri \u2264 2\u00b7109) \u2014 the numbers that characterize the current query.\n\nOutput\n\nPrint m integers \u2014 the answers to the queries on the order the queries appear in the input.\n\nExamples\n\nInput\n\n6\n5 5 7 10 14 15\n3\n2 11\n3 12\n4 4\n\n\nOutput\n\n9\n7\n0\n\n\nInput\n\n7\n2 3 5 7 11 4 8\n2\n8 10\n2 123\n\n\nOutput\n\n0\n7\n\nNote\n\nConsider the first sample. Overall, the first sample has 3 queries.\n\n  1. The first query l = 2, r = 11 comes. You need to count f(2) + f(3) + f(5) + f(7) + f(11) = 2 + 1 + 4 + 2 + 0 = 9. \n  2. The second query comes l = 3, r = 12. You need to count f(3) + f(5) + f(7) + f(11) = 1 + 4 + 2 + 0 = 7. \n  3. The third query comes l = 4, r = 4. As this interval has no prime numbers, then the sum equals 0. ",
        "task_name": "385_C. Bear and Prime Numbers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n# Author : raj1307 - Raj Singh\n# Date   : 13.03.2020\n\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef msi(): return map(str,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\nfrom math import ceil,floor,log,sqrt,factorial\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n#from itertools import permutations\n#Copy 2D list  m = [x[:] for x in mark] .. Avoid Using Deepcopy\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[1] \ndef sort2(l):return sorted(l, key=getKey,reverse=True)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\ndef ncr(n,r): return factorial(n)//(factorial(r)*factorial(n-r))\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n\ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\n\nprime = [True for i in range(10000010)] \ndef SieveOfEratosthenes(n): \n      \n    p = 2\n    prime[1]=False\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n      \n\n\n\n\ndef main():\n        \n\n    #for _ in range(ii()):\n    \n    n=ii()\n    a=li()\n    p=[0]*(10000005)\n    SieveOfEratosthenes(10000005)\n    #print(prime[:10 ])\n    for i in range(n):\n\n        for j in range(1,int(sqrt(a[i]))+1):\n\n            if prime[j]==True: \n                if a[i]%j==0:\n                    p[j]+=1\n            if a[i]%j==0:\n                if prime[a[i]//j]==False: continue\n            \n                p[a[i]//j]+=1\n    #print(p[:20])\n    for i in range(1,10000005):\n        p[i]+=p[i-1]\n\n    q=ii()\n\n    for i in range(q):\n        l,r=mi()\n        print(p[r]-p[l-1])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n# region fastio\n# template taken from https://github.com/cheran-senthil/PyRival/blob/master/templates/template.py\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    #read()\n    main()\n    #dmain()\n\n# Comment Read()\n",
        "correct": false,
        "task_id": "0714",
        "depth": 2
    },
    {
        "description": "Little Chris is very keen on his toy blocks. His teacher, however, wants Chris to solve more problems, so he decided to play a trick on Chris.\n\nThere are exactly s blocks in Chris's set, each block has a unique number from 1 to s. Chris's teacher picks a subset of blocks X and keeps it to himself. He will give them back only if Chris can pick such a non-empty subset Y from the remaining blocks, that the equality holds: \n\n<image> \"Are you kidding me?\", asks Chris.\n\nFor example, consider a case where s = 8 and Chris's teacher took the blocks with numbers 1, 4 and 5. One way for Chris to choose a set is to pick the blocks with numbers 3 and 6, see figure. Then the required sums would be equal: (1 - 1) + (4 - 1) + (5 - 1) = (8 - 3) + (8 - 6) = 7.\n\n<image>\n\nHowever, now Chris has exactly s = 106 blocks. Given the set X of blocks his teacher chooses, help Chris to find the required set Y!\n\nInput\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 5\u00b7105), the number of blocks in the set X. The next line contains n distinct space-separated integers x1, x2, ..., xn (1 \u2264 xi \u2264 106), the numbers of the blocks in X.\n\nNote: since the size of the input and output could be very large, don't use slow output techniques in your language. For example, do not use input and output streams (cin, cout) in C++.\n\nOutput\n\nIn the first line of output print a single integer m (1 \u2264 m \u2264 106 - n), the number of blocks in the set Y. In the next line output m distinct space-separated integers y1, y2, ..., ym (1 \u2264 yi \u2264 106), such that the required equality holds. The sets X and Y should not intersect, i.e. xi \u2260 yj for all i, j (1 \u2264 i \u2264 n; 1 \u2264 j \u2264 m). It is guaranteed that at least one solution always exists. If there are multiple solutions, output any of them.\n\nExamples\n\nInput\n\n3\n1 4 5\n\n\nOutput\n\n2\n999993 1000000\n\nInput\n\n1\n1\n\n\nOutput\n\n1\n1000000 ",
        "task_name": "406_B. Toy Sum",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nn, a = int(input()), set([int(x) for x in stdin.readline().split()])\nout, Max, ix = [], 1000000, 1\ny = set([i for i in range(1, Max + 1) if i not in a])\n\nwhile a:\n    ele = a.pop()\n    sym = Max - ele + 1\n    if sym not in a:\n        out.append(sym)\n    else:\n        a.discard(sym)\n        while ix <= Max:\n            sym = Max - ix + 1\n            if ix in y and sym in y:\n                y.discard(sym)\n                y.discard(ix)\n                out.extend([ix, sym])\n                break\n            ix += 1\n\nprint('%d\\n%s' % (len(out), ' '.join(map(str, out))))\n",
        "correct": true,
        "task_id": "0715",
        "depth": 2
    },
    {
        "description": "Ryouko is an extremely forgetful girl, she could even forget something that has just happened. So in order to remember, she takes a notebook with her, called Ryouko's Memory Note. She writes what she sees and what she hears on the notebook, and the notebook became her memory.\n\nThough Ryouko is forgetful, she is also born with superb analyzing abilities. However, analyzing depends greatly on gathered information, in other words, memory. So she has to shuffle through her notebook whenever she needs to analyze, which is tough work.\n\nRyouko's notebook consists of n pages, numbered from 1 to n. To make life (and this problem) easier, we consider that to turn from page x to page y, |x - y| pages should be turned. During analyzing, Ryouko needs m pieces of information, the i-th piece of information is on page ai. Information must be read from the notebook in order, so the total number of pages that Ryouko needs to turn is <image>.\n\nRyouko wants to decrease the number of pages that need to be turned. In order to achieve this, she can merge two pages of her notebook. If Ryouko merges page x to page y, she would copy all the information on page x to y (1 \u2264 x, y \u2264 n), and consequently, all elements in sequence a that was x would become y. Note that x can be equal to y, in which case no changes take place.\n\nPlease tell Ryouko the minimum number of pages that she needs to turn. Note she can apply the described operation at most once before the reading. Note that the answer can exceed 32-bit integers.\n\nInput\n\nThe first line of input contains two integers n and m (1 \u2264 n, m \u2264 105).\n\nThe next line contains m integers separated by spaces: a1, a2, ..., am (1 \u2264 ai \u2264 n).\n\nOutput\n\nPrint a single integer \u2014 the minimum number of pages Ryouko needs to turn.\n\nExamples\n\nInput\n\n4 6\n1 2 3 4 3 2\n\n\nOutput\n\n3\n\n\nInput\n\n10 5\n9 4 3 8 8\n\n\nOutput\n\n6\n\nNote\n\nIn the first sample, the optimal solution is to merge page 4 to 3, after merging sequence a becomes {1, 2, 3, 3, 3, 2}, so the number of pages Ryouko needs to turn is |1 - 2| + |2 - 3| + |3 - 3| + |3 - 3| + |3 - 2| = 3.\n\nIn the second sample, optimal solution is achieved by merging page 9 to 4.",
        "task_name": "433_C. Ryouko's Memory Note",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Enter your code here. Read input from STDIN. Print output to STDOUT# ===============================================================================================\n# importing some useful libraries.\nfrom __future__ import division, print_function\nfrom fractions import Fraction\nimport sys\nimport os\nfrom io import BytesIO, IOBase\nfrom itertools import *\nimport bisect\nfrom heapq import *\nfrom math import ceil, floor\nfrom copy import *\nfrom collections import deque, defaultdict\nfrom collections import Counter as counter  # Counter(list)  return a dict with {key: count}\nfrom itertools import combinations  # if a = [1,2,3] then print(list(comb(a,2))) -----> [(1, 2), (1, 3), (2, 3)]\nfrom itertools import permutations as permutate\nfrom bisect import bisect_left as bl\nfrom operator import *\n# If the element is already present in the list,\n\n# the left most position where element has to be inserted is returned.\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n\n# If the element is already present in the list,\n# the right most position where element has to be inserted is returned\n\n# ==============================================================================================\n# fast I/O region\n\nBUFSIZE = 8192\nfrom sys import stderr\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n# inp = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# ===============================================================================================\n### START ITERATE RECURSION ###\nfrom types import GeneratorType\n\n\ndef iterative(f, stack=[]):\n    def wrapped_func(*args, **kwargs):\n        if stack: return f(*args, **kwargs)\n        to = f(*args, **kwargs)\n        while True:\n            if type(to) is GeneratorType:\n                stack.append(to)\n                to = next(to)\n                continue\n            stack.pop()\n            if not stack: break\n            to = stack[-1].send(to)\n        return to\n\n    return wrapped_func\n\n\n#### END ITERATE RECURSION ####\n###########################\n# Sorted list\nclass SortedList:\n    def __init__(self, iterable=[], _load=200):\n        \"\"\"Initialize sorted list instance.\"\"\"\n        values = sorted(iterable)\n        self._len = _len = len(values)\n        self._load = _load\n        self._lists = _lists = [values[i:i + _load] for i in range(0, _len, _load)]\n        self._list_lens = [len(_list) for _list in _lists]\n        self._mins = [_list[0] for _list in _lists]\n        self._fen_tree = []\n        self._rebuild = True\n\n    def _fen_build(self):\n        \"\"\"Build a fenwick tree instance.\"\"\"\n        self._fen_tree[:] = self._list_lens\n        _fen_tree = self._fen_tree\n        for i in range(len(_fen_tree)):\n            if i | i + 1 < len(_fen_tree):\n                _fen_tree[i | i + 1] += _fen_tree[i]\n        self._rebuild = False\n\n    def _fen_update(self, index, value):\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\n        if not self._rebuild:\n            _fen_tree = self._fen_tree\n            while index < len(_fen_tree):\n                _fen_tree[index] += value\n                index |= index + 1\n\n    def _fen_query(self, end):\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        x = 0\n        while end:\n            x += _fen_tree[end - 1]\n            end &= end - 1\n        return x\n\n    def _fen_findkth(self, k):\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\n        _list_lens = self._list_lens\n        if k < _list_lens[0]:\n            return 0, k\n        if k >= self._len - _list_lens[-1]:\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        idx = -1\n        for d in reversed(range(len(_fen_tree).bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\n                idx = right_idx\n                k -= _fen_tree[idx]\n        return idx + 1, k\n\n    def _delete(self, pos, idx):\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len -= 1\n        self._fen_update(pos, -1)\n        del _lists[pos][idx]\n        _list_lens[pos] -= 1\n\n        if _list_lens[pos]:\n            _mins[pos] = _lists[pos][0]\n        else:\n            del _lists[pos]\n            del _list_lens[pos]\n            del _mins[pos]\n            self._rebuild = True\n\n    def _loc_left(self, value):\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        lo, pos = -1, len(_lists) - 1\n        while lo + 1 < pos:\n            mi = (lo + pos) >> 1\n            if value <= _mins[mi]:\n                pos = mi\n            else:\n                lo = mi\n\n        if pos and value <= _lists[pos - 1][-1]:\n            pos -= 1\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value <= _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def _loc_right(self, value):\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        pos, hi = 0, len(_lists)\n        while pos + 1 < hi:\n            mi = (pos + hi) >> 1\n            if value < _mins[mi]:\n                hi = mi\n            else:\n                pos = mi\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value < _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def add(self, value):\n        \"\"\"Add `value` to sorted list.\"\"\"\n        _load = self._load\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len += 1\n        if _lists:\n            pos, idx = self._loc_right(value)\n            self._fen_update(pos, 1)\n            _list = _lists[pos]\n            _list.insert(idx, value)\n            _list_lens[pos] += 1\n            _mins[pos] = _list[0]\n            if _load + _load < len(_list):\n                _lists.insert(pos + 1, _list[_load:])\n                _list_lens.insert(pos + 1, len(_list) - _load)\n                _mins.insert(pos + 1, _list[_load])\n                _list_lens[pos] = _load\n                del _list[_load:]\n                self._rebuild = True\n        else:\n            _lists.append([value])\n            _mins.append(value)\n            _list_lens.append(1)\n            self._rebuild = True\n\n    def discard(self, value):\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_right(value)\n            if idx and _lists[pos][idx - 1] == value:\n                self._delete(pos, idx - 1)\n\n    def remove(self, value):\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\n        _len = self._len\n        self.discard(value)\n        if _len == self._len:\n            raise ValueError('{0!r} not in list'.format(value))\n\n    def pop(self, index=-1):\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        value = self._lists[pos][idx]\n        self._delete(pos, idx)\n        return value\n\n    def bisect_left(self, value):\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_left(value)\n        return self._fen_query(pos) + idx\n\n    def bisect_right(self, value):\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_right(value)\n        return self._fen_query(pos) + idx\n\n    def count(self, value):\n        \"\"\"Return number of occurrences of `value` in the sorted list.\"\"\"\n        return self.bisect_right(value) - self.bisect_left(value)\n\n    def __len__(self):\n        \"\"\"Return the size of the sorted list.\"\"\"\n        return self._len\n\n    def __getitem__(self, index):\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        return self._lists[pos][idx]\n\n    def __delitem__(self, index):\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        self._delete(pos, idx)\n\n    def __contains__(self, value):\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_left(value)\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\n        return False\n\n    def __iter__(self):\n        \"\"\"Return an iterator over the sorted list.\"\"\"\n        return (value for _list in self._lists for value in _list)\n\n    def __reversed__(self):\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\n\n    def __repr__(self):\n        \"\"\"Return string representation of sorted list.\"\"\"\n        return 'SortedList({0})'.format(list(self))\n\n\n# ===============================================================================================\n# some shortcuts\n\nmod = 1000000007\n\n\ndef testcase(t):\n    for p in range(t):\n        solve()\n\n\ndef pow(x, y, p):\n    res = 1  # Initialize result\n    x = x % p  # Update x if it is more , than or equal to p\n    if (x == 0):\n        return 0\n    while (y > 0):\n        if ((y & 1) == 1):  # If y is odd, multiply, x with result\n            res = (res * x) % p\n\n        y = y >> 1  # y = y/2\n        x = (x * x) % p\n    return res\n\n\nfrom functools import reduce\n\n\ndef factors(n):\n    return set(reduce(list.__add__,\n                      ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\n\n\ndef gcd(a, b):\n    if a == b: return a\n    while b > 0: a, b = b, a % b\n    return a\n\n\n# discrete binary search\n# minimise:\n# def search():\n#     l = 0\n#     r = 10 ** 15\n#\n#     for i in range(200):\n#         if isvalid(l):\n#             return l\n#         if l == r:\n#             return l\n#         m = (l + r) // 2\n#         if isvalid(m) and not isvalid(m - 1):\n#             return m\n#         if isvalid(m):\n#             r = m + 1\n#         else:\n#             l = m\n#     return m\n\n# maximise:\n# def search():\n#     l = 0\n#     r = 10 ** 15\n#\n#     for i in range(200):\n#         # print(l,r)\n#         if isvalid(r):\n#             return r\n#         if l == r:\n#             return l\n#         m = (l + r) // 2\n#         if isvalid(m) and not isvalid(m + 1):\n#             return m\n#         if isvalid(m):\n#             l = m\n#         else:\n#             r = m - 1\n#     return m\n\n\n##############Find sum of product of subsets of size k in a array\n# ar=[0,1,2,3]\n# k=3\n# n=len(ar)-1\n# dp=[0]*(n+1)\n# dp[0]=1\n# for pos in range(1,n+1):\n#     dp[pos]=0\n#     l=max(1,k+pos-n-1)\n#     for j in range(min(pos,k),l-1,-1):\n#         dp[j]=dp[j]+ar[pos]*dp[j-1]\n# print(dp[k])\n\ndef prefix_sum(ar):  # [1,2,3,4]->[1,3,6,10]\n    return list(accumulate(ar))\n\n\ndef suffix_sum(ar):  # [1,2,3,4]->[10,9,7,4]\n    return list(accumulate(ar[::-1]))[::-1]\n\n\ndef N():\n    return int(inp())\n\n\ndx = [0, 0, 1, -1]\ndy = [1, -1, 0, 0]\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\n# =========================================================================================\nfrom collections import defaultdict\n\n\ndef numberOfSetBits(i):\n    i = i - ((i >> 1) & 0x55555555)\n    i = (i & 0x33333333) + ((i >> 2) & 0x33333333)\n    return (((i + (i >> 4) & 0xF0F0F0F) * 0x1010101) & 0xffffffff) >> 24\n\n\nclass MergeFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n        # self.lista = [[_] for _ in range(n)]\n\n    def find(self, a):\n        to_update = []\n        while a != self.parent[a]:\n            to_update.append(a)\n            a = self.parent[a]\n        for b in to_update:\n            self.parent[b] = a\n        return self.parent[a]\n\n    def merge(self, a, b):\n        a = self.find(a)\n        b = self.find(b)\n        if a == b:\n            return\n        if self.size[a] < self.size[b]:\n            a, b = b, a\n        self.num_sets -= 1\n        self.parent[b] = a\n        self.size[a] += self.size[b]\n        # self.lista[a] += self.lista[b]\n        # self.lista[b] = []\n\n    def set_size(self, a):\n        return self.size[self.find(a)]\n\n    def __len__(self):\n        return self.num_sets\n\n\ndef lcm(a, b):\n    return abs((a // gcd(a, b)) * b)\n\n\n# #\n# to find factorial and ncr\n# tot = 100005\n# mod = 10**9 + 7\n# fac = [1, 1]\n# finv = [1, 1]\n# inv = [0, 1]\n#\n# for i in range(2, tot + 1):\n#     fac.append((fac[-1] * i) % mod)\n#     inv.append(mod - (inv[mod % i] * (mod // i) % mod))\n#     finv.append(finv[-1] * inv[-1] % mod)\n\n\ndef comb(n, r):\n    if n < r:\n        return 0\n    else:\n        return fac[n] * (finv[r] * finv[n - r] % mod) % mod\n\n\ndef inp(): return sys.stdin.readline().rstrip(\"\\r\\n\")  # for fast input\n\n\ndef out(var): sys.stdout.write(str(var))  # for fast output, always take string\n\n\ndef lis(): return list(map(int, inp().split()))\n\n\ndef stringlis(): return list(map(str, inp().split()))\n\n\ndef sep(): return map(int, inp().split())\n\n\ndef strsep(): return map(str, inp().split())\n\n\ndef fsep(): return map(float, inp().split())\n\n\ndef nextline(): out(\"\\n\")  # as stdout.write always print sring.\n\n\ndef arr1d(n, v):\n    return [v] * n\n\n\ndef arr2d(n, m, v):\n    return [[v] * m for _ in range(n)]\n\n\ndef arr3d(n, m, p, v):\n    return [[[v] * p for _ in range(m)] for i in range(n)]\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\n# co-ordinate compression\n# ma={s:idx for idx,s in enumerate(sorted(set(l+r)))}\n\n# mxn=100005\n# lrg=[0]*mxn\n# for i in range(2,mxn-3):\n#     if (lrg[i]==0):\n#         for j in range(i,mxn-3,i):\n#             lrg[j]=i\n\n\ndef solve():\n    n,m=sep()\n    ar=lis()\n    adj=[[] for _ in range(n+1)]\n    for i in range(m):\n        if(i-1>=0):\n            if(ar[i]!=ar[i-1]):\n                adj[ar[i]].append(ar[i-1])\n        if (i + 1 < m):\n            if (ar[i] != ar[i + 1]):\n                adj[ar[i]].append(ar[i + 1])\n    totscore=0\n    for i in range(1,m):\n        totscore+=abs(ar[i]-ar[i-1])\n    redscore=0\n    for i in range(1,n+1):\n        adj[i].sort()\n        curscore=0\n        l=(len(adj[i]))\n        if l==0:continue\n\n        med=adj[i][(l)//2]\n        besscore=0\n        for j in adj[i]:\n            curscore+=abs(i-j)\n            besscore+=abs(med-j)\n        redscore=max(redscore,curscore-besscore)\n\n    print(min(totscore-redscore,totscore))\n\n\n\n\n\n\nsolve()\n# testcase(int(inp()))\n",
        "correct": true,
        "task_id": "0716",
        "depth": 2
    },
    {
        "description": "You have r red, g green and b blue balloons. To decorate a single table for the banquet you need exactly three balloons. Three balloons attached to some table shouldn't have the same color. What maximum number t of tables can be decorated if we know number of balloons of each color?\n\nYour task is to write a program that for given values r, g and b will find the maximum number t of tables, that can be decorated in the required manner.\n\nInput\n\nThe single line contains three integers r, g and b (0 \u2264 r, g, b \u2264 2\u00b7109) \u2014 the number of red, green and blue baloons respectively. The numbers are separated by exactly one space.\n\nOutput\n\nPrint a single integer t \u2014 the maximum number of tables that can be decorated in the required manner.\n\nExamples\n\nInput\n\n5 4 3\n\n\nOutput\n\n4\n\n\nInput\n\n1 1 1\n\n\nOutput\n\n1\n\n\nInput\n\n2 3 3\n\n\nOutput\n\n2\n\nNote\n\nIn the first sample you can decorate the tables with the following balloon sets: \"rgg\", \"gbb\", \"brr\", \"rrg\", where \"r\", \"g\" and \"b\" represent the red, green and blue balls, respectively.",
        "task_name": "478_C. Table Decorations",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    r, g, b = sorted(map(int, input().split()))\n\n    t = r\n    g -= r\n    b -= r\n\n    t += g // 3\n    b -= g - (g % 3)\n    g = g % 3\n\n    t += ((g == 1) and (b > 1)) + ((g == 2) and (b > 0))\n\n    print(t)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": false,
        "task_id": "0717",
        "depth": 1
    },
    {
        "description": "A sweet little monster Om Nom loves candies very much. One day he found himself in a rather tricky situation that required him to think a bit in order to enjoy candies the most. Would you succeed with the same task if you were on his place?\n\n<image>\n\nOne day, when he came to his friend Evan, Om Nom didn't find him at home but he found two bags with candies. The first was full of blue candies and the second bag was full of red candies. Om Nom knows that each red candy weighs Wr grams and each blue candy weighs Wb grams. Eating a single red candy gives Om Nom Hr joy units and eating a single blue candy gives Om Nom Hb joy units.\n\nCandies are the most important thing in the world, but on the other hand overeating is not good. Om Nom knows if he eats more than C grams of candies, he will get sick. Om Nom thinks that it isn't proper to leave candy leftovers, so he can only eat a whole candy. Om Nom is a great mathematician and he quickly determined how many candies of what type he should eat in order to get the maximum number of joy units. Can you repeat his achievement? You can assume that each bag contains more candies that Om Nom can eat.\n\nInput\n\nThe single line contains five integers C, Hr, Hb, Wr, Wb (1 \u2264 C, Hr, Hb, Wr, Wb \u2264 109).\n\nOutput\n\nPrint a single integer \u2014 the maximum number of joy units that Om Nom can get.\n\nExamples\n\nInput\n\n10 3 5 2 3\n\n\nOutput\n\n16\n\nNote\n\nIn the sample test Om Nom can eat two candies of each type and thus get 16 joy units.",
        "task_name": "526_C. Om Nom and Candies",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nfrom fractions import gcd\n\nc, h1, h2, w1, w2 = (int (t) for t in sys.stdin.readline().split())\ng = gcd (w1, w2)\nc /= g\nw1 /= g\nw2 /= g\n\nres = 0\nif c <= 10 ** 5 * w1:\n  for i in range (c/w1 + 1):\n    if res < i * h1 + (c - i*w1) / w2 * h2:\n      res = i * h1 + (c - i*w1) / w2 * h2\nelif c <= 10 ** 5 * w2:\n  for i in range (c/w2 + 1):\n    if res < i * h2 + (c - i*w2) / w1 * h1:\n      res = i * h2 + (c - i*w2) / w1 * h1\nelse:\n  if h1 * w2 < h2 * w1:\n    h1, h2 = h2, h1\n    w1, w2 = w2, w1\n  for i in range (10 ** 5):\n    if res < i * h2 + (c - i*w2) / w1 * h1:\n      res = i * h2 + (c - i*w2) / w1 * h1\n\nprint (res)\n\n    ",
        "correct": true,
        "task_id": "0718",
        "depth": 1
    },
    {
        "description": "This is yet another problem dealing with regular bracket sequences.\n\nWe should remind you that a bracket sequence is called regular, if by inserting \u00ab+\u00bb and \u00ab1\u00bb into it we can get a correct mathematical expression. For example, sequences \u00ab(())()\u00bb, \u00ab()\u00bb and \u00ab(()(()))\u00bb are regular, while \u00ab)(\u00bb, \u00ab(()\u00bb and \u00ab(()))(\u00bb are not. \n\nYou are given a string of \u00ab(\u00bb and \u00ab)\u00bb characters. You are to find its longest substring that is a regular bracket sequence. You are to find the number of such substrings as well.\n\nInput\n\nThe first line of the input file contains a non-empty string, consisting of \u00ab(\u00bb and \u00ab)\u00bb characters. Its length does not exceed 106.\n\nOutput\n\nPrint the length of the longest substring that is a regular bracket sequence, and the number of such substrings. If there are no such substrings, write the only line containing \"0 1\".\n\nExamples\n\nInput\n\n)((())))(()())\n\n\nOutput\n\n6 2\n\n\nInput\n\n))(\n\n\nOutput\n\n0 1",
        "task_name": "5_C. Longest Regular Bracket Sequence",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\nimport threading,bisect,math,heapq,sys\n# threading.stack_size(2**27)\n# sys.setrecursionlimit(10**4)\nfrom sys import stdin, stdout\ni_m=9223372036854775807    \ndef cin():\n    return map(int,sin().split())\ndef ain():                           #takes array as input\n    return list(map(int,sin().split()))\ndef sin():\n    return input()\ndef inin():\n    return int(input()) \nprime=[]\ndef dfs(n,d,v,a,c):\n    v[n]=1\n    if n in d:\n        x=d[n]\n    else:\n        a[n]+=c\n        x=[]\n    p=a[n]\n    for i in x:\n        if i not in v:\n            dfs(i,d,v,a,c)\n            p+=a[i]\n    a[n]=p\n    return p\n\n\"\"\"**************************MAIN*****************************\"\"\"\ndef main():\n    s=sin()\n    n=len(s)\n    d=[0]*(n+1)\n    a=[]\n    for i in s:\n        if i=='(':\n            a.append(i)\n        else:\n            p=0\n            while(len(a)>0):\n                x=a.pop()\n                if(x!='('):\n                    p+=x\n                else:\n                    d[p+2]+=1\n                    a.append(p+2)\n                    break\n    x=0\n    y=1\n    for i in range(n):\n        if d[i]>0:\n            x=i\n            y=d[i]\n    print(x,y)\n\"\"\"*******************************************************\"\"\"\n\n######## Python 2 and 3 footer by Pajenegod and c1729\nfac=[]\ndef fact(n,mod):\n    global fac\n    fac.append(1)\n    for i in range(1,n+1):\n        fac.append((fac[i-1]*i)%mod)\n    f=fac[:]\n    return f\ndef nCr(n,r,mod):\n    global fac\n    x=fac[n]\n    y=fac[n-r]\n    z=fac[r]\n    x=moddiv(x,y,mod)\n    return moddiv(x,z,mod)\ndef moddiv(m,n,p):\n    x=pow(n,p-2,p)\n    return (m*x)%p\ndef GCD(x, y): \n    x=abs(x)\n    y=abs(y)\n    if(min(x,y)==0):\n        return max(x,y)\n    while(y): \n        x, y = y, x % y \n    return x \ndef Divisors(n) : \n    l = []  \n    ll=[]\n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if (n % i == 0) : \n            if (n // i == i) : \n                l.append(i) \n            else : \n                l.append(i)\n                ll.append(n//i)\n    l.extend(ll[::-1])\n    return l\ndef SieveOfEratosthenes(n): \n    global prime\n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    f=[]\n    for p in range(2, n): \n        if prime[p]: \n            f.append(p)\n    return f\ndef primeFactors(n): \n    a=[]\n    while n % 2 == 0: \n        a.append(2) \n        n = n // 2 \n    for i in range(3,int(math.sqrt(n))+1,2):  \n        while n % i== 0: \n            a.append(i) \n            n = n // i  \n    if n > 2: \n        a.append(n)\n    return a\n\"\"\"*******************************************************\"\"\"\npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\nimport os\nfrom io import IOBase, BytesIO\nBUFSIZE = 8192\nclass FastIO(BytesIO):\n    newlines = 0\n \n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n \n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0,2), super(FastIO, self).write(s))[0])\n        return s\n \n    def read(self):\n        while self._fill(): pass\n        return super(FastIO,self).read()\n \n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill(); self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s:self.buffer.write(s.encode('ascii'))\n            self.read = lambda:self.buffer.read().decode('ascii')\n            self.readline = lambda:self.buffer.readline().decode('ascii')\n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n') \n# Cout implemented in Python\nclass ostream:\n    def __lshift__(self,a):\n        sys.stdout.write(str(a))\n        return self\ncout = ostream()\nendl = '\\n'\n \n# Read all remaining integers in stdin, type is given by optional argument, this is fast\ndef readnumbers(zero = 0):\n    conv = ord if py2 else lambda x:x\n    A = []; numb = zero; sign = 1; i = 0; s = sys.stdin.buffer.read()\n    try:\n        while True:\n            if s[i] >= b'R' [0]:\n                numb = 10 * numb + conv(s[i]) - 48\n            elif s[i] == b'-' [0]: sign = -1\n            elif s[i] != b'\\r' [0]:\n                A.append(sign*numb)\n                numb = zero; sign = 1\n            i += 1\n    except:pass\n    if s and s[-1] >= b'R' [0]:\n        A.append(sign*numb)\n    return A\n \n# threading.Thread(target=main).start()\nif __name__== \"__main__\":\n  main()",
        "correct": false,
        "task_id": "0720",
        "depth": 2
    },
    {
        "description": "This problem is given in two versions that differ only by constraints. If you can solve this problem in large constraints, then you can just write a single solution to the both versions. If you find the problem too difficult in large constraints, you can write solution to the simplified version only.\n\nWaking up in the morning, Apollinaria decided to bake cookies. To bake one cookie, she needs n ingredients, and for each ingredient she knows the value ai \u2014 how many grams of this ingredient one needs to bake a cookie. To prepare one cookie Apollinaria needs to use all n ingredients.\n\nApollinaria has bi gram of the i-th ingredient. Also she has k grams of a magic powder. Each gram of magic powder can be turned to exactly 1 gram of any of the n ingredients and can be used for baking cookies.\n\nYour task is to determine the maximum number of cookies, which Apollinaria is able to bake using the ingredients that she has and the magic powder.\n\nInput\n\nThe first line of the input contains two positive integers n and k (1 \u2264 n, k \u2264 1000) \u2014 the number of ingredients and the number of grams of the magic powder.\n\nThe second line contains the sequence a1, a2, ..., an (1 \u2264 ai \u2264 1000), where the i-th number is equal to the number of grams of the i-th ingredient, needed to bake one cookie.\n\nThe third line contains the sequence b1, b2, ..., bn (1 \u2264 bi \u2264 1000), where the i-th number is equal to the number of grams of the i-th ingredient, which Apollinaria has.\n\nOutput\n\nPrint the maximum number of cookies, which Apollinaria will be able to bake using the ingredients that she has and the magic powder.\n\nExamples\n\nInput\n\n3 1\n2 1 4\n11 3 16\n\n\nOutput\n\n4\n\n\nInput\n\n4 3\n4 3 5 6\n11 12 14 20\n\n\nOutput\n\n3\n\nNote\n\nIn the first sample it is profitably for Apollinaria to make the existing 1 gram of her magic powder to ingredient with the index 2, then Apollinaria will be able to bake 4 cookies.\n\nIn the second sample Apollinaria should turn 1 gram of magic powder to ingredient with the index 1 and 1 gram of magic powder to ingredient with the index 3. Then Apollinaria will be able to bake 3 cookies. The remaining 1 gram of the magic powder can be left, because it can't be used to increase the answer.",
        "task_name": "670_D1. Magic Powder - 1",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a = []\nb = []\n\ndef Check(m,n,k):\n    x = k\n    for i in range(n):\n        if m * a[i] <= b[i]:\n            continue\n        x -= (m * a[i] - b[i])\n    return x >= 0\n\n\n\nn,k = raw_input().split()\nn=int(n)\nk=int(k)\na=raw_input().split()\nb=raw_input().split()\nfor i in range(n):\n    a[i]=int(a[i])\n    b[i]=int(b[i])\n\n\nini = 0;\nfin = 10000000\nwhile (ini + 1 < fin):\n    mid = (ini + fin) / 2\n    if (Check(mid,n,k)):\n        ini = mid\n    else:\n        fin = mid - 1\n\n\nif (Check(fin,n,k)):\n    print(fin)\nelse:\n    print(ini)\n",
        "correct": true,
        "task_id": "0722",
        "depth": 1
    },
    {
        "description": "Running with barriers on the circle track is very popular in the country where Dasha lives, so no wonder that on her way to classes she saw the following situation:\n\nThe track is the circle with length L, in distinct points of which there are n barriers. Athlete always run the track in counterclockwise direction if you look on him from above. All barriers are located at integer distance from each other along the track. \n\nHer friends the parrot Kefa and the leopard Sasha participated in competitions and each of them ran one lap. Each of the friends started from some integral point on the track. Both friends wrote the distance from their start along the track to each of the n barriers. Thus, each of them wrote n integers in the ascending order, each of them was between 0 and L - 1, inclusively.\n\n<image> Consider an example. Let L = 8, blue points are barriers, and green points are Kefa's start (A) and Sasha's start (B). Then Kefa writes down the sequence [2, 4, 6], and Sasha writes down [1, 5, 7].\n\nThere are several tracks in the country, all of them have same length and same number of barriers, but the positions of the barriers can differ among different tracks. Now Dasha is interested if it is possible that Kefa and Sasha ran the same track or they participated on different tracks. \n\nWrite the program which will check that Kefa's and Sasha's tracks coincide (it means that one can be obtained from the other by changing the start position). Note that they always run the track in one direction \u2014 counterclockwise, if you look on a track from above. \n\nInput\n\nThe first line contains two integers n and L (1 \u2264 n \u2264 50, n \u2264 L \u2264 100) \u2014 the number of barriers on a track and its length. \n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Kefa's start to each barrier in the order of its appearance. All integers are in the range from 0 to L - 1 inclusively.\n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Sasha's start to each barrier in the order of its overcoming. All integers are in the range from 0 to L - 1 inclusively.\n\nOutput\n\nPrint \"YES\" (without quotes), if Kefa and Sasha ran the coinciding tracks (it means that the position of all barriers coincides, if they start running from the same points on the track). Otherwise print \"NO\" (without quotes).\n\nExamples\n\nInput\n\n3 8\n2 4 6\n1 5 7\n\n\nOutput\n\nYES\n\n\nInput\n\n4 9\n2 3 5 8\n0 1 3 6\n\n\nOutput\n\nYES\n\n\nInput\n\n2 4\n1 3\n1 2\n\n\nOutput\n\nNO\n\nNote\n\nThe first test is analyzed in the statement.",
        "task_name": "761_B. Dasha and friends",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "l = map(int,raw_input().split())\ns1 = map(int,raw_input().split())\ns2 = map(int,raw_input().split())\n\nfl = True\n\nlk = [] \nls = []\nfor i in range(l[0]-1):\n    lk.append(abs(s1[i]-s1[i+1]))\n    ls.append(abs(s2[i]-s2[i+1]))\n\nlk.append(l[1]-s1[-1]+s1[0])\nls.append(l[1]+s2[0]-s2[-1])\n\nfl = False\nk = ls[0]\nfor i in range(len(ls)):\n    del(ls[0])\n    ls.append(k)\n    print(ls)\n    k = ls[0]\n    if ls == lk:\n        fl = True\n        break\n    \nif l[0] == 1:\n    print(\"YES\")\nelif fl == True:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
        "correct": false,
        "task_id": "0723",
        "depth": 1
    },
    {
        "description": "Polycarp likes to play with numbers. He takes some integer number x, writes it down on the board, and then performs with it n - 1 operations of the two kinds: \n\n  * divide the number x by 3 (x must be divisible by 3); \n  * multiply the number x by 2. \n\n\n\nAfter each operation, Polycarp writes down the result on the board and replaces x by the result. So there will be n numbers on the board after all.\n\nYou are given a sequence of length n \u2014 the numbers that Polycarp wrote down. This sequence is given in arbitrary order, i.e. the order of the sequence can mismatch the order of the numbers written on the board.\n\nYour problem is to rearrange (reorder) elements of this sequence in such a way that it can match possible Polycarp's game in the order of the numbers written on the board. I.e. each next number will be exactly two times of the previous number or exactly one third of previous number.\n\nIt is guaranteed that the answer exists.\n\nInput\n\nThe first line of the input contatins an integer number n (2 \u2264 n \u2264 100) \u2014 the number of the elements in the sequence. The second line of the input contains n integer numbers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 3 \u22c5 10^{18}) \u2014 rearranged (reordered) sequence that Polycarp can wrote down on the board.\n\nOutput\n\nPrint n integer numbers \u2014 rearranged (reordered) input sequence that can be the sequence that Polycarp could write down on the board.\n\nIt is guaranteed that the answer exists.\n\nExamples\n\nInput\n\n6\n4 8 6 3 12 9\n\n\nOutput\n\n9 3 6 12 4 8 \n\n\nInput\n\n4\n42 28 84 126\n\n\nOutput\n\n126 42 84 28 \n\n\nInput\n\n2\n1000000000000000000 3000000000000000000\n\n\nOutput\n\n3000000000000000000 1000000000000000000 \n\nNote\n\nIn the first example the given sequence can be rearranged in the following way: [9, 3, 6, 12, 4, 8]. It can match possible Polycarp's game which started with x = 9.",
        "task_name": "977_D. Divide by three, multiply by two",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n#-*- coding:utf-8 -*-\n\nimport sys, math, random, operator\nfrom string import ascii_lowercase, ascii_uppercase\nfrom fractions import Fraction, gcd\n#from decimal import Decimal, getcontext\nfrom itertools import product, permutations, combinations\nfrom Queue import Queue, PriorityQueue\nfrom collections import deque, defaultdict, Counter\n#getcontext().prec = 100\n\nMOD = 10**9 + 7\nINF = float(\"+inf\")\n\nif sys.subversion[0] == \"PyPy\":\n    import io, atexit\n    sys.stdout = io.BytesIO()\n    atexit.register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n    sys.stdin = io.BytesIO(sys.stdin.read())\n    raw_input = lambda: sys.stdin.readline().rstrip()\npr = lambda *args: sys.stdout.write(\" \".join(str(x) for x in args) + \"\\n\")\nepr = lambda *args: sys.stderr.write(\" \".join(str(x) for x in args) + \"\\n\")\ndie = lambda *args: pr(*args) ^ exit(0)\n\nread_str = raw_input\nread_strs = lambda: raw_input().split()\nread_int = lambda: int(raw_input())\nread_ints = lambda: map(int, raw_input().split())\nread_float = lambda: float(raw_input())\nread_floats = lambda: map(float, raw_input().split())\n\n\"---------------------------------------------------------------\"\n\nn = read_int()\narr = read_ints()\n\nres = [arr.pop()]\narr = set(arr)\nwhile arr:\n    a = res[0]\n    if a % 2 == 0 and a / 2 in arr:\n        arr.remove(a/2)\n        res = [a/2] + res\n        continue\n    elif a * 3 in arr:\n        arr.remove(a*3)\n        res = [a*3] + res\n        continue\n\n    a = res[-1]\n    if a % 3 == 0 and a / 3 in arr:\n        arr.remove(a/3)\n        res = res + [a/3]\n        continue\n    elif a * 2 in arr:\n        arr.remove(a*2)\n        res = res + [a*2]\n        continue\n\npr(*res)\n",
        "correct": true,
        "task_id": "0727",
        "depth": 1
    },
    {
        "description": "Let's introduce a number system which is based on a roman digits. There are digits I, V, X, L which correspond to the numbers 1, 5, 10 and 50 respectively. The use of other roman digits is not allowed.\n\nNumbers in this system are written as a sequence of one or more digits. We define the value of the sequence simply as the sum of digits in it.\n\nFor example, the number XXXV evaluates to 35 and the number IXI \u2014 to 12.\n\nPay attention to the difference to the traditional roman system \u2014 in our system any sequence of digits is valid, moreover the order of digits doesn't matter, for example IX means 11, not 9.\n\nOne can notice that this system is ambiguous, and some numbers can be written in many different ways. Your goal is to determine how many distinct integers can be represented by exactly n roman digits I, V, X, L.\n\nInput\n\nThe only line of the input file contains a single integer n (1 \u2264 n \u2264 10^9) \u2014 the number of roman digits to use.\n\nOutput\n\nOutput a single integer \u2014 the number of distinct integers which can be represented using n roman digits exactly.\n\nExamples\n\nInput\n\n1\n\n\nOutput\n\n4\n\n\nInput\n\n2\n\n\nOutput\n\n10\n\n\nInput\n\n10\n\n\nOutput\n\n244\n\nNote\n\nIn the first sample there are exactly 4 integers which can be represented \u2014 I, V, X and L.\n\nIn the second sample it is possible to represent integers 2 (II), 6 (VI), 10 (VV), 11 (XI), 15 (XV), 20 (XX), 51 (IL), 55 (VL), 60 (XL) and 100 (LL).",
        "task_name": "997_B. Roman Digits",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def func(a):\n  for i in range(a - 1, 0, -1):\n    tf = True\n    for j in range(2, i // 2):\n      if (i % j == 0):\n        tf = False\n        break \n    if (tf): return i\n\nn = int(input())\n\nc = func(n)\nif (not c): c = 1\n\nprint(int((n + 1) * (n + 2) * (n + 3) / 6) - c * (c - 1))",
        "correct": false,
        "task_id": "0728",
        "depth": 2
    },
    {
        "description": "There are N people standing in a queue from west to east.\n\nGiven is a string S of length N representing the directions of the people. The i-th person from the west is facing west if the i-th character of S is `L`, and east if that character of S is `R`.\n\nA person is happy if the person in front of him/her is facing the same direction. If no person is standing in front of a person, however, he/she is not happy.\n\nYou can perform the following operation any number of times between 0 and K (inclusive):\n\nOperation: Choose integers l and r such that 1 \\leq l \\leq r \\leq N, and rotate by 180 degrees the part of the queue: the l-th, (l+1)-th, ..., r-th persons. That is, for each i = 0, 1, ..., r-l, the (l + i)-th person from the west will stand the (r - i)-th from the west after the operation, facing east if he/she is facing west now, and vice versa.\n\nWhat is the maximum possible number of happy people you can have?\n\nConstraints\n\n* N is an integer satisfying 1 \\leq N \\leq 10^5.\n* K is an integer satisfying 1 \\leq K \\leq 10^5.\n* |S| = N\n* Each character of S is `L` or `R`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nS\n\n\nOutput\n\nPrint the maximum possible number of happy people after at most K operations.\n\nExamples\n\nInput\n\n6 1\nLRLRRL\n\n\nOutput\n\n3\n\n\nInput\n\n13 3\nLRRLRLRRLRLLR\n\n\nOutput\n\n9\n\n\nInput\n\n10 1\nLLLLLRRRRR\n\n\nOutput\n\n9\n\n\nInput\n\n9 2\nRRRLRLRLL\n\n\nOutput\n\n7",
        "task_name": "p02918 AtCoder Beginner Contest 140 - Face Produces Unhappiness",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math\ninput = raw_input\n\ndef score(s):\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        if s[i] == \"L\" and i >= 1 and s[i-1] == \"L\":\n            ans += 1\n        elif s[i] == \"R\" and i <= n-2 and s[i+1] ==\"R\":\n            ans += 1\n    return ans\n\nN,K = map(int, input().split(\" \"))\nS = list(input())\n\nif S==\"RL\":\n    print(0)\n    exit()\nif S==\"LR\":\n    print(0)\n    exit()\nif S==\"RLR\" or S==\"LRL\":\n    if K == 1:\n        print(1)\n        exit()\n    else:\n        print(2)\n        exit()\n\ns = score(S)\nk = 0\nlr = 0\nrl = 0\nfor i in range(N-1):\n    if S[i] == \"L\" and S[i+1] ==\"R\":\n        lr += 1\n    if S[i] == \"R\" and S[i+1] ==\"L\":\n        rl += 1\nlrl = 0\nrlr = 0\nfor i in range(N-2):\n    if S[i] == \"L\" and S[i+1] ==\"R\" and S[i+2] ==\"L\":\n        lrl += 1\n    if S[i] == \"R\" and S[i+1] ==\"L\" and S[i+2] ==\"R\":\n        rlr += 1\n\nif (lrl == 1 and rl == 1 and lr == 1) or (rlr == 1 and rl == 1 and lr == 1):\n    if K >= 2:\n        print(s+2)\n        exit()\n    elif K == 1:\n        print(s+1)\n        exit()\n    else:\n        print(s)\n        exit()\n\n#print(s)\n#print(lr, rl)\nc = min(K, lr, rl)\ns += 2 * c\nif K > min(lr, rl):\n    if S[0] == \"L\" and rl > lr:\n        s += 1\n    elif S[-1] == \"R\" and rl < lr:\n        s += 1\nprint(s)\n",
        "correct": false,
        "task_id": "0730",
        "depth": 1
    },
    {
        "description": "We have a rectangular grid of squares with H horizontal rows and W vertical columns. Let (i,j) denote the square at the i-th row from the top and the j-th column from the left. On this grid, there is a piece, which is initially placed at square (s_r,s_c).\n\nTakahashi and Aoki will play a game, where each player has a string of length N. Takahashi's string is S, and Aoki's string is T. S and T both consist of four kinds of letters: `L`, `R`, `U` and `D`.\n\nThe game consists of N steps. The i-th step proceeds as follows:\n\n* First, Takahashi performs a move. He either moves the piece in the direction of S_i, or does not move the piece.\n* Second, Aoki performs a move. He either moves the piece in the direction of T_i, or does not move the piece.\n\n\n\nHere, to move the piece in the direction of `L`, `R`, `U` and `D`, is to move the piece from square (r,c) to square (r,c-1), (r,c+1), (r-1,c) and (r+1,c), respectively. If the destination square does not exist, the piece is removed from the grid, and the game ends, even if less than N steps are done.\n\nTakahashi wants to remove the piece from the grid in one of the N steps. Aoki, on the other hand, wants to finish the N steps with the piece remaining on the grid. Determine if the piece will remain on the grid at the end of the game when both players play optimally.\n\nConstraints\n\n* 2 \\leq H,W \\leq 2 \\times 10^5\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq s_r \\leq H\n* 1 \\leq s_c \\leq W\n* |S|=|T|=N\n* S and T consists of the four kinds of letters `L`, `R`, `U` and `D`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W N\ns_r s_c\nS\nT\n\n\nOutput\n\nIf the piece will remain on the grid at the end of the game, print `YES`; otherwise, print `NO`.\n\nExamples\n\nInput\n\n2 3 3\n2 2\nRRL\nLUD\n\n\nOutput\n\nYES\n\n\nInput\n\n4 3 5\n2 2\nUDRRR\nLLDUD\n\n\nOutput\n\nNO\n\n\nInput\n\n5 6 11\n2 1\nRLDRRUDDLRL\nURRDRLLDLRD\n\n\nOutput\n\nNO",
        "task_name": "p03054 AtCoder Grand Contest 033 - LRUD Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "H,W,N = map(int, raw_input().split())\nsr,sc = map(int, raw_input().split())\nS = raw_input()\nT = raw_input()\nAO = [1,W,1,H]\nflag = 0\nfor i in reversed(range(N)):\n\tif(i != N-1):\n\t\tif(T[i] == 'L'):\n\t\t\tAO[1] = min(W,AO[1]+1)\n\t\telif(T[i] == 'R'):\n\t\t\tAO[0] = max(1,AO[0]-1)\n\t\telif(T[i] == 'U'):\n\t\t\tAO[3] = min(H,AO[3]+1)\n\t\telif(T[i] == 'D'):\n\t\t\tAO[2] = max(1,AO[2]-1)\n\tif(S[i] == 'L'):\n\t\tAO[0] += 1\n\telif(S[i] == 'R'):\n\t\tAO[1] -= 1\n\telif(S[i] == 'U'):\n\t\tAO[2] += 1\n\telif(S[i] == 'D'):\n\t\tAO[3] -= 1\n\tif(AO[0] > AO[1] or AO[2] > AO[3]):\n\t\tflag = 1\n\t\tbreak\nif(AO[0] > sc or AO[1] < sc or AO[2] > sr or AO[3] < sr):\n\tflag = 1\nif(flag == 0):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")",
        "correct": true,
        "task_id": "0731",
        "depth": 1
    },
    {
        "description": "There are N squares in a row. The leftmost square contains the integer A, and the rightmost contains the integer B. The other squares are empty.\n\nAohashi would like to fill the empty squares with integers so that the following condition is satisfied:\n\n* For any two adjacent squares, the (absolute) difference of the two integers in those squares is between C and D (inclusive).\n\n\n\nAs long as the condition is satisfied, it is allowed to use arbitrarily large or small integers to fill the squares. Determine whether it is possible to fill the squares under the condition.\n\nConstraints\n\n* 3 \\leq N \\leq 500000\n* 0 \\leq A \\leq 10^9\n* 0 \\leq B \\leq 10^9\n* 0 \\leq C \\leq D \\leq 10^9\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN A B C D\n\n\nOutput\n\nPrint `YES` if it is possible to fill the squares under the condition; print `NO` otherwise.\n\nExamples\n\nInput\n\n5 1 5 2 4\n\n\nOutput\n\nYES\n\n\nInput\n\n4 7 6 4 5\n\n\nOutput\n\nNO\n\n\nInput\n\n48792 105960835 681218449 90629745 90632170\n\n\nOutput\n\nNO\n\n\nInput\n\n491995 412925347 825318103 59999126 59999339\n\n\nOutput\n\nYES",
        "task_name": "p03666 AtCoder Grand Contest 017 - Moderate Differences",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, a, b, c, d = map(int, raw_input().split())\ndd = b - a\nif dd < 0:\n  dd = -dd\n\ndef get(n, c, d):\n  l = -1\n  r = n\n  while l + 1 < r:\n    mid = (l + r) / 2\n    if mid * c - (n - mid) * d >= 0:\n      r = mid\n    else:\n      l = mid\n  return r\n\nl = get(n, c, d)\n\nok = False\nfor i in range(l, n + 1):\n  ll = i * c - (n - i) * d\n  rr = i * d - (n - i) * c\n  if ll <= dd and rr >= dd:\n    ok = True\n  if ll > dd:\n    break\n\nif ok:\n  print('YES')\nelse:\n  print('NO')\n",
        "correct": false,
        "task_id": "0734",
        "depth": 1
    },
    {
        "description": "There are an integer sequence A_1,...,A_N consisting of N terms, and N buttons. When the i-th (1 \u2266 i \u2266 N) button is pressed, the values of the i terms from the first through the i-th are all incremented by 1.\n\nThere is also another integer sequence B_1,...,B_N. Takahashi will push the buttons some number of times so that for every i, A_i will be a multiple of B_i.\n\nFind the minimum number of times Takahashi will press the buttons.\n\nConstraints\n\n* All input values are integers.\n* 1 \u2266 N \u2266 10^5\n* 0 \u2266 A_i \u2266 10^9(1 \u2266 i \u2266 N)\n* 1 \u2266 B_i \u2266 10^9(1 \u2266 i \u2266 N)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nA_1 B_1\n:\nA_N B_N\n\n\nOutput\n\nPrint an integer representing the minimum number of times Takahashi will press the buttons.\n\nExamples\n\nInput\n\n3\n3 5\n2 7\n9 4\n\n\nOutput\n\n7\n\n\nInput\n\n7\n3 1\n4 1\n5 9\n2 6\n5 3\n5 8\n9 7\n\n\nOutput\n\n22",
        "task_name": "p03821 AtCoder Grand Contest 009 - Multiple Array",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=int(raw_input())\nab=[map(int,raw_input().split()) for _ in xrange(n)]\ncnt=0\nfor i in xrange(n-1,-1,-1):\n    a,b=ab[i][0],ab[i][1]\n    if (a+cnt)%b==0:continue\n    cnt+=b-(a+cnt)%b\nprint(cnt)",
        "correct": true,
        "task_id": "0735",
        "depth": 1
    },
    {
        "description": "Aoki loves numerical sequences and trees.\n\nOne day, Takahashi gave him an integer sequence of length N, a_1, a_2, ..., a_N, which made him want to construct a tree.\n\nAoki wants to construct a tree with N vertices numbered 1 through N, such that for each i = 1,2,...,N, the distance between vertex i and the farthest vertex from it is a_i, assuming that the length of each edge is 1.\n\nDetermine whether such a tree exists.\n\nConstraints\n\n* 2 \u2266 N \u2266 100\n* 1 \u2266 a_i \u2266 N-1\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N\n\n\nOutput\n\nIf there exists a tree that satisfies the condition, print `Possible`. Otherwise, print `Impossible`.\n\nExamples\n\nInput\n\n5\n3 2 2 3 3\n\n\nOutput\n\nPossible\n\n\nInput\n\n3\n1 1 2\n\n\nOutput\n\nImpossible\n\n\nInput\n\n10\n1 2 2 2 2 2 2 2 2 2\n\n\nOutput\n\nPossible\n\n\nInput\n\n10\n1 1 2 2 2 2 2 2 2 2\n\n\nOutput\n\nImpossible\n\n\nInput\n\n6\n1 1 1 1 1 5\n\n\nOutput\n\nImpossible\n\n\nInput\n\n5\n4 3 2 3 4\n\n\nOutput\n\nPossible",
        "task_name": "p03988 AtCoder Grand Contest 005 - Tree Restoring",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=int(raw_input())\na=map(int,raw_input().split())\nmaxa=max(a)\ncmaxa=a.count(maxa)\nca=[0]*(maxa+1)\nfor i in xrange(n):\n    ca[a[i]]+=1\nif maxa%2==1:\n    l=maxa/2+1\n    if a.count(l)==2:\n        for i in xrange(n):\n            if a[i]<l:\n                print(\"Impossible\")\n                exit()\n        for i in xrange(l+1,maxa+1):\n            if ca[i]<2:\n                print(\"Impossible\")\n                exit()\n        print(\"Possible\")\n    else:\n        print(\"Impossible\")\nelse:\n    l=maxa/2\n    if a.count(l)==1:\n        for i in xrange(n):\n            if a[i]<l:\n                print(\"Impossible\")\n                exit()\n        for i in xrange(l+1,maxa+1):\n            if ca[i]<2:\n                print(\"Impossible\")\n                exit()\n        print(\"Possible\")\n    else:\n        print(\"Impossible\")",
        "correct": true,
        "task_id": "0736",
        "depth": 1
    },
    {
        "description": "As I was cleaning up the warehouse, I found an old document that describes how to get to the treasures of my ancestors. The following was written in this ancient document.\n\n\n1. First, stand 1m east of the well on the outskirts of the town and turn straight toward the well.\n2. Turn clockwise 90 degrees, go straight for 1m, and turn straight toward the well.\n3. Turn clockwise 90 degrees, go straight for 1m, and turn straight toward the well.\nFour.                   \u3003\nFive.                   \u3003\n6::\n\n\nFrom the second line onward, exactly the same thing was written. You wanted to find the treasure, but found it awkward. Unlike in the past, the building is in the way, and you can't see the well even if you go straight in the direction of the well, or you can't go straight even if you try to go straight for 1m. In addition, this ancient document has nearly 1000 lines, and it takes a considerable amount of time and physical strength to work according to the ancient document. Fortunately, however, you can take advantage of your computer.\n\nEnter the number of lines n written in the old document and create a program that outputs the location of the treasure. However, n is a positive integer between 2 and 1,000.\n\n\n\ninput\n\nGiven multiple datasets. For each dataset, one integer n, which represents the number of lines in the old document, is given on each line.\n\nThe input ends with -1. The number of datasets does not exceed 50.\n\noutput\n\nAssuming that there is a treasure at the position x (m) to the east and y (m) to the north from the well on the outskirts of the town, output each data set in the following format.\n\n\nx\ny\n\n\nThe output is a real number and may contain an error of 0.01 or less.\n\nExample\n\nInput\n\n3\n6\n-1\n\n\nOutput\n\n0.29\n1.71\n-2.31\n0.80",
        "task_name": "p00076 Treasure Hunt II",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom __future__ import (division, absolute_import, print_function,\n                        unicode_literals)\nfrom sys import stdin\nfrom math import cos, sin, atan2, pi\n\nPI2 = pi / 2\nL = [None, (1.0, 0.0)]\nfor _ in range(2, 1001):\n    x, y = L[-1]\n    rad = atan2(y, x) + PI2\n    L.append((x + cos(rad), y + sin(rad)))\n\nfor line in stdin:\n    n = int(line)\n    if n == -1:\n        break\n    print('{:0.2f}\\n{:0.2f}'.format(*L[n]))",
        "correct": true,
        "task_id": "0737",
        "depth": 1
    },
    {
        "description": "There is one apple tree in Arkady's garden. It can be represented as a set of junctions connected with branches so that there is only one way to reach any junctions from any other one using branches. The junctions are enumerated from 1 to n, the junction 1 is called the root.\n\nA subtree of a junction v is a set of junctions u such that the path from u to the root must pass through v. Note that v itself is included in a subtree of v.\n\nA leaf is such a junction that its subtree contains exactly one junction.\n\nThe New Year is coming, so Arkady wants to decorate the tree. He will put a light bulb of some color on each leaf junction and then count the number happy junctions. A happy junction is such a junction t that all light bulbs in the subtree of t have different colors.\n\nArkady is interested in the following question: for each k from 1 to n, what is the minimum number of different colors needed to make the number of happy junctions be greater than or equal to k?\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of junctions in the tree.\n\nThe second line contains n - 1 integers p_2, p_3, ..., p_n (1 \u2264 p_i < i), where p_i means there is a branch between junctions i and p_i. It is guaranteed that this set of branches forms a tree.\n\nOutput\n\nOutput n integers. The i-th of them should be the minimum number of colors needed to make the number of happy junctions be at least i.\n\nExamples\n\nInput\n\n\n3\n1 1\n\n\nOutput\n\n\n1 1 2 \n\n\nInput\n\n\n5\n1 1 3 3\n\n\nOutput\n\n\n1 1 1 2 3 \n\nNote\n\nIn the first example for k = 1 and k = 2 we can use only one color: the junctions 2 and 3 will be happy. For k = 3 you have to put the bulbs of different colors to make all the junctions happy.\n\nIn the second example for k = 4 you can, for example, put the bulbs of color 1 in junctions 2 and 4, and a bulb of color 2 into junction 5. The happy junctions are the ones with indices 2, 3, 4 and 5 then.",
        "task_name": "1056_D. Decorate Apple Tree",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ninput = sys.stdin.readline\n\ndef One(type):\n\treturn (type(input()))\ndef List(type):\n\treturn list(map(type,input().split()))\ndef Str():\n\treturn (list(input()))\ndef Many(type):\n\treturn map(type,input().split())\n\n\ndef main():\n\tn,c = One(int),List(int)\n\tg = {}\n\tfor i in range(n): g[i]=[]\n\n\tfor i in range(n-1):\n\t\tg[c[i]-1].append(i+1)\n\n\tcont = [0]*n\n\tvis = [False]*n\n\n\tfor i in range(n-1,-1,-1):\n\t\tif len(g[i])==0:\n\t\t\tcont[i] = 1\n\t\telse:\n\t\t\tfor nxt in g[i]:\n\t\t\t\tcont[i]+=cont[nxt]\n\n\tcont.sort()\n\n\tprint(\" \".join([str(cur) for cur in cont]))\n\nmain()\n",
        "correct": true,
        "task_id": "0739",
        "depth": 2
    },
    {
        "description": "Alice and Bob are playing a game on a line with n cells. There are n cells labeled from 1 through n. For each i from 1 to n-1, cells i and i+1 are adjacent.\n\nAlice initially has a token on some cell on the line, and Bob tries to guess where it is. \n\nBob guesses a sequence of line cell numbers x_1, x_2, \u2026, x_k in order. In the i-th question, Bob asks Alice if her token is currently on cell x_i. That is, Alice can answer either \"YES\" or \"NO\" to each Bob's question.\n\nAt most one time in this process, before or after answering a question, Alice is allowed to move her token from her current cell to some adjacent cell. Alice acted in such a way that she was able to answer \"NO\" to all of Bob's questions.\n\nNote that Alice can even move her token before answering the first question or after answering the last question. Alice can also choose to not move at all.\n\nYou are given n and Bob's questions x_1, \u2026, x_k. You would like to count the number of scenarios that let Alice answer \"NO\" to all of Bob's questions. \n\nLet (a,b) denote a scenario where Alice starts at cell a and ends at cell b. Two scenarios (a_i, b_i) and (a_j, b_j) are different if a_i \u2260 a_j or b_i \u2260 b_j.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n,k \u2264 10^5) \u2014 the number of cells and the number of questions Bob asked.\n\nThe second line contains k integers x_1, x_2, \u2026, x_k (1 \u2264 x_i \u2264 n) \u2014 Bob's questions.\n\nOutput\n\nPrint a single integer, the number of scenarios that let Alice answer \"NO\" to all of Bob's questions.\n\nExamples\n\nInput\n\n\n5 3\n5 1 4\n\n\nOutput\n\n\n9\n\n\nInput\n\n\n4 8\n1 2 3 4 4 3 2 1\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n100000 1\n42\n\n\nOutput\n\n\n299997\n\nNote\n\nThe notation (i,j) denotes a scenario where Alice starts at cell i and ends at cell j.\n\nIn the first example, the valid scenarios are (1, 2), (2, 1), (2, 2), (2, 3), (3, 2), (3, 3), (3, 4), (4, 3), (4, 5). For example, (3,4) is valid since Alice can start at cell 3, stay there for the first three questions, then move to cell 4 after the last question. \n\n(4,5) is valid since Alice can start at cell 4, stay there for the first question, the move to cell 5 for the next two questions. Note that (4,5) is only counted once, even though there are different questions that Alice can choose to do the move, but remember, we only count each pair of starting and ending positions once.\n\nIn the second example, Alice has no valid scenarios.\n\nIn the last example, all (i,j) where |i-j| \u2264 1 except for (42, 42) are valid scenarios.",
        "task_name": "1147_A. Hide and Seek",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n\"\"\"<https://github.com/cheran-senthil/PyRival>\"\"\"\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    _str = str\n    str = lambda x=b\"\": x if type(x) is bytes else _str(x).encode()\n\n\ndef main():\n    n, k = readlist()\n    x = readlist()\n\n    counter = [(-1, -1)] * (n + 1)\n    for i, xi in enumerate(x):\n        if counter[xi][0] == -1:\n            counter[xi] = (i, -1)\n        else:\n            counter[xi] = (counter[xi][0], i)\n\n    res = 0\n    for i in range(1, n + 1):\n        if counter[i][0] == -1:\n            res += 1\n\n    for i in range(1, n):\n        if counter[i][0] != -1:\n            if counter[i][1] != -1:\n                if counter[i + 1][0] == -1 or counter[i + 1][0] > counter[i][1]:\n                    res += 1\n            else:\n                if counter[i + 1][0] == -1 or counter[i + 1][0] > counter[i][0]:\n                    res += 1\n        else:\n            res += 1\n\n    for i in range(1, n):\n        if counter[i + 1][0] != -1:\n            if counter[i + 1][1] != -1:\n                if counter[i][0] == -1 or counter[i][0] > counter[i + 1][1]:\n                    res += 1\n            else:\n                if counter[i][0] == -1 or counter[i][0] > counter[i + 1][0]:\n                    res += 1\n        else:\n            res += 1\n\n    print(res)\n\n\n# region template\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._buffer = BytesIO()\n        self._fd = file.fileno()\n        self._writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self._buffer.write if self._writable else None\n\n    def read(self):\n        if self._buffer.tell():\n            return self._buffer.read()\n        return os.read(self._fd, os.fstat(self._fd).st_size)\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self._buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(b), self._buffer.seek(ptr)\n        self.newlines -= 1\n        return self._buffer.readline()\n\n    def flush(self):\n        if self._writable:\n            os.write(self._fd, self._buffer.getvalue())\n            self._buffer.truncate(0), self._buffer.seek(0)\n\n\nclass ostream:\n    def __lshift__(self, a):\n        if a is endl:\n            sys.stdout.write(b\"\\n\")\n            sys.stdout.flush()\n        else:\n            sys.stdout.write(str(a))\n        return self\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", b\" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", b\"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nsys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\ncout, endl = ostream(), object()\n\nreadline = sys.stdin.readline\nreadlist = lambda var=int: [var(n) for n in readline().split()]\ninput = lambda: readline().rstrip(b\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": true,
        "task_id": "0740",
        "depth": 1
    },
    {
        "description": "Toad Rash has a binary string s. A binary string consists only of zeros and ones.\n\nLet n be the length of s.\n\nRash needs to find the number of such pairs of integers l, r that 1 \u2264 l \u2264 r \u2264 n and there is at least one pair of integers x, k such that 1 \u2264 x, k \u2264 n, l \u2264 x < x + 2k \u2264 r, and s_x = s_{x+k} = s_{x+2k}.\n\nFind this number of pairs for Rash.\n\nInput\n\nThe first line contains the string s (1 \u2264 |s| \u2264 300 000), consisting of zeros and ones.\n\nOutput\n\nOutput one integer: the number of such pairs of integers l, r that 1 \u2264 l \u2264 r \u2264 n and there is at least one pair of integers x, k such that 1 \u2264 x, k \u2264 n, l \u2264 x < x + 2k \u2264 r, and s_x = s_{x+k} = s_{x+2k}.\n\nExamples\n\nInput\n\n\n010101\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n11001100\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first example, there are three l, r pairs we need to count: 1, 6; 2, 6; and 1, 5.\n\nIn the second example, there are no values x, k for the initial string, so the answer is 0.",
        "task_name": "1168_B. Good Triple",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a = raw_input()\n\ndef fun(k,n):\n    x = n\n    for i in range(k,k+9):\n        for j in range(1,5):\n            if (i+2*j)<n and a[i]==a[i+j] and a[i+j] == a[i+2*j]:\n                x = min(x,i+2*j)\n    return x\n    \n    \nans = 0\nn = len(a)\nfor i in range(n):\n    ans += n-fun(i,n)\n    \nprint (ans)",
        "correct": true,
        "task_id": "0741",
        "depth": 2
    },
    {
        "description": "Balph is learning to play a game called Buma. In this game, he is given a row of colored balls. He has to choose the color of one new ball and the place to insert it (between two balls, or to the left of all the balls, or to the right of all the balls).\n\nWhen the ball is inserted the following happens repeatedly: if some segment of balls of the same color became longer as a result of a previous action and its length became at least 3, then all the balls of this segment are eliminated. \n\nConsider, for example, a row of balls 'AAABBBWWBB'. Suppose Balph chooses a ball of color 'W' and the place to insert it after the sixth ball, i. e. to the left of the two 'W's. After Balph inserts this ball, the balls of color 'W' are eliminated, since this segment was made longer and has length 3 now, so the row becomes 'AAABBBBB'. The balls of color 'B' are eliminated now, because the segment of balls of color 'B' became longer and has length 5 now. Thus, the row becomes 'AAA'. However, none of the balls are eliminated now, because there is no elongated segment.\n\nHelp Balph count the number of possible ways to choose a color of a new ball and a place to insert it that leads to the elimination of all the balls.\n\nInput\n\nThe only line contains a non-empty string of uppercase English letters of length at most 3 \u22c5 10^5. Each letter represents a ball with the corresponding color.\n\nOutput\n\nOutput the number of ways to choose a color and a position of a new ball in order to eliminate all the balls.\n\nExamples\n\nInput\n\n\nBBWWBB\n\n\nOutput\n\n\n3\n\n\nInput\n\n\nBWWB\n\n\nOutput\n\n\n0\n\n\nInput\n\n\nBBWBB\n\n\nOutput\n\n\n0\n\n\nInput\n\n\nOOOWWW\n\n\nOutput\n\n\n0\n\n\nInput\n\n\nWWWOOOOOOWWW\n\n\nOutput\n\n\n7",
        "task_name": "1267_B. Balls of Buma",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\ns, all = stdin.readline().strip(), []\nlst, ans = [s[0], 1], 0\n\nfor i in s[1:]:\n    if i != lst[0]:\n        all.append(lst)\n        lst = [i, 0]\n    lst[-1] += 1\n\nall.append(lst)\nif (len(all) & 1):\n    l = r = len(all) >> 1\n    if all[r][1] >= 2:\n        ans = all[r][1] + 1\n        l -= 1\n        r += 1\n        while l > -1:\n            if all[l][0] != all[r][0] or all[l][1] + all[r][1] < 3:\n                ans = 0\n                break\n\n            l -= 1\n            r += 1\nprint(ans)\n",
        "correct": true,
        "task_id": "0743",
        "depth": 1
    },
    {
        "description": "    per nextum in unam tum XI conscribementis fac sic  \n        vestibulo perlegementum da varo.  \n        morde varo.  \n        seqis cumula varum.  \n    cis  \n      \n    per nextum in unam tum XI conscribementis fac sic  \n        seqis decumulamenta da varo.  \n        varum privamentum fodementum da aresulto.  \n        varum tum III elevamentum tum V multiplicamentum da bresulto.  \n        aresultum tum bresultum addementum da resulto.  \n      \n        si CD tum resultum non praestantiam fac sic  \n            dictum sic f(%d) = %.2f cis tum varum tum resultum egresso describe.  \n            novumversum egresso scribe.  \n        cis  \n        si CD tum resultum praestantiam fac sic  \n            dictum sic f(%d) = MAGNA NIMIS! cis tum varum egresso describe.  \n            novumversum egresso scribe.          \n        cis  \n    cis  \n    \n\nInput\n\nThe input consists of several integers, one per line. Each integer is between -50 and 50, inclusive.\n\nOutput\n\nAs described in the problem statement.\n\nExample\n\nInput\n\n\n0\n1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n10\n\n\nOutput\n\n\nf(10) = MAGNA NIMIS!\nf(-9) = -3642.00\nf(-8) = -2557.17\nf(-7) = -1712.35\nf(-6) = -1077.55\nf(-5) = -622.76\nf(-4) = -318.00\nf(-3) = -133.27\nf(-2) = -38.59\nf(1) = 6.00\nf(0) = 0.00",
        "task_name": "1331_G. Lingua Romana",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "f = []\nfor i in range(11):\n    f.append(int(raw_input()))\n\nfrom math import *\n\nf.reverse()\nfor x in f:\n    y = abs(x)\n    z = sqrt(y) + x ** 3 * 5\n    if (z < 400):\n        print(\"f(%d) = %.2f\" % (x, z))\n    else:\n        print(\"f(%d) = MAGNA NIMIS!\" % (x))",
        "correct": true,
        "task_id": "0745",
        "depth": 1
    },
    {
        "description": "You are given two positive integers n (1 \u2264 n \u2264 10^9) and k (1 \u2264 k \u2264 100). Represent the number n as the sum of k positive integers of the same parity (have the same remainder when divided by 2).\n\nIn other words, find a_1, a_2, \u2026, a_k such that all a_i>0, n = a_1 + a_2 + \u2026 + a_k and either all a_i are even or all a_i are odd at the same time.\n\nIf such a representation does not exist, then report it.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases in the input. Next, t test cases are given, one per line.\n\nEach test case is two positive integers n (1 \u2264 n \u2264 10^9) and k (1 \u2264 k \u2264 100).\n\nOutput\n\nFor each test case print:\n\n  * YES and the required values a_i, if the answer exists (if there are several answers, print any of them); \n  * NO if the answer does not exist. \n\n\n\nThe letters in the words YES and NO can be printed in any case.\n\nExample\n\nInput\n\n\n8\n10 3\n100 4\n8 7\n97 2\n8 8\n3 10\n5 3\n1000000000 9\n\n\nOutput\n\n\nYES\n4 2 4\nYES\n55 5 5 35\nNO\nNO\nYES\n1 1 1 1 1 1 1 1\nNO\nYES\n3 1 1\nYES\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120",
        "task_name": "1352_B. Same Parity Summands",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\n\n\ndef dmain():\n    sys.setrecursionlimit(1000000)\n    threading.stack_size(1024000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import log,sqrt,factorial,cos,tan,sin,radians\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *\n#import threading\n#from itertools import permutations\n#Copy 2D list  m = [x[:] for x in mark] .. Avoid Using Deepcopy\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[1] \ndef sort2(l):return sorted(l, key=getKey,reverse=True)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\ndef ncr(n,r): return factorial(n)//(factorial(r)*factorial(max(n-r,1)))\n\ndef ceil(x,y):\n    if x%y==0:\n        return x//y\n    else:\n        return x//y+1\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\ndef lower_bound(l,k):\n    s = 0\n    e = len(l) - 1\n    while(s<e):\n        m = (s+e)//2\n        if(l[m] >= k):\n            e = m\n        else:\n            s = m+1\n    return s\n\ndef upper_bound(l,k):\n    s = 0\n    e = len(l) - 1\n    while(s<e):\n        m = (s+e)//2\n        if(l[m] <= k):\n            s = m+1\n        else:\n            e = m\n    return s\n\ndef bs(l,k):\n    s = 0\n    e = len(l) - 1\n    while(s<=e):\n        m = (s+e)//2\n        if(l[m] == k):\n            return m\n        elif(l[m] > k):\n            e = m-1\n        else:\n            s = m+1\n    return -1\n\n\ndef read():\n    sys.stdin  = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\n\ndef ii():  return int(input())\ndef si():  return input()\ndef mi():  return map(int,input().strip().split(\" \"))\ndef msi(): return map(str,input().strip().split(\" \"))\ndef li():  return list(mi())\n\n\n\ndef main():\n    # read()\n    for _ in range(ii()):\n        n,k = mi()\n        if(k>n):\n            print(\"NO\")\n            \n        elif(n==k):\n            print(\"YES\")\n            for i in range(n):\n                print(1,end=\" \")\n            print()\n        else:\n            if(n%2==0 and k%2==0):\n                print(\"YES\")\n                if(k*2 <= n):\n                    for i in range(k-1):\n                        print(2,end=\" \")\n                    print(n-((k-1)*2))\n                else:\n                    for i in range(k-1):\n                        print(1,end=\" \")\n                    print(n-(k-1))\n            elif(n%2==0 and k%2==1):\n                if(k*2 <= n):\n                    print(\"YES\")\n                    for i in range(k-1):\n                        print(2,end=\" \")\n                    print(n-((k-1)*2))\n                else:\n                    print(\"NO\")\n            elif(n%2):\n                if(k%2==0):\n                    print(\"NO\")\n                else:\n                    print(\"YES\")\n                    for i in range(k-1):\n                        print(1,end=\" \")\n                    print(n-(k-1))\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n# region fastio\n# template taken from https://github.com/cheran-senthil/PyRival/blob/master/templates/template.py\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    \n    main()\n    #dmain()\n\n# Comment Read()\n\n\n",
        "correct": true,
        "task_id": "0746",
        "depth": 2
    },
    {
        "description": "Jett is tired after destroying the town and she wants to have a rest. She likes high places, that's why for having a rest she wants to get high and she decided to craft staircases.\n\nA staircase is a squared figure that consists of square cells. Each staircase consists of an arbitrary number of stairs. If a staircase has n stairs, then it is made of n columns, the first column is 1 cell high, the second column is 2 cells high, \u2026, the n-th column if n cells high. The lowest cells of all stairs must be in the same row.\n\nA staircase with n stairs is called nice, if it may be covered by n disjoint squares made of cells. All squares should fully consist of cells of a staircase.\n\nThis is how a nice covered staircase with 7 stairs looks like: <image>\n\nFind out the maximal number of different nice staircases, that can be built, using no more than x cells, in total. No cell can be used more than once.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe description of each test case contains a single integer x (1 \u2264 x \u2264 10^{18}) \u2014 the number of cells for building staircases.\n\nOutput\n\nFor each test case output a single integer \u2014 the number of different nice staircases, that can be built, using not more than x cells, in total.\n\nExample\n\nInput\n\n\n4\n1\n8\n6\n1000000000000000000\n\n\nOutput\n\n\n1\n2\n1\n30\n\nNote\n\nIn the first test case, it is possible to build only one staircase, that consists of 1 stair. It's nice. That's why the answer is 1.\n\nIn the second test case, it is possible to build two different nice staircases: one consists of 1 stair, and another consists of 3 stairs. This will cost 7 cells. In this case, there is one cell left, but it is not possible to use it for building any nice staircases, that have not been built yet. That's why the answer is 2.\n\nIn the third test case, it is possible to build only one of two nice staircases: with 1 stair or with 3 stairs. In the first case, there will be 5 cells left, that may be used only to build a staircase with 2 stairs. This staircase is not nice, and Jett only builds nice staircases. That's why in this case the answer is 1. If Jett builds a staircase with 3 stairs, then there are no more cells left, so the answer is 1 again.",
        "task_name": "1419_B. Stairs",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "t=int(raw_input())\nfor _ in range(t):\n    x=int(raw_input())\n    l=1\n    ans=1\n    sm=1\n    for i in range(2,10^6):\n        l=2*l+1\n        sm+=(l*(l+1))/2\n        if sm>x:\n            break\n    print(i-1)",
        "correct": false,
        "task_id": "0747",
        "depth": 2
    },
    {
        "description": "You are given a string s of even length n. String s is binary, in other words, consists only of 0's and 1's.\n\nString s has exactly n/2 zeroes and n/2 ones (n is even).\n\nIn one operation you can reverse any substring of s. A substring of a string is a contiguous subsequence of that string.\n\nWhat is the minimum number of operations you need to make string s alternating? A string is alternating if s_i \u2260 s_{i + 1} for all i. There are two types of alternating strings in general: 01010101... or 10101010...\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (2 \u2264 n \u2264 10^5; n is even) \u2014 the length of string s.\n\nThe second line of each test case contains a binary string s of length n (s_i \u2208 {0, 1}). String s has exactly n/2 zeroes and n/2 ones.\n\nIt's guaranteed that the total sum of n over test cases doesn't exceed 10^5.\n\nOutput\n\nFor each test case, print the minimum number of operations to make s alternating.\n\nExample\n\nInput\n\n\n3\n2\n10\n4\n0110\n8\n11101000\n\n\nOutput\n\n\n0\n1\n2\n\nNote\n\nIn the first test case, string 10 is already alternating.\n\nIn the second test case, we can, for example, reverse the last two elements of s and get: 0110 \u2192 0101.\n\nIn the third test case, we can, for example, make the following two operations: \n\n  1. 11101000 \u2192 10101100; \n  2. 10101100 \u2192 10101010. ",
        "task_name": "1437_B. Reverse Binary Strings",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from collections import defaultdict\nfrom functools import reduce\nfrom bisect import bisect_right\nfrom bisect import bisect_left\nimport copy\nimport atexit, io, sys\ndef main():\n    buffer = io.BytesIO() \n    sys.stdout = buffer\n\n    @atexit.register \n    def write(): \n        sys.__stdout__.write(buffer.getvalue())\n    for _ in xrange(input()):\n        n=input()\n        l=raw_input()\n        l+='+'\n        c1=0\n        c0=0\n        OI=0\n        IO=0\n        for i in xrange(1,n):\n            if l[i]=='1' and l[i-1]=='1' :\n                c1+=1\n            if l[i]=='0' and l[i-1]=='0' :\n                c0+=1\n            if l[i]=='1' and l[i-1]=='0' and l[i+1]!='0':\n                OI+=1\n            if l[i]=='0' and l[i-1]=='1' and l[i+1]!='1':\n                IO+=1\n        #print n,OI,IO,c1,c0\n        print(min(OI,IO)+min(c1,c0))\n                \n            \n\nif __name__ == '__main__':\n    main()",
        "correct": false,
        "task_id": "0748",
        "depth": 2
    },
    {
        "description": "n heroes fight against each other in the Arena. Initially, the i-th hero has level a_i.\n\nEach minute, a fight between two different heroes occurs. These heroes can be chosen arbitrarily (it's even possible that it is the same two heroes that were fighting during the last minute).\n\nWhen two heroes of equal levels fight, nobody wins the fight. When two heroes of different levels fight, the one with the higher level wins, and his level increases by 1.\n\nThe winner of the tournament is the first hero that wins in at least 100^{500} fights (note that it's possible that the tournament lasts forever if no hero wins this number of fights, then there is no winner). A possible winner is a hero such that there exists a sequence of fights that this hero becomes the winner of the tournament.\n\nCalculate the number of possible winners among n heroes.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nEach test case consists of two lines. The first line contains one integer n (2 \u2264 n \u2264 100) \u2014 the number of heroes. The second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 100), where a_i is the initial level of the i-th hero.\n\nOutput\n\nFor each test case, print one integer \u2014 the number of possible winners among the given n heroes.\n\nExample\n\nInput\n\n\n3\n3\n3 2 2\n2\n5 5\n4\n1 3 3 7\n\n\nOutput\n\n\n1\n0\n3\n\nNote\n\nIn the first test case of the example, the only possible winner is the first hero.\n\nIn the second test case of the example, each fight between the heroes results in nobody winning it, so the tournament lasts forever and there is no winner.",
        "task_name": "1487_A. Arena",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\ninputData = InputData()\ninput = inputData.input\n\ndef intin():\n    return(int(input()))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(input()))\ndef strin():\n    return input()\ndef lout(l, sep=\"\\n\"):\n    print(sep.join(l))\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\n# from collections import defaultdict as ddict, Counter\n# from heapq import *\n# from Queue import Queue\n\ndef main():\n    n = intin()\n    a = intlin()\n    print(sum([1 for x in a if x > min(a)]))\n\n\nfor _ in xrange(intin()):\n    main()\n    # ans = main()\n    # print(\"YES\" if ans else \"NO\")\n    # if ans:\n    #     lout(ans, ' ')\n# main()\n\nif testing:\n    sys.stdout = cmd\n    print(int(round(time() * 1000))  - start_time)",
        "correct": true,
        "task_id": "0749",
        "depth": 1
    },
    {
        "description": "Vasya has found a piece of paper with an array written on it. The array consists of n integers a1, a2, ..., an. Vasya noticed that the following condition holds for the array ai \u2264 ai + 1 \u2264 2\u00b7ai for any positive integer i (i < n).\n\nVasya wants to add either a \"+\" or a \"-\" before each number of array. Thus, Vasya will get an expression consisting of n summands. The value of the resulting expression is the sum of all its elements. The task is to add signs \"+\" and \"-\" before each number so that the value of expression s meets the limits 0 \u2264 s \u2264 a1. Print a sequence of signs \"+\" and \"-\", satisfying the given limits. It is guaranteed that the solution for the problem exists.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 105) \u2014 the size of the array. The second line contains space-separated integers a1, a2, ..., an (0 \u2264 ai \u2264 109) \u2014 the original array. \n\nIt is guaranteed that the condition ai \u2264 ai + 1 \u2264 2\u00b7ai fulfills for any positive integer i (i < n).\n\nOutput\n\nIn a single line print the sequence of n characters \"+\" and \"-\", where the i-th character is the sign that is placed in front of number ai. The value of the resulting expression s must fit into the limits 0 \u2264 s \u2264 a1. If there are multiple solutions, you are allowed to print any of them.\n\nExamples\n\nInput\n\n4\n1 2 3 5\n\n\nOutput\n\n+++-\n\nInput\n\n3\n3 3 5\n\n\nOutput\n\n++-",
        "task_name": "257_D. Sum",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nn = int(raw_input())\ns = raw_input()\n\nmas = map(int,s.split())\nans = list()\n\nsum1=0\nsum2=0\n\nfor i in range(n-1,-1,-1):\n    if sum1<=sum2:\n        sum1=sum1+mas[i]\n        ans.append(0) # '+'\n    else:\n        sum2=sum2+mas[i]\n        ans.append(1) # '-'\nans.reverse()\nfor i in range(n):\n    if sum1<sum2:\n        ans[i]=1-ans[i]\n    if ans[i]==0:\n        sys.stdout.write('+')\n    else:\n        sys.stdout.write('-')\n",
        "correct": true,
        "task_id": "0751",
        "depth": 1
    },
    {
        "description": "Recently, a start up by two students of a state university of city F gained incredible popularity. Now it's time to start a new company. But what do we call it?\n\nThe market analysts came up with a very smart plan: the name of the company should be identical to its reflection in a mirror! In other words, if we write out the name of the company on a piece of paper in a line (horizontally, from left to right) with large English letters, then put this piece of paper in front of the mirror, then the reflection of the name in the mirror should perfectly match the line written on the piece of paper.\n\nThere are many suggestions for the company name, so coming up to the mirror with a piece of paper for each name wouldn't be sensible. The founders of the company decided to automatize this process. They asked you to write a program that can, given a word, determine whether the word is a 'mirror' word or not.\n\nInput\n\nThe first line contains a non-empty name that needs to be checked. The name contains at most 105 large English letters. The name will be written with the next sans serif font: \n\n<image>\n\nOutput\n\nPrint 'YES' (without the quotes), if the given name matches its mirror reflection. Otherwise, print 'NO' (without the quotes).\n\nExamples\n\nInput\n\nAHA\n\n\nOutput\n\nYES\n\n\nInput\n\nZ\n\n\nOutput\n\nNO\n\n\nInput\n\nXO\n\n\nOutput\n\nNO",
        "task_name": "420_A. Start Up",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n#import time\n#the_start_time = time.time()\n#import sys\n#import random\n#import os.path\n\n\ndef main():\n\t\n\timport sys\n\t#import math\n\t#from Queue import PriorityQueue\n\t\n\t\n\t_real_letters = ['A','H','I','M','O','T','U','V','W','X','Y']\n\t\n\t_name = sys.stdin.readline().strip()\n\t\n\tN = len(_name)\n\t_middle = N>>1 \n\t_decision = 'YES'\n\tif (_name[_middle] not in _real_letters):\n\t\t_decision = 'NO' \n\telse:\n\t\tj = N-1\n\t\tfor i in range(_middle):\n\t\t\tif (_name[i] !=  _name[j]):\n\t\t\t\t_decision = 'NO'\n\t\t\t\tbreak\n\t\t\tif (_name[i] not in _real_letters):\n\t\t\t\t_decision = 'NO'\n\t\t\t\tbreak\n\t\t\tj -= 1\n\t\t\n\t\t\n\tsys.stdout.write(str(_decision)+\"\\n\")\n\t\n\t\nif __name__ == \"__main__\":\n\t\n\tmain()\n\t\n\t#elapsed_time = time.time() - the_start_time\n\t#print(elapsed_time)  ",
        "correct": true,
        "task_id": "0752",
        "depth": 1
    },
    {
        "description": "Companies always have a lot of equipment, furniture and other things. All of them should be tracked. To do this, there is an inventory number assigned with each item. It is much easier to create a database by using those numbers and keep the track of everything.\n\nDuring an audit, you were surprised to find out that the items are not numbered sequentially, and some items even share the same inventory number! There is an urgent need to fix it. You have chosen to make the numbers of the items sequential, starting with 1. Changing a number is quite a time-consuming process, and you would like to make maximum use of the current numbering.\n\nYou have been given information on current inventory numbers for n items in the company. Renumber items so that their inventory numbers form a permutation of numbers from 1 to n by changing the number of as few items as possible. Let us remind you that a set of n numbers forms a permutation if all the numbers are in the range from 1 to n, and no two numbers are equal.\n\nInput\n\nThe first line contains a single integer n \u2014 the number of items (1 \u2264 n \u2264 105).\n\nThe second line contains n numbers a1, a2, ..., an (1 \u2264 ai \u2264 105) \u2014 the initial inventory numbers of the items.\n\nOutput\n\nPrint n numbers \u2014 the final inventory numbers of the items in the order they occur in the input. If there are multiple possible answers, you may print any of them.\n\nExamples\n\nInput\n\n3\n1 3 2\n\n\nOutput\n\n1 3 2 \n\n\nInput\n\n4\n2 2 3 3\n\n\nOutput\n\n2 1 3 4 \n\n\nInput\n\n1\n2\n\n\nOutput\n\n1 \n\nNote\n\nIn the first test the numeration is already a permutation, so there is no need to change anything.\n\nIn the second test there are two pairs of equal numbers, in each pair you need to replace one number.\n\nIn the third test you need to replace 2 by 1, as the numbering should start from one.",
        "task_name": "569_B. Inventory",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nn = int(sys.stdin.readline())\n\narr = map(int, sys.stdin.readline().split())\n\nind = [0]*100000\n\nto_move = []\n\nfor i in xrange(n):        \n    if arr[i] > n or ind[arr[i]-1] == 1:\n        to_move.append(i)\n        continue\n    ind[arr[i]-1] = 1\n\nfor j in xrange(n):\n    if ind[j] == 1:\n        continue\n    arr[to_move.pop()] = j+1\n\nprint >> sys.stdout, \" \".join(map(str, arr))",
        "correct": true,
        "task_id": "0753",
        "depth": 1
    },
    {
        "description": "Each employee of the \"Blake Techologies\" company uses a special messaging app \"Blake Messenger\". All the stuff likes this app and uses it constantly. However, some important futures are missing. For example, many users want to be able to search through the message history. It was already announced that the new feature will appear in the nearest update, when developers faced some troubles that only you may help them to solve.\n\nAll the messages are represented as a strings consisting of only lowercase English letters. In order to reduce the network load strings are represented in the special compressed form. Compression algorithm works as follows: string is represented as a concatenation of n blocks, each block containing only equal characters. One block may be described as a pair (li, ci), where li is the length of the i-th block and ci is the corresponding letter. Thus, the string s may be written as the sequence of pairs <image>.\n\nYour task is to write the program, that given two compressed string t and s finds all occurrences of s in t. Developers know that there may be many such occurrences, so they only ask you to find the number of them. Note that p is the starting position of some occurrence of s in t if and only if tptp + 1...tp + |s| - 1 = s, where ti is the i-th character of string t.\n\nNote that the way to represent the string in compressed form may not be unique. For example string \"aaaa\" may be given as <image>, <image>, <image>...\n\nInput\n\nThe first line of the input contains two integers n and m (1 \u2264 n, m \u2264 200 000) \u2014 the number of blocks in the strings t and s, respectively.\n\nThe second line contains the descriptions of n parts of string t in the format \"li-ci\" (1 \u2264 li \u2264 1 000 000) \u2014 the length of the i-th part and the corresponding lowercase English letter.\n\nThe second line contains the descriptions of m parts of string s in the format \"li-ci\" (1 \u2264 li \u2264 1 000 000) \u2014 the length of the i-th part and the corresponding lowercase English letter.\n\nOutput\n\nPrint a single integer \u2014 the number of occurrences of s in t.\n\nExamples\n\nInput\n\n5 3\n3-a 2-b 4-c 3-a 2-c\n2-a 2-b 1-c\n\n\nOutput\n\n1\n\nInput\n\n6 1\n3-a 6-b 7-a 4-c 8-e 2-a\n3-a\n\n\nOutput\n\n6\n\nInput\n\n5 5\n1-h 1-e 1-l 1-l 1-o\n1-w 1-o 1-r 1-l 1-d\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample, t = \"aaabbccccaaacc\", and string s = \"aabbc\". The only occurrence of string s in string t starts at position p = 2.\n\nIn the second sample, t = \"aaabbbbbbaaaaaaacccceeeeeeeeaa\", and s = \"aaa\". The occurrences of s in t start at positions p = 1, p = 10, p = 11, p = 12, p = 13 and p = 14.",
        "task_name": "631_D. Messenger",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def ziped(ar):\n    p = []\n    for i in ar:\n        x = int(i.split('-')[0])\n        c = i.split('-')[1]\n\n        if len(p) > 0 and p[-1][1] == c:\n            p[-1][0] += x\n        else:\n            p.append([x,c])\n\n\n    return p\n\ndef solve(t,s,c):\n    ans = 0\n    if len(s) == 1:\n        for i in t:\n            if c(i,s[0]):\n                ans += i[0] - s[0][0] + 1\n        return ans\n    if len(s) == 2:\n        for i in range(len(t)-1):\n            if c(t[i],s[0]) and c(t[i+1],s[-1]):\n                ans += 1\n        return  ans\n    v = s[1:-1] + [[100500,'#']] + t\n    p = [0]* len(v)\n    for i in range(1,len(v)):\n        j = p[i-1]\n        while j > 0 and v[j] != v[i]:\n            j = p[j-1]\n        if v[j] == v[i]:\n            j += 1\n        p[i] = j\n    for i in range(len(v)-1):\n        if p[i] == len(s) - 2 and c(v[i-p[i]],s[0]) and c(v[i+1],s[-1]):\n            ans += 1\n    return  ans\n\n\nn,m = map(int , raw_input().split())\nt = ziped(raw_input().split())\ns = ziped(raw_input().split())\nprint (solve(t,s, lambda x,y:x[1] == y[1] and x[0] >= y[0]))\n",
        "correct": true,
        "task_id": "0754",
        "depth": 2
    },
    {
        "description": "Consider 2n rows of the seats in a bus. n rows of the seats on the left and n rows of the seats on the right. Each row can be filled by two people. So the total capacity of the bus is 4n.\n\nConsider that m (m \u2264 4n) people occupy the seats in the bus. The passengers entering the bus are numbered from 1 to m (in the order of their entering the bus). The pattern of the seat occupation is as below:\n\n1-st row left window seat, 1-st row right window seat, 2-nd row left window seat, 2-nd row right window seat, ... , n-th row left window seat, n-th row right window seat.\n\nAfter occupying all the window seats (for m > 2n) the non-window seats are occupied:\n\n1-st row left non-window seat, 1-st row right non-window seat, ... , n-th row left non-window seat, n-th row right non-window seat.\n\nAll the passengers go to a single final destination. In the final destination, the passengers get off in the given order.\n\n1-st row left non-window seat, 1-st row left window seat, 1-st row right non-window seat, 1-st row right window seat, ... , n-th row left non-window seat, n-th row left window seat, n-th row right non-window seat, n-th row right window seat.\n\n<image> The seating for n = 9 and m = 36.\n\nYou are given the values n and m. Output m numbers from 1 to m, the order in which the passengers will get off the bus.\n\nInput\n\nThe only line contains two integers, n and m (1 \u2264 n \u2264 100, 1 \u2264 m \u2264 4n) \u2014 the number of pairs of rows and the number of passengers.\n\nOutput\n\nPrint m distinct integers from 1 to m \u2014 the order in which the passengers will get off the bus.\n\nExamples\n\nInput\n\n2 7\n\n\nOutput\n\n5 1 6 2 7 3 4\n\n\nInput\n\n9 36\n\n\nOutput\n\n19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18",
        "task_name": "660_B. Seating On Bus",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nl=list(map(int ,raw_input().split()))\nn=l[0]\nm=l[1]\na=b=c=d=0\n\nk=0\ni=1\nwhile i<=m:\n\tif m>=2*n+1+a:\n\t\tsys.stdout.write(str(2*n+1+a)+\" \")\n\t\ti+=1\n\t\ta+=2\n\n\n\tif m>=1+b:\n\t\tsys.stdout.write(str(1+b)+\" \")\n\t\ti+=1\n\t\tb+=2\n\n\tif m>=2*n+2+c:\n\t\tsys.stdout.write(str(2*n+2+c)+\" \")\n\t\ti+=1\n\t\tc+=2\n\n\tif m>=2+d:\n\t\tsys.stdout.write(str(2+d)+\" \")\n\t\td+=2\n\t\ti=i+1",
        "correct": true,
        "task_id": "0755",
        "depth": 1
    },
    {
        "description": "Mike has a string s consisting of only lowercase English letters. He wants to change exactly one character from the string so that the resulting one is a palindrome. \n\nA palindrome is a string that reads the same backward as forward, for example strings \"z\", \"aaa\", \"aba\", \"abccba\" are palindromes, but strings \"codeforces\", \"reality\", \"ab\" are not.\n\nInput\n\nThe first and single line contains string s (1 \u2264 |s| \u2264 15).\n\nOutput\n\nPrint \"YES\" (without quotes) if Mike can change exactly one character so that the resulting string is palindrome or \"NO\" (without quotes) otherwise. \n\nExamples\n\nInput\n\nabccaa\n\n\nOutput\n\nYES\n\n\nInput\n\nabbcca\n\n\nOutput\n\nNO\n\n\nInput\n\nabcda\n\n\nOutput\n\nYES",
        "task_name": "798_A. Mike and palindrome",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Apr 24 19:16:16 2017\n\n@author: wb\n\"\"\"\n\nlist=raw_input()\nlength=len(list)\nlendo=len(list)/2\n\n\nans=0\nfor i in range(0,lendo):\n    if list[i]!=list[length-1-i]:\n        ans=ans+1\n\n \nif (ans<=1):\n    print(\"YES\")\nelse:\n    print(\"NO\")",
        "correct": false,
        "task_id": "0757",
        "depth": 1
    },
    {
        "description": "Polycarp loves lowercase letters and dislikes uppercase ones. Once he got a string s consisting only of lowercase and uppercase Latin letters.\n\nLet A be a set of positions in the string. Let's call it pretty if following conditions are met:\n\n  * letters on positions from A in the string are all distinct and lowercase; \n  * there are no uppercase letters in the string which are situated between positions from A (i.e. there is no such j that s[j] is an uppercase letter, and a1 < j < a2 for some a1 and a2 from A). \n\n\n\nWrite a program that will determine the maximum number of elements in a pretty set of positions.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 200) \u2014 length of string s.\n\nThe second line contains a string s consisting of lowercase and uppercase Latin letters.\n\nOutput\n\nPrint maximum number of elements in pretty set of positions for string s.\n\nExamples\n\nInput\n\n11\naaaaBaabAbA\n\n\nOutput\n\n2\n\n\nInput\n\n12\nzACaAbbaazzC\n\n\nOutput\n\n3\n\n\nInput\n\n3\nABC\n\n\nOutput\n\n0\n\nNote\n\nIn the first example the desired positions might be 6 and 8 or 7 and 8. Positions 6 and 7 contain letters 'a', position 8 contains letter 'b'. The pair of positions 1 and 8 is not suitable because there is an uppercase letter 'B' between these position.\n\nIn the second example desired positions can be 7, 8 and 11. There are other ways to choose pretty set consisting of three elements.\n\nIn the third example the given string s does not contain any lowercase letters, so the answer is 0.",
        "task_name": "864_B. Polycarp and Letters",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=int(raw_input())\nword=raw_input()\n\nlow=word.lower()\n\n\ni=1\nres=[word[0]]\n\nwhile i<n:\n    if word[i]!=res[len(res)-1]:\n        res.append(word[i])\n    i+=1\ni=0\nmax_count=-1\nwhile i<len(res):\n    count=0\n    if res[i] in low:\n        j=i\n        while j<len(res)and res[j] in low:\n            count+=1\n            j+=1\n    if max_count<count:\n        max_count=count\n    i+=1\nprint(max_count)",
        "correct": false,
        "task_id": "0758",
        "depth": 2
    },
    {
        "description": "In order to put away old things and welcome a fresh new year, a thorough cleaning of the house is a must.\n\nLittle Tommy finds an old polynomial and cleaned it up by taking it modulo another. But now he regrets doing this...\n\nGiven two integers p and k, find a polynomial f(x) with non-negative integer coefficients strictly less than k, whose remainder is p when divided by (x + k). That is, f(x) = q(x)\u00b7(x + k) + p, where q(x) is a polynomial (not necessarily with integer coefficients).\n\nInput\n\nThe only line of input contains two space-separated integers p and k (1 \u2264 p \u2264 1018, 2 \u2264 k \u2264 2 000).\n\nOutput\n\nIf the polynomial does not exist, print a single integer -1, or output two lines otherwise.\n\nIn the first line print a non-negative integer d \u2014 the number of coefficients in the polynomial.\n\nIn the second line print d space-separated integers a0, a1, ..., ad - 1, describing a polynomial <image> fulfilling the given requirements. Your output should satisfy 0 \u2264 ai < k for all 0 \u2264 i \u2264 d - 1, and ad - 1 \u2260 0.\n\nIf there are many possible solutions, print any of them.\n\nExamples\n\nInput\n\n46 2\n\n\nOutput\n\n7\n0 1 0 0 1 1 1\n\n\nInput\n\n2018 214\n\n\nOutput\n\n3\n92 205 1\n\nNote\n\nIn the first example, f(x) = x6 + x5 + x4 + x = (x5 - x4 + 3x3 - 6x2 + 12x - 23)\u00b7(x + 2) + 46.\n\nIn the second example, f(x) = x2 + 205x + 92 = (x - 9)\u00b7(x + 214) + 2018.",
        "task_name": "934_D. A Determined Cleanup",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin \nn, m = map(int, stdin.readline().split())\nans = []\nmm = -m\nwhile n:\n    ff = n/mm\n    if ff * mm > n:\n        ff = ff + 1\n    ans.append(n - ff * mm)\n    n = ff\n\nl = len(ans)\nprint(l)\nfor i in range(0, l):\n    res = ans[i]\n    if res < 0:\n        res += m\n    print(res),",
        "correct": true,
        "task_id": "0760",
        "depth": 1
    },
    {
        "description": "You are given k sequences of integers. The length of the i-th sequence equals to n_i.\n\nYou have to choose exactly two sequences i and j (i \u2260 j) such that you can remove exactly one element in each of them in such a way that the sum of the changed sequence i (its length will be equal to n_i - 1) equals to the sum of the changed sequence j (its length will be equal to n_j - 1).\n\nNote that it's required to remove exactly one element in each of the two chosen sequences.\n\nAssume that the sum of the empty (of the length equals 0) sequence is 0.\n\nInput\n\nThe first line contains an integer k (2 \u2264 k \u2264 2 \u22c5 10^5) \u2014 the number of sequences.\n\nThen k pairs of lines follow, each pair containing a sequence.\n\nThe first line in the i-th pair contains one integer n_i (1 \u2264 n_i < 2 \u22c5 10^5) \u2014 the length of the i-th sequence. The second line of the i-th pair contains a sequence of n_i integers a_{i, 1}, a_{i, 2}, ..., a_{i, n_i}.\n\nThe elements of sequences are integer numbers from -10^4 to 10^4.\n\nThe sum of lengths of all given sequences don't exceed 2 \u22c5 10^5, i.e. n_1 + n_2 + ... + n_k \u2264 2 \u22c5 10^5.\n\nOutput\n\nIf it is impossible to choose two sequences such that they satisfy given conditions, print \"NO\" (without quotes). Otherwise in the first line print \"YES\" (without quotes), in the second line \u2014 two integers i, x (1 \u2264 i \u2264 k, 1 \u2264 x \u2264 n_i), in the third line \u2014 two integers j, y (1 \u2264 j \u2264 k, 1 \u2264 y \u2264 n_j). It means that the sum of the elements of the i-th sequence without the element with index x equals to the sum of the elements of the j-th sequence without the element with index y.\n\nTwo chosen sequences must be distinct, i.e. i \u2260 j. You can print them in any order.\n\nIf there are multiple possible answers, print any of them.\n\nExamples\n\nInput\n\n2\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n\n\nOutput\n\nYES\n2 6\n1 2\n\n\nInput\n\n3\n1\n5\n5\n1 1 1 1 1\n2\n2 3\n\n\nOutput\n\nNO\n\n\nInput\n\n4\n6\n2 2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\n\nOutput\n\nYES\n2 2\n4 1\n\nNote\n\nIn the first example there are two sequences [2, 3, 1, 3, 2] and [1, 1, 2, 2, 2, 1]. You can remove the second element from the first sequence to get [2, 1, 3, 2] and you can remove the sixth element from the second sequence to get [1, 1, 2, 2, 2]. The sums of the both resulting sequences equal to 8, i.e. the sums are equal.",
        "task_name": "988_C. Equal Sums",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "k = int(raw_input())\n\ntk = dict()\n\njam = []\nflag = 0\nfor l in range(k):\n    ni = int(raw_input())\n    arr = list(map(int,raw_input().split()))\n    jam.append(arr)\n    s = sum(arr)\n    sk = list(set(arr))\n    for i in sk:\n        tk[i-s] = tk.get(i-s,[])\n        tk[i-s].append((l,arr.index(i)+1))\n        if len(tk[i-s]) > 1:\n            if jam[tk[i-s][0][0]] != jam[tk[i-s][1][0]]:\n                print(\"YES\")\n                print(str(tk[i-s][0][0]+1)+\" \"+str(tk[i-s][0][1]))\n                print(str(tk[i-s][1][0]+1)+\" \"+str(tk[i-s][1][1]))\n                exit(0)\n\nif not flag :\n    print(\"NO\")\n\n",
        "correct": false,
        "task_id": "0761",
        "depth": 2
    },
    {
        "description": "We have N points in the two-dimensional plane. The coordinates of the i-th point are (X_i,Y_i).\n\nAmong them, we are looking for the points such that the distance from the origin is at most D. How many such points are there?\n\nWe remind you that the distance between the origin and the point (p, q) can be represented as \\sqrt{p^2+q^2}.\n\nConstraints\n\n* 1 \\leq N \\leq 2\\times 10^5\n* 0 \\leq D \\leq 2\\times 10^5\n* |X_i|,|Y_i| \\leq 2\\times 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN D\nX_1 Y_1\n\\vdots\nX_N Y_N\n\n\nOutput\n\nPrint an integer representing the number of points such that the distance from the origin is at most D.\n\nExamples\n\nInput\n\n4 5\n0 5\n-2 4\n3 4\n4 -4\n\n\nOutput\n\n3\n\n\nInput\n\n12 3\n1 1\n1 1\n1 1\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n\n\nOutput\n\n7\n\n\nInput\n\n20 100000\n14309 -32939\n-56855 100340\n151364 25430\n103789 -113141\n147404 -136977\n-37006 -30929\n188810 -49557\n13419 70401\n-88280 165170\n-196399 137941\n-176527 -61904\n46659 115261\n-153551 114185\n98784 -6820\n94111 -86268\n-30401 61477\n-55056 7872\n5901 -163796\n138819 -185986\n-69848 -96669\n\n\nOutput\n\n6",
        "task_name": "p02595 AtCoder Beginner Contest 174 - Distance",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N, D = map(int, input().split())\nans = 0\nD2 = D*D\nfor i in range(N):\n    x, y = map(int, input().split())\n    if (x*x+y*y) <= D2:\n        ans += 1\n\nprint(ans)\n",
        "correct": false,
        "task_id": "0762",
        "depth": 1
    },
    {
        "description": "We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.\n\nConstraints\n\n* N is an integer between 1 and 100 (inclusive).\n* a_i \\ (1 \\leq i \\leq N) is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 a_3 ... a_N\n\n\nOutput\n\nPrint Alice's score minus Bob's score when both players take the optimal strategy to maximize their scores.\n\nExamples\n\nInput\n\n2\n3 1\n\n\nOutput\n\n2\n\n\nInput\n\n3\n2 7 4\n\n\nOutput\n\n5\n\n\nInput\n\n4\n20 18 2 18\n\n\nOutput\n\n18",
        "task_name": "p03434 AtCoder Beginner Contest 088 - Card Game for Two",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\"\"\"One line explanation of b.py.\n\nMore explanations of b.py.\"\"\"\n\nimport sys\n\ndef read_input(fin):\n    l0 = fin.readline()\n    l1 = fin.readline()\n    return sorted([int(c) for c in l1.strip().split(' ')], reverse=True)\n\ndef solve(data):\n    result = 0\n    sign = 1\n    for d in data:\n        result += d * sign\n        sign = -sign\n    return result\n\ndef main(argv):\n    d = read_input(sys.stdin)\n    sys.stdout.write('%d\\n' % solve(d))\n    \n\nif __name__ == '__main__':\n    main(sys.argv)\n",
        "correct": true,
        "task_id": "0765",
        "depth": 1
    },
    {
        "description": "We have an H-by-W matrix. Let a_{ij} be the element at the i-th row from the top and j-th column from the left. In this matrix, each a_{ij} is a lowercase English letter.\n\nSnuke is creating another H-by-W matrix, A', by freely rearranging the elements in A. Here, he wants to satisfy the following condition:\n\n* Every row and column in A' can be read as a palindrome.\n\n\n\nDetermine whether he can create a matrix satisfying the condition.\n\nConstraints\n\n* 1 \u2264 H, W \u2264 100\n* a_{ij} is a lowercase English letter.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W\na_{11}a_{12}...a_{1W}\n:\na_{H1}a_{H2}...a_{HW}\n\n\nOutput\n\nIf Snuke can create a matrix satisfying the condition, print `Yes`; otherwise, print `No`.\n\nExamples\n\nInput\n\n3 4\naabb\naabb\naacc\n\n\nOutput\n\nYes\n\n\nInput\n\n2 2\naa\nbb\n\n\nOutput\n\nNo\n\n\nInput\n\n5 1\nt\nw\ne\ne\nt\n\n\nOutput\n\nYes\n\n\nInput\n\n2 5\nabxba\nabyba\n\n\nOutput\n\nNo\n\n\nInput\n\n1 1\nz\n\n\nOutput\n\nYes",
        "task_name": "p03593 CODE FESTIVAL 2017 qual A - Palindromic Matrix",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import division, print_function\nimport sys\n\n\ndef main():\n    h, w = map(int, sys.stdin.readline().strip().split(\" \"))\n    aa = \"\"\n    for _ in range(h):\n        aa += sys.stdin.readline().strip()\n    d = {}\n    for c in aa:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n\n    # print(d)\n    fours = 0\n    evens = 0\n    odds = 0\n\n    for c, count in d.items():\n        fours += count // 4\n        evens += (count % 4) // 2\n        odds += count % 2\n\n    # print(fours, evens, odds)\n    if h % 2 == 0 and w % 2 == 0:\n        print(\"Yes\" if odds == 0 and evens == 0 else \"No\")\n    elif h % 2 == 0 and w % 2 == 1:\n        print(\"Yes\" if odds == 0 and evens * 2 == h else \"No\")\n    elif h % 2 == 1 and w % 2 == 0:\n        print(\"Yes\" if odds == 0 and evens * 2 == w else \"No\")\n    else:\n        print(\"Yes\" if odds == 1 and evens * 2 == w + h - 2 else \"No\")\n\n\nif __name__ == '__main__':\n    main()\n",
        "correct": false,
        "task_id": "0766",
        "depth": 1
    },
    {
        "description": "When a boy was cleaning up after his grand father passing, he found an old paper:\n\n<image>\n\n\n\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\n\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\n\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers d (the first integer) and t (the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (x, y) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\n\nYou can assume that d \u2264 100 and -180 \u2264 t \u2264 180.\n\n\n\nInput\n\nA sequence of pairs of integers d and t which end with \"0,0\".\n\nOutput\n\nPrint the integer portion of x and y in a line respectively.\n\nExample\n\nInput\n\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\n\n\nOutput\n\n171\n-302",
        "task_name": "p00016 Treasure Hunt",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#! /usr/bin/python\n\nimport math\n\ndef main():\n\n\tturtle = Turtle(0, 0, 0, 1)\n\twhile True:\n\t\tinput = raw_input()\n\t\tif input == '0,0':\n\t\t\tbreak\n\n\t\targs = input.strip().split(',')\n\t\tdist = int(args[0])\n\t\tdegree = int(args[1])\n\n\t\trad = 2 * math.pi * degree / 360.0\n\n\t\tturtle.move(dist)\n\t\tturtle.rotate(rad)\n\n\tprint(\"%d\" % (turtle.x))\n\tprint(\"%d\" % (turtle.y))\n\nclass Turtle:\n\n\tdef __init__(self, x, y, vx, vy):\n\t\tself.x  = x\n\t\tself.y  = y\n\t\tself.vx = vx\n\t\tself.vy = vy\n\t\tself.normalize_velocity()\n\n\tdef move(self, dist):\n\t\tself.x += self.vx * dist\n\t\tself.y += self.vy * dist\n\n\tdef normalize_velocity(self):\n\t\tvx = self.vx\n\t\tvy = self.vy\n\t\tv = math.sqrt(vx * vx + vy * vy)\n\t\tself.vx = vx / v\n\t\tself.vy = vy / v\n\n\tdef rotate(self, theta):\n\t\tvx = self.vx\n\t\tvy = self.vy\n\n\t\tself.vx = vx * math.cos(theta) + vy * math.sin(theta)\n\t\tself.vy = -vx * math.sin(theta) + vy * math.cos(theta)\n\n\nmain()",
        "correct": true,
        "task_id": "0767",
        "depth": 1
    },
    {
        "description": "problem\n\nHanako is playing with n (4 \u2264 n \u2264 10) cards side by side. Each card has one integer between 1 and 99. Hanako chose k cards (2 \u2264 k \u2264 4) from these cards and arranged them in a horizontal row to make an integer. How many kinds of integers can Hanako make in total?\n\nFor example, consider that you are given five cards of 1, 2, 3, 13, 21 and choose three of them to make an integer. By arranging 2, 1, and 13 in this order, we can make an integer 2113. Also, by arranging 21, 1, and 3 in this order, the same integer 2113 can be created. In this way, the same integer may be created from a combination of different cards.\n\nGiven the integers written on n cards, create a program to find the number of integers that can be created by selecting k cards from them and arranging them in a horizontal row.\n\n\n\ninput\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nEach dataset consists of 2 + n rows. The number of cards n (4 \u2264 n \u2264 10) is written on the first line, and the number of cards to be selected k (2 \u2264 k \u2264 4) is written on the second line. On the 2 + i line (1 \u2264 i \u2264 n), the integer from 1 to 99 written on the i-th card is written.\n\nWhen both n and k are 0, it indicates the end of input. The number of data sets does not exceed 5.\n\noutput\n\nFor each data set, the number of integers that Hanako can create is output on one line.\n\nExamples\n\nInput\n\n4\n2\n1\n2\n12\n1\n6\n3\n72\n2\n12\n7\n2\n1\n0\n0\n\n\nOutput\n\n7\n68\n\n\nInput\n\nNone\n\n\nOutput\n\nNone",
        "task_name": "p00469 Lining up the cards",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nfrom itertools import permutations\n\ndef main():\n\twhile True:\n\t\tn = input()\n\t\tk = input()\n\t\tif n == k == 0:\n\t\t\tsys.exit(0)\n\t\tfor i in xrange(n):\n\t\t\tinput()\n#\t\tnums = [raw_input().strip() for i in xrange(n)]\n#\t\tresult = set([\"\".join(p) for p in permutations(nums, k)])\n#\t\tprint (len(result))\n\nif __name__ == '__main__':\n\tsys.exit(main())",
        "correct": false,
        "task_id": "0768",
        "depth": 2
    },
    {
        "description": "Write a program which reads $n$ dices constructed in the same way as Dice I, and determines whether they are all different. For the determination, use the same way as Dice III.\n\nConstraints\n\n* $2 \\leq n \\leq 100$\n* $0 \\leq $ the integer assigned to a face $ \\leq 100$\n\nInput\n\nIn the first line, the number of dices $n$ is given. In the following $n$ lines, six integers assigned to the dice faces are given respectively in the same way as Dice III.\n\nOutput\n\nPrint \"Yes\" if given dices are all different, otherwise \"No\" in a line.\n\nExamples\n\nInput\n\n3\n1 2 3 4 5 6\n6 2 4 3 5 1\n6 5 4 3 2 1\n\n\nOutput\n\nNo\n\n\nInput\n\n3\n1 2 3 4 5 6\n6 5 4 3 2 1\n5 4 3 2 1 6\n\n\nOutput\n\nYes",
        "task_name": "p02386 Dice IV",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "class Dice(object):\n    \"\"\"Dice Class\n\n    \"\"\"\n\n    def __init__(self, numbers):\n        \"\"\"\n\n        Args:\n            numbers:\n        \"\"\"\n        self.numbers_inverse = {numbers[0]: 1, numbers[1]: 2, numbers[2]: 3, numbers[3]: 4, numbers[4]: 5,\n                                numbers[5]: 6}\n        self.numbers = {1: numbers[0], 2: numbers[1], 3: numbers[2], 4: numbers[3], 5: numbers[4], 6: numbers[5]}\n\n        self.vertical = [self.numbers[1], self.numbers[2], self.numbers[6], self.numbers[5]]\n        self.horizontal = [self.numbers[4], self.numbers[1], self.numbers[3], self.numbers[6]]\n\n    def roll_dice(self, str):\n        \"\"\"\n\n        Args:\n            str: move direction\n\n        Returns:\n\n        \"\"\"\n        for s in str:\n            if s == 'N':\n                self.move_north()\n            elif s == 'S':\n                self.move_south()\n            elif s == 'W':\n                self.move_west()\n            elif s == 'E':\n                self.move_east()\n\n    def set_top(self, value):\n        \"\"\"\n        Args:\n            value: target_value\n        \"\"\"\n        counter = 0\n        while counter < 4:\n            if self.vertical[0] == value:\n                self.map_values()\n                return\n            else:\n                self.roll_dice(\"S\")\n            counter += 1\n        counter = 0\n        while counter < 4:\n            if self.vertical[0] == value:\n                self.map_values()\n                return\n            else:\n                self.roll_dice(\"W\")\n            counter += 1\n\n    def set_front(self, value):\n        \"\"\"\n        Args:\n            value: target value\n        \"\"\"\n        counter = 0\n        while counter < 4:\n            if self.vertical[1] == value:\n                self.map_values()\n                return\n            else:\n                self.roll_dice(\"SWN\")\n            counter += 1\n\n    def move_south(self):\n        \"\"\"move this dice towered north\n        \"\"\"\n        self.vertical = (self.vertical * 2)[3:7]\n        self.horizontal[1] = self.vertical[0]\n        self.horizontal[3] = self.vertical[2]\n        self.map_values()\n\n    def move_north(self):\n        \"\"\"move this dice towered south\n        \"\"\"\n        self.vertical = (self.vertical * 2)[1:5]\n        self.horizontal[1] = self.vertical[0]\n        self.horizontal[3] = self.vertical[2]\n        self.map_values()\n\n    def move_east(self):\n        \"\"\"move this dice towered east\n        \"\"\"\n        self.horizontal = (self.horizontal * 2)[3:7]\n        self.vertical[0] = self.horizontal[1]\n        self.vertical[2] = self.horizontal[3]\n        self.map_values()\n\n    def move_west(self):\n        \"\"\"move this dice towered west\n        \"\"\"\n        self.horizontal = (self.horizontal * 2)[1:5]\n        self.vertical[0] = self.horizontal[1]\n        self.vertical[2] = self.horizontal[3]\n        self.map_values()\n\n    def map_values(self):\n        self.numbers[1] = self.vertical[0]\n        self.numbers[2] = self.vertical[1]\n        self.numbers[3] = self.horizontal[2]\n        self.numbers[4] = self.horizontal[0]\n        self.numbers[5] = self.vertical[3]\n        self.numbers[6] = self.vertical[2]\n\n    def get_top(self):\n        return self.vertical[0]\n\n\ndef is_same(dice1, dice2):\n    \"\"\"compare two dices\n\n    Args:\n        dice1: dice1\n        dice2: dice2\n\n    Returns:\n        Bool (whether dice1 is equals to be dice2 or not)\n    \"\"\"\n    flag = False\n    if dice1.numbers == dice2.numbers:\n        flag = True\n    else:\n        for i in range(6):\n            dice1.set_top(i + 1)\n            for j in xrange(4):\n                dice1.roll_dice(\"SWN\")\n                if dice1.numbers == dice2.numbers:\n                    flag = True\n            dice1.roll_dice(\"S\")\n\n    return flag\n\n\ndice_number = int(raw_input())\ndices = []\ncounter = 0\nwhile counter < dice_number:\n    dices.append(Dice([int(x) for x in raw_input().split()]))\n    counter += 1\n\nans = 0\nfor i in range(dice_number - 1):\n    if ans > 0:\n        break\n    for j in range(i + 1, dice_number):\n        ans += int(is_same(dices[i], dices[j]))\n        if ans > 0:\n            print(\"No\")\n            break\n\nif ans == 0:\n    print(\"Yes\")",
        "correct": true,
        "task_id": "0769",
        "depth": 2
    },
    {
        "description": "Polycarp has prepared n competitive programming problems. The topic of the i-th problem is a_i, and some problems' topics may coincide.\n\nPolycarp has to host several thematic contests. All problems in each contest should have the same topic, and all contests should have pairwise distinct topics. He may not use all the problems. It is possible that there are no contests for some topics.\n\nPolycarp wants to host competitions on consecutive days, one contest per day. Polycarp wants to host a set of contests in such a way that:\n\n  * number of problems in each contest is exactly twice as much as in the previous contest (one day ago), the first contest can contain arbitrary number of problems; \n  * the total number of problems in all the contests should be maximized. \n\n\n\nYour task is to calculate the maximum number of problems in the set of thematic contests. Note, that you should not maximize the number of contests.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of problems Polycarp has prepared.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9) where a_i is the topic of the i-th problem.\n\nOutput\n\nPrint one integer \u2014 the maximum number of problems in the set of thematic contests.\n\nExamples\n\nInput\n\n\n18\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\n\n\nOutput\n\n\n14\n\n\nInput\n\n\n10\n6 6 6 3 6 1000000000 3 3 6 6\n\n\nOutput\n\n\n9\n\n\nInput\n\n\n3\n1337 1337 1337\n\n\nOutput\n\n\n3\n\nNote\n\nIn the first example the optimal sequence of contests is: 2 problems of the topic 1, 4 problems of the topic 2, 8 problems of the topic 10.\n\nIn the second example the optimal sequence of contests is: 3 problems of the topic 3, 6 problems of the topic 6.\n\nIn the third example you can take all the problems with the topic 1337 (the number of such problems is 3 so the answer is 3) and host a single contest.",
        "task_name": "1077_E. Thematic Contests",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys,math\nfrom fractions import gcd\nfrom bisect import bisect_left, bisect\nfrom collections import defaultdict\nfrom io import BytesIO\nsys.stdin = BytesIO(sys.stdin.read())\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nn = int(input())\n#s = input()\narr = [int(_) for _ in input().split()]\n\nd = defaultdict(int)\nfor el in arr:\n    d[el] += 1\narr = []\nfor k in d:\n    arr.append(d[k])\narr.sort(reverse=True)\n#print(arr)\nm = arr[0]\nwhile arr[0] > 0:\n    cur = arr[0]\n    cs = arr[0]\n    j = 1\n    while cur % 2 == 0 and j < len(arr) and arr[j] >= cur // 2:\n        j += 1\n        cur /= 2\n        cs += cur\n    m = max(m,cs)\n    arr[0] -= 1\nprint(m)",
        "correct": true,
        "task_id": "0770",
        "depth": 2
    },
    {
        "description": "Pavel has several sticks with lengths equal to powers of two.\n\nHe has a_0 sticks of length 2^0 = 1, a_1 sticks of length 2^1 = 2, ..., a_{n-1} sticks of length 2^{n-1}. \n\nPavel wants to make the maximum possible number of triangles using these sticks. The triangles should have strictly positive area, each stick can be used in at most one triangle.\n\nIt is forbidden to break sticks, and each triangle should consist of exactly three sticks.\n\nFind the maximum possible number of triangles.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 300 000) \u2014 the number of different lengths of sticks.\n\nThe second line contains n integers a_0, a_1, ..., a_{n-1} (1 \u2264 a_i \u2264 10^9), where a_i is the number of sticks with the length equal to 2^i.\n\nOutput\n\nPrint a single integer \u2014 the maximum possible number of non-degenerate triangles that Pavel can make.\n\nExamples\n\nInput\n\n\n5\n1 2 2 2 2\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n3\n1 1 1\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n3\n3 3 3\n\n\nOutput\n\n\n3\n\nNote\n\nIn the first example, Pavel can, for example, make this set of triangles (the lengths of the sides of the triangles are listed): (2^0, 2^4, 2^4), (2^1, 2^3, 2^3), (2^1, 2^2, 2^2).\n\nIn the second example, Pavel cannot make a single triangle.\n\nIn the third example, Pavel can, for example, create this set of triangles (the lengths of the sides of the triangles are listed): (2^0, 2^0, 2^0), (2^1, 2^1, 2^1), (2^2, 2^2, 2^2).",
        "task_name": "1119_E. Pavel and Triangles",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n# import threading\n# threading.stack_size(2**27)\n# import sys\n# sys.setrecursionlimit(10**7)\nfrom sys import stdin, stdout\nimport bisect            #c++ upperbound\nimport math\nimport heapq\ndef modinv(n,p):\n    return pow(n,p-2,p)\ndef cin():\n    return map(int,sin().split())\ndef ain():                           #takes array as input\n    return list(map(int,sin().split()))\ndef sin():\n    return input()\ndef inin():\n    return int(input())\nimport math  \ndef Divisors(n) : \n    l = []  \n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if (n % i == 0) : \n            if (n // i == i) : \n                l.append(i) \n            else : \n                l.append(i)\n                l.append(n//i)\n    return l\n \nq=[]       \ndef dfs(n,d,v,c):\n    global q\n    v[n]=1\n    x=d[n]\n    q.append(n)\n    j=c\n    for i in x:\n        if i not in v:\n            f=dfs(i,d,v,c+1)\n            j=max(j,f)\n            # print(f)\n    return j\nimport heapq \n\"\"\"*******************************************************\"\"\"\ndef main():\n    n=inin()\n    a=ain()\n    ans=0\n    x=y=0\n    for i in a:\n        p=0\n        ans+=i//3\n        if(i//3>0):\n            p=i//3\n        i%=3\n        if(i==0):\n            if p>1 and x>=3:\n                x-=3\n                ans+=1\n            continue\n        if(x==0):\n            x+=i\n        else:\n            if(i==1):\n                if(p>0 and x>=2):\n                    x-=2\n                    ans+=1\n                else:\n                    x+=1\n            else:\n                x-=1\n                ans+=1\n    print(ans)\n        \n######## Python 2 and 3 footer by Pajenegod and c1729\n \n# Note because cf runs old PyPy3 version which doesn't have the sped up\n# unicode strings, PyPy3 strings will many times be slower than pypy2.\n# There is a way to get around this by using binary strings in PyPy3\n# but its syntax is different which makes it kind of a mess to use.\n \n# So on cf, use PyPy2 for best string performance.\n \npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\n \nimport os, sys\nfrom io import IOBase, BytesIO\n \nBUFSIZE = 8192\nclass FastIO(BytesIO):\n    newlines = 0\n \n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n \n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0,2), super(FastIO, self).write(s))[0])\n        return s\n \n    def read(self):\n        while self._fill(): pass\n        return super(FastIO,self).read()\n \n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill(); self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s:self.buffer.write(s.encode('ascii'))\n            self.read = lambda:self.buffer.read().decode('ascii')\n            self.readline = lambda:self.buffer.readline().decode('ascii')\n \n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n \n# Cout implemented in Python\nimport sys\nclass ostream:\n    def __lshift__(self,a):\n        sys.stdout.write(str(a))\n        return self\ncout = ostream()\nendl = '\\n'\n \n# Read all remaining integers in stdin, type is given by optional argument, this is fast\ndef readnumbers(zero = 0):\n    conv = ord if py2 else lambda x:x\n    A = []; numb = zero; sign = 1; i = 0; s = sys.stdin.buffer.read()\n    try:\n        while True:\n            if s[i] >= b'R' [0]:\n                numb = 10 * numb + conv(s[i]) - 48\n            elif s[i] == b'-' [0]: sign = -1\n            elif s[i] != b'\\r' [0]:\n                A.append(sign*numb)\n                numb = zero; sign = 1\n            i += 1\n    except:pass\n    if s and s[-1] >= b'R' [0]:\n        A.append(sign*numb)\n    return A\n \n# threading.Thread(target=main).start()\nif __name__== \"__main__\":\n  main()",
        "correct": false,
        "task_id": "0771",
        "depth": 1
    },
    {
        "description": "Bob has a string s consisting of lowercase English letters. He defines s' to be the string after removing all \"a\" characters from s (keeping all other characters in the same order). He then generates a new string t by concatenating s and s'. In other words, t=s+s' (look at notes for an example).\n\nYou are given a string t. Your task is to find some s that Bob could have used to generate t. It can be shown that if an answer exists, it will be unique.\n\nInput\n\nThe first line of input contains a string t (1 \u2264 |t| \u2264 10^5) consisting of lowercase English letters.\n\nOutput\n\nPrint a string s that could have generated t. It can be shown if an answer exists, it is unique. If no string exists, print \":(\" (without double quotes, there is no space between the characters).\n\nExamples\n\nInput\n\n\naaaaa\n\n\nOutput\n\n\naaaaa\n\n\nInput\n\n\naacaababc\n\n\nOutput\n\n\n:(\n\n\nInput\n\n\nababacacbbcc\n\n\nOutput\n\n\nababacac\n\n\nInput\n\n\nbaba\n\n\nOutput\n\n\n:(\n\nNote\n\nIn the first example, we have s =  \"aaaaa\", and s' =  \"\".\n\nIn the second example, no such s can work that will generate the given t.\n\nIn the third example, we have s =  \"ababacac\", and s' =  \"bbcc\", and t = s + s' =  \"ababacacbbcc\".",
        "task_name": "1146_B. Hate \"A\"",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"\nAuthor    : raj1307 - Raj Singh\nInstitute : Jalpaiguri Government Engineering College\nDate      : 20.04.19\n\"\"\"\nfrom __future__ import division, print_function\nimport itertools,os,sys\nfrom collections import deque, Counter, OrderedDict, defaultdict\n#from heapq import nsmallest, nlargest, heapify, #heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial,pow,pi\n#from bisect import bisect_left,bisect_right\n#from decimal import *\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    from builtins import str as __str__\n    str = lambda x=b'': x if type(x) is bytes else __str__(x).encode()\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._buffer = BytesIO()\n        self._fd = file.fileno()\n        self._writable = 'x' in file.mode or 'r' not in file.mode\n        self.write = self._buffer.write if self._writable else None\n\n    def read(self):\n        return self._buffer.read() if self._buffer.tell() else os.read(self._fd, os.fstat(self._fd).st_size)\n\n    def readline(self):\n        while self.newlines == 0:\n            b, ptr = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE)), self._buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(b), self._buffer.seek(ptr)\n            self.newlines += b.count(b'\\n') + (not b)\n        self.newlines -= 1\n        return self._buffer.readline()\n\n    def flush(self):\n        if self._writable:\n            os.write(self._fd, self._buffer.getvalue())\n            self._buffer.truncate(0), self._buffer.seek(0)\n\n\nsys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(b'\\r\\n')\n\n\ndef print(*args, **kwargs):\n    sep, file = kwargs.pop('sep', b' '), kwargs.pop('file', sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop('end', b'\\n'))\n    if kwargs.pop('flush', False):\n        file.flush()\n\n\n\n\n\ndef ii(): return int(input())\ndef si(): return str(input())\ndef mi():return map(int,input().strip().split(\" \"))\ndef li():return list(mi())\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef ntl(n):return [int(i) for i in str(n)]\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p1\n    return res\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\n# For getting input from input.txt file \n#sys.stdin = open('input.txt', 'r')  \n  \n# Printing the Output to output.txt file \n#sys.stdout = open('output.txt', 'w') \n\n\ndef main():\n   \n    s=si()\n    s=list(s)\n    l=[]\n    n=len(s)\n    flag=0\n    a,x=0,0\n    if s.count('a')==n:\n        print(''.join(s))\n        exit()\n    \n    for i in range(len(s)):\n        if s[i]!='a':\n            x+=1\n            l.append(s[i])\n            if x+i+1==n:\n               if s[:i+1]+l==s:\n                   print(''.join(s[:i+1]))\n                   flag=1\n                   exit()\n               \n                \n        else:\n            a+=1\n            \n    \n    print(':(')            \n            \n                \n        \n        \n    \n\n   \n   \n   \n   \n   \n\n\nif __name__ == \"__main__\":\n    main()",
        "correct": false,
        "task_id": "0772",
        "depth": 1
    },
    {
        "description": "You are playing a variation of game 2048. Initially you have a multiset s of n integers. Every integer in this multiset is a power of two. \n\nYou may perform any number (possibly, zero) operations with this multiset.\n\nDuring each operation you choose two equal integers from s, remove them from s and insert the number equal to their sum into s.\n\nFor example, if s = \\{1, 2, 1, 1, 4, 2, 2\\} and you choose integers 2 and 2, then the multiset becomes \\{1, 1, 1, 4, 4, 2\\}.\n\nYou win if the number 2048 belongs to your multiset. For example, if s = \\{1024, 512, 512, 4\\} you can win as follows: choose 512 and 512, your multiset turns into \\{1024, 1024, 4\\}. Then choose 1024 and 1024, your multiset turns into \\{2048, 4\\} and you win.\n\nYou have to determine if you can win this game.\n\nYou have to answer q independent queries.\n\nInput\n\nThe first line contains one integer q (1 \u2264 q \u2264 100) \u2013 the number of queries.\n\nThe first line of each query contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in multiset.\n\nThe second line of each query contains n integers s_1, s_2, ..., s_n (1 \u2264 s_i \u2264 2^{29}) \u2014 the description of the multiset. It is guaranteed that all elements of the multiset are powers of two. \n\nOutput\n\nFor each query print YES if it is possible to obtain the number 2048 in your multiset, and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer).\n\nExample\n\nInput\n\n\n6\n4\n1024 512 64 512\n1\n2048\n3\n64 512 2\n2\n4096 4\n7\n2048 2 2048 2048 2048 2048 2048\n2\n2048 4096\n\n\nOutput\n\n\nYES\nYES\nNO\nNO\nYES\nYES\n\nNote\n\nIn the first query you can win as follows: choose 512 and 512, and s turns into \\{1024, 64, 1024\\}. Then choose 1024 and 1024, and s turns into \\{2048, 64\\} and you win.\n\nIn the second query s contains 2048 initially.",
        "task_name": "1221_A. 2048 Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def count(arr,cnt):\n\tfor i in range(0,len(arr)):\n\t\tif arr[i] in cnt.keys():\n\t\t\tcnt[arr[i]] = cnt[arr[i]] + 1\n\t\telse:\n\t\t\tcnt[arr[i]] = 1\ndef yn2048(arr,t):\n\tf = {}\n\tcount(arr,f)\n\tkeys = f.keys()\n\tfor i in range(0,11):\n\t\tk = 0\n\t\tif pow(2,i) in keys:\n\t\t\t k = f[pow(2,i)]/2 \n\t\tif pow(2,i+1) in keys:\n\t\t\tf[pow(2,i+1)] = f[pow(2,i+1)] + k\n\t\telif k > 0:\n\t\t\tf[pow(2,i+1)] = k\n\tif 2048 in f:\n\t\tt.append(\"YES\")\n\telse:\n\t\tt.append(\"No\")\n\ndef main():\n\tt = []\n\tq = int(raw_input())\n\tfor i in range(q):\n\t\tf = raw_input()\n\t\tarr = list(map(int,raw_input().split(\" \")))\n\t\tyn2048(arr,t)\n\tfor i in t:\n\t\tprint (i)\nmain()\t\n",
        "correct": false,
        "task_id": "0775",
        "depth": 1
    },
    {
        "description": "Bob is playing with 6-sided dice. A net of such standard cube is shown below.\n\n<image>\n\nHe has an unlimited supply of these dice and wants to build a tower by stacking multiple dice on top of each other, while choosing the orientation of each dice. Then he counts the number of visible pips on the faces of the dice.\n\nFor example, the number of visible pips on the tower below is 29 \u2014 the number visible on the top is 1, from the south 5 and 3, from the west 4 and 2, from the north 2 and 4 and from the east 3 and 5.\n\n<image>\n\nThe one at the bottom and the two sixes by which the dice are touching are not visible, so they are not counted towards total.\n\nBob also has t favourite integers x_i, and for every such integer his goal is to build such a tower that the number of visible pips is exactly x_i. For each of Bob's favourite integers determine whether it is possible to build a tower that has exactly that many visible pips.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of favourite integers of Bob. \n\nThe second line contains t space-separated integers x_i (1 \u2264 x_i \u2264 10^{18}) \u2014 Bob's favourite integers.\n\nOutput\n\nFor each of Bob's favourite integers, output \"YES\" if it is possible to build the tower, or \"NO\" otherwise (quotes for clarity).\n\nExample\n\nInput\n\n\n4\n29 34 19 38\n\n\nOutput\n\n\nYES\nYES\nYES\nNO\n\nNote\n\nThe first example is mentioned in the problem statement.\n\nIn the second example, one can build the tower by flipping the top dice from the previous tower.\n\nIn the third example, one can use a single die that has 5 on top.\n\nThe fourth example is impossible.",
        "task_name": "1266_B. Dice Tower",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout  \n\ndef main(): \n\tn = stdin.readline() \n\tarr = [int(x) for x in stdin.readline().split()] \n\tdic = {1:6, 4:3, 2:5}\n\tfor x in arr:\n\t\tres = 'NO'\n\t\tif x > 42:\n\t\t\tstdout.write(str(res)+'\\n')\n\t\t\tcontinue\n\t\tif x < 22 :\n\t\t\tif x == 21 - 1:\n\t\t\t\tres = 'YES'\n\t\t\telif x == 21 - 2:\n\t\t\t\tres = 'YES'\n\t\t\tif x == 21 - 3:\n\t\t\t\tres = 'YES'\n\t\t\tif x == 21 - 4:\n\t\t\t\tres = 'YES'\n\t\t\tif x == 21 - 5:\n\t\t\t\tres = 'YES'\n\t\t\tif x == 21 - 6:\n\t\t\t\tres = 'YES'\n\t\tif res == 'YES':\n\t\t\tstdout.write(str(res)+'\\n')\n\t\t\tcontinue\n\t\tfor i in dic:\n\t\t\tif x == 42 - (i + dic[i]) - 1:\n\t\t\t\tres = 'YES'\n\t\t\telif x == 42 - (i + dic[i]) - 2:\n\t\t\t\tres = 'YES'\n\t\t\telif x == 42 - (i + dic[i]) - 3:\n\t\t\t\tres = 'YES'\n\t\t\telif x == 42 - (i + dic[i]) - 4:\n\t\t\t\tres = 'YES'\n\t\t\telif x == 42 - (i + dic[i]) - 5:\n\t\t\t\tres = 'YES'\n\t\t\telif x == 42 - (i + dic[i]) - 6:\n\t\t\t\tres = 'YES'\n\t\t\t\tres = 'YES'\n\t\tstdout.write(str(res)+'\\n')\nif __name__ == \"__main__\": \n\tmain()",
        "correct": false,
        "task_id": "0776",
        "depth": 2
    },
    {
        "description": "Evlampiy was gifted a rooted tree. The vertices of the tree are numbered from 1 to n. Each of its vertices also has an integer a_i written on it. For each vertex i, Evlampiy calculated c_i \u2014 the number of vertices j in the subtree of vertex i, such that a_j < a_i. \n\n<image>Illustration for the second example, the first integer is a_i and the integer in parentheses is c_i\n\nAfter the new year, Evlampiy could not remember what his gift was! He remembers the tree and the values of c_i, but he completely forgot which integers a_i were written on the vertices.\n\nHelp him to restore initial integers!\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 2000) \u2014 the number of vertices in the tree.\n\nThe next n lines contain descriptions of vertices: the i-th line contains two integers p_i and c_i (0 \u2264 p_i \u2264 n; 0 \u2264 c_i \u2264 n-1), where p_i is the parent of vertex i or 0 if vertex i is root, and c_i is the number of vertices j in the subtree of vertex i, such that a_j < a_i.\n\nIt is guaranteed that the values of p_i describe a rooted tree with n vertices.\n\nOutput\n\nIf a solution exists, in the first line print \"YES\", and in the second line output n integers a_i (1 \u2264 a_i \u2264 {10}^{9}). If there are several solutions, output any of them. One can prove that if there is a solution, then there is also a solution in which all a_i are between 1 and 10^9.\n\nIf there are no solutions, print \"NO\".\n\nExamples\n\nInput\n\n\n3\n2 0\n0 2\n2 0\n\n\nOutput\n\n\nYES\n1 2 1 \n\nInput\n\n\n5\n0 1\n1 3\n2 1\n3 0\n2 0\n\n\nOutput\n\n\nYES\n2 3 2 1 2",
        "task_name": "1287_D. Numbers on Tree",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom collections import *\nfrom copy import copy\nfrom bisect import *\n\n\nclass graph:\n    # initialize graph\n    def __init__(self, gdict=None):\n        self.gdict = defaultdict(list)\n\n    # add edge\n    def addEdge(self, node1, node2, w=None):\n        self.gdict[node1].append(node2)\n        self.gdict[node2].append(node1)\n\n    def subtree(self, v):\n        queue, visit, ans, order = deque([v]), [0] * (n + 1), [], [[] for i in range(n + 1)]\n        visit[v], self.nodes = 1, [0] * (n + 1)\n\n        while queue:\n            s = queue.popleft()\n\n            for i in self.gdict[s]:\n                if not visit[i]:\n                    queue.append(i)\n                    visit[i] = 1\n                    ans.append([i, s])\n\n        for i, j in ans[::-1]:\n            self.nodes[j] += self.nodes[i] + 1\n\n        while ans:\n            cur, par = ans.pop()\n            visit[cur] = 0\n            if c[cur] > self.nodes[cur]:\n                print('NO')\n                exit()\n\n            for i in self.gdict[cur]:\n                if not visit[i]:\n                    order[cur].extend(order[i])\n\n            order[cur].sort()\n            order[cur].insert(c[cur], [c[cur] + 1, cur])\n\n            for i in range(c[cur] + 1, len(order[cur])):\n                order[cur][i][0] += 1\n            # print(order[cur])\n\n        order[self.gdict[0][0]].sort(key=lambda x: x[1])\n        # print(order[self.gdict[0][0]])\n        print('YES')\n        print(' '.join(map(str, [x for x,y in order[self.gdict[0][0]]])))\n\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nn = int(input())\ng, c = graph(), [0]\n\nfor i in range(1, n + 1):\n    x, y = rints()\n    c.append(y)\n    g.addEdge(i, x)\n\ng.subtree(0)\n",
        "correct": false,
        "task_id": "0777",
        "depth": 2
    },
    {
        "description": "Bessie is out grazing on the farm, which consists of n fields connected by m bidirectional roads. She is currently at field 1, and will return to her home at field n at the end of the day.\n\nThe Cowfederation of Barns has ordered Farmer John to install one extra bidirectional road. The farm has k special fields and he has decided to install the road between two different special fields. He may add the road between two special fields that already had a road directly connecting them.\n\nAfter the road is added, Bessie will return home on the shortest path from field 1 to field n. Since Bessie needs more exercise, Farmer John must maximize the length of this shortest path. Help him!\n\nInput\n\nThe first line contains integers n, m, and k (2 \u2264 n \u2264 2 \u22c5 10^5, n-1 \u2264 m \u2264 2 \u22c5 10^5, 2 \u2264 k \u2264 n) \u2014 the number of fields on the farm, the number of roads, and the number of special fields. \n\nThe second line contains k integers a_1, a_2, \u2026, a_k (1 \u2264 a_i \u2264 n) \u2014 the special fields. All a_i are distinct.\n\nThe i-th of the following m lines contains integers x_i and y_i (1 \u2264 x_i, y_i \u2264 n, x_i \u2260 y_i), representing a bidirectional road between fields x_i and y_i. \n\nIt is guaranteed that one can reach any field from every other field. It is also guaranteed that for any pair of fields there is at most one road connecting them.\n\nOutput\n\nOutput one integer, the maximum possible length of the shortest path from field 1 to n after Farmer John installs one road optimally.\n\nExamples\n\nInput\n\n\n5 5 3\n1 3 5\n1 2\n2 3\n3 4\n3 5\n2 4\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n5 4 2\n2 4\n1 2\n2 3\n3 4\n4 5\n\n\nOutput\n\n\n3\n\nNote\n\nThe graph for the first example is shown below. The special fields are denoted by red. It is optimal for Farmer John to add a road between fields 3 and 5, and the resulting shortest path from 1 to 5 is length 3. \n\n<image>\n\nThe graph for the second example is shown below. Farmer John must add a road between fields 2 and 4, and the resulting shortest path from 1 to 5 is length 3. \n\n<image>",
        "task_name": "1307_D. Cow and Fields",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division,print_function\n#from sortedcontainers import SortedList\nimport sys\n#sys.__stdout__.flush()\nle=sys.__stdin__.read().split(\"\\n\")\nle.pop()\nle=le[::-1]\nn,m,ka=list(map(int,le.pop().split()))\nsp=list(map(lambda k:int(k)-1,le.pop().split()))\nar=[[] for k in range(n)]\nfor k in range(m):\n    a,b=list(map(lambda k:int(k)-1,le.pop().split()))\n    ar[a].append(b)\n    ar[b].append(a)\nfil=[0]*n\nd1=[n+1]*n\nd1[0]=0\ntfil=1\nfor k in range(n-1):\n    for i in ar[fil[k]]:\n        if d1[i]==n+1:\n            d1[i]=d1[fil[k]]+1\n            fil[tfil]=i\n            tfil+=1\nfil=[0]*n\nfil[0]=n-1\ndf=[n+1]*n\ndf[n-1]=0\ntfil=1\n\nfor k in range(n-1):\n    for i in ar[fil[k]]:\n        if df[i]==n+1:\n            df[i]=df[fil[k]]+1\n            fil[tfil]=i\n            tfil+=1\n#print(fil)\nco=sorted([(d1[k],df[k]) for k in sp])\nco=co[::-1]\nm1=[0]*(ka)\nm2=[0]*(ka)\nfor k in range(ka):\n    m1[k],m2[k]=m1[k-1],m2[k-1]\n    if co[k][1]>m2[k]:\n        if co[k][1]>m1[k]:\n            m1[k],m2[k]=co[k][1],m1[k]\n        else:\n            m2[k]=co[k][1]\npo=ka-1\nm=0\n\"\"\"print(co)\nprint(m1)\nprint(m2)\"\"\"\nfor k in range(ka):\n    doub=co[k][1]\n    #print(m1[po],m2[po],co[k][0],co[po][0])\n    while po>0 and (m1[po] if (po<k or (m1[po]!=doub)) else m2[po])+co[k][0]<co[k][1]+co[po][0]:\n        po-=1\n    ma=min((m1[po] if po<k or (m1[po]!=doub) else m2[po])+co[k][0],co[k][1]+co[po][0])\n    #print(ma,'ar')\n    #print(po)\n    if po!=ka-1:\n        po+=1\n    #print(min((m1[po] if po<k or (m1[po]!=doub) else m2[po])+co[k][0],co[k][1]+co[po][0]))\n    ma=max(ma,min((m1[po] if po<k or (m1[po]!=doub) else m2[po])+co[k][0],co[k][1]+co[po][0]))\n    m=max(m,ma)\n\nif False:\n    \"\"\"print(df)\n    print(d1)\n    m11=0\n    m12=0\n    mf1=0\n    mf2=0\n    for k in sp:\n        if d1[k]>m12:\n            if d1[k]>m11:\n                m11,m12=d1[k],m11\n            else:\n                m12=d1[k]\n        if df[k]>mf2:\n            if df[k]>mf1:\n                mf1,mf2=df[k],mf1\n            else:\n                mf2=df[k]\n    print(m11,m12,mf1,mf2)\n    m=0\n    for k in sp:\n        mf=mf1 if df[k]!=mf1 else mf2\n        m1=m11 if d1[k]!=m11 else m12\n        print(k,d1[k]+mf,df[k]+m1,d1[k],mf,df[k],m1)\n        m=max(min(d1[k]+mf,df[k]+m1),m)\"\"\"\nprint(min(m+1,d1[-1]))\n",
        "correct": false,
        "task_id": "0778",
        "depth": 2
    },
    {
        "description": "Dreamoon likes sequences very much. So he created a problem about the sequence that you can't find in OEIS: \n\nYou are given two integers d, m, find the number of arrays a, satisfying the following constraints:\n\n  * The length of a is n, n \u2265 1 \n  * 1 \u2264 a_1 < a_2 < ... < a_n \u2264 d \n  * Define an array b of length n as follows: b_1 = a_1, \u2200 i > 1, b_i = b_{i - 1} \u2295 a_i, where \u2295 is the bitwise exclusive-or (xor). After constructing an array b, the constraint b_1 < b_2 < ... < b_{n - 1} < b_n should hold. \n\n\n\nSince the number of possible arrays may be too large, you need to find the answer modulo m.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100) denoting the number of test cases in the input.\n\nEach of the next t lines contains two integers d, m (1 \u2264 d, m \u2264 10^9).\n\nNote that m is not necessary the prime!\n\nOutput\n\nFor each test case, print the number of arrays a, satisfying all given constrains, modulo m.\n\nExample\n\nInput\n\n\n10\n1 1000000000\n2 999999999\n3 99999998\n4 9999997\n5 999996\n6 99995\n7 9994\n8 993\n9 92\n10 1\n\n\nOutput\n\n\n1\n3\n5\n11\n17\n23\n29\n59\n89\n0",
        "task_name": "1330_D. Dreamoon Likes Sequences",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n# import threading\n# threading.stack_size(2**27)\n# import sys\n# sys.setrecursionlimit(10**7)\nfrom sys import stdin, stdout\nimport bisect            #c++ upperbound\nimport math\nimport heapq\ndef modinv(n,p):\n    return pow(n,p-2,p)\ndef cin():\n    return map(int,sin().split())\ndef ain():                           #takes array as input\n    return list(map(int,sin().split()))\ndef sin():\n    return input()\ndef inin():\n    return int(input())\nimport math  \ndef Divisors(n) : \n    l = []  \n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if (n % i == 0) : \n            if (n // i == i) : \n                l.append(i) \n            else : \n                l.append(i)\n                l.append(n//i)\n    return l\n\nq=[]       \ndef dfs(n,d,v,c):\n    global q\n    v[n]=1\n    x=d[n]\n    q.append(n)\n    j=c\n    for i in x:\n        if i not in v:\n            f=dfs(i,d,v,c+1)\n            j=max(j,f)\n            # print(f)\n    return j\ndef ch(a):\n    n=len(a)\n    a.sort()\n    x=True\n    for i in range(n):\n        if(a[i]!=i+1):\n            x=False\n            break\n    return x\n\"\"\"*******************************************************\"\"\"\ndef main():\n    t=inin()\n    for _ in range(t):\n        d,m=cin()\n        x=0\n        a=[]\n        while(d>0):\n            a.append(min(d,pow(2,x)))\n            d-=pow(2,x)\n            x+=1\n        # p=sum(a)\n        # # print(a)\n        # n=len(a)\n        # x=1\n        # y=n\n        # z=1\n        # ans=0\n        # for i in range(n):\n        #     z=z*y//x\n        #     y-=1\n        #     q=(z*x)//n\n        #     x+=1\n        #     print(q,p,z)\n        #     ans=ans+z*q*p\n        #     ans=ans%m\n        #     # print(z,end=\" \")\n        # print(ans)\n        x=1\n        for i in a:\n            x=x*(1+i)\n            x=x%m\n        print((x-1+m)%m)\n        \n######## Python 2 and 3 footer by Pajenegod and c1729\n \n# Note because cf runs old PyPy3 version which doesn't have the sped up\n# unicode strings, PyPy3 strings will many times be slower than pypy2.\n# There is a way to get around this by using binary strings in PyPy3\n# but its syntax is different which makes it kind of a mess to use.\n \n# So on cf, use PyPy2 for best string performance.\n \npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\n \nimport os, sys\nfrom io import IOBase, BytesIO\n \nBUFSIZE = 8192\nclass FastIO(BytesIO):\n    newlines = 0\n \n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n \n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0,2), super(FastIO, self).write(s))[0])\n        return s\n \n    def read(self):\n        while self._fill(): pass\n        return super(FastIO,self).read()\n \n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill(); self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s:self.buffer.write(s.encode('ascii'))\n            self.read = lambda:self.buffer.read().decode('ascii')\n            self.readline = lambda:self.buffer.readline().decode('ascii')\n \n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n \n# Cout implemented in Python\nimport sys\nclass ostream:\n    def __lshift__(self,a):\n        sys.stdout.write(str(a))\n        return self\ncout = ostream()\nendl = '\\n'\n \n# Read all remaining integers in stdin, type is given by optional argument, this is fast\ndef readnumbers(zero = 0):\n    conv = ord if py2 else lambda x:x\n    A = []; numb = zero; sign = 1; i = 0; s = sys.stdin.buffer.read()\n    try:\n        while True:\n            if s[i] >= b'0' [0]:\n                numb = 10 * numb + conv(s[i]) - 48\n            elif s[i] == b'-' [0]: sign = -1\n            elif s[i] != b'\\r' [0]:\n                A.append(sign*numb)\n                numb = zero; sign = 1\n            i += 1\n    except:pass\n    if s and s[-1] >= b'0' [0]:\n        A.append(sign*numb)\n    return A\n\n# threading.Thread(target=main).start()\nif __name__== \"__main__\":\n  main()",
        "correct": true,
        "task_id": "0779",
        "depth": 2
    },
    {
        "description": "Slime has a sequence of positive integers a_1, a_2, \u2026, a_n.\n\nIn one operation Orac can choose an arbitrary subsegment [l \u2026 r] of this sequence and replace all values a_l, a_{l + 1}, \u2026, a_r to the value of median of \\\\{a_l, a_{l + 1}, \u2026, a_r\\}.\n\nIn this problem, for the integer multiset s, the median of s is equal to the \u230a (|s|+1)/(2)\u230b-th smallest number in it. For example, the median of \\{1,4,4,6,5\\} is 4, and the median of \\{1,7,5,8\\} is 5.\n\nSlime wants Orac to make a_1 = a_2 = \u2026 = a_n = k using these operations.\n\nOrac thinks that it is impossible, and he does not want to waste his time, so he decided to ask you if it is possible to satisfy the Slime's requirement, he may ask you these questions several times.\n\nInput\n\nThe first line of the input is a single integer t: the number of queries.\n\nThe first line of each query contains two integers n\\ (1\u2264 n\u2264 100 000) and k\\ (1\u2264 k\u2264 10^9), the second line contains n positive integers a_1,a_2,...,a_n\\ (1\u2264 a_i\u2264 10^9)\n\nThe total sum of n is at most 100 000.\n\nOutput\n\nThe output should contain t lines. The i-th line should be equal to 'yes' if it is possible to make all integers k in some number of operations or 'no', otherwise. You can print each letter in lowercase or uppercase.\n\nExample\n\nInput\n\n\n5\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n\n\nOutput\n\n\nno\nyes\nyes\nno\nyes\n\nNote\n\nIn the first query, Orac can't turn all elements into 3.\n\nIn the second query, a_1=6 is already satisfied.\n\nIn the third query, Orac can select the complete array and turn all elements into 2.\n\nIn the fourth query, Orac can't turn all elements into 3.\n\nIn the fifth query, Orac can select [1,6] at first and then select [2,10].",
        "task_name": "1350_D. Orac and Medians",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"Template for Python Competitive Programmers prepared by pa.n.ik, kabeer seth and Mayank Chaudhary \"\"\"\n\n# to use the print and division function of Python3\nfrom __future__ import division, print_function\n\n\"\"\"value of mod\"\"\"\nMOD = 998244353\nmod = 10**9 + 7\n\n\"\"\"use resource\"\"\"\n# import resource\n# resource.setrlimit(resource.RLIMIT_STACK, [0x100000000, resource.RLIM_INFINITY])\n\n\"\"\"for factorial\"\"\"\n\ndef prepare_factorial():\n    fact = [1]\n    for i in range(1, 5005):\n        fact.append((fact[-1] * i) % mod)\n    ifact = [0] * 5005\n    ifact[5004] = pow(fact[5004], mod - 2, mod)\n    for i in range(5004, 0, -1):\n        ifact[i - 1] = (i * ifact[i]) % mod\n\n    return fact, ifact\n\n\"\"\"uncomment next 4 lines while doing recursion based question\"\"\"\n# import threading\n# threading.stack_size(1<<27)\nimport sys\n# sys.setrecursionlimit(10000)\n\n\n\"\"\"uncomment modules according to your need\"\"\"\nfrom bisect import bisect_left, bisect_right, insort\n# from itertools import repeat\nfrom math import floor, ceil, sqrt, degrees, atan, pi, log, sin, radians\nfrom heapq import heappop, heapify, heappush\n# from random import randint as rn\n# from Queue import Queue as Q\nfrom collections import Counter, defaultdict, deque\n# from copy import deepcopy\n# from decimal import *\n\n\ndef modinv(n, p):\n    return pow(n, p - 2, p)\n\ndef ncr(n, r,  fact, ifact):    # for using this uncomment the lines calculating fact and ifact\n    t = (fact[n] * (ifact[r]*ifact[n-r]) % mod)% mod\n    return t\n\n\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef input(): return sys.stdin.readline().strip()\n\n\"\"\"*****************************************************************************************\"\"\"\n\ndef GCD(x, y):\n    while (y):\n        x, y = y, x % y\n    return x\n\ndef lcm(x, y):\n    return (x*y)//(GCD(x, y))\n\ndef get_xor(n):\n    return [n,1,n+1,0][n%4]\n\ndef bin_pow(a, b):\n    res = 1\n    while b:\n        if b&1:\n            res = (res * a)\n            b -= 1\n        else:\n            a = (a* a)\n            b>>=1\n    return res\n\n\"\"\" ********************************************************************************************* \"\"\"\n\ndef main():\n\n    t = int(input())\n    while t:\n        n, k = get_ints()\n        Arr = get_array() + [0, 0, 0]\n        flag1 = flag2 = 0\n\n        if n == 1:\n            if Arr[0] == k:\n                print('yes')\n            else:\n                print('no')\n            t -= 1\n            continue\n\n        for i in range(n):\n            if Arr[i] == k:\n                flag1 = 1\n            if Arr[i] >= k:\n                if Arr[i+1] >=k or Arr[i+2] >= k:\n                    flag2 = 1\n\n        if flag1 and flag2:\n            print('yes')\n        else:\n            print('no')\n\n        t -= 1\n\n\"\"\" -------- Python 2 and 3 footer by Pajenegod and c1729 ---------\"\"\"\n\npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\n\nimport os, sys\nfrom io import IOBase, BytesIO\n\nBUFSIZE = 8192\n\nclass FastIO(BytesIO):\n    newlines = 0\n\n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n\n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0, 2), super(FastIO, self).write(s))[0])\n        return s\n\n    def read(self):\n        while self._fill(): pass\n        return super(FastIO, self).read()\n\n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill();\n            self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n\n\nclass IOWrapper(IOBase):\n\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s: self.buffer.write(s.encode('ascii'))\n            self.read = lambda: self.buffer.read().decode('ascii')\n            self.readline = lambda: self.buffer.readline().decode('ascii')\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# sys.stdin = open('input.txt', 'r')\n# sys.stdout = open('output.txt', 'w')\n\n\"\"\" main function\"\"\"\n\nif __name__ == '__main__':\n    main()\n    # threading.Thread(target=main).start()",
        "correct": true,
        "task_id": "0780",
        "depth": 2
    },
    {
        "description": "Pinkie Pie has bought a bag of patty-cakes with different fillings! But it appeared that not all patty-cakes differ from one another with filling. In other words, the bag contains some patty-cakes with the same filling.\n\nPinkie Pie eats the patty-cakes one-by-one. She likes having fun so she decided not to simply eat the patty-cakes but to try not to eat the patty-cakes with the same filling way too often. To achieve this she wants the minimum distance between the eaten with the same filling to be the largest possible. Herein Pinkie Pie called the distance between two patty-cakes the number of eaten patty-cakes strictly between them.\n\nPinkie Pie can eat the patty-cakes in any order. She is impatient about eating all the patty-cakes up so she asks you to help her to count the greatest minimum distance between the eaten patty-cakes with the same filling amongst all possible orders of eating!\n\nPinkie Pie is going to buy more bags of patty-cakes so she asks you to solve this problem for several bags!\n\nInput\n\nThe first line contains a single integer T (1 \u2264 T \u2264 100): the number of bags for which you need to solve the problem.\n\nThe first line of each bag description contains a single integer n (2 \u2264 n \u2264 10^5): the number of patty-cakes in it. The second line of the bag description contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 n): the information of patty-cakes' fillings: same fillings are defined as same integers, different fillings are defined as different integers. It is guaranteed that each bag contains at least two patty-cakes with the same filling. \n\nIt is guaranteed that the sum of n over all bags does not exceed 10^5.\n\nOutput\n\nFor each bag print in separate line one single integer: the largest minimum distance between the eaten patty-cakes with the same filling amongst all possible orders of eating for that bag.\n\nExample\n\nInput\n\n\n4\n7\n1 7 1 6 4 4 6\n8\n1 1 4 6 4 6 4 7\n3\n3 3 3\n6\n2 5 2 3 1 4\n\n\nOutput\n\n\n3\n2\n0\n4\n\nNote\n\nFor the first bag Pinkie Pie can eat the patty-cakes in the following order (by fillings): 1, 6, 4, 7, 1, 6, 4 (in this way, the minimum distance is equal to 3).\n\nFor the second bag Pinkie Pie can eat the patty-cakes in the following order (by fillings): 1, 4, 6, 7, 4, 1, 6, 4 (in this way, the minimum distance is equal to 2).",
        "task_name": "1393_C. Pinkie Pie Eats Patty-cakes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"\n// Author : snape_here - Susanta Mukherjee\n     \n \"\"\"\n \nfrom __future__ import division, print_function\n \nimport os,sys\nfrom io import BytesIO, IOBase\n \nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n \ndef ii(): return int(input())\ndef fi(): return float(input())\ndef si(): return input()\ndef msi(): return map(str,input().split())\ndef mi(): return map(int,input().split())\ndef li(): return list(mi())\n \n \ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n \ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef lcm(x, y):\n    return (x*y)//(gcd(x,y))\n\nmod=1000000007 \n\ndef modInverse(b,m): \n    g = gcd(b, m)  \n    if (g != 1):         \n        return -1\n    else:          \n        return pow(b, m - 2, m) \n\ndef modu(a,b,m): \n\n    a = a % m \n    inv = modInverse(b,m) \n    if(inv == -1): \n        return -999999999\n    else: \n        return (inv*a)%m\n\nfrom math import log,sqrt,factorial,cos,tan,sin,radians,ceil,floor\n\nimport bisect\n\nfrom decimal import *\n\ngetcontext().prec = 25\n\nabc=\"abcdefghijklmnopqrstuvwxyz\"\n\npi=3.141592653589793238\n\ndef main():\n\n    for _ in range(ii()):\n        n=ii()\n        a=li()\n        a.sort(reverse=True)\n        f=[0]*100005\n        for i in range(n):\n            f[a[i]]+=1 \n        s=0\n        s=max(f)\n\n        if s==n:\n            print(0)\n            continue\n\n        if f.count(1)==n-s:\n            if s==2:\n                ans=n-s\n            else:\n                ans=(n-1)//(s+1)\n                ans+=1\n            print(ans)\n            continue\n\n        ans=(n-1)//(s+1)\n        ans+=1 \n        print(ans)\n\n\n\n# region fastio\n \nBUFSIZE = 8192\n \n \nclass FastIO(IOBase):\n    newlines = 0\n \n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n \n \nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n \ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n \n# endregion\n \n \nif __name__ == \"__main__\":\n    #read()\n    main()",
        "correct": false,
        "task_id": "0781",
        "depth": 2
    },
    {
        "description": "You are given an array a, consisting of n integers.\n\nEach position i (1 \u2264 i \u2264 n) of the array is either locked or unlocked. You can take the values on the unlocked positions, rearrange them in any order and place them back into the unlocked positions. You are not allowed to remove any values, add the new ones or rearrange the values on the locked positions. You are allowed to leave the values in the same order as they were.\n\nFor example, let a = [-1, 1, \\underline{3}, 2, \\underline{-2}, 1, -4, \\underline{0}], the underlined positions are locked. You can obtain the following arrays: \n\n  * [-1, 1, \\underline{3}, 2, \\underline{-2}, 1, -4, \\underline{0}]; \n  * [-4, -1, \\underline{3}, 2, \\underline{-2}, 1, 1, \\underline{0}]; \n  * [1, -1, \\underline{3}, 2, \\underline{-2}, 1, -4, \\underline{0}]; \n  * [1, 2, \\underline{3}, -1, \\underline{-2}, -4, 1, \\underline{0}]; \n  * and some others. \n\n\n\nLet p be a sequence of prefix sums of the array a after the rearrangement. So p_1 = a_1, p_2 = a_1 + a_2, p_3 = a_1 + a_2 + a_3, ..., p_n = a_1 + a_2 + ... + a_n.\n\nLet k be the maximum j (1 \u2264 j \u2264 n) such that p_j < 0. If there are no j such that p_j < 0, then k = 0.\n\nYour goal is to rearrange the values in such a way that k is minimum possible.\n\nOutput the array a after the rearrangement such that the value k for it is minimum possible. If there are multiple answers then print any of them.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThen t testcases follow.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array a.\n\nThe second line of each testcase contains n integers a_1, a_2, ..., a_n (-10^5 \u2264 a_i \u2264 10^5) \u2014 the initial array a.\n\nThe third line of each testcase contains n integers l_1, l_2, ..., l_n (0 \u2264 l_i \u2264 1), where l_i = 0 means that the position i is unlocked and l_i = 1 means that the position i is locked.\n\nOutput\n\nPrint n integers \u2014 the array a after the rearrangement. Value k (the maximum j such that p_j < 0 (or 0 if there are no such j)) should be minimum possible. For each locked position the printed value should be equal to the initial one. The values on the unlocked positions should be an arrangement of the initial ones.\n\nIf there are multiple answers then print any of them.\n\nExample\n\nInput\n\n\n5\n3\n1 3 2\n0 0 0\n4\n2 -3 4 -1\n1 1 1 1\n7\n-8 4 -2 -6 4 7 1\n1 0 0 0 1 1 0\n5\n0 1 -4 6 3\n0 0 0 1 1\n6\n-1 7 10 4 -8 -1\n1 0 0 0 0 1\n\n\nOutput\n\n\n1 2 3\n2 -3 4 -1\n-8 -6 1 4 4 7 -2\n-4 0 1 6 3\n-1 4 7 -8 10 -1\n\nNote\n\nIn the first testcase you can rearrange all values however you want but any arrangement will result in k = 0. For example, for an arrangement [1, 2, 3], p=[1, 3, 6], so there are no j such that p_j < 0. Thus, k = 0.\n\nIn the second testcase you are not allowed to rearrange any elements. Thus, the printed array should be exactly the same as the initial one.\n\nIn the third testcase the prefix sums for the printed array are p = [-8, -14, -13, -9, -5, 2, 0]. The maximum j is 5, thus k = 5. There are no arrangements such that k < 5.\n\nIn the fourth testcase p = [-4, -4, -3, 3, 6].\n\nIn the fifth testcase p = [-1, 3, 10, 2, 12, 11].",
        "task_name": "1418_B. Negative Prefixes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "t=int(raw_input())\nfor _ in range(t):\n    n=int(raw_input())\n    A=map(int,raw_input().split())\n    L=map(int,raw_input().split())\n    B=[]\n    for i in range(n):\n        if L[i]==0:\n            B.append(A[i])\n    B.sort(reverse=True)\n    j=0\n    for i in range(n):\n        if L[i]==0:\n            A[i]=B[j]\n            j+=1\n    print(A)",
        "correct": false,
        "task_id": "0782",
        "depth": 2
    },
    {
        "description": "Mr. Bender has a digital table of size n \u00d7 n, each cell can be switched on or off. He wants the field to have at least c switched on squares. When this condition is fulfilled, Mr Bender will be happy.\n\nWe'll consider the table rows numbered from top to bottom from 1 to n, and the columns \u2014 numbered from left to right from 1 to n. Initially there is exactly one switched on cell with coordinates (x, y) (x is the row number, y is the column number), and all other cells are switched off. Then each second we switch on the cells that are off but have the side-adjacent cells that are on.\n\nFor a cell with coordinates (x, y) the side-adjacent cells are cells with coordinates (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1).\n\nIn how many seconds will Mr. Bender get happy?\n\nInput\n\nThe first line contains four space-separated integers n, x, y, c (1 \u2264 n, c \u2264 109; 1 \u2264 x, y \u2264 n; c \u2264 n2).\n\nOutput\n\nIn a single line print a single integer \u2014 the answer to the problem.\n\nExamples\n\nInput\n\n6 4 3 1\n\n\nOutput\n\n0\n\n\nInput\n\n9 3 8 10\n\n\nOutput\n\n2\n\nNote\n\nInitially the first test has one painted cell, so the answer is 0. In the second test all events will go as is shown on the figure. <image>.",
        "task_name": "256_B. Mr. Bender and Square",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "####################################################\n# -*- coding: utf-8 -*-\nimport sys\n\nw = sys.stdout.write\nread = sys.stdin.readline\nreads = sys.stdin.read\n\ndef r(f=None):\n    if f:\n        return map(f, read().split())\n    else:\n        return read().split()\n\ndef rs(t,f=None):\n    result = []\n    result_append = result.append\n    for i in xrange(t):\n        if f:\n            result_append(tuple(map(f, read().split())))\n        else:\n            result_append(read().replace('\\n', ''))\n    return result\n\n\n####################################################\nimport math\nsqrt = math.sqrt\nfrom collections import deque\n\n\n[n, x, y, c] = r(int)\nc -= 1\no = [x - 1, n - x, y - 1, n - y]\ncc = 0\nk = max([x-1+y-1, x-1+n-y, n-x+y-1, n-x+n-y])\noo = [x-1+ n-y+2, y-1+x-1+2, n-x+x-1+2, n-x+n-y+2]\n#print oo\ndef su(x):\n    return (x + 1) * x / 2\n\ndef val(t):\n    res = 2 * t * t + 2 * t\n    for x in o:\n        if x < t:\n            res -= (t-x+1) * (t-x+1) - (2 * (t-x+1) - 1)\n    for x in oo:\n        if x <= t:\n            res += su(t+1-x)\n    \n    return res\n    \n#print [val(t) for t in range(1, k+1)]\n\ndef binary_search():\n    mi = 1; ma = k\n    while mi < ma:\n        m = (mi + ma) / 2\n        tt = val(m)\n        if tt < c:\n            mi = m + 1\n        elif tt > c:\n            ma = m\n        else:\n            return m\n    return mi\n\nif c == 0:\n    w(\"0\")\nelse:\n    result = binary_search()\n    w(\"%s\" % (result, ))\n\n\n    ",
        "correct": false,
        "task_id": "0785",
        "depth": 1
    },
    {
        "description": "The tournament \u00abSleepyhead-2010\u00bb in the rapid falling asleep has just finished in Berland. n best participants from the country have participated in it. The tournament consists of games, each of them is a match between two participants. n\u00b7(n - 1) / 2 games were played during the tournament, and each participant had a match with each other participant. \n\nThe rules of the game are quite simple \u2014 the participant who falls asleep first wins. The secretary made a record of each game in the form \u00abxi yi\u00bb, where xi and yi are the numbers of participants. The first number in each pair is a winner (i.e. xi is a winner and yi is a loser). There is no draws.\n\nRecently researches form the \u00abInstitute Of Sleep\u00bb have found that every person is characterized by a value pj \u2014 the speed of falling asleep. The person who has lower speed wins. Every person has its own value pj, constant during the life. \n\nIt is known that all participants of the tournament have distinct speeds of falling asleep. Also it was found that the secretary made records about all the games except one. You are to find the result of the missing game.\n\nInput\n\nThe first line contains one integer n (3 \u2264 n \u2264 50) \u2014 the number of participants. The following n\u00b7(n - 1) / 2 - 1 lines contain the results of the games. Each game is described in a single line by two integers xi, yi (1 \u2264 xi, yi \u2264 n, xi \u2260 yi), where xi \u0438 yi are the numbers of the opponents in this game. It is known that during the tournament each of the n participants played n - 1 games, one game with each other participant.\n\nOutput\n\nOutput two integers x and y \u2014 the missing record. If there are several solutions, output any of them.\n\nExamples\n\nInput\n\n4\n4 2\n4 1\n2 3\n2 1\n3 1\n\n\nOutput\n\n4 3",
        "task_name": "27_B. Tournament",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from math import *\nfrom Queue import *\n\n\nm = [0 for i in range(51)]\nn = int(raw_input())\nresults = []\nfor i in range(n*(n-1)/2-1):\n    l = map(int, raw_input().split())\n    results.append((l[0], l[1]))\n    m[l[0]] += 1\n    m[l[1]] += 1\nl = []\nfor i in range(1,n+1):\n    if m[i] == n-2:\n        l.append(i)\nb = True\nfor i in range(1,n+1):\n    if ((l[0],i) in results) and ((i,l[0]) in results):\n        print(str(l[0]) + ' ' + str(l[1]))\n        b = False\nif b:\n    print(str(l[1]) + ' ' + str(l[0]))\n",
        "correct": false,
        "task_id": "0786",
        "depth": 1
    },
    {
        "description": "Eugeny has array a = a1, a2, ..., an, consisting of n integers. Each integer ai equals to -1, or to 1. Also, he has m queries:\n\n  * Query number i is given as a pair of integers li, ri (1 \u2264 li \u2264 ri \u2264 n). \n  * The response to the query will be integer 1, if the elements of array a can be rearranged so as the sum ali + ali + 1 + ... + ari = 0, otherwise the response to the query will be integer 0. \n\n\n\nHelp Eugeny, answer all his queries.\n\nInput\n\nThe first line contains integers n and m (1 \u2264 n, m \u2264 2\u00b7105). The second line contains n integers a1, a2, ..., an (ai = -1, 1). Next m lines contain Eugene's queries. The i-th line contains integers li, ri (1 \u2264 li \u2264 ri \u2264 n).\n\nOutput\n\nPrint m integers \u2014 the responses to Eugene's queries in the order they occur in the input.\n\nExamples\n\nInput\n\n2 3\n1 -1\n1 1\n1 2\n2 2\n\n\nOutput\n\n0\n1\n0\n\n\nInput\n\n5 5\n-1 1 1 1 -1\n1 1\n2 3\n3 5\n2 5\n1 5\n\n\nOutput\n\n0\n1\n0\n1\n0",
        "task_name": "302_A. Eugeny and Array",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n\nimport sys\n\nline = raw_input()\nn,m = line.split()\nn = int(n)\nm = int(m)\n\nline = raw_input()\nnr_minus = line.count('-')\nminimum = min(nr_minus, n-nr_minus)\n\nfor i in xrange(m):  \n  line = raw_input()\n  l,r = line.split()\n  l = int(l)\n  r = int(r)\n \n  length = r - l + 1;\n    \n  if ((length % 2) == 0):\n    length = length / 2;\n    if (length <= minimum):\n      print(1)\n    else:\n      print(0)\n  else:\n    print(0)\n           \n",
        "correct": true,
        "task_id": "0787",
        "depth": 1
    },
    {
        "description": "On a number line there are n balls. At time moment 0 for each ball the following data is known: its coordinate xi, speed vi (possibly, negative) and weight mi. The radius of the balls can be ignored.\n\nThe balls collide elastically, i.e. if two balls weighing m1 and m2 and with speeds v1 and v2 collide, their new speeds will be: \n\n<image>.\n\nYour task is to find out, where each ball will be t seconds after.\n\nInput\n\nThe first line contains two integers n and t (1 \u2264 n \u2264 10, 0 \u2264 t \u2264 100) \u2014 amount of balls and duration of the process. Then follow n lines, each containing three integers: xi, vi, mi (1 \u2264 |vi|, mi \u2264 100, |xi| \u2264 100) \u2014 coordinate, speed and weight of the ball with index i at time moment 0.\n\nIt is guaranteed that no two balls have the same coordinate initially. Also each collision will be a collision of not more than two balls (that is, three or more balls never collide at the same point in all times from segment [0;t]).\n\nOutput\n\nOutput n numbers \u2014 coordinates of the balls t seconds after. Output the numbers accurate to at least 4 digits after the decimal point.\n\nExamples\n\nInput\n\n2 9\n3 4 5\n0 7 8\n\n\nOutput\n\n68.538461538\n44.538461538\n\n\nInput\n\n3 10\n1 2 3\n4 -5 6\n7 -8 9\n\n\nOutput\n\n-93.666666667\n-74.666666667\n-15.666666667",
        "task_name": "34_E. Collisions",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from math import *\nfrom Queue import *\nfrom sys import *\n\n\n\n\n\n\n\nn, t = map(int, raw_input().split())\nB = []\nfor i in range(n):\n    x, v, m = map(int, raw_input().split())\n    B.append([x, v, m, i])\nB.sort()\ncurTime = 0\nwhile curTime < t:\n    nextCol = t+1\n    b = n\n    for i in range(n-1):\n        s = B[i][1] - B[i+1][1]\n        if (s > 0) and (nextCol > float(B[i+1][0] - B[i][0])/s):\n            nextCol = float(B[i+1][0] - B[i][0])/s\n            b = i\n    if curTime + nextCol >= t:\n        break\n    else:\n        curTime += nextCol\n        for i in range(n):\n            B[i][0] += nextCol*B[i][1]\n        B[b][1], B[b+1][1] = float((B[b][2] - B[b+1][2])*B[b][1] + 2*B[b+1][2]*B[b+1][1])/(B[b][2] + B[b+1][2]), float((B[b+1][2] - B[b][2])*B[b+1][1] + 2*B[b][2]*B[b][1])/(B[b][2] + B[b+1][2])\nfor i in range(n):\n    B[i][0] += (t - curTime)*B[i][1]\nfor i in range(n):\n    for b in B:\n        if b[3] == i:\n            print(b[0])\n            break\n",
        "correct": true,
        "task_id": "0789",
        "depth": 2
    },
    {
        "description": "The new ITone 6 has been released recently and George got really keen to buy it. Unfortunately, he didn't have enough money, so George was going to work as a programmer. Now he faced the following problem at the work.\n\nGiven a sequence of n integers p1, p2, ..., pn. You are to choose k pairs of integers:\n\n[l1, r1], [l2, r2], ..., [lk, rk] (1 \u2264 l1 \u2264 r1 < l2 \u2264 r2 < ... < lk \u2264 rk \u2264 n; ri - li + 1 = m), \n\nin such a way that the value of sum <image> is maximal possible. Help George to cope with the task.\n\nInput\n\nThe first line contains three integers n, m and k (1 \u2264 (m \u00d7 k) \u2264 n \u2264 5000). The second line contains n integers p1, p2, ..., pn (0 \u2264 pi \u2264 109).\n\nOutput\n\nPrint an integer in a single line \u2014 the maximum possible value of sum.\n\nExamples\n\nInput\n\n5 2 1\n1 2 3 4 5\n\n\nOutput\n\n9\n\n\nInput\n\n7 1 3\n2 10 7 18 5 33 0\n\n\nOutput\n\n61",
        "task_name": "467_C. George and Job",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n# import threading\n# threading.stack_size(2**27)\n# import sys\n# sys.setrecursionlimit(10**7)\nfrom sys import stdin, stdout\nimport bisect            #c++ upperbound\nimport math\nimport heapq\ni_m=9223372036854775807\ndef modinv(n,p):\n    return pow(n,p-2,p)\ndef cin():\n    return map(int,sin().split())\ndef ain():                           #takes array as input\n    return list(map(int,sin().split()))\ndef sin():\n    return input()\ndef inin():\n    return int(input())\nimport math  \ndef GCD(x, y): \n    x=abs(x)\n    y=abs(y)\n    if(min(x,y)==0):\n        return max(x,y)\n    while(y): \n        x, y = y, x % y \n    return x \ndef Divisors(n) : \n    l = []  \n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if (n % i == 0) : \n            if (n // i == i) : \n                l.append(i) \n            else : \n                l.append(i)\n                l.append(n//i)\n    return l\n \n\ndef SieveOfEratosthenes(n): \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    f=[]\n    for p in range(2, n): \n        if prime[p]: \n            f.append(p)\n    return f\nq=[]       \ndef dfs(n,d,v,c):\n    global q\n    v[n]=1\n    x=d[n]\n    q.append(n)\n    j=c\n    for i in x:\n        if i not in v:\n            f=dfs(i,d,v,c+1)\n            j=max(j,f)\n            # print(f)\n    return j\n  \n\"\"\"*******************************************************\"\"\"\ndef main():\n    n,m,k=cin()\n    a=ain()\n    b=[0]\n    b.append(a[0])\n    if m==1:\n        a.sort(reverse=True)\n        print(sum(a[:k]))\n        sys.exit()\n    for i in range(1,n):\n        b.append(a[i]+b[-1])\n    d=[[0]*n]\n    for i in range(1,k+1):\n        dd=[]\n        p=0\n        for j in range(n+1):\n            if j<m:\n                dd.append(0)\n            else:\n                f=d[i-1][j-m]+b[j]-b[j-m]\n                p=max(f,p)\n                dd.append(p)\n        d.append(dd)\n    # print(d)\n    print(max(d[-1]))\n    # # print(d)\n    # m=-i_m\n    # for i in d:\n    #     m=max(m,i[0])\n    # print(m)\n\n\n######## Python 2 and 3 footer by Pajenegod and c1729\n \n# Note because cf runs old PyPy3 version which doesn't have the sped up\n# unicode strings, PyPy3 strings will many times be slower than pypy2.\n# There is a way to get around this by using binary strings in PyPy3\n# but its syntax is different which makes it kind of a mess to use.\n \n# So on cf, use PyPy2 for best string performance.\n \npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\n \nimport os, sys\nfrom io import IOBase, BytesIO\n \nBUFSIZE = 8192\nclass FastIO(BytesIO):\n    newlines = 0\n \n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n \n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0,2), super(FastIO, self).write(s))[0])\n        return s\n \n    def read(self):\n        while self._fill(): pass\n        return super(FastIO,self).read()\n \n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill(); self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s:self.buffer.write(s.encode('ascii'))\n            self.read = lambda:self.buffer.read().decode('ascii')\n            self.readline = lambda:self.buffer.readline().decode('ascii')\n \n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n \n# Cout implemented in Python\nimport sys\nclass ostream:\n    def __lshift__(self,a):\n        sys.stdout.write(str(a))\n        return self\ncout = ostream()\nendl = '\\n'\n \n# Read all remaining integers in stdin, type is given by optional argument, this is fast\ndef readnumbers(zero = 0):\n    conv = ord if py2 else lambda x:x\n    A = []; numb = zero; sign = 1; i = 0; s = sys.stdin.buffer.read()\n    try:\n        while True:\n            if s[i] >= b'R' [0]:\n                numb = 10 * numb + conv(s[i]) - 48\n            elif s[i] == b'-' [0]: sign = -1\n            elif s[i] != b'\\r' [0]:\n                A.append(sign*numb)\n                numb = zero; sign = 1\n            i += 1\n    except:pass\n    if s and s[-1] >= b'R' [0]:\n        A.append(sign*numb)\n    return A\n \n# threading.Thread(target=main).start()\nif __name__== \"__main__\":\n  main()",
        "correct": true,
        "task_id": "0792",
        "depth": 2
    },
    {
        "description": "Long ago, Vasily built a good fence at his country house. Vasily calls a fence good, if it is a series of n consecutively fastened vertical boards of centimeter width, the height of each in centimeters is a positive integer. The house owner remembers that the height of the i-th board to the left is hi.\n\nToday Vasily decided to change the design of the fence he had built, by cutting his top connected part so that the fence remained good. The cut part should consist of only the upper parts of the boards, while the adjacent parts must be interconnected (share a non-zero length before cutting out of the fence).\n\nYou, as Vasily's curious neighbor, will count the number of possible ways to cut exactly one part as is described above. Two ways to cut a part are called distinct, if for the remaining fences there is such i, that the height of the i-th boards vary.\n\nAs Vasily's fence can be very high and long, get the remainder after dividing the required number of ways by 1 000 000 007 (109 + 7).\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 1 000 000) \u2014 the number of boards in Vasily's fence.\n\nThe second line contains n space-separated numbers h1, h2, ..., hn (1 \u2264 hi \u2264 109), where hi equals the height of the i-th board to the left.\n\nOutput\n\nPrint the remainder after dividing r by 1 000 000 007, where r is the number of ways to cut exactly one connected part so that the part consisted of the upper parts of the boards and the remaining fence was good.\n\nExamples\n\nInput\n\n2\n1 1\n\n\nOutput\n\n0\n\n\nInput\n\n3\n3 4 2\n\n\nOutput\n\n13\n\nNote\n\nFrom the fence from the first example it is impossible to cut exactly one piece so as the remaining fence was good.\n\nAll the possible variants of the resulting fence from the second sample look as follows (the grey shows the cut out part): \n\n<image>",
        "task_name": "659_G. Fence Divercity",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nlines = sys.stdin.readlines()\nN = int(lines[0])\nh_vec = [int(i) for i in lines[1].split(' ')]\n#N = len(h_vec)\nh_vec.append(0) # Fixes an edge case.\n\nR = 1000000007\n\nsumm = 0\nprev = 0\n\nfor i in xrange(N-1, 0, -1):\n    result = min(h_vec[i] - 1, h_vec[i-1] - 1) + min(h_vec[i] - 1, h_vec[i-1] - 1, h_vec[i+1] - 1) * prev\n\n    prev = result\n    prev %= R\n\n    left_boundary = min(h_vec[i-1] - 1, h_vec[i] - 1)\n\n    summ += left_boundary * result\n    summ %= R\n\nsingle_sum = sum(h_vec) - N\n\nsumm += single_sum\nsumm %= R\n\nsys.stdout.write(str(summ))",
        "correct": true,
        "task_id": "0795",
        "depth": 1
    },
    {
        "description": "Thor is getting used to the Earth. As a gift Loki gave him a smartphone. There are n applications on this phone. Thor is fascinated by this phone. He has only one minor issue: he can't count the number of unread notifications generated by those applications (maybe Loki put a curse on it so he can't).\n\nq events are about to happen (in chronological order). They are of three types:\n\n  1. Application x generates a notification (this new notification is unread). \n  2. Thor reads all notifications generated so far by application x (he may re-read some notifications). \n  3. Thor reads the first t notifications generated by phone applications (notifications generated in first t events of the first type). It's guaranteed that there were at least t events of the first type before this event. Please note that he doesn't read first t unread notifications, he just reads the very first t notifications generated on his phone and he may re-read some of them in this operation. \n\n\n\nPlease help Thor and tell him the number of unread notifications after each event. You may assume that initially there are no notifications in the phone.\n\nInput\n\nThe first line of input contains two integers n and q (1 \u2264 n, q \u2264 300 000) \u2014 the number of applications and the number of events to happen.\n\nThe next q lines contain the events. The i-th of these lines starts with an integer typei \u2014 type of the i-th event. If typei = 1 or typei = 2 then it is followed by an integer xi. Otherwise it is followed by an integer ti (1 \u2264 typei \u2264 3, 1 \u2264 xi \u2264 n, 1 \u2264 ti \u2264 q).\n\nOutput\n\nPrint the number of unread notifications after each event.\n\nExamples\n\nInput\n\n3 4\n1 3\n1 1\n1 2\n2 3\n\n\nOutput\n\n1\n2\n3\n2\n\n\nInput\n\n4 6\n1 2\n1 4\n1 2\n3 3\n1 3\n1 3\n\n\nOutput\n\n1\n2\n3\n0\n1\n2\n\nNote\n\nIn the first sample:\n\n  1. Application 3 generates a notification (there is 1 unread notification). \n  2. Application 1 generates a notification (there are 2 unread notifications). \n  3. Application 2 generates a notification (there are 3 unread notifications). \n  4. Thor reads the notification generated by application 3, there are 2 unread notifications left. \n\n\n\nIn the second sample test:\n\n  1. Application 2 generates a notification (there is 1 unread notification). \n  2. Application 4 generates a notification (there are 2 unread notifications). \n  3. Application 2 generates a notification (there are 3 unread notifications). \n  4. Thor reads first three notifications and since there are only three of them so far, there will be no unread notification left. \n  5. Application 3 generates a notification (there is 1 unread notification). \n  6. Application 3 generates a notification (there are 2 unread notifications). ",
        "task_name": "705_C. Thor",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport math\nimport bisect\n\nn,q = list(map(int, sys.stdin.readline().strip().split(' ')))\n\nnotifications = []\nunread = [0 for i in range(n+1)]\nlast_unread = 0\nans = 0\nfor q0 in range(q):\n    i,x = list(map(int, sys.stdin.readline().strip().split(' ')))\n    if i == 1:\n        unread[x] += 1\n        ans += 1\n        notifications.append(x)\n    elif i == 2:\n        ans -= unread[x]\n        unread[x] = 0\n    else:\n        for j in range(last_unread,x):\n            unread[notifications[j]] -= 1\n            ans -= 1\n        last_unread = x\n    print(ans)",
        "correct": false,
        "task_id": "0797",
        "depth": 2
    },
    {
        "description": "Bachgold problem is very easy to formulate. Given a positive integer n represent it as a sum of maximum possible number of prime numbers. One can prove that such representation exists for any integer greater than 1.\n\nRecall that integer k is called prime if it is greater than 1 and has exactly two positive integer divisors \u2014 1 and k. \n\nInput\n\nThe only line of the input contains a single integer n (2 \u2264 n \u2264 100 000).\n\nOutput\n\nThe first line of the output contains a single integer k \u2014 maximum possible number of primes in representation.\n\nThe second line should contain k primes with their sum equal to n. You can print them in any order. If there are several optimal solution, print any of them.\n\nExamples\n\nInput\n\n5\n\n\nOutput\n\n2\n2 3\n\n\nInput\n\n6\n\n\nOutput\n\n3\n2 2 2",
        "task_name": "749_A. Bachgold Problem",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import bisect\nimport sys\nimport fileinput\n\ndef getPrimes():\n    primes = []\n    values = [True for p in range(2, (10**6) + 10)]\n    p = 2\n    while p <= (10**6):\n        if values[p] == True:\n            primes.append(p)\n            for m in range(p*2, (10**6), p):\n                values[m] = False\n        p += 1\n    del values\n    return primes\n\na = int(input(\"\"))\narr = []\nprimes = getPrimes()\nwhile a >= 0:\n    position = bisect.bisect_left(primes, a)\n    if primes[position] > a or (primes[position] == a and a not in [2, 3]) :\n        position -= 1\n        if a - 1 == primes[position]:\n            position -= 1\n    arr.append(primes[position])\n    a -= primes[position]\n    if a == 0:\n        break\n\nprint(len(arr))\nprint (\" \".join([str(word) for word in arr]))",
        "correct": false,
        "task_id": "0798",
        "depth": 2
    },
    {
        "description": "After returning from the army Makes received a gift \u2014 an array a consisting of n positive integer numbers. He hadn't been solving problems for a long time, so he became interested to answer a particular question: how many triples of indices (i, j, k) (i < j < k), such that ai\u00b7aj\u00b7ak is minimum possible, are there in the array? Help him with it!\n\nInput\n\nThe first line of input contains a positive integer number n (3 \u2264 n \u2264 105) \u2014 the number of elements in array a. The second line contains n positive integer numbers ai (1 \u2264 ai \u2264 109) \u2014 the elements of a given array.\n\nOutput\n\nPrint one number \u2014 the quantity of triples (i, j, k) such that i, j and k are pairwise distinct and ai\u00b7aj\u00b7ak is minimum possible.\n\nExamples\n\nInput\n\n4\n1 1 1 1\n\n\nOutput\n\n4\n\n\nInput\n\n5\n1 3 2 3 4\n\n\nOutput\n\n2\n\n\nInput\n\n6\n1 3 3 1 3 2\n\n\nOutput\n\n1\n\nNote\n\nIn the first example Makes always chooses three ones out of four, and the number of ways to choose them is 4.\n\nIn the second example a triple of numbers (1, 2, 3) is chosen (numbers, not indices). Since there are two ways to choose an element 3, then the answer is 2.\n\nIn the third example a triple of numbers (1, 1, 2) is chosen, and there's only one way to choose indices.",
        "task_name": "817_B. Makes And The Product",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\na = map(int, raw_input().split())\n\na = sorted(a)\n\nx = a[2]\nans = 1\nfor i in xrange(3, len(a)):\n\tif a[i] == x:\n\t\tans += 1\n\telse:\n\t\tbreak\n\nprint(ans)\n",
        "correct": false,
        "task_id": "0799",
        "depth": 1
    },
    {
        "description": "Gleb ordered pizza home. When the courier delivered the pizza, he was very upset, because several pieces of sausage lay on the crust, and he does not really like the crust.\n\nThe pizza is a circle of radius r and center at the origin. Pizza consists of the main part \u2014 circle of radius r - d with center at the origin, and crust around the main part of the width d. Pieces of sausage are also circles. The radius of the i -th piece of the sausage is ri, and the center is given as a pair (xi, yi).\n\nGleb asks you to help determine the number of pieces of sausage caught on the crust. A piece of sausage got on the crust, if it completely lies on the crust.\n\nInput\n\nFirst string contains two integer numbers r and d (0 \u2264 d < r \u2264 500) \u2014 the radius of pizza and the width of crust.\n\nNext line contains one integer number n \u2014 the number of pieces of sausage (1 \u2264 n \u2264 105).\n\nEach of next n lines contains three integer numbers xi, yi and ri ( - 500 \u2264 xi, yi \u2264 500, 0 \u2264 ri \u2264 500), where xi and yi are coordinates of the center of i-th peace of sausage, ri \u2014 radius of i-th peace of sausage.\n\nOutput\n\nOutput the number of pieces of sausage that lay on the crust.\n\nExamples\n\nInput\n\n8 4\n7\n7 8 1\n-7 3 2\n0 2 1\n0 -2 2\n-3 -3 1\n0 6 2\n5 3 1\n\n\nOutput\n\n2\n\n\nInput\n\n10 8\n4\n0 0 9\n0 0 10\n1 0 1\n1 0 2\n\n\nOutput\n\n0\n\nNote\n\nBelow is a picture explaining the first example. Circles of green color denote pieces of sausage lying on the crust.\n\n<image>",
        "task_name": "842_B. Gleb And Pizza",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "rp, crust = map(int, raw_input().split())\nn = int(raw_input())\n\nresult = 0\n\nlower_bound = rp - crust\nupper_bound = rp\n\nlower_bound_sq = (rp - crust) ** 2\nupper_bound_sq = rp ** 2\n\nfor i in range(n):\n    x, y, rs = map(int, raw_input().split())\n    ds = x*x + y*y\n    #print(x, y, rs, ds)\n    if ds < lower_bound_sq or ds > upper_bound_sq:\n        # the center is not inside the crust\n        continue\n    d_lower = int(ds**0.5)\n    if d_lower ** 2 == ds:\n        # full square\n        if d_lower - rs >= lower_bound and d_lower + rs <= upper_bound:\n            result += 1\n        continue\n    l_estimate = 2 * rs * d_lower\n    h_estimate = 2 * rs * d_lower + 1\n    rs_sq = rs * rs\n\n    if ds + rs_sq - l_estimate >= lower_bound_sq and \\\n       ds + rs_sq + l_estimate <= upper_bound_sq:\n        result += 1\n\nprint(result)\n",
        "correct": false,
        "task_id": "0800",
        "depth": 1
    },
    {
        "description": "A permutation of size n is an array of size n such that each integer from 1 to n occurs exactly once in this array. An inversion in a permutation p is a pair of indices (i, j) such that i > j and ai < aj. For example, a permutation [4, 1, 3, 2] contains 4 inversions: (2, 1), (3, 1), (4, 1), (4, 3).\n\nYou are given a permutation a of size n and m queries to it. Each query is represented by two indices l and r denoting that you have to reverse the segment [l, r] of the permutation. For example, if a = [1, 2, 3, 4] and a query l = 2, r = 4 is applied, then the resulting permutation is [1, 4, 3, 2].\n\nAfter each query you have to determine whether the number of inversions is odd or even.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 1500) \u2014 the size of the permutation. \n\nThe second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 n) \u2014 the elements of the permutation. These integers are pairwise distinct.\n\nThe third line contains one integer m (1 \u2264 m \u2264 2\u00b7105) \u2014 the number of queries to process.\n\nThen m lines follow, i-th line containing two integers li, ri (1 \u2264 li \u2264 ri \u2264 n) denoting that i-th query is to reverse a segment [li, ri] of the permutation. All queries are performed one after another.\n\nOutput\n\nPrint m lines. i-th of them must be equal to odd if the number of inversions in the permutation after i-th query is odd, and even otherwise.\n\nExamples\n\nInput\n\n3\n1 2 3\n2\n1 2\n2 3\n\n\nOutput\n\nodd\neven\n\n\nInput\n\n4\n1 2 4 3\n4\n1 1\n1 4\n1 4\n2 3\n\n\nOutput\n\nodd\nodd\nodd\neven\n\nNote\n\nThe first example:\n\n  1. after the first query a = [2, 1, 3], inversion: (2, 1); \n  2. after the second query a = [2, 3, 1], inversions: (3, 1), (3, 2). \n\n\n\nThe second example:\n\n  1. a = [1, 2, 4, 3], inversion: (4, 3); \n  2. a = [3, 4, 2, 1], inversions: (3, 1), (4, 1), (3, 2), (4, 2), (4, 3); \n  3. a = [1, 2, 4, 3], inversion: (4, 3); \n  4. a = [1, 4, 2, 3], inversions: (3, 2), (4, 2). ",
        "task_name": "911_D. Inversion Counting",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nfrom itertools import repeat\ndef main():\n    n = int(stdin.readline())\n    a = map(int, stdin.readline().split())\n    m = int(stdin.readline())\n    q = map(int, stdin.read().split(), repeat(10, 2 * m))\n    q[1] = (q[1] - q[0]) / 2\n    for i in xrange(1, m):\n        q[i*2+1] = (q[i*2+1] - q[i*2]) / 2 + q[i*2-2]\n    ans = [('odd','even')[q[i*2+1]%2] for i in xrange(m)]\n    stdout.write('\\n'.join(ans))\nmain()\n",
        "correct": false,
        "task_id": "0802",
        "depth": 1
    },
    {
        "description": "Year 2118. Androids are in mass production for decades now, and they do all the work for humans. But androids have to go to school to be able to solve creative tasks. Just like humans before.\n\nIt turns out that high school struggles are not gone. If someone is not like others, he is bullied. Vasya-8800 is an economy-class android which is produced by a little-known company. His design is not perfect, his characteristics also could be better. So he is bullied by other androids.\n\nOne of the popular pranks on Vasya is to force him to compare x^y with y^x. Other androids can do it in milliseconds while Vasya's memory is too small to store such big numbers.\n\nPlease help Vasya! Write a fast program to compare x^y with y^x for Vasya, maybe then other androids will respect him.\n\nInput\n\nOn the only line of input there are two integers x and y (1 \u2264 x, y \u2264 10^{9}).\n\nOutput\n\nIf x^y < y^x, then print '<' (without quotes). If x^y > y^x, then print '>' (without quotes). If x^y = y^x, then print '=' (without quotes).\n\nExamples\n\nInput\n\n5 8\n\n\nOutput\n\n&gt;\n\n\nInput\n\n10 3\n\n\nOutput\n\n&lt;\n\n\nInput\n\n6 6\n\n\nOutput\n\n=\n\nNote\n\nIn the first example 5^8 = 5 \u22c5 5 \u22c5 5 \u22c5 5 \u22c5 5 \u22c5 5 \u22c5 5 \u22c5 5 = 390625, and 8^5 = 8 \u22c5 8 \u22c5 8 \u22c5 8 \u22c5 8 = 32768. So you should print '>'.\n\nIn the second example 10^3 = 1000 < 3^{10} = 59049.\n\nIn the third example 6^6 = 46656 = 6^6.",
        "task_name": "987_B. High School: Become Human",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\n\ndef pow1(x, base):\n    sq = 0\n    while (base > 0):\n\n        if base % 2:\n            base -= 1\n\n        base //= 2\n        sq += 1\n\n    return sq\n\n\nx, y = map(int, stdin.readline().split())\nans1, ans2 = pow1(x, y), pow1(y, x)\n\nif ans1 > ans2:\n    print('>')\nelif ans1 < ans2:\n    print('<')\nelse:\n    print('=')\n",
        "correct": false,
        "task_id": "0803",
        "depth": 1
    },
    {
        "description": "We have a string S consisting of uppercase English letters. Additionally, an integer N will be given.\n\nShift each character of S by N in alphabetical order (see below), and print the resulting string.\n\nWe assume that `A` follows `Z`. For example, shifting `A` by 2 results in `C` (`A` \\to `B` \\to `C`), and shifting `Y` by 3 results in `B` (`Y` \\to `Z` \\to `A` \\to `B`).\n\nConstraints\n\n* 0 \\leq N \\leq 26\n* 1 \\leq |S| \\leq 10^4\n* S consists of uppercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS\n\n\nOutput\n\nPrint the string resulting from shifting each character of S by N in alphabetical order.\n\nExamples\n\nInput\n\n2\nABCXYZ\n\n\nOutput\n\nCDEZAB\n\n\nInput\n\n0\nABCXYZ\n\n\nOutput\n\nABCXYZ\n\n\nInput\n\n13\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n\n\nOutput\n\nNOPQRSTUVWXYZABCDEFGHIJKLM",
        "task_name": "p02848 AtCoder Beginner Contest 146 - ROT N",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(input())\nstrings = input()\nletters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\nnew_strings = ''\nfor s in strings:\n    index = letters.index(s)\n    added_index = index + n\n    new_index = added_index % 26\n    new_s = letters[new_index]\n    new_strings += new_s\n\nprint(new_strings)",
        "correct": false,
        "task_id": "0805",
        "depth": 1
    },
    {
        "description": "There are N monsters, numbered 1, 2, ..., N.\n\nInitially, the health of Monster i is A_i.\n\nBelow, a monster with at least 1 health is called alive.\n\nUntil there is only one alive monster, the following is repeated:\n\n* A random alive monster attacks another random alive monster.\n* As a result, the health of the monster attacked is reduced by the amount equal to the current health of the monster attacking.\n\n\n\nFind the minimum possible final health of the last monster alive.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 10^5\n* 1 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N\n\n\nOutput\n\nPrint the minimum possible final health of the last monster alive.\n\nExamples\n\nInput\n\n4\n2 10 8 40\n\n\nOutput\n\n2\n\n\nInput\n\n4\n5 13 8 1000000000\n\n\nOutput\n\n1\n\n\nInput\n\n3\n1000000000 1000000000 1000000000\n\n\nOutput\n\n1000000000",
        "task_name": "p03127 AtCoder Beginner Contest 118 - Monsters Battle Royale",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#coding:utf-8\n\nn=input()\nA=map(int, raw_input().split(\" \"))\nA.sort()\nans=A[0]\nfor a in A[1:]:\n    m=a%ans\n    if m!=0:\n        ans=min(m,ans)\nprint(ans)",
        "correct": false,
        "task_id": "0806",
        "depth": 1
    },
    {
        "description": "Find the maximum possible sum of the digits (in base 10) of a positive integer not greater than N.\n\nConstraints\n\n* 1\\leq N \\leq 10^{16}\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\n\n\nOutput\n\nPrint the maximum possible sum of the digits (in base 10) of a positive integer not greater than N.\n\nExamples\n\nInput\n\n100\n\n\nOutput\n\n18\n\n\nInput\n\n9995\n\n\nOutput\n\n35\n\n\nInput\n\n3141592653589793\n\n\nOutput\n\n137",
        "task_name": "p03427 AtCoder Grand Contest 021 - Digit Sum 2",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# -*- coding: utf-8 -*-\n\"\"\"\n  problem:\n    https://agc021.contest.atcoder.jp/tasks/agc021_a\n\"\"\"\n\nfrom __future__ import print_function\nimport sys\n\ndef solve(_input):\n    \"\"\"\n    main function.\n\n    Arguments:\n    _input -- string of the format \"n p\", where n and p are positive integer, separated by space \" \".\n    \"\"\"\n\n    # input validation\n    _li = list(_input.strip())\n    try:\n        _digits = map(int,_li)\n    except (ValueError, IndexError) as ex:\n        print ('[ERROR] Please input a whole number', ex)\n        return -1\n\n    # preprocessing\n    _ans = sum(_digits)\n\n    for _i in range(0,len(_digits)-1):\n\n        if ( _digits[_i] == 0 ):\n            continue\n\n        _r = 0\n        \n        for _j in range(0,_i - 1):\n            _r += _digits[_j]\n        \n        _r += _digits[_i] - 1\n\n        _r += (len(_digits) - _i - 1) * 9\n\n        _ans = max(_ans, _r)\n\n    return _ans\n\n# call\nprint (solve(sys.stdin.readline()))\n",
        "correct": true,
        "task_id": "0807",
        "depth": 2
    },
    {
        "description": "Write a program which reads an integer n and prints the number of prime numbers which are less than or equal to n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\n\n\n\nInput\n\nInput consists of several datasets. Each dataset has an integer n (1 \u2264 n \u2264 999,999) in a line.\n\nThe number of datasets is less than or equal to 30.\n\nOutput\n\nFor each dataset, prints the number of prime numbers.\n\nExample\n\nInput\n\n10\n3\n11\n\n\nOutput\n\n4\n2\n5",
        "task_name": "p00009 Prime Number",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\na = [True] * 1000000\n\nfor i in range(2,1000000):\n\tif(a[i-1]):\n\t\tfor j in range(i**2-1, 1000000, i):\n\t\t\ta[j] = False\n\nfor s in sys.stdin:\n\tprint(a[1:int(s)].count(True))",
        "correct": true,
        "task_id": "0808",
        "depth": 2
    },
    {
        "description": "problem\n\nJOI Pizza sells pizza home delivery along the d-meter-long ring road that runs through the city center.\n\nJOI Pizza has n stores S1, ..., Sn on the loop line. The head office is S1. The distance from S1 to Si when moving the loop line clockwise is set to di meters. D2 , ..., dn is an integer greater than or equal to 1 and less than or equal to d -1. D2, ..., dn are all different. Bake and deliver pizza at the shortest store.\n\nThe location of the delivery destination is represented by an integer k that is greater than or equal to 0 and less than or equal to d -1. This means that the distance from the head office S1 to the delivery destination in the clockwise direction is k meters. Pizza delivery is done along the loop line and no other road is allowed. However, the loop line may move clockwise or counterclockwise.\n\nFor example, if the location of the store and the location of the delivery destination are as shown in the figure below (this example corresponds to Example 1 of \"I / O example\").\n\n\n<image>\n\n\nThe store closest to the delivery destination 1 is S2, so the delivery is from store S2. At this time, the distance traveled from the store is 1. Also, the store closest to delivery destination 2 is S1 (main store), so store S1 (main store). ) To deliver to home. At this time, the distance traveled from the store is 2.\n\nTotal length of the loop line d, Number of JOI pizza stores n, Number of orders m, N --1 integer representing a location other than the main store d2, ..., dn, Integer k1, .. representing the location of the delivery destination Given ., km, create a program to find the sum of all orders for each order by the distance traveled during delivery (ie, the distance from the nearest store to the delivery destination).\n\n\n\ninput\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\nThe first line is a positive integer d (2 \u2264 d \u2264 1000000000 = 109) that represents the total length of the loop line, the second line is a positive integer n (2 \u2264 n \u2264 100000) that represents the number of stores, and the third line is A positive integer m (1 \u2264 m \u2264 10000) is written to represent the number of orders. The n --1 lines after the 4th line are integers d2, d3, ..., dn that represent the location of stores other than the main store. (1 \u2264 di \u2264 d -1) is written in this order, and the integers k1, k2, ..., km (0 \u2264 ki \u2264 d) representing the delivery destination location are in the m lines after the n + 3rd line. --1) are written in this order.\n\nOf the scoring data, for 40% of the points, n \u2264 10000 is satisfied. For 40% of the points, the total distance traveled and the value of d are both 1000000 or less. In the scoring data, the total distance traveled is 1000000000 = 109 or less.\n\nWhen d is 0, it indicates the end of input. The number of data sets does not exceed 10.\n\noutput\n\nFor each data set, one integer representing the total distance traveled during delivery is output on one line.\n\nExamples\n\nInput\n\n8\n3\n2\n3\n1\n4\n6\n20\n4\n4\n12\n8\n16\n7\n7\n11\n8\n0\n\n\nOutput\n\n3\n3\n\n\nInput\n\nNone\n\n\nOutput\n\nNone",
        "task_name": "p00462 Pizza",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "f = open(\"input.txt\", \"r\")\ninput = map(lambda x : int(x), f.read().strip().split(\"\\n\"))\nf.close()\nd, n, m = input[0], input[1], input[2]\nS, K = set(sorted([0]+input[3:3+n-1])), input[3+n-1:]\nsum = 0\nfor k in K:\n\ti = 1\n\twhile (True):\n\t\tif (k+i)%8 in S or (k-i)%8 in S: break\n\t\ti += 1\n\tsum += i\nf = open(\"output.txt\", \"w\")\nf.write(str(sum))\nf.close()",
        "correct": false,
        "task_id": "0809",
        "depth": 2
    },
    {
        "description": "There are n benches in the Berland Central park. It is known that a_i people are currently sitting on the i-th bench. Another m people are coming to the park and each of them is going to have a seat on some bench out of n available.\n\nLet k be the maximum number of people sitting on one bench after additional m people came to the park. Calculate the minimum possible k and the maximum possible k.\n\nNobody leaves the taken seat during the whole process.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of benches in the park.\n\nThe second line contains a single integer m (1 \u2264 m \u2264 10 000) \u2014 the number of people additionally coming to the park.\n\nEach of the next n lines contains a single integer a_i (1 \u2264 a_i \u2264 100) \u2014 the initial number of people on the i-th bench.\n\nOutput\n\nPrint the minimum possible k and the maximum possible k, where k is the maximum number of people sitting on one bench after additional m people came to the park.\n\nExamples\n\nInput\n\n4\n6\n1\n1\n1\n1\n\n\nOutput\n\n3 7\n\n\nInput\n\n1\n10\n5\n\n\nOutput\n\n15 15\n\n\nInput\n\n3\n6\n1\n6\n5\n\n\nOutput\n\n6 12\n\n\nInput\n\n3\n7\n1\n6\n5\n\n\nOutput\n\n7 13\n\nNote\n\nIn the first example, each of four benches is occupied by a single person. The minimum k is 3. For example, it is possible to achieve if two newcomers occupy the first bench, one occupies the second bench, one occupies the third bench, and two remaining \u2014 the fourth bench. The maximum k is 7. That requires all six new people to occupy the same bench.\n\nThe second example has its minimum k equal to 15 and maximum k equal to 15, as there is just a single bench in the park and all 10 people will occupy it.",
        "task_name": "1042_A. Benches",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport math\nn = int(sys.stdin.readline())\nm = int(sys.stdin.readline())\na = [0]*n\nfor i in range(n):\n  a[i] = int(sys.stdin.readline())\n\nasort = sorted(a, reverse=True)\n\nnumspacesremaining = asort[0]*(n-1) - sum(asort[1:])\n\nif m <= numspacesremaining:\n  mink = max(asort)\nelse:\n  mink = max(asort) + max(math.ceil((m - numspacesremaining)/float(n)), 0)\n\nmaxk = max(a) + m\n\nprint(str(int(mink)) + \" \" + str(maxk))\n",
        "correct": true,
        "task_id": "0812",
        "depth": 1
    },
    {
        "description": "Lunar New Year is approaching, and Bob decides to take a wander in a nearby park.\n\nThe park can be represented as a connected graph with n nodes and m bidirectional edges. Initially Bob is at the node 1 and he records 1 on his notebook. He can wander from one node to another through those bidirectional edges. Whenever he visits a node not recorded on his notebook, he records it. After he visits all nodes at least once, he stops wandering, thus finally a permutation of nodes a_1, a_2, \u2026, a_n is recorded.\n\nWandering is a boring thing, but solving problems is fascinating. Bob wants to know the lexicographically smallest sequence of nodes he can record while wandering. Bob thinks this problem is trivial, and he wants you to solve it.\n\nA sequence x is lexicographically smaller than a sequence y if and only if one of the following holds: \n\n  * x is a prefix of y, but x \u2260 y (this is impossible in this problem as all considered sequences have the same length); \n  * in the first position where x and y differ, the sequence x has a smaller element than the corresponding element in y. \n\nInput\n\nThe first line contains two positive integers n and m (1 \u2264 n, m \u2264 10^5), denoting the number of nodes and edges, respectively.\n\nThe following m lines describe the bidirectional edges in the graph. The i-th of these lines contains two integers u_i and v_i (1 \u2264 u_i, v_i \u2264 n), representing the nodes the i-th edge connects.\n\nNote that the graph can have multiple edges connecting the same two nodes and self-loops. It is guaranteed that the graph is connected.\n\nOutput\n\nOutput a line containing the lexicographically smallest sequence a_1, a_2, \u2026, a_n Bob can record.\n\nExamples\n\nInput\n\n\n3 2\n1 2\n1 3\n\n\nOutput\n\n\n1 2 3 \n\n\nInput\n\n\n5 5\n1 4\n3 4\n5 4\n3 2\n1 5\n\n\nOutput\n\n\n1 4 3 2 5 \n\n\nInput\n\n\n10 10\n1 4\n6 8\n2 5\n3 7\n9 4\n5 6\n3 4\n8 10\n8 9\n1 10\n\n\nOutput\n\n\n1 4 3 7 9 8 6 5 2 10 \n\nNote\n\nIn the first sample, Bob's optimal wandering path could be 1 \u2192 2 \u2192 1 \u2192 3. Therefore, Bob will obtain the sequence \\{1, 2, 3\\}, which is the lexicographically smallest one.\n\nIn the second sample, Bob's optimal wandering path could be 1 \u2192 4 \u2192 3 \u2192 2 \u2192 3 \u2192 4 \u2192 1 \u2192 5. Therefore, Bob will obtain the sequence \\{1, 4, 3, 2, 5\\}, which is the lexicographically smallest one.",
        "task_name": "1106_D. Lunar New Year and a Wander",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import heapq\nfrom collections import defaultdict\nn,m = [int(x) for x in raw_input().split(' ')]\n\narr = list()\n\nd = defaultdict(list)\nfor _ in range(m):\n    el = [int(x) for x in raw_input().split(' ')]\n    d[el[0]].append(el[1])\n    d[el[1]].append(el[0])\nvis = []\ncur = set()\nq = []\nheapq.heappush(q, 1)\ncur.add(1)\nwhile len(q) > 0:\n    m = heapq.heappop(q)\n    vis.append(m)\n    for x in d[m]:\n        if x not in cur:\n            cur.add(x)\n            heapq.heappush(q,x)\nprint(' '.join([str(x) for x in vis]))",
        "correct": true,
        "task_id": "0813",
        "depth": 2
    },
    {
        "description": "You are a coach at your local university. There are n students under your supervision, the programming skill of the i-th student is a_i.\n\nYou have to form k teams for yet another new programming competition. As you know, the more students are involved in competition the more probable the victory of your university is! So you have to form no more than k (and at least one) non-empty teams so that the total number of students in them is maximized. But you also know that each team should be balanced. It means that the programming skill of each pair of students in each team should differ by no more than 5. Teams are independent from one another (it means that the difference between programming skills of two students from two different teams does not matter).\n\nIt is possible that some students not be included in any team at all.\n\nYour task is to report the maximum possible total number of students in no more than k (and at least one) non-empty balanced teams.\n\nIf you are Python programmer, consider using PyPy instead of Python when you submit your code.\n\nInput\n\nThe first line of the input contains two integers n and k (1 \u2264 k \u2264 n \u2264 5000) \u2014 the number of students and the maximum number of teams, correspondingly.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9), where a_i is a programming skill of the i-th student.\n\nOutput\n\nPrint one integer \u2014 the maximum possible total number of students in no more than k (and at least one) non-empty balanced teams.\n\nExamples\n\nInput\n\n\n5 2\n1 2 15 15 15\n\n\nOutput\n\n\n5\n\n\nInput\n\n\n6 1\n36 4 1 25 9 16\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n4 4\n1 10 100 1000\n\n\nOutput\n\n\n4",
        "task_name": "1133_E. K Balanced Teams",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, k = map(int, raw_input().split())\na = map(int, raw_input().split())\n\na.sort()\n\ncnt_from = [0] * n\nfor i in range(n):\n\twhile (i+cnt_from[i] < n) and (a[i+cnt_from[i]] - a[i] <= 5):\n\t\tcnt_from[i] += 1\n\ndp = [[0] * (k+1) for _ in range(n+1)]\nfor i in range(n):\n\tfor j in range(k+1):\n\t\tdp[i+1][j] = max(dp[i+1][j], dp[i][j])\n\t\tif j+1 <= k:\n\t\t\tdp[i+cnt_from[i]][j+1] = max(dp[i+cnt_from[i]][j+1], dp[i][j] + cnt_from[i])\nprint(dp[n][k])",
        "correct": true,
        "task_id": "0814",
        "depth": 2
    },
    {
        "description": "You are given a sequence a_1, a_2, ..., a_n consisting of n integers.\n\nYou can choose any non-negative integer D (i.e. D \u2265 0), and for each a_i you can:\n\n  * add D (only once), i. e. perform a_i := a_i + D, or \n  * subtract D (only once), i. e. perform a_i := a_i - D, or \n  * leave the value of a_i unchanged. \n\n\n\nIt is possible that after an operation the value a_i becomes negative.\n\nYour goal is to choose such minimum non-negative integer D and perform changes in such a way, that all a_i are equal (i.e. a_1=a_2=...=a_n).\n\nPrint the required D or, if it is impossible to choose such value D, print -1.\n\nFor example, for array [2, 8] the value D=3 is minimum possible because you can obtain the array [5, 5] if you will add D to 2 and subtract D from 8. And for array [1, 4, 7, 7] the value D=3 is also minimum possible. You can add it to 1 and subtract it from 7 and obtain the array [4, 4, 4, 4].\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 100) \u2014 the sequence a.\n\nOutput\n\nPrint one integer \u2014 the minimum non-negative integer value D such that if you add this value to some a_i, subtract this value from some a_i and leave some a_i without changes, all obtained values become equal.\n\nIf it is impossible to choose such value D, print -1.\n\nExamples\n\nInput\n\n\n6\n1 4 4 7 4 1\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n5\n2 2 5 2 5\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n4\n1 3 3 7\n\n\nOutput\n\n\n-1\n\n\nInput\n\n\n2\n2 8\n\n\nOutput\n\n\n3",
        "task_name": "1154_B. Make Them Equal",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a = int(raw_input())\narr=list(map(int,raw_input().split(\" \")))\ns=[]\nfor i in range(len(arr)):\n\tif arr[i] not in s:\n\t\ts.append(arr[i])\ns=sorted(s)\nif len(s) >3:\n\tprint(-1)\nelif len(s) == 2:\n\tif sum(s)%2 == 0:\n\t\tprint((s[1]-s[0])/2)\n\telse:\n\t\tprint(s[1]-s[0])\nelif len(s) == 3:\n\tif s[2]-s[1] == s[1]-s[0]:\n\t\tprint(s[2]-s[1])\n\telse:\n\t\tprint(-1)\n",
        "correct": false,
        "task_id": "0815",
        "depth": 1
    },
    {
        "description": "The only difference between easy and hard versions are constraints on n and k.\n\nYou are messaging in one of the popular social networks via your smartphone. Your smartphone can show at most k most recent conversations with your friends. Initially, the screen is empty (i.e. the number of displayed conversations equals 0).\n\nEach conversation is between you and some of your friends. There is at most one conversation with any of your friends. So each conversation is uniquely defined by your friend.\n\nYou (suddenly!) have the ability to see the future. You know that during the day you will receive n messages, the i-th message will be received from the friend with ID id_i (1 \u2264 id_i \u2264 10^9).\n\nIf you receive a message from id_i in the conversation which is currently displayed on the smartphone then nothing happens: the conversations of the screen do not change and do not change their order, you read the message and continue waiting for new messages.\n\nOtherwise (i.e. if there is no conversation with id_i on the screen):\n\n  * Firstly, if the number of conversations displayed on the screen is k, the last conversation (which has the position k) is removed from the screen. \n  * Now the number of conversations on the screen is guaranteed to be less than k and the conversation with the friend id_i is not displayed on the screen. \n  * The conversation with the friend id_i appears on the first (the topmost) position on the screen and all the other displayed conversations are shifted one position down. \n\n\n\nYour task is to find the list of conversations (in the order they are displayed on the screen) after processing all n messages.\n\nInput\n\nThe first line of the input contains two integers n and k (1 \u2264 n, k \u2264 200) \u2014 the number of messages and the number of conversations your smartphone can show.\n\nThe second line of the input contains n integers id_1, id_2, ..., id_n (1 \u2264 id_i \u2264 10^9), where id_i is the ID of the friend which sends you the i-th message.\n\nOutput\n\nIn the first line of the output print one integer m (1 \u2264 m \u2264 min(n, k)) \u2014 the number of conversations shown after receiving all n messages.\n\nIn the second line print m integers ids_1, ids_2, ..., ids_m, where ids_i should be equal to the ID of the friend corresponding to the conversation displayed on the position i after receiving all n messages.\n\nExamples\n\nInput\n\n\n7 2\n1 2 3 2 1 3 2\n\n\nOutput\n\n\n2\n2 1 \n\n\nInput\n\n\n10 4\n2 3 3 1 1 2 1 2 3 3\n\n\nOutput\n\n\n3\n1 3 2 \n\nNote\n\nIn the first example the list of conversations will change in the following way (in order from the first to last message):\n\n  * []; \n  * [1]; \n  * [2, 1]; \n  * [3, 2]; \n  * [3, 2]; \n  * [1, 3]; \n  * [1, 3]; \n  * [2, 1]. \n\n\n\nIn the second example the list of conversations will change in the following way:\n\n  * []; \n  * [2]; \n  * [3, 2]; \n  * [3, 2]; \n  * [1, 3, 2]; \n  * and then the list will not change till the end. ",
        "task_name": "1234_B1. Social Network (easy version)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "entrada = list(raw_input().split())\nligacao = list(raw_input().split())\nresult = []\nsaida = ''\nligacao.append('fim')\n\nfor i in ligacao:\n\tif(i == 'fim'):\n\t\tbreak\n\tif(len(result) != len(set(result))):\n\t\tresult.remove(result[0])\n\telse:\t\n\t\tresult.insert(0,i)\t\n\tif(len(result) > int(entrada[1])):\t\t\n\t\tresult.remove(result[int(entrada[1])])\n\t\t\nif(len(result) != len(set(result))):\n\t\tresult.remove(result[0])\n\nfor i in range(len(result)):\n\tsaida += str(result[i])\n\tif(i < len(result)):\n\t\tsaida += ' '\n\t\t\nprint(len(result))\nprint(saida)\n\n\n\n\n\t\t      \t     \t\t\t \t  \t\t  \t\t\t  \t",
        "correct": false,
        "task_id": "0816",
        "depth": 1
    },
    {
        "description": "This is a hard version of the problem. The actual problems are different, but the easy version is almost a subtask of the hard version. Note that the constraints and the output format are different.\n\nYou are given a string s consisting of n lowercase Latin letters.\n\nYou have to color all its characters the minimum number of colors (each character to exactly one color, the same letters can be colored the same or different colors, i.e. you can choose exactly one color for each index in s).\n\nAfter coloring, you can swap any two neighboring characters of the string that are colored different colors. You can perform such an operation arbitrary (possibly, zero) number of times.\n\nThe goal is to make the string sorted, i.e. all characters should be in alphabetical order.\n\nYour task is to find the minimum number of colors which you have to color the given string in so that after coloring it can become sorted by some sequence of swaps. Note that you have to restore only coloring, not the sequence of swaps.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of s.\n\nThe second line of the input contains the string s consisting of exactly n lowercase Latin letters.\n\nOutput\n\nIn the first line print one integer res (1 \u2264 res \u2264 n) \u2014 the minimum number of colors in which you have to color the given string so that after coloring it can become sorted by some sequence of swaps.\n\nIn the second line print any possible coloring that can be used to sort the string using some sequence of swaps described in the problem statement. The coloring is the array c of length n, where 1 \u2264 c_i \u2264 res and c_i means the color of the i-th character.\n\nExamples\n\nInput\n\n\n9\nabacbecfd\n\n\nOutput\n\n\n2\n1 1 2 1 2 1 2 1 2 \n\n\nInput\n\n\n8\naaabbcbb\n\n\nOutput\n\n\n2\n1 2 1 2 1 2 1 1\n\n\nInput\n\n\n7\nabcdedc\n\n\nOutput\n\n\n3\n1 1 1 1 1 2 3 \n\n\nInput\n\n\n5\nabcde\n\n\nOutput\n\n\n1\n1 1 1 1 1 ",
        "task_name": "1296_E2. String Coloring (hard version)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nrstr = lambda: stdin.readline().strip()\nn, s = int(input()), rstr()\nlst, ans = ['a'] * 26, [1] * n\n\nfor i in range(n):\n    for j in range(26):\n        if s[i] >= lst[j]:\n            lst[j] = s[i]\n            ans[i] = j + 1\n            break\n\nprint('%d\\n%s' % (max(ans), ' '.join(map(str, ans))))\n",
        "correct": true,
        "task_id": "0817",
        "depth": 2
    },
    {
        "description": "You have an array a of length n. For every positive integer x you are going to perform the following operation during the x-th second:\n\n  * Select some distinct indices i_{1}, i_{2}, \u2026, i_{k} which are between 1 and n inclusive, and add 2^{x-1} to each corresponding position of a. Formally, a_{i_{j}} := a_{i_{j}} + 2^{x-1} for j = 1, 2, \u2026, k. Note that you are allowed to not select any indices at all.\n\n\n\nYou have to make a nondecreasing as fast as possible. Find the smallest number T such that you can make the array nondecreasing after at most T seconds.\n\nArray a is nondecreasing if and only if a_{1} \u2264 a_{2} \u2264 \u2026 \u2264 a_{n}.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^{4}) \u2014 the number of test cases.\n\nThe first line of each test case contains single integer n (1 \u2264 n \u2264 10^{5}) \u2014 the length of array a. It is guaranteed that the sum of values of n over all test cases in the input does not exceed 10^{5}.\n\nThe second line of each test case contains n integers a_{1}, a_{2}, \u2026, a_{n} (-10^{9} \u2264 a_{i} \u2264 10^{9}).\n\nOutput\n\nFor each test case, print the minimum number of seconds in which you can make a nondecreasing.\n\nExample\n\nInput\n\n\n3\n4\n1 7 6 5\n5\n1 2 3 4 5\n2\n0 -4\n\n\nOutput\n\n\n2\n0\n3\n\nNote\n\nIn the first test case, if you select indices 3, 4 at the 1-st second and 4 at the 2-nd second, then a will become [1, 7, 7, 8]. There are some other possible ways to make a nondecreasing in 2 seconds, but you can't do it faster.\n\nIn the second test case, a is already nondecreasing, so answer is 0.\n\nIn the third test case, if you do nothing at first 2 seconds and select index 2 at the 3-rd second, a will become [0, 0].",
        "task_name": "1339_C. Powered Addition",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    t = int(input())\n\n    for _ in range(t):\n        n = int(input())\n        a = [int(i) for i in input().split()]\n\n        mx = 0\n\n        p = a[0]\n        for i in range(1, n):\n            if a[i] < p:\n                mx = max(mx, (p - a[i]).bit_length())\n                a[i] = p\n\n            p = a[i]\n\n        print(mx)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": true,
        "task_id": "0818",
        "depth": 2
    },
    {
        "description": "This is the easy version of the problem. The difference between the versions is the constraint on n and the required number of operations. You can make hacks only if all versions of the problem are solved.\n\nThere are two binary strings a and b of length n (a binary string is a string consisting of symbols 0 and 1). In an operation, you select a prefix of a, and simultaneously invert the bits in the prefix (0 changes to 1 and 1 changes to 0) and reverse the order of the bits in the prefix.\n\nFor example, if a=001011 and you select the prefix of length 3, it becomes 011011. Then if you select the entire string, it becomes 001001.\n\nYour task is to transform the string a into b in at most 3n operations. It can be proved that it is always possible.\n\nInput\n\nThe first line contains a single integer t (1\u2264 t\u2264 1000) \u2014 the number of test cases. Next 3t lines contain descriptions of test cases.\n\nThe first line of each test case contains a single integer n (1\u2264 n\u2264 1000) \u2014 the length of the binary strings.\n\nThe next two lines contain two binary strings a and b of length n.\n\nIt is guaranteed that the sum of n across all test cases does not exceed 1000.\n\nOutput\n\nFor each test case, output an integer k (0\u2264 k\u2264 3n), followed by k integers p_1,\u2026,p_k (1\u2264 p_i\u2264 n). Here k is the number of operations you use and p_i is the length of the prefix you flip in the i-th operation.\n\nExample\n\nInput\n\n\n5\n2\n01\n10\n5\n01011\n11100\n2\n01\n01\n10\n0110011011\n1000110100\n1\n0\n1\n\n\nOutput\n\n\n3 1 2 1\n6 5 2 5 3 1 2\n0\n9 4 1 2 10 4 1 2 1 5\n1 1\n\nNote\n\nIn the first test case, we have 01\u2192 11\u2192 00\u2192 10.\n\nIn the second test case, we have 01011\u2192 00101\u2192 11101\u2192 01000\u2192 10100\u2192 00100\u2192 11100.\n\nIn the third test case, the strings are already the same. Another solution is to flip the prefix of length 2, which will leave a unchanged.",
        "task_name": "1381_A1. Prefix Flip (Easy Version)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from collections import *\nimport sys\ntry: inp = raw_input\nexcept: inp = input\ndef err(s):\n    sys.stderr.write('{}\\n'.format(s))\n\ndef ni():\n    return int(inp())\n\ndef nl():\n    return [int(_) for _ in inp().split()]\n\nT = ni()\ndef swap(ch):\n    return '1' if ch == '0' else '0'\n\ndef get_a_l(a, flips):\n    if flips%2 == 0:\n        return a[0]\n    else:\n        return swap(a[-1])\n\ndef get_a_r(a, flips):\n    if flips%2 == 0:\n        return a[-1]\n    else:\n        return swap(a[0])\n\ndef solve(a, b):\n    a = deque(a)\n    out = []\n    flips = 0\n    for i in range(len(a) - 1, -1, -1):\n        if (get_a_r(a, flips) == b[i]):\n            if flips%2 == 0:\n                a.pop()\n            else:\n                a.popleft()\n            continue\n        if (get_a_l(a, flips) != b[i]):\n            out.append(i+1)\n        else:\n            out.append(1)\n            out.append(i+1)\n        flips += 1\n        if flips%2 == 0:\n            a.pop()\n        else:\n            a.popleft()\n    return out\n\nfor _ in range(T):\n    N = ni()\n    a = list(inp())\n    b = list(inp())\n    out = solve(a, b)\n    print(' '.join(map(str, [len(out)] + out)))\n    \n    \n",
        "correct": true,
        "task_id": "0820",
        "depth": 1
    },
    {
        "description": "We have a point A with coordinate x = n on OX-axis. We'd like to find an integer point B (also on OX-axis), such that the absolute difference between the distance from O to B and the distance from A to B is equal to k.\n\n<image> The description of the first test case.\n\nSince sometimes it's impossible to find such point B, we can, in one step, increase or decrease the coordinate of A by 1. What is the minimum number of steps we should do to make such point B exist?\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 6000) \u2014 the number of test cases.\n\nThe only line of each test case contains two integers n and k (0 \u2264 n, k \u2264 10^6) \u2014 the initial position of point A and desirable absolute difference.\n\nOutput\n\nFor each test case, print the minimum number of steps to make point B exist.\n\nExample\n\nInput\n\n\n6\n4 0\n5 8\n0 1000000\n0 0\n1 0\n1000000 1000000\n\n\nOutput\n\n\n0\n3\n1000000\n0\n1\n0\n\nNote\n\nIn the first test case (picture above), if we set the coordinate of B as 2 then the absolute difference will be equal to |(2 - 0) - (4 - 2)| = 0 and we don't have to move A. So the answer is 0.\n\nIn the second test case, we can increase the coordinate of A by 3 and set the coordinate of B as 0 or 8. The absolute difference will be equal to |8 - 0| = 8, so the answer is 3.\n\n<image>",
        "task_name": "1401_A. Distance and Axis",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "for _ in range(int(raw_input())):\n    n,k=map(int,raw_input().split())\n    if k>=n:\n        print(k-n)\n    else:\n        result=n-k\n        print(result%2)",
        "correct": true,
        "task_id": "0821",
        "depth": 1
    },
    {
        "description": "You are given an array a of length 2n. Consider a partition of array a into two subsequences p and q of length n each (each element of array a should be in exactly one subsequence: either in p or in q).\n\nLet's sort p in non-decreasing order, and q in non-increasing order, we can denote the sorted versions by x and y, respectively. Then the cost of a partition is defined as f(p, q) = \u2211_{i = 1}^n |x_i - y_i|.\n\nFind the sum of f(p, q) over all correct partitions of array a. Since the answer might be too big, print its remainder modulo 998244353.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 150 000).\n\nThe second line contains 2n integers a_1, a_2, \u2026, a_{2n} (1 \u2264 a_i \u2264 10^9) \u2014 elements of array a.\n\nOutput\n\nPrint one integer \u2014 the answer to the problem, modulo 998244353.\n\nExamples\n\nInput\n\n\n1\n1 4\n\n\nOutput\n\n\n6\n\nInput\n\n\n2\n2 1 2 1\n\n\nOutput\n\n\n12\n\nInput\n\n\n3\n2 2 2 2 2 2\n\n\nOutput\n\n\n0\n\nInput\n\n\n5\n13 8 35 94 9284 34 54 69 123 846\n\n\nOutput\n\n\n2588544\n\nNote\n\nTwo partitions of an array are considered different if the sets of indices of elements included in the subsequence p are different.\n\nIn the first example, there are two correct partitions of the array a:\n\n  1. p = [1], q = [4], then x = [1], y = [4], f(p, q) = |1 - 4| = 3; \n  2. p = [4], q = [1], then x = [4], y = [1], f(p, q) = |4 - 1| = 3. \n\n\n\nIn the second example, there are six valid partitions of the array a: \n\n  1. p = [2, 1], q = [2, 1] (elements with indices 1 and 2 in the original array are selected in the subsequence p); \n  2. p = [2, 2], q = [1, 1]; \n  3. p = [2, 1], q = [1, 2] (elements with indices 1 and 4 are selected in the subsequence p); \n  4. p = [1, 2], q = [2, 1]; \n  5. p = [1, 1], q = [2, 2]; \n  6. p = [2, 1], q = [2, 1] (elements with indices 3 and 4 are selected in the subsequence p). ",
        "task_name": "1445_D. Divide and Sum",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=input()\na=map(int,raw_input().split())\nmod=998244353\na.sort()\nfirsum=0\nsecsum=0\nfor i in range(len(a)):\n    if i<n:\n        firsum+=a[i]\n    else:\n        secsum+=a[i]\nk=abs(secsum-firsum)%mod\nfac=[1,1]\nfor i in range(2,2*n+1):\n    fac.append((fac[-1]*i)%mod)\nrr=(fac[n]**2)%mod\ng=pow(rr,mod-2,mod)\nprint ((k*((fac[2*n]*g)%mod))%mod)",
        "correct": true,
        "task_id": "0822",
        "depth": 1
    },
    {
        "description": "Petya loves lucky numbers very much. Everybody knows that lucky numbers are positive integers whose decimal record contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nPetya loves long lucky numbers very much. He is interested in the minimum lucky number d that meets some condition. Let cnt(x) be the number of occurrences of number x in number d as a substring. For example, if d = 747747, then cnt(4) = 2, cnt(7) = 4, cnt(47) = 2, cnt(74) = 2. Petya wants the following condition to fulfil simultaneously: cnt(4) = a1, cnt(7) = a2, cnt(47) = a3, cnt(74) = a4. Petya is not interested in the occurrences of other numbers. Help him cope with this task.\n\nInput\n\nThe single line contains four integers a1, a2, a3 and a4 (1 \u2264 a1, a2, a3, a4 \u2264 106).\n\nOutput\n\nOn the single line print without leading zeroes the answer to the problem \u2014 the minimum lucky number d such, that cnt(4) = a1, cnt(7) = a2, cnt(47) = a3, cnt(74) = a4. If such number does not exist, print the single number \"-1\" (without the quotes).\n\nExamples\n\nInput\n\n2 2 1 1\n\n\nOutput\n\n4774\n\n\nInput\n\n4 7 3 1\n\n\nOutput\n\n-1",
        "task_name": "146_D. Lucky Number 2",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\na = [int(x) for x in stdin.readline().split()]\nif abs(a[2] - a[3]) > 1:\n    print(-1)\nelse:\n    tem, tem2 = ['4'], ['7']\n    four, seven = 1, 0\n    four2, seven2 = 0, 1\n    for i in range(a[2] + a[3]):\n        if i & 1:\n            tem.append('4')\n            tem2.append('7')\n            four += 1\n            seven2 += 1\n        else:\n            tem.append('7')\n            tem2.append('4')\n            four2 += 1\n            seven += 1\n\n    if (four > a[0] or seven > a[1]) and (four2 > a[0] or seven2 > a[1]):\n        print(-1)\n    else:\n        if (four > a[0] or seven > a[1]) or a[2] < a[3]:\n            tem, four, seven = tem2, four2, seven2\n\n        # print(tem)\n        ext4, ext7 = '4' * (a[0] - four), '7' * (a[1] - seven)\n        if tem[-1] == '7':\n            print('%s%s%s%s' % (tem[0], ext4, ''.join(tem[1:]), ext7))\n        else:\n            print('%s%s%s%s%s' % (tem[0], ext4, ''.join(tem[1:-1]), ext7, tem[-1]))\n",
        "correct": true,
        "task_id": "0823",
        "depth": 1
    },
    {
        "description": "Polycarp is an organizer of a Berland ICPC regional event. There are n universities in Berland numbered from 1 to n. Polycarp knows all competitive programmers in the region. There are n students: the i-th student is enrolled at a university u_i and has a programming skill s_i.\n\nPolycarp has to decide on the rules now. In particular, the number of members in the team.\n\nPolycarp knows that if he chooses the size of the team to be some integer k, each university will send their k strongest (with the highest programming skill s) students in the first team, the next k strongest students in the second team and so on. If there are fewer than k students left, then the team can't be formed. Note that there might be universities that send zero teams.\n\nThe strength of the region is the total skill of the members of all present teams. If there are no teams present, then the strength is 0.\n\nHelp Polycarp to find the strength of the region for each choice of k from 1 to n.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of testcases.\n\nThe first line of each testcase contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of universities and the number of students.\n\nThe second line of each testcase contains n integers u_1, u_2, ..., u_n (1 \u2264 u_i \u2264 n) \u2014 the university the i-th student is enrolled at.\n\nThe third line of each testcase contains n integers s_1, s_2, ..., s_n (1 \u2264 s_i \u2264 10^9) \u2014 the programming skill of the i-th student.\n\nThe sum of n over all testcases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each testcase print n integers: the strength of the region \u2014 the total skill of the members of the present teams \u2014 for each choice of team size k.\n\nExample\n\nInput\n\n\n4\n7\n1 2 1 2 1 2 1\n6 8 3 1 5 1 5\n10\n1 1 1 2 2 2 2 3 3 3\n3435 3014 2241 2233 2893 2102 2286 2175 1961 2567\n6\n3 3 3 3 3 3\n5 9 6 7 9 7\n1\n1\n3083\n\n\nOutput\n\n\n29 28 26 19 0 0 0 \n24907 20705 22805 9514 0 0 0 0 0 0 \n43 43 43 32 38 43 \n3083 \n\nNote\n\nIn the first testcase the teams from each university for each k are: \n\n  * k=1: \n    * university 1: [6], [5], [5], [3]; \n    * university 2: [8], [1], [1]; \n  * k=2: \n    * university 1: [6, 5], [5, 3]; \n    * university 2: [8, 1]; \n  * k=3: \n    * university 1: [6, 5, 5]; \n    * university 2: [8, 1, 1]; \n  * k=4: \n    * university 1: [6, 5, 5, 3]; ",
        "task_name": "1519_C. Berland Regional",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\ndef main():\n    from collections import defaultdict\n    mydict = defaultdict(int)\n\n    def f(a):\n        a = sorted(a, key=lambda s: s[1], reverse=True)\n        d = defaultdict(list)\n        for i in a:\n            if d[i[0]]:\n                d[i[0]].append(d.get(i[0], 0)[-1] + i[1])\n            else:\n                d[i[0]].append(i[1])\n        ans = [0] * (len(a) + 1)\n        for val in d.keys():\n            d[val] = [0] + d[val]\n            for i in range(1, len(d[val])):\n                n = len(d[val]) - 1\n                ans[i] += d[val][(n // i) * i]\n        return ans[1:]\n\n    for i in range(int(input())):\n        a = input()\n        b = list(map(int, input().strip().split()))\n        c = list(map(int, input().strip().split()))\n        arr = list(zip(b, c))\n        print(*f(arr))\n\n######## Python 2 and 3 footer by Pajenegod and c1729\n\n# Note because cf runs old PyPy3 version which doesn't have the sped up\n# unicode strings, PyPy3 strings will many times be slower than pypy2.\n# There is a way to get around this by using binary strings in PyPy3\n# but its syntax is different which makes it kind of a mess to use.\n\n# So on cf, use PyPy2 for best string performance.\n\npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\n\nimport os, sys\nfrom io import IOBase, BytesIO\n\nBUFSIZE = 8192\nclass FastIO(BytesIO):\n    newlines = 0\n\n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n\n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0,2), super(FastIO, self).write(s))[0])\n        return s\n\n    def read(self):\n        while self._fill(): pass\n        return super(FastIO,self).read()\n\n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill(); self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s:self.buffer.write(s.encode('ascii'))\n            self.read = lambda:self.buffer.read().decode('ascii')\n            self.readline = lambda:self.buffer.readline().decode('ascii')\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# Cout implemented in Python\nimport sys\nclass ostream:\n    def __lshift__(self,a):\n        sys.stdout.write(str(a))\n        return self\ncout = ostream()\nendl = '\\n'\n\n# Read all remaining integers in stdin, type is given by optional argument, this is fast\ndef readnumbers(zero = 0):\n    conv = ord if py2 else lambda x:x\n    A = []; numb = zero; sign = 1; i = 0; s = sys.stdin.buffer.read()\n    try:\n        while True:\n            if s[i] >= b'0' [0]:\n                numb = 10 * numb + conv(s[i]) - 48\n            elif s[i] == b'-' [0]: sign = -1\n            elif s[i] != b'\\r' [0]:\n                A.append(sign*numb)\n                numb = zero; sign = 1\n            i += 1\n    except:pass\n    if s and s[-1] >= b'0' [0]:\n        A.append(sign*numb)\n    return A\n\nif __name__== \"__main__\":\n  main()",
        "correct": true,
        "task_id": "0824",
        "depth": 2
    },
    {
        "description": "AquaMoon has n friends. They stand in a row from left to right, and the i-th friend from the left wears a T-shirt with a number a_i written on it. Each friend has a direction (left or right). In the beginning, the direction of each friend is right.\n\nAquaMoon can make some operations on friends. On each operation, AquaMoon can choose two adjacent friends and swap their positions. After each operation, the direction of both chosen friends will also be flipped: left to right and vice versa.\n\nAquaMoon hopes that after some operations, the numbers written on the T-shirt of n friends in the row, read from left to right, become non-decreasing. Also she wants, that all friends will have a direction of right at the end. Please find if it is possible.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 \u2264 t \u2264 50) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of Aquamoon's friends.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^5) \u2014 the numbers, written on the T-shirts.\n\nIt is guaranteed that the sum of n for all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case, if there exists a possible sequence of operations, print \"YES\" (without quotes); otherwise, print \"NO\" (without quotes).\n\nYou can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n3\n4\n4 3 2 5\n4\n3 3 2 2\n5\n1 2 3 5 4\n\n\nOutput\n\n\nYES\nYES\nNO\n\nNote\n\nThe possible list of operations in the first test case:\n\n  1. Swap a_1 and a_2. The resulting sequence is 3, 4, 2, 5. The directions are: left, left, right, right. \n  2. Swap a_2 and a_3. The resulting sequence is 3, 2, 4, 5. The directions are: left, left, right, right. \n  3. Swap a_1 and a_2. The resulting sequence is 2, 3, 4, 5. The directions are: right, right, right, right. ",
        "task_name": "1546_C. AquaMoon and Strange Sort",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin,stdout\n\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    a = list(map(int,stdin.readline().split()))\n    b = sorted(a)\n    c = [[0,0] for i in range(100005)]\n    for i in range(n):\n        c[a[i]][i%2]+=1\n        c[b[i]][i%2]-=1\n    check = True\n    for i in range(n):\n        if c[a[i]][0]==0 and c[a[i]][1]==0:\n            check = False\n        else:\n            check = True\n            break\n    if not check:\n        stdout.write(\"YES\\n\")\n    else:\n        stdout.write(\"NO\\n\")",
        "correct": true,
        "task_id": "0825",
        "depth": 2
    },
    {
        "description": "John Doe has a list of all Fibonacci numbers modulo 1013. This list is infinite, it starts with numbers 0 and 1. Each number in the list, apart from the first two, is a sum of previous two modulo 1013. That is, John's list is made from the Fibonacci numbers' list by replacing each number there by the remainder when divided by 1013. \n\nJohn got interested in number f (0 \u2264 f < 1013) and now wants to find its first occurrence in the list given above. Help John and find the number of the first occurence of number f in the list or otherwise state that number f does not occur in the list. \n\nThe numeration in John's list starts from zero. There, the 0-th position is the number 0, the 1-st position is the number 1, the 2-nd position is the number 1, the 3-rd position is the number 2, the 4-th position is the number 3 and so on. Thus, the beginning of the list looks like this: 0, 1, 1, 2, 3, 5, 8, 13, 21, ...\n\nInput\n\nThe first line contains the single integer f (0 \u2264 f < 1013) \u2014 the number, which position in the list we should find.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier. \n\nOutput\n\nPrint a single number \u2014 the number of the first occurrence of the given number in John's list. If this number doesn't occur in John's list, print -1.\n\nExamples\n\nInput\n\n13\n\n\nOutput\n\n7\n\n\nInput\n\n377\n\n\nOutput\n\n14",
        "task_name": "193_E. Fibonacci Number",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#Finds the fibonacci number, mod 10**13\n#http://codeforces.com/problemset/problem/193/E\n\ndef test(goal):\n    fib=[0,1]\n    if goal==0:\n        return 0\n    if goal==1:\n        return 1\n    while goal not in fib and fib[-1]<10**13:\n        fib.append(fib[-2]+fib[-1])\n    if fib[-1]>=10**13:\n        return -1\n    return fib.index(goal)\n        \n\nprint(test(int(input())))\n\n",
        "correct": false,
        "task_id": "0826",
        "depth": 1
    },
    {
        "description": "You are given a square matrix consisting of n rows and n columns. We assume that the rows are numbered from 1 to n from top to bottom and the columns are numbered from 1 to n from left to right. Some cells (n - 1 cells in total) of the the matrix are filled with ones, the remaining cells are filled with zeros. We can apply the following operations to the matrix:\n\n  1. Swap i-th and j-th rows of the matrix; \n  2. Swap i-th and j-th columns of the matrix. \n\n\n\nYou are asked to transform the matrix into a special form using these operations. In that special form all the ones must be in the cells that lie below the main diagonal. Cell of the matrix, which is located on the intersection of the i-th row and of the j-th column, lies below the main diagonal if i > j.\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 1000) \u2014 the number of rows and columns. Then follow n - 1 lines that contain one's positions, one per line. Each position is described by two integers xk, yk (1 \u2264 xk, yk \u2264 n), separated by a space. A pair (xk, yk) means that the cell, which is located on the intersection of the xk-th row and of the yk-th column, contains one.\n\nIt is guaranteed that all positions are distinct.\n\nOutput\n\nPrint the description of your actions. These actions should transform the matrix to the described special form.\n\nIn the first line you should print a non-negative integer m (m \u2264 105) \u2014 the number of actions. In each of the next m lines print three space-separated integers t, i, j (1 \u2264 t \u2264 2, 1 \u2264 i, j \u2264 n, i \u2260 j), where t = 1 if you want to swap rows, t = 2 if you want to swap columns, and i and j denote the numbers of rows or columns respectively.\n\nPlease note, that you do not need to minimize the number of operations, but their number should not exceed 105. If there are several solutions, you may print any of them.\n\nExamples\n\nInput\n\n2\n1 2\n\n\nOutput\n\n2\n2 1 2\n1 1 2\n\n\nInput\n\n3\n3 1\n1 3\n\n\nOutput\n\n3\n2 2 3\n1 1 3\n1 1 2\n\n\nInput\n\n3\n2 1\n3 2\n\n\nOutput\n\n0",
        "task_name": "266_C. Below the Diagonal",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function, division\n\ncounts = []\ndef swap(n, i, j):\n    if i == j:\n        return\n    global counts\n    global s\n    counts.append((n, i, j))\n    if n == 1:\n        s[i], s[j] = s[j], s[i]\n        return\n    for k in range(1, len(s)):\n        s[k][i], s[k][j] = s[k][j], s[k][i]\n\nn = input()\ns = [[0 for i in xrange(n+1)] for i in xrange(n+1)]\n\n\n\nwhile True:\n    try:\n        i, j = map(int, raw_input().split())\n    except:\n        break\n    s[i][j] = 1\n\n\nbegin = 1\n\nfor i in range(1, n+1):\n    if s[i].count(1) < begin:\n        swap(1, i, begin)\n        begin += 1\n\nfor i in range(n, 1, -1):\n    if s[i][i]:\n        swap(2, i, i-1)\n\n\n\nprint(len(counts))\nfor i in counts:\n    print(*i)\n\n",
        "correct": false,
        "task_id": "0827",
        "depth": 1
    },
    {
        "description": "During the last Sereja's Codesecrof round the server crashed many times, so the round was decided to be made unrated for some participants. \n\nLet's assume that n people took part in the contest. Let's assume that the participant who got the first place has rating a1, the second place participant has rating a2, ..., the n-th place participant has rating an. Then changing the rating on the Codesecrof site is calculated by the formula <image>.\n\nAfter the round was over, the Codesecrof management published the participants' results table. They decided that if for a participant di < k, then the round can be considered unrated for him. But imagine the management's surprise when they found out that the participants' rating table is dynamic. In other words, when some participant is removed from the rating, he is removed from the results' table and the rating is recalculated according to the new table. And of course, all applications for exclusion from the rating are considered in view of the current table.\n\nWe know that among all the applications for exclusion from the rating the first application to consider is from the participant with the best rank (the rank with the minimum number), for who di < k. We also know that the applications for exclusion from rating were submitted by all participants.\n\nNow Sereja wonders, what is the number of participants to be excluded from the contest rating, and the numbers of the participants in the original table in the order of their exclusion from the rating. Pay attention to the analysis of the first test case for a better understanding of the statement.\n\nInput\n\nThe first line contains two integers n, k (1 \u2264 n \u2264 2\u00b7105, - 109 \u2264 k \u2264 0). The second line contains n space-separated integers a1, a2, ..., an (1 \u2264 ai \u2264 109) \u2014 ratings of the participants in the initial table.\n\nOutput\n\nPrint the numbers of participants in the order in which they were removed from the table. Print the initial numbers of the participants, that is, the numbers that the participants had in the initial table.\n\nExamples\n\nInput\n\n5 0\n5 3 4 1 2\n\n\nOutput\n\n2\n3\n4\n\n\nInput\n\n10 -10\n5 5 1 7 5 1 2 4 9 2\n\n\nOutput\n\n2\n4\n5\n7\n8\n9\n\nNote\n\nConsider the first test sample. \n\n  1. Initially the sequence of the contest participants' ratings equals [5, 3, 4, 1, 2]. You can use this sequence to calculate the sequence of rating changes: [0, -9, -13, 8, 14]. According to the problem statement, the application of the participant who won the second place will be considered first.\n  2. As soon as the second place winner is out from the ratings, the participants' rating sequence will equal [5, 4, 1, 2]. By this sequence you can count the new sequence of rating changes: [0, -8, 2, 6]. According to the problem statement, the application of the participant who won the second place will be considered. Initially this participant won third place.\n  3. The new rating sequence equals [5, 1, 2], the new sequence of rating changes equals [0, -1, 1]. The second place participant's application is taken into consideration, initially this participant won the fourth place.\n  4. The new rating sequence equals [5, 2], the new sequence of rating changes equals [0, 0]. No more applications will be considered. \n\n\n\nThus, you should print 2, 3, 4.",
        "task_name": "315_C. Sereja and Contest",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nn, k = rints()\na, ans, s = rints(), [], 0\n\nfor i in range(1, n):\n    if s - (n - i - len(ans) - 1) * a[i] * (i - len(ans)) < k:\n        ans.append(i + 1)\n        n -= 1\n    else:\n        s += a[i] * (i - len(ans))\n\nprint('\\n'.join(map(str, ans)))\n",
        "correct": false,
        "task_id": "0828",
        "depth": 1
    },
    {
        "description": "Game \"Minesweeper 1D\" is played on a line of squares, the line's height is 1 square, the line's width is n squares. Some of the squares contain bombs. If a square doesn't contain a bomb, then it contains a number from 0 to 2 \u2014 the total number of bombs in adjacent squares.\n\nFor example, the correct field to play looks like that: 001*2***101*. The cells that are marked with \"*\" contain bombs. Note that on the correct field the numbers represent the number of bombs in adjacent cells. For example, field 2* is not correct, because cell with value 2 must have two adjacent cells with bombs.\n\nValera wants to make a correct field to play \"Minesweeper 1D\". He has already painted a squared field with width of n cells, put several bombs on the field and wrote numbers into some cells. Now he wonders how many ways to fill the remaining cells with bombs and numbers are there if we should get a correct field in the end.\n\nInput\n\nThe first line contains sequence of characters without spaces s1s2... sn (1 \u2264 n \u2264 106), containing only characters \"*\", \"?\" and digits \"0\", \"1\" or \"2\". If character si equals \"*\", then the i-th cell of the field contains a bomb. If character si equals \"?\", then Valera hasn't yet decided what to put in the i-th cell. Character si, that is equal to a digit, represents the digit written in the i-th square.\n\nOutput\n\nPrint a single integer \u2014 the number of ways Valera can fill the empty cells and get a correct field.\n\nAs the answer can be rather large, print it modulo 1000000007 (109 + 7).\n\nExamples\n\nInput\n\n?01???\n\n\nOutput\n\n4\n\n\nInput\n\n?\n\n\nOutput\n\n2\n\n\nInput\n\n**12\n\n\nOutput\n\n0\n\n\nInput\n\n1\n\n\nOutput\n\n0\n\nNote\n\nIn the first test sample you can get the following correct fields: 001**1, 001***, 001*2*, 001*10.",
        "task_name": "404_D. Minesweeper 1D",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# zero, one_used, one_unused, two, mine\nt = None\n\nline = raw_input()\n\nbig_prime = 1000000007\n\nfor c in line:\n    if t is None:\n        zero = 1\n        one_used = 0\n        one_unused = 1\n        two = 0\n        mine = 1\n    else:\n        zero = (t[0] + t[1]) % big_prime\n        one_used = t[4]\n        one_unused = (t[0] + t[1]) % big_prime\n        two = t[4]\n        mine = (t[2] + t[3] + t[4]) % big_prime\n\n    if c == '0':\n        t = (zero, 0, 0, 0, 0)\n    if c == '1':\n        t = (0, one_used, one_unused, 0, 0)\n    if c == '2':\n        t = (0, 0, 0, two, 0)\n    if c == '*':\n        t = (0, 0, 0, 0, mine)\n    if c == '?':\n        t = (zero, one_used, one_unused, two, mine)\n    # print t\n\nprint (t[0] + t[1] + t[4]) % big_prime\n\n",
        "correct": true,
        "task_id": "0829",
        "depth": 1
    },
    {
        "description": "One day, Twilight Sparkle is interested in how to sort a sequence of integers a1, a2, ..., an in non-decreasing order. Being a young unicorn, the only operation she can perform is a unit shift. That is, she can move the last element of the sequence to its beginning:\n\na1, a2, ..., an \u2192 an, a1, a2, ..., an - 1.\n\nHelp Twilight Sparkle to calculate: what is the minimum number of operations that she needs to sort the sequence?\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 105). The second line contains n integer numbers a1, a2, ..., an (1 \u2264 ai \u2264 105).\n\nOutput\n\nIf it's impossible to sort the sequence output -1. Otherwise output the minimum number of operations Twilight Sparkle needs to sort it.\n\nExamples\n\nInput\n\n2\n2 1\n\n\nOutput\n\n1\n\n\nInput\n\n3\n1 3 2\n\n\nOutput\n\n-1\n\n\nInput\n\n2\n1 2\n\n\nOutput\n\n0",
        "task_name": "454_B. Little Pony and Sort by Shift",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, a, s, j = input(), map(int, raw_input().split()), 0, 0\nfor i in xrange(n-1):\n    if a[i] > a[i+1]:\n        s, j = s+1, n-i-1\n        if s > 1:\n            print -1\n            break\nelse:\n    print -1 if s and a[-1] > a[0] else j",
        "correct": true,
        "task_id": "0830",
        "depth": 1
    },
    {
        "description": "You are given a sequence of numbers a1, a2, ..., an, and a number m.\n\nCheck if it is possible to choose a non-empty subsequence aij such that the sum of numbers in this subsequence is divisible by m.\n\nInput\n\nThe first line contains two numbers, n and m (1 \u2264 n \u2264 106, 2 \u2264 m \u2264 103) \u2014 the size of the original sequence and the number such that sum should be divisible by it.\n\nThe second line contains n integers a1, a2, ..., an (0 \u2264 ai \u2264 109).\n\nOutput\n\nIn the single line print either \"YES\" (without the quotes) if there exists the sought subsequence, or \"NO\" (without the quotes), if such subsequence doesn't exist.\n\nExamples\n\nInput\n\n3 5\n1 2 3\n\n\nOutput\n\nYES\n\n\nInput\n\n1 6\n5\n\n\nOutput\n\nNO\n\n\nInput\n\n4 6\n3 1 1 3\n\n\nOutput\n\nYES\n\n\nInput\n\n6 6\n5 5 5 5 5 5\n\n\nOutput\n\nYES\n\nNote\n\nIn the first sample test you can choose numbers 2 and 3, the sum of which is divisible by 5.\n\nIn the second sample test the single non-empty subsequence of numbers is a single number 5. Number 5 is not divisible by 6, that is, the sought subsequence doesn't exist.\n\nIn the third sample test you need to choose two numbers 3 on the ends.\n\nIn the fourth sample test you can take the whole subsequence.",
        "task_name": "577_B. Modulo Sum",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"\n________        _____________              ______\n___  __ \\____  ____  __ \\__(_)__   _______ ___  /\n__  /_/ /_  / / /_  /_/ /_  /__ | / /  __ `/_  /\n_  ____/_  /_/ /_  _, _/_  / __ |/ // /_/ /_  /\n/_/     _\\__, / /_/ |_| /_/  _____/ \\__,_/ /_/\n        /____/\n\nhttps://github.com/Cheran-Senthil/PyRival\nCopyright (c) 2018 Cheran Senthilkumar\n\"\"\"\nfrom __future__ import division, print_function\n\nimport cmath\nimport itertools\nimport math\nimport operator as op\nimport sys\nfrom atexit import register\nfrom bisect import bisect_left, bisect_right\n\n# import random\n# from collections import Counter, MutableSequence, defaultdict, deque\n# from copy import deepcopy\n# from decimal import Decimal\n# from difflib import SequenceMatcher\n# from heapq import heappop, heappush\n\nif sys.version_info[0] < 3:\n    from io import BytesIO as stream\n    # from fractions import Fraction\n    # from fractions import gcd\n    # from cPickle import dumps\n    # from Queue import PriorityQueue, Queue\nelse:\n    from io import StringIO as stream\n    # from functools import reduce\n    # from fractions import Fraction\n    # from math import gcd\n    # from pickle import dumps\n    # from queue import PriorityQueue, Queue\n\n\nif sys.version_info[0] < 3:\n    class dict(dict):\n        def items(self):\n            return dict.iteritems(self)\n\n        def keys(self):\n            return dict.iterkeys(self)\n\n        def values(self):\n            return dict.itervalues(self)\n\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\n\ndef sync_with_stdio(sync=True):\n    \"\"\"\n    Sets whether the standard Python streams are allowed to buffer their I/O.\n\n    Parameters\n    ----------\n    sync : bool, optional\n        The new synchronization setting. Default is True.\n    \"\"\"\n    global input, flush\n\n    if sync:\n        flush = sys.stdout.flush\n    else:\n        sys.stdin = stream(sys.stdin.read())\n        input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n        sys.stdout = stream()\n        register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n\n\ndef main():\n    n, m = map(int, input().split(' '))\n    if n > m:\n        print('YES')\n    else:\n        a = list(map(lambda x: int(x) % m, input().split(' ')))\n        dp = [[False] * m for _ in range(n)]\n        dp[0][a[0]] = True\n        for i in range(1, n):\n            dp[i][a[i]] = True\n            for j, flag in enumerate(dp[i - 1]):\n                if flag:\n                    dp[i][j] = True\n                    dp[i][(j + a[i]) % m] = True\n\n        if dp[-1][0]:\n            print('YES')\n        else:\n            print('NO')\n\n\nif __name__ == '__main__':\n    sys.setrecursionlimit(10000)\n    sync_with_stdio(False)\n    main()\n",
        "correct": true,
        "task_id": "0832",
        "depth": 2
    },
    {
        "description": "Heidi has finally found the mythical Tree of Life \u2013 a legendary combinatorial structure which is said to contain a prophecy crucially needed to defeat the undead armies.\n\nOn the surface, the Tree of Life is just a regular undirected tree well-known from computer science. This means that it is a collection of n points (called vertices), some of which are connected using n - 1 line segments (edges) so that each pair of vertices is connected by a path (a sequence of one or more edges).\n\nTo decipher the prophecy, Heidi needs to perform a number of steps. The first is counting the number of lifelines in the tree \u2013 these are paths of length 2, i.e., consisting of two edges. Help her!\n\nInput\n\nThe first line of the input contains a single integer n \u2013 the number of vertices in the tree (1 \u2264 n \u2264 10000). The vertices are labeled with the numbers from 1 to n. Then n - 1 lines follow, each describing one edge using two space-separated numbers a b \u2013 the labels of the vertices connected by the edge (1 \u2264 a < b \u2264 n). It is guaranteed that the input represents a tree.\n\nOutput\n\nPrint one integer \u2013 the number of lifelines in the tree.\n\nExamples\n\nInput\n\n4\n1 2\n1 3\n1 4\n\n\nOutput\n\n3\n\nInput\n\n5\n1 2\n2 3\n3 4\n3 5\n\n\nOutput\n\n4\n\nNote\n\nIn the second sample, there are four lifelines: paths between vertices 1 and 3, 2 and 4, 2 and 5, and 4 and 5.",
        "task_name": "690_F1. Tree of Life (easy)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nt = 0\nT = 0\na = None\nb = None\nd = set()\nfor line in sys.stdin:\n\tline = line.strip()\n\tif t == 0: \n\t\tT = int(line)\n\t\ta = [0]*(T+1)\n\t\tb = [0]*(T+1)\n\telif line:\n\t\ti,j = [int(item) for item in line.split()]\n\t\td.add((i,j))\n\t\ta[i] += 1\n\t\ta[j] += 1\n\telse:\n\t\tbreak\n\tt += 1\nfor i,j in d:\n\tb[j] += a[i]\n\tb[i] += a[j]\nprint (sum(b)-sum(a)) /2\n\n\n\n",
        "correct": true,
        "task_id": "0834",
        "depth": 1
    },
    {
        "description": "Petya has n integers: 1, 2, 3, ..., n. He wants to split these integers in two non-empty groups in such a way that the absolute difference of sums of integers in each group is as small as possible. \n\nHelp Petya to split the integers. Each of n integers should be exactly in one group.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 60 000) \u2014 the number of integers Petya has.\n\nOutput\n\nPrint the smallest possible absolute difference in the first line.\n\nIn the second line print the size of the first group, followed by the integers in that group. You can print these integers in arbitrary order. If there are multiple answers, print any of them.\n\nExamples\n\nInput\n\n4\n\n\nOutput\n\n0\n2 1 4 \n\n\nInput\n\n2\n\n\nOutput\n\n1\n1 1 \n\nNote\n\nIn the first example you have to put integers 1 and 4 in the first group, and 2 and 3 in the second. This way the sum in each group is 5, and the absolute difference is 0.\n\nIn the second example there are only two integers, and since both groups should be non-empty, you have to put one integer in the first group and one in the second. This way the absolute difference of sums of integers in each group is 1.",
        "task_name": "899_C. Dividing the numbers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function\nn = input()\narr = range(1,n+1)\nleftnums = []\nleft = 0\nright = 0\n\nif n == 2:\n    left = 1\n    right = 2\n    leftnums = [1]\nelif n == 3:\n    left = 4\n    right = 2\n    leftnums = [1, 3]\nelse :\n    for i in range(0,len(arr)/2,2):\n        left += arr[i] + arr[len(arr)-i-1]\n        leftnums.append(arr[i])\n        leftnums.append(arr[len(arr)-i-1])\n        right += arr[i+1] + arr[len(arr)-i-2]\n\nif n % 2 == 1 and n != 3:\n    right += arr[n/2]\n\nprint (abs(left-right))\nprint (len(leftnums), *leftnums)",
        "correct": false,
        "task_id": "0837",
        "depth": 1
    },
    {
        "description": "Alice and Bob begin their day with a quick game. They first choose a starting number X0 \u2265 3 and try to reach one million by the process described below. \n\nAlice goes first and then they take alternating turns. In the i-th turn, the player whose turn it is selects a prime number smaller than the current number, and announces the smallest multiple of this prime number that is not smaller than the current number.\n\nFormally, he or she selects a prime p < Xi - 1 and then finds the minimum Xi \u2265 Xi - 1 such that p divides Xi. Note that if the selected prime p already divides Xi - 1, then the number does not change.\n\nEve has witnessed the state of the game after two turns. Given X2, help her determine what is the smallest possible starting number X0. Note that the players don't necessarily play optimally. You should consider all possible game evolutions.\n\nInput\n\nThe input contains a single integer X2 (4 \u2264 X2 \u2264 106). It is guaranteed that the integer X2 is composite, that is, is not prime.\n\nOutput\n\nOutput a single integer \u2014 the minimum possible X0.\n\nExamples\n\nInput\n\n14\n\n\nOutput\n\n6\n\n\nInput\n\n20\n\n\nOutput\n\n15\n\n\nInput\n\n8192\n\n\nOutput\n\n8191\n\nNote\n\nIn the first test, the smallest possible starting number is X0 = 6. One possible course of the game is as follows: \n\n  * Alice picks prime 5 and announces X1 = 10\n  * Bob picks prime 7 and announces X2 = 14. \n\n\n\nIn the second case, let X0 = 15. \n\n  * Alice picks prime 2 and announces X1 = 16\n  * Bob picks prime 5 and announces X2 = 20. ",
        "task_name": "948_B. Primal Sport",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nfrom math import ceil\n\ndef primes_sieve(limit):\n    a = [True] * limit\n    a[0] = a[1] = False\n\n    for (i, isprime) in enumerate(a):\n        if isprime:\n            for n in range(i*i, limit, i):\n                a[n] = False\n    return a\n\ndef solution(x2):\n\tx1s = set([])\n\tfor p in primes:\n\t\tif x2%p:\n\t\t\tcontinue\n\t\tfor x1 in range(x2-p+1,x2):\n\t\t\tx1s.add(x1)\n\tx1s = list(x1s)\n\tmin_x0 = float('inf')\n\tfor x1 in x1s[1000:]:\n\t\tfor p in primes:\n\t\t\tif x1%p:\n\t\t\t\tcontinue\n\t\t\tif x1 == p:\n\t\t\t\tif x1 < 3:\n\t\t\t\t\tcontinue\n\t\t\t\tmin_x0 = min(min_x0, x1)\n\t\t\telse:\n\t\t\t\tif x1-p+1 < 3:\n\t\t\t\t\tcontinue\n\t\t\t\tmin_x0 = min(min_x0, x1-p+1)\n\treturn min_x0\n\nprimes = primes_sieve(1000001)\nx2 = int(sys.stdin.readline().strip())\nprimes = [i for i,p in enumerate(primes) if p == True and i <= x2+1]\nprint(solution(x2))\n\n",
        "correct": false,
        "task_id": "0838",
        "depth": 2
    },
    {
        "description": "In the Kingdom of AtCoder, only banknotes are used as currency. There are 10^{100}+1 kinds of banknotes, with the values of 1, 10, 10^2, 10^3, \\dots, 10^{(10^{100})}. You have come shopping at a mall and are now buying a takoyaki machine with a value of N. (Takoyaki is the name of a Japanese snack.)\n\nTo make the payment, you will choose some amount of money which is at least N and give it to the clerk. Then, the clerk gives you back the change, which is the amount of money you give minus N.\n\nWhat will be the minimum possible number of total banknotes used by you and the clerk, when both choose the combination of banknotes to minimize this count?\n\nAssume that you have sufficient numbers of banknotes, and so does the clerk.\n\nConstraints\n\n* N is an integer between 1 and 10^{1,000,000} (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\n\n\nOutput\n\nPrint the minimum possible number of total banknotes used by you and the clerk.\n\nExamples\n\nInput\n\n36\n\n\nOutput\n\n8\n\n\nInput\n\n91\n\n\nOutput\n\n3\n\n\nInput\n\n314159265358979323846264338327950288419716939937551058209749445923078164062862089986280348253421170\n\n\nOutput\n\n243",
        "task_name": "p02775 AtCoder Beginner Contest 155 - Payment",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    n = [int(i) for i in input()][::-1]\n\n    s = c = 0\n\n    for i in range(len(n)):\n        d = n[i] + c\n        c = 0\n\n        if (d > 5) or (d == 5 and i + 1 < len(n) and n[i + 1] + 1 > 5):\n            s += 10 - d\n            c = 1\n        else:\n            s += d\n\n    print(s + c)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": true,
        "task_id": "0841",
        "depth": 1
    },
    {
        "description": "Takahashi will do a tap dance. The dance is described by a string S where each character is `L`, `R`, `U`, or `D`. These characters indicate the positions on which Takahashi should step. He will follow these instructions one by one in order, starting with the first character.\n\nS is said to be easily playable if and only if it satisfies both of the following conditions:\n\n* Every character in an odd position (1-st, 3-rd, 5-th, \\ldots) is `R`, `U`, or `D`.\n* Every character in an even position (2-nd, 4-th, 6-th, \\ldots) is `L`, `U`, or `D`.\n\n\n\nYour task is to print `Yes` if S is easily playable, and `No` otherwise.\n\nConstraints\n\n* S is a string of length between 1 and 100 (inclusive).\n* Each character of S is `L`, `R`, `U`, or `D`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\n\n\nOutput\n\nPrint `Yes` if S is easily playable, and `No` otherwise.\n\nExamples\n\nInput\n\nRUDLUDR\n\n\nOutput\n\nYes\n\n\nInput\n\nDULL\n\n\nOutput\n\nNo\n\n\nInput\n\nUUUUUUUUUUUUUUU\n\n\nOutput\n\nYes\n\n\nInput\n\nULURU\n\n\nOutput\n\nNo\n\n\nInput\n\nRDULULDURURLRDULRLR\n\n\nOutput\n\nYes",
        "task_name": "p02910 AtCoder Beginner Contest 141 - Tap Dance",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s = str(raw_input())\nno_flag = False\nfor i in range(len(s)):\n  if i%2 == 0:\n    if s[i] == 'L':\n      print('No')\n      no_flag = True\n      break\n  else:\n    if s[i] == 'R':\n      print('No')\n      no_flag = True\n      break\nif no_flag == False:\n  print('Yes')",
        "correct": true,
        "task_id": "0842",
        "depth": 1
    },
    {
        "description": "There are N cards placed face down in a row. On each card, an integer 1 or 2 is written.\n\nLet A_i be the integer written on the i-th card.\n\nYour objective is to guess A_1, A_2, ..., A_N correctly.\n\nYou know the following facts:\n\n* For each i = 1, 2, ..., M, the value A_{X_i} + A_{Y_i} + Z_i is an even number.\n\n\n\nYou are a magician and can use the following magic any number of times:\n\nMagic: Choose one card and know the integer A_i written on it. The cost of using this magic is 1.\n\nWhat is the minimum cost required to determine all of A_1, A_2, ..., A_N?\n\nIt is guaranteed that there is no contradiction in given input.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* 1 \\leq X_i < Y_i \\leq N\n* 1 \\leq Z_i \\leq 100\n* The pairs (X_i, Y_i) are distinct.\n* There is no contradiction in input. (That is, there exist integers A_1, A_2, ..., A_N that satisfy the conditions.)\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nX_1 Y_1 Z_1\nX_2 Y_2 Z_2\n\\vdots\nX_M Y_M Z_M\n\n\nOutput\n\nPrint the minimum total cost required to determine all of A_1, A_2, ..., A_N.\n\nExamples\n\nInput\n\n3 1\n1 2 1\n\n\nOutput\n\n2\n\n\nInput\n\n6 5\n1 2 1\n2 3 2\n1 3 3\n4 5 4\n5 6 5\n\n\nOutput\n\n2\n\n\nInput\n\n100000 1\n1 100000 100\n\n\nOutput\n\n99999",
        "task_name": "p03045 AtCoder Beginner Contest 126 - 1 or 2",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#coding:utf-8\n# https://reiyw.com/post/union-find-tree-in-python/\nimport collections\nimport itertools\nimport operator\nclass UnionFind:\n    def __init__(self, elems=None):\n        class KeyDict(dict):\n            def __missing__(self, key):\n                self[key] = key\n                return key\n\n        self.parent = KeyDict()\n        self.rank = collections.defaultdict(int)\n\n        if elems is not None:\n            for elem in elems:\n                _, _ = self.parent[elem], self.rank[elem]\n\n    def find(self, x):\n        if self.parent[x] == x:\n            return x\n        else:\n            self.parent[x] = self.find(self.parent[x])\n            return self.parent[x]\n\n    def unite(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if self.rank[x] < self.rank[y]:\n            self.parent[x] = y\n        else:\n            self.parent[y] = x\n        if self.rank[x] == self.rank[y]:\n            self.rank[x] += 1\n\n    def are_same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def grouper(self):\n        roots = [(x, self.find(x_par)) for x, x_par in self.parent.items()]\n        root = operator.itemgetter(1)\n        for _, group in itertools.groupby(sorted(roots, key=root), root):\n            yield [x for x, _ in group]\n\nN,M=map(int,raw_input().split())\nuf=UnionFind(range(1,N+1))\nfor i in range(M):\n    x,y,z=map(int,raw_input().split())\n    uf.unite(x,y)\n\nfrom collections import defaultdict\nF=set()\nfor i in range(1,N+1):\n    F.add(uf.find(i))\nprint(len(F))    ",
        "correct": true,
        "task_id": "0843",
        "depth": 1
    },
    {
        "description": "There are N positive integers written on a blackboard: A_1, ..., A_N.\n\nSnuke can perform the following operation when all integers on the blackboard are even:\n\n* Replace each integer X on the blackboard by X divided by 2.\n\n\n\nFind the maximum possible number of operations that Snuke can perform.\n\nConstraints\n\n* 1 \\leq N \\leq 200\n* 1 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N\n\n\nOutput\n\nPrint the maximum possible number of operations that Snuke can perform.\n\nExamples\n\nInput\n\n3\n8 12 40\n\n\nOutput\n\n2\n\n\nInput\n\n4\n5 6 8 10\n\n\nOutput\n\n0\n\n\nInput\n\n6\n382253568 723152896 37802240 379425024 404894720 471526144\n\n\nOutput\n\n8",
        "task_name": "p03494 AtCoder Beginner Contest 081 - Shift only",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=int(input())\ndat = list(map(int, input().split()))\ndan = []\nfor e in dat:\n    e = str(bin(e))\n    e=list(e)\n    \n     \n                \n\n         \n           \n\n\n",
        "correct": false,
        "task_id": "0844",
        "depth": 1
    },
    {
        "description": "Hit n nails one by one at the coordinates P1 (x1, y1), P2 (x2, y2), P3 (x3, y3), ..., Pn (xn, yn) on the flat plate, and put them on the rubber band ring. Surround it with a single rubber band so that all the nails fit inside. At this time, the rubber bands must not intersect.\n\nCreate a program that reads the coordinates of the nails and outputs the number of nails that are not in contact with the rubber band when the nail is surrounded by the rubber band as described above. The rubber band shall expand and contract sufficiently. You may not hit more than one nail at the same coordinates. In addition, it is assumed that the nails covered with rubber bands are connected by a straight line, and that no more than three nails are lined up on the straight line. For example, there can be no input as shown in Figure 1. As shown in Figure 2, it is possible for nails without rubber bands to line up in a straight line.\n\n<image> | <image>\n--- | ---\nFigure 1 | Figure 2\n\n\n\nHowever, each coordinate value is a real number between -1000.0 and 1000.0. Also, n is an integer between 3 and 100.\n\nHint\n\nBelow is a diagram for the second sample input.\n\n<image>\n---\n\n\n\nInput\n\nGiven multiple datasets. Each dataset is given in the following format:\n\n\nn\nx1, y1\nx2, y2\n...\n...\nxn, yn\n\n\nWhen n is 0, it indicates the end of input. The number of datasets does not exceed 50.\n\nOutput\n\nFor each dataset, output the number of nails that are not in contact with the rubber. For example, if there is an input representing the four nails shown in Fig. 3, it will be surrounded as shown in Fig. 4, so the number of nails that are not in contact with the rubber band is one.\n\n<image> | <image>\n--- | ---\nFigure 3 | Figure 4\n\n\nExample\n\nInput\n\n4\n1.0,0.0\n0.0,1.0\n2.0,1.0\n1.0,2.0\n9\n-509.94,892.63\n567.62,639.99\n-859.32,-64.84\n-445.99,383.69\n667.54,430.49\n551.12,828.21\n-940.2,-877.2\n-361.62,-970\n-125.42,-178.48\n0\n\n\nOutput\n\n0\n3",
        "task_name": "p00068 Enclose Pins with a Rubber Band",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom __future__ import (division, absolute_import, print_function,\n                        unicode_literals)\nfrom sys import stdin\nfrom math import copysign\n\n\ndef gradient(p):\n    def fn(t):\n        dx = p[0] - t[0]\n        dy = p[1] - t[1]\n        if dx:\n            return dy / dx\n        return copysign(float('inf'), -dy)\n    return fn\n\n\ndef solve(n):\n    L = []\n    for i in range(n):\n        L.append(tuple(float(s) for s in stdin.readline().split(',')))\n    L.sort()\n\n    p = p0 = L.pop(0)\n    while True:\n        p = max((t for t in L if t[0] >= p[0]), key=gradient(p))\n        if p == L[-1]:\n            break\n        L.remove(p)\n\n    p = p0\n    while True:\n        p = min((t for t in L if t[0] >= p[0]), key=gradient(p))\n        if p == L[-1]:\n            break\n        L.remove(p)\n\n    return len(L) - 1\n\nwhile True:\n    n = int(stdin.readline())\n    if not n:\n        break\n    print(solve(n))",
        "correct": true,
        "task_id": "0845",
        "depth": 1
    },
    {
        "description": "Let\u2019s play a stone removing game.\n\nInitially, n stones are arranged on a circle and numbered 1, ... , n clockwise (Figure 1). You are also given two numbers k and m. From this state, remove stones one by one following the rules explained below, until only one remains. In step 1, remove stone m. In step 2, locate the k-th next stone clockwise from m and remove it. In subsequent steps, start from the slot of the stone removed in the last step, make k hops clockwise on the remaining stones and remove the one you reach. In other words, skip (k - 1) remaining stones clockwise and remove the next one. Repeat this until only one stone is left and answer its number.\n\nFor example, the answer for the case n = 8, k = 5, m = 3 is 1, as shown in Figure 1.\n\n<image>\n\nFigure 1: An example game\n\nInitial state: Eight stones are arranged on a circle.\n\nStep 1: Stone 3 is removed since m = 3.\n\nStep 2: You start from the slot that was occupied by stone 3. You skip four stones 4, 5, 6 and 7 (since k = 5), and remove the next one, which is 8.\n\nStep 3: You skip stones 1, 2, 4 and 5, and thus remove 6. Note that you only count stones that are still on the circle and ignore those already removed. Stone 3 is ignored in this case.\n\nSteps 4-7: You continue until only one stone is left. Notice that in later steps when only a few stones remain, the same stone may be skipped multiple times. For example, stones 1 and 4 are skipped twice in step 7.\n\nFinal State: Finally, only one stone, 1, is on the circle. This is the final state, so the answer is 1.\n\n\n\nInput\n\nThe input consists of multiple datasets each of which is formatted as follows.\n\n\nn k m\n\n\nThe last dataset is followed by a line containing three zeros. Numbers in a line are separated by a single space. A dataset satisfies the following conditions.\n\n2 \u2264 n \u2264 10000, 1 \u2264 k \u2264 10000, 1 \u2264 m \u2264 n\n\nThe number of datasets is less than 100.\n\nOutput\n\nFor each dataset, output a line containing the stone number left in the final state. No extra characters such as spaces should appear in the output.\n\nExample\n\nInput\n\n8 5 3\n100 9999 98\n10000 10000 10000\n0 0 0\n\n\nOutput\n\n1\n93\n2019",
        "task_name": "p00854 And Then There Was One",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n\nimport sys\nimport math\nimport itertools as it\nfrom collections import deque\n\nsys.setrecursionlimit(10000000)\n\nwhile True:\n    n, k, m = map(int, raw_input().split())\n    if n == 0:\n        break\n\n    pos = 0\n    for num in range(1, n):\n        pos += k\n        pos %= num\n    ans = (m + pos) % n + 1\n    \n",
        "correct": false,
        "task_id": "0847",
        "depth": 2
    },
    {
        "description": "Palo Alto is an unusual city because it is an endless coordinate line. It is also known for the office of Lyft Level 5.\n\nLyft has become so popular so that it is now used by all m taxi drivers in the city, who every day transport the rest of the city residents \u2014 n riders.\n\nEach resident (including taxi drivers) of Palo-Alto lives in its unique location (there is no such pair of residents that their coordinates are the same).\n\nThe Lyft system is very clever: when a rider calls a taxi, his call does not go to all taxi drivers, but only to the one that is the closest to that person. If there are multiple ones with the same distance, then to taxi driver with a smaller coordinate is selected.\n\nBut one morning the taxi drivers wondered: how many riders are there that would call the given taxi driver if they were the first to order a taxi on that day? In other words, you need to find for each taxi driver i the number a_{i} \u2014 the number of riders that would call the i-th taxi driver when all drivers and riders are at their home?\n\nThe taxi driver can neither transport himself nor other taxi drivers.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n,m \u2264 10^5) \u2014 number of riders and taxi drivers.\n\nThe second line contains n + m integers x_1, x_2, \u2026, x_{n+m} (1 \u2264 x_1 < x_2 < \u2026 < x_{n+m} \u2264 10^9), where x_i is the coordinate where the i-th resident lives. \n\nThe third line contains n + m integers t_1, t_2, \u2026, t_{n+m} (0 \u2264 t_i \u2264 1). If t_i = 1, then the i-th resident is a taxi driver, otherwise t_i = 0.\n\nIt is guaranteed that the number of i such that t_i = 1 is equal to m.\n\nOutput\n\nPrint m integers a_1, a_2, \u2026, a_{m}, where a_i is the answer for the i-th taxi driver. The taxi driver has the number i if among all the taxi drivers he lives in the i-th smallest coordinate (see examples for better understanding).\n\nExamples\n\nInput\n\n3 1\n1 2 3 10\n0 0 1 0\n\n\nOutput\n\n3 \n\nInput\n\n3 2\n2 3 4 5 6\n1 0 0 0 1\n\n\nOutput\n\n2 1 \n\nInput\n\n1 4\n2 4 6 10 15\n1 1 1 1 0\n\n\nOutput\n\n0 0 0 1 \n\nNote\n\nIn the first example, we have only one taxi driver, which means an order from any of n riders will go to him.\n\nIn the second example, the first taxi driver lives at the point with the coordinate 2, and the second one lives at the point with the coordinate 6. Obviously, the nearest taxi driver to the rider who lives on the 3 coordinate is the first one, and to the rider who lives on the coordinate 5 is the second one. The rider who lives on the 4 coordinate has the same distance to the first and the second taxi drivers, but since the first taxi driver has a smaller coordinate, the call from this rider will go to the first taxi driver.\n\nIn the third example, we have one rider and the taxi driver nearest to him is the fourth one.",
        "task_name": "1075_B. Taxi drivers and Lyft",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function\nfrom sys import stdin\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nn, m = rints()\na, t, mem, ans = rints(), rints(), [], [0] * m\n\nfor i in range(n + m - 1, -1, -1):\n    if t[i]:\n        mem.append(a[i])\n\ncur, l = mem.pop(), 0\n\nfor i in range(n + m):\n    if not t[i]:\n        while mem:\n            if abs(cur - a[i]) > abs(mem[-1] - a[i]):\n                cur = mem.pop()\n                l += 1\n            else:\n                break\n        ans[l] += 1\n\nprint(' '.join(map(str, ans)))\n",
        "correct": true,
        "task_id": "0850",
        "depth": 2
    },
    {
        "description": "You are given an angle ang. \n\nThe Jury asks You to find such regular n-gon (regular polygon with n vertices) that it has three vertices a, b and c (they can be non-consecutive) with \\angle{abc} = ang or report that there is no such n-gon.\n\n<image>\n\nIf there are several answers, print the minimal one. It is guarantied that if answer exists then it doesn't exceed 998244353.\n\nInput\n\nThe first line contains single integer T (1 \u2264 T \u2264 180) \u2014 the number of queries. \n\nEach of the next T lines contains one integer ang (1 \u2264 ang < 180) \u2014 the angle measured in degrees. \n\nOutput\n\nFor each query print single integer n (3 \u2264 n \u2264 998244353) \u2014 minimal possible number of vertices in the regular n-gon or -1 if there is no such n.\n\nExample\n\nInput\n\n\n4\n54\n50\n2\n178\n\n\nOutput\n\n\n10\n18\n90\n180\n\nNote\n\nThe answer for the first query is on the picture above.\n\nThe answer for the second query is reached on a regular 18-gon. For example, \\angle{v_2 v_1 v_6} = 50^{\\circ}.\n\nThe example angle for the third query is \\angle{v_{11} v_{10} v_{12}} = 2^{\\circ}.\n\nIn the fourth query, minimal possible n is 180 (not 90).",
        "task_name": "1096_C. Polygon for the Angle",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = input()\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ndef solve(s):\n    i = gcd(180, s)\n    k = s / i\n    n = 180 /i\n    # print(n, k)\n    if (n <= (k + 2)):\n        n = n * 2\n    print(n)\nfor _ in range(n):\n    s = input()\n    solve(s)\n",
        "correct": false,
        "task_id": "0851",
        "depth": 1
    },
    {
        "description": "Heidi and Doctor Who hopped out of the TARDIS and found themselves at EPFL in 2018. They were surrounded by stormtroopers and Darth Vader was approaching. Miraculously, they managed to escape to a nearby rebel base but the Doctor was very confused. Heidi reminded him that last year's HC2 theme was Star Wars. Now he understood, and he's ready to face the evils of the Empire!\n\nThe rebels have s spaceships, each with a certain attacking power a.\n\nThey want to send their spaceships to destroy the empire bases and steal enough gold and supplies in order to keep the rebellion alive.\n\nThe empire has b bases, each with a certain defensive power d, and a certain amount of gold g.\n\nA spaceship can attack all the bases which have a defensive power less than or equal to its attacking power.\n\nIf a spaceship attacks a base, it steals all the gold in that base.\n\nThe rebels are still undecided which spaceship to send out first, so they asked for the Doctor's help. They would like to know, for each spaceship, the maximum amount of gold it can steal.\n\nInput\n\nThe first line contains integers s and b (1 \u2264 s, b \u2264 10^5), the number of spaceships and the number of bases, respectively.\n\nThe second line contains s integers a (0 \u2264 a \u2264 10^9), the attacking power of each spaceship.\n\nThe next b lines contain integers d, g (0 \u2264 d \u2264 10^9, 0 \u2264 g \u2264 10^4), the defensive power and the gold of each base, respectively.\n\nOutput\n\nPrint s integers, the maximum amount of gold each spaceship can steal, in the same order as the spaceships are given in the input.\n\nExample\n\nInput\n\n\n5 4\n1 3 5 2 4\n0 1\n4 2\n2 8\n9 4\n\n\nOutput\n\n\n1 9 11 9 11\n\nNote\n\nThe first spaceship can only attack the first base.\n\nThe second spaceship can attack the first and third bases.\n\nThe third spaceship can attack the first, second and third bases.",
        "task_name": "1184_B1. The Doctor Meets Vader (Easy)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"                         \nBeautiful is better than ugly.\n    Explicit is better than implicit.\nSimple is better than complex.\n    Complex is better than complicated.\nFlat is better than nested.\n    Sparse is better than dense.\n                    \n    * Readability counts *\n\n // Author : raj1307 - Raj Singh\n // Date   : 7.07.19\n\n\"\"\"\n\nfrom __future__ import division, print_function\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    _str = str\n    str = lambda x=b\"\": x if type(x) is bytes else _str(x).encode()\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial,pow,pi\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n#from itertools import permutations\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod,MOD=1000000007,998244353\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [i for i in str(n)]\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p1\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n# For getting input from input.txt file \n#sys.stdin = open('input.txt', 'r')  \n  \n# Printing the Output to output.txt file \n#sys.stdout = open('output.txt', 'w') \n\n    \n\ndef main():\n    \n    \n    n,m=mi()\n    \n    s=li()\n    \n    l=[]\n    d={}\n    a=[]\n    \n    for i in range(n):\n        a.append(s[i])\n    \n    a.sort()\n    \n    for i in range(n):\n        d[a[i]]=0\n    \n    \n    \n    \n    for i in range(m):\n        l.append(li())\n        \n    l=sort2(l)\n    \n    c=0\n    i=0\n    j=0\n    \n    \n    while(j<m and i<n):\n    \n        if a[i]>=l[j][0]:\n            c+=l[j][1]\n            j+=1\n          \n        else:\n            \n            d[a[i]]=c\n            i+=1\n    \n    \n    if i!=n:\n        for j in range(i,n):\n            d[a[i]]=c\n    \n    \n    \n    for i in range(n):\n        print(d[s[i]],end=' ')\n    \n    \n    \n    \n    \n\n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        if self.buffer.tell():\n            return self.buffer.read()\n        return os.read(self._fd, os.fstat(self._fd).st_size)\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", b\" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", b\"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nsys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(b\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n    #dmain()",
        "correct": false,
        "task_id": "0853",
        "depth": 1
    },
    {
        "description": "You are given two binary strings x and y, which are binary representations of some two integers (let's denote these integers as f(x) and f(y)). You can choose any integer k \u2265 0, calculate the expression s_k = f(x) + f(y) \u22c5 2^k and write the binary representation of s_k in reverse order (let's denote it as rev_k). For example, let x = 1010 and y = 11; you've chosen k = 1 and, since 2^1 = 10_2, so s_k = 1010_2 + 11_2 \u22c5 10_2 = 10000_2 and rev_k = 00001.\n\nFor given x and y, you need to choose such k that rev_k is lexicographically minimal (read notes if you don't know what does \"lexicographically\" means).\n\nIt's guaranteed that, with given constraints, k exists and is finite.\n\nInput\n\nThe first line contains a single integer T (1 \u2264 T \u2264 100) \u2014 the number of queries.\n\nNext 2T lines contain a description of queries: two lines per query. The first line contains one binary string x, consisting of no more than 10^5 characters. Each character is either 0 or 1.\n\nThe second line contains one binary string y, consisting of no more than 10^5 characters. Each character is either 0 or 1.\n\nIt's guaranteed, that 1 \u2264 f(y) \u2264 f(x) (where f(x) is the integer represented by x, and f(y) is the integer represented by y), both representations don't have any leading zeroes, the total length of x over all queries doesn't exceed 10^5, and the total length of y over all queries doesn't exceed 10^5.\n\nOutput\n\nPrint T integers (one per query). For each query print such k that rev_k is lexicographically minimal.\n\nExample\n\nInput\n\n\n4\n1010\n11\n10001\n110\n1\n1\n1010101010101\n11110000\n\n\nOutput\n\n\n1\n3\n0\n0\n\nNote\n\nThe first query was described in the legend.\n\nIn the second query, it's optimal to choose k = 3. The 2^3 = 1000_2 so s_3 = 10001_2 + 110_2 \u22c5 1000_2 = 10001 + 110000 = 1000001 and rev_3 = 1000001. For example, if k = 0, then s_0 = 10111 and rev_0 = 11101, but rev_3 = 1000001 is lexicographically smaller than rev_0 = 11101.\n\nIn the third query s_0 = 10 and rev_0 = 01. For example, s_2 = 101 and rev_2 = 101. And 01 is lexicographically smaller than 101.\n\nThe quote from Wikipedia: \"To determine which of two strings of characters comes when arranging in lexicographical order, their first letters are compared. If they differ, then the string whose first letter comes earlier in the alphabet comes before the other string. If the first letters are the same, then the second letters are compared, and so on. If a position is reached where one string has no more letters to compare while the other does, then the first (shorter) string is deemed to come first in alphabetical order.\"",
        "task_name": "1202_A. You Are Given Two Binary Strings...",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import fileinput\ndef D(a):print(a)\ndef S(s,I):return int(s.split(\" \")[I])\ndef main():\n    z=0\n    x=0\n    for l in fileinput.input():\n        z+=1\n        if(z<2):continue\n        if(z%2==0):\n            x=\"\".join(reversed(l[:-1]))\n            continue;\n        y=\"\".join(reversed(l[:-1]))\n        I=0\n        while(y[I]=='0'):I+=1\n        J=I\n        while(x[I]=='0'):I+=1\n        D(I-J)\nmain()\n",
        "correct": true,
        "task_id": "0854",
        "depth": 2
    },
    {
        "description": "Tomorrow is a difficult day for Polycarp: he has to attend a lectures and b practical classes at the university! Since Polycarp is a diligent student, he is going to attend all of them.\n\nWhile preparing for the university, Polycarp wonders whether he can take enough writing implements to write all of the lectures and draw everything he has to during all of the practical classes. Polycarp writes lectures using a pen (he can't use a pencil to write lectures!); he can write down c lectures using one pen, and after that it runs out of ink. During practical classes Polycarp draws blueprints with a pencil (he can't use a pen to draw blueprints!); one pencil is enough to draw all blueprints during d practical classes, after which it is unusable.\n\nPolycarp's pencilcase can hold no more than k writing implements, so if Polycarp wants to take x pens and y pencils, they will fit in the pencilcase if and only if x + y \u2264 k.\n\nNow Polycarp wants to know how many pens and pencils should he take. Help him to determine it, or tell that his pencilcase doesn't have enough room for all the implements he needs tomorrow!\n\nNote that you don't have to minimize the number of writing implements (though their total number must not exceed k).\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases in the input. Then the test cases follow.\n\nEach test case is described by one line containing five integers a, b, c, d and k, separated by spaces (1 \u2264 a, b, c, d, k \u2264 100) \u2014 the number of lectures Polycarp has to attend, the number of practical classes Polycarp has to attend, the number of lectures which can be written down using one pen, the number of practical classes for which one pencil is enough, and the number of writing implements that can fit into Polycarp's pencilcase, respectively.\n\nIn hacks it is allowed to use only one test case in the input, so t = 1 should be satisfied.\n\nOutput\n\nFor each test case, print the answer as follows:\n\nIf the pencilcase can't hold enough writing implements to use them during all lectures and practical classes, print one integer -1. Otherwise, print two non-negative integers x and y \u2014 the number of pens and pencils Polycarp should put in his pencilcase. If there are multiple answers, print any of them. Note that you don't have to minimize the number of writing implements (though their total number must not exceed k).\n\nExample\n\nInput\n\n\n3\n7 5 4 5 8\n7 5 4 5 2\n20 53 45 26 4\n\n\nOutput\n\n\n7 1\n-1\n1 3\n\nNote\n\nThere are many different answers for the first test case; x = 7, y = 1 is only one of them. For example, x = 3, y = 1 is also correct.\n\nx = 1, y = 3 is the only correct answer for the third test case.",
        "task_name": "1244_A. Pens and Pencils",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import os\nimport sys\nimport math\n\nif __name__ == '__main__':\n    count = int(sys.stdin.readline())\n    while(count > 0):\n        str_list = sys.stdin.readline().strip(\"\\n\").split(\" \")\n        number_list = [int(str(i)) for i in str_list]\n        if(len(number_list)) < 5:\n            break\n        a = number_list[0]\n        b = number_list[1]\n        c = number_list[2]\n        d = number_list[3]\n        k = number_list[4]\n        x =int(math.ceil(a / c))\n        y = k - x\n        if(y >= int(math.ceil(b / d))):\n            print(str(x) + \" \" + str(y))\n        else:\n            print(\"-1\")\n        count = count - 1\n\t \t    \t\t\t  \t\t    \t  \t\t\t\t\t\t  \t\t",
        "correct": false,
        "task_id": "0855",
        "depth": 1
    },
    {
        "description": "The development of a text editor is a hard problem. You need to implement an extra module for brackets coloring in text.\n\nYour editor consists of a line with infinite length and cursor, which points to the current character. Please note that it points to only one of the characters (and not between a pair of characters). Thus, it points to an index character. The user can move the cursor left or right one position. If the cursor is already at the first (leftmost) position, then it does not move left.\n\nInitially, the cursor is in the first (leftmost) character.\n\nAlso, the user can write a letter or brackets (either (, or )) to the position that the cursor is currently pointing at. A new character always overwrites the old value at that position.\n\nYour editor must check, whether the current line is the correct text. Text is correct if the brackets in them form the correct bracket sequence.\n\nFormally, correct text (CT) must satisfy the following rules: \n\n  * any line without brackets is CT (the line can contain whitespaces); \n  * If the first character of the string \u2014 is (, the last \u2014 is ), and all the rest form a CT, then the whole line is a CT; \n  * two consecutively written CT is also CT. \n\n\n\nExamples of correct texts: hello(codeforces), round, ((i)(write))edi(tor)s, ( me). Examples of incorrect texts: hello)oops(, round), ((me).\n\nThe user uses special commands to work with your editor. Each command has its symbol, which must be written to execute this command.\n\nThe correspondence of commands and characters is as follows: \n\n  * L \u2014 move the cursor one character to the left (remains in place if it already points to the first character); \n  * R \u2014 move the cursor one character to the right; \n  * any lowercase Latin letter or bracket (( or )) \u2014 write the entered character to the position where the cursor is now. \n\n\n\nFor a complete understanding, take a look at the first example and its illustrations in the note below.\n\nYou are given a string containing the characters that the user entered. For the brackets coloring module's work, after each command you need to:\n\n  * check if the current text in the editor is a correct text; \n  * if it is, print the least number of colors that required, to color all brackets. \n\n\n\nIf two pairs of brackets are nested (the first in the second or vice versa), then these pairs of brackets should be painted in different colors. If two pairs of brackets are not nested, then they can be painted in different or the same colors. For example, for the bracket sequence ()(())()() the least number of colors is 2, and for the bracket sequence (()(()())())(()) \u2014 is 3.\n\nWrite a program that prints the minimal number of colors after processing each command.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^6) \u2014 the number of commands. \n\nThe second line contains s \u2014 a sequence of commands. The string s consists of n characters. It is guaranteed that all characters in a string are valid commands.\n\nOutput\n\nIn a single line print n integers, where the i-th number is:\n\n  * -1 if the line received after processing the first i commands is not valid text, \n  * the minimal number of colors in the case of the correct text. \n\nExamples\n\nInput\n\n\n11\n(RaRbR)L)L(\n\n\nOutput\n\n\n-1 -1 -1 -1 -1 -1 1 1 -1 -1 2 \n\nInput\n\n\n11\n(R)R(R)Ra)c\n\n\nOutput\n\n\n-1 -1 1 1 -1 -1 1 1 1 -1 1 \n\nNote\n\nIn the first example, the text in the editor will take the following form:\n\n  1.     (  \n    ^\n\n  2.     (  \n     ^\n\n  3.     (a  \n     ^\n\n  4.     (a  \n      ^\n\n  5.     (ab  \n      ^\n\n  6.     (ab  \n       ^\n\n  7.     (ab)  \n       ^\n\n  8.     (ab)  \n      ^\n\n  9.     (a))  \n      ^\n\n  10.     (a))  \n     ^\n\n  11.     (())  \n     ^",
        "task_name": "1263_E. Editor",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nn = int(input())\noperations = raw_input()\n\nans_list = []\n\noperator_map = {\n    '(':1,\n    ')':-1\n}\n\n\nleft_sum  = [0 for i in xrange(n + 2)]\nright_sum = [0 for i in xrange(n + 2)]\nleft_min = [0 for i in xrange(n + 2)]\nright_min = [0 for i in xrange(n + 2)]\nleft_max = [0 for i in xrange(n + 2)]\nright_max = [0 for i in xrange(n + 2)]\n\n# start pos is 1\ncursor_pos = 1\n# line context\ncontext = [0 for i in xrange(n + 2)]\n\nfor op in operations:\n    if op=='L':\n        cursor_pos = max(1, cursor_pos - 1)\n    elif op=='R':\n        cursor_pos += 1\n    else:\n        op_val = operator_map.get(op, 0)\n        # update current pos\n        context[cursor_pos] = op_val\n\n    # no matter cursor_pos come from left or right, cursor_pos + 1 and cursor_pos - 1 's\n    # value is freash for cursor_pos to update its value\n    left_sum[cursor_pos] = left_sum[cursor_pos-1] + context[cursor_pos]\n    right_sum[cursor_pos] = right_sum[cursor_pos+1] + right_sum[cursor_pos]\n\n    left_min[cursor_pos] =  min(left_min[cursor_pos-1] , context[cursor_pos])\n    right_min[cursor_pos] = min(right_min[cursor_pos+1] , context[cursor_pos])\n\n\n    left_max[cursor_pos] = max(left_max[cursor_pos-1] , context[cursor_pos])\n    right_max[cursor_pos] = max(right_max[cursor_pos+1] , context[cursor_pos])\n\n    ans = -1\n    if left_sum[cursor_pos] + right_sum[cursor_pos + 1] == 0 and left_min[cursor_pos] >= 0 and right_min[cursor_pos] >= 0:\n        ans = max(left_max[cursor_pos], right_max[cursor_pos])\n    ans_list.append(ans)\nprint(\" \".join(map(str, ans_list))) \n",
        "correct": false,
        "task_id": "0856",
        "depth": 1
    },
    {
        "description": "Gildong owns a bulgogi restaurant. The restaurant has a lot of customers, so many of them like to make a reservation before visiting it.\n\nGildong tries so hard to satisfy the customers that he even memorized all customers' preferred temperature ranges! Looking through the reservation list, he wants to satisfy all customers by controlling the temperature of the restaurant.\n\nThe restaurant has an air conditioner that has 3 states: off, heating, and cooling. When it's off, the restaurant's temperature remains the same. When it's heating, the temperature increases by 1 in one minute. Lastly, when it's cooling, the temperature decreases by 1 in one minute. Gildong can change the state as many times as he wants, at any integer minutes. The air conditioner is off initially.\n\nEach customer is characterized by three values: t_i \u2014 the time (in minutes) when the i-th customer visits the restaurant, l_i \u2014 the lower bound of their preferred temperature range, and h_i \u2014 the upper bound of their preferred temperature range.\n\nA customer is satisfied if the temperature is within the preferred range at the instant they visit the restaurant. Formally, the i-th customer is satisfied if and only if the temperature is between l_i and h_i (inclusive) in the t_i-th minute.\n\nGiven the initial temperature, the list of reserved customers' visit times and their preferred temperature ranges, you're going to help him find if it's possible to satisfy all customers.\n\nInput\n\nEach test contains one or more test cases. The first line contains the number of test cases q (1 \u2264 q \u2264 500). Description of the test cases follows.\n\nThe first line of each test case contains two integers n and m (1 \u2264 n \u2264 100, -10^9 \u2264 m \u2264 10^9), where n is the number of reserved customers and m is the initial temperature of the restaurant.\n\nNext, n lines follow. The i-th line of them contains three integers t_i, l_i, and h_i (1 \u2264 t_i \u2264 10^9, -10^9 \u2264 l_i \u2264 h_i \u2264 10^9), where t_i is the time when the i-th customer visits, l_i is the lower bound of their preferred temperature range, and h_i is the upper bound of their preferred temperature range. The preferred temperature ranges are inclusive.\n\nThe customers are given in non-decreasing order of their visit time, and the current time is 0.\n\nOutput\n\nFor each test case, print \"YES\" if it is possible to satisfy all customers. Otherwise, print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n4\n3 0\n5 1 2\n7 3 5\n10 -1 0\n2 12\n5 7 10\n10 16 20\n3 -100\n100 0 0\n100 -50 50\n200 100 100\n1 100\n99 -100 0\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\n\nNote\n\nIn the first case, Gildong can control the air conditioner to satisfy all customers in the following way:\n\n  * At 0-th minute, change the state to heating (the temperature is 0). \n  * At 2-nd minute, change the state to off (the temperature is 2). \n  * At 5-th minute, change the state to heating (the temperature is 2, the 1-st customer is satisfied). \n  * At 6-th minute, change the state to off (the temperature is 3). \n  * At 7-th minute, change the state to cooling (the temperature is 3, the 2-nd customer is satisfied). \n  * At 10-th minute, the temperature will be 0, which satisfies the last customer. \n\n\n\nIn the third case, Gildong can change the state to heating at 0-th minute and leave it be. Then all customers will be satisfied. Note that the 1-st customer's visit time equals the 2-nd customer's visit time.\n\nIn the second and the fourth case, Gildong has to make at least one customer unsatisfied.",
        "task_name": "1304_C. Air Conditioner",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n# Author : raj1307 - Raj Singh\n# Date   : 19.02.2020\n\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef msi(): return map(str,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n#from itertools import permutations\n#Copy 2D list  m = [x[:] for x in mark] .. Avoid Using Deepcopy\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[1] \ndef sort2(l):return sorted(l, key=getKey,reverse=True)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n\ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\n\n\ndef ncr(n,r):\n\n    return factorial(n)//(factorial(r)*factorial(n-r))\n\n\n\ndef main():\n        \n\n    for _ in range(ii()):\n    \n        n,m=mi()\n        l=[]\n        for i in range(n):\n            l.append(li())\n\n\n        l.sort()\n        f=1\n    \n\n        low=m\n        high=m\n        ini=0\n\n        for i in range(n):\n\n            t=l[i][0]\n            x=l[i][1]\n            y=l[i][2]\n            dif=t-ini\n            ini=t\n            low-=dif\n            high+=dif\n            low=max(low,x)\n            high=min(high,y)\n            if low>high:\n                f=0\n                break\n\n        \n        if f:\n            print('YES')\n        else:\n            print('NO')\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    #read()\n    main()\n    #dmain()\n\n# Comment Read()\n",
        "correct": true,
        "task_id": "0858",
        "depth": 2
    },
    {
        "description": "Phoenix has decided to become a scientist! He is currently investigating the growth of bacteria.\n\nInitially, on day 1, there is one bacterium with mass 1.\n\nEvery day, some number of bacteria will split (possibly zero or all). When a bacterium of mass m splits, it becomes two bacteria of mass m/2 each. For example, a bacterium of mass 3 can split into two bacteria of mass 1.5.\n\nAlso, every night, the mass of every bacteria will increase by one.\n\nPhoenix is wondering if it is possible for the total mass of all the bacteria to be exactly n. If it is possible, he is interested in the way to obtain that mass using the minimum possible number of nights. Help him become the best scientist!\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe first line of each test case contains an integer n (2 \u2264 n \u2264 10^9) \u2014 the sum of bacteria masses that Phoenix is interested in. \n\nOutput\n\nFor each test case, if there is no way for the bacteria to exactly achieve total mass n, print -1. Otherwise, print two lines.\n\nThe first line should contain an integer d \u2014 the minimum number of nights needed.\n\nThe next line should contain d integers, with the i-th integer representing the number of bacteria that should split on the i-th day.\n\nIf there are multiple solutions, print any.\n\nExample\n\nInput\n\n\n3\n9\n11\n2\n\n\nOutput\n\n\n3\n1 0 2 \n3\n1 1 2\n1\n0 \n\nNote\n\nIn the first test case, the following process results in bacteria with total mass 9: \n\n  * Day 1: The bacterium with mass 1 splits. There are now two bacteria with mass 0.5 each. \n  * Night 1: All bacteria's mass increases by one. There are now two bacteria with mass 1.5. \n  * Day 2: None split. \n  * Night 2: There are now two bacteria with mass 2.5. \n  * Day 3: Both bacteria split. There are now four bacteria with mass 1.25. \n  * Night 3: There are now four bacteria with mass 2.25. \n\nThe total mass is 2.25+2.25+2.25+2.25=9. It can be proved that 3 is the minimum number of nights needed. There are also other ways to obtain total mass 9 in 3 nights.\n\n \n\nIn the second test case, the following process results in bacteria with total mass 11: \n\n  * Day 1: The bacterium with mass 1 splits. There are now two bacteria with mass 0.5. \n  * Night 1: There are now two bacteria with mass 1.5. \n  * Day 2: One bacterium splits. There are now three bacteria with masses 0.75, 0.75, and 1.5. \n  * Night 2: There are now three bacteria with masses 1.75, 1.75, and 2.5. \n  * Day 3: The bacteria with mass 1.75 and the bacteria with mass 2.5 split. There are now five bacteria with masses 0.875, 0.875, 1.25, 1.25, and 1.75. \n  * Night 3: There are now five bacteria with masses 1.875, 1.875, 2.25, 2.25, and 2.75. \n\nThe total mass is 1.875+1.875+2.25+2.25+2.75=11. It can be proved that 3 is the minimum number of nights needed. There are also other ways to obtain total mass 11 in 3 nights.\n\n \n\nIn the third test case, the bacterium does not split on day 1, and then grows to mass 2 during night 1.",
        "task_name": "1348_D. Phoenix and Science",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\n''' Hey stalker :) '''\nINF = 10 ** 10\nTEST_CASES = True\nfrom collections import defaultdict, Counter\n\n\ndef main():\n    target = get_int()\n    mass = 1\n    bac = 1\n    res = []\n    while (target-mass)>=4*bac:\n        res.append(bac)\n        bac*=2\n        mass+=bac\n    if (target-mass)>2*bac:\n        first = (target-mass)//2\n        res.append(first-bac)\n        bac = first\n        mass+=bac\n    res.append((target-mass)-bac)\n    print(\" \".join(map(str, res)))\n\n\n\n\n\n\n\n''' FastIO Footer: PyRival Library, Thanks @c1729 and contributors '''\nimport os\nimport sys\nfrom bisect import bisect_left, bisect_right\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\n# else:\n#     sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nget_int = lambda: int(input())\nget_list = lambda: list(map(int, input().split()))\nif __name__ == \"__main__\":\n    if TEST_CASES:\n        [main() for _ in range(int(input()))]\n    else:\n        main()\n",
        "correct": false,
        "task_id": "0860",
        "depth": 1
    },
    {
        "description": "Lee was cleaning his house for the party when he found a messy string under the carpets. Now he'd like to make it clean accurately and in a stylish way...\n\nThe string s he found is a binary string of length n (i. e. string consists only of 0-s and 1-s).\n\nIn one move he can choose two consecutive characters s_i and s_{i+1}, and if s_i is 1 and s_{i + 1} is 0, he can erase exactly one of them (he can choose which one to erase but he can't erase both characters simultaneously). The string shrinks after erasing.\n\nLee can make an arbitrary number of moves (possibly zero) and he'd like to make the string s as clean as possible. He thinks for two different strings x and y, the shorter string is cleaner, and if they are the same length, then the lexicographically smaller string is cleaner.\n\nNow you should answer t test cases: for the i-th test case, print the cleanest possible string that Lee can get by doing some number of moves.\n\nSmall reminder: if we have two strings x and y of the same length then x is lexicographically smaller than y if there is a position i such that x_1 = y_1, x_2 = y_2,..., x_{i - 1} = y_{i - 1} and x_i < y_i.\n\nInput\n\nThe first line contains the integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. \n\nNext 2t lines contain test cases \u2014 one per two lines.\n\nThe first line of each test case contains the integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the string s.\n\nThe second line contains the binary string s. The string s is a string of length n which consists only of zeroes and ones.\n\nIt's guaranteed that sum of n over test cases doesn't exceed 10^5.\n\nOutput\n\nPrint t answers \u2014 one per test case.\n\nThe answer to the i-th test case is the cleanest string Lee can get after doing some number of moves (possibly zero).\n\nExample\n\nInput\n\n\n5\n10\n0001111111\n4\n0101\n8\n11001101\n10\n1110000000\n1\n1\n\n\nOutput\n\n\n0001111111\n001\n01\n0\n1\n\nNote\n\nIn the first test case, Lee can't perform any moves.\n\nIn the second test case, Lee should erase s_2.\n\nIn the third test case, Lee can make moves, for example, in the following order: 11001101 \u2192 1100101 \u2192 110101 \u2192 10101 \u2192 1101 \u2192 101 \u2192 01.",
        "task_name": "1369_B. AccurateLee",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Enter your code here. Read input from STDIN. Print output to STDOUT# ===============================================================================================\n# importing some useful libraries.\nfrom __future__ import division, print_function\nfrom fractions import Fraction\nimport sys\nimport os\nfrom io import BytesIO, IOBase\nfrom itertools import *\nimport bisect\nfrom heapq import *\nfrom math import ceil, floor\nfrom copy import *\nfrom collections import deque, defaultdict\nfrom collections import Counter as counter  # Counter(list)  return a dict with {key: count}\nfrom itertools import combinations  # if a = [1,2,3] then print(list(comb(a,2))) -----> [(1, 2), (1, 3), (2, 3)]\nfrom itertools import permutations as permutate\nfrom bisect import bisect_left as bl\nfrom operator import *\n# If the element is already present in the list,\n\n# the left most position where element has to be inserted is returned.\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n\n# If the element is already present in the list,\n# the right most position where element has to be inserted is returned\n\n# ==============================================================================================\n# fast I/O region\n\nBUFSIZE = 8192\nfrom sys import stderr\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n# inp = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# ===============================================================================================\n### START ITERATE RECURSION ###\nfrom types import GeneratorType\n\n\ndef iterative(f, stack=[]):\n    def wrapped_func(*args, **kwargs):\n        if stack: return f(*args, **kwargs)\n        to = f(*args, **kwargs)\n        while True:\n            if type(to) is GeneratorType:\n                stack.append(to)\n                to = next(to)\n                continue\n            stack.pop()\n            if not stack: break\n            to = stack[-1].send(to)\n        return to\n\n    return wrapped_func\n\n\n#### END ITERATE RECURSION ####\n###########################\n# Sorted list\nclass SortedList:\n    def __init__(self, iterable=[], _load=200):\n        \"\"\"Initialize sorted list instance.\"\"\"\n        values = sorted(iterable)\n        self._len = _len = len(values)\n        self._load = _load\n        self._lists = _lists = [values[i:i + _load] for i in range(0, _len, _load)]\n        self._list_lens = [len(_list) for _list in _lists]\n        self._mins = [_list[0] for _list in _lists]\n        self._fen_tree = []\n        self._rebuild = True\n\n    def _fen_build(self):\n        \"\"\"Build a fenwick tree instance.\"\"\"\n        self._fen_tree[:] = self._list_lens\n        _fen_tree = self._fen_tree\n        for i in range(len(_fen_tree)):\n            if i | i + 1 < len(_fen_tree):\n                _fen_tree[i | i + 1] += _fen_tree[i]\n        self._rebuild = False\n\n    def _fen_update(self, index, value):\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\n        if not self._rebuild:\n            _fen_tree = self._fen_tree\n            while index < len(_fen_tree):\n                _fen_tree[index] += value\n                index |= index + 1\n\n    def _fen_query(self, end):\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        x = 0\n        while end:\n            x += _fen_tree[end - 1]\n            end &= end - 1\n        return x\n\n    def _fen_findkth(self, k):\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\n        _list_lens = self._list_lens\n        if k < _list_lens[0]:\n            return 0, k\n        if k >= self._len - _list_lens[-1]:\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        idx = -1\n        for d in reversed(range(len(_fen_tree).bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\n                idx = right_idx\n                k -= _fen_tree[idx]\n        return idx + 1, k\n\n    def _delete(self, pos, idx):\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len -= 1\n        self._fen_update(pos, -1)\n        del _lists[pos][idx]\n        _list_lens[pos] -= 1\n\n        if _list_lens[pos]:\n            _mins[pos] = _lists[pos][0]\n        else:\n            del _lists[pos]\n            del _list_lens[pos]\n            del _mins[pos]\n            self._rebuild = True\n\n    def _loc_left(self, value):\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        lo, pos = -1, len(_lists) - 1\n        while lo + 1 < pos:\n            mi = (lo + pos) >> 1\n            if value <= _mins[mi]:\n                pos = mi\n            else:\n                lo = mi\n\n        if pos and value <= _lists[pos - 1][-1]:\n            pos -= 1\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value <= _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def _loc_right(self, value):\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        pos, hi = 0, len(_lists)\n        while pos + 1 < hi:\n            mi = (pos + hi) >> 1\n            if value < _mins[mi]:\n                hi = mi\n            else:\n                pos = mi\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value < _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def add(self, value):\n        \"\"\"Add `value` to sorted list.\"\"\"\n        _load = self._load\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len += 1\n        if _lists:\n            pos, idx = self._loc_right(value)\n            self._fen_update(pos, 1)\n            _list = _lists[pos]\n            _list.insert(idx, value)\n            _list_lens[pos] += 1\n            _mins[pos] = _list[0]\n            if _load + _load < len(_list):\n                _lists.insert(pos + 1, _list[_load:])\n                _list_lens.insert(pos + 1, len(_list) - _load)\n                _mins.insert(pos + 1, _list[_load])\n                _list_lens[pos] = _load\n                del _list[_load:]\n                self._rebuild = True\n        else:\n            _lists.append([value])\n            _mins.append(value)\n            _list_lens.append(1)\n            self._rebuild = True\n\n    def discard(self, value):\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_right(value)\n            if idx and _lists[pos][idx - 1] == value:\n                self._delete(pos, idx - 1)\n\n    def remove(self, value):\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\n        _len = self._len\n        self.discard(value)\n        if _len == self._len:\n            raise ValueError('{0!r} not in list'.format(value))\n\n    def pop(self, index=-1):\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        value = self._lists[pos][idx]\n        self._delete(pos, idx)\n        return value\n\n    def bisect_left(self, value):\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_left(value)\n        return self._fen_query(pos) + idx\n\n    def bisect_right(self, value):\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_right(value)\n        return self._fen_query(pos) + idx\n\n    def count(self, value):\n        \"\"\"Return number of occurrences of `value` in the sorted list.\"\"\"\n        return self.bisect_right(value) - self.bisect_left(value)\n\n    def __len__(self):\n        \"\"\"Return the size of the sorted list.\"\"\"\n        return self._len\n\n    def __getitem__(self, index):\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        return self._lists[pos][idx]\n\n    def __delitem__(self, index):\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        self._delete(pos, idx)\n\n    def __contains__(self, value):\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_left(value)\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\n        return False\n\n    def __iter__(self):\n        \"\"\"Return an iterator over the sorted list.\"\"\"\n        return (value for _list in self._lists for value in _list)\n\n    def __reversed__(self):\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\n\n    def __repr__(self):\n        \"\"\"Return string representation of sorted list.\"\"\"\n        return 'SortedList({0})'.format(list(self))\n\n\n# ===============================================================================================\n# some shortcuts\n\nmod = 1000000007\n\n\ndef testcase(t):\n    for p in range(t):\n        solve()\n\n\ndef pow(x, y, p):\n    res = 1  # Initialize result\n    x = x % p  # Update x if it is more , than or equal to p\n    if (x == 0):\n        return 0\n    while (y > 0):\n        if ((y & 1) == 1):  # If y is odd, multiply, x with result\n            res = (res * x) % p\n\n        y = y >> 1  # y = y/2\n        x = (x * x) % p\n    return res\n\n\nfrom functools import reduce\n\n\ndef factors(n):\n    return set(reduce(list.__add__,\n                      ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\n\n\ndef gcd(a, b):\n    if a == b: return a\n    while b > 0: a, b = b, a % b\n    return a\n\n\n# discrete binary search\n# minimise:\n# def search():\n#     l = 0\n#     r = 10 ** 15\n#\n#     for i in range(200):\n#         if isvalid(l):\n#             return l\n#         if l == r:\n#             return l\n#         m = (l + r) // 2\n#         if isvalid(m) and not isvalid(m - 1):\n#             return m\n#         if isvalid(m):\n#             r = m + 1\n#         else:\n#             l = m\n#     return m\n\n# maximise:\n# def search():\n#     l = 0\n#     r = 10 ** 15\n#\n#     for i in range(200):\n#         # print(l,r)\n#         if isvalid(r):\n#             return r\n#         if l == r:\n#             return l\n#         m = (l + r) // 2\n#         if isvalid(m) and not isvalid(m + 1):\n#             return m\n#         if isvalid(m):\n#             l = m\n#         else:\n#             r = m - 1\n#     return m\n\n\n##############Find sum of product of subsets of size k in a array\n# ar=[0,1,2,3]\n# k=3\n# n=len(ar)-1\n# dp=[0]*(n+1)\n# dp[0]=1\n# for pos in range(1,n+1):\n#     dp[pos]=0\n#     l=max(1,k+pos-n-1)\n#     for j in range(min(pos,k),l-1,-1):\n#         dp[j]=dp[j]+ar[pos]*dp[j-1]\n# print(dp[k])\n\ndef prefix_sum(ar):  # [1,2,3,4]->[1,3,6,10]\n    return list(accumulate(ar))\n\n\ndef suffix_sum(ar):  # [1,2,3,4]->[10,9,7,4]\n    return list(accumulate(ar[::-1]))[::-1]\n\n\ndef N():\n    return int(inp())\n\n\ndx = [0, 0, 1, -1]\ndy = [1, -1, 0, 0]\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\n# =========================================================================================\nfrom collections import defaultdict\n\n\ndef numberOfSetBits(i):\n    i = i - ((i >> 1) & 0x55555555)\n    i = (i & 0x33333333) + ((i >> 2) & 0x33333333)\n    return (((i + (i >> 4) & 0xF0F0F0F) * 0x1010101) & 0xffffffff) >> 24\n\n\nclass MergeFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n        # self.lista = [[_] for _ in range(n)]\n\n    def find(self, a):\n        to_update = []\n        while a != self.parent[a]:\n            to_update.append(a)\n            a = self.parent[a]\n        for b in to_update:\n            self.parent[b] = a\n        return self.parent[a]\n\n    def merge(self, a, b):\n        a = self.find(a)\n        b = self.find(b)\n        if a == b:\n            return\n        if self.size[a] < self.size[b]:\n            a, b = b, a\n        self.num_sets -= 1\n        self.parent[b] = a\n        self.size[a] += self.size[b]\n        # self.lista[a] += self.lista[b]\n        # self.lista[b] = []\n\n    def set_size(self, a):\n        return self.size[self.find(a)]\n\n    def __len__(self):\n        return self.num_sets\n\n\ndef lcm(a, b):\n    return abs((a // gcd(a, b)) * b)\n\n\n# #\n# to find factorial and ncr\n# tot = 100005\n# mod = 10**9 + 7\n# fac = [1, 1]\n# finv = [1, 1]\n# inv = [0, 1]\n#\n# for i in range(2, tot + 1):\n#     fac.append((fac[-1] * i) % mod)\n#     inv.append(mod - (inv[mod % i] * (mod // i) % mod))\n#     finv.append(finv[-1] * inv[-1] % mod)\n\n\ndef comb(n, r):\n    if n < r:\n        return 0\n    else:\n        return fac[n] * (finv[r] * finv[n - r] % mod) % mod\n\n\ndef inp(): return sys.stdin.readline().rstrip(\"\\r\\n\")  # for fast input\n\n\ndef out(var): sys.stdout.write(str(var))  # for fast output, always take string\n\n\ndef lis(): return list(map(int, inp().split()))\n\n\ndef stringlis(): return list(map(str, inp().split()))\n\n\ndef sep(): return map(int, inp().split())\n\n\ndef strsep(): return map(str, inp().split())\n\n\ndef fsep(): return map(float, inp().split())\n\n\ndef nextline(): out(\"\\n\")  # as stdout.write always print sring.\n\n\ndef arr1d(n, v):\n    return [v] * n\n\n\ndef arr2d(n, m, v):\n    return [[v] * m for _ in range(n)]\n\n\ndef arr3d(n, m, p, v):\n    return [[[v] * p for _ in range(m)] for i in range(n)]\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\n# co-ordinate compression\n# ma={s:idx for idx,s in enumerate(sorted(set(l+r)))}\n\n# mxn=100005\n# lrg=[0]*mxn\n# for i in range(2,mxn-3):\n#     if (lrg[i]==0):\n#         for j in range(i,mxn-3,i):\n#             lrg[j]=i\n\n\ndef solve():\n    n=N()\n    s=inp()\n    ar=[]\n    cur=\"\"\n    curl=0\n    for i in range(n):\n        if s[i]==cur:\n            curl+=1\n        else:\n            if cur!=\"\":\n                ar.append((cur,curl))\n            cur=s[i]\n            curl=1\n    if curl>0:\n        ar.append((cur,curl))\n    # print(ar)\n\n\n\n    if len(ar)==1:\n        print(s)\n        return\n\n    if len(ar)==2:\n        if s[-1]==\"1\":\n            print(s)\n            return\n        else:\n            print(\"0\")\n            return\n    if ar[0][0]==\"1\":\n        notrem=\"\"\n    else:\n        notrem=\"0\"*ar[0][1]\n\n    if ar[-1][0]==\"0\":\n        print(notrem+\"0\")\n        return\n    else:\n        print(notrem+\"0\"+\"1\"*ar[-1][1])\n        return\n\n\n\n\n#solve()\ntestcase(int(inp()))\n\n\n",
        "correct": true,
        "task_id": "0861",
        "depth": 1
    },
    {
        "description": "A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).\n\nFor a positive integer n, we call a permutation p of length n good if the following condition holds for every pair i and j (1 \u2264 i \u2264 j \u2264 n) \u2014 \n\n  * (p_i  OR  p_{i+1}  OR  \u2026  OR  p_{j-1}  OR  p_{j}) \u2265 j-i+1, where OR denotes the [bitwise OR operation.](https://en.wikipedia.org/wiki/Bitwise_operation#OR)\n\n\n\nIn other words, a permutation p is good if for every subarray of p, the OR of all elements in it is not less than the number of elements in that subarray. \n\nGiven a positive integer n, output any good permutation of length n. We can show that for the given constraints such a permutation always exists.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Description of the test cases follows.\n\nThe first and only line of every test case contains a single integer n (1 \u2264 n \u2264 100).\n\nOutput\n\nFor every test, output any good permutation of length n on a separate line. \n\nExample\n\nInput\n\n\n3\n1\n3\n7\n\n\nOutput\n\n\n1\n3 1 2\n4 3 5 2 7 1 6\n\nNote\n\nFor n = 3, [3,1,2] is a good permutation. Some of the subarrays are listed below. \n\n  * 3 OR 1 = 3 \u2265 2 (i = 1,j = 2) \n  * 3 OR 1 OR 2 = 3 \u2265 3 (i = 1,j = 3) \n  * 1 OR 2 = 3 \u2265 2 (i = 2,j = 3) \n  * 1 \u2265 1 (i = 2,j = 2) \n\n\n\nSimilarly, you can verify that [4,3,5,2,7,1,6] is also good.",
        "task_name": "1391_A. Suborrays",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\nfrom __future__ import division\nimport sys\ninput = sys.stdin.readline\nimport math\nfrom math import sqrt, floor, ceil\nfrom collections import Counter\nfrom copy import deepcopy as dc\n\n\n############ ---- Input Functions ---- ############\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\ndef insr2():\n    s = input()\n    return(s.split(\" \"))\n\ndef prime_factorization(n):\n\n    if n == 1:\n        return [1]\n\n    ans=[]\n    i = 2\n    cap = sqrt(n)\n    while i <= cap:\n        if n % i == 0:\n            ans.append(i)\n            n = n//i\n            cap=sqrt(n)\n        else:\n            i += 1\n    if n > 1:\n        ans.append(n)\n    return ans\n\ndef binomial(n, k):\n    if n == 1 or n == k:\n        return 1\n\n    if k > n:\n        return 0       \n    else:\n        a = math.factorial(n)\n        b = math.factorial(k)\n        c = math.factorial(n-k)\n        div = a // (b * c)\n        return div \n\n",
        "correct": false,
        "task_id": "0862",
        "depth": 1
    },
    {
        "description": "You are given a sequence a consisting of n integers a_1, a_2, ..., a_n, and an integer x. Your task is to make the sequence a sorted (it is considered sorted if the condition a_1 \u2264 a_2 \u2264 a_3 \u2264 ... \u2264 a_n holds).\n\nTo make the sequence sorted, you may perform the following operation any number of times you want (possibly zero): choose an integer i such that 1 \u2264 i \u2264 n and a_i > x, and swap the values of a_i and x.\n\nFor example, if a = [0, 2, 3, 5, 4], x = 1, the following sequence of operations is possible:\n\n  1. choose i = 2 (it is possible since a_2 > x), then a = [0, 1, 3, 5, 4], x = 2; \n  2. choose i = 3 (it is possible since a_3 > x), then a = [0, 1, 2, 5, 4], x = 3; \n  3. choose i = 4 (it is possible since a_4 > x), then a = [0, 1, 2, 3, 4], x = 5. \n\n\n\nCalculate the minimum number of operations you have to perform so that a becomes sorted, or report that it is impossible.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 500) \u2014 the number of test cases.\n\nEach test case consists of two lines. The first line contains two integers n and x (1 \u2264 n \u2264 500, 0 \u2264 x \u2264 500) \u2014 the number of elements in the sequence and the initial value of x.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 500).\n\nThe sum of values of n over all test cases in the input does not exceed 500.\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum number of operations you have to perform to make a sorted, or -1, if it is impossible.\n\nExample\n\nInput\n\n\n6\n4 1\n2 3 5 4\n5 6\n1 1 3 4 4\n1 10\n2\n2 10\n11 9\n2 10\n12 11\n5 18\n81 324 218 413 324\n\n\nOutput\n\n\n3\n0\n0\n-1\n1\n3",
        "task_name": "1455_D. Sequence and Swaps",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ninput = sys.stdin.readline\n\n############ ---- Input Functions ---- ############\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef invr():\n    return(map(int,input().split()))\n\ndef main():\n    n, x = inlt()\n    l = inlt()\n    cnt = 0\n    tcnt = 0\n    for i in xrange(0, n-1):\n        if l[i] <= l[i+1]:\n            if x < l[i]:\n                tcnt += 1\n                x = l[i]\n        else:\n            if x > l[i+1]:\n                cnt = -1\n                break\n            else:\n                cnt += tcnt+1\n                x = l[i]\n                tcnt = 0\n\n    print(cnt)\n\nif __name__ == \"__main__\":\n    for _ in xrange(inp()):\n        main()",
        "correct": true,
        "task_id": "0863",
        "depth": 1
    },
    {
        "description": "You are given an array a of length n consisting of integers. You can apply the following operation, consisting of several steps, on the array a zero or more times: \n\n  * you select two different numbers in the array a_i and a_j; \n  * you remove i-th and j-th elements from the array. \n\n\n\nFor example, if n=6 and a=[1, 6, 1, 1, 4, 4], then you can perform the following sequence of operations: \n\n  * select i=1, j=5. The array a becomes equal to [6, 1, 1, 4]; \n  * select i=1, j=2. The array a becomes equal to [1, 4]. \n\n\n\nWhat can be the minimum size of the array after applying some sequence of operations to it?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4). Then t test cases follow.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) is length of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output the minimum possible size of the array after applying some sequence of operations to it.\n\nExample\n\nInput\n\n\n5\n6\n1 6 1 1 4 4\n2\n1 2\n2\n1 1\n5\n4 5 4 5 4\n6\n2 3 2 1 3 1\n\n\nOutput\n\n\n0\n0\n2\n1\n0",
        "task_name": "1506_D. Epic Transformation",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division,print_function\nfrom heapq import*\nimport sys\nle = sys.__stdin__.read().split(\"\\n\")[::-1]\naf=[]\nfor zorg in range(int(le.pop())):\n    n=int(le.pop())\n    l= sorted(list(map(int,le.pop().split())))\n    s=sum(k==l[n//2] for k in l)\n    af.append(max(n%2,s-(n-s)))\nprint(\"\\n\".join(map(str,af)))\n",
        "correct": true,
        "task_id": "0864",
        "depth": 1
    },
    {
        "description": "One day little Vasya found mom's pocket book. The book had n names of her friends and unusually enough, each name was exactly m letters long. Let's number the names from 1 to n in the order in which they are written.\n\nAs mom wasn't home, Vasya decided to play with names: he chose three integers i, j, k (1 \u2264 i < j \u2264 n, 1 \u2264 k \u2264 m), then he took names number i and j and swapped their prefixes of length k. For example, if we take names \"CBDAD\" and \"AABRD\" and swap their prefixes with the length of 3, the result will be names \"AABAD\" and \"CBDRD\".\n\nYou wonder how many different names Vasya can write instead of name number 1, if Vasya is allowed to perform any number of the described actions. As Vasya performs each action, he chooses numbers i, j, k independently from the previous moves and his choice is based entirely on his will. The sought number can be very large, so you should only find it modulo 1000000007 (109 + 7).\n\nInput\n\nThe first input line contains two integers n and m (1 \u2264 n, m \u2264 100) \u2014 the number of names and the length of each name, correspondingly. Then n lines contain names, each name consists of exactly m uppercase Latin letters.\n\nOutput\n\nPrint the single number \u2014 the number of different names that could end up in position number 1 in the pocket book after the applying the procedures described above. Print the number modulo 1000000007 (109 + 7).\n\nExamples\n\nInput\n\n2 3\nAAB\nBAA\n\n\nOutput\n\n4\n\n\nInput\n\n4 5\nABABA\nBCGDG\nAAAAA\nYABSA\n\n\nOutput\n\n216\n\nNote\n\nIn the first sample Vasya can get the following names in the position number 1: \"AAB\", \"AAA\", \"BAA\" and \"BAB\".",
        "task_name": "152_C. Pocket Book",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, m = map(int, raw_input().split())\n\nset_list = []\n\nfor i in range(m):\n        set_list.append(set())\n\nfor i in range(n):\n        s = raw_input()\n        for j in range(m):\n                set_list[j].add(s[j])\n",
        "correct": false,
        "task_id": "0865",
        "depth": 2
    },
    {
        "description": "Valera's lifelong ambition was to be a photographer, so he bought a new camera. Every day he got more and more clients asking for photos, and one day Valera needed a program that would determine the maximum number of people he can serve.\n\nThe camera's memory is d megabytes. Valera's camera can take photos of high and low quality. One low quality photo takes a megabytes of memory, one high quality photo take b megabytes of memory. For unknown reasons, each client asks him to make several low quality photos and several high quality photos. More formally, the i-th client asks to make xi low quality photos and yi high quality photos.\n\nValera wants to serve as many clients per day as possible, provided that they will be pleased with his work. To please the i-th client, Valera needs to give him everything he wants, that is, to make xi low quality photos and yi high quality photos. To make one low quality photo, the camera must have at least a megabytes of free memory space. Similarly, to make one high quality photo, the camera must have at least b megabytes of free memory space. Initially the camera's memory is empty. Valera also does not delete photos from the camera so that the camera's memory gradually fills up.\n\nCalculate the maximum number of clients Valera can successfully serve and print the numbers of these clients.\n\nInput\n\nThe first line contains two integers n and d (1 \u2264 n \u2264 105, 1 \u2264 d \u2264 109) \u2014 the number of clients and the camera memory size, correspondingly. The second line contains two integers a and b (1 \u2264 a \u2264 b \u2264 104) \u2014 the size of one low quality photo and of one high quality photo, correspondingly. \n\nNext n lines describe the clients. The i-th line contains two integers xi and yi (0 \u2264 xi, yi \u2264 105) \u2014 the number of low quality photos and high quality photos the i-th client wants, correspondingly. \n\nAll numbers on all lines are separated by single spaces. \n\nOutput\n\nOn the first line print the answer to the problem \u2014 the maximum number of clients that Valera can successfully serve. Print on the second line the numbers of the client in any order. All numbers must be distinct. If there are multiple answers, print any of them. The clients are numbered starting with 1 in the order in which they are defined in the input data.\n\nExamples\n\nInput\n\n3 10\n2 3\n1 4\n2 1\n1 0\n\n\nOutput\n\n2\n3 2 \n\nInput\n\n3 6\n6 6\n1 1\n1 0\n1 0\n\n\nOutput\n\n1\n2 ",
        "task_name": "203_C. Photographer",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nn_clients, n_data = tuple(int(x) for x in sys.stdin.readline().split())\ns_cost, l_cost = tuple(int(x) for x in sys.stdin.readline().split())\nclient_costs = []\n    \nfor i in range(n_clients):\n    n_small, n_large = tuple(int(x) for x in sys.stdin.readline().split())\n    ind_val = (i+1, n_small * s_cost+ l_cost * n_large)\n    client_costs.append(ind_val)\n\nclient_costs.sort(key=lambda x:x[1])\nsolution, cur_index = [], 0\n\nfor (client_num, cost) in client_costs:\n    if n_data - cost >= 0:\n        n_data -= cost\n        solution.append(client_num)\n    else:\n        break\n\nprint(len(solution))\nfor num in solution:\n    print(num)\n",
        "correct": true,
        "task_id": "0866",
        "depth": 1
    },
    {
        "description": "You've got two rectangular tables with sizes na \u00d7 ma and nb \u00d7 mb cells. The tables consist of zeroes and ones. We will consider the rows and columns of both tables indexed starting from 1. Then we will define the element of the first table, located at the intersection of the i-th row and the j-th column, as ai, j; we will define the element of the second table, located at the intersection of the i-th row and the j-th column, as bi, j. \n\nWe will call the pair of integers (x, y) a shift of the second table relative to the first one. We'll call the overlap factor of the shift (x, y) value:\n\n<image>\n\nwhere the variables i, j take only such values, in which the expression ai, j\u00b7bi + x, j + y makes sense. More formally, inequalities 1 \u2264 i \u2264 na, 1 \u2264 j \u2264 ma, 1 \u2264 i + x \u2264 nb, 1 \u2264 j + y \u2264 mb must hold. If there are no values of variables i, j, that satisfy the given inequalities, the value of the sum is considered equal to 0. \n\nYour task is to find the shift with the maximum overlap factor among all possible shifts.\n\nInput\n\nThe first line contains two space-separated integers na, ma (1 \u2264 na, ma \u2264 50) \u2014 the number of rows and columns in the first table. Then na lines contain ma characters each \u2014 the elements of the first table. Each character is either a \"0\", or a \"1\".\n\nThe next line contains two space-separated integers nb, mb (1 \u2264 nb, mb \u2264 50) \u2014 the number of rows and columns in the second table. Then follow the elements of the second table in the format, similar to the first table.\n\nIt is guaranteed that the first table has at least one number \"1\". It is guaranteed that the second table has at least one number \"1\".\n\nOutput\n\nPrint two space-separated integers x, y (|x|, |y| \u2264 109) \u2014 a shift with maximum overlap factor. If there are multiple solutions, print any of them.\n\nExamples\n\nInput\n\n3 2\n01\n10\n00\n2 3\n001\n111\n\n\nOutput\n\n0 1\n\n\nInput\n\n3 3\n000\n010\n000\n1 1\n1\n\n\nOutput\n\n-1 -1",
        "task_name": "228_B. Two Tables",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\n(na, ma) = [int(buf) for buf in stdin.readline().strip().split()]\na = [int(stdin.readline().strip()[::-1], 2) for i in range(0, na)]\n\n(nb, mb) = [int(buf) for buf in stdin.readline().strip().split()]\nb = [int(stdin.readline().strip()[::-1], 2) for i in range(0, nb)]\n\ndef count1(x):\n    x = (x & 0x55555555555555555555555555555555) + ((x>>0x01) & 0x55555555555555555555555555555555)\n    x = (x & 0x33333333333333333333333333333333) + ((x>>0x02) & 0x33333333333333333333333333333333)\n    x = (x & 0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F) + ((x>>0x04) & 0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F)\n    x = (x & 0x00FF00FF00FF00FF00FF00FF00FF00FF) + ((x>>0x08) & 0x00FF00FF00FF00FF00FF00FF00FF00FF)\n    x = (x & 0x0000FFFF0000FFFF0000FFFF0000FFFF) + ((x>>0x0F) & 0x0000FFFF0000FFFF0000FFFF0000FFFF)\n    x = (x & 0x00000000FFFFFFFF00000000FFFFFFFF) + ((x>>0x10) & 0x00000000FFFFFFFF00000000FFFFFFFF)\n    x = (x & 0x0000000000000000FFFFFFFFFFFFFFFF) + ((x>>0x20) & 0x0000000000000000FFFFFFFFFFFFFFFF)\n    return x\n\ndef getval(x, y):\n    cnt = 0\n    for i in range(0, na):\n        if i+x in range(0, nb):\n            if y > 0:\n                cnt += count1((a[i]<<y) & b[i+x])\n            else:\n                cnt += count1(a[i] & (b[i+x]<<-y))\n    return cnt\n\n(ans, xx, yy) = (0, 0, 0)\nfor x in range(1-na, nb):\n    for y in range(1-ma, mb):\n        val = getval(x, y)\n        if ans  < val:\n            (ans, xx, yy) = (val, x, y)\n\nprint('%d %d' % (xx, yy))\n                \n",
        "correct": false,
        "task_id": "0867",
        "depth": 2
    },
    {
        "description": "The \"BerCorp\" company has got n employees. These employees can use m approved official languages for the formal correspondence. The languages are numbered with integers from 1 to m. For each employee we have the list of languages, which he knows. This list could be empty, i. e. an employee may know no official languages. But the employees are willing to learn any number of official languages, as long as the company pays their lessons. A study course in one language for one employee costs 1 berdollar.\n\nFind the minimum sum of money the company needs to spend so as any employee could correspond to any other one (their correspondence can be indirect, i. e. other employees can help out translating).\n\nInput\n\nThe first line contains two integers n and m (2 \u2264 n, m \u2264 100) \u2014 the number of employees and the number of languages.\n\nThen n lines follow \u2014 each employee's language list. At the beginning of the i-th line is integer ki (0 \u2264 ki \u2264 m) \u2014 the number of languages the i-th employee knows. Next, the i-th line contains ki integers \u2014 aij (1 \u2264 aij \u2264 m) \u2014 the identifiers of languages the i-th employee knows. It is guaranteed that all the identifiers in one list are distinct. Note that an employee may know zero languages.\n\nThe numbers in the lines are separated by single spaces.\n\nOutput\n\nPrint a single integer \u2014 the minimum amount of money to pay so that in the end every employee could write a letter to every other one (other employees can help out translating).\n\nExamples\n\nInput\n\n5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\n\n\nOutput\n\n0\n\n\nInput\n\n8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\n\n\nOutput\n\n2\n\n\nInput\n\n2 2\n1 2\n0\n\n\nOutput\n\n1\n\nNote\n\nIn the second sample the employee 1 can learn language 2, and employee 8 can learn language 4.\n\nIn the third sample employee 2 must learn language 2.",
        "task_name": "277_A. Learning Languages",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin,stdout\nfrom collections import defaultdict\ndef make_set(a):\n    parent[a] = a\n    rank[a] = 1\n\ndef find(a):\n    if a == parent[a]:\n        return a\n    parent[a] = find(parent[a])\n    return parent[a]\n\ndef union(a,b):\n    parentA = find(a)\n    parentB = find(b)\n    if parentA == parentB: return\n    if rank[parentA] < rank[parentB]:\n        parent[parentA] = parentB\n        rank[parentB] += rank[parentA]\n    else:\n        parent[parentB] = parentA\n        rank[parentA] += rank[parentB]\n\nfalantes,parent,rank,zeros = defaultdict(list),{},{},0\nn,m = map(int,stdin.readline().split())\n\nfor i in xrange(1,n+1):\n    linguas = stdin.readline().strip().split()\n    if linguas[0] == '0': zeros += 1\n    for j in linguas[1:]:\n        falantes[j].append(i)\n    make_set(i)\nfor i in falantes.values():\n    for j in xrange(len(i)-1):\n        union(i[j],i[j+1])\nfor filho in parent:\n    parent[filho] = find(parent[filho])\n\nif zeros != n:\n    stdout.write(str(len(set(parent.values())) - 1))\nelse: stdout.write(str(len(set(parent.values())) + 1 - 1))",
        "correct": true,
        "task_id": "0868",
        "depth": 2
    },
    {
        "description": "One day Bob got a letter in an envelope. Bob knows that when Berland's post officers send a letter directly from city \u00abA\u00bb to city \u00abB\u00bb, they stamp it with \u00abA B\u00bb, or \u00abB A\u00bb. Unfortunately, often it is impossible to send a letter directly from the city of the sender to the city of the receiver, that's why the letter is sent via some intermediate cities. Post officers never send a letter in such a way that the route of this letter contains some city more than once. Bob is sure that the post officers stamp the letters accurately.\n\nThere are n stamps on the envelope of Bob's letter. He understands that the possible routes of this letter are only two. But the stamps are numerous, and Bob can't determine himself none of these routes. That's why he asks you to help him. Find one of the possible routes of the letter.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 105) \u2014 amount of mail stamps on the envelope. Then there follow n lines with two integers each \u2014 description of the stamps. Each stamp is described with indexes of the cities between which a letter is sent. The indexes of cities are integers from 1 to 109. Indexes of all the cities are different. Every time the letter is sent from one city to another, exactly one stamp is put on the envelope. It is guaranteed that the given stamps correspond to some valid route from some city to some other city. \n\nOutput\n\nOutput n + 1 numbers \u2014 indexes of cities in one of the two possible routes of the letter.\n\nExamples\n\nInput\n\n2\n1 100\n100 2\n\n\nOutput\n\n2 100 1 \n\nInput\n\n3\n3 1\n100 2\n3 2\n\n\nOutput\n\n100 2 3 1 ",
        "task_name": "29_C. Mail Stamps",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from math import *\nfrom Queue import *\n\n\nn = int(raw_input())\nnbr = dict()\ncand = set()\nfor i in range(n):\n    l = raw_input().split()\n    if l[0] not in nbr:\n        nbr[l[0]] = [l[1]]\n        cand.add(l[0])\n    else:\n        nbr[l[0]].append(l[1])\n        cand.remove(l[0])\n    if l[1] not in nbr:\n        nbr[l[1]] = [l[0]]\n        cand.add(l[1])\n    else:\n        nbr[l[1]].append(l[0])\n        cand.remove(l[1])\nfor v in cand:\n    break\nmarked = set()\nmarked.add(v)\nres = [v]\nQ = [v]\nwhile len(Q) > 0:\n    v = Q.pop()\n    for i in nbr[v]:\n        if i not in marked:\n            marked.add(i)\n            res.append(i)\n            Q.append(i)\nprint(\" \".join(res))\n    \n",
        "correct": true,
        "task_id": "0869",
        "depth": 2
    },
    {
        "description": "It's holiday. Mashmokh and his boss, Bimokh, are playing a game invented by Mashmokh. \n\nIn this game Mashmokh writes sequence of n distinct integers on the board. Then Bimokh makes several (possibly zero) moves. On the first move he removes the first and the second integer from from the board, on the second move he removes the first and the second integer of the remaining sequence from the board, and so on. Bimokh stops when the board contains less than two numbers. When Bimokh removes numbers x and y from the board, he gets gcd(x, y) points. At the beginning of the game Bimokh has zero points.\n\nMashmokh wants to win in the game. For this reason he wants his boss to get exactly k points in total. But the guy doesn't know how choose the initial sequence in the right way. \n\nPlease, help him. Find n distinct integers a1, a2, ..., an such that his boss will score exactly k points. Also Mashmokh can't memorize too huge numbers. Therefore each of these integers must be at most 109.\n\nInput\n\nThe first line of input contains two space-separated integers n, k (1 \u2264 n \u2264 105; 0 \u2264 k \u2264 108).\n\nOutput\n\nIf such sequence doesn't exist output -1 otherwise output n distinct space-separated integers a1, a2, ..., an (1 \u2264 ai \u2264 109).\n\nExamples\n\nInput\n\n5 2\n\n\nOutput\n\n1 2 3 4 5\n\n\nInput\n\n5 3\n\nOutput\n\n2 4 3 7 1\n\nInput\n\n7 2\n\n\nOutput\n\n-1\n\nNote\n\ngcd(x, y) is greatest common divisor of x and y.",
        "task_name": "415_C. Mashmokh and Numbers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,k=map(int, raw_input().split())\nif(n==1 and k==0):\n  print(1)\nelif(n==1 or k==0):\n  print(-1)\nelif(n//2>k):\n  print(-1)\nelse:\n  ans=[]\n  nums=n//2\n  needed=[k+1-nums, (k+1-nums)*2]\n  curr=1\n  for i in range(nums-1):\n    while(curr in needed or curr+1 in needed):\n      curr+=1\n    ans.append(curr)\n    ans.append(curr+1)\n    curr+=2\n  ans.append(needed[0])\n  ans.append(needed[1])\n  # print(len(ans))\n  if(len(ans)==n):\n    print(\" \".join(map(str, ans)))\n  else:\n    ans.append(max(ans)+1)\n    print(\" \".join(map(str, ans)))",
        "correct": true,
        "task_id": "0871",
        "depth": 2
    },
    {
        "description": "Giga Tower is the tallest and deepest building in Cyberland. There are 17 777 777 777 floors, numbered from  - 8 888 888 888 to 8 888 888 888. In particular, there is floor 0 between floor  - 1 and floor 1. Every day, thousands of tourists come to this place to enjoy the wonderful view. \n\nIn Cyberland, it is believed that the number \"8\" is a lucky number (that's why Giga Tower has 8 888 888 888 floors above the ground), and, an integer is lucky, if and only if its decimal notation contains at least one digit \"8\". For example, 8, - 180, 808 are all lucky while 42, - 10 are not. In the Giga Tower, if you write code at a floor with lucky floor number, good luck will always be with you (Well, this round is #278, also lucky, huh?).\n\nTourist Henry goes to the tower to seek good luck. Now he is at the floor numbered a. He wants to find the minimum positive integer b, such that, if he walks b floors higher, he will arrive at a floor with a lucky number. \n\nInput\n\nThe only line of input contains an integer a ( - 109 \u2264 a \u2264 109).\n\nOutput\n\nPrint the minimum b in a line.\n\nExamples\n\nInput\n\n179\n\n\nOutput\n\n1\n\n\nInput\n\n-1\n\n\nOutput\n\n9\n\n\nInput\n\n18\n\n\nOutput\n\n10\n\nNote\n\nFor the first sample, he has to arrive at the floor numbered 180.\n\nFor the second sample, he will arrive at 8.\n\nNote that b should be positive, so the answer for the third sample is 10, not 0.",
        "task_name": "488_A. Giga Tower",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a = int(raw_input())\nx = a + 1\nwhile \"8\" not in str(x):\n    x += 1\nprint (x - a)\n",
        "correct": true,
        "task_id": "0873",
        "depth": 1
    },
    {
        "description": "Karafs is some kind of vegetable in shape of an 1 \u00d7 h rectangle. Tavaspolis people love Karafs and they use Karafs in almost any kind of food. Tavas, himself, is crazy about Karafs.\n\n<image>\n\nEach Karafs has a positive integer height. Tavas has an infinite 1-based sequence of Karafses. The height of the i-th Karafs is si = A + (i - 1) \u00d7 B.\n\nFor a given m, let's define an m-bite operation as decreasing the height of at most m distinct not eaten Karafses by 1. Karafs is considered as eaten when its height becomes zero.\n\nNow SaDDas asks you n queries. In each query he gives you numbers l, t and m and you should find the largest number r such that l \u2264 r and sequence sl, sl + 1, ..., sr can be eaten by performing m-bite no more than t times or print -1 if there is no such number r.\n\nInput\n\nThe first line of input contains three integers A, B and n (1 \u2264 A, B \u2264 106, 1 \u2264 n \u2264 105).\n\nNext n lines contain information about queries. i-th line contains integers l, t, m (1 \u2264 l, t, m \u2264 106) for i-th query.\n\nOutput\n\nFor each query, print its answer in a single line.\n\nExamples\n\nInput\n\n2 1 4\n1 5 3\n3 3 10\n7 10 2\n6 4 8\n\n\nOutput\n\n4\n-1\n8\n-1\n\n\nInput\n\n1 5 2\n1 5 10\n2 7 4\n\n\nOutput\n\n1\n2",
        "task_name": "536_A. Tavas and Karafs",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\n\ndef bs():\n    be, en, ans = l, 10 ** 7, -1\n    while be <= en:\n        md = (be + en) >> 1\n        all = a * (md - l + 1) + b * (sum_n(md - 1) - sum_n(max(l - 2, 0)))\n        val = max(ceil1(all, m), a + (md - 1) * b)\n\n        if val <= t:\n            be = md + 1\n            ans = md\n        else:\n            en = md - 1\n\n    return ans\n\n\nceil1 = lambda a, b: (a + b - 1) // b\nsum_n = lambda n: (n * (n + 1)) // 2\nrints = lambda: [int(x) for x in stdin.readline().split()]\n\na, b, n = rints()\nqur, out = [rints() for _ in range(n)], []\n\nfor l, t, m in qur:\n    out.append(bs())\n\nprint('\\n'.join(map(str, out)))\n",
        "correct": true,
        "task_id": "0874",
        "depth": 1
    },
    {
        "description": "Gerald bought two very rare paintings at the Sotheby's auction and he now wants to hang them on the wall. For that he bought a special board to attach it to the wall and place the paintings on the board. The board has shape of an a1 \u00d7 b1 rectangle, the paintings have shape of a a2 \u00d7 b2 and a3 \u00d7 b3 rectangles.\n\nSince the paintings are painted in the style of abstract art, it does not matter exactly how they will be rotated, but still, one side of both the board, and each of the paintings must be parallel to the floor. The paintings can touch each other and the edges of the board, but can not overlap or go beyond the edge of the board. Gerald asks whether it is possible to place the paintings on the board, or is the board he bought not large enough?\n\nInput\n\nThe first line contains two space-separated numbers a1 and b1 \u2014 the sides of the board. Next two lines contain numbers a2, b2, a3 and b3 \u2014 the sides of the paintings. All numbers ai, bi in the input are integers and fit into the range from 1 to 1000.\n\nOutput\n\nIf the paintings can be placed on the wall, print \"YES\" (without the quotes), and if they cannot, print \"NO\" (without the quotes).\n\nExamples\n\nInput\n\n3 2\n1 3\n2 1\n\n\nOutput\n\nYES\n\n\nInput\n\n5 5\n3 3\n3 3\n\n\nOutput\n\nNO\n\n\nInput\n\n4 2\n2 3\n1 2\n\n\nOutput\n\nYES\n\nNote\n\nThat's how we can place the pictures in the first test:\n\n<image>\n\nAnd that's how we can do it in the third one.\n\n<image>",
        "task_name": "560_B. Gerald is into Art",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python2\n# -.- coding: utf-8 -.-\ndef main():\n    a1,b1= map(int, raw_input().strip().split(\" \"))\n    a2,b2= map(int, raw_input().strip().split(\" \"))\n    a3,b3= map(int, raw_input().strip().split(\" \"))\n    for i in (a2,b2,a3,b3):\n        if i > max((a1,b1)):\n            print(\"NO\")\n            return\n    options = ((a2+a3, b2+b3), (a2+b3, b2+a3),\n            (b2+a3, a2+b3), (b2+b3,a2+a3))\n    for xsum,ysum in options:\n        if xsum <= a1 and ysum <=b1:\n            print(\"YES\")\n            return\n    if a2 < a1:\n        if ((a1-a2) >= a3 and b1 >= b3) or\\\n                ((a1-a2) >= b3 and b1 >= a3):\n            print(\"YES\")\n            return\n    if a2 < b1:\n        if ((b1-a2) >= a3 and a1 >= b3) or\\\n                ((b1-a2) >= b3 and a1 >= a3):\n            print(\"YES\")\n            return\n    print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": false,
        "task_id": "0875",
        "depth": 1
    },
    {
        "description": "In the spirit of the holidays, Saitama has given Genos two grid paths of length n (a weird gift even by Saitama's standards). A grid path is an ordered sequence of neighbouring squares in an infinite grid. Two squares are neighbouring if they share a side.\n\nOne example of a grid path is (0, 0) \u2192 (0, 1) \u2192 (0, 2) \u2192 (1, 2) \u2192 (1, 1) \u2192 (0, 1) \u2192 ( - 1, 1). Note that squares in this sequence might be repeated, i.e. path has self intersections.\n\nMovement within a grid path is restricted to adjacent squares within the sequence. That is, from the i-th square, one can only move to the (i - 1)-th or (i + 1)-th squares of this path. Note that there is only a single valid move from the first and last squares of a grid path. Also note, that even if there is some j-th square of the path that coincides with the i-th square, only moves to (i - 1)-th and (i + 1)-th squares are available. For example, from the second square in the above sequence, one can only move to either the first or third squares.\n\nTo ensure that movement is not ambiguous, the two grid paths will not have an alternating sequence of three squares. For example, a contiguous subsequence (0, 0) \u2192 (0, 1) \u2192 (0, 0) cannot occur in a valid grid path.\n\nOne marble is placed on the first square of each grid path. Genos wants to get both marbles to the last square of each grid path. However, there is a catch. Whenever he moves one marble, the other marble will copy its movement if possible. For instance, if one marble moves east, then the other marble will try and move east as well. By try, we mean if moving east is a valid move, then the marble will move east.\n\nMoving north increases the second coordinate by 1, while moving south decreases it by 1. Similarly, moving east increases first coordinate by 1, while moving west decreases it.\n\nGiven these two valid grid paths, Genos wants to know if it is possible to move both marbles to the ends of their respective paths. That is, if it is possible to move the marbles such that both marbles rest on the last square of their respective paths.\n\nInput\n\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 1 000 000) \u2014 the length of the paths.\n\nThe second line of the input contains a string consisting of n - 1 characters (each of which is either 'N', 'E', 'S', or 'W') \u2014 the first grid path. The characters can be thought of as the sequence of moves needed to traverse the grid path. For example, the example path in the problem statement can be expressed by the string \"NNESWW\".\n\nThe third line of the input contains a string of n - 1 characters (each of which is either 'N', 'E', 'S', or 'W') \u2014 the second grid path.\n\nOutput\n\nPrint \"YES\" (without quotes) if it is possible for both marbles to be at the end position at the same time. Print \"NO\" (without quotes) otherwise. In both cases, the answer is case-insensitive.\n\nExamples\n\nInput\n\n7\nNNESWW\nSWSWSW\n\n\nOutput\n\nYES\n\n\nInput\n\n3\nNN\nSS\n\n\nOutput\n\nNO\n\nNote\n\nIn the first sample, the first grid path is the one described in the statement. Moreover, the following sequence of moves will get both marbles to the end: NNESWWSWSW.\n\nIn the second sample, no sequence of moves can get both marbles to the end.",
        "task_name": "608_E. Marbles",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "rr=raw_input\nrrI = lambda: int(rr())\nrrM = lambda: map(int,rr().split())\ndebug=0\nif debug:\n    fi = open('t.txt','r')\n    rr=lambda: fi.readline().replace('\\n','')\n\nN=rrI()\nN-=1\nA,B = rr(),rr()\ncd = [N-1,0]\ndirs = zip('NEWS','SWEN')\ndef do2(X):\n    for i in X:\n        Ac1 = A[cd[0]]\n        for d1,d2 in dirs:\n            if Ac1 == d1 and i == d2:\n                if cd[0] > 0: cd[0] -= 1\n    cd[1] = N-1\n\nlast = 0\nwhile 1:\n    do2(B[last:])\n    if cd == [last,N-1]:\n        good = 0\n        break\n    if cd == [N-1,N-1]:\n        good = 1\n        break\n    last = cd[0]\n    A,B = B,A\n    cd = cd[::-1]\n    \nprint [\"NO\",\"YES\"][good]\n",
        "correct": false,
        "task_id": "0877",
        "depth": 2
    },
    {
        "description": "You are given n points on the straight line \u2014 the positions (x-coordinates) of the cities and m points on the same line \u2014 the positions (x-coordinates) of the cellular towers. All towers work in the same way \u2014 they provide cellular network for all cities, which are located at the distance which is no more than r from this tower.\n\nYour task is to find minimal r that each city has been provided by cellular network, i.e. for each city there is at least one cellular tower at the distance which is no more than r.\n\nIf r = 0 then a tower provides cellular network only for the point where it is located. One tower can provide cellular network for any number of cities, but all these cities must be at the distance which is no more than r from this tower.\n\nInput\n\nThe first line contains two positive integers n and m (1 \u2264 n, m \u2264 105) \u2014 the number of cities and the number of cellular towers.\n\nThe second line contains a sequence of n integers a1, a2, ..., an ( - 109 \u2264 ai \u2264 109) \u2014 the coordinates of cities. It is allowed that there are any number of cities in the same point. All coordinates ai are given in non-decreasing order.\n\nThe third line contains a sequence of m integers b1, b2, ..., bm ( - 109 \u2264 bj \u2264 109) \u2014 the coordinates of cellular towers. It is allowed that there are any number of towers in the same point. All coordinates bj are given in non-decreasing order.\n\nOutput\n\nPrint minimal r so that each city will be covered by cellular network.\n\nExamples\n\nInput\n\n3 2\n-2 2 4\n-3 0\n\n\nOutput\n\n4\n\n\nInput\n\n5 3\n1 5 10 14 17\n4 11 15\n\n\nOutput\n\n3",
        "task_name": "702_C. Cellular Network",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from bisect import bisect_left\nn, m = map(int, raw_input().split())\na = map(int, raw_input().split())\nb = map(int, raw_input().split())\n\nmin_r = 0\n\nfor el in a:\n    i = bisect_left(b, el)\n    if i == 0:\n        min_r = max(min_r, abs(el - b[0]))\n    elif i == m:\n        min_r = max(min_r, abs(el - b[m-1]))\n    elif i == m - 1:\n        min_r = max(min_r, min(abs(el - b[m - 1]), abs(el - b[m - 2])))\n    else:\n        min_r = max(min_r, min(abs(el - b[i + 1]), abs(el - b[i - 1]), abs(el-b[i])))\n\nprint(min_r)\n\n",
        "correct": true,
        "task_id": "0879",
        "depth": 1
    },
    {
        "description": "You are given a string s, consisting of lowercase English letters, and the integer m.\n\nOne should choose some symbols from the given string so that any contiguous subsegment of length m has at least one selected symbol. Note that here we choose positions of symbols, not the symbols themselves.\n\nThen one uses the chosen symbols to form a new string. All symbols from the chosen position should be used, but we are allowed to rearrange them in any order.\n\nFormally, we choose a subsequence of indices 1 \u2264 i1 < i2 < ... < it \u2264 |s|. The selected sequence must meet the following condition: for every j such that 1 \u2264 j \u2264 |s| - m + 1, there must be at least one selected index that belongs to the segment [j, j + m - 1], i.e. there should exist a k from 1 to t, such that j \u2264 ik \u2264 j + m - 1.\n\nThen we take any permutation p of the selected indices and form a new string sip1sip2... sipt.\n\nFind the lexicographically smallest string, that can be obtained using this procedure.\n\nInput\n\nThe first line of the input contains a single integer m (1 \u2264 m \u2264 100 000).\n\nThe second line contains the string s consisting of lowercase English letters. It is guaranteed that this string is non-empty and its length doesn't exceed 100 000. It is also guaranteed that the number m doesn't exceed the length of the string s.\n\nOutput\n\nPrint the single line containing the lexicographically smallest string, that can be obtained using the procedure described above.\n\nExamples\n\nInput\n\n3\ncbabc\n\n\nOutput\n\na\n\n\nInput\n\n2\nabcab\n\n\nOutput\n\naab\n\n\nInput\n\n3\nbcabcbaccba\n\n\nOutput\n\naaabb\n\nNote\n\nIn the first sample, one can choose the subsequence {3} and form a string \"a\".\n\nIn the second sample, one can choose the subsequence {1, 2, 4} (symbols on this positions are 'a', 'b' and 'a') and rearrange the chosen symbols to form a string \"aab\".",
        "task_name": "724_D. Dense Subsequence",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n# coding: utf-8\n\nif __name__ == '__main__':\n    import sys\n    f = sys.stdin\n    #f = open('/home/ilya/opt/programming/tasks/724D.txt')\n    \n    if False:\n        import StringIO\n        f = StringIO.StringIO(\"\"\"3\nbcabcbaccba\"\"\")\n        \n    if False:\n        import StringIO\n        f = StringIO.StringIO(\"\"\"2\nabcab\"\"\")\n        \n\n    def read_int_line():\n        return map(int, next(f).split())\n\n    m = read_int_line()[0]\n    line =  next(f)\n    \n    import bisect\n    def upper_bound(indexes, idx, lo):\n        return bisect.bisect_right(indexes, idx, lo)\n\n    def find_seq(line): \n        ln = len(line)\n        \n        min_c = None\n        indexes = []\n        min_ok = True\n        for i, c in enumerate(line):\n            if min_c is None:\n                min_c = c\n                indexes = [i]\n            else:\n                diff = ord(c) - ord(min_c)\n                if diff < 0:\n                    min_c = c\n                    indexes = [i]\n                    min_ok = min_ok and i < m\n                elif diff == 0:\n                    if min_ok:\n                        if indexes:\n                            last = indexes[-1]\n                            min_ok = (i - last) <= m\n                    indexes.append(i)\n                \n            \n        assert indexes\n        min_ok = min_ok and (i - indexes[-1]) < m\n        \n        idx_ln = len(indexes)\n        if min_ok:\n            cnt = 0\n            \n            lo = 0\n            value = m - 1\n            while lo < idx_ln:\n                idx = upper_bound(indexes, value, lo)\n                cnt += 1\n                \n                if idx < idx_ln:\n                    value = indexes[idx] + m\n                    lo += 1\n                else:\n                    break\n\n            lst = [(min_c, cnt)]\n        else:\n            # \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435\n            lst = [(min_c, idx_ln)]\n            \n            def append_range(previous, idx):\n                # :TODO: memoryview\n                subline = line[previous+1:idx]\n                lst.extend(find_seq(subline))\n            \n            previous = 0\n            for idx in indexes:\n                if idx - previous > m:\n                    append_range(previous, idx)\n                    \n                previous = idx\n                \n            if ln - previous > m:\n                append_range(idx, ln)\n                \n        return lst\n\n    def print_subrange(c, cnt):\n        pass #sys.stdout.write(\"\".join(c for i in xrange(cnt)))\n\n    lst = find_seq(line)\n    \n    # \u0432\u044b\u0432\u043e\u0434\n    lst.sort()\n    \n    prev_c, prev_cnt = None, 0\n    for c, cnt in lst:\n        if not prev_cnt:\n            prev_c, prev_cnt = c, cnt\n        else:\n            if c != prev_c:\n                print_subrange(prev_c, prev_cnt)\n                prev_c, prev_cnt = c, cnt\n            else:\n                prev_cnt += cnt\n\n    assert prev_cnt\n    print_subrange(prev_c, prev_cnt)\n    ",
        "correct": false,
        "task_id": "0880",
        "depth": 1
    },
    {
        "description": "Innokentiy likes tea very much and today he wants to drink exactly n cups of tea. He would be happy to drink more but he had exactly n tea bags, a of them are green and b are black.\n\nInnokentiy doesn't like to drink the same tea (green or black) more than k times in a row. Your task is to determine the order of brewing tea bags so that Innokentiy will be able to drink n cups of tea, without drinking the same tea more than k times in a row, or to inform that it is impossible. Each tea bag has to be used exactly once.\n\nInput\n\nThe first line contains four integers n, k, a and b (1 \u2264 k \u2264 n \u2264 105, 0 \u2264 a, b \u2264 n) \u2014 the number of cups of tea Innokentiy wants to drink, the maximum number of cups of same tea he can drink in a row, the number of tea bags of green and black tea. It is guaranteed that a + b = n.\n\nOutput\n\nIf it is impossible to drink n cups of tea, print \"NO\" (without quotes).\n\nOtherwise, print the string of the length n, which consists of characters 'G' and 'B'. If some character equals 'G', then the corresponding cup of tea should be green. If some character equals 'B', then the corresponding cup of tea should be black.\n\nIf there are multiple answers, print any of them.\n\nExamples\n\nInput\n\n5 1 3 2\n\n\nOutput\n\nGBGBG\n\n\nInput\n\n7 2 2 5\n\n\nOutput\n\nBBGBGBB\n\nInput\n\n4 3 4 0\n\n\nOutput\n\nNO",
        "task_name": "746_D. Green and Black Tea",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "vals=[int(x) for x in raw_input().split()]\nn=vals[0]\nk=vals[1]\na=vals[2]\nb=vals[3]\n\nc=0\nd=True\nif b>a: d=False\ns=''\n\nfor i in range(n):\n    if c==k:\n        d = not d\n        c=0\n    if d:\n        s+='G'\n        a-=1\n        c+=1\n        if a < b:\n            d=not d\n            c=0\n    else:\n        s+='B'\n        b-=1\n        c+=1\n        if b<a:\n            d=not d\n            c=0\n    if a<0 or b<0:\n        print('NO')\n        quit()\n\nprint(s)\n",
        "correct": true,
        "task_id": "0881",
        "depth": 1
    },
    {
        "description": "Vasya has the sequence consisting of n integers. Vasya consider the pair of integers x and y k-interesting, if their binary representation differs from each other exactly in k bits. For example, if k = 2, the pair of integers x = 5 and y = 3 is k-interesting, because their binary representation x=101 and y=011 differs exactly in two bits.\n\nVasya wants to know how many pairs of indexes (i, j) are in his sequence so that i < j and the pair of integers ai and aj is k-interesting. Your task is to help Vasya and determine this number.\n\nInput\n\nThe first line contains two integers n and k (2 \u2264 n \u2264 105, 0 \u2264 k \u2264 14) \u2014 the number of integers in Vasya's sequence and the number of bits in which integers in k-interesting pair should differ.\n\nThe second line contains the sequence a1, a2, ..., an (0 \u2264 ai \u2264 104), which Vasya has.\n\nOutput\n\nPrint the number of pairs (i, j) so that i < j and the pair of integers ai and aj is k-interesting.\n\nExamples\n\nInput\n\n4 1\n0 3 2 1\n\n\nOutput\n\n4\n\n\nInput\n\n6 0\n200 100 100 100 200 200\n\n\nOutput\n\n6\n\nNote\n\nIn the first test there are 4 k-interesting pairs:\n\n  * (1, 3), \n  * (1, 4), \n  * (2, 3), \n  * (2, 4). \n\n\n\nIn the second test k = 0. Consequently, integers in any k-interesting pair should be equal to themselves. Thus, for the second test there are 6 k-interesting pairs:\n\n  * (1, 5), \n  * (1, 6), \n  * (2, 3), \n  * (2, 4), \n  * (3, 4), \n  * (5, 6). ",
        "task_name": "769_D. k-Interesting Pairs Of Integers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom itertools import combinations, permutations\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nMax = 10001\nn, k = rints()\na, mem, ans, msk = rints(), [0] * (Max * 10), 0, []\nfor i in a:\n    mem[i] += 1\n\nif not k:\n    print(sum([i * (i - 1) // 2 for i in mem]))\n    exit()\n\nfor com in combinations(range(14), k):\n    cur = ['0'] * 14\n    for i in com:\n        cur[i] = '1'\n    msk.append(int(''.join(cur), 2))\n\nfor i in range(Max):\n    for j in msk:\n        ans += mem[i ^ j] * mem[i]\n\nprint(ans >> 1)\n",
        "correct": true,
        "task_id": "0882",
        "depth": 2
    },
    {
        "description": "A few years ago, Hitagi encountered a giant crab, who stole the whole of her body weight. Ever since, she tried to avoid contact with others, for fear that this secret might be noticed.\n\nTo get rid of the oddity and recover her weight, a special integer sequence is needed. Hitagi's sequence has been broken for a long time, but now Kaiki provides an opportunity.\n\nHitagi's sequence a has a length of n. Lost elements in it are denoted by zeros. Kaiki provides another sequence b, whose length k equals the number of lost elements in a (i.e. the number of zeros). Hitagi is to replace each zero in a with an element from b so that each element in b should be used exactly once. Hitagi knows, however, that, apart from 0, no integer occurs in a and b more than once in total.\n\nIf the resulting sequence is not an increasing sequence, then it has the power to recover Hitagi from the oddity. You are to determine whether this is possible, or Kaiki's sequence is just another fake. In other words, you should detect whether it is possible to replace each zero in a with an integer from b so that each integer from b is used exactly once, and the resulting sequence is not increasing.\n\nInput\n\nThe first line of input contains two space-separated positive integers n (2 \u2264 n \u2264 100) and k (1 \u2264 k \u2264 n) \u2014 the lengths of sequence a and b respectively.\n\nThe second line contains n space-separated integers a1, a2, ..., an (0 \u2264 ai \u2264 200) \u2014 Hitagi's broken sequence with exactly k zero elements.\n\nThe third line contains k space-separated integers b1, b2, ..., bk (1 \u2264 bi \u2264 200) \u2014 the elements to fill into Hitagi's sequence.\n\nInput guarantees that apart from 0, no integer occurs in a and b more than once in total.\n\nOutput\n\nOutput \"Yes\" if it's possible to replace zeros in a with elements in b and make the resulting sequence not increasing, and \"No\" otherwise.\n\nExamples\n\nInput\n\n4 2\n11 0 0 14\n5 4\n\n\nOutput\n\nYes\n\n\nInput\n\n6 1\n2 3 0 8 9 10\n5\n\n\nOutput\n\nNo\n\n\nInput\n\n4 1\n8 94 0 4\n89\n\n\nOutput\n\nYes\n\n\nInput\n\n7 7\n0 0 0 0 0 0 0\n1 2 3 4 5 6 7\n\n\nOutput\n\nYes\n\nNote\n\nIn the first sample: \n\n  * Sequence a is 11, 0, 0, 14. \n  * Two of the elements are lost, and the candidates in b are 5 and 4. \n  * There are two possible resulting sequences: 11, 5, 4, 14 and 11, 4, 5, 14, both of which fulfill the requirements. Thus the answer is \"Yes\". \n\n\n\nIn the second sample, the only possible resulting sequence is 2, 3, 5, 8, 9, 10, which is an increasing sequence and therefore invalid.",
        "task_name": "814_A. An abandoned sentiment from past",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "if __name__ == '__main__':\n    n, k = map(int, raw_input().split(' '))\n    a = map(int, raw_input().split(' '))\n    b = map(int, raw_input().split())\n\n    if k == 1:\n        ans = True\n        for i in range(n - 1):\n            if(a[i] == 0):\n                a[i] = b[0]\n            if a[i] >= a[i + 1]:\n                ans = False\n                break\n        if ans:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('Yes')\n\n\n\n",
        "correct": false,
        "task_id": "0883",
        "depth": 1
    },
    {
        "description": "Valery is very interested in magic. Magic attracts him so much that he sees it everywhere. He explains any strange and weird phenomenon through intervention of supernatural forces. But who would have thought that even in a regular array of numbers Valera manages to see something beautiful and magical.\n\nValera absolutely accidentally got a piece of ancient parchment on which an array of numbers was written. He immediately thought that the numbers in this array were not random. As a result of extensive research Valera worked out a wonderful property that a magical array should have: an array is defined as magic if its minimum and maximum coincide.\n\nHe decided to share this outstanding discovery with you, but he asks you for help in return. Despite the tremendous intelligence and wit, Valera counts very badly and so you will have to complete his work. All you have to do is count the number of magical subarrays of the original array of numbers, written on the parchment. Subarray is defined as non-empty sequence of consecutive elements.\n\nInput\n\nThe first line of the input data contains an integer n (1 \u2264 n \u2264 105). The second line contains an array of original integers a1, a2, ..., an ( - 109 \u2264 ai \u2264 109). \n\nOutput\n\nPrint on the single line the answer to the problem: the amount of subarrays, which are magical.\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in C++. It is recommended to use cin, cout streams (you can also use the %I64d specificator).\n\nExamples\n\nInput\n\n4\n2 1 1 4\n\n\nOutput\n\n5\n\n\nInput\n\n5\n-2 -2 -2 0 1\n\n\nOutput\n\n8\n\nNote\n\nNotes to sample tests:\n\nMagical subarrays are shown with pairs of indices [a;b] of the beginning and the end.\n\nIn the first sample: [1;1], [2;2], [3;3], [4;4], [2;3].\n\nIn the second sample: [1;1], [2;2], [3;3], [4;4], [5;5], [1;2], [2;3], [1;3]. ",
        "task_name": "83_A. Magical Array",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\nimport sys\ninput = sys.stdin\noutput = sys.stdout\n\ndef solve(A):\n    N = 0\n    m = 1\n    prev = A[0]\n    for i in range(1,len(A)):\n        a = A[i]\n        if a == prev:\n            m += 1\n        else:\n            N += (m+1)*(m)/2\n            prev = a\n            m = 1\n    N += (m+1)*(m)/2\n    return N\n\nn = int(input.readline())\nAs = input.readline().split(' ')\nA = [int(s) for s in As]\nassert len(A) > 0 and len(A) == n\nN = solve(A)\n\noutput.write('%s' % str(N))",
        "correct": true,
        "task_id": "0884",
        "depth": 1
    },
    {
        "description": "Vlad likes to eat in cafes very much. During his life, he has visited cafes n times. Unfortunately, Vlad started to feel that his last visits are not any different from each other. To fix that Vlad had a small research.\n\nFirst of all, Vlad assigned individual indices to all cafes. Then, he wrote down indices of cafes he visited in a row, in order of visiting them. Now, Vlad wants to find such a cafe that his last visit to that cafe was before his last visits to every other cafe. In other words, he wants to find such a cafe that he hasn't been there for as long as possible. Help Vlad to find that cafe.\n\nInput\n\nIn first line there is one integer n (1 \u2264 n \u2264 2\u00b7105) \u2014 number of cafes indices written by Vlad.\n\nIn second line, n numbers a1, a2, ..., an (0 \u2264 ai \u2264 2\u00b7105) are written \u2014 indices of cafes in order of being visited by Vlad. Vlad could visit some cafes more than once. Note that in numeration, some indices could be omitted.\n\nOutput\n\nPrint one integer \u2014 index of the cafe that Vlad hasn't visited for as long as possible.\n\nExamples\n\nInput\n\n5\n1 3 2 1 2\n\n\nOutput\n\n3\n\n\nInput\n\n6\n2 1 2 2 4 1\n\n\nOutput\n\n2\n\nNote\n\nIn first test, there are three cafes, and the last visits to cafes with indices 1 and 2 were after the last visit to cafe with index 3; so this cafe is the answer. \n\nIn second test case, there are also three cafes, but with indices 1, 2 and 4. Cafes with indices 1 and 4 were visited after the last visit of cafe with index 2, so the answer is 2. Note that Vlad could omit some numbers while numerating the cafes.",
        "task_name": "886_B. Vlad and Cafes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=raw_input()\na=raw_input()\na=a.split()\n\nn=int(n)\nfor i in range(n):\n\tmm=False\n\tfor j in range(i+1,n):\n\t\tif a[i]==a[j] and i!=j:\n\t\t\tmm=True\n\t\telse:\n\t\t\tif mm==False and i+j==n-1:\n\t\t\t\tprint(a[i])\n\t\t\t\t",
        "correct": false,
        "task_id": "0885",
        "depth": 2
    },
    {
        "description": "Consider the following game for two players. There is one white token and some number of black tokens. Each token is placed on a plane in a point with integer coordinates x and y.\n\nThe players take turn making moves, white starts. On each turn, a player moves all tokens of their color by 1 to up, down, left or right. Black player can choose directions for each token independently.\n\nAfter a turn of the white player the white token can not be in a point where a black token is located. There are no other constraints on locations of the tokens: positions of black tokens can coincide, after a turn of the black player and initially the white token can be in the same point with some black point. If at some moment the white player can't make a move, he loses. If the white player makes 10100500 moves, he wins.\n\nYou are to solve the following problem. You are given initial positions of all black tokens. It is guaranteed that initially all these positions are distinct. In how many places can the white token be located initially so that if both players play optimally, the black player wins?\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 105) \u2014 the number of black points.\n\nThe (i + 1)-th line contains two integers xi, yi ( - 105 \u2264 xi, yi, \u2264 105) \u2014 the coordinates of the point where the i-th black token is initially located.\n\nIt is guaranteed that initial positions of black tokens are distinct.\n\nOutput\n\nPrint the number of points where the white token can be located initially, such that if both players play optimally, the black player wins.\n\nExamples\n\nInput\n\n4\n-2 -1\n0 1\n0 -3\n2 -1\n\n\nOutput\n\n4\n\n\nInput\n\n4\n-2 0\n-1 1\n0 -2\n1 -1\n\n\nOutput\n\n2\n\n\nInput\n\n16\n2 1\n1 2\n-1 1\n0 1\n0 0\n1 1\n2 -1\n2 0\n1 0\n-1 -1\n1 -1\n2 2\n0 -1\n-1 0\n0 2\n-1 2\n\n\nOutput\n\n4\n\nNote\n\nIn the first and second examples initial positions of black tokens are shown with black points, possible positions of the white token (such that the black player wins) are shown with white points.\n\nThe first example: <image>\n\nThe second example: <image>\n\nIn the third example the white tokens should be located in the inner square 2 \u00d7 2, to make the black player win. <image>",
        "task_name": "930_D. Game with Tokens",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import*\nfrom itertools import*\ndef solve(a):\n    inf = 1001001001\n    C = 400010\n    lmn = [inf] * 400010\n    lmx = [-inf] * 400010\n    for x, y in a:\n        x = (x - 1) / 2 + 100005\n        if lmn[x] > y:\n            lmn[x] = y\n        if lmx[x] < y:\n            lmx[x] = y\n    rmn = lmn[:]\n    rmx = lmx[:]\n    for i in xrange(200009):\n        if lmn[i+1] > lmn[i]:\n            lmn[i+1] = lmn[i]\n    for i in xrange(200009):\n        if lmx[i+1] < lmx[i]:\n            lmx[i+1] = lmx[i]\n    for i in xrange(200009, 0, -1):\n        if rmn[i-1] > rmn[i]:\n            rmn[i-1] = rmn[i]\n    for i in xrange(200009, 0, -1):\n        if rmx[i-1] < rmx[i]:\n            rmx[i-1] = rmx[i]\n    for i in xrange(200010):\n        if lmn[i] < rmn[i]:\n            lmn[i] = rmn[i]\n    for i in xrange(200010):\n        if lmx[i] > rmx[i]:\n            lmx[i] = rmx[i]\n    ans = 0\n    for i in xrange(200009):\n        if lmn[i] < lmn[i+1]:\n            lmn[i] = lmn[i+1]\n    for i in xrange(200009):\n        if lmx[i] > lmx[i+1]:\n            lmx[i] = lmx[i+1]\n    for i in xrange(200009):\n        if lmn[i] < lmx[i]:\n            ans += (lmx[i] - lmn[i]) / 2\n    return ans\n    \ndef main():\n    n = int(stdin.readline())\n    dat = map(int, stdin.read().split(), repeat(10, 2 * n))\n    s = [[], []]\n    for i in xrange(n):\n        x, y = dat[i*2:i*2+2]\n        s[(x+y)&1].append((-x+y, x+y))\n    print(solve(s[0]) + solve(s[1]))\nmain()",
        "correct": true,
        "task_id": "0887",
        "depth": 1
    },
    {
        "description": "Given are N integers A_1,\\ldots,A_N.\n\nFind the sum of A_i \\times A_j over all pairs (i,j) such that 1\\leq i < j \\leq N, modulo (10^9+7).\n\nConstraints\n\n* 2 \\leq N \\leq 2\\times 10^5\n* 0 \\leq A_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 \\ldots A_N\n\n\nOutput\n\nPrint \\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N} A_i A_j, modulo (10^9+7).\n\nExamples\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\n11\n\n\nInput\n\n4\n141421356 17320508 22360679 244949\n\n\nOutput\n\n437235829",
        "task_name": "p02572 AtCoder Beginner Contest 177 - Sum of product of pairs",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=input()\na=[int(i) for i in raw_input().split()]\ns=0\nfor i in a:\n    s+=i\nc=0\nfor i in a:\n    c+=i*s-i*i\nprint (c/2)%(10**9+7)\n",
        "correct": true,
        "task_id": "0888",
        "depth": 1
    },
    {
        "description": "We have N bricks arranged in a row from left to right.\n\nThe i-th brick from the left (1 \\leq i \\leq N) has an integer a_i written on it.\n\nAmong them, you can break at most N-1 bricks of your choice.\n\nLet us say there are K bricks remaining. Snuke will be satisfied if, for each integer i (1 \\leq i \\leq K), the i-th of those brick from the left has the integer i written on it.\n\nFind the minimum number of bricks you need to break to satisfy Snuke's desire. If his desire is unsatisfiable, print `-1` instead.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 200000\n* 1 \\leq a_i \\leq N\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N\n\n\nOutput\n\nPrint the minimum number of bricks that need to be broken to satisfy Snuke's desire, or print `-1` if his desire is unsatisfiable.\n\nExamples\n\nInput\n\n3\n2 1 2\n\n\nOutput\n\n1\n\n\nInput\n\n3\n2 2 2\n\n\nOutput\n\n-1\n\n\nInput\n\n10\n3 1 4 1 5 9 2 6 5 3\n\n\nOutput\n\n7\n\n\nInput\n\n1\n1\n\n\nOutput\n\n0",
        "task_name": "p02832 AtCoder Beginner Contest 148 - Brick Break",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\nbricks = raw_input().split()\nbricks = [int(i) for i in bricks]\nsmash = 0\nresult = []\npos = 1\nif 1 not in bricks:\n  smash = -1\nelse:\n  for i in range(1,n+1):\n    if i >= len(bricks): break\n    while bricks[i-1] != i:\n      bricks.pop(i-1)\n      smash = smash+1\nprint(smash)",
        "correct": false,
        "task_id": "0889",
        "depth": 2
    },
    {
        "description": "Takahashi likes the sound when he buys a drink from a vending machine.\n\nThat sound can be heard by spending A yen (the currency of Japan) each time.\n\nTakahashi has B yen. He will hear the sound as many times as he can with that money, but at most C times, as he would be satisfied at that time.\n\nHow many times will he hear the sound?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq A, B, C \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C\n\n\nOutput\n\nPrint the number of times Takahashi will hear his favorite sound.\n\nExamples\n\nInput\n\n2 11 4\n\n\nOutput\n\n4\n\n\nInput\n\n3 9 5\n\n\nOutput\n\n3\n\n\nInput\n\n100 1 10\n\n\nOutput\n\n0",
        "task_name": "p03105 AtCoder Beginner Contest 120 - Favorite Sound",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "l = raw_input().split()\ns = l[0]\n\ndef get_removals(s):\n    ret = []\n    for i in range(len(s) - 1):\n        if int(s[i]) + int(s[i + 1]) == 1:\n            ret.append(i)\n    return ret\n\ndef remove(s, index):\n    if index == 0:\n        return s[2:]\n    if index == (len(s) - 1):\n        return s[:index-1]\n    return  s[0:index] + s[index + 2:]\n\nnum_removals = []\n\nones = 0\nzeros = 0\nfor num in s:\n    if num == '0':\n        ones += 1\n    if num == '1':\n        zeros += 1\nmax_candidate = min(ones, zeros) * 2\n\ndef process(s, count):\n    removals = get_removals(s)\n    if len(removals) == 0:\n        num_removals.append(count)\n        if count == max_candidate:\n            print(max_candidate)\n            exit()\n        return\n    count += 2\n    max_remove = 0\n    ss = []\n    for removal in removals:\n        s1 = remove(s, removal)\n        ss.append(s1)\n        num_removes = len(get_removals(s1))\n        if max_remove < num_removes:\n            max_remove = num_removes\n    for s1 in set(ss):\n        if len(get_removals(s1)) == max_remove:\n            process(s1, count)\n\n# process(s, 0)\nprint(max_candidate)\n",
        "correct": false,
        "task_id": "0891",
        "depth": 1
    },
    {
        "description": "You are given strings S and T consisting of lowercase English letters.\n\nYou can perform the following operation on S any number of times:\n\nOperation: Choose two distinct lowercase English letters c_1 and c_2, then replace every occurrence of c_1 with c_2, and every occurrence of c_2 with c_1.\n\nDetermine if S and T can be made equal by performing the operation zero or more times.\n\nConstraints\n\n* 1 \\leq |S| \\leq 2 \\times 10^5\n* |S| = |T|\n* S and T consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT\n\n\nOutput\n\nIf S and T can be made equal, print `Yes`; otherwise, print `No`.\n\nExamples\n\nInput\n\nazzel\napple\n\n\nOutput\n\nYes\n\n\nInput\n\nchokudai\nredcoder\n\n\nOutput\n\nNo\n\n\nInput\n\nabcdefghijklmnopqrstuvwxyz\nibyhqfrekavclxjstdwgpzmonu\n\n\nOutput\n\nYes",
        "task_name": "p03252 AtCoder Beginner Contest 110 - String Transformation",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s1 = raw_input()\ns2 = raw_input()\n\nprint(sorted(s1))\nprint(sorted(s2))\n\ndict1 = {}\ndict2 = {}\n\nfor i in s1:\n\tdict1[i] = dict1.get(i,0)+1\nfor i in s2:\n\tdict2[i] = dict2.get(i,0)+1\n\nvalues1 = sorted(dict1.values())\nvalues2 = sorted(dict2.values())\n\nfor i in range(len(values1)):\n\tif values1[i]!=values2[i]:\n\t\tprint(\"No\")\nprint(\"Yes\")",
        "correct": false,
        "task_id": "0892",
        "depth": 1
    },
    {
        "description": "Takahashi, Aoki and Snuke love cookies. They have A, B and C cookies, respectively. Now, they will exchange those cookies by repeating the action below:\n\n* Each person simultaneously divides his cookies in half and gives one half to each of the other two persons.\n\n\n\nThis action will be repeated until there is a person with odd number of cookies in hand.\n\nHow many times will they repeat this action? Note that the answer may not be finite.\n\nConstraints\n\n* 1 \u2264 A,B,C \u2264 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C\n\n\nOutput\n\nPrint the number of times the action will be performed by the three people, if this number is finite. If it is infinite, print `-1` instead.\n\nExamples\n\nInput\n\n4 12 20\n\n\nOutput\n\n3\n\n\nInput\n\n14 14 14\n\n\nOutput\n\n-1\n\n\nInput\n\n454 414 444\n\n\nOutput\n\n1",
        "task_name": "p03723 AtCoder Grand Contest 014 - Cookie Exchanges",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\na, b, c = map(int, raw_input().split())\nfor i in range(10000):\n\tif a % 2 == 1 or b % 2 == 1 or c % 2 == 1:\n\t\tprint(i)\n\t\tquit()\n\ta, b, c = b / 2 + c / 2, a / 2 + c / 2, a / 2 + b / 2\nprint(-1) ",
        "correct": true,
        "task_id": "0893",
        "depth": 1
    },
    {
        "description": "Iroha has a sequence of N strings S_1, S_2, ..., S_N. The length of each string is L.\n\nShe will concatenate all of the strings in some order, to produce a long string.\n\nAmong all strings that she can produce in this way, find the lexicographically smallest one.\n\nHere, a string s=s_1s_2s_3...s_n is lexicographically smaller than another string t=t_1t_2t_3...t_m if and only if one of the following holds:\n\n* There exists an index i(1\u2266i\u2266min(n,m)), such that s_j = t_j for all indices j(1\u2266j<i), and s_i<t_i.\n* s_i = t_i for all integers i(1\u2266i\u2266min(n,m)), and n<m.\n\nConstraints\n\n* 1 \u2266 N, L \u2266 100\n* For each i, the length of S_i equals L.\n* For each i, S_i consists of lowercase letters.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN L\nS_1\nS_2\n:\nS_N\n\n\nOutput\n\nPrint the lexicographically smallest string that Iroha can produce.\n\nExample\n\nInput\n\n3 3\ndxx\naxx\ncxx\n\n\nOutput\n\naxxcxxdxx",
        "task_name": "p04044 AtCoder Beginner Contest 042 - Iroha Loves Strings (ABC Edition)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,l=map(int,raw_input().split())\ns=[raw_input() for _ in xrange(n)]\ns.sort()\nans=\"\"\nfor i in xrange(n):\n    ans+=s[i]\nprint(ans)\n",
        "correct": true,
        "task_id": "0894",
        "depth": 1
    },
    {
        "description": "Create a program that takes two dates as input and outputs the number of days between the two dates.\n\nDate 1 (y1, m1, d1) is the same as or earlier than date 2 (y2, m2, d2). Date 1 is included in the number of days, not date 2. Also, take the leap year into account when calculating. The leap year conditions are as follows.\n\n* The year is divisible by 4.\n* However, a year divisible by 100 is not a leap year.\n* However, a year divisible by 400 is a leap year.\n\n\n\nInput\n\nGiven multiple datasets. The format of each dataset is as follows:\n\n\ny1 m1 d1 y2 m2 d2\n\n\nWhen any of y1, m1, d1, y2, m2, and d2 is a negative number, the input ends.\n\nThe number of datasets does not exceed 50.\n\nOutput\n\nOutput the number of days on one line for each dataset.\n\nExample\n\nInput\n\n2006 9 2 2006 9 3\n2006 9 2 2006 11 11\n2004 1 1 2005 1 1\n2000 1 1 2006 1 1\n2000 1 1 2101 1 1\n-1 -1 -1 -1 -1 -1\n\n\nOutput\n\n1\n70\n366\n2192\n36890",
        "task_name": "p00125 Day Count",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import datetime as D\nwhile 1:\n  a,b,c,d,e,f=map(int,raw_input().split())\n  try: print (D.date(d,e,f)-D.date(a,b,c)).days\n  except: break",
        "correct": true,
        "task_id": "0895",
        "depth": 1
    },
    {
        "description": "You survived several months of exam wars and were able to enter ICPC University on a sunny day. On the day of admission, there was an enthusiastic recruitment of circles on the campus of the university, and you received a large number of pamphlets and returned. When you return to your room, you find one of the pamphlets you received that interests you. The pamphlet was given by the university's public relations department.\n\nThe following problems were described in the pamphlet.\n\n> How many combinations of two or more consecutive positive integers have a sum of N? For example, 9 has two combinations, 2 + 3 + 4 and 4 + 5.\n\nIf you were curious about the answer to this question, you decided to write a program to find out the answer. Therefore, your job is to write a program that outputs the answer to the problem for the positive integer N given as the input.\n\n\n\nInput\n\nThe input is a sequence of datasets. Each dataset is a line of one integer N. Where 1 \u2264 N \u2264 1000.\n\nThe end of the input is indicated by a single line of zeros.\n\nOutput\n\nThe output is the order of the input datasets, which is the answer to the question for the positive integers represented by each dataset of the inputs. No other characters should be in the output.\n\nExample\n\nInput\n\n9\n500\n0\n\n\nOutput\n\n2\n3",
        "task_name": "p01314 Sum of Consecutive Integers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/python\nimport sys\nif sys.version_info[0]>=3: raw_input=input\n\ntry:\n\twhile True:\n\t\tn=int(raw_input())\n\t\tif n==0: break\n\t\tr=0\n\t\ti=1\n\t\twhile 1:\n\t\t\tn-=i\n\t\t\tif n<0: break\n\t\t\ti+=1\n\t\t\tif n%i==0: r+=1\n\t\tprint(r)\nexcept EOFError:\n\tpass",
        "correct": false,
        "task_id": "0896",
        "depth": 2
    },
    {
        "description": "Notice: unusual memory limit!\n\nAfter the war, destroyed cities in the neutral zone were restored. And children went back to school.\n\nThe war changed the world, as well as education. In those hard days, a new math concept was created.\n\nAs we all know, logarithm function can be described as: $$$ log(p_1^{a_1}p_2^{a_2}...p_k^{a_2}) = a_1 log p_1 + a_2 log p_2 + ... + a_k log p_k  Where p_1^{a_1}p_2^{a_2}...p_k^{a_2}$$$ is the prime factorization of a integer. A problem is that the function uses itself in the definition. That is why it is hard to calculate.\n\nSo, the mathematicians from the neutral zone invented this: $$$ exlog_f(p_1^{a_1}p_2^{a_2}...p_k^{a_2}) = a_1 f(p_1) + a_2 f(p_2) + ... + a_k f(p_k) $$$\n\nNotice that exlog_f(1) is always equal to 0.\n\nThis concept for any function f was too hard for children. So teachers told them that f can only be a polynomial of degree no more than 3 in daily uses (i.e., f(x) = Ax^3+Bx^2+Cx+D).\n\n\"Class is over! Don't forget to do your homework!\" Here it is: $$$ \u2211_{i=1}^n exlog_f(i) $$$\n\nHelp children to do their homework. Since the value can be very big, you need to find the answer modulo 2^{32}.\n\nInput\n\nThe only line contains five integers n, A, B, C, and D (1 \u2264 n \u2264 3 \u22c5 10^8, 0 \u2264 A,B,C,D \u2264 10^6).\n\nOutput\n\nPrint the answer modulo 2^{32}.\n\nExamples\n\nInput\n\n12 0 0 1 0\n\n\nOutput\n\n63\n\n\nInput\n\n4 1 2 3 4\n\n\nOutput\n\n136\n\nNote\n\nIn the first sample:\n\nexlog_f(1) = 0\n\nexlog_f(2) = 2\n\nexlog_f(3) = 3\n\nexlog_f(4) = 2 + 2 = 4\n\nexlog_f(5) = 5\n\nexlog_f(6) = 2 + 3 = 5\n\nexlog_f(7) = 7\n\nexlog_f(8) = 2 + 2 + 2 = 6\n\nexlog_f(9) = 3 + 3 = 6\n\nexlog_f(10) = 2 + 5 = 7\n\nexlog_f(11) = 11\n\nexlog_f(12) = 2 + 2 + 3 = 7\n\n \u2211_{i=1}^{12} exlog_f(i)=63 \n\nIn the second sample:\n\nexlog_f(1) = 0\n\nexlog_f(2) = (1 \u00d7 2^3 + 2 \u00d7 2^2 + 3 \u00d7 2 + 4) = 26\n\nexlog_f(3) = (1 \u00d7 3^3 + 2 \u00d7 3^2 + 3 \u00d7 3 + 4) = 58\n\nexlog_f(4) = 2 \u00d7 exlog_f(2) = 52\n\n \u2211_{i=1}^4 exlog_f(i)=0+26+58+52=136 ",
        "task_name": "1017_F. The Neutral Zone",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python2\nfrom __future__ import division, print_function\n\nfrom math import trunc\nimport _numpypy.multiarray as np\n\ninput = raw_input\n\nMOD = 1 << 32\nMODF = float(MOD)\n\nMAGIC = 6755399441055744.0\nSHRT = 65536.0\n\nMODF_INV = 1.0 / MODF\nSHRT_INV = 1.0 / SHRT\n\nfround = lambda x: (x + MAGIC) - MAGIC\nfmod = lambda a: a - MODF * fround(MODF_INV * a)\nfmul = lambda a, b, c=0.0: fmod(fmod(a * SHRT) * fround(SHRT_INV * b) + a * (b - SHRT * fround(b * SHRT_INV)) + c)\n\n\ndef main():\n    n, a, b, c, d = map(int, input().split())\n    aa = 1.0*a\n    bb = 1.0*b\n    cc = 1.0*c\n    dd = 1.0*d\n    nn = 1.0*n\n\n    def prime_contribution(i):\n        ii = 1.0*i\n        f = fmul(ii, fmul(ii, fmul(ii, aa, bb), cc), dd)\n        \n        ii_inv = 1.0/ii\n        res = 0.0\n        numb = trunc(nn*ii_inv)\n        while numb:\n            res += numb\n            numb = trunc(numb*ii_inv)\n        return fmul(f,fmod(res))\n\n    cnt = prime_contribution(2) + prime_contribution(3)\n    sieve = bytearray(12500000)\n\n    i, t = 5, 2\n    while i <= n:\n        if not (sieve[(i // 3) >> 3] >> ((i // 3) & 7)) & 1:\n            cnt = fmod(cnt + prime_contribution(i))\n            if i > (n + i - 1) // i:\n                i += t\n                t = 6 - t\n                continue\n\n            j = i * i\n            v = t\n            while j <= n:\n                sieve[(j // 3) >> 3] |= 1 << ((j // 3) & 7)\n                j += v * i\n                v = 6 - v\n\n        i += t\n        t = 6 - t\n\n    print(int(cnt) if cnt >= 0.0 else 4294967296 + int(cnt))\n\n\nif __name__ == '__main__':\n    main()",
        "correct": false,
        "task_id": "0898",
        "depth": 2
    },
    {
        "description": "Colossal! \u2014 exclaimed Hawk-nose. \u2014 A programmer! That's exactly what we are looking for.\n\nArkadi and Boris Strugatsky. Monday starts on Saturday\n\nReading the book \"Equations of Mathematical Magic\" Roman Oira-Oira and Cristobal Junta found an interesting equation: a - (a \u2295 x) - x = 0 for some given a, where \u2295 stands for a bitwise exclusive or (XOR) of two integers (this operation is denoted as ^ or xor in many modern programming languages). Oira-Oira quickly found some x, which is the solution of the equation, but Cristobal Junta decided that Oira-Oira's result is not interesting enough, so he asked his colleague how many non-negative solutions of this equation exist. This task turned out to be too difficult for Oira-Oira, so he asks you to help.\n\nInput\n\nEach test contains several possible values of a and your task is to find the number of equation's solution for each of them. The first line contains an integer t (1 \u2264 t \u2264 1000) \u2014 the number of these values.\n\nThe following t lines contain the values of parameter a, each value is an integer from 0 to 2^{30} - 1 inclusive.\n\nOutput\n\nFor each value of a print exactly one integer \u2014 the number of non-negative solutions of the equation for the given value of the parameter. Print answers in the same order as values of a appear in the input.\n\nOne can show that the number of solutions is always finite.\n\nExample\n\nInput\n\n3\n0\n2\n1073741823\n\n\nOutput\n\n1\n2\n1073741824\n\nNote\n\nLet's define the bitwise exclusive OR (XOR) operation. Given two integers x and y, consider their binary representations (possibly with leading zeroes): x_k ... x_2 x_1 x_0 and y_k ... y_2 y_1 y_0. Here, x_i is the i-th bit of the number x and y_i is the i-th bit of the number y. Let r = x \u2295 y be the result of the XOR operation of x and y. Then r is defined as r_k ... r_2 r_1 r_0 where:\n\n$$$ r_i = \\left\\{ \\begin{aligned} 1, ~ if ~ x_i \u2260 y_i \\\\\\ 0, ~ if ~ x_i = y_i \\end{aligned} \\right. $$$\n\nFor the first value of the parameter, only x = 0 is a solution of the equation.\n\nFor the second value of the parameter, solutions are x = 0 and x = 2.",
        "task_name": "1064_B. Equations of Mathematical Magic",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "for x in xrange(int(raw_input())):\n    N=int(raw_input())\n    print(\"%ld\"%pow(2,bin(N).count(\"1\")))\n    ",
        "correct": true,
        "task_id": "0900",
        "depth": 1
    },
    {
        "description": "Hiasat registered a new account in NeckoForces and when his friends found out about that, each one of them asked to use his name as Hiasat's handle.\n\nLuckily for Hiasat, he can change his handle in some points in time. Also he knows the exact moments friends will visit his profile page. Formally, you are given a sequence of events of two types:\n\n  * 1 \u2014 Hiasat can change his handle. \n  * 2 s \u2014 friend s visits Hiasat's profile. \n\n\n\nThe friend s will be happy, if each time he visits Hiasat's profile his handle would be s.\n\nHiasat asks you to help him, find the maximum possible number of happy friends he can get.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 10^5, 1 \u2264 m \u2264 40) \u2014 the number of events and the number of friends.\n\nThen n lines follow, each denoting an event of one of two types: \n\n  * 1 \u2014 Hiasat can change his handle. \n  * 2 s \u2014 friend s (1 \u2264 |s| \u2264 40) visits Hiasat's profile. \n\n\n\nIt's guaranteed, that each friend's name consists only of lowercase Latin letters.\n\nIt's guaranteed, that the first event is always of the first type and each friend will visit Hiasat's profile at least once.\n\nOutput\n\nPrint a single integer \u2014 the maximum number of happy friends.\n\nExamples\n\nInput\n\n\n5 3\n1\n2 motarack\n2 mike\n1\n2 light\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n4 3\n1\n2 alice\n2 bob\n2 tanyaromanova\n\n\nOutput\n\n\n1\n\nNote\n\nIn the first example, the best way is to change the handle to the \"motarack\" in the first event and to the \"light\" in the fourth event. This way, \"motarack\" and \"light\" will be happy, but \"mike\" will not.\n\nIn the second example, you can choose either \"alice\", \"bob\" or \"tanyaromanova\" and only that friend will be happy.",
        "task_name": "1105_E. Helping Hiasat ",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, m = [int(x) for x in raw_input().split()] \n# arr = list(raw_input())\n\n\nstart_counting = 'NO'\ncounter = {}\nfinal_cnt = 0\nfor i in range(0,n):\n    tmp_str = raw_input().split()\n    # print tmp_str\n    state = int(tmp_str[0])\n    if state == 1:\n        if start_counting=='YES':\n            if len(counter):\n                final_cnt += max(counter.values())\n            counter = {}\n        start_counting = 'YES'\n    else:\n        frnd = tmp_str[1]\n        if frnd in counter:\n            counter[frnd] += 1\n        else:\n            counter[frnd] = 1\n\nif start_counting=='YES':\n    if len(counter):\n        final_cnt += max(counter.values())\n\nprint(final_cnt)",
        "correct": false,
        "task_id": "0901",
        "depth": 1
    },
    {
        "description": "Now Serval is a junior high school student in Japari Middle School, and he is still thrilled on math as before. \n\nAs a talented boy in mathematics, he likes to play with numbers. This time, he wants to play with numbers on a rooted tree.\n\nA tree is a connected graph without cycles. A rooted tree has a special vertex called the root. A parent of a node v is the last different from v vertex on the path from the root to the vertex v. Children of vertex v are all nodes for which v is the parent. A vertex is a leaf if it has no children.\n\nThe rooted tree Serval owns has n nodes, node 1 is the root. Serval will write some numbers into all nodes of the tree. However, there are some restrictions. Each of the nodes except leaves has an operation max or min written in it, indicating that the number in this node should be equal to the maximum or minimum of all the numbers in its sons, respectively. \n\nAssume that there are k leaves in the tree. Serval wants to put integers 1, 2, \u2026, k to the k leaves (each number should be used exactly once). He loves large numbers, so he wants to maximize the number in the root. As his best friend, can you help him?\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 3\u22c5 10^5), the size of the tree.\n\nThe second line contains n integers, the i-th of them represents the operation in the node i. 0 represents min and 1 represents max. If the node is a leaf, there is still a number of 0 or 1, but you can ignore it.\n\nThe third line contains n-1 integers f_2, f_3, \u2026, f_n (1 \u2264 f_i \u2264 i-1), where f_i represents the parent of the node i.\n\nOutput\n\nOutput one integer \u2014 the maximum possible number in the root of the tree.\n\nExamples\n\nInput\n\n\n6\n1 0 1 1 0 1\n1 2 2 2 2\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n5\n1 0 1 0 1\n1 1 1 1\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n8\n1 0 0 1 0 1 1 0\n1 1 2 2 3 3 3\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n9\n1 1 0 0 1 0 1 0 1\n1 1 2 2 3 3 4 4\n\n\nOutput\n\n\n5\n\nNote\n\nPictures below explain the examples. The numbers written in the middle of the nodes are their indices, and the numbers written on the top are the numbers written in the nodes.\n\nIn the first example, no matter how you arrange the numbers, the answer is 1.\n\n<image>\n\nIn the second example, no matter how you arrange the numbers, the answer is 4.\n\n<image>\n\nIn the third example, one of the best solution to achieve 4 is to arrange 4 and 5 to nodes 4 and 5.\n\n<image>\n\nIn the fourth example, the best solution is to arrange 5 to node 5.\n\n<image>",
        "task_name": "1153_D. Serval and Rooted Tree",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Author: Mak Kader\n# Description: Template for pypy or python\n\n\nimport math\nimport sys\nimport heapq\nfrom collections import defaultdict\nfrom collections import deque\nfrom sys import stdin, stdout\nsys.setrecursionlimit(1 << 29)\n# Flush output: sys.stdout.flush()\n\ndef readInts():\n    return [int(x) for x in stdin.readline().split()]\n\ndef readInt():\n    return int(stdin.readline())\n\ndef readLine():\n    return stdin.readline().strip()\n\n# template end\n\n\nN = readInt()\n#assert(N < 10000)\n\nop = [0] + readInts()\npa = [0, 0] + readInts()\n\nG = defaultdict(list)\nfor i in range(2, N + 1):\n    p = pa[i]\n    G[p].append(i)\nnleaf = [0] * (N + 1)\nfor i in range(N, 0, -1):\n    if len(G[i]) == 0:\n        nleaf[i] = 1\n        continue\n    for j in G[i]:\n        nleaf[i] += nleaf[j]  # if len(G[j]) > 0 else 1\n\nmemo = {}\ndef dfs(root):\n    global memo\n    if len(G[root]) == 0:\n        return 1\n    if root in memo:\n        return memo[root]\n    res = 0\n    if op[root] == 0:  # min\n        #nl = nleaf[root]\n\n        for v in G[root]:\n            res = max(res, dfs(v))\n\n    else:\n        # max node\n        nl = nleaf[root]\n\n        for v in G[root]:\n            nlv = nleaf[v]\n            res = max(res, nl - (nlv - dfs(v)))\n    memo[root] = res\n    return memo[root]\n\n\nfor i in range(N, 0, -1):\n    dfs(i)\n\n# print(memo)\nres = dfs(1)\n#print(nleaf[1] - ms, ms)\nprint(res)\n",
        "correct": false,
        "task_id": "0903",
        "depth": 2
    },
    {
        "description": "At first, there was a legend related to the name of the problem, but now it's just a formal statement.\n\nYou are given n points a_1, a_2, ..., a_n on the OX axis. Now you are asked to find such an integer point x on OX axis that f_k(x) is minimal possible.\n\nThe function f_k(x) can be described in the following way: \n\n  * form a list of distances d_1, d_2, ..., d_n where d_i = |a_i - x| (distance between a_i and x); \n  * sort list d in non-descending order; \n  * take d_{k + 1} as a result. \n\n\n\nIf there are multiple optimal answers you can print any of them.\n\nInput\n\nThe first line contains single integer T ( 1 \u2264 T \u2264 2 \u22c5 10^5) \u2014 number of queries. Next 2 \u22c5 T lines contain descriptions of queries. All queries are independent. \n\nThe first line of each query contains two integers n, k (1 \u2264 n \u2264 2 \u22c5 10^5, 0 \u2264 k < n) \u2014 the number of points and constant k.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_1 < a_2 < ... < a_n \u2264 10^9) \u2014 points in ascending order.\n\nIt's guaranteed that \u2211{n} doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nPrint T integers \u2014 corresponding points x which have minimal possible value of f_k(x). If there are multiple answers you can print any of them.\n\nExample\n\nInput\n\n\n3\n3 2\n1 2 5\n2 1\n1 1000000000\n1 0\n4\n\n\nOutput\n\n\n3\n500000000\n4",
        "task_name": "1175_C. Electrification",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env pypy\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom __builtin__ import xrange as range\nfrom cStringIO import StringIO\nfrom future_builtins import ascii, filter, hex, map, oct, zip\nfrom io import IOBase\n\nimport __pypy__\n\n\ndef discrete_ternary_search(func, lo, hi):\n    \"\"\" Find the first maximum of unimodal function func() within [lo, hi] \"\"\"\n    while lo <= hi:\n        lo_third = lo + (hi - lo) // 3\n        hi_third = lo + (hi - lo) // 3 + (1 if 0 < hi - lo < 3 else (hi - lo) // 3)\n\n        if func(lo_third) < func(hi_third):\n            lo = lo_third + 1\n        else:\n            hi = hi_third - 1\n\n    return lo\n\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n, k = map(int, input().split())\n        a = [int(x) for x in input().split()]\n\n        def cond(x):\n            a1 = [abs(ai - x) for ai in a]\n            a1.sort()\n            return -a1[k]\n\n        print(discrete_ternary_search(cond, -10**9, 10**9))\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastI(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = StringIO()\n        self.newlines = 0\n\n    def read(self):\n        if self._buffer.tell():\n            return self._buffer.read()\n        return os.read(self._fd, os.fstat(self._fd).st_size)\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(\"\\n\") + (not b)\n            ptr = self._buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(b), self._buffer.seek(ptr)\n        self.newlines -= 1\n        return self._buffer.readline()\n\n\nclass FastO(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = __pypy__.builders.StringBuilder()\n        self.write = lambda s: self._buffer.append(s)\n\n    def flush(self):\n        os.write(self._fd, self._buffer.build())\n        self._buffer = __pypy__.builders.StringBuilder()\n\n\ndef print(*args, **kwargs):\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nsys.stdin, sys.stdout = FastI(sys.stdin), FastO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": false,
        "task_id": "0904",
        "depth": 1
    },
    {
        "description": "Mishka wants to buy some food in the nearby shop. Initially, he has s burles on his card. \n\nMishka can perform the following operation any number of times (possibly, zero): choose some positive integer number 1 \u2264 x \u2264 s, buy food that costs exactly x burles and obtain \u230ax/10\u230b burles as a cashback (in other words, Mishka spends x burles and obtains \u230ax/10\u230b back). The operation \u230aa/b\u230b means a divided by b rounded down.\n\nIt is guaranteed that you can always buy some food that costs x for any possible value of x.\n\nYour task is to say the maximum number of burles Mishka can spend if he buys food optimally.\n\nFor example, if Mishka has s=19 burles then the maximum number of burles he can spend is 21. Firstly, he can spend x=10 burles, obtain 1 burle as a cashback. Now he has s=10 burles, so can spend x=10 burles, obtain 1 burle as a cashback and spend it too.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe next t lines describe test cases. Each test case is given on a separate line and consists of one integer s (1 \u2264 s \u2264 10^9) \u2014 the number of burles Mishka initially has.\n\nOutput\n\nFor each test case print the answer on it \u2014 the maximum number of burles Mishka can spend if he buys food optimally.\n\nExample\n\nInput\n\n\n6\n1\n10\n19\n9876\n12345\n1000000000\n\n\nOutput\n\n\n1\n11\n21\n10973\n13716\n1111111111",
        "task_name": "1296_B. Food Buying",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "t = int(input())\nfor i in range(t):\n  s = int(input())\n  total = 0\n  while s > 0:\n    ss = str(s)\n    spend = int(ss[0]) * (10 ** (len(ss)-1))\n    back = spend // 10\n    total += spend\n    s = s - spend + back\n  print(total)\n",
        "correct": true,
        "task_id": "0906",
        "depth": 2
    },
    {
        "description": "Everybody knows that opposites attract. That is the key principle of the \"Perfect Matching\" dating agency. The \"Perfect Matching\" matchmakers have classified each registered customer by his interests and assigned to the i-th client number ti ( - 10 \u2264 ti \u2264 10). Of course, one number can be assigned to any number of customers.\n\n\"Perfect Matching\" wants to advertise its services and publish the number of opposite couples, that is, the couples who have opposite values of t. Each couple consists of exactly two clients. The customer can be included in a couple an arbitrary number of times. Help the agency and write the program that will find the sought number by the given sequence t1, t2, ..., tn. For example, if t = (1, - 1, 1, - 1), then any two elements ti and tj form a couple if i and j have different parity. Consequently, in this case the sought number equals 4.\n\nOf course, a client can't form a couple with him/herself.\n\nInput\n\nThe first line of the input data contains an integer n (1 \u2264 n \u2264 105) which represents the number of registered clients of the \"Couple Matching\". The second line contains a sequence of integers t1, t2, ..., tn ( - 10 \u2264 ti \u2264 10), ti \u2014 is the parameter of the i-th customer that has been assigned to the customer by the result of the analysis of his interests.\n\nOutput\n\nPrint the number of couples of customs with opposite t. The opposite number for x is number  - x (0 is opposite to itself). Couples that only differ in the clients' order are considered the same.\n\nNote that the answer to the problem can be large enough, so you must use the 64-bit integer type for calculations. Please, do not use the %lld specificator to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specificator.\n\nExamples\n\nInput\n\n5\n-3 3 0 0 3\n\n\nOutput\n\n3\n\n\nInput\n\n3\n0 0 0\n\n\nOutput\n\n3\n\nNote\n\nIn the first sample the couples of opposite clients are: (1,2), (1,5) \u0438 (3,4).\n\nIn the second sample any couple of clients is opposite.",
        "task_name": "131_B. Opposites Attract",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a = dict()\nfor i in range(-10, 11):\n      a[i] = 0\nn = input()\nt = map(int, raw_input().split())\nfor i in range(n):\n      a[t[i]] += 1\nans = 0\nfor i in range(-10, 0):\n      ans += a[i] * a[-i]\nans += a[0] * (a[0] - 1) / 2\nprint(ans)\n\n",
        "correct": true,
        "task_id": "0907",
        "depth": 1
    },
    {
        "description": "We call two numbers x and y similar if they have the same parity (the same remainder when divided by 2), or if |x-y|=1. For example, in each of the pairs (2, 6), (4, 3), (11, 7), the numbers are similar to each other, and in the pairs (1, 4), (3, 12), they are not.\n\nYou are given an array a of n (n is even) positive integers. Check if there is such a partition of the array into pairs that each element of the array belongs to exactly one pair and the numbers in each pair are similar to each other.\n\nFor example, for the array a = [11, 14, 16, 12], there is a partition into pairs (11, 12) and (14, 16). The numbers in the first pair are similar because they differ by one, and in the second pair because they are both even.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t test cases follow.\n\nEach test case consists of two lines.\n\nThe first line contains an even positive integer n (2 \u2264 n \u2264 50) \u2014 length of array a.\n\nThe second line contains n positive integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 100).\n\nOutput\n\nFor each test case print:\n\n  * YES if the such a partition exists, \n  * NO otherwise. \n\n\n\nThe letters in the words YES and NO can be displayed in any case.\n\nExample\n\nInput\n\n\n7\n4\n11 14 16 12\n2\n1 8\n4\n1 1 1 1\n4\n1 2 5 6\n2\n12 13\n6\n1 6 3 10 5 8\n6\n1 12 3 10 5 8\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\nYES\nYES\nNO\n\nNote\n\nThe first test case was explained in the statement.\n\nIn the second test case, the two given numbers are not similar.\n\nIn the third test case, any partition is suitable.",
        "task_name": "1360_C. Similar Pairs",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "test = int(raw_input())\nfor k in range(test):\n\tn = raw_input()\n\ta = map(int, raw_input().split())\n\teven , odd = 0, 0\n\tfor i in a:\n\t\tif(i % 2 == 0):\n\t\t\teven+=1\n\t\telse:\n\t\t\todd +=1\n\tif(even % 2 == 0 == odd %2 == 0):\n\t\tprint(\"YES\")\n\t\tcontinue\n\telse:\n\t\ta = sorted(a)\n\t\ti = 0\n\t\twhile(i < len(a)):\n\t\t\tif(i + 1 < len(a) and a[i+1] - a[i] == 1):\n\t\t\t\teven -=1\n\t\t\t\todd -=1\n\t\t\t\ti+=2\n\t\t\telse:\n\t\t\t\ti+=1\n\t\tif(even %2 == 0 == odd %2==0):\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")",
        "correct": false,
        "task_id": "0908",
        "depth": 2
    },
    {
        "description": "There are n warriors in a row. The power of the i-th warrior is a_i. All powers are pairwise distinct.\n\nYou have two types of spells which you may cast: \n\n  1. Fireball: you spend x mana and destroy exactly k consecutive warriors; \n  2. Berserk: you spend y mana, choose two consecutive warriors, and the warrior with greater power destroys the warrior with smaller power. \n\n\n\nFor example, let the powers of warriors be [2, 3, 7, 8, 11, 5, 4], and k = 3. If you cast Berserk on warriors with powers 8 and 11, the resulting sequence of powers becomes [2, 3, 7, 11, 5, 4]. Then, for example, if you cast Fireball on consecutive warriors with powers [7, 11, 5], the resulting sequence of powers becomes [2, 3, 4].\n\nYou want to turn the current sequence of warriors powers a_1, a_2, ..., a_n into b_1, b_2, ..., b_m. Calculate the minimum amount of mana you need to spend on it.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 2 \u22c5 10^5) \u2014 the length of sequence a and the length of sequence b respectively.\n\nThe second line contains three integers x, k, y (1 \u2264 x, y, \u2264 10^9; 1 \u2264 k \u2264 n) \u2014 the cost of fireball, the range of fireball and the cost of berserk respectively.\n\nThe third line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 n). It is guaranteed that all integers a_i are pairwise distinct.\n\nThe fourth line contains m integers b_1, b_2, ..., b_m (1 \u2264 b_i \u2264 n). It is guaranteed that all integers b_i are pairwise distinct.\n\nOutput\n\nPrint the minimum amount of mana for turning the sequnce a_1, a_2, ..., a_n into b_1, b_2, ..., b_m, or -1 if it is impossible.\n\nExamples\n\nInput\n\n\n5 2\n5 2 3\n3 1 4 5 2\n3 5\n\n\nOutput\n\n\n8\n\n\nInput\n\n\n4 4\n5 1 4\n4 3 1 2\n2 4 3 1\n\n\nOutput\n\n\n-1\n\n\nInput\n\n\n4 4\n2 1 11\n1 3 2 4\n1 3 2 4\n\n\nOutput\n\n\n0",
        "task_name": "1380_D. Berserk And Fireball",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#   Author: yumtam\n#   Created at: 2020-09-10 23:03\n\nfrom __future__ import division, print_function\n_interactive = False\n\ndef main():\n    n, m = input_as_list()\n    x, k, y = input_as_list()\n    a = input_as_list()\n    b = input_as_list()\n\n    j = 0\n    for i, ax in enumerate(a):\n        if j < m and ax == b[j]:\n            j += 1\n\n    if j < m:\n        print(-1)\n        return\n\n    sa = set(a)\n    sb = set(b)\n    if sa == sb:\n        print(0)\n        return\n\n    mx = max(sa-sb)\n\n    gaps = []\n    j = 0\n    gl = 0\n    special = False\n    for i, ax in enumerate(a):\n        if j < m and ax == b[j]:\n            j += 1\n            if special:\n                specialgap = gl\n            gaps.append(gl)\n            gl = 0\n            special = False\n        else:\n            if ax == mx:\n                special = True\n            gl += 1\n    if special:\n        specialgap = gl\n    gaps.append(gl)\n\n    debug_print(gaps)\n\n    if specialgap < k:\n        print(-1)\n        return\n\n    ans = 0\n    if x < y*k:\n        for g in gaps:\n            ans += x*(g//k) + y*(g%k)\n    else:\n        for g in gaps:\n            ans += y*g\n\n    print(ans)\n\n\n# Constants\nINF = float('inf')\nMOD = 10**9+7\n\n# Python3 equivalent names\nimport os, sys, itertools\nif sys.version_info[0] < 3:\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\n# print-flush in interactive problems\nif _interactive:\n    flush = sys.stdout.flush\n    def printf(*args, **kwargs):\n        print(*args, **kwargs)\n        flush()\n\n# Debug print, only works on local machine\nLOCAL = \"LOCAL_\" in os.environ\ndebug_print = (print) if LOCAL else (lambda *x, **y: None)\n\n# Fast IO\nif (not LOCAL) and (not _interactive):\n    from io import BytesIO\n    from atexit import register\n    sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\n    sys.stdout = BytesIO()\n    register(lambda: os.write(1, sys.stdout.getvalue()))\n    input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# Some utility functions(Input, N-dimensional lists, ...)\ndef input_as_list():\n    return [int(x) for x in input().split()]\n\ndef input_with_offset(o):\n    return [int(x)+o for x in input().split()]\n\ndef input_as_matrix(n, m):\n    return [input_as_list() for _ in range(n)]\n\ndef array_of(f, *dim):\n    return [array_of(f, *dim[1:]) for _ in range(dim[0])] if dim else f()\n\n# Start of external code templates...\n# End of external code templates.\n\nmain()\n",
        "correct": false,
        "task_id": "0909",
        "depth": 1
    },
    {
        "description": "On a weekend, Qingshan suggests that she and her friend Daniel go hiking. Unfortunately, they are busy high school students, so they can only go hiking on scratch paper.\n\nA permutation p is written from left to right on the paper. First Qingshan chooses an integer index x (1\u2264 x\u2264 n) and tells it to Daniel. After that, Daniel chooses another integer index y (1\u2264 y\u2264 n, y \u2260 x).\n\nThe game progresses turn by turn and as usual, Qingshan moves first. The rules follow: \n\n  * If it is Qingshan's turn, Qingshan must change x to such an index x' that 1\u2264 x'\u2264 n, |x'-x|=1, x'\u2260 y, and p_{x'}<p_x at the same time. \n  * If it is Daniel's turn, Daniel must change y to such an index y' that 1\u2264 y'\u2264 n, |y'-y|=1, y'\u2260 x, and p_{y'}>p_y at the same time. \n\n\n\nThe person who can't make her or his move loses, and the other wins. You, as Qingshan's fan, are asked to calculate the number of possible x to make Qingshan win in the case both players play optimally.\n\nInput\n\nThe first line contains a single integer n (2\u2264 n\u2264 10^5) \u2014 the length of the permutation.\n\nThe second line contains n distinct integers p_1,p_2,...,p_n (1\u2264 p_i\u2264 n) \u2014 the permutation.\n\nOutput\n\nPrint the number of possible values of x that Qingshan can choose to make her win.\n\nExamples\n\nInput\n\n\n5\n1 2 5 4 3\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n7\n1 2 4 6 5 3 7\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first test case, Qingshan can only choose x=3 to win, so the answer is 1.\n\nIn the second test case, if Qingshan will choose x=4, Daniel can choose y=1. In the first turn (Qingshan's) Qingshan chooses x'=3 and changes x to 3. In the second turn (Daniel's) Daniel chooses y'=2 and changes y to 2. Qingshan can't choose x'=2 because y=2 at this time. Then Qingshan loses.",
        "task_name": "1495_B. Let's Go Hiking",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Enter your code here. Read input from STDIN. Print output to STDOUT# ===============================================================================================\n# importing some useful libraries.\nfrom __future__ import division, print_function\nfrom fractions import Fraction\nimport sys\nimport os\nfrom io import BytesIO, IOBase\nfrom itertools import *\nimport bisect\nfrom heapq import *\nfrom math import ceil, floor\nfrom copy import *\nfrom collections import deque, defaultdict\nfrom collections import Counter as counter  # Counter(list)  return a dict with {key: count}\nfrom itertools import combinations  # if a = [1,2,3] then print(list(comb(a,2))) -----> [(1, 2), (1, 3), (2, 3)]\nfrom itertools import permutations as permutate\nfrom bisect import bisect_left as bl\nfrom operator import *\n# If the element is already present in the list,\n\n# the left most position where element has to be inserted is returned.\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n\n# If the element is already present in the list,\n# the right most position where element has to be inserted is returned\n\n# ==============================================================================================\n# fast I/O region\n\nBUFSIZE = 8192\nfrom sys import stderr\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"A\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for A in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(A))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n# inp = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# ===============================================================================================\n### START ITERATE RECURSION ###\nfrom types import GeneratorType\n\n\ndef iterative(f, stack=[]):\n    def wrapped_func(*args, **kwargs):\n        if stack: return f(*args, **kwargs)\n        to = f(*args, **kwargs)\n        while True:\n            if type(to) is GeneratorType:\n                stack.append(to)\n                to = next(to)\n                continue\n            stack.pop()\n            if not stack: break\n            to = stack[-1].send(to)\n        return to\n\n    return wrapped_func\n\n\n#### END ITERATE RECURSION ####\n###########################\n# Sorted list\nclass SortedList:\n    def __init__(self, iterable=[], _load=200):\n        \"\"\"Initialize sorted list instance.\"\"\"\n        values = sorted(iterable)\n        self._len = _len = len(values)\n        self._load = _load\n        self._lists = _lists = [values[start:start + _load] for start in range(0, _len, _load)]\n        self._list_lens = [len(_list) for _list in _lists]\n        self._mins = [_list[0] for _list in _lists]\n        self._fen_tree = []\n        self._rebuild = True\n\n    def _fen_build(self):\n        \"\"\"Build a fenwick tree instance.\"\"\"\n        self._fen_tree[:] = self._list_lens\n        _fen_tree = self._fen_tree\n        for start in range(len(_fen_tree)):\n            if start | start + 1 < len(_fen_tree):\n                _fen_tree[start | start + 1] += _fen_tree[start]\n        self._rebuild = False\n\n    def _fen_update(self, index, value):\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\n        if not self._rebuild:\n            _fen_tree = self._fen_tree\n            while index < len(_fen_tree):\n                _fen_tree[index] += value\n                index |= index + 1\n\n    def _fen_query(self, end):\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        A = 0\n        while end:\n            A += _fen_tree[end - 1]\n            end &= end - 1\n        return A\n\n    def _fen_findkth(self, k):\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\n        _list_lens = self._list_lens\n        if k < _list_lens[0]:\n            return 0, k\n        if k >= self._len - _list_lens[-1]:\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        idx = -1\n        for d in reversed(range(len(_fen_tree).bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\n                idx = right_idx\n                k -= _fen_tree[idx]\n        return idx + 1, k\n\n    def _delete(self, pos, idx):\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len -= 1\n        self._fen_update(pos, -1)\n        del _lists[pos][idx]\n        _list_lens[pos] -= 1\n\n        if _list_lens[pos]:\n            _mins[pos] = _lists[pos][0]\n        else:\n            del _lists[pos]\n            del _list_lens[pos]\n            del _mins[pos]\n            self._rebuild = True\n\n    def _loc_left(self, value):\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        lo, pos = -1, len(_lists) - 1\n        while lo + 1 < pos:\n            mi = (lo + pos) >> 1\n            if value <= _mins[mi]:\n                pos = mi\n            else:\n                lo = mi\n\n        if pos and value <= _lists[pos - 1][-1]:\n            pos -= 1\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value <= _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def _loc_right(self, value):\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        pos, hi = 0, len(_lists)\n        while pos + 1 < hi:\n            mi = (pos + hi) >> 1\n            if value < _mins[mi]:\n                hi = mi\n            else:\n                pos = mi\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value < _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def add(self, value):\n        \"\"\"Add `value` to sorted list.\"\"\"\n        _load = self._load\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len += 1\n        if _lists:\n            pos, idx = self._loc_right(value)\n            self._fen_update(pos, 1)\n            _list = _lists[pos]\n            _list.insert(idx, value)\n            _list_lens[pos] += 1\n            _mins[pos] = _list[0]\n            if _load + _load < len(_list):\n                _lists.insert(pos + 1, _list[_load:])\n                _list_lens.insert(pos + 1, len(_list) - _load)\n                _mins.insert(pos + 1, _list[_load])\n                _list_lens[pos] = _load\n                del _list[_load:]\n                self._rebuild = True\n        else:\n            _lists.append([value])\n            _mins.append(value)\n            _list_lens.append(1)\n            self._rebuild = True\n\n    def discard(self, value):\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_right(value)\n            if idx and _lists[pos][idx - 1] == value:\n                self._delete(pos, idx - 1)\n\n    def remove(self, value):\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\n        _len = self._len\n        self.discard(value)\n        if _len == self._len:\n            raise ValueError('{0!r} not in list'.format(value))\n\n    def pop(self, index=-1):\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        value = self._lists[pos][idx]\n        self._delete(pos, idx)\n        return value\n\n    def bisect_left(self, value):\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_left(value)\n        return self._fen_query(pos) + idx\n\n    def bisect_right(self, value):\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_right(value)\n        return self._fen_query(pos) + idx\n\n    def count(self, value):\n        \"\"\"Return number of occurrences of `value` in the sorted list.\"\"\"\n        return self.bisect_right(value) - self.bisect_left(value)\n\n    def __len__(self):\n        \"\"\"Return the size of the sorted list.\"\"\"\n        return self._len\n\n    def __getitem__(self, index):\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        return self._lists[pos][idx]\n\n    def __delitem__(self, index):\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        self._delete(pos, idx)\n\n    def __contains__(self, value):\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_left(value)\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\n        return False\n\n    def __iter__(self):\n        \"\"\"Return an iterator over the sorted list.\"\"\"\n        return (value for _list in self._lists for value in _list)\n\n    def __reversed__(self):\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\n\n    def __repr__(self):\n        \"\"\"Return string representation of sorted list.\"\"\"\n        return 'SortedList({0})'.format(list(self))\n\n\n# ===============================================================================================\n# some shortcuts\n\nmod = 1000000007\n\n\ndef testcase(t):\n    for p in range(t):\n        solve()\n\n\ndef pow(A, B, p):\n    res = 1  # Initialize result\n    A = A % p  # Update A if it is more , than or equal to p\n    if (A == 0):\n        return 0\n    while (B > 0):\n        if ((B & 1) == 1):  # If B is odd, multiply, A with result\n            res = (res * A) % p\n\n        B = B >> 1  # B = B/2\n        A = (A * A) % p\n    return res\n\n\nfrom functools import reduce\n\n\ndef factors(n):\n    return set(reduce(list.__add__,\n                      ([start, n // start] for start in range(1, int(n ** 0.5) + 1) if n % start == 0)))\n\n\ndef gcd(a, b):\n    if a == b: return a\n    while b > 0: a, b = b, a % b\n    return a\n\n\n# discrete binary search\n# minimise:\n# def search():\n#     l = 0\n#     r = 10 ** 15\n#\n#     for start in range(200):\n#         if isvalid(l):\n#             return l\n#         if l == r:\n#             return l\n#         m = (l + r) // 2\n#         if isvalid(m) and not isvalid(m - 1):\n#             return m\n#         if isvalid(m):\n#             r = m + 1\n#         else:\n#             l = m\n#     return m\n\n# maximise:\n# def search():\n#     l = 0\n#     r = 10 ** 15\n#\n#     for start in range(200):\n#         # print(l,r)\n#         if isvalid(r):\n#             return r\n#         if l == r:\n#             return l\n#         m = (l + r) // 2\n#         if isvalid(m) and not isvalid(m + 1):\n#             return m\n#         if isvalid(m):\n#             l = m\n#         else:\n#             r = m - 1\n#     return m\n\n\n##############Find sum of product of subsets of size k in a array\n# ar=[0,1,2,3]\n# k=3\n# n=len(ar)-1\n# dp=[0]*(n+1)\n# dp[0]=1\n# for pos in range(1,n+1):\n#     dp[pos]=0\n#     l=max(1,k+pos-n-1)\n#     for j in range(min(pos,k),l-1,-1):\n#         dp[j]=dp[j]+ar[pos]*dp[j-1]\n# print(dp[k])\n\ndef prefix_sum(ar):  # [1,2,3,4]->[1,3,6,10]\n    return list(accumulate(ar))\n\n\ndef suffix_sum(ar):  # [1,2,3,4]->[10,9,7,4]\n    return list(accumulate(ar[::-1]))[::-1]\n\n\ndef N():\n    return int(inp())\n\n\ndx = [0, 0, 1, -1]\ndy = [1, -1, 0, 0]\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\n# =========================================================================================\nfrom collections import defaultdict\n\n\ndef numberOfSetBits(start):\n    start = start - ((start >> 1) & 0x55555555)\n    start = (start & 0x33333333) + ((start >> 2) & 0x33333333)\n    return (((start + (start >> 4) & 0xF0F0F0F) * 0x1010101) & 0xffffffff) >> 24\n\n\nclass MergeFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n        # self.lista = [[_] for _ in range(n)]\n\n    def find(self, a):\n        to_update = []\n        while a != self.parent[a]:\n            to_update.append(a)\n            a = self.parent[a]\n        for b in to_update:\n            self.parent[b] = a\n        return self.parent[a]\n\n    def merge(self, a, b):\n        a = self.find(a)\n        b = self.find(b)\n        if a == b:\n            return\n        if self.size[a] < self.size[b]:\n            a, b = b, a\n        self.num_sets -= 1\n        self.parent[b] = a\n        self.size[a] += self.size[b]\n        # self.lista[a] += self.lista[b]\n        # self.lista[b] = []\n\n    def set_size(self, a):\n        return self.size[self.find(a)]\n\n    def __len__(self):\n        return self.num_sets\n\n\ndef lcm(a, b):\n    return abs((a // gcd(a, b)) * b)\n\n\n# #\n# to find factorial and ncr\n# tot = 100005\n# mod = 10**9 + 7\n# fac = [1, 1]\n# finv = [1, 1]\n# inv = [0, 1]\n#\n# for start in range(2, tot + 1):\n#     fac.append((fac[-1] * start) % mod)\n#     inv.append(mod - (inv[mod % start] * (mod // start) % mod))\n#     finv.append(finv[-1] * inv[-1] % mod)\n\n\ndef comb(n, r):\n    if n < r:\n        return 0\n    else:\n        return fac[n] * (finv[r] * finv[n - r] % mod) % mod\n\n\ndef inp(): return sys.stdin.readline().rstrip(\"\\r\\n\")  # for fast input\n\n\ndef out(var): sys.stdout.write(str(var))  # for fast output, always take string\n\n\ndef lis(): return list(map(int, inp().split()))\n\n\ndef stringlis(): return list(map(str, inp().split()))\n\n\ndef sep(): return map(int, inp().split())\n\n\ndef strsep(): return map(str, inp().split())\n\n\ndef fsep(): return map(float, inp().split())\n\n\ndef nextline(): out(\"\\n\")  # as stdout.write always print sring.\n\n\ndef arr1d(n, v):\n    return [v] * n\n\n\ndef arr2d(n, m, v):\n    return [[v] * m for _ in range(n)]\n\n\ndef arr3d(n, m, p, v):\n    return [[[v] * p for _ in range(m)] for start in range(n)]\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\n# co-ordinate compression\n# ma={s:idx for idx,s in enumerate(sorted(set(l+r)))}\n\n# mxn=100005\n# lrg=[0]*mxn\n# for start in range(2,mxn-3):\n#     if (lrg[start]==0):\n#         for j in range(start,mxn-3,start):\n#             lrg[j]=start\n\n\ndef solve():\n    n=N()\n    ar=lis()\n    leftheight=[0]\n    for i in range(1,n):\n        if(ar[i]>ar[i-1]):leftheight.append(leftheight[-1]+1)\n        else:leftheight.append(0)\n    rightheight=[0]*n\n    for i in range(n-2,-1,-1):\n        if(ar[i]>ar[i+1]):rightheight[i]=rightheight[i+1]+1\n        else: rightheight[i]=0\n    # print(leftheight)\n    # print(rightheight)\n    val=[]\n    for i in range(n):\n        val.append(max(leftheight[i],rightheight[i]))\n    m=max(val)\n    ans=0\n    if(m%2==0):\n        if(val.count(m)>1):\n            ans=0\n        else:\n            ans=1\n    else:\n        ans=0\n    print(ans)\n\n\n\n\n\nsolve()\n#testcase(N())",
        "correct": false,
        "task_id": "0911",
        "depth": 1
    },
    {
        "description": "Bajtek is learning to skate on ice. He's a beginner, so his only mode of transportation is pushing off from a snow drift to the north, east, south or west and sliding until he lands in another snow drift. He has noticed that in this way it's impossible to get from some snow drifts to some other by any sequence of moves. He now wants to heap up some additional snow drifts, so that he can get from any snow drift to any other one. He asked you to find the minimal number of snow drifts that need to be created.\n\nWe assume that Bajtek can only heap up snow drifts at integer coordinates.\n\nInput\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of snow drifts. Each of the following n lines contains two integers xi and yi (1 \u2264 xi, yi \u2264 1000) \u2014 the coordinates of the i-th snow drift.\n\nNote that the north direction coin\u0441ides with the direction of Oy axis, so the east direction coin\u0441ides with the direction of the Ox axis. All snow drift's locations are distinct.\n\nOutput\n\nOutput the minimal number of snow drifts that need to be created in order for Bajtek to be able to reach any snow drift from any other one.\n\nExamples\n\nInput\n\n2\n2 1\n1 2\n\n\nOutput\n\n1\n\n\nInput\n\n2\n2 1\n4 1\n\n\nOutput\n\n0",
        "task_name": "217_A. Ice Skating",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"Template for Python Competitive Programmers prepared by Mayank Chaudhary \"\"\"\n\n# to use the print and division function of Python3\nfrom __future__ import division, print_function\n\n\"\"\"value of mod\"\"\"\nMOD = 998244353\nmod = 10**9 + 7\n\n\"\"\"use resource\"\"\"\n# import resource\n# resource.setrlimit(resource.RLIMIT_STACK, [0x100000000, resource.RLIM_INFINITY])\n\n\"\"\"for factorial\"\"\"\n\n# def prepare_factorial():\n#     fact = [1]\n#     for i in range(1, 100005):\n#         fact.append((fact[-1] * i) % mod)\n#     ifact = [0] * 100005\n#     ifact[100004] = pow(fact[100004], mod - 2, mod)\n#     for i in range(100004, 0, -1):\n#         ifact[i - 1] = (i * ifact[i]) % mod\n#\n#     return fact, ifact\n\n\"\"\"uncomment next 4 lines while doing recursion based question\"\"\"\nimport threading\nthreading.stack_size(2**27)\nimport sys\nsys.setrecursionlimit(10000)\n\n\n\"\"\"uncomment modules according to your need\"\"\"\n# from bisect import bisect_left, bisect_right, insort\n# import itertools\nfrom math import floor, ceil, sqrt\n# import heapq\n# from random import randint as rn\n# from Queue import Queue as Q\n# from collections import Counter, defaultdict\n\n'''\ndef modinv(n, p):\n    return pow(n, p - 2, p)\n'''\n\n\n# def ncr(n, r,  fact, ifact):  # for using this uncomment the lines calculating fact and ifact\n#     t = ((fact[n]) * (ifact[r] % mod)) % mod\n#     return t\n\n\n\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef input(): return sys.stdin.readline().strip()\n\n\n# def GCD(x, y):\n#     while (y):\n#         x, y = y, x % y\n#     return x\n#\n# def lcm(x, y):\n#     return (x*y)//(GCD(x, y))\n#\n# def get_xor(n):\n#     return [n,1,n+1,0][n%4]\n\n\n\"\"\"*******************************************************\"\"\"\n\ndef main():\n\n    def dfs(i):\n        if i not in visited:\n            visited.add(i)\n            for child in mydict_x[i[0]]:\n                if (i[0], child) not in visited:\n                    dfs((i[0], child))\n            for child in mydict_y[i[1]]:\n                if (child, i[1]) not in visited:\n                    dfs((child, i[1]))\n\n\n    n = int(input())\n    lst = []\n    count_of_components = 0\n    mydict_x = {i:[] for i in range(1, 1001)}\n    mydict_y = {i:[] for i in range(1, 1001)}\n    for i in range(n):\n        x,y = get_ints()\n        lst.append((x, y))\n        mydict_x[x].append(y)\n        mydict_y[y].append(x)\n\n    visited = set()\n\n    for i in lst:\n        if i not in visited:\n            dfs(i)\n            count_of_components += 1\n\n    print(count_of_components - 1)\n\n\n\n\n\n\n\n\"\"\" -------- Python 2 and 3 footer by Pajenegod and c1729 ---------\"\"\"\n\npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n    range = xrange\n\nimport os, sys\nfrom io import IOBase, BytesIO\n\nBUFSIZE = 8192\n\n\nclass FastIO(BytesIO):\n    newlines = 0\n\n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n\n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0, 2), super(FastIO, self).write(s))[0])\n        return s\n\n    def read(self):\n        while self._fill(): pass\n        return super(FastIO, self).read()\n\n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill();\n            self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s: self.buffer.write(s.encode('ascii'))\n            self.read = lambda: self.buffer.read().decode('ascii')\n            self.readline = lambda: self.buffer.readline().decode('ascii')\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n\"\"\" main function\"\"\"\n\nif __name__ == '__main__':\n    # main()\n    threading.Thread(target=main).start()",
        "correct": true,
        "task_id": "0912",
        "depth": 1
    },
    {
        "description": "The end of the school year is near and Ms. Manana, the teacher, will soon have to say goodbye to a yet another class. She decided to prepare a goodbye present for her n students and give each of them a jigsaw puzzle (which, as wikipedia states, is a tiling puzzle that requires the assembly of numerous small, often oddly shaped, interlocking and tessellating pieces).\n\nThe shop assistant told the teacher that there are m puzzles in the shop, but they might differ in difficulty and size. Specifically, the first jigsaw puzzle consists of f1 pieces, the second one consists of f2 pieces and so on.\n\nMs. Manana doesn't want to upset the children, so she decided that the difference between the numbers of pieces in her presents must be as small as possible. Let A be the number of pieces in the largest puzzle that the teacher buys and B be the number of pieces in the smallest such puzzle. She wants to choose such n puzzles that A - B is minimum possible. Help the teacher and find the least possible value of A - B.\n\nInput\n\nThe first line contains space-separated integers n and m (2 \u2264 n \u2264 m \u2264 50). The second line contains m space-separated integers f1, f2, ..., fm (4 \u2264 fi \u2264 1000) \u2014 the quantities of pieces in the puzzles sold in the shop.\n\nOutput\n\nPrint a single integer \u2014 the least possible difference the teacher can obtain.\n\nExamples\n\nInput\n\n4 6\n10 12 10 7 5 22\n\n\nOutput\n\n5\n\nNote\n\nSample 1. The class has 4 students. The shop sells 6 puzzles. If Ms. Manana buys the first four puzzles consisting of 10, 12, 10 and 7 pieces correspondingly, then the difference between the sizes of the largest and the smallest puzzle will be equal to 5. It is impossible to obtain a smaller difference. Note that the teacher can also buy puzzles 1, 3, 4 and 5 to obtain the difference 5.",
        "task_name": "337_A. Puzzles",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "students, num_puzzles = list(map(int, raw_input().split()))\npuzzles = list(map(int, raw_input().split()))\npuzzles.sort()\nbest = 999999\nfor i in range(num_puzzles-students+1):\n    best = min(puzzles[i+students - 1] - puzzles[i], best)\nif (best == 999999):\n    best = puzzles[-1] - puzzles[0]\nprint(best)",
        "correct": true,
        "task_id": "0914",
        "depth": 1
    },
    {
        "description": "Quite recently, a very smart student named Jury decided that lectures are boring, so he downloaded a game called \"Black Square\" on his super cool touchscreen phone.\n\nIn this game, the phone's screen is divided into four vertical strips. Each second, a black square appears on some of the strips. According to the rules of the game, Jury must use this second to touch the corresponding strip to make the square go away. As Jury is both smart and lazy, he counted that he wastes exactly ai calories on touching the i-th strip.\n\nYou've got a string s, describing the process of the game and numbers a1, a2, a3, a4. Calculate how many calories Jury needs to destroy all the squares?\n\nInput\n\nThe first line contains four space-separated integers a1, a2, a3, a4 (0 \u2264 a1, a2, a3, a4 \u2264 104).\n\nThe second line contains string s (1 \u2264 |s| \u2264 105), where the \u0456-th character of the string equals \"1\", if on the i-th second of the game the square appears on the first strip, \"2\", if it appears on the second strip, \"3\", if it appears on the third strip, \"4\", if it appears on the fourth strip.\n\nOutput\n\nPrint a single integer \u2014 the total number of calories that Jury wastes.\n\nExamples\n\nInput\n\n1 2 3 4\n123214\n\n\nOutput\n\n13\n\n\nInput\n\n1 5 3 2\n11221\n\n\nOutput\n\n13",
        "task_name": "431_A. Black Square",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def main():\n    c = [0]*5\n    for i in range(1,5):\n        c[i] = int(input())\n    s = input()\n    res = 0\n    for ch in s:\n        res += c[int(ch)]\n    print(res)\n    return\n",
        "correct": false,
        "task_id": "0915",
        "depth": 1
    },
    {
        "description": "Twilight Sparkle learnt that the evil Nightmare Moon would return during the upcoming Summer Sun Celebration after one thousand years of imprisonment on the moon. She tried to warn her mentor Princess Celestia, but the princess ignored her and sent her to Ponyville to check on the preparations for the celebration.\n\n<image>\n\nTwilight Sparkle wanted to track the path of Nightmare Moon. Unfortunately, she didn't know the exact path. What she knew is the parity of the number of times that each place Nightmare Moon visited. Can you help Twilight Sparkle to restore any path that is consistent with this information?\n\nPonyville can be represented as an undirected graph (vertices are places, edges are roads between places) without self-loops and multi-edges. The path can start and end at any place (also it can be empty). Each place can be visited multiple times. The path must not visit more than 4n places.\n\nInput\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 105; 0 \u2264 m \u2264 105) \u2014 the number of places and the number of roads in Ponyville. Each of the following m lines contains two integers ui, vi (1 \u2264 ui, vi \u2264 n; ui \u2260 vi), these integers describe a road between places ui and vi.\n\nThe next line contains n integers: x1, x2, ..., xn (0 \u2264 xi \u2264 1) \u2014 the parity of the number of times that each place must be visited. If xi = 0, then the i-th place must be visited even number of times, else it must be visited odd number of times.\n\nOutput\n\nOutput the number of visited places k in the first line (0 \u2264 k \u2264 4n). Then output k integers \u2014 the numbers of places in the order of path. If xi = 0, then the i-th place must appear in the path even number of times, else i-th place must appear in the path odd number of times. Note, that given road system has no self-loops, therefore any two neighbouring places in the path must be distinct.\n\nIf there is no required path, output -1. If there multiple possible paths, you can output any of them.\n\nExamples\n\nInput\n\n3 2\n1 2\n2 3\n1 1 1\n\n\nOutput\n\n3\n1 2 3\n\n\nInput\n\n5 7\n1 2\n1 3\n1 4\n1 5\n3 4\n3 5\n4 5\n0 1 0 1 0\n\n\nOutput\n\n10\n2 1 3 4 5 4 5 4 3 1 \n\nInput\n\n2 0\n0 0\n\n\nOutput\n\n0",
        "task_name": "453_C. Little Pony and Summer Sun Celebration",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, m = raw_input().split()\nn, m = int(n), int(m)\ngraph = {}\nfor i in range(n):\n    graph[i] = []\nvisited = set()\npath = []\n\nfor i in range(m):\n    u, v = raw_input().split()\n    u, v = int(u)-1, int(v)-1\n    graph[u].append(v)\n    graph[v].append(u)\n\nparities = raw_input().split()\nfor i in range(n):\n    parities[i] = int(parities[i])\n\ndef add_to_path(u):\n    path.append(u)\n    parities[u] ^= 1 # XOR. flip parity\n\ndef dfs(u, previous):\n    visited.add(u)\n    add_to_path(u)\n    \n    for v in graph[u]:\n        if (v in visited) == False:\n            dfs(v, u)\n            add_to_path(u) # go back to u\n\n    if parities[u] == 1:\n        if previous == -1:\n            path.pop()\n            parities[u] ^= 1\n        else:\n            add_to_path(previous)\n            add_to_path(u)\n        \n    return visited\n\nfor i in range(n):\n    if parities[i] == 1:\n        dfs(i, -1)\n        break\nfor i in range(n):\n    if parities[i] == 1:\n       print(-1)\nprint(len(path))\nstring = ''\nfor u in path:\n    string += str(u+1) + ' '\nprint(string)\n",
        "correct": false,
        "task_id": "0916",
        "depth": 1
    },
    {
        "description": "Dreamoon wants to climb up a stair of n steps. He can climb 1 or 2 steps at each move. Dreamoon wants the number of moves to be a multiple of an integer m. \n\nWhat is the minimal number of moves making him climb to the top of the stairs that satisfies his condition?\n\nInput\n\nThe single line contains two space separated integers n, m (0 < n \u2264 10000, 1 < m \u2264 10).\n\nOutput\n\nPrint a single integer \u2014 the minimal number of moves being a multiple of m. If there is no way he can climb satisfying condition print  - 1 instead.\n\nExamples\n\nInput\n\n10 2\n\n\nOutput\n\n6\n\n\nInput\n\n3 5\n\n\nOutput\n\n-1\n\nNote\n\nFor the first sample, Dreamoon could climb in 6 moves with following sequence of steps: {2, 2, 2, 2, 1, 1}.\n\nFor the second sample, there are only three valid sequence of steps {2, 1}, {1, 2}, {1, 1, 1} with 2, 2, and 3 steps respectively. All these numbers are not multiples of 5.",
        "task_name": "476_A. Dreamoon and Stairs",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,m = map(int,raw_input().split())\nif n<m:\n    print('-1')\nelse:\n    t = n//2\n    while t%m>0:\n        t+=1\n    print(t)",
        "correct": false,
        "task_id": "0917",
        "depth": 1
    },
    {
        "description": "Vasya studies positional numeral systems. Unfortunately, he often forgets to write the base of notation in which the expression is written. Once he saw a note in his notebook saying a + b = ?, and that the base of the positional notation wasn\u2019t written anywhere. Now Vasya has to choose a base p and regard the expression as written in the base p positional notation. Vasya understood that he can get different results with different bases, and some bases are even invalid. For example, expression 78 + 87 in the base 16 positional notation is equal to FF16, in the base 15 positional notation it is equal to 11015, in the base 10 one \u2014 to 16510, in the base 9 one \u2014 to 1769, and in the base 8 or lesser-based positional notations the expression is invalid as all the numbers should be strictly less than the positional notation base. Vasya got interested in what is the length of the longest possible expression value. Help him to find this length.\n\nThe length of a number should be understood as the number of numeric characters in it. For example, the length of the longest answer for 78 + 87 = ? is 3. It is calculated like that in the base 15 (11015), base 10 (16510), base 9 (1769) positional notations, for example, and in some other ones.\n\nInput\n\nThe first letter contains two space-separated numbers a and b (1 \u2264 a, b \u2264 1000) which represent the given summands.\n\nOutput\n\nPrint a single number \u2014 the length of the longest answer.\n\nExamples\n\nInput\n\n78 87\n\n\nOutput\n\n3\n\n\nInput\n\n1 1\n\n\nOutput\n\n2",
        "task_name": "49_B. Sum",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nline = sys.stdin.readline().strip();\na = line.split(\" \")[0];\nb = line.split(\" \")[1];\ns = a + b;\nm = 0;\nfor c in s :\n    d = int(c);\n    m = max(m, d);\n\nt = int(a) + int(b)\nret = \"\";\nwhile (t != 0):\n    r = t % (m + 1);\n    t //= (m + 1);\n    ret = ret + str(r);\nprint(len(ret));",
        "correct": false,
        "task_id": "0918",
        "depth": 1
    },
    {
        "description": "A social network for dogs called DH (DogHouse) has k special servers to recompress uploaded videos of cute cats. After each video is uploaded, it should be recompressed on one (any) of the servers, and only after that it can be saved in the social network.\n\nWe know that each server takes one second to recompress a one minute fragment. Thus, any server takes m seconds to recompress a m minute video.\n\nWe know the time when each of the n videos were uploaded to the network (in seconds starting from the moment all servers started working). All videos appear at different moments of time and they are recompressed in the order they appear. If some video appeared at time s, then its recompressing can start at that very moment, immediately. Some videos can await recompressing when all the servers are busy. In this case, as soon as a server is available, it immediately starts recompressing another video. The videos that await recompressing go in a queue. If by the moment the videos started being recompressed some servers are available, then any of them starts recompressing the video.\n\nFor each video find the moment it stops being recompressed.\n\nInput\n\nThe first line of the input contains integers n and k (1 \u2264 n, k \u2264 5\u00b7105) \u2014 the number of videos and servers, respectively.\n\nNext n lines contain the descriptions of the videos as pairs of integers si, mi (1 \u2264 si, mi \u2264 109), where si is the time in seconds when the i-th video appeared and mi is its duration in minutes. It is guaranteed that all the si's are distinct and the videos are given in the chronological order of upload, that is in the order of increasing si.\n\nOutput\n\nPrint n numbers e1, e2, ..., en, where ei is the time in seconds after the servers start working, when the i-th video will be recompressed.\n\nExamples\n\nInput\n\n3 2\n1 5\n2 5\n3 5\n\n\nOutput\n\n6\n7\n11\n\n\nInput\n\n6 1\n1 1000000000\n2 1000000000\n3 1000000000\n4 1000000000\n5 1000000000\n6 3\n\n\nOutput\n\n1000000001\n2000000001\n3000000001\n4000000001\n5000000001\n5000000004",
        "task_name": "523_D. Statistics of Recompressing Videos",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import heapq\nfrom sys import stdin, stdout\n\n\ndef __main__(n, k):\n    servers = [0] * k\n    times = []\n\n    for i in range(n):\n        s, m = [int(x) for x in stdin.readline().split()]\n        time = max(servers[0], s)\n        heapq.heapreplace(servers, time + m)\n        times.append(time + m)\n\n    stdout.write('\\n'.join(str(time) for time in times) + '\\n')\n\nif __name__ == '__main__':\n    n, k = map(int, stdin.readline().split())\n    __main__(n, k)",
        "correct": true,
        "task_id": "0919",
        "depth": 1
    },
    {
        "description": "The Romans have attacked again. This time they are much more than the Persians but Shapur is ready to defeat them. He says: \"A lion is never afraid of a hundred sheep\". \n\nNevertheless Shapur has to find weaknesses in the Roman army to defeat them. So he gives the army a weakness number.\n\nIn Shapur's opinion the weakness of an army is equal to the number of triplets i, j, k such that i < j < k and ai > aj > ak where ax is the power of man standing at position x. The Roman army has one special trait \u2014 powers of all the people in it are distinct.\n\nHelp Shapur find out how weak the Romans are.\n\nInput\n\nThe first line of input contains a single number n (3 \u2264 n \u2264 106) \u2014 the number of men in Roman army. Next line contains n different positive integers ai (1 \u2264 i \u2264 n, 1 \u2264 ai \u2264 109) \u2014 powers of men in the Roman army. \n\nOutput\n\nA single integer number, the weakness of the Roman army. \n\nPlease, do not use %lld specificator to read or write 64-bit integers in C++. It is preffered to use cout (also you may use %I64d).\n\nExamples\n\nInput\n\n3\n3 2 1\n\n\nOutput\n\n1\n\n\nInput\n\n3\n2 3 1\n\n\nOutput\n\n0\n\n\nInput\n\n4\n10 8 3 1\n\n\nOutput\n\n4\n\n\nInput\n\n4\n1 5 4 3\n\n\nOutput\n\n1",
        "task_name": "61_E. Enemy is weak",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def fast2():\n    import os, sys, atexit\n    from cStringIO import StringIO as BytesIO\n    # range = xrange\n    sys.stdout = BytesIO()\n    atexit.register(lambda: os.write(1, sys.stdout.getvalue()))\n    return BytesIO(os.read(0, os.fstat(0).st_size)).readline\n\n\nclass order_tree:\n    def __init__(self, n):\n        self.tree, self.n = [[0, 0] for _ in range(n << 1)], n\n\n    # get interval[l,r)\n    def query(self, r, col):\n        res = 0\n        l = self.n\n        r += self.n\n\n        while l < r:\n            if l & 1:\n                res += self.tree[l][col]\n                l += 1\n\n            if r & 1:\n                r -= 1\n                res += self.tree[r][col]\n\n            l >>= 1\n            r >>= 1\n\n        return res\n\n    def update(self, ix, val, col):\n        ix += self.n\n\n        # set new value\n        self.tree[ix][col] += val\n\n        # move up\n        while ix > 1:\n            self.tree[ix >> 1][col] = self.tree[ix][col] + self.tree[ix ^ 1][col]\n            ix >>= 1\n\n\ninput = fast2()\nn, a = int(input()), [int(x) for x in input().split()]\ntree, ans = order_tree(n), 0\nmem = {i: j for j, i in enumerate(sorted(a))}\n\nfor i in range(n - 1, -1, -1):\n    cur = mem[a[i]]\n    ans += tree.query(cur, 1)\n    tree.update(cur, 1, 0)\n    tree.update(cur, tree.query(cur, 0), 1)\n\nprint(ans)\n",
        "correct": true,
        "task_id": "0921",
        "depth": 1
    },
    {
        "description": "A revolution took place on the Buka Island. New government replaced the old one. The new government includes n parties and each of them is entitled to some part of the island according to their contribution to the revolution. However, they can't divide the island.\n\nThe island can be conventionally represented as two rectangles a \u00d7 b and c \u00d7 d unit squares in size correspondingly. The rectangles are located close to each other. At that, one of the sides with the length of a and one of the sides with the length of c lie on one line. You can see this in more details on the picture.\n\n<image>\n\nThe i-th party is entitled to a part of the island equal to xi unit squares. Every such part should fully cover several squares of the island (it is not allowed to cover the squares partially) and be a connected figure. A \"connected figure\" presupposes that from any square of this party one can move to any other square of the same party moving through edge-adjacent squares also belonging to that party.\n\nYour task is to divide the island between parties.\n\nInput\n\nThe first line contains 5 space-separated integers \u2014 a, b, c, d and n (1 \u2264 a, b, c, d \u2264 50, b \u2260 d, 1 \u2264 n \u2264 26). The second line contains n space-separated numbers. The i-th of them is equal to number xi (1 \u2264 xi \u2264 a \u00d7 b + c \u00d7 d). It is guaranteed that <image>.\n\nOutput\n\nIf dividing the island between parties in the required manner is impossible, print \"NO\" (without the quotes). Otherwise, print \"YES\" (also without the quotes) and, starting from the next line, print max(b, d) lines each containing a + c characters. To mark what square should belong to what party, use lowercase Latin letters. For the party that is first in order in the input data, use \"a\", for the second one use \"b\" and so on. Use \".\" for the squares that belong to the sea. The first symbol of the second line of the output data should correspond to the square that belongs to the rectangle a \u00d7 b. The last symbol of the second line should correspond to the square that belongs to the rectangle c \u00d7 d.\n\nIf there are several solutions output any.\n\nExamples\n\nInput\n\n3 4 2 2 3\n5 8 3\n\n\nOutput\n\nYES\naaabb\naabbb\ncbb..\nccb..\n\n\nInput\n\n3 2 1 4 4\n1 2 3 4\n\n\nOutput\n\nYES\nabbd\ncccd\n...d\n...d",
        "task_name": "63_D. Dividing Island",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a, b, c, d, n = map(int, raw_input().split())\nres = [\".\" * (a+c)] * max(b, d)\nfor i in range(b):\n    for j in range(a):\n        res[i] = res[i][:j]+\"?\"+res[i][j+1:]\nfor i in range(d):\n    for j in range(c):\n        res[i] = res[i][:a+j]+\"?\"+res[i][a+j+1:]\n\ni = 0\nif b > d:\n    j = 0 if d%2 == 0 else a+c-1\nelse:\n    j = a+c-1 if b%2 == 0 else 0\n\nk = 0\nfor size in map(int, raw_input().split()):\n    for _ in range(size):\n        assert res[i][j] == '?'\n        res[i] = res[i][:j]+chr(ord('a')+k)+res[i][j+1:]\n        if j-1 >= 0 and res[i][j-1] == '?':\n            j -= 1\n        elif j+1 < len(res[i]) and res[i][j+1] == '?':\n            j += 1\n        else:\n            i += 1\n    k += 1\n\nfor s in res:\n    print(s)\n",
        "correct": false,
        "task_id": "0922",
        "depth": 2
    },
    {
        "description": "Little Artem found a grasshopper. He brought it to his house and constructed a jumping area for him.\n\nThe area looks like a strip of cells 1 \u00d7 n. Each cell contains the direction for the next jump and the length of that jump. Grasshopper starts in the first cell and follows the instructions written on the cells. Grasshopper stops immediately if it jumps out of the strip. Now Artem wants to find out if this will ever happen.\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000) \u2014 length of the strip. \n\nNext line contains a string of length n which consists of characters \"<\" and \">\" only, that provide the direction of the jump from the corresponding cell. Next line contains n integers di (1 \u2264 di \u2264 109) \u2014 the length of the jump from the i-th cell.\n\nOutput\n\nPrint \"INFINITE\" (without quotes) if grasshopper will continue his jumps forever. Otherwise print \"FINITE\" (without quotes).\n\nExamples\n\nInput\n\n2\n&gt;&lt;\n1 2\n\n\nOutput\n\nFINITE\n\n\nInput\n\n3\n&gt;&gt;&lt;\n2 1 1\n\n\nOutput\n\nINFINITE\n\nNote\n\nIn the first sample grasshopper starts from the first cell and jumps to the right on the next cell. When he is in the second cell he needs to jump two cells left so he will jump out of the strip.\n\nSecond sample grasshopper path is 1 - 3 - 2 - 3 - 2 - 3 and so on. The path is infinite.",
        "task_name": "669_B. Little Artem and Grasshopper",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = input()\nfield = raw_input()\npower = map(int, raw_input().split())\n\npos = 0\nwhile 0 <= pos < n and power[pos] != 0:\n    power[pos], pos = 0, pos + (2 * (field[pos] == '>') - 1) * power[pos]\n\nprint (\"INFINITE\" if 0 <= pos < n else \"FINITE\")\n",
        "correct": true,
        "task_id": "0923",
        "depth": 1
    },
    {
        "description": "Heidi the Cow is aghast: cracks in the northern Wall? Zombies gathering outside, forming groups, preparing their assault? This must not happen! Quickly, she fetches her HC2 (Handbook of Crazy Constructions) and looks for the right chapter:\n\nHow to build a wall:\n\n  1. Take a set of bricks.\n  2. Select one of the possible wall designs. Computing the number of possible designs is left as an exercise to the reader.\n  3. Place bricks on top of each other, according to the chosen design.\n\n\n\nThis seems easy enough. But Heidi is a Coding Cow, not a Constructing Cow. Her mind keeps coming back to point 2b. Despite the imminent danger of a zombie onslaught, she wonders just how many possible walls she could build with up to n bricks.\n\nA wall is a set of wall segments as defined in the easy version. How many different walls can be constructed such that the wall consists of at least 1 and at most n bricks? Two walls are different if there exist a column c and a row r such that one wall has a brick in this spot, and the other does not.\n\nAlong with n, you will be given C, the width of the wall (as defined in the easy version). Return the number of different walls modulo 106 + 3.\n\nInput\n\nThe first line contains two space-separated integers n and C, 1 \u2264 n \u2264 500000, 1 \u2264 C \u2264 200000.\n\nOutput\n\nPrint the number of different walls that Heidi could build, modulo 106 + 3.\n\nExamples\n\nInput\n\n5 1\n\n\nOutput\n\n5\n\n\nInput\n\n2 2\n\n\nOutput\n\n5\n\n\nInput\n\n3 2\n\n\nOutput\n\n9\n\n\nInput\n\n11 5\n\n\nOutput\n\n4367\n\n\nInput\n\n37 63\n\n\nOutput\n\n230574\n\nNote\n\nThe number 106 + 3 is prime.\n\nIn the second sample case, the five walls are: \n    \n    \n      \n                B        B  \n    B., .B, BB, B., and .B  \n    \n\nIn the third sample case, the nine walls are the five as in the second sample case and in addition the following four: \n    \n    \n      \n    B    B  \n    B    B  B        B  \n    B., .B, BB, and BB  \n    ",
        "task_name": "690_D2. The Wall (medium)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\n\ndef fact(be, en):\n    res, res2 = [1], [1]\n    for i in range(be, en + 1):\n        res.append(mult(res[-1], i))\n        res2.append(inv(res[-1]))\n    return res, res2\n\n\ndef ncr_rep(n, r):\n    return mult(mult(facs[n], invs[n - r]), invs[r])\n\n\nadd = lambda a, b: (a + b) % mod\nmult = lambda a, b: (a * b) % mod\ndiv = lambda a, b: mult(a, inv(b))\ninv = lambda a: pow(a, mod - 2, mod)\n\nn, c = map(int, stdin.readline().split())\nmod = 10 ** 6 + 3\nfacs, invs = fact(1, n + c)\nprint(add(ncr_rep(n + c, n), -1))\n",
        "correct": true,
        "task_id": "0924",
        "depth": 1
    },
    {
        "description": "On the way to Rio de Janeiro Ostap kills time playing with a grasshopper he took with him in a special box. Ostap builds a line of length n such that some cells of this line are empty and some contain obstacles. Then, he places his grasshopper to one of the empty cells and a small insect in another empty cell. The grasshopper wants to eat the insect.\n\nOstap knows that grasshopper is able to jump to any empty cell that is exactly k cells away from the current (to the left or to the right). Note that it doesn't matter whether intermediate cells are empty or not as the grasshopper makes a jump over them. For example, if k = 1 the grasshopper can jump to a neighboring cell only, and if k = 2 the grasshopper can jump over a single cell.\n\nYour goal is to determine whether there is a sequence of jumps such that grasshopper will get from his initial position to the cell with an insect.\n\nInput\n\nThe first line of the input contains two integers n and k (2 \u2264 n \u2264 100, 1 \u2264 k \u2264 n - 1) \u2014 the number of cells in the line and the length of one grasshopper's jump.\n\nThe second line contains a string of length n consisting of characters '.', '#', 'G' and 'T'. Character '.' means that the corresponding cell is empty, character '#' means that the corresponding cell contains an obstacle and grasshopper can't jump there. Character 'G' means that the grasshopper starts at this position and, finally, 'T' means that the target insect is located at this cell. It's guaranteed that characters 'G' and 'T' appear in this line exactly once.\n\nOutput\n\nIf there exists a sequence of jumps (each jump of length k), such that the grasshopper can get from his initial position to the cell with the insect, print \"YES\" (without quotes) in the only line of the input. Otherwise, print \"NO\" (without quotes).\n\nExamples\n\nInput\n\n5 2\n#G#T#\n\n\nOutput\n\nYES\n\n\nInput\n\n6 1\nT....G\n\n\nOutput\n\nYES\n\n\nInput\n\n7 3\nT..#..G\n\n\nOutput\n\nNO\n\n\nInput\n\n6 2\n..GT..\n\n\nOutput\n\nNO\n\nNote\n\nIn the first sample, the grasshopper can make one jump to the right in order to get from cell 2 to cell 4.\n\nIn the second sample, the grasshopper is only able to jump to neighboring cells but the way to the insect is free \u2014 he can get there by jumping left 5 times.\n\nIn the third sample, the grasshopper can't make a single jump.\n\nIn the fourth sample, the grasshopper can only jump to the cells with odd indices, thus he won't be able to reach the insect.",
        "task_name": "735_A. Ostap and Grasshopper",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "l1 = list(map(int,raw_input().split()))\n\nn,k = l1[0],l1[1]\n\nl = raw_input()\n\nmestot = None\nmestok = None\n\nfor i in range(len(l)):\n    if l[i] == \"G\":\n        mestok = i\n    if l[i] == \"T\":\n        mestot = i\n        \n    if mestok != None and mestot != None:\n        break\n\n\nfl = True\n\nif abs(mestot-mestok) % k == 0:\n    \n    for i in range(mestok,len(l),k):\n        if l[i] == \"#\":\n            fl = False\n            break\n        \n    if fl != False and mestot < mestok:\n        l = l[::-1]\n        \n        for i in range(len(l)):\n            if l[i] == \"G\":\n                mestok = i\n            if l[i] == \"T\":\n                mestot = i\n\n        for i in range(mestok,len(l),k):\n            if l[i] == \"#\":\n                fl = False\n                break\n\n    if fl == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelse:\n    print(\"NO\")\n",
        "correct": false,
        "task_id": "0925",
        "depth": 1
    },
    {
        "description": "The main city magazine offers its readers an opportunity to publish their ads. The format of the ad should be like this:\n\nThere are space-separated non-empty words of lowercase and uppercase Latin letters.\n\nThere are hyphen characters '-' in some words, their positions set word wrapping points. Word can include more than one hyphen. \n\nIt is guaranteed that there are no adjacent spaces and no adjacent hyphens. No hyphen is adjacent to space. There are no spaces and no hyphens before the first word and after the last word. \n\nWhen the word is wrapped, the part of the word before hyphen and the hyphen itself stay on current line and the next part of the word is put on the next line. You can also put line break between two words, in that case the space stays on current line. Check notes for better understanding.\n\nThe ad can occupy no more that k lines and should have minimal width. The width of the ad is the maximal length of string (letters, spaces and hyphens are counted) in it.\n\nYou should write a program that will find minimal width of the ad.\n\nInput\n\nThe first line contains number k (1 \u2264 k \u2264 105).\n\nThe second line contains the text of the ad \u2014 non-empty space-separated words of lowercase and uppercase Latin letters and hyphens. Total length of the ad don't exceed 106 characters.\n\nOutput\n\nOutput minimal width of the ad.\n\nExamples\n\nInput\n\n4\ngarage for sa-le\n\n\nOutput\n\n7\n\n\nInput\n\n4\nEdu-ca-tion-al Ro-unds are so fun\n\n\nOutput\n\n10\n\nNote\n\nHere all spaces are replaced with dots.\n\nIn the first example one of possible results after all word wraps looks like this:\n    \n    \n      \n    garage.  \n    for.  \n    sa-  \n    le  \n    \n\nThe second example:\n    \n    \n      \n    Edu-ca-  \n    tion-al.  \n    Ro-unds.  \n    are.so.fun  \n    ",
        "task_name": "803_D. Magazine Ad",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# python2\nimport sys, threading, os.path\nimport collections, heapq, math,bisect\n\nsys.setrecursionlimit(10**6) # max depth of recursion\nthreading.stack_size(2**27)\n\ndef main():\n    if os.path.exists('input.txt'):\n        input = open('input.txt', 'r')\n    else:\n        input = sys.stdin\n    #--------------------------------INPUT---------------------------------\n    k = int(input.readline())\n    s = str(input.readline().rstrip('\\n'))\n    lis1 = []\n    for i,x in enumerate(s):\n        if x == '-' or x == ' ':\n            lis1.append(i)\n    lis1.append(len(s)-1)\n    #print lis1\n\n    h = []\n    heapq.heappush(h, (-len(lis1), lis1))\n    res = []\n    res.append(lis1)\n    while True:\n        if k <=0:\n            break\n        thisNode = heapq.heappop(h)\n        #res.remove(thisNode[1])\n        thisNode[1]\n        i = bisect.bisect_right(thisNode[1], (thisNode[1][0]+thisNode[1][len(thisNode[1])-1])/2)\n        tempL = [thisNode[1][i-1:i][0]+1]\n        first = thisNode[1][:i]\n        second = tempL+thisNode[1][i:]\n        \n        heapq.heappush(h, (-(first[len(first)-1]-first[0]), first))\n        heapq.heappush(h, (-(second[len(second)-1]-tempL[0]), second))\n        #res.append(first)\n        #res.append(second)\n        k-=1\n    maxone = -1\n    '''\n    \n    mineone = min(res)\n    mineone.append(0)\n    mineone.sort()\n    for x in res:\n        maxone = max(maxone,x[len(x)-1]-x[0])\n    '''\n    #print res\n    #print h\n    \n    #heapq.heappush(h, (0, min(h)[1]+[0]))\n    \n    \n    for y,x in h:\n        if x[0]==lis1[0]:\n            x.append(0)\n        x.sort()\n        #print x\n        maxone = max(maxone,x[len(x)-1]-x[0])\n    output = maxone+1\n    #-------------------------------OUTPUT----------------------------------\n    if os.path.exists('output.txt'):\n        open('output.txt', 'w').writelines(str(output))\n    else:\n        sys.stdout.write(str(output))\n\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": false,
        "task_id": "0927",
        "depth": 1
    },
    {
        "description": "Polycarp has a checkered sheet of paper of size n \u00d7 m. Polycarp painted some of cells with black, the others remained white. Inspired by Malevich's \"Black Square\", Polycarp wants to paint minimum possible number of white cells with black so that all black cells form a square.\n\nYou are to determine the minimum possible number of cells needed to be painted black so that the black cells form a black square with sides parallel to the painting's sides. All the cells that do not belong to the square should be white. The square's side should have positive length.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 100) \u2014 the sizes of the sheet.\n\nThe next n lines contain m letters 'B' or 'W' each \u2014 the description of initial cells' colors. If a letter is 'B', then the corresponding cell is painted black, otherwise it is painted white.\n\nOutput\n\nPrint the minimum number of cells needed to be painted black so that the black cells form a black square with sides parallel to the painting's sides. All the cells that do not belong to the square should be white. If it is impossible, print -1.\n\nExamples\n\nInput\n\n5 4\nWWWW\nWWWB\nWWWB\nWWBB\nWWWW\n\n\nOutput\n\n5\n\n\nInput\n\n1 2\nBB\n\n\nOutput\n\n-1\n\n\nInput\n\n3 3\nWWW\nWWW\nWWW\n\n\nOutput\n\n1\n\nNote\n\nIn the first example it is needed to paint 5 cells \u2014 (2, 2), (2, 3), (3, 2), (3, 3) and (4, 2). Then there will be a square with side equal to three, and the upper left corner in (2, 2).\n\nIn the second example all the cells are painted black and form a rectangle, so it's impossible to get a square.\n\nIn the third example all cells are colored white, so it's sufficient to color any cell black.",
        "task_name": "828_B. Black Square",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,m=map(int,raw_input().split())\ncount=0\nlens=0\nfounder=[]\narr=[]\nfor i in range(n):\n\n    row=list(raw_input())\n    found=False\n\n    for j in range(m):\n        if row[j]=='B':\n            arr.append(j)\n\n            count+=1\n            found=True\n\n    if found==True:\n            founder.append(i)\n\n#founder=set(founder)\nif len(arr)!=0:\n        length=max(arr)-min(arr)\nelse:\n        length=0\nif length>lens:\n        lens=length\n\n\n\nif lens==0 and len(founder)==0:\n    print(1)\nelse:\n    x=lens+1\n    y=founder[-1]-founder[0]+1\n\n    ans=max(x,y)**2-count\n    if max(x,y)**2 > n*m:\n        print(-1)\n    else:\n        print(ans)\n\n",
        "correct": false,
        "task_id": "0928",
        "depth": 2
    },
    {
        "description": "Perhaps many have heard that the World Biathlon Championship has finished. Although our hero Valera was not present at this spectacular event himself and only watched it on TV, it excited him so much that he decided to enroll in a biathlon section.\n\nOf course, biathlon as any sport, proved very difficult in practice. It takes much time and effort. Workouts, workouts, and workouts, \u2014 that's what awaited Valera on his way to great achievements in biathlon.\n\nAs for the workouts, you all probably know that every professional biathlete should ski fast and shoot precisely at the shooting range. Only in this case you can hope to be successful, because running and shooting are the two main components of biathlon. Valera has been diligent in his ski trainings, which is why he runs really fast, however, his shooting accuracy is nothing to write home about.\n\nOn a biathlon base where Valera is preparing for the competition, there is a huge rifle range with n targets. Each target have shape of a circle, and the center of each circle is located on the Ox axis. At the last training session Valera made the total of m shots. To make monitoring of his own results easier for him, one rather well-known programmer (of course it is you) was commissioned to write a program that would reveal how many and which targets Valera hit. More specifically, for each target the program must print the number of the first successful shot (in the target), or \"-1\" if this was not hit. The target is considered hit if the shot is inside the circle or on its boundary. Valera is counting on you and perhaps, thanks to you he will one day win international competitions.\n\nInput\n\nThe first line of the input file contains the integer n (1 \u2264 n \u2264 104), which is the number of targets. The next n lines contain descriptions of the targets. Each target is a circle whose center is located on the Ox axis. Each circle is given by its coordinate of the center x ( - 2\u00b7104 \u2264 x \u2264 2\u00b7104) and its radius r (1 \u2264 r \u2264 1000). It is guaranteed that no two targets coincide, intersect or are nested into each other, but they can touch each other.\n\nThe next line contains integer m (1 \u2264 m \u2264 2\u00b7105), which is the number of shots. Next m lines contain descriptions of the shots, which are points on the plane, given by their coordinates x and y ( - 2\u00b7104 \u2264 x, y \u2264 2\u00b7104).\n\nAll the numbers in the input are integers. \n\nTargets and shots are numbered starting from one in the order of the input.\n\nOutput\n\nPrint on the first line a single number, the number of targets hit by Valera. Print on the second line for each of the targets the number of its first hit or \"-1\" (without quotes) if this number does not exist. Separate numbers with spaces.\n\nExamples\n\nInput\n\n3\n2 1\n5 2\n10 1\n5\n0 1\n1 3\n3 0\n4 0\n4 0\n\n\nOutput\n\n2\n3 3 -1 \n\n\nInput\n\n3\n3 2\n7 1\n11 2\n4\n2 1\n6 0\n6 4\n11 2\n\n\nOutput\n\n3\n1 2 4 ",
        "task_name": "84_C. Biathlon",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from bisect import bisect_left as p\nz=lambda: map(int, raw_input().split())\nn=input()\na=[z()+[i] for i in range(n)]\nb=[-1]*n\nw=0\na.sort()\nfor i in range(input()):\n    x,y=z()\n    h=p(a,[x])\n    for u in (h-1,h):\n        if 0<=u<n and (x-a[u][0])**2+y**2<=a[u][1]**2:\n            d=a[u][2]\n            if b[d]==-1:\n                b[d]=i+1\n                w+=1\nprint(w)\nprint(' '.join(map(str,b)))\n",
        "correct": true,
        "task_id": "0929",
        "depth": 2
    },
    {
        "description": "Ann and Borya have n piles with candies and n is even number. There are ai candies in pile with number i.\n\nAnn likes numbers which are square of some integer and Borya doesn't like numbers which are square of any integer. During one move guys can select some pile with candies and add one candy to it (this candy is new and doesn't belong to any other pile) or remove one candy (if there is at least one candy in this pile). \n\nFind out minimal number of moves that is required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer.\n\nInput\n\nFirst line contains one even integer n (2 \u2264 n \u2264 200 000) \u2014 number of piles with candies.\n\nSecond line contains sequence of integers a1, a2, ..., an (0 \u2264 ai \u2264 109) \u2014 amounts of candies in each pile.\n\nOutput\n\nOutput minimal number of steps required to make exactly n / 2 piles contain number of candies that is a square of some integer and exactly n / 2 piles contain number of candies that is not a square of any integer. If condition is already satisfied output 0.\n\nExamples\n\nInput\n\n4\n12 14 30 4\n\n\nOutput\n\n2\n\n\nInput\n\n6\n0 0 0 0 0 0\n\n\nOutput\n\n6\n\n\nInput\n\n6\n120 110 23 34 25 45\n\n\nOutput\n\n3\n\n\nInput\n\n10\n121 56 78 81 45 100 1 0 54 78\n\n\nOutput\n\n0\n\nNote\n\nIn first example you can satisfy condition in two moves. During each move you should add one candy to second pile. After it size of second pile becomes 16. After that Borya and Ann will have two piles with number of candies which is a square of integer (second and fourth pile) and two piles with number of candies which is not a square of any integer (first and third pile).\n\nIn second example you should add two candies to any three piles.",
        "task_name": "898_E. Squares and not squares",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math\nn =int(raw_input())\nl = list(map(int,raw_input().split()))\nzero = l.count(0)\nfor i in range(n):\n  r = round(math.sqrt(l[i]))\n  l[i] = abs(l[i]-r*r) \nl.sort()\nrzero = max(0,zero-n//2)\nprint(sum(l[0:n//2]) + rzero*2 + l[n//2:n].count(0)-rzero)",
        "correct": false,
        "task_id": "0930",
        "depth": 1
    },
    {
        "description": "Ivar the Boneless is a great leader. He is trying to capture Kattegat from Lagertha. The war has begun and wave after wave Ivar's warriors are falling in battle.\n\nIvar has n warriors, he places them on a straight line in front of the main gate, in a way that the i-th warrior stands right after (i-1)-th warrior. The first warrior leads the attack.\n\nEach attacker can take up to a_i arrows before he falls to the ground, where a_i is the i-th warrior's strength.\n\nLagertha orders her warriors to shoot k_i arrows during the i-th minute, the arrows one by one hit the first still standing warrior. After all Ivar's warriors fall and all the currently flying arrows fly by, Thor smashes his hammer and all Ivar's warriors get their previous strengths back and stand up to fight again. In other words, if all warriors die in minute t, they will all be standing to fight at the end of minute t.\n\nThe battle will last for q minutes, after each minute you should tell Ivar what is the number of his standing warriors.\n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n, q \u2264 200 000) \u2014 the number of warriors and the number of minutes in the battle.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9) that represent the warriors' strengths.\n\nThe third line contains q integers k_1, k_2, \u2026, k_q (1 \u2264 k_i \u2264 10^{14}), the i-th of them represents Lagertha's order at the i-th minute: k_i arrows will attack the warriors.\n\nOutput\n\nOutput q lines, the i-th of them is the number of standing warriors after the i-th minute.\n\nExamples\n\nInput\n\n5 5\n1 2 1 2 1\n3 10 1 1 1\n\n\nOutput\n\n3\n5\n4\n4\n3\n\n\nInput\n\n4 4\n1 2 3 4\n9 1 10 6\n\n\nOutput\n\n1\n4\n4\n1\n\nNote\n\nIn the first example: \n\n  * after the 1-st minute, the 1-st and 2-nd warriors die. \n  * after the 2-nd minute all warriors die (and all arrows left over are wasted), then they will be revived thus answer is 5 \u2014 all warriors are alive. \n  * after the 3-rd minute, the 1-st warrior dies. \n  * after the 4-th minute, the 2-nd warrior takes a hit and his strength decreases by 1. \n  * after the 5-th minute, the 2-nd warrior dies. ",
        "task_name": "975_C. Valhalla Siege",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,q=map(int,raw_input().split())\narr1=list(map(int,raw_input().split()))\narr2=list(map(int,raw_input().split()))\ni=0\nj=0\nans=n\nz=0\nwhile(j<q):\n\tflag=0\n\tk=arr2[j]\n\tsum1=-z\n\twhile(sum1+arr1[i]<=k):\n\t\tsum1+=arr1[i]\n\t\tans-=1\n\t\ti+=1\n\t\tif(ans==0 and sum1<=k):\n\t\t\tflag=1\n\t\t\tans=n\n\t\t\ti=0\n\t\t\tbreak\n\t#print(sum1)\n\t#print(ans,z,k)\n\tif(sum1==k):\n\t\tz=0\n\telif(sum1+arr1[i]>k and flag==0):\n\t\tz=k-sum1\n\tprint(ans)\n\tj+=1\n\n\n\n\n\n\n\n\n\n\n",
        "correct": false,
        "task_id": "0931",
        "depth": 2
    },
    {
        "description": "Allen is hosting a formal dinner party. 2n people come to the event in n pairs (couples). After a night of fun, Allen wants to line everyone up for a final picture. The 2n people line up, but Allen doesn't like the ordering. Allen prefers if each pair occupies adjacent positions in the line, as this makes the picture more aesthetic.\n\nHelp Allen find the minimum number of swaps of adjacent positions he must perform to make it so that each couple occupies adjacent positions in the line.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100), the number of pairs of people.\n\nThe second line contains 2n integers a_1, a_2, ..., a_{2n}. For each i with 1 \u2264 i \u2264 n, i appears exactly twice. If a_j = a_k = i, that means that the j-th and k-th people in the line form a couple.\n\nOutput\n\nOutput a single integer, representing the minimum number of adjacent swaps needed to line the people up so that each pair occupies adjacent positions.\n\nExamples\n\nInput\n\n4\n1 1 2 3 3 2 4 4\n\n\nOutput\n\n2\n\n\nInput\n\n3\n1 1 2 2 3 3\n\n\nOutput\n\n0\n\n\nInput\n\n3\n3 1 2 3 1 2\n\n\nOutput\n\n3\n\nNote\n\nIn the first sample case, we can transform 1 1 2 3 3 2 4 4 \u2192 1 1 2 3 2 3 4 4 \u2192 1 1 2 2 3 3 4 4 in two steps. Note that the sequence 1 1 2 3 3 2 4 4 \u2192 1 1 3 2 3 2 4 4 \u2192 1 1 3 3 2 2 4 4 also works in the same number of steps.\n\nThe second sample case already satisfies the constraints; therefore we need 0 swaps.",
        "task_name": "995_B. Suit and Tie",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n\n# target Expert  \n\n# Author : raj1307 - Raj Singh\n# Date   : 28.08.19\n\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n#from itertools import permutations\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n\ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\n\n\n\n\ndef main():\n\n    \n\n    #for _ in range(ii()):\n\n    \n    n=ii()\n    a=li()\n    \n    f=[-1]*222\n\n    for i in range(2*n):\n        if f[a[i]]==-1:\n            f[a[i]]=i\n\n\n    ans=0\n\n    for i in range(2*n):\n        for j in range(i):\n\n            if f[a[i]]<f[a[j]]:\n                ans+=1\n\n    print(ans)\n\n\n\n\n\n\n\n\n    \n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    #read()\n    main()\n    #dmain()\n\n# Comment Read()\n",
        "correct": true,
        "task_id": "0932",
        "depth": 2
    },
    {
        "description": "Given are an integer X and an integer sequence of length N: p_1, \\ldots, p_N.\n\nAmong the integers not contained in the sequence p_1, \\ldots, p_N (not necessarily positive), find the integer nearest to X, that is, find the integer whose absolute difference with X is the minimum. If there are multiple such integers, report the smallest such integer.\n\nConstraints\n\n* 1 \\leq X \\leq 100\n* 0 \\leq N \\leq 100\n* 1 \\leq p_i \\leq 100\n* p_1, \\ldots, p_N are all distinct.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX N\np_1 ... p_N\n\n\nOutput\n\nPrint the answer.\n\nExamples\n\nInput\n\n6 5\n4 7 10 6 5\n\n\nOutput\n\n8\n\n\nInput\n\n10 5\n4 7 10 6 5\n\n\nOutput\n\n9\n\n\nInput\n\n100 0\n\n\nOutput\n\n100",
        "task_name": "p02641 AtCoder Beginner Contest 170 - Forbidden List",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = 10**20\ndef I(): return int(input())\ndef F(): return float(input())\ndef S(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LS(): return input().split()\n\ndef resolve():\n    X, N = LI()\n    if N == 0:\n        print(X)\n        return\n\n    p = LI()\n\n    p_max = max(p)\n    p_min = min(p)\n\n    if X < p_min or p_max < X:\n        print(X)\n    else:\n        d = [abs(i-X) for i in range(p_min, p_max+1) if i not in p]\n        d_min = min(d)\n        for i in range(p_min, p_max+1):\n            if i not in p:\n                if abs(i-X)==d_min:\n                    print(i)\n                    break\n\nif __name__ == '__main__':\n    resolve()\n",
        "correct": false,
        "task_id": "0933",
        "depth": 1
    },
    {
        "description": "There are N blocks, numbered 1, 2, \\ldots, N. For each i (1 \\leq i \\leq N), Block i has a weight of w_i, a solidness of s_i and a value of v_i.\n\nTaro has decided to build a tower by choosing some of the N blocks and stacking them vertically in some order. Here, the tower must satisfy the following condition:\n\n* For each Block i contained in the tower, the sum of the weights of the blocks stacked above it is not greater than s_i.\n\n\n\nFind the maximum possible sum of the values of the blocks contained in the tower.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^3\n* 1 \\leq w_i, s_i \\leq 10^4\n* 1 \\leq v_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nw_1 s_1 v_1\nw_2 s_2 v_2\n:\nw_N s_N v_N\n\n\nOutput\n\nPrint the maximum possible sum of the values of the blocks contained in the tower.\n\nExamples\n\nInput\n\n3\n2 2 20\n2 1 30\n3 1 40\n\n\nOutput\n\n50\n\n\nInput\n\n4\n1 2 10\n3 1 10\n2 4 10\n1 6 10\n\n\nOutput\n\n40\n\n\nInput\n\n5\n1 10000 1000000000\n1 10000 1000000000\n1 10000 1000000000\n1 10000 1000000000\n1 10000 1000000000\n\n\nOutput\n\n5000000000\n\n\nInput\n\n8\n9 5 7\n6 2 7\n5 7 3\n7 8 8\n1 9 6\n3 3 3\n4 1 7\n4 5 5\n\n\nOutput\n\n22",
        "task_name": "p03183 Educational DP Contest - Tower",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nsys.setrecursionlimit(int(1e7+5))\n\nn = int(raw_input())\nw = [0]*n\ns = [0]*n\nv = [0]*n\n\nfor i in range(n):\n    w[i], s[i], v[i] = list(map(int, raw_input().split()))\n    \na = []\nfor i in range(n):\n    a.append((w[i], s[i], v[i]))\n\n\n\ndef compare(p, q):\n    return p[0]+p[1]-q[0]-q[1]\n    # if (p[0]>q[0]):\n    #     return 1\n    # elif (p[0]<q[0]):\n    #     return -1;\n    # else:\n    #     return p[1]-q[1]\n\na.sort(cmp=compare)\n\nw = [x[0] for x in a]\ns = [x[1] for x in a]\nv = [x[2] for x in a]\n\ndp = [[-1]*(10000+1) for i in range(1000+1)]\n\ndef solve(i, wsum):\n    if (i==n):\n        return 0\n    if wsum>1e4:\n        return 0\n    \n    if (dp[i][wsum]!=-1):\n        return dp[i][wsum]\n\n    ans = 0\n\n    if s[i]>=wsum:\n        ans = max(ans, v[i]+solve(i+1, wsum+w[i]))\n        ans = max(ans, solve(i+1, wsum))\n    else:\n        ans = max(ans, solve(i+1, wsum))\n\n    dp[i][wsum]=ans\n    return ans\n\nprint(solve(0, 0))\n        ",
        "correct": false,
        "task_id": "0936",
        "depth": 1
    },
    {
        "description": "There is a box containing N balls. The i-th ball has the integer A_i written on it. Snuke can perform the following operation any number of times:\n\n* Take out two balls from the box. Then, return them to the box along with a new ball, on which the absolute difference of the integers written on the two balls is written.\n\n\n\nDetermine whether it is possible for Snuke to reach the state where the box contains a ball on which the integer K is written.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 1 \\leq A_i \\leq 10^9\n* 1 \\leq K \\leq 10^9\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nA_1 A_2 ... A_N\n\n\nOutput\n\nIf it is possible for Snuke to reach the state where the box contains a ball on which the integer K is written, print `POSSIBLE`; if it is not possible, print `IMPOSSIBLE`.\n\nExamples\n\nInput\n\n3 7\n9 3 4\n\n\nOutput\n\nPOSSIBLE\n\n\nInput\n\n3 5\n6 9 3\n\n\nOutput\n\nIMPOSSIBLE\n\n\nInput\n\n4 11\n11 3 7 15\n\n\nOutput\n\nPOSSIBLE\n\n\nInput\n\n5 12\n10 2 8 6 4\n\n\nOutput\n\nIMPOSSIBLE",
        "task_name": "p03651 AtCoder Grand Contest 018 - Getting Difference",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\nfrom fractions import gcd\n\n\nN, K = map(int, raw_input().split())\nA = sorted(list(map(int, raw_input().split())))\n\n\nif K > A[-1]:\n    print('IMPOSSIBLE')\nelse:\n    flag = True\n    tmp = reduce(gcd, A)\n    if tmp != 1:\n        flag = False\n    for a in A:\n        if a == K or (K - a) % tmp == 0:\n            flag = True\n            break\n    if flag:\n        print(\"POSSIBLE\")\n    else:\n        print('IMPOSSIBLE')\n",
        "correct": true,
        "task_id": "0938",
        "depth": 1
    },
    {
        "description": "There are N integers written on a blackboard. The i-th integer is A_i.\n\nTakahashi will repeatedly perform the following operation on these numbers:\n\n* Select a pair of integers, A_i and A_j, that have the same parity (that is, both are even or both are odd) and erase them.\n* Then, write a new integer on the blackboard that is equal to the sum of those integers, A_i+A_j.\n\n\n\nDetermine whether it is possible to have only one integer on the blackboard.\n\nConstraints\n\n* 2 \u2266 N \u2266 10^5\n* 1 \u2266 A_i \u2266 10^9\n* A_i is an integer.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 \u2026 A_N\n\n\nOutput\n\nIf it is possible to have only one integer on the blackboard, print `YES`. Otherwise, print `NO`.\n\nExamples\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\nYES\n\n\nInput\n\n5\n1 2 3 4 5\n\n\nOutput\n\nNO",
        "task_name": "p03807 AtCoder Grand Contest 010 - Addition",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N = int(raw_input())\nA = list(map(int, raw_input().split(' ')))\n\ncnt = 0\nfor a in A:\n    cnt += 1 if a & 1 == 1 else 0\n\nprint('YES' if cnt % 2 == 0 else 'NO')",
        "correct": true,
        "task_id": "0939",
        "depth": 1
    },
    {
        "description": "The new PIN is hard to remember. I was told that I shouldn't take notes, but I don't think I can remember them. Therefore, I decided to embed a numerical value in the text and make a note of the PIN. Here, the sum of all the numbers is the PIN.\n\nCreate a program that reads the memorandum and outputs the PIN code.\n\n\n\nInput\n\nSentences with embedded positive integers are given over multiple lines. Each line is a character string containing single-byte alphanumeric characters, symbols, and spaces, or a blank line. However, you are guaranteed to enter no more than 80 characters per line and a PIN of 10,000 or less.\n\nOutput\n\nThe PIN (the sum of positive integers in the text) is output on one line.\n\nExample\n\nInput\n\nThereare100yenonthetable.Iam17yearsold.\nIshouldgohomeat6pm.\n\n\nOutput\n\n123",
        "task_name": "p00064 Secret Number",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom __future__ import (division, absolute_import, print_function,\n                        unicode_literals)\nfrom sys import stdin\n\ns = 0\nfor line in stdin:\n    digit = bytearray()\n    for c in line:\n        if c.isdigit():\n            digit.append(c)\n        elif digit:\n            s += int(digit)\n            digit = bytearray()\n\nprint(s)",
        "correct": true,
        "task_id": "0941",
        "depth": 2
    },
    {
        "description": "There are a number of ways to shuffle a deck of cards. Hanafuda shuffling for Japanese card game 'Hanafuda' is one such example. The following is how to perform Hanafuda shuffling.\n\nThere is a deck of n cards. Starting from the p-th card from the top of the deck, c cards are pulled out and put on the top of the deck, as shown in Figure 1. This operation, called a cutting operation, is repeated.\n\nWrite a program that simulates Hanafuda shuffling and answers which card will be finally placed on the top of the deck.\n\n<image>\n---\nFigure 1: Cutting operation\n\n\n\nInput\n\nThe input consists of multiple data sets. Each data set starts with a line containing two positive integers n (1 <= n <= 50) and r (1 <= r <= 50); n and r are the number of cards in the deck and the number of cutting operations, respectively.\n\nThere are r more lines in the data set, each of which represents a cutting operation. These cutting operations are performed in the listed order. Each line contains two positive integers p and c (p + c <= n + 1). Starting from the p-th card from the top of the deck, c cards should be pulled out and put on the top.\n\nThe end of the input is indicated by a line which contains two zeros.\n\nEach input line contains exactly two integers separated by a space character. There are no other characters in the line.\n\nOutput\n\nFor each data set in the input, your program should write the number of the top card after the shuffle. Assume that at the beginning the cards are numbered from 1 to n, from the bottom to the top. Each number should be written in a separate line without any superfluous characters such as leading or following spaces.\n\nExample\n\nInput\n\n5 2\n3 1\n3 1\n10 3\n1 10\n10 1\n8 3\n0 0\n\n\nOutput\n\n4\n4",
        "task_name": "p00710 Hanafuda Shuffle",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "while True:\n    n, r = map(int, input().split())\n    if n == 0 and r == 0:\n        break\n\n    l = []\n    for i in range(1, n + 1):\n        l.append(i)\n\n    for i in range(0, r):\n        p, c = map(int, input().split())\n        tmp = l[len(l) - p + 1:len(l)]\n        del l[len(l) - p + 1:len(l)]\n        l[len(l) - c:len(l) - c] = tmp\n\n    print(l[len(l) - 1])",
        "correct": false,
        "task_id": "0942",
        "depth": 2
    },
    {
        "description": "A binary heap which satisfies max-heap property is called max-heap. In a max-heap, for every node $i$ other than the root, $A[i] \\leq A[parent(i)]$, that is, the value of a node is at most the value of its parent. The largest element in a max-heap is stored at the root, and the subtree rooted at a node contains values no larger than that contained at the node itself.\n\nHere is an example of a max-heap.\n\n<image>\n\n\nWrite a program which reads an array and constructs a max-heap from the array based on the following pseudo code.\n\n$maxHeapify(A, i)$ move the value of $A[i]$ down to leaves to make a sub-tree of node $i$ a max-heap. Here, $H$ is the size of the heap.\n\n\n1  maxHeapify(A, i)\n2      l = left(i)\n3      r = right(i)\n4      // select the node which has the maximum value\n5      if l \u2264 H and A[l] > A[i]\n6          largest = l\n7      else\n8          largest = i\n9      if r \u2264 H and A[r] > A[largest]\n10         largest = r\n11\n12     if largest \u2260 i\u3000// value of children is larger than that of i\n13         swap A[i] and A[largest]\n14         maxHeapify(A, largest) // call recursively\n\n\nThe following procedure buildMaxHeap(A) makes $A$ a max-heap by performing maxHeapify in a bottom-up manner.\n\n\n1 buildMaxHeap(A)\n2    for i = H/2 downto 1\n3        maxHeapify(A, i)\n\n\n\n\nInput\n\nIn the first line, an integer $H$ is given. In the second line, $H$ integers which represent elements in the binary heap are given in order of node id (from $1$ to $H$).\n\nOutput\n\nPrint values of nodes in the max-heap in order of their id (from $1$ to $H$). Print a single space character before each value.\n\nExample\n\nInput\n\n10\n4 1 3 2 16 9 10 14 8 7\n\n\nOutput\n\n16 14 10 8 7 9 3 2 4 1",
        "task_name": "p02288 Maximum Heap",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\ndef get_left(i):\n    return 2 * i + 1\n\ndef get_right(i):\n    return 2 * i + 2\n\ndef get_parent(i):\n    return int((i-1)/2)\n\ndef make_heap_tree(array, i, item_num):\n    left = get_left(i)\n    right = get_right(i)\n    largest = i\n    if (left < item_num) and (array[left] > array[largest]):\n        largest = left\n    if (right < item_num) and (array[right] > array[largest]):\n        largest = right\n    if largest != i:\n        tmp = array[i]\n        array[i] = array[largest]\n        array[largest] = tmp\n        make_heap_tree(array, largest, item_num)\n\ndef main():\n    size = int(sys.stdin.readline().strip())\n    array = map(lambda x: int(x), sys.stdin.readline().strip().split(\" \"))\n    for i in reversed(range(0, get_parent(size))):\n        make_heap_tree(array, i, size)\n\nif __name__ == \"__main__\":\n    main()",
        "correct": false,
        "task_id": "0943",
        "depth": 1
    },
    {
        "description": "Let's call an undirected graph G = (V, E) relatively prime if and only if for each edge (v, u) \u2208 E GCD(v, u) = 1 (the greatest common divisor of v and u is 1). If there is no edge between some pair of vertices v and u then the value of GCD(v, u) doesn't matter. The vertices are numbered from 1 to |V|.\n\nConstruct a relatively prime graph with n vertices and m edges such that it is connected and it contains neither self-loops nor multiple edges.\n\nIf there exists no valid graph with the given number of vertices and edges then output \"Impossible\".\n\nIf there are multiple answers then print any of them.\n\nInput\n\nThe only line contains two integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the number of vertices and the number of edges.\n\nOutput\n\nIf there exists no valid graph with the given number of vertices and edges then output \"Impossible\".\n\nOtherwise print the answer in the following format:\n\nThe first line should contain the word \"Possible\".\n\nThe i-th of the next m lines should contain the i-th edge (v_i, u_i) of the resulting graph (1 \u2264 v_i, u_i \u2264 n, v_i \u2260 u_i). For each pair (v, u) there can be no more pairs (v, u) or (u, v). The vertices are numbered from 1 to n.\n\nIf there are multiple answers then print any of them.\n\nExamples\n\nInput\n\n5 6\n\n\nOutput\n\nPossible\n2 5\n3 2\n5 1\n3 4\n4 1\n5 4\n\n\nInput\n\n6 12\n\n\nOutput\n\nImpossible\n\nNote\n\nHere is the representation of the graph from the first example: <image>",
        "task_name": "1009_D. Relatively Prime Graph",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom fractions import gcd\n\nn, m = map(int, stdin.readline().split())\nedges, cur = [], 0\n\nfor i in range(1, n):\n    for j in range(i + 1, n + 1):\n        if not m:\n            break\n\n        if gcd(i, j) == 1:\n            m -= 1\n            edges.append('%d %d' % (i, j))\n            cur = max(cur, j)\n\nif m or cur != n:\n    print('Impossible')\nelse:\n    print('%s\\n%s' % ('Possible', '\\n'.join(edges)))\n",
        "correct": true,
        "task_id": "0944",
        "depth": 2
    },
    {
        "description": "The king's birthday dinner was attended by k guests. The dinner was quite a success: every person has eaten several dishes (though the number of dishes was the same for every person) and every dish was served alongside with a new set of kitchen utensils.\n\nAll types of utensils in the kingdom are numbered from 1 to 100. It is known that every set of utensils is the same and consist of different types of utensils, although every particular type may appear in the set at most once. For example, a valid set of utensils can be composed of one fork, one spoon and one knife.\n\nAfter the dinner was over and the guests were dismissed, the king wondered what minimum possible number of utensils could be stolen. Unfortunately, the king has forgotten how many dishes have been served for every guest but he knows the list of all the utensils left after the dinner. Your task is to find the minimum possible number of stolen utensils.\n\nInput\n\nThe first line contains two integer numbers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 100) \u2014 the number of kitchen utensils remaining after the dinner and the number of guests correspondingly.\n\nThe next line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 100) \u2014 the types of the utensils remaining. Equal values stand for identical utensils while different values stand for different utensils.\n\nOutput\n\nOutput a single value \u2014 the minimum number of utensils that could be stolen by the guests.\n\nExamples\n\nInput\n\n\n5 2\n1 2 2 1 3\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n10 3\n1 3 3 1 3 5 5 5 5 100\n\n\nOutput\n\n\n14\n\nNote\n\nIn the first example it is clear that at least one utensil of type 3 has been stolen, since there are two guests and only one such utensil. But it is also possible that every person received only one dish and there were only six utensils in total, when every person got a set (1, 2, 3) of utensils. Therefore, the answer is 1.\n\nOne can show that in the second example at least 2 dishes should have been served for every guest, so the number of utensils should be at least 24: every set contains 4 utensils and every one of the 3 guests gets two such sets. Therefore, at least 14 objects have been stolen. Please note that utensils of some types (for example, of types 2 and 4 in this example) may be not present in the set served for dishes.",
        "task_name": "1032_A. Kitchen Utensils",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nn,k = map(int,stdin.readline().split())\na = map(int,stdin.readline().split())\ndi = {}\nfor i in a:\n    di[i] = di.get(i,0) + 1\nma = 0\nfor i in di:\n    ma  = max(ma,di[i])\nprint (len(set(a)) * ( (ma + k-1)/k)) - n",
        "correct": false,
        "task_id": "0945",
        "depth": 1
    },
    {
        "description": "The legend of the foundation of Vectorland talks of two integers x and y. Centuries ago, the array king placed two markers at points |x| and |y| on the number line and conquered all the land in between (including the endpoints), which he declared to be Arrayland. Many years later, the vector king placed markers at points |x - y| and |x + y| and conquered all the land in between (including the endpoints), which he declared to be Vectorland. He did so in such a way that the land of Arrayland was completely inside (including the endpoints) the land of Vectorland.\n\nHere |z| denotes the absolute value of z.\n\nNow, Jose is stuck on a question of his history exam: \"What are the values of x and y?\" Jose doesn't know the answer, but he believes he has narrowed the possible answers down to n integers a_1, a_2, ..., a_n. Now, he wants to know the number of unordered pairs formed by two different elements from these n integers such that the legend could be true if x and y were equal to these two values. Note that it is possible that Jose is wrong, and that no pairs could possibly make the legend true.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of choices.\n\nThe second line contains n pairwise distinct integers a_1, a_2, ..., a_n (-10^9 \u2264 a_i \u2264 10^9) \u2014 the choices Jose is considering.\n\nOutput\n\nPrint a single integer number \u2014 the number of unordered pairs \\\\{x, y\\} formed by different numbers from Jose's choices that could make the legend true.\n\nExamples\n\nInput\n\n\n3\n2 5 -3\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n2\n3 6\n\n\nOutput\n\n\n1\n\nNote\n\nConsider the first sample. For the pair \\{2, 5\\}, the situation looks as follows, with the Arrayland markers at |2| = 2 and |5| = 5, while the Vectorland markers are located at |2 - 5| = 3 and |2 + 5| = 7:\n\n<image>\n\nThe legend is not true in this case, because the interval [2, 3] is not conquered by Vectorland. For the pair \\{5, -3\\} the situation looks as follows, with Arrayland consisting of the interval [3, 5] and Vectorland consisting of the interval [2, 8]:\n\n<image>\n\nAs Vectorland completely contains Arrayland, the legend is true. It can also be shown that the legend is true for the pair \\{2, -3\\}, for a total of two pairs.\n\nIn the second sample, the only pair is \\{3, 6\\}, and the situation looks as follows:\n\n<image>\n\nNote that even though Arrayland and Vectorland share 3 as endpoint, we still consider Arrayland to be completely inside of Vectorland.",
        "task_name": "1166_C. A Tale of Two Lands",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import fileinput\ndef D(a):print(a)\ndef S(s,I):return int(s.split(\" \")[I])\ndef main():\n    z=0\n    N=0\n    A=0\n    I=0\n    o=0\n    for l in fileinput.input():\n        z+=1\n        if(z<2):N=int(l)\n        else: A=map(int,l.split(\" \"))\n    for i in range(N):A[i]=abs(A[i])\n    A.sort()\n    for i in range(N):\n        while(I<N and A[i]*2>=A[I]):I+=1\n        o+=I-i-1\n    D(o)\nmain()\n",
        "correct": true,
        "task_id": "0947",
        "depth": 2
    },
    {
        "description": "There are n boxers, the weight of the i-th boxer is a_i. Each of them can change the weight by no more than 1 before the competition (the weight cannot become equal to zero, that is, it must remain positive). Weight is always an integer number.\n\nIt is necessary to choose the largest boxing team in terms of the number of people, that all the boxers' weights in the team are different (i.e. unique).\n\nWrite a program that for given current values \u200ba_i will find the maximum possible number of boxers in a team.\n\nIt is possible that after some change the weight of some boxer is 150001 (but no more).\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 150000) \u2014 the number of boxers. The next line contains n integers a_1, a_2, ..., a_n, where a_i (1 \u2264 a_i \u2264 150000) is the weight of the i-th boxer.\n\nOutput\n\nPrint a single integer \u2014 the maximum possible number of people in a team.\n\nExamples\n\nInput\n\n4\n3 2 4 1\n\n\nOutput\n\n4\n\n\nInput\n\n6\n1 1 1 4 4 4\n\n\nOutput\n\n5\n\nNote\n\nIn the first example, boxers should not change their weights \u2014 you can just make a team out of all of them.\n\nIn the second example, one boxer with a weight of 1 can be increased by one (get the weight of 2), one boxer with a weight of 4 can be reduced by one, and the other can be increased by one (resulting the boxers with a weight of 3 and 5, respectively). Thus, you can get a team consisting of boxers with weights of 5, 4, 3, 2, 1.",
        "task_name": "1203_E. Boxers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from itertools import chain\n\nn = int(raw_input())\na = list(sorted(map(int,raw_input().split())))\n\nteam = set()\n\nfor boxer in a :\n    if boxer - 1 > 0 and boxer - 1 <= 150001 and boxer - 1 not in team :\n    \tteam.add(boxer - 1)\n    elif boxer > 0 and boxer <= 150001 and boxer not in team :\n    \tteam.add(boxer)\n    elif boxer + 1 > 0 and boxer + 1 <= 150001 and boxer + 1 not in team :\n    \tteam.add(boxer + 1)\n\nprint(len(team),team)\n\n#print(min(\n#\tn, len(\n#\t\tset(\n#\t\t\tlist(\n#\t\t\t\tfilter(lambda x : 0<x<=150001,\n#\t\t\t\t\tchain.from_iterable([[i-1,i,i+1] for i in a])\n#\t\t\t\t\t)\n#\t\t\t\t)\n#\t\t\t)\n#\t\t)\n#\t)\n#)\n",
        "correct": false,
        "task_id": "0949",
        "depth": 1
    },
    {
        "description": "Mike and Ann are sitting in the classroom. The lesson is boring, so they decided to play an interesting game. Fortunately, all they need to play this game is a string s and a number k (0 \u2264 k < |s|).\n\nAt the beginning of the game, players are given a substring of s with left border l and right border r, both equal to k (i.e. initially l=r=k). Then players start to make moves one by one, according to the following rules:\n\n  * A player chooses l^{\\prime} and r^{\\prime} so that l^{\\prime} \u2264 l, r^{\\prime} \u2265 r and s[l^{\\prime}, r^{\\prime}] is lexicographically less than s[l, r]. Then the player changes l and r in this way: l := l^{\\prime}, r := r^{\\prime}.\n  * Ann moves first.\n  * The player, that can't make a move loses.\n\n\n\nRecall that a substring s[l, r] (l \u2264 r) of a string s is a continuous segment of letters from s that starts at position l and ends at position r. For example, \"ehn\" is a substring (s[3, 5]) of \"aaaehnsvz\" and \"ahz\" is not.\n\nMike and Ann were playing so enthusiastically that they did not notice the teacher approached them. Surprisingly, the teacher didn't scold them, instead of that he said, that he can figure out the winner of the game before it starts, even if he knows only s and k.\n\nUnfortunately, Mike and Ann are not so keen in the game theory, so they ask you to write a program, that takes s and determines the winner for all possible k.\n\nInput\n\nThe first line of the input contains a single string s (1 \u2264 |s| \u2264 5 \u22c5 10^5) consisting of lowercase English letters.\n\nOutput\n\nPrint |s| lines.\n\nIn the line i write the name of the winner (print Mike or Ann) in the game with string s and k = i, if both play optimally\n\nExamples\n\nInput\n\n\nabba\n\n\nOutput\n\n\nMike\nAnn\nAnn\nMike\n\n\nInput\n\n\ncba\n\n\nOutput\n\n\nMike\nMike\nMike",
        "task_name": "1220_C. Substring Game in the Lesson",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    s = [ord(c) - 97 for c in input()]\n\n    t = float('inf')\n    m = [0] * (len(s) + 1)\n    m[0] = float('inf')\n\n    for i, j in enumerate(s):\n        t = min(j, t)\n        m[i + 1] = t\n\n    for k, i in enumerate(s):\n        if i <= m[k]:\n            print('Mike')\n        else:\n            print('Ann')\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": true,
        "task_id": "0950",
        "depth": 1
    },
    {
        "description": "So the Beautiful Regional Contest (BeRC) has come to an end! n students took part in the contest. The final standings are already known: the participant in the i-th place solved p_i problems. Since the participants are primarily sorted by the number of solved problems, then p_1 \u2265 p_2 \u2265 ... \u2265 p_n.\n\nHelp the jury distribute the gold, silver and bronze medals. Let their numbers be g, s and b, respectively. Here is a list of requirements from the rules, which all must be satisfied:\n\n  * for each of the three types of medals, at least one medal must be awarded (that is, g>0, s>0 and b>0); \n  * the number of gold medals must be strictly less than the number of silver and the number of bronze (that is, g<s and g<b, but there are no requirements between s and b); \n  * each gold medalist must solve strictly more problems than any awarded with a silver medal; \n  * each silver medalist must solve strictly more problems than any awarded a bronze medal; \n  * each bronze medalist must solve strictly more problems than any participant not awarded a medal; \n  * the total number of medalists g+s+b should not exceed half of all participants (for example, if n=21, then you can award a maximum of 10 participants, and if n=26, then you can award a maximum of 13 participants). \n\n\n\nThe jury wants to reward with medals the total maximal number participants (i.e. to maximize g+s+b) so that all of the items listed above are fulfilled. Help the jury find such a way to award medals.\n\nInput\n\nThe first line of the input contains an integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the input. Then t test cases follow.\n\nThe first line of a test case contains an integer n (1 \u2264 n \u2264 4\u22c510^5) \u2014 the number of BeRC participants. The second line of a test case contains integers p_1, p_2, ..., p_n (0 \u2264 p_i \u2264 10^6), where p_i is equal to the number of problems solved by the i-th participant from the final standings. The values p_i are sorted in non-increasing order, i.e. p_1 \u2265 p_2 \u2265 ... \u2265 p_n.\n\nThe sum of n over all test cases in the input does not exceed 4\u22c510^5.\n\nOutput\n\nPrint t lines, the j-th line should contain the answer to the j-th test case.\n\nThe answer consists of three non-negative integers g, s, b.\n\n  * Print g=s=b=0 if there is no way to reward participants with medals so that all requirements from the statement are satisfied at the same time. \n  * Otherwise, print three positive numbers g, s, b \u2014 the possible number of gold, silver and bronze medals, respectively. The sum of g+s+b should be the maximum possible. If there are several answers, print any of them. \n\nExample\n\nInput\n\n\n5\n12\n5 4 4 3 2 2 1 1 1 1 1 1\n4\n4 3 2 1\n1\n1000000\n20\n20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n32\n64 64 63 58 58 58 58 58 37 37 37 37 34 34 28 28 28 28 28 28 24 24 19 17 17 17 17 16 16 16 16 11\n\n\nOutput\n\n\n1 2 3\n0 0 0\n0 0 0\n2 5 3\n2 6 6\n\nNote\n\nIn the first test case, it is possible to reward 1 gold, 2 silver and 3 bronze medals. In this case, the participant solved 5 tasks will be rewarded with the gold medal, participants solved 4 tasks will be rewarded with silver medals, participants solved 2 or 3 tasks will be rewarded with bronze medals. Participants solved exactly 1 task won't be rewarded. It's easy to see, that in this case, all conditions are satisfied and it is possible to reward participants in this way. It is impossible to give more than 6 medals because the number of medals should not exceed half of the number of participants. The answer 1, 3, 2 is also correct in this test case.\n\nIn the second and third test cases, it is impossible to reward medals, because at least one medal of each type should be given, but the number of medals should not exceed half of the number of participants.",
        "task_name": "1265_C. Beautiful Regional Contest",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "input = raw_input\nrange = xrange\n\nfrom collections import Counter\n\ndef answer():\n    m = int(input())\n    half_m = m / 2.\n\n    ps = map(int, input().split(\" \"))\n    c = Counter(ps)\n\n    keys = sorted(c.keys())\n\n    gold_key = keys[-1]\n    gold_num = c[gold_key]\n\n    other_keys = keys[0:-1]\n\n    if len(other_keys) == 0:\n        return \"0 0 0\"\n\n    cur_num = 0\n    ok = False\n    for key_i, key in enumerate(other_keys):\n        val = c[key]\n        cur_num += val\n        if cur_num >= half_m:\n            ok = True\n            break\n\n    if not ok:\n        return \"0 0 0\"\n\n    no_num = cur_num\n\n    other_keys = other_keys[key_i+1:]\n    bronze_num = 0\n    ok = False\n    for key_i, key in enumerate(other_keys):\n        val = c[key]\n        bronze_num += val\n        if bronze_num > gold_num:\n            ok = True\n            break\n    if not ok:\n        return \"0 0 0\"\n\n    other_keys = other_keys[key_i+1:]\n\n    silver_num = m - bronze_num - no_num - gold_num\n    if gold_num > silver_num:\n        return \"0 0 0\"\n   \n    out = \"%d %d %d\" % (gold_num, silver_num, bronze_num)\n    return out\n\nn = int(input())\nfor i in range(n):\n    out = answer()\n    print(out)",
        "correct": false,
        "task_id": "0951",
        "depth": 1
    },
    {
        "description": "Ashish has an array a of consisting of 2n positive integers. He wants to compress a into an array b of size n-1. To do this, he first discards exactly 2 (any two) elements from a. He then performs the following operation until there are no elements left in a: \n\n  * Remove any two elements from a and append their sum to b. \n\n\n\nThe compressed array b has to have a special property. The greatest common divisor (gcd) of all its elements should be greater than 1.\n\nRecall that the gcd of an array of positive integers is the biggest integer that is a divisor of all integers in the array.\n\nIt can be proven that it is always possible to compress array a into an array b of size n-1 such that gcd(b_1, b_2..., b_{n-1}) > 1. \n\nHelp Ashish find a way to do so.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (2 \u2264 n \u2264 1000).\n\nThe second line of each test case contains 2n integers a_1, a_2, \u2026, a_{2n} (1 \u2264 a_i \u2264 1000) \u2014 the elements of the array a.\n\nOutput\n\nFor each test case, output n-1 lines \u2014 the operations performed to compress the array a to the array b. The initial discard of the two elements is not an operation, you don't need to output anything about it.\n\nThe i-th line should contain two integers, the indices (1 \u2014based) of the two elements from the array a that are used in the i-th operation. All 2n-2 indices should be distinct integers from 1 to 2n.\n\nYou don't need to output two initially discarded elements from a.\n\nIf there are multiple answers, you can find any.\n\nExample\n\nInput\n\n\n3\n3\n1 2 3 4 5 6\n2\n5 7 9 10\n5\n1 3 3 4 5 90 100 101 2 3\n\n\nOutput\n\n\n3 6\n4 5\n3 4\n1 9\n2 3\n4 5\n6 10\n\nNote\n\nIn the first test case, b = \\{3+6, 4+5\\} = \\{9, 9\\} and gcd(9, 9) = 9.\n\nIn the second test case, b = \\{9+10\\} = \\{19\\} and gcd(19) = 19.\n\nIn the third test case, b = \\{1+2, 3+3, 4+5, 90+3\\} = \\{3, 6, 9, 93\\} and gcd(3, 6, 9, 93) = 3.",
        "task_name": "1370_B. GCD Compression",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math as mt \nfrom collections import Counter, defaultdict\nFAST_IO = 1\nif FAST_IO:\n    import io, sys, atexit\n    rr = iter(sys.stdin.read().splitlines()).next\n    sys.stdout = _OUTPUT_BUFFER = io.BytesIO()\n    @atexit.register\n    def write():\n        sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\nelse:\n    rr = raw_input\nrri = lambda: int(rr())\nrrm = lambda: map(int, rr().split())\n\n\ndef solve(N, arr):\n    num_even, num_odd = 0, 0\n    even, odd = [], []\n    for i in range(N*2):\n        if arr[i]%2:\n            num_odd+=1\n            odd.append(i)\n        else:\n            num_even+=1\n            even.append(i)\n    if len(even)>=2*(N-1):\n        return even[:2*N-2]\n    else:\n        N-=1\n        N-= len(even)/2\n        return even[:(len(even)-len(even)%2)]+odd[:2*N]\nt = rri()\nfor _ in range(t):\n    n = rri()\n    arr = rrm()\n    ans = solve(n, arr)\n    for i in range(n-1):\n        print(str(ans[2*i]+1)+' '+str(ans[2*i+1]+1))\n    ",
        "correct": true,
        "task_id": "0952",
        "depth": 2
    },
    {
        "description": "You are given an array a consisting of n integers numbered from 1 to n.\n\nLet's define the k-amazing number of the array as the minimum number that occurs in all of the subsegments of the array having length k (recall that a subsegment of a of length k is a contiguous part of a containing exactly k elements). If there is no integer occuring in all subsegments of length k for some value of k, then the k-amazing number is -1.\n\nFor each k from 1 to n calculate the k-amazing number of the array a.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 \u2264 n \u2264 3 \u22c5 10^5) \u2014 the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 n) \u2014 the elements of the array. \n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case print n integers, where the i-th integer is equal to the i-amazing number of the array.\n\nExample\n\nInput\n\n\n3\n5\n1 2 3 4 5\n5\n4 4 4 4 2\n6\n1 3 1 5 3 1\n\n\nOutput\n\n\n-1 -1 3 2 1 \n-1 4 4 4 2 \n-1 -1 1 1 1 1 ",
        "task_name": "1417_C. k-Amazing Numbers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n# import threading\n# threading.stack_size(2**27)\nimport sys\nsys.setrecursionlimit(10**4)\n# sys.stdin = open('inpy.txt', 'r')\n# sys.stdout = open('outpy.txt', 'w')\nfrom sys import stdin, stdout\nimport bisect            #c++ upperbound\nimport math\nimport heapq\ni_m=9223372036854775807\ndef modinv(n,p):\n    return pow(n,p-2,p)\ndef cin():\n    return map(int,sin().split())\ndef ain():                           #takes array as input\n    return list(map(int,sin().split()))\ndef sin():\n    return input()\ndef inin():\n    return int(input())\nimport math  \ndef GCD(x, y): \n    x=abs(x)\n    y=abs(y)\n    if(min(x,y)==0):\n        return max(x,y)\n    while(y): \n        x, y = y, x % y \n    return x \ndef Divisors(n) : \n    l = []  \n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if (n % i == 0) : \n            if (n // i == i) : \n                l.append(i) \n            else : \n                l.append(i)\n                l.append(n//i)\n    return l\nprime=[]\ndef SieveOfEratosthenes(n): \n    global prime\n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    f=[]\n    for p in range(2, n): \n        if prime[p]: \n            f.append(p)\n    return f\ndef primeFactors(n): \n    a=[]\n    # Print the number of two's that divide n \n    while n % 2 == 0: \n        a.append(2) \n        n = n // 2\n          \n    # n must be odd at this point \n    # so a skip of 2 ( i = i + 2) can be used \n    for i in range(3,int(math.sqrt(n))+1,2): \n          \n        # while i divides n , print i ad divide n \n        while n % i== 0: \n            a.append(i) \n            n = n // i \n              \n    # Condition if n is a prime \n    # number greater than 2 \n    if n > 2: \n        a.append(n)\n    return a\n\n\"\"\"*******************************************************\"\"\"\ndef main():\n    t=inin()\n    for _ in range(t):\n        n=inin()\n        a=ain()\n        d={}\n        ans=n\n        e={}\n        for i in a:\n            d[i]=-1\n            e[i]=0\n        for i in range(n):\n            e[a[i]]=max(e[a[i]],i-d[a[i]])\n            d[a[i]]=i\n        for i in range(n):\n            e[a[i]]=max(e[a[i]],n-d[a[i]])\n        ans=n\n        an=a[0]\n        for i in e:\n            if ans>e[i]:\n                ans=e[i]\n                an=i\n        ans-=1\n        # print(ans,an)\n        a=[]\n        for i in range(n):\n            if i<ans:\n                a.append(-1)\n            else:\n                a.append(an)\n        print(*a)\n######## Python 2 and 3 footer by Pajenegod and c1729\n \n# Note because cf runs old PyPy3 version which doesn't have the sped up\n# unicode strings, PyPy3 strings will many times be slower than pypy2.\n# There is a way to get around this by using binary strings in PyPy3\n# but its syntax is different which makes it kind of a mess to use.\n \n# So on cf, use PyPy2 for best string performance.\n \npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\n \nimport os, sys\nfrom io import IOBase, BytesIO\n \nBUFSIZE = 8192\nclass FastIO(BytesIO):\n    newlines = 0\n \n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n \n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0,2), super(FastIO, self).write(s))[0])\n        return s\n \n    def read(self):\n        while self._fill(): pass\n        return super(FastIO,self).read()\n \n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill(); self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s:self.buffer.write(s.encode('ascii'))\n            self.read = lambda:self.buffer.read().decode('ascii')\n            self.readline = lambda:self.buffer.readline().decode('ascii')\n \n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n \n# Cout implemented in Python\nimport sys\nclass ostream:\n    def __lshift__(self,a):\n        sys.stdout.write(str(a))\n        return self\ncout = ostream()\nendl = '\\n'\n \n# Read all remaining integers in stdin, type is given by optional argument, this is fast\ndef readnumbers(zero = 0):\n    conv = ord if py2 else lambda x:x\n    A = []; numb = zero; sign = 1; i = 0; s = sys.stdin.buffer.read()\n    try:\n        while True:\n            if s[i] >= b'R' [0]:\n                numb = 10 * numb + conv(s[i]) - 48\n            elif s[i] == b'-' [0]: sign = -1\n            elif s[i] != b'\\r' [0]:\n                A.append(sign*numb)\n                numb = zero; sign = 1\n            i += 1\n    except:pass\n    if s and s[-1] >= b'R' [0]:\n        A.append(sign*numb)\n    return A\n \n# threading.Thread(target=main).start()\nif __name__== \"__main__\":\n  main()",
        "correct": false,
        "task_id": "0953",
        "depth": 2
    },
    {
        "description": "There are n cards numbered 1, \u2026, n. The card i has a red digit r_i and a blue digit b_i written on it.\n\nWe arrange all n cards in random order from left to right, with all permutations of 1, \u2026, n having the same probability. We then read all red digits on the cards from left to right, and obtain an integer R. In the same way, we read all blue digits and obtain an integer B. When reading a number, leading zeros can be ignored. If all digits in a number are zeros, then the number is equal to 0. Below is an illustration of a possible rearrangement of three cards, and how R and B can be found.\n\n<image>\n\nTwo players, Red and Blue, are involved in a bet. Red bets that after the shuffle R > B, and Blue bets that R < B. If in the end R = B, the bet results in a draw, and neither player wins.\n\nDetermine, which of the two players is more likely (has higher probability) to win the bet, or that their chances are equal. Refer to the Note section for a formal discussion of comparing probabilities.\n\nInput\n\nThe first line contains a single integer T (1 \u2264 T \u2264 100) \u2014 the number of test cases.\n\nDescriptions of T test cases follow. Each test case description starts with a line containing a single integer n (1 \u2264 n \u2264 1000) \u2014 the number of cards.\n\nThe following line contains a string of n digits r_1, \u2026, r_n \u2014 red digits on cards 1, \u2026, n respectively.\n\nThe following line contains a string of n digits b_1, \u2026, b_n \u2014 blue digits on cards 1, \u2026, n respectively.\n\nNote that digits in the same line are not separated with any delimiters.\n\nOutput\n\nPrint T answers for the test cases in order, one per line.\n\nIf Red has a strictly higher change to win, print \"RED\".\n\nIf Blue has a strictly higher change to win, print \"BLUE\".\n\nIf both players are equally likely to win, print \"EQUAL\".\n\nNote that all answers are case-sensitive.\n\nExample\n\nInput\n\n\n3\n3\n777\n111\n3\n314\n159\n5\n09281\n09281\n\n\nOutput\n\n\nRED\nBLUE\nEQUAL\n\nNote\n\nFormally, let n_R be the number of permutations of cards 1, \u2026, n such that the resulting numbers R and B satisfy R > B. Similarly, let n_B be the number of permutations such that R < B. If n_R > n_B, you should print \"RED\". If n_R < n_B, you should print \"BLUE\". If n_R = n_B, print \"EQUAL\".\n\nIn the first sample case, R = 777 and B = 111 regardless of the card order, thus Red always wins.\n\nIn the second sample case, there are two card orders when Red wins, and four card orders when Blue wins:\n\n  * order 1, 2, 3: 314 > 159;\n  * order 1, 3, 2: 341 > 195;\n  * order 2, 1, 3: 134 < 519;\n  * order 2, 3, 1: 143 < 591;\n  * order 3, 1, 2: 431 < 915;\n  * order 3, 2, 1: 413 < 951.\n\n\n\nSince R < B is more frequent, the answer is \"BLUE\".\n\nIn the third sample case, R = B regardless of the card order, thus the bet is always a draw, and both Red and Blue have zero chance to win.",
        "task_name": "1459_A. Red-Blue Shuffle",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\nimport sys, math, bisect, itertools\n\ninput = lambda: sys.stdin.readline().rstrip()\ndef lii(): return list(map(int, input().split()))\ndef mii(): return map(int, input().split())\n\ndef solve():\n    a = int(input())\n    b = input(); c = input()\n    first = 0; second = 0\n    for i in range(a):\n        if (int(b[i]) > int(c[i])):\n            first += 1\n        elif (int(b[i]) < int(c[i])):\n            second += 1\n    if (first > second): \n        print(\"RED\")\n    elif (second > first): \n        print(\"BLUE\")\n    else: \n        print(\"EQUAL\")\n\ndef main():\n    for _ in range(int(input())):\n        solve()\n\nif __name__ == '__main__':\n  main()",
        "correct": true,
        "task_id": "0954",
        "depth": 1
    },
    {
        "description": "The student council has a shared document file. Every day, some members of the student council write the sequence TMT (short for Towa Maji Tenshi) in it.\n\nHowever, one day, the members somehow entered the sequence into the document at the same time, creating a jumbled mess. Therefore, it is Suguru Doujima's task to figure out whether the document has malfunctioned. Specifically, he is given a string of length n whose characters are all either T or M, and he wants to figure out if it is possible to partition it into some number of disjoint subsequences, all of which are equal to TMT. That is, each character of the string should belong to exactly one of the subsequences.\n\nA string a is a subsequence of a string b if a can be obtained from b by deletion of several (possibly, zero) characters.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 5000) \u2014 the number of test cases.\n\nThe first line of each test case contains an integer n (3 \u2264 n < 10^5), the number of characters in the string entered in the document. It is guaranteed that n is divisible by 3.\n\nThe second line of each test case contains a string of length n consisting of only the characters T and M.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case, print a single line containing YES if the described partition exists, and a single line containing NO otherwise.\n\nExample\n\nInput\n\n\n5\n3\nTMT\n3\nMTT\n6\nTMTMTT\n6\nTMTTTT\n6\nTTMMTT\n\n\nOutput\n\n\nYES\nNO\nYES\nNO\nYES\n\nNote\n\nIn the first test case, the string itself is already a sequence equal to TMT.\n\nIn the third test case, we may partition the string into the subsequences TMTMTT. Both the bolded and the non-bolded subsequences are equal to TMT.",
        "task_name": "1509_B. TMT Document",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom collections import deque\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    t = int(input())\n\n    for _ in range(t):\n        n = int(input())\n        s = input()\n\n        t = deque()\n        m = deque()\n\n        for i, si in enumerate(s):\n            if si == 'T':\n                t.append(i)\n            else:\n                m.append(i)\n\n        poss = len(m) * 2 == len(t)\n        if poss:\n            arr = [0] * (len(t) // 2)\n            for i in range(len(t) // 2):\n                poss &= t.popleft() < m[0]\n                arr[i] = m.popleft()\n            for i in arr:\n                poss &= i < t.popleft()\n\n        print(\"YES\" if poss else \"NO\")\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": true,
        "task_id": "0956",
        "depth": 2
    },
    {
        "description": "You are given a string s consisting of the characters 0, 1, and ?.\n\nLet's call a string unstable if it consists of the characters 0 and 1 and any two adjacent characters are different (i. e. it has the form 010101... or 101010...).\n\nLet's call a string beautiful if it consists of the characters 0, 1, and ?, and you can replace the characters ? to 0 or 1 (for each character, the choice is independent), so that the string becomes unstable.\n\nFor example, the strings 0??10, 0, and ??? are beautiful, and the strings 00 and ?1??1 are not.\n\nCalculate the number of beautiful contiguous substrings of the string s.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 number of test cases.\n\nThe first and only line of each test case contains the string s (1 \u2264 |s| \u2264 2 \u22c5 10^5) consisting of characters 0, 1, and ?.\n\nIt is guaranteed that the sum of the string lengths over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output a single integer \u2014 the number of beautiful substrings of the string s.\n\nExample\n\nInput\n\n\n3\n0?10\n???\n?10??1100\n\n\nOutput\n\n\n8\n6\n25",
        "task_name": "1535_C. Unstable String",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "T=lambda x: (x*(x+1))//2\nt = input()\nfor _ in xrange(t):\n\ts = raw_input()\n\tcur0 = 0\n\tcur1 = 0\n\tcurQ = 0\n\tprev = None\n\tr = 0\n\tfor i in xrange(len(s)):\n\t\tc = s[i]\n\t\tif i%2 == 0:\n\t\t\tif c == '0':\n\t\t\t\tif prev == '0':\n\t\t\t\t\tcur0 += 1\n\t\t\t\t\tcurQ = 0\n\t\t\t\t\tcur1 = 0\n\t\t\t\telif prev == '1':\n\t\t\t\t\tr += T(cur1) - T(curQ)\n\t\t\t\t\tcur0 += 1\n\t\t\t\t\tcur1 = 0\n\t\t\t\t\tcurQ = 0\n\t\t\t\t\tprev = '0'\n\t\t\t\telse:\n\t\t\t\t\tcur0 += 1\n\t\t\t\tprev = '0'\n\t\t\telif c == '1':\n\t\t\t\tif prev == '1':\n\t\t\t\t\tcur1 += 1\n\t\t\t\t\tcurQ = 0\n\t\t\t\t\tcur0 = 0\n\t\t\t\telif prev == '0':\n\t\t\t\t\tr += T(cur0) - T(curQ)\n\t\t\t\t\tcur1 += 1\n\t\t\t\t\tcur0 = 0\n\t\t\t\t\tcurQ = 0\n\t\t\t\telse:\n\t\t\t\t\tcur1 += 1\n\t\t\t\tprev = '1'\n\t\t\telse:\n\t\t\t\tcurQ += 1\n\t\t\t\tcur0 += 1\n\t\t\t\tcur1 += 1\n\t\telse:\n\t\t\tif c == '1':\n\t\t\t\tif prev == '0':\n\t\t\t\t\tcur0 += 1\n\t\t\t\t\tcurQ = 0\n\t\t\t\t\tcur1 = 0\n\t\t\t\telif prev == '1':\n\t\t\t\t\tr += T(cur1) - T(curQ)\n\t\t\t\t\tcur0 += 1\n\t\t\t\t\tcur1 = 0\n\t\t\t\t\tcurQ = 0\n\t\t\t\telse:\n\t\t\t\t\tcur0 += 1\n\t\t\t\tprev = '0'\n\t\t\telif c == '0':\n\t\t\t\tif prev == '1':\n\t\t\t\t\tcur1 += 1\n\t\t\t\t\tcurQ = 0\n\t\t\t\t\tcur0 = 0\n\t\t\t\telif prev == '0':\n\t\t\t\t\tr += T(cur0) - T(curQ)\n\t\t\t\t\tcur1 += 1\n\t\t\t\t\tcur0 = 0\n\t\t\t\t\tcurQ = 0\n\t\t\t\telse:\n\t\t\t\t\tcur1 += 1\n\t\t\t\tprev = '1'\n\t\t\telse:\n\t\t\t\tcurQ += 1\n\t\t\t\tcur0 += 1\n\t\t\t\tcur1 += 1\n\tif prev is None:\n\t\tr += T(curQ)\n\telif prev == '1':\n\t\tr += T(cur1)\n\telif prev == '0':\n\t\tr += T(cur0)\n\tprint(r)",
        "correct": false,
        "task_id": "0957",
        "depth": 2
    },
    {
        "description": "Vasya lives in a strange world. The year has n months and the i-th month has ai days. Vasya got a New Year present \u2014 the clock that shows not only the time, but also the date.\n\nThe clock's face can display any number from 1 to d. It is guaranteed that ai \u2264 d for all i from 1 to n. The clock does not keep information about the current month, so when a new day comes, it simply increases the current day number by one. The clock cannot display number d + 1, so after day number d it shows day 1 (the current day counter resets). The mechanism of the clock allows you to increase the day number by one manually. When you execute this operation, day d is also followed by day 1.\n\nVasya begins each day checking the day number on the clock. If the day number on the clock does not match the actual day number in the current month, then Vasya manually increases it by one. Vasya is persistent and repeats this operation until the day number on the clock matches the actual number of the current day in the current month.\n\nA year passed and Vasya wonders how many times he manually increased the day number by one, from the first day of the first month to the last day of the n-th month inclusive, considering that on the first day of the first month the clock display showed day 1.\n\nInput\n\nThe first line contains the single number d \u2014 the maximum number of the day that Vasya's clock can show (1 \u2264 d \u2264 106).\n\nThe second line contains a single integer n \u2014 the number of months in the year (1 \u2264 n \u2264 2000).\n\nThe third line contains n space-separated integers: ai (1 \u2264 ai \u2264 d) \u2014 the number of days in each month in the order in which they follow, starting from the first one. \n\nOutput\n\nPrint a single number \u2014 the number of times Vasya manually increased the day number by one throughout the last year.\n\nExamples\n\nInput\n\n4\n2\n2 2\n\n\nOutput\n\n2\n\n\nInput\n\n5\n3\n3 4 3\n\n\nOutput\n\n3\n\n\nInput\n\n31\n12\n31 28 31 30 31 30 31 31 30 31 30 31\n\n\nOutput\n\n7\n\nNote\n\nIn the first sample the situation is like this: \n\n  * Day 1. Month 1. The clock shows 1. Vasya changes nothing. \n  * Day 2. Month 1. The clock shows 2. Vasya changes nothing. \n  * Day 1. Month 2. The clock shows 3. Vasya manually increases the day number by 1. After that the clock shows 4. Vasya increases the day number by 1 manually. After that the clock shows 1. \n  * Day 2. Month 2. The clock shows 2. Vasya changes nothing. \n\nIn total, Vasya manually changed the day number by 1 exactly 2 times.",
        "task_name": "182_B. Vasya's Calendar",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "d=input()\nn=input()\nstring=raw_input()\nsum=0\nfor i in range(0,n-1):\n\ta=d-int(string.split(\" \")[i])\n\tsum=sum+a\nprint(sum)",
        "correct": true,
        "task_id": "0958",
        "depth": 1
    },
    {
        "description": "The Little Elephant loves to play with color cards.\n\nHe has n cards, each has exactly two colors (the color of the front side and the color of the back side). Initially, all the cards lay on the table with the front side up. In one move the Little Elephant can turn any card to the other side. The Little Elephant thinks that a set of cards on the table is funny if at least half of the cards have the same color (for each card the color of the upper side is considered).\n\nHelp the Little Elephant to find the minimum number of moves needed to make the set of n cards funny.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 105) \u2014 the number of the cards. The following n lines contain the description of all cards, one card per line. The cards are described by a pair of positive integers not exceeding 109 \u2014 colors of both sides. The first number in a line is the color of the front of the card, the second one \u2014 of the back. The color of the front of the card may coincide with the color of the back of the card.\n\nThe numbers in the lines are separated by single spaces.\n\nOutput\n\nOn a single line print a single integer \u2014 the sought minimum number of moves. If it is impossible to make the set funny, print -1.\n\nExamples\n\nInput\n\n3\n4 7\n4 7\n7 4\n\n\nOutput\n\n0\n\n\nInput\n\n5\n4 7\n7 4\n2 11\n9 7\n1 1\n\n\nOutput\n\n2\n\nNote\n\nIn the first sample there initially are three cards lying with colors 4, 4, 7. Since two of the three cards are of the same color 4, you do not need to change anything, so the answer is 0.\n\nIn the second sample, you can turn the first and the fourth cards. After that three of the five cards will be of color 7.",
        "task_name": "205_D. Little Elephant and Cards",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nn = int(raw_input())\ncolor = []\nfor i in xrange(n):\n    color.append(map(int,raw_input().split()))\nm = {}\nleft = {}\nfor u,v in color:\n    if m.has_key(u): m[u] += 1\n    else: m[u] = 1\n    if left.has_key(u): left[u] += 1\n    else: left[u] = 1\n    if u == v: continue\n    if m.has_key(v):\n        m[v] += 1\n    else:\n        m[v] = 1\nans = n+1\nfor u,v in color:\n    if left[u] * 2 >= n:\n        ans = 0\n        break\n    if m[u] * 2 >= n:\n        ans = min(ans, (n+1)/2 - left[u])\nprint -1 if ans == n+1 else ans\n",
        "correct": false,
        "task_id": "0959",
        "depth": 1
    },
    {
        "description": "Bob got a job as a system administrator in X corporation. His first task was to connect n servers with the help of m two-way direct connection so that it becomes possible to transmit data from one server to any other server via these connections. Each direct connection has to link two different servers, each pair of servers should have at most one direct connection. Y corporation, a business rival of X corporation, made Bob an offer that he couldn't refuse: Bob was asked to connect the servers in such a way, that when server with index v fails, the transmission of data between some other two servers becomes impossible, i.e. the system stops being connected. Help Bob connect the servers.\n\nInput\n\nThe first input line contains 3 space-separated integer numbers n, m, v (3 \u2264 n \u2264 105, 0 \u2264 m \u2264 105, 1 \u2264 v \u2264 n), n \u2014 amount of servers, m \u2014 amount of direct connections, v \u2014 index of the server that fails and leads to the failure of the whole system.\n\nOutput\n\nIf it is impossible to connect the servers in the required way, output -1. Otherwise output m lines with 2 numbers each \u2014 description of all the direct connections in the system. Each direct connection is described by two numbers \u2014 indexes of two servers, linked by this direct connection. The servers are numbered from 1. If the answer is not unique, output any.\n\nExamples\n\nInput\n\n5 6 3\n\n\nOutput\n\n1 2\n2 3\n3 4\n4 5\n1 3\n3 5\n\n\nInput\n\n6 100 1\n\n\nOutput\n\n-1",
        "task_name": "22_C. System Administrator",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n\n(n,m,v) = map(int, raw_input().split())\n\nif (m < (n-1)):\n  print(-1)\n  exit()\n\n# Were going to make node 0 lose connection with the rest of the network,\n# when node 1 fails. Put all nodes > 1 on the other side of 1 results in\n# the largest possible network.\n\n# Make a line\nedges = [(i, i+1) for i in xrange(n-1)]\n\n# Keep adding edges until the requested amount is reached (if possible)\nm = m - len(edges)\nnode1_nr = 1\nwhile ((m > 0) and (node1_nr < n)):\n  node2_nr = node1_nr + 2 # Edge from node1_nr to node1_nr+1 already exists\n  while ((m > 0) and (node2_nr < n)):\n    edges.append((node1_nr, node2_nr))\n    m -= 1\n    node2_nr += 1\n  node1_nr += 1\n\nif (m > 0):\n  # Unable to make the requested amount of edges\n  print(-1)\n  exit()\n\n# Make a translation table\ntranslate = [i+1 for i in xrange(n)]\ntranslate[v-1],translate[1] = translate[1],translate[v-1] # Swap v and 1\n\n# Construct output\noutput = [(\"%d %d\" % (translate[n1], translate[n2])) for (n1, n2) in edges]\nprint(\"\\n\".join(output))\n",
        "correct": true,
        "task_id": "0960",
        "depth": 2
    },
    {
        "description": "When Valera has got some free time, he goes to the library to read some books. Today he's got t free minutes to read. That's why Valera took n books in the library and for each book he estimated the time he is going to need to read it. Let's number the books by integers from 1 to n. Valera needs ai minutes to read the i-th book.\n\nValera decided to choose an arbitrary book with number i and read the books one by one, starting from this book. In other words, he will first read book number i, then book number i + 1, then book number i + 2 and so on. He continues the process until he either runs out of the free time or finishes reading the n-th book. Valera reads each book up to the end, that is, he doesn't start reading the book if he doesn't have enough free time to finish reading it. \n\nPrint the maximum number of books Valera can read.\n\nInput\n\nThe first line contains two integers n and t (1 \u2264 n \u2264 105; 1 \u2264 t \u2264 109) \u2014 the number of books and the number of free minutes Valera's got. The second line contains a sequence of n integers a1, a2, ..., an (1 \u2264 ai \u2264 104), where number ai shows the number of minutes that the boy needs to read the i-th book.\n\nOutput\n\nPrint a single integer \u2014 the maximum number of books Valera can read.\n\nExamples\n\nInput\n\n4 5\n3 1 2 1\n\n\nOutput\n\n3\n\n\nInput\n\n3 3\n2 2 3\n\n\nOutput\n\n1",
        "task_name": "279_B. Books",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import maxint\nn,t=map(int,raw_input().split())\narr=list(map(int,raw_input().split()))\n\n\ndef atMostSum(arr, n, k):\n    _sum = 0\n    cnt = 0\n    maxcnt = 0\n\n    for i in range(n):\n        if ((_sum + arr[i]) <= k):\n            _sum += arr[i]\n            cnt += 1\n        elif (sum != 0):\n            _sum = _sum - arr[i - cnt] + arr[i]\n\n        maxcnt = max(cnt, maxcnt)\n\n    return maxcnt\n\nprint(atMostSum(arr,n,t))",
        "correct": true,
        "task_id": "0962",
        "depth": 1
    },
    {
        "description": "Yaroslav has an array, consisting of (2\u00b7n - 1) integers. In a single operation Yaroslav can change the sign of exactly n elements in the array. In other words, in one operation Yaroslav can select exactly n array elements, and multiply each of them by -1.\n\nYaroslav is now wondering: what maximum sum of array elements can be obtained if it is allowed to perform any number of described operations?\n\nHelp Yaroslav.\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 100). The second line contains (2\u00b7n - 1) integers \u2014 the array elements. The array elements do not exceed 1000 in their absolute value.\n\nOutput\n\nIn a single line print the answer to the problem \u2014 the maximum sum that Yaroslav can get.\n\nExamples\n\nInput\n\n2\n50 50 50\n\n\nOutput\n\n150\n\n\nInput\n\n2\n-1 -100 -1\n\n\nOutput\n\n100\n\nNote\n\nIn the first sample you do not need to change anything. The sum of elements equals 150.\n\nIn the second sample you need to change the sign of the first two elements. Then we get the sum of the elements equal to 100.",
        "task_name": "301_A. Yaroslav and Sequence",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "INT_MIN = -1000000007\n\nif __name__ == '__main__':\n\tn = int(raw_input())\n\ta = sorted([int(x) for x in raw_input().split()])\n\tres = INT_MIN\n\tfor i in range(0, 2 * n, 2 - n % 2):\n\t\tres = max(res, sum([-x for x in a[:i]] + a[i:]))\n\tprint(res)\n",
        "correct": true,
        "task_id": "0963",
        "depth": 1
    },
    {
        "description": "During the break, we decided to relax and play dominoes. Our box with Domino was empty, so we decided to borrow the teacher's dominoes.\n\nThe teacher responded instantly at our request. He put nm dominoes on the table as an n \u00d7 2m rectangle so that each of the n rows contained m dominoes arranged horizontally. Each half of each domino contained number (0 or 1).\n\nWe were taken aback, and the teacher smiled and said: \"Consider some arrangement of dominoes in an n \u00d7 2m matrix. Let's count for each column of the matrix the sum of numbers in this column. Then among all such sums find the maximum one. Can you rearrange the dominoes in the matrix in such a way that the maximum sum will be minimum possible? Note that it is prohibited to change the orientation of the dominoes, they all need to stay horizontal, nevertheless dominoes are allowed to rotate by 180 degrees. As a reward I will give you all my dominoes\".\n\nWe got even more taken aback. And while we are wondering what was going on, help us make an optimal matrix of dominoes.\n\nInput\n\nThe first line contains integers n, m (1 \u2264 n, m \u2264 103).\n\nIn the next lines there is a description of the teachers' matrix. Each of next n lines contains m dominoes. The description of one domino is two integers (0 or 1), written without a space \u2014 the digits on the left and right half of the domino.\n\nOutput\n\nPrint the resulting matrix of dominoes in the format: n lines, each of them contains m space-separated dominoes.\n\nIf there are multiple optimal solutions, print any of them.\n\nExamples\n\nInput\n\n2 3\n01 11 00\n00 01 11\n\n\nOutput\n\n11 11 10\n00 00 01\n\n\nInput\n\n4 1\n11\n10\n01\n00\n\n\nOutput\n\n11\n10\n01\n00\n\nNote\n\nConsider the answer for the first sample. There, the maximum sum among all columns equals 1 (the number of columns is 6, and not 3). Obviously, this maximum can't be less than 1, then such matrix is optimal.\n\nNote that the dominoes can be rotated by 180 degrees.",
        "task_name": "394_C. Dominoes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\ndef main():\n    m, n = map(int, stdin.readline().split())\n    k = [0] * 3\n    for b in stdin.read().split():\n        if b == '11':\n            k[0] += 1\n        elif b == '00':\n            k[2] += 1\n        else:\n            k[1] += 1\n    rest = [k[0] % n, k[1] % (2 * n), k[2] % n]\n    if rest[0] + rest[1] + rest[2]:\n        if rest[0] + rest[1] + rest[2] <= n:\n            stdout.write(' '.join(['11'] * rest[0] + ['10'] * rest[1] + ['00'] * rest[2]))\n            stdout.write('\\n')\n        else:\n            l0 = ['10'] * (rest[1] - rest[1] / 2)\n            l1 = ['01'] * (rest[1] / 2)\n            for l in (l0, l1):\n                while rest[0] and len(l) < n:\n                    l.append('11')\n                    rest[0] -= 1\n            for l in (l0, l1):\n                while rest[2] and len(l) < n:\n                    l.append('00')\n                    rest[2] -= 1\n            l2 = ['11'] * rest[0] + ['00'] * rest[2]\n            stdout.write('\\n'.join(' '.join(l) for l in (l0, l1, l2) if l))\n            stdout.write('\\n')\n    b = [('11', k[0] / n), ('10', k[1] / (2 * n)), ('01', k[1] / (2 * n)), ('00', k[2] / n)]\n    stdout.write('\\n'.join('\\n'.join(' '.join(s for i in xrange(n)) for j in xrange(rep)) for s, rep in b if rep))\nmain()\n",
        "correct": true,
        "task_id": "0966",
        "depth": 2
    },
    {
        "description": "You've got array a[1], a[2], ..., a[n], consisting of n integers. Count the number of ways to split all the elements of the array into three contiguous parts so that the sum of elements in each part is the same. \n\nMore formally, you need to find the number of such pairs of indices i, j (2 \u2264 i \u2264 j \u2264 n - 1), that <image>.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 5\u00b7105), showing how many numbers are in the array. The second line contains n integers a[1], a[2], ..., a[n] (|a[i]| \u2264 109) \u2014 the elements of array a.\n\nOutput\n\nPrint a single integer \u2014 the number of ways to split the array into three parts with the same sum.\n\nExamples\n\nInput\n\n5\n1 2 3 0 3\n\n\nOutput\n\n2\n\n\nInput\n\n4\n0 1 -1 0\n\n\nOutput\n\n1\n\n\nInput\n\n2\n4 1\n\n\nOutput\n\n0",
        "task_name": "466_C. Number of Ways",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\ndef main():\n    n = input()\n    a = list(map(int, raw_input().split()))\n    #n = 9\n    #a = [0 for i in range(9)]\n    totalSum = sum(a)\n    poss = 0\n    theseSums = [sum(a)]\n    normalSums = [a[0]]\n    for i in range(1,len(a)):\n        theseSums.append(theseSums[i-1]-a[i-1])\n        normalSums.append(normalSums[i-1]+a[i])\n    areTheirSumsGood = [k==totalSum/3 for k in theseSums]\n    letsReverse = list(reversed(areTheirSumsGood))\n    sumsReverse = [letsReverse[0]]\n    for i in range(1,len(a)):\n        sumsReverse.append(sumsReverse[i-1]+letsReverse[i])\n    sumsUntil = list(reversed(sumsReverse))\n    for i in range(len(a)-2):\n        if normalSums[i] == totalSum/3:\n            #print(i, sumsUntil[i])\n            poss += sumsUntil[i+2]\n    print(poss)\n\nif __name__ == '__main__':\n    main()\n\n    \n    \n\n",
        "correct": false,
        "task_id": "0967",
        "depth": 1
    },
    {
        "description": "All cities of Lineland are located on the Ox coordinate axis. Thus, each city is associated with its position xi \u2014 a coordinate on the Ox axis. No two cities are located at a single point.\n\nLineland residents love to send letters to each other. A person may send a letter only if the recipient lives in another city (because if they live in the same city, then it is easier to drop in).\n\nStrange but true, the cost of sending the letter is exactly equal to the distance between the sender's city and the recipient's city.\n\nFor each city calculate two values \u200b\u200bmini and maxi, where mini is the minimum cost of sending a letter from the i-th city to some other city, and maxi is the the maximum cost of sending a letter from the i-th city to some other city\n\nInput\n\nThe first line of the input contains integer n (2 \u2264 n \u2264 105) \u2014 the number of cities in Lineland. The second line contains the sequence of n distinct integers x1, x2, ..., xn ( - 109 \u2264 xi \u2264 109), where xi is the x-coordinate of the i-th city. All the xi's are distinct and follow in ascending order.\n\nOutput\n\nPrint n lines, the i-th line must contain two integers mini, maxi, separated by a space, where mini is the minimum cost of sending a letter from the i-th city, and maxi is the maximum cost of sending a letter from the i-th city.\n\nExamples\n\nInput\n\n4\n-5 -2 2 7\n\n\nOutput\n\n3 12\n3 9\n4 7\n5 12\n\n\nInput\n\n2\n-1 1\n\n\nOutput\n\n2 2\n2 2",
        "task_name": "567_A. Lineland Mail",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "quant = int(raw_input())\nvalores = map(int, raw_input().split(\" \"))\n\nfor i in valores:\n\tdistancias = []\n\taux = valores[::]\n\taux.remove(i)\n\t\n\tif (abs(i - min(aux)) > abs(i - max(aux))):\n\t\tprint(str(abs(i - max(aux)))+ \" \" + str(abs(i - min(aux))))\n\telse:\n\t\tprint(str(abs(i - min(aux)))+ \" \" + str(abs(i - max(aux))))\n\t\n\t\n",
        "correct": false,
        "task_id": "0969",
        "depth": 1
    },
    {
        "description": "Recently, Duff has been practicing weight lifting. As a hard practice, Malek gave her a task. He gave her a sequence of weights. Weight of i-th of them is 2wi pounds. In each step, Duff can lift some of the remaining weights and throw them away. She does this until there's no more weight left. Malek asked her to minimize the number of steps.\n\n<image>\n\nDuff is a competitive programming fan. That's why in each step, she can only lift and throw away a sequence of weights 2a1, ..., 2ak if and only if there exists a non-negative integer x such that 2a1 + 2a2 + ... + 2ak = 2x, i. e. the sum of those numbers is a power of two.\n\nDuff is a competitive programming fan, but not a programmer. That's why she asked for your help. Help her minimize the number of steps. \n\nInput\n\nThe first line of input contains integer n (1 \u2264 n \u2264 106), the number of weights.\n\nThe second line contains n integers w1, ..., wn separated by spaces (0 \u2264 wi \u2264 106 for each 1 \u2264 i \u2264 n), the powers of two forming the weights values.\n\nOutput\n\nPrint the minimum number of steps in a single line.\n\nExamples\n\nInput\n\n5\n1 1 2 3 3\n\n\nOutput\n\n2\n\n\nInput\n\n4\n0 1 2 3\n\n\nOutput\n\n4\n\nNote\n\nIn the first sample case: One optimal way would be to throw away the first three in the first step and the rest in the second step. Also, it's not possible to do it in one step because their sum is not a power of two.\n\nIn the second sample case: The only optimal way is to throw away one weight in each step. It's not possible to do it in less than 4 steps because there's no subset of weights with more than one weight and sum equal to a power of two.",
        "task_name": "588_C. Duff and Weight Lifting",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import absolute_import, division, print_function\nfrom sys import *\ninp = lambda : stdin.readline()\n\nN = int(1e6)+30\n\ndef main():\n    n = int(inp())\n    l = [int(i) for i in inp().split()]\n    d = [0 for i in range(N)]\n    ans,m = 0,0\n    for i in l:\n        d[i] += 1\n        m = max(m,i)\n    for i in range(N-1):\n        have = d[i]\n        d[i+1] += d[i]//2\n        if d[i]%2: ans += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()",
        "correct": true,
        "task_id": "0970",
        "depth": 1
    },
    {
        "description": "Very soon Berland will hold a School Team Programming Olympiad. From each of the m Berland regions a team of two people is invited to participate in the olympiad. The qualifying contest to form teams was held and it was attended by n Berland students. There were at least two schoolboys participating from each of the m regions of Berland. The result of each of the participants of the qualifying competition is an integer score from 0 to 800 inclusive.\n\nThe team of each region is formed from two such members of the qualifying competition of the region, that none of them can be replaced by a schoolboy of the same region, not included in the team and who received a greater number of points. There may be a situation where a team of some region can not be formed uniquely, that is, there is more than one school team that meets the properties described above. In this case, the region needs to undertake an additional contest. The two teams in the region are considered to be different if there is at least one schoolboy who is included in one team and is not included in the other team. It is guaranteed that for each region at least two its representatives participated in the qualifying contest.\n\nYour task is, given the results of the qualifying competition, to identify the team from each region, or to announce that in this region its formation requires additional contests.\n\nInput\n\nThe first line of the input contains two integers n and m (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 10 000, n \u2265 2m) \u2014 the number of participants of the qualifying contest and the number of regions in Berland.\n\nNext n lines contain the description of the participants of the qualifying contest in the following format: Surname (a string of length from 1 to 10 characters and consisting of large and small English letters), region number (integer from 1 to m) and the number of points scored by the participant (integer from 0 to 800, inclusive).\n\nIt is guaranteed that all surnames of all the participants are distinct and at least two people participated from each of the m regions. The surnames that only differ in letter cases, should be considered distinct.\n\nOutput\n\nPrint m lines. On the i-th line print the team of the i-th region \u2014 the surnames of the two team members in an arbitrary order, or a single character \"?\" (without the quotes) if you need to spend further qualifying contests in the region.\n\nExamples\n\nInput\n\n5 2\nIvanov 1 763\nAndreev 2 800\nPetrov 1 595\nSidorov 1 790\nSemenov 2 503\n\n\nOutput\n\nSidorov Ivanov\nAndreev Semenov\n\n\nInput\n\n5 2\nIvanov 1 800\nAndreev 2 763\nPetrov 1 800\nSidorov 1 800\nSemenov 2 503\n\n\nOutput\n\n?\nAndreev Semenov\n\nNote\n\nIn the first sample region teams are uniquely determined.\n\nIn the second sample the team from region 2 is uniquely determined and the team from region 1 can have three teams: \"Petrov\"-\"Sidorov\", \"Ivanov\"-\"Sidorov\", \"Ivanov\" -\"Petrov\", so it is impossible to determine a team uniquely.",
        "task_name": "659_B. Qualifying Contest",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrstrs = lambda: [str(x) for x in stdin.readline().split()]\n\nn, m = rints()\nmem, ans = [[] for _ in range(m + 1)], []\nfor _ in range(n):\n    a = rstrs()\n    mem[int(a[1])].append((int(a[-1]), a[0]))\n\nfor i in range(1, m + 1):\n    mem[i].sort()\n    tem = mem[i]\n    if len(tem) > 2 and tem[-3][0] in (tem[-1][0], tem[-2][0]):\n        ans.append('?')\n    else:\n        ans.append('%s %s' % (tem[-1][1], tem[-2][1]))\n\nprint('\\n'.join(ans))\n",
        "correct": true,
        "task_id": "0972",
        "depth": 1
    },
    {
        "description": "Vasily has a number a, which he wants to turn into a number b. For this purpose, he can do two types of operations:\n\n  * multiply the current number by 2 (that is, replace the number x by 2\u00b7x); \n  * append the digit 1 to the right of current number (that is, replace the number x by 10\u00b7x + 1). \n\n\n\nYou need to help Vasily to transform the number a into the number b using only the operations described above, or find that it is impossible.\n\nNote that in this task you are not required to minimize the number of operations. It suffices to find any way to transform a into b.\n\nInput\n\nThe first line contains two positive integers a and b (1 \u2264 a < b \u2264 109) \u2014 the number which Vasily has and the number he wants to have.\n\nOutput\n\nIf there is no way to get b from a, print \"NO\" (without quotes).\n\nOtherwise print three lines. On the first line print \"YES\" (without quotes). The second line should contain single integer k \u2014 the length of the transformation sequence. On the third line print the sequence of transformations x1, x2, ..., xk, where:\n\n  * x1 should be equal to a, \n  * xk should be equal to b, \n  * xi should be obtained from xi - 1 using any of two described operations (1 < i \u2264 k). \n\n\n\nIf there are multiple answers, print any of them.\n\nExamples\n\nInput\n\n2 162\n\n\nOutput\n\nYES\n5\n2 4 8 81 162 \n\n\nInput\n\n4 42\n\n\nOutput\n\nNO\n\n\nInput\n\n100 40021\n\n\nOutput\n\nYES\n5\n100 200 2001 4002 40021 ",
        "task_name": "727_A. Transformation: from A to B",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nn, big = map(int, raw_input().split())\n\ntotal = [str(big)]\ntemp = big\nwhile big > n:\n\n    if big % 2 == 0:\n        big = big / 2\n        total.append(str(big))\n\n    else:\n        temp = (big - 1) // 10\n        if temp * 10  + 1 == big:\n            total.append(str(temp))\n            big = temp\n        else:\n            break\n            \n\nif total[-1] == str(n):\n    sys.stdout.write('YES\\n%d\\n' %len(total) + ' '.join(total[::-1]) +'\\n')\nelse:\n    sys.stdout.write('NO\\n')\n",
        "correct": true,
        "task_id": "0973",
        "depth": 1
    },
    {
        "description": "Santa Claus decided to disassemble his keyboard to clean it. After he returned all the keys back, he suddenly realized that some pairs of keys took each other's place! That is, Santa suspects that each key is either on its place, or on the place of another key, which is located exactly where the first key should be. \n\nIn order to make sure that he's right and restore the correct order of keys, Santa typed his favorite patter looking only to his keyboard.\n\nYou are given the Santa's favorite patter and the string he actually typed. Determine which pairs of keys could be mixed. Each key must occur in pairs at most once.\n\nInput\n\nThe input consists of only two strings s and t denoting the favorite Santa's patter and the resulting string. s and t are not empty and have the same length, which is at most 1000. Both strings consist only of lowercase English letters.\n\nOutput\n\nIf Santa is wrong, and there is no way to divide some of keys into pairs and swap keys in each pair so that the keyboard will be fixed, print \u00ab-1\u00bb (without quotes).\n\nOtherwise, the first line of output should contain the only integer k (k \u2265 0) \u2014 the number of pairs of keys that should be swapped. The following k lines should contain two space-separated letters each, denoting the keys which should be swapped. All printed letters must be distinct.\n\nIf there are several possible answers, print any of them. You are free to choose the order of the pairs and the order of keys in a pair.\n\nEach letter must occur at most once. Santa considers the keyboard to be fixed if he can print his favorite patter without mistakes.\n\nExamples\n\nInput\n\nhelloworld\nehoolwlroz\n\n\nOutput\n\n3\nh e\nl o\nd z\n\n\nInput\n\nhastalavistababy\nhastalavistababy\n\n\nOutput\n\n0\n\n\nInput\n\nmerrychristmas\nchristmasmerry\n\n\nOutput\n\n-1",
        "task_name": "748_B. Santa Claus and Keyboard Check",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def main():\n\ts = raw_input()\n\tt = raw_input()\n\n\tif s == t:\n\t\tprint(0)\n\t\treturn\n\n\talphabet = 'abcdefghijklmnopqrstuvwxyz'\n\tpairs = {i: -1 for i in alphabet}\n\tadded = {i: False for i in alphabet}\n\n\tfor i in range(0, len(t)):\n\t\tif pairs[t[i]] == -1 and not added[s[i]]:\n\t\t\tpairs[t[i]] = s[i]\n\t\t\tpairs[s[i]] = t[i]\n\t\t\tadded[s[i]] = True\n\t\telif pairs[t[i]] != s[i] and pairs[s[i]] != t[i]:\n\t\t\tprint(-1)\n\t\t\treturn\n\tprint(pairs)\n\tres = ''\n\tfor i in range(0, len(t)):\n\t\tres += pairs[t[i]]\n\n\tif s != res:\n\t\tprint(-1)\n\telse:\n\t\tqty = 0\n\t\tvalid_pairs = []\n\t\tadded = {i: False for i in alphabet}\n\t\tx = 0\n\t\tfor (key, value) in pairs.iteritems():\n\t\t\tif value != -1 and key != value and not added[key]:\n\t\t\t\tvalid_pairs.append((key, value))\n\t\t\t\tqty += 1\n\t\t\t\tadded[key] = True\n\t\t\t\tadded[value] = True\n\t\t\tx += 1\n\t\tprint(qty)\n\t\tfor i in valid_pairs:\n\t\t\tprint(\"%s %s\" % (i[0], i[1]))\n\treturn\n\nmain()",
        "correct": false,
        "task_id": "0974",
        "depth": 1
    },
    {
        "description": "Bear Limak examines a social network. Its main functionality is that two members can become friends (then they can talk with each other and share funny pictures).\n\nThere are n members, numbered 1 through n. m pairs of members are friends. Of course, a member can't be a friend with themselves.\n\nLet A-B denote that members A and B are friends. Limak thinks that a network is reasonable if and only if the following condition is satisfied: For every three distinct members (X, Y, Z), if X-Y and Y-Z then also X-Z.\n\nFor example: if Alan and Bob are friends, and Bob and Ciri are friends, then Alan and Ciri should be friends as well.\n\nCan you help Limak and check if the network is reasonable? Print \"YES\" or \"NO\" accordingly, without the quotes.\n\nInput\n\nThe first line of the input contain two integers n and m (3 \u2264 n \u2264 150 000, <image>) \u2014 the number of members and the number of pairs of members that are friends.\n\nThe i-th of the next m lines contains two distinct integers ai and bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi). Members ai and bi are friends with each other. No pair of members will appear more than once in the input.\n\nOutput\n\nIf the given network is reasonable, print \"YES\" in a single line (without the quotes). Otherwise, print \"NO\" in a single line (without the quotes).\n\nExamples\n\nInput\n\n4 3\n1 3\n3 4\n1 4\n\n\nOutput\n\nYES\n\n\nInput\n\n4 4\n3 1\n2 3\n3 4\n1 2\n\n\nOutput\n\nNO\n\n\nInput\n\n10 4\n4 3\n5 10\n8 9\n1 2\n\n\nOutput\n\nYES\n\n\nInput\n\n3 2\n1 2\n2 3\n\n\nOutput\n\nNO\n\nNote\n\nThe drawings below show the situation in the first sample (on the left) and in the second sample (on the right). Each edge represents two members that are friends. The answer is \"NO\" in the second sample because members (2, 3) are friends and members (3, 4) are friends, while members (2, 4) are not.\n\n<image>",
        "task_name": "771_A. Bear and Friendship Condition",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nn, m = map(int, stdin.readline().rstrip().split())\n#n, m = 4,3\ngraph = {}\nfor i in range(n):\n    graph[i+1] = []\nfor i in range(m):\n    edge = map(int, stdin.readline().rstrip().split())\n    graph[edge[0]].append(edge[1])\n    graph[edge[1]].append(edge[0])\n#graph = {1:[3,4], 2:[], 3:[1,4], 4:[1,3]}\n\nleftToCheck = set([i+1 for i in range(n)])\nisGood = True\nwhile len(leftToCheck) > 0:\n    checkMe = leftToCheck.pop()\n    neighbors = graph[checkMe]\n    cliqueSize = len(neighbors)\n    for neighbor in neighbors:\n        if len(graph[neighbor]) != cliqueSize:\n            isGood = False\n            leftToCheck = set([])\n            break\n    leftToCheck.discard(set(neighbors))\n\nif isGood:\n    print('YES')\nelse:\n    print('NO')\n\n\n",
        "correct": false,
        "task_id": "0975",
        "depth": 2
    },
    {
        "description": "Zane the wizard had never loved anyone before, until he fell in love with a girl, whose name remains unknown to us.\n\n<image>\n\nThe girl lives in house m of a village. There are n houses in that village, lining in a straight line from left to right: house 1, house 2, ..., house n. The village is also well-structured: house i and house i + 1 (1 \u2264 i < n) are exactly 10 meters away. In this village, some houses are occupied, and some are not. Indeed, unoccupied houses can be purchased.\n\nYou will be given n integers a1, a2, ..., an that denote the availability and the prices of the houses. If house i is occupied, and therefore cannot be bought, then ai equals 0. Otherwise, house i can be bought, and ai represents the money required to buy it, in dollars.\n\nAs Zane has only k dollars to spare, it becomes a challenge for him to choose the house to purchase, so that he could live as near as possible to his crush. Help Zane determine the minimum distance from his crush's house to some house he can afford, to help him succeed in his love.\n\nInput\n\nThe first line contains three integers n, m, and k (2 \u2264 n \u2264 100, 1 \u2264 m \u2264 n, 1 \u2264 k \u2264 100) \u2014 the number of houses in the village, the house where the girl lives, and the amount of money Zane has (in dollars), respectively.\n\nThe second line contains n integers a1, a2, ..., an (0 \u2264 ai \u2264 100) \u2014 denoting the availability and the prices of the houses.\n\nIt is guaranteed that am = 0 and that it is possible to purchase some house with no more than k dollars.\n\nOutput\n\nPrint one integer \u2014 the minimum distance, in meters, from the house where the girl Zane likes lives to the house Zane can buy.\n\nExamples\n\nInput\n\n5 1 20\n0 27 32 21 19\n\n\nOutput\n\n40\n\nInput\n\n7 3 50\n62 0 0 0 99 33 22\n\n\nOutput\n\n30\n\nInput\n\n10 5 100\n1 0 1 0 0 0 0 0 1 1\n\n\nOutput\n\n20\n\nNote\n\nIn the first sample, with k = 20 dollars, Zane can buy only house 5. The distance from house m = 1 to house 5 is 10 + 10 + 10 + 10 = 40 meters.\n\nIn the second sample, Zane can buy houses 6 and 7. It is better to buy house 6 than house 7, since house m = 3 and house 6 are only 30 meters away, while house m = 3 and house 7 are 40 meters away.",
        "task_name": "796_A. Buying A House",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n , m , k = [int(x) for x in raw_input().split()]\narr = [int(x) for x in raw_input().split()]\ncount = 1\nwhile(True):\n\tif(m+count<n):\n\t\tif(arr[m+count]<=k and arr[m+count]!=0):\n\t\t\tprint (count+1)*10\n\t\t\texit()\n\tif(m-count>0):\n\t\tif(arr[m-count]<=k and arr[m-count]!=0):\n\t\t\tprint (count+1)*10\n\t\t\texit()\n\tcount+=1",
        "correct": false,
        "task_id": "0976",
        "depth": 1
    },
    {
        "description": "To stay woke and attentive during classes, Karen needs some coffee!\n\n<image>\n\nKaren, a coffee aficionado, wants to know the optimal temperature for brewing the perfect cup of coffee. Indeed, she has spent some time reading several recipe books, including the universally acclaimed \"The Art of the Covfefe\".\n\nShe knows n coffee recipes. The i-th recipe suggests that coffee should be brewed between li and ri degrees, inclusive, to achieve the optimal taste.\n\nKaren thinks that a temperature is admissible if at least k recipes recommend it.\n\nKaren has a rather fickle mind, and so she asks q questions. In each question, given that she only wants to prepare coffee with a temperature between a and b, inclusive, can you tell her how many admissible integer temperatures fall within the range?\n\nInput\n\nThe first line of input contains three integers, n, k (1 \u2264 k \u2264 n \u2264 200000), and q (1 \u2264 q \u2264 200000), the number of recipes, the minimum number of recipes a certain temperature must be recommended by to be admissible, and the number of questions Karen has, respectively.\n\nThe next n lines describe the recipes. Specifically, the i-th line among these contains two integers li and ri (1 \u2264 li \u2264 ri \u2264 200000), describing that the i-th recipe suggests that the coffee be brewed between li and ri degrees, inclusive.\n\nThe next q lines describe the questions. Each of these lines contains a and b, (1 \u2264 a \u2264 b \u2264 200000), describing that she wants to know the number of admissible integer temperatures between a and b degrees, inclusive.\n\nOutput\n\nFor each question, output a single integer on a line by itself, the number of admissible integer temperatures between a and b degrees, inclusive.\n\nExamples\n\nInput\n\n3 2 4\n91 94\n92 97\n97 99\n92 94\n93 97\n95 96\n90 100\n\n\nOutput\n\n3\n3\n0\n4\n\n\nInput\n\n2 1 1\n1 1\n200000 200000\n90 100\n\n\nOutput\n\n0\n\nNote\n\nIn the first test case, Karen knows 3 recipes.\n\n  1. The first one recommends brewing the coffee between 91 and 94 degrees, inclusive. \n  2. The second one recommends brewing the coffee between 92 and 97 degrees, inclusive. \n  3. The third one recommends brewing the coffee between 97 and 99 degrees, inclusive. \n\n\n\nA temperature is admissible if at least 2 recipes recommend it.\n\nShe asks 4 questions.\n\nIn her first question, she wants to know the number of admissible integer temperatures between 92 and 94 degrees, inclusive. There are 3: 92, 93 and 94 degrees are all admissible.\n\nIn her second question, she wants to know the number of admissible integer temperatures between 93 and 97 degrees, inclusive. There are 3: 93, 94 and 97 degrees are all admissible.\n\nIn her third question, she wants to know the number of admissible integer temperatures between 95 and 96 degrees, inclusive. There are none.\n\nIn her final question, she wants to know the number of admissible integer temperatures between 90 and 100 degrees, inclusive. There are 4: 92, 93, 94 and 97 degrees are all admissible.\n\nIn the second test case, Karen knows 2 recipes.\n\n  1. The first one, \"wikiHow to make Cold Brew Coffee\", recommends brewing the coffee at exactly 1 degree. \n  2. The second one, \"What good is coffee that isn't brewed at at least 36.3306 times the temperature of the surface of the sun?\", recommends brewing the coffee at exactly 200000 degrees. \n\n\n\nA temperature is admissible if at least 1 recipe recommends it.\n\nIn her first and only question, she wants to know the number of admissible integer temperatures that are actually reasonable. There are none.",
        "task_name": "816_B. Karen and Coffee",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, k, q = [int(x) for x in raw_input().split()]\n\nrecipes = []\nfor i in xrange(n):\n    recipes.append([int(x) for x in raw_input().split()])\n\nrecipes.sort()\nrecipes.append([2 * 10**5 + 2, 2 * 10**5 + 2])\ntimes = [0] * (2 * 10**5 + 1)\n\nstart = recipes[0][0]\ncurr = start\ni, j = 0, 0\nnum = 0\nflag = False\nfor x in range(start, 2 * 10**5 + 1):\n    while i != n - 1 and curr == recipes[i][0]:\n        num += 1\n        i += 1\n        \n    if i == n - 1:\n        if not flag and x == recipes[i][0]:\n            num += 1\n            flag = True\n            \n    while curr > recipes[j][1]:\n        num -= 1\n        j += 1\n    times[x] = num\n    curr = x + 1\n\n\ngood = []\nfor x in times:\n    if x >= k:\n        good.append(1)\n    else:\n        good.append(0)\n\n        \nsums = []\ns = 0\nfor l in good:\n    s += l\n    sums.append(s)\n\n    \nfor i in range(q):\n    l, r = [int(x) for x in raw_input().split()]\n    print(sums[r] - sums[l - 1])",
        "correct": false,
        "task_id": "0977",
        "depth": 2
    },
    {
        "description": "Leha somehow found an array consisting of n integers. Looking at it, he came up with a task. Two players play the game on the array. Players move one by one. The first player can choose for his move a subsegment of non-zero length with an odd sum of numbers and remove it from the array, after that the remaining parts are glued together into one array and the game continues. The second player can choose a subsegment of non-zero length with an even sum and remove it. Loses the one who can not make a move. Who will win if both play optimally?\n\nInput\n\nFirst line of input data contains single integer n (1 \u2264 n \u2264 106) \u2014 length of the array.\n\nNext line contains n integers a1, a2, ..., an (0 \u2264 ai \u2264 109).\n\nOutput\n\nOutput answer in single line. \"First\", if first player wins, and \"Second\" otherwise (without quotes).\n\nExamples\n\nInput\n\n4\n1 3 2 3\n\n\nOutput\n\nFirst\n\n\nInput\n\n2\n2 2\n\n\nOutput\n\nSecond\n\nNote\n\nIn first sample first player remove whole array in one move and win.\n\nIn second sample first player can't make a move and lose.",
        "task_name": "841_B. Godsend",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# coding: utf-8\n\nwinner = {1: 'Second', 2: 'First'}\nn = int(raw_input())\narray = list(map(int, raw_input().split()))\nflag = 0\n\nfor x in array:\n    if x & 1:\n        print(\"First\")\n        flag = 1\n        break\n\nif flag == 0:\n    print(\"Second\")\n",
        "correct": true,
        "task_id": "0978",
        "depth": 1
    },
    {
        "description": "Mahmoud and Ehab are on the third stage of their adventures now. As you know, Dr. Evil likes sets. This time he won't show them any set from his large collection, but will ask them to create a new set to replenish his beautiful collection of sets.\n\nDr. Evil has his favorite evil integer x. He asks Mahmoud and Ehab to find a set of n distinct non-negative integers such the bitwise-xor sum of the integers in it is exactly x. Dr. Evil doesn't like big numbers, so any number in the set shouldn't be greater than 106.\n\nInput\n\nThe only line contains two integers n and x (1 \u2264 n \u2264 105, 0 \u2264 x \u2264 105) \u2014 the number of elements in the set and the desired bitwise-xor, respectively.\n\nOutput\n\nIf there is no such set, print \"NO\" (without quotes).\n\nOtherwise, on the first line print \"YES\" (without quotes) and on the second line print n distinct integers, denoting the elements in the set is any order. If there are multiple solutions you can print any of them.\n\nExamples\n\nInput\n\n5 5\n\n\nOutput\n\nYES\n1 2 4 5 7\n\nInput\n\n3 6\n\n\nOutput\n\nYES\n1 2 5\n\nNote\n\nYou can read more about the bitwise-xor operation here: <https://en.wikipedia.org/wiki/Bitwise_operation#XOR>\n\nFor the first sample <image>.\n\nFor the second sample <image>.",
        "task_name": "862_C. Mahmoud and Ehab and the xor",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"                         \nBeautiful is better than ugly.\n    Explicit is better than implicit.\nSimple is better than complex.\n    Complex is better than complicated.\nFlat is better than nested.\n    Sparse is better than dense.\n                    \n    * Readability counts *\n\n // Author : raj1307 - Raj Singh\n // Date   : 27.06.19\n\n\"\"\"\n\nfrom __future__ import division, print_function\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    _str = str\n    str = lambda x=b\"\": x if type(x) is bytes else _str(x).encode()\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial,pow,pi\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod,MOD=1000000007,998244353\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p1\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n# For getting input from input.txt file \n#sys.stdin = open('input.txt', 'r')  \n  \n# Printing the Output to output.txt file \n#sys.stdout = open('output.txt', 'w') \n\ndef main():\n    \n    \n    \n    n,k=mi()\n    a=[1]\n    xor=1\n    print('YES')\n    if n==1:\n        print(k)\n    else:\n        c=2\n        for i in range(n-2):\n            xor^=c\n            a.append(c)\n            c+=1\n            if c%2==0:\n                c+=1\n        \n        a.append(xor^k)\n        print(*a)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        if self.buffer.tell():\n            return self.buffer.read()\n        return os.read(self._fd, os.fstat(self._fd).st_size)\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", b\" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", b\"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nsys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(b\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n    #dmain()",
        "correct": false,
        "task_id": "0979",
        "depth": 1
    },
    {
        "description": "You are given an array a. Some element of this array ai is a local minimum iff it is strictly less than both of its neighbours (that is, ai < ai - 1 and ai < ai + 1). Also the element can be called local maximum iff it is strictly greater than its neighbours (that is, ai > ai - 1 and ai > ai + 1). Since a1 and an have only one neighbour each, they are neither local minima nor local maxima.\n\nAn element is called a local extremum iff it is either local maximum or local minimum. Your task is to calculate the number of local extrema in the given array.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 1000) \u2014 the number of elements in array a.\n\nThe second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 1000) \u2014 the elements of array a.\n\nOutput\n\nPrint the number of local extrema in the given array.\n\nExamples\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\n0\n\n\nInput\n\n4\n1 5 2 5\n\n\nOutput\n\n2",
        "task_name": "888_A. Local Extrema",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\n\nn = int(stdin.readline())\na = [0] * n\na = map( int, stdin.readline().rstrip().split() )\n\nres = 0\nfor i in range(1,n-1):\n    if a[i] > a[i+1] and a[i] > a[i-1]:\n        res +=1\n    if a[i] < a[i+1] and a[i] < a[i-1]:\n        res +=1\n\nprint(res)\n",
        "correct": true,
        "task_id": "0980",
        "depth": 1
    },
    {
        "description": "Ehab is interested in the bitwise-xor operation and the special graphs. Mahmoud gave him a problem that combines both. He has a complete graph consisting of n vertices numbered from 0 to n - 1. For all 0 \u2264 u < v < n, vertex u and vertex v are connected with an undirected edge that has weight <image> (where <image> is the [bitwise-xor operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR)). Can you find the weight of the minimum spanning tree of that graph?\n\nYou can read about complete graphs in <https://en.wikipedia.org/wiki/Complete_graph>\n\nYou can read about the minimum spanning tree in <https://en.wikipedia.org/wiki/Minimum_spanning_tree>\n\nThe weight of the minimum spanning tree is the sum of the weights on the edges included in it.\n\nInput\n\nThe only line contains an integer n (2 \u2264 n \u2264 1012), the number of vertices in the graph.\n\nOutput\n\nThe only line contains an integer x, the weight of the graph's minimum spanning tree.\n\nExample\n\nInput\n\n4\n\n\nOutput\n\n4\n\nNote\n\nIn the first sample: <image> The weight of the minimum spanning tree is 1+2+1=4.",
        "task_name": "959_E. Mahmoud and Ehab and the xor-MST",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function, division\nimport sys\nn = int(raw_input())\n\nans = 0\np2 = 1\nwhile p2 < n:\n    num = (n + p2 - 1) // p2\n    num //= 2\n    ans += p2 * num\n    p2 *= 2\n\nprint(ans)\n",
        "correct": true,
        "task_id": "0982",
        "depth": 1
    },
    {
        "description": "We have a string S of length N consisting of `R`, `G`, and `B`.\n\nFind the number of triples (i,~j,~k)~(1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\n* S_i \\neq S_j, S_i \\neq S_k, and S_j \\neq S_k.\n* j - i \\neq k - j.\n\nConstraints\n\n* 1 \\leq N \\leq 4000\n* S is a string of length N consisting of `R`, `G`, and `B`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS\n\n\nOutput\n\nPrint the number of triplets in question.\n\nExamples\n\nInput\n\n4\nRRGB\n\n\nOutput\n\n1\n\n\nInput\n\n39\nRBRBGRBGGBBRRGBBRRRBGGBRBGBRBGBRBBBGBBB\n\n\nOutput\n\n1800",
        "task_name": "p02714 AtCoder Beginner Contest 162 - RGB Triplets",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import bisect\nn = int(raw_input())\ns = raw_input()\nd = {}\nfor i in s:\n\td[i] = []\nfor i in range(len(s)):\n\td[s[i]].append(i)\np = d['R']\nq = d['G']\nr = d['B']\np1 = len(p)\nq1 = len(q)\nr1 = len(r)\nz = 0\nfor i in range(len(p)):\n\tfor j in range(len(q)):\n\t\tl = sorted([p[i],q[j]])\n\t\tto = bisect.bisect_left(r,l[1])\n\t\tisTrue = bisect.bisect_left(r[to:],2*l[1]-l[0])\n\t\ttry:\n\t\t\tif (r[to:])[isTrue] == 2*l[1]-l[0]:\n\t\t\t\tz+=r1-to-1\n\t\t\telse:\n\t\t\t\tz+=r1-to\n\t\texcept:\n\t\t\tz+=r1-to\nfor i in range(len(q)):\n\tfor j in range(len(r)):\n\t\tl = sorted([q[i],r[j]])\n\t\tto = bisect.bisect_left(p,l[1])\n\t\tisTrue = bisect.bisect_left(p[to:],2*l[1]-l[0])\n\t\ttry:\n\t\t\tif (p[to:])[isTrue] == 2*l[1]-l[0]:\n\t\t\t\tz+=p1-to-1\n\t\t\telse:\n\t\t\t\tz+=p1-to\n\t\texcept:\n\t\t\tz+=p1-to\n\t\t\nfor i in range(len(p)):\n\tfor j in range(len(r)):\n\t\tl = sorted([p[i],r[j]])\n\t\tto = bisect.bisect_left(q,l[1])\n\t\tisTrue = bisect.bisect_left(q[to:],2*l[1]-l[0])\n\t\ttry:\n\t\t\tif (q[to:])[isTrue] == 2*l[1]-l[0]:\n\t\t\t\tz+=q1-to-1\n\t\t\telse:\n\t\t\t\tz+=q1-to\n\t\texcept:\n\t\t\tz+=q1-to\n\nprint(z)\n",
        "correct": false,
        "task_id": "0984",
        "depth": 2
    },
    {
        "description": "There is a grid of square cells with H horizontal rows and W vertical columns. The cell at the i-th row and the j-th column will be denoted as Cell (i, j).\n\nIn Cell (i, j), a_{ij} coins are placed.\n\nYou can perform the following operation any number of times:\n\nOperation: Choose a cell that was not chosen before and contains one or more coins, then move one of those coins to a vertically or horizontally adjacent cell.\n\nMaximize the number of cells containing an even number of coins.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq H, W \\leq 500\n* 0 \\leq a_{ij} \\leq 9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W\na_{11} a_{12} ... a_{1W}\na_{21} a_{22} ... a_{2W}\n:\na_{H1} a_{H2} ... a_{HW}\n\n\nOutput\n\nPrint a sequence of operations that maximizes the number of cells containing an even number of coins, in the following format:\n\n\nN\ny_1 x_1 y_1' x_1'\ny_2 x_2 y_2' x_2'\n:\ny_N x_N y_N' x_N'\n\n\nThat is, in the first line, print an integer N between 0 and H \\times W (inclusive), representing the number of operations.\n\nIn the (i+1)-th line (1 \\leq i \\leq N), print four integers y_i, x_i, y_i' and x_i' (1 \\leq y_i, y_i' \\leq H and 1 \\leq x_i, x_i' \\leq W), representing the i-th operation. These four integers represents the operation of moving one of the coins placed in Cell (y_i, x_i) to a vertically or horizontally adjacent cell, (y_i', x_i').\n\nNote that if the specified operation violates the specification in the problem statement or the output format is invalid, it will result in Wrong Answer.\n\nExamples\n\nInput\n\n2 3\n1 2 3\n0 1 1\n\n\nOutput\n\n3\n2 2 2 3\n1 1 1 2\n1 3 1 2\n\n\nInput\n\n3 2\n1 0\n2 1\n1 0\n\n\nOutput\n\n3\n1 1 1 2\n1 2 2 2\n3 1 3 2\n\n\nInput\n\n1 5\n9 9 9 9 9\n\n\nOutput\n\n2\n1 1 1 2\n1 3 1 4",
        "task_name": "p03263 AtCoder Beginner Contest 109 - Make Them Even",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def main():\n    H, W = map(int, raw_input().split())\n    a = []\n    result = []\n    for i in range(H):\n        a.append(map(int, raw_input().split()))\n    # print a\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] %2 == 0:\n                continue\n            else:\n                # if you can move a coin to the right, do so\n                if j + 1 < W:\n                    result.append([i+1,j+1,i+1,j+2])\n                    a[i][j] = a[i][j]-1\n                    a[i][j+1] = a[i][j+1]+1\n                # if you are the right edge and you can move a coin to the bottom, do so\n                elif j+1 == W and i+1 < H:\n                    result.append([i+1,j+1,i+2,j+1])\n                    a[i][j] = a[i][j]-1\n                    a[i+1][j] = a[i+1][j]+1\n                # else:\n                    # print('mo')\n                    # print(i+1)\n                    # print(j+1)\n    print(len(result))\n    for i in range(len(result)):\n        for j in range(len(result[i])):\n            if j == len(result[i]) - 1:\n                print(result[i][j])\n            else:\n                print(result[i][j]),\n\nif __name__ == '__main__':\n    main()\n",
        "correct": true,
        "task_id": "0985",
        "depth": 2
    },
    {
        "description": "Rng has a connected undirected graph with N vertices. Currently, there are M edges in the graph, and the i-th edge connects Vertices A_i and B_i.\n\nRng will add new edges to the graph by repeating the following operation:\n\n* Operation: Choose u and v (u \\neq v) such that Vertex v can be reached by traversing exactly three edges from Vertex u, and add an edge connecting Vertices u and v. It is not allowed to add an edge if there is already an edge connecting Vertices u and v.\n\n\n\nFind the maximum possible number of edges that can be added.\n\nConstraints\n\n* 2 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* 1 \\leq A_i,B_i \\leq N\n* The graph has no self-loops or multiple edges.\n* The graph is connected.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\nA_2 B_2\n:\nA_M B_M\n\n\nOutput\n\nFind the maximum possible number of edges that can be added.\n\nExamples\n\nInput\n\n6 5\n1 2\n2 3\n3 4\n4 5\n5 6\n\n\nOutput\n\n4\n\n\nInput\n\n5 5\n1 2\n2 3\n3 1\n5 4\n5 1\n\n\nOutput\n\n5",
        "task_name": "p03579 CODE FESTIVAL 2017 qual B - 3 Steps",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N,M = map(int,raw_input().split())\nes = [[] for i in range(N)]\nfor i in range(M):\n  a,b = map(int,raw_input().split())\n  a,b = a-1,b-1\n  es[a].append(b)\n  es[b].append(a)\n\ncolors = [0 for i in range(N)]\n\ndef dfs(v,color):\n  colors[v] = color\n  for to in es[v]:\n    if colors[to] == color:\n      return False\n    if colors[to] == 0 and not dfs(to, -color):\n      return False\n  return True\n\ndef is_bipartite():\n  return dfs(0,1)\n\nif is_bipartite():\n  b = (sum(colors) + N) // 2\n  w = N-b\n  print(b*w - M)\nelse:\n  all = N*(N-1) // 2\n  print(all - M)",
        "correct": false,
        "task_id": "0986",
        "depth": 1
    },
    {
        "description": "Write a program which solve a simultaneous equation:\n\nax + by = c\ndx + ey = f\n\nThe program should print x and y for given a, b, c, d, e and f (-1,000 \u2264 a, b, c, d, e, f \u2264 1,000). You can suppose that given equation has a unique solution.\n\n\n\nInput\n\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be a, b, c, d, e, f separated by a single space. The input terminates with EOF.\n\nOutput\n\nFor each data set, print x and y separated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\n\nExamples\n\nInput\n\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\n\n\nOutput\n\n-1.000 2.000\n1.000 4.000\n\n\nInput\n\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\n\n\nOutput\n\n0.000 3.000\n0.000 3.000",
        "task_name": "p00004 Simultaneous Equation",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "while True:\n    try:\n        a, b, c, d, e, f = map(float, raw_input().split()) \n        x = (c*e - b*f)/(a*e - b*d)\n        y = (c*d - a*f)/(b*d - a*e)\n        x = round(1000*x)/1000\n        y = round(1000*y)/1000\n        print (\"%.3f %.3f\" % (x, y))\n    except:\n        break",
        "correct": false,
        "task_id": "0987",
        "depth": 1
    },
    {
        "description": "You are given an undirected graph consisting of n vertices. A number is written on each vertex; the number on vertex i is a_i. Initially there are no edges in the graph.\n\nYou may add some edges to this graph, but you have to pay for them. The cost of adding an edge between vertices x and y is a_x + a_y coins. There are also m special offers, each of them is denoted by three numbers x, y and w, and means that you can add an edge connecting vertices x and y and pay w coins for it. You don't have to use special offers: if there is a pair of vertices x and y that has a special offer associated with it, you still may connect these two vertices paying a_x + a_y coins for it.\n\nWhat is the minimum number of coins you have to spend to make the graph connected? Recall that a graph is connected if it's possible to get from any vertex to any other vertex using only the edges belonging to this graph.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5, 0 \u2264 m \u2264 2 \u22c5 10^5) \u2014 the number of vertices in the graph and the number of special offers, respectively.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^{12}) \u2014 the numbers written on the vertices.\n\nThen m lines follow, each containing three integers x, y and w (1 \u2264 x, y \u2264 n, 1 \u2264 w \u2264 10^{12}, x \u2260 y) denoting a special offer: you may add an edge connecting vertex x and vertex y, and this edge will cost w coins.\n\nOutput\n\nPrint one integer \u2014 the minimum number of coins you have to pay to make the graph connected.\n\nExamples\n\nInput\n\n\n3 2\n1 3 3\n2 3 5\n2 1 1\n\n\nOutput\n\n\n5\n\n\nInput\n\n\n4 0\n1 3 3 7\n\n\nOutput\n\n\n16\n\n\nInput\n\n\n5 4\n1 2 3 4 5\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n\n\nOutput\n\n\n18\n\nNote\n\nIn the first example it is possible to connect 1 to 2 using special offer 2, and then 1 to 3 without using any offers.\n\nIn next two examples the optimal answer may be achieved without using special offers.",
        "task_name": "1095_F. Make It Connected",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\ndef main() :\n    line = sys.stdin.readline()\n    line1 = line.split(\" \")\n    numVert = int(line1[0])\n    numSO = int(line1[1])\n\n    line = sys.stdin.readline()\n    vertList = line.split(\" \")\n\n    vertList = list(map(int, vertList))\n\n    if numVert == 3 and numSO == 2 and vertList[0] == 1 and vertList[1] == 3 and vertList[2] == 3:\n        print(5)\n        return\n\n    minVert = min(vertList)\n\n    vertDict = dict()\n\n    totalCost = 0\n\n    for vert in vertList:\n        vertDict[vert] = vertDict.get(vert, 0) + 1\n\n    line = sys.stdin.readline()\n\n    while line:\n        spLine = line.split(\" \")\n        x = int(spLine[0])\n        y = int(spLine[1])\n        w = int(spLine[2])\n\n        mXY = max(x,y)\n\n        if w < (mXY + minVert) :\n            if x in vertDict and y in vertDict:\n                totalCost += w\n                if vertDict[mXY] == 1:\n                    del vertDict[mXY]\n                else:\n                    vertDict[mXY] -= 1\n\n        line = sys.stdin.readline()\n\n\n    if vertDict[minVert] == 1:\n        del vertDict[minVert]\n    else:\n        vertDict[minVert] -= 1\n\n\n    line = sys.stdin.readline()\n\n    items = 0\n\n    remItems = vertDict.items()\n\n    for tup in remItems:\n        vertVal = tup[0]\n        numVal = tup[1]\n        totalCost += vertVal * numVal\n        #print(\"vertVal\", vertVal)\n        #print(\"numVal\", numVal)\n        #print(totalCost)\n        items += numVal\n\n    totalCost += items * minVert\n\n    print(totalCost)\n\nmain()\n",
        "correct": false,
        "task_id": "0989",
        "depth": 1
    },
    {
        "description": "You are given array a_1, a_2, ..., a_n. Find the subsegment a_l, a_{l+1}, ..., a_r (1 \u2264 l \u2264 r \u2264 n) with maximum arithmetic mean (1)/(r - l + 1)\u2211_{i=l}^{r}{a_i} (in floating-point numbers, i.e. without any rounding).\n\nIf there are many such subsegments find the longest one.\n\nInput\n\nThe first line contains single integer n (1 \u2264 n \u2264 10^5) \u2014 length of the array a.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^9) \u2014 the array a.\n\nOutput\n\nPrint the single integer \u2014 the length of the longest subsegment with maximum possible arithmetic mean.\n\nExample\n\nInput\n\n\n5\n6 1 6 6 0\n\n\nOutput\n\n\n2\n\nNote\n\nThe subsegment [3, 4] is the longest among all subsegments with maximum arithmetic mean.",
        "task_name": "1117_A. Best Subsegment",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input()) \na = [int(x) for x in raw_input().split()] \n\n\n\"\"\"\nmax_avg = 0\nmax_len = 0\nfor i in range(0, n):\n    for j in range(i, n):\n        tmp = sum(a[i:j+1])/float(j-i+1)\n        if tmp > max_avg:\n            max_avg = tmp\n            max_len = (j-i+1)\n        elif tmp == max_avg:\n            if (j-i+1) > max_len:\n                max_len = (j-i+1)\n\"\"\"\n\nmax_a = max(a)\n#print (max_a)\nmax_len = 0\ntmp = 0\nfor i in range(0,n):\n    if a[i]!=max_a:\n        if tmp > max_len:\n            max_len = tmp\n        tmp = 0\n    elif a[i]==max_a:\n        tmp += 1\nif tmp > max_len:\n    max_len = tmp\n\n\nprint (max_len)\n\n\n\n",
        "correct": true,
        "task_id": "0990",
        "depth": 1
    },
    {
        "description": "You are given a rooted tree with vertices numerated from 1 to n. A tree is a connected graph without cycles. A rooted tree has a special vertex named root.\n\nAncestors of the vertex i are all vertices on the path from the root to the vertex i, except the vertex i itself. The parent of the vertex i is the nearest to the vertex i ancestor of i. Each vertex is a child of its parent. In the given tree the parent of the vertex i is the vertex p_i. For the root, the value p_i is -1.\n\n<image> An example of a tree with n=8, the root is vertex 5. The parent of the vertex 2 is vertex 3, the parent of the vertex 1 is vertex 5. The ancestors of the vertex 6 are vertices 4 and 5, the ancestors of the vertex 7 are vertices 8, 3 and 5\n\nYou noticed that some vertices do not respect others. In particular, if c_i = 1, then the vertex i does not respect any of its ancestors, and if c_i = 0, it respects all of them.\n\nYou decided to delete vertices from the tree one by one. On each step you select such a non-root vertex that it does not respect its parent and none of its children respects it. If there are several such vertices, you select the one with the smallest number. When you delete this vertex v, all children of v become connected with the parent of v.\n\n<image> An example of deletion of the vertex 7.\n\nOnce there are no vertices matching the criteria for deletion, you stop the process. Print the order in which you will delete the vertices. Note that this order is unique.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of vertices in the tree.\n\nThe next n lines describe the tree: the i-th line contains two integers p_i and c_i (1 \u2264 p_i \u2264 n, 0 \u2264 c_i \u2264 1), where p_i is the parent of the vertex i, and c_i = 0, if the vertex i respects its parents, and c_i = 1, if the vertex i does not respect any of its parents. The root of the tree has -1 instead of the parent index, also, c_i=0 for the root. It is guaranteed that the values p_i define a rooted tree with n vertices.\n\nOutput\n\nIn case there is at least one vertex to delete, print the only line containing the indices of the vertices you will delete in the order you delete them. Otherwise print a single integer -1.\n\nExamples\n\nInput\n\n\n5\n3 1\n1 1\n-1 0\n2 1\n3 0\n\n\nOutput\n\n\n1 2 4 \n\n\nInput\n\n\n5\n-1 0\n1 1\n1 1\n2 0\n3 0\n\n\nOutput\n\n\n-1\n\n\nInput\n\n\n8\n2 1\n-1 0\n1 0\n1 1\n1 1\n4 0\n5 1\n7 0\n\n\nOutput\n\n\n5 \n\nNote\n\nThe deletion process in the first example is as follows (see the picture below, the vertices with c_i=1 are in yellow):\n\n  * first you will delete the vertex 1, because it does not respect ancestors and all its children (the vertex 2) do not respect it, and 1 is the smallest index among such vertices; \n  * the vertex 2 will be connected with the vertex 3 after deletion; \n  * then you will delete the vertex 2, because it does not respect ancestors and all its children (the only vertex 4) do not respect it; \n  * the vertex 4 will be connected with the vertex 3; \n  * then you will delete the vertex 4, because it does not respect ancestors and all its children (there are none) do not respect it ([vacuous truth](https://en.wikipedia.org/wiki/Vacuous_truth)); \n  * you will just delete the vertex 4; \n  * there are no more vertices to delete. \n\n<image>\n\nIn the second example you don't need to delete any vertex:\n\n  * vertices 2 and 3 have children that respect them; \n  * vertices 4 and 5 respect ancestors. \n\n<image>\n\nIn the third example the tree will change this way:\n\n<image>",
        "task_name": "1143_C. Queen",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport io\nimport os\nimport sys\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from cStringIO import StringIO\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    from io import BytesIO as StringIO\n\nsys.stdout, stream = io.IOBase(), StringIO()\nsys.stdout.flush = lambda: os.write(1, stream.getvalue()) and not stream.truncate(0) and stream.seek(0)\nsys.stdout.write = stream.write if sys.version_info[0] < 3 else lambda s: stream.write(s.encode())\n\ninput, flush = sys.stdin.readline, sys.stdout.flush\ninput = StringIO(os.read(0, os.fstat(0).st_size)).readline\n\n\ndef main():\n    n = int(input())\n    nodes = [[int(i) for i in input().split()] for _ in range(n)]\n\n    a = list(map(lambda x: x[1], nodes))\n\n    for node in nodes:\n        if node[0] != -1:\n            a[node[0] - 1] &= node[1]\n\n    sol = [node + 1 for node, _ in filter(lambda x: x[1], zip(range(n), a))]\n    print(sol if sol else -1)\n\n\nif __name__ == '__main__':\n    main()\n",
        "correct": false,
        "task_id": "0991",
        "depth": 1
    },
    {
        "description": "This problem is same as the next one, but has smaller constraints.\n\nIt was a Sunday morning when the three friends Selena, Shiro and Katie decided to have a trip to the nearby power station (do not try this at home). After arriving at the power station, the cats got impressed with a large power transmission system consisting of many chimneys, electric poles, and wires. Since they are cats, they found those things gigantic.\n\nAt the entrance of the station, there is a map describing the complicated wiring system. Selena is the best at math among three friends. He decided to draw the map on the Cartesian plane. Each pole is now a point at some coordinates (x_i, y_i). Since every pole is different, all of the points representing these poles are distinct. Also, every two poles are connected with each other by wires. A wire is a straight line on the plane infinite in both directions. If there are more than two poles lying on the same line, they are connected by a single common wire.\n\nSelena thinks, that whenever two different electric wires intersect, they may interfere with each other and cause damage. So he wonders, how many pairs are intersecting? Could you help him with this problem?\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 50) \u2014 the number of electric poles.\n\nEach of the following n lines contains two integers x_i, y_i (-10^4 \u2264 x_i, y_i \u2264 10^4) \u2014 the coordinates of the poles.\n\nIt is guaranteed that all of these n points are distinct.\n\nOutput\n\nPrint a single integer \u2014 the number of pairs of wires that are intersecting.\n\nExamples\n\nInput\n\n\n4\n0 0\n1 1\n0 3\n1 2\n\n\nOutput\n\n\n14\n\n\nInput\n\n\n4\n0 0\n0 2\n0 4\n2 0\n\n\nOutput\n\n\n6\n\n\nInput\n\n\n3\n-1 -1\n1 0\n3 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first example:\n\n<image>\n\nIn the second example:\n\n<image>\n\nNote that the three poles (0, 0), (0, 2) and (0, 4) are connected by a single wire.\n\nIn the third example:\n\n<image>",
        "task_name": "1163_C1. Power Transmission (Easy Edition)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def gc(a,b):\n    while b:\n        a,b=b,a%b\n    return abs(a)\ndire={}\ndef f(a,b):\n    x0,y0=a\n    x1,y1=b\n    dx=x1-x0\n    dy=y1-y0\n    d=gc(dx,dy)\n    dx//=d\n    dy//=d\n    if dy<0:\n        dy*=-1\n        dx*=-1\n    if dy==0:\n        dx=1\n    if dx==0:\n        dy=1\n    #croise x=0 en y0-dy*x0/dx\n    cl=(dx,dy)\n    if dx:\n        n1=y0*dx-dy*x0\n        d1=dx\n        d=gc(n1,d1)\n        n1//=d\n        d1//=d\n        if d1<0:\n            d1*=-1\n            n1*=-1\n        v=(n1,d1)\n    else:\n        v=x0\n    if not(cl in dire):\n        dire[cl]={v}\n    else:\n        dire[cl].add(v)\nn=int(input())\nl=[]\nfor k in range(n):\n    l.append(tuple(map(int,raw_input().split())))\nfor k in range(n):\n    for i in l[k+1:]:\n        f(l[k],i)\ndire=[len(dire[k]) for k in dire]\ns=sum(dire)\nprint(sum((s-k)*k for k in dire)//2)\n",
        "correct": true,
        "task_id": "0992",
        "depth": 2
    },
    {
        "description": "Melody Pond was stolen from her parents as a newborn baby by Madame Kovarian, to become a weapon of the Silence in their crusade against the Doctor. Madame Kovarian changed Melody's name to River Song, giving her a new identity that allowed her to kill the Eleventh Doctor.\n\nHeidi figured out that Madame Kovarian uses a very complicated hashing function in order to change the names of the babies she steals. In order to prevent this from happening to future Doctors, Heidi decided to prepare herself by learning some basic hashing techniques.\n\nThe first hashing function she designed is as follows.\n\nGiven two positive integers (x, y) she defines H(x,y):=x^2+2xy+x+1.\n\nNow, Heidi wonders if the function is reversible. That is, given a positive integer r, can you find a pair (x, y) (of positive integers) such that H(x, y) = r?\n\nIf multiple such pairs exist, output the one with smallest possible x. If there is no such pair, output \"NO\".\n\nInput\n\nThe first and only line contains an integer r (1 \u2264 r \u2264 10^{12}).\n\nOutput\n\nOutput integers x, y such that H(x,y) = r and x is smallest possible, or \"NO\" if no such pair exists.\n\nExamples\n\nInput\n\n\n19\n\n\nOutput\n\n\n1 8\n\n\nInput\n\n\n16\n\n\nOutput\n\n\nNO",
        "task_name": "1184_A1. Heidi Learns Hashing (Easy)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"                         \nBeautiful is better than ugly.\n    Explicit is better than implicit.\nSimple is better than complex.\n    Complex is better than complicated.\nFlat is better than nested.\n    Sparse is better than dense.\n                    \n    * Readability counts *\n\n // Author : raj1307 - Raj Singh\n // Date   : 7.07.19\n\n\"\"\"\n\nfrom __future__ import division, print_function\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\nelse:\n    _str = str\n    str = lambda x=b\"\": x if type(x) is bytes else _str(x).encode()\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial,pow,pi\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n#from itertools import permutations\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod,MOD=1000000007,998244353\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [i for i in str(n)]\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p1\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n# For getting input from input.txt file \n#sys.stdin = open('input.txt', 'r')  \n  \n# Printing the Output to output.txt file \n#sys.stdout = open('output.txt', 'w') \n\n    \n\ndef main():\n    \n    \n    n=ii()\n    \n    if n%2==0:\n        print('NO')\n    else:\n        if n==1:\n            print('0 0')\n        elif n==3:\n            print('1 0')\n        else:\n            print(1,(n-3)//2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        if self.buffer.tell():\n            return self.buffer.read()\n        return os.read(self._fd, os.fstat(self._fd).st_size)\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", b\" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", b\"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nsys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(b\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n    #dmain()",
        "correct": false,
        "task_id": "0993",
        "depth": 1
    },
    {
        "description": "You are on the island which can be represented as a n \u00d7 m table. The rows are numbered from 1 to n and the columns are numbered from 1 to m. There are k treasures on the island, the i-th of them is located at the position (r_i, c_i).\n\nInitially you stand at the lower left corner of the island, at the position (1, 1). If at any moment you are at the cell with a treasure, you can pick it up without any extra time. In one move you can move up (from (r, c) to (r+1, c)), left (from (r, c) to (r, c-1)), or right (from position (r, c) to (r, c+1)). Because of the traps, you can't move down.\n\nHowever, moving up is also risky. You can move up only if you are in a safe column. There are q safe columns: b_1, b_2, \u2026, b_q. You want to collect all the treasures as fast as possible. Count the minimum number of moves required to collect all the treasures.\n\nInput\n\nThe first line contains integers n, m, k and q (2 \u2264 n,   m,   k,   q \u2264 2 \u22c5 10^5, q \u2264 m) \u2014 the number of rows, the number of columns, the number of treasures in the island and the number of safe columns.\n\nEach of the next k lines contains two integers r_i, c_i, (1 \u2264 r_i \u2264 n, 1 \u2264 c_i \u2264 m) \u2014 the coordinates of the cell with a treasure. All treasures are located in distinct cells.\n\nThe last line contains q distinct integers b_1, b_2, \u2026, b_q (1 \u2264 b_i \u2264 m) \u2014 the indices of safe columns.\n\nOutput\n\nPrint the minimum number of moves required to collect all the treasures.\n\nExamples\n\nInput\n\n\n3 3 3 2\n1 1\n2 1\n3 1\n2 3\n\n\nOutput\n\n\n6\n\nInput\n\n\n3 5 3 2\n1 2\n2 3\n3 1\n1 5\n\n\nOutput\n\n\n8\n\nInput\n\n\n3 6 3 2\n1 6\n2 2\n3 4\n1 6\n\n\nOutput\n\n\n15\n\nNote\n\nIn the first example you should use the second column to go up, collecting in each row treasures from the first column.\n\n<image>\n\nIn the second example, it is optimal to use the first column to go up.\n\n<image>\n\nIn the third example, it is optimal to collect the treasure at cell (1;6), go up to row 2 at column 6, then collect the treasure at cell (2;2), go up to the top row at column 1 and collect the last treasure at cell (3;4). That's a total of 15 moves.\n\n<image>",
        "task_name": "1201_D. Treasure Hunting",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\ndef main():\n    from bisect import bisect_left\n    INF = 200001\n    n, m, k, q = input_as_list()\n    \n    grid = dict()\n    for _ in range(k):\n        r, c = input_as_list()\n        if r not in grid:\n            grid[r] = [c, c]\n        else:\n            grid[r][0] = min(grid[r][0], c)\n            grid[r][1] = max(grid[r][1], c)\n        \n    b = input_as_list()\n    b.sort()\n    \n    g = list(grid.items())\n    g.sort()\n    \n    def f(l, r):\n        if l > r: l, r = r, l\n        \n        lb = bisect_left(b, l)\n        rb = bisect_left(b, r)\n        \n        if lb < rb:\n            return r - l\n        else:\n            left, right = INF, INF\n            if lb > 0:\n                left = l - b[lb-1]\n            if rb < len(g):\n                right = b[rb] - r\n            \n            return r - l + 2*min(left, right)\n        \n    L, R = 0, 0\n    Lpos, Rpos = 1, 1\n    curlv = 1\n    for lv, bd in g:\n        l, r = bd\n        \n        if lv == 1:\n            L = 2*r - l - 1\n            R = r - 1\n            Lpos = l\n            Rpos = r\n            continue\n        \n        R_ = min(f(Lpos, l)+L, f(Rpos, l)+R) + (lv - curlv) + (r - l)\n        L_ = min(f(Lpos, r)+L, f(Rpos, r)+R) + (lv - curlv) + (r - l)\n        \n        L, R = L_, R_\n        Lpos = l\n        Rpos = r\n        curlv = lv\n    \n    print(min(L, R))\n        \n    \n    \n    \n\nINF = float('inf')\nMOD = 10**9 + 7\n\nimport os, sys\nfrom atexit import register\nfrom io import BytesIO\nimport itertools\n\nif sys.version_info[0] < 3:\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\nif \"LOCAL_\" in os.environ:\n    debug_print = print\nelse:\n    sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\n    sys.stdout = BytesIO()\n    register(lambda: os.write(1, sys.stdout.getvalue()))\n\n    input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n    debug_print = lambda *x, **y: None\n\n\ndef input_as_list():\n    return list(map(int, input().split()))\n\ndef array_of(f, *dim):\n    return [array_of(f, *dim[1:]) for _ in range(dim[0])] if dim else f()\n\nmain()",
        "correct": false,
        "task_id": "0994",
        "depth": 1
    },
    {
        "description": "Alice became interested in periods of integer numbers. We say positive X integer number is periodic with length L if there exists positive integer number P with L digits such that X can be written as PPPP\u2026P. For example:\n\nX = 123123123 is periodic number with length L = 3 and L = 9\n\nX = 42424242 is periodic number with length L = 2,L = 4 and L = 8\n\nX = 12345 is periodic number with length L = 5\n\nFor given positive period length L and positive integer number A, Alice wants to find smallest integer number X strictly greater than A that is periodic with length L.\n\nInput\n\nFirst line contains one positive integer number L \\ (1 \u2264 L \u2264 10^5) representing length of the period. Second line contains one positive integer number A \\ (1 \u2264 A \u2264 10^{100 000}).\n\nOutput\n\nOne positive integer number representing smallest positive number that is periodic with length L and is greater than A.\n\nExamples\n\nInput\n\n\n3\n123456\n\n\nOutput\n\n\n124124\n\n\nInput\n\n\n3\n12345\n\n\nOutput\n\n\n100100\n\nNote\n\nIn first example 124124 is the smallest number greater than 123456 that can be written with period L = 3 (P = 124).\n\nIn the second example 100100 is the smallest number greater than 12345 with period L = 3 (P=100)",
        "task_name": "1219_C. Periodic integer number",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nn, s = int(input()), stdin.readline().strip()\nif len(s) % n:\n    tem = '1' + '0' * (n - 1)\n    print(tem * (len(s) // n + 1))\nelif s[:n] == '9' * n:\n    ans1, ans2 = '9' * len(s), '1' + '0' * (n - 1)\n    print(ans1 if ans1 > s else ans2 * (len(s) // n + 1))\nelse:\n    ans1, tem = s[:n] * (len(s) // n), list(s[:n])\n    for i in range(n - 1, -1, -1):\n        if tem[i] != '9':\n            tem[i] = str(int(tem[i]) + 1)\n            break\n        tem[i] = '0'\n\n    ans2 = ''.join(tem) * (len(s) // n)\n    print(ans1 if ans1 > s else ans2)\n",
        "correct": true,
        "task_id": "0995",
        "depth": 1
    },
    {
        "description": "A PIN code is a string that consists of exactly 4 digits. Examples of possible PIN codes: 7013, 0000 and 0990. Please note that the PIN code can begin with any digit, even with 0.\n\nPolycarp has n (2 \u2264 n \u2264 10) bank cards, the PIN code of the i-th card is p_i.\n\nPolycarp has recently read a recommendation that it is better to set different PIN codes on different cards. Thus he wants to change the minimal number of digits in the PIN codes of his cards so that all n codes would become different.\n\nFormally, in one step, Polycarp picks i-th card (1 \u2264 i \u2264 n), then in its PIN code p_i selects one position (from 1 to 4), and changes the digit in this position to any other. He needs to change the minimum number of digits so that all PIN codes become different.\n\nPolycarp quickly solved this problem. Can you solve it?\n\nInput\n\nThe first line contains integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases in the input. Then test cases follow.\n\nThe first line of each of t test sets contains a single integer n (2 \u2264 n \u2264 10) \u2014 the number of Polycarp's bank cards. The next n lines contain the PIN codes p_1, p_2, ..., p_n \u2014 one per line. The length of each of them is 4. All PIN codes consist of digits only.\n\nOutput\n\nPrint the answers to t test sets. The answer to each set should consist of a n + 1 lines\n\nIn the first line print k \u2014 the least number of changes to make all PIN codes different. In the next n lines output the changed PIN codes in the order corresponding to their appearance in the input. If there are several optimal answers, print any of them.\n\nExample\n\nInput\n\n\n3\n2\n1234\n0600\n2\n1337\n1337\n4\n3139\n3139\n3139\n3139\n\n\nOutput\n\n\n0\n1234\n0600\n1\n1337\n1237\n3\n3139\n3138\n3939\n6139",
        "task_name": "1263_B. PIN Codes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function,division\n\ndef f():\n    n=int(raw_input())\n    #print(n)\n    l=[int(raw_input()) for k in range(n)]\n    li=[True]*10\n    for k in l:\n        li[k%10]=False\n    k=0\n    for i in range(n-1):\n        if l[i] in l[i+1:]:\n            k+=1\n            r=0\n            while not(li[r]):\n                r+=1\n            li[r]=False\n            l[i]=10*(l[i]//10)+r\n    print(k)\n    for j in l:\n        print(j)\nfor z in range(int(raw_input())):\n    #print(z)\n    f()\n",
        "correct": false,
        "task_id": "0996",
        "depth": 2
    },
    {
        "description": "You are given two positive integers a and b. In one move you can increase a by 1 (replace a with a+1). Your task is to find the minimum number of moves you need to do in order to make a divisible by b. It is possible, that you have to make 0 moves, as a is already divisible by b. You have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains two integers a and b (1 \u2264 a, b \u2264 10^9).\n\nOutput\n\nFor each test case print the answer \u2014 the minimum number of moves you need to do in order to make a divisible by b.\n\nExample\n\nInput\n\n\n5\n10 4\n13 9\n100 13\n123 456\n92 46\n\n\nOutput\n\n\n2\n5\n4\n333\n0",
        "task_name": "1328_A. Divisibility Problem",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "t = int(input())\n\nfor i in range(t):\n    \n    a,b = raw_input().split()\n    a =int(a)\n    b = int(b)\n    c = int(a%b)\n    \n    if(c==0):\n        print(\"0\")\n    else:\n        print(b-c)",
        "correct": true,
        "task_id": "0997",
        "depth": 1
    },
    {
        "description": "Phoenix has n coins with weights 2^1, 2^2, ..., 2^n. He knows that n is even.\n\nHe wants to split the coins into two piles such that each pile has exactly n/2 coins and the difference of weights between the two piles is minimized. Formally, let a denote the sum of weights in the first pile, and b denote the sum of weights in the second pile. Help Phoenix minimize |a-b|, the absolute value of a-b.\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe first line of each test case contains an integer n (2 \u2264 n \u2264 30; n is even) \u2014 the number of coins that Phoenix has. \n\nOutput\n\nFor each test case, output one integer \u2014 the minimum possible difference of weights between the two piles.\n\nExample\n\nInput\n\n\n2\n2\n4\n\n\nOutput\n\n\n2\n6\n\nNote\n\nIn the first test case, Phoenix has two coins with weights 2 and 4. No matter how he divides the coins, the difference will be 4-2=2.\n\nIn the second test case, Phoenix has four coins of weight 2, 4, 8, and 16. It is optimal for Phoenix to place coins with weights 2 and 16 in one pile, and coins with weights 4 and 8 in another pile. The difference is (2+16)-(4+8)=6.",
        "task_name": "1348_A. Phoenix and Balance",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nfrom collections import Counter, defaultdict\nfrom itertools import permutations, combinations\nraw_input = stdin.readline\npr = stdout.write\n\n\ndef in_num():\n    return int(raw_input())\n\n\ndef in_arr():\n    return map(int,raw_input().split())\n\n\ndef pr_num(n):\n    stdout.write(str(n)+'\\n')\n\n\ndef pr_arr(arr):\n    pr(' '.join(map(str,arr))+'\\n')\n\n# fast read function for total integer input\n\ndef inp():\n    # this function returns whole input of\n    # space/line seperated integers\n    # Use Ctrl+D to flush stdin.\n    return map(int,stdin.read().split())\n\nrange = xrange # not for python 3.0+\ntemp=[2**i for i in range(31)]\nfor t in range(input()):\n    n=input()\n    \n    ans=2\n    n/=2\n    #n-=1\n    for i in range(1,n):\n        ans+=2*temp[i]\n    pr_num(ans)\n",
        "correct": true,
        "task_id": "0998",
        "depth": 2
    },
    {
        "description": "Let's define a function f(x) (x is a positive integer) as follows: write all digits of the decimal representation of x backwards, then get rid of the leading zeroes. For example, f(321) = 123, f(120) = 21, f(1000000) = 1, f(111) = 111.\n\nLet's define another function g(x) = (x)/(f(f(x))) (x is a positive integer as well).\n\nYour task is the following: for the given positive integer n, calculate the number of different values of g(x) among all numbers x such that 1 \u2264 x \u2264 n.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nEach test case consists of one line containing one integer n (1 \u2264 n < 10^{100}). This integer is given without leading zeroes.\n\nOutput\n\nFor each test case, print one integer \u2014 the number of different values of the function g(x), if x can be any integer from [1, n].\n\nExample\n\nInput\n\n\n5\n4\n37\n998244353\n1000000007\n12345678901337426966631415\n\n\nOutput\n\n\n1\n2\n9\n10\n26\n\nNote\n\nExplanations for the two first test cases of the example:\n\n  1. if n = 4, then for every integer x such that 1 \u2264 x \u2264 n, (x)/(f(f(x))) = 1; \n  2. if n = 37, then for some integers x such that 1 \u2264 x \u2264 n, (x)/(f(f(x))) = 1 (for example, if x = 23, f(f(x)) = 23,(x)/(f(f(x))) = 1); and for other values of x, (x)/(f(f(x))) = 10 (for example, if x = 30, f(f(x)) = 3, (x)/(f(f(x))) = 10). So, there are two different values of g(x). ",
        "task_name": "1455_A. Strange Functions",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\n''' Hey stalker :) '''\nINF = 10 ** 50\nTEST_CASES = True\n\nfrom collections import defaultdict, deque, Counter\nfrom functools import reduce\nfrom bisect import bisect_left\n\ndef main():\n    print(len(input()))\n\n''' FastIO Footer: PyRival Library, Thanks @c1729 and contributors '''\nimport os\nimport sys\nfrom bisect import bisect_left, bisect_right, bisect\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\n# else:\n#     sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nget_int = lambda: int(input())\nget_list = lambda: list(map(int, input().split()))\n\nif __name__ == \"__main__\":\n    if TEST_CASES:\n        [main() for _ in range(int(input()))]\n    else:\n        main()\n",
        "correct": true,
        "task_id": "0999",
        "depth": 1
    },
    {
        "description": "Polycarp found a rectangular table consisting of n rows and m columns. He noticed that each cell of the table has its number, obtained by the following algorithm \"by columns\": \n\n  * cells are numbered starting from one; \n  * cells are numbered from left to right by columns, and inside each column from top to bottom; \n  * number of each cell is an integer one greater than in the previous cell. \n\n\n\nFor example, if n = 3 and m = 5, the table will be numbered as follows:\n\n$$$ \\begin{matrix} 1 & 4 & 7 & 10 & 13 \\\\\\ 2 & 5 & 8 & 11 & 14 \\\\\\ 3 & 6 & 9 & 12 & 15 \\\\\\ \\end{matrix} $$$\n\nHowever, Polycarp considers such numbering inconvenient. He likes the numbering \"by rows\": \n\n  * cells are numbered starting from one; \n  * cells are numbered from top to bottom by rows, and inside each row from left to right; \n  * number of each cell is an integer one greater than the number of the previous cell. \n\n\n\nFor example, if n = 3 and m = 5, then Polycarp likes the following table numbering: $$$ \\begin{matrix} 1 & 2 & 3 & 4 & 5 \\\\\\ 6 & 7 & 8 & 9 & 10 \\\\\\ 11 & 12 & 13 & 14 & 15 \\\\\\ \\end{matrix} $$$\n\nPolycarp doesn't have much time, so he asks you to find out what would be the cell number in the numbering \"by rows\", if in the numbering \"by columns\" the cell has the number x?\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4). Then t test cases follow.\n\nEach test case consists of a single line containing three integers n, m, x (1 \u2264 n, m \u2264 10^6, 1 \u2264 x \u2264 n \u22c5 m), where n and m are the number of rows and columns in the table, and x is the cell number.\n\nNote that the numbers in some test cases do not fit into the 32-bit integer type, so you must use at least the 64-bit integer type of your programming language.\n\nOutput\n\nFor each test case, output the cell number in the numbering \"by rows\".\n\nExample\n\nInput\n\n\n5\n1 1 1\n2 2 3\n3 5 11\n100 100 7312\n1000000 1000000 1000000000000\n\n\nOutput\n\n\n1\n2\n9\n1174\n1000000000000",
        "task_name": "1506_A. Strange Table",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Enter your code here. Read input from STDIN. Print output to STDOUT# ===============================================================================================\n# importing some useful libraries.\nfrom __future__ import division, print_function\nfrom fractions import Fraction\nimport sys\nimport os\nfrom io import BytesIO, IOBase\nfrom itertools import *\nimport bisect\nfrom heapq import *\nfrom math import ceil, floor\nfrom copy import *\nfrom collections import deque, defaultdict\nfrom collections import Counter as counter  # Counter(list)  return a dict with {key: count}\nfrom itertools import combinations  # if a = [1,2,3] then print(list(comb(a,2))) -----> [(1, 2), (1, 3), (2, 3)]\nfrom itertools import permutations as permutate\nfrom bisect import bisect_left as bl\nfrom operator import *\n# If the element is already present in the list,\n\n# the left most position where element has to be inserted is returned.\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n\n# If the element is already present in the list,\n# the right most position where element has to be inserted is returned\n\n# ==============================================================================================\n# fast I/O region\n\nBUFSIZE = 8192\nfrom sys import stderr\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"A\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for A in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(A))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n# inp = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# ===============================================================================================\n### START ITERATE RECURSION ###\nfrom types import GeneratorType\n\n\ndef iterative(f, stack=[]):\n    def wrapped_func(*args, **kwargs):\n        if stack: return f(*args, **kwargs)\n        to = f(*args, **kwargs)\n        while True:\n            if type(to) is GeneratorType:\n                stack.append(to)\n                to = next(to)\n                continue\n            stack.pop()\n            if not stack: break\n            to = stack[-1].send(to)\n        return to\n\n    return wrapped_func\n\n\n#### END ITERATE RECURSION ####\n###########################\n# Sorted list\nclass SortedList:\n    def __init__(self, iterable=[], _load=200):\n        \"\"\"Initialize sorted list instance.\"\"\"\n        values = sorted(iterable)\n        self._len = _len = len(values)\n        self._load = _load\n        self._lists = _lists = [values[start:start + _load] for start in range(0, _len, _load)]\n        self._list_lens = [len(_list) for _list in _lists]\n        self._mins = [_list[0] for _list in _lists]\n        self._fen_tree = []\n        self._rebuild = True\n\n    def _fen_build(self):\n        \"\"\"Build a fenwick tree instance.\"\"\"\n        self._fen_tree[:] = self._list_lens\n        _fen_tree = self._fen_tree\n        for start in range(len(_fen_tree)):\n            if start | start + 1 < len(_fen_tree):\n                _fen_tree[start | start + 1] += _fen_tree[start]\n        self._rebuild = False\n\n    def _fen_update(self, index, value):\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\n        if not self._rebuild:\n            _fen_tree = self._fen_tree\n            while index < len(_fen_tree):\n                _fen_tree[index] += value\n                index |= index + 1\n\n    def _fen_query(self, end):\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        A = 0\n        while end:\n            A += _fen_tree[end - 1]\n            end &= end - 1\n        return A\n\n    def _fen_findkth(self, k):\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\n        _list_lens = self._list_lens\n        if k < _list_lens[0]:\n            return 0, k\n        if k >= self._len - _list_lens[-1]:\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        idx = -1\n        for d in reversed(range(len(_fen_tree).bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\n                idx = right_idx\n                k -= _fen_tree[idx]\n        return idx + 1, k\n\n    def _delete(self, pos, idx):\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len -= 1\n        self._fen_update(pos, -1)\n        del _lists[pos][idx]\n        _list_lens[pos] -= 1\n\n        if _list_lens[pos]:\n            _mins[pos] = _lists[pos][0]\n        else:\n            del _lists[pos]\n            del _list_lens[pos]\n            del _mins[pos]\n            self._rebuild = True\n\n    def _loc_left(self, value):\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        lo, pos = -1, len(_lists) - 1\n        while lo + 1 < pos:\n            mi = (lo + pos) >> 1\n            if value <= _mins[mi]:\n                pos = mi\n            else:\n                lo = mi\n\n        if pos and value <= _lists[pos - 1][-1]:\n            pos -= 1\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value <= _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def _loc_right(self, value):\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        pos, hi = 0, len(_lists)\n        while pos + 1 < hi:\n            mi = (pos + hi) >> 1\n            if value < _mins[mi]:\n                hi = mi\n            else:\n                pos = mi\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value < _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def add(self, value):\n        \"\"\"Add `value` to sorted list.\"\"\"\n        _load = self._load\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len += 1\n        if _lists:\n            pos, idx = self._loc_right(value)\n            self._fen_update(pos, 1)\n            _list = _lists[pos]\n            _list.insert(idx, value)\n            _list_lens[pos] += 1\n            _mins[pos] = _list[0]\n            if _load + _load < len(_list):\n                _lists.insert(pos + 1, _list[_load:])\n                _list_lens.insert(pos + 1, len(_list) - _load)\n                _mins.insert(pos + 1, _list[_load])\n                _list_lens[pos] = _load\n                del _list[_load:]\n                self._rebuild = True\n        else:\n            _lists.append([value])\n            _mins.append(value)\n            _list_lens.append(1)\n            self._rebuild = True\n\n    def discard(self, value):\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_right(value)\n            if idx and _lists[pos][idx - 1] == value:\n                self._delete(pos, idx - 1)\n\n    def remove(self, value):\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\n        _len = self._len\n        self.discard(value)\n        if _len == self._len:\n            raise ValueError('{0!r} not in list'.format(value))\n\n    def pop(self, index=-1):\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        value = self._lists[pos][idx]\n        self._delete(pos, idx)\n        return value\n\n    def bisect_left(self, value):\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_left(value)\n        return self._fen_query(pos) + idx\n\n    def bisect_right(self, value):\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_right(value)\n        return self._fen_query(pos) + idx\n\n    def count(self, value):\n        \"\"\"Return number of occurrences of `value` in the sorted list.\"\"\"\n        return self.bisect_right(value) - self.bisect_left(value)\n\n    def __len__(self):\n        \"\"\"Return the size of the sorted list.\"\"\"\n        return self._len\n\n    def __getitem__(self, index):\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        return self._lists[pos][idx]\n\n    def __delitem__(self, index):\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        self._delete(pos, idx)\n\n    def __contains__(self, value):\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_left(value)\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\n        return False\n\n    def __iter__(self):\n        \"\"\"Return an iterator over the sorted list.\"\"\"\n        return (value for _list in self._lists for value in _list)\n\n    def __reversed__(self):\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\n\n    def __repr__(self):\n        \"\"\"Return string representation of sorted list.\"\"\"\n        return 'SortedList({0})'.format(list(self))\n\n\n# ===============================================================================================\n# some shortcuts\n\nmod = 1000000007\n\ntest_count=1\ndef testcase(t):\n    global test_count\n    for p in range(t):\n        solve()\n        test_count+=1\n\n\n\ndef pow(A, B, p):\n    res = 1  # Initialize result\n    A = A % p  # Update A if it is more , than or equal to p\n    if (A == 0):\n        return 0\n    while (B > 0):\n        if ((B & 1) == 1):  # If B is odd, multiply, A with result\n            res = (res * A) % p\n\n        B = B >> 1  # B = B/2\n        A = (A * A) % p\n    return res\n\n\nfrom functools import reduce\n\n\ndef factors(n):\n    return set(reduce(list.__add__,\n                      ([start, n // start] for start in range(1, int(n ** 0.5) + 1) if n % start == 0)))\n\n\ndef gcd(a, b):\n    if a == b: return a\n    while b > 0: a, b = b, a % b\n    return a\n\n\n# discrete binary search\n# minimise:\n# def search():\n#     l = 0\n#     r = 10 ** 15\n#\n#     for start in range(200):\n#         if isvalid(l):\n#             return l\n#         if l == r:\n#             return l\n#         m = (l + r) // 2\n#         if isvalid(m) and not isvalid(m - 1):\n#             return m\n#         if isvalid(m):\n#             r = m + 1\n#         else:\n#             l = m\n#     return m\n\n# maximise:\n# def search():\n#     l = 0\n#     r = 10 ** 15\n#\n#     for start in range(200):\n#         # print(l,r)\n#         if isvalid(r):\n#             return r\n#         if l == r:\n#             return l\n#         m = (l + r) // 2\n#         if isvalid(m) and not isvalid(m + 1):\n#             return m\n#         if isvalid(m):\n#             l = m\n#         else:\n#             r = m - 1\n#     return m\n\n\n##############Find sum of product of subsets of size k in a array\n# ar=[0,1,2,3]\n# k=3\n# n=len(ar)-1\n# dp=[0]*(n+1)\n# dp[0]=1\n# for pos in range(1,n+1):\n#     dp[pos]=0\n#     l=max(1,k+pos-n-1)\n#     for j in range(min(pos,k),l-1,-1):\n#         dp[j]=dp[j]+ar[pos]*dp[j-1]\n# print(dp[k])\n\ndef prefix_sum(ar):  # [1,2,3,4]->[1,3,6,10]\n    return list(accumulate(ar))\n\n\ndef suffix_sum(ar):  # [1,2,3,4]->[10,9,7,4]\n    return list(accumulate(ar[::-1]))[::-1]\n\n\ndef N():\n    return int(inp())\n\n\ndx = [0, 0, 1, -1]\ndy = [1, -1, 0, 0]\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\n# =========================================================================================\nfrom collections import defaultdict\n\n\ndef numberOfSetBits(start):\n    start = start - ((start >> 1) & 0x55555555)\n    start = (start & 0x33333333) + ((start >> 2) & 0x33333333)\n    return (((start + (start >> 4) & 0xF0F0F0F) * 0x1010101) & 0xffffffff) >> 24\n\n\nclass MergeFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n        # self.lista = [[_] for _ in range(n)]\n\n    def find(self, a):\n        to_update = []\n        while a != self.parent[a]:\n            to_update.append(a)\n            a = self.parent[a]\n        for b in to_update:\n            self.parent[b] = a\n        return self.parent[a]\n\n    def merge(self, a, b):\n        a = self.find(a)\n        b = self.find(b)\n        if a == b:\n            return\n        if self.size[a] < self.size[b]:\n            a, b = b, a\n        self.num_sets -= 1\n        self.parent[b] = a\n        self.size[a] += self.size[b]\n        # self.lista[a] += self.lista[b]\n        # self.lista[b] = []\n\n    def set_size(self, a):\n        return self.size[self.find(a)]\n\n    def __len__(self):\n        return self.num_sets\n\n\ndef lcm(a, b):\n    return abs((a // gcd(a, b)) * b)\n\n\n# #\n# to find factorial and ncr\n# tot = 100005\n# mod = 10**9 + 7\n# fac = [1, 1]\n# finv = [1, 1]\n# inv = [0, 1]\n#\n# for start in range(2, tot + 1):\n#     fac.append((fac[-1] * start) % mod)\n#     inv.append(mod - (inv[mod % start] * (mod // start) % mod))\n#     finv.append(finv[-1] * inv[-1] % mod)\n\n\ndef comb(n, r):\n    if n < r:\n        return 0\n    else:\n        return fac[n] * (finv[r] * finv[n - r] % mod) % mod\n\n\ndef inp(): return sys.stdin.readline().rstrip(\"\\r\\n\")  # for fast input\n\n\ndef out(var): sys.stdout.write(str(var))  # for fast output, always take string\n\n\ndef lis(): return list(map(int, inp().split()))\n\n\ndef stringlis(): return list(map(str, inp().split()))\n\n\ndef sep(): return map(int, inp().split())\n\n\ndef strsep(): return map(str, inp().split())\n\n\ndef fsep(): return map(float, inp().split())\n\n\ndef nextline(): out(\"\\n\")  # as stdout.write always print sring.\n\n\ndef arr1d(n, v):\n    return [v] * n\n\n\ndef arr2d(n, m, v):\n    return [[v] * m for _ in range(n)]\n\n\ndef arr3d(n, m, p, v):\n    return [[[v] * p for _ in range(m)] for start in range(n)]\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\n# co-ordinate compression\n# ma={s:idx for idx,s in enumerate(sorted(set(l+r)))}\n\n# mxn=100005\n# lrg=[0]*mxn\n# for start in range(2,mxn-3):\n#     if (lrg[start]==0):\n#         for j in range(start,mxn-3,start):\n#             lrg[j]=start\n\ndef printer(s):\n    print(\"Case #{}: {}\".format(test_count,s))\n\ndef solve():\n    n,m,x=sep()\n    x-=1\n    ans= (x%n)*m + x//n\n    print(ans+1)\n\n\n\n# solve()\ntestcase(N())",
        "correct": true,
        "task_id": "1000",
        "depth": 1
    },
    {
        "description": "Each of you probably has your personal experience of riding public transportation and buying tickets. After a person buys a ticket (which traditionally has an even number of digits), he usually checks whether the ticket is lucky. Let us remind you that a ticket is lucky if the sum of digits in its first half matches the sum of digits in its second half.\n\nBut of course, not every ticket can be lucky. Far from it! Moreover, sometimes one look at a ticket can be enough to say right away that the ticket is not lucky. So, let's consider the following unluckiness criterion that can definitely determine an unlucky ticket. We'll say that a ticket is definitely unlucky if each digit from the first half corresponds to some digit from the second half so that each digit from the first half is strictly less than the corresponding digit from the second one or each digit from the first half is strictly more than the corresponding digit from the second one. Each digit should be used exactly once in the comparisons. In other words, there is such bijective correspondence between the digits of the first and the second half of the ticket, that either each digit of the first half turns out strictly less than the corresponding digit of the second half or each digit of the first half turns out strictly more than the corresponding digit from the second half.\n\nFor example, ticket 2421 meets the following unluckiness criterion and will not be considered lucky (the sought correspondence is 2 > 1 and 4 > 2), ticket 0135 also meets the criterion (the sought correspondence is 0 < 3 and 1 < 5), and ticket 3754 does not meet the criterion. \n\nYou have a ticket in your hands, it contains 2n digits. Your task is to check whether it meets the unluckiness criterion.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 100). The second line contains a string that consists of 2n digits and defines your ticket.\n\nOutput\n\nIn the first line print \"YES\" if the ticket meets the unluckiness criterion. Otherwise, print \"NO\" (without the quotes).\n\nExamples\n\nInput\n\n2\n2421\n\n\nOutput\n\nYES\n\n\nInput\n\n2\n0135\n\n\nOutput\n\nYES\n\n\nInput\n\n2\n3754\n\n\nOutput\n\nNO",
        "task_name": "160_B. Unlucky Ticket",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport traceback\n  \ndef solve():\n    n = map( int, sys.stdin.readline().strip('\\n\\r ').split())[0]\n    s = map( int, list(sys.stdin.readline()[:2*n]) )\n    sb = s[:n]\n    se = s[n:]\n    sb.sort()\n    se.sort()\n    lucky = 0\n    unlucky = 0\n    \n    while sb:\n      b = sb.pop()\n      e = se.pop()\n      if b>e: lucky+=1\n      elif b<e: unlucky+=1\n    if lucky==n or unlucky==n: return \"YES\"\n    return \"NO\"\n\nif __name__==\"__main__\":\n  print( solve() )\n",
        "correct": true,
        "task_id": "1002",
        "depth": 1
    },
    {
        "description": "Little Petya likes permutations a lot. Recently his mom has presented him permutation q1, q2, ..., qn of length n.\n\nA permutation a of length n is a sequence of integers a1, a2, ..., an (1 \u2264 ai \u2264 n), all integers there are distinct. \n\nThere is only one thing Petya likes more than permutations: playing with little Masha. As it turns out, Masha also has a permutation of length n. Petya decided to get the same permutation, whatever the cost may be. For that, he devised a game with the following rules:\n\n  * Before the beginning of the game Petya writes permutation 1, 2, ..., n on the blackboard. After that Petya makes exactly k moves, which are described below. \n  * During a move Petya tosses a coin. If the coin shows heads, he performs point 1, if the coin shows tails, he performs point 2.\n    1. Let's assume that the board contains permutation p1, p2, ..., pn at the given moment. Then Petya removes the written permutation p from the board and writes another one instead: pq1, pq2, ..., pqn. In other words, Petya applies permutation q (which he has got from his mother) to permutation p. \n    2. All actions are similar to point 1, except that Petya writes permutation t on the board, such that: tqi = pi for all i from 1 to n. In other words, Petya applies a permutation that is inverse to q to permutation p. \n\n\n\nWe know that after the k-th move the board contained Masha's permutation s1, s2, ..., sn. Besides, we know that throughout the game process Masha's permutation never occurred on the board before the k-th move. Note that the game has exactly k moves, that is, throughout the game the coin was tossed exactly k times.\n\nYour task is to determine whether the described situation is possible or else state that Petya was mistaken somewhere. See samples and notes to them for a better understanding.\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 100). The second line contains n space-separated integers q1, q2, ..., qn (1 \u2264 qi \u2264 n) \u2014 the permutation that Petya's got as a present. The third line contains Masha's permutation s, in the similar format.\n\nIt is guaranteed that the given sequences q and s are correct permutations.\n\nOutput\n\nIf the situation that is described in the statement is possible, print \"YES\" (without the quotes), otherwise print \"NO\" (without the quotes).\n\nExamples\n\nInput\n\n4 1\n2 3 4 1\n1 2 3 4\n\n\nOutput\n\nNO\n\n\nInput\n\n4 1\n4 3 1 2\n3 4 2 1\n\n\nOutput\n\nYES\n\n\nInput\n\n4 3\n4 3 1 2\n3 4 2 1\n\n\nOutput\n\nYES\n\n\nInput\n\n4 2\n4 3 1 2\n2 1 4 3\n\n\nOutput\n\nYES\n\n\nInput\n\n4 1\n4 3 1 2\n2 1 4 3\n\n\nOutput\n\nNO\n\nNote\n\nIn the first sample Masha's permutation coincides with the permutation that was written on the board before the beginning of the game. Consequently, that violates the condition that Masha's permutation never occurred on the board before k moves were performed.\n\nIn the second sample the described situation is possible, in case if after we toss a coin, we get tails.\n\nIn the third sample the possible coin tossing sequence is: heads-tails-tails.\n\nIn the fourth sample the possible coin tossing sequence is: heads-heads.",
        "task_name": "251_B. Playing with Permutations",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n# -*- coding:GBK\n# author: sunhaowen@baidu.com\n# date: 2012/12/07 01:06\n\ndef here():\n    print(\"PrimeMusic\")\n\nq = []\np = []\n\ndef pointOne(a, n) :\n    b = [0] * (n + 1)\n    for i in xrange(1, n + 1) :\n        b[i] = a[q[i]]\n    for i in xrange(1, n + 1) :\n        a[i] = b[i]\n\ndef pointTwo(a, n) :\n    b = [0] * (n + 1)\n    for i in xrange(1, n + 1) :\n        b[q[i]] = a[i]\n    for i in xrange(1, n + 1) :\n        a[i] = b[i]\n\nif __name__ == \"__main__\":\n    n, k = map(int, raw_input().split())\n    q = [0] + map(int, raw_input().split())\n    p = [0] + map(int, raw_input().split())\n\n    a = [0] * (n + 1)\n\n    for i in xrange(1, n + 1) :\n        a[i] = i\n\n    if a == p :\n        print(\"NO\")\n        exit()\n\n    x = [0] * (n + 1)\n    for i in xrange(1, n + 1) :\n        x[i] = i\n    pointTwo(x, n)\n    for i in xrange(1, k + 1) :\n        pointOne(a, n)\n        if a == p :\n            if i == k :\n                print(\"YES\")\n            elif (k - i) % 2 == 0 and x != p :\n                print(\"YES\")\n            else:\n                print(\"NO\")\n                break\n\n    for i in xrange(1, n + 1) :\n        a[i] = i\n        x[i] = i\n    pointOne(x, n)\n    for i in xrange(1, k + 1) :\n        pointTwo(a, n)\n        if a == p :\n            if (i == k) :\n                print(\"YES\")\n            elif (k - i) % 2 == 0 and x != p :\n                print(\"YES\")\n            else:\n                print(\"NO\")\n            exit()\n\n    print(\"NO\")\n",
        "correct": false,
        "task_id": "1003",
        "depth": 1
    },
    {
        "description": "The little girl loves the problems on array queries very much.\n\nOne day she came across a rather well-known problem: you've got an array of n elements (the elements of the array are indexed starting from 1); also, there are q queries, each one is defined by a pair of integers l_i, r_i (1 \u2264 l_i \u2264 r_i \u2264 n). You need to find for each query the sum of elements of the array with indexes from l_i to r_i, inclusive.\n\nThe little girl found the problem rather boring. She decided to reorder the array elements before replying to the queries in a way that makes the sum of query replies maximum possible. Your task is to find the value of this maximum sum.\n\nInput\n\nThe first line contains two space-separated integers n (1 \u2264 n \u2264 2\u22c510^5) and q (1 \u2264 q \u2264 2\u22c510^5) \u2014 the number of elements in the array and the number of queries, correspondingly.\n\nThe next line contains n space-separated integers a_i (1 \u2264 a_i \u2264 2\u22c510^5) \u2014 the array elements.\n\nEach of the following q lines contains two space-separated integers l_i and r_i (1 \u2264 l_i \u2264 r_i \u2264 n) \u2014 the i-th query.\n\nOutput\n\nIn a single line print, a single integer \u2014 the maximum sum of query replies after the array elements are reordered.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nExamples\n\nInput\n\n3 3\n5 3 2\n1 2\n2 3\n1 3\n\n\nOutput\n\n25\n\n\nInput\n\n5 3\n5 2 4 1 3\n1 5\n2 3\n2 3\n\n\nOutput\n\n33",
        "task_name": "276_C. Little Girl and Maximum Sum",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\nn, q = map(int, raw_input().split());\n\narr = list(map(int, raw_input().split()));\n\nc = [0 for _ in range(n + 3)];\n\nwhile q:\n\n\tl, r = map(int, raw_input().split())\n\tc[l - 1] += 1;\n\tc[r] -= 1;\n\tq -= 1;\n\nfor i in range(len(c)):\n\tif i == 0:\n\t\tcontinue;\n\tc[i] += c[i - 1];\n\nc.sort(reverse = True)\narr.sort(reverse = True)\n\nres = 0\nfor i in range(len(arr)):\n\tres += arr[i] * c[i];\n\nprint('{}'.format(res));",
        "correct": true,
        "task_id": "1004",
        "depth": 1
    },
    {
        "description": "Fox Ciel has a robot on a 2D plane. Initially it is located in (0, 0). Fox Ciel code a command to it. The command was represented by string s. Each character of s is one move operation. There are four move operations at all:\n\n  * 'U': go up, (x, y)  \u2192  (x, y+1); \n  * 'D': go down, (x, y)  \u2192  (x, y-1); \n  * 'L': go left, (x, y)  \u2192  (x-1, y); \n  * 'R': go right, (x, y)  \u2192  (x+1, y). \n\n\n\nThe robot will do the operations in s from left to right, and repeat it infinite times. Help Fox Ciel to determine if after some steps the robot will located in (a, b).\n\nInput\n\nThe first line contains two integers a and b, ( - 109 \u2264 a, b \u2264 109). The second line contains a string s (1 \u2264 |s| \u2264 100, s only contains characters 'U', 'D', 'L', 'R') \u2014 the command.\n\nOutput\n\nPrint \"Yes\" if the robot will be located at (a, b), and \"No\" otherwise.\n\nExamples\n\nInput\n\n2 2\nRU\n\n\nOutput\n\nYes\n\n\nInput\n\n1 2\nRU\n\n\nOutput\n\nNo\n\n\nInput\n\n-1 1000000000\nLRRLU\n\n\nOutput\n\nYes\n\n\nInput\n\n0 0\nD\n\n\nOutput\n\nYes\n\nNote\n\nIn the first and second test case, command string is \"RU\", so the robot will go right, then go up, then right, and then up and so on.\n\nThe locations of its moves are (0, 0)  \u2192  (1, 0)  \u2192  (1, 1)  \u2192  (2, 1)  \u2192  (2, 2)  \u2192  ...\n\nSo it can reach (2, 2) but not (1, 2).",
        "task_name": "322_C. Ciel and Robot",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nx, y = [int(x) for x in sys.stdin.readline().split()]\nstring = sys.stdin.readline().strip()\nmod_positions, cur_position = [], (0, 0)\nfor char in string:\n    mod_positions.append(cur_position)\n    if char=='L':\n        cur_position = (cur_position[0]-1, cur_position[1])\n    if char=='R':\n        cur_position = (cur_position[0]+1, cur_position[1])\n    if char=='U':\n        cur_position = (cur_position[0], cur_position[1]+1)\n    if char=='D':\n        cur_position = (cur_position[0], cur_position[1]-1)\ndx, dy  = cur_position[0], cur_position[1]\n#print(mod_positions, dx, dy)\nfor position in mod_positions:\n    if position[0] == x and position[1] == y:\n        print(\"Yes\")\n        sys.exit(0)\n    if dy != 0 and (y-position[1])%dy == 0:\n        n_times = (y-position[1])/dy\n        if position[0]+n_times*dx == x and n_times >= 0:\n            print(\"Yes\")\n            sys.exit(0)\n    if dx != 0 and (x-position[0])%dx == 0:\n        n_times = (x-position[0])/dx\n        if position[1]+n_times*dy == y and n_times >= 0:\n            print(\"Yes\")\n            sys.exit(0)\nprint(\"No\")\n",
        "correct": true,
        "task_id": "1005",
        "depth": 1
    },
    {
        "description": "You want to arrange n integers a1, a2, ..., an in some order in a row. Let's define the value of an arrangement as the sum of differences between all pairs of adjacent integers.\n\nMore formally, let's denote some arrangement as a sequence of integers x1, x2, ..., xn, where sequence x is a permutation of sequence a. The value of such an arrangement is (x1 - x2) + (x2 - x3) + ... + (xn - 1 - xn).\n\nFind the largest possible value of an arrangement. Then, output the lexicographically smallest sequence x that corresponds to an arrangement of the largest possible value.\n\nInput\n\nThe first line of the input contains integer n (2 \u2264 n \u2264 100). The second line contains n space-separated integers a1, a2, ..., an (|ai| \u2264 1000).\n\nOutput\n\nPrint the required sequence x1, x2, ..., xn. Sequence x should be the lexicographically smallest permutation of a that corresponds to an arrangement of the largest possible value.\n\nExamples\n\nInput\n\n5\n100 -100 50 0 -50\n\n\nOutput\n\n100 -50 0 50 -100 \n\nNote\n\nIn the sample test case, the value of the output arrangement is (100 - ( - 50)) + (( - 50) - 0) + (0 - 50) + (50 - ( - 100)) = 200. No other arrangement has a larger value, and among all arrangements with the value of 200, the output arrangement is the lexicographically smallest one.\n\nSequence x1, x2, ... , xp is lexicographically smaller than sequence y1, y2, ... , yp if there exists an integer r (0 \u2264 r < p) such that x1 = y1, x2 = y2, ... , xr = yr and xr + 1 < yr + 1.",
        "task_name": "347_A. Difference Row",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=int(raw_input())\na=raw_input().split()\na=[int(a[i]) for i in range(n)]\na.sort()\nfor i in range(n) :\n\tprint(a[n-i-1]),\nprint(\"\")\n\n",
        "correct": false,
        "task_id": "1006",
        "depth": 1
    },
    {
        "description": "Lately, a national version of a bingo game has become very popular in Berland. There are n players playing the game, each player has a card with numbers. The numbers on each card are distinct, but distinct cards can have equal numbers. The card of the i-th player contains mi numbers.\n\nDuring the game the host takes numbered balls one by one from a bag. He reads the number aloud in a high and clear voice and then puts the ball away. All participants cross out the number if it occurs on their cards. The person who crosses out all numbers from his card first, wins. If multiple people cross out all numbers from their cards at the same time, there are no winners in the game. At the beginning of the game the bag contains 100 balls numbered 1 through 100, the numbers of all balls are distinct.\n\nYou are given the cards for each player. Write a program that determines whether a player can win the game at the most favorable for him scenario or not.\n\nInput\n\nThe first line of the input contains integer n (1 \u2264 n \u2264 100) \u2014 the number of the players. Then follow n lines, each line describes a player's card. The line that describes a card starts from integer mi (1 \u2264 mi \u2264 100) that shows how many numbers the i-th player's card has. Then follows a sequence of integers ai, 1, ai, 2, ..., ai, mi (1 \u2264 ai, k \u2264 100) \u2014 the numbers on the i-th player's card. The numbers in the lines are separated by single spaces.\n\nIt is guaranteed that all the numbers on each card are distinct.\n\nOutput\n\nPrint n lines, the i-th line must contain word \"YES\" (without the quotes), if the i-th player can win, and \"NO\" (without the quotes) otherwise.\n\nExamples\n\nInput\n\n3\n1 1\n3 2 4 1\n2 10 11\n\n\nOutput\n\nYES\nNO\nYES\n\n\nInput\n\n2\n1 1\n1 1\n\n\nOutput\n\nNO\nNO",
        "task_name": "370_B. Berland Bingo",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys, math\nnums = []\nfor line in sys.stdin:\n   for word in line.split():\n      nums.append(float(word))\nnums.reverse()\nfor num in nums:\n   print(\"%.4f\" % math.sqrt(num))",
        "correct": false,
        "task_id": "1007",
        "depth": 2
    },
    {
        "description": "Valera has got a rectangle table consisting of n rows and m columns. Valera numbered the table rows starting from one, from top to bottom and the columns \u2013 starting from one, from left to right. We will represent cell that is on the intersection of row x and column y by a pair of integers (x, y).\n\nValera wants to place exactly k tubes on his rectangle table. A tube is such sequence of table cells (x1, y1), (x2, y2), ..., (xr, yr), that: \n\n  * r \u2265 2; \n  * for any integer i (1 \u2264 i \u2264 r - 1) the following equation |xi - xi + 1| + |yi - yi + 1| = 1 holds; \n  * each table cell, which belongs to the tube, must occur exactly once in the sequence. \n\n\n\nValera thinks that the tubes are arranged in a fancy manner if the following conditions are fulfilled: \n\n  * no pair of tubes has common cells; \n  * each cell of the table belongs to some tube. \n\n\n\nHelp Valera to arrange k tubes on his rectangle table in a fancy manner.\n\nInput\n\nThe first line contains three space-separated integers n, m, k (2 \u2264 n, m \u2264 300; 2 \u2264 2k \u2264 n\u00b7m) \u2014 the number of rows, the number of columns and the number of tubes, correspondingly. \n\nOutput\n\nPrint k lines. In the i-th line print the description of the i-th tube: first print integer ri (the number of tube cells), then print 2ri integers xi1, yi1, xi2, yi2, ..., xiri, yiri (the sequence of table cells).\n\nIf there are multiple solutions, you can print any of them. It is guaranteed that at least one solution exists. \n\nExamples\n\nInput\n\n3 3 3\n\n\nOutput\n\n3 1 1 1 2 1 3\n3 2 1 2 2 2 3\n3 3 1 3 2 3 3\n\n\nInput\n\n2 3 1\n\n\nOutput\n\n6 1 1 1 2 1 3 2 3 2 2 2 1\n\nNote\n\nPicture for the first sample: \n\n<image>\n\nPicture for the second sample: \n\n<image>",
        "task_name": "441_C. Valera and Tubes ",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"Template for Python Competitive Programmers prepared by Mayank Chaudhary \"\"\"\n\n# to use the print and division function of Python3\nfrom __future__ import division, print_function\n\n\"\"\"value of mod\"\"\"\nMOD = 998244353\nmod = 10**9 + 7\n\n\"\"\"use resource\"\"\"\n# import resource\n# resource.setrlimit(resource.RLIMIT_STACK, [0x100000000, resource.RLIM_INFINITY])\n\n\"\"\"for factorial\"\"\"\n\n# def prepare_factorial():\n#     fact = [1]\n#     for i in range(1, 1000005):\n#         fact.append((fact[-1] * i) % mod)\n#     ifact = [0] * 1000005\n#     ifact[1000004] = pow(fact[1000004], mod - 2, mod)\n#     for i in range(1000004, 0, -1):\n#         ifact[i - 1] = (i * ifact[i]) % mod\n#\n#     return fact, ifact\n\n\"\"\"uncomment next 4 lines while doing recursion based question\"\"\"\n# import threading\n# threading.stack_size(2**27)\nimport sys\n# sys.setrecursionlimit(30000)\n\n\n\"\"\"uncomment modules according to your need\"\"\"\n# from bisect import bisect_left, bisect_right, insort\n# import itertools\n# from math import floor, ceil, sqrt, degrees, atan, pi\n# from heapq import heappop, heapify, heappush\n# from random import randint as rn\n# from Queue import Queue as Q\n# from collections import Counter, defaultdict, deque\nfrom copy import deepcopy\n'''\ndef modinv(n, p):\n    return pow(n, p - 2, p)\n'''\n\n\n# def ncr(n, r,  fact, ifact):  # for using this uncomment the lines calculating fact and ifact\n#     t = (fact[n] * (ifact[r]*ifact[n-r]) % mod)% mod\n#     return t\n\n\n\ndef get_ints(): return map(int, sys.stdin.readline().strip().split())\ndef get_array(): return list(map(int, sys.stdin.readline().strip().split()))\ndef input(): return sys.stdin.readline().strip()\n\n\ndef GCD(x, y):\n    while (y):\n        x, y = y, x % y\n    return x\n\ndef lcm(x, y):\n    return (x*y)//(GCD(x, y))\n\n# def get_xor(n):\n#     return [n,1,n+1,0][n%4]\n\n# def binary_expo(a, b):\n#\n#     result = 1\n#     while b:\n#         if b&1:\n#             result *= a\n#             b-=1\n#         else:\n#             a *= a\n#             b >>= 1\n#     return result\n\n\n\n\"\"\"*******************************************************\"\"\"\n\n\ndef main():\n\n    rows, cols, k = get_ints()\n\n    curr_x = curr_y = 0\n    turn = 0\n    store = []\n    for i in range(rows):\n        if not turn:\n            for j in range(cols):\n                store.append([i+1, j+1])\n        else:\n            for j in range(cols-1, -1, -1):\n                store.append([i+1, j+1])\n        turn ^= 1\n\n    i = 0\n    count = 0\n    while count<(k-1):\n        print(2, end = ' ')\n        print(*store[i], end = ' ')\n        print(*store[i+1])\n        i += 2\n        count += 1\n    print(rows*cols - 2*(k-1), end = ' ')\n    while i<(rows*cols):\n        if i==(rows*cols - 1):\n            print(*store[i])\n        else:\n            print(*store[i], end = ' ')\n        i += 1\n\n\n\n\n\n\n\n\"\"\" -------- Python 2 and 3 footer by Pajenegod and c1729 ---------\"\"\"\n\npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n    range = xrange\n\nimport os, sys\nfrom io import IOBase, BytesIO\n\nBUFSIZE = 8192\n\n\nclass FastIO(BytesIO):\n    newlines = 0\n\n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n\n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0, 2), super(FastIO, self).write(s))[0])\n        return s\n\n    def read(self):\n        while self._fill(): pass\n        return super(FastIO, self).read()\n\n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill();\n            self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s: self.buffer.write(s.encode('ascii'))\n            self.read = lambda: self.buffer.read().decode('ascii')\n            self.readline = lambda: self.buffer.readline().decode('ascii')\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n\"\"\" main function\"\"\"\n\nif __name__ == '__main__':\n    main()\n    # threading.Thread(target=main).start()",
        "correct": true,
        "task_id": "1008",
        "depth": 2
    },
    {
        "description": "Fox Ciel is playing a mobile puzzle game called \"Two Dots\". The basic levels are played on a board of size n \u00d7 m cells, like this:\n\n<image>\n\nEach cell contains a dot that has some color. We will use different uppercase Latin characters to express different colors.\n\nThe key of this game is to find a cycle that contain dots of same color. Consider 4 blue dots on the picture forming a circle as an example. Formally, we call a sequence of dots d1, d2, ..., dk a cycle if and only if it meets the following condition:\n\n  1. These k dots are different: if i \u2260 j then di is different from dj. \n  2. k is at least 4. \n  3. All dots belong to the same color. \n  4. For all 1 \u2264 i \u2264 k - 1: di and di + 1 are adjacent. Also, dk and d1 should also be adjacent. Cells x and y are called adjacent if they share an edge. \n\n\n\nDetermine if there exists a cycle on the field.\n\nInput\n\nThe first line contains two integers n and m (2 \u2264 n, m \u2264 50): the number of rows and columns of the board.\n\nThen n lines follow, each line contains a string consisting of m characters, expressing colors of dots in each line. Each character is an uppercase Latin letter.\n\nOutput\n\nOutput \"Yes\" if there exists a cycle, and \"No\" otherwise.\n\nExamples\n\nInput\n\n3 4\nAAAA\nABCA\nAAAA\n\n\nOutput\n\nYes\n\n\nInput\n\n3 4\nAAAA\nABCA\nAADA\n\n\nOutput\n\nNo\n\n\nInput\n\n4 4\nYYYR\nBYBY\nBBBY\nBBBY\n\n\nOutput\n\nYes\n\n\nInput\n\n7 6\nAAAAAB\nABBBAB\nABAAAB\nABABBB\nABAAAB\nABBBAB\nAAAAAB\n\n\nOutput\n\nYes\n\n\nInput\n\n2 13\nABCDEFGHIJKLM\nNOPQRSTUVWXYZ\n\n\nOutput\n\nNo\n\nNote\n\nIn first sample test all 'A' form a cycle.\n\nIn second sample there is no such cycle.\n\nThe third sample is displayed on the picture above ('Y' = Yellow, 'B' = Blue, 'R' = Red).",
        "task_name": "510_B. Fox And Two Dots",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def func(first, let, l, x, y, n, m, xInit, yInit, xAnt, yAnt, conj):\n  if(not (x >= 0 and x < n and y >= 0 and y < m) or (x, y) in conj):\n    return False\n  \n  if(x == xInit and y == yInit and len(conj) > 3):\n    return True\n\n  if(l[x][y] == let):\n    if(not first):\n      conj.add((x, y))\n\n    cima = False\n    if(y-1 != yAnt):\n      cima = func(False, let, l, x, y-1, n, m, xInit, yInit, x, y, conj)\n\n    direita = False\n    if(x+1 != xAnt):\n      direita = func(False, let, l, x+1, y, n, m, xInit, yInit, x, y, conj)\n\n    baixo = False\n    if(y+1 != yAnt):\n      baixo = func(False, let, l, x, y+1, n, m, xInit, yInit, x, y, conj)\n\n    esquerda = False\n    if(x-1 != xAnt):\n      esquerda = func(False, let, l, x-1, y, n, m, xInit, yInit, x, y, conj)\n\n    return cima or baixo or direita or esquerda\n  else:\n    return False\n  \n\nn, m = map(int, raw_input().split())\n\nl = [raw_input() for i in xrange(n)]\n\nres = False\nrow = 0\nwhile(row < n and not res):\n  for column in xrange(m):\n    conj = set()\n    tmp = func(True, l[row][column], l, row, column, n, m, row, column, row, column, conj)\n\n    if(tmp):\n      res = True\n      break\n  \n  row += 1\n\nif(res):\n  print(\"Yes\")\nelse:\n  print(\"No\")",
        "correct": false,
        "task_id": "1010",
        "depth": 2
    },
    {
        "description": "Alena has successfully passed the entrance exams to the university and is now looking forward to start studying.\n\nOne two-hour lesson at the Russian university is traditionally called a pair, it lasts for two academic hours (an academic hour is equal to 45 minutes).\n\nThe University works in such a way that every day it holds exactly n lessons. Depending on the schedule of a particular group of students, on a given day, some pairs may actually contain classes, but some may be empty (such pairs are called breaks).\n\nThe official website of the university has already published the schedule for tomorrow for Alena's group. Thus, for each of the n pairs she knows if there will be a class at that time or not.\n\nAlena's House is far from the university, so if there are breaks, she doesn't always go home. Alena has time to go home only if the break consists of at least two free pairs in a row, otherwise she waits for the next pair at the university.\n\nOf course, Alena does not want to be sleepy during pairs, so she will sleep as long as possible, and will only come to the first pair that is presented in her schedule. Similarly, if there are no more pairs, then Alena immediately goes home.\n\nAlena appreciates the time spent at home, so she always goes home when it is possible, and returns to the university only at the beginning of the next pair. Help Alena determine for how many pairs she will stay at the university. Note that during some pairs Alena may be at the university waiting for the upcoming pair.\n\nInput\n\nThe first line of the input contains a positive integer n (1 \u2264 n \u2264 100) \u2014 the number of lessons at the university. \n\nThe second line contains n numbers ai (0 \u2264 ai \u2264 1). Number ai equals 0, if Alena doesn't have the i-th pairs, otherwise it is equal to 1. Numbers a1, a2, ..., an are separated by spaces.\n\nOutput\n\nPrint a single number \u2014 the number of pairs during which Alena stays at the university.\n\nExamples\n\nInput\n\n5\n0 1 0 1 1\n\n\nOutput\n\n4\n\n\nInput\n\n7\n1 0 1 0 0 1 0\n\n\nOutput\n\n4\n\n\nInput\n\n1\n0\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample Alena stays at the university from the second to the fifth pair, inclusive, during the third pair she will be it the university waiting for the next pair. \n\nIn the last sample Alena doesn't have a single pair, so she spends all the time at home.",
        "task_name": "586_A. Alena's Schedule",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = input()\npairs = raw_input()\npairs = pairs.split(' ')\n\nline = ''\nfor i in pairs:\n\tif i == '0':\n\t\tline += ' '\n\telse:\n\t\tline += '1'\n\n\nline = line.strip()\n\nans = 0\nflag = 0\n\nfor i in line:\n\tif i == ' ':\n\t\tflag += 1\n\telse:\n\t\tif flag <= 1:\n\t\t\tans += flag\n\t\tflag = 0\n\t\tans += 1\n\nprint(ans)",
        "correct": true,
        "task_id": "1011",
        "depth": 1
    },
    {
        "description": "Nikolay has a lemons, b apples and c pears. He decided to cook a compote. According to the recipe the fruits should be in the ratio 1: 2: 4. It means that for each lemon in the compote should be exactly 2 apples and exactly 4 pears. You can't crumble up, break up or cut these fruits into pieces. These fruits \u2014 lemons, apples and pears \u2014 should be put in the compote as whole fruits.\n\nYour task is to determine the maximum total number of lemons, apples and pears from which Nikolay can cook the compote. It is possible that Nikolay can't use any fruits, in this case print 0. \n\nInput\n\nThe first line contains the positive integer a (1 \u2264 a \u2264 1000) \u2014 the number of lemons Nikolay has. \n\nThe second line contains the positive integer b (1 \u2264 b \u2264 1000) \u2014 the number of apples Nikolay has. \n\nThe third line contains the positive integer c (1 \u2264 c \u2264 1000) \u2014 the number of pears Nikolay has.\n\nOutput\n\nPrint the maximum total number of lemons, apples and pears from which Nikolay can cook the compote.\n\nExamples\n\nInput\n\n2\n5\n7\n\n\nOutput\n\n7\n\n\nInput\n\n4\n7\n13\n\n\nOutput\n\n21\n\n\nInput\n\n2\n3\n2\n\n\nOutput\n\n0\n\nNote\n\nIn the first example Nikolay can use 1 lemon, 2 apples and 4 pears, so the answer is 1 + 2 + 4 = 7.\n\nIn the second example Nikolay can use 3 lemons, 6 apples and 12 pears, so the answer is 3 + 6 + 12 = 21.\n\nIn the third example Nikolay don't have enough pears to cook any compote, so the answer is 0. ",
        "task_name": "746_A. Compote",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def compot(x, y, z):\n    if (z<4) or (y<2) or (x<1):\n        return 0\n    else:\n        delit = z / 4\n        while delit >= 1:\n            if ((y / delit) >= 1) and ((x / delit) >= 1):\n                return delit\n\n            else:\n                delit = delit - 1\n\nif __name__ == '__main__':\n    limon = int(raw_input())\n    yabl = int(raw_input())\n    grush = int(raw_input())\n    delit = compot(limon, yabl, grush)\n    print(str(delit*7))",
        "correct": false,
        "task_id": "1015",
        "depth": 1
    },
    {
        "description": "Oleg the bank client checks share prices every day. There are n share prices he is interested in. Today he observed that each second exactly one of these prices decreases by k rubles (note that each second exactly one price changes, but at different seconds different prices can change). Prices can become negative. Oleg found this process interesting, and he asked Igor the financial analyst, what is the minimum time needed for all n prices to become equal, or it is impossible at all? Igor is busy right now, so he asked you to help Oleg. Can you answer this question?\n\nInput\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 105, 1 \u2264 k \u2264 109) \u2014 the number of share prices, and the amount of rubles some price decreases each second.\n\nThe second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 109) \u2014 the initial prices.\n\nOutput\n\nPrint the only line containing the minimum number of seconds needed for prices to become equal, of \u00ab-1\u00bb if it is impossible.\n\nExamples\n\nInput\n\n3 3\n12 9 15\n\n\nOutput\n\n3\n\nInput\n\n2 2\n10 9\n\n\nOutput\n\n-1\n\nInput\n\n4 1\n1 1000000000 1000000000 1000000000\n\n\nOutput\n\n2999999997\n\nNote\n\nConsider the first example. \n\nSuppose the third price decreases in the first second and become equal 12 rubles, then the first price decreases and becomes equal 9 rubles, and in the third second the third price decreases again and becomes equal 9 rubles. In this case all prices become equal 9 rubles in 3 seconds.\n\nThere could be other possibilities, but this minimizes the time needed for all prices to become equal. Thus the answer is 3.\n\nIn the second example we can notice that parity of first and second price is different and never changes within described process. Thus prices never can become equal.\n\nIn the third example following scenario can take place: firstly, the second price drops, then the third price, and then fourth price. It happens 999999999 times, and, since in one second only one price can drop, the whole process takes 999999999 * 3 = 2999999997 seconds. We can note that this is the minimum possible time.",
        "task_name": "793_A. Oleg and shares",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,k = map(int,raw_input().split())\nall = map(int,raw_input().split())\n\nminn = min(all)\nfail = False\namount = 0\nfor i in all:\n    if (i-minn) % k != 0:\n        fail = True\n    else:\n        amount += (i-minn)/k\nif fail:\n    print(-1)\nelse:\n    print(amount)",
        "correct": true,
        "task_id": "1017",
        "depth": 1
    },
    {
        "description": "There are n cities and n - 1 roads in the Seven Kingdoms, each road connects two cities and we can reach any city from any other by the roads.\n\nTheon and Yara Greyjoy are on a horse in the first city, they are starting traveling through the roads. But the weather is foggy, so they can\u2019t see where the horse brings them. When the horse reaches a city (including the first one), it goes to one of the cities connected to the current city. But it is a strange horse, it only goes to cities in which they weren't before. In each such city, the horse goes with equal probabilities and it stops when there are no such cities. \n\nLet the length of each road be 1. The journey starts in the city 1. What is the expected length (expected value of length) of their journey? You can read about expected (average) value by the link <https://en.wikipedia.org/wiki/Expected_value>.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100000) \u2014 number of cities.\n\nThen n - 1 lines follow. The i-th line of these lines contains two integers ui and vi (1 \u2264 ui, vi \u2264 n, ui \u2260 vi) \u2014 the cities connected by the i-th road.\n\nIt is guaranteed that one can reach any city from any other by the roads.\n\nOutput\n\nPrint a number \u2014 the expected length of their journey. The journey starts in the city 1.\n\nYour answer will be considered correct if its absolute or relative error does not exceed 10 - 6.\n\nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if <image>.\n\nExamples\n\nInput\n\n4\n1 2\n1 3\n2 4\n\n\nOutput\n\n1.500000000000000\n\n\nInput\n\n5\n1 2\n1 3\n3 4\n2 5\n\n\nOutput\n\n2.000000000000000\n\nNote\n\nIn the first sample, their journey may end in cities 3 or 4 with equal probability. The distance to city 3 is 1 and to city 4 is 2, so the expected length is 1.5.\n\nIn the second sample, their journey may end in city 4 or 5. The distance to the both cities is 2, so the expected length is 2.",
        "task_name": "839_C. Journey",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def bfs1(graph, root):\n    count=-1\n    visited = [False for i in range(n+1)]\n    queue=[None,root]\n    visited[root]=True\n    prob=[0 for i in range(n+1)]\n    prob[1]=1\n    ans=0\n    while queue!=0:\n        vertex = queue.pop(0)\n        if vertex!=None and len(graph[vertex])==1 and visited[vertex]:\n            ans+=leaf[vertex]/prob[vertex]\n        if vertex is None:\n            count+=1\n            queue.append(None)\n            if len(queue)==1:\n                break\n            else:\n                continue\n        for neighbour in graph[vertex]:\n            if not visited[neighbour]:\n                if leaf[neighbour]==1:\n                    leaf[neighbour]=(count+1)\n                if vertex==1:\n                    prob[neighbour]=(prob[vertex]*(len(graph[vertex])))\n                else:\n                    prob[neighbour]=(prob[vertex]*(len(graph[vertex])-1))\n                visited[neighbour]=True\n                queue.append(neighbour)\n    return(ans)\nn=int(raw_input())\ngraph=[[] for i in range(n+1)]\nfor i in range(n-1):\n    one,two=map(int,raw_input().split())\n    graph[one].append(two)\n    graph[two].append(one)\nleaf=[0 for i in range(n+1)]\nfor i in range(len(graph)):\n    if len(graph[i])==1 and i!=1:\n        leaf[i]=1\nleaf1=(bfs1(graph,1))\nprint(leaf1)\n",
        "correct": false,
        "task_id": "1018",
        "depth": 2
    },
    {
        "description": "It's another Start[c]up, and that means there are T-shirts to order. In order to make sure T-shirts are shipped as soon as possible, we've decided that this year we're going to order all of the necessary T-shirts before the actual competition. The top C contestants are going to be awarded T-shirts, but we obviously don't know which contestants that will be. The plan is to get the T-Shirt sizes of all contestants before the actual competition, and then order enough T-shirts so that no matter who is in the top C we'll have T-shirts available in order to award them.\n\nIn order to get the T-shirt sizes of the contestants, we will send out a survey. The survey will allow contestants to either specify a single desired T-shirt size, or two adjacent T-shirt sizes. If a contestant specifies two sizes, it means that they can be awarded either size.\n\nAs you can probably tell, this plan could require ordering a lot of unnecessary T-shirts. We'd like your help to determine the minimum number of T-shirts we'll need to order to ensure that we'll be able to award T-shirts no matter the outcome of the competition.\n\nInput\n\nInput will begin with two integers N and C (1 \u2264 N \u2264 2\u00b7105, 1 \u2264 C), the number of T-shirt sizes and number of T-shirts to be awarded, respectively.\n\nFollowing this is a line with 2\u00b7N - 1 integers, s1 through s2\u00b7N - 1 (0 \u2264 si \u2264 108). For odd i, si indicates the number of contestants desiring T-shirt size ((i + 1) / 2). For even i, si indicates the number of contestants okay receiving either of T-shirt sizes (i / 2) and (i / 2 + 1). C will not exceed the total number of contestants.\n\nOutput\n\nPrint the minimum number of T-shirts we need to buy.\n\nExamples\n\nInput\n\n2 200\n100 250 100\n\n\nOutput\n\n200\n\n\nInput\n\n4 160\n88 69 62 29 58 52 44\n\n\nOutput\n\n314\n\nNote\n\nIn the first example, we can buy 100 of each size.",
        "task_name": "859_F. Ordering T-Shirts",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import*\nfrom itertools import*\nfrom collections import*\ndef main():\n    n, c = map(int, stdin.readline().split())\n    s = map(int, stdin.readline().split(), repeat(10, 2 * n - 1))\n    l = len(s)\n    st = min(c, s[0])\n    ss = s[0]\n    ans = st\n    q = deque([(s[0], st)])\n    for i in xrange(2, l, 2):\n        q.append(s[i-1])\n        ss += s[i] + s[i-1]\n        while len(q) > 2:\n            z = q[-1]\n            x, y = q[-2]\n            if x + z - y <= 0:\n                q.pop()\n                q.pop()\n                q[-2] = (q[-2][0] + x + z, q[-2][1] + y)\n            else:\n                break\n        bt = min(ss, c) - st\n        while ss > c and q:\n            x, y = q.popleft()\n            ss -= x\n            st -= y\n            x = q.popleft()\n            ss -= x\n        z = min(ss, c) - st\n        if bt < z:\n            bt = z\n        if bt < 0:\n            bt = 0\n        st += bt\n        q.append((s[i], bt))\n        ans += bt\n    print(ans)\nmain()",
        "correct": true,
        "task_id": "1019",
        "depth": 2
    },
    {
        "description": "In Arcady's garden there grows a peculiar apple-tree that fruits one time per year. Its peculiarity can be explained in following way: there are n inflorescences, numbered from 1 to n. Inflorescence number 1 is situated near base of tree and any other inflorescence with number i (i > 1) is situated at the top of branch, which bottom is pi-th inflorescence and pi < i.\n\nOnce tree starts fruiting, there appears exactly one apple in each inflorescence. The same moment as apples appear, they start to roll down along branches to the very base of tree. Each second all apples, except ones in first inflorescence simultaneously roll down one branch closer to tree base, e.g. apple in a-th inflorescence gets to pa-th inflorescence. Apples that end up in first inflorescence are gathered by Arcady in exactly the same moment. Second peculiarity of this tree is that once two apples are in same inflorescence they annihilate. This happens with each pair of apples, e.g. if there are 5 apples in same inflorescence in same time, only one will not be annihilated and if there are 8 apples, all apples will be annihilated. Thus, there can be no more than one apple in each inflorescence in each moment of time.\n\nHelp Arcady with counting number of apples he will be able to collect from first inflorescence during one harvest.\n\nInput\n\nFirst line of input contains single integer number n (2 \u2264 n \u2264 100 000) \u2014 number of inflorescences.\n\nSecond line of input contains sequence of n - 1 integer numbers p2, p3, ..., pn (1 \u2264 pi < i), where pi is number of inflorescence into which the apple from i-th inflorescence rolls down.\n\nOutput\n\nSingle line of output should contain one integer number: amount of apples that Arcady will be able to collect from first inflorescence during one harvest.\n\nExamples\n\nInput\n\n3\n1 1\n\n\nOutput\n\n1\n\n\nInput\n\n5\n1 2 2 2\n\n\nOutput\n\n3\n\n\nInput\n\n18\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n\n\nOutput\n\n4\n\nNote\n\nIn first example Arcady will be able to collect only one apple, initially situated in 1st inflorescence. In next second apples from 2nd and 3rd inflorescences will roll down and annihilate, and Arcady won't be able to collect them.\n\nIn the second example Arcady will be able to collect 3 apples. First one is one initially situated in first inflorescence. In a second apple from 2nd inflorescence will roll down to 1st (Arcady will collect it) and apples from 3rd, 4th, 5th inflorescences will roll down to 2nd. Two of them will annihilate and one not annihilated will roll down from 2-nd inflorescence to 1st one in the next second and Arcady will collect it.",
        "task_name": "930_A. Peculiar apple-tree",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function, division\nfrom sys import stdin, stdout\nfrom fractions import gcd\n# from math import *\nfrom collections import *\nfrom operator import mul\nfrom functools import reduce\nfrom copy import copy\n\nrint = lambda: int(stdin.readline())\nrints = lambda: [int(x) for x in stdin.readline().split()]\n\n\nclass graph:\n    # initialize graph\n    def __init__(self, gdict=None):\n        if gdict is None:\n            gdict = defaultdict(list)\n        self.gdict, self.edges, self.l = gdict, defaultdict(int), defaultdict(int)\n\n    # add edge\n    def addEdge(self, node1, node2, w=None):\n        self.gdict[node1].append(node2)\n        self.gdict[node2].append(node1)\n\n    def subtree(self, v):\n        queue, visit = deque([[v, 0]]), [0] * (n + 1)\n        visit[v], level, self.nodes, ans = 1, [0] * (n + 1), [0] * (n + 1), 0\n\n        while queue:\n            s, lev = queue.popleft()\n            level[lev] = (level[lev] + 1) % 2\n\n            for i in self.gdict[s]:\n                if not visit[i]:\n                    queue.append([i, lev + 1])\n                    visit[i] = 1\n\n        print(sum(level))\n\n\n\nn, a = int(input()), rints()\ng = graph()\nfor i in range(n - 1):\n    g.addEdge(a[i], i + 2)\n\ng.subtree(1)\n",
        "correct": true,
        "task_id": "1020",
        "depth": 2
    },
    {
        "description": "Two players play a game.\n\nInitially there are n integers a_1, a_2, \u2026, a_n written on the board. Each turn a player selects one number and erases it from the board. This continues until there is only one number left on the board, i. e. n - 1 turns are made. The first player makes the first move, then players alternate turns.\n\nThe first player wants to minimize the last number that would be left on the board, while the second player wants to maximize it.\n\nYou want to know what number will be left on the board after n - 1 turns if both players make optimal moves.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 1000) \u2014 the number of numbers on the board.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^6).\n\nOutput\n\nPrint one number that will be left on the board.\n\nExamples\n\nInput\n\n3\n2 1 3\n\n\nOutput\n\n2\n\nInput\n\n3\n2 2 2\n\n\nOutput\n\n2\n\nNote\n\nIn the first sample, the first player erases 3 and the second erases 1. 2 is left on the board.\n\nIn the second sample, 2 is left on the board regardless of the actions of the players.",
        "task_name": "984_A. Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a = [None] * 1000\nn=int(raw_input())\na=map(int, raw_input().split())\nif n == 1:\n    print(a[0])\n    exit(0)\na.sort()\nt = n-1\nk = -1\nwhile n:\n    k += 1\n    n -= 1\n    if(n == 1):\n        p = 1\n        break\n    n -= 1\n    if(n == 1):\n        p = 2\n        break\n    t -= 1\nif p == 1:\n    print(a[t-1])\nelse:\n    print(a[k+1])\n",
        "correct": true,
        "task_id": "1021",
        "depth": 1
    },
    {
        "description": "There are H rows and W columns of white square cells.\n\nYou will choose h of the rows and w of the columns, and paint all of the cells contained in those rows or columns.\n\nHow many white cells will remain?\n\nIt can be proved that this count does not depend on what rows and columns are chosen.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq H, W \\leq 20\n* 1 \\leq h \\leq H\n* 1 \\leq w \\leq W\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nH W\nh w\n\n\nOutput\n\nPrint the number of white cells that will remain.\n\nExamples\n\nInput\n\n3 2\n2 1\n\n\nOutput\n\n1\n\n\nInput\n\n5 5\n2 3\n\n\nOutput\n\n6\n\n\nInput\n\n2 4\n2 4\n\n\nOutput\n\n0",
        "task_name": "p03101 AtCoder Beginner Contest 121 - White Cells",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from operator import itemgetter\n\nN_shop, M_required_drink  = map(int, raw_input().split())\n\nshop_list = []\nfor tmp_shop in range(N_shop):\n  shop_list.append(map(int, raw_input().split()))\n\ntotal_money = 0\ngot_drink = 0\nfor i in sorted(shop_list, key=itemgetter(0)):\n  limit_at_shop = i[1]\n#  print(i)\n\n  while got_drink < M_required_drink and limit_at_shop > 0:\n    total_money = total_money + i[0]\n    got_drink   = got_drink + 1\n    limit_at_shop = limit_at_shop - 1\n#    print(\"  %s %s %s\" % (total_money, got_drink, limit_at_shop))\n\nprint(total_money)\n",
        "correct": false,
        "task_id": "1024",
        "depth": 2
    },
    {
        "description": "Some number of chocolate pieces were prepared for a training camp. The camp had N participants and lasted for D days. The i-th participant (1 \\leq i \\leq N) ate one chocolate piece on each of the following days in the camp: the 1-st day, the (A_i + 1)-th day, the (2A_i + 1)-th day, and so on. As a result, there were X chocolate pieces remaining at the end of the camp. During the camp, nobody except the participants ate chocolate pieces.\n\nFind the number of chocolate pieces prepared at the beginning of the camp.\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* 1 \\leq D \\leq 100\n* 1 \\leq X \\leq 100\n* 1 \\leq A_i \\leq 100 (1 \\leq i \\leq N)\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nD X\nA_1\nA_2\n:\nA_N\n\n\nOutput\n\nFind the number of chocolate pieces prepared at the beginning of the camp.\n\nExamples\n\nInput\n\n3\n7 1\n2\n5\n10\n\n\nOutput\n\n8\n\n\nInput\n\n2\n8 20\n1\n10\n\n\nOutput\n\n29\n\n\nInput\n\n5\n30 44\n26\n18\n81\n18\n6\n\n\nOutput\n\n56",
        "task_name": "p03400 AtCoder Beginner Contest 092 - Chocolate",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N = input()\nD,X = map(int, raw_input().split())\nA = []\nfor i in range(N):\n    A.append(input())\nans = 0\nfor i in range(N):\n    t = ((D-1) / A[i]) + 1\n    ans += t\nans += X\nprint(ans)",
        "correct": true,
        "task_id": "1025",
        "depth": 1
    },
    {
        "description": "E869120 found a chest which is likely to contain treasure.\nHowever, the chest is locked. In order to open it, he needs to enter a string S consisting of lowercase English letters.\nHe also found a string S', which turns out to be the string S with some of its letters (possibly all or none) replaced with `?`.\n\nOne more thing he found is a sheet of paper with the following facts written on it:\n\n* Condition 1: The string S contains a string T as a contiguous substring.\n* Condition 2: S is the lexicographically smallest string among the ones that satisfy Condition 1.\n\n\n\nPrint the string S.\nIf such a string does not exist, print `UNRESTORABLE`.\n\nConstraints\n\n* 1 \\leq |S'|, |T| \\leq 50\n* S' consists of lowercase English letters and `?`.\n* T consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT'\n\n\nOutput\n\nPrint the string S.\nIf such a string does not exist, print `UNRESTORABLE` instead.\n\nExamples\n\nInput\n\n?tc????\ncoder\n\n\nOutput\n\natcoder\n\n\nInput\n\n??p??d??\nabc\n\n\nOutput\n\nUNRESTORABLE",
        "task_name": "p03565 AtCoder Beginner Contest 076 - Dubious Document 2",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "sd = raw_input()\nt = raw_input()\nlnsd = len(sd)\nlnt = len(t)\nsa = 0\ntru = None\nfor i in range(lnsd - lnt + 1):\n    for i2 in range(lnt -1):\n        a = sd[(0+sa):(lnt+sa)]\n        if a[i2] != t[i2] and a[i2] != \"?\":\n            break\n        if i2 == lnsd -lnt:\n            tru= i\n    sa = sa+1\nif tru == None:\n    print(\"UNRESTORABLE\")\n    exit()\nsd = list(sd)\nfor i in range(lnt):\n    sd[tru+i]=t[i]\nstrn =\"\".join(sd)\nprint(strn.replace(\"?\", \"a\"))\n",
        "correct": false,
        "task_id": "1026",
        "depth": 2
    },
    {
        "description": "There are N cities and M roads. The i-th road (1\u2264i\u2264M) connects two cities a_i and b_i (1\u2264a_i,b_i\u2264N) bidirectionally. There may be more than one road that connects the same pair of two cities. For each city, how many roads are connected to the city?\n\nConstraints\n\n* 2\u2264N,M\u226450\n* 1\u2264a_i,b_i\u2264N\n* a_i \u2260 b_i\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1 b_1\n:\na_M b_M\n\n\nOutput\n\nPrint the answer in N lines. In the i-th line (1\u2264i\u2264N), print the number of roads connected to city i.\n\nExamples\n\nInput\n\n4 3\n1 2\n2 3\n1 4\n\n\nOutput\n\n2\n2\n1\n1\n\n\nInput\n\n2 5\n1 2\n2 1\n1 2\n2 1\n1 2\n\n\nOutput\n\n5\n5\n\n\nInput\n\n8 8\n1 2\n3 4\n1 5\n2 8\n3 7\n5 2\n4 1\n6 8\n\n\nOutput\n\n3\n3\n2\n2\n2\n1\n1\n2",
        "task_name": "p03720 AtCoder Beginner Contest 061 - Counting Roads",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, m = map(int, raw_input().split())\ncount = [0] * n\nfor i in xrange(m):\n    a, b = map(int, raw_input().split())\n    count[a - 1] += 1\n    count[b - 1] += 1\nfor i in xrange(n):\n    print(count[i])\n",
        "correct": true,
        "task_id": "1027",
        "depth": 1
    },
    {
        "description": "A cheetah and a cheater are going to play the game of Nim. In this game they use N piles of stones. Initially the i-th pile contains a_i stones. The players take turns alternately, and the cheetah plays first. In each turn, the player chooses one of the piles, and takes one or more stones from the pile. The player who can't make a move loses.\n\nHowever, before the game starts, the cheater wants to cheat a bit to make sure that he can win regardless of the moves by the cheetah. From each pile, the cheater takes zero or one stone and eats it before the game. In case there are multiple ways to guarantee his winning, he wants to minimize the number of stones he eats.\n\nCompute the number of stones the cheater will eat. In case there is no way for the cheater to win the game even with the cheating, print `-1` instead.\n\nConstraints\n\n* 1 \u2264 N \u2264 10^5\n* 2 \u2264 a_i \u2264 10^9\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\na_1\n:\na_N\n\n\nOutput\n\nPrint the answer.\n\nExamples\n\nInput\n\n3\n2\n3\n4\n\n\nOutput\n\n3\n\n\nInput\n\n3\n100\n100\n100\n\n\nOutput\n\n-1",
        "task_name": "p03880 CODE FESTIVAL 2016 Grand Final(Parallel) - Cheating Nim",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=int(raw_input())\na=[int(raw_input()) for _ in xrange(n)]\nmxlba=0\nfor i in xrange(n):\n    mxlba=max(mxlba,len(bin(a[i])[2:]))\n\nexist=[False]*(mxlba+1000)\nfor i in xrange(n):\n    bit=bin(a[i])[2:]\n    lb=len(bit)\n    for j in xrange(lb-1,-1,-1):\n        if bit[j]==\"1\":\n            exist[lb-1-j]=True\n            break\n\naxor=0\nfor i in xrange(n):\n    axor^=a[i]\nif axor==0:\n    print(0)\n    exit()\naxor=bin(axor)[2:]\nla=len(axor)\nans=0\ni=0\nwhile i<la:\n    if axor[i]==\"1\":\n        if not exist[la-i-1]:\n            print(-1)\n            exit()\n        else:\n            ans+=1\n            if la-i-1==0:\n                break\n            tmp=int(\"1\"*(la-i-1),2)\n            axor=int(axor,2)^tmp\n            axor=bin(axor)[2:]\n    i+=1\n\nprint(ans)\n",
        "correct": true,
        "task_id": "1028",
        "depth": 2
    },
    {
        "description": "Ivan has number b. He is sorting through the numbers a from 1 to 10^{18}, and for every a writes ([a,    b])/(a) on blackboard. Here [a,    b] stands for least common multiple of a and b. Ivan is very lazy, that's why this task bored him soon. But he is interested in how many different numbers he would write on the board if he would finish the task. Help him to find the quantity of different numbers he would write on the board.\n\nInput\n\nThe only line contains one integer \u2014 b (1 \u2264 b \u2264 10^{10}).\n\nOutput\n\nPrint one number \u2014 answer for the problem.\n\nExamples\n\nInput\n\n1\n\n\nOutput\n\n1\n\nInput\n\n2\n\n\nOutput\n\n2\n\nNote\n\nIn the first example [a,    1] = a, therefore ([a,    b])/(a) is always equal to 1.\n\nIn the second example [a,    2] can be equal to a or 2 \u22c5 a depending on parity of a. ([a,    b])/(a) can be equal to 1 and 2.",
        "task_name": "1068_B. LCM",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "b = int(raw_input())\ni = 1\ncount = 0\n\nwhile i <= b**0.5:\n  if b % i == 0:\n    if i**2 == b:\n      count += 1\n    else:\n      count += 2\n  i += 1\n\nprint(count)\n \t   \t\t\t  \t\t\t \t  \t\t  \t\t\t\t\t\t   \t",
        "correct": true,
        "task_id": "1030",
        "depth": 1
    },
    {
        "description": "You are given a string s=s_1s_2... s_n of length n, which only contains digits 1, 2, ..., 9.\n\nA substring s[l ... r] of s is a string s_l s_{l + 1} s_{l + 2} \u2026 s_r. A substring s[l ... r] of s is called even if the number represented by it is even. \n\nFind the number of even substrings of s. Note, that even if some substrings are equal as strings, but have different l and r, they are counted as different substrings.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 65000) \u2014 the length of the string s.\n\nThe second line contains a string s of length n. The string s consists only of digits 1, 2, ..., 9.\n\nOutput\n\nPrint the number of even substrings of s.\n\nExamples\n\nInput\n\n\n4\n1234\n\n\nOutput\n\n\n6\n\nInput\n\n\n4\n2244\n\n\nOutput\n\n\n10\n\nNote\n\nIn the first example, the [l, r] pairs corresponding to even substrings are: \n\n  * s[1 ... 2]\n  * s[2 ... 2]\n  * s[1 ... 4]\n  * s[2 ... 4]\n  * s[3 ... 4]\n  * s[4 ... 4] \n\n\n\nIn the second example, all 10 substrings of s are even substrings. Note, that while substrings s[1 ... 1] and s[2 ... 2] both define the substring \"2\", they are still counted as different substrings.",
        "task_name": "1139_A. Even Substrings",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"\nAuthor    : raj1307\nInstitute : Jalpaiguri Government Engineering College\nDate      : 21.03.19\n\"\"\"\nfrom __future__ import division, print_function\nimport itertools,os,sys\n#from collections import deque, Counter, OrderedDict\n#from heapq import nsmallest, nlargest, heapify, #heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial,pow,pi\n#from bisect import bisect_left,bisect_right\n#from decimal import *\nfrom atexit import register\nfrom io import BytesIO, StringIO\n\nif sys.version_info[0]<3:\n    range = xrange\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n    sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\n    sys.stdout = BytesIO()\n    register(lambda: os.write(1, sys.stdout.getvalue()))\nelse:\n    sys.stdin = StringIO(os.read(0, os.fstat(0).st_size).decode())\n    sys.stdout = StringIO()\n    register(lambda: os.write(1, sys.stdout.getvalue().encode()))\n\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\ndef ii(): return int(input())\ndef si(): return str(input())\ndef mi():return map(int,input().strip().split(\" \"))\ndef li():return list(mi())\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,num):return [[num for x in range(n)] for y in range(n)]\ndef ntl(n):return [int(i) for i in str(n)]\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef main():\n    n=ii()\n    l=si()\n    cnt=0\n    for i in range(n):\n        if int(l[i])%2==0:\n            cnt+=i+1\n    \n    print(cnt)\n   \nif __name__ == \"__main__\":\n    main()",
        "correct": true,
        "task_id": "1031",
        "depth": 1
    },
    {
        "description": "You are given a long decimal number a consisting of n digits from 1 to 9. You also have a function f that maps every digit from 1 to 9 to some (possibly the same) digit from 1 to 9.\n\nYou can perform the following operation no more than once: choose a non-empty contiguous subsegment of digits in a, and replace each digit x from this segment with f(x). For example, if a = 1337, f(1) = 1, f(3) = 5, f(7) = 3, and you choose the segment consisting of three rightmost digits, you get 1553 as the result.\n\nWhat is the maximum possible number you can obtain applying this operation no more than once?\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of digits in a.\n\nThe second line contains a string of n characters, denoting the number a. Each character is a decimal digit from 1 to 9.\n\nThe third line contains exactly 9 integers f(1), f(2), ..., f(9) (1 \u2264 f(i) \u2264 9).\n\nOutput\n\nPrint the maximum number you can get after applying the operation described in the statement no more than once.\n\nExamples\n\nInput\n\n\n4\n1337\n1 2 5 4 6 6 3 1 9\n\n\nOutput\n\n\n1557\n\n\nInput\n\n\n5\n11111\n9 8 7 6 5 4 3 2 1\n\n\nOutput\n\n\n99999\n\n\nInput\n\n\n2\n33\n1 1 1 1 1 1 1 1 1\n\n\nOutput\n\n\n33",
        "task_name": "1157_B. Long Number",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrstr = lambda: list(stdin.readline().strip())\n\nn, s, a, ans = int(input()), rstr(), rints(), []\n\nfor i in range(n):\n    hash, val = a[int(s[i]) - 1], int(s[i])\n    if hash > val:\n        ans.append(str(hash))\n\n    elif hash == val:\n        if ans:\n            ans.append(str(hash))\n        else:\n            ans.append(s[i])\n    else:\n        if ans:\n            break\n        else:\n            ans.append(s[i])\n\nprint(''.join(ans) + ''.join(s[len(ans):]))\n",
        "correct": false,
        "task_id": "1032",
        "depth": 1
    },
    {
        "description": "There are famous Russian nesting dolls named matryoshkas sold in one of the souvenir stores nearby, and you'd like to buy several of them. The store has n different matryoshkas. Any matryoshka is a figure of volume out_i with an empty space inside of volume in_i (of course, out_i > in_i).\n\nYou don't have much free space inside your bag, but, fortunately, you know that matryoshkas can be nested one inside another. Formally, let's call a set of matryoshkas nested if we can rearrange dolls in such a way, that the first doll can be nested inside the second one, the second doll \u2014 inside the third one and so on. Matryoshka i can be nested inside matryoshka j if out_i \u2264 in_j. So only the last doll will take space inside your bag.\n\nLet's call extra space of a nested set of dolls as a total volume of empty space inside this structure. Obviously, it's equal to in_{i_1} + (in_{i_2} - out_{i_1}) + (in_{i_3} - out_{i_2}) + ... + (in_{i_k} - out_{i_{k-1}}), where i_1, i_2, ..., i_k are the indices of the chosen dolls in the order they are nested in each other.\n\nFinally, let's call a nested subset of the given sequence as big enough if there isn't any doll from the sequence that can be added to the nested subset without breaking its nested property.\n\nYou want to buy many matryoshkas, so you should choose a big enough nested subset to buy it. But you will be disappointed if too much space in your bag will be wasted, so you want to choose a big enough subset so that its extra space is minimum possible among all big enough subsets. Now you wonder, how many different nested subsets meet these conditions (they are big enough, and there is no big enough subset such that its extra space is less than the extra space of the chosen subset). Two subsets are considered different if there exists at least one index i such that one of the subsets contains the i-th doll, and another subset doesn't.\n\nSince the answer can be large, print it modulo 10^9 + 7.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of matryoshkas.\n\nThe next n lines contain a description of each doll: two integers out_i and in_i (1 \u2264 in_i < out_i \u2264 10^9) \u2014 the outer and inners volumes of the i-th matryoshka.\n\nOutput\n\nPrint one integer \u2014 the number of big enough nested subsets such that extra space of each of these subsets is minimum possible. Since the answer can be large, print it modulo 10^9 + 7.\n\nExample\n\nInput\n\n\n7\n4 1\n4 2\n4 2\n2 1\n5 4\n6 4\n3 2\n\n\nOutput\n\n\n6\n\nNote\n\nThere are 6 big enough nested subsets with minimum possible extra space in the example: \n\n  * \\{1, 5\\}: we can't add any other matryoshka and keep it nested; it's extra space is 1; \n  * \\{1, 6\\}; \n  * \\{2, 4, 5\\}; \n  * \\{2, 4, 6\\}; \n  * \\{3, 4, 5\\}; \n  * \\{3, 4, 6\\}. \n\n\n\nThere are no more \"good\" subsets because, for example, subset \\{6, 7\\} is not big enough (we can add the 4-th matryoshka to it) or subset \\{4, 6, 7\\} has extra space equal to 2.",
        "task_name": "1197_E. Culture Code",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\nDEBUG = 0\n\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\nimport os, sys\nfrom atexit import register\nfrom io import BytesIO\nimport itertools\n\nif sys.version_info[0] < 3:\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\nif DEBUG:\n    debug_print = print\nelse:\n    sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\n    sys.stdout = BytesIO()\n    register(lambda: os.write(1, sys.stdout.getvalue()))\n\n    input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n    debug_print = lambda *x, **y: None\n\n\ndef input_as_list():\n    return list(map(int, input().split()))\n\n\ndef array_of(f, *dim):\n    return [array_of(f, *dim[1:]) for _ in range(dim[0])] if dim else f()\n\n\ndef main():\n    from bisect import bisect_right\n\n    def update(o, n):\n        if n[0] < o[0]:\n            return n\n        elif n[0] == o[0]:\n            return o[0], (o[1] + n[1]) % MOD\n        else:\n            return o\n\n    def update2(o, n):\n        if n[0] > o[0]:\n            return n\n        elif n[0] == o[0]:\n            return o[0], (o[1] + n[1]) % MOD\n        else:\n            return o\n\n    n = int(input())\n    a = [input_as_list() for _ in range(n)]\n    a.sort()\n\n    eps = []\n    best = []\n    d = dict()\n    er = []\n\n    for ep, sp in a:\n        if not eps or eps[-1] != ep:\n            eps.append(ep)\n\n        if not er or er[-1][0] != ep:\n            er.append([ep, sp])\n        else:\n            er[-1][1] = sp\n\n        i = bisect_right(eps, sp) - 1\n        if i == -1:\n            g, c = sp, 1\n        else:\n            g, c = sp - best[i][0], best[i][1]\n\n        try:\n            gap, count = d[ep]\n        except KeyError:\n            gap, count = ep, 0\n\n        gap, count = update((gap, count), (g, c))\n        d[ep] = (gap, count)\n\n        try:\n            best[len(eps)-1] = update2(best[len(eps)-1], (ep-g, c))\n        except IndexError:\n            if len(eps) == 1:\n                best.append((ep - g, c))\n            else:\n                best.append(update2(best[len(eps)-2], (ep-g, c)))\n\n    debug_print(eps)\n    debug_print(d)\n    debug_print(best)\n    debug_print(er)\n\n    e, sb = er.pop()\n    ans = (e, 0)\n    while sb < e:\n        ans = update(ans, d[e])\n        if er:\n            e, s = er.pop()\n            sb = max(sb, s)\n        else:\n            break\n\n    print(ans[1])\n\n\nmain()",
        "correct": true,
        "task_id": "1033",
        "depth": 1
    },
    {
        "description": "You have a coins of value n and b coins of value 1. You always pay in exact change, so you want to know if there exist such x and y that if you take x (0 \u2264 x \u2264 a) coins of value n and y (0 \u2264 y \u2264 b) coins of value 1, then the total value of taken coins will be S.\n\nYou have to answer q independent test cases.\n\nInput\n\nThe first line of the input contains one integer q (1 \u2264 q \u2264 10^4) \u2014 the number of test cases. Then q test cases follow.\n\nThe only line of the test case contains four integers a, b, n and S (1 \u2264 a, b, n, S \u2264 10^9) \u2014 the number of coins of value n, the number of coins of value 1, the value n and the required total value.\n\nOutput\n\nFor the i-th test case print the answer on it \u2014 YES (without quotes) if there exist such x and y that if you take x coins of value n and y coins of value 1, then the total value of taken coins will be S, and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer).\n\nExample\n\nInput\n\n\n4\n1 2 3 4\n1 2 3 6\n5 2 6 27\n3 3 5 18\n\n\nOutput\n\n\nYES\nNO\nNO\nYES",
        "task_name": "1256_A. Payment Without Change",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout  \n  \ndef main(): \n\tn = stdin.readline() \n\tres = ''\n\tfor x in range(int(n)):\n\t\ta , b, n, S = [int(x) for x in stdin.readline().split()] \n\t\tprod = n*a\n\t\t#if prod == S or b == S:\n\t\t#\tres += 'YES \\n'\n\t\tif n*a < S:\n\t\t\tif S - prod <= b:\n\t\t\t\tres += 'YES\\n'\n\t\t\telse:\t\t\t\n\t\t\t\tres += 'NO\\n'\n\t\telse:\n\t\t\tif S % n <= b:\n\t\t\t\tres += 'YES\\n'\n\t\t\telse:\n\t\t\t\tres += 'NO\\n'\n\tstdout.write(res)\nif __name__ == \"__main__\": \n\tmain()",
        "correct": true,
        "task_id": "1034",
        "depth": 1
    },
    {
        "description": "Mr. Scrooge, a very busy man, decided to count the time he wastes on all sorts of useless stuff to evaluate the lost profit. He has already counted the time he wastes sleeping and eating. And now Mr. Scrooge wants to count the time he has wasted signing papers.\n\nMr. Scrooge's signature can be represented as a polyline A1A2... An. Scrooge signs like that: first it places a pen at the point A1, then draws a segment from point A1 to point A2, then he draws a segment from point A2 to point A3 and so on to point An, where he stops signing and takes the pen off the paper. At that the resulting line can intersect with itself and partially repeat itself but Scrooge pays no attention to it and never changes his signing style. As Scrooge makes the signature, he never takes the pen off the paper and his writing speed is constant \u2014 50 millimeters per second.\n\nScrooge signed exactly k papers throughout his life and all those signatures look the same.\n\nFind the total time Scrooge wasted signing the papers.\n\nInput\n\nThe first line contains two integers n and k (2 \u2264 n \u2264 100, 1 \u2264 k \u2264 1000). Each of the following n lines contains the coordinates of the polyline's endpoints. The i-th one contains coordinates of the point Ai \u2014 integers xi and yi, separated by a space.\n\nAll points Ai are different. The absolute value of all coordinates does not exceed 20. The coordinates are measured in millimeters.\n\nOutput\n\nPrint one real number \u2014 the total time Scrooges wastes on signing the papers in seconds. The absolute or relative error should not exceed 10 - 6.\n\nExamples\n\nInput\n\n2 1\n0 0\n10 0\n\n\nOutput\n\n0.200000000\n\nInput\n\n5 10\n3 1\n-5 6\n-2 -1\n3 2\n10 0\n\n\nOutput\n\n6.032163204\n\nInput\n\n6 10\n5 0\n4 0\n6 0\n3 0\n7 0\n2 0\n\n\nOutput\n\n3.000000000",
        "task_name": "127_A. Wasted Time",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math\ndef length(x1,y1,x2,y2):\n    return sqrt(pow((x2-x1),2.0)+pow((y2-y1),2.0))\n\n    t=0;\n    n=input()\n    k=input()\n    x=input()\n    y=input()\n    n=n-1\n    for i in range(0,n):\n        z=input()\n        l=input()\n        t+=(length(x,y,z,l))\n        x=z \n        y=l\n    \n    print (t*k)/50.0",
        "correct": false,
        "task_id": "1035",
        "depth": 1
    },
    {
        "description": "You are given an array a of length n and array b of length m both consisting of only integers 0 and 1. Consider a matrix c of size n \u00d7 m formed by following rule: c_{i, j} = a_i \u22c5 b_j (i.e. a_i multiplied by b_j). It's easy to see that c consists of only zeroes and ones too.\n\nHow many subrectangles of size (area) k consisting only of ones are there in c?\n\nA subrectangle is an intersection of a consecutive (subsequent) segment of rows and a consecutive (subsequent) segment of columns. I.e. consider four integers x_1, x_2, y_1, y_2 (1 \u2264 x_1 \u2264 x_2 \u2264 n, 1 \u2264 y_1 \u2264 y_2 \u2264 m) a subrectangle c[x_1 ... x_2][y_1 ... y_2] is an intersection of the rows x_1, x_1+1, x_1+2, ..., x_2 and the columns y_1, y_1+1, y_1+2, ..., y_2.\n\nThe size (area) of a subrectangle is the total number of cells in it.\n\nInput\n\nThe first line contains three integers n, m and k (1 \u2264 n, m \u2264 40 000, 1 \u2264 k \u2264 n \u22c5 m), length of array a, length of array b and required size of subrectangles.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 1), elements of a.\n\nThe third line contains m integers b_1, b_2, \u2026, b_m (0 \u2264 b_i \u2264 1), elements of b.\n\nOutput\n\nOutput single integer \u2014 the number of subrectangles of c with size (area) k consisting only of ones.\n\nExamples\n\nInput\n\n\n3 3 2\n1 0 1\n1 1 1\n\n\nOutput\n\n\n4\n\n\nInput\n\n\n3 5 4\n1 1 1\n1 1 1 1 1\n\n\nOutput\n\n\n14\n\nNote\n\nIn first example matrix c is:\n\n<image>\n\nThere are 4 subrectangles of size 2 consisting of only ones in it:\n\n<image>\n\nIn second example matrix c is:\n\n<image>",
        "task_name": "1323_B. Count Subrectangles",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n# Author : raj1307 - Raj Singh\n# Date   : 07.03.2020\n\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef msi(): return map(str,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n#from itertools import permutations\n#Copy 2D list  m = [x[:] for x in mark] .. Avoid Using Deepcopy\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[1] \ndef sort2(l):return sorted(l, key=getKey,reverse=True)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\ndef ncr(n,r): return factorial(n)//(factorial(r)*factorial(n-r))\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n\ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\n\n\ndef main():\n        \n\n    #for _ in range(ii()):\n    if True:\n\n        n,m,k=mi()\n        a=li()\n        b=li()\n\n        x=[0]*(n+5)\n        y=[0]*(m+5)\n        x[0]=a[0]\n        #fx=[0]*40005\n\n        fx={}\n\n        p=[]\n        q=[]\n\n        if x[0]==1:\n            #fx[1]+=1\n            #fx[2]-=1\n            fx[1]=1\n            p.append(1)\n        for i in range(1,n):\n            if a[i]!=0:\n                x[i]+=x[i-1]+a[i]\n                #fx[1]+=1\n                #fx[x[i]+1]-=1\n                if fx.get(x[i],0)==0:\n                    fx[x[i]]=1\n                else:\n                    fx[x[i]]+=1\n                p.append(x[i])\n\n            else:\n                x[i]=0\n\n        y[0]=b[0]\n        #fy=[0]*40005\n        fy={}\n        if y[0]==1:\n            #fy[1]+=1\n            #fy[2]-=1\n            fy[1]=1\n            q.append(1)\n\n        for i in range(1,m):\n            if b[i]!=0:\n\n                y[i]+=y[i-1]+b[i]\n                #fy[1]+=1\n                #fy[y[i]+1]-=1\n                if fy.get(y[i],0)==0:\n                    fy[y[i]]=1\n                else:\n                    fy[y[i]]+=1\n                q.append(y[i])\n            else:\n                y[i]=0\n\n        # for i in range(1,40005):\n        #     fx[i]+=fx[i-1]\n        #     fy[i]+=fy[i-1]\n        p=list(set(p))\n        q=list(set(q))\n\n        cnt=0\n        for i in range(len(p)-1,-1,-1):\n            fx[p[i]]=fx[p[i]]+cnt\n            cnt=fx[p[i]]\n\n        cnt=0\n        for i in range(len(q)-1,-1,-1):\n            fy[q[i]]=fy[q[i]]+cnt\n            cnt=fy[q[i]]\n\n\n\n\n\n        ans=0\n        for i in p:\n            if k&i!=0:\n                continue\n\n            if fx.get(i,0)==0 or fy.get(k//i,0)==0:\n                continue\n\n            if k%i==0:\n                ans+=(fx[i]*fy[k//i])\n\n        print(ans)\n\n\n\n\n\n\n\n       \n    \n        \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n# region fastio\n# template taken from https://github.com/cheran-senthil/PyRival/blob/master/templates/template.py\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    #read()\n    main()\n    #dmain()\n\n# Comment Read()\n",
        "correct": false,
        "task_id": "1036",
        "depth": 1
    },
    {
        "description": "You are given two integers x and y. You can perform two types of operations: \n\n  1. Pay a dollars and increase or decrease any of these integers by 1. For example, if x = 0 and y = 7 there are four possible outcomes after this operation: \n    * x = 0, y = 6; \n    * x = 0, y = 8; \n    * x = -1, y = 7; \n    * x = 1, y = 7. \n\n  2. Pay b dollars and increase or decrease both integers by 1. For example, if x = 0 and y = 7 there are two possible outcomes after this operation: \n    * x = -1, y = 6; \n    * x = 1, y = 8. \n\n\n\nYour goal is to make both given integers equal zero simultaneously, i.e. x = y = 0. There are no other requirements. In particular, it is possible to move from x=1, y=0 to x=y=0.\n\nCalculate the minimum amount of dollars you have to spend on it.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of testcases.\n\nThe first line of each test case contains two integers x and y (0 \u2264 x, y \u2264 10^9).\n\nThe second line of each test case contains two integers a and b (1 \u2264 a, b \u2264 10^9).\n\nOutput\n\nFor each test case print one integer \u2014 the minimum amount of dollars you have to spend.\n\nExample\n\nInput\n\n\n2\n1 3\n391 555\n0 0\n9 4\n\n\nOutput\n\n\n1337\n0\n\nNote\n\nIn the first test case you can perform the following sequence of operations: first, second, first. This way you spend 391 + 555 + 391 = 1337 dollars.\n\nIn the second test case both integers are equal to zero initially, so you dont' have to spend money.",
        "task_name": "1342_A. Road To Zero",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env pypy\nfrom __future__ import division, print_function\nfrom collections import defaultdict, Counter, deque\nfrom future_builtins import ascii, filter, hex, map, oct, zip\nfrom itertools import imap as map, izip as zip, permutations, combinations, combinations_with_replacement\nfrom __builtin__ import xrange as range\nfrom math import ceil, factorial\nfrom _continuation import continulet\nfrom cStringIO import StringIO\nfrom io import IOBase\nimport __pypy__\nfrom bisect import bisect, insort, bisect_left, bisect_right\nfrom fractions import Fraction\nfrom functools import reduce\nimport string\nimport sys\nimport os\nimport re\ninf = float('inf')\nmod_ = int(1e9) + 7\nmod = 998244353\n\ndef factors(n):\n    from functools import reduce\n    return set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n\ndef sieve():\n    n,m=1,10**6\n    primes = {}\n    arr=set([])\n    for i in range(2, round(m ** 0.5) + 1):\n        a = n // i\n        b = m // i\n        for k in range(max(2, a), b + 1):\n            c = i * k\n            primes[c] = 1\n\n    for i in range(max(n, 2), m + 1):\n        if i not in primes:\n            arr.add(i)\n\n    return arr\n\ndef nc2(x):\n    return (x*(x-1))//2\ndef main():    \n    # n=int(input())\n    # arr=list()\n    for _ in range(int(input())):\n        x,y=map(int,input().split())\n        a,b=map(int,input().split())\n        cst1=max(a*(x-1)+a*(y-1)+b,0)\n        cst2=max(0,a*abs(y-x)+b*min(x,y))\n        print(min(cst2,cst1))\n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\nclass FastI(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = StringIO()\n        self.newlines = 0\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(\"\\n\") + (not b)\n            ptr = self._buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(b), self._buffer.seek(ptr)\n        self.newlines -= 1\n        return self._buffer.readline()\n\n\nclass FastO(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = __pypy__.builders.StringBuilder()\n        self.write = lambda s: self._buffer.append(s)\n\n    def flush(self):\n        os.write(self._fd, self._buffer.build())\n        self._buffer = __pypy__.builders.StringBuilder()\n\n\ndef print(*args, **kwargs):\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\nsys.stdin, sys.stdout = FastI(sys.stdin), FastO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()",
        "correct": false,
        "task_id": "1037",
        "depth": 2
    },
    {
        "description": "Ehab loves number theory, but for some reason he hates the number x. Given an array a, find the length of its longest subarray such that the sum of its elements isn't divisible by x, or determine that such subarray doesn't exist.\n\nAn array a is a subarray of an array b if a can be obtained from b by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 5) \u2014 the number of test cases you need to solve. The description of the test cases follows.\n\nThe first line of each test case contains 2 integers n and x (1 \u2264 n \u2264 10^5, 1 \u2264 x \u2264 10^4) \u2014 the number of elements in the array a and the number that Ehab hates.\n\nThe second line contains n space-separated integers a_1, a_2, \u2026, a_{n} (0 \u2264 a_i \u2264 10^4) \u2014 the elements of the array a.\n\nOutput\n\nFor each testcase, print the length of the longest subarray whose sum isn't divisible by x. If there's no such subarray, print -1.\n\nExample\n\nInput\n\n\n3\n3 3\n1 2 3\n3 4\n1 2 3\n2 2\n0 6\n\n\nOutput\n\n\n2\n3\n-1\n\nNote\n\nIn the first test case, the subarray [2,3] has sum of elements 5, which isn't divisible by 3.\n\nIn the second test case, the sum of elements of the whole array is 6, which isn't divisible by 4.\n\nIn the third test case, all subarrays have an even sum, so the answer is -1.",
        "task_name": "1364_A. XXXXX",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def read_test():\n\tn = int(raw_input())\n\tline = raw_input()\n\treturn (\n\t\tn,\n\t\t[int(x) for x in line.split(\" \")]\n\t)\n\t\ndef solve(a, n):\n\tfor i in range(n - 1):\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] < a[i]:\n\t\t\t\ta[i], a[j] = a[j], a[i]\n\t\t\t\t\n\tresult = []\n\tprev = None\n\tfor x in a:\n\t\tif x != prev:\n\t\t\tresult.append(x)\n\t\tprev = x\n\n\treturn result\n\t\nn = int(raw_input())\nfor i in range(n):\n\tn, a = read_test()\n\tresult = solve(a, n)\n\tprint(\" \".join([str(x) for x in result]))\n\t",
        "correct": false,
        "task_id": "1038",
        "depth": 2
    },
    {
        "description": "The only difference between easy and hard versions is on constraints. In this version constraints are higher. You can make hacks only if all versions of the problem are solved.\n\nKoa the Koala is at the beach!\n\nThe beach consists (from left to right) of a shore, n+1 meters of sea and an island at n+1 meters from the shore.\n\nShe measured the depth of the sea at 1, 2, ..., n meters from the shore and saved them in array d. d_i denotes the depth of the sea at i meters from the shore for 1 \u2264 i \u2264 n.\n\nLike any beach this one has tide, the intensity of the tide is measured by parameter k and affects all depths from the beginning at time t=0 in the following way:\n\n  * For a total of k seconds, each second, tide increases all depths by 1.\n\n  * Then, for a total of k seconds, each second, tide decreases all depths by 1.\n\n  * This process repeats again and again (ie. depths increase for k seconds then decrease for k seconds and so on ...).\n\nFormally, let's define 0-indexed array p = [0, 1, 2, \u2026, k - 2, k - 1, k, k - 1, k - 2, \u2026, 2, 1] of length 2k. At time t (0 \u2264 t) depth at i meters from the shore equals d_i + p[t mod 2k] (t mod 2k denotes the remainder of the division of t by 2k). Note that the changes occur instantaneously after each second, see the notes for better understanding. \n\n\n\n\nAt time t=0 Koa is standing at the shore and wants to get to the island. Suppose that at some time t (0 \u2264 t) she is at x (0 \u2264 x \u2264 n) meters from the shore:\n\n  * In one second Koa can swim 1 meter further from the shore (x changes to x+1) or not swim at all (x stays the same), in both cases t changes to t+1.\n\n  * As Koa is a bad swimmer, the depth of the sea at the point where she is can't exceed l at integer points of time (or she will drown). More formally, if Koa is at x (1 \u2264 x \u2264 n) meters from the shore at the moment t (for some integer t\u2265 0), the depth of the sea at this point \u2014 d_x + p[t mod 2k] \u2014 can't exceed l. In other words, d_x + p[t mod 2k] \u2264 l must hold always.\n\n  * Once Koa reaches the island at n+1 meters from the shore, she stops and can rest.\n\nNote that while Koa swims tide doesn't have effect on her (ie. she can't drown while swimming). Note that Koa can choose to stay on the shore for as long as she needs and neither the shore or the island are affected by the tide (they are solid ground and she won't drown there). \n\n\n\n\nKoa wants to know whether she can go from the shore to the island. Help her!\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains three integers n, k and l (1 \u2264 n \u2264 3 \u22c5 10^5; 1 \u2264 k \u2264 10^9; 1 \u2264 l \u2264 10^9) \u2014 the number of meters of sea Koa measured and parameters k and l.\n\nThe second line of each test case contains n integers d_1, d_2, \u2026, d_n (0 \u2264 d_i \u2264 10^9) \u2014 the depths of each meter of sea Koa measured.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 3 \u22c5 10^5.\n\nOutput\n\nFor each test case:\n\nPrint Yes if Koa can get from the shore to the island, and No otherwise.\n\nYou may print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n7\n2 1 1\n1 0\n5 2 3\n1 2 3 2 2\n4 3 4\n0 2 4 3\n2 3 5\n3 0\n7 2 3\n3 0 2 1 3 0 1\n7 1 4\n4 4 3 0 2 4 2\n5 2 3\n1 2 3 2 2\n\n\nOutput\n\n\nYes\nNo\nYes\nYes\nYes\nNo\nNo\n\nNote\n\nIn the following s denotes the shore, i denotes the island, x denotes distance from Koa to the shore, the underline denotes the position of Koa, and values in the array below denote current depths, affected by tide, at 1, 2, ..., n meters from the shore.\n\nIn test case 1 we have n = 2, k = 1, l = 1, p = [ 0, 1 ].\n\nKoa wants to go from shore (at x = 0) to the island (at x = 3). Let's describe a possible solution:\n\n  * Initially at t = 0 the beach looks like this: [\\underline{s}, 1, 0, i]. \n  * At t = 0 if Koa would decide to swim to x = 1, beach would look like: [s, \\underline{2}, 1, i] at t = 1, since 2 > 1 she would drown. So Koa waits 1 second instead and beach looks like [\\underline{s}, 2, 1, i] at t = 1. \n  * At t = 1 Koa swims to x = 1, beach looks like [s, \\underline{1}, 0, i] at t = 2. Koa doesn't drown because 1 \u2264 1. \n  * At t = 2 Koa swims to x = 2, beach looks like [s, 2, \\underline{1}, i] at t = 3. Koa doesn't drown because 1 \u2264 1. \n  * At t = 3 Koa swims to x = 3, beach looks like [s, 1, 0, \\underline{i}] at t = 4. \n  * At t = 4 Koa is at x = 3 and she made it! \n\n\n\nWe can show that in test case 2 Koa can't get to the island.",
        "task_name": "1384_B2. Koa and the Beach (Hard Version)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#   Author: yumtam\n#   Created at: 2020-09-10 18:30\n\nfrom __future__ import division, print_function\n_interactive = False\n\ndef main():\n    for _ in range(int(input())):\n        n, k, L = input_as_list()\n        ar = input_as_list()\n\n        pos = None\n        for x in ar:\n            if x > L:\n                print(\"No\")\n                break\n            if x + k <= L:\n                pos = None\n            else:\n                if pos is not None:\n                    limit = L-x\n                    pos = max(pos+1, -(L-x))\n                    if pos > limit:\n                        print(\"No\")\n                        break\n                else:\n                    pos = -(L-x)\n        else:\n            print(\"Yes\")\n\n\n# Constants\nINF = float('inf')\nMOD = 10**9+7\n\n# Python3 equivalent names\nimport os, sys, itertools\nif sys.version_info[0] < 3:\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\n# print-flush in interactive problems\nif _interactive:\n    flush = sys.stdout.flush\n    def printf(*args, **kwargs):\n        print(*args, **kwargs)\n        flush()\n\n# Debug print, only works on local machine\nLOCAL = \"LOCAL_\" in os.environ\ndebug_print = (print) if LOCAL else (lambda *x, **y: None)\n\n# Fast IO\nif (not LOCAL) and (not _interactive):\n    from io import BytesIO\n    from atexit import register\n    sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\n    sys.stdout = BytesIO()\n    register(lambda: os.write(1, sys.stdout.getvalue()))\n    input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# Some utility functions(Input, N-dimensional lists, ...)\ndef input_as_list():\n    return [int(x) for x in input().split()]\n\ndef input_with_offset(o):\n    return [int(x)+o for x in input().split()]\n\ndef input_as_matrix(n, m):\n    return [input_as_list() for _ in range(n)]\n\ndef array_of(f, *dim):\n    return [array_of(f, *dim[1:]) for _ in range(dim[0])] if dim else f()\n\n# Start of external code templates...\n# End of external code templates.\n\nmain()\n",
        "correct": true,
        "task_id": "1039",
        "depth": 2
    },
    {
        "description": "Alice and Bob are playing a fun game of tree tag.\n\nThe game is played on a tree of n vertices numbered from 1 to n. Recall that a tree on n vertices is an undirected, connected graph with n-1 edges.\n\nInitially, Alice is located at vertex a, and Bob at vertex b. They take turns alternately, and Alice makes the first move. In a move, Alice can jump to a vertex with distance at most da from the current vertex. And in a move, Bob can jump to a vertex with distance at most db from the current vertex. The distance between two vertices is defined as the number of edges on the unique simple path between them. In particular, either player is allowed to stay at the same vertex in a move. Note that when performing a move, a player only occupies the starting and ending vertices of their move, not the vertices between them.\n\nIf after at most 10^{100} moves, Alice and Bob occupy the same vertex, then Alice is declared the winner. Otherwise, Bob wins.\n\nDetermine the winner if both players play optimally.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^4). Description of the test cases follows.\n\nThe first line of each test case contains five integers n,a,b,da,db (2\u2264 n\u2264 10^5, 1\u2264 a,b\u2264 n, a\u2260 b, 1\u2264 da,db\u2264 n-1) \u2014 the number of vertices, Alice's vertex, Bob's vertex, Alice's maximum jumping distance, and Bob's maximum jumping distance, respectively.\n\nThe following n-1 lines describe the edges of the tree. The i-th of these lines contains two integers u, v (1\u2264 u, v\u2264 n, u\u2260 v), denoting an edge between vertices u and v. It is guaranteed that these edges form a tree structure.\n\nIt is guaranteed that the sum of n across all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case, output a single line containing the winner of the game: \"Alice\" or \"Bob\".\n\nExample\n\nInput\n\n\n4\n4 3 2 1 2\n1 2\n1 3\n1 4\n6 6 1 2 5\n1 2\n6 5\n2 3\n3 4\n4 5\n9 3 9 2 5\n1 2\n1 6\n1 9\n1 3\n9 5\n7 9\n4 8\n4 3\n11 8 11 3 3\n1 2\n11 9\n4 9\n6 5\n2 10\n3 2\n5 9\n8 3\n7 4\n7 10\n\n\nOutput\n\n\nAlice\nBob\nAlice\nAlice\n\nNote\n\nIn the first test case, Alice can win by moving to vertex 1. Then wherever Bob moves next, Alice will be able to move to the same vertex on the next move.\n\n<image>\n\nIn the second test case, Bob has the following strategy to win. Wherever Alice moves, Bob will always move to whichever of the two vertices 1 or 6 is farthest from Alice.\n\n<image>",
        "task_name": "1405_D. Tree Tag",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env pypy\nfrom __future__ import division, print_function\nfrom collections import defaultdict, Counter, deque\nfrom future_builtins import ascii, filter, hex, map, oct, zip\nfrom itertools import imap as map, izip as zip, permutations, combinations, combinations_with_replacement\nfrom __builtin__ import xrange as range\nfrom math import ceil, factorial, log\nfrom _continuation import continulet\nfrom cStringIO import StringIO\nfrom io import IOBase\nimport __pypy__\nfrom bisect import bisect, insort, bisect_left, bisect_right\nfrom fractions import Fraction\nfrom functools import reduce\nimport string\nimport sys\nimport os\nimport re\ninf = float('inf')\nmod = int(1e9) + 7\nmod_ = 998244353\n\ndef solve():\n    n, a, b, da, db = map(int, input().split())\n    tree = defaultdict(list)\n    for i in range(n - 1):\n        u, v = map(int, input().split())\n        tree[u].append(v)\n        tree[v].append(u)\n\n    def bfs(start):\n        dist = [0] * (n + 1)\n        vis = [False] * (n + 1)\n        q = deque()\n        vis[start] = True\n        q.append(start)\n\n        while len(q):\n            u = q.popleft()\n            for v in tree[u]:\n                if not vis[v]:\n                    vis[v] = True\n                    q.append(v)\n                    dist[v] = dist[u] + 1\n\n        return dist\n\n    dist = bfs(1)\n    leaf = dist.index(max(dist))\n    dist = bfs(leaf)\n    diameter = max(dist)\n    dist_ab = bfs(a)[b]\n\n    if da >= dist_ab:\n        print('Alice')\n    else:\n        if min(diameter, da * 2) >= db:\n            print('Alice')\n        else:\n            print('Bob')\n\ndef main():\n    for _ in range(int(input())):\n        solve()\n\nBUFSIZE = 8192\nclass FastI(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = StringIO()\n        self.newlines = 0\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(\"\\n\") + (not b)\n            ptr = self._buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(\n                b), self._buffer.seek(ptr)\n        self.newlines -= 1\n        return self._buffer.readline()\nclass FastO(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = __pypy__.builders.StringBuilder()\n        self.write = lambda s: self._buffer.append(s)\n\n    def flush(self):\n        os.write(self._fd, self._buffer.build())\n        self._buffer = __pypy__.builders.StringBuilder()\ndef print(*args, **kwargs):\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\nsys.stdin, sys.stdout = FastI(sys.stdin), FastO(sys.stdout)\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\nif __name__ == \"__main__\":\n    def bootstrap(cont):\n        call, arg = cont.switch()\n        while True:\n            call, arg = cont.switch(to=continulet(\n                lambda _, f, args: f(*args), call, arg))\n    cont = continulet(bootstrap)\n    cont.switch()\n    main()",
        "correct": false,
        "task_id": "1040",
        "depth": 2
    },
    {
        "description": "You are given a string s consisting of lowercase Latin letters \"a\", \"b\" and \"c\" and question marks \"?\".\n\nLet the number of question marks in the string s be k. Let's replace each question mark with one of the letters \"a\", \"b\" and \"c\". Here we can obtain all 3^{k} possible strings consisting only of letters \"a\", \"b\" and \"c\". For example, if s = \"ac?b?c\" then we can obtain the following strings: [\"acabac\", \"acabbc\", \"acabcc\", \"acbbac\", \"acbbbc\", \"acbbcc\", \"accbac\", \"accbbc\", \"accbcc\"].\n\nYour task is to count the total number of subsequences \"abc\" in all resulting strings. Since the answer can be very large, print it modulo 10^{9} + 7.\n\nA subsequence of the string t is such a sequence that can be derived from the string t after removing some (possibly, zero) number of letters without changing the order of remaining letters. For example, the string \"baacbc\" contains two subsequences \"abc\" \u2014 a subsequence consisting of letters at positions (2, 5, 6) and a subsequence consisting of letters at positions (3, 5, 6).\n\nInput\n\nThe first line of the input contains one integer n (3 \u2264 n \u2264 200 000) \u2014 the length of s.\n\nThe second line of the input contains the string s of length n consisting of lowercase Latin letters \"a\", \"b\" and \"c\" and question marks\"?\".\n\nOutput\n\nPrint the total number of subsequences \"abc\" in all strings you can obtain if you replace all question marks with letters \"a\", \"b\" and \"c\", modulo 10^{9} + 7.\n\nExamples\n\nInput\n\n\n6\nac?b?c\n\n\nOutput\n\n\n24\n\n\nInput\n\n\n7\n???????\n\n\nOutput\n\n\n2835\n\n\nInput\n\n\n9\ncccbbbaaa\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n5\na???c\n\n\nOutput\n\n\n46\n\nNote\n\nIn the first example, we can obtain 9 strings:\n\n  * \"acabac\" \u2014 there are 2 subsequences \"abc\", \n  * \"acabbc\" \u2014 there are 4 subsequences \"abc\", \n  * \"acabcc\" \u2014 there are 4 subsequences \"abc\", \n  * \"acbbac\" \u2014 there are 2 subsequences \"abc\", \n  * \"acbbbc\" \u2014 there are 3 subsequences \"abc\", \n  * \"acbbcc\" \u2014 there are 4 subsequences \"abc\", \n  * \"accbac\" \u2014 there is 1 subsequence \"abc\", \n  * \"accbbc\" \u2014 there are 2 subsequences \"abc\", \n  * \"accbcc\" \u2014 there are 2 subsequences \"abc\". \n\n\n\nSo, there are 2 + 4 + 4 + 2 + 3 + 4 + 1 + 2 + 2 = 24 subsequences \"abc\" in total.",
        "task_name": "1426_F. Number of Subsequences",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def solve(string):\n    \n\ta = 0\n\tb = 0\n\tc = 0\n\tv = 1\n\tMOD = 10**9 + 7\n\tfor i in string:\n\t\tif i == 'a':\n\t\t\ta += v\n\t\telif i == 'b':\n\t\t\tb += a\n\t\telif i == 'c':\n\t\t\tc += b\n\t\telse:\n\t\t\ta,b,c,v = (3*a+v)%MOD, (3*b+a)%MOD, (3*c+b)%MOD, (3*v)%MOD\n\treturn c % MOD\nn = int(raw_input())\ntmp = raw_input()\nprint(solve(tmp))",
        "correct": true,
        "task_id": "1041",
        "depth": 1
    },
    {
        "description": "The Smart Beaver from ABBYY decided to have a day off. But doing nothing the whole day turned out to be too boring, and he decided to play a game with pebbles. Initially, the Beaver has n pebbles. He arranges them in a equal rows, each row has b pebbles (a > 1). Note that the Beaver must use all the pebbles he has, i. e. n = a\u00b7b.\n\n<image> 10 pebbles are arranged in two rows, each row has 5 pebbles \n\nOnce the Smart Beaver has arranged the pebbles, he takes back any of the resulting rows (that is, b pebbles) and discards all other pebbles. Then he arranges all his pebbles again (possibly choosing other values of a and b) and takes back one row, and so on. The game continues until at some point the Beaver ends up with exactly one pebble. \n\nThe game process can be represented as a finite sequence of integers c1, ..., ck, where: \n\n  * c1 = n\n  * ci + 1 is the number of pebbles that the Beaver ends up with after the i-th move, that is, the number of pebbles in a row after some arrangement of ci pebbles (1 \u2264 i < k). Note that ci > ci + 1. \n  * ck = 1\n\n\n\nThe result of the game is the sum of numbers ci. You are given n. Find the maximum possible result of the game.\n\nInput\n\nThe single line of the input contains a single integer n \u2014 the initial number of pebbles the Smart Beaver has.\n\nThe input limitations for getting 30 points are: \n\n  * 2 \u2264 n \u2264 50\n\n\n\nThe input limitations for getting 100 points are: \n\n  * 2 \u2264 n \u2264 109\n\nOutput\n\nPrint a single number \u2014 the maximum possible result of the game.\n\nExamples\n\nInput\n\n10\n\n\nOutput\n\n16\n\n\nInput\n\n8\n\n\nOutput\n\n15\n\nNote\n\nConsider the first example (c1 = 10). The possible options for the game development are:\n\n  * Arrange the pebbles in 10 rows, one pebble per row. Then c2 = 1, and the game ends after the first move with the result of 11. \n  * Arrange the pebbles in 5 rows, two pebbles per row. Then c2 = 2, and the game continues. During the second move we have two pebbles which can be arranged in a unique way (remember that you are not allowed to put all the pebbles in the same row!) \u2014 2 rows, one pebble per row. c3 = 1, and the game ends with the result of 13. \n  * Finally, arrange the pebbles in two rows, five pebbles per row. The same logic leads us to c2 = 5, c3 = 1, and the game ends with the result of 16 \u2014 the maximum possible result. ",
        "task_name": "177_B1. Rectangular Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=int(raw_input())\n\ncount=n\n\nwhile n!=1:\n    i=2\n    while divmod(n,i)[1]!=0:\n        i+=1\n    b=divmod(n,i)[0]\n    count+=b\n    n=b\n\nprint(count)",
        "correct": true,
        "task_id": "1042",
        "depth": 2
    },
    {
        "description": "The Little Elephant enjoys recursive functions.\n\nThis time he enjoys the sorting function. Let a is a permutation of an integers from 1 to n, inclusive, and ai denotes the i-th element of the permutation. The Little Elephant's recursive function f(x), that sorts the first x permutation's elements, works as follows:\n\n  * If x = 1, exit the function. \n  * Otherwise, call f(x - 1), and then make swap(ax - 1, ax) (swap the x-th and (x - 1)-th elements of a). \n\n\n\nThe Little Elephant's teacher believes that this function does not work correctly. But that-be do not get an F, the Little Elephant wants to show the performance of its function. Help him, find a permutation of numbers from 1 to n, such that after performing the Little Elephant's function (that is call f(n)), the permutation will be sorted in ascending order.\n\nInput\n\nA single line contains integer n (1 \u2264 n \u2264 1000) \u2014 the size of permutation.\n\nOutput\n\nIn a single line print n distinct integers from 1 to n \u2014 the required permutation. Numbers in a line should be separated by spaces.\n\nIt is guaranteed that the answer exists.\n\nExamples\n\nInput\n\n1\n\n\nOutput\n\n1 \n\nInput\n\n2\n\n\nOutput\n\n2 1 ",
        "task_name": "221_A. Little Elephant and Function",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=input()\nfor i in range(n):print (i or n),",
        "correct": true,
        "task_id": "1043",
        "depth": 1
    },
    {
        "description": "Vasya is an active Internet user. One day he came across an Internet resource he liked, so he wrote its address in the notebook. We know that the address of the written resource has format:\n\n<protocol>://<domain>.ru[/<context>]\n\nwhere:\n\n  * <protocol> can equal either \"http\" (without the quotes) or \"ftp\" (without the quotes), \n  * <domain> is a non-empty string, consisting of lowercase English letters, \n  * the /<context> part may not be present. If it is present, then <context> is a non-empty string, consisting of lowercase English letters. \n\n\n\nIf string <context> isn't present in the address, then the additional character \"/\" isn't written. Thus, the address has either two characters \"/\" (the ones that go before the domain), or three (an extra one in front of the context).\n\nWhen the boy came home, he found out that the address he wrote in his notebook had no punctuation marks. Vasya must have been in a lot of hurry and didn't write characters \":\", \"/\", \".\".\n\nHelp Vasya to restore the possible address of the recorded Internet resource.\n\nInput\n\nThe first line contains a non-empty string that Vasya wrote out in his notebook. This line consists of lowercase English letters only. \n\nIt is guaranteed that the given string contains at most 50 letters. It is guaranteed that the given string can be obtained from some correct Internet resource address, described above.\n\nOutput\n\nPrint a single line \u2014 the address of the Internet resource that Vasya liked. If there are several addresses that meet the problem limitations, you are allowed to print any of them.\n\nExamples\n\nInput\n\nhttpsunrux\n\n\nOutput\n\nhttp://sun.ru/x\n\n\nInput\n\nftphttprururu\n\n\nOutput\n\nftp://http.ru/ruru\n\nNote\n\nIn the second sample there are two more possible answers: \"ftp://httpruru.ru\" and \"ftp://httpru.ru/ru\".",
        "task_name": "245_B. Internet Address",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "d=raw_input()\nip=''\ndom=''\ncont=''\ncom=''\nsam=''\nresult=''\nif(d[0:4]==\"http\"):\n    ip=\"http\"\n    for i in range(4,len(d)):\n        sam=d[4:i+1]\n        if(i==len(d)-1):\n            if(sam[len(sam)-2:len(sam)]=='ru'):\n                com='.ru'\n                dom=sam[0:len(sam)-2]\n                result=ip+\"://\"+dom+com\n        if(i<len(d)-1)&(len(sam)>2):\n            if(sam[len(sam)-2:len(sam)]=='ru'):\n                com='.ru'\n                cont=d[i+1:len(d)]\n                dom=sam[0:len(sam)-2]\n                result=ip+'://'+dom+com+\"/\"+cont\n                break\nif(d[0:3]==\"ftp\"):\n    ip=\"ftp\"\n    for i in range(3,len(d)):\n        sam=d[3:i+1]\n        if(i==len(d)-1):\n            if(sam[len(sam)-2:len(sam)]=='ru'):\n                com='.ru'\n                dom=sam[0:len(sam)-2]\n                reult=ip+\"://\"+dom+com\n        if(i<len(d)-1)&(len(sam)>2):\n            if(len(sam)>2):\n                \n                if(sam[len(sam)-2:len(sam)]=='ru'):\n                    com='.ru'\n                    cont=d[i+1:len(d)]\n                    dom=sam[0:len(sam)-2]\n                    result=ip+'://'+dom+com+\"/\"+cont\n                    break            \nprint(result)\n",
        "correct": false,
        "task_id": "1044",
        "depth": 1
    },
    {
        "description": "One day, little Vasya found himself in a maze consisting of (n + 1) rooms, numbered from 1 to (n + 1). Initially, Vasya is at the first room and to get out of the maze, he needs to get to the (n + 1)-th one.\n\nThe maze is organized as follows. Each room of the maze has two one-way portals. Let's consider room number i (1 \u2264 i \u2264 n), someone can use the first portal to move from it to room number (i + 1), also someone can use the second portal to move from it to room number pi, where 1 \u2264 pi \u2264 i.\n\nIn order not to get lost, Vasya decided to act as follows. \n\n  * Each time Vasya enters some room, he paints a cross on its ceiling. Initially, Vasya paints a cross at the ceiling of room 1. \n  * Let's assume that Vasya is in room i and has already painted a cross on its ceiling. Then, if the ceiling now contains an odd number of crosses, Vasya uses the second portal (it leads to room pi), otherwise Vasya uses the first portal. \n\n\n\nHelp Vasya determine the number of times he needs to use portals to get to room (n + 1) in the end.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 103) \u2014 the number of rooms. The second line contains n integers pi (1 \u2264 pi \u2264 i). Each pi denotes the number of the room, that someone can reach, if he will use the second portal in the i-th room.\n\nOutput\n\nPrint a single number \u2014 the number of portal moves the boy needs to go out of the maze. As the number can be rather large, print it modulo 1000000007 (109 + 7).\n\nExamples\n\nInput\n\n2\n1 2\n\n\nOutput\n\n4\n\n\nInput\n\n4\n1 1 2 3\n\n\nOutput\n\n20\n\n\nInput\n\n5\n1 1 1 1 1\n\n\nOutput\n\n62",
        "task_name": "408_D. Long Path",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n# coding: utf-8\n\n# # B. Long Path\n# \n# - time limit per test: 1 second\n# - memory limit per test: 256 megabytes\n# - input: standard input\n# - output: standard output\n# \n# One day, little Vasya found himself in a maze consisting of (n\u2009+\u20091) rooms, numbered from 1 to (n\u2009+\u20091). Initially, Vasya is at the first room and to get out of the maze, he needs to get to the (n\u2009+\u20091)-th one.\n# \n# The maze is organized as follows. Each room of the maze has two one-way portals. Let's consider room number i (1\u2009\u2264\u2009i\u2009\u2264\u2009n), someone can use the first portal to move from it to room number (i\u2009+\u20091), also someone can use the second portal to move from it to room number pi, where 1\u2009\u2264\u2009pi\u2009\u2264\u2009i.\n# \n# In order not to get lost, Vasya decided to act as follows.\n# \n# - Each time Vasya enters some room, he paints a cross on its ceiling. Initially, Vasya paints a cross at the ceiling of room 1.\n# \n# - Let's assume that Vasya is in room i and has already painted a cross on its ceiling. Then, if the ceiling now contains an odd number of crosses, Vasya uses the second portal (it leads to room pi), otherwise Vasya uses the first portal. \n# \n# Help Vasya determine the number of times he needs to use portals to get to room (n\u2009+\u20091) in the end.\n# \n# #### Input\n# \n# The first line contains integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009103) \u2014 the number of rooms. The second line contains n integers pi (1\u2009\u2264\u2009pi\u2009\u2264\u2009i). Each pi denotes the number of the room, that someone can reach, if he will use the second portal in the i-th room.\n# \n# #### Output\n# \n# Print a single number \u2014 the number of portal moves the boy needs to go out of the maze. As the number can be rather large, print it modulo 1000000007 (109\u2009+\u20097).\n# \n# #### Examples\n# \n# Input\n# ```\n# 2\n# 1 2\n# ```\n# \n# Output\n# ```\n# 4\n# ```\n# \n# Input\n# ```\n# 4\n# 1 1 2 3\n# ```\n# \n# Output\n# ```\n# 20\n# ```\n# \n# Input\n# ```\n# 5\n# 1 1 1 1 1\n# ```\n# \n# Output\n# ```\n# 62\n# ```\n\n# ### Standard Input Generator\n\n# In[66]:\n\nimport sys\n\n\ndef example_generator(line):\n    \"\"\"Read example from stdin and parse it into the appropriate data structure\n    \n    Use in the following way:\n    \n    example = example_generator(stdin_generator)\n    while True:\n        numbers, target = next(example)\n        .\n        .\n        .\n    \n    \"\"\"\n    while True:\n        n = int(next(line).strip())\n        P = [int(p_i)-1 for p_i in next(line).split()] # convert to zero-indexing\n        \n        yield n, P\n\n\n# ### Workhorse Functions\n\n# In[68]:\n\ndef do_maze(n, p):\n    \"\"\"Print out the number of times Vasya needs to use portals to get to room n+1\n    \n    dp[i] is the number of portal jumps required to start off at room i with an odd\n    number of crosses and get back to room i with an even number of crosses.\n    \n    Hence the recurrence relation is as follows:\n    \n    dp[i] = 1 + [Sum_{j = p(i)}^{i-1} dp[j] + 1]\n    \n    This can be read as \"the number of portal jumps to get from room i with an odd\n    number of crosses to an even number of crosses is equivalent to taking a portal\n    jump to room p(i) into an odd number of crosees (+1), getting back into that\n    state with an even number of crosses (Sum part).\n    \n    \"\"\"\n    dp = [0]*n\n    \n    for i in range(n):\n        \n        portal_jumps = 1 # initial jump from from i to p[i]\n        \n        # This block would read cleaner if it was just a for loop!\n        for j in range(p[i], i):\n            portal_jumps += dp[j] % (1e9+7) # jumps to get you from room j with odd to room j with even\n            portal_jumps += 1 % (1e9+7) # extra jump to get you from j to j+1\n            \n        dp[i] = int(portal_jumps % (1e9+7))\n        \n    total_pjumps = 0    \n    for i in range(n):\n        total_pjumps += dp[i] % (1e9+7)\n        total_pjumps += 1 % (1e9+7)\n        \n    print(total_pjumps)\n\n\nexample = example_generator(sys.stdin)\n\nif __name__ == '__main__':\n    n, P = next(example)\n\n    do_maze(n, P)\n",
        "correct": false,
        "task_id": "1046",
        "depth": 2
    },
    {
        "description": "You are given an alphabet consisting of n letters, your task is to make a string of the maximum possible length so that the following conditions are satisfied: \n\n  * the i-th letter occurs in the string no more than ai times; \n  * the number of occurrences of each letter in the string must be distinct for all the letters that occurred in the string at least once. \n\nInput\n\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 26) \u2014 the number of letters in the alphabet.\n\nThe next line contains n integers ai (1 \u2264 ai \u2264 109) \u2014 i-th of these integers gives the limitation on the number of occurrences of the i-th character in the string.\n\nOutput\n\nPrint a single integer \u2014 the maximum length of the string that meets all the requirements.\n\nExamples\n\nInput\n\n3\n2 5 5\n\n\nOutput\n\n11\n\n\nInput\n\n3\n1 1 2\n\n\nOutput\n\n3\n\nNote\n\nFor convenience let's consider an alphabet consisting of three letters: \"a\", \"b\", \"c\". In the first sample, some of the optimal strings are: \"cccaabbccbb\", \"aabcbcbcbcb\". In the second sample some of the optimal strings are: \"acc\", \"cbc\".",
        "task_name": "624_B. Making a String",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# coding: utf-8\nlis = []\nn = input()\ncurrent = -1\nsu = 0\nfinal = 0\nlast = -1\nu = raw_input().split(\" \")\nlis = []\nfor i in u:\n\tlis.append(int(i))\nlis.sort()\nfor i in lis[::-1]:\n\tif (current == -1):\n\t\tcurrent = i\n\t\tlast = i\n\t\tsu = 1\n\telse:\n\t\tj = i\n\t\tif (j == current):\n\t\t\tsu += 1\n\t\telse:\n\t\t\tif (j >= last-su):\n\t\t\t\tsu += 1\n\t\t\telse:\n\t\t\t\tif (su > last):\n\t\t\t\t\tfinal += (last+1)*last/2\n\t\t\t\telse:\n\t\t\t\t\tfinal += (2*last-su+1)*su/2\n\t\t\t\tsu = 1\n\t\t\t\tlast = j\n\t\t\tcurrent = j\nif (su > last):\n\tfinal += (last+1)*last/2\nelse:\n\tfinal += (2*last-su+1)*su/2\nprint(final)\n\t",
        "correct": true,
        "task_id": "1049",
        "depth": 1
    },
    {
        "description": "Polycarp invited all his friends to the tea party to celebrate the holiday. He has n cups, one for each of his n friends, with volumes a1, a2, ..., an. His teapot stores w milliliters of tea (w \u2264 a1 + a2 + ... + an). Polycarp wants to pour tea in cups in such a way that:\n\n  * Every cup will contain tea for at least half of its volume \n  * Every cup will contain integer number of milliliters of tea \n  * All the tea from the teapot will be poured into cups \n  * All friends will be satisfied. \n\n\n\nFriend with cup i won't be satisfied, if there exists such cup j that cup i contains less tea than cup j but ai > aj.\n\nFor each cup output how many milliliters of tea should be poured in it. If it's impossible to pour all the tea and satisfy all conditions then output -1.\n\nInput\n\nThe first line contains two integer numbers n and w (1 \u2264 n \u2264 100, <image>).\n\nThe second line contains n numbers a1, a2, ..., an (1 \u2264 ai \u2264 100).\n\nOutput\n\nOutput how many milliliters of tea every cup should contain. If there are multiple answers, print any of them.\n\nIf it's impossible to pour all the tea and satisfy all conditions then output -1.\n\nExamples\n\nInput\n\n2 10\n8 7\n\n\nOutput\n\n6 4 \n\n\nInput\n\n4 4\n1 1 1 1\n\n\nOutput\n\n1 1 1 1 \n\n\nInput\n\n3 10\n9 8 10\n\n\nOutput\n\n-1\n\nNote\n\nIn the third example you should pour to the first cup at least 5 milliliters, to the second one at least 4, to the third one at least 5. It sums up to 14, which is greater than 10 milliliters available.",
        "task_name": "808_C. Tea Party",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport math\nstringAW =  raw_input()\nn,w = stringAW.split()\nn = int(n)\nw = int(w)\n\nstringA = raw_input()\na = list(stringA.split())\na = map(int, a)\n\n#list of tuples (how much filled, how much original, original place in string)\ntlist = [[] for _ in range(n)]\n\nfor i in range(n):\n    tlist[i] = [0, a[i], i]\ntlist.sort(key=lambda tup : tup[1])\n\nfor i in range(n):\n    tlist[i][0] += math.ceil(tlist[i][1]/2)\n    w -= math.ceil(tlist[i][1]/2)\n\n#If we are not able to fill all cups at least halfway, then we have failed\nif(w < 0): \n    print(-1)\n    sys.exit()\n\n\n#While we still have water in our pot\ninch = 0\nwhile( w > 0 and inch < n):\n    if(w >= tlist[inch][1] - tlist[inch][0]):\n        w -= tlist[inch][1] - tlist[inch][0]\n        tlist[inch][0] += tlist[inch][1] \n    else:\n        tlist[inch][0] += w\n        w = 0\n    inch+= 1\ntlist.sort(key=lambda  tup:tup[2], reverse=True)\n\nif(inch == n):\n    print(-1)\n    sys.exit()\n\nfor i in range(n-1):\n    sys.stdout.write(\"\" + str(int(tlist[i][0])) + \" \")\n\nsys.stdout.write(str(int(tlist[n-1][0])))\nsys.stdout.flush()\n\n\n\n",
        "correct": false,
        "task_id": "1050",
        "depth": 1
    },
    {
        "description": "Suppose you have two polynomials <image> and <image>. Then polynomial <image> can be uniquely represented in the following way:\n\n<image>\n\nThis can be done using [long division](https://en.wikipedia.org/wiki/Polynomial_long_division). Here, <image> denotes the degree of polynomial P(x). <image> is called the remainder of division of polynomial <image> by polynomial <image>, it is also denoted as <image>. \n\nSince there is a way to divide polynomials with remainder, we can define Euclid's algorithm of finding the greatest common divisor of two polynomials. The algorithm takes two polynomials <image>. If the polynomial <image> is zero, the result is <image>, otherwise the result is the value the algorithm returns for pair <image>. On each step the degree of the second argument decreases, so the algorithm works in finite number of steps. But how large that number could be? You are to answer this question. \n\nYou are given an integer n. You have to build two polynomials with degrees not greater than n, such that their coefficients are integers not exceeding 1 by their absolute value, the leading coefficients (ones with the greatest power of x) are equal to one, and the described Euclid's algorithm performs exactly n steps finding their greatest common divisor. Moreover, the degree of the first polynomial should be greater than the degree of the second. By a step of the algorithm we mean the transition from pair <image> to pair <image>. \n\nInput\n\nYou are given a single integer n (1 \u2264 n \u2264 150) \u2014 the number of steps of the algorithm you need to reach.\n\nOutput\n\nPrint two polynomials in the following format.\n\nIn the first line print a single integer m (0 \u2264 m \u2264 n) \u2014 the degree of the polynomial. \n\nIn the second line print m + 1 integers between  - 1 and 1 \u2014 the coefficients of the polynomial, from constant to leading. \n\nThe degree of the first polynomial should be greater than the degree of the second polynomial, the leading coefficients should be equal to 1. Euclid's algorithm should perform exactly n steps when called using these polynomials.\n\nIf there is no answer for the given n, print -1.\n\nIf there are multiple answer, print any of them.\n\nExamples\n\nInput\n\n1\n\n\nOutput\n\n1\n0 1\n0\n1\n\n\nInput\n\n2\n\n\nOutput\n\n2\n-1 0 1\n1\n0 1\n\nNote\n\nIn the second example you can print polynomials x2 - 1 and x. The sequence of transitions is\n\n(x2 - 1, x) \u2192 (x, - 1) \u2192 ( - 1, 0).\n\nThere are two steps in it.",
        "task_name": "901_B. GCD of Polynomials",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function\nn = int(input())\nx, y = 1, 2\nfor i in range(n-1):\n    x, y = y, x + y\ns, t = bin(y)[2:][::-1], bin(x)[2:][::-1]\nprint(len(s) - 1)\nfor c in s:\n    print(c, end=' ')\nprint()\nprint(len(t) - 1)\nfor c in t:\n    print(c, end=' ')\nprint()",
        "correct": false,
        "task_id": "1051",
        "depth": 1
    },
    {
        "description": "\n\nInput\n\nThe input contains a single integer a (10 \u2264 a \u2264 999).\n\nOutput\n\nOutput 0 or 1.\n\nExamples\n\nInput\n\n13\n\n\nOutput\n\n1\n\n\nInput\n\n927\n\n\nOutput\n\n1\n\n\nInput\n\n48\n\n\nOutput\n\n0",
        "task_name": "952_A. Quirky Quantifiers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n\n# target Expert  \n\n# Author : raj1307 - Raj Singh\n# Date   : 17.10.19\n\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \nfrom collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n#from itertools import permutations\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n\ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\n\n\n\n\n\ndef main():\n    \n\n\n    #for _ in range(ii()):\n\n\n    n=ii()\n    print(n%2)\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    #read()\n    main()\n    #dmain()\n\n# Comment Read()\n",
        "correct": true,
        "task_id": "1052",
        "depth": 1
    },
    {
        "description": "Kuro is living in a country called Uberland, consisting of n towns, numbered from 1 to n, and n - 1 bidirectional roads connecting these towns. It is possible to reach each town from any other. Each road connects two towns a and b. Kuro loves walking and he is planning to take a walking marathon, in which he will choose a pair of towns (u, v) (u \u2260 v) and walk from u using the shortest path to v (note that (u, v) is considered to be different from (v, u)).\n\nOddly, there are 2 special towns in Uberland named Flowrisa (denoted with the index x) and Beetopia (denoted with the index y). Flowrisa is a town where there are many strong-scent flowers, and Beetopia is another town where many bees live. In particular, Kuro will avoid any pair of towns (u, v) if on the path from u to v, he reaches Beetopia after he reached Flowrisa, since the bees will be attracted with the flower smell on Kuro\u2019s body and sting him.\n\nKuro wants to know how many pair of city (u, v) he can take as his route. Since he\u2019s not really bright, he asked you to help him with this problem.\n\nInput\n\nThe first line contains three integers n, x and y (1 \u2264 n \u2264 3 \u22c5 10^5, 1 \u2264 x, y \u2264 n, x \u2260 y) - the number of towns, index of the town Flowrisa and index of the town Beetopia, respectively.\n\nn - 1 lines follow, each line contains two integers a and b (1 \u2264 a, b \u2264 n, a \u2260 b), describes a road connecting two towns a and b.\n\nIt is guaranteed that from each town, we can reach every other town in the city using the given roads. That is, the given map of towns and roads is a tree.\n\nOutput\n\nA single integer resembles the number of pair of towns (u, v) that Kuro can use as his walking route.\n\nExamples\n\nInput\n\n3 1 3\n1 2\n2 3\n\n\nOutput\n\n5\n\nInput\n\n3 1 3\n1 2\n1 3\n\n\nOutput\n\n4\n\nNote\n\nOn the first example, Kuro can choose these pairs: \n\n  * (1, 2): his route would be 1 \u2192 2, \n  * (2, 3): his route would be 2 \u2192 3, \n  * (3, 2): his route would be 3 \u2192 2, \n  * (2, 1): his route would be 2 \u2192 1, \n  * (3, 1): his route would be 3 \u2192 2 \u2192 1. \n\n\n\nKuro can't choose pair (1, 3) since his walking route would be 1 \u2192 2 \u2192 3, in which Kuro visits town 1 (Flowrisa) and then visits town 3 (Beetopia), which is not allowed (note that pair (3, 1) is still allowed because although Kuro visited Flowrisa and Beetopia, he did not visit them in that order).\n\nOn the second example, Kuro can choose the following pairs: \n\n  * (1, 2): his route would be 1 \u2192 2, \n  * (2, 1): his route would be 2 \u2192 1, \n  * (3, 2): his route would be 3 \u2192 1 \u2192 2, \n  * (3, 1): his route would be 3 \u2192 1. ",
        "task_name": "979_C. Kuro and Walking Route",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nfrom collections import deque\n\ndef bfs(start):\n\tpq = deque()\n\tvisited = set({start})\n\tpq.appendleft(start)\n\twhile pq:\n\t\tu = pq.pop()\n\t\tfor v in g[u]:\n\t\t\tif v not in visited:\n\t\t\t\tvisited.add(v)\n\t\t\t\tpq.appendleft(v)\n\t\t\t\tparent[v] = u\n\n\tpath_f_b = set({})\n\tu = f\n\twhile u != b:\n\t\tpath_f_b.add(u)\n\t\tu = parent[u]\n\tpath_f_b.add(u)\n\treturn path_f_b\n\ndef sol(visited):\n\tfs = bs = 1\n\tpq = deque()\n\tpq.appendleft(f)\n\twhile pq:\n\t\tu = pq.pop()\n\t\tfor v in g[u]:\n\t\t\tif v not in visited:\n\t\t\t\tvisited.add(v)\n\t\t\t\tfs += 1\n\t\t\t\tpq.appendleft(v)\n\tpq.appendleft(b)\n\twhile pq:\n\t\tu = pq.pop()\n\t\tfor v in g[u]:\n\t\t\tif v not in visited:\n\t\t\t\tvisited.add(v)\n\t\t\t\tbs += 1\n\t\t\t\tpq.appendleft(v)\n\n\treturn (n * (n-1)) - (bs*fs)\n\n\n\nn,f,b = map(int, sys.stdin.readline().strip().split(' '))\ng = {i:[] for i in range(1,n+1)}\nparent = {i:-1 for i in range(1,n+1)}\nfor n0 in range(n-1):\n\tu,v = map(int, sys.stdin.readline().strip().split(' '))\n\tg[u].append(v)\n\tg[v].append(u)\n\nprint(sol(bfs(b)))\n\n",
        "correct": true,
        "task_id": "1053",
        "depth": 2
    },
    {
        "description": "You are given an array consisting of n integers a_1, a_2, ..., a_n, and a positive integer m. It is guaranteed that m is a divisor of n.\n\nIn a single move, you can choose any position i between 1 and n and increase a_i by 1.\n\nLet's calculate c_r (0 \u2264 r \u2264 m-1) \u2014 the number of elements having remainder r when divided by m. In other words, for each remainder, let's find the number of corresponding elements in a with that remainder.\n\nYour task is to change the array in such a way that c_0 = c_1 = ... = c_{m-1} = n/m.\n\nFind the minimum number of moves to satisfy the above requirement.\n\nInput\n\nThe first line of input contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 m \u2264 n). It is guaranteed that m is a divisor of n.\n\nThe second line of input contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 10^9), the elements of the array.\n\nOutput\n\nIn the first line, print a single integer \u2014 the minimum number of moves required to satisfy the following condition: for each remainder from 0 to m - 1, the number of elements of the array having this remainder equals n/m.\n\nIn the second line, print any array satisfying the condition and can be obtained from the given array with the minimum number of moves. The values of the elements of the resulting array must not exceed 10^{18}.\n\nExamples\n\nInput\n\n6 3\n3 2 0 6 10 12\n\n\nOutput\n\n3\n3 2 0 7 10 14 \n\n\nInput\n\n4 2\n0 1 2 3\n\n\nOutput\n\n0\n0 1 2 3 ",
        "task_name": "999_D. Equalize the Remainders",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env pypy\n# Author : prayushd\n# Language : Python\n \nfrom __future__ import division, print_function\nfrom collections import defaultdict, Counter, deque\nfrom future_builtins import ascii, filter, hex, map, oct, zip\nfrom itertools import imap as map, izip as zip\nfrom __builtin__ import xrange as range\nfrom math import ceil\nfrom _continuation import continulet\nfrom cStringIO import StringIO\nfrom io import IOBase\nimport __pypy__\nfrom bisect import bisect, insort, bisect_left, bisect_right\nimport sys\nimport os\nimport re\ninf = float('inf')\nmod = int(1e9) + 7\nmod_ = 998244353\n \n'''\nCheck for special cases (n=1)\nOne wrong submission = 10 mins penalty!\ndo smth instead of nothing and stay organized\n'''\n\ndef main():\n\tn, m = map(int, input().split())\n\tarr = list(map(int, input().split()))\n\tc = [deque() for i in range(m)]\n\tfree = deque()\n\ttarget = n//m\n\tcost = 0\n\tfor i in range(n):\n\t\tc[arr[i]%m].append((i, arr[i]%m))\n\n\tfor i in range(m):\n\t\twhile len(c[i]) > target:\n\t\t\tfree.append(c[i].popleft())\n\n\tfor i in range(m):\n\t\twhile len(c[i]) < target:\n\t\t\tcost += (i-free[0][1])%m\n\t\t\tarr[free[0][0]] += (i-free[0][1])%m\n\t\t\tc[i].append(free.popleft())\n\t\t\t\n\tprint(cost)\n\tprint(*arr)\n\n\nBUFSIZE = 8192\nclass FastI(IOBase):\n\tdef __init__(self, file):\n\t\tself._fd = file.fileno()\n\t\tself._buffer = StringIO()\n\t\tself.newlines = 0\n \n\tdef read(self):\n\t\twhile True:\n\t\t\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n\t\t\tif not b:\n\t\t\t\tbreak\n\t\t\tptr = self.buffer.tell()\n\t\t\tself.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n\t\tself.newlines = 0\n\t\treturn self.buffer.read()\n \n\tdef readline(self):\n\t\twhile self.newlines == 0:\n\t\t\tb = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n\t\t\tself.newlines = b.count(\"\\n\") + (not b)\n\t\t\tptr = self._buffer.tell()\n\t\t\tself._buffer.seek(0, 2), self._buffer.write(\n\t\t\t\tb), self._buffer.seek(ptr)\n\t\tself.newlines -= 1\n\t\treturn self._buffer.readline()\nclass FastO(IOBase):\n\tdef __init__(self, file):\n\t\tself._fd = file.fileno()\n\t\tself._buffer = __pypy__.builders.StringBuilder()\n\t\tself.write = lambda s: self._buffer.append(s)\n \n\tdef flush(self):\n\t\tos.write(self._fd, self._buffer.build())\n\t\tself._buffer = __pypy__.builders.StringBuilder()\ndef print(*args, **kwargs):\n\tsep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n\tat_start = True\n\tfor x in args:\n\t\tif not at_start:\n\t\t\tfile.write(sep)\n\t\tfile.write(str(x))\n\t\tat_start = False\n\tfile.write(kwargs.pop(\"end\", \"\\n\"))\n\tif kwargs.pop(\"flush\", False):\n\t\tfile.flush()\ndef gcd(x, y):\n\twhile y:\n\t\tx, y = y, x % y\n\treturn x\nsys.stdin, sys.stdout = FastI(sys.stdin), FastO(sys.stdout)\ndef input(): return sys.stdin.readline().rstrip(\"\\r\\n\")\nif __name__ == \"__main__\":\n\tdef bootstrap(cont):\n\t\tcall, arg = cont.switch()\n\t\twhile True:\n\t\t\tcall, arg = cont.switch(to=continulet(\n\t\t\t\tlambda _, f, args: f(*args), call, arg))\n\tcont = continulet(bootstrap)\n\tcont.switch()\n\tmain()",
        "correct": false,
        "task_id": "1054",
        "depth": 2
    },
    {
        "description": "There are N cards placed on a grid with H rows and W columns of squares.\n\nThe i-th card has an integer A_i written on it, and it is placed on the square at the R_i-th row from the top and the C_i-th column from the left.\n\nMultiple cards may be placed on the same square.\n\nYou will first pick up at most one card from each row.\n\nThen, you will pick up at most one card from each column.\n\nFind the maximum possible sum of the integers written on the picked cards.\n\nConstraints\n\n* All values are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq H, W \\leq 10^5\n* 1 \\leq A_i \\leq 10^5\n* 1 \\leq R_i \\leq H\n* 1 \\leq C_i \\leq W\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN H W\nR_1 C_1 A_1\nR_2 C_2 A_2\n\\vdots\nR_N C_N A_N\n\n\nOutput\n\nPrint the maximum possible sum of the integers written on the picked cards.\n\nExamples\n\nInput\n\n6 2 2\n2 2 2\n1 1 8\n1 1 5\n1 2 9\n1 2 7\n2 1 4\n\n\nOutput\n\n28\n\n\nInput\n\n13 5 6\n1 3 35902\n4 6 19698\n4 6 73389\n3 6 3031\n3 1 4771\n1 4 4784\n2 1 36357\n2 1 24830\n5 6 50219\n4 6 22645\n1 2 30739\n1 4 68417\n1 5 78537\n\n\nOutput\n\n430590\n\n\nInput\n\n1 100000 100000\n1 1 1\n\n\nOutput\n\n1",
        "task_name": "p02931 Japanese Student Championship 2019 Qualification - Card Collector",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\n\ndef par(a):\n    if P[a] < 0: return a\n    t = par(P[a])\n    P[a] = t\n    return t\ndef unite(a, b):\n    if par(a) == par(b): return 0\n    C[par(a)], C[par(b)] = C[par(a)] + C[par(b)], C[par(a)] + C[par(b)]\n    if P[par(b)] == P[par(a)]:\n        P[par(b)] = par(a)\n        P[par(a)] -= 1\n    elif P[par(b)] > P[par(a)]:\n        P[par(b)] = par(a)\n    else:\n        P[par(a)] = par(b)\nN, H, W = map(int, input().split())\nP = [-1 for i in range(H+W)]\nC = [1] * (H+W)\nX = []\nfor _ in range(N):\n    r, c, a = map(int, input().split())\n    X.append((a, r-1, c+H-1))\nX = sorted(X)\nans = 0\nwhile X:\n    a, r, c = X.pop()\n    unite(r, c)\n    if C[par(r)]:\n        ans += a\n        C[par(r)] -= 1\nprint(ans)",
        "correct": true,
        "task_id": "1056",
        "depth": 1
    },
    {
        "description": "In AtCoder Kingdom, Gregorian calendar is used, and dates are written in the \"year-month-day\" order, or the \"month-day\" order without the year.\nFor example, May 3, 2018 is written as 2018-5-3, or 5-3 without the year.\n\nIn this country, a date is called Takahashi when the month and the day are equal as numbers. For example, 5-5 is Takahashi.\nHow many days from 2018-1-1 through 2018-a-b are Takahashi?\n\nConstraints\n\n* a is an integer between 1 and 12 (inclusive).\n* b is an integer between 1 and 31 (inclusive).\n* 2018-a-b is a valid date in Gregorian calendar.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\na b\n\n\nOutput\n\nPrint the number of days from 2018-1-1 through 2018-a-b that are Takahashi.\n\nExamples\n\nInput\n\n5 5\n\n\nOutput\n\n5\n\n\nInput\n\n2 1\n\n\nOutput\n\n1\n\n\nInput\n\n11 30\n\n\nOutput\n\n11",
        "task_name": "p03359 AtCoder Beginner Contest 096 - Day of Takahashi",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat May 05 21:59:05 2018\n\n@author: ashida\n\"\"\"\n\n\nimport numpy as np\n\nH, W = map(int, raw_input().split())\n\nS = np.zeros((H, W))\n\nd_flag = 0\n\nfor i in range(H):\n    tmp = list(raw_input())\n    for j in range(W):\n        if tmp[j] == \"#\":\n            S[i, j] = 1\n            d_flag = 1\n        else:\n            S[i, j] = 0\n\n\n\nfor i in range(H):\n    for j in range(W):\n        if S[i, j] == 1:\n            flag = 0\n            if i>1:\n                a1 = S[i-1, j]\n            else:\n                a1 = 0\n            if j>1:\n                a2 = S[i, j-1]\n            else:\n                a2 = 0\n            if i<H-1:\n                a3 = S[i+1, j]\n            else:\n                a3 = 0\n            if j<W-1:\n                a4 = S[i, j+1]\n            else:\n                a4 = 0\n            if a1+a2+a3+a4 == 0:\n                d_flag = 0\n                \nif d_flag == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "correct": false,
        "task_id": "1059",
        "depth": 2
    },
    {
        "description": "Takahashi wants to gain muscle, and decides to work out at AtCoder Gym.\n\nThe exercise machine at the gym has N buttons, and exactly one of the buttons is lighten up. These buttons are numbered 1 through N. When Button i is lighten up and you press it, the light is turned off, and then Button a_i will be lighten up. It is possible that i=a_i. When Button i is not lighten up, nothing will happen by pressing it.\n\nInitially, Button 1 is lighten up. Takahashi wants to quit pressing buttons when Button 2 is lighten up.\n\nDetermine whether this is possible. If the answer is positive, find the minimum number of times he needs to press buttons.\n\nConstraints\n\n* 2 \u2264 N \u2264 10^5\n* 1 \u2264 a_i \u2264 N\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1\na_2\n:\na_N\n\n\nOutput\n\nPrint -1 if it is impossible to lighten up Button 2. Otherwise, print the minimum number of times we need to press buttons in order to lighten up Button 2.\n\nExamples\n\nInput\n\n3\n3\n1\n2\n\n\nOutput\n\n2\n\n\nInput\n\n4\n3\n4\n1\n2\n\n\nOutput\n\n-1\n\n\nInput\n\n5\n3\n3\n4\n2\n4\n\n\nOutput\n\n3",
        "task_name": "p03680 AtCoder Beginner Contest 065 - Trained?",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    N = sys.stdin.readline()\n    while N:\n        A = [int(raw_input()) - 1 for i in xrange(0, int(N))]\n\n        counter = 0\n        visited = set()\n        index = 0\n        while index != 1 and index not in visited:\n            visited.add(index)\n            counter += 1\n            index = A[index]\n\n        if index != 1:\n            counter = -1\n        print(\"{0}\".format(counter))\n\n        N = sys.stdin.readline()\n\nif __name__ == \"__main__\":\n    main(sys.argv)",
        "correct": true,
        "task_id": "1060",
        "depth": 2
    },
    {
        "description": "You are given two integers K and S.\nThree variable X, Y and Z takes integer values satisfying 0\u2264X,Y,Z\u2264K.\nHow many different assignments of values to X, Y and Z are there such that X + Y + Z = S?\n\nConstraints\n\n* 2\u2264K\u22642500\n* 0\u2264S\u22643K\n* K and S are integers.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nK S\n\n\nOutput\n\nPrint the number of the triples of X, Y and Z that satisfy the condition.\n\nExamples\n\nInput\n\n2 2\n\n\nOutput\n\n6\n\n\nInput\n\n5 15\n\n\nOutput\n\n1",
        "task_name": "p03835 AtCoder Beginner Contest 051 - Sum of Three Integers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# vim: set fileencoding=utf-8 :\nk, s = map(int, raw_input().split())\npatterns = []\nct = 0\n\nfor x in range(k + 1):\n    nokori = s - x\n    for y in range(k + 1):\n        if 0 <= nokori - y <= k:\n            ct += 1\n\nprint(ct)\n",
        "correct": true,
        "task_id": "1061",
        "depth": 2
    },
    {
        "description": "Dr .: Peter, I've finally done it.\nPeter: What's wrong, Dr. David? Is it a silly invention again?\nDr .: This table, this table.\n\n\n| Character | Sign\n--- | ---\n(Blank) | 101\n'| 000000\n, | 000011\n-| 10010001\n. | 010001\n? | 000001\nA | 100101\nB | 10011010\n| Character | Sign\n--- | ---\nC | 0101\nD | 0001\nE | 110\nF | 01001\nG | 10011011\nH | 010000\nI | 0111\nJ | 10011000\n| Character | Sign\n--- | ---\nK | 0110\nL | 00100\nM | 10011001\nN | 10011110\nO | 00101\nP | 111\nQ | 10011111\nR | 1000\n| Character | Sign\n--- | ---\nS | 00110\nT | 00111\nU | 10011100\nV | 10011101\nW | 000010\nX | 10010010\nY | 10010011\nZ | 10010000\n\n\n\nPeter: What? This table is.\nDr .: Okay, just do what you say. First, write your name on a piece of paper.\nPeter: Yes, \"PETER POTTER\".\nDr .: Then, replace each character with the \"code\" in this table.\nPeter: Well, change \"P\" to \"111\" and \"E\" to \"110\" ... It's quite annoying.\n\n\n111 110 00111 110 1000 101 111 00101 00111 00111 110 1000\n\n\nbecame. It looks like a barcode.\nDr .: All right. Then connect all the replaced strings and separate them by 5 characters.\nPeter: Yes, if you connect and separate.\n\n\n11111 00011 11101 00010 11110 01010 01110 01111 10100 0\n\n\nIt turned out to be something like this. But what about the last \"0\" guy?\nDr .: Add 0 to make it 5 letters.\nPeter: Well, there is only one 0 at the end, so I should add four more 0s. I was able to do it.\n\n\n\n11111 00011 11101 00010 11110 01010 01110 01111 10100 00000\n\n\nDr .: Next, use this table.\n\n\n| Sign | Character\n--- | ---\n00000 | A\n00001 | B\n00010 | C\n00011 | D\n00100 | E\n00101 | F\n00110 | G\n00111 | H\n| Sign | Character\n--- | ---\n01000 | I\n01001 | J\n01010 | K\n01011 | L\n01100 | M\n01101 | N\n01110 | O\n01111 | P\n| Sign | Character\n--- | ---\n10000 | Q\n10001 | R\n10010 | S\n10011 | T\n10100 | U\n10101 | V\n10110 | W\n10111 | X\n| Sign | Character\n--- | ---\n11000 | Y\n11001 | Z\n11010 | (blank)\n11011 | ..\n11100 |,\n11101 |-\n11110 |'\n11111 |?\n\n\n\nPeter: How do you use this ... yeah! Now you're going to replace the code with a letter!\nDr .: That's right. If it is \"11111\", go to \"?\", If it is \"00011\", go to \"D\".\nPeter: This is simple ... well, it became \"? D-C'KOPUA\". But it doesn't make sense.\nDr .: Count the number of characters.\nPeter: It's 10 characters. Oh, \"PETER POTTER\" was 12 characters, but 2 characters are reduced.\nDr .: Yes, you can use this table to reduce the number of letters. Now do the same thing in this sentence.\n\n\n\nPETER PIPER PICKED A PECK OF PICKLED PEPPERS. A PECK OF PICKLED PEPPERS\nPETER PIPER PICKED. IF PETER PIPER PICKED A PECK OF PICKLED PEPPERS, WHERE'S\nTHE PECK OF PICKLED PEPPERS PETER PIPER PICKED?\n\n\nPeter: Gyogyo, the lines are separated, what do you do?\nDr .: Due to space limitations, there are only 3 lines, but think of it as a long line with a space instead of a newline character.\nPeter: Yes, yes. There is a blank space between the lines. But it's a hassle ...\nDr .: Then why not let the program do it?\n\n\nSo, instead of Peter, create a program that converts the read character string into a code and outputs it.\n\n\n\ninput\n\nGiven multiple datasets. Each dataset is given a line of strings (consisting of the characters contained in the table). The string contains at least 1 and no more than 100 characters.\n\nThe number of datasets does not exceed 200.\n\noutput\n\nFor each data set, output the converted character string on one line.\n\nExample\n\nInput\n\nPETER POTTER\n\n\nOutput\n\n?D-C'KOPUA",
        "task_name": "p00088 The Code A Doctor Loved",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom __future__ import (division, absolute_import, print_function,\n                        unicode_literals)\nfrom sys import stdin\nimport io\n\nd1 = {\n    ' ': '101', \"'\": '000000', ',': '000011', '-': '10010001',\n    '.': '010001', '?': '000001', 'A': '100101', 'B': '10011010',\n    'C': '0101', 'D': '0001', 'E': '110', 'F': '01001', 'G': '10011011',\n    'H': '010000', 'I': '0111', 'J': '10011000', 'K': '0110', 'L': '00100',\n    'M': '10011001', 'N': '10011110', 'O': '00101', 'P': '111',\n    'Q': '10011111', 'R': '1000', 'S': '00110', 'T': '00111',\n    'U': '10011100', 'V': '10011101', 'W': '000010', 'X': '10010010',\n    'Y': '10010011', 'Z': '10010000'\n    }\nd2 = {n: chr(n+ord('A')) for n in range(26)}\nd2.update(zip(range(26, 32), \" .,-'?\"))\n\nfor line in stdin:\n    stream = io.StringIO()\n    stream.write(''.join(d1[c] for c in line.rstrip('\\r\\n')))\n    stream.seek(0)\n    c = stream.read(5)\n    while c:\n        print(d2[int(c.ljust(5, '0'), 2)], end='')\n        c = stream.read(5)\n    print()",
        "correct": true,
        "task_id": "1062",
        "depth": 2
    },
    {
        "description": "International Center for Picassonian Cubism is a Spanish national museum of cubist artworks, dedicated to Pablo Picasso. The center held a competition for an artwork that will be displayed in front of the facade of the museum building. The artwork is a collection of cubes that are piled up on the ground and is intended to amuse visitors, who will be curious how the shape of the collection of cubes changes when it is seen from the front and the sides.\n\nThe artwork is a collection of cubes with edges of one foot long and is built on a flat ground that is divided into a grid of one foot by one foot squares. Due to some technical reasons, cubes of the artwork must be either put on the ground, fitting into a unit square in the grid, or put on another cube in the way that the bottom face of the upper cube exactly meets the top face of the lower cube. No other way of putting cubes is possible.\n\nYou are a member of the judging committee responsible for selecting one out of a plenty of artwork proposals submitted to the competition. The decision is made primarily based on artistic quality but the cost for installing the artwork is another important factor. Your task is to investigate the installation cost for each proposal. The cost is proportional to the number of cubes, so you have to figure out the minimum number of cubes needed for installation.\n\nEach design proposal of an artwork consists of the front view and the side view (the view seen from the right-hand side), as shown in Figure 1.\n\n<image>\n\n\nFigure 1: An example of an artwork proposal\n\nThe front view (resp., the side view) indicates the maximum heights of piles of cubes for each column line (resp., row line) of the grid.\n\nThere are several ways to install this proposal of artwork, such as the following figures.\n\n<image>\n\n\nIn these figures, the dotted lines on the ground indicate the grid lines. The left figure makes use of 16 cubes, which is not optimal. That is, the artwork can be installed with a fewer number of cubes. Actually, the right one is optimal and only uses 13 cubes. Note that, a single pile of height three in the right figure plays the roles of two such piles in the left one.\n\nNotice that swapping columns of cubes does not change the side view. Similarly, swapping rows does not change the front view. Thus, such swaps do not change the costs of building the artworks.\n\nFor example, consider the artwork proposal given in Figure 2.\n\n<image>\n\n\nFigure 2: Another example of artwork proposal\n\nAn optimal installation of this proposal of artwork can be achieved with 13 cubes, as shown in the following figure, which can be obtained by exchanging the rightmost two columns of the optimal installation of the artwork of Figure 1.\n\n<image>\n\n\n\nInput\n\nThe input is a sequence of datasets. The end of the input is indicated by a line containing two zeros separated by a space. Each dataset is formatted as follows.\n\nw d\nh1 h2 ... hw\nh'1 h'2 ... h'd\n\n\nThe integers w and d separated by a space are the numbers of columns and rows of the grid, respectively. You may assume 1 \u2264 w \u2264 10 and 1 \u2264 d \u2264 10. The integers separated by a space in the second and third lines specify the shape of the artwork. The integers hi (1 \u2264 hi \u2264 20, 1 \u2264 i \u2264 w) in the second line give the front view, i.e., the maximum heights of cubes per each column line, ordered from left to right (seen from the front). The integers hi (1 \u2264 hi \u2264 20, 1 \u2264 i \u2264 d) in the third line give the side view, i.e., the maximum heights of cubes per each row line, ordered from left to right (seen from the right-hand side).\n\nOutput\n\nFor each dataset, output a line containing the minimum number of cubes. The output should not contain any other extra characters.\n\nYou can assume that, for each dataset, there is at least one way to install the artwork.\n\nExample\n\nInput\n\n5 5\n1 2 3 4 5\n1 2 3 4 5\n5 5\n2 5 4 1 3\n4 1 5 3 2\n5 5\n1 2 3 4 5\n3 3 3 4 5\n3 3\n7 7 7\n7 7 7\n3 3\n4 4 4\n4 3 4\n4 3\n4 2 2 4\n4 2 1\n4 4\n2 8 8 8\n2 3 8 3\n10 10\n9 9 9 9 9 9 9 9 9 9\n9 9 9 9 9 9 9 9 9 9\n10 9\n20 1 20 20 20 20 20 18 20 20\n20 20 20 20 7 20 20 20 20\n0 0\n\n\nOutput\n\n15\n15\n21\n21\n15\n13\n32\n90\n186",
        "task_name": "p00874 Cubist Artwork",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "while True:\n\tn,m=map(int,raw_input().split())\n\tif n==0:break\n\ta=raw_input().split()\n\tb=raw_input().split()\n\tout=0\n\tfor i in range(21):out+=i*max(a.count(str(i)),b.count(str(i)))\n\tprint(out)",
        "correct": true,
        "task_id": "1063",
        "depth": 2
    },
    {
        "description": "Vova's family is building the Great Vova Wall (named by Vova himself). Vova's parents, grandparents, grand-grandparents contributed to it. Now it's totally up to Vova to put the finishing touches.\n\nThe current state of the wall can be respresented by a sequence a of n integers, with a_i being the height of the i-th part of the wall.\n\nVova can only use 2 \u00d7 1 bricks to put in the wall (he has infinite supply of them, however).\n\nVova can put bricks only horizontally on the neighbouring parts of the wall of equal height. It means that if for some i the current height of part i is the same as for part i + 1, then Vova can put a brick there and thus increase both heights by 1. Obviously, Vova can't put bricks in such a way that its parts turn out to be off the borders (to the left of part 1 of the wall or to the right of part n of it).\n\nNote that Vova can't put bricks vertically.\n\nVova is a perfectionist, so he considers the wall completed when:\n\n  * all parts of the wall has the same height; \n  * the wall has no empty spaces inside it. \n\n\n\nCan Vova complete the wall using any amount of bricks (possibly zero)?\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of parts in the wall.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9) \u2014 the initial heights of the parts of the wall.\n\nOutput\n\nPrint \"YES\" if Vova can complete the wall using any amount of bricks (possibly zero).\n\nPrint \"NO\" otherwise.\n\nExamples\n\nInput\n\n\n5\n2 1 1 2 5\n\n\nOutput\n\n\nYES\n\n\nInput\n\n\n3\n4 5 3\n\n\nOutput\n\n\nNO\n\n\nInput\n\n\n2\n10 10\n\n\nOutput\n\n\nYES\n\nNote\n\nIn the first example Vova can put a brick on parts 2 and 3 to make the wall [2, 2, 2, 2, 5] and then put 3 bricks on parts 1 and 2 and 3 bricks on parts 3 and 4 to make it [5, 5, 5, 5, 5].\n\nIn the second example Vova can put no bricks in the wall.\n\nIn the third example the wall is already complete.",
        "task_name": "1092_D2. Great Vova Wall (Version 2)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys,math\nfrom collections import defaultdict\nfrom io import BytesIO\n\nsys.stdin = BytesIO(sys.stdin.read())\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nn = int(input())\narr = [int(x) for x in input().split(' ')]\n#n,k = map(int, input().split(' '))\n#print(arr)\n\n#print(arr)\nh = max(arr)\nres = list()\nfor el in arr:\n    if len(res) == 0 or res[-1] != el:\n        if len(res) > 0:\n            if res[-1] < el:\n                print('NO')\n                exit()\n        res.append(el)\n    else:\n        res.pop()\nif len(res) > 1:\n    print('NO')\nelif len(res) == 0:\n    print('YES')\nelse:\n    print('NO' if res[-1] < h else 'YES')\n",
        "correct": true,
        "task_id": "1065",
        "depth": 1
    },
    {
        "description": "Thanos wants to destroy the avengers base, but he needs to destroy the avengers along with their base.\n\nLet we represent their base with an array, where each position can be occupied by many avengers, but one avenger can occupy only one position. Length of their base is a perfect power of 2. Thanos wants to destroy the base using minimum power. He starts with the whole base and in one step he can do either of following: \n\n  * if the current length is at least 2, divide the base into 2 equal halves and destroy them separately, or \n  * burn the current base. If it contains no avenger in it, it takes A amount of power, otherwise it takes his B \u22c5 n_a \u22c5 l amount of power, where n_a is the number of avengers and l is the length of the current base.\n\nOutput the minimum power needed by Thanos to destroy the avengers' base.\n\nInput\n\nThe first line contains four integers n, k, A and B (1 \u2264 n \u2264 30, 1 \u2264 k \u2264 10^5, 1 \u2264 A,B \u2264 10^4), where 2^n is the length of the base, k is the number of avengers and A and B are the constants explained in the question.\n\nThe second line contains k integers a_{1}, a_{2}, a_{3}, \u2026, a_{k} (1 \u2264 a_{i} \u2264 2^n), where a_{i} represents the position of avenger in the base.\n\nOutput\n\nOutput one integer \u2014 the minimum power needed to destroy the avengers base.\n\nExamples\n\nInput\n\n\n2 2 1 2\n1 3\n\n\nOutput\n\n\n6\n\n\nInput\n\n\n3 2 1 2\n1 7\n\n\nOutput\n\n\n8\n\nNote\n\nConsider the first example.\n\nOne option for Thanos is to burn the whole base 1-4 with power 2 \u22c5 2 \u22c5 4 = 16.\n\nOtherwise he can divide the base into two parts 1-2 and 3-4.\n\nFor base 1-2, he can either burn it with power 2 \u22c5 1 \u22c5 2 = 4 or divide it into 2 parts 1-1 and 2-2.\n\nFor base 1-1, he can burn it with power 2 \u22c5 1 \u22c5 1 = 2. For 2-2, he can destroy it with power 1, as there are no avengers. So, the total power for destroying 1-2 is 2 + 1 = 3, which is less than 4. \n\nSimilarly, he needs 3 power to destroy 3-4. The total minimum power needed is 6.",
        "task_name": "1111_C. Creative Snap",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,k,a,b=map(int,raw_input().split())#attendu:12\ndef f(pos,amp,debut,fins):\n    global a,b\n    #print(pos,amp,debut,fins)\n    if debut==fins:\n        return a\n    if amp==1:\n        return b*(fins-debut)\n    else:\n        borne=pos+amp//2\n        deb=debut-1#\u00e0 l'issue de la dicho, deb doit indiquer le dernier avanger de la premi\u00e8re moiti\u00e9 ou avant,j'ai gal\u00e9r\u00e9 pourc omprendre qu'il fallaaitmettre d\u00e9but-1\n        fin=fins\n        while fin-deb>1:\n            m=(fin+deb)//2\n            if antman[m]>=borne:\n                fin=m\n            else:\n                deb=m\n            #if amp==4:\n                #print(m,antman[m],borne,deb,fin)\n        r=min(f(pos,amp//2,debut,fin)+f(borne,amp//2,fin,fins),b*amp*(fins-debut))\n        #print(r,pos,amp,debut,fins,deb,fin)\n        return r\nantman=sorted(map(int,raw_input().split()))\nprint(f(1,2**n,0,k))#pointeur au d\u00e9but et pointeur en dehors\n",
        "correct": true,
        "task_id": "1066",
        "depth": 1
    },
    {
        "description": "Polycarp plays \"Game 23\". Initially he has a number n and his goal is to transform it to m. In one move, he can multiply n by 2 or multiply n by 3. He can perform any number of moves.\n\nPrint the number of moves needed to transform n to m. Print -1 if it is impossible to do so.\n\nIt is easy to prove that any way to transform n to m contains the same number of moves (i.e. number of moves doesn't depend on the way of transformation).\n\nInput\n\nThe only line of the input contains two integers n and m (1 \u2264 n \u2264 m \u2264 5\u22c510^8).\n\nOutput\n\nPrint the number of moves to transform n to m, or -1 if there is no solution.\n\nExamples\n\nInput\n\n\n120 51840\n\n\nOutput\n\n\n7\n\n\nInput\n\n\n42 42\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n48 72\n\n\nOutput\n\n\n-1\n\nNote\n\nIn the first example, the possible sequence of moves is: 120 \u2192 240 \u2192 720 \u2192 1440 \u2192 4320 \u2192 12960 \u2192 25920 \u2192 51840. The are 7 steps in total.\n\nIn the second example, no moves are needed. Thus, the answer is 0.\n\nIn the third example, it is impossible to transform 48 to 72.",
        "task_name": "1141_A. Game 23",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, m = map(int,raw_input().split(\" \"))\nquant = 0\ncont = 0\nif (n == m):\n\tprint(0)\nelif (m % n == 0 and (m % 2 == 0 or m % 3 == 0 or m % 6)):\n\twhile True:\n\t\tif (m % 6 == 0):\n\t\t\tif (quant % 2 == 0):\n\t\t\t\tn *=2\n\t\t\telse:\n\t\t\t\tn *=3\n\t\t\tquant+=1\n\t\telif (m %2 == 0):\n\t\t\tn *=2\n\t\telse:\n\t\t\tn*=3\t\n\t\tcont+=1\n\t\t\n\t\tif (n>=m):\n\t\t\tbreak\n\tif(n == m):\n\t\tprint(cont)\n\telse:\n\t\tprint(-1)\nelse:\n\tprint(-1)\n",
        "correct": false,
        "task_id": "1067",
        "depth": 1
    },
    {
        "description": "Several days ago you bought a new house and now you are planning to start a renovation. Since winters in your region can be very cold you need to decide how to heat rooms in your house.\n\nYour house has n rooms. In the i-th room you can install at most c_i heating radiators. Each radiator can have several sections, but the cost of the radiator with k sections is equal to k^2 burles.\n\nSince rooms can have different sizes, you calculated that you need at least sum_i sections in total in the i-th room. \n\nFor each room calculate the minimum cost to install at most c_i radiators with total number of sections not less than sum_i.\n\nInput\n\nThe first line contains single integer n (1 \u2264 n \u2264 1000) \u2014 the number of rooms.\n\nEach of the next n lines contains the description of some room. The i-th line contains two integers c_i and sum_i (1 \u2264 c_i, sum_i \u2264 10^4) \u2014 the maximum number of radiators and the minimum total number of sections in the i-th room, respectively.\n\nOutput\n\nFor each room print one integer \u2014 the minimum possible cost to install at most c_i radiators with total number of sections not less than sum_i.\n\nExample\n\nInput\n\n\n4\n1 10000\n10000 1\n2 6\n4 6\n\n\nOutput\n\n\n100000000\n1\n18\n10\n\nNote\n\nIn the first room, you can install only one radiator, so it's optimal to use the radiator with sum_1 sections. The cost of the radiator is equal to (10^4)^2 = 10^8.\n\nIn the second room, you can install up to 10^4 radiators, but since you need only one section in total, it's optimal to buy one radiator with one section.\n\nIn the third room, there 7 variants to install radiators: [6, 0], [5, 1], [4, 2], [3, 3], [2, 4], [1, 5], [0, 6]. The optimal variant is [3, 3] and it costs 3^2+ 3^2 = 18.",
        "task_name": "1260_A. Heating",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from math import sqrt\nfor i in xrange(input()):\n    a,b=map(int,raw_input().split())\n    div1=(b/a)+1\n    print (div1*div1*(b%a))+((div1-1)*(div1-1)*(a-(b%a)))\n    \n",
        "correct": true,
        "task_id": "1069",
        "depth": 1
    },
    {
        "description": "Alicia has an array, a_1, a_2, \u2026, a_n, of non-negative integers. For each 1 \u2264 i \u2264 n, she has found a non-negative integer x_i = max(0, a_1, \u2026, a_{i-1}). Note that for i=1, x_i = 0.\n\nFor example, if Alicia had the array a = \\{0, 1, 2, 0, 3\\}, then x = \\{0, 0, 1, 2, 2\\}.\n\nThen, she calculated an array, b_1, b_2, \u2026, b_n: b_i = a_i - x_i.\n\nFor example, if Alicia had the array a = \\{0, 1, 2, 0, 3\\}, b = \\{0-0, 1-0, 2-1, 0-2, 3-2\\} = \\{0, 1, 1, -2, 1\\}.\n\nAlicia gives you the values b_1, b_2, \u2026, b_n and asks you to restore the values a_1, a_2, \u2026, a_n. Can you help her solve the problem?\n\nInput\n\nThe first line contains one integer n (3 \u2264 n \u2264 200 000) \u2013 the number of elements in Alicia's array.\n\nThe next line contains n integers, b_1, b_2, \u2026, b_n (-10^9 \u2264 b_i \u2264 10^9).\n\nIt is guaranteed that for the given array b there is a solution a_1, a_2, \u2026, a_n, for all elements of which the following is true: 0 \u2264 a_i \u2264 10^9.\n\nOutput\n\nPrint n integers, a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 10^9), such that if you calculate x according to the statement, b_1 will be equal to a_1 - x_1, b_2 will be equal to a_2 - x_2, ..., and b_n will be equal to a_n - x_n.\n\nIt is guaranteed that there exists at least one solution for the given tests. It can be shown that the solution is unique.\n\nExamples\n\nInput\n\n\n5\n0 1 1 -2 1\n\n\nOutput\n\n\n0 1 2 0 3 \n\nInput\n\n\n3\n1000 999999000 -1000000000\n\n\nOutput\n\n\n1000 1000000000 0 \n\nInput\n\n\n5\n2 1 2 2 3\n\n\nOutput\n\n\n2 3 5 7 10 \n\nNote\n\nThe first test was described in the problem statement.\n\nIn the second test, if Alicia had an array a = \\{1000, 1000000000, 0\\}, then x = \\{0, 1000, 1000000000\\} and b = \\{1000-0, 1000000000-1000, 0-1000000000\\} = \\{1000, 999999000, -1000000000\\}.",
        "task_name": "1326_B. Maximums",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n# Problem : B. Maximums\n# Contest : Codeforces Global Round 7\n# URL : https://codeforces.com/contest/1326/problem/B\n# Memory Limit : 256 MB\n# Time Limit : 1000 ms\n# Powered by CP Editor (https://github.com/cpeditor/cpeditor)\n\n\"\"\"\n// Author : snape_here - Susanta Mukherjee\n     \n \"\"\"\n \nfrom __future__ import division, print_function\n \nimport os,sys\nfrom io import BytesIO, IOBase\n \nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n \n \ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().split())\ndef li(): return list(mi())\n \n \ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n \ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\nmod=1000000007\n\nimport math\n\ndef main():\n\n\tn=ii()\n\ta=li()\n\ts=0\n\tfor i in range(n):\n\t\ts+=a[i]\n\t\tprint(s,end=\" \")\n\n    \n# region fastio\n \nBUFSIZE = 8192\n \n \nclass FastIO(IOBase):\n    newlines = 0\n \n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n \n \nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n \ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n \n# endregion\n \n \nif __name__ == \"__main__\":\n    #read()\n    main()",
        "correct": false,
        "task_id": "1071",
        "depth": 1
    },
    {
        "description": "You are given a special jigsaw puzzle consisting of n\u22c5 m identical pieces. Every piece has three tabs and one blank, as pictured below.\n\n<image>\n\nThe jigsaw puzzle is considered solved if the following conditions hold:\n\n  1. The pieces are arranged into a grid with n rows and m columns. \n  2. For any two pieces that share an edge in the grid, a tab of one piece fits perfectly into a blank of the other piece. \n\n\n\nThrough rotation and translation of the pieces, determine if it is possible to solve the jigsaw puzzle.\n\nInput\n\nThe test consists of multiple test cases. The first line contains a single integer t (1\u2264 t\u2264 1000) \u2014 the number of test cases. Next t lines contain descriptions of test cases.\n\nEach test case contains two integers n and m (1 \u2264 n,m \u2264 10^5).\n\nOutput\n\nFor each test case output a single line containing \"YES\" if it is possible to solve the jigsaw puzzle, or \"NO\" otherwise. You can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n3\n1 3\n100000 100000\n2 2\n\n\nOutput\n\n\nYES\nNO\nYES\n\nNote\n\nFor the first test case, this is an example solution: \n\n<image>\n\nFor the second test case, we can show that no solution exists.\n\nFor the third test case, this is an example solution:\n\n<image>",
        "task_name": "1345_A. Puzzle Pieces",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nfrom collections import Counter, defaultdict\nfrom itertools import permutations, combinations\nraw_input = stdin.readline\npr = stdout.write\n\n\ndef in_num():\n    return int(raw_input())\n\n\ndef in_arr():\n    return map(int,raw_input().split())\n\n\ndef pr_num(n):\n    stdout.write(str(n)+'\\n')\n\n\ndef pr_arr(arr):\n    pr(' '.join(map(str,arr))+'\\n')\n\n# fast read function for total integer input\n\ndef inp():\n    # this function returns whole input of\n    # space/line seperated integers\n    # Use Ctrl+D to flush stdin.\n    return map(int,stdin.read().split())\n\nrange = xrange # not for python 3.0+\n\nfor t in range(input()):\n    if min(in_arr())>2:\n        pr('NO\\n')\n    else:\n        pr('YES\\n')\n",
        "correct": false,
        "task_id": "1072",
        "depth": 1
    },
    {
        "description": "Once upon a time in the Kingdom of Far Far Away lived Sam the Farmer. Sam had a cow named Dawn and he was deeply attached to her. Sam would spend the whole summer stocking hay to feed Dawn in winter. Sam scythed hay and put it into haystack. As Sam was a bright farmer, he tried to make the process of storing hay simpler and more convenient to use. He collected the hay into cubical hay blocks of the same size. Then he stored the blocks in his barn. After a summer spent in hard toil Sam stored A\u00b7B\u00b7C hay blocks and stored them in a barn as a rectangular parallelepiped A layers high. Each layer had B rows and each row had C blocks.\n\nAt the end of the autumn Sam came into the barn to admire one more time the hay he'd been stacking during this hard summer. Unfortunately, Sam was horrified to see that the hay blocks had been carelessly scattered around the barn. The place was a complete mess. As it turned out, thieves had sneaked into the barn. They completely dissembled and took away a layer of blocks from the parallelepiped's front, back, top and sides. As a result, the barn only had a parallelepiped containing (A - 1) \u00d7 (B - 2) \u00d7 (C - 2) hay blocks. To hide the evidence of the crime, the thieves had dissembled the parallelepiped into single 1 \u00d7 1 \u00d7 1 blocks and scattered them around the barn. After the theft Sam counted n hay blocks in the barn but he forgot numbers A, B \u0438 C.\n\nGiven number n, find the minimally possible and maximally possible number of stolen hay blocks.\n\nInput\n\nThe only line contains integer n from the problem's statement (1 \u2264 n \u2264 109).\n\nOutput\n\nPrint space-separated minimum and maximum number of hay blocks that could have been stolen by the thieves.\n\nNote that the answer to the problem can be large enough, so you must use the 64-bit integer type for calculations. Please, do not use the %lld specificator to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specificator.\n\nExamples\n\nInput\n\n4\n\n\nOutput\n\n28 41\n\n\nInput\n\n7\n\n\nOutput\n\n47 65\n\n\nInput\n\n12\n\n\nOutput\n\n48 105\n\nNote\n\nLet's consider the first sample test. If initially Sam has a parallelepiped consisting of 32 = 2 \u00d7 4 \u00d7 4 hay blocks in his barn, then after the theft the barn has 4 = (2 - 1) \u00d7 (4 - 2) \u00d7 (4 - 2) hay blocks left. Thus, the thieves could have stolen 32 - 4 = 28 hay blocks. If Sam initially had a parallelepiped consisting of 45 = 5 \u00d7 3 \u00d7 3 hay blocks in his barn, then after the theft the barn has 4 = (5 - 1) \u00d7 (3 - 2) \u00d7 (3 - 2) hay blocks left. Thus, the thieves could have stolen 45 - 4 = 41 hay blocks. No other variants of the blocks' initial arrangement (that leave Sam with exactly 4 blocks after the theft) can permit the thieves to steal less than 28 or more than 41 blocks.",
        "task_name": "142_A. Help Farmer",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport math\n\ndef doit(A,B,C): return 2*(A+1)*(B+C+2) + B*C\n\nn=eval(sys.stdin.readline().strip('\\n\\r ').split()[0])\n\nif n==1:\n  print( \"17 17\")\n  exit(0)\n\nr=int(math.sqrt(float(n))) + 1\nr3=int(10**(math.log10(float(n))/3)) - 1\n\nmx = (8*n) + 9\nmn = mx\nwhile r>0:\n  if (n%r)==0:\n    A = r\n    m = n / r\n    B = int( math.sqrt(float(m)) ) + 1\n    while B>0:\n      if (m%B) == 0:\n        C = m/B\n        mn = min( [mn, doit(A,B,C),doit(B,A,C),doit(C,B,A)] )\n      B-=1\n  r-=1\n\nprint( \"%d %d\" % ( mn, mx, ) )\n",
        "correct": true,
        "task_id": "1073",
        "depth": 2
    },
    {
        "description": "You have n chains, the i-th chain consists of c_i vertices. Vertices in each chain are numbered independently from 1 to c_i along the chain. In other words, the i-th chain is the undirected graph with c_i vertices and (c_i - 1) edges connecting the j-th and the (j + 1)-th vertices for each 1 \u2264 j < c_i.\n\nNow you decided to unite chains in one graph in the following way: \n\n  1. the first chain is skipped; \n  2. the 1-st vertex of the i-th chain is connected by an edge with the a_i-th vertex of the (i - 1)-th chain; \n  3. the last (c_i-th) vertex of the i-th chain is connected by an edge with the b_i-th vertex of the (i - 1)-th chain. \n\n<image> Picture of the first test case. Dotted lines are the edges added during uniting process\n\nCalculate the length of the longest simple cycle in the resulting graph.\n\nA simple cycle is a chain where the first and last vertices are connected as well. If you travel along the simple cycle, each vertex of this cycle will be visited exactly once.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases.\n\nThe first line of each test case contains the single integer n (2 \u2264 n \u2264 10^5) \u2014 the number of chains you have.\n\nThe second line of each test case contains n integers c_1, c_2, ..., c_n (2 \u2264 c_i \u2264 10^9) \u2014 the number of vertices in the corresponding chains.\n\nThe third line of each test case contains n integers a_1, a_2, ..., a_n (a_1 = -1; 1 \u2264 a_i \u2264 c_{i - 1}).\n\nThe fourth line of each test case contains n integers b_1, b_2, ..., b_n (b_1 = -1; 1 \u2264 b_i \u2264 c_{i - 1}).\n\nBoth a_1 and b_1 are equal to -1, they aren't used in graph building and given just for index consistency. It's guaranteed that the sum of n over all test cases doesn't exceed 10^5.\n\nOutput\n\nFor each test case, print the length of the longest simple cycle.\n\nExample\n\nInput\n\n\n3\n4\n3 4 3 3\n-1 1 2 2\n-1 2 2 3\n2\n5 6\n-1 5\n-1 1\n3\n3 5 2\n-1 1 1\n-1 3 5\n\n\nOutput\n\n\n7\n11\n8\n\nNote\n\nIn the first test case, the longest simple cycle is shown below: \n\n<image>\n\nWe can't increase it with the first chain, since in such case it won't be simple \u2014 the vertex 2 on the second chain will break simplicity.",
        "task_name": "1476_C. Longest Simple Cycle",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    t = int(input())\n\n    for _ in range(t):\n        n = int(input())\n        c = [int(ci) for ci in input().split()]\n        a = [int(ai) for ai in input().split()]\n        b = [int(bi) for bi in input().split()]\n\n        for i in range(n):\n            a[i], b[i] = min(a[i], b[i]), max(a[i], b[i])\n\n        best = 1\n        curr = b[1] - a[1] + 1\n\n        for i in range(1, n):\n            best = max(best, curr + c[i])\n\n            if i != n - 1:\n                curr += a[i + 1] + (c[i] - b[i + 1] + 1)\n                if a[i + 1] == b[i + 1]:\n                    curr = 1\n\n        print(best)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": false,
        "task_id": "1074",
        "depth": 2
    },
    {
        "description": "This week Arkady wanted to cook some pancakes (to follow ancient traditions) and make a problem about that. But then he remembered that one can't make a problem about stacking pancakes without working at a specific IT company, so he decided to bake the Napoleon cake instead.\n\nTo bake a Napoleon cake, one has to bake n dry layers first, and then put them on each other in one stack, adding some cream. Arkady started with an empty plate, and performed the following steps n times: \n\n  * place a new cake layer on the top of the stack; \n  * after the i-th layer is placed, pour a_i units of cream on top of the stack. \n\n\n\nWhen x units of cream are poured on the top of the stack, top x layers of the cake get drenched in the cream. If there are less than x layers, all layers get drenched and the rest of the cream is wasted. If x = 0, no layer gets drenched.\n\n<image> The picture represents the first test case of the example.\n\nHelp Arkady determine which layers of the cake eventually get drenched when the process is over, and which don't.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 20 000). Description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of layers in the cake.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 n) \u2014 the amount of cream poured on the cake after adding each layer.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single line with n integers. The i-th of the integers should be equal to 1 if the i-th layer from the bottom gets drenched, and 0 otherwise.\n\nExample\n\nInput\n\n\n3\n6\n0 3 0 0 1 3\n10\n0 0 0 1 0 5 0 0 0 2\n3\n0 0 0\n\n\nOutput\n\n\n1 1 0 1 1 1 \n0 1 1 1 1 1 0 0 1 1 \n0 0 0 ",
        "task_name": "1501_B. Napoleon Cake",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def napoleon_cake_1(arr, layers):\n    res = [0 for i in range(layers)]\n    for a in range(0, len(arr)):\n        if arr[a] == 0:\n            continue\n        res[a] += 1\n        idx = a-arr[a]\n        if idx > 0:\n            res[idx] -= 1\n        \n    for i in range(len(res)-2, -1, -1):\n        res[i] += res[i+1]\n    lst = [str(1) if i >= 1 else str(0) for i in res]\n\n    return ' '.join(lst)\n\nn = int(raw_input())\nfor i in range(0, n):\n\tlayers = int(raw_input())\n\tlst = raw_input().split(\" \")\n\tlst = [int(i) for i in lst]\n\tprint(napoleon_cake_1(lst, layers))",
        "correct": false,
        "task_id": "1075",
        "depth": 1
    },
    {
        "description": "After rejecting 10^{100} data structure problems, Errorgorn is very angry at Anton and decided to kill him.\n\nAnton's DNA can be represented as a string a which only contains the characters \"ANTON\" (there are only 4 distinct characters). \n\nErrorgorn can change Anton's DNA into string b which must be a permutation of a. However, Anton's body can defend against this attack. In 1 second, his body can swap 2 adjacent characters of his DNA to transform it back to a. Anton's body is smart and will use the minimum number of moves.\n\nTo maximize the chance of Anton dying, Errorgorn wants to change Anton's DNA the string that maximizes the time for Anton's body to revert his DNA. But since Errorgorn is busy making more data structure problems, he needs your help to find the best string B. Can you help him?\n\nInput\n\nThe first line of input contains a single integer t (1 \u2264 t \u2264 100000) \u2014 the number of testcases.\n\nThe first and only line of each testcase contains 1 string a (1 \u2264 |a| \u2264 100000). a consists of only the characters \"A\", \"N\", \"O\" and \"T\".\n\nIt is guaranteed that the sum of |a| over all testcases does not exceed 100000.\n\nOutput\n\nFor each testcase, print a single string, b. If there are multiple answers, you can output any one of them. b must be a permutation of the string a.\n\nExample\n\nInput\n\n\n4\nANTON\nNAAN\nAAAAAA\nOAANTTON\n\n\nOutput\n\n\nNNOTA\nAANN\nAAAAAA\nTNNTAOOA\n\nNote\n\nFor the first testcase, it takes 7 seconds for Anton's body to transform NNOTA to ANTON: \n\nNNOTA \u2192 NNOAT \u2192 NNAOT \u2192 NANOT \u2192 NANTO \u2192 ANNTO \u2192 ANTNO \u2192 ANTON. \n\nNote that you cannot output strings such as AANTON, ANTONTRYGUB, AAAAA and anton as it is not a permutation of ANTON.\n\nFor the second testcase, it takes 2 seconds for Anton's body to transform AANN to NAAN. Note that other strings such as NNAA and ANNA will also be accepted.",
        "task_name": "1526_D. Kill Anton",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\nimport threading,bisect,math,heapq,sys\n# threading.stack_size(2**27)\n# sys.setrecursionlimit(10**4)\nfrom sys import stdin, stdout\ni_m=9223372036854775807    \ndef cin():\n    return map(int,sin().split())\ndef ain():                           #takes array as input\n    return list(map(int,sin().split()))\ndef sin():\n    return input()\ndef inin():\n    return int(input()) \nprime=[]\ndef dfs(n,d,v,a,c):\n    v[n]=1\n    if n in d:\n        x=d[n]\n    else:\n        a[n]+=c\n        x=[]\n    p=a[n]\n    for i in x:\n        if i not in v:\n            dfs(i,d,v,a,c)\n            p+=a[i]\n    a[n]=p\n    return p\n\n\n\"\"\"**************************MAIN*****************************\"\"\"\ndef main():\n    t=inin()\n    for _ in range(t):\n        s=sin()\n        n=len(s)\n        a=[]\n        b=[]\n        c=[]\n        d=[]\n        for i in range(n-1,-1,-1):\n            if s[i]==\"A\":\n                a.append(i)\n            elif s[i]==\"N\":\n                b.append(i)\n            elif s[i]==\"T\":\n                c.append(i)\n            elif s[i]==\"O\":\n                d.append(i)\n        ans=[]\n        for i in range(n):\n            p=-1\n            q='c'\n            if len(a)>0 and a[-1]>p:\n                p=a[-1]\n                q=\"A\"\n            if len(b)>0 and b[-1]>p:\n                p=b[-1]\n                q=\"N\"\n            if len(c)>0 and c[-1]>p:\n                p=c[-1]\n                q=\"T\"\n            if len(d)>0 and d[-1]>p:\n                p=d[-1]\n                q=\"O\"\n            if len(a)>0 and p==a[-1]:\n                a.pop()\n                ans.append(q)\n            if len(b)>0 and p==b[-1]:\n                b.pop()\n                ans.append(q)\n            if len(c)>0 and p==c[-1]:\n                c.pop()\n                ans.append(q)\n            if len(d)>0 and p==d[-1]:\n                d.pop()\n                ans.append(q)\n        print(*ans,sep=\"\")\n\n\n        \n        \n\n        \n\"\"\"*******************************************************\"\"\"\n\n######## Python 2 and 3 footer by Pajenegod and c1729\nfac=[]\ndef fact(n,mod):\n    global fac\n    fac.append(1)\n    for i in range(1,n+1):\n        fac.append((fac[i-1]*i)%mod)\n    f=fac[:]\n    return f\ndef nCr(n,r,mod):\n    global fac\n    x=fac[n]\n    y=fac[n-r]\n    z=fac[r]\n    x=moddiv(x,y,mod)\n    return moddiv(x,z,mod)\ndef moddiv(m,n,p):\n    x=pow(n,p-2,p)\n    return (m*x)%p\ndef GCD(x, y): \n    x=abs(x)\n    y=abs(y)\n    if(min(x,y)==0):\n        return max(x,y)\n    while(y): \n        x, y = y, x % y \n    return x \ndef Divisors(n) : \n    l = []  \n    ll=[]\n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if (n % i == 0) : \n            if (n // i == i) : \n                l.append(i) \n            else : \n                l.append(i)\n                ll.append(n//i)\n    l.extend(ll[::-1])\n    return l\ndef SieveOfEratosthenes(n): \n    global prime\n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    f=[]\n    for p in range(2, n): \n        if prime[p]: \n            f.append(p)\n    return f\ndef primeFactors(n): \n    a=[]\n    while n % 2 == 0: \n        a.append(2) \n        n = n // 2 \n    for i in range(3,int(math.sqrt(n))+1,2):  \n        while n % i== 0: \n            a.append(i) \n            n = n // i  \n    if n > 2: \n        a.append(n)\n    return a\n\"\"\"*******************************************************\"\"\"\npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\nimport os\nfrom io import IOBase, BytesIO\nBUFSIZE = 8192\nclass FastIO(BytesIO):\n    newlines = 0\n \n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n \n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0,2), super(FastIO, self).write(s))[0])\n        return s\n \n    def read(self):\n        while self._fill(): pass\n        return super(FastIO,self).read()\n \n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill(); self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s:self.buffer.write(s.encode('ascii'))\n            self.read = lambda:self.buffer.read().decode('ascii')\n            self.readline = lambda:self.buffer.readline().decode('ascii')\n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n') \n# Cout implemented in Python\nclass ostream:\n    def __lshift__(self,a):\n        sys.stdout.write(str(a))\n        return self\ncout = ostream()\nendl = '\\n'\n \n# Read all remaining integers in stdin, type is given by optional argument, this is fast\ndef readnumbers(zero = 0):\n    conv = ord if py2 else lambda x:x\n    A = []; numb = zero; sign = 1; i = 0; s = sys.stdin.buffer.read()\n    try:\n        while True:\n            if s[i] >= b'R' [0]:\n                numb = 10 * numb + conv(s[i]) - 48\n            elif s[i] == b'-' [0]: sign = -1\n            elif s[i] != b'\\r' [0]:\n                A.append(sign*numb)\n                numb = zero; sign = 1\n            i += 1\n    except:pass\n    if s and s[-1] >= b'R' [0]:\n        A.append(sign*numb)\n    return A\n \n# threading.Thread(target=main).start()\nif __name__== \"__main__\":\n  main()",
        "correct": false,
        "task_id": "1076",
        "depth": 2
    },
    {
        "description": "Inna loves sleeping very much, so she needs n alarm clocks in total to wake up. Let's suppose that Inna's room is a 100 \u00d7 100 square with the lower left corner at point (0, 0) and with the upper right corner at point (100, 100). Then the alarm clocks are points with integer coordinates in this square.\n\nThe morning has come. All n alarm clocks in Inna's room are ringing, so Inna wants to turn them off. For that Inna has come up with an amusing game:\n\n  * First Inna chooses a type of segments that she will use throughout the game. The segments can be either vertical or horizontal. \n  * Then Inna makes multiple moves. In a single move, Inna can paint a segment of any length on the plane, she chooses its type at the beginning of the game (either vertical or horizontal), then all alarm clocks that are on this segment switch off. The game ends when all the alarm clocks are switched off. \n\n\n\nInna is very sleepy, so she wants to get through the alarm clocks as soon as possible. Help her, find the minimum number of moves in the game that she needs to turn off all the alarm clocks!\n\nInput\n\nThe first line of the input contains integer n (1 \u2264 n \u2264 105) \u2014 the number of the alarm clocks. The next n lines describe the clocks: the i-th line contains two integers xi, yi \u2014 the coordinates of the i-th alarm clock (0 \u2264 xi, yi \u2264 100).\n\nNote that a single point in the room can contain any number of alarm clocks and the alarm clocks can lie on the sides of the square that represents the room.\n\nOutput\n\nIn a single line print a single integer \u2014 the minimum number of segments Inna will have to draw if she acts optimally.\n\nExamples\n\nInput\n\n4\n0 0\n0 1\n0 2\n1 0\n\n\nOutput\n\n2\n\n\nInput\n\n4\n0 0\n0 1\n1 0\n1 1\n\n\nOutput\n\n2\n\n\nInput\n\n4\n1 1\n1 2\n2 3\n3 3\n\n\nOutput\n\n3\n\nNote\n\nIn the first sample, Inna first chooses type \"vertical segments\", and then she makes segments with ends at : (0, 0), (0, 2); and, for example, (1, 0), (1, 1). If she paints horizontal segments, she will need at least 3 segments.\n\nIn the third sample it is important to note that Inna doesn't have the right to change the type of the segments during the game. That's why she will need 3 horizontal or 3 vertical segments to end the game.",
        "task_name": "390_A. Inna and Alarm Clock",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "number_of_clocks = int ( raw_input() )\nclocks_pos = [ [] for i in range ( number_of_clocks ) ]\nfor i in range (number_of_clocks) :\n\tclocks_pos[i] = [int(j) for j in raw_input().split()]\n\ndef number_of_diff_coord ( clocks_pos, coord):\n\tl = [0 for i in range (101) ]\n\tfor pos in clocks_pos :\n\t\tl[ pos[coord] ] += 1\n\tres = 0\n\tfor i in l :\n\t\tif i > 0 :\n\t\t\tres += 1\n\treturn res\n\nx = number_of_diff_coord( clocks_pos, 0)\ny = number_of_diff_coord( clocks_pos, 1)\nprint (min (x,y))",
        "correct": true,
        "task_id": "1080",
        "depth": 1
    },
    {
        "description": "Devu is a dumb guy, his learning curve is very slow. You are supposed to teach him n subjects, the ith subject has ci chapters. When you teach him, you are supposed to teach all the chapters of a subject continuously.\n\nLet us say that his initial per chapter learning power of a subject is x hours. In other words he can learn a chapter of a particular subject in x hours.\n\nWell Devu is not complete dumb, there is a good thing about him too. If you teach him a subject, then time required to teach any chapter of the next subject will require exactly 1 hour less than previously required (see the examples to understand it more clearly). Note that his per chapter learning power can not be less than 1 hour.\n\nYou can teach him the n subjects in any possible order. Find out minimum amount of time (in hours) Devu will take to understand all the subjects and you will be free to do some enjoying task rather than teaching a dumb guy.\n\nPlease be careful that answer might not fit in 32 bit data type.\n\nInput\n\nThe first line will contain two space separated integers n, x (1 \u2264 n, x \u2264 105). The next line will contain n space separated integers: c1, c2, ..., cn (1 \u2264 ci \u2264 105).\n\nOutput\n\nOutput a single integer representing the answer to the problem.\n\nExamples\n\nInput\n\n2 3\n4 1\n\n\nOutput\n\n11\n\n\nInput\n\n4 2\n5 1 2 1\n\n\nOutput\n\n10\n\n\nInput\n\n3 3\n1 1 1\n\n\nOutput\n\n6\n\nNote\n\nLook at the first example. Consider the order of subjects: 1, 2. When you teach Devu the first subject, it will take him 3 hours per chapter, so it will take 12 hours to teach first subject. After teaching first subject, his per chapter learning time will be 2 hours. Now teaching him second subject will take 2 \u00d7 1 = 2 hours. Hence you will need to spend 12 + 2 = 14 hours.\n\nConsider the order of subjects: 2, 1. When you teach Devu the second subject, then it will take him 3 hours per chapter, so it will take 3 \u00d7 1 = 3 hours to teach the second subject. After teaching the second subject, his per chapter learning time will be 2 hours. Now teaching him the first subject will take 2 \u00d7 4 = 8 hours. Hence you will need to spend 11 hours.\n\nSo overall, minimum of both the cases is 11 hours.\n\nLook at the third example. The order in this example doesn't matter. When you teach Devu the first subject, it will take him 3 hours per chapter. When you teach Devu the second subject, it will take him 2 hours per chapter. When you teach Devu the third subject, it will take him 1 hours per chapter. In total it takes 6 hours.",
        "task_name": "439_B. Devu, the Dumb Guy",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# BTVN_Buoi03_Bai01\n# http://codeforces.com/problemset/problem/439/B\n# Name: Hoa Hoang\n# Email: nobi.hoa@gmail.com\n\n# line_1 = \"2 3\"\n# line_2 = \"4 1\"\n#\n# line_1 = \"4 2\"\n# line_2 = \"5 1 2 1\"\n\n# n, x = map(int, line_1.split())\n# C = list(map(int, line_2.split()))\n\nn, x = map(int, raw_input().split())\nC = list(map(int, raw_input().split()))\n\n\nC.sort(reverse=False)\nsum = 0\nfor i in range(0, n):\n    sum += C[i] * x\n    if x > 1:\n        x -= 1\n\nprint(sum)",
        "correct": true,
        "task_id": "1081",
        "depth": 1
    },
    {
        "description": "Anya loves to watch horror movies. In the best traditions of horror, she will be visited by m ghosts tonight. Anya has lots of candles prepared for the visits, each candle can produce light for exactly t seconds. It takes the girl one second to light one candle. More formally, Anya can spend one second to light one candle, then this candle burns for exactly t seconds and then goes out and can no longer be used.\n\nFor each of the m ghosts Anya knows the time at which it comes: the i-th visit will happen wi seconds after midnight, all wi's are distinct. Each visit lasts exactly one second.\n\nWhat is the minimum number of candles Anya should use so that during each visit, at least r candles are burning? Anya can start to light a candle at any time that is integer number of seconds from midnight, possibly, at the time before midnight. That means, she can start to light a candle integer number of seconds before midnight or integer number of seconds after a midnight, or in other words in any integer moment of time.\n\nInput\n\nThe first line contains three integers m, t, r (1 \u2264 m, t, r \u2264 300), representing the number of ghosts to visit Anya, the duration of a candle's burning and the minimum number of candles that should burn during each visit. \n\nThe next line contains m space-separated numbers wi (1 \u2264 i \u2264 m, 1 \u2264 wi \u2264 300), the i-th of them repesents at what second after the midnight the i-th ghost will come. All wi's are distinct, they follow in the strictly increasing order.\n\nOutput\n\nIf it is possible to make at least r candles burn during each visit, then print the minimum number of candles that Anya needs to light for that.\n\nIf that is impossible, print  - 1.\n\nExamples\n\nInput\n\n1 8 3\n10\n\n\nOutput\n\n3\n\n\nInput\n\n2 10 1\n5 8\n\n\nOutput\n\n1\n\n\nInput\n\n1 1 3\n10\n\n\nOutput\n\n-1\n\nNote\n\nAnya can start lighting a candle in the same second with ghost visit. But this candle isn't counted as burning at this visit.\n\nIt takes exactly one second to light up a candle and only after that second this candle is considered burning; it means that if Anya starts lighting candle at moment x, candle is buring from second x + 1 to second x + t inclusively.\n\nIn the first sample test three candles are enough. For example, Anya can start lighting them at the 3-rd, 5-th and 7-th seconds after the midnight.\n\nIn the second sample test one candle is enough. For example, Anya can start lighting it one second before the midnight.\n\nIn the third sample test the answer is  - 1, since during each second at most one candle can burn but Anya needs three candles to light up the room at the moment when the ghost comes.",
        "task_name": "508_C. Anya and Ghosts",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "__author__ = 'default'\ndef TaskC():\n    import sys\n    m, t, r = list(map(int,raw_input().split()))\n    rdl1 = list(map(int,raw_input().split()))\n    used = 0\n    mas = [0]*r\n    if r > t:\n        print(-1)\n        sys.exit()\n    for i in range(len(rdl1)):\n            if rdl1[i]+1 < mas[0]:\n                pass\n            else:\n                for j in range(len(mas)):\n                    if mas[j] < rdl1[i]+1:\n                        mas[j] = rdl1[i]-j+t\n                        used += 1\n                        \n                    else: break \n                mas.sort()\n                \n                    \n    print(used)\nTaskC()",
        "correct": true,
        "task_id": "1082",
        "depth": 2
    },
    {
        "description": "Robot Doc is located in the hall, with n computers stand in a line, numbered from left to right from 1 to n. Each computer contains exactly one piece of information, each of which Doc wants to get eventually. The computers are equipped with a security system, so to crack the i-th of them, the robot needs to collect at least ai any pieces of information from the other computers. Doc can hack the computer only if he is right next to it.\n\nThe robot is assembled using modern technologies and can move along the line of computers in either of the two possible directions, but the change of direction requires a large amount of resources from Doc. Tell the minimum number of changes of direction, which the robot will have to make to collect all n parts of information if initially it is next to computer with number 1.\n\nIt is guaranteed that there exists at least one sequence of the robot's actions, which leads to the collection of all information. Initially Doc doesn't have any pieces of information.\n\nInput\n\nThe first line contains number n (1 \u2264 n \u2264 1000). The second line contains n non-negative integers a1, a2, ..., an (0 \u2264 ai < n), separated by a space. It is guaranteed that there exists a way for robot to collect all pieces of the information.\n\nOutput\n\nPrint a single number \u2014 the minimum number of changes in direction that the robot will have to make in order to collect all n parts of information.\n\nExamples\n\nInput\n\n3\n0 2 0\n\n\nOutput\n\n1\n\n\nInput\n\n5\n4 2 3 0 1\n\n\nOutput\n\n3\n\n\nInput\n\n7\n0 3 1 0 5 2 6\n\n\nOutput\n\n2\n\nNote\n\nIn the first sample you can assemble all the pieces of information in the optimal manner by assembling first the piece of information in the first computer, then in the third one, then change direction and move to the second one, and then, having 2 pieces of information, collect the last piece.\n\nIn the second sample to collect all the pieces of information in the optimal manner, Doc can go to the fourth computer and get the piece of information, then go to the fifth computer with one piece and get another one, then go to the second computer in the same manner, then to the third one and finally, to the first one. Changes of direction will take place before moving from the fifth to the second computer, then from the second to the third computer, then from the third to the first computer.\n\nIn the third sample the optimal order of collecting parts from computers can look like that: 1->3->4->6->2->5->7.",
        "task_name": "583_B. Robot's Task",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = input()\nl = list(map(int, raw_input().split()))\nN = 0; plus = 1;  t = 0\nmp = {}\nwhile(N<n):\n    if t%2==0:\n        for i in range(0,n):\n            if (l[i]<=N) and (not mp.has_key(i)):\n                N+=1\n                mp[i]=True    \n    else:\n        for i in range(n-1,-1,-1):\n            if (l[i]<=N) and (not mp.has_key(i)):\n                N+=1\n                mp[i]= True\n    t+=1\n     \nprint(t-1)",
        "correct": true,
        "task_id": "1083",
        "depth": 2
    },
    {
        "description": "Student Vladislav came to his programming exam completely unprepared as usual. He got a question about some strange algorithm on a graph \u2014 something that will definitely never be useful in real life. He asked a girl sitting next to him to lend him some cheat papers for this questions and found there the following definition:\n\nThe minimum spanning tree T of graph G is such a tree that it contains all the vertices of the original graph G, and the sum of the weights of its edges is the minimum possible among all such trees.\n\nVladislav drew a graph with n vertices and m edges containing no loops and multiple edges. He found one of its minimum spanning trees and then wrote for each edge its weight and whether it is included in the found tree or not. Unfortunately, the piece of paper where the graph was painted is gone and the teacher is getting very angry and demands to see the original graph. Help Vladislav come up with a graph so that the information about the minimum spanning tree remains correct.\n\nInput\n\nThe first line of the input contains two integers n and m (<image>) \u2014 the number of vertices and the number of edges in the graph.\n\nEach of the next m lines describes an edge of the graph and consists of two integers aj and bj (1 \u2264 aj \u2264 109, bj = {0, 1}). The first of these numbers is the weight of the edge and the second number is equal to 1 if this edge was included in the minimum spanning tree found by Vladislav, or 0 if it was not.\n\nIt is guaranteed that exactly n - 1 number {bj} are equal to one and exactly m - n + 1 of them are equal to zero.\n\nOutput\n\nIf Vladislav has made a mistake and such graph doesn't exist, print  - 1.\n\nOtherwise print m lines. On the j-th line print a pair of vertices (uj, vj) (1 \u2264 uj, vj \u2264 n, uj \u2260 vj), that should be connected by the j-th edge. The edges are numbered in the same order as in the input. The graph, determined by these edges, must be connected, contain no loops or multiple edges and its edges with bj = 1 must define the minimum spanning tree. In case there are multiple possible solutions, print any of them.\n\nExamples\n\nInput\n\n4 5\n2 1\n3 1\n4 0\n1 1\n5 0\n\n\nOutput\n\n2 4\n1 4\n3 4\n3 1\n3 2\n\n\nInput\n\n3 3\n1 0\n2 1\n3 1\n\n\nOutput\n\n-1",
        "task_name": "605_B. Lazy Student",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python3\n\nfrom __future__ import division, print_function\n\ndef solver(ifs):\n    n, m = list(map(int, ifs.readline().split()))\n    used = []\n    unused = []\n    for i, _ in enumerate(range(m)):\n        a, b = list(map(int, ifs.readline().split()))\n        if b == 1:\n            used.append( (a, i) )\n        else:\n            unused.append( (a, i) )\n    used.sort()\n    unused.sort()\n    res = [None, ] * m\n    for i, (w, pos) in enumerate(used):\n        res[pos] = (i, i+1)\n    ref = 2\n    counter = 0\n    for w, pos in unused:\n        if ref >= n:\n            print(-1)\n            return None\n        if w >= used[ref-1][1]:\n            res[pos] = (counter, ref)\n            counter += 1\n        else:\n            print(-1)\n            return None\n        if counter >= ref-1:\n            ref += 1\n            counter = 0\n    print(\"\\n\".join(\"%d %d\" % (u+1, v+1) for u, v in res))\n    return None\n\ndef main():\n    import sys\n    if sys.version_info.major == 3:\n        from io import StringIO as StreamIO\n    else:\n         from io import BytesIO as StreamIO\n    \n    with StreamIO(sys.stdin.read()) as ifs, StreamIO() as ofs:\n        _stdout = sys.stdout\n        sys.stdout = ofs\n        solver(ifs)\n        sys.stdout = _stdout\n        sys.stdout.write(ofs.getvalue())\n    return 0\n\nif __name__ == '__main__':\n    main()\n",
        "correct": false,
        "task_id": "1084",
        "depth": 1
    },
    {
        "description": "Watchmen are in a danger and Doctor Manhattan together with his friend Daniel Dreiberg should warn them as soon as possible. There are n watchmen on a plane, the i-th watchman is located at point (xi, yi).\n\nThey need to arrange a plan, but there are some difficulties on their way. As you know, Doctor Manhattan considers the distance between watchmen i and j to be |xi - xj| + |yi - yj|. Daniel, as an ordinary person, calculates the distance using the formula <image>.\n\nThe success of the operation relies on the number of pairs (i, j) (1 \u2264 i < j \u2264 n), such that the distance between watchman i and watchmen j calculated by Doctor Manhattan is equal to the distance between them calculated by Daniel. You were asked to compute the number of such pairs.\n\nInput\n\nThe first line of the input contains the single integer n (1 \u2264 n \u2264 200 000) \u2014 the number of watchmen.\n\nEach of the following n lines contains two integers xi and yi (|xi|, |yi| \u2264 109).\n\nSome positions may coincide.\n\nOutput\n\nPrint the number of pairs of watchmen such that the distance between them calculated by Doctor Manhattan is equal to the distance calculated by Daniel.\n\nExamples\n\nInput\n\n3\n1 1\n7 5\n1 5\n\n\nOutput\n\n2\n\n\nInput\n\n6\n0 0\n0 1\n0 2\n-1 1\n0 1\n1 1\n\n\nOutput\n\n11\n\nNote\n\nIn the first sample, the distance between watchman 1 and watchman 2 is equal to |1 - 7| + |1 - 5| = 10 for Doctor Manhattan and <image> for Daniel. For pairs (1, 1), (1, 5) and (7, 5), (1, 5) Doctor Manhattan and Daniel will calculate the same distances.",
        "task_name": "651_C. Watchmen",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\n\nrows = {}\ncols = {}\nposi = {}\nfor i in range(n):\n\tx, y = [int(t) for t in raw_input().split(' ')]\n\tif(x in rows):\n\t\trows[x] += 1\n\telse:\n\t\trows[x] = 1\n\tif(y in cols):\n\t\tcols[y] += 1\n\telse:\n\t\tcols[y] = 1\n\tif((x, y) in posi):\n\t\tposi[(x, y)] += 1\n\telse:\n\t\tposi[(x, y)] = 1\n\nans = 0\nfor t in rows.keys():\n\tans = ans + (rows[t] - 1) * rows[t] / 2\n\nfor t in cols.keys():\n\tans = ans + (cols[t] - 1) * cols[t] / 2\n\nfor t in posi.keys():\n\tif(posi[t] > 1):\n\t\tans -= (posi[t] - 1) * posi[t] / 2\n\nprint(ans)",
        "correct": true,
        "task_id": "1085",
        "depth": 1
    },
    {
        "description": "Vanya and his friends are walking along the fence of height h and they do not want the guard to notice them. In order to achieve this the height of each of the friends should not exceed h. If the height of some person is greater than h he can bend down and then he surely won't be noticed by the guard. The height of the i-th person is equal to ai.\n\nConsider the width of the person walking as usual to be equal to 1, while the width of the bent person is equal to 2. Friends want to talk to each other while walking, so they would like to walk in a single row. What is the minimum width of the road, such that friends can walk in a row and remain unattended by the guard?\n\nInput\n\nThe first line of the input contains two integers n and h (1 \u2264 n \u2264 1000, 1 \u2264 h \u2264 1000) \u2014 the number of friends and the height of the fence, respectively.\n\nThe second line contains n integers ai (1 \u2264 ai \u2264 2h), the i-th of them is equal to the height of the i-th person.\n\nOutput\n\nPrint a single integer \u2014 the minimum possible valid width of the road.\n\nExamples\n\nInput\n\n3 7\n4 5 14\n\n\nOutput\n\n4\n\n\nInput\n\n6 1\n1 1 1 1 1 1\n\n\nOutput\n\n6\n\n\nInput\n\n6 5\n7 6 8 9 10 5\n\n\nOutput\n\n11\n\nNote\n\nIn the first sample, only person number 3 must bend down, so the required width is equal to 1 + 1 + 2 = 4.\n\nIn the second sample, all friends are short enough and no one has to bend, so the width 1 + 1 + 1 + 1 + 1 + 1 = 6 is enough.\n\nIn the third sample, all the persons have to bend, except the last one. The required minimum width of the road is equal to 2 + 2 + 2 + 2 + 2 + 1 = 11.",
        "task_name": "677_A. Vanya and Fence",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def vanya(numberOfFriends, heightOfWall, heightArray):\n    if len(heightArray) == numberOfFriends:\n        widthCount=0\n        for i in heightArray:\n            if i <= heightOfWall:\n                widthCount+=1\n            else:\n                widthCount+=2\n    return widthCount",
        "correct": false,
        "task_id": "1086",
        "depth": 1
    },
    {
        "description": "Johnny has a younger sister Anne, who is very clever and smart. As she came home from the kindergarten, she told his brother about the task that her kindergartener asked her to solve. The task was just to construct a triangle out of four sticks of different colours. Naturally, one of the sticks is extra. It is not allowed to break the sticks or use their partial length. Anne has perfectly solved this task, now she is asking Johnny to do the same.\n\nThe boy answered that he would cope with it without any difficulty. However, after a while he found out that different tricky things can occur. It can happen that it is impossible to construct a triangle of a positive area, but it is possible to construct a degenerate triangle. It can be so, that it is impossible to construct a degenerate triangle even. As Johnny is very lazy, he does not want to consider such a big amount of cases, he asks you to help him.\n\nInput\n\nThe first line of the input contains four space-separated positive integer numbers not exceeding 100 \u2014 lengthes of the sticks.\n\nOutput\n\nOutput TRIANGLE if it is possible to construct a non-degenerate triangle. Output SEGMENT if the first case cannot take place and it is possible to construct a degenerate triangle. Output IMPOSSIBLE if it is impossible to construct any triangle. Remember that you are to use three sticks. It is not allowed to break the sticks or use their partial length.\n\nExamples\n\nInput\n\n4 2 1 3\n\n\nOutput\n\nTRIANGLE\n\n\nInput\n\n7 2 2 4\n\n\nOutput\n\nSEGMENT\n\n\nInput\n\n3 5 9 1\n\n\nOutput\n\nIMPOSSIBLE",
        "task_name": "6_A. Triangle",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\nimport sys\ninput = sys.stdin\noutput = sys.stdout\n\nfrom itertools import combinations\n\ndef compose_geom(t):\n    a,b,c = t\n    D2 = [a+b,a+c,b+c]\n    for d2 in D2:\n        for d in t:\n            if d2 == d:\n                return 'SEGMENT'\n            elif d2 < d:\n                return None\n    return 'TRIANGLE'\n\ndef solve(D):\n    for t in combinations(D,3):\n        r = compose_geom(t)\n        if r is not None:\n            return r\n    return 'IMPOSSIBLE'\n\ndef numbers_from_line(d=' '):\n    return [int(s) for s in input.readline().strip().split(d) if len(s.strip())>0]\n\nD = numbers_from_line()\n\na = solve(D)\noutput.write('%s\\n' % a)\n",
        "correct": false,
        "task_id": "1087",
        "depth": 2
    },
    {
        "description": "Recently Irina arrived to one of the most famous cities of Berland \u2014 the Berlatov city. There are n showplaces in the city, numbered from 1 to n, and some of them are connected by one-directional roads. The roads in Berlatov are designed in a way such that there are no cyclic routes between showplaces.\n\nInitially Irina stands at the showplace 1, and the endpoint of her journey is the showplace n. Naturally, Irina wants to visit as much showplaces as she can during her journey. However, Irina's stay in Berlatov is limited and she can't be there for more than T time units.\n\nHelp Irina determine how many showplaces she may visit during her journey from showplace 1 to showplace n within a time not exceeding T. It is guaranteed that there is at least one route from showplace 1 to showplace n such that Irina will spend no more than T time units passing it.\n\nInput\n\nThe first line of the input contains three integers n, m and T (2 \u2264 n \u2264 5000, 1 \u2264 m \u2264 5000, 1 \u2264 T \u2264 109) \u2014 the number of showplaces, the number of roads between them and the time of Irina's stay in Berlatov respectively.\n\nThe next m lines describes roads in Berlatov. i-th of them contains 3 integers ui, vi, ti (1 \u2264 ui, vi \u2264 n, ui \u2260 vi, 1 \u2264 ti \u2264 109), meaning that there is a road starting from showplace ui and leading to showplace vi, and Irina spends ti time units to pass it. It is guaranteed that the roads do not form cyclic routes.\n\nIt is guaranteed, that there is at most one road between each pair of showplaces.\n\nOutput\n\nPrint the single integer k (2 \u2264 k \u2264 n) \u2014 the maximum number of showplaces that Irina can visit during her journey from showplace 1 to showplace n within time not exceeding T, in the first line.\n\nPrint k distinct integers in the second line \u2014 indices of showplaces that Irina will visit on her route, in the order of encountering them.\n\nIf there are multiple answers, print any of them.\n\nExamples\n\nInput\n\n4 3 13\n1 2 5\n2 3 7\n2 4 8\n\n\nOutput\n\n3\n1 2 4 \n\n\nInput\n\n6 6 7\n1 2 2\n1 3 3\n3 6 3\n2 4 2\n4 6 2\n6 5 1\n\n\nOutput\n\n4\n1 2 4 6 \n\n\nInput\n\n5 5 6\n1 3 3\n3 5 3\n1 2 2\n2 4 3\n4 5 2\n\n\nOutput\n\n3\n1 3 5 ",
        "task_name": "721_C. Journey",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import Queue\n\nnum, m, t = [int(i) for i in raw_input().split(' ')]\nedges = [[] for i in range(num + 1)]\nfor i in range(m):\n    src, dst, weight = [int(i) for i in raw_input().split(' ')]\n    edges[src].append((dst, weight))\n\nres = [[(-1, \":(\") for j in range(m)] for i in range(num)]\nres[0][1] = (1, [1])\nqueue = Queue.PriorityQueue()\n\nqueue.put((1, 1, t, [1]))\nwhile not queue.empty():\n    cur = queue.get()\n    if res[cur[0] - 1][cur[1] - 1][0] > cur[2]:\n        continue\n    else:\n        res[cur[0] - 1][cur[1] - 1] = (cur[2], cur[3])\n\n    nxt = [(edge[0], cur[1] + 1, cur[2] - edge[1], cur[3] + [edge[0]]) for edge in edges[cur[0]]]\n    for n in nxt:\n        if n[2] < 0:\n            continue\n        queue.put(n)\nfinal = ()\nfor i in res[num - 1]:\n    if i[0] >= 0:\n        final = i\n\nprint(final[0] + 1)\nprint(' '.join([str(x) for x in final[1]]))\n   \t \t\t   \t \t\t\t\t\t  \t \t\t\t  \t   \t",
        "correct": false,
        "task_id": "1088",
        "depth": 2
    },
    {
        "description": "Vladik is a competitive programmer. This year he is going to win the International Olympiad in Informatics. But it is not as easy as it sounds: the question Vladik face now is to find the cheapest way to get to the olympiad.\n\nVladik knows n airports. All the airports are located on a straight line. Each airport has unique id from 1 to n, Vladik's house is situated next to the airport with id a, and the place of the olympiad is situated next to the airport with id b. It is possible that Vladik's house and the place of the olympiad are located near the same airport. \n\nTo get to the olympiad, Vladik can fly between any pair of airports any number of times, but he has to start his route at the airport a and finish it at the airport b.\n\nEach airport belongs to one of two companies. The cost of flight from the airport i to the airport j is zero if both airports belong to the same company, and |i - j| if they belong to different companies.\n\nPrint the minimum cost Vladik has to pay to get to the olympiad.\n\nInput\n\nThe first line contains three integers n, a, and b (1 \u2264 n \u2264 105, 1 \u2264 a, b \u2264 n) \u2014 the number of airports, the id of the airport from which Vladik starts his route and the id of the airport which he has to reach. \n\nThe second line contains a string with length n, which consists only of characters 0 and 1. If the i-th character in this string is 0, then i-th airport belongs to first company, otherwise it belongs to the second.\n\nOutput\n\nPrint single integer \u2014 the minimum cost Vladik has to pay to get to the olympiad.\n\nExamples\n\nInput\n\n4 1 4\n1010\n\n\nOutput\n\n1\n\nInput\n\n5 5 2\n10110\n\n\nOutput\n\n0\n\nNote\n\nIn the first example Vladik can fly to the airport 2 at first and pay |1 - 2| = 1 (because the airports belong to different companies), and then fly from the airport 2 to the airport 4 for free (because the airports belong to the same company). So the cost of the whole flight is equal to 1. It's impossible to get to the olympiad for free, so the answer is equal to 1. \n\nIn the second example Vladik can fly directly from the airport 5 to the airport 2, because they belong to the same company.",
        "task_name": "743_A. Vladik and flights",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nn, s, f = map(int, stdin.readline().split())\nnumbers = list(map(int, list(stdin.readline().strip())))\ncnt = [0 for i in range(n)]\ns -= 1\nf -= 1\n\ns, f = min(s, f), max(s, f)\n\nif numbers[0] == numbers[s]:\n    cnt[0] = 1\n    \nfor i in range(1, n):\n    if numbers[i] == numbers[s]:\n        cnt[i] = cnt[i - 1] + 1\n    else:\n        cnt[i] = cnt[i - 1]\n\nans = f - s\nif numbers[s] != numbers[f]:\n    l = -1\n    r = n\n    while (r > l + 1):\n        m = (r + l) // 2\n        if cnt[m] > cnt[f]:\n            r = m\n        else:\n            l = m\n       \n    \n    l = -1  \n    r = n\n    while (r > l + 1):\n        m = (r + l) // 2\n        if cnt[m] >= cnt[f]:\n            r = m\n        else:\n            l = m\n            \n    if r != n:\n        ans = min(ans, f - r)\nelse:\n    ans = 0\n    \nstdout.write(str(ans))",
        "correct": false,
        "task_id": "1089",
        "depth": 1
    },
    {
        "description": "Mahmoud wrote a message s of length n. He wants to send it as a birthday present to his friend Moaz who likes strings. He wrote it on a magical paper but he was surprised because some characters disappeared while writing the string. That's because this magical paper doesn't allow character number i in the English alphabet to be written on it in a string of length more than ai. For example, if a1 = 2 he can't write character 'a' on this paper in a string of length 3 or more. String \"aa\" is allowed while string \"aaa\" is not.\n\nMahmoud decided to split the message into some non-empty substrings so that he can write every substring on an independent magical paper and fulfill the condition. The sum of their lengths should be n and they shouldn't overlap. For example, if a1 = 2 and he wants to send string \"aaa\", he can split it into \"a\" and \"aa\" and use 2 magical papers, or into \"a\", \"a\" and \"a\" and use 3 magical papers. He can't split it into \"aa\" and \"aa\" because the sum of their lengths is greater than n. He can split the message into single string if it fulfills the conditions.\n\nA substring of string s is a string that consists of some consecutive characters from string s, strings \"ab\", \"abc\" and \"b\" are substrings of string \"abc\", while strings \"acb\" and \"ac\" are not. Any string is a substring of itself.\n\nWhile Mahmoud was thinking of how to split the message, Ehab told him that there are many ways to split it. After that Mahmoud asked you three questions: \n\n  * How many ways are there to split the string into substrings such that every substring fulfills the condition of the magical paper, the sum of their lengths is n and they don't overlap? Compute the answer modulo 109 + 7. \n  * What is the maximum length of a substring that can appear in some valid splitting? \n  * What is the minimum number of substrings the message can be spit in? \n\n\n\nTwo ways are considered different, if the sets of split positions differ. For example, splitting \"aa|a\" and \"a|aa\" are considered different splittings of message \"aaa\".\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 103) denoting the length of the message.\n\nThe second line contains the message s of length n that consists of lowercase English letters.\n\nThe third line contains 26 integers a1, a2, ..., a26 (1 \u2264 ax \u2264 103) \u2014 the maximum lengths of substring each letter can appear in.\n\nOutput\n\nPrint three lines.\n\nIn the first line print the number of ways to split the message into substrings and fulfill the conditions mentioned in the problem modulo 109 + 7.\n\nIn the second line print the length of the longest substring over all the ways.\n\nIn the third line print the minimum number of substrings over all the ways.\n\nExamples\n\nInput\n\n3\naab\n2 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\nOutput\n\n3\n2\n2\n\n\nInput\n\n10\nabcdeabcde\n5 5 5 5 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\nOutput\n\n401\n4\n3\n\nNote\n\nIn the first example the three ways to split the message are: \n\n  * a|a|b\n  * aa|b\n  * a|ab\n\n\n\nThe longest substrings are \"aa\" and \"ab\" of length 2.\n\nThe minimum number of substrings is 2 in \"a|ab\" or \"aa|b\".\n\nNotice that \"aab\" is not a possible splitting because the letter 'a' appears in a substring of length 3, while a1 = 2.",
        "task_name": "766_C. Mahmoud and a Message",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function;\nn=input();\nstr=raw_input();\narr=raw_input().split();\narr=map(eval,arr);\n\nMOD=1e9+7;\ndp=[0]*3200;\ndp[0]=1;\nlastMatch=[0]*3200;\nfor i in range(len(lastMatch)) :\n\tlastMatch[i]=i;\nmaxSubLen=0;\nfor i in range(1,len(str)+1) :\n\tj=1;\n\tk=arr[ord(str[i-1])-ord('a')];\n\twhile j<=k and i-j>=0 :\n\t\tmaxSubLen=max(j,maxSubLen);\n\t\tdp[i]=(dp[i]+dp[i-j])%MOD;\n\t\tt=i-j-1;\n\t\tlastMatch[t+1]=max(lastMatch[t+1],i-1);\n\t\tt=t if t>0 else 0;\n\t\tk=min(k,arr[ord(str[t])-ord('a')]);\n\t\tj+=1;\t\nlastIndex=0;\nlastStrIndex=len(str)-1;\nsubNum=0;\nwhile lastIndex!=lastStrIndex :\n\tsubNum+=1;\n\tif lastIndex==lastMatch[lastIndex] :\n\t\tlastIndex+=1;\n\telse :\n\t\tlastIndex=lastMatch[lastIndex];\n\nprint(dp[len(str)],maxSubLen,subNum,sep='\\n');\n",
        "correct": false,
        "task_id": "1090",
        "depth": 2
    },
    {
        "description": "You are given a text of single-space separated words, consisting of small and capital Latin letters.\n\nVolume of the word is number of capital letters in the word. Volume of the text is maximum volume of all words in the text.\n\nCalculate the volume of the given text.\n\nInput\n\nThe first line contains one integer number n (1 \u2264 n \u2264 200) \u2014 length of the text.\n\nThe second line contains text of single-space separated words s1, s2, ..., si, consisting only of small and capital Latin letters.\n\nOutput\n\nPrint one integer number \u2014 volume of text.\n\nExamples\n\nInput\n\n7\nNonZERO\n\n\nOutput\n\n5\n\n\nInput\n\n24\nthis is zero answer text\n\n\nOutput\n\n0\n\n\nInput\n\n24\nHarbour Space University\n\n\nOutput\n\n1\n\nNote\n\nIn the first example there is only one word, there are 5 capital letters in it.\n\nIn the second example all of the words contain 0 capital letters.",
        "task_name": "837_A. Text Volume",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "raw_input()\nl=raw_input().split()\nm=0\nfor i in l :\n    s=0\n    for j in i:\n        if j.isupper() :\n              s+=1\n    m=max(s,m)\n        \nprint(m)\n        \n",
        "correct": true,
        "task_id": "1092",
        "depth": 2
    },
    {
        "description": "You are given a sequence of positive integers a1, a2, ..., an. \n\nWhile possible, you perform the following operation: find a pair of equal consecutive elements. If there are more than one such pair, find the leftmost (with the smallest indices of elements). If the two integers are equal to x, delete both and insert a single integer x + 1 on their place. This way the number of elements in the sequence is decreased by 1 on each step. \n\nYou stop performing the operation when there is no pair of equal consecutive elements.\n\nFor example, if the initial sequence is [5, 2, 1, 1, 2, 2], then after the first operation you get [5, 2, 2, 2, 2], after the second \u2014 [5, 3, 2, 2], after the third \u2014 [5, 3, 3], and finally after the fourth you get [5, 4]. After that there are no equal consecutive elements left in the sequence, so you stop the process.\n\nDetermine the final sequence after you stop performing the operation.\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 2\u00b7105) \u2014 the number of elements in the sequence.\n\nThe second line contains the sequence of integers a1, a2, ..., an (1 \u2264 ai \u2264 109).\n\nOutput\n\nIn the first line print a single integer k \u2014 the number of elements in the sequence after you stop performing the operation. \n\nIn the second line print k integers \u2014 the sequence after you stop performing the operation.\n\nExamples\n\nInput\n\n6\n5 2 1 1 2 2\n\n\nOutput\n\n2\n5 4 \n\nInput\n\n4\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n1\n1000000002 \n\nInput\n\n7\n4 10 22 11 12 5 6\n\n\nOutput\n\n7\n4 10 22 11 12 5 6 \n\nNote\n\nThe first example is described in the statements.\n\nIn the second example the initial sequence is [1000000000, 1000000000, 1000000000, 1000000000]. After the first operation the sequence is equal to [1000000001, 1000000000, 1000000000]. After the second operation the sequence is [1000000001, 1000000001]. After the third operation the sequence is [1000000002].\n\nIn the third example there are no two equal consecutive elements initially, so the sequence does not change.",
        "task_name": "926_E. Merge Equal Elements",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\na = []\nb = map(int,raw_input().split())\nj = 0\nt=1\nwhile (t==1):\n    t=0\n    a=b\n    b=[]\n    j=0\n    while (j<(len(a)-1)):\n        if a[j]==a[j+1] and t!=1:\n            b.append(a[j]+1)\n            j+=1\n            t=1\n        else:\n            b.append(a[j])\n        j+=1\n    \n    if j<len(a):\n        b.append(a[j])\n    #print(b)\n\nst = ''\nfor bb in b:\n    st += str(bb)+' '\n\nprint(st)",
        "correct": false,
        "task_id": "1093",
        "depth": 2
    },
    {
        "description": "How many integer sequences A_1,A_2,\\ldots,A_N of length N satisfy all of the following conditions?\n\n* 0 \\leq A_i \\leq 9\n* There exists some i such that A_i=0 holds.\n* There exists some i such that A_i=9 holds.\n\n\n\nThe answer can be very large, so output it modulo 10^9 + 7.\n\nConstraints\n\n* 1 \\leq N \\leq 10^6\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\n\n\nOutput\n\nPrint the answer modulo 10^9 + 7.\n\nExamples\n\nInput\n\n2\n\n\nOutput\n\n2\n\n\nInput\n\n1\n\n\nOutput\n\n0\n\n\nInput\n\n869121\n\n\nOutput\n\n2511445",
        "task_name": "p02554 AtCoder Beginner Contest 178 - Ubiquity",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=input()\nc=0\nf1=1;f2=1;f3=1\nm=10**9+7\nfor i in range(n):\n  f1*=10;f2*=9;f3*=8\n  f1%=m;f2%=m;f3%=m\nprint (f1-2*f2+f3)%m\n  \n",
        "correct": true,
        "task_id": "1094",
        "depth": 1
    },
    {
        "description": "There are N blocks arranged in a row. Let us paint these blocks.\n\nWe will consider two ways to paint the blocks different if and only if there is a block painted in different colors in those two ways.\n\nFind the number of ways to paint the blocks under the following conditions:\n\n* For each block, use one of the M colors, Color 1 through Color M, to paint it. It is not mandatory to use all the colors.\n* There may be at most K pairs of adjacent blocks that are painted in the same color.\n\n\n\nSince the count may be enormous, print it modulo 998244353.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N, M \\leq 2 \\times 10^5\n* 0 \\leq K \\leq N - 1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K\n\n\nOutput\n\nPrint the answer.\n\nExamples\n\nInput\n\n3 2 1\n\n\nOutput\n\n6\n\n\nInput\n\n100 100 0\n\n\nOutput\n\n73074801\n\n\nInput\n\n60522 114575 7559\n\n\nOutput\n\n479519525",
        "task_name": "p02685 AtCoder Beginner Contest 167 - Colorful Blocks",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout, setrecursionlimit\nfrom functools import lru_cache\n\nrl = lambda: stdin.readline()\nrll = lambda: stdin.readline().split()\nrli = lambda: map(int, stdin.readline().split())\n\nINF, NINF = float('inf'), float('-inf')\n\ndef binom_tables(n, q):\n\tfact = [1 for _ in range(n + 1)]\n\tinv = [1 for _ in range(n + 1)]\n\tfor i in range(1, n+1):\n\t\tfact[i] = (fact[i-1] * i) % q\n\t\tinv[i] = pow(fact[i], q-2, q)\n\treturn fact, inv\n\ndef binom(n, k, q, F, I):\n\treturn (F[n]*((I[k]*I[n-k])%q))%q\n\ndef main():\n\tMOD = 998244353\n\tn, m, k = rli()\n\tF, I = binom_tables(n, MOD)\n\tans = 0\n\tfor i in range(n-k, n+1):\n\t\tans += (binom(n-1, i-1, MOD, F, I)*m*pow(m-1, i-1, MOD))%MOD\n\tprint(ans % MOD)\n\nif __name__ == \"__main__\":\n\tmain()",
        "correct": false,
        "task_id": "1095",
        "depth": 1
    },
    {
        "description": "Given are a sequence A= {a_1,a_2,......a_N} of N positive even numbers, and an integer M.\n\nLet a semi-common multiple of A be a positive integer X that satisfies the following condition for every k (1 \\leq k \\leq N):\n\n* There exists a non-negative integer p such that X= a_k \\times (p+0.5).\n\n\n\nFind the number of semi-common multiples of A among the integers between 1 and M (inclusive).\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^9\n* 2 \\leq a_i \\leq 10^9\n* a_i is an even number.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1 a_2 ... a_N\n\n\nOutput\n\nPrint the number of semi-common multiples of A among the integers between 1 and M (inclusive).\n\nExamples\n\nInput\n\n2 50\n6 10\n\n\nOutput\n\n2\n\n\nInput\n\n3 100\n14 22 40\n\n\nOutput\n\n0\n\n\nInput\n\n5 1000000000\n6 6 2 6 2\n\n\nOutput\n\n166666667",
        "task_name": "p02814 AtCoder Beginner Contest 150 - Semi Common Multiple",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "'''input\n5 1000000000\n6 6 2 6 2\n'''\n# A coding delight\nfrom sys import stdin, stdout\nimport gc\nfrom copy import deepcopy\nfrom itertools import permutations\ngc.disable()\ninput = stdin.readline\nimport math\n\n\ndef myfunc(num):\n\treturn num//2\n\ndef gcd(a, b):\n\tif b == 0:\n\t\treturn a\n\treturn gcd(b, a%b)\n\t\n\ndef find_lcm(num1, num2): \n    return (num1 * num2) // gcd(num1, num2)\n\ndef lcm(l):\n\tif len(l) == 1:\n\t\treturn l[0]\n\tnum1 = l[0] \n\tnum2 = l[1] \n\tlcm = find_lcm(num1, num2) \n\t  \n\tfor i in range(2, len(l)): \n\t    lcm = find_lcm(lcm, l[i])\n\treturn lcm\n# main starts\nn, m = list(map(int, input().split()))\narr = list(map(int, input().split()))\narr = list(map(myfunc, arr))\nnum = lcm(arr)\n\n\naux = num\nwhile aux % 2 == 0:\n\taux //= 2\n\nif aux == 0:\n\tnum *= 3\n\n# print(num)\nif num > m:\n\tprint(0)\nelse:\n\tk = m//num\n\tif k % 2 == 0:\n\t\tprint(k//2)\n\telse:\n\t\tprint(k//2 + 1)\n\t\n",
        "correct": false,
        "task_id": "1096",
        "depth": 1
    },
    {
        "description": "Given are a prime number p and a sequence of p integers a_0, \\ldots, a_{p-1} consisting of zeros and ones.\n\nFind a polynomial of degree at most p-1, f(x) = b_{p-1} x^{p-1} + b_{p-2} x^{p-2} + \\ldots + b_0, satisfying the following conditions:\n\n* For each i (0 \\leq i \\leq p-1), b_i is an integer such that 0 \\leq b_i \\leq p-1.\n* For each i (0 \\leq i \\leq p-1), f(i) \\equiv a_i \\pmod p.\n\nConstraints\n\n* 2 \\leq p \\leq 2999\n* p is a prime number.\n* 0 \\leq a_i \\leq 1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\np\na_0 a_1 \\ldots a_{p-1}\n\n\nOutput\n\nPrint b_0, b_1, \\ldots, b_{p-1} of a polynomial f(x) satisfying the conditions, in this order, with spaces in between.\n\nIt can be proved that a solution always exists. If multiple solutions exist, any of them will be accepted.\n\nExamples\n\nInput\n\n2\n1 0\n\n\nOutput\n\n1 1\n\n\nInput\n\n3\n0 0 0\n\n\nOutput\n\n0 0 0\n\n\nInput\n\n5\n0 1 0 1 0\n\n\nOutput\n\n0 2 0 1 3",
        "task_name": "p02950 AtCoder Beginner Contest 137 - Polynomial Construction",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env pypy\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom __builtin__ import xrange as range\nfrom cStringIO import StringIO\nfrom io import IOBase\n\nimport __pypy__\n\n\ndef mcrt(A, b, p):\n    \"\"\"returns x s.t. Ax = b mod p\"\"\"\n    x = [0] * len(A)\n\n    m = 1\n    for i, Ai in enumerate(A):\n        tot = sum(Ai[k] * x[k] for k in range(len(A)))\n        tmp = (pow(Ai[-1], p - 2, p) * (b[i] - tot)) % p\n        x[i] += tmp\n        m *= p\n\n    return [xi % p for xi in x]\n\n\ndef main():\n    p = int(input())\n    b = [int(x) for x in input().split()]\n    A = [[0] * (p - 1) for _ in range(p - 1)]\n    for i, Ai in enumerate(A):\n        i += 1\n        x = i\n        for j in range(p - 1):\n            Ai[j] = x\n            x *= i\n            x %= p\n\n    print(*([b[0]] + mcrt(A, [b[i] - b[0] for i in range(1, p)], p)))\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastI(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = StringIO()\n        self.newlines = 0\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(\"\\n\") + (not b)\n            ptr = self._buffer.tell()\n            self._buffer.seek(0,\n                              2), self._buffer.write(b), self._buffer.seek(ptr)\n        self.newlines -= 1\n        return self._buffer.readline()\n\n\nclass FastO(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = __pypy__.builders.StringBuilder()\n        self.write = lambda s: self._buffer.append(s)\n\n    def flush(self):\n        os.write(self._fd, self._buffer.build())\n        self._buffer = __pypy__.builders.StringBuilder()\n\n\ndef print(*args, **kwargs):\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nsys.stdin, sys.stdout = FastI(sys.stdin), FastO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": false,
        "task_id": "1097",
        "depth": 2
    },
    {
        "description": "You are given a string S consisting of uppercase English letters. Find the length of the longest ACGT string that is a substring (see Notes) of S.\n\nHere, a ACGT string is a string that contains no characters other than `A`, `C`, `G` and `T`.\n\nConstraints\n\n* S is a string of length between 1 and 10 (inclusive).\n* Each character in S is an uppercase English letter.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\n\n\nOutput\n\nPrint the length of the longest ACGT string that is a substring of S.\n\nExamples\n\nInput\n\nATCODER\n\n\nOutput\n\n3\n\n\nInput\n\nHATAGAYA\n\n\nOutput\n\n5\n\n\nInput\n\nSHINJUKU\n\n\nOutput\n\n0",
        "task_name": "p03086 AtCoder Beginner Contest 122 - ATCoder",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/python\n# -*- Coding: utf-8 -*-\n\nsample = ''\nsample = str(raw_input())\ndef main(sample):\n    arr = []\n    length = 0\n    ans = 0\n    for s in sample:\n        arr.append(s)\n    for t in arr:\n        if t == 'A' or t == 'C' or t == 'G' or t == 'T':\n            length += 1\n        elif ans < length:\n            ans = length\n    print(ans)\n    return True\n\nmain(sample)\n",
        "correct": false,
        "task_id": "1098",
        "depth": 1
    },
    {
        "description": "You are given a string S of length N and another string T of length M. These strings consist of lowercase English letters.\n\nA string X is called a good string when the following conditions are all met:\n\n* Let L be the length of X. L is divisible by both N and M.\n* Concatenating the 1-st, (\\frac{L}{N}+1)-th, (2 \\times \\frac{L}{N}+1)-th, ..., ((N-1)\\times\\frac{L}{N}+1)-th characters of X, without changing the order, results in S.\n* Concatenating the 1-st, (\\frac{L}{M}+1)-th, (2 \\times \\frac{L}{M}+1)-th, ..., ((M-1)\\times\\frac{L}{M}+1)-th characters of X, without changing the order, results in T.\n\n\n\nDetermine if there exists a good string. If it exists, find the length of the shortest such string.\n\nConstraints\n\n* 1 \\leq N,M \\leq 10^5\n* S and T consist of lowercase English letters.\n* |S|=N\n* |T|=M\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nS\nT\n\n\nOutput\n\nIf a good string does not exist, print `-1`; if it exists, print the length of the shortest such string.\n\nExamples\n\nInput\n\n3 2\nacp\nae\n\n\nOutput\n\n6\n\n\nInput\n\n6 3\nabcdef\nabc\n\n\nOutput\n\n-1\n\n\nInput\n\n15 9\ndnsusrayukuaiia\ndujrunuma\n\n\nOutput\n\n45",
        "task_name": "p03231 AtCoder Grand Contest 028 - Two Abbreviations",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N, M = map(int, raw_input().split())\nS = [i for i in raw_input()]\nT = [i for i in raw_input()]\n\ndata = []\nfor i in range(1, N*M):\n    ma = max([N, M])\n    mi = min([N, M])\n\n    if i * ma % mi == 0:\n        data.append(i * ma)\n    if i * ma > N*M:\n        break\n\nfor d in data:\n    slist = [j * d / N + 1  for j in range(d)][:N]\n    tlist = [j * d / M + 1  for j in range(d)][:M]\n\n    result = []\n    for j in [j for j in slist if j in tlist]:\n        result.append(S[slist.index(j)] == T[tlist.index(j)])\n    if all(result):\n        print(d)\n        exit(0)\n\nprint(-1)\n",
        "correct": false,
        "task_id": "1099",
        "depth": 2
    },
    {
        "description": "When l is an odd number, the median of l numbers a_1, a_2, ..., a_l is the (\\frac{l+1}{2})-th largest value among a_1, a_2, ..., a_l.\n\nYou are given N numbers X_1, X_2, ..., X_N, where N is an even number. For each i = 1, 2, ..., N, let the median of X_1, X_2, ..., X_N excluding X_i, that is, the median of X_1, X_2, ..., X_{i-1}, X_{i+1}, ..., X_N be B_i.\n\nFind B_i for each i = 1, 2, ..., N.\n\nConstraints\n\n* 2 \\leq N \\leq 200000\n* N is even.\n* 1 \\leq X_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nX_1 X_2 ... X_N\n\n\nOutput\n\nPrint N lines. The i-th line should contain B_i.\n\nExamples\n\nInput\n\n4\n2 4 4 3\n\n\nOutput\n\n4\n3\n3\n4\n\n\nInput\n\n2\n1 2\n\n\nOutput\n\n2\n1\n\n\nInput\n\n6\n5 5 4 4 3 3\n\n\nOutput\n\n4\n4\n4\n4\n4\n4",
        "task_name": "p03381 AtCoder Regular Contest 095 - Many Medians",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N = int(raw_input())\nX = map(int, raw_input().split())\n\nfor i in range(N):\n    print(sorted(X[:i] + X[i+1:])[(N-1)/2])\n",
        "correct": false,
        "task_id": "1100",
        "depth": 1
    },
    {
        "description": "Aizu is famous for its buckwheat. There are many people who make buckwheat noodles by themselves.\n\nOne day, you went shopping to buy buckwheat flour. You can visit three shops, A, B and C. The amount in a bag and its unit price for each shop is determined by the follows table. Note that it is discounted when you buy buckwheat flour in several bags.\n\n|  Shop A |  Shop B |  Shop C\n---|---|---|---\nAmount in a bag |  200g|  300g|  500g\nUnit price for a bag (nominal cost)|  380 yen |  550 yen |  850 yen\nDiscounted units |  per 5 bags | per 4 bags | per 3 bags\nDiscount rate|  reduced by 20 %|  reduced by 15 %|  reduced by 12 %\n\n\n\nFor example, when you buy 12 bags of flour at shop A, the price is reduced by 20 % for 10 bags, but not for other 2 bags. So, the total amount shall be (380 \u00d7 10) \u00d7 0.8 + 380 \u00d7 2 = 3,800 yen.\n\nWrite a program which reads the amount of flour, and prints the lowest cost to buy them. Note that you should buy the flour of exactly the same amount as the given input.\n\n\n\nInput\n\nThe input consists of multiple datasets. For each dataset, an integer a (500 \u2264 a \u2264 5000, a is divisible by 100) which represents the amount of flour is given in a line.\n\nThe input ends with a line including a zero. Your program should not process for the terminal symbol. The number of datasets does not exceed 50.\n\nOutput\n\nFor each dataset, print an integer which represents the lowest cost.\n\nExample\n\nInput\n\n500\n2200\n0\n\n\nOutput\n\n850\n3390",
        "task_name": "p00106 Discounts of Buckwheat",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\nfrom sys import stdin, exit\n\n\ndef main(readline=stdin.readline):\n    price_table = (\n        0, 0, 380, 550, 760, 850, 1100, 1230, 1400, 1610, 1520, 1950,\n        1870, 2070, 2250, 2244, 2620, 2624, 2794, 3004, 3040, 3344,\n        3390, 3590, 3740, 3764, 4120, 4114, 4314, 4494, 4488, 4864,\n        4868, 5038, 5248, 5284, 5588, 5634, 5834, 5984, 6008, 6364,\n        6358, 6558, 6738, 6732, 7108, 7112, 7282, 7492, 7528\n        )\n    while 1:\n        weight = int(readline())\n        if not weight:\n            exit()\n        print(price_table[weight//100])\n\n\nif __name__ == '__main__':\n    main()",
        "correct": true,
        "task_id": "1102",
        "depth": 1
    },
    {
        "description": "A wise king declared a new calendar. \"Tomorrow shall be the first day of the calendar, that is, the day 1 of the month 1 of the year 1. Each year consists of 10 months, from month 1 through month 10, and starts from a big month. A common year shall start with a big month, followed by small months and big months one after another. Therefore the first month is a big month, the second month is a small month, the third a big month, ..., and the 10th and last month a small one. A big month consists of 20 days and a small month consists of 19 days. However years which are multiples of three, that are year 3, year 6, year 9, and so on, shall consist of 10 big months and no small month.\"\n\nMany years have passed since the calendar started to be used. For celebration of the millennium day (the year 1000, month 1, day 1), a royal lottery is going to be organized to send gifts to those who have lived as many days as the number chosen by the lottery. Write a program that helps people calculate the number of days since their birthdate to the millennium day.\n\nInput\n\nThe input is formatted as follows.\n\n> n\n>  Y1 M1 D1\n>  Y2 M2 D2\n>  ...\n>  Yn Mn Dn\n\nHere, the first line gives the number of datasets as a positive integer n, which is less than or equal to 100. It is followed by n datasets. Each dataset is formatted in a line and gives three positive integers, Yi (< 1000), Mi (\u2264 10), and Di (\u2264 20), that correspond to the year, month and day, respectively, of a person's birthdate in the king's calendar. These three numbers are separated by a space.\n\nOutput\n\nFor the birthdate specified in each dataset, print in a line the number of days from the birthdate, inclusive, to the millennium day, exclusive. Output lines should not contain any character other than this number.\n\nSample Input\n\n\n8\n1 1 1\n344 3 1\n696 5 1\n182 9 5\n998 8 7\n344 2 19\n696 4 19\n999 10 20\n\n\nOutput for the Sample Input\n\n\n196470\n128976\n59710\n160715\n252\n128977\n59712\n1\n\n\n\n\n\n\nExample\n\nInput\n\n8\n1 1 1\n344 3 1\n696 5 1\n182 9 5\n998 8 7\n344 2 19\n696 4 19\n999 10 20\n\n\nOutput\n\n196470\n128976\n59710\n160715\n252\n128977\n59712\n1",
        "task_name": "p00760 Millennium",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nif sys.version_info[0]>=3: raw_input=input\n\nn=int(raw_input())\nfor i in range(0,n):\n\ta=map(int,raw_input())\n\ta[0]-=1;a[1]-=1\n\tprint(196471-a[0]*195-a[0]/3*5-a[1]*20+(a[1]/2 if a[0]%3!=2 else 0)-a[2])",
        "correct": false,
        "task_id": "1103",
        "depth": 1
    },
    {
        "description": "Write a program which manipulates a sequence A = {a0, a1, . . . , an-1} with the following operations:\n\n* find(s, t): report the minimum element in as, as+1, . . . ,at.\n* update(i, x): change ai to x.\n\n\n\nNote that the initial values of ai (i = 0, 1, . . . , n\u22121) are 231-1.\n\nConstraints\n\n* 1 \u2264 n \u2264 100000\n* 1 \u2264 q \u2264 100000\n* If comi is 0, then 0 \u2264 xi < n, 0 \u2264 yi < 231-1.\n* If comi is 1, then 0 \u2264 xi < n, 0 \u2264 yi < n.\n\nInput\n\n\nn q\ncom0 x0 y0\ncom1 x1 y1\n...\ncomq\u22121 xq\u22121 yq\u22121\n\n\nIn the first line, n (the number of elements in A) and q (the number of queries) are given. Then, q queries are given where com represents the type of queries. '0' denotes update(xi, yi) and '1' denotes find(xi, yi).\n\nOutput\n\nFor each find operation, print the minimum element.\n\nExamples\n\nInput\n\n3 5\n0 0 1\n0 1 2\n0 2 3\n1 0 2\n1 1 2\n\n\nOutput\n\n1\n2\n\n\nInput\n\n1 3\n1 0 0\n0 0 5\n1 0 0\n\n\nOutput\n\n2147483647\n5",
        "task_name": "p02345 Range Minimum Query (RMQ)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\nclass RangeMinimumQuery:\n    nmemb = 1\n    size  = 1\n    data  = []\n    def __init__(self, n):\n        self.nmemb = n\n        while self.size < n: self.size *= 2\n        self.data = [0] * (self.size * 2)\n        \n    def __find(self, start, end, id, left, right):\n        if end <= left or right <= start:\n            return 2 ** 31 - 1\n        elif start <= left and right <= end:\n            return self.data[id]\n        else:\n            mid = (left + right) / 2\n            vl = self.__find(start, end, id * 2 + 1, left, mid)\n            vr = self.__find(start, end, id * 2 + 2, mid, right)\n            return min(vl, vr)\n            \n    def find(self, start, end):\n        return self.__find(start, end, 0, 0, self.size)\n        \n    def update(self, pos, value):\n        pos += self.size - 1\n        self.data[pos] = value\n        \n        while(pos > 0):\n            pos = (pos - 1) / 2\n            vl = self.data[pos * 2 + 1]\n            vr = self.data[pos * 2 + 2]\n            self.data[pos] = min(vl, vr)\n            \nif __name__ == \"__main__\":\n    n, q = map(int, raw_input().split())\n    rmq = RangeMinimumQuery(n)\n\n    for i in range(n):\n        rmq.update(i, 2 ** 31 - 1)\n        assert(rmq.find(i, i + 1) == 2 ** 31 - 1)\n        \n    for i in range(q):\n        com, x, y = map(int, raw_input().split())\n        if com == 0:\n            rmq.update(x, y)\n        else:\n            print(rmq.find(x, y + 1))\n    \n            \n            \n        \n            ",
        "correct": true,
        "task_id": "1104",
        "depth": 1
    },
    {
        "description": "There are n slimes in a row. Each slime has an integer value (possibly negative or zero) associated with it.\n\nAny slime can eat its adjacent slime (the closest slime to its left or to its right, assuming that this slime exists). \n\nWhen a slime with a value x eats a slime with a value y, the eaten slime disappears, and the value of the remaining slime changes to x - y.\n\nThe slimes will eat each other until there is only one slime left. \n\nFind the maximum possible value of the last slime.\n\nInput\n\nThe first line of the input contains an integer n (1 \u2264 n \u2264 500 000) denoting the number of slimes.\n\nThe next line contains n integers a_i (-10^9 \u2264 a_i \u2264 10^9), where a_i is the value of i-th slime.\n\nOutput\n\nPrint an only integer \u2014 the maximum possible value of the last slime.\n\nExamples\n\nInput\n\n4\n2 1 2 1\n\n\nOutput\n\n4\n\nInput\n\n5\n0 -1 -1 -1 -1\n\n\nOutput\n\n4\n\nNote\n\nIn the first example, a possible way of getting the last slime with value 4 is:\n\n  * Second slime eats the third slime, the row now contains slimes 2, -1, 1\n  * Second slime eats the third slime, the row now contains slimes 2, -2\n  * First slime eats the second slime, the row now contains 4 \n\n\n\nIn the second example, the first slime can keep eating slimes to its right to end up with a value of 4.",
        "task_name": "1038_D. Slime",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nn, a = int(input()), rints()\nneg = len(list(filter(lambda x: x < 0, a)))\npos = n - neg\n\nif neg:\n    print(sum(abs(x) for x in a))\nelse:\n    ans, s = 0, sum(a)\n    for i in range(n):\n        if i and a[i] < a[i - 1]:\n            ans = max(ans, s - a[i - 1])\n        elif i < n - 1 and a[i] < a[i + 1]:\n            ans = max(ans, s - a[i + 1])\n\n    print(ans)\n",
        "correct": false,
        "task_id": "1105",
        "depth": 1
    },
    {
        "description": "You are given an array of n integers: a_1, a_2, \u2026, a_n. Your task is to find some non-zero integer d (-10^3 \u2264 d \u2264 10^3) such that, after each number in the array is divided by d, the number of positive numbers that are presented in the array is greater than or equal to half of the array size (i.e., at least \u2308n/2\u2309). Note that those positive numbers do not need to be an integer (e.g., a 2.5 counts as a positive number). If there are multiple values of d that satisfy the condition, you may print any of them. In case that there is no such d, print a single integer 0.\n\nRecall that \u2308 x \u2309 represents the smallest integer that is not less than x and that zero (0) is neither positive nor negative.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array.\n\nThe second line contains n space-separated integers a_1, a_2, \u2026, a_n (-10^3 \u2264 a_i \u2264 10^3).\n\nOutput\n\nPrint one integer d (-10^3 \u2264 d \u2264 10^3 and d \u2260 0) that satisfies the given condition. If there are multiple values of d that satisfy the condition, you may print any of them. In case that there is no such d, print a single integer 0.\n\nExamples\n\nInput\n\n5\n10 0 -7 2 6\n\nOutput\n\n4\n\nInput\n\n7\n0 0 1 -1 0 0 2\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample, n = 5, so we need at least \u23085/2\u2309 = 3 positive numbers after division. If d = 4, the array after division is [2.5, 0, -1.75, 0.5, 1.5], in which there are 3 positive numbers (namely: 2.5, 0.5, and 1.5).\n\nIn the second sample, there is no valid d, so 0 should be printed.",
        "task_name": "1130_A. Be Positive",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# https://vjudge.net/contest/338364#problem/B\nfrom math import ceil\n\nn = int(input())\nnums = list(map(int, raw_input().split(' ')))\ncond = round(n / 2.0)\npositives = set()\nnegatives = set()\np1 = 0\nn1 = 0\nfor i in nums:\n    if i > 0:\n        p1 += 1\n    if i < 0:\n        n1 += 1\n\nif p1 < cond and n1 < cond:\n    print(0)\nelif p1 >= cond:\n    print(4)\nelse:\n    print(-4)\n\t \t \t\t\t\t  \t   \t\t \t   \t  \t\t\t\t",
        "correct": true,
        "task_id": "1107",
        "depth": 1
    },
    {
        "description": "You are given a sequence of n digits d_1d_2 ... d_{n}. You need to paint all the digits in two colors so that:\n\n  * each digit is painted either in the color 1 or in the color 2; \n  * if you write in a row from left to right all the digits painted in the color 1, and then after them all the digits painted in the color 2, then the resulting sequence of n digits will be non-decreasing (that is, each next digit will be greater than or equal to the previous digit). \n\n\n\nFor example, for the sequence d=914 the only valid coloring is 211 (paint in the color 1 two last digits, paint in the color 2 the first digit). But 122 is not a valid coloring (9 concatenated with 14 is not a non-decreasing sequence).\n\nIt is allowed that either of the two colors is not used at all. Digits painted in the same color are not required to have consecutive positions.\n\nFind any of the valid ways to paint the given sequence of digits or determine that it is impossible to do.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10000) \u2014 the number of test cases in the input.\n\nThe first line of each test case contains an integer n (1 \u2264 n \u2264 2\u22c510^5) \u2014 the length of a given sequence of digits.\n\nThe next line contains a sequence of n digits d_1d_2 ... d_{n} (0 \u2264 d_i \u2264 9). The digits are written in a row without spaces or any other separators. The sequence can start with 0.\n\nIt is guaranteed that the sum of the values \u200b\u200bof n for all test cases in the input does not exceed 2\u22c510^5.\n\nOutput\n\nPrint t lines \u2014 the answers to each of the test cases in the input.\n\nIf there is a solution for a test case, the corresponding output line should contain any of the valid colorings written as a string of n digits t_1t_2 ... t_n (1 \u2264 t_i \u2264 2), where t_i is the color the i-th digit is painted in. If there are several feasible solutions, print any of them.\n\nIf there is no solution, then the corresponding output line should contain a single character '-' (the minus sign).\n\nExample\n\nInput\n\n\n5\n12\n040425524644\n1\n0\n9\n123456789\n2\n98\n3\n987\n\n\nOutput\n\n\n121212211211\n1\n222222222\n21\n-\n\nNote\n\nIn the first test case, d=040425524644. The output t=121212211211 is correct because 0022444 (painted in 1) concatenated with 44556 (painted in 2) is 002244444556 which is a sorted sequence of n given digits.",
        "task_name": "1209_C. Paint the Digits",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function # for PyPy2\nfrom collections import Counter, OrderedDict\nfrom itertools import permutations as perm\nfrom collections import deque\nfrom sys import stdin\nfrom bisect import *\nfrom heapq import *\nimport math\n \ng   = lambda : stdin.readline().strip()\ngl  = lambda : g().split()\ngil = lambda : [int(var) for var in gl()]\ngfl = lambda : [float(var) for var in gl()]\ngcl = lambda : list(g())\ngbs = lambda : [int(var) for var in g()]\nmod = int(1e9)+7\ninf = float(\"inf\")\n\nt, = gil()\n\nfor _ in range(t):\n\t# print()\n\tn, = gil()\n\tval = gbs()\n\tidx = list(xrange(n))\n\tidx.sort(key=lambda x : [val[x], x])\n\t# print(idx) \n\tone = []\n\tto = []\n\n\tfor ix in idx:\n\t\tif ix > (one[-1] if one else -1) and val[ix] <= (val[to[0]] if to else inf):\n\t\t\tone.append(ix)\n\t\telif ix > (to[-1] if to else -1):\n\t\t\tto.append(ix)\n\t\telse:\n\t\t\tbreak\n\n\tif len(one) + len(to) == n:\n\t\t# print(one, to)\n\t\tfor ix in one:\n\t\t\tval[ix] = 1\n\t\tfor ix in to:\n\t\t\tval[ix] = 2\n\t\tfor v in val:\n\t\t\tprint(v, end=\"\")\n\t\tprint()\n\telse:\n\t\t# print(one, to)\n\t\tprint(\"-\")",
        "correct": true,
        "task_id": "1110",
        "depth": 2
    },
    {
        "description": "Suppose there is a h \u00d7 w grid consisting of empty or full cells. Let's make some definitions:\n\n  * r_{i} is the number of consecutive full cells connected to the left side in the i-th row (1 \u2264 i \u2264 h). In particular, r_i=0 if the leftmost cell of the i-th row is empty. \n  * c_{j} is the number of consecutive full cells connected to the top end in the j-th column (1 \u2264 j \u2264 w). In particular, c_j=0 if the topmost cell of the j-th column is empty. \n\n\n\nIn other words, the i-th row starts exactly with r_i full cells. Similarly, the j-th column starts exactly with c_j full cells.\n\n<image> These are the r and c values of some 3 \u00d7 4 grid. Black cells are full and white cells are empty.\n\nYou have values of r and c. Initially, all cells are empty. Find the number of ways to fill grid cells to satisfy values of r and c. Since the answer can be very large, find the answer modulo 1000000007 (10^{9} + 7). In other words, find the remainder after division of the answer by 1000000007 (10^{9} + 7).\n\nInput\n\nThe first line contains two integers h and w (1 \u2264 h, w \u2264 10^{3}) \u2014 the height and width of the grid.\n\nThe second line contains h integers r_{1}, r_{2}, \u2026, r_{h} (0 \u2264 r_{i} \u2264 w) \u2014 the values of r.\n\nThe third line contains w integers c_{1}, c_{2}, \u2026, c_{w} (0 \u2264 c_{j} \u2264 h) \u2014 the values of c.\n\nOutput\n\nPrint the answer modulo 1000000007 (10^{9} + 7).\n\nExamples\n\nInput\n\n\n3 4\n0 3 1\n0 2 3 0\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n1 1\n0\n1\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n19 16\n16 16 16 16 15 15 0 5 0 4 9 9 1 4 4 0 8 16 12\n6 12 19 15 8 6 19 19 14 6 9 16 10 11 15 4\n\n\nOutput\n\n\n797922655\n\nNote\n\nIn the first example, this is the other possible case.\n\n<image>\n\nIn the second example, it's impossible to make a grid to satisfy such r, c values.\n\nIn the third example, make sure to print answer modulo (10^9 + 7).",
        "task_name": "1228_B. Filling the Grid",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    h, w = map(int, input().split())\n    r = [int(i) for i in input().split()]\n    c = [int(i) for i in input().split()]\n\n    base = [[0] * w for _ in range(h)]\n\n    for i, ri in enumerate(r):\n        for j in range(ri):\n            base[i][j] = 1\n    for i, ci in enumerate(c):\n        for j in range(ci):\n            base[j][i] = 1\n\n    for i in range(h):\n        if r[i] < w and base[i][r[i]] == 1:\n            print(0)\n            return\n    for i in range(w):\n        if c[i] < h and base[c[i]][i] == 1:\n            print(0)\n            return\n\n    n = 0\n\n    for i in range(1, h):\n        for j in range(1, w):\n            n += (r[i] < j) and (c[j] < i)\n\n    print(pow(2, n, 1000000007))\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": true,
        "task_id": "1111",
        "depth": 2
    },
    {
        "description": "For an array a of integers let's denote its maximal element as max(a), and minimal as min(a). We will call an array a of k integers interesting if max(a) - min(a) \u2265 k. For example, array [1, 3, 4, 3] isn't interesting as max(a) - min(a) = 4 - 1 = 3 < 4 while array [7, 3, 0, 4, 3] is as max(a) - min(a) = 7 - 0 = 7 \u2265 5.\n\nYou are given an array a of n integers. Find some interesting nonempty subarray of a, or tell that it doesn't exist.\n\nAn array b is a subarray of an array a if b can be obtained from a by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end. In particular, an array is a subarray of itself.\n\nInput\n\nThe first line contains integer number t (1 \u2264 t \u2264 10 000). Then t test cases follow.\n\nThe first line of each test case contains a single integer n (2\u2264 n \u2264 2\u22c5 10^5) \u2014 the length of the array.\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (0\u2264 a_i \u2264 10^9) \u2014 the elements of the array.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output \"NO\" in a separate line if there is no interesting nonempty subarray in a. \n\nOtherwise, output \"YES\" in a separate line. In the next line, output two integers l and r (1\u2264 l \u2264 r \u2264 n) \u2014 bounds of the chosen subarray. If there are multiple answers, print any.\n\nYou can print each letter in any case (upper or lower).\n\nExample\n\nInput\n\n\n3\n5\n1 2 3 4 5\n4\n2 0 1 9\n2\n2019 2020\n\n\nOutput\n\n\nNO\nYES\n1 4\nNO\n\nNote\n\nIn the second test case of the example, one of the interesting subarrays is a = [2, 0, 1, 9]: max(a) - min(a) = 9 - 0 = 9 \u2265 4.",
        "task_name": "1270_B. Interesting Subarray",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\n\nt = input()\ninp = stdin.readlines()\nout = []\n\nfor itr in xrange(t):\n    n = int(inp[itr << 1].strip())\n    a = map(int, inp[itr << 1 | 1].strip().split())\n\n    flag = 0\n    for i in xrange(n - 1):\n        if abs(a[i] - a[i + 1]) >= 2:\n            out.append(\"YES\")\n            out.append(' '.join([str(i + 1), str(i + 2)]))\n            flag = 1\n            break\n\n    if flag == 0:\n        out.append(\"NO\")\n\nstdout.write(\"\\n\".join(out))",
        "correct": true,
        "task_id": "1112",
        "depth": 2
    },
    {
        "description": "Madeline has an array a of n integers. A pair (u, v) of integers forms an inversion in a if:\n\n  * 1 \u2264 u < v \u2264 n. \n  * a_u > a_v. \n\n\n\nMadeline recently found a magical paper, which allows her to write two indices u and v and swap the values a_u and a_v. Being bored, she decided to write a list of pairs (u_i, v_i) with the following conditions:\n\n  * all the pairs in the list are distinct and form an inversion in a. \n  * all the pairs that form an inversion in a are in the list. \n  * Starting from the given array, if you swap the values at indices u_1 and v_1, then the values at indices u_2 and v_2 and so on, then after all pairs are processed, the array a will be sorted in non-decreasing order. \n\n\n\nConstruct such a list or determine that no such list exists. If there are multiple possible answers, you may find any of them.\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the length of the array.\n\nNext line contains n integers a_1,a_2,...,a_n (1 \u2264 a_i \u2264 10^9) \u2014 elements of the array.\n\nOutput\n\nPrint -1 if no such list exists. Otherwise in the first line you should print a single integer m (0 \u2264 m \u2264 (n(n-1))/(2)) \u2014 number of pairs in the list.\n\nThe i-th of the following m lines should contain two integers u_i, v_i (1 \u2264 u_i < v_i\u2264 n).\n\nIf there are multiple possible answers, you may find any of them.\n\nExamples\n\nInput\n\n\n3\n3 1 2\n\n\nOutput\n\n\n2\n1 3\n1 2\n\n\nInput\n\n\n4\n1 8 1 6\n\n\nOutput\n\n\n2\n2 4\n2 3\n\n\nInput\n\n\n5\n1 1 1 2 2\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first sample test case the array will change in this order [3,1,2] \u2192 [2,1,3] \u2192 [1,2,3].\n\nIn the second sample test case it will be [1,8,1,6] \u2192 [1,6,1,8] \u2192 [1,1,6,8].\n\nIn the third sample test case the array is already sorted.",
        "task_name": "1375_E. Inversion SwapSort",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdout\ndef main():\n    n = int(raw_input())\n    a = map(int, raw_input().split())\n    d = [[] for _ in xrange(n)]\n    for i in xrange(n):\n        for j in xrange(i + 1, n):\n            if a[i] > a[j]:\n                d[i].append(j)\n    ans = []\n    for i in xrange(n):\n        d[i].sort(key=lambda x: (-a[x], -x))\n        for j in d[i]:\n            ans.append((i + 1, j + 1))\n            a[i], a[j] = a[j], a[i]\n    stdout.write(str(len(ans)) + '\\n')\n    stdout.write(''.join(\"%d %d\\n\" % (x, y) for x, y in ans))\nmain()\n",
        "correct": false,
        "task_id": "1114",
        "depth": 2
    },
    {
        "description": "You are given the array a consisting of n positive (greater than zero) integers.\n\nIn one move, you can choose two indices i and j (i \u2260 j) such that the absolute difference between a_i and a_j is no more than one (|a_i - a_j| \u2264 1) and remove the smallest of these two elements. If two elements are equal, you can remove any of them (but exactly one).\n\nYour task is to find if it is possible to obtain the array consisting of only one element using several (possibly, zero) such moves or not.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 \u2264 n \u2264 50) \u2014 the length of a. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 100), where a_i is the i-th element of a.\n\nOutput\n\nFor each test case, print the answer: \"YES\" if it is possible to obtain the array consisting of only one element using several (possibly, zero) moves described in the problem statement, or \"NO\" otherwise.\n\nExample\n\nInput\n\n\n5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n\n\nOutput\n\n\nYES\nYES\nNO\nNO\nYES\n\nNote\n\nIn the first test case of the example, we can perform the following sequence of moves:\n\n  * choose i=1 and j=3 and remove a_i (so a becomes [2; 2]); \n  * choose i=1 and j=2 and remove a_j (so a becomes [2]). \n\n\n\nIn the second test case of the example, we can choose any possible i and j any move and it doesn't matter which element we remove.\n\nIn the third test case of the example, there is no way to get rid of 2 and 4.",
        "task_name": "1399_A. Remove Smallest",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Hey, there Stalker!!!\n# This Code was written by:\n# \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n# \u2592\u2592\u2554\u2557\u2554\u2550\u2550\u2550\u2566\u2550\u2550\u2550\u2557\u2592\u2592\u2592\u2554\u2557\u2592\u2592\u2592\n# \u2592\u2554\u255d\u2551\u2551\u2554\u2550\u2557\u2551\u2554\u2550\u2557\u2560\u2557\u2592\u2592\u2551\u2551\u2592\u2592\u2592\n# \u2592\u255a\u2557\u2551\u2551\u2551\u2551\u2551\u2551\u2551\u2551\u2551\u2560\u256c\u2550\u2550\u2563\u2551\u2554\u2557\u2592\n# \u2592\u2592\u2551\u2551\u2551\u2551\u2551\u2551\u2551\u2551\u2551\u2551\u2560\u2563\u2551\u2550\u2563\u255a\u255d\u255d\u2592\n# \u2592\u2554\u255d\u255a\u2563\u255a\u2550\u255d\u2551\u255a\u2550\u255d\u2551\u2551\u2551\u2550\u2563\u2554\u2557\u2557\u2592\n# \u2592\u255a\u2550\u2550\u2569\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2563\u2560\u2550\u2550\u2569\u255d\u255a\u255d\u2592\n# \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2554\u255d\u2551\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n# \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u255a\u2550\u255d\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n# \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\n#from functools import reduce\n\n#mod=int(1e9+7)\n#import resource\n#resource.setrlimit(resource.RLIMIT_STACK, [0x100000000, resource.RLIM_INFINITY])\n#import threading\n#threading.stack_size(2**26)\n\"\"\"fact=[1]\n#for i in range(1,100001):\n#    fact.append((fact[-1]*i)%mod)\n#ifact=[0]*100001\n#ifact[100000]=pow(fact[100000],mod-2,mod)\n#for i in range(100000,0,-1):\n#    ifact[i-1]=(i*ifact[i])%mod\"\"\"\n#from collections import deque, defaultdict, Counter, OrderedDict\n#from math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, gcd\n#from heapq import heappush, heappop, heapify, nlargest, nsmallest\n\n\n# sys.setrecursionlimit(10**6) \nfrom sys import stdin, stdout\nimport bisect            #c++ upperbound\nfrom bisect import bisect_left as bl              #c++ lowerbound bl(array,element)\nfrom bisect import bisect_right as br             #c++ upperbound\nimport itertools\nfrom collections import Counter\n\nimport collections\nimport math\nimport heapq\nimport re\ndef modinv(n,p):\n    return pow(n,p-2,p)\ndef cin():\n    return map(int,sin().split())\ndef ain():                           #takes array as input\n    return list(map(int,sin().split()))\ndef sin():\n    return input()\ndef inin():\n    return int(input())\n  \ndef Divisors(n) : \n    l = []  \n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if (n % i == 0) : \n            if (n // i == i) : \n                l.append(i) \n            else : \n                l.append(i)\n                l.append(n//i)\n    return l\n\ndef most_frequent(list):\n    return max(set(list), key = list.count) \ndef GCD(x,y):\n    while(y):\n        x, y = y, x % y\n    return x\n\ndef ncr(n,r,p):                                              #To use this, Uncomment 19-25 \n    t=((fact[n])*((ifact[r]*ifact[n-r])%p))%p\n    return t\n\ndef Convert(string): \n    li = list(string.split(\"\")) \n    return li \n\ndef SieveOfEratosthenes(n): \n    global prime\n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    f=[]\n    for p in range(2, n): \n        if prime[p]: \n            f.append(p)\n    return f\nprime=[]\nq=[]\ndef dfs(n,d,v,c):\n    global q\n    v[n]=1\n    x=d[n]\n    q.append(n)\n    j=c\n    for i in x:\n        if i not in v:\n            f=dfs(i,d,v,c+1)\n            j=max(j,f)\n            # print(f)\n    return j\n\n#Implement heapq\n#grades = [110, 25, 38, 49, 20, 95, 33, 87, 80, 90] \n#print(heapq.nlargest(3, grades)) #top 3 largest\n#print(heapq.nsmallest(4, grades))\n#Always make a variable of predefined function for  ex- fn=len\n#n,k=map(int,input().split())\n\"\"\"*******************************************************\"\"\"\ndef main():\n    t=int(input())\n    for _ in range(t):\n        n=int(input())\n        a=list(map(int,input().split()))\n        flag=0\n        if n==1:\n            print(\"YES\")\n        else:\n            a.sort()\n            for i in range(n-1):\n                if a[i+1]-a[1]>=1:\n                    flag=1\n            if flag==1:\n                print(\"NO\")\n            else:\n                print(\"YES\")\n\n\n\n\n\n\n\n\n\"\"\"*******************************************************\"\"\"\n######## Python 2 and 3 footer by Pajenegod and c1729\npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\n \nimport os, sys\nfrom io import IOBase, BytesIO\n \nBUFSIZE = 8192\nclass FastIO(BytesIO):\n    newlines = 0\n \n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n \n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0,2), super(FastIO, self).write(s))[0])\n        return s\n \n    def read(self):\n        while self._fill(): pass\n        return super(FastIO,self).read()\n \n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill(); self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s:self.buffer.write(s.encode('ascii'))\n            self.read = lambda:self.buffer.read().decode('ascii')\n            self.readline = lambda:self.buffer.readline().decode('ascii')\n \n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nif __name__== \"__main__\":\n    main()\n#threading.Thread(target=main).start()\n",
        "correct": false,
        "task_id": "1115",
        "depth": 2
    },
    {
        "description": "Yura has been walking for some time already and is planning to return home. He needs to get home as fast as possible. To do this, Yura can use the instant-movement locations around the city.\n\nLet's represent the city as an area of n \u00d7 n square blocks. Yura needs to move from the block with coordinates (s_x,s_y) to the block with coordinates (f_x,f_y). In one minute Yura can move to any neighboring by side block; in other words, he can move in four directions. Also, there are m instant-movement locations in the city. Their coordinates are known to you and Yura. Yura can move to an instant-movement location in no time if he is located in a block with the same coordinate x or with the same coordinate y as the location.\n\nHelp Yura to find the smallest time needed to get home.\n\nInput\n\nThe first line contains two integers n and m \u2014 the size of the city and the number of instant-movement locations (1 \u2264 n \u2264 10^9, 0 \u2264 m \u2264 10^5).\n\nThe next line contains four integers s_x s_y f_x f_y \u2014 the coordinates of Yura's initial position and the coordinates of his home ( 1 \u2264 s_x, s_y, f_x, f_y \u2264 n).\n\nEach of the next m lines contains two integers x_i y_i \u2014 coordinates of the i-th instant-movement location (1 \u2264 x_i, y_i \u2264 n).\n\nOutput\n\nIn the only line print the minimum time required to get home.\n\nExamples\n\nInput\n\n\n5 3\n1 1 5 5\n1 2\n4 1\n3 3\n\n\nOutput\n\n\n5\n\n\nInput\n\n\n84 5\n67 59 41 2\n39 56\n7 2\n15 3\n74 18\n22 7\n\n\nOutput\n\n\n42\n\nNote\n\nIn the first example Yura needs to reach (5, 5) from (1, 1). He can do that in 5 minutes by first using the second instant-movement location (because its y coordinate is equal to Yura's y coordinate), and then walking (4, 1) \u2192 (4, 2) \u2192 (4, 3) \u2192 (5, 3) \u2192 (5, 4) \u2192 (5, 5).",
        "task_name": "1422_D. Returning Home",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\nimport bisect\nimport math\nimport heapq\nimport itertools\nimport sys\nfrom collections import deque\nfrom atexit import register\nfrom collections import Counter\nfrom functools import reduce\nif sys.version_info[0] < 3:\n    from io import BytesIO as stream\nelse:\n    from io import StringIO as stream\n \n \nif sys.version_info[0] < 3:\n    class dict(dict):\n        \"\"\"dict() -> new empty dictionary\"\"\"\n        def items(self):\n            \"\"\"D.items() -> a set-like object providing a view on D's items\"\"\"\n            return dict.iteritems(self)\n \n        def keys(self):\n            \"\"\"D.keys() -> a set-like object providing a view on D's keys\"\"\"\n            return dict.iterkeys(self)\n \n        def values(self):\n            \"\"\"D.values() -> an object providing a view on D's values\"\"\"\n            return dict.itervalues(self)\n \n    input = raw_input\n    range = xrange\n \n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n \n \ndef sync_with_stdio(sync=True):\n    \"\"\"Set whether the standard Python streams are allowed to buffer their I/O.\n \n    Args:\n        sync (bool, optional): The new synchronization setting.\n \n    \"\"\"\n    global input, flush\n \n    if sync:\n        flush = sys.stdout.flush\n    else:\n        sys.stdin = stream(sys.stdin.read())\n        input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n \n        sys.stdout = stream()\n        register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n\ndef main():\n    # sys.stdin  = open(\"input.txt\")\n    def dijkstra(n, s, edges):\n        hq = [(0, s)]\n        cost = [float('inf')] * n\n        cost[s] = 0\n        while hq:\n            c, v = heapq.heappop(hq)\n            if c > cost[v]:\n                continue\n            for d, u in edges[v]:\n                tmp = d + cost[v]\n                if tmp < cost[u]:\n                    cost[u] = tmp\n                    heapq.heappush(hq, (tmp, u))\n        return cost[-1]\n\n    n,m=map(int,input().split())\n    sx, sy, fx, fy = map(int, input().split())\n    xy=[None]*m\n    for i in range(m):\n        xy[i]=list(map(int,input().split()))\n        xy[i].append((i+1))\n    adj=[[] for i in range(m+2)]\n    xy.sort()\n    for i in range(m-1):\n        dist=min(abs(xy[i][0]-xy[i+1][0]),abs(xy[i][1]-xy[i+1][1]))\n        adj[xy[i][2]].append([dist,xy[i+1][2]])\n        adj[xy[i+1][2]].append([dist,xy[i][2]])\n    xy.sort(key= lambda x:x[1])\n    for i in range(m-1):\n        dist=min(abs(xy[i][0]-xy[i+1][0]),abs(xy[i][1]-xy[i+1][1]))\n        adj[xy[i][2]].append([dist,xy[i+1][2]])\n        adj[xy[i+1][2]].append([dist,xy[i][2]])\n    for x,y,i in xy:\n        d1= min(abs(x-sx),abs(y-sy))\n        d2=abs(x-sx)+abs(y-sy)\n        adj[0].append([d1,i])\n        adj[i].append([d2,0])\n        d1= min(abs(x-fx),abs(y-fy))\n        d2=abs(x-fx)+abs(y-fy)\n        adj[m+1].append([d1,i])\n        adj[i].append([d2,m+1])\n    d=abs(sx-fx)+abs(sy-fy)\n    adj[0].append([d,m+1])\n    adj[m+1].append([d,0])\n    print(dijkstra(m + 2, 0, adj))\n    \nif __name__ == '__main__':\n    sync_with_stdio(False)\n    main()",
        "correct": true,
        "task_id": "1116",
        "depth": 2
    },
    {
        "description": "There are n cells, numbered 1,2,..., n from left to right. You have to place a robot at any cell initially. The robot must make exactly k moves.\n\nIn one move, the robot must move one cell to the left or right, provided that it doesn't move out of bounds. In other words, if the robot was in the cell i, it must move to either the cell i-1 or the cell i+1, as long as it lies between 1 and n (endpoints inclusive). The cells, in the order they are visited (including the cell the robot is placed), together make a good path.\n\nEach cell i has a value a_i associated with it. Let c_0, c_1, ..., c_k be the sequence of cells in a good path in the order they are visited (c_0 is the cell robot is initially placed, c_1 is the cell where the robot is after its first move, and so on; more formally, c_i is the cell that the robot is at after i moves). Then the value of the path is calculated as a_{c_0} + a_{c_1} + ... + a_{c_k}.\n\nYour task is to calculate the sum of values over all possible good paths. Since this number can be very large, output it modulo 10^9 + 7. Two good paths are considered different if the starting cell differs or there exists an integer i \u2208 [1, k] such that the current cell of the robot after exactly i moves is different in those paths.\n\nYou must process q updates to a and print the updated sum each time. Each update changes the value of exactly one cell. See the input format and the sample input-output for more details.\n\nInput\n\nThe first line of the input contains three space-separated integers n, k and q (2 \u2264 n \u2264 5000; 1 \u2264 k \u2264 5000; 1 \u2264 q \u2264 2 \u22c5 10^5).\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9).\n\nq lines follow. Each line contains two space-separated integers i and x (1 \u2264 i \u2264 n; 1 \u2264 x \u2264 10^9) indicating that you must change the value of a_i to x.\n\nOutput\n\nPrint q integers. The i-th integer should be the sum of values over all good paths after the first i updates are performed. Since the answers may be large, print them modulo 10^9 + 7.\n\nExamples\n\nInput\n\n\n5 1 5\n3 5 1 4 2\n1 9\n2 4\n3 6\n4 6\n5 2\n\n\nOutput\n\n\n62\n58\n78\n86\n86\n\n\nInput\n\n\n5 2 5\n3 5 1 4 2\n1 9\n2 4\n3 6\n4 6\n5 2\n\n\nOutput\n\n\n157\n147\n207\n227\n227\n\n\nInput\n\n\n4 40 6\n92 21 82 46\n3 56\n1 72\n4 28\n1 97\n2 49\n2 88\n\n\nOutput\n\n\n239185261\n666314041\n50729936\n516818968\n766409450\n756910476\n\nNote\n\nIn the first example, the good paths are (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), (4, 3), (4, 5), (5, 4).\n\nInitially the values of a are [3, 5, 1, 4, 2]. After the first update, they become [9, 5, 1, 4, 2]. After the second update, they become [9, 4, 1, 4, 2], and so on.",
        "task_name": "1467_D. Sum of Paths",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    pass\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\nfrom collections import defaultdict\n\nmod=10**9+7\nn,k,q=map(int,input().split())\na=list(map(int,input().split()))\ncnt=defaultdict(lambda: 0)\ndp=[[0 for j in range(k+1)] for i in range(n+2)]\nfor i in range(1,n+1):\n    dp[i][0]=1\nfor j in range(1,k+1):\n    for i in range(1,n+1):\n        dp[i][j]=(dp[i-1][j-1]+dp[i+1][j-1])%mod\nfor i in range(1,n+1):\n    for j in range(k+1):\n        cnt[i]+=dp[i][j]*dp[i][k-j]%mod\nans=0\nfor i in range(n):\n    ans+=cnt[i+1]*a[i]%mod\nfor _ in range(q):\n    i,x=map(int,input().split())\n    ans=(ans+(x-a[i-1])*cnt[i])%mod\n    a[i-1]=x\n    print(ans%mod)",
        "correct": true,
        "task_id": "1118",
        "depth": 2
    },
    {
        "description": "Baby Ehab has a piece of Cut and Stick with an array a of length n written on it. He plans to grab a pair of scissors and do the following to it:\n\n  * pick a range (l, r) and cut out every element a_l, a_{l + 1}, ..., a_r in this range; \n  * stick some of the elements together in the same order they were in the array; \n  * end up with multiple pieces, where every piece contains some of the elements and every element belongs to some piece. \n\n\n\nMore formally, he partitions the sequence a_l, a_{l + 1}, ..., a_r into subsequences. He thinks a partitioning is beautiful if for every piece (subsequence) it holds that, if it has length x, then no value occurs strictly more than \u2308 x/2 \u2309 times in it.\n\nHe didn't pick a range yet, so he's wondering: for q ranges (l, r), what is the minimum number of pieces he needs to partition the elements a_l, a_{l + 1}, ..., a_r into so that the partitioning is beautiful.\n\nA sequence b is a subsequence of an array a if b can be obtained from a by deleting some (possibly zero) elements. Note that it does not have to be contiguous.\n\nInput\n\nThe first line contains two integers n and q (1 \u2264 n,q \u2264 3 \u22c5 10^5) \u2014 the length of the array a and the number of queries.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_i \u2264 n) \u2014 the elements of the array a.\n\nEach of the next q lines contains two integers l and r (1 \u2264 l \u2264 r \u2264 n) \u2014 the range of this query.\n\nOutput\n\nFor each query, print the minimum number of subsequences you need to partition this range into so that the partitioning is beautiful. We can prove such partitioning always exists.\n\nExample\n\nInput\n\n\n6 2\n1 3 2 3 3 2\n1 6\n2 5\n\n\nOutput\n\n\n1\n2\n\nNote\n\nIn the first query, you can just put the whole array in one subsequence, since its length is 6, and no value occurs more than 3 times in it.\n\nIn the second query, the elements of the query range are [3,2,3,3]. You can't put them all in one subsequence, since its length is 4, and 3 occurs more than 2 times. However, you can partition it into two subsequences: [3] and [2,3,3].",
        "task_name": "1514_D. Cut and Stick",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n# https://github.com/cheran-senthil/PyRival\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\nfrom collections import defaultdict\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    import bisect\n\n    N, Q = map(int, input().split())\n    A = [0] + list(map(int, input().split()))\n    pos = [[] for _ in range(3 * 10 ** 5 + 1)]\n    for i, a in enumerate(A):\n        pos[a].append(i)\n    for i in range(Q):\n        L, R = map(int, input().split())\n\n        ans = 1\n        m = R - L + 1\n        step = max(1, m // 10)\n        for x in range(L, R + 1, step):\n            a = A[x]\n            f = bisect.bisect_right(pos[a], R) - bisect.bisect_left(pos[a], L)\n            p = 2 * f - m\n            if p > ans:\n                ans = p\n        print(ans)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": false,
        "task_id": "1119",
        "depth": 2
    },
    {
        "description": "At a geometry lesson Bob learnt that a triangle is called right-angled if it is nondegenerate and one of its angles is right. Bob decided to draw such a triangle immediately: on a sheet of paper he drew three points with integer coordinates, and joined them with segments of straight lines, then he showed the triangle to Peter. Peter said that Bob's triangle is not right-angled, but is almost right-angled: the triangle itself is not right-angled, but it is possible to move one of the points exactly by distance 1 so, that all the coordinates remain integer, and the triangle become right-angled. Bob asks you to help him and find out if Peter tricks him. By the given coordinates of the triangle you should find out if it is right-angled, almost right-angled, or neither of these.\n\nInput\n\nThe first input line contains 6 space-separated integers x1, y1, x2, y2, x3, y3 \u2014 coordinates of the triangle's vertices. All the coordinates are integer and don't exceed 100 in absolute value. It's guaranteed that the triangle is nondegenerate, i.e. its total area is not zero.\n\nOutput\n\nIf the given triangle is right-angled, output RIGHT, if it is almost right-angled, output ALMOST, and if it is neither of these, output NEITHER.\n\nExamples\n\nInput\n\n0 0 2 0 0 1\n\n\nOutput\n\nRIGHT\n\n\nInput\n\n2 3 4 5 6 6\n\n\nOutput\n\nNEITHER\n\n\nInput\n\n-1 0 2 0 0 1\n\n\nOutput\n\nALMOST",
        "task_name": "18_A. Triangle",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "l=map(int,raw_input().split())\ndef ds(a,b): return (l[a]-l[b])**2 + (l[a+1]-l[b+1])**2\ndef ch():\n    a=ds(0,2)\n    b=ds(2,4)\n    c=ds(4,0)\n    return a+b==c or b+c==a or c+a==b\ns=ch()\nfor i in range(6):\n    for j in [1,-1]:\n        l[i]+=j\n        if s==0: s = 2*ch()\n        l[i]-=j\nprint [\"NEITHER\",\"RIGHT\",\"ALMOST\"][s]",
        "correct": false,
        "task_id": "1120",
        "depth": 2
    },
    {
        "description": "Valera runs a 24/7 fast food cafe. He magically learned that next day n people will visit his cafe. For each person we know the arrival time: the i-th person comes exactly at hi hours mi minutes. The cafe spends less than a minute to serve each client, but if a client comes in and sees that there is no free cash, than he doesn't want to wait and leaves the cafe immediately. \n\nValera is very greedy, so he wants to serve all n customers next day (and get more profit). However, for that he needs to ensure that at each moment of time the number of working cashes is no less than the number of clients in the cafe. \n\nHelp Valera count the minimum number of cashes to work at his cafe next day, so that they can serve all visitors.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 105), that is the number of cafe visitors.\n\nEach of the following n lines has two space-separated integers hi and mi (0 \u2264 hi \u2264 23; 0 \u2264 mi \u2264 59), representing the time when the i-th person comes into the cafe. \n\nNote that the time is given in the chronological order. All time is given within one 24-hour period.\n\nOutput\n\nPrint a single integer \u2014 the minimum number of cashes, needed to serve all clients next day.\n\nExamples\n\nInput\n\n4\n8 0\n8 10\n8 10\n8 45\n\n\nOutput\n\n2\n\n\nInput\n\n3\n0 12\n10 11\n22 22\n\n\nOutput\n\n1\n\nNote\n\nIn the first sample it is not enough one cash to serve all clients, because two visitors will come into cafe in 8:10. Therefore, if there will be one cash in cafe, then one customer will be served by it, and another one will not wait and will go away.\n\nIn the second sample all visitors will come in different times, so it will be enough one cash.",
        "task_name": "237_A. Free Cash",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# -*- coding: utf-8 -*-\nimport collections\n\nn = int(raw_input())\nevents = []\n\nfor i in xrange(n):\n    events.append(raw_input())\n\ncounter = collections.Counter(events)\nprint(max(counter.values()))\n",
        "correct": true,
        "task_id": "1122",
        "depth": 1
    },
    {
        "description": "Gerald plays the following game. He has a checkered field of size n \u00d7 n cells, where m various cells are banned. Before the game, he has to put a few chips on some border (but not corner) board cells. Then for n - 1 minutes, Gerald every minute moves each chip into an adjacent cell. He moves each chip from its original edge to the opposite edge. Gerald loses in this game in each of the three cases:\n\n  * At least one of the chips at least once fell to the banned cell. \n  * At least once two chips were on the same cell. \n  * At least once two chips swapped in a minute (for example, if you stand two chips on two opposite border cells of a row with even length, this situation happens in the middle of the row). \n\n\n\nIn that case he loses and earns 0 points. When nothing like that happened, he wins and earns the number of points equal to the number of chips he managed to put on the board. Help Gerald earn the most points.\n\nInput\n\nThe first line contains two space-separated integers n and m (2 \u2264 n \u2264 1000, 0 \u2264 m \u2264 105) \u2014 the size of the field and the number of banned cells. Next m lines each contain two space-separated integers. Specifically, the i-th of these lines contains numbers xi and yi (1 \u2264 xi, yi \u2264 n) \u2014 the coordinates of the i-th banned cell. All given cells are distinct.\n\nConsider the field rows numbered from top to bottom from 1 to n, and the columns \u2014 from left to right from 1 to n.\n\nOutput\n\nPrint a single integer \u2014 the maximum points Gerald can earn in this game.\n\nExamples\n\nInput\n\n3 1\n2 2\n\n\nOutput\n\n0\n\n\nInput\n\n3 0\n\n\nOutput\n\n1\n\n\nInput\n\n4 3\n3 1\n3 2\n3 3\n\n\nOutput\n\n1\n\nNote\n\nIn the first test the answer equals zero as we can't put chips into the corner cells.\n\nIn the second sample we can place one chip into either cell (1, 2), or cell (3, 2), or cell (2, 1), or cell (2, 3). We cannot place two chips.\n\nIn the third sample we can only place one chip into either cell (2, 1), or cell (2, 4).",
        "task_name": "333_B. Chips",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nn, m = rints()\nban, r, c, ans = [rints() for _ in range(m)], [1] * (n + 1), [1] * (n + 1), 0\n\nfor x, y in ban:\n    r[x], c[y] = 0, 0\n\nfor i in range(2, 2 + (n - 2) // 2):\n    ans += sum([r[i], r[n - i + 1], c[i], c[n - i + 1]])\n\nif n % 2 and (r[(n + 1) // 2] or c[(n + 1) // 2]):\n    ans += 1\n\nprint(ans)\n",
        "correct": true,
        "task_id": "1124",
        "depth": 1
    },
    {
        "description": "Xenia is an amateur programmer. Today on the IT lesson she learned about the Hamming distance.\n\nThe Hamming distance between two strings s = s1s2... sn and t = t1t2... tn of equal length n is value <image>. Record [si \u2260 ti] is the Iverson notation and represents the following: if si \u2260 ti, it is one, otherwise \u2014 zero.\n\nNow Xenia wants to calculate the Hamming distance between two long strings a and b. The first string a is the concatenation of n copies of string x, that is, <image>. The second string b is the concatenation of m copies of string y. \n\nHelp Xenia, calculate the required Hamming distance, given n, x, m, y.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 1012). The second line contains a non-empty string x. The third line contains a non-empty string y. Both strings consist of at most 106 lowercase English letters.\n\nIt is guaranteed that strings a and b that you obtain from the input have the same length.\n\nOutput\n\nPrint a single integer \u2014 the required Hamming distance.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nExamples\n\nInput\n\n100 10\na\naaaaaaaaaa\n\n\nOutput\n\n0\n\n\nInput\n\n1 1\nabacaba\nabzczzz\n\n\nOutput\n\n4\n\n\nInput\n\n2 3\nrzr\naz\n\n\nOutput\n\n5\n\nNote\n\nIn the first test case string a is the same as string b and equals 100 letters a. As both strings are equal, the Hamming distance between them is zero.\n\nIn the second test case strings a and b differ in their 3-rd, 5-th, 6-th and 7-th characters. Thus, the Hamming distance equals 4.\n\nIn the third test case string a is rzrrzr and string b is azazaz. The strings differ in all characters apart for the second one, the Hamming distance between them equals 5.",
        "task_name": "356_B. Xenia and Hamming",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def gcd(a, b):\n    c = a % b\n    return gcd(b, c) if c else b\nh = {j: i for i, j in enumerate('abcdefghijklmnopqrstuvwxyz')}\nn, m = map(int, raw_input().split())\nx, y = raw_input(), raw_input()\na, b = len(x), len(y)\ns, c = 0, gcd(a, b)\nu, v = range(0, a, c), range(0, b, c)\nif a == c:\n    if b == c:\n        for i in range(c): s += int(y[i] == x[i])\n    else:\n        for i in range(c):\n            for j in v: s += int(y[j + i] == x[i])\nif b == c:\n    for i in range(c):\n        for j in u: s += int(x[j + i] == y[i])\nelse:\n    t, d = [0] * (26 * c), 0\n    for i in range(c):\n        for j in u: t[d + h[x[j + i]]] += 1\n        for j in v: s += t[d + h[y[j + i]]]\n        d += 26\nprint(n * a - (m * c * s) // a)",
        "correct": false,
        "task_id": "1125",
        "depth": 2
    },
    {
        "description": "Little Vasya has received a young builder\u2019s kit. The kit consists of several wooden bars, the lengths of all of them are known. The bars can be put one on the top of the other if their lengths are the same.\n\nVasya wants to construct the minimal number of towers from the bars. Help Vasya to use the bars in the best way possible.\n\nInput\n\nThe first line contains an integer N (1 \u2264 N \u2264 1000) \u2014 the number of bars at Vasya\u2019s disposal. The second line contains N space-separated integers li \u2014 the lengths of the bars. All the lengths are natural numbers not exceeding 1000.\n\nOutput\n\nIn one line output two numbers \u2014 the height of the largest tower and their total number. Remember that Vasya should use all the bars.\n\nExamples\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\n1 3\n\n\nInput\n\n4\n6 5 6 7\n\n\nOutput\n\n2 3",
        "task_name": "37_A. Towers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ninput = sys.stdin\noutput = sys.stdout\n'''\ninput = open('input.txt','r')\noutput = open('output.txt','w')\n'''\n\ninput.readline()\nwoods = map(lambda x: int(x), input.readline().strip().split(' '))\n\nd = {}\nfor w in woods:\n  d[w] = d.setdefault(w,0) + 1\n  \noutput.write('%d %d'%(max(d.values()), len(d)))\noutput.close()\n\n",
        "correct": true,
        "task_id": "1126",
        "depth": 1
    },
    {
        "description": "This is yet another problem on regular bracket sequences.\n\nA bracket sequence is called regular, if by inserting \"+\" and \"1\" into it we get a correct mathematical expression. For example, sequences \"(())()\", \"()\" and \"(()(()))\" are regular, while \")(\", \"(()\" and \"(()))(\" are not. You have a pattern of a bracket sequence that consists of characters \"(\", \")\" and \"?\". You have to replace each character \"?\" with a bracket so, that you get a regular bracket sequence.\n\nFor each character \"?\" the cost of its replacement with \"(\" and \")\" is given. Among all the possible variants your should choose the cheapest.\n\nInput\n\nThe first line contains a non-empty pattern of even length, consisting of characters \"(\", \")\" and \"?\". Its length doesn't exceed 5\u00b7104. Then there follow m lines, where m is the number of characters \"?\" in the pattern. Each line contains two integer numbers ai and bi (1 \u2264 ai, bi \u2264 106), where ai is the cost of replacing the i-th character \"?\" with an opening bracket, and bi \u2014 with a closing one.\n\nOutput\n\nPrint the cost of the optimal regular bracket sequence in the first line, and the required sequence in the second.\n\nPrint -1, if there is no answer. If the answer is not unique, print any of them. \n\nExamples\n\nInput\n\n(??)\n1 2\n2 8\n\n\nOutput\n\n4\n()()",
        "task_name": "3_D. Least Cost Bracket Sequence",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import bisect\nsqs=bytearray(raw_input())\n\nl=0\ni=0\ncost=0\ns=[]\nwhile i < len(sqs):\n    if sqs[i]==ord('('):\n        l+=1\n    elif sqs[i]==ord(')'):\n        l-=1\n    else:\n        a,b=[int(j)for j in raw_input().split()]\n        l-=1\n        cost+=b\n        sqs[i]=')'\n        bisect.insort(s,(b-a,i))\n    if l < 0:\n        if len(s)==0:break\n        v,ii=s.pop()\n        cost-=v\n        sqs[ii]='('\n        l+=2\n    i+=1\n\nif l==0:\n    print(cost)\n    print(str(sqs))\nelse:\n    print(-1)\n    ",
        "correct": true,
        "task_id": "1127",
        "depth": 1
    },
    {
        "description": "The police department of your city has just started its journey. Initially, they don\u2019t have any manpower. So, they started hiring new recruits in groups.\n\nMeanwhile, crimes keeps occurring within the city. One member of the police force can investigate only one crime during his/her lifetime.\n\nIf there is no police officer free (isn't busy with crime) during the occurrence of a crime, it will go untreated.\n\nGiven the chronological order of crime occurrences and recruit hirings, find the number of crimes which will go untreated.\n\nInput\n\nThe first line of input will contain an integer n (1 \u2264 n \u2264 105), the number of events. The next line will contain n space-separated integers.\n\nIf the integer is -1 then it means a crime has occurred. Otherwise, the integer will be positive, the number of officers recruited together at that time. No more than 10 officers will be recruited at a time.\n\nOutput\n\nPrint a single integer, the number of crimes which will go untreated.\n\nExamples\n\nInput\n\n3\n-1 -1 1\n\n\nOutput\n\n2\n\n\nInput\n\n8\n1 -1 1 -1 -1 1 1 1\n\n\nOutput\n\n1\n\n\nInput\n\n11\n-1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1\n\n\nOutput\n\n8\n\nNote\n\nLets consider the second example:\n\n  1. Firstly one person is hired. \n  2. Then crime appears, the last hired person will investigate this crime. \n  3. One more person is hired. \n  4. One more crime appears, the last hired person will investigate this crime. \n  5. Crime appears. There is no free policeman at the time, so this crime will go untreated. \n  6. One more person is hired. \n  7. One more person is hired. \n  8. One more person is hired. \n\n\n\nThe answer is one, as one crime (on step 5) will go untreated.",
        "task_name": "427_A. Police Recruits",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "cnt = 0\nsim = 0\nc = raw_input\n\nc()\nlist = map(int, c().split(\" \"))\n\nfor i in list:\n\tsim += i\n\tif sim < 0:\n\t\tcnt += 1\t\t\n\t\tsim = 0\nprint(cnt)",
        "correct": true,
        "task_id": "1128",
        "depth": 1
    },
    {
        "description": "Mike is trying rock climbing but he is awful at it. \n\nThere are n holds on the wall, i-th hold is at height ai off the ground. Besides, let the sequence ai increase, that is, ai < ai + 1 for all i from 1 to n - 1; we will call such sequence a track. Mike thinks that the track a1, ..., an has difficulty <image>. In other words, difficulty equals the maximum distance between two holds that are adjacent in height.\n\nToday Mike decided to cover the track with holds hanging on heights a1, ..., an. To make the problem harder, Mike decided to remove one hold, that is, remove one element of the sequence (for example, if we take the sequence (1, 2, 3, 4, 5) and remove the third element from it, we obtain the sequence (1, 2, 4, 5)). However, as Mike is awful at climbing, he wants the final difficulty (i.e. the maximum difference of heights between adjacent holds after removing the hold) to be as small as possible among all possible options of removing a hold. The first and last holds must stay at their positions.\n\nHelp Mike determine the minimum difficulty of the track after removing one hold.\n\nInput\n\nThe first line contains a single integer n (3 \u2264 n \u2264 100) \u2014 the number of holds.\n\nThe next line contains n space-separated integers ai (1 \u2264 ai \u2264 1000), where ai is the height where the hold number i hangs. The sequence ai is increasing (i.e. each element except for the first one is strictly larger than the previous one).\n\nOutput\n\nPrint a single number \u2014 the minimum difficulty of the track after removing a single hold.\n\nExamples\n\nInput\n\n3\n1 4 6\n\n\nOutput\n\n5\n\n\nInput\n\n5\n1 2 3 4 5\n\n\nOutput\n\n2\n\n\nInput\n\n5\n1 2 3 7 8\n\n\nOutput\n\n4\n\nNote\n\nIn the first sample you can remove only the second hold, then the sequence looks like (1, 6), the maximum difference of the neighboring elements equals 5.\n\nIn the second test after removing every hold the difficulty equals 2.\n\nIn the third test you can obtain sequences (1, 3, 7, 8), (1, 2, 7, 8), (1, 2, 3, 8), for which the difficulty is 4, 5 and 5, respectively. Thus, after removing the second element we obtain the optimal answer \u2014 4.",
        "task_name": "496_A. Minimum Difficulty",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import fileinput\n\ndef str_to_int(s):\n\treturn([ int(x) for x in s.split() ])\n\n# args = [ 'line 1', 'line 2', ... ]\ndef proc_input(args):\n\ta_s = tuple(str_to_int(args[1]))\n\treturn(a_s)\n\ndef solve(args, verbose=False):\n\ta_s = proc_input(args)\n\tmax_1 = -float('inf')\n\tmin_2 = float('inf')\n\t# min_1\n\tfor k in xrange(len(a_s) - 1):\n\t\tmax_1 = max(max_1, a_s[k + 1] - a_s[k])\n\tfor k in xrange(len(a_s) - 2):\n\t\tmin_2 = min(min_2, a_s[k + 2] - a_s[k])\n\treturn(max(max_1, min_2))\n\ndef test():\n\tassert(str_to_int('1 2 3') == [ 1, 2, 3 ])\n\tassert(solve([ '3', '1 4 6' ]) == 5)\n\tassert(solve([ '5', '1 2 3 4 5' ]) == 2)\n\tassert(solve([ '5', '1 2 3 7 8' ]) == 4)\n\nif __name__ == '__main__':\n\tfrom sys import argv\n\tif argv.pop() == 'test':\n\t\ttest()\n\telse:\n\t\tsolve(list(fileinput.input()), verbose=True)\n",
        "correct": false,
        "task_id": "1129",
        "depth": 1
    },
    {
        "description": "In the country there are n cities and m bidirectional roads between them. Each city has an army. Army of the i-th city consists of ai soldiers. Now soldiers roam. After roaming each soldier has to either stay in his city or to go to the one of neighboring cities by at moving along at most one road.\n\nCheck if is it possible that after roaming there will be exactly bi soldiers in the i-th city.\n\nInput\n\nFirst line of input consists of two integers n and m (1 \u2264 n \u2264 100, 0 \u2264 m \u2264 200).\n\nNext line contains n integers a1, a2, ..., an (0 \u2264 ai \u2264 100).\n\nNext line contains n integers b1, b2, ..., bn (0 \u2264 bi \u2264 100).\n\nThen m lines follow, each of them consists of two integers p and q (1 \u2264 p, q \u2264 n, p \u2260 q) denoting that there is an undirected road between cities p and q. \n\nIt is guaranteed that there is at most one road between each pair of cities.\n\nOutput\n\nIf the conditions can not be met output single word \"NO\".\n\nOtherwise output word \"YES\" and then n lines, each of them consisting of n integers. Number in the i-th line in the j-th column should denote how many soldiers should road from city i to city j (if i \u2260 j) or how many soldiers should stay in city i (if i = j).\n\nIf there are several possible answers you may output any of them.\n\nExamples\n\nInput\n\n4 4\n1 2 6 3\n3 5 3 1\n1 2\n2 3\n3 4\n4 2\n\n\nOutput\n\nYES\n1 0 0 0 \n2 0 0 0 \n0 5 1 0 \n0 0 2 1 \n\n\nInput\n\n2 0\n1 2\n2 1\n\n\nOutput\n\nNO",
        "task_name": "546_E. Soldier and Traveling",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# from typing import List, Set, Dict, Tuple, Text, Optional\nfrom collections import deque\nfrom types import GeneratorType\nimport os\nimport sys\nfrom atexit import register\nimport math\nfrom io import BytesIO\nimport __pypy__  # type: ignore\n\n#########\n# INPUT #\n#########\n\n\nclass Input(object):\n  def __init__(self):\n    if 'CPH' not in os.environ:\n      sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\n      sys.stdout = BytesIO()\n      register(lambda: os.write(1, sys.stdout.getvalue()))\n\n  def rawInput(self):\n    # type: () -> str\n    return sys.stdin.readline().rstrip('\\r\\n')\n\n  def readInt(self):\n    return int(self.rawInput())\n\n##########\n# OUTPUT #\n##########\n\n\nclass Output(object):\n  def __init__(self):\n    self.out = __pypy__.builders.StringBuilder()\n\n  def write(self, text):\n    # type: (str) -> None\n    self.out.append(str(text))\n\n  def writeLine(self, text):\n    # type: (str) -> None\n    self.write(str(text) + '\\n')\n\n  def finalize(self):\n    if sys.version_info[0] < 3:\n      os.write(1, self.out.build())\n    else:\n      os.write(1, self.out.build().encode())\n\n###########\n# LIBRARY #\n###########\n\n\ndef bootstrap(f, stack=[]):\n  # Deep Recursion helper.\n  # From: https://github.com/cheran-senthil/PyRival/blob/c1972da95d102d95b9fea7c5c8e0474d61a54378/docs/bootstrap.rst\n  # Usage:\n\n  # @bootstrap\n  # def recur(n):\n  #   if n == 0:\n  #     yield 1\n  #   yield (yield recur(n-1)) * n\n  def wrappedfunc(*args, **kwargs):\n    if stack:\n      return f(*args, **kwargs)\n    else:\n      to = f(*args, **kwargs)\n      while True:\n        if type(to) is GeneratorType:\n          stack.append(to)\n          to = next(to)\n        else:\n          stack.pop()\n          if not stack:\n            break\n          to = stack[-1].send(to)\n      return to\n\n  return wrappedfunc\n\n\nclass Vector(object):\n  # Faster implementation of dynamic array\n  def __init__(self, init_size=0, initial_value=0):\n    # type: (int, Any) -> None\n    power_of_two = 1 << (init_size).bit_length()\n    self.arr = [initial_value] * power_of_two\n    self.n = init_size\n    self.init = initial_value\n\n  def __len__(self):\n    return self.n\n\n  def __getitem__(self, index):\n    assert 0 <= index < self.n\n    return self.arr[index]\n\n  def __setitem__(self, index, value):\n    assert 0 <= index < self.n\n    self.arr[index] = value\n\n  def append(self, value):\n    if self.n == len(self.arr):\n      new_arr = [self.init] * (self.n * 2)\n      for i in range(self.n):\n        new_arr[i] = self.arr[i]\n      self.arr = new_arr\n\n    self.arr[self.n] = value\n    self.n += 1\n\n    return value\n\n\nclass Dinic(object):\n  '''\n  >>> x = Dinic(5)\n  >>> x.add_edge(3, 0, 5)\n  >>> x.add_edge(3, 2, 3)\n  >>> x.add_edge(2, 0, 5)\n  >>> x.add_edge(3, 1, 7)\n  >>> x.add_edge(1, 0, 1)\n  >>> x.add_edge(1, 2, 3)\n  >>> x.add_edge(2, 1, 3)\n  >>> x.add_edge(0, 3, 10)\n  >>> x.max_flow(3, 0)\n  11\n  >>> len(x.get_positive_flow_edges())\n  6\n  >>> y = Dinic(2)\n  >>> y.max_flow(0, 1)\n  0\n  >>> y.get_positive_flow_edges()\n  []\n  >>> z = Dinic(3)\n  >>> z.add_edge(1, 0, 3)\n  >>> z.add_edge(1, 0, 5)\n  >>> z.add_edge(0, 2, 6)\n  >>> z.max_flow(1, 2)\n  6\n  >>> len(z.get_positive_flow_edges())\n  3\n  '''\n  class Edge(object):\n    def __init__(self, u, v, capacity):\n      self.u = u\n      self.v = v\n      self.capacity = capacity\n      self.flow = 0\n\n      # Opposite edge in the residual graph\n      self.opposite = None  # type: Dinic.Edge\n\n    def get_remaining_capacity(self):\n      return self.capacity - self.flow\n\n    def __repr__(self):\n      return '%d %d: %d/%d' % (self.u, self.v, self.flow, self.capacity)\n\n  def __init__(self, n):\n    # Adjacency list\n    self.n = n\n    self.adj_list = [[] for _ in range(n)]  # type: List[List[Dinic.Edge]]\n\n    # For computations\n    self.distance_label = [-1] * self.n\n    self.adj_list_current = [0] * self.n\n    self.is_flow_computed = False\n\n  def add_edge(self, u, v, capacity):\n    # type: (int, int, int) -> None\n    assert 0 <= u < self.n\n    assert 0 <= v < self.n\n    assert capacity >= 0\n\n    edge_forwards = Dinic.Edge(u, v, capacity)\n    edge_backwards = Dinic.Edge(v, u, capacity=0)\n\n    edge_forwards.opposite = edge_backwards\n    edge_backwards.opposite = edge_forwards\n\n    self.adj_list[u].append(edge_forwards)\n    self.adj_list[v].append(edge_backwards)\n\n  def _compute_distance_labels(self, source):\n    # type: (int) -> None\n    self.distance_label = [-1] * self.n\n    self.distance_label[source] = 0\n    queue = deque([source])\n    while queue:\n      node = queue.popleft()\n      for edge in self.adj_list[node]:\n        if self.distance_label[edge.v] == -1 and edge.get_remaining_capacity() > 0:\n          self.distance_label[edge.v] = self.distance_label[node] + 1\n          queue.append(edge.v)\n\n  @bootstrap\n  def blocking_flow_dfs(self, node, sink, flow_pushed):\n    # type: (int, int, int) -> int\n    if flow_pushed == 0:\n      yield 0\n\n    if node == sink:\n      yield flow_pushed\n\n    while self.adj_list_current[node] < len(self.adj_list[node]):\n      edge = self.adj_list[node][self.adj_list_current[node]]\n\n      if self.distance_label[edge.v] == self.distance_label[node]+1:\n        recursed = (yield self.blocking_flow_dfs(\n            edge.v,\n            sink,\n            min(flow_pushed, edge.get_remaining_capacity())\n        ))\n        if recursed:\n          edge.flow += recursed\n          edge.opposite.flow -= recursed\n          yield recursed\n\n      self.adj_list_current[node] += 1\n\n    yield 0\n\n  def max_flow(self, source, sink):\n    # type: (int, int) -> Union[int, float]\n    # Computes max flow, return it.\n\n    assert 0 <= source < self.n\n    assert 0 <= sink < self.n\n    assert source != sink\n    assert not self.is_flow_computed\n\n    result = 0\n\n    # Compute flow_infinity\n    flow_infinity = 0  # type: int\n    for node in range(self.n):\n      for edge in self.adj_list[node]:\n        flow_infinity += edge.capacity\n\n    while True:\n      # Compute distance labels\n      self._compute_distance_labels(source)\n\n      if self.distance_label[sink] == -1:\n        # Sink no longer reachable, so done\n        break\n\n      # Compute blocking flow, using dfs\n      self.adj_list_current = [0] * self.n\n      while True:\n        flow = self.blocking_flow_dfs(source, sink, flow_infinity)\n        result += flow\n        if not flow:\n          break\n\n    self.is_flow_computed = True\n\n    return result\n\n  def get_positive_flow_edges(self):\n    # type: () -> List[Dinic.Edge]\n    # Must be called after max_flow\n    # Return all used edges\n    assert self.is_flow_computed\n\n    edges = []  # type: List[Dinic.Edge]\n    for node in range(self.n):\n      for edge in self.adj_list[node]:\n        if edge.flow > 0:\n          edges.append(edge)\n\n    return edges\n\n\nclass TwoDArray(object):\n  # Faster implementation of 2d array, using a single array math.\n  '''\n  >>> x = TwoDArray((2, 3), 5)\n  >>> x.get([1, 2])\n  5\n  >>> x.get([0, 1])\n  5\n  >>> x.set([0, 1], 3)\n  3\n  >>> x.get([0, 1])\n  3\n  >>> x.get([1, 1])\n  5\n  >>> x.get([0, 0])\n  5\n  >>> x.set([1, 1], 2)\n  2\n  >>> x.get([1, 1])\n  2\n  '''\n\n  def __init__(self, dimensions, initial_value=0):\n    # type: (Tuple[int, int], Any) -> None\n    self.dimensions = dimensions\n    self.arr = [initial_value] * self.dimensions[0] * self.dimensions[1]\n\n  def get(self, indexes):\n    # type: (Iterable[int]) -> Any\n    return self.arr[indexes[0] * self.dimensions[1] + indexes[1]]\n\n  def set(self, indexes, value):\n    # type: (Iterable[int], Any) -> Any\n    self.arr[indexes[0] * self.dimensions[1] + indexes[1]] = value\n    return value\n\n\n#########\n# LOGIC #\n#########\n\n\ndef main(inp, out):\n  # type: (Input, Output) -> any\n  n, m = map(int, inp.rawInput().split())\n\n  nodes = 2 * n + 2\n  source = 2 * n\n  sink = 2 * n + 1\n\n  dinic = Dinic(nodes)\n\n  inits = map(int, inp.rawInput().split())\n\n  for i in range(n):\n    dinic.add_edge(source, i, inits[i])\n\n  targets = map(int, inp.rawInput().split())\n\n  for i in range(n):\n    dinic.add_edge(n+i, sink, targets[i])\n\n  infin = sum(inits)\n\n  for _ in range(m):\n    u, v = map(int, inp.rawInput().split())\n    u -= 1\n    v -= 1\n    dinic.add_edge(u, n+v, infin)\n    dinic.add_edge(v, n+u, infin)\n\n  for u in range(n):\n    dinic.add_edge(u, n+u, infin)\n\n  flow = dinic.max_flow(source, sink)\n  if flow != sum(targets):\n    out.writeLine('NO')\n  else:\n    out.writeLine('YES')\n\n    travel = TwoDArray([n, n], 0)\n    for edge in dinic.get_positive_flow_edges():\n      if edge.u != source and edge.v != sink:\n        travel.set((edge.u, edge.v-n),\n                   travel.get((edge.u, edge.v-n)) + edge.flow)\n\n    for i in range(n):\n      flows = [travel.get((i, j)) for j in range(n)]\n      out.writeLine(' '.join(map(str, flows)))\n\n\n###############\n# BOILERPLATE #\n###############\n\noutput_obj = Output()\nmain(Input(), output_obj)\noutput_obj.finalize()\n",
        "correct": false,
        "task_id": "1130",
        "depth": 2
    },
    {
        "description": "Limak is a little bear who loves to play. Today he is playing by destroying block towers. He built n towers in a row. The i-th tower is made of hi identical blocks. For clarification see picture for the first sample.\n\nLimak will repeat the following operation till everything is destroyed.\n\nBlock is called internal if it has all four neighbors, i.e. it has each side (top, left, down and right) adjacent to other block or to the floor. Otherwise, block is boundary. In one operation Limak destroys all boundary blocks. His paws are very fast and he destroys all those blocks at the same time.\n\nLimak is ready to start. You task is to count how many operations will it take him to destroy all towers.\n\nInput\n\nThe first line contains single integer n (1 \u2264 n \u2264 105).\n\nThe second line contains n space-separated integers h1, h2, ..., hn (1 \u2264 hi \u2264 109) \u2014 sizes of towers.\n\nOutput\n\nPrint the number of operations needed to destroy all towers.\n\nExamples\n\nInput\n\n6\n2 1 4 6 2 2\n\n\nOutput\n\n3\n\n\nInput\n\n7\n3 3 3 1 3 3 3\n\n\nOutput\n\n2\n\nNote\n\nThe picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color. \n\n<image> After first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.",
        "task_name": "573_B. Bear and Blocks",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from math import *\nfrom Queue import *\nfrom sys import *\nfrom random import *\n\n\n\n\n\nn = int(raw_input())\nh = map(int, raw_input().split())\nl = [0 for i in range(n)]\nr = [0 for i in range(n)]\nl[0] = 1\nfor i in range(1,n):\n    l[i] = min(l[i-1]+1, h[i])\nr[-1] = 1\nfor i in range(n-2,-1,-1):\n    r[i] = min(r[i+1]+1, h[i])\nres = 0\nfor i in range(n):\n    res = max(res, min(l[i],r[i]))\nprint(res)\n",
        "correct": true,
        "task_id": "1131",
        "depth": 1
    },
    {
        "description": "International Abbreviation Olympiad takes place annually starting from 1989. Each year the competition receives an abbreviation of form IAO'y, where y stands for some number of consequent last digits of the current year. Organizers always pick an abbreviation with non-empty string y that has never been used before. Among all such valid abbreviations they choose the shortest one and announce it to be the abbreviation of this year's competition.\n\nFor example, the first three Olympiads (years 1989, 1990 and 1991, respectively) received the abbreviations IAO'9, IAO'0 and IAO'1, while the competition in 2015 received an abbreviation IAO'15, as IAO'5 has been already used in 1995.\n\nYou are given a list of abbreviations. For each of them determine the year it stands for.\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the number of abbreviations to process. \n\nThen n lines follow, each containing a single abbreviation. It's guaranteed that each abbreviation contains at most nine digits.\n\nOutput\n\nFor each abbreviation given in the input, find the year of the corresponding Olympiad.\n\nExamples\n\nInput\n\n5\nIAO'15\nIAO'2015\nIAO'1\nIAO'9\nIAO'0\n\n\nOutput\n\n2015\n12015\n1991\n1989\n1990\n\n\nInput\n\n4\nIAO'9\nIAO'99\nIAO'999\nIAO'9999\n\n\nOutput\n\n1989\n1999\n2999\n9999",
        "task_name": "664_C. International Olympiad",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = input()\n\nbase = 1989\nm = 9\npower_of_10 = [10**i for i in range(1, 1+m)]\ncut_off = [0] + power_of_10\nfor i in range(1,m):\n    cut_off[i] += cut_off[i-1]\n\ncut_off = [ base + cut for cut in cut_off]\ncut_off_str = [str(cut_off[i])[:-(i+1)] for i in range(1+m)]\n\ndef find_year(code_str):\n    code_len = len(code_str)\n    tmp = int(cut_off_str[code_len - 1] + code_str)\n    if tmp < cut_off[code_len - 1]:\n        tmp += power_of_10[code_len - 1]\n    return tmp\n\nfor _ in range(n):\n    print(find_year(raw_input().split(\"'\")[1]))",
        "correct": true,
        "task_id": "1133",
        "depth": 1
    },
    {
        "description": "While swimming at the beach, Mike has accidentally dropped his cellphone into the water. There was no worry as he bought a cheap replacement phone with an old-fashioned keyboard. The keyboard has only ten digital equal-sized keys, located in the following way:\n\n<image>\n\nTogether with his old phone, he lost all his contacts and now he can only remember the way his fingers moved when he put some number in. One can formally consider finger movements as a sequence of vectors connecting centers of keys pressed consecutively to put in a number. For example, the finger movements for number \"586\" are the same as finger movements for number \"253\":\n\n<image> <image>\n\nMike has already put in a number by his \"finger memory\" and started calling it, so he is now worrying, can he be sure that he is calling the correct number? In other words, is there any other number, that has the same finger movements?\n\nInput\n\nThe first line of the input contains the only integer n (1 \u2264 n \u2264 9) \u2014 the number of digits in the phone number that Mike put in.\n\nThe second line contains the string consisting of n digits (characters from '0' to '9') representing the number that Mike put in.\n\nOutput\n\nIf there is no other phone number with the same finger movements and Mike can be sure he is calling the correct number, print \"YES\" (without quotes) in the only line.\n\nOtherwise print \"NO\" (without quotes) in the first line.\n\nExamples\n\nInput\n\n3\n586\n\n\nOutput\n\nNO\n\n\nInput\n\n2\n09\n\n\nOutput\n\nNO\n\n\nInput\n\n9\n123456789\n\n\nOutput\n\nYES\n\n\nInput\n\n3\n911\n\n\nOutput\n\nYES\n\nNote\n\nYou can find the picture clarifying the first sample case in the statement above.",
        "task_name": "689_A. Mike and Cellphone",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\ns = raw_input()\na = []\nfor i in range(10):\n\ta.append(True)\nfor i in range(n):\n\tc = int(s[i])\n\ta[c] = False\ninc = 0\nif a[1] and a[2] and a[3]:\n\tinc = -3\nif a[7] and a[9] and a[0]:\n\tinc = +3\nif a[1] and a[4] and a[7] and a[0]:\n\tinc = -1\nif a[3] and a[6] and a[9] and a[0]:\n\tinc = +1\nif inc == 0:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")",
        "correct": true,
        "task_id": "1134",
        "depth": 1
    },
    {
        "description": "zscoder wants to generate an input file for some programming competition problem.\n\nHis input is a string consisting of n letters 'a'. He is too lazy to write a generator so he will manually generate the input in a text editor.\n\nInitially, the text editor is empty. It takes him x seconds to insert or delete a letter 'a' from the text file and y seconds to copy the contents of the entire text file, and duplicate it.\n\nzscoder wants to find the minimum amount of time needed for him to create the input file of exactly n letters 'a'. Help him to determine the amount of time needed to generate the input.\n\nInput\n\nThe only line contains three integers n, x and y (1 \u2264 n \u2264 107, 1 \u2264 x, y \u2264 109) \u2014 the number of letters 'a' in the input file and the parameters from the problem statement.\n\nOutput\n\nPrint the only integer t \u2014 the minimum amount of time needed to generate the input file.\n\nExamples\n\nInput\n\n8 1 1\n\n\nOutput\n\n4\n\n\nInput\n\n8 1 10\n\n\nOutput\n\n8",
        "task_name": "710_E. Generate a String",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "i = map(int, raw_input().split(\" \"))\n\n\ndef get_time(params):\n\tassigned = 1\n\ttotal = params[1]\n\n\twhile assigned < params[0]:\n\t\tdouble = assigned * 2\n\t\t# No se puede doblar la cantidad\n\t\tif double > params[0]:\n\t\t\t# Al total le anyadimos las letras sobrantes por el tiempo necesario por letra\n\t\t\treturn total + (params[0] - assigned) * params[1]\n\t\t# Existe la posibilidad de doblar la cantidad\n\t\telse:\n\t\t\t# Si el coste de doblarlo es menor que el de anyadir una a una lo doblamos\n\t\t\tone_cost = assigned * params[1]\n\t\t\tif one_cost > params[2]:\n\t\t\t\ttotal += params[2]\n\t\t\t\tassigned *= 2\n\t\t\telse:\n\t\t\t\ttotal += params[1]\n\t\t\t\tassigned += 1\n\treturn total\n\nprint(get_time(i))\n",
        "correct": false,
        "task_id": "1135",
        "depth": 1
    },
    {
        "description": "Holidays have finished. Thanks to the help of the hacker Leha, Noora managed to enter the university of her dreams which is located in a town Pavlopolis. It's well known that universities provide students with dormitory for the period of university studies. Consequently Noora had to leave Vi\u010dkopolis and move to Pavlopolis. Thus Leha was left completely alone in a quiet town Vi\u010dkopolis. He almost even fell into a depression from boredom!\n\nLeha came up with a task for himself to relax a little. He chooses two integers A and B and then calculates the greatest common divisor of integers \"A factorial\" and \"B factorial\". Formally the hacker wants to find out GCD(A!, B!). It's well known that the factorial of an integer x is a product of all positive integers less than or equal to x. Thus x! = 1\u00b72\u00b73\u00b7...\u00b7(x - 1)\u00b7x. For example 4! = 1\u00b72\u00b73\u00b74 = 24. Recall that GCD(x, y) is the largest positive integer q that divides (without a remainder) both x and y.\n\nLeha has learned how to solve this task very effective. You are able to cope with it not worse, aren't you?\n\nInput\n\nThe first and single line contains two integers A and B (1 \u2264 A, B \u2264 109, min(A, B) \u2264 12).\n\nOutput\n\nPrint a single integer denoting the greatest common divisor of integers A! and B!.\n\nExample\n\nInput\n\n4 3\n\n\nOutput\n\n6\n\nNote\n\nConsider the sample.\n\n4! = 1\u00b72\u00b73\u00b74 = 24. 3! = 1\u00b72\u00b73 = 6. The greatest common divisor of integers 24 and 6 is exactly 6.",
        "task_name": "822_A. I'm bored with life",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a,b=map(int, raw_input().split())\n\nf=1\nif a<b:\n    while a>1:\n        f=f*a\n        a=a-1\n    print(f)\n    \nelse:\n    if a>b:\n        while b>1:\n            f=f*b\n            b=b-1\n        print(f)# your code goes here",
        "correct": false,
        "task_id": "1137",
        "depth": 1
    },
    {
        "description": "Rock... Paper!\n\nAfter Karen have found the deterministic winning (losing?) strategy for rock-paper-scissors, her brother, Koyomi, comes up with a new game as a substitute. The game works as follows.\n\nA positive integer n is decided first. Both Koyomi and Karen independently choose n distinct positive integers, denoted by x1, x2, ..., xn and y1, y2, ..., yn respectively. They reveal their sequences, and repeat until all of 2n integers become distinct, which is the only final state to be kept and considered.\n\nThen they count the number of ordered pairs (i, j) (1 \u2264 i, j \u2264 n) such that the value xi xor yj equals to one of the 2n integers. Here xor means the [bitwise exclusive or](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) operation on two integers, and is denoted by operators ^ and/or xor in most programming languages.\n\nKaren claims a win if the number of such pairs is even, and Koyomi does otherwise. And you're here to help determine the winner of their latest game.\n\nInput\n\nThe first line of input contains a positive integer n (1 \u2264 n \u2264 2 000) \u2014 the length of both sequences.\n\nThe second line contains n space-separated integers x1, x2, ..., xn (1 \u2264 xi \u2264 2\u00b7106) \u2014 the integers finally chosen by Koyomi.\n\nThe third line contains n space-separated integers y1, y2, ..., yn (1 \u2264 yi \u2264 2\u00b7106) \u2014 the integers finally chosen by Karen.\n\nInput guarantees that the given 2n integers are pairwise distinct, that is, no pair (i, j) (1 \u2264 i, j \u2264 n) exists such that one of the following holds: xi = yj; i \u2260 j and xi = xj; i \u2260 j and yi = yj.\n\nOutput\n\nOutput one line \u2014 the name of the winner, that is, \"Koyomi\" or \"Karen\" (without quotes). Please be aware of the capitalization.\n\nExamples\n\nInput\n\n3\n1 2 3\n4 5 6\n\n\nOutput\n\nKaren\n\n\nInput\n\n5\n2 4 6 8 10\n9 7 5 3 1\n\n\nOutput\n\nKaren\n\nNote\n\nIn the first example, there are 6 pairs satisfying the constraint: (1, 1), (1, 2), (2, 1), (2, 3), (3, 2) and (3, 3). Thus, Karen wins since 6 is an even number.\n\nIn the second example, there are 16 such pairs, and Karen wins again.",
        "task_name": "869_A. The Artful Expedient",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\nx = map(int, raw_input().split())\ny = map(int, raw_input().split())\ns = set(x+y)\nc = 0\nfor i in range(n):\n  for j in range(n):\n    if x[i]^x[j] in s:\n      c ^= 1\n\nprint (c == 0) * \"Karen\" or \"Koyomi\"",
        "correct": true,
        "task_id": "1138",
        "depth": 2
    },
    {
        "description": "Jamie loves sleeping. One day, he decides that he needs to wake up at exactly hh: mm. However, he hates waking up, so he wants to make waking up less painful by setting the alarm at a lucky time. He will then press the snooze button every x minutes until hh: mm is reached, and only then he will wake up. He wants to know what is the smallest number of times he needs to press the snooze button.\n\nA time is considered lucky if it contains a digit '7'. For example, 13: 07 and 17: 27 are lucky, while 00: 48 and 21: 34 are not lucky.\n\nNote that it is not necessary that the time set for the alarm and the wake-up time are on the same day. It is guaranteed that there is a lucky time Jamie can set so that he can wake at hh: mm.\n\nFormally, find the smallest possible non-negative integer y such that the time representation of the time x\u00b7y minutes before hh: mm contains the digit '7'.\n\nJamie uses 24-hours clock, so after 23: 59 comes 00: 00.\n\nInput\n\nThe first line contains a single integer x (1 \u2264 x \u2264 60).\n\nThe second line contains two two-digit integers, hh and mm (00 \u2264 hh \u2264 23, 00 \u2264 mm \u2264 59).\n\nOutput\n\nPrint the minimum number of times he needs to press the button.\n\nExamples\n\nInput\n\n3\n11 23\n\n\nOutput\n\n2\n\n\nInput\n\n5\n01 07\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample, Jamie needs to wake up at 11:23. So, he can set his alarm at 11:17. He would press the snooze button when the alarm rings at 11:17 and at 11:20.\n\nIn the second sample, Jamie can set his alarm at exactly at 01:07 which is lucky.",
        "task_name": "916_A. Jamie and Alarm Snooze",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "x = int(raw_input())\na,b = map(int,raw_input().split())\nif \"7\" in str(a) or \"7\" in str(b):\n    print(0)\nelse:\n    total = a*60+b\n    ans = 0 \n    for i in range(total,-1,-1):\n        l,m = i//60,i%60\n        if \"7\" in str(l) or \"7\" in str(m):\n            ans = i\n            break\n    if not ans:\n        total = 23*60  + 59\n        for i in range(total,-1,-1):\n            l,m = i//60,i%60\n            if \"7\" in str(l) or \"7\" in str(m):\n                ans = i\n                break\n    j  = 0\n    print((total-ans)//x + j)\n",
        "correct": false,
        "task_id": "1139",
        "depth": 1
    },
    {
        "description": "Dima has a hamsters farm. Soon N hamsters will grow up on it and Dima will sell them in a city nearby.\n\nHamsters should be transported in boxes. If some box is not completely full, the hamsters in it are bored, that's why each box should be completely full with hamsters.\n\nDima can buy boxes at a factory. The factory produces boxes of K kinds, boxes of the i-th kind can contain in themselves ai hamsters. Dima can buy any amount of boxes, but he should buy boxes of only one kind to get a wholesale discount.\n\nOf course, Dima would buy boxes in such a way that each box can be completely filled with hamsters and transported to the city. If there is no place for some hamsters, Dima will leave them on the farm.\n\nFind out how many boxes and of which type should Dima buy to transport maximum number of hamsters.\n\nInput\n\nThe first line contains two integers N and K (0 \u2264 N \u2264 1018, 1 \u2264 K \u2264 105) \u2014 the number of hamsters that will grow up on Dima's farm and the number of types of boxes that the factory produces.\n\nThe second line contains K integers a1, a2, ..., aK (1 \u2264 ai \u2264 1018 for all i) \u2014 the capacities of boxes.\n\nOutput\n\nOutput two integers: the type of boxes that Dima should buy and the number of boxes of that type Dima should buy. Types of boxes are numbered from 1 to K in the order they are given in input.\n\nIf there are many correct answers, output any of them.\n\nExamples\n\nInput\n\n19 3\n5 4 10\n\n\nOutput\n\n2 4\n\n\nInput\n\n28 3\n5 6 30\n\n\nOutput\n\n1 5",
        "task_name": "939_B. Hamster Farm",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math\nn,k = map(int, raw_input().split())\na =  map(int, raw_input().split())\nmx = n / a[0]\nidx = 1\nlasteq = math.floor(n / a[0] * 1.0) * a[0]\nfor i in range(1,k):\n    eq = math.floor(n / a[i] * 1.0) * a[i]\n    if eq > lasteq :\n        lasteq = eq\n        mx = n/a[i]\n        idx = i+1\n    elif eq == lasteq:\n      b1 = n / a[i]\n      if b1 < mx :\n          mx = b1\n          idx = i+1\nprint(\"%d %d\" % (idx, mx)) ",
        "correct": false,
        "task_id": "1140",
        "depth": 1
    },
    {
        "description": "It's now the season of TAKOYAKI FESTIVAL!\n\nThis year, N takoyaki (a ball-shaped food with a piece of octopus inside) will be served. The deliciousness of the i-th takoyaki is d_i.\n\nAs is commonly known, when you eat two takoyaki of deliciousness x and y together, you restore x \\times y health points.\n\nThere are \\frac{N \\times (N - 1)}{2} ways to choose two from the N takoyaki served in the festival. For each of these choices, find the health points restored from eating the two takoyaki, then compute the sum of these \\frac{N \\times (N - 1)}{2} values.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 50\n* 0 \\leq d_i \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nd_1 d_2 ... d_N\n\n\nOutput\n\nPrint the sum of the health points restored from eating two takoyaki over all possible choices of two takoyaki from the N takoyaki served.\n\nExamples\n\nInput\n\n3\n3 1 2\n\n\nOutput\n\n11\n\n\nInput\n\n7\n5 0 7 8 3 3 2\n\n\nOutput\n\n312",
        "task_name": "p02886 AtCoder Beginner Contest 143 - TAKOYAKI FESTIVAL 2019",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N = int(raw_input())\nd = map(int, raw_input().split())\n\nsum1 = 0\nfor i in range(N):\n    sum1 = sum1 + d[i]\n\nsum1 = sum1*sum1\n\nsum2 = 0\nfor i in range(N):\n    sum2 = sum2 + d[i]**2\n\nprint (sum1 - sum2)/2",
        "correct": true,
        "task_id": "1142",
        "depth": 1
    },
    {
        "description": "There are N stones, numbered 1, 2, \\ldots, N. For each i (1 \\leq i \\leq N), the height of Stone i is h_i.\n\nThere is a frog who is initially on Stone 1. He will repeat the following action some number of times to reach Stone N:\n\n* If the frog is currently on Stone i, jump to one of the following: Stone i + 1, i + 2, \\ldots, i + K. Here, a cost of |h_i - h_j| is incurred, where j is the stone to land on.\n\n\n\nFind the minimum possible total cost incurred before the frog reaches Stone N.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 10^5\n* 1 \\leq K \\leq 100\n* 1 \\leq h_i \\leq 10^4\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nh_1 h_2 \\ldots h_N\n\n\nOutput\n\nPrint the minimum possible total cost incurred.\n\nExamples\n\nInput\n\n5 3\n10 30 40 50 20\n\n\nOutput\n\n30\n\n\nInput\n\n3 1\n10 20 10\n\n\nOutput\n\n20\n\n\nInput\n\n2 100\n10 10\n\n\nOutput\n\n0\n\n\nInput\n\n10 4\n40 10 20 70 80 10 20 70 80 60\n\n\nOutput\n\n40",
        "task_name": "p03161 Educational DP Contest - Frog 2",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n# import numpy as np\ninp = sys.stdin.readline\nread = lambda: list(map(int, inp().strip().split()))\n# import profile\n\ndef solve():\n    n, k =read(); arr = read()\n    dp = [-1]*n; dp[0] = 0\n    for i in range(n):\n    \tfor j in range(1, k+1):\n    \t\tif i-j >-1:\n    \t\t\ttem = dp[i-j]+abs(arr[i-j] - arr[i])\n    \t\t\tif dp[i] == -1:\n    \t\t\t\tdp[i] = tem\n    \t\t\telif dp[i] > tem:\n    \t\t\t\tdp[i] = tem\n    \t\t\t\t# dp[i] = min(dp[i], tem)\n    print(dp[-1])\n\ndef one():\n\tl = [0]*10**7\ndef two():\n\tl = [0 for i in range(10**7)]\n\nif __name__ == \"__main__\":\n\tsolve()\n\t# cProfile.run(solve())\n\t# profile.run(one())\n\t# cProfile.run()",
        "correct": true,
        "task_id": "1143",
        "depth": 2
    },
    {
        "description": "An adult game master and N children are playing a game on an ice rink. The game consists of K rounds. In the i-th round, the game master announces:\n\n* Form groups consisting of A_i children each!\n\n\n\nThen the children who are still in the game form as many groups of A_i children as possible. One child may belong to at most one group. Those who are left without a group leave the game. The others proceed to the next round. Note that it's possible that nobody leaves the game in some round.\n\nIn the end, after the K-th round, there are exactly two children left, and they are declared the winners.\n\nYou have heard the values of A_1, A_2, ..., A_K. You don't know N, but you want to estimate it.\n\nFind the smallest and the largest possible number of children in the game before the start, or determine that no valid values of N exist.\n\nConstraints\n\n* 1 \\leq K \\leq 10^5\n* 2 \\leq A_i \\leq 10^9\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK\nA_1 A_2 ... A_K\n\n\nOutput\n\nPrint two integers representing the smallest and the largest possible value of N, respectively, or a single integer -1 if the described situation is impossible.\n\nExamples\n\nInput\n\n4\n3 4 3 2\n\n\nOutput\n\n6 8\n\n\nInput\n\n5\n3 4 100 3 2\n\n\nOutput\n\n-1\n\n\nInput\n\n10\n2 2 2 2 2 2 2 2 2 2\n\n\nOutput\n\n2 3",
        "task_name": "p03464 AtCoder Grand Contest 020 - Ice Rink Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "f = open(\"data.txt\", 'r')\nfile = f.read()\nf.close()\nlines = file.split(\"\\n\")\nr = lines[1].split(\" \")\n\nserach_flag = True\nold_mid = -1\nmin = 0\nmax = 10**9\nmid = 0\n\nlow = -1\nhigh = -1\n\nwhile(serach_flag):\n    mid = (min + max) / 2\n    val = mid\n    for k in r:\n        val = val - (val % int(k))\n    \n    #print(min, mid, max, val)    \n    if(val == 2):\n        serach_flag = False\n        break\n        \n    if(abs(mid - old_mid) < 1):\n        break\n    \n    if(val == 0):    \n        min = mid\n    else:    \n        max = mid\n\n    old_mid = mid\n    \n#print(mid, serach_flag)\n\n\nif(serach_flag == False):\n    old_mid = -1\n    low = mid\n    high = mid\n\n    minl = min\n    maxl = mid\n    midl = 0\n\n    serach_flag = True  \n    while(serach_flag):\n        midl = (minl + maxl) / 2\n        val = midl\n        for k in r:\n            val = val - (val % int(k))\n        \n        #print(minl, midl, maxl, val)\n            \n        if(abs(midl - old_mid) < 1):\n            serach_flag = False\n        \n        if(val == 2):    \n            maxl = midl\n            low = midl\n        else:\n            minl = midl\n        \n        old_mid = midl\n    #print(low, serach_flag)\n\n    old_mid = -1\n    minh = mid\n    maxh = max\n    midh = 0\n\n    serach_flag = True   \n    while(serach_flag):\n        midh = (minh + maxh) / 2\n        val = midh\n        for k in r:\n            val = val - (val % int(k))\n        \n        #print(minh, midh, maxh, val)\n\n        if(abs(midh - old_mid) < 1):\n            serach_flag = False\n            \n        if(val == 2):    \n            minh = midh\n            high = midh\n        else:    \n            maxh = midh\n        \n        old_mid = midh\n\n    #print(high, serach_flag)    \n    print(low, high) \n    \nelse:\n    print(-1)\n\n    \n    ",
        "correct": false,
        "task_id": "1145",
        "depth": 2
    },
    {
        "description": "We have a pyramid with N steps, built with blocks. The steps are numbered 1 through N from top to bottom. For each 1\u2264i\u2264N, step i consists of 2i-1 blocks aligned horizontally. The pyramid is built so that the blocks at the centers of the steps are aligned vertically.\n\n<image>\n\nA pyramid with N=4 steps\n\nSnuke wrote a permutation of (1, 2, ..., 2N-1) into the blocks of step N. Then, he wrote integers into all remaining blocks, under the following rule:\n\n* The integer written into a block b must be equal to the median of the three integers written into the three blocks directly under b, or to the lower left or lower right of b.\n\n\n\n<image>\n\nWriting integers into the blocks\n\nAfterwards, he erased all integers written into the blocks. Now, he only remembers that the integer written into the block of step 1 was x.\n\nConstruct a permutation of (1, 2, ..., 2N-1) that could have been written into the blocks of step N, or declare that Snuke's memory is incorrect and such a permutation does not exist.\n\nConstraints\n\n* 2\u2264N\u226410^5\n* 1\u2264x\u22642N-1\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN x\n\n\nOutput\n\nIf no permutation of (1, 2, ..., 2N-1) could have been written into the blocks of step N, print `No`.\n\nOtherwise, print `Yes` in the first line, then print 2N-1 lines in addition.\n\nThe i-th of these 2N-1 lines should contain the i-th element of a possible permutation.\n\nExamples\n\nInput\n\n4 4\n\n\nOutput\n\nYes\n1\n6\n3\n7\n4\n5\n2\n\n\nInput\n\n2 1\n\n\nOutput\n\nNo",
        "task_name": "p03952 AtCoder Grand Contest 006 - Median Pyramid Easy",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,x=map(int,raw_input().split())\nif n==2 and x==2:\n    print(\"Yes\")\n    print(1)\n    print(2)\n    print(3)\n    exit()\nelif n==2 and x!=2:\n    print(\"No\")\n    exit()\nans=[0]*(2*n-1)\nif x-2>=1 and x+2<=2*n-1:\n    print(\"Yes\")\n    ans[(2*n-1)/2]=x\n    ans[(2*n-1)/2+1]=x+1\n    ans[(2*n-1)/2-1]=x-1\n    ans[(2*n-1)/2+2]=x-2\n    ans[(2*n-1)/2-2]=x+2\n    j=1\n    i=0\n    while i<2*n-1:\n        if j==x or j==x-1 or j==x+1 or j==x+2 or j==x-2:\n            j+=1\n            continue\n        if ans[i]!=0:\n            i+=1\n            continue\n        else:\n            ans[i]=j\n            j+=1\n            i+=1\n    for i in xrange(2*n-1):\n        print(ans[i])\nelse:\n    print(\"No\")",
        "correct": false,
        "task_id": "1147",
        "depth": 1
    },
    {
        "description": "Taro has decided to move. Taro has a lot of luggage, so I decided to ask a moving company to carry the luggage. Since there are various weights of luggage, I asked them to arrange them in order from the lightest one for easy understanding, but the mover left the luggage in a different order. So Taro tried to sort the luggage, but the luggage is heavy and requires physical strength to carry. Each piece of luggage can be carried from where it is now to any place you like, such as between other pieces of luggage or at the edge of the piece of luggage, but carrying one piece of luggage uses as much physical strength as the weight of that piece of luggage. Taro doesn't have much physical strength, so I decided to think of a way to arrange the luggage in order from the lightest one without using as much physical strength as possible.\n\nConstraints\n\n> 1 \u2264 n \u2264 105\n> 1 \u2264 xi \u2264 n (1 \u2264 i \u2264 n)\n> xi \u2260 xj (1 \u2264 i, j \u2264 n and i \u2260 j)\n>\n\n* All inputs are given as integers\n\nInput\n\n> n\n> x1 x2 ... xn\n>\n\n* n represents the number of luggage that Taro has\n* x1 to xn represent the weight of each piece of luggage, and are currently arranged in the order of x1, x2, ..., xn.\n\nOutput\n\n> S\n>\n\n* Output the total S of the minimum physical strength required to arrange the luggage in order from the lightest, but output the line break at the end\n\nExamples\n\nInput\n\n4\n1 4 2 3\n\n\nOutput\n\n4\n\n\nInput\n\n5\n1 5 3 2 4\n\n\nOutput\n\n7\n\n\nInput\n\n7\n1 2 3 4 5 6 7\n\n\nOutput\n\n0\n\n\nInput\n\n8\n6 2 1 3 8 5 4 7\n\n\nOutput\n\n19",
        "task_name": "p01545 House Moving",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math\nimport sys\nif sys.version[0] == '2':\n    range, input = xrange, raw_input\n\n\nclass FenwickTree:\n    def __init__(self, a_list, f, default):\n        # 0-indexed\n        self.N = len(a_list)\n        self.bit = a_list[:]\n        self.f = f\n        self.default = default\n        for _ in range(self.N, 1 << (math.ceil(math.log(self.N, 2)))):\n            self.bit.append(self.default)\n        for i in range(self.N - 1):\n            self.bit[i | (i + 1)] = self.f(self.bit[i | (i + 1)], self.bit[i])\n\n    def update(self, i, val):\n        while i < self.N:\n            self.bit[i] = self.f(self.bit[i], val)\n            i |= i + 1\n\n    def query(self, n):\n        # [0, n]\n        ret = 0\n        while n >= 0:\n            ret = self.f(ret, self.bit[n])\n            n = (n & (n + 1)) - 1\n        return ret\n\n\nN = int(input())\nX = [int(x) for x in input().split()]\ndp = FenwickTree([0] * N, lambda x, y: max(x, y), 0)\nfor x, i in sorted((x, i) for i, x in enumerate(X)):\n    dp.update(i, dp.query(i) + x)\nprint(N * (N + 1) // 2 - dp.query(N - 1))",
        "correct": false,
        "task_id": "1149",
        "depth": 1
    },
    {
        "description": "Write a program which converts uppercase/lowercase letters to lowercase/uppercase for a given string.\n\nConstraints\n\n* The length of the input string < 1200\n\nInput\n\nA string is given in a line.\n\nOutput\n\nPrint the converted string in a line. Note that you do not need to convert any characters other than alphabetical letters.\n\nExample\n\nInput\n\nfAIR, LATER, OCCASIONALLY CLOUDY.\n\n\nOutput\n\nFair, later, occasionally cloudy.",
        "task_name": "p02415 Toggling Cases",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "while 1:\n    input = raw_input()\n    output = \"\"\n\n    for i in input:\n        if i.islower():\n            output += i.upper()\n        elif i.isupper():\n            output += i.lower()\n    \n    print(output)",
        "correct": false,
        "task_id": "1151",
        "depth": 2
    },
    {
        "description": "The sequence of integers a_1, a_2, ..., a_k is called a good array if a_1 = k - 1 and a_1 > 0. For example, the sequences [3, -1, 44, 0], [1, -99] are good arrays, and the sequences [3, 7, 8], [2, 5, 4, 1], [0] \u2014 are not.\n\nA sequence of integers is called good if it can be divided into a positive number of good arrays. Each good array should be a subsegment of sequence and each element of the sequence should belong to exactly one array. For example, the sequences [2, -3, 0, 1, 4], [1, 2, 3, -3, -9, 4] are good, and the sequences [2, -3, 0, 1], [1, 2, 3, -3 -9, 4, 1] \u2014 are not.\n\nFor a given sequence of numbers, count the number of its subsequences that are good sequences, and print the number of such subsequences modulo 998244353.\n\nInput\n\nThe first line contains the number n~(1 \u2264 n \u2264 10^3) \u2014 the length of the initial sequence. The following line contains n integers a_1, a_2, ..., a_n~(-10^9 \u2264 a_i \u2264 10^9) \u2014 the sequence itself.\n\nOutput\n\nIn the single line output one integer \u2014 the number of subsequences of the original sequence that are good sequences, taken modulo 998244353.\n\nExamples\n\nInput\n\n3\n2 1 1\n\n\nOutput\n\n2\n\n\nInput\n\n4\n1 1 1 1\n\n\nOutput\n\n7\n\nNote\n\nIn the first test case, two good subsequences \u2014 [a_1, a_2, a_3] and [a_2, a_3].\n\nIn the second test case, seven good subsequences \u2014 [a_1, a_2, a_3, a_4], [a_1, a_2], [a_1, a_3], [a_1, a_4], [a_2, a_3], [a_2, a_4] and [a_3, a_4].",
        "task_name": "1000_D. Yet Another Problem On a Subsequence",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "mod=998244353\n\nc=[[0]*2000 for i in range(2000)]\nc[0][0]=1\nfor i in range(1,1005):\n    c[i][0] = 1\n    c[i][i] = 1\n    for j in range(1, i):\n        c[i][j] = c[i-1][j] + c[i-1][j-1]\n        c[i][j]%=mod\n\ndef getc(n, k):\n    if k>n:\n        return 0\n    return c[n][k]\n\nn = int(raw_input())\nsrc=map(int, raw_input().split())\n# n=3\n# src=[2,1,1]\n# n=4\n# src=[1,1,1,1]\n\ndp=[0]*(n+1)\ndp[n] = 1\n\nfor i in range(n-1, -1, -1):\n    if src[i] < 1:\n        continue\n    for j in range(i+1, n+1):\n        dp[i] += dp[j] * getc(j-i-1, src[i])\n        dp[i]%=mod\n\nprint (sum(dp)-1)%mod\n",
        "correct": true,
        "task_id": "1152",
        "depth": 2
    },
    {
        "description": "There is a card game called \"Durak\", which means \"Fool\" in Russian. The game is quite popular in the countries that used to form USSR. The problem does not state all the game's rules explicitly \u2014 you can find them later yourselves if you want.\n\nTo play durak you need a pack of 36 cards. Each card has a suit (\"S\", \"H\", \"D\" and \"C\") and a rank (in the increasing order \"6\", \"7\", \"8\", \"9\", \"T\", \"J\", \"Q\", \"K\" and \"A\"). At the beginning of the game one suit is arbitrarily chosen as trump. \n\nThe players move like that: one player puts one or several of his cards on the table and the other one should beat each of them with his cards.\n\nA card beats another one if both cards have similar suits and the first card has a higher rank then the second one. Besides, a trump card can beat any non-trump card whatever the cards\u2019 ranks are. In all other cases you can not beat the second card with the first one.\n\nYou are given the trump suit and two different cards. Determine whether the first one beats the second one or not.\n\nInput\n\nThe first line contains the tramp suit. It is \"S\", \"H\", \"D\" or \"C\".\n\nThe second line contains the description of the two different cards. Each card is described by one word consisting of two symbols. The first symbol stands for the rank (\"6\", \"7\", \"8\", \"9\", \"T\", \"J\", \"Q\", \"K\" and \"A\"), and the second one stands for the suit (\"S\", \"H\", \"D\" and \"C\").\n\nOutput\n\nPrint \"YES\" (without the quotes) if the first cards beats the second one. Otherwise, print \"NO\" (also without the quotes).\n\nExamples\n\nInput\n\nH\nQH 9S\n\n\nOutput\n\nYES\n\n\nInput\n\nS\n8D 6D\n\n\nOutput\n\nYES\n\nInput\n\nC\n7H AS\n\n\nOutput\n\nNO",
        "task_name": "106_A. Card Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s = raw_input()\ns2 = raw_input().split()\n\nm1 = '6789TJQKA'\n\ni = 0\nfor ts in m1:\n    if ts == s2[0][0]:\n        r1 = i\n    i+=1\n\ni = 0\nfor ts in m1:\n    if ts == s2[1][0]:\n        r2 = i\n    i+=1\n\n#print r1, r2\n\nif s2[0][1] != s2[1][1] and s2[0][1] == s[0]:\n    print ('YES')\nelif s2[0][1] == s2[1][1] and r1 > r2:\n    print('YES')\nelse:\n    print('NO')\n",
        "correct": true,
        "task_id": "1153",
        "depth": 1
    },
    {
        "description": "There are n houses along the road where Anya lives, each one is painted in one of k possible colors.\n\nAnya likes walking along this road, but she doesn't like when two adjacent houses at the road have the same color. She wants to select a long segment of the road such that no two adjacent houses have the same color.\n\nHelp Anya find the longest segment with this property.\n\nInput\n\nThe first line contains two integers n and k \u2014 the number of houses and the number of colors (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 100 000).\n\nThe next line contains n integers a_1, a_2, \u2026, a_n \u2014 the colors of the houses along the road (1 \u2264 a_i \u2264 k).\n\nOutput\n\nOutput a single integer \u2014 the maximum number of houses on the road segment having no two adjacent houses of the same color.\n\nExample\n\nInput\n\n\n8 3\n1 2 3 3 2 1 2 2\n\n\nOutput\n\n\n4\n\nNote\n\nIn the example, the longest segment without neighboring houses of the same color is from the house 4 to the house 7. The colors of the houses are [3, 2, 1, 2] and its length is 4 houses.",
        "task_name": "1090_M. The Pleasant Walk",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nn,k=map(int,raw_input().split())\na=list(map(int,raw_input().split()))\nmax_sum=1\nsumm=1\nfor i in xrange(1,len(a)):\n\tif a[i]!=a[i-1]:\n\t\tsumm+=1\n\t\tif max_sum<summ:\n\t\t\tmax_sum=summ\n\telse:\n\t\tsumm=1\nprint(max_sum)",
        "correct": true,
        "task_id": "1154",
        "depth": 1
    },
    {
        "description": "Petya loves lucky numbers. We all know that lucky numbers are the positive integers whose decimal representations contain only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nPetya wonders eagerly what minimum lucky number has the sum of digits equal to n. Help him cope with the task.\n\nInput\n\nThe single line contains an integer n (1 \u2264 n \u2264 106) \u2014 the sum of digits of the required lucky number.\n\nOutput\n\nPrint on the single line the result \u2014 the minimum lucky number, whose sum of digits equals n. If such number does not exist, print -1.\n\nExamples\n\nInput\n\n11\n\n\nOutput\n\n47\n\n\nInput\n\n10\n\n\nOutput\n\n-1",
        "task_name": "110_C. Lucky Sum of Digits",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = input()\nans = []\nx,y = 0,0\nfor i in xrange((n/4)+1):\n    if (n-4*i) % 7 == 0:\n        x = i\n        y = (n - 4*x)/7\n        break\nprint ['4' * x + '7' * y,-1][x == 0 and y == 0]",
        "correct": true,
        "task_id": "1155",
        "depth": 1
    },
    {
        "description": "There are n people in a row. The height of the i-th person is a_i. You can choose any subset of these people and try to arrange them into a balanced circle.\n\nA balanced circle is such an order of people that the difference between heights of any adjacent people is no more than 1. For example, let heights of chosen people be [a_{i_1}, a_{i_2}, ..., a_{i_k}], where k is the number of people you choose. Then the condition |a_{i_j} - a_{i_{j + 1}}| \u2264 1 should be satisfied for all j from 1 to k-1 and the condition |a_{i_1} - a_{i_k}| \u2264 1 should be also satisfied. |x| means the absolute value of x. It is obvious that the circle consisting of one person is balanced.\n\nYour task is to choose the maximum number of people and construct a balanced circle consisting of all chosen people. It is obvious that the circle consisting of one person is balanced so the answer always exists.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of people.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 2 \u22c5 10^5), where a_i is the height of the i-th person.\n\nOutput\n\nIn the first line of the output print k \u2014 the number of people in the maximum balanced circle.\n\nIn the second line print k integers res_1, res_2, ..., res_k, where res_j is the height of the j-th person in the maximum balanced circle. The condition |res_{j} - res_{j + 1}| \u2264 1 should be satisfied for all j from 1 to k-1 and the condition |res_{1} - res_{k}| \u2264 1 should be also satisfied.\n\nExamples\n\nInput\n\n\n7\n4 3 5 1 2 2 1\n\n\nOutput\n\n\n5\n2 1 1 2 3\n\n\nInput\n\n\n5\n3 7 5 1 5\n\n\nOutput\n\n\n2\n5 5 \n\n\nInput\n\n\n3\n5 1 4\n\n\nOutput\n\n\n2\n4 5 \n\n\nInput\n\n\n7\n2 2 3 2 1 2 2\n\n\nOutput\n\n\n7\n1 2 2 2 2 3 2 ",
        "task_name": "1157_F. Maximum Balanced Circle",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nn, a = int(input()), [int(x) for x in stdin.readline().split()]\nmem = [0] * 200002\nfor i in range(n):\n    mem[a[i]] += 1\n\nma = mem.index(max(mem))\nout, tem = [ma] * mem[ma], []\n\nfor i in range(1, 20):\n    if mem[i] < 2 and tem:\n        if mem[i] == 1:\n            tem.append(i)\n\n        su = sum([mem[j] for j in tem])\n        if su > len(out):\n            out = tem\n            for j in tem[::-1]:\n                out.extend([j] * (mem[j] - 1))\n\n        if not mem[i]:\n            tem = []\n        else:\n            tem = [tem[-1]]\n    elif mem[i]:\n        tem.append(i)\n\nprint('%d\\n%s' % (len(out), ' '.join(map(str, out))))\n",
        "correct": false,
        "task_id": "1156",
        "depth": 2
    },
    {
        "description": "Monocarp has got two strings s and t having equal length. Both strings consist of lowercase Latin letters \"a\" and \"b\". \n\nMonocarp wants to make these two strings s and t equal to each other. He can do the following operation any number of times: choose an index pos_1 in the string s, choose an index pos_2 in the string t, and swap s_{pos_1} with t_{pos_2}.\n\nYou have to determine the minimum number of operations Monocarp has to perform to make s and t equal, and print any optimal sequence of operations \u2014 or say that it is impossible to make these strings equal.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^{5}) \u2014 the length of s and t.\n\nThe second line contains one string s consisting of n characters \"a\" and \"b\". \n\nThe third line contains one string t consisting of n characters \"a\" and \"b\". \n\nOutput\n\nIf it is impossible to make these strings equal, print -1.\n\nOtherwise, in the first line print k \u2014 the minimum number of operations required to make the strings equal. In each of the next k lines print two integers \u2014 the index in the string s and the index in the string t that should be used in the corresponding swap operation. \n\nExamples\n\nInput\n\n\n4\nabab\naabb\n\n\nOutput\n\n\n2\n3 3\n3 2\n\n\nInput\n\n\n1\na\nb\n\n\nOutput\n\n\n-1\n\n\nInput\n\n\n8\nbabbaabb\nabababaa\n\n\nOutput\n\n\n3\n2 6\n1 3\n7 8\n\nNote\n\nIn the first example two operations are enough. For example, you can swap the third letter in s with the third letter in t. Then s =  \"abbb\", t =  \"aaab\". Then swap the third letter in s and the second letter in t. Then both s and t are equal to \"abab\".\n\nIn the second example it's impossible to make two strings equal.",
        "task_name": "1215_C. Swap Letters",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n\n# target Expert  \n\n# Author : raj1307 - Raj Singh\n# Date   : 15.09.19\n\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial,pi\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n#from itertools import permutations\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[0] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n\ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\n\n\n \n \ndef main():\n \n    \n \n    #for _ in range(ii()):\n        \n    \n\n\n    n=ii()\n    s=si()\n    t=si()\n\n    s=list(s)\n    t=list(t)\n\n\n    a=0\n    b=0\n\n    for i in range(n):\n        if s[i]=='a':\n            a+=1\n        else:\n            b+=1\n\n        if t[i]=='a':\n            a+=1\n        else:\n            b+=1\n\n\n\n    if a%2==1 or b%2==1:\n        print(-1)\n        exit()\n\n\n    a=[]\n\n    b=[]\n    for i in range(n):\n\n        if s[i]!=t[i]:\n\n            if s[i]=='a':\n\n                a.append(i)\n\n            else:\n\n                b.append(i)\n\n\n    ans=[]\n    \n\n\n    if len(a)%2==0:\n        nn=len(a)\n    else:\n        nn=len(a)-1\n        ans.append([a[-1]+1,a[-1]+1])\n        s[a[-1]],t[a[-1]]=t[a[-1]],s[a[-1]]\n\n    \n    for i in range(0,nn,2):\n\n        ans.append([a[i]+1,a[i+1]+1])\n        s[a[i]],t[a[i+1]]=t[a[i+1]],s[a[i]]\n\n        #print([a[i]+1,a[i+1]+1])\n\n    b=[]\n    for i in range(n):\n\n        if s[i]!=t[i]:\n\n            if s[i]=='a':\n\n                a.append(i)\n\n            else:\n\n                b.append(i)\n\n\n    for i in range(0,len(b),2):\n        ans.append([b[i]+1,b[i+1]+1])\n\n\n \n    print(len(a))\n    for i in ans:\n        print(*i)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    #read()\n    main()\n    #dmain()\n\n# Comment Read()\n",
        "correct": false,
        "task_id": "1158",
        "depth": 1
    },
    {
        "description": "Before the start of the football season in Berland a strange magic ritual is held. The most experienced magicians have to find a magic matrix of the size n \u00d7 n (n is even number). Gods will never allow to start the championship without it. Matrix should contain integers from 0 to n - 1, main diagonal should contain only zeroes and matrix should be symmetric. Moreover, all numbers in each row should be different. Magicians are very tired of the thinking process, so they ask you to write a program to find such matrix.\n\nInput\n\nThe first line contains one integer n (2 \u2264 n \u2264 1000), n is even.\n\nOutput\n\nOutput n lines with n numbers each \u2014 the required matrix. Separate numbers with spaces. If there are several solutions, output any.\n\nExamples\n\nInput\n\n2\n\n\nOutput\n\n0 1\n1 0\n\n\nInput\n\n4\n\n\nOutput\n\n0 1 3 2\n1 0 2 3\n3 2 0 1\n2 3 1 0",
        "task_name": "12_E. Start of the season",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from math import *\n\n\nn = int(raw_input())\nm = [[0 for i in range(n)] for j in range(n)]\nfor i in range(n):\n    if i%2 == 0:\n        for j in range(n):\n            m[j][(i+j)%n] = i\n    else:\n        for j in range(n):\n            m[j][(i-j)%n] = i\nfor i in range(n):\n    s = ''\n    for j in range(n):\n        s += ' ' + str(m[i][j])\n    print(s[1:])\n        \n\n\n\n\"\"\"from math import *\nfrom Queue import *\n\ndef bfs(G, start):\n    visited = set([start])\n    Q = Queue()\n    Ret = [start]\n    Q.put(start)\n    while not Q.empty():\n        vertex = Q.get()\n        for v in G[1][vertex]:\n            if v not in visited:\n                Q.put(v)\n                visited.add(v)\n                Ret.append(v)\n    return Ret\n\ndef longest_path(G):\n    l = bfs(G,G[0][0])\n    marked = set()\n    result = dict()\n    for i in l:\n        result[i] = [0,i,0,i]\n    for i in range(len(l)-1, -1, -1):\n        for j in G[1][l[i]]:\n            if j in marked:\n                if (result[j][2] > result[l[i]][2]) or ((result[j][2] == result[l[i]][2]) and (result[j][3] < result[l[i]][3])):\n                    result[l[i]][2] = result[j][2]\n                    result[l[i]][3] = result[j][3]\n                if (result[l[i]][0] + result[j][0] + 1 > result[l[i]][2]):\n                    result[l[i]][2] = result[l[i]][0] + result[j][0] + 1\n                    result[l[i]][3] = min(result[l[i]][1], result[j][1])\n                if ((result[l[i]][0] + result[j][0] + 1 == result[l[i]][2]) and (min(result[l[i]][1],result[j][1]) < result[l[i]][3])):\n                    result[l[i]][3] = min(result[l[i]][1],result[j][1])\n                if (result[j][0] + 1 > result[l[i]][0]) or ((result[j][0] + 1 == result[l[i]][0]) and (result[j][1] < result[l[i]][1])):\n                    result[l[i]][0] = result[j][0] + 1\n                    result[l[i]][1] = result[j][1]\n        marked.add(l[i])\n    return (result[l[0]][2], result[l[0]][3])\n\ndef remove(G,v):\n    ver = G[0]\n    ver.remove(v)\n    edg = dict()\n    for i in ver:\n        nb = []\n        for j in G[1][i]:\n            if j != v:\n                nb.append(j)\n        edg[i] = nb\n    return (ver, edg)\n\ndef harvest(G,M):\n    l = bfs(G,M[0])\n    seen = set()\n    delete = []\n    for i in range(len(l)-1, -1, -1):\n        seen.add(l[i])\n        if l[i] in M:\n            for j in G[1][l[i]]:\n                if j not in seen:\n                    M.append(j)\n        if l[i] not in M:\n            delete.append(l[i])\n    for i in delete:\n        G = remove(G,i)\n    return G\n\ns = raw_input()\nl = s.split(' ')\nn = int(l[0])\nm = int(l[1])\nV = []\nAdj = [[] for i in range(n+1)]\nfor i in range(1,n+1):\n    V.append(i)\nE = dict()\nfor i in range(n-1):\n    s = raw_input()\n    l = s.split(' ')\n    h = int(l[0])\n    t = int(l[1])\n    Adj[h].append(t)\n    Adj[t].append(h)\nE = dict()\nfor i in range(1, n+1):\n    E[i] = Adj[i]\nG = [V,E]\ns = raw_input()\nl = s.split(' ')\nM = []\nfor i in range(m):\n    M.append(int(l[i]))\nG = harvest(G,M)\nsol = longest_path(G)\nprint(sol[1])\nprint(2*len(G[0]) - 2 - sol[0])\"\"\"\n",
        "correct": false,
        "task_id": "1160",
        "depth": 2
    },
    {
        "description": "You are given some Tetris field consisting of n columns. The initial height of the i-th column of the field is a_i blocks. On top of these columns you can place only figures of size 2 \u00d7 1 (i.e. the height of this figure is 2 blocks and the width of this figure is 1 block). Note that you cannot rotate these figures.\n\nYour task is to say if you can clear the whole field by placing such figures.\n\nMore formally, the problem can be described like this:\n\nThe following process occurs while at least one a_i is greater than 0:\n\n  1. You place one figure 2 \u00d7 1 (choose some i from 1 to n and replace a_i with a_i + 2); \n  2. then, while all a_i are greater than zero, replace each a_i with a_i - 1. \n\n\n\nAnd your task is to determine if it is possible to clear the whole field (i.e. finish the described process), choosing the places for new figures properly.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of test cases.\n\nThe next 2t lines describe test cases. The first line of the test case contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of columns in the Tetris field. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 100), where a_i is the initial height of the i-th column of the Tetris field.\n\nOutput\n\nFor each test case, print the answer \u2014 \"YES\" (without quotes) if you can clear the whole Tetris field and \"NO\" otherwise.\n\nExample\n\nInput\n\n\n4\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n\n\nOutput\n\n\nYES\nNO\nYES\nYES\n\nNote\n\nThe first test case of the example field is shown below:\n\n<image>\n\nGray lines are bounds of the Tetris field. Note that the field has no upper bound.\n\nOne of the correct answers is to first place the figure in the first column. Then after the second step of the process, the field becomes [2, 0, 2]. Then place the figure in the second column and after the second step of the process, the field becomes [0, 0, 0].\n\nAnd the second test case of the example field is shown below:\n\n<image>\n\nIt can be shown that you cannot do anything to end the process.\n\nIn the third test case of the example, you first place the figure in the second column after the second step of the process, the field becomes [0, 2]. Then place the figure in the first column and after the second step of the process, the field becomes [0, 0].\n\nIn the fourth test case of the example, place the figure in the first column, then the field becomes [102] after the first step of the process, and then the field becomes [0] after the second step of the process.",
        "task_name": "1324_A. Yet Another Tetris Problem",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\n \nfor i in range(n):\n\tcolumns = int(raw_input())\n\tblockColumn = [int(x) for x in raw_input().split(\" \")]\n\tacc = 0\n\tallOdds = True\n\tdoesntHaveZero = True\n\tfor col in blockColumn:\n\t\tacc += col\n\t\tif (col == 0): doesntHaveZero = False\n\t\tif (col % 2 == 0): allOdds = False\n\tif ((n == 1) or (acc == 0) or (allOdds and doesntHaveZero)):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")",
        "correct": false,
        "task_id": "1161",
        "depth": 2
    },
    {
        "description": "You are given three positive (i.e. strictly greater than zero) integers x, y and z.\n\nYour task is to find positive integers a, b and c such that x = max(a, b), y = max(a, c) and z = max(b, c), or determine that it is impossible to find such a, b and c.\n\nYou have to answer t independent test cases. Print required a, b and c in any (arbitrary) order.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains three integers x, y, and z (1 \u2264 x, y, z \u2264 10^9).\n\nOutput\n\nFor each test case, print the answer:\n\n  * \"NO\" in the only line of the output if a solution doesn't exist; \n  * or \"YES\" in the first line and any valid triple of positive integers a, b and c (1 \u2264 a, b, c \u2264 10^9) in the second line. You can print a, b and c in any order. \n\nExample\n\nInput\n\n\n5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n\n\nOutput\n\n\nYES\n3 2 1\nYES\n100 100 100\nNO\nNO\nYES\n1 1 1000000000",
        "task_name": "1385_A. Three Pairwise Maximums",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n# Author : raj1307 - Raj Singh\n# Date   : 17.07.2020\n\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii():  return int(input())\ndef si():  return input()\ndef mi():  return map(int,input().strip().split(\" \"))\ndef msi(): return map(str,input().strip().split(\" \"))\ndef li():  return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(1000000)\n    threading.stack_size(1024000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import log,sqrt,factorial,cos,tan,sin,radians\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *\n#import threading\n#from itertools import permutations\n#Copy 2D list  m = [x[:] for x in mark] .. Avoid Using Deepcopy\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[1] \ndef sort2(l):return sorted(l, key=getKey,reverse=True)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\ndef ncr(n,r): return factorial(n)//(factorial(r)*factorial(max(n-r,1)))\n\ndef ceil(x,y):\n    if x%y==0:\n        return x//y\n    else:\n        return x//y+1\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n\ndef read():\n    sys.stdin  = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\n\n\n\ndef main():\n    \n\n    for _ in range(ii()):\n\n        l=li()\n\n        x=l[:]\n        x.sort()\n\n        if x[2]!=x[1]:\n            print('NO')\n            continue\n\n\n\n\n\n\n        if len(set(l))==3:\n            print('NO')\n        else:\n            print('YES')\n\n            if len(set(l))==1:\n                print(l[0],l[0],l[0])\n            else:\n\n                if l[0]!=l[1]:\n\n                    if l[0]>l[1]:\n                        print(l[0],l[1],l[0])\n                        continue\n\n                if l[1]!=l[2]:\n\n                    if l[1]>l[2]:\n                        print(l[1],l[1],l[2])\n                        continue\n\n                if l[2]!=l[0]:\n\n                    if l[2]>l[0]:\n                        print(l[0],l[2],l[2])\n                        continue\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# region fastio\n# template taken from https://github.com/cheran-senthil/PyRival/blob/master/templates/template.py\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    #read()\n    main()\n    #dmain()\n\n# Comment Read()\n",
        "correct": false,
        "task_id": "1163",
        "depth": 1
    },
    {
        "description": "You are given a sequence of n integers a_1, a_2, \u2026, a_n.\n\nYou have to construct two sequences of integers b and c with length n that satisfy:\n\n  * for every i (1\u2264 i\u2264 n) b_i+c_i=a_i \n  * b is non-decreasing, which means that for every 1<i\u2264 n, b_i\u2265 b_{i-1} must hold \n  * c is non-increasing, which means that for every 1<i\u2264 n, c_i\u2264 c_{i-1} must hold \n\n\n\nYou have to minimize max(b_i,c_i). In other words, you have to minimize the maximum number in sequences b and c.\n\nAlso there will be q changes, the i-th change is described by three integers l,r,x. You should add x to a_l,a_{l+1}, \u2026, a_r. \n\nYou have to find the minimum possible value of max(b_i,c_i) for the initial sequence and for sequence after each change.\n\nInput\n\nThe first line contains an integer n (1\u2264 n\u2264 10^5).\n\nThe secound line contains n integers a_1,a_2,\u2026,a_n (1\u2264 i\u2264 n, -10^9\u2264 a_i\u2264 10^9).\n\nThe third line contains an integer q (1\u2264 q\u2264 10^5).\n\nEach of the next q lines contains three integers l,r,x (1\u2264 l\u2264 r\u2264 n,-10^9\u2264 x\u2264 10^9), desribing the next change. \n\nOutput\n\nPrint q+1 lines.\n\nOn the i-th (1 \u2264 i \u2264 q+1) line, print the answer to the problem for the sequence after i-1 changes.\n\nExamples\n\nInput\n\n\n4\n2 -1 7 3\n2\n2 4 -3\n3 4 2\n\n\nOutput\n\n\n5\n5\n6\n\n\nInput\n\n\n6\n-9 -10 -9 -6 -5 4\n3\n2 6 -9\n1 2 -10\n4 6 -3\n\n\nOutput\n\n\n3\n3\n3\n1\n\n\nInput\n\n\n1\n0\n2\n1 1 -1\n1 1 -1\n\n\nOutput\n\n\n0\n0\n-1\n\nNote\n\nIn the first test:\n\n  * The initial sequence a = (2, -1, 7, 3). Two sequences b=(-3,-3,5,5),c=(5,2,2,-2) is a possible choice. \n  * After the first change a = (2, -4, 4, 0). Two sequences b=(-3,-3,5,5),c=(5,-1,-1,-5) is a possible choice. \n  * After the second change a = (2, -4, 6, 2). Two sequences b=(-4,-4,6,6),c=(6,0,0,-4) is a possible choice. ",
        "task_name": "1406_D. Three Sequences",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n# import threading\n# threading.stack_size(2**27)\nimport sys\nsys.setrecursionlimit(10**4)\n# sys.stdin = open('inpy.txt', 'r')\n# sys.stdout = open('outpy.txt', 'w')\nfrom sys import stdin, stdout\nimport bisect            #c++ upperbound\nimport math\nimport heapq\ni_m=9223372036854775807\ndef modinv(n,p):\n    return pow(n,p-2,p)\ndef cin():\n    return map(int,sin().split())\ndef ain():                           #takes array as input\n    return list(map(int,sin().split()))\ndef sin():\n    return input()\ndef inin():\n    return int(input())\nimport math  \ndef GCD(x, y): \n    x=abs(x)\n    y=abs(y)\n    if(min(x,y)==0):\n        return max(x,y)\n    while(y): \n        x, y = y, x % y \n    return x \ndef Divisors(n) : \n    l = []  \n    for i in range(1, int(math.sqrt(n) + 1)) :\n        if (n % i == 0) : \n            if (n // i == i) : \n                l.append(i) \n            else : \n                l.append(i)\n                l.append(n//i)\n    return l\nprime=[]\ndef SieveOfEratosthenes(n): \n    global prime\n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n    f=[]\n    for p in range(2, n): \n        if prime[p]: \n            f.append(p)\n    return f\ndef primeFactors(n): \n    a=[]\n    # Print the number of two's that divide n \n    while n % 2 == 0: \n        a.append(2) \n        n = n // 2\n          \n    # n must be odd at this point \n    # so a skip of 2 ( i = i + 2) can be used \n    for i in range(3,int(math.sqrt(n))+1,2): \n          \n        # while i divides n , print i ad divide n \n        while n % i== 0: \n            a.append(i) \n            n = n // i \n              \n    # Condition if n is a prime \n    # number greater than 2 \n    if n > 2: \n        a.append(n)\n    return a\n\n\"\"\"*******************************************************\"\"\"\ndef main():\n    n = inin()\n    a = ain()\n    d=[]\n    p=0\n    for i in range(0,n-1):\n        d.append(a[i+1]-a[i])\n        p+=max(a[i+1]-a[i],0)\n    print((a[0] - p + 1) // 2 + p)\n    t=inin()\n    for _ in range(t):\n        l,r,x=cin()\n        l-=1\n        r-=1\n        if l == 0:\n            a[0] += x\n        if l > 0:\n            p -= max(0, d[l - 1])\n            d[l - 1] += x\n            p += max(0, d[l - 1])\n        if r < n - 1:\n            p -= max(0, d[r])\n            d[r] -= x\n            p += max(0, d[r])\n        print((a[0] - p + 1) // 2 + p)\n######## Python 2 and 3 footer by Pajenegod and c1729\n \n# Note because cf runs old PyPy3 version which doesn't have the sped up\n# unicode strings, PyPy3 strings will many times be slower than pypy2.\n# There is a way to get around this by using binary strings in PyPy3\n# but its syntax is yferent which makes it kind of a mess to use.\n \n# So on cf, use PyPy2 for best string performance.\n \npy2 = round(0.5)\nif py2:\n    from future_builtins import ascii, filter, hex, map, oct, zip\n    range = xrange\n \nimport os, sys\nfrom io import IOBase, BytesIO\n \nBUFSIZE = 8192\nclass FastIO(BytesIO):\n    newlines = 0\n \n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.writable = \"x\" in file.mode or \"w\" in file.mode\n        self.write = super(FastIO, self).write if self.writable else None\n \n    def _fill(self):\n        s = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n        self.seek((self.tell(), self.seek(0,2), super(FastIO, self).write(s))[0])\n        return s\n \n    def read(self):\n        while self._fill(): pass\n        return super(FastIO,self).read()\n \n    def readline(self):\n        while self.newlines == 0:\n            s = self._fill(); self.newlines = s.count(b\"\\n\") + (not s)\n        self.newlines -= 1\n        return super(FastIO, self).readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.getvalue())\n            self.truncate(0), self.seek(0)\n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        if py2:\n            self.write = self.buffer.write\n            self.read = self.buffer.read\n            self.readline = self.buffer.readline\n        else:\n            self.write = lambda s:self.buffer.write(s.encode('ascii'))\n            self.read = lambda:self.buffer.read().decode('ascii')\n            self.readline = lambda:self.buffer.readline().decode('ascii')\n \n \nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n \n# Cout implemented in Python\nimport sys\nclass ostream:\n    def __lshift__(self,a):\n        sys.stdout.write(str(a))\n        return self\ncout = ostream()\nendl = '\\n'\n \n# Read all remaining integers in stdin, type is given by optional argument, this is fast\ndef readnumbers(zero = 0):\n    conv = ord if py2 else lambda x:x\n    A = []; numb = zero; sign = 1; i = 0; s = sys.stdin.buffer.read()\n    try:\n        while True:\n            if s[i] >= b'R' [0]:\n                numb = 10 * numb + conv(s[i]) - 48\n            elif s[i] == b'-' [0]: sign = -1\n            elif s[i] != b'\\r' [0]:\n                A.append(sign*numb)\n                numb = zero; sign = 1\n            i += 1\n    except:pass\n    if s and s[-1] >= b'R' [0]:\n        A.append(sign*numb)\n    return A\n \n# threading.Thread(target=main).start()\nif __name__== \"__main__\":\n  main()",
        "correct": true,
        "task_id": "1164",
        "depth": 2
    },
    {
        "description": "You have a blackboard and initially only an odd number x is written on it. Your goal is to write the number 1 on the blackboard.\n\nYou may write new numbers on the blackboard with the following two operations. \n\n  * You may take two numbers (not necessarily distinct) already on the blackboard and write their sum on the blackboard. The two numbers you have chosen remain on the blackboard. \n  * You may take two numbers (not necessarily distinct) already on the blackboard and write their [bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) on the blackboard. The two numbers you have chosen remain on the blackboard. \n\nPerform a sequence of operations such that at the end the number 1 is on the blackboard.\n\nInput\n\nThe single line of the input contains the odd integer x (3 \u2264 x \u2264 999,999).\n\nOutput\n\nPrint on the first line the number q of operations you perform. Then q lines should follow, each describing one operation. \n\n  * The \"sum\" operation is described by the line \"a + b\", where a, b must be integers already present on the blackboard. \n  * The \"xor\" operation is described by the line \"a ^ b\", where a, b must be integers already present on the blackboard. \n\nThe operation symbol (+ or ^) must be separated from a, b by a whitespace.\n\nYou can perform at most 100,000 operations (that is, q\u2264 100,000) and all numbers written on the blackboard must be in the range [0, 5\u22c510^{18}]. It can be proven that under such restrictions the required sequence of operations exists. You can output any suitable sequence of operations.\n\nExamples\n\nInput\n\n\n3\n\n\nOutput\n\n\n5\n3 + 3\n3 ^ 6\n3 + 5\n3 + 6\n8 ^ 9\n\n\nInput\n\n\n123\n\n\nOutput\n\n\n10\n123 + 123\n123 ^ 246\n141 + 123\n246 + 123\n264 ^ 369\n121 + 246\n367 ^ 369\n30 + 30\n60 + 60\n120 ^ 121",
        "task_name": "1427_E. Xum",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#   Author: yumtam\n#   Created at: 2020-10-11 02:16\n\nfrom __future__ import division, print_function\n_interactive = False\n\ndef main():\n    n = int(input())\n\n    def parse(n):\n        return [int(c) for c in bin(n)[2:]]\n\n    s = parse(n)\n\n    ans = []\n    def padd(a, b):\n        ans.append(str(a) + ' + ' + str(b))\n        return a + b\n\n    def pxor(a, b):\n        ans.append(str(a) + ' ^ ' + str(b))\n        return a ^ b\n\n    if s[-2] == 1:\n        n2 = padd(n, n)\n        n = pxor(n2, n)\n        s = parse(n)\n\n    k = len(s)\n    pn = n\n    for _ in range(k-1):\n        pn = padd(pn, pn)\n\n    t = padd(pn, n)\n    t = pxor(t, pn)\n    base = pxor(t, n)\n\n    for ki in reversed(range(k)):\n        pn = n\n        for _ in range(ki):\n            pn = padd(pn, pn)\n            if base & pn == base:\n                pn = pxor(pn, base)\n        base = pn\n        if base & n == base:\n            n = pxor(n, base)\n            if n == 1:\n                break\n\n    print(len(ans))\n    print('\\n'.join(ans))\n\n\n# Constants\nINF = float('inf')\nMOD = 10**9+7\n\n# Python3 equivalent names\nimport os, sys, itertools\nif sys.version_info[0] < 3:\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\n# print-flush in interactive problems\nif _interactive:\n    flush = sys.stdout.flush\n    def printf(*args, **kwargs):\n        print(*args, **kwargs)\n        flush()\n\n# Debug print, only works on local machine\nLOCAL = \"LOCAL_\" in os.environ\ndebug_print = (print) if LOCAL else (lambda *x, **y: None)\n\n# Fast IO\nif (not LOCAL) and (not _interactive):\n    from io import BytesIO\n    from atexit import register\n    sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\n    sys.stdout = BytesIO()\n    register(lambda: os.write(1, sys.stdout.getvalue()))\n    input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# Some utility functions(Input, N-dimensional lists, ...)\ndef input_as_list():\n    return [int(x) for x in input().split()]\n\ndef input_with_offset(o):\n    return [int(x)+o for x in input().split()]\n\ndef input_as_matrix(n, m):\n    return [input_as_list() for _ in range(n)]\n\ndef array_of(f, *dim):\n    return [array_of(f, *dim[1:]) for _ in range(dim[0])] if dim else f()\n\n# Start of external code templates...\n# End of external code templates.\n\nmain()\n",
        "correct": true,
        "task_id": "1165",
        "depth": 2
    },
    {
        "description": "By 2312 there were n Large Hadron Colliders in the inhabited part of the universe. Each of them corresponded to a single natural number from 1 to n. However, scientists did not know what activating several colliders simultaneously could cause, so the colliders were deactivated.\n\nIn 2312 there was a startling discovery: a collider's activity is safe if and only if all numbers of activated colliders are pairwise relatively prime to each other (two numbers are relatively prime if their greatest common divisor equals 1)! If two colliders with relatively nonprime numbers are activated, it will cause a global collapse.\n\nUpon learning this, physicists rushed to turn the colliders on and off and carry out all sorts of experiments. To make sure than the scientists' quickness doesn't end with big trouble, the Large Hadron Colliders' Large Remote Control was created. You are commissioned to write the software for the remote (well, you do not expect anybody to operate it manually, do you?).\n\nInitially, all colliders are deactivated. Your program receives multiple requests of the form \"activate/deactivate the i-th collider\". The program should handle requests in the order of receiving them. The program should print the processed results in the format described below.\n\nTo the request of \"+ i\" (that is, to activate the i-th collider), the program should print exactly one of the following responses: \n\n  * \"Success\" if the activation was successful. \n  * \"Already on\", if the i-th collider was already activated before the request. \n  * \"Conflict with j\", if there is a conflict with the j-th collider (that is, the j-th collider is on, and numbers i and j are not relatively prime). In this case, the i-th collider shouldn't be activated. If a conflict occurs with several colliders simultaneously, you should print the number of any of them. \n\n\n\nThe request of \"- i\" (that is, to deactivate the i-th collider), should receive one of the following responses from the program: \n\n  * \"Success\", if the deactivation was successful. \n  * \"Already off\", if the i-th collider was already deactivated before the request. \n\n\n\nYou don't need to print quotes in the output of the responses to the requests.\n\nInput\n\nThe first line contains two space-separated integers n and m (1 \u2264 n, m \u2264 105) \u2014 the number of colliders and the number of requests, correspondingly.\n\nNext m lines contain numbers of requests, one per line, in the form of either \"+ i\" (without the quotes) \u2014 activate the i-th collider, or \"- i\" (without the quotes) \u2014 deactivate the i-th collider (1 \u2264 i \u2264 n).\n\nOutput\n\nPrint m lines \u2014 the results of executing requests in the above given format. The requests should be processed in the order, in which they are given in the input. Don't forget that the responses to the requests should be printed without quotes.\n\nExamples\n\nInput\n\n10 10\n+ 6\n+ 10\n+ 5\n- 10\n- 5\n- 6\n+ 10\n+ 3\n+ 6\n+ 3\n\n\nOutput\n\nSuccess\nConflict with 6\nSuccess\nAlready off\nSuccess\nSuccess\nSuccess\nSuccess\nConflict with 10\nAlready on\n\nNote\n\nNote that in the sample the colliders don't turn on after the second and ninth requests. The ninth request could also receive response \"Conflict with 3\".",
        "task_name": "155_D. Colliders",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\n\ndef count_prime(n):\n    prim[1] = 1\n    for i in range(2, n):\n        if not prim[i]:\n            for j in range(i, n, i):\n                prim[j] = i\n\n\ndef prime_factor(x):\n    fac = []\n    while x > 1:\n        div = prim[x]\n        fac.append(div)\n\n        while x % div == 0:\n            x //= div\n    return fac\n\n\nMax, out = 100001, []\nrstrs = lambda: [str(x) for x in stdin.readline().split()]\nrints = lambda: [int(x) for x in stdin.readline().split()]\nprim, mem = [0] * Max, [set() for _ in range(Max)]\ncount_prime(Max)\n\nn, m = rints()\nfor _ in range(m):\n    sign, num = rstrs()\n    num = int(num)\n    facs = prime_factor(num)\n\n    if sign == '-':\n        if num == 1:\n            out.append('Already off' if not mem[1] else 'Success')\n            mem[1].discard(1)\n        else:\n            ans = 'Already off'\n            for i in facs:\n                if num in mem[i]:\n                    mem[i].discard(num)\n                    ans = 'Success'\n\n            out.append(ans)\n\n    else:\n        if num == 1:\n            out.append('Already on' if mem[1] else 'Success')\n            mem[1].add(1)\n        else:\n            ans = 'Success'\n            for i in facs:\n                if num not in mem[i]:\n                    mem[i].add(num)\n                elif ans == 'Success':\n                    ans = 'Already on'\n\n                if len(mem[i]) > 1:\n                    mem[i].discard(num)\n                    j = mem[i].pop()\n                    ans = 'Conflict with %d' % j\n                    mem[i].add(j)\n                    break\n\n            if ans[0] == 'C':\n                for i in facs:\n                    mem[i].discard(num)\n\n            out.append(ans)\n\nprint('\\n'.join(map(str, out)))\n",
        "correct": true,
        "task_id": "1167",
        "depth": 2
    },
    {
        "description": "The Smart Beaver from ABBYY invented a new message encryption method and now wants to check its performance. Checking it manually is long and tiresome, so he decided to ask the ABBYY Cup contestants for help.\n\nA message is a sequence of n integers a1, a2, ..., an. Encryption uses a key which is a sequence of m integers b1, b2, ..., bm (m \u2264 n). All numbers from the message and from the key belong to the interval from 0 to c - 1, inclusive, and all the calculations are performed modulo c.\n\nEncryption is performed in n - m + 1 steps. On the first step we add to each number a1, a2, ..., am a corresponding number b1, b2, ..., bm. On the second step we add to each number a2, a3, ..., am + 1 (changed on the previous step) a corresponding number b1, b2, ..., bm. And so on: on step number i we add to each number ai, ai + 1, ..., ai + m - 1 a corresponding number b1, b2, ..., bm. The result of the encryption is the sequence a1, a2, ..., an after n - m + 1 steps.\n\nHelp the Beaver to write a program that will encrypt messages in the described manner.\n\nInput\n\nThe first input line contains three integers n, m and c, separated by single spaces. \n\nThe second input line contains n integers ai (0 \u2264 ai < c), separated by single spaces \u2014 the original message. \n\nThe third input line contains m integers bi (0 \u2264 bi < c), separated by single spaces \u2014 the encryption key.\n\nThe input limitations for getting 30 points are: \n\n  * 1 \u2264 m \u2264 n \u2264 103\n  * 1 \u2264 c \u2264 103\n\n\n\nThe input limitations for getting 100 points are: \n\n  * 1 \u2264 m \u2264 n \u2264 105\n  * 1 \u2264 c \u2264 103\n\nOutput\n\nPrint n space-separated integers \u2014 the result of encrypting the original message.\n\nExamples\n\nInput\n\n4 3 2\n1 1 1 1\n1 1 1\n\n\nOutput\n\n0 1 1 0\n\n\nInput\n\n3 1 5\n1 2 3\n4\n\n\nOutput\n\n0 1 2\n\nNote\n\nIn the first sample the encryption is performed in two steps: after the first step a = (0, 0, 0, 1) (remember that the calculations are performed modulo 2), after the second step a = (0, 1, 1, 0), and that is the answer. ",
        "task_name": "177_D2. Encrypting Messages",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "try: input = raw_input\nexcept: pass\n\ndef slow():\n    result = [r for r in msg]\n    for i in range(n-m+1):\n        for k in range(m):\n            result[i+k] = (result[i+k] + key[k]) % c\n    return result\n\ndef faster():\n    result = [r for r in msg]\n    total = sum(key)\n    inckeys = []\n    t = 0\n    for i in range(m):\n        t += key[i]\n        inckeys.append(t)\n    lastkeys = []\n    for i in range(m-1):\n        lastkeys.append(total - inckeys[i])\n    \n        \n    for i in range(0, min(m, n-m+1)):\n        result[i] = (result[i] + inckeys[i]) % c\n    for i in range(m, n-m+1):\n        result[i] = (result[i] + total) % c\n    k = 0\n    for i in range(n-m+1, n):\n        t = lastkeys[k] if i >= m - 1 else lastkeys[k] - lastkeys[len(lastkeys) - 1 - (m - i - 2)]\n        result[i] = (result[i] + t) % c\n        k += 1\n    return result\n        \n\nn, m, c = list(map(int, input().split()))\nmsg = list(map(int, input().split()))\nkey = list(map(int, input().split()))\n#r1 = slow()\nr2 = faster()\n#if r1 != r2:\n#    print(\"No match!\")\n#    print(\" \".join(map(str, enumerate(r1))))\nprint(\" \".join(map(str, r2)))",
        "correct": true,
        "task_id": "1168",
        "depth": 2
    },
    {
        "description": "One day shooshuns found a sequence of n integers, written on a blackboard. The shooshuns can perform one operation with it, the operation consists of two steps:\n\n  1. Find the number that goes k-th in the current sequence and add the same number to the end of the sequence; \n  2. Delete the first number of the current sequence. \n\n\n\nThe shooshuns wonder after how many operations all numbers on the board will be the same and whether all numbers will ever be the same.\n\nInput\n\nThe first line contains two space-separated integers n and k (1 \u2264 k \u2264 n \u2264 105).\n\nThe second line contains n space-separated integers: a1, a2, ..., an (1 \u2264 ai \u2264 105) \u2014 the sequence that the shooshuns found.\n\nOutput\n\nPrint the minimum number of operations, required for all numbers on the blackboard to become the same. If it is impossible to achieve, print -1.\n\nExamples\n\nInput\n\n3 2\n3 1 1\n\n\nOutput\n\n1\n\n\nInput\n\n3 1\n3 1 1\n\n\nOutput\n\n-1\n\nNote\n\nIn the first test case after the first operation the blackboard will have sequence [1, 1, 1]. So, one operation is enough to make all numbers the same. Thus, the answer equals one.\n\nIn the second test case the sequence will never consist of the same numbers. It will always contain at least two distinct numbers 3 and 1. Thus, the answer equals -1.",
        "task_name": "222_A. Shooshuns and Sequence ",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,k = map(int,raw_input().split())\n\nls = map(int,raw_input().split())\ntmp = ls[k-1]\ncheck = True\nfor i in range(k,n):\n    if ls[i]!=tmp:\n        check = False\n\nif check:\n    print(k-1)\nelse:\n    print(-1)",
        "correct": false,
        "task_id": "1169",
        "depth": 1
    },
    {
        "description": "Shaass has n books. He wants to make a bookshelf for all his books. He wants the bookshelf's dimensions to be as small as possible. The thickness of the i-th book is ti and its pages' width is equal to wi. The thickness of each book is either 1 or 2. All books have the same page heights.\n\n<image>\n\nShaass puts the books on the bookshelf in the following way. First he selects some of the books and put them vertically. Then he puts the rest of the books horizontally above the vertical books. The sum of the widths of the horizontal books must be no more than the total thickness of the vertical books. A sample arrangement of the books is depicted in the figure.\n\n<image>\n\nHelp Shaass to find the minimum total thickness of the vertical books that we can achieve.\n\nInput\n\nThe first line of the input contains an integer n, (1 \u2264 n \u2264 100). Each of the next n lines contains two integers ti and wi denoting the thickness and width of the i-th book correspondingly, (1 \u2264 ti \u2264 2, 1 \u2264 wi \u2264 100).\n\nOutput\n\nOn the only line of the output print the minimum total thickness of the vertical books that we can achieve.\n\nExamples\n\nInput\n\n5\n1 12\n1 3\n2 15\n2 5\n2 1\n\n\nOutput\n\n5\n\n\nInput\n\n3\n1 10\n2 1\n2 4\n\n\nOutput\n\n3",
        "task_name": "294_B. Shaass and Bookshelf",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\n\nmyBooks = []\nW = 0\n\nfor i in range(0,n):\n    t, w = map(int, raw_input().split())\n    W += w\n    myBooks.append([w, t])\n    \nmyBooks.sort()\nmyBooks.reverse()\n\nT = 0\nfor book in myBooks:\n    T += book[1]\n    W -= book[0]\n    if(W<=T):\n        break\n    \nprint(T)\n",
        "correct": false,
        "task_id": "1170",
        "depth": 1
    },
    {
        "description": "You have array a1, a2, ..., an. Segment [l, r] (1 \u2264 l \u2264 r \u2264 n) is good if ai = ai - 1 + ai - 2, for all i (l + 2 \u2264 i \u2264 r).\n\nLet's define len([l, r]) = r - l + 1, len([l, r]) is the length of the segment [l, r]. Segment [l1, r1], is longer than segment [l2, r2], if len([l1, r1]) > len([l2, r2]).\n\nYour task is to find a good segment of the maximum length in array a. Note that a segment of length 1 or 2 is always good.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 105) \u2014 the number of elements in the array. The second line contains integers: a1, a2, ..., an (0 \u2264 ai \u2264 109).\n\nOutput\n\nPrint the length of the longest good segment in array a.\n\nExamples\n\nInput\n\n10\n1 2 3 5 8 13 21 34 55 89\n\n\nOutput\n\n10\n\n\nInput\n\n5\n1 1 1 1 1\n\n\nOutput\n\n2",
        "task_name": "365_B. The Fibonacci Segment",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=input()\na=[int(x) for x in raw_input().split()]\nb=[1]\nc=[]\nfor i in range(2,n):\n\tif a[i]!=a[i-1]+a[i-2]:\n\t\tb.append(i)\nb.append(n)\t\t\nfor i in range(1,len(b)):\n\tc.append(b[i]-b[i-1]+1)\nif n==1:\n\tprint('1')\nelif n==2:\n\tprint('2')\nelif len(c)==0:\n\tprint(n)\t\nelse:\n\tprint(max(c))\t\t\t\n\n",
        "correct": true,
        "task_id": "1171",
        "depth": 1
    },
    {
        "description": "Fox Ciel is playing a game with numbers now. \n\nCiel has n positive integers: x1, x2, ..., xn. She can do the following operation as many times as needed: select two different indexes i and j such that xi > xj hold, and then apply assignment xi = xi - xj. The goal is to make the sum of all numbers as small as possible.\n\nPlease help Ciel to find this minimal sum.\n\nInput\n\nThe first line contains an integer n (2 \u2264 n \u2264 100). Then the second line contains n integers: x1, x2, ..., xn (1 \u2264 xi \u2264 100).\n\nOutput\n\nOutput a single integer \u2014 the required minimal sum.\n\nExamples\n\nInput\n\n2\n1 2\n\n\nOutput\n\n2\n\n\nInput\n\n3\n2 4 6\n\n\nOutput\n\n6\n\n\nInput\n\n2\n12 18\n\n\nOutput\n\n12\n\n\nInput\n\n5\n45 12 27 30 18\n\n\nOutput\n\n15\n\nNote\n\nIn the first example the optimal way is to do the assignment: x2 = x2 - x1.\n\nIn the second example the optimal sequence of operations is: x3 = x3 - x2, x2 = x2 - x1.",
        "task_name": "389_A. Fox and Number Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=int(raw_input())\nx=raw_input().split(\" \")\nfor i in xrange(len(x)):\n\tx[i]=int(x[i])\nx.sort()\nsolved=False\nwhile True:\n\t#print x\n\tx.sort()\n\tfor j in xrange(n-1):\n\t\tif x[j+1] > x[j]:\n\t\t\tx[j+1]=x[j+1]-x[j]\n\tsolved=True\n\tfor j in xrange(n-1):\n\t\tif x[j+1]!=x[j]:\n\t\t\tsolved=False\n\t\t\tbreak\n\tif solved: break\n\t#print x\nprint (x[0]*n)\n",
        "correct": true,
        "task_id": "1172",
        "depth": 2
    },
    {
        "description": "Today Vasya visited a widely known site and learned that the continuation of his favourite game Codecraft II will appear after exactly k months. He looked at the calendar and learned that at the moment is the month number s. Vasya immediately got interested in what month Codecraft III will appear. Help him understand that.\n\nAll the twelve months in Vasya's calendar are named using their usual English names: January, February, March, April, May, June, July, August, September, October, November, December.\n\nInput\n\nThe first input line contains the name of the current month. It is guaranteed that it is a proper English name of one of twelve months. The first letter is uppercase, the rest are lowercase. The second line contains integer k (0 \u2264 k \u2264 100) \u2014 the number of months left till the appearance of Codecraft III.\n\nOutput\n\nPrint starting from an uppercase letter the name of the month in which the continuation of Codeforces II will appear. The printed name must be contained in the list January, February, March, April, May, June, July, August, September, October, November, December.\n\nExamples\n\nInput\n\nNovember\n3\n\n\nOutput\n\nFebruary\n\n\nInput\n\nMay\n24\n\n\nOutput\n\nMay",
        "task_name": "45_A. Codecraft III",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s=raw_input()\nt=raw_input()\n\ndef is_trans_correct(lang1,lang2):\n  lang1_rev = \"\"\n  output = \"No\"\n  \n  if len(lang1) != len(lang2):\n      return output\n  \n  for i in range(len(lang1)):\n    lang1_rev = lang1[i] + lang1_rev\n    \n  \n  if lang1_rev == lang2:\n    output = \"Yes\"\n    \n  return output\n    \n    \nprint(is_trans_correct(s,t))",
        "correct": false,
        "task_id": "1174",
        "depth": 1
    },
    {
        "description": "Andrewid the Android is a galaxy-famous detective. He is now investigating the case of vandalism at the exhibition of contemporary art.\n\nThe main exhibit is a construction of n matryoshka dolls that can be nested one into another. The matryoshka dolls are numbered from 1 to n. A matryoshka with a smaller number can be nested in a matryoshka with a higher number, two matryoshkas can not be directly nested in the same doll, but there may be chain nestings, for example, 1 \u2192 2 \u2192 4 \u2192 5. \n\nIn one second, you can perform one of the two following operations:\n\n  * Having a matryoshka a that isn't nested in any other matryoshka and a matryoshka b, such that b doesn't contain any other matryoshka and is not nested in any other matryoshka, you may put a in b; \n  * Having a matryoshka a directly contained in matryoshka b, such that b is not nested in any other matryoshka, you may get a out of b. \n\n\n\nAccording to the modern aesthetic norms the matryoshka dolls on display were assembled in a specific configuration, i.e. as several separate chains of nested matryoshkas, but the criminal, following the mysterious plan, took out all the dolls and assembled them into a single large chain (1 \u2192 2 \u2192 ... \u2192 n). In order to continue the investigation Andrewid needs to know in what minimum time it is possible to perform this action.\n\nInput\n\nThe first line contains integers n (1 \u2264 n \u2264 105) and k (1 \u2264 k \u2264 105) \u2014 the number of matryoshkas and matryoshka chains in the initial configuration.\n\nThe next k lines contain the descriptions of the chains: the i-th line first contains number mi (1 \u2264 mi \u2264 n), and then mi numbers ai1, ai2, ..., aimi \u2014 the numbers of matryoshkas in the chain (matryoshka ai1 is nested into matryoshka ai2, that is nested into matryoshka ai3, and so on till the matryoshka aimi that isn't nested into any other matryoshka).\n\nIt is guaranteed that m1 + m2 + ... + mk = n, the numbers of matryoshkas in all the chains are distinct, in each chain the numbers of matryoshkas follow in the ascending order.\n\nOutput\n\nIn the single line print the minimum number of seconds needed to assemble one large chain from the initial configuration.\n\nExamples\n\nInput\n\n3 2\n2 1 2\n1 3\n\n\nOutput\n\n1\n\n\nInput\n\n7 3\n3 1 3 7\n2 2 5\n2 4 6\n\n\nOutput\n\n10\n\nNote\n\nIn the first sample test there are two chains: 1 \u2192 2 and 3. In one second you can nest the first chain into the second one and get 1 \u2192 2 \u2192 3.\n\nIn the second sample test you need to disassemble all the three chains into individual matryoshkas in 2 + 1 + 1 = 4 seconds and then assemble one big chain in 6 seconds.",
        "task_name": "555_A. Case of Matryoshkas",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nn, k = map(int, stdin.readline().split(\" \"))\nans = 0\nfor i in range(k):\n\ts = map(int, stdin.readline().split(\" \"))\n\tif s[0] == 1:\n\t\tcontinue\n\tif s[1] > 1:\n\t\tans += s[0] - 1\n\telse: \n\t\tj = 0\n\t\twhile j < s[0]:\n\t\t\tif s[j + 1] != s[1] + j:\n\t\t\t\tbreak\n\t\t\tj += 1\n\t\tans += s[0] - j\n\nans *= 2\nans += k - 1\n\nprint(ans)\n\n\n",
        "correct": true,
        "task_id": "1175",
        "depth": 2
    },
    {
        "description": "A long time ago, in a galaxy far far away two giant IT-corporations Pineapple and Gogol continue their fierce competition. Crucial moment is just around the corner: Gogol is ready to release it's new tablet Lastus 3000.\n\nThis new device is equipped with specially designed artificial intelligence (AI). Employees of Pineapple did their best to postpone the release of Lastus 3000 as long as possible. Finally, they found out, that the name of the new artificial intelligence is similar to the name of the phone, that Pineapple released 200 years ago. As all rights on its name belong to Pineapple, they stand on changing the name of Gogol's artificial intelligence.\n\nPineapple insists, that the name of their phone occurs in the name of AI as a substring. Because the name of technology was already printed on all devices, the Gogol's director decided to replace some characters in AI name with \"#\". As this operation is pretty expensive, you should find the minimum number of characters to replace with \"#\", such that the name of AI doesn't contain the name of the phone as a substring.\n\nSubstring is a continuous subsequence of a string.\n\nInput\n\nThe first line of the input contains the name of AI designed by Gogol, its length doesn't exceed 100 000 characters. Second line contains the name of the phone released by Pineapple 200 years ago, its length doesn't exceed 30. Both string are non-empty and consist of only small English letters.\n\nOutput\n\nPrint the minimum number of characters that must be replaced with \"#\" in order to obtain that the name of the phone doesn't occur in the name of AI as a substring.\n\nExamples\n\nInput\n\nintellect\ntell\n\n\nOutput\n\n1\n\nInput\n\ngoogle\napple\n\n\nOutput\n\n0\n\nInput\n\nsirisiri\nsir\n\n\nOutput\n\n2\n\nNote\n\nIn the first sample AI's name may be replaced with \"int#llect\".\n\nIn the second sample Gogol can just keep things as they are.\n\nIn the third sample one of the new possible names of AI may be \"s#ris#ri\".",
        "task_name": "625_B. War of the Corporations",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "gogol = raw_input()\npineapple = raw_input()\n\ngogol = gogol.replace(pineapple, '#')\ncount = 0\n\nfor char in gogol:\n    if char == '#':\n        count += 1\n\nprint(count)\n\n      \t\t\t   \t    \t\t   \t\t\t \t\t\t \t",
        "correct": true,
        "task_id": "1176",
        "depth": 1
    },
    {
        "description": "Bearland has n cities, numbered 1 through n. Cities are connected via bidirectional roads. Each road connects two distinct cities. No two roads connect the same pair of cities.\n\nBear Limak was once in a city a and he wanted to go to a city b. There was no direct connection so he decided to take a long walk, visiting each city exactly once. Formally: \n\n  * There is no road between a and b. \n  * There exists a sequence (path) of n distinct cities v1, v2, ..., vn that v1 = a, vn = b and there is a road between vi and vi + 1 for <image>. \n\n\n\nOn the other day, the similar thing happened. Limak wanted to travel between a city c and a city d. There is no road between them but there exists a sequence of n distinct cities u1, u2, ..., un that u1 = c, un = d and there is a road between ui and ui + 1 for <image>.\n\nAlso, Limak thinks that there are at most k roads in Bearland. He wonders whether he remembers everything correctly.\n\nGiven n, k and four distinct cities a, b, c, d, can you find possible paths (v1, ..., vn) and (u1, ..., un) to satisfy all the given conditions? Find any solution or print -1 if it's impossible.\n\nInput\n\nThe first line of the input contains two integers n and k (4 \u2264 n \u2264 1000, n - 1 \u2264 k \u2264 2n - 2) \u2014 the number of cities and the maximum allowed number of roads, respectively.\n\nThe second line contains four distinct integers a, b, c and d (1 \u2264 a, b, c, d \u2264 n).\n\nOutput\n\nPrint -1 if it's impossible to satisfy all the given conditions. Otherwise, print two lines with paths descriptions. The first of these two lines should contain n distinct integers v1, v2, ..., vn where v1 = a and vn = b. The second line should contain n distinct integers u1, u2, ..., un where u1 = c and un = d.\n\nTwo paths generate at most 2n - 2 roads: (v1, v2), (v2, v3), ..., (vn - 1, vn), (u1, u2), (u2, u3), ..., (un - 1, un). Your answer will be considered wrong if contains more than k distinct roads or any other condition breaks. Note that (x, y) and (y, x) are the same road.\n\nExamples\n\nInput\n\n7 11\n2 4 7 3\n\n\nOutput\n\n2 7 1 3 6 5 4\n7 1 5 4 6 2 3\n\n\nInput\n\n1000 999\n10 20 30 40\n\n\nOutput\n\n-1\n\nNote\n\nIn the first sample test, there should be 7 cities and at most 11 roads. The provided sample solution generates 10 roads, as in the drawing. You can also see a simple path of length n between 2 and 4, and a path between 7 and 3.\n\n<image>",
        "task_name": "673_D. Bear and Two Paths",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\nimport sys\n#sys.stdin=open(\"data.txt\")\ninput=sys.stdin.readline\n\n\nn,k=map(int,input().split())\na,b,c,d=map(int,input().split())\n\nif n==4:\n    # special case\n    print(\"-1\")\nelif k>=n+1:\n    # i know that having n+1 roads is possible\n    # assume n>=5\n    # get the chain\n    chain=[a,c]\n    for i in range(1,n+1):\n        if i not in [a,b,c,d]:\n            chain.append(i)\n    chain.append(b)\n    chain.append(d)\n    # print first path\n    p1=list(chain)\n    p1[-1],p1[-2]=p1[-2],p1[-1]\n    print(\" \".join(map(str,p1)))\n    # print second path\n    p2=list(chain)\n    p2[0],p2[1]=p2[1],p2[0]\n    print(\" \".join(map(str,p2)))\nelse:\n    print(\"-1\")",
        "correct": true,
        "task_id": "1177",
        "depth": 1
    },
    {
        "description": "Sometimes some words like \"localization\" or \"internationalization\" are so long that writing them many times in one text is quite tiresome.\n\nLet's consider a word too long, if its length is strictly more than 10 characters. All too long words should be replaced with a special abbreviation.\n\nThis abbreviation is made like this: we write down the first and the last letter of a word and between them we write the number of letters between the first and the last letters. That number is in decimal system and doesn't contain any leading zeroes.\n\nThus, \"localization\" will be spelt as \"l10n\", and \"internationalization\u00bb will be spelt as \"i18n\".\n\nYou are suggested to automatize the process of changing the words with abbreviations. At that all too long words should be replaced by the abbreviation and the words that are not too long should not undergo any changes.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 100). Each of the following n lines contains one word. All the words consist of lowercase Latin letters and possess the lengths of from 1 to 100 characters.\n\nOutput\n\nPrint n lines. The i-th line should contain the result of replacing of the i-th word from the input data.\n\nExamples\n\nInput\n\n4\nword\nlocalization\ninternationalization\npneumonoultramicroscopicsilicovolcanoconiosis\n\n\nOutput\n\nword\nl10n\ni18n\np43s",
        "task_name": "71_A. Way Too Long Words",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\ndef getArgs():\n  args = []\n  for line in sys.stdin:\n    args.append(line)\n  return args\n\ndef shortenWord(word):\n  n = len(word) - 2\n  return word[0] + str(n) + word[n+1]\n\nargLines = getArgs()\n\nn = int(argLines[0])\nargLines.pop(0)\nfor word in argLines:\n  w = word.replace('\\n', '')\n  if(len(w) > 10):\n    print(shortenWord(w))\n  else:\n    print(w)\n",
        "correct": true,
        "task_id": "1178",
        "depth": 1
    },
    {
        "description": "Alyona's mother wants to present an array of n non-negative integers to Alyona. The array should be special. \n\nAlyona is a capricious girl so after she gets the array, she inspects m of its subarrays. Subarray is a set of some subsequent elements of the array. The i-th subarray is described with two integers li and ri, and its elements are a[li], a[li + 1], ..., a[ri].\n\nAlyona is going to find mex for each of the chosen subarrays. Among these m mexes the girl is going to find the smallest. She wants this minimum mex to be as large as possible. \n\nYou are to find an array a of n elements so that the minimum mex among those chosen by Alyona subarrays is as large as possible.\n\nThe mex of a set S is a minimum possible non-negative integer that is not in S.\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 105).\n\nThe next m lines contain information about the subarrays chosen by Alyona. The i-th of these lines contains two integers li and ri (1 \u2264 li \u2264 ri \u2264 n), that describe the subarray a[li], a[li + 1], ..., a[ri].\n\nOutput\n\nIn the first line print single integer \u2014 the maximum possible minimum mex.\n\nIn the second line print n integers \u2014 the array a. All the elements in a should be between 0 and 109.\n\nIt is guaranteed that there is an optimal answer in which all the elements in a are between 0 and 109.\n\nIf there are multiple solutions, print any of them.\n\nExamples\n\nInput\n\n5 3\n1 3\n2 5\n4 5\n\n\nOutput\n\n2\n1 0 2 1 0\n\n\nInput\n\n4 2\n1 4\n2 4\n\n\nOutput\n\n3\n5 2 0 1\n\nNote\n\nThe first example: the mex of the subarray (1, 3) is equal to 3, the mex of the subarray (2, 5) is equal to 3, the mex of the subarray (4, 5) is equal to 2 as well, thus the minumal mex among the subarrays chosen by Alyona is equal to 2.",
        "task_name": "740_C. Alyona and mex",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "input=raw_input\n\nn,m=map(int,input().split())\nr=[]\nfor _ in range(m):\n    a,b=map(int,input().split())\n    r.append(b-a+1)\nr.sort()\nans=r[0]\nprint(ans)\nfor i in range(n):\n    print (i)%ans,\nprint(\"\")",
        "correct": true,
        "task_id": "1179",
        "depth": 1
    },
    {
        "description": "Young Timofey has a birthday today! He got kit of n cubes as a birthday present from his parents. Every cube has a number ai, which is written on it. Timofey put all the cubes in a row and went to unpack other presents.\n\nIn this time, Timofey's elder brother, Dima reordered the cubes using the following rule. Suppose the cubes are numbered from 1 to n in their order. Dima performs several steps, on step i he reverses the segment of cubes from i-th to (n - i + 1)-th. He does this while i \u2264 n - i + 1.\n\nAfter performing the operations Dima went away, being very proud of himself. When Timofey returned to his cubes, he understood that their order was changed. Help Timofey as fast as you can and save the holiday \u2014 restore the initial order of the cubes using information of their current location.\n\nInput\n\nThe first line contains single integer n (1 \u2264 n \u2264 2\u00b7105) \u2014 the number of cubes.\n\nThe second line contains n integers a1, a2, ..., an ( - 109 \u2264 ai \u2264 109), where ai is the number written on the i-th cube after Dima has changed their order.\n\nOutput\n\nPrint n integers, separated by spaces \u2014 the numbers written on the cubes in their initial order.\n\nIt can be shown that the answer is unique.\n\nExamples\n\nInput\n\n7\n4 3 7 6 9 1 2\n\n\nOutput\n\n2 3 9 6 7 1 4\n\nInput\n\n8\n6 1 4 2 5 6 9 2\n\n\nOutput\n\n2 1 6 2 5 4 9 6\n\nNote\n\nConsider the first sample.\n\n  1. At the begining row was [2, 3, 9, 6, 7, 1, 4]. \n  2. After first operation row was [4, 1, 7, 6, 9, 3, 2]. \n  3. After second operation row was [4, 3, 9, 6, 7, 1, 2]. \n  4. After third operation row was [4, 3, 7, 6, 9, 1, 2]. \n  5. At fourth operation we reverse just middle element, so nothing has changed. The final row is [4, 3, 7, 6, 9, 1, 2]. So the answer for this case is row [2, 3, 9, 6, 7, 1, 4]. ",
        "task_name": "764_B. Timofey and cubes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\nvalues = raw_input().split()\nfor i in range(0, n//2, 2):\n    j = n-1-i\n    values[i], values[j] = values[j], values[i]\nprint(' '.join(values))\n",
        "correct": true,
        "task_id": "1180",
        "depth": 1
    },
    {
        "description": "Leha decided to move to a quiet town Vi\u010dkopolis, because he was tired by living in Bankopolis. Upon arrival he immediately began to expand his network of hacked computers. During the week Leha managed to get access to n computers throughout the town. Incidentally all the computers, which were hacked by Leha, lie on the same straight line, due to the reason that there is the only one straight street in Vi\u010dkopolis.\n\nLet's denote the coordinate system on this street. Besides let's number all the hacked computers with integers from 1 to n. So the i-th hacked computer is located at the point xi. Moreover the coordinates of all computers are distinct. \n\nLeha is determined to have a little rest after a hard week. Therefore he is going to invite his friend Noora to a restaurant. However the girl agrees to go on a date with the only one condition: Leha have to solve a simple task.\n\nLeha should calculate a sum of F(a) for all a, where a is a non-empty subset of the set, that consists of all hacked computers. Formally, let's denote A the set of all integers from 1 to n. Noora asks the hacker to find value of the expression <image>. Here F(a) is calculated as the maximum among the distances between all pairs of computers from the set a. Formally, <image>. Since the required sum can be quite large Noora asks to find it modulo 109 + 7.\n\nThough, Leha is too tired. Consequently he is not able to solve this task. Help the hacker to attend a date.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 3\u00b7105) denoting the number of hacked computers.\n\nThe second line contains n integers x1, x2, ..., xn (1 \u2264 xi \u2264 109) denoting the coordinates of hacked computers. It is guaranteed that all xi are distinct.\n\nOutput\n\nPrint a single integer \u2014 the required sum modulo 109 + 7.\n\nExamples\n\nInput\n\n2\n4 7\n\n\nOutput\n\n3\n\n\nInput\n\n3\n4 3 1\n\n\nOutput\n\n9\n\nNote\n\nThere are three non-empty subsets in the first sample test:<image>, <image> and <image>. The first and the second subset increase the sum by 0 and the third subset increases the sum by 7 - 4 = 3. In total the answer is 0 + 0 + 3 = 3.\n\nThere are seven non-empty subsets in the second sample test. Among them only the following subsets increase the answer: <image>, <image>, <image>, <image>. In total the sum is (4 - 3) + (4 - 1) + (3 - 1) + (4 - 1) = 9.",
        "task_name": "809_A. Do you want a date?",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\ns = sorted(map(int,raw_input().split()))\nr = 0\nfor i in xrange(n):\n\tr+=(s[i]*((2**(n-1-i)-1)-(2**i-1)))%(1000000000+7)\nprint -r",
        "correct": false,
        "task_id": "1181",
        "depth": 1
    },
    {
        "description": "Maxim wants to buy an apartment in a new house at Line Avenue of Metropolis. The house has n apartments that are numbered from 1 to n and are arranged in a row. Two apartments are adjacent if their indices differ by 1. Some of the apartments can already be inhabited, others are available for sale.\n\nMaxim often visits his neighbors, so apartment is good for him if it is available for sale and there is at least one already inhabited apartment adjacent to it. Maxim knows that there are exactly k already inhabited apartments, but he doesn't know their indices yet.\n\nFind out what could be the minimum possible and the maximum possible number of apartments that are good for Maxim.\n\nInput\n\nThe only line of the input contains two integers: n and k (1 \u2264 n \u2264 109, 0 \u2264 k \u2264 n).\n\nOutput\n\nPrint the minimum possible and the maximum possible number of apartments good for Maxim.\n\nExample\n\nInput\n\n6 3\n\n\nOutput\n\n1 3\n\nNote\n\nIn the sample test, the number of good apartments could be minimum possible if, for example, apartments with indices 1, 2 and 3 were inhabited. In this case only apartment 4 is good. The maximum possible number could be, for example, if apartments with indices 1, 3 and 5 were inhabited. In this case all other apartments: 2, 4 and 6 are good.",
        "task_name": "854_B. Maxim Buys an Apartment",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\n\n\ndef main():\n    pass\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\n\nn, k = list(map(int, input().rstrip().split()))\nif n == k:\n    print(0, 0)\nelse:\n    if k == 0:\n        print(0, 0)\n    elif n-k <= k:\n        print(1, n-k)\n    else:\n        print(1, min(n-k, k*2))",
        "correct": true,
        "task_id": "1182",
        "depth": 1
    },
    {
        "description": "You are given a rooted tree with n vertices. The vertices are numbered from 1 to n, the root is the vertex number 1.\n\nEach vertex has a color, let's denote the color of vertex v by cv. Initially cv = 0.\n\nYou have to color the tree into the given colors using the smallest possible number of steps. On each step you can choose a vertex v and a color x, and then color all vectices in the subtree of v (including v itself) in color x. In other words, for every vertex u, such that the path from root to u passes through v, set cu = x.\n\nIt is guaranteed that you have to color each vertex in a color different from 0.\n\nYou can learn what a rooted tree is using the link: https://en.wikipedia.org/wiki/Tree_(graph_theory).\n\nInput\n\nThe first line contains a single integer n (2 \u2264 n \u2264 104) \u2014 the number of vertices in the tree.\n\nThe second line contains n - 1 integers p2, p3, ..., pn (1 \u2264 pi < i), where pi means that there is an edge between vertices i and pi.\n\nThe third line contains n integers c1, c2, ..., cn (1 \u2264 ci \u2264 n), where ci is the color you should color the i-th vertex into.\n\nIt is guaranteed that the given graph is a tree. \n\nOutput\n\nPrint a single integer \u2014 the minimum number of steps you have to perform to color the tree into given colors.\n\nExamples\n\nInput\n\n6\n1 2 2 1 5\n2 1 1 1 1 1\n\n\nOutput\n\n3\n\n\nInput\n\n7\n1 1 2 3 1 4\n3 3 1 1 1 2 3\n\n\nOutput\n\n5\n\nNote\n\nThe tree from the first sample is shown on the picture (numbers are vetices' indices):\n\n<image>\n\nOn first step we color all vertices in the subtree of vertex 1 into color 2 (numbers are colors):\n\n<image>\n\nOn seond step we color all vertices in the subtree of vertex 5 into color 1:\n\n<image>\n\nOn third step we color all vertices in the subtree of vertex 2 into color 1:\n\n<image>\n\nThe tree from the second sample is shown on the picture (numbers are vetices' indices):\n\n<image>\n\nOn first step we color all vertices in the subtree of vertex 1 into color 3 (numbers are colors):\n\n<image>\n\nOn second step we color all vertices in the subtree of vertex 3 into color 1:\n\n<image>\n\nOn third step we color all vertices in the subtree of vertex 6 into color 2:\n\n<image>\n\nOn fourth step we color all vertices in the subtree of vertex 4 into color 1:\n\n<image>\n\nOn fith step we color all vertices in the subtree of vertex 7 into color 3:\n\n<image>",
        "task_name": "902_B. Coloring a Tree",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\nsys.setrecursionlimit(60000)\ntry:    \n    def dfs(d,curr,parent):\n        d[curr].remove(parent)\n        for i in d[curr]:\n            dfs(d,i,curr)\n    \n    def solve(d,curr,colors,count):\n        if d[curr]!=set():\n            for i in d[curr]:\n                if colors[curr-1]!=colors[i-1]:\n                    count[0]+=1 \n                solve(d,i,colors,count)\n            \n    \n    n=int(input())\n    connections=list(map(int,input().split()))\n    colors=list(map(int,input().split()))\n    d={}\n    for i in range(n-1):\n        a=i+2\n        b=connections[i]\n        if a in d.keys():\n            d[a].add(b)\n        else:\n            d[a]=set([b])\n        if b in d.keys():\n            d[b].add(a)\n        else:\n            d[b]=set([a])\n    #print(d)\n    d[1].add(-1)\n    dfs(d,1,-1)\n    #print(d)\n    count=[1]\n    solve(d,1,colors,count)\n    print(count[0])\nexcept:\n    print(0)",
        "correct": false,
        "task_id": "1183",
        "depth": 1
    },
    {
        "description": "One very experienced problem writer decided to prepare a problem for April Fools Day contest. The task was very simple - given an arithmetic expression, return the result of evaluating this expression. However, looks like there is a bug in the reference solution...\n\nInput\n\nThe only line of input data contains the arithmetic expression. The expression will contain between 2 and 10 operands, separated with arithmetic signs plus and/or minus. Each operand will be an integer between 0 and 255, inclusive.\n\nOutput\n\nReproduce the output of the reference solution, including the bug.\n\nExamples\n\nInput\n\n8-7+6-5+4-3+2-1-0\n\n\nOutput\n\n4\n\n\nInput\n\n2+2\n\n\nOutput\n\n-46\n\n\nInput\n\n112-37\n\n\nOutput\n\n375",
        "task_name": "952_F. 2 + 2 != 4",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s = map(lambda c: ord(c) - 48,raw_input())\nr, t, f = 0, 0, 1\nfor x in s:\n    if x < 0:\n        r += f * t\n        f = -4 - x\n        t = 0\n    t = t * 10 + x\nprint(r + f * t)",
        "correct": true,
        "task_id": "1184",
        "depth": 1
    },
    {
        "description": "Given is a rooted tree with N vertices numbered 1 to N. The root is Vertex 1, and the i-th edge (1 \\leq i \\leq N - 1) connects Vertex a_i and b_i.\n\nEach of the vertices has a counter installed. Initially, the counters on all the vertices have the value 0.\n\nNow, the following Q operations will be performed:\n\n* Operation j (1 \\leq j \\leq Q): Increment by x_j the counter on every vertex contained in the subtree rooted at Vertex p_j.\n\n\n\nFind the value of the counter on each vertex after all operations.\n\nConstraints\n\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq Q \\leq 2 \\times 10^5\n* 1 \\leq a_i < b_i \\leq N\n* 1 \\leq p_j \\leq N\n* 1 \\leq x_j \\leq 10^4\n* The given graph is a tree.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN Q\na_1 b_1\n:\na_{N-1} b_{N-1}\np_1 x_1\n:\np_Q x_Q\n\n\nOutput\n\nPrint the values of the counters on Vertex 1, 2, \\ldots, N after all operations, in this order, with spaces in between.\n\nExamples\n\nInput\n\n4 3\n1 2\n2 3\n2 4\n2 10\n1 100\n3 1\n\n\nOutput\n\n100 110 111 110\n\n\nInput\n\n6 2\n1 2\n1 3\n2 4\n3 6\n2 5\n1 10\n1 10\n\n\nOutput\n\n20 20 20 20 20 20",
        "task_name": "p02936 AtCoder Beginner Contest 138 - Ki",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, q =  map(int, raw_input().split())\ngraph = dict()\noperation = [0 for i in range(q)]\nfor i in range(n-1):\n    a, b = map(int, raw_input().split())\n    if a in graph.keys():\n        graph[a].add(b)\n    else:\n        graph[a] = set([b])\n    if b in graph.keys():\n        graph[b].add(a)\n    else:\n        graph[b] = set([a])\n\nfor i in range(q):\n    operation[i] = [int(j) for j in raw_input().split()]\n\nvalues = [0 for i in range(n)]\n\nvertex_list = dict()\nfor i in range(1, n+1):\n    vertex_list[i] = set([-1])\n\ndef obtain_list(graphx, vertex, check, root):\n    check[vertex-1] = True\n    vertex_list[root].add(vertex)\n    for v in graph[vertex]:\n        if check[v - 1] == True:\n            continue\n        obtain_list(graphx, v, check, root)\n\n\n\n# def dfs(graphx, vertex, check, value):\n    # check[vertex-1] = True\n    # values[vertex-1] += value\n    # for v in graph[vertex]:\n    #     if check[v - 1] == True:\n    #         continue\n    #     dfs(graphx, v, check, value)\n\n\n# for i in range(q):\n    # check_list = [False for j in range(n)]\n    # ver = operation[i][0]\n    # for v in graph[ver]:\n    #     if v < ver:\n    #         check_list[v-1] = True\n    # dfs(graph, operation[i][0], check_list, operation[i][1])\n\nfor i in range(1, n+1):\n    check_list = [False for j in range(n)]\n    for v in graph[i]:\n        if v < i:\n            check_list[v-1] = True\n    obtain_list(graph, i, check_list, i)\n\n\nfor i in range(q):\n    p = operation[i][0]\n    x = operation[i][1]\n    for y in vertex_list[p]:\n        if y != -1:\n            values[y-1] += x\n\nmapped_values = map(str, values)\n\nresult = \"\"\nfor i in range(n):\n    result += mapped_values[i]\n    if i < n - 1:\n        result += \" \"\n\nprint(result)\n\n",
        "correct": false,
        "task_id": "1185",
        "depth": 2
    },
    {
        "description": "N tiles are arranged in a row from left to right. The initial color of each tile is represented by a string S of length N.\n\nThe i-th tile from the left is painted black if the i-th character of S is `0`, and painted white if that character is `1`.\n\nYou want to repaint some of the tiles black or white, so that any two adjacent tiles have different colors.\n\nAt least how many tiles need to be repainted to satisfy the condition?\n\nConstraints\n\n* 1 \\leq |S| \\leq 10^5\n* S_i is `0` or `1`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\n\n\nOutput\n\nPrint the minimum number of tiles that need to be repainted to satisfy the condition.\n\nExamples\n\nInput\n\n000\n\n\nOutput\n\n1\n\n\nInput\n\n10010010\n\n\nOutput\n\n3\n\n\nInput\n\n0\n\n\nOutput\n\n0",
        "task_name": "p03073 AtCoder Beginner Contest 124 - Coloring Colorfully",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "s = input()\nc = 0\nfor i, a in enumerate(s):\n    if i % 2 == 0 and a == '0':\n        c += 1\n    if i % 2 == 1 and a == '1':\n        c += 1\nprint(min(c, len(s)-c))",
        "correct": false,
        "task_id": "1186",
        "depth": 1
    },
    {
        "description": "Snuke can change a string t of length N into a string t' of length N - 1 under the following rule:\n\n* For each i (1 \u2264 i \u2264 N - 1), the i-th character of t' must be either the i-th or (i + 1)-th character of t.\n\n\n\nThere is a string s consisting of lowercase English letters. Snuke's objective is to apply the above operation to s repeatedly so that all the characters in s are the same. Find the minimum necessary number of operations.\n\nConstraints\n\n* 1 \u2264 |s| \u2264 100\n* s consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\ns\n\n\nOutput\n\nPrint the minimum necessary number of operations to achieve the objective.\n\nExamples\n\nInput\n\nserval\n\n\nOutput\n\n3\n\n\nInput\n\njackal\n\n\nOutput\n\n2\n\n\nInput\n\nzzz\n\n\nOutput\n\n0\n\n\nInput\n\nwhbrjpjyhsrywlqjxdbrbaomnw\n\n\nOutput\n\n8",
        "task_name": "p03687 AtCoder Grand Contest 016 - Shrinking",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import numpy as np\n\na=raw_input()\n\nb=[]\nfor k in range(len(a)):\n    b.append(a[k])\n\nb=np.array(b)\n\nalp='abcdefghijklmnopqrstuvwxyz'\n\nal=[]\nfor k in range(len(alp)):\n    al.append(alp[k])\n\nres=[]\nfor aa in al:\n    if aa in b:\n        res.append(np.where(b==aa))\n\nm=[]\nfor k in range(len(res)):\n    zz=np.hstack([np.array([-1]),res[k][0],np.array([len(a)+1])])\n    z=np.diff(zz)\n    \n    if len(z)>0:\n        m.append(np.max(z))\nif len(m)>0:\n    ans=np.min(m)\nelse:\n    ans=len(a)\n\nans-=1\n\nprint(ans)",
        "correct": false,
        "task_id": "1187",
        "depth": 1
    },
    {
        "description": "Snuke and Ciel went to a strange stationery store. Each of them got a transparent graph paper with H rows and W columns.\n\nSnuke painted some of the cells red in his paper. Here, the cells painted red were 4-connected, that is, it was possible to traverse from any red cell to any other red cell, by moving to vertically or horizontally adjacent red cells only.\n\nCiel painted some of the cells blue in her paper. Here, the cells painted blue were 4-connected.\n\nAfterwards, they precisely overlaid the two sheets in the same direction. Then, the intersection of the red cells and the blue cells appeared purple.\n\nYou are given a matrix of letters a_{ij} (1\u2264i\u2264H, 1\u2264j\u2264W) that describes the positions of the purple cells. If the cell at the i-th row and j-th column is purple, then a_{ij} is `#`, otherwise a_{ij} is `.`. Here, it is guaranteed that no outermost cell is purple. That is, if i=1, H or j = 1, W, then a_{ij} is `.`.\n\nFind a pair of the set of the positions of the red cells and the blue cells that is consistent with the situation described. It can be shown that a solution always exists.\n\nConstraints\n\n* 3\u2264H,W\u2264500\n* a_{ij} is `#` or `.`.\n* If i=1,H or j=1,W, then a_{ij} is `.`.\n* At least one of a_{ij} is `#`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nH W\na_{11}...a_{1W}\n:\na_{H1}...a_{HW}\n\n\nOutput\n\nPrint a pair of the set of the positions of the red cells and the blue cells that is consistent with the situation, as follows:\n\n* The first H lines should describe the positions of the red cells.\n* The following 1 line should be empty.\n* The following H lines should describe the positions of the blue cells.\n\n\n\nThe description of the positions of the red or blue cells should follow the format of the description of the positions of the purple cells.\n\nExamples\n\nInput\n\n5 5\n.....\n.#.#.\n.....\n.#.#.\n.....\n\n\nOutput\n\n.....\n#####\n#....\n#####\n.....\n\n.###.\n.#.#.\n.#.#.\n.#.#.\n.....\n\n\nInput\n\n7 13\n.............\n.###.###.###.\n.#.#.#...#...\n.###.#...#...\n.#.#.#.#.#...\n.#.#.###.###.\n.............\n\n\nOutput\n\n.............\n.###########.\n.###.###.###.\n.###.###.###.\n.###.###.###.\n.###.###.###.\n.............\n\n.............\n.###.###.###.\n.#.#.#...#...\n.###.#...#...\n.#.#.#.#.#...\n.#.#########.\n.............",
        "task_name": "p04007 AtCoder Grand Contest 004 - AND Grid",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n\nn, m = map(int, raw_input().split())\nred = []\nblue = []\n\nfor i in range(n):\n    row = raw_input()\n    r = ['#']\n    b = ['.']\n    for j in range(1, m - 1):\n        if row[j] == '#':\n            r.append('#')\n            b.append('#')\n        else:\n            if i % 2 == 0:\n                r.append('#')\n                b.append('.')\n            else:\n                r.append('.')\n                b.append('#')\n    r.append('.')\n    b.append('#')\n    red.append(''.join(r))\n    blue.append(''.join(b))\n\nfor r in red:\n    print(r)\nfor b in blue:\n    print(b)\n",
        "correct": true,
        "task_id": "1189",
        "depth": 2
    },
    {
        "description": "Create a program that outputs all leap years between the year a and year b.\n\nThe leap year conditions are as follows. However, 0 <a \u2264 b <3,000. If there is no leap year in the given period, output \"NA\".\n\n* The year is divisible by 4.\n* However, a year divisible by 100 is not a leap year.\n* However, a year divisible by 400 is a leap year.\n\n\n\nInput\n\nGiven multiple datasets. The format of each dataset is as follows:\n\n\na b\n\n\nInput ends when both a and b are 0. The number of datasets does not exceed 50.\n\nOutput\n\nPrint the year or NA for each dataset.\n\nInsert one blank line between the datasets.\n\nExample\n\nInput\n\n2001 2010\n2005 2005\n2001 2010\n0 0\n\n\nOutput\n\n2004\n2008\n\nNA\n\n2004\n2008",
        "task_name": "p00093 Leap Year",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\nfrom sys import stdin, exit\n\n\ndef main(readline=stdin.readline):\n    leap_year = [not y % 4 and y % 100 or not y % 400 for y in range(3001)]\n    separator = ''\n    while 1:\n        a, b = (int(s) for s in readline().split())\n        if not a and not b:\n            exit()\n\n        print(separator, end='')\n\n        result = 'NA\\n'\n        for year, leap in enumerate(leap_year[a:b+1], a):\n            if leap:\n                print(year)\n                result = ''\n\n        print(result, end='')\n        separator = '\\n'\n\n\nmain()",
        "correct": true,
        "task_id": "1190",
        "depth": 2
    },
    {
        "description": "The only difference between easy and hard versions is the constraints.\n\nVova likes pictures with kittens. The news feed in the social network he uses can be represented as an array of n consecutive pictures (with kittens, of course). Vova likes all these pictures, but some are more beautiful than the others: the i-th picture has beauty a_i.\n\nVova wants to repost exactly x pictures in such a way that: \n\n  * each segment of the news feed of at least k consecutive pictures has at least one picture reposted by Vova; \n  * the sum of beauty values of reposted pictures is maximum possible. \n\n\n\nFor example, if k=1 then Vova has to repost all the pictures in the news feed. If k=2 then Vova can skip some pictures, but between every pair of consecutive pictures Vova has to repost at least one of them.\n\nYour task is to calculate the maximum possible sum of values of reposted pictures if Vova follows conditions described above, or say that there is no way to satisfy all conditions.\n\nInput\n\nThe first line of the input contains three integers n, k and x (1 \u2264 k, x \u2264 n \u2264 200) \u2014 the number of pictures in the news feed, the minimum length of segment with at least one repost in it and the number of pictures Vova is ready to repost.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9), where a_i is the beauty of the i-th picture.\n\nOutput\n\nPrint -1 if there is no way to repost some pictures to satisfy all the conditions in the problem statement.\n\nOtherwise print one integer \u2014 the maximum sum of values of reposted pictures if Vova follows conditions described in the problem statement.\n\nExamples\n\nInput\n\n\n5 2 3\n5 1 3 10 1\n\n\nOutput\n\n\n18\n\n\nInput\n\n\n6 1 5\n10 30 30 70 10 10\n\n\nOutput\n\n\n-1\n\n\nInput\n\n\n4 3 1\n1 100 1 1\n\n\nOutput\n\n\n100",
        "task_name": "1077_F1. Pictures with Kittens (easy version)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys,math\nfrom fractions import gcd\nfrom bisect import bisect_left, bisect\nfrom collections import defaultdict\nfrom io import BytesIO\nsys.stdin = BytesIO(sys.stdin.read())\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n#n = int(input())\n#s = input()\nn,k,x = [int(_) for _ in input().split()]\n\narr = [int(_) for _ in input().split()]\nif k > 1:\n    rpr = {(x,1):0,(x-1,0):arr[0]}\nelse:\n    rpr = {(x-1,0):arr[0]}\ni = 1\nwhile i < n and len(rpr):\n    #print(i,rpr)\n    pr = defaultdict(int)\n    for ost,lag in rpr:\n        if lag + 1 == k:\n            if ost > 0:\n                pr[(ost-1,0)] = max(pr[(ost-1,0)],rpr[(ost,lag)] + arr[i])\n            else:\n                continue\n        else:\n            pr[(ost,lag+1)] = max(pr[(ost,lag+1)], rpr[(ost,lag)])\n            if ost > 0:\n                pr[(ost-1,0)] = max(pr[(ost-1,0)],rpr[(ost,lag)] + arr[i])\n    rpr = dict()\n    for ke in pr:\n        rpr[ke] = pr[ke]\n    i += 1\nif len(rpr):\n    m = 0\n    for k in rpr:\n        m = max(m,rpr[k])\n    print(m)\nelse:\n    print(-1)",
        "correct": true,
        "task_id": "1191",
        "depth": 2
    },
    {
        "description": "In some social network, there are n users communicating with each other in m groups of friends. Let's analyze the process of distributing some news between users.\n\nInitially, some user x receives the news from some source. Then he or she sends the news to his or her friends (two users are friends if there is at least one group such that both of them belong to this group). Friends continue sending the news to their friends, and so on. The process ends when there is no pair of friends such that one of them knows the news, and another one doesn't know.\n\nFor each user x you have to determine what is the number of users that will know the news if initially only user x starts distributing it. \n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 5 \u22c5 10^5) \u2014 the number of users and the number of groups of friends, respectively.\n\nThen m lines follow, each describing a group of friends. The i-th line begins with integer k_i (0 \u2264 k_i \u2264 n) \u2014 the number of users in the i-th group. Then k_i distinct integers follow, denoting the users belonging to the i-th group.\n\nIt is guaranteed that \u2211 _{i = 1}^{m} k_i \u2264 5 \u22c5 10^5.\n\nOutput\n\nPrint n integers. The i-th integer should be equal to the number of users that will know the news if user i starts distributing it.\n\nExample\n\nInput\n\n\n7 5\n3 2 5 4\n0\n2 1 2\n1 1\n2 6 7\n\n\nOutput\n\n\n4 4 1 4 4 2 2 ",
        "task_name": "1167_C. News Distribution",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\nimport bisect\nimport math\nimport itertools\nimport sys\nfrom atexit import register\n \nif sys.version_info[0] < 3:\n    from io import BytesIO as stream\nelse:\n    from io import StringIO as stream\n \n \nif sys.version_info[0] < 3:\n    class dict(dict):\n        \"\"\"dict() -> new empty dictionary\"\"\"\n        def items(self):\n            \"\"\"D.items() -> a set-like object providing a view on D's items\"\"\"\n            return dict.iteritems(self)\n \n        def keys(self):\n            \"\"\"D.keys() -> a set-like object providing a view on D's keys\"\"\"\n            return dict.iterkeys(self)\n \n        def values(self):\n            \"\"\"D.values() -> an object providing a view on D's values\"\"\"\n            return dict.itervalues(self)\n \n    input = raw_input\n    range = xrange\n \n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n \n \ndef sync_with_stdio(sync=True):\n    \"\"\"Set whether the standard Python streams are allowed to buffer their I/O.\n \n    Args:\n        sync (bool, optional): The new synchronization setting.\n \n    \"\"\"\n    global input, flush\n \n    if sync:\n        flush = sys.stdout.flush\n    else:\n        sys.stdin = stream(sys.stdin.read())\n        input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n \n        sys.stdout = stream()\n        register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n \ndef main():\n    def bfs(a,root):\n      visited=[False]*(len(a)+1)\n      queue=[root]\n      visited[root]=True\n      i=0\n      while i<len(queue):\n            vertex = queue[i]\n            i+=1\n            for w in a[vertex-1]:\n                if not visited[w]:\n                    visited[w]=True\n                    queue.append(w)\n      return queue       \n     \n    n,k=map(int, input().split())\n    a=[]\n    b=[0]*n\n    c=[[] for i in range(n)]\n    for i in range(k):\n      l=list(map(int, input().split()))\n      #del l[0]\n      a.append(l)\n     \n    for i in range(k):\n      if a[i][0]<2:\n          continue\n      for jj in range(2,a[i][0]+1):\n        c[a[i][1]-1].append(a[i][jj])\n        c[a[i][jj]-1].append(a[i][1])\n        #for kk in range(jj+1,len(a[i])):\n         # c[a[i][jj]-1].append(a[i][kk])\n          #c[a[i][jj]-1].append(a[i][jj])\n    #print(c)  \n    for i in range(n):\n      if b[i]==0:\n        t=bfs(c,i+1)\n        p=len(t)\n        #print(t)\n        for i in range(p):\n          b[t[i]-1]=p\n    for i in range(n):\n      if b[i]==1:\n        print(b[i],end=\" \")\n      else:\n        print(b[i]-1,end=\" \")    \nif __name__ == '__main__':\n    sync_with_stdio(False)\n    main()",
        "correct": false,
        "task_id": "1192",
        "depth": 2
    },
    {
        "description": "A company of n friends wants to order exactly two pizzas. It is known that in total there are 9 pizza ingredients in nature, which are denoted by integers from 1 to 9.\n\nEach of the n friends has one or more favorite ingredients: the i-th of friends has the number of favorite ingredients equal to f_i (1 \u2264 f_i \u2264 9) and your favorite ingredients form the sequence b_{i1}, b_{i2}, ..., b_{if_i} (1 \u2264 b_{it} \u2264 9).\n\nThe website of CodePizza restaurant has exactly m (m \u2265 2) pizzas. Each pizza is characterized by a set of r_j ingredients a_{j1}, a_{j2}, ..., a_{jr_j} (1 \u2264 r_j \u2264 9, 1 \u2264 a_{jt} \u2264 9) , which are included in it, and its price is c_j.\n\nHelp your friends choose exactly two pizzas in such a way as to please the maximum number of people in the company. It is known that a person is pleased with the choice if each of his/her favorite ingredients is in at least one ordered pizza. If there are several ways to choose two pizzas so as to please the maximum number of friends, then choose the one that minimizes the total price of two pizzas.\n\nInput\n\nThe first line of the input contains two integers n and m (1 \u2264 n \u2264 10^5, 2 \u2264 m \u2264 10^5) \u2014 the number of friends in the company and the number of pizzas, respectively.\n\nNext, the n lines contain descriptions of favorite ingredients of the friends: the i-th of them contains the number of favorite ingredients f_i (1 \u2264 f_i \u2264 9) and a sequence of distinct integers b_{i1}, b_{i2}, ..., b_{if_i} (1 \u2264 b_{it} \u2264 9).\n\nNext, the m lines contain pizza descriptions: the j-th of them contains the integer price of the pizza c_j (1 \u2264 c_j \u2264 10^9), the number of ingredients r_j (1 \u2264 r_j \u2264 9) and the ingredients themselves as a sequence of distinct integers a_{j1}, a_{j2}, ..., a_{jr_j} (1 \u2264 a_{jt} \u2264 9).\n\nOutput\n\nOutput two integers j_1 and j_2 (1 \u2264 j_1,j_2 \u2264 m, j_1 \u2260 j_2) denoting the indices of two pizzas in the required set. If there are several solutions, output any of them. Pizza indices can be printed in any order.\n\nExamples\n\nInput\n\n\n3 4\n2 6 7\n4 2 3 9 5\n3 2 3 9\n100 1 7\n400 3 3 2 5\n100 2 9 2\n500 3 2 9 5\n\n\nOutput\n\n\n2 3\n\n\nInput\n\n\n4 3\n1 1\n1 2\n1 3\n1 4\n10 4 1 2 3 4\n20 4 1 2 3 4\n30 4 1 2 3 4\n\n\nOutput\n\n\n1 2\n\n\nInput\n\n\n1 5\n9 9 8 7 6 5 4 3 2 1\n3 4 1 2 3 4\n1 4 5 6 7 8\n4 4 1 3 5 7\n1 4 2 4 6 8\n5 4 1 9 2 8\n\n\nOutput\n\n\n2 4",
        "task_name": "1185_F. Two Pizzas",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\nDEBUG = 0\nINF = float('inf')\n\nimport os, sys\nfrom atexit import register\nfrom io import BytesIO\nimport itertools\n\nif sys.version_info[0] < 3:\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\nif DEBUG:\n    debug_print = print\nelse:\n    sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\n    sys.stdout = BytesIO()\n    register(lambda: os.write(1, sys.stdout.getvalue()))\n\n    input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n    debug_print = lambda *x, **y: None\n\n\ndef input_as_list():\n    return list(map(int, input().split()))\n\n\ndef array_of(f, *dim):\n    return [array_of(f, *dim[1:]) for _ in range(dim[0])] if dim else f()\n\n\ndef main():\n    N = 2**10\n\n    n, m = input_as_list()\n\n    human = array_of(int, N)\n    pizza = array_of(lambda: INF, N)\n    pizza_idx = array_of(int, N)\n\n    for _ in range(n):\n        res = 0\n        for e in input_as_list()[1:]:\n            res += 1 << e\n        human[res] += 1\n\n    debug_print(human)\n\n    raw_pizza = [(input_as_list(), i) for i in range(m)]\n    raw_pizza.sort()\n\n    pizza2 = array_of(lambda: INF, N)\n    pizza2_idx = array_of(lambda: (0, 0), N)\n\n    for a, i in raw_pizza:\n        res = 0\n        for e in a[2:]:\n            res += 1 << e\n        if pizza[res] == INF:\n            pizza[res] = a[0]\n            pizza_idx[res] = i\n        elif pizza2[res] == INF:\n            pizza2[res] = pizza[res] + a[0]\n            pizza2_idx[res] = (pizza_idx[res], i)\n\n    debug_print(pizza)\n\n    for i in range(1, N):\n        for j in range(i+1, N):\n            if pizza[i] + pizza[j] < pizza2[i|j]:\n                pizza2[i|j] = pizza[i] + pizza[j]\n                pizza2_idx[i|j] = (pizza_idx[i], pizza_idx[j])\n\n    maxhuman = 0\n    mincost = INF\n    minindex = (0, 1)\n    debug_print(pizza2_idx)\n\n    for i in range(1, N):\n        if pizza2[i] == INF:\n            continue\n\n        thishuman = 0\n\n        for j in range(1, N):\n\n            if i|j == i:\n                thishuman += human[j]\n\n        if thishuman > maxhuman:\n            maxhuman = thishuman\n            mincost = pizza2[i]\n            minindex = pizza2_idx[i]\n        elif thishuman == maxhuman and pizza2[i] < mincost:\n            mincost = pizza2[i]\n            minindex = pizza2_idx[i]\n\n    print(minindex[0]+1, minindex[1]+1)\n\nmain()",
        "correct": true,
        "task_id": "1193",
        "depth": 2
    },
    {
        "description": "You are given a chess board with n rows and n columns. Initially all cells of the board are empty, and you have to put a white or a black knight into each cell of the board.\n\nA knight is a chess piece that can attack a piece in cell (x_2, y_2) from the cell (x_1, y_1) if one of the following conditions is met:\n\n  * |x_1 - x_2| = 2 and |y_1 - y_2| = 1, or \n  * |x_1 - x_2| = 1 and |y_1 - y_2| = 2. \n\n\n\nHere are some examples of which cells knight can attack. In each of the following pictures, if the knight is currently in the blue cell, it can attack all red cells (and only them).\n\n<image>\n\nA duel of knights is a pair of knights of different colors such that these knights attack each other. You have to put a knight (a white one or a black one) into each cell in such a way that the number of duels is maximum possible.\n\nInput\n\nThe first line contains one integer n (3 \u2264 n \u2264 100) \u2014 the number of rows (and columns) in the board.\n\nOutput\n\nPrint n lines with n characters in each line. The j-th character in the i-th line should be W, if the cell (i, j) contains a white knight, or B, if it contains a black knight. The number of duels should be maximum possible. If there are multiple optimal answers, print any of them.\n\nExample\n\nInput\n\n\n3\n\n\nOutput\n\n\nWBW\nBBB\nWBW\n\nNote\n\nIn the first example, there are 8 duels:\n\n  1. the white knight in (1, 1) attacks the black knight in (3, 2); \n  2. the white knight in (1, 1) attacks the black knight in (2, 3); \n  3. the white knight in (1, 3) attacks the black knight in (3, 2); \n  4. the white knight in (1, 3) attacks the black knight in (2, 1); \n  5. the white knight in (3, 1) attacks the black knight in (1, 2); \n  6. the white knight in (3, 1) attacks the black knight in (2, 3); \n  7. the white knight in (3, 3) attacks the black knight in (1, 2); \n  8. the white knight in (3, 3) attacks the black knight in (2, 1). ",
        "task_name": "1221_B. Knights",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=input()\nfor i in [0]*n:print('WB'*n)[i%2:][:n]",
        "correct": false,
        "task_id": "1195",
        "depth": 1
    },
    {
        "description": "Let a be a matrix of size r \u00d7 c containing positive integers, not necessarily distinct. Rows of the matrix are numbered from 1 to r, columns are numbered from 1 to c. We can construct an array b consisting of r + c integers as follows: for each i \u2208 [1, r], let b_i be the greatest common divisor of integers in the i-th row, and for each j \u2208 [1, c] let b_{r+j} be the greatest common divisor of integers in the j-th column. \n\nWe call the matrix diverse if all r + c numbers b_k (k \u2208 [1, r + c]) are pairwise distinct. \n\nThe magnitude of a matrix equals to the maximum of b_k.\n\nFor example, suppose we have the following matrix:\n\n\\begin{pmatrix} 2 & 9 & 7\\\\\\ 4 & 144 & 84 \\end{pmatrix} \n\nWe construct the array b:\n\n  1. b_1 is the greatest common divisor of 2, 9, and 7, that is 1; \n  2. b_2 is the greatest common divisor of 4, 144, and 84, that is 4; \n  3. b_3 is the greatest common divisor of 2 and 4, that is 2; \n  4. b_4 is the greatest common divisor of 9 and 144, that is 9; \n  5. b_5 is the greatest common divisor of 7 and 84, that is 7. \n\n\n\nSo b = [1, 4, 2, 9, 7]. All values in this array are distinct, so the matrix is diverse. The magnitude is equal to 9.\n\nFor a given r and c, find a diverse matrix that minimises the magnitude. If there are multiple solutions, you may output any of them. If there are no solutions, output a single integer 0. \n\nInput\n\nThe only line in the input contains two space separated integers r and c (1 \u2264 r,c \u2264 500) \u2014 the number of rows and the number of columns of the matrix to be found.\n\nOutput\n\nIf there is no solution, output a single integer 0.\n\nOtherwise, output r rows. The i-th of them should contain c space-separated integers, the j-th of which is a_{i,j} \u2014 the positive integer in the i-th row and j-th column of a diverse matrix minimizing the magnitude.\n\nFurthermore, it must hold that 1 \u2264 a_{i,j} \u2264 10^9. It can be shown that if a solution exists, there is also a solution with this additional constraint (still having minimum possible magnitude).\n\nExamples\n\nInput\n\n\n2 2\n\n\nOutput\n\n\n4 12\n2 9\n\nInput\n\n\n1 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first example, the GCDs of rows are b_1 = 4 and b_2 = 1, and the GCDs of columns are b_3 = 2 and b_4 = 3. All GCDs are pairwise distinct and the maximum of them is 4. Since the GCDs have to be distinct and at least 1, it is clear that there are no diverse matrices of size 2 \u00d7 2 with magnitude smaller than 4.\n\nIn the second example, no matter what a_{1,1} is, b_1 = b_2 will always hold, so there are no diverse matrices.",
        "task_name": "1266_C. Diverse Matrix",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "(r,c)=map(int,raw_input().split())\n\nif r==1 and c==1:\n\tprint(0)\n\t\nelse:\n\n\tflag=False\n\tif c==1:\n\t\tflag=True\n\t\t(r,c)=(c,r)\n\n\tl=[[1 for _ in range(c)] for _ in range(r)]\n\tb=[i+1 for i in range(r+c)]\n\n\tfor i in range(r):\n\t\tfor j in range(c):\n\t\t\tl[i][j]*=b[i]*b[r+j]\n\n\tif flag==False:\n\t\tfor i in range(r):\n\t\t\ts=\"\"\n\t\t\tfor j in range(c):\n\t\t\t\ts+=str(l[i][j])+\" \"\n\n\t\t\tprint(s)\n\n\telse:\n\t\tfor j in range(c):\t\n\t\t\ts=\"\"\n\t\t\tfor i in range(r):\n\t\t\t\ts+=str(l[i][j])+\" \"\n\n\t\t\tprint(s)\n",
        "correct": true,
        "task_id": "1196",
        "depth": 2
    },
    {
        "description": "Carousel Boutique is busy again! Rarity has decided to visit the pony ball and she surely needs a new dress, because going out in the same dress several times is a sign of bad manners. First of all, she needs a dress pattern, which she is going to cut out from the rectangular piece of the multicolored fabric.\n\nThe piece of the multicolored fabric consists of n \u00d7 m separate square scraps. Since Rarity likes dresses in style, a dress pattern must only include scraps sharing the same color. A dress pattern must be the square, and since Rarity is fond of rhombuses, the sides of a pattern must form a 45^{\\circ} angle with sides of a piece of fabric (that way it will be resembling the traditional picture of a rhombus).\n\nExamples of proper dress patterns: <image> Examples of improper dress patterns: <image> The first one consists of multi-colored scraps, the second one goes beyond the bounds of the piece of fabric, the third one is not a square with sides forming a 45^{\\circ} angle with sides of the piece of fabric.\n\nRarity wonders how many ways to cut out a dress pattern that satisfies all the conditions that do exist. Please help her and satisfy her curiosity so she can continue working on her new masterpiece!\n\nInput\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 2000). Each of the next n lines contains m characters: lowercase English letters, the j-th of which corresponds to scrap in the current line and in the j-th column. Scraps having the same letter share the same color, scraps having different letters have different colors.\n\nOutput\n\nPrint a single integer: the number of ways to cut out a dress pattern to satisfy all of Rarity's conditions.\n\nExamples\n\nInput\n\n\n3 3\naaa\naaa\naaa\n\n\nOutput\n\n\n10\n\n\nInput\n\n\n3 4\nabab\nbaba\nabab\n\n\nOutput\n\n\n12\n\n\nInput\n\n\n5 5\nzbacg\nbaaac\naaaaa\neaaad\nweadd\n\n\nOutput\n\n\n31\n\nNote\n\nIn the first example, all the dress patterns of size 1 and one of size 2 are satisfactory.\n\nIn the second example, only the dress patterns of size 1 are satisfactory.",
        "task_name": "1393_D. Rarity and New Dress",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\nimport sys\nfrom atexit import register\n\nif sys.version_info[0] < 3:\n    from io import BytesIO as stream\nelse:\n    from io import StringIO as stream\n\n\nsys.stdin = stream(sys.stdin.read())\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\nsys.stdout = stream()\nregister(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\ndef solve():\n    n, m = read_ints()\n    table = []\n    for _ in range(n):\n        table.append(input())\n\n    def create_table():\n        return [[1 for _ in range(m)] for _ in range(n)]\n\n    top_left = create_table()\n    top_right = create_table()\n    bottom_left = create_table()\n    bottom_right = create_table()\n\n    for i in range(n):\n        for j in range(m):\n            if i > 0 and j > 0 and table[i-1][j] == table[i][j-1] == table[i][j]:\n                top_left[i][j] = min(top_left[i-1][j], top_left[i][j-1])+1\n\n    for i in range(n):\n        for j in range(m-1, -1, -1):\n            if i > 0 and j < m-1 and table[i-1][j] == table[i][j+1] == table[i][j]:\n                top_right[i][j] = min(top_right[i-1][j], top_right[i][j+1])+1\n\n    for i in range(n-1, -1, -1):\n        for j in range(m):\n            if i < n-1 and j > 0 and table[i+1][j] == table[i][j-1] == table[i][j]:\n                bottom_left[i][j] = min(bottom_left[i+1][j], bottom_left[i][j-1])+1\n\n    for i in range(n-1, -1, -1):\n        for j in range(m-1, -1, -1):\n            if i < n-1 and j < m-1 and table[i+1][j] == table[i][j+1] == table[i][j]:\n                bottom_right[i][j] = min(bottom_right[i+1][j], bottom_right[i][j+1])+1\n\n    answer = 0\n    for i in range(n):\n        for j in range(m):\n            answer += min(top_left[i][j], top_right[i][j], bottom_left[i][j], bottom_right[i][j])\n    return answer\n\nif __name__ == '__main__':\n    print(solve())\n",
        "correct": true,
        "task_id": "1198",
        "depth": 2
    },
    {
        "description": "You and your friend are playing the game Mortal Kombat XI. You are trying to pass a challenge tower. There are n bosses in this tower, numbered from 1 to n. The type of the i-th boss is a_i. If the i-th boss is easy then its type is a_i = 0, otherwise this boss is hard and its type is a_i = 1.\n\nDuring one session, either you or your friend can kill one or two bosses (neither you nor your friend can skip the session, so the minimum number of bosses killed during one session is at least one). After your friend session, your session begins, then again your friend session begins, your session begins, and so on. The first session is your friend's session.\n\nYour friend needs to get good because he can't actually kill hard bosses. To kill them, he uses skip points. One skip point can be used to kill one hard boss.\n\nYour task is to find the minimum number of skip points your friend needs to use so you and your friend kill all n bosses in the given order.\n\nFor example: suppose n = 8, a = [1, 0, 1, 1, 0, 1, 1, 1]. Then the best course of action is the following:\n\n  * your friend kills two first bosses, using one skip point for the first boss; \n  * you kill the third and the fourth bosses; \n  * your friend kills the fifth boss; \n  * you kill the sixth and the seventh bosses; \n  * your friend kills the last boss, using one skip point, so the tower is completed using two skip points. \n\n\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of bosses. The second line of the test case contains n integers a_1, a_2, ..., a_n (0 \u2264 a_i \u2264 1), where a_i is the type of the i-th boss.\n\nIt is guaranteed that the sum of n does not exceed 2 \u22c5 10^5 (\u2211 n \u2264 2 \u22c5 10^5).\n\nOutput\n\nFor each test case, print the answer: the minimum number of skip points your friend needs to use so you and your friend kill all n bosses in the given order.\n\nExample\n\nInput\n\n\n6\n8\n1 0 1 1 0 1 1 1\n5\n1 1 1 1 0\n7\n1 1 1 1 0 0 1\n6\n1 1 1 1 1 1\n1\n1\n1\n0\n\n\nOutput\n\n\n2\n2\n2\n2\n1\n0",
        "task_name": "1418_C. Mortal Kombat Tower",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "t=int(raw_input())\nfor _ in range(t):\n    n=int(raw_input())\n    A=map(int,raw_input().split())\n    A.reverse()\n    F=[0]*n\n    M=[0]*n\n    F[0]=A[0]\n    if n==1:\n        print(F[0])\n        continue\n    F[1]=A[1]\n    for i in range(2,n):\n        M[i]=min(F[i-1],F[i-2])\n        F[i]=min(A[i]+M[i-1],A[i]+A[i-1]+M[i-2])\n    print(F[-1])",
        "correct": true,
        "task_id": "1199",
        "depth": 2
    },
    {
        "description": "You have n stacks of blocks. The i-th stack contains h_i blocks and it's height is the number of blocks in it. In one move you can take a block from the i-th stack (if there is at least one block) and put it to the i + 1-th stack. Can you make the sequence of heights strictly increasing?\n\nNote that the number of stacks always remains n: stacks don't disappear when they have 0 blocks.\n\nInput\n\nFirst line contains a single integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 100). The second line of each test case contains n integers h_i (0 \u2264 h_i \u2264 10^9) \u2014 starting heights of the stacks.\n\nIt's guaranteed that the sum of all n does not exceed 10^4.\n\nOutput\n\nFor each test case output YES if you can make the sequence of heights strictly increasing and NO otherwise.\n\nYou may print each letter in any case (for example, YES, Yes, yes, yEs will all be recognized as positive answer).\n\nExample\n\nInput\n\n\n6\n2\n1 2\n2\n1 0\n3\n4 4 4\n2\n0 0\n3\n0 1 0\n4\n1000000000 1000000000 1000000000 1000000000\n\n\nOutput\n\n\nYES\nYES\nYES\nNO\nNO\nYES\n\nNote\n\nIn the first test case there is no need to make any moves, the sequence of heights is already increasing.\n\nIn the second test case we need to move one block from the first stack to the second. Then the heights become 0 1.\n\nIn the third test case we could move one block from the first stack to the second and then from the second to the third, which would make the heights 3 4 5.\n\nIn the fourth test case we can't make a move, but the sequence is not increasing, so the answer is NO.\n\nIn the fifth test case we can only make one move (from the second to the third stack), which would make the heights 0 0 1. Both 0 1 0 and 0 0 1 are not increasing sequences, so the answer is NO.",
        "task_name": "1486_A. Shifting Stacks",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\n\ndef main():\n    print(input)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()",
        "correct": false,
        "task_id": "1201",
        "depth": 1
    },
    {
        "description": "The tycoon of a winery empire in Mondstadt, unmatched in every possible way. A thinker in the Knights of Favonius with an exotic appearance.\n\nThis time, the brothers are dealing with a strange piece of wood marked with their names. This plank of wood can be represented as a string of n characters. Each character is either a 'D' or a 'K'. You want to make some number of cuts (possibly 0) on this string, partitioning it into several contiguous pieces, each with length at least 1. Both brothers act with dignity, so they want to split the wood as evenly as possible. They want to know the maximum number of pieces you can split the wood into such that the ratios of the number of occurrences of 'D' to the number of occurrences of 'K' in each chunk are the same.\n\nKaeya, the curious thinker, is interested in the solution for multiple scenarios. He wants to know the answer for every prefix of the given string. Help him to solve this problem!\n\nFor a string we define a ratio as a:b where 'D' appears in it a times, and 'K' appears b times. Note that a or b can equal 0, but not both. Ratios a:b and c:d are considered equal if and only if a\u22c5 d = b\u22c5 c. \n\nFor example, for the string 'DDD' the ratio will be 3:0, for 'DKD' \u2014 2:1, for 'DKK' \u2014 1:2, and for 'KKKKDD' \u2014 2:4. Note that the ratios of the latter two strings are equal to each other, but they are not equal to the ratios of the first two strings.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000). Description of the test cases follows.\n\nThe first line of each test case contains an integer n (1 \u2264 n \u2264 5 \u22c5 10^5) \u2014 the length of the wood.\n\nThe second line of each test case contains a string s of length n. Every character of s will be either 'D' or 'K'.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 5 \u22c5 10^5.\n\nOutput\n\nFor each test case, output n space separated integers. The i-th of these numbers should equal the answer for the prefix s_{1},s_{2},...,s_{i}.\n\nExample\n\nInput\n\n\n5\n3\nDDK\n6\nDDDDDD\n4\nDKDK\n1\nD\n9\nDKDKDDDDK\n\n\nOutput\n\n\n1 2 1 \n1 2 3 4 5 6 \n1 1 1 2 \n1 \n1 1 1 2 1 2 1 1 3 \n\nNote\n\nFor the first test case, there is no way to partition 'D' or 'DDK' into more than one block with equal ratios of numbers of 'D' and 'K', while you can split 'DD' into 'D' and 'D'.\n\nFor the second test case, you can split each prefix of length i into i blocks 'D'.",
        "task_name": "1536_C. Diluc and Kaeya",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from fractions import Fraction,gcd\nfrom sys import stdin,stdout\nfor _ in xrange(input()):\n    n=input()\n    s=stdin.readline()\n    d={}\n    a,b=0,0\n    ans=\"\"\n    for i in s:\n        if i==\"D\":\n            a+=1\n        elif i==\"K\":\n            b+=1\n        else:\n            break\n        if a!=0 and b!=0:\n            x=gcd(a,b)\n            x=str(a/x)+\" \"+str(b/x)\n            try:\n                d[x]+=1\n                ans+=str(d[x])+\" \"\n            except:\n                d[x]=1\n                ans+=\"1 \"\n        else:\n            ans+=str(max(a,b))+\" \"\n    stdout.write(ans+\"\\n\")",
        "correct": true,
        "task_id": "1202",
        "depth": 2
    },
    {
        "description": "Furlo and Rublo play a game. The table has n piles of coins lying on it, the i-th pile has ai coins. Furlo and Rublo move in turns, Furlo moves first. In one move you are allowed to:\n\n  * choose some pile, let's denote the current number of coins in it as x; \n  * choose some integer y (0 \u2264 y < x; x1 / 4 \u2264 y \u2264 x1 / 2) and decrease the number of coins in this pile to y. In other words, after the described move the pile will have y coins left. \n\n\n\nThe player who can't make a move, loses. \n\nYour task is to find out, who wins in the given game if both Furlo and Rublo play optimally well.\n\nInput\n\nThe first line contains integer n (1 \u2264 n \u2264 77777) \u2014 the number of piles. The next line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 777777777777) \u2014 the sizes of piles. The numbers are separated by single spaces.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nOutput\n\nIf both players play optimally well and Furlo wins, print \"Furlo\", otherwise print \"Rublo\". Print the answers without the quotes.\n\nExamples\n\nInput\n\n1\n1\n\n\nOutput\n\nRublo\n\n\nInput\n\n2\n1 2\n\n\nOutput\n\nRublo\n\n\nInput\n\n10\n1 2 3 4 5 6 7 8 9 10\n\n\nOutput\n\nFurlo",
        "task_name": "256_C. Furlo and Rublo and Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def main():\n    n = int(raw_input())\n    a = map(int, raw_input().split())\n    res = 0\n    count = 0\n    for i in range(n):\n        c = int(format(a[i],'b'))\n        res += c\n    res = str(res)\n    for i in range(len(res)):\n        if int(res[i]) % 2 == 0:\n            print('Furlo')\n            return\n    print('Rublo')\n\nmain()",
        "correct": false,
        "task_id": "1203",
        "depth": 1
    },
    {
        "description": "The sequence is called ordered if it is non-decreasing or non-increasing. For example, sequnces [3, 1, 1, 0] and [1, 2, 3, 100] are ordered, but the sequence [1, 3, 3, 1] is not. You are given a sequence of numbers. You are to find it's shortest subsequence which is not ordered.\n\nA subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements.\n\nInput\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 105). The second line contains n space-separated integers \u2014 the given sequence. All numbers in this sequence do not exceed 106 by absolute value.\n\nOutput\n\nIf the given sequence does not contain any unordered subsequences, output 0. Otherwise, output the length k of the shortest such subsequence. Then output k integers from the range [1..n] \u2014 indexes of the elements of this subsequence. If there are several solutions, output any of them.\n\nExamples\n\nInput\n\n5\n67 499 600 42 23\n\n\nOutput\n\n3\n1 3 5\n\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\n0\n\n\nInput\n\n3\n2 3 1\n\n\nOutput\n\n3\n1 2 3",
        "task_name": "27_C. Unordered Subsequence",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from math import *\nfrom Queue import *\n\n\nn = int(raw_input())\nl = map(int, raw_input().split())\nif n < 3:\n    print(0)\nelse:\n    i = 0\n    while (i+1 < n) and (l[i] == l[i+1]):\n        i += 1\n    if i == n - 1:\n        print(0)\n    else:\n        a = i\n        if l[a] < l[a+1]:\n            i = a+1\n            while (i+1 < n) and (l[i] <= l[i+1]):\n                i += 1\n            if i == n-1:\n                print(0)\n            else:\n                print(3)\n                print(str(a+1) + ' ' + str(i+1) + ' ' + str(i+2))\n        if l[a] > l[a+1]:\n            i = a+1\n            while (i+1 < n) and (l[i] >= l[i+1]):\n                i += 1\n            if i == n-1:\n                print(0)\n            else:\n                print(3)\n                print(str(a+1) + ' ' + str(i+1) + ' ' + str(i+2))\n",
        "correct": true,
        "task_id": "1204",
        "depth": 1
    },
    {
        "description": "Eugeny loves listening to music. He has n songs in his play list. We know that song number i has the duration of ti minutes. Eugeny listens to each song, perhaps more than once. He listens to song number i ci times. Eugeny's play list is organized as follows: first song number 1 plays c1 times, then song number 2 plays c2 times, ..., in the end the song number n plays cn times.\n\nEugeny took a piece of paper and wrote out m moments of time when he liked a song. Now for each such moment he wants to know the number of the song that played at that moment. The moment x means that Eugeny wants to know which song was playing during the x-th minute of his listening to the play list.\n\nHelp Eugeny and calculate the required numbers of songs.\n\nInput\n\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 105). The next n lines contain pairs of integers. The i-th line contains integers ci, ti (1 \u2264 ci, ti \u2264 109) \u2014 the description of the play list. It is guaranteed that the play list's total duration doesn't exceed 109 <image>.\n\nThe next line contains m positive integers v1, v2, ..., vm, that describe the moments Eugeny has written out. It is guaranteed that there isn't such moment of time vi, when the music doesn't play any longer. It is guaranteed that vi < vi + 1 (i < m).\n\nThe moment of time vi means that Eugeny wants to know which song was playing during the vi-th munite from the start of listening to the playlist.\n\nOutput\n\nPrint m integers \u2014 the i-th number must equal the number of the song that was playing during the vi-th minute after Eugeny started listening to the play list.\n\nExamples\n\nInput\n\n1 2\n2 8\n1 16\n\n\nOutput\n\n1\n1\n\n\nInput\n\n4 9\n1 2\n2 1\n1 1\n2 2\n1 2 3 4 5 6 7 8 9\n\n\nOutput\n\n1\n1\n2\n2\n3\n4\n4\n4\n4",
        "task_name": "302_B. Eugeny and Play List",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\nimport bisect\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\n\n\ndef main():\n    pass\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n\n# For getting input from input.txt file\n#sys.stdin = open('input.txt', 'r')\n\n# Printing the Output to output.txt file\n#sys.stdout = open('output.txt', 'w')\n\n\nimport bisect\n\n\nn, m = list(map(int, input().rstrip().split()))\nlist1 = []\nsum1 = 0\nfor i in range(n):\n    a, b = list(map(int, input().rstrip().split()))\n    sum1 += (a*b)\n    list1.append(sum1)\nfor i in input().rstrip().split():\n    t1 = int(i)\n    print(bisect.bisect_left(list1, t1)+1)\n",
        "correct": true,
        "task_id": "1205",
        "depth": 1
    },
    {
        "description": "Inna loves digit 9 very much. That's why she asked Dima to write a small number consisting of nines. But Dima must have misunderstood her and he wrote a very large number a, consisting of digits from 1 to 9.\n\nInna wants to slightly alter the number Dima wrote so that in the end the number contained as many digits nine as possible. In one move, Inna can choose two adjacent digits in a number which sum equals 9 and replace them by a single digit 9.\n\nFor instance, Inna can alter number 14545181 like this: 14545181 \u2192 1945181 \u2192 194519 \u2192 19919. Also, she can use this method to transform number 14545181 into number 19991. Inna will not transform it into 149591 as she can get numbers 19919 and 19991 which contain more digits nine.\n\nDima is a programmer so he wants to find out how many distinct numbers containing as many digits nine as possible Inna can get from the written number. Help him with this challenging task.\n\nInput\n\nThe first line of the input contains integer a (1 \u2264 a \u2264 10100000). Number a doesn't have any zeroes.\n\nOutput\n\nIn a single line print a single integer \u2014 the answer to the problem. It is guaranteed that the answer to the problem doesn't exceed 263 - 1.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nExamples\n\nInput\n\n369727\n\n\nOutput\n\n2\n\n\nInput\n\n123456789987654321\n\n\nOutput\n\n1\n\n\nInput\n\n1\n\n\nOutput\n\n1\n\nNote\n\nNotes to the samples\n\nIn the first sample Inna can get the following numbers: 369727 \u2192 99727 \u2192 9997, 369727 \u2192 99727 \u2192 9979.\n\nIn the second sample, Inna can act like this: 123456789987654321 \u2192 12396789987654321 \u2192 1239678998769321.",
        "task_name": "374_B. Inna and Nine",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Enter your code here. Read input from STDIN. Print output to STDOUT# ===============================================================================================\n# importing some useful libraries.\nfrom __future__ import division, print_function\nfrom fractions import Fraction\nimport sys\nimport os\nfrom io import BytesIO, IOBase\nfrom itertools import *\nimport bisect\nfrom heapq import *\nfrom math import ceil, floor\nfrom copy import *\nfrom collections import deque, defaultdict\nfrom collections import Counter as counter  # Counter(list)  return a dict with {key: count}\nfrom itertools import combinations  # if a = [1,2,3] then print(list(comb(a,2))) -----> [(1, 2), (1, 3), (2, 3)]\nfrom itertools import permutations as permutate\nfrom bisect import bisect_left as bl\nfrom operator import *\n# If the element is already present in the list,\n\n# the left most position where element has to be inserted is returned.\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n\n# If the element is already present in the list,\n# the right most position where element has to be inserted is returned\n\n# ==============================================================================================\n# fast I/O region\n\nBUFSIZE = 8192\nfrom sys import stderr\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"A\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for A in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(A))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n# inp = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# ===============================================================================================\n### START ITERATE RECURSION ###\nfrom types import GeneratorType\n\n\ndef iterative(f, stack=[]):\n    def wrapped_func(*args, **kwargs):\n        if stack: return f(*args, **kwargs)\n        to = f(*args, **kwargs)\n        while True:\n            if type(to) is GeneratorType:\n                stack.append(to)\n                to = next(to)\n                continue\n            stack.pop()\n            if not stack: break\n            to = stack[-1].send(to)\n        return to\n\n    return wrapped_func\n\n\n#### END ITERATE RECURSION ####\n###########################\n# Sorted list\nclass SortedList:\n    def __init__(self, iterable=[], _load=200):\n        \"\"\"Initialize sorted list instance.\"\"\"\n        values = sorted(iterable)\n        self._len = _len = len(values)\n        self._load = _load\n        self._lists = _lists = [values[start:start + _load] for start in range(0, _len, _load)]\n        self._list_lens = [len(_list) for _list in _lists]\n        self._mins = [_list[0] for _list in _lists]\n        self._fen_tree = []\n        self._rebuild = True\n\n    def _fen_build(self):\n        \"\"\"Build a fenwick tree instance.\"\"\"\n        self._fen_tree[:] = self._list_lens\n        _fen_tree = self._fen_tree\n        for start in range(len(_fen_tree)):\n            if start | start + 1 < len(_fen_tree):\n                _fen_tree[start | start + 1] += _fen_tree[start]\n        self._rebuild = False\n\n    def _fen_update(self, index, value):\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\n        if not self._rebuild:\n            _fen_tree = self._fen_tree\n            while index < len(_fen_tree):\n                _fen_tree[index] += value\n                index |= index + 1\n\n    def _fen_query(self, end):\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        A = 0\n        while end:\n            A += _fen_tree[end - 1]\n            end &= end - 1\n        return A\n\n    def _fen_findkth(self, k):\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\n        _list_lens = self._list_lens\n        if k < _list_lens[0]:\n            return 0, k\n        if k >= self._len - _list_lens[-1]:\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        idx = -1\n        for d in reversed(range(len(_fen_tree).bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\n                idx = right_idx\n                k -= _fen_tree[idx]\n        return idx + 1, k\n\n    def _delete(self, pos, idx):\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len -= 1\n        self._fen_update(pos, -1)\n        del _lists[pos][idx]\n        _list_lens[pos] -= 1\n\n        if _list_lens[pos]:\n            _mins[pos] = _lists[pos][0]\n        else:\n            del _lists[pos]\n            del _list_lens[pos]\n            del _mins[pos]\n            self._rebuild = True\n\n    def _loc_left(self, value):\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        lo, pos = -1, len(_lists) - 1\n        while lo + 1 < pos:\n            mi = (lo + pos) >> 1\n            if value <= _mins[mi]:\n                pos = mi\n            else:\n                lo = mi\n\n        if pos and value <= _lists[pos - 1][-1]:\n            pos -= 1\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value <= _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def _loc_right(self, value):\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        pos, hi = 0, len(_lists)\n        while pos + 1 < hi:\n            mi = (pos + hi) >> 1\n            if value < _mins[mi]:\n                hi = mi\n            else:\n                pos = mi\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value < _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def add(self, value):\n        \"\"\"Add `value` to sorted list.\"\"\"\n        _load = self._load\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len += 1\n        if _lists:\n            pos, idx = self._loc_right(value)\n            self._fen_update(pos, 1)\n            _list = _lists[pos]\n            _list.insert(idx, value)\n            _list_lens[pos] += 1\n            _mins[pos] = _list[0]\n            if _load + _load < len(_list):\n                _lists.insert(pos + 1, _list[_load:])\n                _list_lens.insert(pos + 1, len(_list) - _load)\n                _mins.insert(pos + 1, _list[_load])\n                _list_lens[pos] = _load\n                del _list[_load:]\n                self._rebuild = True\n        else:\n            _lists.append([value])\n            _mins.append(value)\n            _list_lens.append(1)\n            self._rebuild = True\n\n    def discard(self, value):\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_right(value)\n            if idx and _lists[pos][idx - 1] == value:\n                self._delete(pos, idx - 1)\n\n    def remove(self, value):\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\n        _len = self._len\n        self.discard(value)\n        if _len == self._len:\n            raise ValueError('{0!r} not in list'.format(value))\n\n    def pop(self, index=-1):\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        value = self._lists[pos][idx]\n        self._delete(pos, idx)\n        return value\n\n    def bisect_left(self, value):\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_left(value)\n        return self._fen_query(pos) + idx\n\n    def bisect_right(self, value):\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_right(value)\n        return self._fen_query(pos) + idx\n\n    def count(self, value):\n        \"\"\"Return number of ofinansurrences of `value` in the sorted list.\"\"\"\n        return self.bisect_right(value) - self.bisect_left(value)\n\n    def __len__(self):\n        \"\"\"Return the size of the sorted list.\"\"\"\n        return self._len\n\n    def __getitem__(self, index):\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        return self._lists[pos][idx]\n\n    def __delitem__(self, index):\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        self._delete(pos, idx)\n\n    def __contains__(self, value):\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_left(value)\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\n        return False\n\n    def __iter__(self):\n        \"\"\"Return an iterator over the sorted list.\"\"\"\n        return (value for _list in self._lists for value in _list)\n\n    def __reversed__(self):\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\n\n    def __repr__(self):\n        \"\"\"Return string representation of sorted list.\"\"\"\n        return 'SortedList({0})'.format(list(self))\n\n\n# ===============================================================================================\n# some shortcuts\n\nmod = 1000000007\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\ndef pow(A, B, p):\n    res = 1  # Initialize result\n    A = A % p  # Update A if it is more , than or equal to p\n    if (A == 0):\n        return 0\n    while (B > 0):\n        if ((B & 1) == 1):  # If B is odd, multiply, A with result\n            res = (res * A) % p\n\n        B = B >> 1  # B = B/2\n        A = (A * A) % p\n    return res\n\n\nfrom functools import reduce\n\n\ndef numberOfSetBits(n):\n    n = (n & 0x5555555555555555) + ((n & 0xAAAAAAAAAAAAAAAA) >> 1)\n    n = (n & 0x3333333333333333) + ((n & 0xCCCCCCCCCCCCCCCC) >> 2)\n    n = (n & 0x0F0F0F0F0F0F0F0F) + ((n & 0xF0F0F0F0F0F0F0F0) >> 4)\n    n = (n & 0x00FF00FF00FF00FF) + ((n & 0xFF00FF00FF00FF00) >> 8)\n    n = (n & 0x0000FFFF0000FFFF) + ((n & 0xFFFF0000FFFF0000) >> 16)\n    n = (n & 0x00000000FFFFFFFF) + ((n & 0xFFFFFFFF00000000) >> 32)  # This last & isn't strictly necessary.\n    return n\n\n\ndef factors(n):\n    return set(reduce(list.__add__,\n                      ([start, n // start] for start in range(1, int(n ** 0.5) + 1) if n % start == 0)))\n\n\nclass MergeFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n        # self.lista = [[_] for _ in range(n)]\n\n    def find(self, a):\n        to_update = []\n        while a != self.parent[a]:\n            to_update.append(a)\n            a = self.parent[a]\n        for b in to_update:\n            self.parent[b] = a\n        return self.parent[a]\n\n    def merge(self, a, b):\n        a = self.find(a)\n        b = self.find(b)\n        if a == b:\n            return\n        if self.size[a] < self.size[b]:\n            a, b = b, a\n        self.num_sets -= 1\n        self.parent[b] = a\n        self.size[a] += self.size[b]\n        # self.lista[a] += self.lista[b]\n        # self.lista[b] = []\n\n    def set_size(self, a):\n        return self.size[self.find(a)]\n\n    def __len__(self):\n        return self.num_sets\n\n\ndef gcd(a, b):\n    if a == b: return a\n    while b > 0: a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return abs((a // gcd(a, b)) * b)\n\n\ninf = float(\"inf\")\n\n##############Find sum of product of subsets of size k in a array\n\n\n# ar=[0,1,2,3]\n# k=3\n# n=len(ar)-1\n# dp=[0]*(n+1)\n# dp[0]=1\n# for pos in range(1,n+1):\n#     dp[pos]=0\n#     l=max(1,k+pos-n-1)\n#     for j in range(min(pos,k),l-1,-1):\n#         dp[j]=dp[j]+ar[pos]*dp[j-1]\n# print(dp[k])\n\n\n##two pointer method\n\n\n# l=0\n# for r in range(n):\n#     add(r)\n#     while(not ok(l,r)):#l,r included\n#         remove(l)\n#         l+=1\n#     #[l,r] is valid\n#     if(ok()):\n#         do()\n\n\n# #==========================\n\n\n# r=-1\n# for l in range(n):\n#     while (r + 1 < l):\n#         r=l-1\n#         reset state\n#\n#\n#\n#     while(r+1<n and  ok_to_include_r+1()):\n#         add(r)\n#         r+=1\n#     #[l,r) is valid\n#     if(ok()):\n#         do()\n#     remove(l)\n\n\n# #############################\n\n\n# discrete binary search\n# minimise:\n# def search(l,r):\n#     ans=inf\n#     while(l<=r):\n#         mid=(r-l)//2 + l\n#         if(check(mid)):\n#             ans=min(ans,mid)\n#             r=mid-1\n#         else:\n#             l=mid+1\n#\n#     return ans\n\n# maximise:\n# def search(l,r):\n#\n#     ans=-1\n#     while(l<=r):\n#         mid=l+(r-l)//2\n#         if(check(mid)):\n#             ans=max(ans,mid)\n#             l=mid+1\n#         else:\n#             r=mid-1\n#\n#     return ans\n\n\n# =========================================================================================\nfrom collections import defaultdict\n\n\n# #\n# to find factorial and ncr\n# tot = 40\n# mod = 10**9 +7\n# fac = [1, 1]\n# finv = [1, 1]\n# inv = [0, 1]\n#\n# for start in range(2, tot + 1):\n#     fac.append((fac[-1] * start) % mod)\n#     inv.append(mod - (inv[mod % start] * (mod // start) % mod))\n#     finv.append(finv[-1] * inv[-1] % mod)\n#\n#\n# def comb(n, r):\n#     if(r==0 or r==n):return 1\n#     if n < r:\n#         return 0\n#     else:\n#         return fac[n] * (finv[r] * finv[n - r] % mod) % mod\n#\n#\n# from functools import lru_cache\n# p=3\n# def ncr_small_mod_p(n,r):\n#     ans=1\n#     while(n>0):\n#         x=n%p\n#         y=r%p\n#         n//=p\n#         r//=p\n#         ans*=comb(x,y)\n#         ans%=p\n#     return ans\n\n\n#\n\ndef inp(): return sys.stdin.readline().rstrip(\"\\r\\n\")  # for fast input\n\n\ndef N():\n    return int(inp())\n\n\ndef out(var): sys.stdout.write(str(var))  # for fast output, always take string\n\n\ndef lis(): return list(map(int, inp().split()))\n\n\ndef stringlis(): return list(map(str, inp().split()))\n\n\ndef sep(): return map(int, inp().split())\n\n\ndef strsep(): return map(str, inp().split())\n\n\ndef fsep(): return map(float, inp().split())\n\n\ndef nextline(): out(\"\\n\")  # as stdout.write always print sring.\n\n\ndef arr1d(n, v):\n    return [v] * n\n\n\ndef arr2d(n, m, v):\n    return [[v] * m for _ in range(n)]\n\n\ndef arr3d(n, m, p, v):\n    return [[[v] * p for _ in range(m)] for sta in range(n)]\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\n# co-ordinate compression\n# ma={s:idx for idx,s in enumerate(sorted(set(l+r)))}\n\n# mxn=100005\n# lrg=[0]*mxn\n# for start in range(2,mxn-3):\n#     if (lrg[start]==0):\n#         for j in range(start,mxn-3,start):\n#             lrg[j]=start\n\ntest_count = 1\n\n\ndef testcase(t):\n    global test_count\n    for p in range(t):\n        solve()\n        test_count += 1\n\n\ndef printer(s):\n    global test_count\n    print(\"Case #{}: {}\".format(test_count, s))\n\n\n\ndef solve():\n    s=inp()\n    n=len(s)\n    d=MergeFind(n)\n    for i in range(1,n):\n        if(int(s[i])+ int(s[i-1])==9):\n            d.merge(i,i-1)\n\n    ans=1\n    for i in range(n):\n        if(d.find(i)==i and d.size[i]!=1 and d.size[i]%2==1):\n            ans*=2\n    print(ans)\n\n\n\n\n\n\n\n\n    \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsolve()\n#testcase(N())\n\n\n",
        "correct": false,
        "task_id": "1207",
        "depth": 1
    },
    {
        "description": "After you had helped Fedor to find friends in the \u00abCall of Soldiers 3\u00bb game, he stopped studying completely. Today, the English teacher told him to prepare an essay. Fedor didn't want to prepare the essay, so he asked Alex for help. Alex came to help and wrote the essay for Fedor. But Fedor didn't like the essay at all. Now Fedor is going to change the essay using the synonym dictionary of the English language.\n\nFedor does not want to change the meaning of the essay. So the only change he would do: change a word from essay to one of its synonyms, basing on a replacement rule from the dictionary. Fedor may perform this operation any number of times.\n\nAs a result, Fedor wants to get an essay which contains as little letters \u00abR\u00bb (the case doesn't matter) as possible. If there are multiple essays with minimum number of \u00abR\u00bbs he wants to get the one with minimum length (length of essay is the sum of the lengths of all the words in it). Help Fedor get the required essay.\n\nPlease note that in this problem the case of letters doesn't matter. For example, if the synonym dictionary says that word cat can be replaced with word DOG, then it is allowed to replace the word Cat with the word doG.\n\nInput\n\nThe first line contains a single integer m (1 \u2264 m \u2264 105) \u2014 the number of words in the initial essay. The second line contains words of the essay. The words are separated by a single space. It is guaranteed that the total length of the words won't exceed 105 characters.\n\nThe next line contains a single integer n (0 \u2264 n \u2264 105) \u2014 the number of pairs of words in synonym dictionary. The i-th of the next n lines contains two space-separated non-empty words xi and yi. They mean that word xi can be replaced with word yi (but not vise versa). It is guaranteed that the total length of all pairs of synonyms doesn't exceed 5\u00b7105 characters.\n\nAll the words at input can only consist of uppercase and lowercase letters of the English alphabet.\n\nOutput\n\nPrint two integers \u2014 the minimum number of letters \u00abR\u00bb in an optimal essay and the minimum length of an optimal essay.\n\nExamples\n\nInput\n\n3\nAbRb r Zz\n4\nxR abRb\naA xr\nzz Z\nxr y\n\n\nOutput\n\n2 6\n\n\nInput\n\n2\nRuruRu fedya\n1\nruruRU fedor\n\n\nOutput\n\n1 10",
        "task_name": "467_D. Fedor and Essay",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "__author__ = 'luckybug'\n\nm = int(raw_input())\n\nref = raw_input().split()\n\nn = int(raw_input())\n\ndic = {}\n\nfor i in xrange(n):\n    inp = raw_input().split()\n    key = inp[0]\n    val = inp[1]\n    dic[key.lower()] = val.lower()\n\nlength = 0\nrCount = 0\n\nfor i in xrange(len(ref)):\n    word = ref[i].lower()\n\n    rWord = word.count('r')\n    lWord = len(word)\n\n    if dic.has_key(word):\n        change = dic[word]\n\n        rChange = change.count('r')\n        lChange = len(change)\n\n        if rWord:\n            if rChange < rWord or rChange == rWord and lChange < lWord:\n                ref[i] = change\n                rCount += rChange\n                length += lChange\n            else:\n                length += lWord\n                rCount += rWord\n        elif lChange < lWord and not rChange:\n            ref[i] = change\n            length += lChange\n        else:\n            length += lWord\n    else:\n        length += lWord\n        rCount += rWord\n\n#length += len(ref)-1\nprint(str(rCount) + \" \" + str(length))",
        "correct": false,
        "task_id": "1208",
        "depth": 1
    },
    {
        "description": "It was decided in IT City to distinguish successes of local IT companies by awards in the form of stars covered with gold from one side. To order the stars it is necessary to estimate order cost that depends on the area of gold-plating. Write a program that can calculate the area of a star.\n\nA \"star\" figure having n \u2265 5 corners where n is a prime number is constructed the following way. On the circle of radius r n points are selected so that the distances between the adjacent ones are equal. Then every point is connected by a segment with two maximally distant points. All areas bounded by the segments parts are the figure parts.\n\n<image>\n\nInput\n\nThe only line of the input contains two integers n (5 \u2264 n < 109, n is prime) and r (1 \u2264 r \u2264 109) \u2014 the number of the star corners and the radius of the circumcircle correspondingly.\n\nOutput\n\nOutput one number \u2014 the star area. The relative error of your answer should not be greater than 10 - 7.\n\nExamples\n\nInput\n\n7 10\n\n\nOutput\n\n108.395919545675",
        "task_name": "630_P. Area of a Star",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math\n\nn, r = map(int, raw_input().split())\n\nPI = math.acos(-1.0)\n\nang = 2 * PI / n\ntheta = ang / 2\n\ndic = {}\n\nfor i in [0, n / 2, 1, 1 - n / 2]:\n  dic[i] = math.cos(ang * i), math.sin(ang * i)\n\ndef mul(v1, v2):\n  x1, y1 = v1\n  x2, y2 = v2\n  return x1 * y2 - y1 * x2\n\ndef add(v1, v2):\n  return v1[0] + v2[0], v1[1] + v2[1]\n\ndef sub(v1, v2):\n  return v1[0] - v2[0], v1[1] - v2[1]\n\ndef dot(v1, v2):\n  return v1[0] * v2[0] + v1[1] * v2[1]\n\ndef dis(v1, v2):\n  return ((v1[0] - v2[0]) ** 2 + (v1[1] - v2[1]) ** 2) ** 0.5\n\ndef mul_num(v1, a):\n  return v1[0] * a, v1[1] * a\n\ndef inter(a, b, c, d):\n  t1 = mul(sub(a, b), sub(d, a))\n  t2 = mul(sub(a, b), sub(c, a))\n  return add(c, mul_num(sub(d, c), -t2 / (t1 - t2)))\n\na = dic[0]\nb = dic[0 + n / 2]\nc = dic[1]\nd = dic[1 - n / 2]\n#print(a)\n#print(b)\n#print(c)\n#print(d)\n\np = inter(a, b, c, d)\n#print(p)\no = (0, 0)\n\nprint(abs(mul(sub(o, p), sub(dic[0], o))) * n * r * r)\n",
        "correct": false,
        "task_id": "1211",
        "depth": 1
    },
    {
        "description": "Given a positive integer n, find k integers (not necessary distinct) such that all these integers are strictly greater than 1, and their product is equal to n.\n\nInput\n\nThe first line contains two integers n and k (2 \u2264 n \u2264 100000, 1 \u2264 k \u2264 20).\n\nOutput\n\nIf it's impossible to find the representation of n as a product of k numbers, print -1.\n\nOtherwise, print k integers in any order. Their product must be equal to n. If there are multiple answers, print any of them.\n\nExamples\n\nInput\n\n100000 2\n\n\nOutput\n\n2 50000 \n\n\nInput\n\n100000 20\n\n\nOutput\n\n-1\n\n\nInput\n\n1024 5\n\n\nOutput\n\n2 64 2 2 2 ",
        "task_name": "797_A. k-Factorization",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Apr 24 20:04:29 2017\n\n@author: wb\n\"\"\"\nfrom __future__ import print_function\nimport math\n\n\na={}\nlist=raw_input().split()\nn=int(list[0])\nm=int(list[1])\ncnt=0\ncl_n=int(math.sqrt(n))\nif cl_n<2:\n    cl_n=2\nfor i in range(2,cl_n+1):\n    while n%i==0:\n        cnt=cnt+1\n        a[cnt]=i;\n        n=n/i\n    \nif cnt>=m:\n   jl=cnt-m\n   ans=1\n   for i in range(1,jl+2):\n       ans=ans*a[i]\n   for i in range(jl+2,cnt+1):\n       print(a[i],' ',end='')\n   print(ans)\nelse:\n    print('-1')",
        "correct": false,
        "task_id": "1215",
        "depth": 2
    },
    {
        "description": "Ivan likes to learn different things about numbers, but he is especially interested in really big numbers. Ivan thinks that a positive integer number x is really big if the difference between x and the sum of its digits (in decimal representation) is not less than s. To prove that these numbers may have different special properties, he wants to know how rare (or not rare) they are \u2014 in fact, he needs to calculate the quantity of really big numbers that are not greater than n.\n\nIvan tried to do the calculations himself, but soon realized that it's too difficult for him. So he asked you to help him in calculations.\n\nInput\n\nThe first (and the only) line contains two integers n and s (1 \u2264 n, s \u2264 1018).\n\nOutput\n\nPrint one integer \u2014 the quantity of really big numbers that are not greater than n.\n\nExamples\n\nInput\n\n12 1\n\n\nOutput\n\n3\n\n\nInput\n\n25 20\n\n\nOutput\n\n0\n\n\nInput\n\n10 9\n\n\nOutput\n\n1\n\nNote\n\nIn the first example numbers 10, 11 and 12 are really big.\n\nIn the second example there are no really big numbers that are not greater than 25 (in fact, the first really big number is 30: 30 - 3 \u2265 20).\n\nIn the third example 10 is the only really big number (10 - 1 \u2265 9).",
        "task_name": "817_C. Really Big Numbers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"\n// Author : snape_here - Susanta Mukherjee\n     \n\"\"\"\n \nfrom __future__ import division, print_function\n \nimport os,sys\nfrom io import BytesIO, IOBase\n \nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n \n \ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().split())\ndef li(): return list(mi())\n \n \ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n \ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\nmod=1000000007\n\nimport math\n\ndef main():\n    \n    n,s=mi()\n    a=int(math.ceil(s/9))\n    c=10*a \n    ans=n-c+1\n    if ans<0:\n        ans=0 \n    print(ans)\n\n    \n# region fastio\n \nBUFSIZE = 8192\n \n \nclass FastIO(IOBase):\n    newlines = 0\n \n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n \n \nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n \ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n \n# endregion\n \n \nif __name__ == \"__main__\":\n    #read()\n    main()",
        "correct": false,
        "task_id": "1216",
        "depth": 1
    },
    {
        "description": "Ilya is very fond of graphs, especially trees. During his last trip to the forest Ilya found a very interesting tree rooted at vertex 1. There is an integer number written on each vertex of the tree; the number written on vertex i is equal to ai.\n\nIlya believes that the beauty of the vertex x is the greatest common divisor of all numbers written on the vertices on the path from the root to x, including this vertex itself. In addition, Ilya can change the number in one arbitrary vertex to 0 or leave all vertices unchanged. Now for each vertex Ilya wants to know the maximum possible beauty it can have.\n\nFor each vertex the answer must be considered independently.\n\nThe beauty of the root equals to number written on it.\n\nInput\n\nFirst line contains one integer number n \u2014 the number of vertices in tree (1 \u2264 n \u2264 2\u00b7105).\n\nNext line contains n integer numbers ai (1 \u2264 i \u2264 n, 1 \u2264 ai \u2264 2\u00b7105).\n\nEach of next n - 1 lines contains two integer numbers x and y (1 \u2264 x, y \u2264 n, x \u2260 y), which means that there is an edge (x, y) in the tree.\n\nOutput\n\nOutput n numbers separated by spaces, where i-th number equals to maximum possible beauty of vertex i.\n\nExamples\n\nInput\n\n2\n6 2\n1 2\n\n\nOutput\n\n6 6 \n\n\nInput\n\n3\n6 2 3\n1 2\n1 3\n\n\nOutput\n\n6 6 6 \n\n\nInput\n\n1\n10\n\n\nOutput\n\n10 ",
        "task_name": "842_C. Ilya And The Tree",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\na = map(int, raw_input().split())\n\ngraph = [[] for _ in range(n)]\n\nfor i in xrange(n - 1):\n    x, y = map(int, raw_input().split())\n    x -= 1; y -= 1\n#    print(x, y)\n    graph[x].append(y)\n    graph[y].append(x)\n#    graph\n#    a[i] = int(raw_input())\n    \n#n, k = map(int, raw_input().split())\n#s = str(raw_input())\n\n#a = map(int, raw_input().split())\n#b = [(y,x) for x,y in enumerate(map(int,raw_input().split()))]\n\nclass Info:\n    def __init__(self):\n        self.gcd = 0\n        self.tor1 = 0\n        self.ifr1 = 0\n        self.tor2 = 0\n        self.ifr2 = 0\n\n    def get(self):\n        r = self.gcd\n        if self.ifr1 > r:\n            r = self.ifr1\n        if self.ifr2 > r:\n            r = self.ifr2\n        return r\n\nvisited = [False] * n\n\ngcdinfo = [Info() for _ in xrange(n)]\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef dfs(n, parent):\n    if visited[n]:\n        return\n    visited[n] = True\n    if parent != -1:\n        newgcd = gcd(gcdinfo[parent].gcd, a[n])\n#        print(\"newgcd=\", newgcd)\n        gcdinfo[n].gcd = newgcd\n        if newgcd < gcdinfo[parent].gcd:\n            # try removing self\n            gcdinfo[n].tor1 = a[n]\n            gcdinfo[n].ifr1 = gcdinfo[parent].gcd\n            if gcdinfo[parent].ifr1 == 0:\n                # alternative option\n                gcdinfo[n].tor2 = gcdinfo[parent].gcd\n                gcdinfo[n].ifr2 = a[n]\n        else:\n            # self if good, keep one of the other candidates\n            if gcdinfo[parent].ifr1:\n                newgcd1 = gcd(gcdinfo[parent].ifr1, a[n])\n            else:\n                newgcd1 = 1\n            if gcdinfo[parent].ifr2:\n                newgcd2 = gcd(gcdinfo[parent].ifr2, a[n])\n            else:\n                newgcd2 = 1\n            if newgcd1 > newgcd2:\n                gcdinfo[n].tor1 = gcdinfo[parent].tor1\n                gcdinfo[n].ifr1 = gcdinfo[parent].ifr1\n            elif newgcd2 > newgcd1:\n                gcdinfo[n].tor1 = gcdinfo[parent].tor2\n                gcdinfo[n].ifr1 = gcdinfo[parent].ifr2               \n\n    for neigh in graph[n]:\n        dfs(neigh, n)\n\ngcdinfo[0].gcd = a[0]\ngcdinfo[0].tor1 = a[0]\ngcdinfo[0].ifr1 = 0\ndfs(0, -1)\n\ns = \"\"\nfor i in xrange(n):\n    s += str(gcdinfo[i].get()) + \" \"\nprint(s)\n    \n",
        "correct": false,
        "task_id": "1217",
        "depth": 1
    },
    {
        "description": "Ilya is working for the company that constructs robots. Ilya writes programs for entertainment robots, and his current project is \"Bob\", a new-generation game robot. Ilya's boss wants to know his progress so far. Especially he is interested if Bob is better at playing different games than the previous model, \"Alice\". \n\nSo now Ilya wants to compare his robots' performance in a simple game called \"1-2-3\". This game is similar to the \"Rock-Paper-Scissors\" game: both robots secretly choose a number from the set {1, 2, 3} and say it at the same moment. If both robots choose the same number, then it's a draw and noone gets any points. But if chosen numbers are different, then one of the robots gets a point: 3 beats 2, 2 beats 1 and 1 beats 3. \n\nBoth robots' programs make them choose their numbers in such a way that their choice in (i + 1)-th game depends only on the numbers chosen by them in i-th game. \n\nIlya knows that the robots will play k games, Alice will choose number a in the first game, and Bob will choose b in the first game. He also knows both robots' programs and can tell what each robot will choose depending on their choices in previous game. Ilya doesn't want to wait until robots play all k games, so he asks you to predict the number of points they will have after the final game. \n\nInput\n\nThe first line contains three numbers k, a, b (1 \u2264 k \u2264 1018, 1 \u2264 a, b \u2264 3). \n\nThen 3 lines follow, i-th of them containing 3 numbers Ai, 1, Ai, 2, Ai, 3, where Ai, j represents Alice's choice in the game if Alice chose i in previous game and Bob chose j (1 \u2264 Ai, j \u2264 3). \n\nThen 3 lines follow, i-th of them containing 3 numbers Bi, 1, Bi, 2, Bi, 3, where Bi, j represents Bob's choice in the game if Alice chose i in previous game and Bob chose j (1 \u2264 Bi, j \u2264 3). \n\nOutput\n\nPrint two numbers. First of them has to be equal to the number of points Alice will have, and second of them must be Bob's score after k games.\n\nExamples\n\nInput\n\n10 2 1\n1 1 1\n1 1 1\n1 1 1\n2 2 2\n2 2 2\n2 2 2\n\n\nOutput\n\n1 9\n\n\nInput\n\n8 1 1\n2 2 1\n3 3 1\n3 1 3\n1 1 1\n2 1 1\n1 2 3\n\n\nOutput\n\n5 2\n\n\nInput\n\n5 1 1\n1 2 2\n2 2 2\n2 2 2\n1 2 2\n2 2 2\n2 2 2\n\n\nOutput\n\n0 0\n\nNote\n\nIn the second example game goes like this:\n\n<image>\n\nThe fourth and the seventh game are won by Bob, the first game is draw and the rest are won by Alice.",
        "task_name": "863_C. 1-2-3",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "f = lambda: list(map(int,raw_input().split()))\ng = lambda: [[0] * 4] + [[0] + f() for i in range(3)]\nh = lambda x, y: x - 1 == y % 3\nt = lambda a, b, u, v: (A[a][b], B[a][b], u + h(a, b), v + h(b, a))\nk, a, b = f()\np = 2520\ns, d = divmod(k, p)\nA, B = g(), g()\nu = v = x = y = 0\nfor j in range(d): a, b, u, v = t(a, b, u, v)\nfor i in range(p): a, b, x, y = t(a, b, x, y)\nprint(u + x * s, v + y * s)",
        "correct": false,
        "task_id": "1218",
        "depth": 1
    },
    {
        "description": "Let's suppose you have an array a, a stack s (initially empty) and an array b (also initially empty).\n\nYou may perform the following operations until both a and s are empty:\n\n  * Take the first element of a, push it into s and remove it from a (if a is not empty); \n  * Take the top element from s, append it to the end of array b and remove it from s (if s is not empty). \n\n\n\nYou can perform these operations in arbitrary order.\n\nIf there exists a way to perform the operations such that array b is sorted in non-descending order in the end, then array a is called stack-sortable.\n\nFor example, [3, 1, 2] is stack-sortable, because b will be sorted if we perform the following operations:\n\n  1. Remove 3 from a and push it into s; \n  2. Remove 1 from a and push it into s; \n  3. Remove 1 from s and append it to the end of b; \n  4. Remove 2 from a and push it into s; \n  5. Remove 2 from s and append it to the end of b; \n  6. Remove 3 from s and append it to the end of b. \n\n\n\nAfter all these operations b = [1, 2, 3], so [3, 1, 2] is stack-sortable. [2, 3, 1] is not stack-sortable.\n\nYou are given k first elements of some permutation p of size n (recall that a permutation of size n is an array of size n where each integer from 1 to n occurs exactly once). You have to restore the remaining n - k elements of this permutation so it is stack-sortable. If there are multiple answers, choose the answer such that p is lexicographically maximal (an array q is lexicographically greater than an array p iff there exists some integer k such that for every i < k qi = pi, and qk > pk). You may not swap or change any of first k elements of the permutation.\n\nPrint the lexicographically maximal permutation p you can obtain.\n\nIf there exists no answer then output -1.\n\nInput\n\nThe first line contains two integers n and k (2 \u2264 n \u2264 200000, 1 \u2264 k < n) \u2014 the size of a desired permutation, and the number of elements you are given, respectively.\n\nThe second line contains k integers p1, p2, ..., pk (1 \u2264 pi \u2264 n) \u2014 the first k elements of p. These integers are pairwise distinct.\n\nOutput\n\nIf it is possible to restore a stack-sortable permutation p of size n such that the first k elements of p are equal to elements given in the input, print lexicographically maximal such permutation.\n\nOtherwise print -1.\n\nExamples\n\nInput\n\n5 3\n3 2 1\n\n\nOutput\n\n3 2 1 5 4 \n\nInput\n\n5 3\n2 3 1\n\n\nOutput\n\n-1\n\n\nInput\n\n5 1\n3\n\n\nOutput\n\n3 2 1 5 4 \n\nInput\n\n5 2\n3 4\n\n\nOutput\n\n-1",
        "task_name": "911_E. Stack Sorting",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nfrom itertools import repeat\ndef main():\n    n, k = map(int, stdin.readline().split())\n    a = map(int, stdin.readline().split(), repeat(10, k))\n    l = range(1, n + 1)\n    d = [0] * (n + 1)\n    s = []\n    b = []\n    for x in a:\n        while s and s[-1] < x:\n            b.append(s.pop())\n        s.append(x)\n        d[x] = 1\n    if b != range(1, len(b) + 1):\n        print -1\n        return\n    l = 0\n    while s:\n        x = y = s.pop() - 1\n        while x > l:\n            if not d[x]:\n                a.append(x)\n            x -= 1\n        l = y + 1\n    for i in xrange(n, l, -1):\n        a.append(i)\n    stdout.write(' '.join(map(str, a)))\nmain()\n",
        "correct": true,
        "task_id": "1220",
        "depth": 2
    },
    {
        "description": "A positive integer X is said to be a lunlun number if and only if the following condition is satisfied:\n\n* In the base ten representation of X (without leading zeros), for every pair of two adjacent digits, the absolute difference of those digits is at most 1.\n\n\n\nFor example, 1234, 1, and 334 are lunlun numbers, while none of 31415, 119, or 13579 is.\n\nYou are given a positive integer K. Find the K-th smallest lunlun number.\n\nConstraints\n\n* 1 \\leq K \\leq 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK\n\n\nOutput\n\nPrint the answer.\n\nExamples\n\nInput\n\n15\n\n\nOutput\n\n23\n\n\nInput\n\n1\n\n\nOutput\n\n1\n\n\nInput\n\n13\n\n\nOutput\n\n21\n\n\nInput\n\n100000\n\n\nOutput\n\n3234566667",
        "task_name": "p02720 AtCoder Beginner Contest 161 - Lunlun Number",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "input = raw_input\n\nk = int(input())\n\nsuf_dict = {}\nfor d in range(10):\n    if d == 0:\n        suf_dict[str(d)] = [\"0\", \"1\"]\n    elif d == 1:\n        suf_dict[str(d)] = [\"0\", \"1\", \"2\"]\n    elif d == 9:\n        suf_dict[str(d)] = [\"8\", \"9\"]\n    else:\n        suf_dict[str(d)] = [str(d-1), str(d), str(d+1)]\n\n\ndef find(x):\n    sufs = suf_dict[x[-1]]\n    ret = [x+suf for suf in sufs]\n    return ret\n\ndef main():\n    xs = list(\"123456789\")\n    last_count = 9\n    if k <= 9:\n        out = k\n        return out\n    else:\n        while True:\n            next_xs = []\n            for x in xs:\n                first_count = last_count + 1\n                elms = find(x)\n                cur_num = len(elms)\n                last_count = first_count + cur_num - 1\n                #print(first_count, last_count, elms)\n                if first_count <= k <= last_count:\n                    out = elms[k-first_count]\n                    return out\n                next_xs += elms\n            xs = next_xs\n\nout = main()\nprint(out)",
        "correct": true,
        "task_id": "1222",
        "depth": 2
    },
    {
        "description": "You are given a 4-character string S consisting of uppercase English letters. Determine if S consists of exactly two kinds of characters which both appear twice in S.\n\nConstraints\n\n* The length of S is 4.\n* S consists of uppercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\n\n\nOutput\n\nIf S consists of exactly two kinds of characters which both appear twice in S, print `Yes`; otherwise, print `No`.\n\nExamples\n\nInput\n\nASSA\n\n\nOutput\n\nYes\n\n\nInput\n\nSTOP\n\n\nOutput\n\nNo\n\n\nInput\n\nFFEE\n\n\nOutput\n\nYes\n\n\nInput\n\nFREE\n\n\nOutput\n\nNo",
        "task_name": "p02987 AtCoder Beginner Contest 132 - Fifty-Fifty",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom collections import Counter\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    s = Counter(input()).values()\n    print('Yes' if s == [2, 2] else 'No')\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": true,
        "task_id": "1223",
        "depth": 1
    },
    {
        "description": "Find the largest integer that can be formed with exactly N matchsticks, under the following conditions:\n\n* Every digit in the integer must be one of the digits A_1, A_2, ..., A_M (1 \\leq A_i \\leq 9).\n* The number of matchsticks used to form digits 1, 2, 3, 4, 5, 6, 7, 8, 9 should be 2, 5, 5, 4, 5, 6, 3, 7, 6, respectively.\n\nConstraints\n\n* All values in input are integers.\n* 2 \\leq N \\leq 10^4\n* 1 \\leq M \\leq 9\n* 1 \\leq A_i \\leq 9\n* A_i are all different.\n* There exists an integer that can be formed by exactly N matchsticks under the conditions.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 A_2 ... A_M\n\n\nOutput\n\nPrint the largest integer that can be formed with exactly N matchsticks under the conditions in the problem statement.\n\nExamples\n\nInput\n\n20 4\n3 7 8 4\n\n\nOutput\n\n777773\n\n\nInput\n\n101 9\n9 8 7 6 5 4 3 2 1\n\n\nOutput\n\n71111111111111111111111111111111111111111111111111\n\n\nInput\n\n15 3\n5 4 6\n\n\nOutput\n\n654",
        "task_name": "p03128 AtCoder Beginner Contest 118 - Match Matching",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport copy\n\nd=[0,2,5,5,4,5,6,3,7,6]\nb=[]\n\nn = map(int, raw_input().split())\na = map(int, raw_input().split())\n\nfor x in a:\n    b.append(d[x])\n\ndef max_num(x, a, b):\n    results=[]\n    max=0\n    for z, y in enumerate(b):\n        if x==y:\n            results.append([a[z], [a[z]]])\n        elif x>y:\n            if max_num(x-y, a, b)!=None:\n                t=0\n                result=max_num(x-y, a, b)\n                result[1].append(a[z])\n                result[1].sort()\n                for num, res in enumerate(result[1]):\n                    t+=res*(10**num)\n                results.append([t, result[1]])\n            else:\n                continue\n    if results==[]:\n        return\n    results.sort()\n    results.reverse()\n    return results[0][0], results[0][1]\n\ndef final(x, a, b):\n    results=[]\n    minimum=a[b.index(min(b))]\n    m=1\n    t=0\n    max=0\n    if x%min(b)==0:\n        for y in range(x/min(b)):\n            results.append(minimum)\n        for num, res in enumerate(results):\n            t+=res*(10**num)\n        return t\n    elif x>min(b):\n        b_org=copy.deepcopy(b)\n        a.pop(b.index(min(b)))\n        b.pop(b.index(min(b)))\n        while max_num(x%min(b_org)+m*min(b_org), a, b)==None:\n            print(x%min(b_org)+m*min(b_org))\n            m+=1\n            print(m)\n        for i in range(4):\n            t=0\n            result = max_num(x%min(b_org)+(m+i)*min(b_org), a, b)\n            results=result[1]\n            for y in range(x/min(b_org)-m):\n                results.append(minimum)\n            results.sort()\n            for num, res in enumerate(results):\n                t+=res*(10**num)\n            if t>max:\n                max=t\n            return max\n    if results==[]:\n        return\n\n\nprint(final(n[0], a, b))\n",
        "correct": false,
        "task_id": "1224",
        "depth": 2
    },
    {
        "description": "There are N holes in a two-dimensional plane. The coordinates of the i-th hole are (x_i,y_i).\n\nLet R=10^{10^{10^{10}}}. Ringo performs the following operation:\n\n* Randomly choose a point from the interior of a circle of radius R centered at the origin, and put Snuke there. Snuke will move to the hole with the smallest Euclidean distance from the point, and fall into that hole. If there are multiple such holes, the hole with the smallest index will be chosen.\n\n\n\nFor every i (1 \\leq i \\leq N), find the probability that Snuke falls into the i-th hole.\n\nHere, the operation of randomly choosing a point from the interior of a circle of radius R is defined as follows:\n\n* Pick two real numbers x and y independently according to uniform distribution on [-R,R].\n* If x^2+y^2\\leq R^2, the point (x,y) is chosen. Otherwise, repeat picking the real numbers x,y until the condition is met.\n\nConstraints\n\n* 2 \\leq N \\leq 100\n* |x_i|,|y_i| \\leq 10^6(1\\leq i\\leq N)\n* All given points are pairwise distinct.\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nx_1 y_1\n:\nx_N y_N\n\n\nOutput\n\nPrint N real numbers. The i-th real number must represent the probability that Snuke falls into the i-th hole.\n\nThe output will be judged correct when, for all output values, the absolute or relative error is at most 10^{-5}.\n\nExamples\n\nInput\n\n2\n0 0\n1 1\n\n\nOutput\n\n0.5\n0.5\n\n\nInput\n\n5\n0 0\n2 8\n4 5\n2 6\n3 10\n\n\nOutput\n\n0.43160120892732328768\n0.03480224363653196956\n0.13880483535586193855\n0.00000000000000000000\n0.39479171208028279727",
        "task_name": "p03428 AtCoder Grand Contest 021 - Holes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import random\n\ndef distance(p1, p2):\n     return pow(p1[0] - p2[0], 2) + pow(p1[1] - p2[1], 2)\n     \nlim=1000\n#lim=pow(pow(10,10), 10)\n\nsample_num=1000000\nsamples=[]\n\nfor i in range(sample_num):\n#    samples.append([random.uniform(-lim, lim), random.uniform(-lim, lim)])\n    samples.append([random.randint(-lim, lim), random.randint(-lim, lim)])\n\nN=int(raw_input())\n\nset_points=[]\npoint_score=[]\n\nfor i in range(N):\n    point = map(int,raw_input().split())\n    set_points.append(point)\n    point_score.append(0)\n\n#print set_points\n#print samples\n\nfor sample in samples:\n    p = 0\n    d = distance(set_points[p], sample)\n    for i in range(1, N):\n        tmp_d = distance(set_points[i], sample)\n        if d < tmp_d:\n            p = i\n            d = tmp_d\n    point_score[p] += 1\n#    print point_score\n\nfor score in point_score:\n    print (score + 0.00) / sample_num\n",
        "correct": false,
        "task_id": "1225",
        "depth": 2
    },
    {
        "description": "Write a program which prints the central coordinate $(p_x, p_y)$ and the radius $r$ of a circumscribed circle of a triangle which is constructed by three points $(x_1, y_1)$, $(x_2, y_2)$ and $(x_3, y_3)$ on the plane surface.\n\nConstraints\n\n* $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3 \\leq 100$\n* $ n \\leq 20$\n\nInput\n\nInput consists of several datasets. In the first line, the number of datasets $n$ is given. Each dataset consists of:\n\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$\n\nin a line. All the input are real numbers.\n\nOutput\n\nFor each dataset, print $p_x$, $p_y$ and $r$ separated by a space in a line. Print the solution to three places of decimals. Round off the solution to three decimal places.\n\nExample\n\nInput\n\n1\n0.0 0.0 2.0 0.0 2.0 2.0\n\n\nOutput\n\n1.000 1.000 1.414",
        "task_name": "p00010 Circumscribed Circle of a Triangle",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# coding: utf-8\n\nimport math\n\nn = int(raw_input())\n\nfor i in range(n):\n\tdata = map(float, raw_input().split())\n\tx1 = data[0]\n\ty1 = data[1]\n\tx2 = data[2]\n\ty2 = data[3]\n\tx3 = data[4]\n\ty3 = data[5]\n\n\tk = 0.5 * ( (x3-x2)*(x3-x1) + (y3-y2)*(y3-y1) ) / ( (x2-x1)*(y3-y1) + (y2-y1)*(x3-x1) )\n\n\tx = 0.5 * (x1 + x2) - k * (y2 - y1)\n\ty = 0.5 * (y1 + y2) + k * (x2 - x1)\n\n\tr = math.sqrt( (x-x1)**2 + (y-y1)**2 )\n\n\tprint(\"{:.3f} {:.3f} {:.3f}\".format(x,y,r))",
        "correct": false,
        "task_id": "1226",
        "depth": 1
    },
    {
        "description": "The goal of the matrix-chain multiplication problem is to find the most efficient way to multiply given $n$ matrices $M_1, M_2, M_3,...,M_n$.\n\nWrite a program which reads dimensions of $M_i$, and finds the minimum number of scalar multiplications to compute the maxrix-chain multiplication $M_1M_2...M_n$.\n\nConstraints\n\n* $1 \\leq n \\leq 100$\n* $1 \\leq r, c \\leq 100$\n\nInput\n\nIn the first line, an integer $n$ is given. In the following $n$ lines, the dimension of matrix $M_i$ ($i = 1...n$) is given by two integers $r$ and $c$ which respectively represents the number of rows and columns of $M_i$.\n\nOutput\n\nPrint the minimum number of scalar multiplication in a line.\n\nExample\n\nInput\n\n6\n30 35\n35 15\n15 5\n5 10\n10 20\n20 25\n\n\nOutput\n\n15125",
        "task_name": "p02234 Matrix Chain Multiplication",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\nfrom sys import stdin\n\n\ndef main():\n    num_mat = int(stdin.readline())\n    data = [int(s) for s in stdin.readline().split()]\n    for _ in range(num_mat-1):\n        _, row = (int(s) for s in stdin.readline().split())\n        data.append(row)\n    num_dat = len(data)\n\n    bin_op = tuple(data[i]*data[i+1]*data[i+2] for i in range(num_dat-2))\n    parts = [(data[0]*data[1], data[-2]*data[-1]), bin_op]\n\n    for j in range(3, num_mat):\n        part = parts[-1]\n        new_part = []\n        for i in range(num_dat-j):\n            a = data[i]\n            b = data[i+1]\n            c = data[i+j-1]\n            d = data[i+j]\n            new_part.append(min(part[i] + a*c*d, part[i+1] + a*b*d))\n        parts.append(new_part)\n\n    L = data\n    if num_mat > 1:\n        print(min(parts[i][0] + parts[-(i+1)][-1] +\n                  L[0]*L[i+1]*L[-1] for i in range(len(parts))))\n    else:\n        print(0)\n\n\nmain()",
        "correct": false,
        "task_id": "1227",
        "depth": 2
    },
    {
        "description": "Consider a sequence of digits of length 2^k [a_1, a_2, \u2026, a_{2^k}]. We perform the following operation with it: replace pairs (a_{2i+1}, a_{2i+2}) with (a_{2i+1} + a_{2i+2})mod 10 for 0\u2264 i<2^{k-1}. For every i where a_{2i+1} + a_{2i+2}\u2265 10 we get a candy! As a result, we will get a sequence of length 2^{k-1}.\n\nLess formally, we partition sequence of length 2^k into 2^{k-1} pairs, each consisting of 2 numbers: the first pair consists of the first and second numbers, the second of the third and fourth \u2026, the last pair consists of the (2^k-1)-th and (2^k)-th numbers. For every pair such that sum of numbers in it is at least 10, we get a candy. After that, we replace every pair of numbers with a remainder of the division of their sum by 10 (and don't change the order of the numbers).\n\nPerform this operation with a resulting array until it becomes of length 1. Let f([a_1, a_2, \u2026, a_{2^k}]) denote the number of candies we get in this process. \n\nFor example: if the starting sequence is [8, 7, 3, 1, 7, 0, 9, 4] then:\n\nAfter the first operation the sequence becomes [(8 + 7)mod 10, (3 + 1)mod 10, (7 + 0)mod 10, (9 + 4)mod 10] = [5, 4, 7, 3], and we get 2 candies as 8 + 7 \u2265 10 and 9 + 4 \u2265 10.\n\nAfter the second operation the sequence becomes [(5 + 4)mod 10, (7 + 3)mod 10] = [9, 0], and we get one more candy as 7 + 3 \u2265 10. \n\nAfter the final operation sequence becomes [(9 + 0) mod 10] = [9]. \n\nTherefore, f([8, 7, 3, 1, 7, 0, 9, 4]) = 3 as we got 3 candies in total.\n\nYou are given a sequence of digits of length n s_1, s_2, \u2026 s_n. You have to answer q queries of the form (l_i, r_i), where for i-th query you have to output f([s_{l_i}, s_{l_i+1}, \u2026, s_{r_i}]). It is guaranteed that r_i-l_i+1 is of form 2^k for some nonnegative integer k.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the length of the sequence.\n\nThe second line contains n digits s_1, s_2, \u2026, s_n (0 \u2264 s_i \u2264 9).\n\nThe third line contains a single integer q (1 \u2264 q \u2264 10^5) \u2014 the number of queries.\n\nEach of the next q lines contains two integers l_i, r_i (1 \u2264 l_i \u2264 r_i \u2264 n) \u2014 i-th query. It is guaranteed that r_i-l_i+1 is a nonnegative integer power of 2.\n\nOutput\n\nOutput q lines, in i-th line output single integer \u2014 f([s_{l_i}, s_{l_i + 1}, \u2026, s_{r_i}]), answer to the i-th query.\n\nExamples\n\nInput\n\n\n8\n8 7 3 1 7 0 9 4\n3\n1 8\n2 5\n7 7\n\n\nOutput\n\n\n3\n1\n0\n\n\nInput\n\n\n6\n0 1 2 3 3 5\n3\n1 2\n1 4\n3 6\n\n\nOutput\n\n\n0\n0\n1\n\nNote\n\nThe first example illustrates an example from the statement.\n\nf([7, 3, 1, 7]) = 1: sequence of operations is [7, 3, 1, 7] \u2192 [(7 + 3)mod 10, (1 + 7)mod 10] = [0, 8] and one candy as 7 + 3 \u2265 10 \u2192 [(0 + 8) mod 10] = [8], so we get only 1 candy.\n\nf([9]) = 0 as we don't perform operations with it.",
        "task_name": "1189_C. Candies!",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division, print_function\n\ndef main():\n    n = int(input())\n    a = input_as_list()\n    q = int(input())\n    \n    h = n.bit_length()\n    tb = array_of(int, h, n)\n    \n    for lv in range(h):\n        for i in range(n):\n            if lv == 0 and i < n-1:\n                tb[lv][i] = a[i] + a[i+1]\n            elif i < n-2**lv:\n                tb[lv][i] = tb[lv-1][i] + tb[lv-1][i+2**lv]\n    \n    debug_print(*tb, sep='\\n')\n    \n    for _ in range(q):\n        l, r = input_as_list()\n        l -= 1\n        print(tb[(r-l).bit_length()-2][l]//10)\n    \n\nINF = float('inf')\nMOD = 10**9 + 7\n\nimport os, sys\nfrom atexit import register\nfrom io import BytesIO\nimport itertools\n\nif sys.version_info[0] < 3:\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\nif \"LOCAL_\" in os.environ:\n    debug_print = print\nelse:\n    sys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\n    sys.stdout = BytesIO()\n    register(lambda: os.write(1, sys.stdout.getvalue()))\n\n    input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n    debug_print = lambda *x, **y: None\n\n\ndef input_as_list():\n    return list(map(int, input().split()))\n\ndef array_of(f, *dim):\n    return [array_of(f, *dim[1:]) for _ in range(dim[0])] if dim else f()\n\nmain()",
        "correct": false,
        "task_id": "1230",
        "depth": 2
    },
    {
        "description": "Let us define a magic grid to be a square matrix of integers of size n \u00d7 n, satisfying the following conditions. \n\n  * All integers from 0 to (n^2 - 1) inclusive appear in the matrix exactly once. \n  * [Bitwise XOR](https://en.wikipedia.org/wiki/Bitwise_operation#XOR) of all elements in a row or a column must be the same for each row and column. \n\n\n\nYou are given an integer n which is a multiple of 4. Construct a magic grid of size n \u00d7 n.\n\nInput\n\nThe only line of input contains an integer n (4 \u2264 n \u2264 1000). It is guaranteed that n is a multiple of 4.\n\nOutput\n\nPrint a magic grid, i.e. n lines, the i-th of which contains n space-separated integers, representing the i-th row of the grid.\n\nIf there are multiple answers, print any. We can show that an answer always exists.\n\nExamples\n\nInput\n\n\n4\n\n\nOutput\n\n\n8 9 1 13\n3 12 7 5\n0 2 4 11\n6 10 15 14\n\nInput\n\n\n8\n\n\nOutput\n\n\n19 55 11 39 32 36 4 52\n51 7 35 31 12 48 28 20\n43 23 59 15 0 8 16 44\n3 47 27 63 24 40 60 56\n34 38 6 54 17 53 9 37\n14 50 30 22 49 5 33 29\n2 10 18 46 41 21 57 13\n26 42 62 58 1 45 25 61\n\nNote\n\nIn the first example, XOR of each row and each column is 13.\n\nIn the second example, XOR of each row and each column is 60.",
        "task_name": "1208_C. Magic Grid",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from collections import deque\n\nispow2 = lambda x: x and (not (x & (x - 1)))\nn, cur, ans = int(input()), 0, []\n\nfor i in range(n):\n    tem = deque(range(cur, cur + n))\n    while i and not ispow2(tem[0] - ans[-1][0]):\n        tem.rotate(-1)\n    ans.append(tem)\n    cur += n\n\nprint('\\n'.join([' '.join(map(str, x)) for x in ans]))\n",
        "correct": false,
        "task_id": "1231",
        "depth": 2
    },
    {
        "description": "You are given a Young diagram. \n\nGiven diagram is a histogram with n columns of lengths a_1, a_2, \u2026, a_n (a_1 \u2265 a_2 \u2265 \u2026 \u2265 a_n \u2265 1).\n\n<image> Young diagram for a=[3,2,2,2,1].\n\nYour goal is to find the largest number of non-overlapping dominos that you can draw inside of this histogram, a domino is a 1 \u00d7 2 or 2 \u00d7 1 rectangle.\n\nInput\n\nThe first line of input contain one integer n (1 \u2264 n \u2264 300 000): the number of columns in the given histogram.\n\nThe next line of input contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 300 000, a_i \u2265 a_{i+1}): the lengths of columns.\n\nOutput\n\nOutput one integer: the largest number of non-overlapping dominos that you can draw inside of the given Young diagram.\n\nExample\n\nInput\n\n\n5\n3 2 2 2 1\n\n\nOutput\n\n\n4\n\nNote\n\nSome of the possible solutions for the example:\n\n<image> <image>",
        "task_name": "1269_D. Domino for Young",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n# Author : raj1307 - Raj Singh\n# Date   : 01.01.2020\n\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii(): return int(input())\ndef si(): return input()\ndef mi(): return map(int,input().strip().split(\" \"))\ndef msi(): return map(str,input().strip().split(\" \"))\ndef li(): return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(100000000)\n    threading.stack_size(40960000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import ceil,floor,log,sqrt,factorial\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *,threading\n#from itertools import permutations\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[1] \ndef sort2(l):return sorted(l, key=getKey)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n\ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\n\n\n\ndef main():\n        \n\n    #for _ in range(ii()):\n        \n        \n        \n    n=ii()\n    a=li()\n\n    w=0\n    b=0\n    for i in range(n):\n        if i%2:\n            b+=(a[i]+1)//2\n            w+=a[i]//2\n        else:\n            w+=(a[i]+1)//2\n            b+=a[i]//2\n\n\n    print(min(w,b))\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    #read()\n    main()\n    #dmain()\n\n# Comment Read()\n",
        "correct": true,
        "task_id": "1232",
        "depth": 1
    },
    {
        "description": "Let's call two strings s and t anagrams of each other if it is possible to rearrange symbols in the string s to get a string, equal to t.\n\nLet's consider two strings s and t which are anagrams of each other. We say that t is a reducible anagram of s if there exists an integer k \u2265 2 and 2k non-empty strings s_1, t_1, s_2, t_2, ..., s_k, t_k that satisfy the following conditions:\n\n  1. If we write the strings s_1, s_2, ..., s_k in order, the resulting string will be equal to s; \n  2. If we write the strings t_1, t_2, ..., t_k in order, the resulting string will be equal to t; \n  3. For all integers i between 1 and k inclusive, s_i and t_i are anagrams of each other. \n\n\n\nIf such strings don't exist, then t is said to be an irreducible anagram of s. Note that these notions are only defined when s and t are anagrams of each other.\n\nFor example, consider the string s =  \"gamegame\". Then the string t =  \"megamage\" is a reducible anagram of s, we may choose for example s_1 =  \"game\", s_2 =  \"gam\", s_3 =  \"e\" and t_1 =  \"mega\", t_2 =  \"mag\", t_3 =  \"e\":\n\n<image>\n\nOn the other hand, we can prove that t =  \"memegaga\" is an irreducible anagram of s.\n\nYou will be given a string s and q queries, represented by two integers 1 \u2264 l \u2264 r \u2264 |s| (where |s| is equal to the length of the string s). For each query, you should find if the substring of s formed by characters from the l-th to the r-th has at least one irreducible anagram.\n\nInput\n\nThe first line contains a string s, consisting of lowercase English characters (1 \u2264 |s| \u2264 2 \u22c5 10^5).\n\nThe second line contains a single integer q (1 \u2264 q \u2264 10^5) \u2014 the number of queries.\n\nEach of the following q lines contain two integers l and r (1 \u2264 l \u2264 r \u2264 |s|), representing a query for the substring of s formed by characters from the l-th to the r-th.\n\nOutput\n\nFor each query, print a single line containing \"Yes\" (without quotes) if the corresponding substring has at least one irreducible anagram, and a single line containing \"No\" (without quotes) otherwise.\n\nExamples\n\nInput\n\n\naaaaa\n3\n1 1\n2 4\n5 5\n\n\nOutput\n\n\nYes\nNo\nYes\n\n\nInput\n\n\naabbbbbbc\n6\n1 2\n2 4\n2 2\n1 9\n5 7\n3 5\n\n\nOutput\n\n\nNo\nYes\nYes\nYes\nNo\nNo\n\nNote\n\nIn the first sample, in the first and third queries, the substring is \"a\", which has itself as an irreducible anagram since two or more non-empty strings cannot be put together to obtain \"a\". On the other hand, in the second query, the substring is \"aaa\", which has no irreducible anagrams: its only anagram is itself, and we may choose s_1 =  \"a\", s_2 =  \"aa\", t_1 =  \"a\", t_2 =  \"aa\" to show that it is a reducible anagram.\n\nIn the second query of the second sample, the substring is \"abb\", which has, for example, \"bba\" as an irreducible anagram.",
        "task_name": "1291_D. Irreducible Anagrams",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nrstr = lambda: stdin.readline().strip()\nrint = lambda: int(stdin.readline())\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrints_2d = lambda n: [rints() for _ in range(n)]\nout = []\nchrs = 'abcdefghijklmnopqrstuvwxyz'\n\ns, n = rstr(), rint()\nqur, mem = rints_2d(n), []\nfor i in chrs:\n    tem = [0]\n    for j in range(len(s)):\n        tem.append(tem[-1] + (s[j] == i))\n    mem.append(tem)\n\nfor l, r in qur:\n    all = []\n    for i in range(26):\n        tem = mem[i][r] - mem[i][l - 1]\n        if tem:\n            all.append((tem, chrs[i]))\n\n    out.append('Yes' if l == r or s[l - 1] != s[r - 1] or len(all) > 2 else 'No')\nprint('\\n'.join(map(str, out)))\n",
        "correct": true,
        "task_id": "1233",
        "depth": 2
    },
    {
        "description": "You are playing another computer game, and now you have to slay n monsters. These monsters are standing in a circle, numbered clockwise from 1 to n. Initially, the i-th monster has a_i health.\n\nYou may shoot the monsters to kill them. Each shot requires exactly one bullet and decreases the health of the targeted monster by 1 (deals 1 damage to it). Furthermore, when the health of some monster i becomes 0 or less than 0, it dies and explodes, dealing b_i damage to the next monster (monster i + 1, if i < n, or monster 1, if i = n). If the next monster is already dead, then nothing happens. If the explosion kills the next monster, it explodes too, damaging the monster after it and possibly triggering another explosion, and so on.\n\nYou have to calculate the minimum number of bullets you have to fire to kill all n monsters in the circle.\n\nInput\n\nThe first line contains one integer T (1 \u2264 T \u2264 150000) \u2014 the number of test cases.\n\nThen the test cases follow, each test case begins with a line containing one integer n (2 \u2264 n \u2264 300000) \u2014 the number of monsters. Then n lines follow, each containing two integers a_i and b_i (1 \u2264 a_i, b_i \u2264 10^{12}) \u2014 the parameters of the i-th monster in the circle.\n\nIt is guaranteed that the total number of monsters in all test cases does not exceed 300000.\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum number of bullets you have to fire to kill all of the monsters.\n\nExample\n\nInput\n\n\n1\n3\n7 15\n2 14\n5 3\n\n\nOutput\n\n\n6",
        "task_name": "1334_C. Circle of Monsters",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import maxint, stdin, stdout\nimport os\nfrom io import BytesIO\nstdin = BytesIO(os.read(0, os.fstat(0).st_size))\nstdout = BytesIO()\ninput = stdin.readline\nwrite = lambda x: os.write(1, x)\n\nres = []\nT = int(input())\nfor t in range(T) :\n  N = int(input())\n\n  monsters = []\n  mnShots = 0\n  start = float('inf')\n\n  for n in range(N) : monsters.append(map(int,input().split()))\n  for n in range(N) :\n    cur = monsters[n]\n    dam = max(0,cur[0] - monsters[n-1][1])\n    mnShots += dam\n    start = min(start, cur[0]-dam) \n\n  res.append(mnShots + start)\n\nwrite('\\n'.join(str(x) for x in res))\n\n  \n",
        "correct": true,
        "task_id": "1235",
        "depth": 2
    },
    {
        "description": "You are given an array a consisting of n positive integers.\n\nInitially, you have an integer x = 0. During one move, you can do one of the following two operations:\n\n  1. Choose exactly one i from 1 to n and increase a_i by x (a_i := a_i + x), then increase x by 1 (x := x + 1). \n  2. Just increase x by 1 (x := x + 1). \n\n\n\nThe first operation can be applied no more than once to each i from 1 to n.\n\nYour task is to find the minimum number of moves required to obtain such an array that each its element is divisible by k (the value k is given).\n\nYou have to answer t independent test cases. \n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (1 \u2264 n \u2264 2 \u22c5 10^5; 1 \u2264 k \u2264 10^9) \u2014 the length of a and the required divisior. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^9), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n does not exceed 2 \u22c5 10^5 (\u2211 n \u2264 2 \u22c5 10^5).\n\nOutput\n\nFor each test case, print the answer \u2014 the minimum number of moves required to obtain such an array that each its element is divisible by k.\n\nExample\n\nInput\n\n\n5\n4 3\n1 2 1 3\n10 6\n8 7 1 8 3 7 5 10 8 9\n5 10\n20 100 50 20 100500\n10 25\n24 24 24 24 24 24 24 24 24 24\n8 8\n1 2 3 4 5 6 7 8\n\n\nOutput\n\n\n6\n18\n0\n227\n8\n\nNote\n\nConsider the first test case of the example:\n\n  1. x=0, a = [1, 2, 1, 3]. Just increase x; \n  2. x=1, a = [1, 2, 1, 3]. Add x to the second element and increase x; \n  3. x=2, a = [1, 3, 1, 3]. Add x to the third element and increase x; \n  4. x=3, a = [1, 3, 3, 3]. Add x to the fourth element and increase x; \n  5. x=4, a = [1, 3, 3, 6]. Just increase x; \n  6. x=5, a = [1, 3, 3, 6]. Add x to the first element and increase x; \n  7. x=6, a = [6, 3, 3, 6]. We obtained the required array. \n\n\n\nNote that you can't add x to the same element more than once.",
        "task_name": "1374_D. Zero Remainder Array",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import collections\nFAST_IO = 1\nif FAST_IO:\n    import io, sys, atexit\n    rr = iter(sys.stdin.read().splitlines()).next\n    sys.stdout = _OUTPUT_BUFFER = io.BytesIO()\n    @atexit.register\n    def write():\n        sys.__stdout__.write(_OUTPUT_BUFFER.getvalue())\nelse:\n    rr = raw_input\nrri = lambda: int(rr())\nrrm = lambda: map(int, rr().split())\nt = rri()\n\ndef solve(n, k, arr):\n    dic = collections.Counter()\n    for x in arr:\n        if x%k:\n            dic[x%k]+=1\n    if not len(dic):\n        return 0\n    def get(key, value):\n        return k-key + (value-1)*k\n    ans = 0\n    for key, value in dic.items():\n        ans = max(ans, get(key, value))\n    return ans+1\n    \nfor _ in range(t):\n    n, k = rrm()\n    arr = rrm()\n    print(solve(n, k, arr))\n    ",
        "correct": true,
        "task_id": "1237",
        "depth": 1
    },
    {
        "description": "Ziota found a video game called \"Monster Invaders\".\n\nSimilar to every other shooting RPG game, \"Monster Invaders\" involves killing monsters and bosses with guns.\n\nFor the sake of simplicity, we only consider two different types of monsters and three different types of guns.\n\nNamely, the two types of monsters are: \n\n  * a normal monster with 1 hp. \n  * a boss with 2 hp. \n\n\n\nAnd the three types of guns are: \n\n  * Pistol, deals 1 hp in damage to one monster, r_1 reloading time \n  * Laser gun, deals 1 hp in damage to all the monsters in the current level (including the boss), r_2 reloading time \n  * AWP, instantly kills any monster, r_3 reloading time \n\n\n\nThe guns are initially not loaded, and the Ziota can only reload 1 gun at a time.\n\nThe levels of the game can be considered as an array a_1, a_2, \u2026, a_n, in which the i-th stage has a_i normal monsters and 1 boss. Due to the nature of the game, Ziota cannot use the Pistol (the first type of gun) or AWP (the third type of gun) to shoot the boss before killing all of the a_i normal monsters.\n\nIf Ziota damages the boss but does not kill it immediately, he is forced to move out of the current level to an arbitrary adjacent level (adjacent levels of level i (1 < i < n) are levels i - 1 and i + 1, the only adjacent level of level 1 is level 2, the only adjacent level of level n is level n - 1). Ziota can also choose to move to an adjacent level at any time. Each move between adjacent levels are managed by portals with d teleportation time.\n\nIn order not to disrupt the space-time continuum within the game, it is strictly forbidden to reload or shoot monsters during teleportation. \n\nZiota starts the game at level 1. The objective of the game is rather simple, to kill all the bosses in all the levels. He is curious about the minimum time to finish the game (assuming it takes no time to shoot the monsters with a loaded gun and Ziota has infinite ammo on all the three guns). Please help him find this value.\n\nInput\n\nThe first line of the input contains five integers separated by single spaces: n (2 \u2264 n \u2264 10^6) \u2014 the number of stages, r_1, r_2, r_3 (1 \u2264 r_1 \u2264 r_2 \u2264 r_3 \u2264 10^9) \u2014 the reload time of the three guns respectively, d (1 \u2264 d \u2264 10^9) \u2014 the time of moving between adjacent levels.\n\nThe second line of the input contains n integers separated by single spaces a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 10^6, 1 \u2264 i \u2264 n).\n\nOutput\n\nPrint one integer, the minimum time to finish the game.\n\nExamples\n\nInput\n\n\n4 1 3 4 3\n3 2 5 1\n\n\nOutput\n\n\n34\n\nInput\n\n\n4 2 4 4 1\n4 5 1 2\n\n\nOutput\n\n\n31\n\nNote\n\nIn the first test case, the optimal strategy is:\n\n  * Use the pistol to kill three normal monsters and AWP to kill the boss (Total time 1\u22c53+4=7) \n  * Move to stage two (Total time 7+3=10) \n  * Use the pistol twice and AWP to kill the boss (Total time 10+1\u22c52+4=16) \n  * Move to stage three (Total time 16+3=19) \n  * Use the laser gun and forced to move to either stage four or two, here we move to stage four (Total time 19+3+3=25) \n  * Use the pistol once, use AWP to kill the boss (Total time 25+1\u22c51+4=30) \n  * Move back to stage three (Total time 30+3=33) \n  * Kill the boss at stage three with the pistol (Total time 33+1=34) \n\n\n\nNote that here, we do not finish at level n, but when all the bosses are killed.",
        "task_name": "1397_E. Monster Invaders",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport math\n\nif sys.subversion[0] == \"PyPy\":\n    import io, atexit\n\n    sys.stdout = io.BytesIO()\n    atexit.register(lambda: sys.__stdout__.write(sys.stdout.getvalue()))\n\n    sys.stdin = io.BytesIO(sys.stdin.read())\n    input = lambda: sys.stdin.readline().rstrip()\n\n#t = int(raw_input())\n\n# python codesforces210710.py < input.txt\n#for zz in range(t):\n\nstr1 = raw_input().split(' ')\nn, r1, r2, r3, d = map(int, str1)\nstr2 = raw_input().split(' ')\na = map(int, str2)\nfs = 0\nc1 = 0\nc2 = 2 * d\n\nfor i in range(n):\n    #print(aii)\n    indcost = r3 + a[i] * r1\n    aoecost = min(r2 + r1, r1 * (a[i] + 2))\n    mincost = min(indcost, aoecost)\n    mincost2l = min(indcost - d, aoecost)\n    oto = indcost\n    ott = mincost + 2 * d\n    ttt = mincost + 2 * d\n    tto = mincost\n    #print(oto, ott, ttt, tto)\n    if i < n - 1:\n        c3 = min(c1 + oto, c2 + tto) + d\n        c4 = min(c1 + ott, c2 + ttt) + d\n    else:\n        c3 = min(c1 + oto, c2 + mincost2l) + d\n        c4 = min(c1 + ott, c2 + ttt) + d\n    c1 = c3\n    c2 = c4\n    #print(c1, c2)\nans = min(c1, c2) - d\nprint(ans)\n",
        "correct": true,
        "task_id": "1238",
        "depth": 1
    },
    {
        "description": "In order to celebrate Twice's 5th anniversary, Tzuyu and Sana decided to play a game.\n\nTzuyu gave Sana two integers a and b and a really important quest.\n\nIn order to complete the quest, Sana has to output the smallest possible value of (a \u2295 x) + (b \u2295 x) for any given x, where \u2295 denotes the [bitwise XOR operation](http://en.wikipedia.org/wiki/Bitwise_operation#XOR). \n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^{4}). Description of the test cases follows.\n\nThe only line of each test case contains two integers a and b (1 \u2264 a, b \u2264 10^{9}).\n\nOutput\n\nFor each testcase, output the smallest possible value of the given expression.\n\nExample\n\nInput\n\n\n6\n6 12\n4 9\n59 832\n28 14\n4925 2912\n1 1\n\n\nOutput\n\n\n10\n13\n891\n18\n6237\n0\n\nNote\n\nFor the first test case Sana can choose x=4 and the value will be (6 \u2295 4) + (12 \u2295 4) = 2 + 8 = 10. It can be shown that this is the smallest possible value.",
        "task_name": "1421_A. XORwice",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\n# Author : raj1307 - Raj Singh\n# Date   : 18.10.2020\n\nfrom __future__ import division, print_function\n\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii():  return int(input())\ndef si():  return input()\ndef mi():  return map(int,input().strip().split(\" \"))\ndef msi(): return map(str,input().strip().split(\" \"))\ndef li():  return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(1000000)\n    threading.stack_size(1024000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import log,sqrt,factorial,cos,tan,sin,radians\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *\n#import threading\n#from itertools import permutations\n#Copy 2D list  m = [x[:] for x in mark] .. Avoid Using Deepcopy\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\ninf = float(\"inf\")\nvow=['a','e','i','o','u']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[1] \ndef sort2(l):return sorted(l, key=getKey,reverse=True)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\ndef ncr(n,r): return factorial(n)//(factorial(r)*factorial(max(n-r,1)))\n\ndef ceil(x,y):\n    if x%y==0:\n        return x//y\n    else:\n        return x//y+1\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\n\n\ndef read():\n    sys.stdin  = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\n\n\n\n\n\ndef main():\n\n    \n    for _ in range(ii()):\n        \n        \n            \n        x,y=mi()\n    \n        ans=0\n\n\n        for i in range(32):\n\n            if ((x&(1<<i)) and (y&(1<<i))) or ( not (x&(1<<i)) and  not (y&(1<<i))):\n                continue\n            else:\n                ans+=(1<<i)\n\n        print(ans)\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# region fastio\n# template taken from https://github.com/cheran-senthil/PyRival/blob/master/templates/template.py\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    #read()\n    main()\n    #dmain()\n\n# Comment Read()\n",
        "correct": true,
        "task_id": "1239",
        "depth": 2
    },
    {
        "description": "Only a few know that Pan and Apollo weren't only battling for the title of the GOAT musician. A few millenniums later, they also challenged each other in math (or rather in fast calculations). The task they got to solve is the following:\n\nLet x_1, x_2, \u2026, x_n be the sequence of n non-negative integers. Find this value: $$$\u2211_{i=1}^n \u2211_{j=1}^n \u2211_{k=1}^n (x_i   \\&   x_j) \u22c5 (x_j   |   x_k)$$$\n\nHere \\& denotes the [bitwise and,](https://en.wikipedia.org/wiki/Bitwise_operation#AND) and | denotes the [bitwise or.](https://en.wikipedia.org/wiki/Bitwise_operation#OR)\n\nPan and Apollo could solve this in a few seconds. Can you do it too? For convenience, find the answer modulo 10^9 + 7.\n\nInput\n\nThe first line of the input contains a single integer t (1 \u2264 t \u2264 1 000) denoting the number of test cases, then t test cases follow.\n\nThe first line of each test case consists of a single integer n (1 \u2264 n \u2264 5 \u22c5 10^5), the length of the sequence. The second one contains n non-negative integers x_1, x_2, \u2026, x_n (0 \u2264 x_i < 2^{60}), elements of the sequence.\n\nThe sum of n over all test cases will not exceed 5 \u22c5 10^5.\n\nOutput\n\nPrint t lines. The i-th line should contain the answer to the i-th text case.\n\nExample\n\nInput\n\n\n8\n2\n1 7\n3\n1 2 4\n4\n5 5 5 5\n5\n6 2 2 1 0\n1\n0\n1\n1\n6\n1 12 123 1234 12345 123456\n5\n536870912 536870911 1152921504606846975 1152921504606846974 1152921504606846973\n\n\nOutput\n\n\n128\n91\n1600\n505\n0\n1\n502811676\n264880351",
        "task_name": "1466_E. Apollo versus Pan",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    input = open(sys.argv[1], 'r').readline\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    input = sys.stdin.readline\nmod = 10**9+7\n# from math import ceil\n# from collections import defaultdict as dd\n# from heapq import *\n############ ---- I/O Functions ---- ############\ndef intin():\n    return(int(input()))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    s = input()\n    return(list(s[:len(s) - 1]))\ndef strin():\n    s = input()\n    return s[:len(s) - 1]\ndef intlout(l, sep=\" \"):\n    print(sep.join(map(str, l)))\n\ndef main():\n    n = intin()\n    a = intlin()\n    b = [bin(x)[:1:-1] for x in a]\n    maxK = max([len(x) for x in b])\n    bcnt = [0]*maxK\n    for i in xrange(n):\n        x = b[i]\n        for k in xrange(len(x)):\n            if x[k] == '1':\n                bcnt[k] += 1\n    kpowb = [(((1<<k)%mod)*bcnt[k])%mod for k in xrange(maxK)]\n    summ = sum(kpowb)\n    ans = 0\n    for j in xrange(n):\n        x = b[j]\n        tmp = 0\n        tmp2 = 0\n        for k in xrange(len(x)):\n            tmp += kpowb[k]\n            tmp2 -= kpowb[k]\n        k += 1\n        tmp2 += summ%mod\n        tmp2 += (a[j]%mod)*n\n        ans += ((tmp%mod)*(tmp2%mod))%mod\n        ans %= mod\n    # print(ans)\n    return(ans)\n            \n\n\nif __name__ == \"__main__\":\n    ans = []\n    for _ in xrange(intin()):\n        ans.append(main())\n        # main()\n        # print(\"YES\" if main() else \"NO\")\n    intlout(ans,'\\n')\n    # main()\n\n    if testing:\n        sys.stdout = cmd\n        print(int(round(time() * 1000))  - start_time)",
        "correct": false,
        "task_id": "1240",
        "depth": 2
    },
    {
        "description": "Polycarp was gifted an array a of length n. Polycarp considers an array beautiful if there exists a number C, such that each number in the array occurs either zero or C times. Polycarp wants to remove some elements from the array a to make it beautiful.\n\nFor example, if n=6 and a = [1, 3, 2, 1, 4, 2], then the following options are possible to make the array a array beautiful: \n\n  * Polycarp removes elements at positions 2 and 5, array a becomes equal to [1, 2, 1, 2]; \n  * Polycarp removes elements at positions 1 and 6, array a becomes equal to [3, 2, 1, 4]; \n  * Polycarp removes elements at positions 1, 2 and 6, array a becomes equal to [2, 1, 4]; \n\n\n\nHelp Polycarp determine the minimum number of elements to remove from the array a to make it beautiful.\n\nInput\n\nThe first line contains one integer t (1 \u2264 t \u2264 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe first line of each test case consists of one integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of the array a.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 10^9) \u2014 array a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, output one integer \u2014 the minimum number of elements that Polycarp has to remove from the array a to make it beautiful.\n\nExample\n\nInput\n\n\n3\n6\n1 3 2 1 4 2\n4\n100 100 4 100\n8\n1 2 3 3 3 2 6 6\n\n\nOutput\n\n\n2\n1\n2",
        "task_name": "1490_F. Equalize the Array",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nflush = sys.stdout.flush\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\ninputData = InputData()\ninput = inputData.input\n\ndef intin():\n    return(int(input()))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(input()))\ndef strin():\n    return input()\ndef lout(l, sep=\"\\n\", toStr=True):\n    print(sep.join(map(str, l) if toStr else l))\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\n# from collections import defaultdict as ddict, Counter\n# from heapq import *\n# from Queue import Queue\n\ndef main():\n    n = intin()\n    a = intlin()\n    if n == 1:\n        return [1]\n    if n == 2:\n        if a[0] == a[1]:\n            return [1,2]\n        elif a[0] < a[1]:\n            return [2]\n        else:\n            return [1]\n\n    a = [(i,x) for i,x in enumerate(a)]\n    a.sort(key=lambda x:(x[1], x[0]))\n    pfs = [0]*(n+1)\n    for i in xrange(n):\n        pfs[i+1] = pfs[i] + a[i][1]\n    i = n-1\n    while i > 0:\n        if pfs[i] < a[i][1]:\n            break\n        i -= 1\n    ans = [a[j][0]+1 for j in xrange(i, n)]\n    ans.sort()\n    # print([x[1] for x in a])\n    # print(pfs[1:])\n    return ans\n\n\n\n\nans = []\nfor _ in xrange(intin()):\n    tmp = main()\n    ans.append(str(len(tmp)))\n    ans.append(' '.join(map(str, tmp)))\nlout(ans, toStr=False)\n\n# main()\n\nif testing:\n    sys.stdout = cmd\n    print(int(round(time() * 1000))  - start_time)",
        "correct": false,
        "task_id": "1241",
        "depth": 1
    },
    {
        "description": "A sequence of n non-negative integers (n \u2265 2) a_1, a_2, ..., a_n is called good if for all i from 1 to n-1 the following condition holds true: $$$a_1 \\: \\& \\: a_2 \\: \\& \\: ... \\: \\& \\: a_i = a_{i+1} \\: \\& \\: a_{i+2} \\: \\& \\: ... \\: \\& \\: a_n, where \\&$$$ denotes the [bitwise AND operation](https://en.wikipedia.org/wiki/Bitwise_operation#AND).\n\nYou are given an array a of size n (n \u2265 2). Find the number of permutations p of numbers ranging from 1 to n, for which the sequence a_{p_1}, a_{p_2}, ... ,a_{p_n} is good. Since this number can be large, output it modulo 10^9+7.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^4), denoting the number of test cases.\n\nThe first line of each test case contains a single integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the size of the array.\n\nThe second line of each test case contains n integers a_1, a_2, \u2026, a_n (0 \u2264 a_i \u2264 10^9) \u2014 the elements of the array.\n\nIt is guaranteed that the sum of n over all test cases doesn't exceed 2 \u22c5 10^5.\n\nOutput\n\nOutput t lines, where the i-th line contains the number of good permutations in the i-th test case modulo 10^9 + 7.\n\nExample\n\nInput\n\n\n4\n3\n1 1 1\n5\n1 2 3 4 5\n5\n0 2 0 3 0\n4\n1 3 5 1\n\n\nOutput\n\n\n6\n0\n36\n4\n\nNote\n\nIn the first test case, since all the numbers are equal, whatever permutation we take, the sequence is good. There are a total of 6 permutations possible with numbers from 1 to 3: [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1].\n\nIn the second test case, it can be proved that no permutation exists for which the sequence is good.\n\nIn the third test case, there are a total of 36 permutations for which the sequence is good. One of them is the permutation [1,5,4,2,3] which results in the sequence s=[0,0,3,2,0]. This is a good sequence because \n\n  *  s_1 = s_2 \\: \\& \\: s_3 \\: \\& \\: s_4 \\: \\& \\: s_5 = 0, \n  *  s_1 \\: \\& \\: s_2 = s_3 \\: \\& \\: s_4 \\: \\& \\: s_5 = 0, \n  *  s_1 \\: \\& \\: s_2 \\: \\& \\: s_3 = s_4 \\: \\& \\: s_5 = 0, \n  *  s_1 \\: \\& \\: s_2 \\: \\& \\: s_3 \\: \\& \\: s_4 = s_5 = 0. ",
        "task_name": "1513_B. AND Sequences",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ntesting = len(sys.argv) == 4 and sys.argv[3] == \"myTest\"\nif testing:\n    cmd = sys.stdout\n    from time import time\n    start_time = int(round(time() * 1000)) \n    readAll = open(sys.argv[1], 'r').read\n    sys.stdout = open(sys.argv[2], 'w')\nelse:\n    readAll = sys.stdin.read\n\n# ############ ---- I/O Functions ---- ############\n\nflush = sys.stdout.flush\nclass InputData:\n    def __init__(self):\n        self.lines = readAll().split('\\n')\n        self.n = len(self.lines)\n        self.ii = -1\n    def input(self):\n        self.ii += 1\n        assert self.ii < self.n\n        return self.lines[self.ii]\ninputData = InputData()\ninput = inputData.input\n\ndef intin():\n    return(int(input()))\ndef intlin():\n    return(list(map(int,input().split())))\ndef chrin():\n    return(list(input()))\ndef strin():\n    return input()\ndef lout(l, sep=\"\\n\", toStr=True):\n    print(sep.join(map(str, l) if toStr else l))\ndef dout(*args, **kargs):\n    if not testing: return\n    if args: print(args[0] if len(args)==1 else args)\n    if kargs: print([(k,v) for k,v in kargs.items()])\n    \n# ############ ---- I/O Functions ---- ############\n\n# from math import ceil\nfrom collections import defaultdict as ddict, Counter\n# from heapq import *\n# from Queue import Queue\nfrom math import factorial\ndef nCr(n, r):\n    if n < 0 or r < 0 or n < r:\n        return 0\n    return factorial(n) / (factorial(r)*factorial(n-r))\ndef main():\n    n = intin()\n    a = intlin()\n    a = Counter(a)\n    x = a[min(a.keys())]\n    if x< 2:\n        return 0\n    return 2*nCr(x,2)*factorial(n-2)\n\nanss = []\nfor _ in xrange(intin()):\n    anss.append(main())\n    # anss.append(\"YES\" if main() else \"NO\")\nlout(anss)\n\nif testing:\n    sys.stdout = cmd\n    print(int(round(time() * 1000))  - start_time)",
        "correct": false,
        "task_id": "1242",
        "depth": 1
    },
    {
        "description": "The new operating system BerOS has a nice feature. It is possible to use any number of characters '/' as a delimiter in path instead of one traditional '/'. For example, strings //usr///local//nginx/sbin// and /usr/local/nginx///sbin are equivalent. The character '/' (or some sequence of such characters) at the end of the path is required only in case of the path to the root directory, which can be represented as single character '/'.\n\nA path called normalized if it contains the smallest possible number of characters '/'.\n\nYour task is to transform a given path to the normalized form.\n\nInput\n\nThe first line of the input contains only lowercase Latin letters and character '/' \u2014 the path to some directory. All paths start with at least one character '/'. The length of the given line is no more than 100 characters, it is not empty.\n\nOutput\n\nThe path in normalized form.\n\nExamples\n\nInput\n\n//usr///local//nginx/sbin\n\n\nOutput\n\n/usr/local/nginx/sbin",
        "task_name": "20_A. BerOS file system",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nline = stdin.readline()\narray = line.split('/')\nstr = \"\"\nfor word in array:\n    if(word!=\"\"):\n        str = str+ \"/\" + word.strip()\nstdout.write(str)",
        "correct": false,
        "task_id": "1243",
        "depth": 1
    },
    {
        "description": "Petya wrote a programme on C++ that calculated a very interesting function f(n). Petya ran the program with a certain value of n and went to the kitchen to have some tea. The history has no records concerning how long the program had been working. By the time Petya returned, it had completed the calculations and had the result. However while Petya was drinking tea, a sly virus managed to destroy the input file so that Petya can't figure out for which value of n the program was run. Help Petya, carry out the inverse function!\n\nMostly, the program consists of a function in C++ with the following simplified syntax:\n\n  * function ::= int f(int n) {operatorSequence}\n  * operatorSequence ::= operator | operator operatorSequence\n  * operator ::= return arithmExpr; | if (logicalExpr) return arithmExpr;\n  * logicalExpr ::= arithmExpr > arithmExpr | arithmExpr < arithmExpr | arithmExpr == arithmExpr\n  * arithmExpr ::= sum\n  * sum ::= product | sum + product | sum - product\n  * product ::= multiplier | product * multiplier | product / multiplier\n  * multiplier ::= n | number | f(arithmExpr)\n  * number ::= 0|1|2|... |32767\n\n\n\nThe whitespaces in a operatorSequence are optional.\n\nThus, we have a function, in which body there are two kinds of operators. There is the operator \"return arithmExpr;\" that returns the value of the expression as the value of the function, and there is the conditional operator \"if (logicalExpr) return arithmExpr;\" that returns the value of the arithmetical expression when and only when the logical expression is true. Guaranteed that no other constructions of C++ language \u2014 cycles, assignment operators, nested conditional operators etc, and other variables except the n parameter are used in the function. All the constants are integers in the interval [0..32767].\n\nThe operators are performed sequentially. After the function has returned a value other operators in the sequence are not performed. Arithmetical expressions are performed taking into consideration the standard priority of the operations. It means that first all the products that are part of the sum are calculated. During the calculation of the products the operations of multiplying and division are performed from the left to the right. Then the summands are summed, and the addition and the subtraction are also performed from the left to the right. Operations \">\" (more), \"<\" (less) and \"==\" (equals) also have standard meanings.\n\nNow you've got to pay close attention! The program is compiled with the help of 15-bit Berland C++ compiler invented by a Berland company BerSoft, that's why arithmetical operations are performed in a non-standard way. Addition, subtraction and multiplication are performed modulo 32768 (if the result of subtraction is negative, then 32768 is added to it until the number belongs to the interval [0..32767]). Division \"/\" is a usual integer division where the remainder is omitted.\n\nExamples of arithmetical operations: \n\n<image>\n\nGuaranteed that for all values of n from 0 to 32767 the given function is performed correctly. That means that:\n\n1. Division by 0 never occures.\n\n2. When performing a function for the value n = N recursive calls of the function f may occur only for the parameter value of 0, 1, ..., N - 1. Consequently, the program never has an infinite recursion.\n\n3. As the result of the sequence of the operators, the function always returns a value.\n\nWe have to mention that due to all the limitations the value returned by the function f is independent from either global variables or the order of performing the calculations of arithmetical expressions as part of the logical one, or from anything else except the value of n parameter. That's why the f function can be regarded as a function in its mathematical sense, i.e. as a unique correspondence between any value of n from the interval [0..32767] and a value of f(n) from the same interval.\n\nGiven the value of f(n), and you should find n. If the suitable n value is not unique, you should find the maximal one (from the interval [0..32767]).\n\nInput\n\nThe first line has an integer f(n) from the interval [0..32767]. The next lines have the description of the function f. In the description can be found extra spaces and line breaks (see the examples) which, of course, can\u2019t break key words int, if, return and numbers. The size of input data can\u2019t exceed 100 bytes.\n\nOutput\n\nOutput a single number \u2014 the answer to the problem. If there\u2019s no answer, output \"-1\" (without quotes).\n\nExamples\n\nInput\n\n17\nint f(int n)\n{\nif (n &lt; 100) return 17;\nif (n &gt; 99) return 27;\n}\n\n\nOutput\n\n99\n\n\nInput\n\n13\nint f(int n)\n{\nif (n == 0) return 0;\nreturn f(n - 1) + 1;\n}\n\n\nOutput\n\n13\n\nInput\n\n144\nint f(int n)\n{\nif (n == 0) return 0;\nif (n == 1) return n;\nreturn f(n - 1) + f(n - 2);\n}\n\nOutput\n\n24588",
        "task_name": "39_G. Inverse Function",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\nimport re\n\nimport sys\n\nimport operator as op\n\n \n\nfin, fout = sys.stdin, sys.stdout\n\n \n\nMOD = 2 ** 15\n\nmake_op = lambda op: lambda s, o: Num(op(s.x, o.x) % MOD)\n\nmake_cmp = lambda op: lambda s, o: op(s.x, o.x)\n\n \n\nclass Num:\n\n    def __init__(self, obj):\n\n        self.x = obj.x if isinstance(obj, Num) else int(obj)\n\n    __add__ = make_op(op.add)\n\n    __sub__ = make_op(op.sub)\n\n    __div__ = make_op(op.div)\n\n    __mul__ = make_op(op.mul)\n\n    __eq__ = make_cmp(op.eq)\n\n    __lt__ = make_cmp(op.lt)\n\n    __gt__ = make_cmp(op.gt)\n\n \n\ndef val(num):\n\n    return num.x if isinstance(num, Num) else num\n\n \n\nn = int(fin.readline())\n\n \n\ntext = \"\".join(fin.readlines())\n\nfor pat, repl in [\n\n    (r\"\\s\", r\"\"),\n\n    (r\"return\", \"return \"),\n\n    (r\".*{(.*)}.*\", r\"\\1\"),\n\n    (r\"(\\d+)\", r\"Num(\\1)\"),\n\n    (r\"(if.*?)(return)\", r\"\\1:\\2\"),\n\n    (r\";\", \"\\n\\t\"),\n\n    ]:\n\n    text = re.sub(pat, repl, text)\n\ntext = \"def F(n):\\n\\tn = Num(n)\\n\\t\" + text\n\n \n\nexec(compile(text.strip(), \"f**k\", 'exec'))\n\n \n\ncache = {}\n\nf = lambda n: Num(cache[val(n)])\n\nans = -1\n\nfor i in range(0, MOD):\n\n    t = cache[i] = Num(F(i))\n\n    if val(t) == n:\n\n      ans = i\n\n     \n\nprint(ans) \n",
        "correct": true,
        "task_id": "1246",
        "depth": 1
    },
    {
        "description": "Indian summer is such a beautiful time of the year! A girl named Alyona is walking in the forest and picking a bouquet from fallen leaves. Alyona is very choosy \u2014 she doesn't take a leaf if it matches the color and the species of the tree of one of the leaves she already has. Find out how many leaves Alyona has picked.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 100) \u2014 the number of leaves Alyona has found. The next n lines contain the leaves' descriptions. Each leaf is characterized by the species of the tree it has fallen from and by the color. The species of the trees and colors are given in names, consisting of no more than 10 lowercase Latin letters. A name can not be an empty string. The species of a tree and the color are given in each line separated by a space.\n\nOutput\n\nOutput the single number \u2014 the number of Alyona's leaves.\n\nExamples\n\nInput\n\n5\nbirch yellow\nmaple red\nbirch yellow\nmaple yellow\nmaple green\n\n\nOutput\n\n4\n\n\nInput\n\n3\noak yellow\noak yellow\noak yellow\n\n\nOutput\n\n1",
        "task_name": "44_A. Indian Summer",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "d=int(raw_input())\nm=['']*d\nres=0\nfor i in range(0,d):\n    x=raw_input()\n    x=x.split()\n    m[i]=x[0]+x[1]\ng=sorted(m)\n\nv=0\nn='st'\nwhile n=='st':\n    if(d==1):\n        res=1\n        break\n    if(g[0]==g[1])&(v==0):\n        \n        res=res+1\n        \n    for i in range(1,len(g)):\n    \n    \n       if(g[i-1]!=g[i]):\n           res=res+1\n    if(g[0]!=g[1]):\n        res=res+1\n    break    \nprint(res)        \n",
        "correct": false,
        "task_id": "1247",
        "depth": 2
    },
    {
        "description": "A and B are preparing themselves for programming contests.\n\nTo train their logical thinking and solve problems better, A and B decided to play chess. During the game A wondered whose position is now stronger.\n\nFor each chess piece we know its weight: \n\n  * the queen's weight is 9, \n  * the rook's weight is 5, \n  * the bishop's weight is 3, \n  * the knight's weight is 3, \n  * the pawn's weight is 1, \n  * the king's weight isn't considered in evaluating position. \n\n\n\nThe player's weight equals to the sum of weights of all his pieces on the board.\n\nAs A doesn't like counting, he asked you to help him determine which player has the larger position weight.\n\nInput\n\nThe input contains eight lines, eight characters each \u2014 the board's description.\n\nThe white pieces on the board are marked with uppercase letters, the black pieces are marked with lowercase letters.\n\nThe white pieces are denoted as follows: the queen is represented is 'Q', the rook \u2014 as 'R', the bishop \u2014 as'B', the knight \u2014 as 'N', the pawn \u2014 as 'P', the king \u2014 as 'K'.\n\nThe black pieces are denoted as 'q', 'r', 'b', 'n', 'p', 'k', respectively.\n\nAn empty square of the board is marked as '.' (a dot). \n\nIt is not guaranteed that the given chess position can be achieved in a real game. Specifically, there can be an arbitrary (possibly zero) number pieces of each type, the king may be under attack and so on.\n\nOutput\n\nPrint \"White\" (without quotes) if the weight of the position of the white pieces is more than the weight of the position of the black pieces, print \"Black\" if the weight of the black pieces is more than the weight of the white pieces and print \"Draw\" if the weights of the white and black pieces are equal.\n\nExamples\n\nInput\n\n...QK...\n........\n........\n........\n........\n........\n........\n...rk...\n\n\nOutput\n\nWhite\n\n\nInput\n\nrnbqkbnr\npppppppp\n........\n........\n........\n........\nPPPPPPPP\nRNBQKBNR\n\n\nOutput\n\nDraw\n\n\nInput\n\nrppppppr\n...k....\n........\n........\n........\n........\nK...Q...\n........\n\n\nOutput\n\nBlack\n\nNote\n\nIn the first test sample the weight of the position of the white pieces equals to 9, the weight of the position of the black pieces equals 5.\n\nIn the second test sample the weights of the positions of the black and the white pieces are equal to 39.\n\nIn the third test sample the weight of the position of the white pieces equals to 9, the weight of the position of the black pieces equals to 16.",
        "task_name": "519_A. A and B and Chess",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def chess(data):\n   item = []\n   for i in range(len(data)):\n     if (data[i]!= '.'):\n         item.append(data[i])\n         \n   p1 = 0\n   p2 = 0\n   q,Q = 9\n   r,R=5\n   b,B =3\n   p,P=1\n   dictb = {'q':9,'r':5,'b':3,'n':3,'p':1}\n   dictw = {'Q':9,'R':5,'B':3,'N':3,'P':1}\n   lb = [q,r,b,n,p]\n   lw = [Q,R,B,N,P]\n   \n   for i in range(len(item)):\n      for j in range(len(lb)):\n         if (data[i] == lb[j]):\n            p1 = p1 + dictb[lb[j]]\n            \n         if (data[i] == lw[j]):\n            p1 = p1 + dictw[lw[j]]\n            \n   if (p1 < p2):\n      return Black\n   elif (p1 > p2):\n      return White\n   else:\n      return Draw\n         \n            \n\t  \t \t \t\t\t\t   \t\t  \t   \t     \t\t\t",
        "correct": false,
        "task_id": "1248",
        "depth": 2
    },
    {
        "description": "The teacher gave Anton a large geometry homework, but he didn't do it (as usual) as he participated in a regular round on Codeforces. In the task he was given a set of n lines defined by the equations y = ki\u00b7x + bi. It was necessary to determine whether there is at least one point of intersection of two of these lines, that lays strictly inside the strip between x1 < x2. In other words, is it true that there are 1 \u2264 i < j \u2264 n and x', y', such that: \n\n  * y' = ki * x' + bi, that is, point (x', y') belongs to the line number i; \n  * y' = kj * x' + bj, that is, point (x', y') belongs to the line number j; \n  * x1 < x' < x2, that is, point (x', y') lies inside the strip bounded by x1 < x2. \n\n\n\nYou can't leave Anton in trouble, can you? Write a program that solves the given task.\n\nInput\n\nThe first line of the input contains an integer n (2 \u2264 n \u2264 100 000) \u2014 the number of lines in the task given to Anton. The second line contains integers x1 and x2 ( - 1 000 000 \u2264 x1 < x2 \u2264 1 000 000) defining the strip inside which you need to find a point of intersection of at least two lines.\n\nThe following n lines contain integers ki, bi ( - 1 000 000 \u2264 ki, bi \u2264 1 000 000) \u2014 the descriptions of the lines. It is guaranteed that all lines are pairwise distinct, that is, for any two i \u2260 j it is true that either ki \u2260 kj, or bi \u2260 bj.\n\nOutput\n\nPrint \"Yes\" (without quotes), if there is at least one intersection of two distinct lines, located strictly inside the strip. Otherwise print \"No\" (without quotes).\n\nExamples\n\nInput\n\n4\n1 2\n1 2\n1 0\n0 1\n0 2\n\n\nOutput\n\nNO\n\nInput\n\n2\n1 3\n1 0\n-1 3\n\n\nOutput\n\nYES\n\nInput\n\n2\n1 3\n1 0\n0 2\n\n\nOutput\n\nYES\n\nInput\n\n2\n1 3\n1 0\n0 3\n\n\nOutput\n\nNO\n\nNote\n\nIn the first sample there are intersections located on the border of the strip, but there are no intersections located strictly inside it.\n\n<image>",
        "task_name": "593_B. Anton and Lines",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math\nimport sys\ninput=sys.stdin\nwrite=sys.stdout.write\nn=int(input.readline())\ns=input.readline().split()\nx1,x2=int(s[0]),int(s[1])\nB=[]\nC=[]\nfor i in range(n):\n    s=input.readline().split()\n    k,b=int(s[0]),int(s[1])\n    B.append([k*x1+b,k*x2+b])\nB.sort(key=lambda x:x[0]*10*15+x[1])\nc='No'\nfor i in range(n-1):\n    if B[i+1][0]!=B[i][0]:\n        if B[i+1][1]<B[i][1]:\n            c='Yes'\nwrite(c)\n           \n",
        "correct": false,
        "task_id": "1250",
        "depth": 1
    },
    {
        "description": "Fangy the little walrus, as all the modern walruses, loves to communicate via text messaging. One day he faced the following problem: When he sends large texts, they are split into parts each containing n characters (which is the size of one text message). Thus, whole sentences and words get split!\n\nFangy did not like it, so he faced the task of breaking the text into minimal messages on his own so that no sentence were broken into pieces when it is sent and the number of text messages to be sent would be minimal. If two consecutive sentences are in different messages, the space between them can be ignored (Fangy does not write this space).\n\nThe little walrus's text looks in the following manner: \n    \n    \n    TEXT ::= SENTENCE | SENTENCE SPACE TEXT  \n    SENTENCE ::= WORD SPACE SENTENCE | WORD END  \n    END ::= {'.', '?', '!'}  \n    WORD ::= LETTER | LETTER WORD  \n    LETTER ::= {'a'..'z', 'A'..'Z'}  \n    SPACE ::= ' '  \n    \n\nSPACE stands for the symbol of a space.\n\nSo, how many messages did Fangy send?\n\nInput\n\nThe first line contains an integer n, which is the size of one message (2 \u2264 n \u2264 255). The second line contains the text. The length of the text does not exceed 104 characters. It is guaranteed that the text satisfies the above described format. Specifically, this implies that the text is not empty.\n\nOutput\n\nOn the first and only line print the number of text messages Fangy will need. If it is impossible to split the text, print \"Impossible\" without the quotes.\n\nExamples\n\nInput\n\n25\nHello. I am a little walrus.\n\n\nOutput\n\n2\n\n\nInput\n\n2\nHow are you?\n\n\nOutput\n\nImpossible\n\n\nInput\n\n19\nHello! Do you like fish? Why?\n\n\nOutput\n\n3\n\nNote\n\nLet's take a look at the third sample. The text will be split into three messages: \"Hello!\", \"Do you like fish?\" and \"Why?\".",
        "task_name": "70_B. Text Messaging",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import re\nn=input()\nq=[len(x) for x in map(str.strip,re.split('[\\.!?]',raw_input()))][:-1]\nc,m,f=[q[0]+1,1,0]\nif c > n: f = 1\nfor i in xrange(1, len(q)):\n    if c + len(' ') + q[i] + len('.') > n:\n        m += 1\n        c = q[i] + len('.')\n        if c > n: f = 1\n    else:\n        if m == 0: m = 1\n        c += (len(' ') + q[i] + len('.'))\nprint [m, 'Impossible'][f]",
        "correct": true,
        "task_id": "1253",
        "depth": 1
    },
    {
        "description": "A famous Berland's painter Kalevitch likes to shock the public. One of his last obsessions is chess. For more than a thousand years people have been playing this old game on uninteresting, monotonous boards. Kalevitch decided to put an end to this tradition and to introduce a new attitude to chessboards.\n\nAs before, the chessboard is a square-checkered board with the squares arranged in a 8 \u00d7 8 grid, each square is painted black or white. Kalevitch suggests that chessboards should be painted in the following manner: there should be chosen a horizontal or a vertical line of 8 squares (i.e. a row or a column), and painted black. Initially the whole chessboard is white, and it can be painted in the above described way one or more times. It is allowed to paint a square many times, but after the first time it does not change its colour any more and remains black. Kalevitch paints chessboards neatly, and it is impossible to judge by an individual square if it was painted with a vertical or a horizontal stroke.\n\nKalevitch hopes that such chessboards will gain popularity, and he will be commissioned to paint chessboards, which will help him ensure a comfortable old age. The clients will inform him what chessboard they want to have, and the painter will paint a white chessboard meeting the client's requirements.\n\nIt goes without saying that in such business one should economize on everything \u2014 for each commission he wants to know the minimum amount of strokes that he has to paint to fulfill the client's needs. You are asked to help Kalevitch with this task.\n\nInput\n\nThe input file contains 8 lines, each of the lines contains 8 characters. The given matrix describes the client's requirements, W character stands for a white square, and B character \u2014 for a square painted black.\n\nIt is guaranteed that client's requirments can be fulfilled with a sequence of allowed strokes (vertical/column or horizontal/row).\n\nOutput\n\nOutput the only number \u2014 the minimum amount of rows and columns that Kalevitch has to paint on the white chessboard to meet the client's requirements.\n\nExamples\n\nInput\n\nWWWBWWBW\nBBBBBBBB\nWWWBWWBW\nWWWBWWBW\nWWWBWWBW\nWWWBWWBW\nWWWBWWBW\nWWWBWWBW\n\n\nOutput\n\n3\n\n\nInput\n\nWWWWWWWW\nBBBBBBBB\nWWWWWWWW\nWWWWWWWW\nWWWWWWWW\nWWWWWWWW\nWWWWWWWW\nWWWWWWWW\n\n\nOutput\n\n1",
        "task_name": "7_A. Kalevitch and Chess",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nsys.setrecursionlimit(2 ** 15)\n\nboard = []\npainted_rows = [False] * 8\npainted_cols = [False] * 8\n\n\ndef should_paint_column(col_num):\n    painted_by_rows = True\n    for row_num, x in enumerate(board):\n        if x[col_num] != True:\n            return False\n        painted_by_rows = painted_by_rows and painted_rows[row_num]\n    return True and not painted_by_rows\n\ndef main():\n    for y in xrange(8):\n        board.append([True if x == 'B' else False for x in raw_input()])# True is black, False is white\n    strokes = 0\n    for row_num, row in enumerate(board):\n        if all(row): #Entire row should be black\n            strokes += 1\n            painted_rows[row_num] = True\n    \n    for col_num in xrange(8):\n        if should_paint_column(col_num):\n            strokes += 1\n            painted_cols[col_num] = True\n    \n    print(strokes)\n    \n\nmain()\n",
        "correct": true,
        "task_id": "1254",
        "depth": 1
    },
    {
        "description": "Vova promised himself that he would never play computer games... But recently Firestorm \u2014 a well-known game developing company \u2014 published their newest game, World of Farcraft, and it became really popular. Of course, Vova started playing it.\n\nNow he tries to solve a quest. The task is to come to a settlement named Overcity and spread a rumor in it.\n\nVova knows that there are n characters in Overcity. Some characters are friends to each other, and they share information they got. Also Vova knows that he can bribe each character so he or she starts spreading the rumor; i-th character wants ci gold in exchange for spreading the rumor. When a character hears the rumor, he tells it to all his friends, and they start spreading the rumor to their friends (for free), and so on.\n\nThe quest is finished when all n characters know the rumor. What is the minimum amount of gold Vova needs to spend in order to finish the quest?\n\nTake a look at the notes if you think you haven't understood the problem completely.\n\nInput\n\nThe first line contains two integer numbers n and m (1 \u2264 n \u2264 105, 0 \u2264 m \u2264 105) \u2014 the number of characters in Overcity and the number of pairs of friends.\n\nThe second line contains n integer numbers ci (0 \u2264 ci \u2264 109) \u2014 the amount of gold i-th character asks to start spreading the rumor.\n\nThen m lines follow, each containing a pair of numbers (xi, yi) which represent that characters xi and yi are friends (1 \u2264 xi, yi \u2264 n, xi \u2260 yi). It is guaranteed that each pair is listed at most once.\n\nOutput\n\nPrint one number \u2014 the minimum amount of gold Vova has to spend in order to finish the quest.\n\nExamples\n\nInput\n\n5 2\n2 5 3 4 8\n1 4\n4 5\n\n\nOutput\n\n10\n\n\nInput\n\n10 0\n1 2 3 4 5 6 7 8 9 10\n\n\nOutput\n\n55\n\n\nInput\n\n10 5\n1 6 2 7 3 8 4 9 5 10\n1 2\n3 4\n5 6\n7 8\n9 10\n\n\nOutput\n\n15\n\nNote\n\nIn the first example the best decision is to bribe the first character (he will spread the rumor to fourth character, and the fourth one will spread it to fifth). Also Vova has to bribe the second and the third characters, so they know the rumor.\n\nIn the second example Vova has to bribe everyone.\n\nIn the third example the optimal decision is to bribe the first, the third, the fifth, the seventh and the ninth characters.",
        "task_name": "893_C. Rumor",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom collections import *\n\n\nclass graph:\n    def __init__(self):\n        self.gdict, self.edges, self.l = defaultdict(list), defaultdict(int), defaultdict(int)\n\n    def addEdge(self, node1, node2, w=None):\n        self.gdict[node1].append(node2)\n        self.gdict[node2].append(node1)\n\n    def dfsUtil(self, v):\n        stack, cost = [v], a[v]\n\n        while (stack):\n            s = stack.pop()\n            cost = min(cost, a[s])\n\n            for i1 in self.gdict[s]:\n                if not self.visit[i1]:\n                    stack.append(i1)\n                    self.visit[i1] = True\n        return cost\n\n    def dfs(self):\n        self.visit, ans = [False] * (n + 1), 0\n\n        for i in range(n):\n            if not self.visit[i]:\n                self.visit[i] = True\n                ans += self.dfsUtil(i)\n        print(ans)\n\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nn, m = rints()\na, g = rints(), graph()\nfor _ in range(m):\n    u, v = rints()\n    g.addEdge(u - 1, v - 1)\ng.dfs()\n",
        "correct": true,
        "task_id": "1256",
        "depth": 2
    },
    {
        "description": "Victor tries to write his own text editor, with word correction included. However, the rules of word correction are really strange.\n\nVictor thinks that if a word contains two consecutive vowels, then it's kinda weird and it needs to be replaced. So the word corrector works in such a way: as long as there are two consecutive vowels in the word, it deletes the first vowel in a word such that there is another vowel right before it. If there are no two consecutive vowels in the word, it is considered to be correct.\n\nYou are given a word s. Can you predict what will it become after correction?\n\nIn this problem letters a, e, i, o, u and y are considered to be vowels.\n\nInput\n\nThe first line contains one integer n (1 \u2264 n \u2264 100) \u2014 the number of letters in word s before the correction.\n\nThe second line contains a string s consisting of exactly n lowercase Latin letters \u2014 the word before the correction.\n\nOutput\n\nOutput the word s after the correction.\n\nExamples\n\nInput\n\n5\nweird\n\n\nOutput\n\nwerd\n\n\nInput\n\n4\nword\n\n\nOutput\n\nword\n\n\nInput\n\n5\naaeaa\n\n\nOutput\n\na\n\nNote\n\nExplanations of the examples:\n\n  1. There is only one replace: weird <image> werd;\n  2. No replace needed since there are no two consecutive vowels;\n  3. aaeaa <image> aeaa <image> aaa <image> aa <image> a. ",
        "task_name": "938_A. Word Correction",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def magic(number):\n\treturn str(''.join(str(i) for i in number))\nn=int(raw_input())\ns=raw_input()\nstack=[]\nvowel=['a','e','i','o','u']\nfor i in range(len(s)):\n\tif(i==0):\n\t\tstack.append(s[i])\n\telse:\n\t\tif((stack[len(stack)-1] in vowel) and (s[i] in vowel)):\n\t\t\tcontinue\n\n\t\telse:\n\t\t\tstack.append(s[i])\n\t\n\t\t\t\nprint(magic(stack))\n\n",
        "correct": false,
        "task_id": "1257",
        "depth": 1
    },
    {
        "description": "You are given two integers a and b. Moreover, you are given a sequence s_0, s_1, ..., s_{n}. All values in s are integers 1 or -1. It's known that sequence is k-periodic and k divides n+1. In other words, for each k \u2264 i \u2264 n it's satisfied that s_{i} = s_{i - k}.\n\nFind out the non-negative remainder of division of \u2211 _{i=0}^{n} s_{i} a^{n - i} b^{i} by 10^{9} + 9.\n\nNote that the modulo is unusual!\n\nInput\n\nThe first line contains four integers n, a, b and k (1 \u2264 n \u2264 10^{9}, 1 \u2264 a, b \u2264 10^{9}, 1 \u2264 k \u2264 10^{5}).\n\nThe second line contains a sequence of length k consisting of characters '+' and '-'. \n\nIf the i-th character (0-indexed) is '+', then s_{i} = 1, otherwise s_{i} = -1.\n\nNote that only the first k members of the sequence are given, the rest can be obtained using the periodicity property.\n\nOutput\n\nOutput a single integer \u2014 value of given expression modulo 10^{9} + 9.\n\nExamples\n\nInput\n\n2 2 3 3\n+-+\n\n\nOutput\n\n7\n\n\nInput\n\n4 1 5 1\n-\n\n\nOutput\n\n999999228\n\nNote\n\nIn the first example:\n\n(\u2211 _{i=0}^{n} s_{i} a^{n - i} b^{i}) = 2^{2} 3^{0} - 2^{1} 3^{1} + 2^{0} 3^{2} = 7\n\nIn the second example:\n\n(\u2211 _{i=0}^{n} s_{i} a^{n - i} b^{i}) = -1^{4} 5^{0} - 1^{3} 5^{1} - 1^{2} 5^{2} - 1^{1} 5^{3} - 1^{0} 5^{4} = -781 \u2261 999999228 \\pmod{10^{9} + 9}.",
        "task_name": "963_A. Alternating Sum",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\n\nperiod_pow = lambda r1, r2, n, x: div(add(pow(r2, (x + 1) * n, mod), -pow(r1, (x + 1) * n, mod)),\n                                      add(mult(pow(r2, n, mod), pow(r1, x * n, mod)), - pow(r1, n * (x + 1), mod)))\nadd = lambda a, b: (a + b) % mod\nmult = lambda a, b: (a * b) % mod\ndiv = lambda a, b: mult(a, inv(b))\ninv = lambda a: pow(a, mod - 2, mod)\nmod = 10 ** 9 + 9\n\nn, a, b, k = map(int, stdin.readline().split())\ns, su = stdin.readline().strip(), 0\nfor i, j in enumerate(s):\n    cur = mult(pow(a, n - i, mod), pow(b, i, mod))\n    if j == '-':\n        cur *= -1\n    su = add(su, cur)\n\ngeo = period_pow(a, b, k, (n + 1) // k - 1)\nprint(mult(su, geo))\n",
        "correct": false,
        "task_id": "1258",
        "depth": 1
    },
    {
        "description": "Given three numbers n, a, b. You need to find an adjacency matrix of such an undirected graph that the number of components in it is equal to a, and the number of components in its complement is b. The matrix must be symmetric, and all digits on the main diagonal must be zeroes.\n\nIn an undirected graph loops (edges from a vertex to itself) are not allowed. It can be at most one edge between a pair of vertices.\n\nThe adjacency matrix of an undirected graph is a square matrix of size n consisting only of \"0\" and \"1\", where n is the number of vertices of the graph and the i-th row and the i-th column correspond to the i-th vertex of the graph. The cell (i,j) of the adjacency matrix contains 1 if and only if the i-th and j-th vertices in the graph are connected by an edge.\n\nA connected component is a set of vertices X such that for every two vertices from this set there exists at least one path in the graph connecting this pair of vertices, but adding any other vertex to X violates this rule.\n\nThe complement or inverse of a graph G is a graph H on the same vertices such that two distinct vertices of H are adjacent if and only if they are not adjacent in G.\n\nInput\n\nIn a single line, three numbers are given n, a, b  (1 \u2264 n \u2264 1000, 1 \u2264 a, b \u2264 n): is the number of vertexes of the graph, the required number of connectivity components in it, and the required amount of the connectivity component in it's complement. \n\nOutput\n\nIf there is no graph that satisfies these constraints on a single line, print \"NO\" (without quotes).\n\nOtherwise, on the first line, print \"YES\"(without quotes). In each of the next n lines, output n digits such that j-th digit of i-th line must be 1 if and only if there is an edge between vertices i and j in G (and 0 otherwise). Note that the matrix must be symmetric, and all digits on the main diagonal must be zeroes. \n\nIf there are several matrices that satisfy the conditions \u2014 output any of them.\n\nExamples\n\nInput\n\n3 1 2\n\n\nOutput\n\nYES\n001\n001\n110\n\n\nInput\n\n3 3 3\n\n\nOutput\n\nNO",
        "task_name": "990_D. Graph And Its Complement",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Enter your code here. Read input from STDIN. Print output to STDOUT# ===============================================================================================\n# importing some useful libraries.\nfrom __future__ import division, print_function\nfrom fractions import Fraction\nimport sys\nimport os\nfrom io import BytesIO, IOBase\nfrom itertools import *\nimport bisect\nfrom heapq import *\nfrom math import ceil, floor\nfrom copy import *\nfrom collections import deque, defaultdict\nfrom collections import Counter as counter  # Counter(list)  return a dict with {key: count}\nfrom itertools import combinations  # if a = [1,2,3] then print(list(comb(a,2))) -----> [(1, 2), (1, 3), (2, 3)]\nfrom itertools import permutations as permutate\nfrom bisect import bisect_left as bl\nfrom operator import *\n# If the element is already present in the list,\n\n# the left most position where element has to be inserted is returned.\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n\n# If the element is already present in the list,\n# the right most position where element has to be inserted is returned\n\n# ==============================================================================================\n# fast I/O region\n\nBUFSIZE = 8192\nfrom sys import stderr\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"A\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for A in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(A))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n# inp = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# ===============================================================================================\n### START ITERATE RECURSION ###\nfrom types import GeneratorType\n\n\ndef iterative(f, stack=[]):\n    def wrapped_func(*args, **kwargs):\n        if stack: return f(*args, **kwargs)\n        to = f(*args, **kwargs)\n        while True:\n            if type(to) is GeneratorType:\n                stack.append(to)\n                to = next(to)\n                continue\n            stack.pop()\n            if not stack: break\n            to = stack[-1].send(to)\n        return to\n\n    return wrapped_func\n\n\n#### END ITERATE RECURSION ####\n###########################\n# Sorted list\nclass SortedList:\n    def __init__(self, iterable=[], _load=200):\n        \"\"\"Initialize sorted list instance.\"\"\"\n        values = sorted(iterable)\n        self._len = _len = len(values)\n        self._load = _load\n        self._lists = _lists = [values[start:start + _load] for start in range(0, _len, _load)]\n        self._list_lens = [len(_list) for _list in _lists]\n        self._mins = [_list[0] for _list in _lists]\n        self._fen_tree = []\n        self._rebuild = True\n\n    def _fen_build(self):\n        \"\"\"Build a fenwick tree instance.\"\"\"\n        self._fen_tree[:] = self._list_lens\n        _fen_tree = self._fen_tree\n        for start in range(len(_fen_tree)):\n            if start | start + 1 < len(_fen_tree):\n                _fen_tree[start | start + 1] += _fen_tree[start]\n        self._rebuild = False\n\n    def _fen_update(self, index, value):\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\n        if not self._rebuild:\n            _fen_tree = self._fen_tree\n            while index < len(_fen_tree):\n                _fen_tree[index] += value\n                index |= index + 1\n\n    def _fen_query(self, end):\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        A = 0\n        while end:\n            A += _fen_tree[end - 1]\n            end &= end - 1\n        return A\n\n    def _fen_findkth(self, k):\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\n        _list_lens = self._list_lens\n        if k < _list_lens[0]:\n            return 0, k\n        if k >= self._len - _list_lens[-1]:\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        idx = -1\n        for d in reversed(range(len(_fen_tree).bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\n                idx = right_idx\n                k -= _fen_tree[idx]\n        return idx + 1, k\n\n    def _delete(self, pos, idx):\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len -= 1\n        self._fen_update(pos, -1)\n        del _lists[pos][idx]\n        _list_lens[pos] -= 1\n\n        if _list_lens[pos]:\n            _mins[pos] = _lists[pos][0]\n        else:\n            del _lists[pos]\n            del _list_lens[pos]\n            del _mins[pos]\n            self._rebuild = True\n\n    def _loc_left(self, value):\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        lo, pos = -1, len(_lists) - 1\n        while lo + 1 < pos:\n            mi = (lo + pos) >> 1\n            if value <= _mins[mi]:\n                pos = mi\n            else:\n                lo = mi\n\n        if pos and value <= _lists[pos - 1][-1]:\n            pos -= 1\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value <= _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def _loc_right(self, value):\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        pos, hi = 0, len(_lists)\n        while pos + 1 < hi:\n            mi = (pos + hi) >> 1\n            if value < _mins[mi]:\n                hi = mi\n            else:\n                pos = mi\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value < _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def add(self, value):\n        \"\"\"Add `value` to sorted list.\"\"\"\n        _load = self._load\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len += 1\n        if _lists:\n            pos, idx = self._loc_right(value)\n            self._fen_update(pos, 1)\n            _list = _lists[pos]\n            _list.insert(idx, value)\n            _list_lens[pos] += 1\n            _mins[pos] = _list[0]\n            if _load + _load < len(_list):\n                _lists.insert(pos + 1, _list[_load:])\n                _list_lens.insert(pos + 1, len(_list) - _load)\n                _mins.insert(pos + 1, _list[_load])\n                _list_lens[pos] = _load\n                del _list[_load:]\n                self._rebuild = True\n        else:\n            _lists.append([value])\n            _mins.append(value)\n            _list_lens.append(1)\n            self._rebuild = True\n\n    def discard(self, value):\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_right(value)\n            if idx and _lists[pos][idx - 1] == value:\n                self._delete(pos, idx - 1)\n\n    def remove(self, value):\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\n        _len = self._len\n        self.discard(value)\n        if _len == self._len:\n            raise ValueError('{0!r} not in list'.format(value))\n\n    def pop(self, index=-1):\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        value = self._lists[pos][idx]\n        self._delete(pos, idx)\n        return value\n\n    def bisect_left(self, value):\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_left(value)\n        return self._fen_query(pos) + idx\n\n    def bisect_right(self, value):\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_right(value)\n        return self._fen_query(pos) + idx\n\n    def count(self, value):\n        \"\"\"Return number of ofinansurrences of `value` in the sorted list.\"\"\"\n        return self.bisect_right(value) - self.bisect_left(value)\n\n    def __len__(self):\n        \"\"\"Return the size of the sorted list.\"\"\"\n        return self._len\n\n    def __getitem__(self, index):\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        return self._lists[pos][idx]\n\n    def __delitem__(self, index):\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        self._delete(pos, idx)\n\n    def __contains__(self, value):\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_left(value)\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\n        return False\n\n    def __iter__(self):\n        \"\"\"Return an iterator over the sorted list.\"\"\"\n        return (value for _list in self._lists for value in _list)\n\n    def __reversed__(self):\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\n\n    def __repr__(self):\n        \"\"\"Return string representation of sorted list.\"\"\"\n        return 'SortedList({0})'.format(list(self))\n\n\n# ===============================================================================================\n# some shortcuts\n\nmod = 1000000007\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\ndef pow(A, B, p):\n    res = 1  # Initialize result\n    A = A % p  # Update A if it is more , than or equal to p\n    if (A == 0):\n        return 0\n    while (B > 0):\n        if ((B & 1) == 1):  # If B is odd, multiply, A with result\n            res = (res * A) % p\n\n        B = B >> 1  # B = B/2\n        A = (A * A) % p\n    return res\n\n\nfrom functools import reduce\n\n\ndef numberOfSetBits(n):\n    n = (n & 0x5555555555555555) + ((n & 0xAAAAAAAAAAAAAAAA) >> 1)\n    n = (n & 0x3333333333333333) + ((n & 0xCCCCCCCCCCCCCCCC) >> 2)\n    n = (n & 0x0F0F0F0F0F0F0F0F) + ((n & 0xF0F0F0F0F0F0F0F0) >> 4)\n    n = (n & 0x00FF00FF00FF00FF) + ((n & 0xFF00FF00FF00FF00) >> 8)\n    n = (n & 0x0000FFFF0000FFFF) + ((n & 0xFFFF0000FFFF0000) >> 16)\n    n = (n & 0x00000000FFFFFFFF) + ((n & 0xFFFFFFFF00000000) >> 32)  # This last & isn't strictly necessary.\n    return n\n\n\ndef factors(n):\n    return set(reduce(list.__add__,\n                      ([start, n // start] for start in range(1, int(n ** 0.5) + 1) if n % start == 0)))\n\n\nclass MergeFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n        # self.lista = [[_] for _ in range(n)]\n\n    def find(self, a):\n        to_update = []\n        while a != self.parent[a]:\n            to_update.append(a)\n            a = self.parent[a]\n        for b in to_update:\n            self.parent[b] = a\n        return self.parent[a]\n\n    def merge(self, a, b):\n        a = self.find(a)\n        b = self.find(b)\n        if a == b:\n            return\n        if self.size[a] < self.size[b]:\n            a, b = b, a\n        self.num_sets -= 1\n        self.parent[b] = a\n        self.size[a] += self.size[b]\n        # self.lista[a] += self.lista[b]\n        # self.lista[b] = []\n\n    def set_size(self, a):\n        return self.size[self.find(a)]\n\n    def __len__(self):\n        return self.num_sets\n\n\ndef gcd(a, b):\n    if a == b: return a\n    while b > 0: a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return abs((a // gcd(a, b)) * b)\n\n\ninf = float(\"inf\")\n\n##############Find sum of product of subsets of size k in a array\n\n\n# ar=[0,1,2,3]\n# k=3\n# n=len(ar)-1\n# dp=[0]*(n+1)\n# dp[0]=1\n# for pos in range(1,n+1):\n#     dp[pos]=0\n#     l=max(1,k+pos-n-1)\n#     for j in range(min(pos,k),l-1,-1):\n#         dp[j]=dp[j]+ar[pos]*dp[j-1]\n# print(dp[k])\n\n\n##two pointer method\n\n\n# l=0\n# for r in range(n):\n#     add(r)\n#     while(not ok(l,r)):#l,r included\n#         remove(l)\n#         l+=1\n#     #[l,r] is valid\n#     if(ok()):\n#         do()\n\n\n# #==========================\n\n\n# r=-1\n# for l in range(n):\n#     while (r + 1 < l):\n#         r=l-1\n#         reset state\n#\n#\n#\n#     while(r+1<n and  ok_to_include_r+1()):\n#         add(r)\n#         r+=1\n#     #[l,r) is valid\n#     if(ok()):\n#         do()\n#     remove(l)\n\n\n# #############################\n\n\n# discrete binary search\n# minimise:\n# def search(l,r):\n#     ans=inf\n#     while(l<=r):\n#         mid=(r-l)//2 + l\n#         if(check(mid)):\n#             ans=min(ans,mid)\n#             r=mid-1\n#         else:\n#             l=mid+1\n#\n#     return ans\n\n# maximise:\n# def search(l,r):\n#\n#     ans=-1\n#     while(l<=r):\n#         mid=l+(r-l)//2\n#         if(check(mid)):\n#             ans=max(ans,mid)\n#             l=mid+1\n#         else:\n#             r=mid-1\n#\n#     return ans\n\n\n# =========================================================================================\nfrom collections import defaultdict\n\n\n# #\n# to find factorial and ncr\n# tot = 40\n# mod = 10**9 +7\n# fac = [1, 1]\n# finv = [1, 1]\n# inv = [0, 1]\n#\n# for start in range(2, tot + 1):\n#     fac.append((fac[-1] * start) % mod)\n#     inv.append(mod - (inv[mod % start] * (mod // start) % mod))\n#     finv.append(finv[-1] * inv[-1] % mod)\n#\n#\n# def comb(n, r):\n#     if(r==0 or r==n):return 1\n#     if n < r:\n#         return 0\n#     else:\n#         return fac[n] * (finv[r] * finv[n - r] % mod) % mod\n#\n#\n# from functools import lru_cache\n# p=3\n# def ncr_small_mod_p(n,r):\n#     ans=1\n#     while(n>0):\n#         x=n%p\n#         y=r%p\n#         n//=p\n#         r//=p\n#         ans*=comb(x,y)\n#         ans%=p\n#     return ans\n\n\n#\n\ndef inp(): return sys.stdin.readline().rstrip(\"\\r\\n\")  # for fast input\n\n\ndef N():\n    return int(inp())\n\n\ndef out(var): sys.stdout.write(str(var))  # for fast output, always take string\n\n\ndef lis(): return list(map(int, inp().split()))\n\n\ndef stringlis(): return list(map(str, inp().split()))\n\n\ndef sep(): return map(int, inp().split())\n\n\ndef strsep(): return map(str, inp().split())\n\n\ndef fsep(): return map(float, inp().split())\n\n\ndef nextline(): out(\"\\n\")  # as stdout.write always print sring.\n\n\ndef arr1d(n, v):\n    return [v] * n\n\n\ndef arr2d(n, m, v):\n    return [[v] * m for _ in range(n)]\n\n\ndef arr3d(n, m, p, v):\n    return [[[v] * p for _ in range(m)] for sta in range(n)]\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\n# co-ordinate compression\n# ma={s:idx for idx,s in enumerate(sorted(set(l+r)))}\n\n# mxn=100005\n# lrg=[0]*mxn\n# for start in range(2,mxn-3):\n#     if (lrg[start]==0):\n#         for j in range(start,mxn-3,start):\n#             lrg[j]=start\n\ntest_count = 1\n\n\ndef testcase(t):\n    global test_count\n    for p in range(t):\n        global test_count\n        # print(\"Case #{}:\".format(test_count), end=\" \")\n        solve()\n        test_count += 1\n\n\ndef solve():\n    n,a,b=sep()\n    if(a>1 and b>1):\n        NO()\n        return\n    inv=0\n    if(b>1):\n        inv=1\n        a,b=b,a\n    graph=[[0]*n for _ in range(n)]\n    for i in range(n-1):\n        graph[i][i+1]=1\n        graph[i+1][1]=1\n    for i in range(a-1):\n        graph[i][i+1]=0\n        graph[i+1][1]=0\n\n\n        \n    if(inv==1):\n        for i in range(n):\n            for j in range(n):\n                if(i==j):continue\n                graph[i][j]^=1\n    \n    YES()\n    for i in graph:\n        temp=[]\n        for j in i:\n            temp.append(str(j))\n        print(\"\".join(temp))\n    \n\n\n\n\nsolve()\n# testcase(N())\n",
        "correct": false,
        "task_id": "1259",
        "depth": 2
    },
    {
        "description": "We will buy a product for N yen (the currency of Japan) at a shop.\n\nIf we use only 1000-yen bills to pay the price, how much change will we receive?\n\nAssume we use the minimum number of bills required.\n\nConstraints\n\n* 1 \\leq N \\leq 10000\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\n\n\nOutput\n\nPrint the amount of change as an integer.\n\nExamples\n\nInput\n\n1900\n\n\nOutput\n\n100\n\n\nInput\n\n3000\n\n\nOutput\n\n0",
        "task_name": "p02612 AtCoder Beginner Contest 173 - Payment",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    n = int(input())\n    print((1000 - (n % 1000)) % 1000)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "correct": true,
        "task_id": "1260",
        "depth": 1
    },
    {
        "description": "We have N weights indexed 1 to N. The \bmass of the weight indexed i is W_i.\n\nWe will divide these weights into two groups: the weights with indices not greater than T, and those with indices greater than T, for some integer 1 \\leq T < N. Let S_1 be the sum of the masses of the weights in the former group, and S_2 be the sum of the masses of the weights in the latter group.\n\nConsider all possible such divisions and find the minimum possible absolute difference of S_1 and S_2.\n\nConstraints\n\n* 2 \\leq N \\leq 100\n* 1 \\leq W_i \\leq 100\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nW_1 W_2 ... W_{N-1} W_N\n\n\nOutput\n\nPrint the minimum possible absolute difference of S_1 and S_2.\n\nExamples\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\n0\n\n\nInput\n\n4\n1 3 1 1\n\n\nOutput\n\n2\n\n\nInput\n\n8\n27 23 76 2 3 5 62 52\n\n\nOutput\n\n2",
        "task_name": "p03012 AtCoder Beginner Contest 129 - Balance",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N = input()\nV = list(map(int, input().split()))\n\nM = 1e9\nfor i in range(1, len(V)):\n\tdiff = abs(sum(V[:i])-sum(V[i:]))\n\tif(M>diff):\n\t\tM = diff\n\nprint(M)",
        "correct": false,
        "task_id": "1262",
        "depth": 1
    },
    {
        "description": "Takahashi lives in another world. There are slimes (creatures) of 10000 colors in this world. Let us call these colors Color 1, 2, ..., 10000.\n\nTakahashi has N slimes, and they are standing in a row from left to right. The color of the i-th slime from the left is a_i. If two slimes of the same color are adjacent, they will start to combine themselves. Because Takahashi likes smaller slimes, he has decided to change the colors of some of the slimes with his magic.\n\nTakahashi can change the color of one slime to any of the 10000 colors by one spell. How many spells are required so that no slimes will start to combine themselves?\n\nConstraints\n\n* 2 \\leq N \\leq 100\n* 1 \\leq a_i \\leq N\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N\n\n\nOutput\n\nPrint the minimum number of spells required.\n\nExamples\n\nInput\n\n5\n1 1 2 2 2\n\n\nOutput\n\n2\n\n\nInput\n\n3\n1 2 1\n\n\nOutput\n\n0\n\n\nInput\n\n5\n1 1 1 1 1\n\n\nOutput\n\n2\n\n\nInput\n\n14\n1 2 2 3 3 3 4 4 4 4 1 2 3 4\n\n\nOutput\n\n4",
        "task_name": "p03296 AtCoder Grand Contest 026 - Colorful Slimes 2",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N = map(int, raw_input().split())[0]\nA = map(int, raw_input().split())\nkasanari = 1\nc = 0\nfor i in range(0,N-1):\n    if A[i]==A[i+1]:\n        kasanari = kasanari + 1\n    else:\n        c = c + kasanari/2\n        kasanari = 1\nc = c + kasanari/2\nprint(c)",
        "correct": true,
        "task_id": "1263",
        "depth": 1
    },
    {
        "description": "There is a double-track line (up and down are separate lines and pass each other everywhere). There are 11 stations on this line, including the terminal station, and each station is called by the section number shown in the figure.\n\n<image>\n\n\nTrains depart from both terminal stations on this line at the same time and run without stopping along the way. Create a program that reads the length of each section and the speed of the two trains and outputs the number of the section where the trains pass each other in each case. However, if you pass each other just at the station, the smaller number of the section numbers on both sides will be output. In addition, the length of the train and the length of the station cannot be ignored.\n\n\n\nInput\n\nMultiple datasets are given. Each dataset is given in the following format.\n\n\nl1, l2, l3, l4, l5, l6, l7, l8, l9, l10, v1, v2\n\n\nli (1 \u2264 li \u2264 2,000) is an integer representing the length (km) of the interval i. v1 is the speed of the train departing from the terminal station on the section 1 side (km / h), and v2 is the speed of the train departing from the terminal station on the section 10 side (km / h) (1 \u2264 v1, v2) \u2264 2,000).\n\nThe number of datasets does not exceed 50.\n\nOutput\n\nFor each data set, the number of the section where the train passes is output on one line.\n\nExample\n\nInput\n\n1,1,1,1,1,1,1,1,1,1,40,60\n1,1,1,1,1,3,3,3,3,3,50,50\n10,10,10,10,10,10,10,10,10,10,50,49\n\n\nOutput\n\n4\n7\n6",
        "task_name": "p00034 Railway Lines",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import (division, absolute_import, print_function,\n                        unicode_literals)\nfrom sys import stdin\n\nfor line in stdin:\n    L = [int(s) for s in line.split(',')]\n    cross_over = L[10] * sum(L[:10]) / (L[10] + L[11])\n    d = 0\n    for i, xi in enumerate(L[:10]):\n        d += xi\n        if cross_over <= d:\n            break\n    print(i+1)",
        "correct": true,
        "task_id": "1265",
        "depth": 2
    },
    {
        "description": "Write a program of the Bubble Sort algorithm which sorts a sequence A in ascending order. The algorithm should be based on the following pseudocode:\n\n\nBubbleSort(A)\n1 for i = 0 to A.length-1\n2     for j = A.length-1 downto i+1\n3         if A[j] < A[j-1]\n4             swap A[j] and A[j-1]\n\n\nNote that, indices for array elements are based on 0-origin.\n\nYour program should also print the number of swap operations defined in line 4 of the pseudocode.\n\nConstraints\n\n1 \u2264 N \u2264 100\n\nInput\n\nThe first line of the input includes an integer N, the number of elements in the sequence.\n\nIn the second line, N elements of the sequence are given separated by spaces characters.\n\nOutput\n\nThe output consists of 2 lines.\n\nIn the first line, please print the sorted sequence. Two contiguous elements of the sequence should be separated by a space character.\n\nIn the second line, please print the number of swap operations.\n\nExamples\n\nInput\n\n5\n5 3 2 4 1\n\n\nOutput\n\n1 2 3 4 5\n8\n\n\nInput\n\n6\n5 2 4 6 1 3\n\n\nOutput\n\n1 2 3 4 5 6\n9",
        "task_name": "p02259 Bubble Sort",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N = int(raw_input())\nnums = map(int, raw_input().split(\" \"))\n\ncount = 0\nfor i in range(0, len(nums)):\n    for j in range(len(nums)-1, i, -1):\n        if nums[j-1] > nums[j]:\n            temp = nums[j-1]\n            nums[j-1] = nums[j]\n            nums[j] = temp\n            count += 1\n\nnums = map(str, nums)\nprint(\" \".join(nums))\nprint(count)",
        "correct": true,
        "task_id": "1266",
        "depth": 2
    },
    {
        "description": "Write a program which reads a sequence and prints it in the reverse order.\n\nNote\n\n\u89e3\u8aac\n\nConstraints\n\n* n \u2264 100\n* 0 \u2264 ai < 1000\n\nInput\n\nThe input is given in the following format:\n\n\nn\na1 a2 . . . an\n\n\nn is the size of the sequence and ai is the ith element of the sequence.\n\nOutput\n\nPrint the reversed sequence in a line. Print a single space character between adjacent elements (Note that your program should not put a space character after the last element).\n\nExamples\n\nInput\n\n5\n1 2 3 4 5\n\n\nOutput\n\n5 4 3 2 1\n\n\nInput\n\n8\n3 3 4 4 5 8 7 9\n\n\nOutput\n\n9 7 8 5 4 4 3 3",
        "task_name": "p02407 Reversing Numbers",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport math\n\nn = input()\na = map(int, raw_input().split())\na.reverse()\n\nfor i in xrange(n) :\n    sys.stdout.write(str(a[i]))\n    if i < n-1 :\n        sys.stdout.write(\" \")\nprint",
        "correct": true,
        "task_id": "1267",
        "depth": 1
    },
    {
        "description": "You are given two strings s and t. In a single move, you can choose any of two strings and delete the first (that is, the leftmost) character. After a move, the length of the string decreases by 1. You can't choose a string if it is empty.\n\nFor example:\n\n  * by applying a move to the string \"where\", the result is the string \"here\", \n  * by applying a move to the string \"a\", the result is an empty string \"\". \n\n\n\nYou are required to make two given strings equal using the fewest number of moves. It is possible that, in the end, both strings will be equal to the empty string, and so, are equal to each other. In this case, the answer is obviously the sum of the lengths of the initial strings.\n\nWrite a program that finds the minimum number of moves to make two given strings s and t equal.\n\nInput\n\nThe first line of the input contains s. In the second line of the input contains t. Both strings consist only of lowercase Latin letters. The number of letters in each string is between 1 and 2\u22c510^5, inclusive.\n\nOutput\n\nOutput the fewest number of moves required. It is possible that, in the end, both strings will be equal to the empty string, and so, are equal to each other. In this case, the answer is obviously the sum of the lengths of the given strings.\n\nExamples\n\nInput\n\ntest\nwest\n\n\nOutput\n\n2\n\n\nInput\n\ncodeforces\nyes\n\n\nOutput\n\n9\n\n\nInput\n\ntest\nyes\n\n\nOutput\n\n7\n\n\nInput\n\nb\nab\n\n\nOutput\n\n1\n\nNote\n\nIn the first example, you should apply the move once to the first string and apply the move once to the second string. As a result, both strings will be equal to \"est\".\n\nIn the second example, the move should be applied to the string \"codeforces\" 8 times. As a result, the string becomes \"codeforces\" \u2192 \"es\". The move should be applied to the string \"yes\" once. The result is the same string \"yes\" \u2192 \"es\".\n\nIn the third example, you can make the strings equal only by completely deleting them. That is, in the end, both strings will be empty.\n\nIn the fourth example, the first character of the second string should be deleted.",
        "task_name": "1005_B. Delete from the Left",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n#-*- coding: utf-8 -*-\n\nfrom collections import defaultdict\nfrom math import factorial as f\nfrom fractions import gcd as g\n\ns = raw_input()\nt = raw_input()\nN, M, ret = len (s), len (t), 0\ns = s [::-1]\nt = t [::-1]\nL = min (N, M)\nfor i in range (L):\n    if s [i] == t [i]:\n        ret += 2\n\nret = N + M - ret\nprint (ret)\n",
        "correct": false,
        "task_id": "1268",
        "depth": 1
    },
    {
        "description": "You are given a string s consisting only of lowercase Latin letters.\n\nYou can rearrange all letters of this string as you wish. Your task is to obtain a good string by rearranging the letters of the given string or report that it is impossible to do it.\n\nLet's call a string good if it is not a palindrome. Palindrome is a string which is read from left to right the same as from right to left. For example, strings \"abacaba\", \"aa\" and \"z\" are palindromes and strings \"bba\", \"xd\" are not.\n\nYou have to answer t independent queries.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 100) \u2014 number of queries.\n\nEach of the next t lines contains one string. The i-th line contains a string s_i consisting only of lowercase Latin letter. It is guaranteed that the length of s_i is from 1 to 1000 (inclusive).\n\nOutput\n\nPrint t lines. In the i-th line print the answer to the i-th query: -1 if it is impossible to obtain a good string by rearranging the letters of s_i and any good string which can be obtained from the given one (by rearranging the letters) otherwise.\n\nExample\n\nInput\n\n\n3\naa\nabacaba\nxdd\n\n\nOutput\n\n\n-1\nabaacba\nxdd\n\nNote\n\nIn the first query we cannot rearrange letters to obtain a good string.\n\nOther examples (not all) of correct answers to the second query: \"ababaca\", \"abcabaa\", \"baacaba\".\n\nIn the third query we can do nothing to obtain a good string.",
        "task_name": "1093_B. Letters Rearranging",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "k = int(raw_input())\nfor i in range(k):\n\tl = raw_input()\n\tstr1 = \"\"\n\tflag = False\n\tif l == l[::-1]:\n\t\tfor j in range(1,len(l)):\n\t\t\tif l[j] != l[0]:\n\t\t\t\tflag = True\n\t\t\t\tstr1 = l[j] + l[1:j] + l[0] + l[j+1:]\n\t\t\t\tbreak\n\telse:\n\t\tflag = True\n\t\tstr1 = l\n\tif flag == False:\n\t\tprint(-1)\n\telse:\n\t\tprint(str1)\n\n\n\t\t\t",
        "correct": true,
        "task_id": "1270",
        "depth": 2
    },
    {
        "description": "One day Sasha visited the farmer 2D and his famous magnetic farm. On this farm, the crop grows due to the influence of a special magnetic field. Maintaining of the magnetic field is provided by n machines, and the power of the i-th machine is a_i. \n\nThis year 2D decided to cultivate a new culture, but what exactly he didn't say. For the successful growth of the new culture, it is necessary to slightly change the powers of the machines. 2D can at most once choose an arbitrary integer x, then choose one machine and reduce the power of its machine by x times, and at the same time increase the power of one another machine by x times (powers of all the machines must stay positive integers). Note that he may not do that if he wants. More formally, 2D can choose two such indices i and j, and one integer x such that x is a divisor of a_i, and change powers as following: a_i = (a_i)/(x), a_j = a_j \u22c5 x\n\nSasha is very curious, that's why he wants to calculate the minimum total power the farmer can reach. There are too many machines, and Sasha can't cope with computations, help him!\n\nInput\n\nThe first line contains one integer n (2 \u2264 n \u2264 5 \u22c5 10^4) \u2014 the number of machines.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (1 \u2264 a_i \u2264 100) \u2014 the powers of the machines.\n\nOutput\n\nPrint one integer \u2014 minimum total power.\n\nExamples\n\nInput\n\n\n5\n1 2 3 4 5\n\n\nOutput\n\n\n14\n\n\nInput\n\n\n4\n4 2 4 4\n\n\nOutput\n\n\n14\n\n\nInput\n\n\n5\n2 4 2 3 7\n\n\nOutput\n\n\n18\n\nNote\n\nIn the first example, the farmer can reduce the power of the 4-th machine by 2 times, and increase the power of the 1-st machine by 2 times, then the powers will be: [2, 2, 3, 2, 5].\n\nIn the second example, the farmer can reduce the power of the 3-rd machine by 2 times, and increase the power of the 2-nd machine by 2 times. At the same time, the farmer can leave is be as it is and the total power won't change.\n\nIn the third example, it is optimal to leave it be as it is.",
        "task_name": "1113_B. Sasha and Magnetic Machines",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env python\n\"\"\"\nThis file is part of https://github.com/cheran-senthil/PyRival\nCopyright 2019 Cheran Senthilkumar <hello@cheran.io>\n\n\"\"\"\nfrom __future__ import division, print_function\n\nimport cmath\nimport itertools\nimport math\nimport operator as op\n# import random\nimport sys\nfrom atexit import register\nfrom bisect import bisect_left, bisect_right\n# from collections import Counter, defaultdict, deque\n# from copy import deepcopy\n# from decimal import Decimal\n# from difflib import SequenceMatcher\n# from functools import reduce\n# from heapq import heappop, heappush\nfrom io import BytesIO, FileIO, StringIO\n\nif sys.version_info[0] < 3:\n\n    class dict(dict):\n        \"\"\"dict() -> new empty dictionary\"\"\"\n\n        def items(self):\n            \"\"\"D.items() -> a set-like object providing a view on D's items\"\"\"\n            return dict.iteritems(self)\n\n        def keys(self):\n            \"\"\"D.keys() -> a set-like object providing a view on D's keys\"\"\"\n            return dict.iterkeys(self)\n\n        def values(self):\n            \"\"\"D.values() -> an object providing a view on D's values\"\"\"\n            return dict.itervalues(self)\n\n    input = raw_input\n    range = xrange\n\n    filter = itertools.ifilter\n    map = itertools.imap\n    zip = itertools.izip\n\n\ndef gcd(x, y):\n    \"\"\"greatest common divisor of x and y\"\"\"\n    while y:\n        x, y = y, x % y\n    return x\n\n\nINP_FILE = 0\nOUT_FILE = 1\n\nif sys.version_info[0] < 3:\n    sys.stdin = BytesIO(FileIO(INP_FILE).read())\n    sys.stdout = BytesIO()\n    register(lambda: FileIO(OUT_FILE, 'w').write(sys.stdout.getvalue()))\nelse:\n    sys.stdin = StringIO(FileIO(INP_FILE).read().decode())\n    sys.stdout = StringIO()\n    register(lambda: FileIO(OUT_FILE, 'w').write(sys.stdout.getvalue().encode()))\n\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n\ndef memodict(f):\n    \"\"\" Memoization decorator for a function taking a single argument. \"\"\"\n\n    class memodict(dict):\n        def __missing__(self, key):\n            ret = self[key] = f(key)\n            return ret\n\n    return memodict().__getitem__\n\n\n@memodict\ndef all_factors(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    sa = sum(a)\n    ma = min(a)\n\n    res = sa\n    for i in range(n):\n        if a[i] == ma:\n            continue\n        for fi in all_factors(a[i]):\n            res = min(res, sa - ma - a[i] + (ma * fi) + (a[i] // fi))\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n",
        "correct": true,
        "task_id": "1271",
        "depth": 2
    },
    {
        "description": "A superhero fights with a monster. The battle consists of rounds, each of which lasts exactly n minutes. After a round ends, the next round starts immediately. This is repeated over and over again.\n\nEach round has the same scenario. It is described by a sequence of n numbers: d_1, d_2, ..., d_n (-10^6 \u2264 d_i \u2264 10^6). The i-th element means that monster's hp (hit points) changes by the value d_i during the i-th minute of each round. Formally, if before the i-th minute of a round the monster's hp is h, then after the i-th minute it changes to h := h + d_i.\n\nThe monster's initial hp is H. It means that before the battle the monster has H hit points. Print the first minute after which the monster dies. The monster dies if its hp is less than or equal to 0. Print -1 if the battle continues infinitely.\n\nInput\n\nThe first line contains two integers H and n (1 \u2264 H \u2264 10^{12}, 1 \u2264 n \u2264 2\u22c510^5). The second line contains the sequence of integers d_1, d_2, ..., d_n (-10^6 \u2264 d_i \u2264 10^6), where d_i is the value to change monster's hp in the i-th minute of a round.\n\nOutput\n\nPrint -1 if the superhero can't kill the monster and the battle will last infinitely. Otherwise, print the positive integer k such that k is the first minute after which the monster is dead.\n\nExamples\n\nInput\n\n\n1000 6\n-100 -200 -300 125 77 -4\n\n\nOutput\n\n\n9\n\n\nInput\n\n\n1000000000000 5\n-1 0 0 0 0\n\n\nOutput\n\n\n4999999999996\n\n\nInput\n\n\n10 4\n-3 -6 5 4\n\n\nOutput\n\n\n-1",
        "task_name": "1141_E. Superhero Battle",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "h, n  = map(int, raw_input().split())\nl = map(int, raw_input().split())\n\nmneg = 0\nsom = 0\nneg = 0\n\nfor i in xrange(n):\n    if(l[i] < 0):\n        neg += l[i]\n    else:\n        if(neg < mneg):\n            mneg = neg\n        neg = 0\n    som += l[i]\n\nif(neg < mneg):\n    mneg = neg\n\nif(mneg*-1 > h):\n    li = h\n    for i in xrange(n):\n        li += l[i]\n        if(li <= 0):\n            break\n    print(i+1)\nelif(som < 0):\n    li = h - (h/(som*-1)-1)*(som*-1)\n    for i in xrange(n):\n        li += l[i]\n        if(li <= 0):\n            break\n    print((h/(som*-1)-1)*n+i+1)\nelse:\n    print(\"-1\")",
        "correct": false,
        "task_id": "1272",
        "depth": 1
    },
    {
        "description": "You have given tree consist of n vertices. Select a vertex as root vertex that satisfies the condition below.\n\n  * For all vertices v_{1} and v_{2}, if distance(root, v_{1}) = distance(root, v_{2}) then degree(v_{1}) = degree(v_{2}), where degree means the number of vertices connected to that vertex, and distance means the number of edges between two vertices. \n\n\n\nDetermine and find if there is such root vertex in the tree. If there are multiple answers, find any of them.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^{5}) \u2014 the number of vertices.\n\nEach of the next n-1 lines contains two integers v_{i} and u_{i} (1 \u2264 v_{i} < u_{i} \u2264 n) \u2014 it means there is an edge exist between v_{i} and u_{i}. It is guaranteed that the graph forms tree.\n\nOutput\n\nIf there is such root vertex exists, print any of them. Otherwise, print -1.\n\nExamples\n\nInput\n\n\n7\n1 2\n2 3\n3 4\n4 5\n3 6\n6 7\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n6\n1 3\n2 3\n3 4\n4 5\n4 6\n\n\nOutput\n\n\n-1\n\nNote\n\nThis is the picture for the first example. 1, 5, 7 also can be a valid answer.\n\n<image>\n\nThis is the picture for the second example. You can see that it's impossible to find such root vertex.\n\n<image>",
        "task_name": "1182_D. Complete Mirror",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from collections import*\nn = int(raw_input())\ne = [[] for i in range(n+1)]\nfor i in range(n - 1):\n\tu, v = map(int, raw_input().split())\n\te[u].append(v)\n\te[v].append(u)\ndep = [-1] * (n + 1)\ndep[1] = 0\nq = deque([1])\ncur = 1\nwhile q:\n\tcur = q.popleft()\n\tfor to in e[cur]:\n\t\tif dep[to] == -1:\n\t\t\tdep[to] = dep[cur] + 1\n\t\t\tq.append(to)\ndep = [-1] * (n + 1)\npred = [0] * (n + 1)\ndep[cur] = 0\nq = deque([cur])\nend = cur\nwhile q:\n\tend = q.popleft()\n\tfor to in e[end]:\n\t\tif dep[to] == -1:\n\t\t\tdep[to] = dep[end] + 1\n\t\t\tpred[to] = end\n\t\t\tq.append(to)\ndeg = [-1] * (n + 1)\nbad = False\nfor i in range(1, n + 1):\n\tif deg[dep[i]] == -1:\n\t\tdeg[dep[i]] = len(e[i])\n\telse:\n\t\tif deg[dep[i]] != len(e[i]):\n\t\t\tbad = True\n\t\t\tbreak\nif not bad:\n\tprint(cur)\n\texit()\ncenter = end\nfor i in range(dep[end] // 2):\n\tcenter = pred[center]\ndep = [-1] * (n + 1)\ndep[end] = 0\nq = deque([end])\nwhile q:\n\tcur = q.popleft()\n\tfor to in e[cur]:\n\t\tif dep[to] == -1:\n\t\t\tdep[to] = dep[cur] + 1\n\t\t\tq.append(to)\ndeg = [-1] * (n + 1)\nbad = False\nfor i in range(1, n + 1):\n\tif deg[dep[i]] == -1:\n\t\tdeg[dep[i]] = len(e[i])\n\telse:\n\t\tif deg[dep[i]] != len(e[i]):\n\t\t\tbad = True\n\t\t\tbreak\nif not bad:\n\tprint(end)\n\texit()\ntop = center\ndep = [-1] * (n + 1)\ndep[center] = 0\nq = deque([center])\nwhile q:\n\tcur = q.popleft()\n\tfor to in e[cur]:\n\t\tif dep[to] == -1:\n\t\t\tif len(e[to]) == 2:\n\t\t\t\tdep[to] = dep[cur] + 1\n\t\t\t\tq.append(to)\n\t\t\telif len(e[to]) == 1:\n\t\t\t\ttop = to\n\t\t\t\tq.clear()\n\t\t\t\tbreak\ndeg = [-1] * (n + 1)\nbad = False\nfor i in range(1, n + 1):\n\tif deg[dep[i]] == -1:\n\t\tdeg[dep[i]] = len(e[i])\n\telse:\n\t\tif deg[dep[i]] != len(e[i]):\n\t\t\tbad = True\n\t\t\tbreak\nif not bad:\n\tprint(center)\n\texit()\ndep = [-1] * (n + 1)\ndep[top] = 0\nq = deque([top])\nwhile q:\n\tcur = q.popleft()\n\tfor to in e[cur]:\n\t\tif dep[to] == -1:\n\t\t\tdep[to] = dep[cur] + 1\n\t\t\tq.append(to)\ndeg = [-1] * (n + 1)\nbad = False\nfor i in range(1, n + 1):\n\tif deg[dep[i]] == -1:\n\t\tdeg[dep[i]] = len(e[i])\n\telse:\n\t\tif deg[dep[i]] != len(e[i]):\n\t\t\tbad = True\n\t\t\tbreak\nif not bad:\n\tprint(top)\n\texit()\nprint(-1)",
        "correct": true,
        "task_id": "1273",
        "depth": 2
    },
    {
        "description": "You are organizing a boxing tournament, where n boxers will participate (n is a power of 2), and your friend is one of them. All boxers have different strength from 1 to n, and boxer i wins in the match against boxer j if and only if i is stronger than j.\n\nThe tournament will be organized as follows: n boxers will be divided into pairs; the loser in each pair leaves the tournament, and n/2 winners advance to the next stage, where they are divided into pairs again, and the winners in all pairs advance to the next stage, and so on, until only one boxer remains (who is declared the winner).\n\nYour friend really wants to win the tournament, but he may be not the strongest boxer. To help your friend win the tournament, you may bribe his opponents: if your friend is fighting with a boxer you have bribed, your friend wins even if his strength is lower.\n\nFurthermore, during each stage you distribute the boxers into pairs as you wish.\n\nThe boxer with strength i can be bribed if you pay him a_i dollars. What is the minimum number of dollars you have to spend to make your friend win the tournament, provided that you arrange the boxers into pairs during each stage as you wish?\n\nInput\n\nThe first line contains one integer n (2 \u2264 n \u2264 2^{18}) \u2014 the number of boxers. n is a power of 2.\n\nThe second line contains n integers a_1, a_2, ..., a_n, where a_i is the number of dollars you have to pay if you want to bribe the boxer with strength i. Exactly one of a_i is equal to -1 \u2014 it means that the boxer with strength i is your friend. All other values are in the range [1, 10^9].\n\nOutput\n\nPrint one integer \u2014 the minimum number of dollars you have to pay so your friend wins.\n\nExamples\n\nInput\n\n\n4\n3 9 1 -1\n\n\nOutput\n\n\n0\n\nInput\n\n\n8\n11 -1 13 19 24 7 17 5\n\n\nOutput\n\n\n12\n\nNote\n\nIn the first test case no matter how you will distribute boxers into pairs, your friend is the strongest boxer and anyway wins the tournament.\n\nIn the second test case you can distribute boxers as follows (your friend is number 2):\n\n1 : 2, 8 : 5, 7 : 3, 6 : 4 (boxers 2, 8, 7 and 6 advance to the next stage);\n\n2 : 6, 8 : 7 (boxers 2 and 8 advance to the next stage, you have to bribe the boxer with strength 6);\n\n2 : 8 (you have to bribe the boxer with strength 8);",
        "task_name": "1260_E. Tournament",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function,division\nimport sys#log min est tol\u00e9rable\nle=sys.__stdin__.read().split(\"\\n\")[::-1]\naf=[]\nn=int(le.pop())\ndef loga(m):\n    lo=0\n    p=1\n    while p<=m:\n        p*=2\n        lo+=1\n    return lo-1\nlo=loga(n)\nl=list(map(int,le.pop().split()))\nfor k in range(n):\n    if l[k]==-1:\n        moi=k\n\nli=loga(moi+1)\ns=0\nfor tour in range(lo,li,-1):\n    #print(l[2**tour-1:])\n    mi=min(l[2**tour-1:])\n    l[2**tour-1+l[2**tour-1:].index(mi)]=10**9\n    s+=mi\nprint(s)\n",
        "correct": true,
        "task_id": "1274",
        "depth": 1
    },
    {
        "description": "We are committed to the well being of all participants. Therefore, instead of the problem, we suggest you enjoy a piece of cake.\n\nUh oh. Somebody cut the cake. We told them to wait for you, but they did it anyway. There is still some left, though, if you hurry back. Of course, before you taste the cake, you thought about how the cake was cut.\n\nIt is known that the cake was originally a regular n-sided polygon, each vertex of which had a unique number from 1 to n. The vertices were numbered in random order.\n\nEach piece of the cake is a triangle. The cake was cut into n - 2 pieces as follows: each time one cut was made with a knife (from one vertex to another) such that exactly one triangular piece was separated from the current cake, and the rest continued to be a convex polygon. In other words, each time three consecutive vertices of the polygon were selected and the corresponding triangle was cut off.\n\nA possible process of cutting the cake is presented in the picture below.\n\n<image> Example of 6-sided cake slicing.\n\nYou are given a set of n-2 triangular pieces in random order. The vertices of each piece are given in random order \u2014 clockwise or counterclockwise. Each piece is defined by three numbers \u2014 the numbers of the corresponding n-sided cake vertices.\n\nFor example, for the situation in the picture above, you could be given a set of pieces: [3, 6, 5], [5, 2, 4], [5, 4, 6], [6, 3, 1].\n\nYou are interested in two questions.\n\n  * What was the enumeration of the n-sided cake vertices? \n  * In what order were the pieces cut? \n\n\n\nFormally, you have to find two permutations p_1, p_2, ..., p_n (1 \u2264 p_i \u2264 n) and q_1, q_2, ..., q_{n - 2} (1 \u2264 q_i \u2264 n - 2) such that if the cake vertices are numbered with the numbers p_1, p_2, ..., p_n in order clockwise or counterclockwise, then when cutting pieces of the cake in the order q_1, q_2, ..., q_{n - 2} always cuts off a triangular piece so that the remaining part forms one convex polygon.\n\nFor example, in the picture above the answer permutations could be: p=[2, 4, 6, 1, 3, 5] (or any of its cyclic shifts, or its reversal and after that any cyclic shift) and q=[2, 4, 1, 3].\n\nWrite a program that, based on the given triangular pieces, finds any suitable permutations p and q.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 1000) \u2014 the number of test cases. Then there are t independent sets of input data.\n\nThe first line of each set consists of a single integer n (3 \u2264 n \u2264 10^5) \u2014 the number of vertices in the cake.\n\nThe following n - 2 lines describe the numbers of the pieces vertices: each line consists of three different integers a, b, c (1 \u2264 a, b, c \u2264 n) \u2014 the numbers of the pieces vertices of cake given in random order. The pieces are given in random order.\n\nIt is guaranteed that the answer to each of the tests exists. It is also guaranteed that the sum of n for all test cases does not exceed 10^5.\n\nOutput\n\nPrint 2t lines \u2014 answers to given t test cases in the order in which they are written in the input. Each answer should consist of 2 lines.\n\nIn the first line of an answer on a test case print n distinct numbers p_1, p_2, ..., p_n(1 \u2264 p_i \u2264 n) \u2014 the numbers of the cake vertices in clockwise or counterclockwise order.\n\nIn the second line of an answer on a test case print n - 2 distinct numbers q_1, q_2, ..., q_{n - 2}(1 \u2264 q_i \u2264 n - 2) \u2014 the order of cutting pieces of the cake. The number of a piece of the cake corresponds to its number in the input.\n\nIf there are several answers, print any. It is guaranteed that the answer to each of the tests exists.\n\nExample\n\nInput\n\n\n3\n6\n3 6 5\n5 2 4\n5 4 6\n6 3 1\n6\n2 5 6\n2 5 1\n4 1 2\n1 3 5\n3\n1 2 3\n\n\nOutput\n\n\n1 6 4 2 5 3 \n4 2 3 1 \n1 4 2 6 5 3 \n3 4 2 1 \n1 3 2 \n1 ",
        "task_name": "1282_E. The Cake Is a Lie",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin, stdout\nfrom collections import defaultdict\nfrom itertools import repeat\ndef solve():\n    n = int(stdin.readline())\n    a = [map(int, stdin.readline().split()) for _ in xrange(n - 2)]\n    s = defaultdict(set)\n    for i, t in enumerate(a):\n        x, y, z = t\n        if x < y:\n            s[x,y].add(i)\n        else:\n            s[y,x].add(i)\n        if y < z:\n            s[y,z].add(i)\n        else:\n            s[z,y].add(i)\n        if x < z:\n            s[x,z].add(i)\n        else:\n            s[z,x].add(i)\n    con = [[] for _ in xrange(n + 1)]\n    c = [3] * (n - 2)\n    st = []\n    po = st.pop\n    pu = st.append\n    for k, v in s.viewitems():\n        if len(v) == 1:\n            i = v.pop()\n            c[i] -= 1\n            if c[i] == 1:\n                pu(i)\n            x, y = k\n            con[y].append(x)\n            con[x].append(y)\n    q = []\n    while st:\n        i = po()\n        if c[i] == 1:\n            x, y, z = a[i]\n            if x < y and i in s[x,y]:\n                k = x, y\n                q.append(z)\n            elif x > y and i in s[y,x]:\n                k = y, x\n                q.append(z)\n            elif y < z and i in s[y,z]:\n                k = y, z\n                q.append(x)\n            elif y > z and i in s[z,y]:\n                k = z, y\n                q.append(x)\n            elif x < z and i in s[x,z]:\n                k = x, z\n                q.append(y)\n            else:\n                k = z, x\n                q.append(y)\n            c[i] -= 1\n            s[k].remove(i)\n            j = s[k].pop()\n            c[j] -= 1\n            if c[j] == 1:\n                pu(j)\n        else:\n            x, y, z = a[i]\n            if x not in q:\n                q.append(x)\n            elif y not in q:\n                q.append(y)\n            else:\n                q.append(z)\n    p = []\n    x = 1\n    d = [0] * (n + 1)\n    for i in xrange(n):\n        d[x] = 1\n        p.append(x)\n        for y in con[x]:\n            if not d[y]:\n                x = y\n                break\n    stdout.write(' '.join(map(str, p)))\n    stdout.write('\\n')\n    stdout.write(' '.join(map(str, q)))\n    stdout.write('\\n')\n\nT = int(stdin.readline())\nfor _ in xrange(T):\n    solve()\n",
        "correct": false,
        "task_id": "1275",
        "depth": 2
    },
    {
        "description": "Captain Fint is involved in another treasure hunt, but have found only one strange problem. The problem may be connected to the treasure's location or may not. That's why captain Flint decided to leave the solving the problem to his crew and offered an absurdly high reward: one day off. The problem itself sounds like this...\n\nThere are two arrays a and b of length n. Initially, an ans is equal to 0 and the following operation is defined: \n\n  1. Choose position i (1 \u2264 i \u2264 n); \n  2. Add a_i to ans; \n  3. If b_i \u2260 -1 then add a_i to a_{b_i}. \n\n\n\nWhat is the maximum ans you can get by performing the operation on each i (1 \u2264 i \u2264 n) exactly once?\n\nUncle Bogdan is eager to get the reward, so he is asking your help to find the optimal order of positions to perform the operation on them.\n\nInput\n\nThe first line contains the integer n (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the length of arrays a and b.\n\nThe second line contains n integers a_1, a_2, \u2026, a_n (\u221210^6 \u2264 a_i \u2264 10^6).\n\nThe third line contains n integers b_1, b_2, \u2026, b_n (1 \u2264 b_i \u2264 n or b_i = -1).\n\nAdditional constraint: it's guaranteed that for any i (1 \u2264 i \u2264 n) the sequence b_i, b_{b_i}, b_{b_{b_i}}, \u2026 is not cyclic, in other words it will always end with -1.\n\nOutput\n\nIn the first line, print the maximum ans you can get.\n\nIn the second line, print the order of operations: n different integers p_1, p_2, \u2026, p_n (1 \u2264 p_i \u2264 n). The p_i is the position which should be chosen at the i-th step. If there are multiple orders, print any of them.\n\nExamples\n\nInput\n\n\n3\n1 2 3\n2 3 -1\n\n\nOutput\n\n\n10\n1 2 3 \n\n\nInput\n\n\n2\n-1 100\n2 -1\n\n\nOutput\n\n\n99\n2 1 \n\n\nInput\n\n\n10\n-10 -1 2 2 5 -2 -3 -4 2 -6\n-1 -1 2 2 -1 5 5 7 7 9\n\n\nOutput\n\n\n-9\n3 5 6 1 9 4 10 7 8 2",
        "task_name": "1388_D. Captain Flint and Treasure",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "\"\"\"\n// Author : snape_here - Susanta Mukherjee\n     \n \"\"\"\n \nfrom __future__ import division, print_function\n \nimport os,sys\nfrom io import BytesIO, IOBase\n \nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n \ndef ii(): return int(input())\ndef fi(): return float(input())\ndef si(): return input()\ndef msi(): return map(str,input().split())\ndef mi(): return map(int,input().split())\ndef li(): return list(mi())\n \n \ndef read():\n    sys.stdin = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n \ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef lcm(x, y):\n    return (x*y)//(gcd(x,y))\n\nmod=1000000007 \n\ndef modInverse(b,m): \n    g = gcd(b, m)  \n    if (g != 1):         \n        return -1\n    else:          \n        return pow(b, m - 2, m) \n\ndef modu(a,b,m): \n\n    a = a % m \n    inv = modInverse(b,m) \n    if(inv == -1): \n        return -999999999\n    else: \n        return (inv*a)%m\n\nfrom math import log,sqrt,factorial,cos,tan,sin,radians,ceil,floor\n\nimport bisect\n\nfrom decimal import *\n\ngetcontext().prec = 25\n\nabc=\"abcdefghijklmnopqrstuvwxyz\"\n\npi=3.141592653589793238\n\ndef main():\n\n    n=ii()\n    a=li()\n    b=li()\n    l=[0]*n\n    for i in range(n):\n        if b[i]>0:\n            l[b[i]-1]+=a[i]\n    #print(*l)\n    l1=[]\n    for i in range(n):\n        l1.append([l[i],i])\n    l1.sort()\n    #print(*l1)\n    ans=0 \n    l2=[]\n    for i in range(n):\n        l2.append(l1[i][1]+1)\n        if b[l1[i][1]]>0:\n            ans+=a[l1[i][1]]\n        a[l1[i][1]]+=l1[i][0]\n        #print(ans)\n    print(ans)\n    print(*l2)\n\n\n# region fastio\n \nBUFSIZE = 8192\n \n \nclass FastIO(IOBase):\n    newlines = 0\n \n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n \n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n \n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n \n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n \n \ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n \n \nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n \ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n \n# endregion\n \n \nif __name__ == \"__main__\":\n    #read()\n    main()",
        "correct": false,
        "task_id": "1277",
        "depth": 1
    },
    {
        "description": "You are given four integers a, b, x and y. Initially, a \u2265 x and b \u2265 y. You can do the following operation no more than n times:\n\n  * Choose either a or b and decrease it by one. However, as a result of this operation, value of a cannot become less than x, and value of b cannot become less than y. \n\n\n\nYour task is to find the minimum possible product of a and b (a \u22c5 b) you can achieve by applying the given operation no more than n times.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 \u2264 t \u2264 2 \u22c5 10^4) \u2014 the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains five integers a, b, x, y and n (1 \u2264 a, b, x, y, n \u2264 10^9). Additional constraint on the input: a \u2265 x and b \u2265 y always holds.\n\nOutput\n\nFor each test case, print one integer: the minimum possible product of a and b (a \u22c5 b) you can achieve by applying the given operation no more than n times.\n\nExample\n\nInput\n\n\n7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n\n\nOutput\n\n\n70\n77\n177177\n999999999000000000\n999999999\n55\n10\n\nNote\n\nIn the first test case of the example, you need to decrease b three times and obtain 10 \u22c5 7 = 70.\n\nIn the second test case of the example, you need to decrease a one time, b one time and obtain 11 \u22c5 7 = 77.\n\nIn the sixth test case of the example, you need to decrease a five times and obtain 5 \u22c5 11 = 55.\n\nIn the seventh test case of the example, you need to decrease b ten times and obtain 10 \u22c5 1 = 10.",
        "task_name": "1409_B. Minimum Product",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# cook your dish here\n\n# Name: Rhythem Jain\n# Date: 01.09.2020\n\n\nfrom __future__ import division, print_function\nimport os,sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef ii():  return int(input())\ndef si():  return input()\ndef mi():  return map(int,input().strip().split())\ndef msi(): return map(str,input().strip().split())\ndef li():  return list(mi())\n\ndef dmain():\n    sys.setrecursionlimit(1000000)\n    threading.stack_size(1024000)\n    thread = threading.Thread(target=main)\n    thread.start()\n    \n#from collections import deque, Counter, OrderedDict,defaultdict\n#from heapq import nsmallest, nlargest, heapify,heappop ,heappush, heapreplace\n#from math import log,sqrt,factorial,cos,tan,sin,radians\n#from bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n#from decimal import *\n#import threading\n#from itertools import permutations\n# Copy 2D list  m = [x[:] for x in mark] .. Avoid Using Deepcopy\n\nabc='abcdefghijklmnopqrstuvwxyz'\nabd={'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod=1000000007\n#mod=998244353\nvow=['a','e','i','o','u','A','E','I','O','U']\ndx,dy=[-1,1,0,0],[0,0,1,-1]\ndef getKey(item): return item[1] \ndef sort2(l):return sorted(l, key=getKey,reverse=True)\ndef d2(n,m,num):return [[num for x in range(m)] for y in range(n)]\ndef isPowerOfTwo (x): return (x and (not(x & (x - 1))) )\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\ndef ntl(n):return [int(i) for i in str(n)]\ndef ncr(n,r): return factorial(n)//(factorial(r)*factorial(max(n-r,1)))\n\ndef ceil(x,y):\n    if x%y==0:\n        return x//y\n    else:\n        return x//y+1\n\ndef powerMod(x,y,p):\n    res = 1\n    x %= p\n    while y > 0:\n        if y&1:\n            res = (res*x)%p\n        y = y>>1\n        x = (x*x)%p\n    return res\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n    \ndef isPrime(n) : # Check Prime Number or not \n    if (n <= 1) : return False\n    if (n <= 3) : return True\n    if (n % 2 == 0 or n % 3 == 0) : return False\n    i = 5\n    while(i * i <= n) : \n        if (n % i == 0 or n % (i + 2) == 0) : \n            return False\n        i = i + 6\n    return True\n\ndef read():\n    sys.stdin  = open('input.txt', 'r')  \n    sys.stdout = open('output.txt', 'w') \n\ndef main():\n    for _ in range(ii()):\n        a,b,x,y,n=mi()\n        if (a-x)+(b-y)<=n:\n            print(int(x*y))\n        else:\n            a1=a-x\n            b1=b-y\n            if min(a1,b1)>=n:\n                # print(\"HOO\")\n                if a<b:\n                    print((a-n)*b)\n                else:\n                    print((b-n)*a)\n            elif max(a1,b1)==n:\n                if a1>b1:\n                    print(x*b)\n                else:\n                    print(y*a)\n            elif max(a1,b1)>n:\n                if a1<b1:\n                    a2=x*(b-(n-a1))\n                    b2=a*(b-n)\n                    print(min(a2,b2))\n                else:\n                    a2=y*(a-(n-b1))\n                    b2=b*(a-n)\n                    print(min(a2,b2))\n            else:\n                if a1<b1:\n                    a2=x*(b-(n-a1))\n                    b2=a*(b-n)\n                    print(max(a2,b2))\n                else:\n                    a2=x*(a-(n-b1))\n                    b2=b*(a-n)\n                    print(max(a2,b2))\n\n\n# region fastio\n# template taken from https://github.com/cheran-senthil/PyRival/blob/master/templates/template.py\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\n\nif __name__ == \"__main__\":\n    #read()\n    main()\n    #dmain()\n\n# Comment Read()\n",
        "correct": false,
        "task_id": "1278",
        "depth": 1
    },
    {
        "description": "Gildong has an interesting machine that has an array a with n integers. The machine supports two kinds of operations:\n\n  1. Increase all elements of a suffix of the array by 1. \n  2. Decrease all elements of a suffix of the array by 1. \n\n\n\nA suffix is a subsegment (contiguous elements) of the array that contains a_n. In other words, for all i where a_i is included in the subsegment, all a_j's where i < j \u2264 n must also be included in the subsegment.\n\nGildong wants to make all elements of a equal \u2014 he will always do so using the minimum number of operations necessary. To make his life even easier, before Gildong starts using the machine, you have the option of changing one of the integers in the array to any other integer. You are allowed to leave the array unchanged. You want to minimize the number of operations Gildong performs. With your help, what is the minimum number of operations Gildong will perform?\n\nNote that even if you change one of the integers in the array, you should not count that as one of the operations because Gildong did not perform it.\n\nInput\n\nEach test contains one or more test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 1000).\n\nEach test case contains two lines. The first line of each test case consists of an integer n (2 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of elements of the array a.\n\nThe second line of each test case contains n integers. The i-th integer is a_i (-5 \u22c5 10^8 \u2264 a_i \u2264 5 \u22c5 10^8).\n\nIt is guaranteed that the sum of n in all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print one integer \u2014 the minimum number of operations Gildong has to perform in order to make all elements of the array equal.\n\nExample\n\nInput\n\n\n7\n2\n1 1\n3\n-1 0 2\n4\n99 96 97 95\n4\n-3 -5 -2 1\n6\n1 4 3 2 4 1\n5\n5 0 0 0 5\n9\n-367741579 319422997 -415264583 -125558838 -300860379 420848004 294512916 -383235489 425814447\n\n\nOutput\n\n\n0\n1\n3\n4\n6\n5\n2847372102\n\nNote\n\nIn the first case, all elements of the array are already equal. Therefore, we do not change any integer and Gildong will perform zero operations.\n\nIn the second case, we can set a_3 to be 0, so that the array becomes [-1,0,0]. Now Gildong can use the 2-nd operation once on the suffix starting at a_2, which means a_2 and a_3 are decreased by 1, making all elements of the array -1.\n\nIn the third case, we can set a_1 to 96, so that the array becomes [96,96,97,95]. Now Gildong needs to: \n\n  * Use the 2-nd operation on the suffix starting at a_3 once, making the array [96,96,96,94]. \n  * Use the 1-st operation on the suffix starting at a_4 2 times, making the array [96,96,96,96]. \n\n\n\nIn the fourth case, we can change the array into [-3,-3,-2,1]. Now Gildong needs to: \n\n  * Use the 2-nd operation on the suffix starting at a_4 3 times, making the array [-3,-3,-2,-2]. \n  * Use the 2-nd operation on the suffix starting at a_3 once, making the array [-3,-3,-3,-3]. ",
        "task_name": "1453_B. Suffix Operations",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/env pypy\nfrom __future__ import division, print_function\nfrom collections import defaultdict, Counter, deque\nfrom future_builtins import ascii, filter, hex, map, oct, zip\nfrom itertools import imap as map, izip as zip, permutations, combinations, combinations_with_replacement,product\nfrom __builtin__ import xrange as range\nfrom math import ceil, factorial, log,tan,pi,cos,sin,radians\nfrom _continuation import continulet\nfrom cStringIO import StringIO\nfrom io import IOBase\nimport __pypy__\nfrom bisect import bisect, insort, bisect_left, bisect_right\nfrom fractions import Fraction\nfrom functools import reduce\nfrom decimal import *\nimport copy\nimport string\nimport sys\nimport os\nimport re\ninf = float('inf')\nmod = int(1e9) + 7\nmod_ = 998244353\n\ndef factors(n):\n    from functools import reduce\n    return set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n\ndef sieve(n):\n    arr=[True]*n\n    for i in range(2,int(n**0.5)+1):\n        if arr[i]:\n            for j in range(i*i,n,i):\n                arr[j]=False\n    primes=[]\n    for i in range(n):\n        if arr[i]:\n            primes.append(i)\n\n    return primes\n\n\n\ndef main():\n    def cost(arr):\n        cst=0\n        for i in range(len(arr)-1,0,-1):\n            cst+=abs(arr[i]-arr[i-1])\n        return cst\n    for _ in range(int(input())):\n        n=int(input())\n        arr=list(map(int,input().split()))\n        temp=list(arr)\n        temp[0]=temp[1]\n        cost1=cost(temp)\n        temp=list(arr)\n        temp[1]=temp[0]\n        cost1=min(cost1,cost(temp))\n        temp=list(arr)\n        temp[-2]=temp[-1]\n        cost1=min(cost1,cost(temp))\n        temp=list(arr)\n        temp[-1]=temp[-2]\n        cost1=min(cost1,cost(temp))\n        print(cost1)\n# region fastio\n\nBUFSIZE = 8192\n\nclass FastI(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = StringIO()\n        self.newlines = 0\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(\"\\n\") + (not b)\n            ptr = self._buffer.tell()\n            self._buffer.seek(0, 2), self._buffer.write(b), self._buffer.seek(ptr)\n        self.newlines -= 1\n        return self._buffer.readline()\n\n\nclass FastO(IOBase):\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self._buffer = __pypy__.builders.StringBuilder()\n        self.write = lambda s: self._buffer.append(s)\n\n    def flush(self):\n        os.write(self._fd, self._buffer.build())\n        self._buffer = __pypy__.builders.StringBuilder()\n\n\ndef print(*args, **kwargs):\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\nsys.stdin, sys.stdout = FastI(sys.stdin), FastO(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()",
        "correct": false,
        "task_id": "1279",
        "depth": 2
    },
    {
        "description": "The only difference between the easy and hard versions is that the given string s in the easy version is initially a palindrome, this condition is not always true for the hard version.\n\nA palindrome is a string that reads the same left to right and right to left. For example, \"101101\" is a palindrome, while \"0101\" is not.\n\nAlice and Bob are playing a game on a string s of length n consisting of the characters '0' and '1'. Both players take alternate turns with Alice going first.\n\nIn each turn, the player can perform one of the following operations: \n\n  1. Choose any i (1 \u2264 i \u2264 n), where s[i] = '0' and change s[i] to '1'. Pay 1 dollar. \n  2. Reverse the whole string, pay 0 dollars. This operation is only allowed if the string is currently not a palindrome, and the last operation was not reverse. That is, if Alice reverses the string, then Bob can't reverse in the next move, and vice versa. \n\n\n\nReversing a string means reordering its letters from the last to the first. For example, \"01001\" becomes \"10010\" after reversing.\n\nThe game ends when every character of string becomes '1'. The player who spends minimum dollars till this point wins the game and it is a draw if both spend equal dollars. If both players play optimally, output whether Alice wins, Bob wins, or if it is a draw.\n\nInput\n\nThe first line contains a single integer t (1 \u2264 t \u2264 10^3). Then t test cases follow.\n\nThe first line of each test case contains a single integer n (1 \u2264 n \u2264 10^3).\n\nThe second line of each test case contains the string s of length n, consisting of the characters '0' and '1'. It is guaranteed that the string s contains at least one '0'.\n\nNote that there is no limit on the sum of n over test cases.\n\nOutput\n\nFor each test case print a single word in a new line: \n\n  * \"ALICE\", if Alice will win the game, \n  * \"BOB\", if Bob will win the game, \n  * \"DRAW\", if the game ends in a draw. \n\nExample\n\nInput\n\n\n3\n3\n110\n2\n00\n4\n1010\n\n\nOutput\n\n\nALICE\nBOB\nALICE\n\nNote\n\nIn the first test case of example, \n\n  * in the 1-st move, Alice will use the 2-nd operation to reverse the string, since doing the 1-st operation will result in her loss anyway. This also forces Bob to use the 1-st operation. \n  * in the 2-nd move, Bob has to perform the 1-st operation, since the 2-nd operation cannot be performed twice in a row. All characters of the string are '1', game over. \n\nAlice spends 0 dollars while Bob spends 1 dollar. Hence, Alice wins.\n\nIn the second test case of example, \n\n  * in the 1-st move Alice has to perform the 1-st operation, since the string is currently a palindrome. \n  * in the 2-nd move Bob reverses the string. \n  * in the 3-rd move Alice again has to perform the 1-st operation. All characters of the string are '1', game over. \n\nAlice spends 2 dollars while Bob spends 0 dollars. Hence, Bob wins.",
        "task_name": "1527_B2. Palindrome Game (hard version)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "# Enter your code here. Read input from STDIN. Print output to STDOUT# ===============================================================================================\n# importing some useful libraries.\nfrom __future__ import division, print_function\nfrom fractions import Fraction\nimport sys\nimport os\nfrom io import BytesIO, IOBase\nfrom itertools import *\nimport bisect\nfrom heapq import *\nfrom math import ceil, floor\nfrom copy import *\nfrom collections import deque, defaultdict\nfrom collections import Counter as counter  # Counter(list)  return a dict with {key: count}\nfrom itertools import combinations  # if a = [1,2,3] then print(list(comb(a,2))) -----> [(1, 2), (1, 3), (2, 3)]\nfrom itertools import permutations as permutate\nfrom bisect import bisect_left as bl\nfrom operator import *\n# If the element is already present in the list,\n\n# the left most position where element has to be inserted is returned.\nfrom bisect import bisect_right as br\nfrom bisect import bisect\n\n# If the element is already present in the list,\n# the right most position where element has to be inserted is returned\n\n# ==============================================================================================\n# fast I/O region\n\nBUFSIZE = 8192\nfrom sys import stderr\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"A\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for A in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(A))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\n# inp = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# ===============================================================================================\n### START ITERATE RECURSION ###\nfrom types import GeneratorType\n\n\ndef iterative(f, stack=[]):\n    def wrapped_func(*args, **kwargs):\n        if stack: return f(*args, **kwargs)\n        to = f(*args, **kwargs)\n        while True:\n            if type(to) is GeneratorType:\n                stack.append(to)\n                to = next(to)\n                continue\n            stack.pop()\n            if not stack: break\n            to = stack[-1].send(to)\n        return to\n\n    return wrapped_func\n\n\n#### END ITERATE RECURSION ####\n###########################\n# Sorted list\nclass SortedList:\n    def __init__(self, iterable=[], _load=200):\n        \"\"\"Initialize sorted list instance.\"\"\"\n        values = sorted(iterable)\n        self._len = _len = len(values)\n        self._load = _load\n        self._lists = _lists = [values[start:start + _load] for start in range(0, _len, _load)]\n        self._list_lens = [len(_list) for _list in _lists]\n        self._mins = [_list[0] for _list in _lists]\n        self._fen_tree = []\n        self._rebuild = True\n\n    def _fen_build(self):\n        \"\"\"Build a fenwick tree instance.\"\"\"\n        self._fen_tree[:] = self._list_lens\n        _fen_tree = self._fen_tree\n        for start in range(len(_fen_tree)):\n            if start | start + 1 < len(_fen_tree):\n                _fen_tree[start | start + 1] += _fen_tree[start]\n        self._rebuild = False\n\n    def _fen_update(self, index, value):\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\n        if not self._rebuild:\n            _fen_tree = self._fen_tree\n            while index < len(_fen_tree):\n                _fen_tree[index] += value\n                index |= index + 1\n\n    def _fen_query(self, end):\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        A = 0\n        while end:\n            A += _fen_tree[end - 1]\n            end &= end - 1\n        return A\n\n    def _fen_findkth(self, k):\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\n        _list_lens = self._list_lens\n        if k < _list_lens[0]:\n            return 0, k\n        if k >= self._len - _list_lens[-1]:\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\n        if self._rebuild:\n            self._fen_build()\n\n        _fen_tree = self._fen_tree\n        idx = -1\n        for d in reversed(range(len(_fen_tree).bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\n                idx = right_idx\n                k -= _fen_tree[idx]\n        return idx + 1, k\n\n    def _delete(self, pos, idx):\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len -= 1\n        self._fen_update(pos, -1)\n        del _lists[pos][idx]\n        _list_lens[pos] -= 1\n\n        if _list_lens[pos]:\n            _mins[pos] = _lists[pos][0]\n        else:\n            del _lists[pos]\n            del _list_lens[pos]\n            del _mins[pos]\n            self._rebuild = True\n\n    def _loc_left(self, value):\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        lo, pos = -1, len(_lists) - 1\n        while lo + 1 < pos:\n            mi = (lo + pos) >> 1\n            if value <= _mins[mi]:\n                pos = mi\n            else:\n                lo = mi\n\n        if pos and value <= _lists[pos - 1][-1]:\n            pos -= 1\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value <= _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def _loc_right(self, value):\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\n        if not self._len:\n            return 0, 0\n\n        _lists = self._lists\n        _mins = self._mins\n\n        pos, hi = 0, len(_lists)\n        while pos + 1 < hi:\n            mi = (pos + hi) >> 1\n            if value < _mins[mi]:\n                hi = mi\n            else:\n                pos = mi\n\n        _list = _lists[pos]\n        lo, idx = -1, len(_list)\n        while lo + 1 < idx:\n            mi = (lo + idx) >> 1\n            if value < _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n\n        return pos, idx\n\n    def add(self, value):\n        \"\"\"Add `value` to sorted list.\"\"\"\n        _load = self._load\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n\n        self._len += 1\n        if _lists:\n            pos, idx = self._loc_right(value)\n            self._fen_update(pos, 1)\n            _list = _lists[pos]\n            _list.insert(idx, value)\n            _list_lens[pos] += 1\n            _mins[pos] = _list[0]\n            if _load + _load < len(_list):\n                _lists.insert(pos + 1, _list[_load:])\n                _list_lens.insert(pos + 1, len(_list) - _load)\n                _mins.insert(pos + 1, _list[_load])\n                _list_lens[pos] = _load\n                del _list[_load:]\n                self._rebuild = True\n        else:\n            _lists.append([value])\n            _mins.append(value)\n            _list_lens.append(1)\n            self._rebuild = True\n\n    def discard(self, value):\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_right(value)\n            if idx and _lists[pos][idx - 1] == value:\n                self._delete(pos, idx - 1)\n\n    def remove(self, value):\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\n        _len = self._len\n        self.discard(value)\n        if _len == self._len:\n            raise ValueError('{0!r} not in list'.format(value))\n\n    def pop(self, index=-1):\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        value = self._lists[pos][idx]\n        self._delete(pos, idx)\n        return value\n\n    def bisect_left(self, value):\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_left(value)\n        return self._fen_query(pos) + idx\n\n    def bisect_right(self, value):\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\n        pos, idx = self._loc_right(value)\n        return self._fen_query(pos) + idx\n\n    def count(self, value):\n        \"\"\"Return number of ofinansurrences of `value` in the sorted list.\"\"\"\n        return self.bisect_right(value) - self.bisect_left(value)\n\n    def __len__(self):\n        \"\"\"Return the size of the sorted list.\"\"\"\n        return self._len\n\n    def __getitem__(self, index):\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        return self._lists[pos][idx]\n\n    def __delitem__(self, index):\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\n        self._delete(pos, idx)\n\n    def __contains__(self, value):\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\n        _lists = self._lists\n        if _lists:\n            pos, idx = self._loc_left(value)\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\n        return False\n\n    def __iter__(self):\n        \"\"\"Return an iterator over the sorted list.\"\"\"\n        return (value for _list in self._lists for value in _list)\n\n    def __reversed__(self):\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\n\n    def __repr__(self):\n        \"\"\"Return string representation of sorted list.\"\"\"\n        return 'SortedList({0})'.format(list(self))\n\n\n# ===============================================================================================\n# some shortcuts\n\nmod = 1000000007\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\ndef pow(A, B, p):\n    res = 1  # Initialize result\n    A = A % p  # Update A if it is more , than or equal to p\n    if (A == 0):\n        return 0\n    while (B > 0):\n        if ((B & 1) == 1):  # If B is odd, multiply, A with result\n            res = (res * A) % p\n\n        B = B >> 1  # B = B/2\n        A = (A * A) % p\n    return res\n\n\nfrom functools import reduce\n\n\ndef numberOfSetBits(n):\n    n = (n & 0x5555555555555555) + ((n & 0xAAAAAAAAAAAAAAAA) >> 1)\n    n = (n & 0x3333333333333333) + ((n & 0xCCCCCCCCCCCCCCCC) >> 2)\n    n = (n & 0x0F0F0F0F0F0F0F0F) + ((n & 0xF0F0F0F0F0F0F0F0) >> 4)\n    n = (n & 0x00FF00FF00FF00FF) + ((n & 0xFF00FF00FF00FF00) >> 8)\n    n = (n & 0x0000FFFF0000FFFF) + ((n & 0xFFFF0000FFFF0000) >> 16)\n    n = (n & 0x00000000FFFFFFFF) + ((n & 0xFFFFFFFF00000000) >> 32)  # This last & isn't strictly necessary.\n    return n\n\n\ndef factors(n):\n    return set(reduce(list.__add__,\n                      ([start, n // start] for start in range(1, int(n ** 0.5) + 1) if n % start == 0)))\n\n\nclass MergeFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.num_sets = n\n        # self.lista = [[_] for _ in range(n)]\n\n    def find(self, a):\n        to_update = []\n        while a != self.parent[a]:\n            to_update.append(a)\n            a = self.parent[a]\n        for b in to_update:\n            self.parent[b] = a\n        return self.parent[a]\n\n    def merge(self, a, b):\n        a = self.find(a)\n        b = self.find(b)\n        if a == b:\n            return\n        if self.size[a] < self.size[b]:\n            a, b = b, a\n        self.num_sets -= 1\n        self.parent[b] = a\n        self.size[a] += self.size[b]\n        # self.lista[a] += self.lista[b]\n        # self.lista[b] = []\n\n    def set_size(self, a):\n        return self.size[self.find(a)]\n\n    def __len__(self):\n        return self.num_sets\n\n\ndef gcd(a, b):\n    if a == b: return a\n    while b > 0: a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return abs((a // gcd(a, b)) * b)\n\n\ninf = float(\"inf\")\n\n##############Find sum of product of subsets of size k in a array\n\n\n# ar=[0,1,2,3]\n# k=3\n# n=len(ar)-1\n# dp=[0]*(n+1)\n# dp[0]=1\n# for pos in range(1,n+1):\n#     dp[pos]=0\n#     l=max(1,k+pos-n-1)\n#     for j in range(min(pos,k),l-1,-1):\n#         dp[j]=dp[j]+ar[pos]*dp[j-1]\n# print(dp[k])\n\n\n##two pointer method\n\n\n# l=0\n# for r in range(n):\n#     add(r)\n#     while(not ok(l,r)):#l,r included\n#         remove(l)\n#         l+=1\n#     #[l,r] is valid\n#     if(ok()):\n#         do()\n\n\n# #==========================\n\n\n# r=-1\n# for l in range(n):\n#     while (r + 1 < l):\n#         r=l-1\n#         reset state\n#\n#\n#\n#     while(r+1<n and  ok_to_include_r+1()):\n#         add(r)\n#         r+=1\n#     #[l,r) is valid\n#     if(ok()):\n#         do()\n#     remove(l)\n\n\n# #############################\n\n\n# discrete binary search\n# minimise:\n# def search(l,r):\n#     ans=inf\n#     while(l<=r):\n#         mid=(r-l)//2 + l\n#         if(check(mid)):\n#             ans=min(ans,mid)\n#             r=mid-1\n#         else:\n#             l=mid+1\n#\n#     return ans\n\n# maximise:\n# def search(l,r):\n#\n#     ans=-1\n#     while(l<=r):\n#         mid=l+(r-l)//2\n#         if(check(mid)):\n#             ans=max(ans,mid)\n#             l=mid+1\n#         else:\n#             r=mid-1\n#\n#     return ans\n\n\n# =========================================================================================\nfrom collections import defaultdict\n\n\n# #\n# to find factorial and ncr\n# tot = 40\n# mod = 10**9 +7\n# fac = [1, 1]\n# finv = [1, 1]\n# inv = [0, 1]\n#\n# for start in range(2, tot + 1):\n#     fac.append((fac[-1] * start) % mod)\n#     inv.append(mod - (inv[mod % start] * (mod // start) % mod))\n#     finv.append(finv[-1] * inv[-1] % mod)\n#\n#\n# def comb(n, r):\n#     if(r==0 or r==n):return 1\n#     if n < r:\n#         return 0\n#     else:\n#         return fac[n] * (finv[r] * finv[n - r] % mod) % mod\n#\n#\n# from functools import lru_cache\n# p=3\n# def ncr_small_mod_p(n,r):\n#     ans=1\n#     while(n>0):\n#         x=n%p\n#         y=r%p\n#         n//=p\n#         r//=p\n#         ans*=comb(x,y)\n#         ans%=p\n#     return ans\n\n\n#\n\ndef inp(): return sys.stdin.readline().rstrip(\"\\r\\n\")  # for fast input\n\n\ndef N():\n    return int(inp())\n\n\ndef out(var): sys.stdout.write(str(var))  # for fast output, always take string\n\n\ndef lis(): return list(map(int, inp().split()))\n\n\ndef stringlis(): return list(map(str, inp().split()))\n\n\ndef sep(): return map(int, inp().split())\n\n\ndef strsep(): return map(str, inp().split())\n\n\ndef fsep(): return map(float, inp().split())\n\n\ndef nextline(): out(\"\\n\")  # as stdout.write always print sring.\n\n\ndef arr1d(n, v):\n    return [v] * n\n\n\ndef arr2d(n, m, v):\n    return [[v] * m for _ in range(n)]\n\n\ndef arr3d(n, m, p, v):\n    return [[[v] * p for _ in range(m)] for sta in range(n)]\n\n\ndef ceil(a, b):\n    return (a + b - 1) // b\n\n\n# co-ordinate compression\n# ma={s:idx for idx,s in enumerate(sorted(set(l+r)))}\n\n# mxn=100005\n# lrg=[0]*mxn\n# for start in range(2,mxn-3):\n#     if (lrg[start]==0):\n#         for j in range(start,mxn-3,start):\n#             lrg[j]=start\n\ntest_count = 1\n\n\ndef testcase(t):\n    global test_count\n    for p in range(t):\n        global test_count\n        # print(\"Case #{}:\".format(test_count), end=\" \")\n        solve()\n        test_count += 1\n\n\ndef solve():\n    n=N()\n    s=inp()\n    ar1=[]\n    ar2=[]\n    z1=[]\n    z2=[]\n    z=[]\n    solo=[]\n    for i in range(n//2):\n        j=n-1-i\n        if(s[i]!=s[j]):\n            ar1.append(s[i])\n            ar2.append(s[j])\n            continue\n        if(s[i]==\"0\"):\n            z1.append(\"0\")\n            z2.append(\"0\")\n    if(n%2):\n        solo.append(s[n//2])\n    ar=deque(ar1+ar2[::-1])\n    if(z1):\n        z=[\"0\",\"0\"]\n    if(len(ar)==0 ):\n        if(len(z)==0):\n            if(len(solo)==0):\n                print(\"DRAW\")\n                return\n            else:\n                if(solo[0]=='0'):\n                    print(\"BOB\")\n                else:\n                    print(\"DRAW\")\n        else:\n            if (len(solo) == 0):\n                print(\"BOB\")\n                return\n            else:\n                if (solo[0] == '0'):\n                    print(\"ALICE\")\n                else:\n                    print(\"BOB\")\n    elif(len(ar)==2):\n        if (len(z) == 0):\n            if (len(solo) == 0):\n                print(\"ALICE\")\n                return\n            else:\n                if (solo[0] == '0'):\n                    print(\"DRAW\")\n                else:\n                    print(\"ALICE\")\n\n        else:\n            if (len(solo) == 0):\n                print(\"ALICE\")\n                return\n            else:\n                if (solo[0] == '0'):\n                    print(\"ALICE\")\n                else:\n                    print(\"ALICE\")\n    else:\n        if (len(z) == 0):\n            if (len(solo) == 0):\n                print(\"ALICE\")\n                return\n            else:\n                if (solo[0] == '0'):\n                    print(\"ALICE\")\n                else:\n                    print(\"ALICE\")\n\n        else:\n            if (len(solo) == 0):\n                print(\"ALICE\")\n                return\n            else:\n                if (solo[0] == '0'):\n                    print(\"ALICE\")\n                else:\n                    print(\"ALICE\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#solve()\ntestcase(N())\n",
        "correct": true,
        "task_id": "1280",
        "depth": 1
    },
    {
        "description": "Polycarpus has a hobby \u2014 he develops an unusual social network. His work is almost completed, and there is only one more module to implement \u2014 the module which determines friends. Oh yes, in this social network one won't have to add friends manually! Pairs of friends are deduced in the following way. Let's assume that user A sent user B a message at time t1, and user B sent user A a message at time t2. If 0 < t2 - t1 \u2264 d, then user B's message was an answer to user A's one. Users A and B are considered to be friends if A answered at least one B's message or B answered at least one A's message.\n\nYou are given the log of messages in chronological order and a number d. Find all pairs of users who will be considered to be friends.\n\nInput\n\nThe first line of the input contains two integers n and d (1 \u2264 n, d \u2264 1000). The next n lines contain the messages log. The i-th line contains one line of the log formatted as \"Ai Bi ti\" (without the quotes), which means that user Ai sent a message to user Bi at time ti (1 \u2264 i \u2264 n). Ai and Bi are non-empty strings at most 20 characters long, consisting of lowercase letters ('a' ... 'z'), and ti is an integer (0 \u2264 ti \u2264 10000). It is guaranteed that the lines are given in non-decreasing order of ti's and that no user sent a message to himself. The elements in the lines are separated by single spaces.\n\nOutput\n\nIn the first line print integer k \u2014 the number of pairs of friends. In the next k lines print pairs of friends as \"Ai Bi\" (without the quotes). You can print users in pairs and the pairs themselves in any order. Each pair must be printed exactly once.\n\nExamples\n\nInput\n\n4 1\nvasya petya 1\npetya vasya 2\nanya ivan 2\nivan anya 4\n\n\nOutput\n\n1\npetya vasya\n\n\nInput\n\n1 1000\na b 0\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample test case Vasya and Petya are friends because their messages' sending times are one second apart. Anya and Ivan are not, because their messages' sending times differ by more than one second.",
        "task_name": "159_A. Friends or Not",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, d = map(int, raw_input().split())\nres = set()\ndata = [[]] * n\nfor i in range(0, n):\n\tdata[i] = raw_input().split()\n\tdata[i][2] = int(data[i][2])\nfor i in range(0, n):\n\tfor j in range(i + 1, n):\n\t\tif (data[i][0] == data[j][1] and data[i][1] == data[j][0]\n\t\t\tand 0 < abs(data[i][2] - data[j][2]) <= d):\n\t\t\tres |= {data[i][0] + \" \" + data[i][1]}\nprint(len(res))\nfor l in res:\n\tprint(l)\n\n\t\n\t",
        "correct": false,
        "task_id": "1281",
        "depth": 2
    },
    {
        "description": "Recently, Valery have come across an entirely new programming language. Most of all the language attracted him with template functions and procedures. Let us remind you that templates are tools of a language, designed to encode generic algorithms, without reference to some parameters (e.g., data types, buffer sizes, default values).\n\nValery decided to examine template procedures in this language in more detail. The description of a template procedure consists of the procedure name and the list of its parameter types. The generic type T parameters can be used as parameters of template procedures.\n\nA procedure call consists of a procedure name and a list of variable parameters. Let's call a procedure suitable for this call if the following conditions are fulfilled: \n\n  * its name equals to the name of the called procedure; \n  * the number of its parameters equals to the number of parameters of the procedure call; \n  * the types of variables in the procedure call match the corresponding types of its parameters. The variable type matches the type of a parameter if the parameter has a generic type T or the type of the variable and the parameter are the same. \n\n\n\nYou are given a description of some set of template procedures. You are also given a list of variables used in the program, as well as direct procedure calls that use the described variables. For each call you need to count the number of procedures that are suitable for this call.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the number of template procedures. The next n lines contain the description of the procedures specified in the following format:\n\n\"void procedureName (type_1, type_2, ..., type_t)\" (1 \u2264 t \u2264 5), where void is the keyword, procedureName is the procedure name, type_i is the type of the next parameter. Types of language parameters can be \"int\", \"string\", \"double\", and the keyword \"T\", which denotes the generic type.\n\nThe next line contains a single integer m (1 \u2264 m \u2264 1000) \u2014 the number of used variables. Next m lines specify the description of the variables in the following format:\n\n\"type variableName\", where type is the type of variable that can take values \"int\", \"string\", \"double\", variableName \u2014 the name of the variable.\n\nThe next line contains a single integer k (1 \u2264 k \u2264 1000) \u2014 the number of procedure calls. Next k lines specify the procedure calls in the following format:\n\n\"procedureName (var_1, var_2, ..., var_t)\" (1 \u2264 t \u2264 5), where procedureName is the name of the procedure, var_i is the name of a variable.\n\nThe lines describing the variables, template procedures and their calls may contain spaces at the beginning of the line and at the end of the line, before and after the brackets and commas. Spaces may be before and after keyword void. The length of each input line does not exceed 100 characters. The names of variables and procedures are non-empty strings of lowercase English letters and numbers with lengths of not more than 10 characters. Note that this is the only condition at the names. Only the specified variables are used in procedure calls. The names of the variables are distinct. No two procedures are the same. Two procedures are the same, if they have identical names and identical ordered sets of types of their parameters.\n\nOutput\n\nOn each of k lines print a single number, where the i-th number stands for the number of suitable template procedures for the i-th call.\n\nExamples\n\nInput\n\n4\nvoid f(int,T)\nvoid  f(T, T)\n void foo123   ( int,  double,  string,string  ) \n  void  p(T,double)\n3\nint a\n string    s\ndouble x123 \n5\nf(a,  a)\n  f(s,a   )\nfoo   (a,s,s)\n f  (  s  ,x123)\nproc(a)\n\n\nOutput\n\n2\n1\n0\n1\n0\n\n\nInput\n\n6\nvoid f(string,double,int)\nvoid f(int)\n   void f  ( T  )\nvoid procedure(int,double)\nvoid f  (T, double,int)   \nvoid f(string, T,T)\n4\n int a\n int x\nstring  t\ndouble  val  \n5\nf(t, a, a)\nf(t,val,a)\nf(val,a, val)\n solve300(val, val)\nf  (x)\n\n\nOutput\n\n1\n3\n0\n0\n2",
        "task_name": "200_D. Programming Language",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import re\n\ndef parse_void(s):\n  s = s.replace(' ','')\n  EXP = 'void(?P<name>\\w+?)\\((?P<params>.*?)\\)'\n  info = re.match(EXP, s).groupdict()\n  info['params'] = info['params'].split(',')\n  return info\n\ndef parse_var(s):\n  ss = s.split()\n  return {'type': ss[0], 'name': ss[1]}\n\ndef calc(s):\n  s = s.replace(' ','')\n  EXP = '(?P<name>\\w+?)\\((?P<params>.*?)\\)'\n  info = re.match(EXP, s).groupdict()\n  info['params'] = info['params'].split(',')\n  global voidbank\n  global varbank\n  ans = 0\n  try:\n    for void in voidbank[info['name']]:\n      if len(void) != len(info['params']):\n        continue\n      ch = False\n      for i in range(len(void)):\n        v1 = info['params'][i]\n        t2 = void[i]\n        t1 = varbank[v1]\n        if (t2 != 'T') and (t1 != t2):\n          ch = True\n      if not ch:\n        ans += 1\n  except:\n    pass\n  return ans\n\nn = int(raw_input())\nvoidbank = dict()\nfor l in xrange(n):\n  ll = parse_void(raw_input())\n  if ll['name'] in voidbank:\n    voidbank[ll['name']].append(ll['params'])\n  else:\n    voidbank[ll['name']] = [ll['params']]\n\nprint(voidbank)\n\nn = int(raw_input())\nvarbank = dict()\nfor l in xrange(n):\n  ln = raw_input()\n  ll = parse_var(ln)\n  varbank[ll['name']] = ll['type']\n\nn = int(raw_input())\nfor i in xrange(n):\n  print(calc(raw_input()))\n",
        "correct": false,
        "task_id": "1282",
        "depth": 2
    },
    {
        "description": "You've got an n \u00d7 m pixel picture. Each pixel can be white or black. Your task is to change the colors of as few pixels as possible to obtain a barcode picture.\n\nA picture is a barcode if the following conditions are fulfilled: \n\n  * All pixels in each column are of the same color. \n  * The width of each monochrome vertical line is at least x and at most y pixels. In other words, if we group all neighbouring columns of the pixels with equal color, the size of each group can not be less than x or greater than y. \n\nInput\n\nThe first line contains four space-separated integers n, m, x and y (1 \u2264 n, m, x, y \u2264 1000; x \u2264 y).\n\nThen follow n lines, describing the original image. Each of these lines contains exactly m characters. Character \".\" represents a white pixel and \"#\" represents a black pixel. The picture description doesn't have any other characters besides \".\" and \"#\".\n\nOutput\n\nIn the first line print the minimum number of pixels to repaint. It is guaranteed that the answer exists. \n\nExamples\n\nInput\n\n6 5 1 2\n##.#.\n.###.\n###..\n#...#\n.##.#\n###..\n\n\nOutput\n\n11\n\n\nInput\n\n2 5 1 1\n#####\n.....\n\n\nOutput\n\n5\n\nNote\n\nIn the first test sample the picture after changing some colors can looks as follows: \n    \n    \n      \n    .##..  \n    .##..  \n    .##..  \n    .##..  \n    .##..  \n    .##..  \n    \n\nIn the second test sample the picture after changing some colors can looks as follows: \n    \n    \n      \n    .#.#.  \n    .#.#.  \n    ",
        "task_name": "225_C. Barcode",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "'''input\n10 5 3 7\n.####\n###..\n##.##\n#..#.\n.#...\n#.##.\n.##..\n.#.##\n#.#..\n.#..#\n'''\n# connected components\nfrom sys import stdin\nfrom collections import defaultdict\nimport sys\nimport time\n\nsys.setrecursionlimit(15000)\n\ndef calculate_cost(matrix, n, m):\n\twhite_cost = []\n\tblack_cost = []\n\tfor i in range(m):\n\t\tbcount = 0; wcount = 0\n\t\tfor j in range(n):\n\t\t\tif matrix[j][i] == '.':\n\t\t\t\tbcount += 1\n\t\t\telse:\n\t\t\t\twcount += 1\n\t\twhite_cost.append(wcount)\n\t\tblack_cost.append(bcount)\n\treturn black_cost, white_cost\n\n\ndef brute(dp1, dp2, matrix, n, m, x, y, black_cost, white_cost, index, w, b):\n\t#print(index, w, b)\n\tif index >= m:\n\t\tif w != 0 and w >= x:\n\t\t\treturn 0\n\t\tif b != 0 and b >= x:\n\t\t\treturn 0\n\t\treturn float('inf')\n\telse:\n\t\tif dp1[w][index] != -1 and dp2[b][index] != -1:\n\t\t\treturn min(dp1[w][index], dp2[b][index])\n\n\t\tc1 = float('inf'); c2 = float('inf'); c3 = float('inf'); c4 = float('inf')\n\t\tif w < x:\n\t\t\tc1 = 0\n\t\t\tcw = w\n\t\t\ti = index\n\t\t\twhile cw < x:\n\t\t\t\tif i == m:\n\t\t\t\t\tbreak\n\t\t\t\tc1 += white_cost[i]\t\n\t\t\t\ti +=  1; cw += 1\n\t\t\tc1 += brute(dp1, dp2, matrix, n, m, x, y, black_cost, white_cost, i, cw, 0)\n\t\t\n\t\tif b < x:\n\t\t\tc2 = 0\n\t\t\tcb = b\n\t\t\ti = index\n\t\t\twhile cb < x:\n\t\t\t\tif i == m:\n\t\t\t\t\tc2 = float('inf')\n\t\t\t\t\tbreak\n\t\t\t\tc2 += black_cost[i]\n\t\t\t\ti += 1; cb += 1\n\t\t\tc2 += brute(dp1, dp2, matrix, n, m, x, y, black_cost, white_cost, i, 0, cb)\n\t\t\n\t\tif w >= x and w + 1 <= y:\n\t\t\tc3 = white_cost[index] + brute(dp1, dp2, matrix, n, m, x, y, black_cost, white_cost, index + 1, w + 1, 0)\n\t\t\n\t\tif b >= x and b + 1 <= y:\n\t\t\tc4 = black_cost[index] + brute(dp1, dp2, matrix, n, m, x, y, black_cost, white_cost, index + 1, 0, b + 1)\n\t\t\n\t\t\n\t\tdp1[w][index] = min(c1, c3)\n\t\tdp2[b][index] = min(c2, c4)\n\t\treturn min(c1, c2, c3, c4)\n\t\t\n\n# main starts\nn, m, x, y = list(map(int, stdin.readline().split()))\nmatrix = []\nfor _ in range(n):\n\tmatrix.append(list(stdin.readline().strip()))\nblack_cost, white_cost = calculate_cost(matrix, n, m)\n#print(black_cost, white_cost)\ndp1 = [[-1 for j in range(m)] for k in range(y + 1)]\ndp2 = [[-1 for j in range(m)] for k in range(y + 1)]\n\nprint(brute(dp1, dp2, matrix, n, m, x, y, black_cost, white_cost, 0, 0, 0))\n",
        "correct": true,
        "task_id": "1283",
        "depth": 2
    },
    {
        "description": "Nowadays the one-way traffic is introduced all over the world in order to improve driving safety and reduce traffic jams. The government of Berland decided to keep up with new trends. Formerly all n cities of Berland were connected by n two-way roads in the ring, i. e. each city was connected directly to exactly two other cities, and from each city it was possible to get to any other city. Government of Berland introduced one-way traffic on all n roads, but it soon became clear that it's impossible to get from some of the cities to some others. Now for each road is known in which direction the traffic is directed at it, and the cost of redirecting the traffic. What is the smallest amount of money the government should spend on the redirecting of roads so that from every city you can get to any other?\n\nInput\n\nThe first line contains integer n (3 \u2264 n \u2264 100) \u2014 amount of cities (and roads) in Berland. Next n lines contain description of roads. Each road is described by three integers ai, bi, ci (1 \u2264 ai, bi \u2264 n, ai \u2260 bi, 1 \u2264 ci \u2264 100) \u2014 road is directed from city ai to city bi, redirecting the traffic costs ci.\n\nOutput\n\nOutput single integer \u2014 the smallest amount of money the government should spend on the redirecting of roads so that from every city you can get to any other.\n\nExamples\n\nInput\n\n3\n1 3 1\n1 2 1\n3 2 1\n\n\nOutput\n\n1\n\n\nInput\n\n3\n1 3 1\n1 2 5\n3 2 1\n\n\nOutput\n\n2\n\n\nInput\n\n6\n1 5 4\n5 3 8\n2 4 15\n1 6 16\n2 3 23\n4 6 42\n\n\nOutput\n\n39\n\n\nInput\n\n4\n1 2 9\n2 3 8\n3 4 7\n4 1 5\n\n\nOutput\n\n0",
        "task_name": "24_A. Ring road",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\nsource, destination = [], []\nminusCost, totalcost =0,0\nfor i in range(n):\n\t\n\ts, d, wt = map(int ,raw_input().split())\n\tif s in source or d in destination:\n\t\ts, d = d, s\n\t\tminusCost +=wt\n\ttotalcost +=wt\n\tsource.append(s)\n\tdestination.append(d)\n# print(source, destination, minusCost, totalcost)\nprint(min(minusCost, totalcost - minusCost))",
        "correct": true,
        "task_id": "1284",
        "depth": 1
    },
    {
        "description": "A tree is a graph with n vertices and exactly n - 1 edges; this graph should meet the following condition: there exists exactly one shortest (by number of edges) path between any pair of its vertices.\n\nA subtree of a tree T is a tree with both vertices and edges as subsets of vertices and edges of T.\n\nYou're given a tree with n vertices. Consider its vertices numbered with integers from 1 to n. Additionally an integer is written on every vertex of this tree. Initially the integer written on the i-th vertex is equal to vi. In one move you can apply the following operation:\n\n  1. Select the subtree of the given tree that includes the vertex with number 1. \n  2. Increase (or decrease) by one all the integers which are written on the vertices of that subtree. \n\n\n\nCalculate the minimum number of moves that is required to make all the integers written on the vertices of the given tree equal to zero.\n\nInput\n\nThe first line of the input contains n (1 \u2264 n \u2264 105). Each of the next n - 1 lines contains two integers ai and bi (1 \u2264 ai, bi \u2264 n; ai \u2260 bi) indicating there's an edge between vertices ai and bi. It's guaranteed that the input graph is a tree. \n\nThe last line of the input contains a list of n space-separated integers v1, v2, ..., vn (|vi| \u2264 109).\n\nOutput\n\nPrint the minimum number of operations needed to solve the task.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nExamples\n\nInput\n\n3\n1 2\n1 3\n1 -1 1\n\n\nOutput\n\n3",
        "task_name": "274_B. Zero Tree",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "#!/usr/bin/python\nfrom collections import deque\n\nn = int(raw_input())\ng = [[] for i in xrange(n)]\nfor _ in xrange(n-1):\n\ta, b = [int(i)-1 for i in raw_input().split()]\n\tg[a].append(b)\n\tg[b].append(a)\n\nv = map(int, raw_input().split())\nroot, used, p = [[] for i in xrange(n)], [False] * n, [-1] * n\n\nqueue = deque([0])\nwhile len(queue) > 0:\n\tc = queue.popleft()\n\tused[c] = True\n\tfor i in g[c]:\n\t\tif not used[i]:\n\t\t\troot[c].append(i)\n\t\t\tqueue.append(i)\n\t\t\tp[i] = c\n\npos, neg = [0] * n, [0] * n\nfor i in xrange(n):\n\tused[i] = False\n\tif len(root[i]) == 0:\n\t\tqueue.append(i)\n\nwhile len(queue) > 0:\n\tc = queue.popleft()\n\tused[c] = True\n\n\tmax1, max2 = 0, 0\n\tfor i in root[c]:\n\t\tmax1 = max(max1, pos[i])\n\t\tmax2 = max(max2, neg[i])\n\n\tpos[c] = max1\n\tneg[c] = max2\n\ts = v[c] - max1 + max2\n\tif s > 0:\n\t\tpos[c]+=s\n\telse:\n\t\tneg[c]+=-s\n\n\tif p[c] != -1:\n\t\tcanAdd = True\n\t\tfor i in root[p[c]]:\n\t\t\tif not used[i]:\n\t\t\t\tcanAdd = False\n\t\t\t\tbreak\n\t\tif canAdd:\n\t\t\tqueue.append(p[c])\n\nprint (pos[0] + neg[0])\n",
        "correct": true,
        "task_id": "1285",
        "depth": 2
    },
    {
        "description": "In this problem at each moment you have a set of intervals. You can move from interval (a, b) from our set to interval (c, d) from our set if and only if c < a < d or c < b < d. Also there is a path from interval I1 from our set to interval I2 from our set if there is a sequence of successive moves starting from I1 so that we can reach I2.\n\nYour program should handle the queries of the following two types:\n\n  1. \"1 x y\" (x < y) \u2014 add the new interval (x, y) to the set of intervals. The length of the new interval is guaranteed to be strictly greater than all the previous intervals.\n  2. \"2 a b\" (a \u2260 b) \u2014 answer the question: is there a path from a-th (one-based) added interval to b-th (one-based) added interval? \n\n\n\nAnswer all the queries. Note, that initially you have an empty set of intervals.\n\nInput\n\nThe first line of the input contains integer n denoting the number of queries, (1 \u2264 n \u2264 100). Each of the following lines contains a query as described above. All numbers in the input are integers and don't exceed 109 by their absolute value.\n\nIt's guaranteed that all queries are correct.\n\nOutput\n\nFor each query of the second type print \"YES\" or \"NO\" on a separate line depending on the answer.\n\nExamples\n\nInput\n\n5\n1 1 5\n1 5 11\n2 1 2\n1 2 9\n2 1 2\n\n\nOutput\n\nNO\nYES",
        "task_name": "320_B. Ping-Pong (Easy Version)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "i,n=[],range(int(input()))\ndef dfs(p,g):\n    if g[p]==-1:\n        g[p]=0\n        for v in range(len(i)):\n            if i[v][0]<i[p][0]<i[v][1]or i[v][0]<i[p][1]<i[v][1]:\n                if not g[p]:g[p]=dfs(v,g)\n    return g[p]\nfor l in n:\n    c,a,b=map(int,raw_input().split())\n    if c==1:i+=[(a,b)]\n    else:print['NO','YES'][dfs(a-1,[1 if j==b-1 else -1 for j in n])]\n",
        "correct": true,
        "task_id": "1286",
        "depth": 1
    },
    {
        "description": "Sereja has two sequences a and b and number p. Sequence a consists of n integers a1, a2, ..., an. Similarly, sequence b consists of m integers b1, b2, ..., bm. As usual, Sereja studies the sequences he has. Today he wants to find the number of positions q (q + (m - 1)\u00b7p \u2264 n; q \u2265 1), such that sequence b can be obtained from sequence aq, aq + p, aq + 2p, ..., aq + (m - 1)p by rearranging elements.\n\nSereja needs to rush to the gym, so he asked to find all the described positions of q.\n\nInput\n\nThe first line contains three integers n, m and p (1 \u2264 n, m \u2264 2\u00b7105, 1 \u2264 p \u2264 2\u00b7105). The next line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 109). The next line contains m integers b1, b2, ..., bm (1 \u2264 bi \u2264 109).\n\nOutput\n\nIn the first line print the number of valid qs. In the second line, print the valid values in the increasing order.\n\nExamples\n\nInput\n\n5 3 1\n1 2 3 2 1\n1 2 3\n\n\nOutput\n\n2\n1 3\n\n\nInput\n\n6 3 2\n1 3 2 2 3 1\n1 2 3\n\n\nOutput\n\n2\n1 2",
        "task_name": "368_D. Sereja ans Anagrams",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division\nfrom sys import stdin\nfrom collections import Counter\nfrom math import ceil\n\nrints = lambda: [int(x) for x in stdin.readline().split()]\nn, m, q = rints()\na, b, ans = rints(), Counter(rints()), []\nall = len(b)\n\nfor i in range(q):\n    dis, mem = set(), Counter()\n    if int(ceil((n - i) / q)) < m:\n        break\n\n    for j in range(i, i + (m - 1) * q, q):\n        mem[a[j]] += 1\n\n    for k, j in mem.items():\n        if j == b[k]:\n            dis.add(k)\n\n    be = i\n    for j in range(i + (m - 1) * q, n, q):\n        mem[a[j]] += 1\n        if mem[a[j]] == b[a[j]]:\n            dis.add(a[j])\n        else:\n            dis.discard(a[j])\n\n        if len(dis) == all:\n            ans.append(be + 1)\n\n        mem[a[be]] -= 1\n        if b[a[be]] and mem[a[be]] == b[a[be]]:\n            dis.add(a[be])\n        else:\n            dis.discard(a[be])\n\n        be += q\n\nprint('%d\\n%s' % (len(ans), ' '.join(map(str, sorted(ans)))))\n",
        "correct": true,
        "task_id": "1287",
        "depth": 2
    },
    {
        "description": "One day Vasya decided to have a look at the results of Berland 1910 Football Championship\u2019s finals. Unfortunately he didn't find the overall score of the match; however, he got hold of a profound description of the match's process. On the whole there are n lines in that description each of which described one goal. Every goal was marked with the name of the team that had scored it. Help Vasya, learn the name of the team that won the finals. It is guaranteed that the match did not end in a tie.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 100) \u2014 the number of lines in the description. Then follow n lines \u2014 for each goal the names of the teams that scored it. The names are non-empty lines consisting of uppercase Latin letters whose lengths do not exceed 10 symbols. It is guaranteed that the match did not end in a tie and the description contains no more than two different teams.\n\nOutput\n\nPrint the name of the winning team. We remind you that in football the team that scores more goals is considered the winner.\n\nExamples\n\nInput\n\n1\nABC\n\n\nOutput\n\nABC\n\n\nInput\n\n5\nA\nABA\nABA\nA\nA\n\n\nOutput\n\nA",
        "task_name": "43_A. Football",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\nimport math\nn = int(input())\nk=0\nm={}\nmaxi=0\nfor i in range(0,n):\n    s = raw_input()\n    if not s in m :\n        m[s]=1;\n        k+=1;\n    else :\n        m[s]+=1;\n    if maxi < m[s]:\n        maxi = m[s]\n        str = s\nprint(s)\nsys.exit()",
        "correct": false,
        "task_id": "1288",
        "depth": 1
    },
    {
        "description": "Many computer strategy games require building cities, recruiting army, conquering tribes, collecting resources. Sometimes it leads to interesting problems. \n\nLet's suppose that your task is to build a square city. The world map uses the Cartesian coordinates. The sides of the city should be parallel to coordinate axes. The map contains mines with valuable resources, located at some points with integer coordinates. The sizes of mines are relatively small, i.e. they can be treated as points. The city should be built in such a way that all the mines are inside or on the border of the city square. \n\nBuilding a city takes large amount of money depending on the size of the city, so you have to build the city with the minimum area. Given the positions of the mines find the minimum possible area of the city.\n\nInput\n\nThe first line of the input contains number n \u2014 the number of mines on the map (2 \u2264 n \u2264 1000). Each of the next n lines contains a pair of integers xi and yi \u2014 the coordinates of the corresponding mine ( - 109 \u2264 xi, yi \u2264 109). All points are pairwise distinct.\n\nOutput\n\nPrint the minimum area of the city that can cover all the mines with valuable resources.\n\nExamples\n\nInput\n\n2\n0 0\n2 2\n\n\nOutput\n\n4\n\n\nInput\n\n2\n0 0\n0 3\n\n\nOutput\n\n9",
        "task_name": "485_B. Valuable Resources",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "t=int(raw_input())\nmaxx,maxy=-10**18,-10**18\nminx=10**18\nminy=10**18\nfor z in xrange(t):\n    a,b=map(int,raw_input().split())\n    maxx=max(maxx,a)\n    minx=min(minx,a)\n    maxy=max(maxy,b)\n    miny=min(miny,b)\nprint (max(maxx-minx,maxy-miny))**2\n",
        "correct": true,
        "task_id": "1289",
        "depth": 1
    },
    {
        "description": "There are n piles of pebbles on the table, the i-th pile contains ai pebbles. Your task is to paint each pebble using one of the k given colors so that for each color c and any two piles i and j the difference between the number of pebbles of color c in pile i and number of pebbles of color c in pile j is at most one.\n\nIn other words, let's say that bi, c is the number of pebbles of color c in the i-th pile. Then for any 1 \u2264 c \u2264 k, 1 \u2264 i, j \u2264 n the following condition must be satisfied |bi, c - bj, c| \u2264 1. It isn't necessary to use all k colors: if color c hasn't been used in pile i, then bi, c is considered to be zero.\n\nInput\n\nThe first line of the input contains positive integers n and k (1 \u2264 n, k \u2264 100), separated by a space \u2014 the number of piles and the number of colors respectively.\n\nThe second line contains n positive integers a1, a2, ..., an (1 \u2264 ai \u2264 100) denoting number of pebbles in each of the piles.\n\nOutput\n\nIf there is no way to paint the pebbles satisfying the given condition, output \"NO\" (without quotes) .\n\nOtherwise in the first line output \"YES\" (without quotes). Then n lines should follow, the i-th of them should contain ai space-separated integers. j-th (1 \u2264 j \u2264 ai) of these integers should be equal to the color of the j-th pebble in the i-th pile. If there are several possible answers, you may output any of them.\n\nExamples\n\nInput\n\n4 4\n1 2 3 4\n\n\nOutput\n\nYES\n1\n1 4\n1 2 4\n1 2 3 4\n\n\nInput\n\n5 2\n3 2 4 1 3\n\n\nOutput\n\nNO\n\n\nInput\n\n5 4\n3 2 4 3 5\n\n\nOutput\n\nYES\n1 2 3\n1 3\n1 2 3 4\n1 3 4\n1 1 2 3 4",
        "task_name": "509_B. Painting Pebbles",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import print_function\nimport math\n\nn,k=map(int,raw_input().split())\na=[int(x) for x in raw_input().split()]\n\n\nfor i in range(1,len(a)):\n\tif abs(a[i]-a[i-1])>k:\n\t\tprint(\"NO\")\n\t\texit()\n\nprint(\"YES\")\nfor i in a:\n\ttmp=1\n\tfor x in range(1,i+1):\n\t\tif x>k:\n\t\t\tprint(tmp, end=\" \")\n\t\t\ttmp+=1\n\t\t\tif tmp>k:\n\t\t\t    tmp=1\n\t\t\tcontinue\n\t\tprint(x,end=\" \")\n\tprint()\t\n\n\n\n\n\n\n",
        "correct": false,
        "task_id": "1290",
        "depth": 2
    },
    {
        "description": "Amr loves Chemistry, and specially doing experiments. He is preparing for a new interesting experiment.\n\nAmr has n different types of chemicals. Each chemical i has an initial volume of ai liters. For this experiment, Amr has to mix all the chemicals together, but all the chemicals volumes must be equal first. So his task is to make all the chemicals volumes equal.\n\nTo do this, Amr can do two different kind of operations. \n\n  * Choose some chemical i and double its current volume so the new volume will be 2ai\n  * Choose some chemical i and divide its volume by two (integer division) so the new volume will be <image>\n\n\n\nSuppose that each chemical is contained in a vessel of infinite volume. Now Amr wonders what is the minimum number of operations required to make all the chemicals volumes equal?\n\nInput\n\nThe first line contains one number n (1 \u2264 n \u2264 105), the number of chemicals.\n\nThe second line contains n space separated integers ai (1 \u2264 ai \u2264 105), representing the initial volume of the i-th chemical in liters.\n\nOutput\n\nOutput one integer the minimum number of operations required to make all the chemicals volumes equal.\n\nExamples\n\nInput\n\n3\n4 8 2\n\n\nOutput\n\n2\n\nInput\n\n3\n3 5 6\n\n\nOutput\n\n5\n\nNote\n\nIn the first sample test, the optimal solution is to divide the second chemical volume by two, and multiply the third chemical volume by two to make all the volumes equal 4.\n\nIn the second sample test, the optimal solution is to divide the first chemical volume by two, and divide the second and the third chemical volumes by two twice to make all the volumes equal 1.",
        "task_name": "558_C. Amr and Chemistry",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = input()\ns = raw_input().split()\ndic_sum, dic_num = {}, {}\nmax_num = 2**33\nfor i in xrange(n):\n    curr = int(s[i])\n    c, iter = curr, 0\n    while c > 1:\n        if dic_num . has_key(c):\n            dic_num[c] += 1\n            dic_sum[c] += iter\n        else:\n            dic_num[c] = 1\n            dic_sum[c] = iter\n        c //= 2\n        iter += 1\n\n    c, iter = curr, 0\n    while c <= max_num:\n        c *= 2\n        iter += 1\n        if dic_num . has_key(c):\n            dic_num[c] += 1\n            dic_sum[c] += iter\n        else:\n            dic_num[c] = 1\n            dic_sum[c] = iter\n\n\n#import operator\n#a = sorted(dic_num.items(), key=operator.itemgetter(1))\na = dic_num.items()\n#print(a)\ns = 10**12\nfor i in xrange(len(a)):\n    if a[i][1] == n:\n        s = min(s, dic_sum[a[i][0]])\nprint(s)\n\n\n\n\n\n\n\n\n",
        "correct": false,
        "task_id": "1291",
        "depth": 2
    },
    {
        "description": "A tennis tournament with n participants is running. The participants are playing by an olympic system, so the winners move on and the losers drop out.\n\nThe tournament takes place in the following way (below, m is the number of the participants of the current round):\n\n  * let k be the maximal power of the number 2 such that k \u2264 m, \n  * k participants compete in the current round and a half of them passes to the next round, the other m - k participants pass to the next round directly, \n  * when only one participant remains, the tournament finishes. \n\n\n\nEach match requires b bottles of water for each participant and one bottle for the judge. Besides p towels are given to each participant for the whole tournament.\n\nFind the number of bottles and towels needed for the tournament.\n\nNote that it's a tennis tournament so in each match two participants compete (one of them will win and the other will lose).\n\nInput\n\nThe only line contains three integers n, b, p (1 \u2264 n, b, p \u2264 500) \u2014 the number of participants and the parameters described in the problem statement.\n\nOutput\n\nPrint two integers x and y \u2014 the number of bottles and towels need for the tournament.\n\nExamples\n\nInput\n\n5 2 3\n\n\nOutput\n\n20 15\n\n\nInput\n\n8 2 4\n\n\nOutput\n\n35 32\n\nNote\n\nIn the first example will be three rounds:\n\n  1. in the first round will be two matches and for each match 5 bottles of water are needed (two for each of the participants and one for the judge), \n  2. in the second round will be only one match, so we need another 5 bottles of water, \n  3. in the third round will also be only one match, so we need another 5 bottles of water. \n\n\n\nSo in total we need 20 bottles of water.\n\nIn the second example no participant will move on to some round directly.",
        "task_name": "628_A. Tennis Tournament",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, b, p = map(int, raw_input().split())\npotencias = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]\ndef cm(x):\n\tfor i in range(10):\n\t\tif potencias[i] >x:\n\t\t\treturn(potencias[i-1])\t\t\t\n\nbo, to = 0,p*n\n\nwhile(n >1):\n\tk = cm(n)\n\tbo += b*(k)\n\tprint(n,k,bo)\n\n\tn = n - (k/2)\n\tbo +=(k/2)\n\tif k == 1:\n\t\tbreak\n\t\nprint(bo,to)\n",
        "correct": false,
        "task_id": "1294",
        "depth": 1
    },
    {
        "description": "A student of z-school found a kind of sorting called z-sort. The array a with n elements are z-sorted if two conditions hold:\n\n  1. ai \u2265 ai - 1 for all even i, \n  2. ai \u2264 ai - 1 for all odd i > 1. \n\n\n\nFor example the arrays [1,2,1,2] and [1,1,1,1] are z-sorted while the array [1,2,3,4] isn\u2019t z-sorted.\n\nCan you make the array z-sorted?\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the number of elements in the array a.\n\nThe second line contains n integers ai (1 \u2264 ai \u2264 109) \u2014 the elements of the array a.\n\nOutput\n\nIf it's possible to make the array a z-sorted print n space separated integers ai \u2014 the elements after z-sort. Otherwise print the only word \"Impossible\".\n\nExamples\n\nInput\n\n4\n1 2 2 1\n\n\nOutput\n\n1 2 1 2\n\n\nInput\n\n5\n1 3 2 2 5\n\n\nOutput\n\n1 5 2 3 2",
        "task_name": "652_B. z-sort",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n= int(raw_input())\n\nl= map(int, raw_input().split())\n\nl.sort()\n\nx= [0 for i in xrange(0, len(l))]\n\nctr=0\n\nfor i in xrange(0, len(l)):\n\tx[ctr]=l[i]\n\tctr+=2\n\tif ctr>=len(l) and ctr%2==0:\n\t\tctr=1\n\nfor i in xrange(0, len(x)) :\n\tprint (x[i])",
        "correct": true,
        "task_id": "1295",
        "depth": 1
    },
    {
        "description": "There are several days left before the fiftieth birthday of a famous Berland's writer Berlbury. In this connection the local library decided to make an exposition of the works of this famous science-fiction writer. It was decided as well that it is necessary to include into the exposition only those books that were published during a particular time period. It is obvious that if the books differ much in size, the visitors will not like it. That was why the organizers came to the opinion, that the difference between the highest and the lowest books in the exposition should be not more than k millimeters.\n\nThe library has n volumes of books by Berlbury, arranged in chronological order of their appearance. The height of each book in millimeters is know, it is hi. As Berlbury is highly respected in the city, the organizers want to include into the exposition as many books as possible, and to find out what periods of his creative work they will manage to cover. You are asked to help the organizers cope with this hard task.\n\nInput\n\nThe first line of the input data contains two integer numbers separated by a space n (1 \u2264 n \u2264 105) and k (0 \u2264 k \u2264 106) \u2014 the amount of books by Berlbury in the library, and the maximum allowed height difference between the lowest and the highest books. The second line contains n integer numbers separated by a space. Each number hi (1 \u2264 hi \u2264 106) is the height of the i-th book in millimeters.\n\nOutput\n\nIn the first line of the output data print two numbers a and b (separate them by a space), where a is the maximum amount of books the organizers can include into the exposition, and b \u2014 the amount of the time periods, during which Berlbury published a books, and the height difference between the lowest and the highest among these books is not more than k milllimeters.\n\nIn each of the following b lines print two integer numbers separated by a space \u2014 indexes of the first and the last volumes from each of the required time periods of Berlbury's creative work.\n\nExamples\n\nInput\n\n3 3\n14 12 10\n\n\nOutput\n\n2 2\n1 2\n2 3\n\n\nInput\n\n2 0\n10 10\n\n\nOutput\n\n2 1\n1 2\n\n\nInput\n\n4 5\n8 19 10 13\n\n\nOutput\n\n2 1\n3 4",
        "task_name": "6_E. Exposition",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import heapq\n\nn, k = [int(x) for x in raw_input().split()]\nhLst = [int(x) for x in raw_input().split()]\na = i = j = 0\nr = []\nm = M = hLst[0]\nmI = MI = 0\nq1 = []\nq2 = []\nwhile j < n:\n\tw = hLst[j]\n\tif w <= m:\n\t\tm = w\n\t\tmI = j\n\tif w >= M:\n\t\tM = w\n\t\tMI = j\n\theapq.heappush(q1, (w, j))\n\theapq.heappush(q2, (-w, j))\n\tprevJ = j\n\tif M-m > k:\n\t\tbreak\n\tj += 1\nwhile j < n:\n\tif j-i > a:\n\t\ta = j-i\n\t\tr = [(i+1, j)]\n\telif j-i == a:\n\t\tr.append((i+1, j))\n\tif j-i == 1:\n\t\tm = M = hLst[j]\n\t\tmI = MI = j\n\t\ti += 1\n\telif mI < MI:\n\t\ti = mI+1\n\t\tw, t = heapq.heappop(q1)\n\t\twhile t < i:\n\t\t\tw, t = heapq.heappop(q1)\n\t\theapq.heappush(q1, (w, t))\n\t\tm = w\n\t\tmI = t\n\t\tw, t = heapq.heappop(q2)\n\t\twhile t < i:\n\t\t\tw, t = heapq.heappop(q2)\n\t\theapq.heappush(q2, (w, t))\n\telse:\n\t\ti = MI+1\n\t\tw, t = heapq.heappop(q2)\n\t\twhile t < i:\n\t\t\tw, t = heapq.heappop(q2)\n\t\theapq.heappush(q2, (w, t))\n\t\tM = -w\n\t\tMI = t\n\t\tw, t = heapq.heappop(q1)\n\t\twhile t < i:\n\t\t\tw, t = heapq.heappop(q1)\n\t\theapq.heappush(q1, (w, t))\n\twhile j < n:\n\t\tw = hLst[j]\n\t\tif w <= m:\n\t\t\tm = w\n\t\t\tmI = j\n\t\tif w >= M:\n\t\t\tM = w\n\t\t\tMI = j\n\t\tif prevJ != j:\n\t\t\theapq.heappush(q1, (w, j))\n\t\t\theapq.heappush(q2, (-w, j))\n\t\t\tprevJ = j\n\t\tif M-m > k:\n\t\t\tbreak\n\t\tj += 1\nif j-i > a:\n\ta = j-i\n\tr = [(i+1, j)]\nelif j-i == a:\n\tr.append((i+1, j))\n\t\nprint(str(a)+' '+str(len(r)))\nfor x in r:\n\tprint(str(x[0])+' '+str(x[1]))",
        "correct": true,
        "task_id": "1296",
        "depth": 2
    },
    {
        "description": "You are given a text consisting of n lines. Each line contains some space-separated words, consisting of lowercase English letters.\n\nWe define a syllable as a string that contains exactly one vowel and any arbitrary number (possibly none) of consonants. In English alphabet following letters are considered to be vowels: 'a', 'e', 'i', 'o', 'u' and 'y'.\n\nEach word of the text that contains at least one vowel can be divided into syllables. Each character should be a part of exactly one syllable. For example, the word \"mamma\" can be divided into syllables as \"ma\" and \"mma\", \"mam\" and \"ma\", and \"mamm\" and \"a\". Words that consist of only consonants should be ignored.\n\nThe verse patterns for the given text is a sequence of n integers p1, p2, ..., pn. Text matches the given verse pattern if for each i from 1 to n one can divide words of the i-th line in syllables in such a way that the total number of syllables is equal to pi.\n\nYou are given the text and the verse pattern. Check, if the given text matches the given verse pattern.\n\nInput\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of lines in the text.\n\nThe second line contains integers p1, ..., pn (0 \u2264 pi \u2264 100) \u2014 the verse pattern.\n\nNext n lines contain the text itself. Text consists of lowercase English letters and spaces. It's guaranteed that all lines are non-empty, each line starts and ends with a letter and words are separated by exactly one space. The length of each line doesn't exceed 100 characters.\n\nOutput\n\nIf the given text matches the given verse pattern, then print \"YES\" (without quotes) in the only line of the output. Otherwise, print \"NO\" (without quotes).\n\nExamples\n\nInput\n\n3\n2 2 3\nintel\ncode\nch allenge\n\n\nOutput\n\nYES\n\n\nInput\n\n4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n\n\nOutput\n\nNO\n\n\nInput\n\n4\n13 11 15 15\nto be or not to be that is the question\nwhether tis nobler in the mind to suffer\nthe slings and arrows of outrageous fortune\nor to take arms against a sea of troubles\n\n\nOutput\n\nYES\n\nNote\n\nIn the first sample, one can split words into syllables in the following way: \n    \n    \n    in-tel  \n    co-de  \n    ch al-len-ge  \n    \n\nSince the word \"ch\" in the third line doesn't contain vowels, we can ignore it. As the result we get 2 syllabels in first two lines and 3 syllables in the third one.",
        "task_name": "722_B. Verse Pattern",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "VOWELS = ['a', 'e', 'i', 'o', 'u', 'y']\n\n# main\nn = int(raw_input())\np = [int(x) for x in raw_input().split()]\n\nanswer = True\nfor pi in p:\n\tline = raw_input()\n\tsyllables = sum([c in VOWELS for c in line])\n\tanswer = answer and (syllables == pi)\n\nprint ('YES' if answer else 'NO')",
        "correct": true,
        "task_id": "1297",
        "depth": 1
    },
    {
        "description": "Bear Limak wants to become the largest of bears, or at least to become larger than his brother Bob.\n\nRight now, Limak and Bob weigh a and b respectively. It's guaranteed that Limak's weight is smaller than or equal to his brother's weight.\n\nLimak eats a lot and his weight is tripled after every year, while Bob's weight is doubled after every year.\n\nAfter how many full years will Limak become strictly larger (strictly heavier) than Bob?\n\nInput\n\nThe only line of the input contains two integers a and b (1 \u2264 a \u2264 b \u2264 10) \u2014 the weight of Limak and the weight of Bob respectively.\n\nOutput\n\nPrint one integer, denoting the integer number of years after which Limak will become strictly larger than Bob.\n\nExamples\n\nInput\n\n4 7\n\n\nOutput\n\n2\n\n\nInput\n\n4 9\n\n\nOutput\n\n3\n\n\nInput\n\n1 1\n\n\nOutput\n\n1\n\nNote\n\nIn the first sample, Limak weighs 4 and Bob weighs 7 initially. After one year their weights are 4\u00b73 = 12 and 7\u00b72 = 14 respectively (one weight is tripled while the other one is doubled). Limak isn't larger than Bob yet. After the second year weights are 36 and 28, so the first weight is greater than the second one. Limak became larger than Bob after two years so you should print 2.\n\nIn the second sample, Limak's and Bob's weights in next years are: 12 and 18, then 36 and 36, and finally 108 and 72 (after three years). The answer is 3. Remember that Limak wants to be larger than Bob and he won't be satisfied with equal weights.\n\nIn the third sample, Limak becomes larger than Bob after the first year. Their weights will be 3 and 2 then.",
        "task_name": "791_A. Bear and Big Brother",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def calcYears(w1, w2):\n    count = 0\n    while(w1 <= w2):\n        w1 = w1*3\n        w2 = w2*2\n        count += 1\n\n    return count\n\n\n\t \t   \t\t\t\t\t\t \t\t \t  \t\t\t\t  \t   \t\t",
        "correct": false,
        "task_id": "1298",
        "depth": 1
    },
    {
        "description": "Vladik often travels by trains. He remembered some of his trips especially well and I would like to tell you about one of these trips:\n\nVladik is at initial train station, and now n people (including Vladik) want to get on the train. They are already lined up in some order, and for each of them the city code ai is known (the code of the city in which they are going to).\n\nTrain chief selects some number of disjoint segments of the original sequence of people (covering entire sequence by segments is not necessary). People who are in the same segment will be in the same train carriage. The segments are selected in such way that if at least one person travels to the city x, then all people who are going to city x should be in the same railway carriage. This means that they can\u2019t belong to different segments. Note, that all people who travel to the city x, either go to it and in the same railway carriage, or do not go anywhere at all.\n\nComfort of a train trip with people on segment from position l to position r is equal to XOR of all distinct codes of cities for people on the segment from position l to position r. XOR operation also known as exclusive OR.\n\nTotal comfort of a train trip is equal to sum of comfort for each segment.\n\nHelp Vladik to know maximal possible total comfort.\n\nInput\n\nFirst line contains single integer n (1 \u2264 n \u2264 5000) \u2014 number of people.\n\nSecond line contains n space-separated integers a1, a2, ..., an (0 \u2264 ai \u2264 5000), where ai denotes code of the city to which i-th person is going.\n\nOutput\n\nThe output should contain a single integer \u2014 maximal possible total comfort.\n\nExamples\n\nInput\n\n6\n4 4 2 5 2 3\n\n\nOutput\n\n14\n\n\nInput\n\n9\n5 1 3 1 5 2 4 2 5\n\n\nOutput\n\n9\n\nNote\n\nIn the first test case best partition into segments is: [4, 4] [2, 5, 2] [3], answer is calculated as follows: 4 + (2 xor 5) + 3 = 4 + 7 + 3 = 14\n\nIn the second test case best partition into segments is: 5 1 [3] 1 5 [2, 4, 2] 5, answer calculated as follows: 3 + (2 xor 4) = 3 + 6 = 9.",
        "task_name": "811_C. Vladik and Memorable Trip",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(raw_input())\ntrain = list(map(int,raw_input().split()))\nstart = [9999]*5001\nend = [0]*5001\nfor i in range(n):\n    elm = train[i]\n    start[elm] = min(start[elm], i)\n    end[elm] = max(end[elm], i)\n\nsegstart = [(-float('inf'), -1)]*n # if I make a segment starting from i (if possible), the xor value and endpoint\nfor i in range(n):\n    elm = train[i]\n    if start[elm] != i: continue\n    if start[elm] == end[elm]:\n        segstart[i] = (elm, i)\n        continue\n    j = i\n    endpoint = end[elm]\n    xorval = 0\n    while j < endpoint:\n        if j == start[train[j]]:\n            endpoint = max(endpoint, end[train[j]])\n            xorval^= train[j]\n        elif start[train[j]] < i:\n            break\n        j+= 1\n    else:\n        segstart[i] = (xorval, j)\ndp = [0]*n # optimal value for 0..i\nfor i in range(n):\n    dp[i] = max(dp[i], dp[max(0,i-1)])\n    xorval, j = segstart[i]\n    if j == -1: continue\n    dp[j] = max(dp[j], dp[max(0,i-1)]+xorval)\nprint(dp[-1])",
        "correct": true,
        "task_id": "1299",
        "depth": 2
    },
    {
        "description": "Vasya has a graph containing both directed (oriented) and undirected (non-oriented) edges. There can be multiple edges between a pair of vertices.\n\nVasya has picked a vertex s from the graph. Now Vasya wants to create two separate plans:\n\n  1. to orient each undirected edge in one of two possible directions to maximize number of vertices reachable from vertex s; \n  2. to orient each undirected edge in one of two possible directions to minimize number of vertices reachable from vertex s. \n\n\n\nIn each of two plans each undirected edge must become directed. For an edge chosen directions can differ in two plans.\n\nHelp Vasya find the plans.\n\nInput\n\nThe first line contains three integers n, m and s (2 \u2264 n \u2264 3\u00b7105, 1 \u2264 m \u2264 3\u00b7105, 1 \u2264 s \u2264 n) \u2014 number of vertices and edges in the graph, and the vertex Vasya has picked.\n\nThe following m lines contain information about the graph edges. Each line contains three integers ti, ui and vi (1 \u2264 ti \u2264 2, 1 \u2264 ui, vi \u2264 n, ui \u2260 vi) \u2014 edge type and vertices connected by the edge. If ti = 1 then the edge is directed and goes from the vertex ui to the vertex vi. If ti = 2 then the edge is undirected and it connects the vertices ui and vi.\n\nIt is guaranteed that there is at least one undirected edge in the graph.\n\nOutput\n\nThe first two lines should describe the plan which maximizes the number of reachable vertices. The lines three and four should describe the plan which minimizes the number of reachable vertices.\n\nA description of each plan should start with a line containing the number of reachable vertices. The second line of a plan should consist of f symbols '+' and '-', where f is the number of undirected edges in the initial graph. Print '+' as the j-th symbol of the string if the j-th undirected edge (u, v) from the input should be oriented from u to v. Print '-' to signify the opposite direction (from v to u). Consider undirected edges to be numbered in the same order they are given in the input.\n\nIf there are multiple solutions, print any of them.\n\nExamples\n\nInput\n\n2 2 1\n1 1 2\n2 2 1\n\n\nOutput\n\n2\n-\n2\n+\n\n\nInput\n\n6 6 3\n2 2 6\n1 4 5\n2 3 4\n1 4 1\n1 3 1\n2 2 3\n\n\nOutput\n\n6\n++-\n2\n+-+",
        "task_name": "883_G. Orientation of Edges",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    s -= 1\n    x = [[] for i in range(n)]\n    un = []\n    j = 0\n    for i in range(m):\n        t, u, v = map(int, sys.stdin.readline().split())\n        u -= 1\n        v -= 1\n        if t == 1:\n            x[u].append([1, v, -1])\n        else:\n            x[u].append([2, v, j])\n            x[v].append([2, u, j])\n            un.append((u, v))\n            j += 1\n\n    q = [s]\n    u = [False] * n\n    u[s] = True\n    um = [False] * len(un)\n    b = ['-'] * len(un)\n    ci = 0\n    while ci < len(q):\n        c = q[ci]\n        ci += 1\n        for i in range(len(x[c])):\n            t, to, j = x[c][i]\n            if not u[to]:\n                if t == 1:\n                    q.append(to)\n                    u[to] = True\n                elif not um[j]:\n                    um[j] = True\n                    if c == un[j][0]:\n                        b[j] = '+'\n                    q.append(to)\n                    u[to] = True\n    a = 0\n    for i in range(n):\n        if u[i]:\n            a += 1\n    print(a)\n    print(''.join(b))\n\n    q = [s]\n    u = [False] * n\n    u[s] = True\n    um = [False] * len(un)\n    b = ['-'] * len(un)\n    ci = 0\n    while ci < len(q):\n        c = q[ci]\n        ci += 1\n        for i in range(len(x[c])):\n            t, to, j = x[c][i]\n            if not u[to]:\n                if t == 1:\n                    q.append(to)\n                    u[to] = True\n                elif not um[j]:\n                    um[j] = True\n                    if c != un[j][0]:\n                        b[j] = '+'\n    a = 0\n    for i in range(n):\n        if u[i]:\n            a += 1\n    print(a)\n    print(''.join(b))\n\n\nmain()\n",
        "correct": true,
        "task_id": "1302",
        "depth": 2
    },
    {
        "description": "Polycarp has a strict daily schedule. He has n alarms set for each day, and the i-th alarm rings each day at the same time during exactly one minute.\n\nDetermine the longest time segment when Polycarp can sleep, i. e. no alarm rings in that period. It is possible that Polycarp begins to sleep in one day, and wakes up in another.\n\nInput\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of alarms.\n\nEach of the next n lines contains a description of one alarm. Each description has a format \"hh:mm\", where hh is the hour when the alarm rings, and mm is the minute of that hour when the alarm rings. The number of hours is between 0 and 23, and the number of minutes is between 0 and 59. All alarm times are distinct. The order of the alarms is arbitrary.\n\nEach alarm starts ringing in the beginning of the corresponding minute and rings for exactly one minute (i. e. stops ringing in the beginning of the next minute). Polycarp can start sleeping instantly when no alarm is ringing, and he wakes up at the moment when some alarm starts ringing.\n\nOutput\n\nPrint a line in format \"hh:mm\", denoting the maximum time Polycarp can sleep continuously. hh denotes the number of hours, and mm denotes the number of minutes. The number of minutes should be between 0 and 59. Look through examples to understand the format better.\n\nExamples\n\nInput\n\n1\n05:43\n\n\nOutput\n\n23:59\n\n\nInput\n\n4\n22:00\n03:21\n16:03\n09:59\n\n\nOutput\n\n06:37\n\nNote\n\nIn the first example there is only one alarm which rings during one minute of a day, and then rings again on the next day, 23 hours and 59 minutes later. Polycarp can sleep all this time.",
        "task_name": "926_I. A Vital Problem",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from sys import stdin\nfrom itertools import repeat\nimport math\n\ndef main():\n    n = input()\n    a = []\n    \n    for i in range(n):\n        k = raw_input().split(\":\")\n        a.append(int(k[0]) * 60 + int(k[1]))\n    \n    max = 0\n    a = sorted(a)\n    \n    deck = 1\n    \n    for i in range(n - 1):\n        if a[i + 1] - a[i] - deck > max:\n            if a[i + 1] - a[i] == 1:\n                deck += 1\n            else:\n                deck = 1\n            max = a[i + 1] - a[i] - deck\n     \n    if 1440 - a[n - 1]  + a[0] - deck > max:\n        if 1440 - a[n - 1]  + a[0] == 1:\n            deck += 1\n        else:\n            deck = 1\n        max = 1440 - a[n - 1]  + a[0] - deck\n        \n    hours = int(math.ceil(max / 60))\n    \n    mins = max - hours * 60;\n    \n    hours_s = str(hours)\n    mins_s = str(mins)\n    \n    if hours < 10:\n        hours_s = \"0\" + hours_s\n    if mins < 10:\n        mins_s = \"0\" + mins_s\n    \n    print(hours_s + \":\" + mins_s)\n    \n    \n    \nmain()",
        "correct": true,
        "task_id": "1303",
        "depth": 1
    },
    {
        "description": "Overlooking the captivating blend of myriads of vernal hues, Arkady the painter lays out a long, long canvas.\n\nArkady has a sufficiently large amount of paint of three colours: cyan, magenta, and yellow. On the one-dimensional canvas split into n consecutive segments, each segment needs to be painted in one of the colours.\n\nArkady has already painted some (possibly none or all) segments and passes the paintbrush to you. You are to determine whether there are at least two ways of colouring all the unpainted segments so that no two adjacent segments are of the same colour. Two ways are considered different if and only if a segment is painted in different colours in them.\n\nInput\n\nThe first line contains a single positive integer n (1 \u2264 n \u2264 100) \u2014 the length of the canvas.\n\nThe second line contains a string s of n characters, the i-th of which is either 'C' (denoting a segment painted in cyan), 'M' (denoting one painted in magenta), 'Y' (one painted in yellow), or '?' (an unpainted one).\n\nOutput\n\nIf there are at least two different ways of painting, output \"Yes\"; otherwise output \"No\" (both without quotes).\n\nYou can print each character in any case (upper or lower).\n\nExamples\n\nInput\n\n5\nCY??Y\n\n\nOutput\n\nYes\n\n\nInput\n\n5\nC?C?Y\n\n\nOutput\n\nYes\n\n\nInput\n\n5\n?CYC?\n\n\nOutput\n\nYes\n\n\nInput\n\n5\nC??MM\n\n\nOutput\n\nNo\n\n\nInput\n\n3\nMMY\n\n\nOutput\n\nNo\n\nNote\n\nFor the first example, there are exactly two different ways of colouring: CYCMY and CYMCY.\n\nFor the second example, there are also exactly two different ways of colouring: CMCMY and CYCMY.\n\nFor the third example, there are four ways of colouring: MCYCM, MCYCY, YCYCM, and YCYCY.\n\nFor the fourth example, no matter how the unpainted segments are coloured, the existing magenta segments will prevent the painting from satisfying the requirements. The similar is true for the fifth example.",
        "task_name": "957_A. Tritonic Iridescence",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from __future__ import division\nfrom sys import stdin, stdout\n# from fractions import gcd\n# from math import *\n# from operator import mul\n# from functools import reduce\n# from copy import copy\nfrom collections import deque, defaultdict, Counter\n\nrstr = lambda: stdin.readline().strip()\nrstrs = lambda: [str(x) for x in stdin.readline().split()]\nrint = lambda: int(stdin.readline())\nrints = lambda: [int(x) for x in stdin.readline().split()]\nrstr_2d = lambda n: [rstr() for _ in range(n)]\nrint_2d = lambda n: [rint() for _ in range(n)]\nrints_2d = lambda n: [rints() for _ in range(n)]\npr = lambda args, sep: stdout.write(sep.join(map(str, args)) + '\\n')\nout = []\n\nn, s, cur, ans = int(input()), rstr(), 0, 'YES'\nif '?' in s:\n    valid = 0\n    for i in range(n):\n        if s[i] == '?':\n            cur += 1\n        else:\n            if i and s[i] == s[i - 1] and not cur:\n                valid = 0\n                break\n\n            if cur > 1 or i == cur or s[i] == s[i - 2]:\n                valid += 1\n\n            cur = 0\n\n    print('YES' if valid or cur else 'NO')\nelse:\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            print('NO')\n            exit()\n\n    print('YES')\n",
        "correct": false,
        "task_id": "1304",
        "depth": 1
    }
]