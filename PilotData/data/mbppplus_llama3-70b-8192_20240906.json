[
    {
        "task_id": "Mbpp/6",
        "specification": "Write a python function to check whether the two numbers differ at one bit position only or not.",
        "generated_code": "def differ_At_One_Bit_Pos(a, b):\n    return bin(a ^ b).count('1') == 1\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/6",
            "tests": [
                {
                    "test": "assert differ_At_One_Bit_Pos(13,9) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert differ_At_One_Bit_Pos(15,8) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert differ_At_One_Bit_Pos(2,4) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert differ_At_One_Bit_Pos(2, 3) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert differ_At_One_Bit_Pos(5, 1) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert differ_At_One_Bit_Pos(1, 5) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/7",
        "specification": "Write a function to find all words which are at least 4 characters long in a string.",
        "generated_code": "def find_char_long(s: str) -> list:\n    return [word for word in s.split() if len(word) >= 4]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/7",
            "tests": [
                {
                    "test": "assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])",
                    "status": "Passed"
                },
                {
                    "test": "assert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])",
                    "status": "Passed"
                },
                {
                    "test": "assert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/8",
        "specification": "Write a function to find squares of individual elements in a list.",
        "generated_code": "def square_nums(nums):\n    return [num ** 2 for num in nums]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/8",
            "tests": [
                {
                    "test": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
                    "status": "Passed"
                },
                {
                    "test": "assert square_nums([10,20,30])==([100,400,900])",
                    "status": "Passed"
                },
                {
                    "test": "assert square_nums([12,15])==([144,225])",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/9",
        "specification": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "generated_code": "def find_Rotations(s: str) -> int:\n    for i in range(1, len(s)):\n        if s == s[i:] + s[:i]:\n            return i\n    return len(s)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/9",
            "tests": [
                {
                    "test": "assert find_Rotations(\"aaaa\") == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert find_Rotations(\"ab\") == 2",
                    "status": "Passed"
                },
                {
                    "test": "assert find_Rotations(\"abc\") == 3",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/11",
        "specification": "Write a python function to remove first and last occurrence of a given character from the string.",
        "generated_code": "def remove_Occ(s, c):\n    first_occurrence = s.find(c)\n    last_occurrence = s.rfind(c)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        if first_occurrence == last_occurrence:\n            return s.replace(c, '', 1)\n        else:\n            s = s[:first_occurrence] + s[first_occurrence+1:]\n            s = s[:last_occurrence] + s[last_occurrence+1:]\n            return s\n    else:\n        return s\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/11",
            "tests": [],
            "errors": [
                {
                    "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\nAssertionError"
                },
                {
                    "test": "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\nAssertionError"
                },
                {
                    "test": "assert remove_Occ(\"PHP\",\"P\") == \"H\"",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/12",
        "specification": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "generated_code": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/12",
            "tests": [
                {
                    "test": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
                    "status": "Passed"
                },
                {
                    "test": "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
                    "status": "Passed"
                },
                {
                    "test": "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/14",
        "specification": "Write a python function to find the volume of a triangular prism.",
        "generated_code": "def find_Volume(a, b, h):\n    return (a * b * h) // 2\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/14",
            "tests": [
                {
                    "test": "assert find_Volume(10,8,6) == 240",
                    "status": "Passed"
                },
                {
                    "test": "assert find_Volume(3,2,2) == 6",
                    "status": "Passed"
                },
                {
                    "test": "assert find_Volume(1,2,1) == 1",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/16",
        "specification": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "generated_code": "def text_lowercase_underscore(s):\n    return s.replace(\"_\", \"\").islower()\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/16",
            "tests": [
                {
                    "test": "assert text_lowercase_underscore(\"aab_cbbbc\")==(True)",
                    "status": "Passed"
                },
                {
                    "test": "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)",
                    "status": "Passed"
                },
                {
                    "test": "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/17",
        "specification": "Write a function that returns the perimeter of a square given its side length as input.",
        "generated_code": "def square_perimeter(side_length: int) -> int:\n    \"\"\"\n    This function calculates the perimeter of a square given its side length.\n\n    Args:\n        side_length (int): The length of one side of the square.\n\n    Returns:\n        int: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/17",
            "tests": [
                {
                    "test": "assert square_perimeter(10)==40",
                    "status": "Passed"
                },
                {
                    "test": "assert square_perimeter(5)==20",
                    "status": "Passed"
                },
                {
                    "test": "assert square_perimeter(4)==16",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/18",
        "specification": "Write a function to remove characters from the first string which are present in the second string.",
        "generated_code": "def remove_dirty_chars(s1, s2):\n    s2_set = set(s2)\n    return ''.join(c for c in s1 if c not in s2_set)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/18",
            "tests": [
                {
                    "test": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/19",
        "specification": "Write a function to find whether a given array of integers contains any duplicate element.",
        "generated_code": "def test_duplicate(lst):\n    return len(lst) != len(set(lst))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/19",
            "tests": [
                {
                    "test": "assert test_duplicate(([1,2,3,4,5]))==False",
                    "status": "Passed"
                },
                {
                    "test": "assert test_duplicate(([1,2,3,4, 4]))==True",
                    "status": "Passed"
                },
                {
                    "test": "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/20",
        "specification": "Write a function to check if the given number is woodball or not.",
        "generated_code": "def is_woodall(n):\n    import math\n    for i in range(1, n):\n        if i * (2 ** i) + 1 == n:\n            return True\n    return False\n",
        "pass_rate": 0.6666666666666666,
        "test_results": {
            "task_id": "Mbpp/20",
            "tests": [
                {
                    "test": "assert is_woodall(254) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert is_woodall(200) == False",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert is_woodall(383) == True",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 8, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/56",
        "specification": "Write a python function to check if a given number is one less than twice its reverse.",
        "generated_code": "def check(n: int) -> bool:\n    reversed_num = int(str(n)[::-1])\n    return n + 1 == 2 * reversed_num\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/56",
            "tests": [
                {
                    "test": "assert check(70) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert check(23) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert check(73) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/57",
        "specification": "Write a python function to find the largest number that can be formed with the given list of digits.",
        "generated_code": "def find_Max_Num(digits):\n    return int(''.join(map(str, sorted(digits, reverse=True))))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/57",
            "tests": [
                {
                    "test": "assert find_Max_Num([1,2,3]) == 321",
                    "status": "Passed"
                },
                {
                    "test": "assert find_Max_Num([4,5,6,1]) == 6541",
                    "status": "Passed"
                },
                {
                    "test": "assert find_Max_Num([1,2,3,9]) == 9321",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/58",
        "specification": "Write a python function to check whether the given two integers have opposite sign or not.",
        "generated_code": "def opposite_Signs(a, b):\n    return (a > 0 and b < 0) or (a < 0 and b > 0)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/58",
            "tests": [
                {
                    "test": "assert opposite_Signs(1,-2) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert opposite_Signs(3,2) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert opposite_Signs(-10,-10) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert opposite_Signs(-2,2) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/59",
        "specification": "Write a function to find the nth octagonal number.",
        "generated_code": "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/59",
            "tests": [
                {
                    "test": "assert is_octagonal(5) == 65",
                    "status": "Passed"
                },
                {
                    "test": "assert is_octagonal(10) == 280",
                    "status": "Passed"
                },
                {
                    "test": "assert is_octagonal(15) == 645",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/61",
        "specification": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
        "generated_code": "def count_Substrings(s: str) -> int:\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/61",
            "tests": [
                {
                    "test": "assert count_Substrings('112112') == 6",
                    "status": "Passed"
                },
                {
                    "test": "assert count_Substrings('111') == 6",
                    "status": "Passed"
                },
                {
                    "test": "assert count_Substrings('1101112') == 12",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/62",
        "specification": "Write a python function to find smallest number in a list.",
        "generated_code": "def smallest_num(nums):\n    return min(nums)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/62",
            "tests": [
                {
                    "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert smallest_num([1, 2, 3]) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert smallest_num([45, 46, 50, 60]) == 45",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/63",
        "specification": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "generated_code": "def max_difference(pairs):\n    return max(y - x for x, y in pairs)\n",
        "pass_rate": 0.6666666666666666,
        "test_results": {
            "task_id": "Mbpp/63",
            "tests": [
                {
                    "test": "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
                    "status": "Passed"
                },
                {
                    "test": "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/64",
        "specification": "Write a function to sort a list of tuples using the second value of each tuple.",
        "generated_code": "def subject_marks(marks_list):\n    return sorted(marks_list, key=lambda x: x[1])\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/64",
            "tests": [
                {
                    "test": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
                    "status": "Passed"
                },
                {
                    "test": "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
                    "status": "Passed"
                },
                {
                    "test": "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/65",
        "specification": "Write a function to flatten a list and sum all of its elements.",
        "generated_code": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/65",
            "tests": [
                {
                    "test": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
                    "status": "Passed"
                },
                {
                    "test": "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
                    "status": "Passed"
                },
                {
                    "test": "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/66",
        "specification": "Write a python function to count the number of positive numbers in a list.",
        "generated_code": "def pos_count(lst):\n    return len([x for x in lst if x > 0])\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/66",
            "tests": [
                {
                    "test": "assert pos_count([1,-2,3,-4]) == 2",
                    "status": "Passed"
                },
                {
                    "test": "assert pos_count([3,4,5,-1]) == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert pos_count([1,2,3,4]) == 4",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/67",
        "specification": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "generated_code": "def bell_number(n):\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][n]\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/67",
            "tests": [],
            "errors": [
                {
                    "test": "assert bell_number(2)==2",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                },
                {
                    "test": "assert bell_number(10)==115975",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                },
                {
                    "test": "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/68",
        "specification": "Write a python function to check whether the given array is monotonic or not.",
        "generated_code": "def is_Monotonic(arr):\n    increasing = decreasing = True\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            decreasing = False\n        if arr[i] > arr[i + 1]:\n            increasing = False\n    return increasing or decreasing\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/68",
            "tests": [
                {
                    "test": "assert is_Monotonic([6, 5, 4, 4]) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert is_Monotonic([1, 2, 2, 3]) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert is_Monotonic([1, 3, 2]) == False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/69",
        "specification": "Write a function to check whether a list contains the given sublist or not.",
        "generated_code": "def is_sublist(lst, sublst):\n    lst_str = ''.join(str(i) for i in lst)\n    sublst_str = ''.join(str(i) for i in sublst)\n    return sublst_str in lst_str\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/69",
            "tests": [
                {
                    "test": "assert is_sublist([2,4,3,5,7],[3,7])==False",
                    "status": "Passed"
                },
                {
                    "test": "assert is_sublist([2,4,3,5,7],[4,3])==True",
                    "status": "Passed"
                },
                {
                    "test": "assert is_sublist([2,4,3,5,7],[1,6])==False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/70",
        "specification": "Write a function to find whether all the given tuples have equal length or not.",
        "generated_code": "def get_equal(tuples):\n    return len(set(len(t) for t in tuples)) == 1\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/70",
            "tests": [
                {
                    "test": "assert get_equal([(11, 22, 33), (44, 55, 66)]) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert get_equal([(1, 2), (3, 4)]) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/71",
        "specification": "Write a function to sort a list of elements.",
        "generated_code": "def comb_sort(nums):\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    gap = len(nums)\n    shrink = 1.3\n\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                swap(i, i + gap)\n                sorted = False\n            i += 1\n\n    return nums\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/71",
            "tests": [
                {
                    "test": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
                    "status": "Passed"
                },
                {
                    "test": "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
                    "status": "Passed"
                },
                {
                    "test": "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/72",
        "specification": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
        "generated_code": "def dif_Square(n: int) -> bool:\n    i = 1\n    while i * i <= n:\n        if (i * i + n) ** 0.5 == int((i * i + n) ** 0.5):\n            return True\n        i += 1\n    return False\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/72",
            "tests": [
                {
                    "test": "assert dif_Square(5) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert dif_Square(10) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert dif_Square(15) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/74",
        "specification": "Write a function to check whether it follows the sequence given in the patterns array.",
        "generated_code": "def is_samepatterns(arr1, arr2):\n    if len(arr1) != len(arr2):\n        return False\n    pattern_dict = {}\n    for i in range(len(arr1)):\n        if arr1[i] not in pattern_dict:\n            pattern_dict[arr1[i]] = arr2[i]\n        elif pattern_dict[arr1[i]] != arr2[i]:\n            return False\n    return True\n",
        "pass_rate": 0.6666666666666666,
        "test_results": {
            "task_id": "Mbpp/74",
            "tests": [
                {
                    "test": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True",
                    "status": "Passed"
                },
                {
                    "test": "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/75",
        "specification": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "generated_code": "def find_tuples(tuples_list, k):\n    return [t for t in tuples_list if all(i % k == 0 for i in t)]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/75",
            "tests": [
                {
                    "test": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]",
                    "status": "Passed"
                },
                {
                    "test": "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]",
                    "status": "Passed"
                },
                {
                    "test": "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/77",
        "specification": "Write a python function to find whether a number is divisible by 11.",
        "generated_code": "def is_Diff(n):\n    n = str(n)\n    sum_even = sum(int(i) for i in n[::2])\n    sum_odd = sum(int(i) for i in n[1::2])\n    return (sum_even - sum_odd) % 11 == 0\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/77",
            "tests": [
                {
                    "test": "assert is_Diff (12345) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert is_Diff(1212112) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert is_Diff(1212) == False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/79",
        "specification": "Write a python function to check whether the length of the word is odd or not.",
        "generated_code": "def word_len(word: str) -> bool:\n    return len(word) % 2 != 0\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/79",
            "tests": [
                {
                    "test": "assert word_len(\"Hadoop\") == False",
                    "status": "Passed"
                },
                {
                    "test": "assert word_len(\"great\") == True",
                    "status": "Passed"
                },
                {
                    "test": "assert word_len(\"structure\") == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/80",
        "specification": "Write a function to find the nth tetrahedral number.",
        "generated_code": "def tetrahedral_number(n: int) -> int:\n    return n * (n + 1) * (n + 2) // 6\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/80",
            "tests": [
                {
                    "test": "assert tetrahedral_number(5) == 35",
                    "status": "Passed"
                },
                {
                    "test": "assert tetrahedral_number(6) == 56",
                    "status": "Passed"
                },
                {
                    "test": "assert tetrahedral_number(7) == 84",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/82",
        "specification": "Write a function to find the volume of a sphere.",
        "generated_code": "import math\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/82",
            "tests": [
                {
                    "test": "import math",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/84",
        "specification": "Write a function to find the nth number in the newman conway sequence.",
        "generated_code": "def sequence(n):\n    seq = [1]\n    for _ in range(1, n):\n        seq.append(sum(int(digit) for digit in str(seq[-1])))\n    return seq[-1]\n",
        "pass_rate": 0.3333333333333333,
        "test_results": {
            "task_id": "Mbpp/84",
            "tests": [
                {
                    "test": "assert sequence(2) == 1",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert sequence(10) == 6",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 7, in <module>\nAssertionError"
                },
                {
                    "test": "assert sequence(3) == 2",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 7, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/85",
        "specification": "Write a function to find the surface area of a sphere.",
        "generated_code": "import math\n\ndef surfacearea_sphere(radius: float) -> float:\n    return 4 * math.pi * (radius ** 2)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/85",
            "tests": [
                {
                    "test": "import math",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/86",
        "specification": "Write a function to find nth centered hexagonal number.",
        "generated_code": "def centered_hexagonal_number(n):\n    return n * (3 * n * n - 2 * n + 1) // 2\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/86",
            "tests": [],
            "errors": [
                {
                    "test": "assert centered_hexagonal_number(10) == 271",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert centered_hexagonal_number(2) == 7",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert centered_hexagonal_number(9) == 217",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/87",
        "specification": "Write a function to merge three dictionaries into a single dictionary.",
        "generated_code": "def merge_dictionaries_three(dict1, dict2, dict3):\n    return {**dict1, **dict2, **dict3}\n",
        "pass_rate": 0.3333333333333333,
        "test_results": {
            "task_id": "Mbpp/87",
            "tests": [
                {
                    "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/88",
        "specification": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
        "generated_code": "def freq_count(lst):\n    return {i: lst.count(i) for i in set(lst)}\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/88",
            "tests": [
                {
                    "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})",
                    "status": "Passed"
                },
                {
                    "test": "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})",
                    "status": "Passed"
                },
                {
                    "test": "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/89",
        "specification": "Write a function to find the closest smaller number than n.",
        "generated_code": "def closest_num(n: int) -> int:\n    return n - 1\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/89",
            "tests": [
                {
                    "test": "assert closest_num(11) == 10",
                    "status": "Passed"
                },
                {
                    "test": "assert closest_num(7) == 6",
                    "status": "Passed"
                },
                {
                    "test": "assert closest_num(12) == 11",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/90",
        "specification": "Write a python function to find the length of the longest word.",
        "generated_code": "def len_log(words):\n    return max(len(word) for word in words)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/90",
            "tests": [
                {
                    "test": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
                    "status": "Passed"
                },
                {
                    "test": "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert len_log([\"small\",\"big\",\"tall\"]) == 5",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/91",
        "specification": "Write a function to check if a string is present as a substring in a given list of string values.",
        "generated_code": "def find_substring(lst, sub):\n    for string in lst:\n        if sub in string:\n            return True\n    return False\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/91",
            "tests": [
                {
                    "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
                    "status": "Passed"
                },
                {
                    "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
                    "status": "Passed"
                },
                {
                    "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/92",
        "specification": "Write a function to check whether the given number is undulating or not.",
        "generated_code": "def is_undulating(n: int) -> bool:\n    n_str = str(n)\n    if len(n_str) < 2:\n        return False\n    diff = int(n_str[1]) - int(n_str[0])\n    for i in range(2, len(n_str)):\n        if int(n_str[i]) - int(n_str[i-1]) != diff:\n            return False\n    return True\n",
        "pass_rate": 0.3333333333333333,
        "test_results": {
            "task_id": "Mbpp/92",
            "tests": [
                {
                    "test": "assert is_undulating(1991) == False",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert is_undulating(1212121) == True",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 11, in <module>\nAssertionError"
                },
                {
                    "test": "assert is_undulating(121) == True",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 11, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/93",
        "specification": "Write a function to calculate the value of 'a' to the power 'b'.",
        "generated_code": "def power(a, b):\n    return a ** b\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/93",
            "tests": [
                {
                    "test": "assert power(3,4) == 81",
                    "status": "Passed"
                },
                {
                    "test": "assert power(2,3) == 8",
                    "status": "Passed"
                },
                {
                    "test": "assert power(5,5) == 3125",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/94",
        "specification": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
        "generated_code": "def index_minimum(tuples):\n    return min(tuples, key=lambda x: x[1])[0]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/94",
            "tests": [
                {
                    "test": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
                    "status": "Passed"
                },
                {
                    "test": "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
                    "status": "Passed"
                },
                {
                    "test": "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/95",
        "specification": "Write a python function to find the length of the smallest list in a list of lists.",
        "generated_code": "def Find_Min_Length(list_of_lists):\n    return min(len(sublist) for sublist in list_of_lists)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/95",
            "tests": [
                {
                    "test": "assert Find_Min_Length([[1],[1,2]]) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
                    "status": "Passed"
                },
                {
                    "test": "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/96",
        "specification": "Write a python function to find the number of divisors of a given integer.",
        "generated_code": "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/96",
            "tests": [
                {
                    "test": "assert divisor(15) == 4",
                    "status": "Passed"
                },
                {
                    "test": "assert divisor(12) == 6",
                    "status": "Passed"
                },
                {
                    "test": "assert divisor(9) == 3",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/97",
        "specification": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
        "generated_code": "def frequency_lists(lists):\n    flat_list = [element for sublist in lists for element in sublist]\n    frequency_dict = {}\n    for element in flat_list:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/97",
            "tests": [
                {
                    "test": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
                    "status": "Passed"
                },
                {
                    "test": "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
                    "status": "Passed"
                },
                {
                    "test": "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/98",
        "specification": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "generated_code": "import math\ndef multiply_num(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product / len(nums)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/98",
            "tests": [
                {
                    "test": "import math",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/99",
        "specification": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "generated_code": "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/99",
            "tests": [
                {
                    "test": "assert decimal_to_binary(8) == '1000'",
                    "status": "Passed"
                },
                {
                    "test": "assert decimal_to_binary(18) == '10010'",
                    "status": "Passed"
                },
                {
                    "test": "assert decimal_to_binary(7) == '111'",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/100",
        "specification": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "generated_code": "def next_smallest_palindrome(n: int) -> int:\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n\ndef is_palindrome(n: int) -> bool:\n    return str(n) == str(n)[::-1]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/100",
            "tests": [
                {
                    "test": "assert next_smallest_palindrome(99)==101",
                    "status": "Passed"
                },
                {
                    "test": "assert next_smallest_palindrome(1221)==1331",
                    "status": "Passed"
                },
                {
                    "test": "assert next_smallest_palindrome(120)==121",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/101",
        "specification": "Write a function to find the kth element in the given array using 1-based indexing.",
        "generated_code": "def kth_element(array, k):\n    return sorted(array)[k-1]\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/101",
            "tests": [],
            "errors": [
                {
                    "test": "assert kth_element([12,3,5,7,19], 2) == 3",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert kth_element([17,24,8,23], 3) == 8",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert kth_element([16,21,25,36,4], 4) == 36",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/102",
        "specification": "Write a function to convert a snake case string to camel case string.",
        "generated_code": "def snake_to_camel(s):\n    components = s.split('_')\n    return components[0].title() + ''.join(x.title() for x in components[1:])\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/102",
            "tests": [
                {
                    "test": "assert snake_to_camel('python_program')=='PythonProgram'",
                    "status": "Passed"
                },
                {
                    "test": "assert snake_to_camel('python_language')==('PythonLanguage')",
                    "status": "Passed"
                },
                {
                    "test": "assert snake_to_camel('programming_language')==('ProgrammingLanguage')",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/103",
        "specification": "Write a function to find the Eulerian number a(n, m).",
        "generated_code": "def eulerian_num(n, m):\n    if n == 1:\n        return 1\n    else:\n        return (n - m + 1) * eulerian_num(n - 1, m - 1) + m * eulerian_num(n - 1, m)\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/103",
            "tests": [],
            "errors": [
                {
                    "test": "assert eulerian_num(3, 1) == 4",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 7, in <module>\nAssertionError"
                },
                {
                    "test": "assert eulerian_num(4, 1) == 11",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 7, in <module>\nAssertionError"
                },
                {
                    "test": "assert eulerian_num(5, 3) == 26",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 7, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/104",
        "specification": "Write a function to sort each sublist of strings in a given list of lists.",
        "generated_code": "def sort_sublists(list_of_lists):\n    return [sorted(sublist, key=str.strip) for sublist in list_of_lists]\n",
        "pass_rate": 0.6666666666666666,
        "test_results": {
            "task_id": "Mbpp/104",
            "tests": [
                {
                    "test": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
                    "status": "Passed"
                },
                {
                    "test": "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/105",
        "specification": "Write a python function to count true booleans in the given list.",
        "generated_code": "def count(bool_list):\n    return sum(1 for elem in bool_list if elem)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/105",
            "tests": [
                {
                    "test": "assert count([True,False,True]) == 2",
                    "status": "Passed"
                },
                {
                    "test": "assert count([False,False]) == 0",
                    "status": "Passed"
                },
                {
                    "test": "assert count([True,True,True]) == 3",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/106",
        "specification": "Write a function to append the given list to the given tuples.",
        "generated_code": "def add_lists(lst, tup):\n    return tup + tuple(lst)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/106",
            "tests": [
                {
                    "test": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
                    "status": "Passed"
                },
                {
                    "test": "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
                    "status": "Passed"
                },
                {
                    "test": "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/108",
        "specification": "Write a function to merge three lists into a single sorted list.",
        "generated_code": "def merge_sorted_list(list1, list2, list3):\n    return sorted(list1 + list2 + list3)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/108",
            "tests": [
                {
                    "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
                    "status": "Passed"
                },
                {
                    "test": "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
                    "status": "Passed"
                },
                {
                    "test": "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/109",
        "specification": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "generated_code": "def odd_Equivalent(s, n):\n    s = s * (n // len(s) + 1)\n    s = s[:n]\n    count = 0\n    for i in range(n):\n        temp = s[i:] + s[:i]\n        count += temp.count('1') % 2\n    return count\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/109",
            "tests": [],
            "errors": [
                {
                    "test": "assert odd_Equivalent(\"011001\",6) == 3",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                },
                {
                    "test": "assert odd_Equivalent(\"11011\",5) == 4",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                },
                {
                    "test": "assert odd_Equivalent(\"1010\",4) == 2",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/111",
        "specification": "Write a function to find the common elements in given nested lists.",
        "generated_code": "def common_in_nested_lists(nested_lists):\n    sets = [set(lst) for lst in nested_lists]\n    common_elements = set.intersection(*sets)\n    return list(common_elements)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/111",
            "tests": [
                {
                    "test": "assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])",
                    "status": "Passed"
                },
                {
                    "test": "assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])",
                    "status": "Passed"
                },
                {
                    "test": "assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/113",
        "specification": "Write a function to check if a string represents an integer or not.",
        "generated_code": "def check_integer(s: str) -> bool:\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/113",
            "tests": [
                {
                    "test": "assert check_integer(\"python\")==False",
                    "status": "Passed"
                },
                {
                    "test": "assert check_integer(\"1\")==True",
                    "status": "Passed"
                },
                {
                    "test": "assert check_integer(\"12345\")==True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/116",
        "specification": "Write a function to convert a given tuple of positive integers into a single integer.",
        "generated_code": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/116",
            "tests": [
                {
                    "test": "assert tuple_to_int((1,2,3))==123",
                    "status": "Passed"
                },
                {
                    "test": "assert tuple_to_int((4,5,6))==456",
                    "status": "Passed"
                },
                {
                    "test": "assert tuple_to_int((5,6,7))==567",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/118",
        "specification": "Write a function to convert a string to a list of strings split on the space character.",
        "generated_code": "def string_to_list(s: str) -> list:\n    return s.split()\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/118",
            "tests": [
                {
                    "test": "assert string_to_list(\"python programming\")==['python','programming']",
                    "status": "Passed"
                },
                {
                    "test": "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
                    "status": "Passed"
                },
                {
                    "test": "assert string_to_list(\"write a program\")==['write','a','program']",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/119",
        "specification": "Write a python function to find the element that appears only once in a sorted array.",
        "generated_code": "def search(nums):\n    for i in range(len(nums)):\n        if nums.count(nums[i]) == 1:\n            return nums[i]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/119",
            "tests": [
                {
                    "test": "assert search([1,1,2,2,3]) == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8",
                    "status": "Passed"
                },
                {
                    "test": "assert search([1,2,2,3,3,4,4]) == 1",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/120",
        "specification": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
        "generated_code": "def max_product_tuple(tuples_list):\n    return max(abs(a * b) for a, b in tuples_list)\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/120",
            "tests": [],
            "errors": [
                {
                    "test": "assert math.isclose(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]), 36, rel_tol=0.001)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nNameError: name 'math' is not defined"
                },
                {
                    "test": "assert math.isclose(max_product_tuple([(10,20), (15,2), (5,10)] ), 200, rel_tol=0.001)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nNameError: name 'math' is not defined"
                },
                {
                    "test": "assert math.isclose(max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] ), 484, rel_tol=0.001)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nNameError: name 'math' is not defined"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/123",
        "specification": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "generated_code": "def sum_of_divisors(n):\n    sum_div = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i != n:\n                sum_div += i + n // i\n            else:\n                sum_div += i\n    return sum_div\n\ndef amicable_numbers_sum(n):\n    amicable_nums = []\n    for num in range(2, n):\n        sum_div_num = sum_of_divisors(num)\n        if sum_div_num != num and num == sum_of_divisors(sum_div_num):\n            amicable_nums.append(num)\n    return sum(amicable_nums)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/123",
            "tests": [
                {
                    "test": "assert amicable_numbers_sum(999)==504",
                    "status": "Passed"
                },
                {
                    "test": "assert amicable_numbers_sum(9999)==31626",
                    "status": "Passed"
                },
                {
                    "test": "assert amicable_numbers_sum(99)==0",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/124",
        "specification": "Write a function to get the angle of a complex number.",
        "generated_code": "import math\nimport cmath\n\ndef angle_complex(real, imag):\n    complex_num = complex(real, imag)\n    return cmath.phase(complex_num)\n",
        "pass_rate": 0.25,
        "test_results": {
            "task_id": "Mbpp/124",
            "tests": [
                {
                    "test": "import math",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 8, in <module>\nAssertionError"
                },
                {
                    "test": "assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 8, in <module>\nAssertionError"
                },
                {
                    "test": "assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 8, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/125",
        "specification": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "generated_code": "def find_length(s: str) -> int:\n    max_diff = 0\n    zeros = 0\n    ones = 0\n    for char in s:\n        if char == '0':\n            zeros += 1\n        else:\n            ones += 1\n        max_diff = max(max_diff, abs(zeros - ones))\n    return max_diff\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/125",
            "tests": [],
            "errors": [
                {
                    "test": "assert find_length(\"11000010001\") == 6",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\nAssertionError"
                },
                {
                    "test": "assert find_length(\"10111\") == 1",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\nAssertionError"
                },
                {
                    "test": "assert find_length(\"11011101100101\") == 2",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/126",
        "specification": "Write a python function to find the sum of common divisors of two given numbers.",
        "generated_code": "def sum(a, b):\n    common_divisors = [i for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0]\n    return sum(common_divisors)\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/126",
            "tests": [],
            "errors": [
                {
                    "test": "assert sum(10,15) == 6",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 5, in <module>\n  File \"<string>\", line 3, in sum\nTypeError: sum() missing 1 required positional argument: 'b'"
                },
                {
                    "test": "assert sum(100,150) == 93",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 5, in <module>\n  File \"<string>\", line 3, in sum\nTypeError: sum() missing 1 required positional argument: 'b'"
                },
                {
                    "test": "assert sum(4,6) == 3",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 5, in <module>\n  File \"<string>\", line 3, in sum\nTypeError: sum() missing 1 required positional argument: 'b'"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/127",
        "specification": "Write a function to multiply two integers.",
        "generated_code": "def multiply_int(a, b):\n    return a * b\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/127",
            "tests": [
                {
                    "test": "assert multiply_int(10,20)==200",
                    "status": "Passed"
                },
                {
                    "test": "assert multiply_int(5,10)==50",
                    "status": "Passed"
                },
                {
                    "test": "assert multiply_int(4,8)==32",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/128",
        "specification": "Write a function to find words that are longer than n characters from a given list of words.",
        "generated_code": "def long_words(n, sentence):\n    words = sentence.split()\n    return [word for word in words if len(word) > n]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/128",
            "tests": [
                {
                    "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
                    "status": "Passed"
                },
                {
                    "test": "assert long_words(2,\"writing a program\")==['writing','program']",
                    "status": "Passed"
                },
                {
                    "test": "assert long_words(5,\"sorting list\")==['sorting']",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/129",
        "specification": "Write a function to calculate whether the matrix is a magic square.",
        "generated_code": "def magic_square_test(matrix):\n    n = len(matrix)\n    expected_sum = n * (n**2 + 1) // 2\n    for row in matrix:\n        if sum(row) != expected_sum:\n            return False\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != expected_sum:\n            return False\n    if sum(matrix[i][i] for i in range(n)) != expected_sum:\n        return False\n    if sum(matrix[i][n-i-1] for i in range(n)) != expected_sum:\n        return False\n    return True\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/129",
            "tests": [
                {
                    "test": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
                    "status": "Passed"
                },
                {
                    "test": "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
                    "status": "Passed"
                },
                {
                    "test": "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/130",
        "specification": "Write a function to find the item with maximum frequency in a given list.",
        "generated_code": "def max_occurrences(lst):\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return max(freq_dict, key=freq_dict.get)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/130",
            "tests": [
                {
                    "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2",
                    "status": "Passed"
                },
                {
                    "test": "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8",
                    "status": "Passed"
                },
                {
                    "test": "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/131",
        "specification": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
        "generated_code": "def reverse_vowels(s: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left, right = left + 1, right - 1\n    return \"\".join(s)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/131",
            "tests": [
                {
                    "test": "assert reverse_vowels(\"Python\") == \"Python\"",
                    "status": "Passed"
                },
                {
                    "test": "assert reverse_vowels(\"USA\") == \"ASU\"",
                    "status": "Passed"
                },
                {
                    "test": "assert reverse_vowels(\"ab\") == \"ab\"",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/132",
        "specification": "Write a function to convert a tuple to a string.",
        "generated_code": "def tup_string(tup):\n    return ''.join(tup)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/132",
            "tests": [
                {
                    "test": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
                    "status": "Passed"
                },
                {
                    "test": "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
                    "status": "Passed"
                },
                {
                    "test": "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/133",
        "specification": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
        "generated_code": "def sum_negativenum(lst):\n    return sum(i for i in lst if i < 0)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/133",
            "tests": [
                {
                    "test": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/135",
        "specification": "Write a function to find the nth hexagonal number.",
        "generated_code": "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/135",
            "tests": [
                {
                    "test": "assert hexagonal_num(10) == 190",
                    "status": "Passed"
                },
                {
                    "test": "assert hexagonal_num(5) == 45",
                    "status": "Passed"
                },
                {
                    "test": "assert hexagonal_num(7) == 91",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/137",
        "specification": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.",
        "generated_code": "def zero_count(arr):\n    zero_ctr = sum(1 for x in arr if x == 0)\n    non_zero_ctr = len(arr) - zero_ctr\n    if non_zero_ctr == 0:\n        return 0\n    return zero_ctr / non_zero_ctr\n",
        "pass_rate": 0.25,
        "test_results": {
            "task_id": "Mbpp/137",
            "tests": [
                {
                    "test": "import math",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 8, in <module>\nNameError: name 'math' is not defined"
                },
                {
                    "test": "assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 8, in <module>\nNameError: name 'math' is not defined"
                },
                {
                    "test": "assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 8, in <module>\nNameError: name 'math' is not defined"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/138",
        "specification": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "generated_code": "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    bin_str = bin(n)[2:]\n    return all(c == '0' for c in bin_str) or any(c == '1' for i, c in enumerate(bin_str) if bin_str[i+1:] == '0' * (len(bin_str) - i - 1))\n",
        "pass_rate": 0.6666666666666666,
        "test_results": {
            "task_id": "Mbpp/138",
            "tests": [
                {
                    "test": "assert is_Sum_Of_Powers_Of_Two(10) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert is_Sum_Of_Powers_Of_Two(14) == True",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert is_Sum_Of_Powers_Of_Two(7) == False",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 5, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/139",
        "specification": "Write a function to find the circumference of a circle.",
        "generated_code": "import math\n\ndef circle_circumference(radius: float) -> float:\n    return 2 * math.pi * radius\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/139",
            "tests": [
                {
                    "test": "import math",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/140",
        "specification": "Write a function to flatten the list of lists into a single set of numbers.",
        "generated_code": "def extract_singly(list_of_tuples):\n    return set.union(*map(set, list_of_tuples))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/140",
            "tests": [
                {
                    "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == set([3, 4, 5, 7, 1])",
                    "status": "Passed"
                },
                {
                    "test": "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == set([1, 2, 3, 4, 7, 8])",
                    "status": "Passed"
                },
                {
                    "test": "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == set([7, 8, 9, 10, 11, 12])",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/141",
        "specification": "Write a function to sort a list of elements.",
        "generated_code": "def pancake_sort(nums):\n    return sorted(nums)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/141",
            "tests": [
                {
                    "test": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
                    "status": "Passed"
                },
                {
                    "test": "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
                    "status": "Passed"
                },
                {
                    "test": "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/142",
        "specification": "Write a function to count number items that are identical in the same position of three given lists.",
        "generated_code": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/142",
            "tests": [
                {
                    "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
                    "status": "Passed"
                },
                {
                    "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
                    "status": "Passed"
                },
                {
                    "test": "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/145",
        "specification": "Write a python function to find the maximum difference between any two elements in a given array.",
        "generated_code": "def max_Abs_Diff(arr):\n    return max(arr) - min(arr)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/145",
            "tests": [
                {
                    "test": "assert max_Abs_Diff((2,1,5,3)) == 4",
                    "status": "Passed"
                },
                {
                    "test": "assert max_Abs_Diff((9,3,2,5,1)) == 8",
                    "status": "Passed"
                },
                {
                    "test": "assert max_Abs_Diff((3,2,1)) == 2",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/160",
        "specification": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
        "generated_code": "import math\n\ndef find_solution(a, b, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = extended_gcd(b % a, a)\n            return gcd, y - (b // a) * x, x\n\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    else:\n        x *= n // gcd\n        y *= n // gcd\n        return x, y\n",
        "pass_rate": 0.3333333333333333,
        "test_results": {
            "task_id": "Mbpp/160",
            "tests": [
                {
                    "test": "assert find_solution(4, 2, 7) == None",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert find_solution(2, 3, 7) == (2, 1)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\nAssertionError"
                },
                {
                    "test": "assert find_solution(1, 13, 17) == (4, 1)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/161",
        "specification": "Write a function to remove all elements from a given list present in another list.",
        "generated_code": "def remove_elements(main_list, remove_list):\n    return [element for element in main_list if element not in remove_list]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/161",
            "tests": [
                {
                    "test": "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/162",
        "specification": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "generated_code": "def sum_series(n: int) -> int:\n    return sum(n - 2 * i for i in range((n + 1) // 2))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/162",
            "tests": [
                {
                    "test": "assert sum_series(0) == 0",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_series(6) == 12",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_series(10) == 30",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_series(9) == 25",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/165",
        "specification": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "generated_code": "def count_char_position(s: str) -> int:\n    s = s.lower()\n    count = 0\n    for i, char in enumerate(s):\n        if ord(char) - 96 == i + 1:\n            count += 1\n    return count\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/165",
            "tests": [
                {
                    "test": "assert count_char_position(\"xbcefg\") == 2",
                    "status": "Passed"
                },
                {
                    "test": "assert count_char_position(\"ABcED\") == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert count_char_position(\"AbgdeF\") == 5",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/166",
        "specification": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "generated_code": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/166",
            "tests": [
                {
                    "test": "assert find_even_pair([5, 4, 7, 2, 1]) == 4",
                    "status": "Passed"
                },
                {
                    "test": "assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9",
                    "status": "Passed"
                },
                {
                    "test": "assert find_even_pair([1, 2, 3]) == 1",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/167",
        "specification": "Write a python function to find the smallest power of 2 greater than or equal to n.",
        "generated_code": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/167",
            "tests": [
                {
                    "test": "assert next_power_of_2(0) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert next_power_of_2(5) == 8",
                    "status": "Passed"
                },
                {
                    "test": "assert next_power_of_2(17) == 32",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/168",
        "specification": "Write a function to count the number of occurrences of a number in a given list.",
        "generated_code": "def frequency(lst, num):\n    return lst.count(num)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/168",
            "tests": [
                {
                    "test": "assert frequency([1,2,3], 4) == 0",
                    "status": "Passed"
                },
                {
                    "test": "assert frequency([1,2,2,3,3,3,4], 3) == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert frequency([0,1,2,3,1,2], 1) == 2",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/170",
        "specification": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
        "generated_code": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/170",
            "tests": [
                {
                    "test": "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/171",
        "specification": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "generated_code": "def perimeter_pentagon(side_length: int) -> int:\n    \"\"\"\n    This function calculates the perimeter of a regular pentagon given the length of its side.\n\n    Args:\n        side_length (int): The length of one side of the pentagon.\n\n    Returns:\n        int: The perimeter of the pentagon.\n    \"\"\"\n    return 5 * side_length\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/171",
            "tests": [
                {
                    "test": "assert perimeter_pentagon(5) == 25",
                    "status": "Passed"
                },
                {
                    "test": "assert perimeter_pentagon(10) == 50",
                    "status": "Passed"
                },
                {
                    "test": "assert perimeter_pentagon(15) == 75",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/172",
        "specification": "Write a function to count the number of occurence of the string 'std' in a given string.",
        "generated_code": "def count_occurance(s: str) -> int:\n  return s.count('std')\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/172",
            "tests": [
                {
                    "test": "assert count_occurance(\"letstdlenstdporstd\") == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert count_occurance(\"truststdsolensporsd\") == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert count_occurance(\"makestdsostdworthit\") == 2",
                    "status": "Passed"
                },
                {
                    "test": "assert count_occurance(\"stds\") == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert count_occurance(\"\") == 0",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/222",
        "specification": "Write a function to check if all the elements in tuple have same data type or not.",
        "generated_code": "def check_type(tup):\n    return len(set(type(i) for i in tup)) == 1\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/222",
            "tests": [
                {
                    "test": "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert check_type((1, 2, \"4\") ) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert check_type((3, 2, 1, 4, 5) ) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/223",
        "specification": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "generated_code": "def is_majority(arr, n, elem):\n    count = 0\n    for i in range(n):\n        if arr[i] == elem:\n            count += 1\n    return count > n / 2\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/223",
            "tests": [
                {
                    "test": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/224",
        "specification": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
        "generated_code": "def count_Set_Bits(n: int) -> int:\n  return bin(n).count('1')\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/224",
            "tests": [
                {
                    "test": "assert count_Set_Bits(2) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert count_Set_Bits(4) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert count_Set_Bits(6) == 2",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/226",
        "specification": "Write a python function to remove the characters which have odd index values of a given string.",
        "generated_code": "def odd_values_string(s):\n    return s[::2]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/226",
            "tests": [
                {
                    "test": "assert odd_values_string('abcdef') == 'ace'",
                    "status": "Passed"
                },
                {
                    "test": "assert odd_values_string('python') == 'pto'",
                    "status": "Passed"
                },
                {
                    "test": "assert odd_values_string('data') == 'dt'",
                    "status": "Passed"
                },
                {
                    "test": "assert odd_values_string('lambs') == 'lms'",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/227",
        "specification": "Write a function to find minimum of three numbers.",
        "generated_code": "def min_of_three(a, b, c):\n    return min(a, b, c)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/227",
            "tests": [
                {
                    "test": "assert min_of_three(10,20,0)==0",
                    "status": "Passed"
                },
                {
                    "test": "assert min_of_three(19,15,18)==15",
                    "status": "Passed"
                },
                {
                    "test": "assert min_of_three(-10,-20,-30)==-30",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/230",
        "specification": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "generated_code": "def replace_blank(input_string, char):\n    return input_string.replace(\" \", char)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/230",
            "tests": [
                {
                    "test": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
                    "status": "Passed"
                },
                {
                    "test": "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
                    "status": "Passed"
                },
                {
                    "test": "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/232",
        "specification": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
        "generated_code": "def larg_nnum(nums, n):\n    return sorted(set(nums), reverse=True)[:n]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/232",
            "tests": [
                {
                    "test": "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])",
                    "status": "Passed"
                },
                {
                    "test": "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])",
                    "status": "Passed"
                },
                {
                    "test": "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/233",
        "specification": "Write a function to find the lateral surface area of a cylinder.",
        "generated_code": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/233",
            "tests": [
                {
                    "test": "import math",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/234",
        "specification": "Write a function to find the volume of a cube given its side length.",
        "generated_code": "def volume_cube(side_length: int) -> int:\n    return side_length ** 3\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/234",
            "tests": [
                {
                    "test": "assert volume_cube(3)==27",
                    "status": "Passed"
                },
                {
                    "test": "assert volume_cube(2)==8",
                    "status": "Passed"
                },
                {
                    "test": "assert volume_cube(5)==125",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/235",
        "specification": "Write a python function to set all even bits of a given number.",
        "generated_code": "def even_bit_set_number(n: int) -> int:\n  return n | ((1 << 1) - 1) & ~((1 << 1) - 2)\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/235",
            "tests": [],
            "errors": [
                {
                    "test": "assert even_bit_set_number(10) == 10",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert even_bit_set_number(20) == 30",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert even_bit_set_number(30) == 30",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/237",
        "specification": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
        "generated_code": "def check_occurences(tuples_list):\n    occurrences_dict = {}\n    for tup in tuples_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrences_dict:\n            occurrences_dict[sorted_tup] += 1\n        else:\n            occurrences_dict[sorted_tup] = 1\n    return occurrences_dict\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/237",
            "tests": [
                {
                    "test": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
                    "status": "Passed"
                },
                {
                    "test": "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
                    "status": "Passed"
                },
                {
                    "test": "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/238",
        "specification": "Write a python function to count the number of non-empty substrings of a given string.",
        "generated_code": "def number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/238",
            "tests": [
                {
                    "test": "assert number_of_substrings(\"abc\") == 6",
                    "status": "Passed"
                },
                {
                    "test": "assert number_of_substrings(\"abcd\") == 10",
                    "status": "Passed"
                },
                {
                    "test": "assert number_of_substrings(\"abcde\") == 15",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/239",
        "specification": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "generated_code": "def get_total_number_of_sequences(m, n):\n    dp = [0]*(m+1)\n    dp[0] = 1\n    for _ in range(n):\n        new_dp = [0]*(m+1)\n        for i in range(1, m+1):\n            for j in range(i//2, m+1):\n                new_dp[i] += dp[j]\n        dp = new_dp\n    return sum(dp)\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/239",
            "tests": [],
            "errors": [
                {
                    "test": "assert get_total_number_of_sequences(10, 4) == 4",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\nAssertionError"
                },
                {
                    "test": "assert get_total_number_of_sequences(5, 2) == 6",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\nAssertionError"
                },
                {
                    "test": "assert get_total_number_of_sequences(16, 3) == 84",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/240",
        "specification": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "generated_code": "def replace_list(list1, list2):\n    list1 = list1[:-1]\n    list1.extend(list2)\n    return list1\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/240",
            "tests": [
                {
                    "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
                    "status": "Passed"
                },
                {
                    "test": "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
                    "status": "Passed"
                },
                {
                    "test": "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/242",
        "specification": "Write a function to count the total number of characters in a string.",
        "generated_code": "def count_charac(s):\n    return len(s)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/242",
            "tests": [
                {
                    "test": "assert count_charac(\"python programming\")==18",
                    "status": "Passed"
                },
                {
                    "test": "assert count_charac(\"language\")==8",
                    "status": "Passed"
                },
                {
                    "test": "assert count_charac(\"words\")==5",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/244",
        "specification": "Write a python function to find the next perfect square greater than a given number.",
        "generated_code": "def next_Perfect_Square(n: int) -> int:\n    root = int(n ** 0.5) + 1\n    return root ** 2\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/244",
            "tests": [
                {
                    "test": "assert next_Perfect_Square(35) == 36",
                    "status": "Passed"
                },
                {
                    "test": "assert next_Perfect_Square(6) == 9",
                    "status": "Passed"
                },
                {
                    "test": "assert next_Perfect_Square(9) == 16",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/245",
        "specification": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "generated_code": "def max_sum(arr):\n    n = len(arr)\n    inc = [0]*n\n    dec = [0]*n\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n    max_sum = arr[0]\n    \n    for i in range(1, n):\n        inc[i] = max(inc[i-1] + arr[i], arr[i])\n        max_sum = max(max_sum, inc[i])\n    \n    for i in range(n-2, -1, -1):\n        dec[i] = max(dec[i+1] + arr[i], arr[i])\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_sum\n",
        "pass_rate": 0.3333333333333333,
        "test_results": {
            "task_id": "Mbpp/245",
            "tests": [
                {
                    "test": "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\nAssertionError"
                },
                {
                    "test": "assert max_sum([80, 60, 30, 40, 20, 10]) == 210",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/247",
        "specification": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "generated_code": "def lps(s: str) -> int:\n    s = s.replace(\" \", \"\").upper()\n    n = len(s)\n    L = [[0 for x in range(n)] for x in range(n)]\n    \n    for i in range(n):\n        L[i][i] = 1\n    \n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            \n            if s[i] == s[j] and cl == 2:\n                L[i][j] = 2\n            elif s[i] == s[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j])\n    \n    return L[0][n - 1]\n",
        "pass_rate": 0.3333333333333333,
        "test_results": {
            "task_id": "Mbpp/247",
            "tests": [
                {
                    "test": "assert lps(\"CARDIO FOR CARDS\") == 7",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert lps(\"TENS FOR TENS\") == 5",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\nAssertionError"
                },
                {
                    "test": "assert lps(\"PART OF THE JOURNEY IS PART\") == 9",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/250",
        "specification": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "generated_code": "def count_X(tup, elem):\n    return tup.count(elem)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/250",
            "tests": [
                {
                    "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
                    "status": "Passed"
                },
                {
                    "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/251",
        "specification": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
        "generated_code": "def insert_element(input_list, element):\n    return [element] + [element for _ in input_list] + input_list\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/251",
            "tests": [],
            "errors": [
                {
                    "test": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/252",
        "specification": "Write a python function to convert complex numbers to polar coordinates.",
        "generated_code": "import cmath\ndef convert(real):\n    complex_num = complex(real, 0)\n    r, phi = cmath.polar(complex_num)\n    return (r, phi)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/252",
            "tests": [
                {
                    "test": "assert convert(1) == (1.0, 0.0)",
                    "status": "Passed"
                },
                {
                    "test": "assert convert(4) == (4.0,0.0)",
                    "status": "Passed"
                },
                {
                    "test": "assert convert(5) == (5.0,0.0)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/253",
        "specification": "Write a python function that returns the number of integer elements in a given list.",
        "generated_code": "def count_integer(lst):\n    return sum(1 for elem in lst if isinstance(elem, int))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/253",
            "tests": [
                {
                    "test": "assert count_integer([1,2,'abc',1.2]) == 2",
                    "status": "Passed"
                },
                {
                    "test": "assert count_integer([1,2,3]) == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert count_integer([1,1.2,4,5.1]) == 2",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/255",
        "specification": "Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.",
        "generated_code": "import itertools\n\ndef combinations_colors(colors, n):\n    return list(itertools.product(colors, repeat=n))\n",
        "pass_rate": 0.3333333333333333,
        "test_results": {
            "task_id": "Mbpp/255",
            "tests": [
                {
                    "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 6, in <module>\nAssertionError"
                },
                {
                    "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 6, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/256",
        "specification": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "generated_code": "def count_Primes_nums(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/256",
            "tests": [
                {
                    "test": "assert count_Primes_nums(5) == 2",
                    "status": "Passed"
                },
                {
                    "test": "assert count_Primes_nums(10) == 4",
                    "status": "Passed"
                },
                {
                    "test": "assert count_Primes_nums(100) == 25",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/257",
        "specification": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
        "generated_code": "def swap_numbers(a, b):\n    return b, a\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/257",
            "tests": [
                {
                    "test": "assert swap_numbers(10,20)==(20,10)",
                    "status": "Passed"
                },
                {
                    "test": "assert swap_numbers(15,17)==(17,15)",
                    "status": "Passed"
                },
                {
                    "test": "assert swap_numbers(100,200)==(200,100)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/259",
        "specification": "Write a function to maximize the given two tuples.",
        "generated_code": "def maximize_elements(tup1, tup2):\n    return tuple(max(x, y) for x, y in zip(tup1, tup2))\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/259",
            "tests": [],
            "errors": [
                {
                    "test": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/260",
        "specification": "Write a function to find the nth newman–shanks–williams prime number.",
        "generated_code": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_newman_shanks_williams_prime(num):\n        return is_prime(num) and is_prime((num - 1) // 2)\n\n    count = 0\n    num = 2\n    while True:\n        if is_newman_shanks_williams_prime(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/260",
            "tests": [],
            "errors": [
                {
                    "test": "assert newman_prime(3) == 7",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\nAssertionError"
                },
                {
                    "test": "assert newman_prime(4) == 17",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\nAssertionError"
                },
                {
                    "test": "assert newman_prime(5) == 41",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/261",
        "specification": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "generated_code": "def division_elements(tup1, tup2):\n    return tuple(a // b for a, b in zip(tup1, tup2))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/261",
            "tests": [
                {
                    "test": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
                    "status": "Passed"
                },
                {
                    "test": "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
                    "status": "Passed"
                },
                {
                    "test": "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/262",
        "specification": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
        "generated_code": "def split_two_parts(input_list, L):\n    return input_list[:L], input_list[L:]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/262",
            "tests": [
                {
                    "test": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
                    "status": "Passed"
                },
                {
                    "test": "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
                    "status": "Passed"
                },
                {
                    "test": "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/264",
        "specification": "Write a function to calculate a dog's age in dog's years.",
        "generated_code": "def dog_age(human_age: int) -> int:\n    \"\"\"\n    This function calculates a dog's age in dog's years.\n    \n    The calculation is based on the following rules:\n    - The first year of a dog's life is equivalent to 15 human years.\n    - The second year is equivalent to 9 human years.\n    - After that, each human year is equivalent to 5 dog years.\n    \n    :param human_age: The age of the dog in human years.\n    :return: The age of the dog in dog years.\n    \"\"\"\n    if human_age == 1:\n        return 15\n    elif human_age == 2:\n        return 24\n    else:\n        return 24 + (human_age - 2) * 5\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/264",
            "tests": [],
            "errors": [
                {
                    "test": "assert dog_age(12)==61",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 20, in <module>\nAssertionError"
                },
                {
                    "test": "assert dog_age(15)==73",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 20, in <module>\nAssertionError"
                },
                {
                    "test": "assert dog_age(24)==109",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 20, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/265",
        "specification": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "generated_code": "def list_split(input_list, n):\n    return [input_list[i::n] for i in range(n)]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/265",
            "tests": [
                {
                    "test": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]",
                    "status": "Passed"
                },
                {
                    "test": "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]",
                    "status": "Passed"
                },
                {
                    "test": "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/266",
        "specification": "Write a function to find the lateral surface area of a cube given its side length.",
        "generated_code": "def lateralsurface_cube(side_length: int) -> int:\n    return 4 * side_length ** 2\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/266",
            "tests": [
                {
                    "test": "assert lateralsurface_cube(5)==100",
                    "status": "Passed"
                },
                {
                    "test": "assert lateralsurface_cube(9)==324",
                    "status": "Passed"
                },
                {
                    "test": "assert lateralsurface_cube(10)==400",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/267",
        "specification": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "generated_code": "def square_Sum(n: int) -> int:\n    sum_of_squares = sum(i**2 for i in range(1, 2*n + 1, 2))\n    return sum_of_squares\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/267",
            "tests": [
                {
                    "test": "assert square_Sum(2) == 10",
                    "status": "Passed"
                },
                {
                    "test": "assert square_Sum(3) == 35",
                    "status": "Passed"
                },
                {
                    "test": "assert square_Sum(4) == 84",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/268",
        "specification": "Write a function to find the n'th star number.",
        "generated_code": "def find_star_num(n: int) -> int:\n  return 6*n*(n-1) + 1\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/268",
            "tests": [
                {
                    "test": "assert find_star_num(3) == 37",
                    "status": "Passed"
                },
                {
                    "test": "assert find_star_num(4) == 73",
                    "status": "Passed"
                },
                {
                    "test": "assert find_star_num(5) == 121",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/269",
        "specification": "Write a function to find the ascii value of a character.",
        "generated_code": "def ascii_value(char: str) -> int:\n    return ord(char)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/269",
            "tests": [
                {
                    "test": "assert ascii_value('A')==65",
                    "status": "Passed"
                },
                {
                    "test": "assert ascii_value('R')==82",
                    "status": "Passed"
                },
                {
                    "test": "assert ascii_value('S')==83",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/270",
        "specification": "Write a python function to find the sum of even numbers at even positions of a list.",
        "generated_code": "def sum_even_and_even_index(lst):\n    return sum(num for idx, num in enumerate(lst) if idx % 2 == 0 and num % 2 == 0)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/270",
            "tests": [
                {
                    "test": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_even_and_even_index([5, 6, 12, 1]) == 12",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/271",
        "specification": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "generated_code": "def even_Power_Sum(n: int) -> int:\n    total = 0\n    count = 0\n    num = 2\n    while count < n:\n        total += num ** 5\n        num += 2\n        count += 1\n    return total\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/271",
            "tests": [
                {
                    "test": "assert even_Power_Sum(2) == 1056",
                    "status": "Passed"
                },
                {
                    "test": "assert even_Power_Sum(3) == 8832",
                    "status": "Passed"
                },
                {
                    "test": "assert even_Power_Sum(1) == 32",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/272",
        "specification": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
        "generated_code": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/272",
            "tests": [
                {
                    "test": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
                    "status": "Passed"
                },
                {
                    "test": "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
                    "status": "Passed"
                },
                {
                    "test": "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/273",
        "specification": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "generated_code": "def substract_elements(tup1, tup2):\n    return tuple(x - y for x, y in zip(tup1, tup2))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/273",
            "tests": [
                {
                    "test": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
                    "status": "Passed"
                },
                {
                    "test": "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
                    "status": "Passed"
                },
                {
                    "test": "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/274",
        "specification": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "generated_code": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    return sum(math.comb(n, i) for i in range(0, n+1, 2))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/274",
            "tests": [
                {
                    "test": "assert even_binomial_Coeff_Sum(4) == 8",
                    "status": "Passed"
                },
                {
                    "test": "assert even_binomial_Coeff_Sum(6) == 32",
                    "status": "Passed"
                },
                {
                    "test": "assert even_binomial_Coeff_Sum(2) == 2",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/276",
        "specification": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
        "generated_code": "import math\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/276",
            "tests": [
                {
                    "test": "import math",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/277",
        "specification": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
        "generated_code": "def dict_filter(dictionary, n):\n    return {key: value for key, value in dictionary.items() if value >= n}\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/277",
            "tests": [
                {
                    "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
                    "status": "Passed"
                },
                {
                    "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
                    "status": "Passed"
                },
                {
                    "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/278",
        "specification": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
        "generated_code": "def count_first_elements(tup):\n    for elem in tup:\n        if isinstance(elem, tuple):\n            return tup.index(elem)\n    return len(tup)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/278",
            "tests": [
                {
                    "test": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
                    "status": "Passed"
                },
                {
                    "test": "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/279",
        "specification": "Write a function to find the nth decagonal number.",
        "generated_code": "def is_num_decagonal(n: int) -> int:\n    return n * (3 * n - 1) // 2\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/279",
            "tests": [],
            "errors": [
                {
                    "test": "assert is_num_decagonal(3) == 27",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert is_num_decagonal(7) == 175",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert is_num_decagonal(10) == 370",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/280",
        "specification": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "generated_code": "def sequential_search(arr, elem):\n    for i, x in enumerate(arr):\n        if x == elem:\n            return (True, i)\n    return (False, -1)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/280",
            "tests": [
                {
                    "test": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
                    "status": "Passed"
                },
                {
                    "test": "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
                    "status": "Passed"
                },
                {
                    "test": "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/281",
        "specification": "Write a python function to check if the elements of a given list are unique or not.",
        "generated_code": "def all_unique(lst):\n    return len(lst) == len(set(lst))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/281",
            "tests": [
                {
                    "test": "assert all_unique([1,2,3]) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert all_unique([1,2,1,2]) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert all_unique([1,2,3,4,5]) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/282",
        "specification": "Write a function to subtract two lists element-wise.",
        "generated_code": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/282",
            "tests": [
                {
                    "test": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
                    "status": "Passed"
                },
                {
                    "test": "assert sub_list([1,2],[3,4])==[-2,-2]",
                    "status": "Passed"
                },
                {
                    "test": "assert sub_list([90,120],[50,70])==[40,50]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/283",
        "specification": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "generated_code": "def validate(n):\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    for digit, freq in digit_freq.items():\n        if freq > int(digit):\n            return False\n    return True\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/283",
            "tests": [
                {
                    "test": "assert validate(1234) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert validate(51241) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert validate(321) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/284",
        "specification": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "generated_code": "def check_element(input_list, element):\n    return all(x == element for x in input_list)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/284",
            "tests": [
                {
                    "test": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
                    "status": "Passed"
                },
                {
                    "test": "assert check_element([1,2,3,4],7)==False",
                    "status": "Passed"
                },
                {
                    "test": "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/285",
        "specification": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "generated_code": "def text_match_two_three(s):\n    pattern = r\"a(b{2}|b{3})\"\n    import re\n    if re.search(pattern, s):\n        return True\n    else:\n        return False\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/285",
            "tests": [
                {
                    "test": "assert text_match_two_three(\"ac\")==(False)",
                    "status": "Passed"
                },
                {
                    "test": "assert text_match_two_three(\"dc\")==(False)",
                    "status": "Passed"
                },
                {
                    "test": "assert text_match_two_three(\"abbbba\")==(True)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/286",
        "specification": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "generated_code": "def max_sub_array_sum_repeated(arr, n, k):\n    modified_arr = arr * k\n    max_sum = float('-inf')\n    window_sum = 0\n    for i in range(len(modified_arr)):\n        window_sum += modified_arr[i]\n        if i >= n:\n            window_sum -= modified_arr[i - n]\n        max_sum = max(max_sum, window_sum)\n    return max_sum\n",
        "pass_rate": 0.6666666666666666,
        "test_results": {
            "task_id": "Mbpp/286",
            "tests": [
                {
                    "test": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
                    "status": "Passed"
                },
                {
                    "test": "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/287",
        "specification": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "generated_code": "def square_Sum(n: int) -> int:\n    return sum(i**2 for i in range(2, 2*n + 1, 2))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/287",
            "tests": [
                {
                    "test": "assert square_Sum(2) == 20",
                    "status": "Passed"
                },
                {
                    "test": "assert square_Sum(3) == 56",
                    "status": "Passed"
                },
                {
                    "test": "assert square_Sum(4) == 120",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/290",
        "specification": "Write a function to find the list of maximum length in a list of lists.",
        "generated_code": "def max_length(list_of_lists):\n    max_len = max(len(sublist) for sublist in list_of_lists)\n    max_sublists = [sublist for sublist in list_of_lists if len(sublist) == max_len]\n    if len(max_sublists) > 1:\n        return max_len, max_sublists\n    else:\n        return max_len, max_sublists[0]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/290",
            "tests": [
                {
                    "test": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
                    "status": "Passed"
                },
                {
                    "test": "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
                    "status": "Passed"
                },
                {
                    "test": "assert max_length([[5], [15,20,25]])==(3, [15,20,25])",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/292",
        "specification": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
        "generated_code": "def find(dividend, divisor):\n    return dividend // divisor\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/292",
            "tests": [
                {
                    "test": "assert find(10,3) == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert find(4,2) == 2",
                    "status": "Passed"
                },
                {
                    "test": "assert find(20,5) == 4",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/293",
        "specification": "Write a function to find the third side of a right angled triangle.",
        "generated_code": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/293",
            "tests": [
                {
                    "test": "assert math.isclose(otherside_rightangle(7,8), 10.63014581273465, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(otherside_rightangle(3,4), 5, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(otherside_rightangle(7,15), 16.55294535724685, rel_tol=0.001)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/294",
        "specification": "Write a function to find the maximum value in a given heterogeneous list.",
        "generated_code": "def max_val(lst):\n    return max([x for x in lst if isinstance(x, (int, float))])\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/294",
            "tests": [
                {
                    "test": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
                    "status": "Passed"
                },
                {
                    "test": "assert max_val(['Python', 15, 20, 25])==25",
                    "status": "Passed"
                },
                {
                    "test": "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/296",
        "specification": "Write a python function to count inversions in an array.",
        "generated_code": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/296",
            "tests": [
                {
                    "test": "assert get_Inv_Count([1,20,6,4,5]) == 5",
                    "status": "Passed"
                },
                {
                    "test": "assert get_Inv_Count([1,2,1]) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert get_Inv_Count([1,2,5,6,1]) == 3",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/297",
        "specification": "Write a function to flatten a given nested list structure.",
        "generated_code": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if type(element) == list:\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/297",
            "tests": [
                {
                    "test": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
                    "status": "Passed"
                },
                {
                    "test": "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
                    "status": "Passed"
                },
                {
                    "test": "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/299",
        "specification": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "generated_code": "def max_aggregate(grades):\n    aggregates = {}\n    for name, grade in grades:\n        if name in aggregates:\n            aggregates[name] += grade\n        else:\n            aggregates[name] = grade\n    return max(aggregates.items(), key=lambda x: x[1])\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/299",
            "tests": [
                {
                    "test": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
                    "status": "Passed"
                },
                {
                    "test": "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
                    "status": "Passed"
                },
                {
                    "test": "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/300",
        "specification": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "generated_code": "import math\n\ndef count_binary_seq(n):\n    total = 2 ** (2 * n)\n    half = 2 ** n\n    result = 0\n    for i in range(half):\n        k = bin(i).count('1')\n        result += math.comb(half, k) ** 2\n    return result\n",
        "pass_rate": 0.25,
        "test_results": {
            "task_id": "Mbpp/300",
            "tests": [
                {
                    "test": "import math",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\nAssertionError"
                },
                {
                    "test": "assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\nAssertionError"
                },
                {
                    "test": "assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/301",
        "specification": "Write a function to find the depth of a dictionary.",
        "generated_code": "def dict_depth(d, level=1):\n    if not isinstance(d, dict):\n        return level\n    if not d:\n        return level\n    return max(dict_depth(v, level + 1) for v in d.values())\n",
        "pass_rate": 0.3333333333333333,
        "test_results": {
            "task_id": "Mbpp/301",
            "tests": [
                {
                    "test": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 8, in <module>\nAssertionError"
                },
                {
                    "test": "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 8, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/305",
        "specification": "Write a function to return two words from a list of words starting with letter 'p'.",
        "generated_code": "def start_withp(lst):\n    words_starting_with_p = [word for sentence in lst for word in sentence.split() if word[0].lower() == 'p']\n    return tuple(words_starting_with_p[:2])\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/305",
            "tests": [
                {
                    "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
                    "status": "Passed"
                },
                {
                    "test": "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
                    "status": "Passed"
                },
                {
                    "test": "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/306",
        "specification": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
        "generated_code": "def max_sum_increasing_subseq(seq, n, i, k):\n    dp = [num for num in seq]\n    for j in range(1, i + 1):\n        for prev_j in range(j):\n            if seq[j] > seq[prev_j] and dp[j] < dp[prev_j] + seq[j]:\n                dp[j] = dp[prev_j] + seq[j]\n    max_sum = 0\n    for j in range(i, k):\n        if seq[j] > seq[i] and dp[j] > max_sum:\n            max_sum = dp[j]\n    return max_sum\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/306",
            "tests": [],
            "errors": [
                {
                    "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\nAssertionError"
                },
                {
                    "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\nAssertionError"
                },
                {
                    "test": "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/308",
        "specification": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
        "generated_code": "import heapq as hq\nimport itertools as it\n\ndef large_product(list1, list2, n):\n    products = [x * y for x, y in it.product(list1, list2)]\n    return hq.nlargest(n, products)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/308",
            "tests": [
                {
                    "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
                    "status": "Passed"
                },
                {
                    "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
                    "status": "Passed"
                },
                {
                    "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/309",
        "specification": "Write a python function to find the maximum of two numbers.",
        "generated_code": "def maximum(a, b):\n    return max(a, b)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/309",
            "tests": [
                {
                    "test": "assert maximum(5,10) == 10",
                    "status": "Passed"
                },
                {
                    "test": "assert maximum(-1,-2) == -1",
                    "status": "Passed"
                },
                {
                    "test": "assert maximum(9,7) == 9",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/310",
        "specification": "Write a function to convert a given string to a tuple of characters.",
        "generated_code": "def string_to_tuple(s):\n    return tuple(s)\n",
        "pass_rate": 0.6666666666666666,
        "test_results": {
            "task_id": "Mbpp/310",
            "tests": [
                {
                    "test": "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
                    "status": "Passed"
                },
                {
                    "test": "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/311",
        "specification": "Write a python function to set the left most unset bit.",
        "generated_code": "def set_left_most_unset_bit(n: int) -> int:\n    bin_str = bin(n)[2:]  # Convert to binary string and remove '0b' prefix\n    for i in range(len(bin_str)):\n        if bin_str[i] == '0':\n            return n | (1 << len(bin_str) - 1 - i)\n    return n\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/311",
            "tests": [
                {
                    "test": "assert set_left_most_unset_bit(10) == 14",
                    "status": "Passed"
                },
                {
                    "test": "assert set_left_most_unset_bit(12) == 14",
                    "status": "Passed"
                },
                {
                    "test": "assert set_left_most_unset_bit(15) == 15",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/312",
        "specification": "Write a function to find the volume of a cone.",
        "generated_code": "import math\n\ndef volume_cone(radius, height):\n    return (1.0/3) * math.pi * (radius ** 2) * height\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/312",
            "tests": [
                {
                    "test": "import math",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/388",
        "specification": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "generated_code": "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/388",
            "tests": [
                {
                    "test": "assert highest_Power_of_2(10) == 8",
                    "status": "Passed"
                },
                {
                    "test": "assert highest_Power_of_2(19) == 16",
                    "status": "Passed"
                },
                {
                    "test": "assert highest_Power_of_2(32) == 32",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/389",
        "specification": "Write a function to find the n'th lucas number.",
        "generated_code": "def find_lucas(n: int) -> int:\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/389",
            "tests": [],
            "errors": [
                {
                    "test": "assert find_lucas(9) == 76",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\nAssertionError"
                },
                {
                    "test": "assert find_lucas(4) == 7",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\nAssertionError"
                },
                {
                    "test": "assert find_lucas(3) == 4",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/390",
        "specification": "Write a function to apply a given format string to all of the elements in a list.",
        "generated_code": "def add_string(lst, fmt_str):\n    return [fmt_str.format(i) for i in lst]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/390",
            "tests": [
                {
                    "test": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
                    "status": "Passed"
                },
                {
                    "test": "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
                    "status": "Passed"
                },
                {
                    "test": "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/391",
        "specification": "Write a function to convert more than one list to nested dictionary.",
        "generated_code": "def convert_list_dictionary(list1, list2, list3):\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/391",
            "tests": [
                {
                    "test": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
                    "status": "Passed"
                },
                {
                    "test": "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
                    "status": "Passed"
                },
                {
                    "test": "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/392",
        "specification": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "generated_code": "def get_max_sum(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n < 2:\n        return n\n    max_sum = max(get_max_sum(n//2, memo) + get_max_sum(n//3, memo) + get_max_sum(n//4, memo) + get_max_sum(n//5, memo), n)\n    memo[n] = max_sum\n    return max_sum\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/392",
            "tests": [
                {
                    "test": "assert get_max_sum(60) == 106",
                    "status": "Passed"
                },
                {
                    "test": "assert get_max_sum(10) == 12",
                    "status": "Passed"
                },
                {
                    "test": "assert get_max_sum(2) == 2",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/394",
        "specification": "Write a function to check if given tuple contains no duplicates.",
        "generated_code": "def check_distinct(tup):\n    return len(tup) == len(set(tup))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/394",
            "tests": [
                {
                    "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert check_distinct((1, 4, 5, 6)) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert check_distinct((2, 3, 4, 5, 6)) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/395",
        "specification": "Write a python function to find the first non-repeated character in a given string.",
        "generated_code": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/395",
            "tests": [
                {
                    "test": "assert first_non_repeating_character(\"abcabc\") == None",
                    "status": "Passed"
                },
                {
                    "test": "assert first_non_repeating_character(\"abc\") == \"a\"",
                    "status": "Passed"
                },
                {
                    "test": "assert first_non_repeating_character(\"ababc\") == \"c\"",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/397",
        "specification": "Write a function to find the median of three numbers.",
        "generated_code": "def median_numbers(a, b, c):\n    return float(sorted([a, b, c])[1])\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/397",
            "tests": [
                {
                    "test": "assert median_numbers(25,55,65)==55.0",
                    "status": "Passed"
                },
                {
                    "test": "assert median_numbers(20,10,30)==20.0",
                    "status": "Passed"
                },
                {
                    "test": "assert median_numbers(15,45,75)==45.0",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/398",
        "specification": "Write a function to compute the sum of digits of each number of a given list.",
        "generated_code": "def sum_of_digits(lst):\n    total_sum = 0\n    for elem in lst:\n        if isinstance(elem, (int,)):\n            total_sum += sum(int(digit) for digit in str(abs(elem)))\n    return total_sum\n",
        "pass_rate": 0.6666666666666666,
        "test_results": {
            "task_id": "Mbpp/398",
            "tests": [
                {
                    "test": "assert sum_of_digits([10,2,56])==14",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_of_digits([10,20,-4,5,-70])==19",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 8, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/404",
        "specification": "Write a python function to find the minimum of two numbers.",
        "generated_code": "def minimum(a, b):\n    return min(a, b)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/404",
            "tests": [
                {
                    "test": "assert minimum(1,2) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert minimum(-5,-4) == -5",
                    "status": "Passed"
                },
                {
                    "test": "assert minimum(0,0) == 0",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/405",
        "specification": "Write a function to check whether an element exists within a tuple.",
        "generated_code": "def check_tuplex(tup, elem):\n    return elem in tup\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/405",
            "tests": [
                {
                    "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
                    "status": "Passed"
                },
                {
                    "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
                    "status": "Passed"
                },
                {
                    "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/406",
        "specification": "Write a python function to find whether the parity of a given number is odd.",
        "generated_code": "def find_Parity(n: int) -> bool:\n    return n % 2 != 0\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/406",
            "tests": [
                {
                    "test": "assert find_Parity(12) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert find_Parity(7) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert find_Parity(10) == False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/409",
        "specification": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "generated_code": "def min_product_tuple(tuples):\n    return min(a * b for a, b in tuples)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/409",
            "tests": [
                {
                    "test": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
                    "status": "Passed"
                },
                {
                    "test": "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
                    "status": "Passed"
                },
                {
                    "test": "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/410",
        "specification": "Write a function to find the minimum value in a given heterogeneous list.",
        "generated_code": "def min_val(het_list):\n    return min(val for val in het_list if isinstance(val, (int, float)))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/410",
            "tests": [
                {
                    "test": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
                    "status": "Passed"
                },
                {
                    "test": "assert min_val(['Python', 15, 20, 25])==15",
                    "status": "Passed"
                },
                {
                    "test": "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/412",
        "specification": "Write a python function to remove odd numbers from a given list.",
        "generated_code": "def remove_odd(nums):\n    return [num for num in nums if num % 2 == 0]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/412",
            "tests": [
                {
                    "test": "assert remove_odd([1,2,3]) == [2]",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_odd([2,4,6]) == [2,4,6]",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_odd([10,20,3]) == [10,20]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/413",
        "specification": "Write a function to extract the nth element from a given list of tuples.",
        "generated_code": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/413",
            "tests": [
                {
                    "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
                    "status": "Passed"
                },
                {
                    "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
                    "status": "Passed"
                },
                {
                    "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/414",
        "specification": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
        "generated_code": "def overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1) or any(i in seq1 for i in seq2)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/414",
            "tests": [
                {
                    "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert overlapping([1,2,3],[4,5,6]) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert overlapping([1,4,5],[1,4,5]) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/415",
        "specification": "Write a python function to find a pair with highest product from a given array of integers.",
        "generated_code": "def max_Product(nums):\n    nums.sort()\n    n = len(nums)\n    return (nums[-1], nums[-2]) if nums[-1]*nums[-2] > nums[0]*nums[1] else (nums[0], nums[1])\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/415",
            "tests": [],
            "errors": [
                {
                    "test": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 6, in <module>\nAssertionError"
                },
                {
                    "test": "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 6, in <module>\nAssertionError"
                },
                {
                    "test": "assert max_Product([1,2,3]) == (2,3)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 6, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/418",
        "specification": "Write a python function to find the element of a list having maximum length.",
        "generated_code": "def Find_Max(lst):\n    return max(lst, key=len)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/418",
            "tests": [
                {
                    "test": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
                    "status": "Passed"
                },
                {
                    "test": "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
                    "status": "Passed"
                },
                {
                    "test": "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/419",
        "specification": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "generated_code": "def round_and_sum(nums):\n    rounded_nums = [round(num) for num in nums]\n    total_sum = sum(rounded_nums)\n    return total_sum * len(nums)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/419",
            "tests": [
                {
                    "test": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
                    "status": "Passed"
                },
                {
                    "test": "assert round_and_sum([5,2,9,24.3,29])==345",
                    "status": "Passed"
                },
                {
                    "test": "assert round_and_sum([25.0,56.7,89.2])==513",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/420",
        "specification": "Write a python function to find the cube sum of first n even natural numbers.",
        "generated_code": "def cube_Sum(n: int) -> int:\n    return sum(i**3 for i in range(2, 2*n + 1, 2))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/420",
            "tests": [
                {
                    "test": "assert cube_Sum(2) == 72",
                    "status": "Passed"
                },
                {
                    "test": "assert cube_Sum(3) == 288",
                    "status": "Passed"
                },
                {
                    "test": "assert cube_Sum(4) == 800",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/421",
        "specification": "Write a function to concatenate each element of tuple by the delimiter.",
        "generated_code": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/421",
            "tests": [
                {
                    "test": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
                    "status": "Passed"
                },
                {
                    "test": "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
                    "status": "Passed"
                },
                {
                    "test": "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/422",
        "specification": "Write a python function to find the average of cubes of first n natural numbers.",
        "generated_code": "def find_Average_Of_Cube(n: int) -> float:\n    total_cube = sum(i**3 for i in range(1, n+1))\n    average_cube = total_cube / n\n    return average_cube\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/422",
            "tests": [
                {
                    "test": "assert find_Average_Of_Cube(2) == 4.5",
                    "status": "Passed"
                },
                {
                    "test": "assert find_Average_Of_Cube(3) == 12",
                    "status": "Passed"
                },
                {
                    "test": "assert find_Average_Of_Cube(1) == 1",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/424",
        "specification": "Write a function to extract only the rear index element of each string in the given tuple.",
        "generated_code": "def extract_rear(tup):\n    return [s[-1] for s in tup]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/424",
            "tests": [
                {
                    "test": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
                    "status": "Passed"
                },
                {
                    "test": "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
                    "status": "Passed"
                },
                {
                    "test": "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/425",
        "specification": "Write a function to count the number of sublists containing a particular element.",
        "generated_code": "def count_element_in_list(lst, elem):\n    return sum(1 for sublist in lst if elem in sublist)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/425",
            "tests": [
                {
                    "test": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
                    "status": "Passed"
                },
                {
                    "test": "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
                    "status": "Passed"
                },
                {
                    "test": "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/426",
        "specification": "Write a function to filter odd numbers.",
        "generated_code": "def filter_oddnumbers(lst):\n    return [num for num in lst if num % 2 != 0]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/426",
            "tests": [
                {
                    "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
                    "status": "Passed"
                },
                {
                    "test": "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
                    "status": "Passed"
                },
                {
                    "test": "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/427",
        "specification": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "generated_code": "def change_date_format(date_str: str) -> str:\n    year, month, day = date_str.split('-')\n    return f'{day}-{month}-{year}'\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/427",
            "tests": [
                {
                    "test": "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
                    "status": "Passed"
                },
                {
                    "test": "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
                    "status": "Passed"
                },
                {
                    "test": "assert change_date_format(\"2021-04-26\") == '26-04-2021'",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/428",
        "specification": "Write a function to sort the given array by using shell sort.",
        "generated_code": "def shell_sort(nums):\n    gap = len(nums) // 2\n    while gap > 0:\n        for i in range(gap, len(nums)):\n            temp = nums[i]\n            j = i\n            while j >= gap and nums[j - gap] > temp:\n                nums[j] = nums[j - gap]\n                j -= gap\n            nums[j] = temp\n        gap //= 2\n    return nums\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/428",
            "tests": [
                {
                    "test": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
                    "status": "Passed"
                },
                {
                    "test": "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
                    "status": "Passed"
                },
                {
                    "test": "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/429",
        "specification": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "generated_code": "def and_tuples(tup1, tup2):\n    return tuple((x & y) for x, y in zip(tup1, tup2))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/429",
            "tests": [
                {
                    "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
                    "status": "Passed"
                },
                {
                    "test": "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
                    "status": "Passed"
                },
                {
                    "test": "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/430",
        "specification": "Write a function to find the directrix of a parabola.",
        "generated_code": "def parabola_directrix(a, b, c):\n    return c - (b ** 2) / (4 * a)\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/430",
            "tests": [],
            "errors": [
                {
                    "test": "assert parabola_directrix(5,3,2)==-198",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert parabola_directrix(9,8,4)==-2336",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert parabola_directrix(2,4,6)==-130",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/432",
        "specification": "Write a function to find the median length of a trapezium.",
        "generated_code": "def median_trapezium(a, b, c):\n    sides = sorted([a, b, c])\n    median_length = (sides[0] + sides[2]) / 2\n    return median_length\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/432",
            "tests": [],
            "errors": [
                {
                    "test": "assert median_trapezium(15,25,35)==20",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 6, in <module>\nAssertionError"
                },
                {
                    "test": "assert median_trapezium(10,20,30)==15",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 6, in <module>\nAssertionError"
                },
                {
                    "test": "assert median_trapezium(6,9,4)==7.5",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 6, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/433",
        "specification": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "generated_code": "def check_greater(nums, num):\n    return all(num > i for i in nums)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/433",
            "tests": [
                {
                    "test": "assert check_greater([1, 2, 3, 4, 5], 4) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert check_greater([2, 3, 4, 5, 6], 8) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert check_greater([9, 7, 4, 8, 6, 1], 11) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/435",
        "specification": "Write a python function to find the last digit of a given number.",
        "generated_code": "def last_Digit(n: int) -> int:\n  return n % 10\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/435",
            "tests": [
                {
                    "test": "assert last_Digit(123) == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert last_Digit(25) == 5",
                    "status": "Passed"
                },
                {
                    "test": "assert last_Digit(30) == 0",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/436",
        "specification": "Write a python function to return the negative numbers in a list.",
        "generated_code": "def neg_nos(lst):\n    return [num for num in lst if num < 0]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/436",
            "tests": [
                {
                    "test": "assert neg_nos([-1,4,5,-6]) == [-1,-6]",
                    "status": "Passed"
                },
                {
                    "test": "assert neg_nos([-1,-2,3,4]) == [-1,-2]",
                    "status": "Passed"
                },
                {
                    "test": "assert neg_nos([-7,-6,8,9]) == [-7,-6]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/437",
        "specification": "Write a function to remove odd characters in a string.",
        "generated_code": "def remove_odd(s: str) -> str:\n    return s[1::2]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/437",
            "tests": [
                {
                    "test": "assert remove_odd(\"python\")==(\"yhn\")",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_odd(\"program\")==(\"rga\")",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_odd(\"language\")==(\"agae\")",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/439",
        "specification": "Write a function to join a list of multiple integers into a single integer.",
        "generated_code": "def multiple_to_single(nums):\n    return int(''.join(map(str, nums)))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/439",
            "tests": [
                {
                    "test": "assert multiple_to_single([11, 33, 50])==113350",
                    "status": "Passed"
                },
                {
                    "test": "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
                    "status": "Passed"
                },
                {
                    "test": "assert multiple_to_single([10,15,20,25])==10152025",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/440",
        "specification": "Write a function to find the first adverb and their positions in a given sentence.",
        "generated_code": "import nltk\nnltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(sentence):\n    words = nltk.word_tokenize(sentence)\n    tagged_words = nltk.pos_tag(words)\n    for i, (word, tag) in enumerate(tagged_words):\n        if tag.startswith('RB'):\n            return (i, len(' '.join(words[:i])), word)\n    return None\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/440",
            "tests": [],
            "errors": [
                {
                    "test": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nModuleNotFoundError: No module named 'nltk'"
                },
                {
                    "test": "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nModuleNotFoundError: No module named 'nltk'"
                },
                {
                    "test": "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nModuleNotFoundError: No module named 'nltk'"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/441",
        "specification": "Write a function to find the surface area of a cube of a given size.",
        "generated_code": "def surfacearea_cube(size: int) -> int:\n    return 6 * (size ** 2)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/441",
            "tests": [
                {
                    "test": "assert surfacearea_cube(5)==150",
                    "status": "Passed"
                },
                {
                    "test": "assert surfacearea_cube(3)==54",
                    "status": "Passed"
                },
                {
                    "test": "assert surfacearea_cube(10)==600",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/445",
        "specification": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "generated_code": "def index_multiplication(tup1, tup2):\n    return tuple((a * b, c * d) for (a, c), (b, d) in zip(tup1, tup2))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/445",
            "tests": [
                {
                    "test": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
                    "status": "Passed"
                },
                {
                    "test": "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
                    "status": "Passed"
                },
                {
                    "test": "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/446",
        "specification": "Write a python function to count the occurence of all elements of list in a tuple.",
        "generated_code": "def count_Occurrence(tup, lst):\n    return sum(1 for elem in lst if elem in tup)\n",
        "pass_rate": 0.3333333333333333,
        "test_results": {
            "task_id": "Mbpp/446",
            "tests": [
                {
                    "test": "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/447",
        "specification": "Write a function to find cubes of individual elements in a list.",
        "generated_code": "def cube_nums(nums):\n    return [num ** 3 for num in nums]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/447",
            "tests": [
                {
                    "test": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
                    "status": "Passed"
                },
                {
                    "test": "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
                    "status": "Passed"
                },
                {
                    "test": "assert cube_nums([12,15])==([1728, 3375])",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/448",
        "specification": "Write a function to calculate the sum of perrin numbers.",
        "generated_code": "def cal_sum(n: int) -> int:\n    a, b, c = 3, 0, 2\n    sum_perrin = 3\n    for _ in range(2, n):\n        a, b, c = b, c, a + b\n        sum_perrin += c\n    return sum_perrin\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/448",
            "tests": [],
            "errors": [
                {
                    "test": "assert cal_sum(9) == 49",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 9, in <module>\nAssertionError"
                },
                {
                    "test": "assert cal_sum(10) == 66",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 9, in <module>\nAssertionError"
                },
                {
                    "test": "assert cal_sum(11) == 88",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 9, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/450",
        "specification": "Write a function to extract specified size of strings from a given list of string values.",
        "generated_code": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/450",
            "tests": [
                {
                    "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
                    "status": "Passed"
                },
                {
                    "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
                    "status": "Passed"
                },
                {
                    "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/451",
        "specification": "Write a function to remove all whitespaces from the given string.",
        "generated_code": "def remove_whitespaces(s: str) -> str:\n  return s.replace(\" \", \"\")\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/451",
            "tests": [
                {
                    "test": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/453",
        "specification": "Write a python function to find the sum of even factors of a number.",
        "generated_code": "def sumofFactors(n: int) -> int:\n    factors_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            factors_sum += i\n    return factors_sum\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/453",
            "tests": [
                {
                    "test": "assert sumofFactors(18) == 26",
                    "status": "Passed"
                },
                {
                    "test": "assert sumofFactors(30) == 48",
                    "status": "Passed"
                },
                {
                    "test": "assert sumofFactors(6) == 8",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/454",
        "specification": "Write a function that matches a word containing 'z'.",
        "generated_code": "def text_match_wordz(text: str) -> bool:\n    words = text.split()\n    for word in words:\n        if 'z' in word:\n            return True\n    return False\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/454",
            "tests": [
                {
                    "test": "assert text_match_wordz(\"pythonz.\")==True",
                    "status": "Passed"
                },
                {
                    "test": "assert text_match_wordz(\"xyz.\")==True",
                    "status": "Passed"
                },
                {
                    "test": "assert text_match_wordz(\"  lang  .\")==False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/455",
        "specification": "Write a function to check whether the given month number contains 31 days or not.",
        "generated_code": "def check_monthnumb_number(n: int) -> bool:\n    if n in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/455",
            "tests": [
                {
                    "test": "assert check_monthnumb_number(5)==True",
                    "status": "Passed"
                },
                {
                    "test": "assert check_monthnumb_number(2)==False",
                    "status": "Passed"
                },
                {
                    "test": "assert check_monthnumb_number(6)==False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/456",
        "specification": "Write a function to reverse each string in a given list of string values.",
        "generated_code": "def reverse_string_list(str_list):\n    return [s[::-1] for s in str_list]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/456",
            "tests": [
                {
                    "test": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
                    "status": "Passed"
                },
                {
                    "test": "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
                    "status": "Passed"
                },
                {
                    "test": "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/457",
        "specification": "Write a python function to find the sublist having minimum length.",
        "generated_code": "def Find_Min(sublists):\n    min_len = min(len(sublist) for sublist in sublists)\n    return [sublist for sublist in sublists if len(sublist) == min_len][0]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/457",
            "tests": [
                {
                    "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
                    "status": "Passed"
                },
                {
                    "test": "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
                    "status": "Passed"
                },
                {
                    "test": "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/458",
        "specification": "Write a function to find the area of a rectangle.",
        "generated_code": "def rectangle_area(length, width):\n    return length * width\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/458",
            "tests": [
                {
                    "test": "assert rectangle_area(10,20)==200",
                    "status": "Passed"
                },
                {
                    "test": "assert rectangle_area(10,5)==50",
                    "status": "Passed"
                },
                {
                    "test": "assert rectangle_area(4,2)==8",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/459",
        "specification": "Write a function to remove uppercase substrings from a given string.",
        "generated_code": "def remove_uppercase(s: str) -> str:\n    result = ''\n    i = 0\n    while i < len(s):\n        if s[i].isupper():\n            while i < len(s) and s[i].isupper():\n                i += 1\n        else:\n            result += s[i]\n            i += 1\n    return result\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/459",
            "tests": [
                {
                    "test": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/460",
        "specification": "Write a python function to get the first element of each sublist.",
        "generated_code": "def Extract(lst):\n    return [sublist[0] for sublist in lst]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/460",
            "tests": [
                {
                    "test": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
                    "status": "Passed"
                },
                {
                    "test": "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
                    "status": "Passed"
                },
                {
                    "test": "assert Extract([[9,8,1],[1,2]]) == [9,1]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/462",
        "specification": "Write a function to find all possible combinations of the elements of a given list.",
        "generated_code": "import itertools\n\ndef combinations_list(input_list):\n    result = []\n    for r in range(len(input_list) + 1):\n        result.extend(itertools.combinations(input_list, r))\n    return [list(x) for x in result]\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/462",
            "tests": [],
            "errors": [
                {
                    "test": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 9, in <module>\nAssertionError"
                },
                {
                    "test": "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 9, in <module>\nAssertionError"
                },
                {
                    "test": "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 9, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/463",
        "specification": "Write a function to find the maximum product subarray of the given array.",
        "generated_code": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = nums[0]\n    min_product = nums[0]\n    result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n\n        result = max(result, max_product)\n\n    return result\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/463",
            "tests": [
                {
                    "test": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
                    "status": "Passed"
                },
                {
                    "test": "assert max_subarray_product([6, -3, -10, 0, 2]) == 180",
                    "status": "Passed"
                },
                {
                    "test": "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/465",
        "specification": "Write a function to drop empty items from a given dictionary.",
        "generated_code": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/465",
            "tests": [
                {
                    "test": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
                    "status": "Passed"
                },
                {
                    "test": "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
                    "status": "Passed"
                },
                {
                    "test": "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/468",
        "specification": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "generated_code": "def max_product(nums):\n    if not nums:\n        return 0\n\n    n = len(nums)\n    dp = [[1] * n for _ in range(n)]\n\n    max_product = nums[0]\n\n    for i in range(n):\n        dp[i][i] = nums[i]\n        max_product = max(max_product, nums[i])\n\n    for length in range(1, n):\n        for i in range(n - length):\n            j = i + length\n            dp[i][j] = max(nums[i:j+1])\n            max_product = max(max_product, dp[i][j])\n\n    return max_product\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/468",
            "tests": [],
            "errors": [
                {
                    "test": "assert max_product([3, 100, 4, 5, 150, 6]) == 3000",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\nAssertionError"
                },
                {
                    "test": "assert max_product([4, 42, 55, 68, 80]) == 50265600",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\nAssertionError"
                },
                {
                    "test": "assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/470",
        "specification": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "generated_code": "def add_pairwise(tup):\n    return tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/470",
            "tests": [
                {
                    "test": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
                    "status": "Passed"
                },
                {
                    "test": "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
                    "status": "Passed"
                },
                {
                    "test": "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/471",
        "specification": "Write a python function to find the product of the array multiplication modulo n.",
        "generated_code": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/471",
            "tests": [
                {
                    "test": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9",
                    "status": "Passed"
                },
                {
                    "test": "assert find_remainder([1,1,1],1) == 0",
                    "status": "Passed"
                },
                {
                    "test": "assert find_remainder([1,2,1],2) == 0",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/472",
        "specification": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "generated_code": "def check_Consecutive(lst):\n    return lst == list(range(min(lst), max(lst) + 1))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/472",
            "tests": [
                {
                    "test": "assert check_Consecutive([1,2,3,4,5]) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert check_Consecutive([1,2,3,5,6]) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert check_Consecutive([1,2,1]) == False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/473",
        "specification": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "generated_code": "def tuple_intersection(tup_list1, tup_list2):\n    set1 = set(tuple(sorted(t)) for t in tup_list1)\n    set2 = set(tuple(sorted(t)) for t in tup_list2)\n    return set1 & set2\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/473",
            "tests": [
                {
                    "test": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
                    "status": "Passed"
                },
                {
                    "test": "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
                    "status": "Passed"
                },
                {
                    "test": "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/474",
        "specification": "Write a function to replace characters in a string.",
        "generated_code": "def replace_char(s, old, new):\n    return s.replace(old, new)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/474",
            "tests": [
                {
                    "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
                    "status": "Passed"
                },
                {
                    "test": "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
                    "status": "Passed"
                },
                {
                    "test": "assert replace_char(\"python\",'l','a')==(\"python\")",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/475",
        "specification": "Write a function to sort a dictionary by value.",
        "generated_code": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/475",
            "tests": [
                {
                    "test": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
                    "status": "Passed"
                },
                {
                    "test": "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
                    "status": "Passed"
                },
                {
                    "test": "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/476",
        "specification": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "generated_code": "def big_sum(nums):\n    return max(nums) + min(nums)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/476",
            "tests": [
                {
                    "test": "assert big_sum([1,2,3]) == 4",
                    "status": "Passed"
                },
                {
                    "test": "assert big_sum([-1,2,3,4]) == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert big_sum([2,3,6]) == 8",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/477",
        "specification": "Write a python function to convert the given string to lower case.",
        "generated_code": "def is_lower(s):\n    return s.lower()\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/477",
            "tests": [
                {
                    "test": "assert is_lower(\"InValid\") == \"invalid\"",
                    "status": "Passed"
                },
                {
                    "test": "assert is_lower(\"TruE\") == \"true\"",
                    "status": "Passed"
                },
                {
                    "test": "assert is_lower(\"SenTenCE\") == \"sentence\"",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/478",
        "specification": "Write a function to remove lowercase substrings from a given string.",
        "generated_code": "def remove_lowercase(s: str) -> str:\n    result = ''\n    i = 0\n    while i < len(s):\n        if s[i].islower():\n            while i < len(s) and s[i].islower():\n                i += 1\n        else:\n            result += s[i]\n            i += 1\n    return result\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/478",
            "tests": [
                {
                    "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_lowercase(\"FInD\")==('FID')",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_lowercase(\"STRinG\")==('STRG')",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/479",
        "specification": "Write a python function to find the first digit of a given number.",
        "generated_code": "def first_Digit(n: int) -> int:\n    return int(str(n)[0])\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/479",
            "tests": [
                {
                    "test": "assert first_Digit(123) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert first_Digit(456) == 4",
                    "status": "Passed"
                },
                {
                    "test": "assert first_Digit(12) == 1",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/554",
        "specification": "Write a python function which takes a list of integers and only returns the odd ones.",
        "generated_code": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/554",
            "tests": [
                {
                    "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]",
                    "status": "Passed"
                },
                {
                    "test": "assert Split([10,11,12,13]) == [11,13]",
                    "status": "Passed"
                },
                {
                    "test": "assert Split([7,8,9,1]) == [7,9,1]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/555",
        "specification": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "generated_code": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural_numbers\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/555",
            "tests": [
                {
                    "test": "assert difference(3) == 30",
                    "status": "Passed"
                },
                {
                    "test": "assert difference(5) == 210",
                    "status": "Passed"
                },
                {
                    "test": "assert difference(2) == 6",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/556",
        "specification": "Write a python function to count the number of pairs whose xor value is odd.",
        "generated_code": "def find_Odd_Pair(nums, n):\n    odd_count = 0\n    even_count = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return odd_count * even_count + odd_count * (odd_count - 1) // 2\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/556",
            "tests": [],
            "errors": [
                {
                    "test": "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 11, in <module>\nAssertionError"
                },
                {
                    "test": "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 11, in <module>\nAssertionError"
                },
                {
                    "test": "assert find_Odd_Pair([1,2,3],3) == 2",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 11, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/557",
        "specification": "Write a function to toggle the case of all characters in a string.",
        "generated_code": "def toggle_string(s):\n    return s.swapcase()\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/557",
            "tests": [
                {
                    "test": "assert toggle_string(\"Python\")==(\"pYTHON\")",
                    "status": "Passed"
                },
                {
                    "test": "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
                    "status": "Passed"
                },
                {
                    "test": "assert toggle_string(\"LIttLE\")==(\"liTTle\")",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/558",
        "specification": "Write a python function to find the sum of the per-digit difference between two integers.",
        "generated_code": "def digit_distance_nums(num1, num2):\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    max_len = max(len(str_num1), len(str_num2))\n    str_num1 = str_num1.zfill(max_len)\n    str_num2 = str_num2.zfill(max_len)\n    distance = 0\n    for i in range(max_len):\n        distance += abs(int(str_num1[i]) - int(str_num2[i]))\n    return distance\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/558",
            "tests": [
                {
                    "test": "assert digit_distance_nums(1,2) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert digit_distance_nums(23,56) == 6",
                    "status": "Passed"
                },
                {
                    "test": "assert digit_distance_nums(123,256) == 7",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/559",
        "specification": "Write a function to find the sum of the largest contiguous sublist in the given list.",
        "generated_code": "def max_sub_array_sum(nums: list, n: int) -> int:\n    max_current = max_global = nums[0]\n    for i in range(1, n):\n        max_current = max(nums[i], max_current + nums[i])\n        max_global = max(max_global, max_current)\n    return max_global\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/559",
            "tests": [
                {
                    "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
                    "status": "Passed"
                },
                {
                    "test": "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
                    "status": "Passed"
                },
                {
                    "test": "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/560",
        "specification": "Write a function to find the union of the elements of two given tuples and output them in sorted order.",
        "generated_code": "def union_elements(tup1, tup2):\n  return tuple(sorted(set(tup1) | set(tup2)))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/560",
            "tests": [
                {
                    "test": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
                    "status": "Passed"
                },
                {
                    "test": "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
                    "status": "Passed"
                },
                {
                    "test": "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/562",
        "specification": "Write a python function to find the length of the longest sublists.",
        "generated_code": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/562",
            "tests": [
                {
                    "test": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
                    "status": "Passed"
                },
                {
                    "test": "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/563",
        "specification": "Write a function to extract values between quotation marks from a string.",
        "generated_code": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/563",
            "tests": [
                {
                    "test": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
                    "status": "Passed"
                },
                {
                    "test": "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
                    "status": "Passed"
                },
                {
                    "test": "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/564",
        "specification": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "generated_code": "def count_Pairs(nums, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] != nums[j]:\n                count += 1\n    return count\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/564",
            "tests": [
                {
                    "test": "assert count_Pairs([1,2,1],3) == 2",
                    "status": "Passed"
                },
                {
                    "test": "assert count_Pairs([1,1,1,1],4) == 0",
                    "status": "Passed"
                },
                {
                    "test": "assert count_Pairs([1,2,3,4,5],5) == 10",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/565",
        "specification": "Write a python function to split a string into characters.",
        "generated_code": "def split(s: str) -> list:\n    return list(s)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/565",
            "tests": [
                {
                    "test": "assert split('python') == ['p','y','t','h','o','n']",
                    "status": "Passed"
                },
                {
                    "test": "assert split('Name') == ['N','a','m','e']",
                    "status": "Passed"
                },
                {
                    "test": "assert split('program') == ['p','r','o','g','r','a','m']",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/566",
        "specification": "Write a function to get the sum of the digits of a non-negative integer.",
        "generated_code": "def sum_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/566",
            "tests": [
                {
                    "test": "assert sum_digits(345)==12",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_digits(12)==3",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_digits(97)==16",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/567",
        "specification": "Write a function to check whether a specified list is sorted or not.",
        "generated_code": "def issort_list(input_list):\n    return input_list == sorted(input_list)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/567",
            "tests": [
                {
                    "test": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
                    "status": "Passed"
                },
                {
                    "test": "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
                    "status": "Passed"
                },
                {
                    "test": "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/568",
        "specification": "Write a function to create a list of N empty dictionaries.",
        "generated_code": "def empty_list(n: int) -> list:\n  return [{} for _ in range(n)]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/568",
            "tests": [
                {
                    "test": "assert empty_list(5)==[{},{},{},{},{}]",
                    "status": "Passed"
                },
                {
                    "test": "assert empty_list(6)==[{},{},{},{},{},{}]",
                    "status": "Passed"
                },
                {
                    "test": "assert empty_list(7)==[{},{},{},{},{},{},{}]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/569",
        "specification": "Write a function to sort each sublist of strings in a given list of lists.",
        "generated_code": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/569",
            "tests": [
                {
                    "test": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
                    "status": "Passed"
                },
                {
                    "test": "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
                    "status": "Passed"
                },
                {
                    "test": "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/572",
        "specification": "Write a python function to remove duplicate numbers from a given number of lists.",
        "generated_code": "def two_unique_nums(nums):\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    unique_nums = [num for num, count in count_dict.items() if count == 1]\n    return unique_nums\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/572",
            "tests": [
                {
                    "test": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
                    "status": "Passed"
                },
                {
                    "test": "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
                    "status": "Passed"
                },
                {
                    "test": "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/573",
        "specification": "Write a python function to calculate the product of the unique numbers in a given list.",
        "generated_code": "def unique_product(nums):\n    unique_nums = set(nums)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/573",
            "tests": [
                {
                    "test": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
                    "status": "Passed"
                },
                {
                    "test": "assert unique_product([1, 2, 3, 1,]) == 6",
                    "status": "Passed"
                },
                {
                    "test": "assert unique_product([7, 8, 9, 0, 1, 1]) == 0",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/576",
        "specification": "Write a python function to check whether a list is sublist of another or not.",
        "generated_code": "def is_Sub_Array(main_list, sub_list):\n    sub_list_str = ''.join(map(str, sub_list))\n    main_list_str = ''.join(map(str, main_list))\n    return sub_list_str in main_list_str\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/576",
            "tests": [
                {
                    "test": "assert is_Sub_Array([1,4,3,5],[1,2]) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert is_Sub_Array([1,2,1],[1,2,1]) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert is_Sub_Array([1,0,2,2],[2,2,0]) ==False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/577",
        "specification": "Write a python function to find the last digit in factorial of a given number.",
        "generated_code": "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    elif n == 2 or n == 3 or n == 4:\n        return n\n    else:\n        return 0 if n % 5 == 0 else 0 if n % 5 == 1 else 2 if n % 5 == 2 else 6 if n % 5 == 3 else 4\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/577",
            "tests": [
                {
                    "test": "assert last_Digit_Factorial(4) == 4",
                    "status": "Passed"
                },
                {
                    "test": "assert last_Digit_Factorial(21) == 0",
                    "status": "Passed"
                },
                {
                    "test": "assert last_Digit_Factorial(30) == 0",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/578",
        "specification": "Write a function to interleave 3 lists of the same length into a single flat list.",
        "generated_code": "def interleave_lists(list1, list2, list3):\n    return [item for triple in zip(list1, list2, list3) for item in triple]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/578",
            "tests": [
                {
                    "test": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
                    "status": "Passed"
                },
                {
                    "test": "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
                    "status": "Passed"
                },
                {
                    "test": "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/579",
        "specification": "Write a function to find the dissimilar elements in the given two tuples.",
        "generated_code": "def find_dissimilar(tup1, tup2):\n    set1, set2 = set(tup1), set(tup2)\n    return tuple(set1.symmetric_difference(set2))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/579",
            "tests": [
                {
                    "test": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
                    "status": "Passed"
                },
                {
                    "test": "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
                    "status": "Passed"
                },
                {
                    "test": "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/580",
        "specification": "Write a function to remove uneven elements in the nested mixed tuple.",
        "generated_code": "def extract_even(mixed_tuple):\n    return tuple(i if isinstance(i, tuple) else i for i in mixed_tuple if i % 2 == 0 or (isinstance(i, tuple) and all(j % 2 == 0 for j in i)))\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/580",
            "tests": [],
            "errors": [
                {
                    "test": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\n  File \"<string>\", line 2, in extract_even\n  File \"<string>\", line 2, in <genexpr>\nTypeError: unsupported operand type(s) for %: 'tuple' and 'int'"
                },
                {
                    "test": "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\n  File \"<string>\", line 2, in extract_even\n  File \"<string>\", line 2, in <genexpr>\nTypeError: unsupported operand type(s) for %: 'tuple' and 'int'"
                },
                {
                    "test": "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\n  File \"<string>\", line 2, in extract_even\n  File \"<string>\", line 2, in <genexpr>\nTypeError: unsupported operand type(s) for %: 'tuple' and 'int'"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/581",
        "specification": "Write a python function to find the surface area of a square pyramid with a given base edge and height.",
        "generated_code": "import math\ndef surface_Area(base, height):\n    return base**2 + 4 * (base * math.sqrt((base/2)**2 + height**2))\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/581",
            "tests": [],
            "errors": [
                {
                    "test": "assert surface_Area(3,4) == 33",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 5, in <module>\nAssertionError"
                },
                {
                    "test": "assert surface_Area(4,5) == 56",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 5, in <module>\nAssertionError"
                },
                {
                    "test": "assert surface_Area(1,2) == 5",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 5, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/583",
        "specification": "Write a function which returns nth catalan number.",
        "generated_code": "def catalan_number(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    catalan = [0 for _ in range(n + 1)]\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/583",
            "tests": [
                {
                    "test": "assert catalan_number(10)==16796",
                    "status": "Passed"
                },
                {
                    "test": "assert catalan_number(9)==4862",
                    "status": "Passed"
                },
                {
                    "test": "assert catalan_number(7)==429",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/585",
        "specification": "Write a function to find the n most expensive items in a given dataset.",
        "generated_code": "import heapq as hq\n\ndef expensive_items(items, n):\n    return hq.nlargest(n, items, key=lambda x: x['price'])\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/585",
            "tests": [
                {
                    "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
                    "status": "Passed"
                },
                {
                    "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
                    "status": "Passed"
                },
                {
                    "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/586",
        "specification": "Write a python function to split a list at the nth eelment and add the first part to the end.",
        "generated_code": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/586",
            "tests": [
                {
                    "test": "assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]",
                    "status": "Passed"
                },
                {
                    "test": "assert split_Arr([1,2,3,4],1) == [2,3,4,1]",
                    "status": "Passed"
                },
                {
                    "test": "assert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/587",
        "specification": "Write a function to convert a list to a tuple.",
        "generated_code": "def list_tuple(input_list):\n    return tuple(input_list)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/587",
            "tests": [
                {
                    "test": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
                    "status": "Passed"
                },
                {
                    "test": "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
                    "status": "Passed"
                },
                {
                    "test": "assert list_tuple([58,44,56])==(58,44,56)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/588",
        "specification": "Write a python function to find the difference between largest and smallest value in a given list.",
        "generated_code": "def big_diff(nums):\n    return max(nums) - min(nums)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/588",
            "tests": [
                {
                    "test": "assert big_diff([1,2,3,4]) == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert big_diff([4,5,12]) == 8",
                    "status": "Passed"
                },
                {
                    "test": "assert big_diff([9,2,3]) == 7",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/589",
        "specification": "Write a function to find perfect squares between two given numbers.",
        "generated_code": "def perfect_squares(start, end):\n    return [i**2 for i in range(1, int(end**0.5) + 1) if start <= i**2 <= end]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/589",
            "tests": [
                {
                    "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
                    "status": "Passed"
                },
                {
                    "test": "assert perfect_squares(50,100)==[64, 81, 100]",
                    "status": "Passed"
                },
                {
                    "test": "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/590",
        "specification": "Write a function to convert polar coordinates to rectangular coordinates.",
        "generated_code": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(math.radians(theta))\n    y = r * math.sin(math.radians(theta))\n    complex_coord = complex(x, y)\n    return ((x, y), complex_coord)\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/590",
            "tests": [],
            "errors": [
                {
                    "test": "assert polar_rect(3, 4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                },
                {
                    "test": "assert polar_rect(4, 7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                },
                {
                    "test": "assert polar_rect(15, 17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/591",
        "specification": "Write a python function to interchange the first and last elements in a list.",
        "generated_code": "def swap_List(input_list):\n    if len(input_list) > 1:\n        input_list[0], input_list[-1] = input_list[-1], input_list[0]\n    return input_list\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/591",
            "tests": [
                {
                    "test": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
                    "status": "Passed"
                },
                {
                    "test": "assert swap_List([1, 2, 3]) == [3, 2, 1]",
                    "status": "Passed"
                },
                {
                    "test": "assert swap_List([4, 5, 6]) == [6, 5, 4]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/592",
        "specification": "Write a python function to find the sum of the product of consecutive binomial co-efficients.",
        "generated_code": "import math\n\ndef sum_Of_product(n):\n    total = 0\n    for i in range(n):\n        total += math.comb(n, i) * math.comb(n, i+1)\n    return total\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/592",
            "tests": [
                {
                    "test": "assert sum_Of_product(3) == 15",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_Of_product(4) == 56",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_Of_product(1) == 1",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/593",
        "specification": "Write a function to remove leading zeroes from an ip address.",
        "generated_code": "def removezero_ip(ip: str) -> str:\n    return '.'.join(part.lstrip('0') or '0' for part in ip.split('.'))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/593",
            "tests": [
                {
                    "test": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196')",
                    "status": "Passed"
                },
                {
                    "test": "assert removezero_ip(\"12.01.024\")==('12.1.24')",
                    "status": "Passed"
                },
                {
                    "test": "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/594",
        "specification": "Write a function to find the difference of the first even and first odd number of a given list.",
        "generated_code": "def diff_even_odd(lst):\n    even_nums = [num for num in lst if num % 2 == 0]\n    odd_nums = [num for num in lst if num % 2 != 0]\n    return even_nums[0] - odd_nums[0]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/594",
            "tests": [
                {
                    "test": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
                    "status": "Passed"
                },
                {
                    "test": "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
                    "status": "Passed"
                },
                {
                    "test": "assert diff_even_odd([1,5,7,9,10])==9",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/596",
        "specification": "Write a function to find the size in bytes of the given tuple.",
        "generated_code": "import sys\n\ndef tuple_size(tup: tuple) -> int:\n    return sys.getsizeof(tup)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/596",
            "tests": [
                {
                    "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
                    "status": "Passed"
                },
                {
                    "test": "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
                    "status": "Passed"
                },
                {
                    "test": "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/597",
        "specification": "Write a function to find kth element from the given two sorted arrays.",
        "generated_code": "def find_kth(arr1, arr2, k):\n    if k < 1:\n        raise ValueError(\"k should be a positive integer\")\n    if not arr1:\n        return arr2[k-1]\n    if not arr2:\n        return arr1[k-1]\n    i, j = 0, 0\n    while k > 0:\n        if i == len(arr1):\n            return arr2[j+k-1]\n        if j == len(arr2):\n            return arr1[i+k-1]\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        k -= 1\n    return min(arr1[i-1], arr2[j-1])\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/597",
            "tests": [],
            "errors": [
                {
                    "test": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 21, in <module>\nAssertionError"
                },
                {
                    "test": "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 21, in <module>\nAssertionError"
                },
                {
                    "test": "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 21, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/598",
        "specification": "Write a function to check whether the given number is armstrong or not.",
        "generated_code": "def armstrong_number(n: int) -> bool:\n    num_str = str(n)\n    num_len = len(num_str)\n    sum_cubes = sum(int(digit) ** num_len for digit in num_str)\n    return sum_cubes == n\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/598",
            "tests": [
                {
                    "test": "assert armstrong_number(153)==True",
                    "status": "Passed"
                },
                {
                    "test": "assert armstrong_number(259)==False",
                    "status": "Passed"
                },
                {
                    "test": "assert armstrong_number(4458)==False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/599",
        "specification": "Write a function to find sum and average of first n natural numbers.",
        "generated_code": "def sum_average(n):\n    total_sum = n * (n + 1) // 2\n    average = total_sum / n\n    return total_sum, average\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/599",
            "tests": [
                {
                    "test": "assert sum_average(10)==(55, 5.5)",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_average(15)==(120, 8.0)",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_average(20)==(210, 10.5)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/600",
        "specification": "Write a python function to check whether the given number is even or not.",
        "generated_code": "def is_Even(n: int) -> bool:\n    return n % 2 == 0\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/600",
            "tests": [
                {
                    "test": "assert is_Even(1) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert is_Even(2) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert is_Even(3) == False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/602",
        "specification": "Write a python function to find the first repeated character in a given string.",
        "generated_code": "def first_repeated_char(s: str) -> str:\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n        if char_count[char] > 1:\n            return char\n    return None\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/602",
            "tests": [
                {
                    "test": "assert first_repeated_char(\"abcabc\") == \"a\"",
                    "status": "Passed"
                },
                {
                    "test": "assert first_repeated_char(\"abc\") == None",
                    "status": "Passed"
                },
                {
                    "test": "assert first_repeated_char(\"123123\") == \"1\"",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/603",
        "specification": "Write a function to get all lucid numbers smaller than or equal to a given integer.",
        "generated_code": "def get_ludic(n):\n    def is_ludic(num):\n        if num < 2:\n            return True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    lucid_nums = [i for i in range(1, n + 1) if is_ludic(i)]\n    return lucid_nums\n",
        "pass_rate": 0.3333333333333333,
        "test_results": {
            "task_id": "Mbpp/603",
            "tests": [
                {
                    "test": "assert get_ludic(10) == [1, 2, 3, 5, 7]",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\nAssertionError"
                },
                {
                    "test": "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/604",
        "specification": "Write a function to reverse words seperated by spaces in a given string.",
        "generated_code": "def reverse_words(s: str) -> str:\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/604",
            "tests": [
                {
                    "test": "assert reverse_words(\"python program\")==(\"program python\")",
                    "status": "Passed"
                },
                {
                    "test": "assert reverse_words(\"java language\")==(\"language java\")",
                    "status": "Passed"
                },
                {
                    "test": "assert reverse_words(\"indian man\")==(\"man indian\")",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/605",
        "specification": "Write a function to check if the given integer is a prime number.",
        "generated_code": "import math\n\ndef prime_num(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = math.floor(math.sqrt(n))\n    for d in range(3, 1 + max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/605",
            "tests": [
                {
                    "test": "assert prime_num(13)==True",
                    "status": "Passed"
                },
                {
                    "test": "assert prime_num(7)==True",
                    "status": "Passed"
                },
                {
                    "test": "assert prime_num(-1010)==False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/606",
        "specification": "Write a function to convert degrees to radians.",
        "generated_code": "import math\ndef radian_degree(deg):\n    return math.radians(deg)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/606",
            "tests": [
                {
                    "test": "assert radian_degree(90)==1.5707963267948966",
                    "status": "Passed"
                },
                {
                    "test": "assert radian_degree(60)==1.0471975511965976",
                    "status": "Passed"
                },
                {
                    "test": "assert radian_degree(120)==2.0943951023931953",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/607",
        "specification": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "generated_code": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/607",
            "tests": [
                {
                    "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)",
                    "status": "Passed"
                },
                {
                    "test": "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)",
                    "status": "Passed"
                },
                {
                    "test": "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/608",
        "specification": "Write a python function to find nth bell number.",
        "generated_code": "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/608",
            "tests": [
                {
                    "test": "assert bell_Number(2) == 2",
                    "status": "Passed"
                },
                {
                    "test": "assert bell_Number(3) == 5",
                    "status": "Passed"
                },
                {
                    "test": "assert bell_Number(4) == 15",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/610",
        "specification": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.",
        "generated_code": "def remove_kth_element(input_list, k):\n    return input_list[:k-1] + input_list[k:]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/610",
            "tests": [
                {
                    "test": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/611",
        "specification": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.",
        "generated_code": "def max_of_nth(matrix, n):\n    return max(row[n-1] for row in matrix)\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/611",
            "tests": [],
            "errors": [
                {
                    "test": "assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/612",
        "specification": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
        "generated_code": "def merge(lst):\n    return [list(x) for x in zip(*lst)]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/612",
            "tests": [
                {
                    "test": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]",
                    "status": "Passed"
                },
                {
                    "test": "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]",
                    "status": "Passed"
                },
                {
                    "test": "assert merge([[[1], [2]], [[3], [4]], [[5], [6]], [[7], [8]]]) == [[[1], [3], [5], [7]], [[2], [4], [6], [8]]]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/614",
        "specification": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
        "generated_code": "def cummulative_sum(tup_list):\n    return sum(sum(tup) for tup in tup_list)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/614",
            "tests": [
                {
                    "test": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30",
                    "status": "Passed"
                },
                {
                    "test": "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37",
                    "status": "Passed"
                },
                {
                    "test": "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/615",
        "specification": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.",
        "generated_code": "def average_tuple(tuples):\n    return [sum(t) / len(t) for t in tuples]\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/615",
            "tests": [],
            "errors": [
                {
                    "test": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/616",
        "specification": "Write a function which takes two tuples of the same length and performs the element wise modulo.",
        "generated_code": "def tuple_modulo(tup1, tup2):\n    return tuple(a % b for a, b in zip(tup1, tup2))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/616",
            "tests": [
                {
                    "test": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
                    "status": "Passed"
                },
                {
                    "test": "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)",
                    "status": "Passed"
                },
                {
                    "test": "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/618",
        "specification": "Write a function to divide two lists element wise.",
        "generated_code": "def div_list(list1, list2):\n    return [a / b for a, b in zip(list1, list2)]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/618",
            "tests": [
                {
                    "test": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
                    "status": "Passed"
                },
                {
                    "test": "assert div_list([3,2],[1,4])==[3.0, 0.5]",
                    "status": "Passed"
                },
                {
                    "test": "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/619",
        "specification": "Write a function to move all the numbers to the end of the given string.",
        "generated_code": "def move_num(s: str) -> str:\n    chars = []\n    nums = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return ''.join(chars) + ''.join(nums)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/619",
            "tests": [
                {
                    "test": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'",
                    "status": "Passed"
                },
                {
                    "test": "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'",
                    "status": "Passed"
                },
                {
                    "test": "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/620",
        "specification": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.",
        "generated_code": "def largest_subset(nums):\n    nums.sort()\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/620",
            "tests": [
                {
                    "test": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4",
                    "status": "Passed"
                },
                {
                    "test": "assert largest_subset([10, 5, 3, 15, 20]) == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert largest_subset([18, 1, 3, 6, 13, 17]) == 4",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/622",
        "specification": "Write a function to find the median of two sorted lists of same size.",
        "generated_code": "def get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    mid = n\n    if n % 2 == 0:\n        median = (merged_list[mid - 1] + merged_list[mid]) / 2\n    else:\n        median = merged_list[mid]\n    return median\n",
        "pass_rate": 0.6666666666666666,
        "test_results": {
            "task_id": "Mbpp/622",
            "tests": [
                {
                    "test": "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5",
                    "status": "Passed"
                },
                {
                    "test": "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/623",
        "specification": "Write a function to compute the n-th power of each number in a list.",
        "generated_code": "def nth_nums(nums, n):\n    return [num ** n for num in nums]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/623",
            "tests": [
                {
                    "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
                    "status": "Passed"
                },
                {
                    "test": "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])",
                    "status": "Passed"
                },
                {
                    "test": "assert nth_nums([12,15],5)==([248832, 759375])",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/624",
        "specification": "Write a python function to convert a given string to uppercase.",
        "generated_code": "def is_upper(s: str) -> str:\n    return s.upper()\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/624",
            "tests": [
                {
                    "test": "assert is_upper(\"person\") ==\"PERSON\"",
                    "status": "Passed"
                },
                {
                    "test": "assert is_upper(\"final\") == \"FINAL\"",
                    "status": "Passed"
                },
                {
                    "test": "assert is_upper(\"Valid\") == \"VALID\"",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/626",
        "specification": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "generated_code": "import math\n\ndef triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    elif radius == 0:\n        return 0\n    else:\n        return (radius ** 2) / 2\n",
        "pass_rate": 0.6666666666666666,
        "test_results": {
            "task_id": "Mbpp/626",
            "tests": [
                {
                    "test": "assert triangle_area(-1) == None",
                    "status": "Passed"
                },
                {
                    "test": "assert triangle_area(0) == 0",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert triangle_area(2) == 4",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 11, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/628",
        "specification": "Write a function to replace all spaces in the given string with '%20'.",
        "generated_code": "def replace_spaces(s: str) -> str:\n    return s.replace(' ', '%20')\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/628",
            "tests": [
                {
                    "test": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'",
                    "status": "Passed"
                },
                {
                    "test": "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'",
                    "status": "Passed"
                },
                {
                    "test": "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/629",
        "specification": "Write a python function to find even numbers from a list of numbers.",
        "generated_code": "def Split(nums):\n    return [num for num in nums if num % 2 == 0]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/629",
            "tests": [
                {
                    "test": "assert Split([1,2,3,4,5]) == [2,4]",
                    "status": "Passed"
                },
                {
                    "test": "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]",
                    "status": "Passed"
                },
                {
                    "test": "assert Split ([8,12,15,19]) == [8,12]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/630",
        "specification": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
        "generated_code": "def get_coordinates(coord):\n    x, y = coord\n    return [[x-1, y-1], [x-1, y], [x-1, y+1], \n            [x, y-1], [x, y], [x, y+1], \n            [x+1, y-1], [x+1, y], [x+1, y+1]]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/630",
            "tests": [
                {
                    "test": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]",
                    "status": "Passed"
                },
                {
                    "test": "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]",
                    "status": "Passed"
                },
                {
                    "test": "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/631",
        "specification": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "generated_code": "def replace_spaces(s: str) -> str:\n    s = s.replace(' ', '_')\n    s = s.replace('_', ' ')\n    s = s.replace(' ', '_')\n    return s\n",
        "pass_rate": 0.6666666666666666,
        "test_results": {
            "task_id": "Mbpp/631",
            "tests": [
                {
                    "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
                    "status": "Passed"
                },
                {
                    "test": "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert replace_spaces('The_Avengers') == 'The Avengers'",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 7, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/632",
        "specification": "Write a python function to move all zeroes to the end of the given list.",
        "generated_code": "def move_zero(nums):\n    return [num for num in nums if num != 0] + [num for num in nums if num == 0]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/632",
            "tests": [
                {
                    "test": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
                    "status": "Passed"
                },
                {
                    "test": "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]",
                    "status": "Passed"
                },
                {
                    "test": "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/633",
        "specification": "Write a python function to find the sum of xor of all pairs of numbers in the given list.",
        "generated_code": "def pair_xor_Sum(nums, n):\n    total_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_xor += nums[i] ^ nums[j]\n    return total_xor\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/633",
            "tests": [
                {
                    "test": "assert pair_xor_Sum([5,9,7,6],4) == 47",
                    "status": "Passed"
                },
                {
                    "test": "assert pair_xor_Sum([7,3,5],3) == 12",
                    "status": "Passed"
                },
                {
                    "test": "assert pair_xor_Sum([7,3],2) == 4",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/635",
        "specification": "Write a function to sort the given list.",
        "generated_code": "import heapq as hq\n\ndef heap_sort(nums):\n    return hq.nsmallest(len(nums), nums)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/635",
            "tests": [
                {
                    "test": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
                    "status": "Passed"
                },
                {
                    "test": "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
                    "status": "Passed"
                },
                {
                    "test": "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/637",
        "specification": "Write a function to check whether the given amount has no profit and no loss",
        "generated_code": "def noprofit_noloss(selling_price, cost_price):\n    return selling_price == cost_price\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/637",
            "tests": [
                {
                    "test": "assert noprofit_noloss(1500,1200)==False",
                    "status": "Passed"
                },
                {
                    "test": "assert noprofit_noloss(100,100)==True",
                    "status": "Passed"
                },
                {
                    "test": "assert noprofit_noloss(2000,5000)==False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/638",
        "specification": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "generated_code": "def wind_chill(wind_velocity, temperature):\n    if wind_velocity < 5:\n        return round(temperature)\n    else:\n        wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16)\n        return round(wind_chill_index)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/638",
            "tests": [
                {
                    "test": "assert wind_chill(120,35)==40",
                    "status": "Passed"
                },
                {
                    "test": "assert wind_chill(40,20)==19",
                    "status": "Passed"
                },
                {
                    "test": "assert wind_chill(10,8)==6",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/639",
        "specification": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
        "generated_code": "def sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/639",
            "tests": [
                {
                    "test": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16",
                    "status": "Passed"
                },
                {
                    "test": "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10",
                    "status": "Passed"
                },
                {
                    "test": "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/641",
        "specification": "Write a function to find the nth nonagonal number.",
        "generated_code": "def is_nonagonal(n: int) -> int:\n    return (n * ((n - 1) * n - 2)) // 3\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/641",
            "tests": [],
            "errors": [
                {
                    "test": "assert is_nonagonal(10) == 325",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert is_nonagonal(15) == 750",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert is_nonagonal(18) == 1089",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/643",
        "specification": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "generated_code": "def text_match_wordz_middle(s):\n    s = s.strip()\n    if s and s[0] != 'z' and s[-1] != 'z' and 'z' in s[1:-1]:\n        return True\n    return False\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/643",
            "tests": [
                {
                    "test": "assert text_match_wordz_middle(\"pythonzabc.\")==True",
                    "status": "Passed"
                },
                {
                    "test": "assert text_match_wordz_middle(\"zxyabc.\")==False",
                    "status": "Passed"
                },
                {
                    "test": "assert text_match_wordz_middle(\"  lang  .\")==False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/644",
        "specification": "Write a python function to reverse an array upto a given position.",
        "generated_code": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/644",
            "tests": [
                {
                    "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
                    "status": "Passed"
                },
                {
                    "test": "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]",
                    "status": "Passed"
                },
                {
                    "test": "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/720",
        "specification": "Write a function to add a dictionary to the tuple. The output should be a tuple.",
        "generated_code": "def add_dict_to_tuple(tup, dictionary):\n    return tup + (dictionary,)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/720",
            "tests": [
                {
                    "test": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})",
                    "status": "Passed"
                },
                {
                    "test": "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})",
                    "status": "Passed"
                },
                {
                    "test": "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/721",
        "specification": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "generated_code": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return round(dp[-1][-1] / n**2, 1)\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/721",
            "tests": [],
            "errors": [
                {
                    "test": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\nAssertionError"
                },
                {
                    "test": "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\nAssertionError"
                },
                {
                    "test": "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\nAssertionError"
                },
                {
                    "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/722",
        "specification": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "generated_code": "def filter_data(students, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= min_height and weight >= min_weight}\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/722",
            "tests": [
                {
                    "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}",
                    "status": "Passed"
                },
                {
                    "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}",
                    "status": "Passed"
                },
                {
                    "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/723",
        "specification": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.",
        "generated_code": "def count_same_pair(list1, list2):\n    return sum(1 for i, j in zip(list1, list2) if i == j)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/723",
            "tests": [
                {
                    "test": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4",
                    "status": "Passed"
                },
                {
                    "test": "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
                    "status": "Passed"
                },
                {
                    "test": "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2])==1",
                    "status": "Passed"
                },
                {
                    "test": "assert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/724",
        "specification": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "generated_code": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/724",
            "tests": [
                {
                    "test": "assert power_base_sum(2,100)==115",
                    "status": "Passed"
                },
                {
                    "test": "assert power_base_sum(8,10)==37",
                    "status": "Passed"
                },
                {
                    "test": "assert power_base_sum(8,15)==62",
                    "status": "Passed"
                },
                {
                    "test": "assert power_base_sum(3,3)==9",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/725",
        "specification": "Write a function to extract values between quotation marks \" \" of the given string.",
        "generated_code": "import re\n\ndef extract_quotation(s: str) -> list:\n    return re.findall(r'\"([^\"]*)\"', s)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/725",
            "tests": [
                {
                    "test": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']",
                    "status": "Passed"
                },
                {
                    "test": "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']",
                    "status": "Passed"
                },
                {
                    "test": "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
                    "status": "Passed"
                },
                {
                    "test": "assert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/726",
        "specification": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
        "generated_code": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/726",
            "tests": [
                {
                    "test": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)",
                    "status": "Passed"
                },
                {
                    "test": "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)",
                    "status": "Passed"
                },
                {
                    "test": "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
                    "status": "Passed"
                },
                {
                    "test": "assert multiply_elements((12,)) == ()",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/728",
        "specification": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "generated_code": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/728",
            "tests": [
                {
                    "test": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_list([1,2,3],[5,6,7])==[6,8,10]",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_list([15,20,30],[15,45,75])==[30,65,105]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/730",
        "specification": "Write a function to remove consecutive duplicates of a given list.",
        "generated_code": "def consecutive_duplicates(lst):\n    result = []\n    for i in lst:\n        if not result or i != result[-1]:\n            result.append(i)\n    return result\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/730",
            "tests": [
                {
                    "test": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]",
                    "status": "Passed"
                },
                {
                    "test": "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]",
                    "status": "Passed"
                },
                {
                    "test": "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
                    "status": "Passed"
                },
                {
                    "test": "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/731",
        "specification": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "generated_code": "import math\ndef lateralsurface_cone(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/731",
            "tests": [
                {
                    "test": "assert lateralsurface_cone(5,12)==204.20352248333654",
                    "status": "Passed"
                },
                {
                    "test": "assert lateralsurface_cone(10,15)==566.3586699569488",
                    "status": "Passed"
                },
                {
                    "test": "assert lateralsurface_cone(19,17)==1521.8090132193388",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/732",
        "specification": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "generated_code": "def replace_specialchar(s: str) -> str:\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/732",
            "tests": [
                {
                    "test": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')",
                    "status": "Passed"
                },
                {
                    "test": "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')",
                    "status": "Passed"
                },
                {
                    "test": "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/733",
        "specification": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "generated_code": "def find_first_occurrence(sorted_array, target):\n    left, right = 0, len(sorted_array) - 1\n    first_occurrence = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_array[mid] == target:\n            first_occurrence = mid\n            right = mid - 1\n        elif sorted_array[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return first_occurrence\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/733",
            "tests": [
                {
                    "test": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
                    "status": "Passed"
                },
                {
                    "test": "assert find_first_occurrence([1, 2, 4, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/734",
        "specification": "Write a python function to find sum of products of all possible sublists of a given list.",
        "generated_code": "from itertools import chain, combinations\n\ndef sum_Of_Subarray_Prod(lst):\n    def prod(lst):\n        result = 1\n        for num in lst:\n            result *= num\n        return result\n\n    return sum(prod(sublist) for sublist in chain(*map(lambda x: combinations(lst, x), range(1, len(lst) + 1))))\n",
        "pass_rate": 0.3333333333333333,
        "test_results": {
            "task_id": "Mbpp/734",
            "tests": [
                {
                    "test": "assert sum_Of_Subarray_Prod([1,2]) == 5",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert sum_Of_Subarray_Prod([1,2,3]) == 20",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\nAssertionError"
                },
                {
                    "test": "assert sum_Of_Subarray_Prod([1,2,3,4]) == 84",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/735",
        "specification": "Write a python function to toggle bits of the number except the first and the last bit.",
        "generated_code": "def toggle_middle_bits(n: int) -> int:\n    # Convert the number to binary and remove the '0b' prefix\n    binary = bin(n)[2:]\n    \n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Add the first bit (which remains unchanged)\n    result += binary[0]\n    \n    # Toggle the middle bits\n    for bit in binary[1:-1]:\n        result += '1' if bit == '0' else '0'\n    \n    # Add the last bit (which remains unchanged)\n    result += binary[-1]\n    \n    # Convert the result back to an integer and return it\n    return int(result, 2)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/735",
            "tests": [
                {
                    "test": "assert toggle_middle_bits(9) == 15",
                    "status": "Passed"
                },
                {
                    "test": "assert toggle_middle_bits(10) == 12",
                    "status": "Passed"
                },
                {
                    "test": "assert toggle_middle_bits(11) == 13",
                    "status": "Passed"
                },
                {
                    "test": "assert toggle_middle_bits(0b1000001) == 0b1111111",
                    "status": "Passed"
                },
                {
                    "test": "assert toggle_middle_bits(0b1001101) == 0b1110011",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/736",
        "specification": "Write a function to locate the left insertion point for a specified value in sorted order.",
        "generated_code": "def left_insertion(sorted_list, target):\n    idx = 0\n    while idx < len(sorted_list) and sorted_list[idx] < target:\n        idx += 1\n    return idx\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/736",
            "tests": [
                {
                    "test": "assert left_insertion([1,2,4,5],6)==4",
                    "status": "Passed"
                },
                {
                    "test": "assert left_insertion([1,2,4,5],3)==2",
                    "status": "Passed"
                },
                {
                    "test": "assert left_insertion([1,2,4,5],7)==4",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/737",
        "specification": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "generated_code": "import re\ndef check_str(s: str) -> bool:\n    pattern = r\"^[aeiouAEIOU]\"\n    return bool(re.match(pattern, s))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/737",
            "tests": [
                {
                    "test": "assert check_str(\"annie\")",
                    "status": "Passed"
                },
                {
                    "test": "assert not check_str(\"dawood\")",
                    "status": "Passed"
                },
                {
                    "test": "assert check_str(\"Else\")",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/739",
        "specification": "Write a python function to find the index of smallest triangular number with n digits.",
        "generated_code": "def find_Index(n: int) -> int:\n    triangular_num = 1\n    index = 1\n    while True:\n        if len(str(triangular_num)) == n:\n            return index\n        triangular_num += index\n        index += 1\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/739",
            "tests": [],
            "errors": [
                {
                    "test": "assert find_Index(2) == 4",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                },
                {
                    "test": "assert find_Index(3) == 14",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                },
                {
                    "test": "assert find_Index(4) == 45",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/740",
        "specification": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.",
        "generated_code": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i+1] for i in range(0, len(tup), 2)}\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/740",
            "tests": [
                {
                    "test": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}",
                    "status": "Passed"
                },
                {
                    "test": "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}",
                    "status": "Passed"
                },
                {
                    "test": "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/741",
        "specification": "Write a python function to check whether all the characters are same or not.",
        "generated_code": "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/741",
            "tests": [
                {
                    "test": "assert all_Characters_Same(\"python\") == False",
                    "status": "Passed"
                },
                {
                    "test": "assert all_Characters_Same(\"aaa\") == True",
                    "status": "Passed"
                },
                {
                    "test": "assert all_Characters_Same(\"data\") == False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/742",
        "specification": "Write a function to caluclate the area of a tetrahedron.",
        "generated_code": "import math\n\ndef area_tetrahedron(side):\n    return math.sqrt(3) * (side ** 2)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/742",
            "tests": [
                {
                    "test": "assert math.isclose(area_tetrahedron(3), 15.588457268119894, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(area_tetrahedron(20), 692.8203230275509, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(area_tetrahedron(10), 173.20508075688772, rel_tol=0.001)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/743",
        "specification": "Write a function to rotate a given list by specified number of items to the right direction.",
        "generated_code": "def rotate_right(lst, n):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/743",
            "tests": [
                {
                    "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]",
                    "status": "Passed"
                },
                {
                    "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
                    "status": "Passed"
                },
                {
                    "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/744",
        "specification": "Write a function to check if the given tuple has any none value or not.",
        "generated_code": "def check_none(tup):\n    return any(i is None for i in tup)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/744",
            "tests": [
                {
                    "test": "assert check_none((10, 4, 5, 6, None)) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert check_none((7, 8, 9, 11, 14)) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert check_none((1, 2, 3, 4, None)) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/745",
        "specification": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.",
        "generated_code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        is_divisible = all(num % int(digit) == 0 for digit in num_str if digit != '0')\n        if is_divisible:\n            result.append(num)\n    return result\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/745",
            "tests": [],
            "errors": [
                {
                    "test": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                },
                {
                    "test": "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                },
                {
                    "test": "assert divisible_by_digits(20,25)==[22, 24]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/748",
        "specification": "Write a function to put spaces between words starting with capital letters in a given string.",
        "generated_code": "def capital_words_spaces(s):\n    result = \"\"\n    for char in s:\n        if char.isupper() and result:\n            result += \" \" + char\n        else:\n            result += char\n    return result\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/748",
            "tests": [
                {
                    "test": "assert capital_words_spaces(\"Python\") == 'Python'",
                    "status": "Passed"
                },
                {
                    "test": "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'",
                    "status": "Passed"
                },
                {
                    "test": "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/749",
        "specification": "Write a function to sort a given list of strings of numbers numerically.",
        "generated_code": "def sort_numeric_strings(lst: list) -> list:\n    return sorted(lst, key=int)\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/749",
            "tests": [],
            "errors": [
                {
                    "test": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/750",
        "specification": "Write a function to add the given tuple to the given list.",
        "generated_code": "def add_tuple(lst, tup):\n    return lst + list(tup)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/750",
            "tests": [
                {
                    "test": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]",
                    "status": "Passed"
                },
                {
                    "test": "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]",
                    "status": "Passed"
                },
                {
                    "test": "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/751",
        "specification": "Write a function to check if the given array represents min heap or not.",
        "generated_code": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if 2*i + 1 < n and arr[i] > arr[2*i + 1]:\n            return False\n        if 2*i + 2 < n and arr[i] > arr[2*i + 2]:\n            return False\n    return True\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/751",
            "tests": [
                {
                    "test": "assert check_min_heap([1, 2, 3, 4, 5, 6]) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert check_min_heap([2, 3, 4, 5, 10, 15]) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert check_min_heap([2, 10, 4, 5, 3, 15]) == False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/752",
        "specification": "Write a function to find the nth jacobsthal number.  0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...",
        "generated_code": "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/752",
            "tests": [],
            "errors": [
                {
                    "test": "assert jacobsthal_num(5) == 11",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\nAssertionError"
                },
                {
                    "test": "assert jacobsthal_num(2) == 1",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\nAssertionError"
                },
                {
                    "test": "assert jacobsthal_num(4) == 5",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\nAssertionError"
                },
                {
                    "test": "assert jacobsthal_num(13) == 2731",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/753",
        "specification": "Write a function to find minimum k records from tuple list.  - in this case a verbatim copy of test cases",
        "generated_code": "def min_k(tup_list, k):\n    return sorted(tup_list, key=lambda x: x[1])[:k]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/753",
            "tests": [
                {
                    "test": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
                    "status": "Passed"
                },
                {
                    "test": "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]",
                    "status": "Passed"
                },
                {
                    "test": "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/754",
        "specification": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.",
        "generated_code": "def extract_index_list(l1, l2, l3):\n    return [x for x in l1 if x in l2 and x in l3 and l1.index(x) == l2.index(x) == l3.index(x)]\n",
        "pass_rate": 0.25,
        "test_results": {
            "task_id": "Mbpp/754",
            "tests": [
                {
                    "test": "assert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/755",
        "specification": "Write a function to find the second smallest number in a list.",
        "generated_code": "def second_smallest(nums):\n    unique_nums = list(set(nums))\n    unique_nums.sort()\n    if len(unique_nums) < 2:\n        return None\n    else:\n        return unique_nums[1]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/755",
            "tests": [
                {
                    "test": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
                    "status": "Passed"
                },
                {
                    "test": "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
                    "status": "Passed"
                },
                {
                    "test": "assert second_smallest([2,2])==None",
                    "status": "Passed"
                },
                {
                    "test": "assert second_smallest([2,2,2])==None",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/757",
        "specification": "Write a function to count the pairs of reverse strings in the given string list.",
        "generated_code": "def count_reverse_pairs(strings):\n    count = 0\n    for i in range(len(strings)):\n        for j in range(i + 1, len(strings)):\n            if strings[i] == strings[j][::-1]:\n                count += 1\n    return count\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/757",
            "tests": [
                {
                    "test": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2",
                    "status": "Passed"
                },
                {
                    "test": "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/758",
        "specification": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.",
        "generated_code": "def unique_sublists(list_of_lists):\n    sublist_count = {}\n    for sublist in list_of_lists:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in sublist_count:\n            sublist_count[tuple_sublist] += 1\n        else:\n            sublist_count[tuple_sublist] = 1\n    return sublist_count\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/758",
            "tests": [
                {
                    "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
                    "status": "Passed"
                },
                {
                    "test": "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
                    "status": "Passed"
                },
                {
                    "test": "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
                    "status": "Passed"
                },
                {
                    "test": "assert unique_sublists([['john']])=={('john',): 1}",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/759",
        "specification": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "generated_code": "import re\ndef is_decimal(s: str) -> bool:\n    pattern = r'^-?\\d+(\\.\\d{2})$'\n    return bool(re.match(pattern, s))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/759",
            "tests": [
                {
                    "test": "assert is_decimal('123.11')==True",
                    "status": "Passed"
                },
                {
                    "test": "assert is_decimal('e666.86')==False",
                    "status": "Passed"
                },
                {
                    "test": "assert is_decimal('3.124587')==False",
                    "status": "Passed"
                },
                {
                    "test": "assert is_decimal('1.11')==True",
                    "status": "Passed"
                },
                {
                    "test": "assert is_decimal('1.1.11')==False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/760",
        "specification": "Write a python function to check whether a list of numbers contains only one distinct element or not.",
        "generated_code": "def unique_Element(nums: list) -> bool:\n    return len(set(nums)) == 1\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/760",
            "tests": [
                {
                    "test": "assert unique_Element([1,1,1]) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert unique_Element([1,2,1,2]) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert unique_Element([1,2,3,4,5]) == False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/762",
        "specification": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "generated_code": "def check_monthnumber_number(month_number: int) -> bool:\n    thirty_days_months = [4, 6, 9, 11]\n    return month_number in thirty_days_months\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/762",
            "tests": [
                {
                    "test": "assert check_monthnumber_number(6)==True",
                    "status": "Passed"
                },
                {
                    "test": "assert check_monthnumber_number(2)==False",
                    "status": "Passed"
                },
                {
                    "test": "assert check_monthnumber_number(12)==False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/763",
        "specification": "Write a python function to find the minimum difference between any two elements in a given array.",
        "generated_code": "def find_min_diff(arr, n):\n    arr = sorted(list(arr))\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/763",
            "tests": [
                {
                    "test": "assert find_min_diff((1,5,3,19,18,25),6) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert find_min_diff((4,3,2,6),4) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert find_min_diff((30,5,20,9),4) == 4",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/764",
        "specification": "Write a python function to count number of digits in a given string.",
        "generated_code": "def number_ctr(s: str) -> int:\n  return sum(c.isdigit() for c in s)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/764",
            "tests": [
                {
                    "test": "assert number_ctr('program2bedone') == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert number_ctr('3wonders') == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert number_ctr('123') == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert number_ctr('3wond-1ers2') == 3",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/765",
        "specification": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "generated_code": "def is_polite(n):\n    count = 0\n    num = 1\n    while True:\n        if is_odious(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n\ndef is_odious(num):\n    while num > 0:\n        if num % 2 == 0:\n            num = num // 2\n        else:\n            return False\n    return True\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/765",
            "tests": [],
            "errors": [
                {
                    "test": "assert is_polite(7) == 11",
                    "error": "Command '['python3', '-c', 'def is_polite(n):\\n    count = 0\\n    num = 1\\n    while True:\\n        if is_odious(num):\\n            count += 1\\n            if count == n:\\n                return num\\n        num += 1\\n\\ndef is_odious(num):\\n    while num > 0:\\n        if num % 2 == 0:\\n            num = num // 2\\n        else:\\n            return False\\n    return True\\n\\nassert is_polite(7) == 11']' timed out after 3 seconds"
                },
                {
                    "test": "assert is_polite(4) == 7",
                    "error": "Command '['python3', '-c', 'def is_polite(n):\\n    count = 0\\n    num = 1\\n    while True:\\n        if is_odious(num):\\n            count += 1\\n            if count == n:\\n                return num\\n        num += 1\\n\\ndef is_odious(num):\\n    while num > 0:\\n        if num % 2 == 0:\\n            num = num // 2\\n        else:\\n            return False\\n    return True\\n\\nassert is_polite(4) == 7']' timed out after 3 seconds"
                },
                {
                    "test": "assert is_polite(9) == 13",
                    "error": "Command '['python3', '-c', 'def is_polite(n):\\n    count = 0\\n    num = 1\\n    while True:\\n        if is_odious(num):\\n            count += 1\\n            if count == n:\\n                return num\\n        num += 1\\n\\ndef is_odious(num):\\n    while num > 0:\\n        if num % 2 == 0:\\n            num = num // 2\\n        else:\\n            return False\\n    return True\\n\\nassert is_polite(9) == 13']' timed out after 3 seconds"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/766",
        "specification": "Write a function to return a list of all pairs of consecutive items in a given list.",
        "generated_code": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/766",
            "tests": [
                {
                    "test": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]",
                    "status": "Passed"
                },
                {
                    "test": "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
                    "status": "Passed"
                },
                {
                    "test": "assert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]",
                    "status": "Passed"
                },
                {
                    "test": "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/767",
        "specification": "Write a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,",
        "generated_code": "def get_pairs_count(nums, target_sum):\n    num_count = {}\n    count = 0\n    for num in nums:\n        complement = target_sum - num\n        if complement in num_count:\n            count += num_count[complement]\n        num_count[num] = num_count.get(num, 0) + 1\n    return count\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/767",
            "tests": [
                {
                    "test": "assert get_pairs_count([1,1,1,1],2) == 6",
                    "status": "Passed"
                },
                {
                    "test": "assert get_pairs_count([1,5,7,-1,5],6) == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert get_pairs_count([1,-2,3],1) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert get_pairs_count([-1,-2,3],-3) == 1",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/769",
        "specification": "Write a python function to get the difference between two lists.",
        "generated_code": "def Diff(list1, list2):\n    return list(set(list1) - set(list2)) + list(set(list2) - set(list1))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/769",
            "tests": [
                {
                    "test": "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]",
                    "status": "Passed"
                },
                {
                    "test": "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]",
                    "status": "Passed"
                },
                {
                    "test": "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/770",
        "specification": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
        "generated_code": "def odd_num_sum(n):\n    return sum(i**4 for i in range(1, 2*n, 2))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/770",
            "tests": [
                {
                    "test": "assert odd_num_sum(2) == 82",
                    "status": "Passed"
                },
                {
                    "test": "assert odd_num_sum(3) == 707",
                    "status": "Passed"
                },
                {
                    "test": "assert odd_num_sum(4) == 3108",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/771",
        "specification": "Write a function to check if the given expression is balanced or not.",
        "generated_code": "def check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping:\n            if not stack or mapping[char] != stack.pop():\n                return False\n    return not stack\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/771",
            "tests": [
                {
                    "test": "assert check_expression(\"{()}[{}]\") == True",
                    "status": "Passed"
                },
                {
                    "test": "assert check_expression(\"{()}[{]\") == False",
                    "status": "Passed"
                },
                {
                    "test": "assert check_expression(\"{()}[{}][]({})\") == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/772",
        "specification": "Write a function to remove all the words with k length in the given string.",
        "generated_code": "def remove_length(s, k):\n    words = s.split()\n    return ' '.join(word for word in words if len(word) != k)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/772",
            "tests": [
                {
                    "test": "assert remove_length('The person is most value tet', 3) == 'person is most value'",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/773",
        "specification": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
        "generated_code": "def occurance_substring(main_string, sub_string):\n    index = main_string.find(sub_string)\n    if index != -1:\n        end_index = index + len(sub_string)\n        return sub_string, index, end_index\n    else:\n        return None\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/773",
            "tests": [
                {
                    "test": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)",
                    "status": "Passed"
                },
                {
                    "test": "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)",
                    "status": "Passed"
                },
                {
                    "test": "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
                    "status": "Passed"
                },
                {
                    "test": "assert occurance_substring('c++ programming, c++ language','python')==None",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/775",
        "specification": "Write a python function to check whether every odd index contains odd numbers of a given list.",
        "generated_code": "def odd_position(lst):\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/775",
            "tests": [
                {
                    "test": "assert odd_position([2,1,4,3,6,7,6,3]) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert odd_position([4,1,2]) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert odd_position([1,2,3]) == False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/777",
        "specification": "Write a python function to find the sum of non-repeated elements in a given list.",
        "generated_code": "def find_sum(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    sum_of_non_repeated = sum(num for num, count in count_dict.items() if count == 1)\n    return sum_of_non_repeated\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/777",
            "tests": [],
            "errors": [
                {
                    "test": "assert find_sum([1,2,3,1,1,4,5,6]) == 21",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 11, in <module>\nAssertionError"
                },
                {
                    "test": "assert find_sum([1,10,9,4,2,10,10,45,4]) == 71",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 11, in <module>\nAssertionError"
                },
                {
                    "test": "assert find_sum([12,10,9,45,2,10,10,45,10]) == 78",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 11, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/778",
        "specification": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
        "generated_code": "def pack_consecutive_duplicates(lst):\n    result = []\n    current_sublist = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_sublist.append(lst[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [lst[i]]\n    result.append(current_sublist)\n    return result\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/778",
            "tests": [
                {
                    "test": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]",
                    "status": "Passed"
                },
                {
                    "test": "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]",
                    "status": "Passed"
                },
                {
                    "test": "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/780",
        "specification": "Write a function to find the combinations of sums with tuples in the given tuple list.",
        "generated_code": "def find_combinations(tuples):\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            result.append(tuple(a + b for a, b in zip(tuples[i], tuples[j])))\n    return result\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/780",
            "tests": [
                {
                    "test": "assert find_combinations([(1, 2, 3), (3, 4, 5)]) == [(4, 6, 8)]",
                    "status": "Passed"
                },
                {
                    "test": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]",
                    "status": "Passed"
                },
                {
                    "test": "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]",
                    "status": "Passed"
                },
                {
                    "test": "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/781",
        "specification": "Write a python function to check whether the count of divisors is even.",
        "generated_code": "def count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 2\n        if i * i == n:\n            count -= 1\n    return count % 2 == 0\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/781",
            "tests": [
                {
                    "test": "assert count_divisors(10)",
                    "status": "Passed"
                },
                {
                    "test": "assert not count_divisors(100)",
                    "status": "Passed"
                },
                {
                    "test": "assert count_divisors(125)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/782",
        "specification": "Write a python function to find the sum of all odd length subarrays.",
        "generated_code": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for length in range(1, n + 1, 2):\n        for i in range(n - length + 1):\n            total_sum += sum(arr[i:i + length])\n    return total_sum\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/782",
            "tests": [
                {
                    "test": "assert odd_length_sum([1,2,4]) == 14",
                    "status": "Passed"
                },
                {
                    "test": "assert odd_length_sum([1,2,1,2]) == 15",
                    "status": "Passed"
                },
                {
                    "test": "assert odd_length_sum([1,7]) == 8",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/784",
        "specification": "Write a function to find the product of first even and odd number of a given list.",
        "generated_code": "def mul_even_odd(lst):\n    even_nums = [num for num in lst if num % 2 == 0]\n    odd_nums = [num for num in lst if num % 2 != 0]\n    if even_nums and odd_nums:\n        return even_nums[0] * odd_nums[0]\n    elif even_nums:\n        return even_nums[0]\n    elif odd_nums:\n        return odd_nums[0]\n    else:\n        return None\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/784",
            "tests": [
                {
                    "test": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4",
                    "status": "Passed"
                },
                {
                    "test": "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
                    "status": "Passed"
                },
                {
                    "test": "assert mul_even_odd([1,5,7,9,10])==10",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/785",
        "specification": "Write a function to convert tuple string to integer tuple.",
        "generated_code": "def tuple_str_int(s):\n    s = s.replace(\"(\", \"\").replace(\")\", \"\")\n    return tuple(map(int, s.split(\", \")))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/785",
            "tests": [
                {
                    "test": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)",
                    "status": "Passed"
                },
                {
                    "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
                    "status": "Passed"
                },
                {
                    "test": "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
                    "status": "Passed"
                },
                {
                    "test": "assert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/786",
        "specification": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "generated_code": "def right_insertion(sorted_list, target):\n    idx = 0\n    while idx < len(sorted_list) and target > sorted_list[idx]:\n        idx += 1\n    return idx\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/786",
            "tests": [
                {
                    "test": "assert right_insertion([1,2,4,5],6)==4",
                    "status": "Passed"
                },
                {
                    "test": "assert right_insertion([1,2,4,5],3)==2",
                    "status": "Passed"
                },
                {
                    "test": "assert right_insertion([1,2,4,5],7)==4",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/787",
        "specification": "Write a function that matches a string that has an a followed by three 'b'.",
        "generated_code": "import re\ndef text_match_three(text):\n    pattern = re.compile(r\"abbb\")\n    return bool(pattern.search(text))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/787",
            "tests": [
                {
                    "test": "assert not text_match_three(\"ac\")",
                    "status": "Passed"
                },
                {
                    "test": "assert not text_match_three(\"dc\")",
                    "status": "Passed"
                },
                {
                    "test": "assert text_match_three(\"abbbba\")",
                    "status": "Passed"
                },
                {
                    "test": "assert text_match_three(\"caacabbbba\")",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/788",
        "specification": "Write a function to create a new tuple from the given string and list.",
        "generated_code": "def new_tuple(lst, str):\n    return tuple(lst + [str])\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/788",
            "tests": [
                {
                    "test": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')",
                    "status": "Passed"
                },
                {
                    "test": "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')",
                    "status": "Passed"
                },
                {
                    "test": "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/790",
        "specification": "Write a python function to check whether every even index contains even numbers of a given list.",
        "generated_code": "def even_position(lst):\n    return all(i % 2 == 0 for i in lst[::2])\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/790",
            "tests": [
                {
                    "test": "assert even_position([3,2,1]) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert even_position([1,2,3]) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert even_position([2,1,4]) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/791",
        "specification": "Write a function to remove tuples from the given tuple.",
        "generated_code": "def remove_nested(t):\n    return tuple(i for i in t if not isinstance(i, tuple))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/791",
            "tests": [
                {
                    "test": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/792",
        "specification": "Write a python function to count the number of lists in a given number of lists.",
        "generated_code": "def count_list(lists):\n    return len(lists)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/792",
            "tests": [
                {
                    "test": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4",
                    "status": "Passed"
                },
                {
                    "test": "assert count_list([[1,2],[2,3],[4,5]]) == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert count_list([[1,0],[2,0]]) == 2",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/793",
        "specification": "Write a python function to find the last position of an element in a sorted array.",
        "generated_code": "def last(sorted_array, target):\n    for i in range(len(sorted_array) - 1, -1, -1):\n        if sorted_array[i] == target:\n            return i\n    return -1\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/793",
            "tests": [
                {
                    "test": "assert last([1,2,3],1) == 0",
                    "status": "Passed"
                },
                {
                    "test": "assert last([1,1,1,2,3,4],1) == 2",
                    "status": "Passed"
                },
                {
                    "test": "assert last([2,2,3,3,6,8,9],3) == 3",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/794",
        "specification": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "generated_code": "import re\ndef text_starta_endb(s: str) -> bool:\n    pattern = re.compile(r'^a.*b$')\n    return bool(pattern.fullmatch(s))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/794",
            "tests": [
                {
                    "test": "assert text_starta_endb(\"aabbbb\")",
                    "status": "Passed"
                },
                {
                    "test": "assert not text_starta_endb(\"aabAbbbc\")",
                    "status": "Passed"
                },
                {
                    "test": "assert not text_starta_endb(\"accddbbjjj\")",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/796",
        "specification": "Write function to find the sum of all items in the given dictionary.",
        "generated_code": "def return_sum(input_dict):\n    return sum(input_dict.values())\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/796",
            "tests": [
                {
                    "test": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600",
                    "status": "Passed"
                },
                {
                    "test": "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88",
                    "status": "Passed"
                },
                {
                    "test": "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/797",
        "specification": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
        "generated_code": "def sum_in_range(l, r):\n    return sum(i for i in range(l, r + 1) if i % 2 != 0)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/797",
            "tests": [
                {
                    "test": "assert sum_in_range(2,5) == 8",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_in_range(5,7) == 12",
                    "status": "Passed"
                },
                {
                    "test": "assert sum_in_range(7,13) == 40",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/798",
        "specification": "Write a python function to find the sum of an array.",
        "generated_code": "def _sum(arr):\n    return sum(arr)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/798",
            "tests": [
                {
                    "test": "assert _sum([1, 2, 3]) == 6",
                    "status": "Passed"
                },
                {
                    "test": "assert _sum([15, 12, 13, 10]) == 50",
                    "status": "Passed"
                },
                {
                    "test": "assert _sum([0, 1, 2]) == 3",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/799",
        "specification": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "generated_code": "def left_rotate(n, d):\n    return (n << d) & ((1 << 32) - 1)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/799",
            "tests": [
                {
                    "test": "assert left_rotate(16,2) == 64",
                    "status": "Passed"
                },
                {
                    "test": "assert left_rotate(10,2) == 40",
                    "status": "Passed"
                },
                {
                    "test": "assert left_rotate(99,3) == 792",
                    "status": "Passed"
                },
                {
                    "test": "assert left_rotate(99,3) == 792",
                    "status": "Passed"
                },
                {
                    "test": "assert left_rotate(0b0001,3) == 0b1000",
                    "status": "Passed"
                },
                {
                    "test": "assert left_rotate(0b0101,3) == 0b101000",
                    "status": "Passed"
                },
                {
                    "test": "assert left_rotate(0b11101,3) == 0b11101000",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/800",
        "specification": "Write a function to remove all whitespaces from a string.",
        "generated_code": "def remove_all_spaces(s: str) -> str:\n  return s.replace(\" \", \"\")\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/800",
            "tests": [
                {
                    "test": "assert remove_all_spaces('python  program')==('pythonprogram')",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_all_spaces('python                     program')==('pythonprogram')",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_all_spaces('   python                     program')=='pythonprogram'",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/801",
        "specification": "Write a python function to count the number of equal numbers from three given integers.",
        "generated_code": "def test_three_equal(a, b, c):\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    if count == 2 and a == b == c:\n        count = 3\n    return count\n",
        "pass_rate": 0.6666666666666666,
        "test_results": {
            "task_id": "Mbpp/801",
            "tests": [
                {
                    "test": "assert test_three_equal(1,1,1) == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert test_three_equal(-1,-2,-3) == 0",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert test_three_equal(1,2,2) == 2",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/803",
        "specification": "Write a function to check whether the given number is a perfect square or not.",
        "generated_code": "import math\n\ndef is_perfect_square(n: int) -> bool:\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \n    Args:\n        n (int): The input number to be checked.\n    \n    Returns:\n        bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    root = math.sqrt(n)\n    return int(root + 0.5) ** 2 == n\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/803",
            "tests": [
                {
                    "test": "assert not is_perfect_square(10)",
                    "status": "Passed"
                },
                {
                    "test": "assert is_perfect_square(36)",
                    "status": "Passed"
                },
                {
                    "test": "assert not is_perfect_square(14)",
                    "status": "Passed"
                },
                {
                    "test": "assert is_perfect_square(14*14)",
                    "status": "Passed"
                },
                {
                    "test": "assert not is_perfect_square(125)",
                    "status": "Passed"
                },
                {
                    "test": "assert is_perfect_square(125*125)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/804",
        "specification": "Write a function to check whether the product of numbers in a list is even or not.",
        "generated_code": "def is_product_even(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product % 2 == 0\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/804",
            "tests": [
                {
                    "test": "assert is_product_even([1,2,3])",
                    "status": "Passed"
                },
                {
                    "test": "assert is_product_even([1,2,1,4])",
                    "status": "Passed"
                },
                {
                    "test": "assert not is_product_even([1,1])",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/805",
        "specification": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
        "generated_code": "def max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/805",
            "tests": [
                {
                    "test": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]",
                    "status": "Passed"
                },
                {
                    "test": "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]",
                    "status": "Passed"
                },
                {
                    "test": "assert max_sum_list([[2,3,1]])==[2,3,1]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/806",
        "specification": "Write a function to find maximum run of uppercase characters in the given string.",
        "generated_code": "def max_run_uppercase(s: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/806",
            "tests": [
                {
                    "test": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5",
                    "status": "Passed"
                },
                {
                    "test": "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6",
                    "status": "Passed"
                },
                {
                    "test": "assert max_run_uppercase('GooGLEFluTTER') == 4",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/807",
        "specification": "Write a python function to find the first odd number in a given list of numbers.",
        "generated_code": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/807",
            "tests": [
                {
                    "test": "assert first_odd([1,3,5]) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert first_odd([2,4,1,3]) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert first_odd ([8,9,1]) == 9",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/808",
        "specification": "Write a function to check if the given tuples contain the k or not.",
        "generated_code": "def check_K(tup, k):\n    return k in tup\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/808",
            "tests": [
                {
                    "test": "assert check_K((10, 4, 5, 6, 8), 6) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert check_K((1, 2, 3, 4, 5, 6), 7) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert check_K((7, 8, 9, 44, 11, 12), 11) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/809",
        "specification": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
        "generated_code": "def check_smaller(tup1, tup2):\n    return all(x > y for x, y in zip(tup1, tup2))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/809",
            "tests": [
                {
                    "test": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert check_smaller((4, 5, 6), (3, 4, 5)) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert check_smaller((11, 12, 13), (10, 11, 12)) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    }
]