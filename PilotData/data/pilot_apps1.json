[
    {
        "task_id": "0267",
        "dataset": "apps",
        "model": "llama3-70b",
        "correct": false,
        "description": "You are given two integers $l$ and $r$ ($l \\le r$). Your task is to calculate the sum of numbers from $l$ to $r$ (including $l$ and $r$) such that each number contains at most $k$ different digits, and print this sum modulo $998244353$.\n\nFor example, if $k = 1$ then you have to calculate all numbers from $l$ to $r$ such that each number is formed using only one digit. For $l = 10, r = 50$ the answer is $11 + 22 + 33 + 44 = 110$.\n\n\n-----Input-----\n\nThe only line of the input contains three integers $l$, $r$ and $k$ ($1 \\le l \\le r < 10^{18}, 1 \\le k \\le 10$) — the borders of the segment and the maximum number of different digits.\n\n\n-----Output-----\n\nPrint one integer — the sum of numbers from $l$ to $r$ such that each number contains at most $k$ different digits, modulo $998244353$.\n\n\n-----Examples-----\nInput\n10 50 2\n\nOutput\n1230\n\nInput\n1 2345 10\n\nOutput\n2750685\n\nInput\n101 154 2\n\nOutput\n2189\n\n\n\n-----Note-----\n\nFor the first example the answer is just the sum of numbers from $l$ to $r$ which equals to $\\frac{50 \\cdot 51}{2} - \\frac{9 \\cdot 10}{2} = 1230$. This example also explained in the problem statement but for $k = 1$.\n\nFor the second example the answer is just the sum of numbers from $l$ to $r$ which equals to $\\frac{2345 \\cdot 2346}{2} = 2750685$.\n\nFor the third example the answer is $101 + 110 + 111 + 112 + 113 + 114 + 115 + 116 + 117 + 118 + 119 + 121 + 122 + 131 + 133 + 141 + 144 + 151 = 2189$.",
        "generated_code": "MOD = 998244353\ndef count_numbers(l, r, k):\n    def count(n, k, dp):\n        if k == 0:\n            return 0\n        if (n, k) in dp:\n            return dp[(n, k)]\n        if n < 10**k:\n            dp[(n, k)] = n\n        else:\n            dp[(n, k)] = 9\n            for i in range(1, k):\n                dp[(n, k)] += 9 * 10**(i-1) * (10**(k-i) - 10**(i-1))\n            dp[(n, k)] += (10**(k-1) - 10**(k-2)) * (n // 10**(k-1) - 1)\n            dp[(n, k)] %= MOD\n        return dp[(n, k)]\n\n    dp = {}\n    return (count(r, k, dp) - count(l-1, k, dp)) % MOD\n\nl, r, k = map(int, input().split())\nprint(count_numbers(l, r, k))\n",
        "counter_example": {
            "input": "10 50 2\n",
            "expected": "1230\n",
            "got": "41"
        }
    },
    {
        "task_id": "0267",
        "dataset": "apps",
        "model": "gpt-4o",
        "correct": false,
        "description": "You are given two integers $l$ and $r$ ($l \\le r$). Your task is to calculate the sum of numbers from $l$ to $r$ (including $l$ and $r$) such that each number contains at most $k$ different digits, and print this sum modulo $998244353$.\n\nFor example, if $k = 1$ then you have to calculate all numbers from $l$ to $r$ such that each number is formed using only one digit. For $l = 10, r = 50$ the answer is $11 + 22 + 33 + 44 = 110$.\n\n\n-----Input-----\n\nThe only line of the input contains three integers $l$, $r$ and $k$ ($1 \\le l \\le r < 10^{18}, 1 \\le k \\le 10$) — the borders of the segment and the maximum number of different digits.\n\n\n-----Output-----\n\nPrint one integer — the sum of numbers from $l$ to $r$ such that each number contains at most $k$ different digits, modulo $998244353$.\n\n\n-----Examples-----\nInput\n10 50 2\n\nOutput\n1230\n\nInput\n1 2345 10\n\nOutput\n2750685\n\nInput\n101 154 2\n\nOutput\n2189\n\n\n\n-----Note-----\n\nFor the first example the answer is just the sum of numbers from $l$ to $r$ which equals to $\\frac{50 \\cdot 51}{2} - \\frac{9 \\cdot 10}{2} = 1230$. This example also explained in the problem statement but for $k = 1$.\n\nFor the second example the answer is just the sum of numbers from $l$ to $r$ which equals to $\\frac{2345 \\cdot 2346}{2} = 2750685$.\n\nFor the third example the answer is $101 + 110 + 111 + 112 + 113 + 114 + 115 + 116 + 117 + 118 + 119 + 121 + 122 + 131 + 133 + 141 + 144 + 151 = 2189$.",
        "generated_code": "MOD = 998244353\n\ndef contains_at_most_k_unique_digits(n, k):\n    return len(set(str(n))) <= k\n\ndef sum_of_numbers_with_k_unique_digits(l, r, k):\n    total_sum = 0\n    for num in range(l, r + 1):\n        if contains_at_most_k_unique_digits(num, k):\n            total_sum = (total_sum + num) % MOD\n    return total_sum\n\n# Read input\nl, r, k = map(int, input().split())\n\n# Calculate and print the result\nprint(sum_of_numbers_with_k_unique_digits(l, r, k))\n",
        "counter_example": {
            "input": "427896435961371452 630581697708338740 1\n",
            "expected": "716070897\n",
            "got": "Execution timed out after 3 seconds"
        }
    },
    {
        "task_id": "0108",
        "dataset": "apps",
        "model": "llama3-70b",
        "correct": false,
        "description": "You are given a string s consisting of |s| small english letters.\n\nIn one move you can replace any character of this string to the next character in alphabetical order (a will be replaced with b, s will be replaced with t, etc.). You cannot replace letter z with any other letter.\n\nYour target is to make some number of moves (not necessary minimal) to get string abcdefghijklmnopqrstuvwxyz (english alphabet) as a subsequence. Subsequence of the string is the string that is obtained by deleting characters at some positions. You need to print the string that will be obtained from the given string and will be contain english alphabet as a subsequence or say that it is impossible.\n\n\n-----Input-----\n\nThe only one line of the input consisting of the string s consisting of |s| (1 ≤ |s| ≤ 10^5) small english letters.\n\n\n-----Output-----\n\nIf you can get a string that can be obtained from the given string and will contain english alphabet as a subsequence, print it. Otherwise print «-1» (without quotes).\n\n\n-----Examples-----\nInput\naacceeggiikkmmooqqssuuwwyy\n\nOutput\nabcdefghijklmnopqrstuvwxyz\n\nInput\nthereisnoanswer\n\nOutput\n-1",
        "generated_code": "s = input()\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\nres = ''\nfor char in alphabet:\n    while char in s:\n        res += char\n        s = s.replace(char, chr(ord(char) + 1), 1)\nif len(res) == 26:\n    print(res)\nelse:\n    print(-1)\n",
        "counter_example": {
            "input": "aacceeggiikkmmooqqssuuwwyy\n",
            "expected": "abcdefghijklmnopqrstuvwxyz\n",
            "got": "-1"
        }
    },
    {
        "task_id": "0108",
        "dataset": "apps",
        "model": "gpt-4o",
        "correct": false,
        "description": "You are given a string s consisting of |s| small english letters.\n\nIn one move you can replace any character of this string to the next character in alphabetical order (a will be replaced with b, s will be replaced with t, etc.). You cannot replace letter z with any other letter.\n\nYour target is to make some number of moves (not necessary minimal) to get string abcdefghijklmnopqrstuvwxyz (english alphabet) as a subsequence. Subsequence of the string is the string that is obtained by deleting characters at some positions. You need to print the string that will be obtained from the given string and will be contain english alphabet as a subsequence or say that it is impossible.\n\n\n-----Input-----\n\nThe only one line of the input consisting of the string s consisting of |s| (1 ≤ |s| ≤ 10^5) small english letters.\n\n\n-----Output-----\n\nIf you can get a string that can be obtained from the given string and will contain english alphabet as a subsequence, print it. Otherwise print «-1» (without quotes).\n\n\n-----Examples-----\nInput\naacceeggiikkmmooqqssuuwwyy\n\nOutput\nabcdefghijklmnopqrstuvwxyz\n\nInput\nthereisnoanswer\n\nOutput\n-1",
        "generated_code": "s = input()\n\n# Target alphabet sequence\ntarget = \"abcdefghijklmnopqrstuvwxyz\"\ntarget_len = len(target)\ni, j = 0, 0\n\n# Iterate over the input string and try to match the target sequence\nwhile i < len(s) and j < target_len:\n    if s[i] == target[j]:\n        j += 1\n    i += 1\n\n# If we have matched the entire target sequence, print the target\nif j == target_len:\n    print(target)\nelse:\n    print(-1)\n",
        "counter_example": {
            "input": "aacceeggiikkmmooqqssuuwwyy\n",
            "expected": "abcdefghijklmnopqrstuvwxyz\n",
            "got": "-1"
        }
    },
    {
        "task_id": "0157",
        "dataset": "apps",
        "model": "llama3-70b",
        "correct": true,
        "description": "Nikolay has a lemons, b apples and c pears. He decided to cook a compote. According to the recipe the fruits should be in the ratio 1: 2: 4. It means that for each lemon in the compote should be exactly 2 apples and exactly 4 pears. You can't crumble up, break up or cut these fruits into pieces. These fruits — lemons, apples and pears — should be put in the compote as whole fruits.\n\nYour task is to determine the maximum total number of lemons, apples and pears from which Nikolay can cook the compote. It is possible that Nikolay can't use any fruits, in this case print 0. \n\n\n-----Input-----\n\nThe first line contains the positive integer a (1 ≤ a ≤ 1000) — the number of lemons Nikolay has. \n\nThe second line contains the positive integer b (1 ≤ b ≤ 1000) — the number of apples Nikolay has. \n\nThe third line contains the positive integer c (1 ≤ c ≤ 1000) — the number of pears Nikolay has.\n\n\n-----Output-----\n\nPrint the maximum total number of lemons, apples and pears from which Nikolay can cook the compote.\n\n\n-----Examples-----\nInput\n2\n5\n7\n\nOutput\n7\n\nInput\n4\n7\n13\n\nOutput\n21\n\nInput\n2\n3\n2\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example Nikolay can use 1 lemon, 2 apples and 4 pears, so the answer is 1 + 2 + 4 = 7.\n\nIn the second example Nikolay can use 3 lemons, 6 apples and 12 pears, so the answer is 3 + 6 + 12 = 21.\n\nIn the third example Nikolay don't have enough pears to cook any compote, so the answer is 0.",
        "generated_code": "a = int(input())\nb = int(input())\nc = int(input())\n\nmin_lemon = min(a, b//2, c//4)\nprint(min_lemon + min_lemon*2 + min_lemon*4)\n",
        "counter_example": null
    },
    {
        "task_id": "0157",
        "dataset": "apps",
        "model": "gpt-4o",
        "correct": true,
        "description": "Nikolay has a lemons, b apples and c pears. He decided to cook a compote. According to the recipe the fruits should be in the ratio 1: 2: 4. It means that for each lemon in the compote should be exactly 2 apples and exactly 4 pears. You can't crumble up, break up or cut these fruits into pieces. These fruits — lemons, apples and pears — should be put in the compote as whole fruits.\n\nYour task is to determine the maximum total number of lemons, apples and pears from which Nikolay can cook the compote. It is possible that Nikolay can't use any fruits, in this case print 0. \n\n\n-----Input-----\n\nThe first line contains the positive integer a (1 ≤ a ≤ 1000) — the number of lemons Nikolay has. \n\nThe second line contains the positive integer b (1 ≤ b ≤ 1000) — the number of apples Nikolay has. \n\nThe third line contains the positive integer c (1 ≤ c ≤ 1000) — the number of pears Nikolay has.\n\n\n-----Output-----\n\nPrint the maximum total number of lemons, apples and pears from which Nikolay can cook the compote.\n\n\n-----Examples-----\nInput\n2\n5\n7\n\nOutput\n7\n\nInput\n4\n7\n13\n\nOutput\n21\n\nInput\n2\n3\n2\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example Nikolay can use 1 lemon, 2 apples and 4 pears, so the answer is 1 + 2 + 4 = 7.\n\nIn the second example Nikolay can use 3 lemons, 6 apples and 12 pears, so the answer is 3 + 6 + 12 = 21.\n\nIn the third example Nikolay don't have enough pears to cook any compote, so the answer is 0.",
        "generated_code": "# Read input values\na = int(input())\nb = int(input())\nc = int(input())\n\n# Calculate the maximum number of lemons that can be used\n# It must satisfy the condition that there are 2 apples for each lemon\n# and 4 pears for each lemon.\nmax_lemons = min(a, b // 2, c // 4)\n\n# Calculate the total number of fruits used in the compote\ntotal_fruits = max_lemons * 1 + max_lemons * 2 + max_lemons * 4\n\n# Print the result\nprint(total_fruits)\n",
        "counter_example": null
    },
    {
        "task_id": "0015",
        "dataset": "apps",
        "model": "llama3-70b",
        "correct": true,
        "description": "Vasya likes everything infinite. Now he is studying the properties of a sequence s, such that its first element is equal to a (s_1 = a), and the difference between any two neighbouring elements is equal to c (s_{i} - s_{i} - 1 = c). In particular, Vasya wonders if his favourite integer b appears in this sequence, that is, there exists a positive integer i, such that s_{i} = b. Of course, you are the person he asks for a help.\n\n\n-----Input-----\n\nThe first line of the input contain three integers a, b and c ( - 10^9 ≤ a, b, c ≤ 10^9) — the first element of the sequence, Vasya's favorite number and the difference between any two neighbouring elements of the sequence, respectively.\n\n\n-----Output-----\n\nIf b appears in the sequence s print \"YES\" (without quotes), otherwise print \"NO\" (without quotes).\n\n\n-----Examples-----\nInput\n1 7 3\n\nOutput\nYES\n\nInput\n10 10 0\n\nOutput\nYES\n\nInput\n1 -4 5\n\nOutput\nNO\n\nInput\n0 60 50\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first sample, the sequence starts from integers 1, 4, 7, so 7 is its element.\n\nIn the second sample, the favorite integer of Vasya is equal to the first element of the sequence.\n\nIn the third sample all elements of the sequence are greater than Vasya's favorite integer.\n\nIn the fourth sample, the sequence starts from 0, 50, 100, and all the following elements are greater than Vasya's favorite integer.",
        "generated_code": "a, b, c = map(int, input().split())\nif c == 0:\n    if a == b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelse:\n    if (b - a) % c == 0 and (b - a) / c >= 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
        "counter_example": null
    },
    {
        "task_id": "0015",
        "dataset": "apps",
        "model": "gpt-4o",
        "correct": true,
        "description": "Vasya likes everything infinite. Now he is studying the properties of a sequence s, such that its first element is equal to a (s_1 = a), and the difference between any two neighbouring elements is equal to c (s_{i} - s_{i} - 1 = c). In particular, Vasya wonders if his favourite integer b appears in this sequence, that is, there exists a positive integer i, such that s_{i} = b. Of course, you are the person he asks for a help.\n\n\n-----Input-----\n\nThe first line of the input contain three integers a, b and c ( - 10^9 ≤ a, b, c ≤ 10^9) — the first element of the sequence, Vasya's favorite number and the difference between any two neighbouring elements of the sequence, respectively.\n\n\n-----Output-----\n\nIf b appears in the sequence s print \"YES\" (without quotes), otherwise print \"NO\" (without quotes).\n\n\n-----Examples-----\nInput\n1 7 3\n\nOutput\nYES\n\nInput\n10 10 0\n\nOutput\nYES\n\nInput\n1 -4 5\n\nOutput\nNO\n\nInput\n0 60 50\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first sample, the sequence starts from integers 1, 4, 7, so 7 is its element.\n\nIn the second sample, the favorite integer of Vasya is equal to the first element of the sequence.\n\nIn the third sample all elements of the sequence are greater than Vasya's favorite integer.\n\nIn the fourth sample, the sequence starts from 0, 50, 100, and all the following elements are greater than Vasya's favorite integer.",
        "generated_code": "a, b, c = map(int, input().split())\n\nif b == a:\n    print(\"YES\")\nelif c == 0:\n    print(\"NO\")\nelse:\n    if (b - a) % c == 0 and (b - a) / c >= 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
        "counter_example": null
    },
    {
        "task_id": "0112",
        "dataset": "apps",
        "model": "llama3-70b",
        "correct": false,
        "description": "Absent-minded Masha got set of n cubes for her birthday.\n\nAt each of 6 faces of each cube, there is exactly one digit from 0 to 9. Masha became interested what is the largest natural x such she can make using her new cubes all integers from 1 to x.\n\nTo make a number Masha can rotate her cubes and put them in a row. After that, she looks at upper faces of cubes from left to right and reads the number.\n\nThe number can't contain leading zeros. It's not required to use all cubes to build a number.\n\nPay attention: Masha can't make digit 6 from digit 9 and vice-versa using cube rotations.\n\n\n-----Input-----\n\nIn first line integer n is given (1 ≤ n ≤ 3) — the number of cubes, Masha got for her birthday.\n\nEach of next n lines contains 6 integers a_{i}_{j} (0 ≤ a_{i}_{j} ≤ 9) — number on j-th face of i-th cube.\n\n\n-----Output-----\n\nPrint single integer — maximum number x such Masha can make any integers from 1 to x using her cubes or 0 if Masha can't make even 1.\n\n\n-----Examples-----\nInput\n3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n\nOutput\n87\nInput\n3\n0 1 3 5 6 8\n1 2 4 5 7 8\n2 3 4 6 7 9\n\nOutput\n98\n\n\n-----Note-----\n\nIn the first test case, Masha can build all numbers from 1 to 87, but she can't make 88 because there are no two cubes with digit 8.",
        "generated_code": "n = int(input())\ncubes = [list(map(int, input().split())) for _ in range(n)]\n\ndigits = set()\nfor cube in cubes:\n    digits.update(str(digit) for digit in cube)\n\nif '0' in digits:\n    digits.remove('0')\n\nmax_num = int(''.join(sorted(digits, reverse=True)))\nprint(max_num)\n",
        "counter_example": {
            "input": "3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n",
            "expected": "87",
            "got": "987654321"
        }
    },
    {
        "task_id": "0112",
        "dataset": "apps",
        "model": "gpt-4o",
        "correct": false,
        "description": "Absent-minded Masha got set of n cubes for her birthday.\n\nAt each of 6 faces of each cube, there is exactly one digit from 0 to 9. Masha became interested what is the largest natural x such she can make using her new cubes all integers from 1 to x.\n\nTo make a number Masha can rotate her cubes and put them in a row. After that, she looks at upper faces of cubes from left to right and reads the number.\n\nThe number can't contain leading zeros. It's not required to use all cubes to build a number.\n\nPay attention: Masha can't make digit 6 from digit 9 and vice-versa using cube rotations.\n\n\n-----Input-----\n\nIn first line integer n is given (1 ≤ n ≤ 3) — the number of cubes, Masha got for her birthday.\n\nEach of next n lines contains 6 integers a_{i}_{j} (0 ≤ a_{i}_{j} ≤ 9) — number on j-th face of i-th cube.\n\n\n-----Output-----\n\nPrint single integer — maximum number x such Masha can make any integers from 1 to x using her cubes or 0 if Masha can't make even 1.\n\n\n-----Examples-----\nInput\n3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n\nOutput\n87\nInput\n3\n0 1 3 5 6 8\n1 2 4 5 7 8\n2 3 4 6 7 9\n\nOutput\n98\n\n\n-----Note-----\n\nIn the first test case, Masha can build all numbers from 1 to 87, but she can't make 88 because there are no two cubes with digit 8.",
        "generated_code": "def find_max_x(n, cubes):\n    from itertools import product\n\n    # Create a set for each cube's faces\n    cube_faces = [set(cube) for cube in cubes]\n\n    def can_form_number(num):\n        digits = list(str(num))\n        used_cubes = [False] * n\n\n        for digit in digits:\n            found = False\n            for i in range(n):\n                if not used_cubes[i] and digit in cube_faces[i]:\n                    used_cubes[i] = True\n                    found = True\n                    break\n            if not found:\n                return False\n        return True\n\n    x = 0\n    while can_form_number(x + 1):\n        x += 1\n\n    return x\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    cubes = []\n    index = 1\n    \n    for i in range(n):\n        cubes.append(data[index:index + 6])\n        index += 6\n\n    print(find_max_x(n, cubes))\n",
        "counter_example": {
            "input": "3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n",
            "expected": "87",
            "got": "67"
        }
    }
]