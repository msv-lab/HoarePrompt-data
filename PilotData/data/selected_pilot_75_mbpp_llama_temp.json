[
    {
        "description": "Write a python function to remove the characters which have odd index values of a given string.",
        "task_name": "Mbpp/226",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def odd_values_string(s):\n    return ''.join(s[i] for i in range(0, len(s), 2))\n",
        "correct": true,
        "task_id": "99",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a python function to remove the characters which have odd index values of a given string.",
        "task_name": "Mbpp/226",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def odd_values_string(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])\n\n# Test cases to validate the solution\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'\nassert odd_values_string('lambs') == 'lms'\n",
        "correct": true,
        "task_id": "99",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
        "task_name": "Mbpp/257",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def swap_numbers(a, b):\n  return (b, a)\n",
        "correct": true,
        "task_id": "119",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
        "task_name": "Mbpp/257",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def swap_numbers(a, b):\n    return (b, a)\n\n# Testing the function with provided test cases\nassert swap_numbers(10, 20) == (20, 10)\nassert swap_numbers(15, 17) == (17, 15)\nassert swap_numbers(100, 200) == (200, 100)\n",
        "correct": true,
        "task_id": "119",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to convert degrees to radians.",
        "task_name": "Mbpp/606",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "import math\ndef radian_degree(deg):\n    return deg * math.pi / 180\n",
        "correct": true,
        "task_id": "264",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to convert degrees to radians.",
        "task_name": "Mbpp/606",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "import math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)\n\n# Test cases\nassert radian_degree(90) == 1.5707963267948966\nassert radian_degree(60) == 1.0471975511965976\nassert radian_degree(120) == 2.0943951023931953\n",
        "correct": false,
        "task_id": "264",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
        "task_name": "Mbpp/773",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def occurance_substring(string, substring):\n    start = string.find(substring)\n    if start == -1:\n        return None\n    end = start + len(substring)\n    return (substring, start, end - 1)\n",
        "correct": false,
        "task_id": "335",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
        "task_name": "Mbpp/773",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def occurance_substring(main_string, sub_string):\n    start_pos = main_string.find(sub_string)\n    if start_pos == -1:\n        return None\n    end_pos = start_pos + len(sub_string)\n    return (sub_string, start_pos, end_pos)\n\n# Test cases\nassert occurance_substring('python programming, python language', 'python') == ('python', 0, 6)\nassert occurance_substring('python programming,programming language', 'programming') == ('programming', 7, 18)\nassert occurance_substring('python programming,programming language', 'language') == ('language', 31, 39)\nassert occurance_substring('c++ programming, c++ language', 'python') == None\n",
        "correct": true,
        "task_id": "335",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
        "task_name": "Mbpp/805",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def max_sum_list(lists):\n    return max(lists, key=sum)",
        "correct": true,
        "task_id": "360",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
        "task_name": "Mbpp/805",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def max_sum_list(list_of_lists):\n    # Initialize variables to track the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_list = []\n    \n    # Iterate through each sublist\n    for sublist in list_of_lists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # If the current sum is greater than the maximum sum found so far\n        if current_sum > max_sum:\n            # Update the maximum sum and the corresponding list\n            max_sum = current_sum\n            max_list = sublist\n    \n    # Return the list with the highest sum\n    return max_list\n\n# Tests\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]\nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]]) == [12, 11, 10]\nassert max_sum_list([[2,3,1]]) == [2, 3, 1]\n",
        "correct": true,
        "task_id": "360",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a python function to find the index of smallest triangular number with n digits.",
        "task_name": "Mbpp/739",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def find_Index(n):\n    import math\n    idx = 1\n    while True:\n        triangular_num = (idx * (idx + 1)) // 2\n        if len(str(triangular_num)) >= n:\n            return idx\n        idx += 1\n",
        "correct": false,
        "task_id": "307",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a python function to find the index of smallest triangular number with n digits.",
        "task_name": "Mbpp/739",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def find_Index(n):\n    k = 1\n    while True:\n        triangular_number = k * (k + 1) // 2\n        if len(str(triangular_number)) == n:\n            return k\n        k += 1\n\n# Test cases\nassert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45\n",
        "correct": false,
        "task_id": "307",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a python function to remove first and last occurrence of a given character from the string.",
        "task_name": "Mbpp/11",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def remove_Occ(s, char):\n    first_occurrence = s.find(char)\n    last_occurrence = s.rfind(char)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        if first_occurrence == last_occurrence:\n            return s.replace(char, '', 1)\n        else:\n            return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    else:\n        return s\n",
        "correct": true,
        "task_id": "8",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a python function to remove first and last occurrence of a given character from the string.",
        "task_name": "Mbpp/11",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    \n    if first_index == -1 or last_index == -1 or first_index == last_index:\n        return s  # No removal needed if ch is not found or only one occurrence\n    \n    # Create a new string without the first and last occurrence of ch\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n\n# Testing the function with the provided test cases\nassert remove_Occ(\"hello\", \"l\") == \"heo\"\nassert remove_Occ(\"abcda\", \"a\") == \"bcd\"\nassert remove_Occ(\"PHP\", \"P\") == \"H\"\n",
        "correct": false,
        "task_id": "8",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a python function to find the volume of a triangular prism.",
        "task_name": "Mbpp/14",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def find_Volume(b, h, l):\n  return (b * h / 2) * l\n",
        "correct": false,
        "task_id": "10",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a python function to find the volume of a triangular prism.",
        "task_name": "Mbpp/14",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def find_Volume(base, height, length):\n    base_area = 0.5 * base * height\n    volume = base_area * length\n    return volume\n\n# Tests\nassert find_Volume(10, 8, 6) == 240\nassert find_Volume(3, 2, 2) == 6\nassert find_Volume(1, 2, 1) == 1\n",
        "correct": false,
        "task_id": "10",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to find the volume of a cone.",
        "task_name": "Mbpp/312",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "import math\ndef volume_cone(radius, height):\n    return (1.0/3)*math.pi*radius*radius*height\n",
        "correct": true,
        "task_id": "159",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to find the volume of a cone.",
        "task_name": "Mbpp/312",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height\n\n# Tests\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10, 15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19, 17), 6426.651371693521, rel_tol=0.001)\n",
        "correct": true,
        "task_id": "159",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function that takes a tuple of tuples and returns a list where each element is the average of the corresponding values from each tuple. For each position, compute the average of values from all tuples at that position.",
        "task_name": "Mbpp/615",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def average_tuple(tuples):\n    return [sum(val) / len(tuples) for val in zip(*tuples)]\n",
        "correct": true,
        "task_id": "271",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function that takes a tuple of tuples and returns a list where each element is the average of the corresponding values from each tuple. For each position, compute the average of values from all tuples at that position.",
        "task_name": "Mbpp/615",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def average_tuple(tuples):\n    # Length of the first tuple (assuming all tuples are of the same length)\n    num_elements = len(tuples[0])\n    \n    # List to store the averages\n    averages = []\n    \n    # Iterate over each position in the tuples\n    for i in range(num_elements):\n        # Extract the i-th element from each tuple and compute the average\n        elements_at_position = [t[i] for t in tuples]\n        avg = sum(elements_at_position) / len(tuples)\n        averages.append(avg)\n    \n    return averages\n\n# Test cases\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))) == [25.5, -18.0, 3.75]\nassert average_tuple(((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40))) == [305.0, 342.5, 270.0, 232.5]\n",
        "correct": false,
        "task_id": "271",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "task_name": "Mbpp/762",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def check_monthnumber_number(month):\n    thirty_days_months = [4, 6, 9, 11]\n    return month in thirty_days_months\n",
        "correct": true,
        "task_id": "325",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "task_name": "Mbpp/762",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def check_monthnumber_number(month: int) -> bool:\n    # Define the set of months that have 30 days\n    months_with_30_days = {4, 6, 9, 11}\n    # Check if the given month is in the set\n    return month in months_with_30_days\n\n# Test cases to validate the solution\nassert check_monthnumber_number(6) == True\nassert check_monthnumber_number(2) == False\nassert check_monthnumber_number(12) == False\n",
        "correct": true,
        "task_id": "325",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "task_name": "Mbpp/265",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]\n",
        "correct": true,
        "task_id": "125",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "task_name": "Mbpp/265",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def list_split(lst, n):\n    result = [[] for _ in range(n)]\n    for i, element in enumerate(lst):\n        result[i % n].append(element)\n    return result\n\n# Test cases\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\nassert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\nassert list_split(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2) == [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n",
        "correct": true,
        "task_id": "125",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function to check if all the elements in tuple have same data type or not.",
        "task_name": "Mbpp/222",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def check_type(tup):\n    return len(set(type(x) for x in tup)) == 1\n",
        "correct": true,
        "task_id": "96",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to check if all the elements in tuple have same data type or not.",
        "task_name": "Mbpp/222",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def check_type(tup):\n    if not tup:\n        return True  # An empty tuple can be considered as having the same type for all elements.\n    \n    first_type = type(tup[0])\n    for element in tup:\n        if type(element) != first_type:\n            return False\n    return True\n\n# Test cases\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((1, 2, \"4\")) == False\nassert check_type((3, 2, 1, 4, 5)) == True\n",
        "correct": true,
        "task_id": "96",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function to check whether the given month number contains 31 days or not.",
        "task_name": "Mbpp/455",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def check_monthnumb_number(n):\n    months_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return n in months_31_days\n",
        "correct": true,
        "task_id": "204",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to check whether the given month number contains 31 days or not.",
        "task_name": "Mbpp/455",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def check_monthnumb_number(month):\n    # List of months with 31 days\n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    return month in months_with_31_days\n\n# Test cases\nassert check_monthnumb_number(5) == True\nassert check_monthnumb_number(2) == False\nassert check_monthnumb_number(6) == False\nassert check_monthnumb_number(1) == True\nassert check_monthnumb_number(12) == True\nassert check_monthnumb_number(11) == False\n",
        "correct": true,
        "task_id": "204",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to check whether the given number is undulating or not.",
        "task_name": "Mbpp/92",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def is_undulating(n):\n    n = str(n)\n    undulating = True\n    for i in range(1, len(n) - 1):\n        if (n[i-1] < n[i] and n[i] < n[i+1]) or (n[i-1] > n[i] and n[i] > n[i+1]):\n            pass\n        else:\n            undulating = False\n            break\n    return undulating\n",
        "correct": false,
        "task_id": "45",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function to check whether the given number is undulating or not.",
        "task_name": "Mbpp/92",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def is_undulating(n):\n    s = str(n)\n    if len(s) < 3:\n        return False\n    first_digit = s[0]\n    second_digit = s[1]\n    if first_digit == second_digit:\n        return False\n    \n    for i in range(2, len(s)):\n        if i % 2 == 0 and s[i] != first_digit:\n            return False\n        if i % 2 == 1 and s[i] != second_digit:\n            return False\n            \n    return True\n\n# Test cases\nassert is_undulating(1212121) == True\nassert is_undulating(1991) == False\nassert is_undulating(121) == True\n",
        "correct": false,
        "task_id": "45",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "task_name": "Mbpp/250",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def count_X(tup, elem):\n    return tup.count(elem)\n",
        "correct": true,
        "task_id": "114",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "task_name": "Mbpp/250",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def count_X(tup, element):\n    return tup.count(element)\n\n# Tests\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n",
        "correct": true,
        "task_id": "114",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to sort a list of elements.",
        "task_name": "Mbpp/141",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def pancake_sort(arr):\n    n = len(arr)\n    for size in range(n, 0, -1):\n        max_index = arr.index(max(arr[:size]))\n        if max_index != size-1:\n            if max_index != 0:\n                arr[:max_index+1] = arr[:max_index+1][::-1]\n            arr[:size] = arr[:size][::-1]\n    return arr\n",
        "correct": true,
        "task_id": "83",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function to sort a list of elements.",
        "task_name": "Mbpp/141",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def pancake_sort(arr):\n    def flip(end):\n        start = 0\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n    \n    def find_max_index(n):\n        max_index = 0\n        for i in range(1, n):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n    \n    n = len(arr)\n    for curr_size in range(n, 1, -1):\n        max_index = find_max_index(curr_size)\n        if max_index != curr_size - 1:\n            flip(max_index)\n            flip(curr_size - 1)\n    \n    return arr\n\n# Test cases\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n",
        "correct": true,
        "task_id": "83",
        "depth": 1,
        "functions": 3
    },
    {
        "description": "Write a function to check whether a specified list is sorted or not.",
        "task_name": "Mbpp/567",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def issort_list(nums):\n    return nums == sorted(nums)\n",
        "correct": true,
        "task_id": "236",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to check whether a specified list is sorted or not.",
        "task_name": "Mbpp/567",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def issort_list(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n# Test cases\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == False\nassert issort_list([1, 2, 4, 6, 8, 10, 15, 14, 20]) == False\n",
        "correct": true,
        "task_id": "236",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "task_name": "Mbpp/273",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def substract_elements(tup1, tup2):\n    return tuple(a - b for a, b in zip(tup1, tup2))\n",
        "correct": true,
        "task_id": "133",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "task_name": "Mbpp/273",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def substract_elements(tup1, tup2):\n    return tuple(a - b for a, b in zip(tup1, tup2))\n\n# Test cases\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n",
        "correct": true,
        "task_id": "133",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
        "task_name": "Mbpp/726",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def multiply_elements(numbers):\n    return tuple(a * b for a, b in zip(numbers, numbers[1:]))\n",
        "correct": true,
        "task_id": "297",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
        "task_name": "Mbpp/726",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t) - 1))\n\n# Test cases\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\nassert multiply_elements((12,)) == ()\n",
        "correct": true,
        "task_id": "297",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to count the number of occurence of the string 'std' in a given string.",
        "task_name": "Mbpp/172",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def count_occurance(s):\n    return s.count(\"std\")\n",
        "correct": true,
        "task_id": "95",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to count the number of occurence of the string 'std' in a given string.",
        "task_name": "Mbpp/172",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def count_occurance(s: str) -> int:\n    return s.count('std')\n\n# Test cases to validate the solution\nassert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2\nassert count_occurance(\"stds\") == 1\nassert count_occurance(\"\") == 0\n",
        "correct": true,
        "task_id": "95",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "task_name": "Mbpp/472",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def check_Consecutive(lst):\n    lst.sort()\n    return all(lst[i] - lst[i-1] == 1 for i in range(1, len(lst))) and len(lst) == len(set(lst))\n",
        "correct": true,
        "task_id": "216",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "task_name": "Mbpp/472",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def check_Consecutive(lst):\n    if not lst:  # If the list is empty, it cannot be consecutive\n        return False\n    \n    lst_sorted = sorted(lst)\n    \n    for i in range(len(lst_sorted) - 1):\n        if lst_sorted[i + 1] - lst_sorted[i] != 1:\n            return False\n    \n    return True\n\n# Test cases\nassert check_Consecutive([1, 2, 3, 4, 5]) == True\nassert check_Consecutive([1, 2, 3, 5, 6]) == False\nassert check_Consecutive([1, 2, 1]) == False\n",
        "correct": true,
        "task_id": "216",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "task_name": "Mbpp/98",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
        "correct": true,
        "task_id": "51",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "task_name": "Mbpp/98",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result\n\n# Test cases\nimport math\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num((-10, -20, -30)), -2000.0, rel_tol=0.001)\nassert math.isclose(multiply_num((19, 15, 18)), 1710.0, rel_tol=0.001)\n",
        "correct": true,
        "task_id": "51",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function to find the ascii value of a character.",
        "task_name": "Mbpp/269",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def ascii_value(char: str) -> int:\n    \"\"\"\n    Returns the ASCII value of a given character.\n    \n    Parameters:\n    char (str): A single character.\n    \n    Returns:\n    int: The ASCII value of the character.\n    \"\"\"\n    return ord(char)\n",
        "correct": true,
        "task_id": "129",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to find the ascii value of a character.",
        "task_name": "Mbpp/269",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def ascii_value(char):\n    return ord(char)\n\n# Tests\nassert ascii_value('A') == 65\nassert ascii_value('R') == 82\nassert ascii_value('S') == 83\n",
        "correct": true,
        "task_id": "129",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a python function to count the occurence of all elements of list in a tuple.",
        "task_name": "Mbpp/446",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def count_Occurrence(tup, lst):\n    return sum(tup.count(element) for element in lst)\n",
        "correct": true,
        "task_id": "197",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a python function to count the occurence of all elements of list in a tuple.",
        "task_name": "Mbpp/446",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def count_Occurrence(tup, elements):\n    count = sum(tup.count(element) for element in elements)\n    return count\n\n# Test cases\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]) == 6\nassert count_Occurrence((1, 2, 3, 4, 5, 6), [1, 2]) == 2\n",
        "correct": true,
        "task_id": "197",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to convert a list to a tuple.",
        "task_name": "Mbpp/587",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def list_tuple(input_list):\n    return tuple(input_list)\n",
        "correct": true,
        "task_id": "248",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to convert a list to a tuple.",
        "task_name": "Mbpp/587",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def list_tuple(lst):\n    return tuple(lst)\n\n# Provided test cases\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7]) == (2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58, 44, 56]) == (58, 44, 56)\n",
        "correct": true,
        "task_id": "248",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a python function to check whether every odd index contains odd numbers of a given list.",
        "task_name": "Mbpp/775",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def odd_position(lst):\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            return False\n    return True\n",
        "correct": true,
        "task_id": "336",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a python function to check whether every odd index contains odd numbers of a given list.",
        "task_name": "Mbpp/775",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def odd_position(lst):\n    # Iterate through the list, checking only elements at odd indices\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n\n# Testing the function with the provided test cases\nassert odd_position([2, 1, 4, 3, 6, 7, 6, 3]) == True\nassert odd_position([4, 1, 2]) == True\nassert odd_position([1, 2, 3]) == False\n",
        "correct": true,
        "task_id": "336",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
        "task_name": "Mbpp/262",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def split_two_parts(lst, L):\n    return lst[:L], lst[L:]\n",
        "correct": true,
        "task_id": "123",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
        "task_name": "Mbpp/262",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\n# Tests\nassert split_two_parts([1,1,2,3,4,4,5,1],3) == ([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2) == (['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4) == (['p', 'y', 't', 'h'], ['o', 'n'])\n",
        "correct": true,
        "task_id": "123",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to check whether the given number is armstrong or not.",
        "task_name": "Mbpp/598",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def armstrong_number(num):\n    num_str = str(num)\n    num_len = len(num_str)\n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** num_len\n    return sum == num\n",
        "correct": true,
        "task_id": "258",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function to check whether the given number is armstrong or not.",
        "task_name": "Mbpp/598",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def armstrong_number(n):\n    # Convert the number to string to easily iterate through its digits\n    num_str = str(n)\n    # Calculate the number of digits\n    num_len = len(num_str)\n    # Calculate the sum of the digits each raised to the power of the number of digits\n    armstrong_sum = sum(int(digit) ** num_len for digit in num_str)\n    # Compare the sum to the original number\n    return armstrong_sum == n\n\n# Tests\nassert armstrong_number(153) == True\nassert armstrong_number(259) == False\nassert armstrong_number(4458) == False\n",
        "correct": true,
        "task_id": "258",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.",
        "task_name": "Mbpp/611",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def max_of_nth(matrix, n):\n    return max(row[n-1] for row in matrix)\n",
        "correct": false,
        "task_id": "268",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.",
        "task_name": "Mbpp/611",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def max_of_nth(matrix, n):\n    # Extract the nth column (0-indexed)\n    nth_column = [row[n] for row in matrix]\n    # Return the maximum value from the nth column\n    return max(nth_column)\n\n# Test cases\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\nassert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11\n",
        "correct": true,
        "task_id": "268",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to find whether a given array of integers contains any duplicate element.",
        "task_name": "Mbpp/19",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))\n",
        "correct": true,
        "task_id": "14",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to find whether a given array of integers contains any duplicate element.",
        "task_name": "Mbpp/19",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def test_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Test cases\nassert test_duplicate([1, 2, 3, 4, 5]) == False\nassert test_duplicate([1, 2, 3, 4, 4]) == True\nassert test_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5]) == True\n",
        "correct": true,
        "task_id": "14",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "task_name": "Mbpp/283",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def validate(n):\n    str_n = str(n)\n    for digit in str_n:\n        if str_n.count(digit) > int(digit):\n            return False\n    return True",
        "correct": true,
        "task_id": "141",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "task_name": "Mbpp/283",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def validate(n):\n    digit_str = str(n)\n    frequency = {}\n    \n    # Calculate frequency of each digit\n    for digit in digit_str:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    \n    # Check the condition for each digit\n    for digit, count in frequency.items():\n        if count > int(digit):\n            return False\n    \n    return True\n\n# Tests\nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True\n",
        "correct": true,
        "task_id": "141",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "task_name": "Mbpp/419",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)\n",
        "correct": true,
        "task_id": "178",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "task_name": "Mbpp/419",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result\n\n# Tests\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243\nassert round_and_sum([5, 2, 9, 24.3, 29]) == 345\nassert round_and_sum([25.0, 56.7, 89.2]) == 513\n",
        "correct": true,
        "task_id": "178",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
        "task_name": "Mbpp/277",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}\n",
        "correct": true,
        "task_id": "136",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
        "task_name": "Mbpp/277",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def dict_filter(d: dict, n: int) -> dict:\n    return {k: v for k, v in d.items() if v >= n}\n\n# Test cases\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180) == {'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190) == {'Pierre Cox': 190}\n",
        "correct": true,
        "task_id": "136",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.",
        "task_name": "Mbpp/620",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def largest_subset(nums):\n    if not nums:\n        return 0\n\n    nums.sort()\n    dp = [1] * len(nums)\n\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n",
        "correct": true,
        "task_id": "275",
        "depth": 2,
        "functions": 1
    },
    {
        "description": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.",
        "task_name": "Mbpp/620",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def largest_subset(nums):\n    if not nums:\n        return 0\n\n    nums.sort()\n    dp = [1] * len(nums)\n    \n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Testing the function with the provided test cases\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4\nassert largest_subset([10, 5, 3, 15, 20]) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17]) == 4\n",
        "correct": true,
        "task_id": "275",
        "depth": 2,
        "functions": 1
    },
    {
        "description": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "task_name": "Mbpp/786",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def right_insertion(sorted_list, value):\n    for i in range(len(sorted_list)):\n        if sorted_list[i] >= value:\n            return i\n    return len(sorted_list)\n",
        "correct": false,
        "task_id": "344",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "task_name": "Mbpp/786",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "import bisect\n\ndef right_insertion(sorted_list, value):\n    return bisect.bisect_right(sorted_list, value)\n\n# Test cases\nassert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4\n",
        "correct": true,
        "task_id": "344",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a python function to find the minimum difference between any two elements in a given array.",
        "task_name": "Mbpp/763",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def find_min_diff(arr, target):\n    arr = sorted(arr)\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i] - arr[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "correct": true,
        "task_id": "326",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a python function to find the minimum difference between any two elements in a given array.",
        "task_name": "Mbpp/763",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def find_min_diff(arr, n):\n    if n < 2:\n        return 0  # If array has less than 2 elements, no valid difference can be found\n    \n    arr = sorted(arr)\n    min_diff = float('inf')\n    \n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            \n    return min_diff\n\n# Testing the function based on the provided assertions\nassert find_min_diff((1,5,3,19,18,25),6) == 1\nassert find_min_diff((4,3,2,6),4) == 1\nassert find_min_diff((30,5,20,9),4) == 4\n",
        "correct": true,
        "task_id": "326",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function to filter odd numbers.",
        "task_name": "Mbpp/426",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def filter_oddnumbers(nums):\n  return [num for num in nums if num % 2 != 0]\n",
        "correct": true,
        "task_id": "184",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to filter odd numbers.",
        "task_name": "Mbpp/426",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\n\n# Test cases\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\nassert filter_oddnumbers([10, 20, 45, 67, 84, 93]) == [45, 67, 93]\nassert filter_oddnumbers([5, 7, 9, 8, 6, 4, 3]) == [5, 7, 9, 3]\n",
        "correct": true,
        "task_id": "184",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "task_name": "Mbpp/260",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"Find the nth Newman-Shanks-Williams prime number.\"\"\"\n    if n == 1:\n        return 7  # The first NSW prime is 7\n    \n    # Initialize the count of NSW primes and the current number\n    count = 1\n    num = 7\n    \n    while True:\n        # Check if the current number is a prime number\n        if is_prime(num):\n            # Check if the current prime number is congruent to 1 or 5 modulo 6\n            if num % 6 in [1, 5]:\n                # Increment the count of NSW primes\n                count += 1\n                \n                # If we have found the nth NSW prime, return it\n                if count == n:\n                    return num\n        \n        # Move on to the next number\n        num += 1\n",
        "correct": false,
        "task_id": "121",
        "depth": 1,
        "functions": 2
    },
    {
        "description": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "task_name": "Mbpp/260",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def newman_prime(n):\n    if n == 0 or n == 1:\n        return 1\n    \n    S0, S1 = 1, 1\n    for i in range(2, n+1):\n        S_next = 2 * S1 + S0\n        S0, S1 = S1, S_next\n    return S1\n\n# Test cases\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41\n",
        "correct": true,
        "task_id": "121",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a python function to find smallest number in a list.",
        "task_name": "Mbpp/62",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def smallest_num(nums):\n    return min(nums)\n",
        "correct": true,
        "task_id": "21",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a python function to find smallest number in a list.",
        "task_name": "Mbpp/62",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def smallest_num(lst):\n    return min(lst)\n\n# Tests\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45\n",
        "correct": true,
        "task_id": "21",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a python function to find whether the parity of a given number is odd.",
        "task_name": "Mbpp/406",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def find_Parity(n):\n    return n % 2 != 0\n",
        "correct": true,
        "task_id": "171",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a python function to find whether the parity of a given number is odd.",
        "task_name": "Mbpp/406",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def find_Parity(n):\n    return n % 2 != 0\n\n# Test cases\nassert find_Parity(12) == False\nassert find_Parity(7) == True\nassert find_Parity(10) == False\n",
        "correct": true,
        "task_id": "171",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "task_name": "Mbpp/733",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def find_first_occurrence(arr, num):\n    for i, x in enumerate(arr):\n        if x == num:\n            return i\n    return -1  # return -1 if num is not found in the array\n",
        "correct": true,
        "task_id": "302",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "task_name": "Mbpp/733",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def find_first_occurrence(arr, target):\n    low, high = 0, len(arr) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            result = mid\n            high = mid - 1  # Look on the left side of mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result\n\n# Test cases\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([1, 2, 4, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n",
        "correct": true,
        "task_id": "302",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "task_name": "Mbpp/240",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def replace_list(list1, list2):\n    if list1:\n        list1[-1:] = list2\n    else:\n        list1 = list2\n    return list1\n",
        "correct": true,
        "task_id": "109",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "task_name": "Mbpp/240",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def replace_list(list1, list2):\n    return list1[:-1] + list2\n\n# Test cases\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1, 2, 3, 4, 5],[5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert replace_list([\"red\", \"blue\", \"green\"],[\"yellow\"]) == [\"red\", \"blue\", \"yellow\"]\n",
        "correct": true,
        "task_id": "109",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a python function to check whether the two numbers differ at one bit position only or not.",
        "task_name": "Mbpp/6",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def differ_At_One_Bit_Pos(num1, num2):\n    return bin(num1 ^ num2).count('1') == 1\n",
        "correct": false,
        "task_id": "4",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a python function to check whether the two numbers differ at one bit position only or not.",
        "task_name": "Mbpp/6",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def differ_At_One_Bit_Pos(a, b):\n    xor_result = a ^ b\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0\n\n# Tests\nassert differ_At_One_Bit_Pos(13, 9) == True\nassert differ_At_One_Bit_Pos(15, 8) == False\nassert differ_At_One_Bit_Pos(2, 4) == False\nassert differ_At_One_Bit_Pos(2, 3) == True\nassert differ_At_One_Bit_Pos(5, 1) == True\nassert differ_At_One_Bit_Pos(1, 5) == True\n",
        "correct": true,
        "task_id": "4",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a python function to find the last position of an element in a sorted array.",
        "task_name": "Mbpp/793",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def last(arr, target):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == target:\n            return i\n    return -1\n",
        "correct": false,
        "task_id": "350",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a python function to find the last position of an element in a sorted array.",
        "task_name": "Mbpp/793",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def last(arr, x):\n    # Iterate through the array from the end to the start\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == x:\n            return i\n    # If the element is not found, return -1 (not specified in tests but good practice)\n    return -1\n\n# Tests\nassert last([1,2,3],1) == 0\nassert last([1,1,1,2,3,4],1) == 2\nassert last([2,2,3,3,6,8,9],3) == 3\n",
        "correct": false,
        "task_id": "350",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function to convert rectangular coordinates to polar coordinates.",
        "task_name": "Mbpp/590",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "import math\n\ndef polar_rect(x, y):\n    r = math.hypot(x, y)\n    phi = math.atan2(y, x)\n    return (r, phi)\n",
        "correct": true,
        "task_id": "251",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to convert rectangular coordinates to polar coordinates.",
        "task_name": "Mbpp/590",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "import math\n\ndef polar_rect(x, y):\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y, x)\n    return (r, theta)\n\n# Test cases\nassert polar_rect(3, 4) == (5.0, 0.9272952180016122)\nassert polar_rect(4, 7) == (8.06225774829855, 1.0516502125483738)\nassert polar_rect(15, 17) == (22.67156809750927, 0.8478169733934057)\n",
        "correct": true,
        "task_id": "251",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to get the sum of the digits of a non-negative integer.",
        "task_name": "Mbpp/566",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n",
        "correct": true,
        "task_id": "235",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to get the sum of the digits of a non-negative integer.",
        "task_name": "Mbpp/566",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def sum_digits(n: int) -> int:\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n\n# Testing the function with the provided test cases\nassert sum_digits(345) == 12\nassert sum_digits(12) == 3\nassert sum_digits(97) == 16\n",
        "correct": true,
        "task_id": "235",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function to remove all whitespaces from a string.",
        "task_name": "Mbpp/800",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def remove_all_spaces(input_str):\n    return input_str.replace(\" \", \"\")\n",
        "correct": true,
        "task_id": "356",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to remove all whitespaces from a string.",
        "task_name": "Mbpp/800",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")\n\n# Test cases\nassert remove_all_spaces('python  program') == 'pythonprogram'\nassert remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'\nassert remove_all_spaces('python                     program') == 'pythonprogram'\nassert remove_all_spaces('   python                     program') == 'pythonprogram'\n",
        "correct": true,
        "task_id": "356",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "task_name": "Mbpp/284",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def check_element(lst, element):\n    return all(item == element for item in lst)\n",
        "correct": true,
        "task_id": "142",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "task_name": "Mbpp/284",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def check_element(lst, element):\n    for item in lst:\n        if item != element:\n            return False\n    return True\n\n# Test cases\nassert check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue') == False\nassert check_element([1, 2, 3, 4], 7) == False\nassert check_element([\"green\", \"green\", \"green\", \"green\"], 'green') == True\n",
        "correct": true,
        "task_id": "142",
        "depth": 1,
        "functions": 1
    },
    {
        "description": "Write a function to add the given tuple to the given list.",
        "task_name": "Mbpp/750",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def add_tuple(input_list, input_tuple):\n  return input_list + list(input_tuple)\n",
        "correct": true,
        "task_id": "315",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to add the given tuple to the given list.",
        "task_name": "Mbpp/750",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def add_tuple(lst, tpl):\n    return lst + list(tpl)\n\n# Test cases\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n",
        "correct": true,
        "task_id": "315",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to convert a snake case string to camel case string.",
        "task_name": "Mbpp/102",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def snake_to_camel(snake_case_str):\n    words = snake_case_str.split('_')\n    camel_case_str = ''.join(word.capitalize() for word in words)\n    return camel_case_str\n",
        "correct": false,
        "task_id": "55",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to convert a snake case string to camel case string.",
        "task_name": "Mbpp/102",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.capitalize() for x in components)\n\n# Tests\nassert snake_to_camel('python_program') == 'PythonProgram'\nassert snake_to_camel('python_language') == 'PythonLanguage'\nassert snake_to_camel('programming_language') == 'ProgrammingLanguage'\n",
        "correct": false,
        "task_id": "55",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to find the area of a rectangle.",
        "task_name": "Mbpp/458",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def rectangle_area(length, width):\n    return length * width\n",
        "correct": true,
        "task_id": "207",
        "depth": 0,
        "functions": 1
    },
    {
        "description": "Write a function to find the area of a rectangle.",
        "task_name": "Mbpp/458",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def rectangle_area(length, width):\n    return length * width\n\n# Test the function with the provided assertions\nassert rectangle_area(10, 20) == 200\nassert rectangle_area(10, 5) == 50\nassert rectangle_area(4, 2) == 8\n",
        "correct": true,
        "task_id": "207",
        "depth": 0,
        "functions": 1
    }
]