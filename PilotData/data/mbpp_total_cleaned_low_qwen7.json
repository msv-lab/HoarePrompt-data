[
    {
        "description": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "task_name": "Mbpp/166",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def find_even_pair(lst):\n    even_count = sum(1 for x in lst if x % 2 == 0)\n    odd_count = len(lst) - even_count  # total count minus even count gives odd count\n\n    # Calculate the number of pairs that XOR to an even number\n    even_pairs = even_count * (even_count - 1) // 2\n    odd_pairs = odd_count * (odd_count - 1) // 2\n    \n    return even_pairs + odd_pairs\n\n# Test cases\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\nassert find_even_pair([1, 2, 3]) == 1\n",
        "correct": true,
        "task_id": "90",
        "depth": 0,
        "functions": 1,
        "unique_id": "90_gpt-4o"
    },
    {
        "description": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "task_name": "Mbpp/265",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def list_split(lst, n):\n    result = [[] for _ in range(n)]\n    for i, element in enumerate(lst):\n        result[i % n].append(element)\n    return result\n\n# Test cases\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\nassert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\nassert list_split(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2) == [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n",
        "correct": true,
        "task_id": "125",
        "depth": 1,
        "functions": 1,
        "unique_id": "125_gpt-4o"
    },
    {
        "description": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "task_name": "Mbpp/285",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "import re\n\ndef text_match_two_three(text):\n    # Define the regular expression pattern\n    pattern = r'a(b{2,3})'\n    # Search the pattern in the given text\n    match = re.search(pattern, text)\n    # Return True if the pattern is found, otherwise False\n    return bool(match)\n\n# Test cases\nassert text_match_two_three(\"ac\") == False\nassert text_match_two_three(\"dc\") == False\nassert text_match_two_three(\"abbbba\") == True\n",
        "correct": true,
        "task_id": "143",
        "depth": 0,
        "functions": 1,
        "unique_id": "143_gpt-4o"
    },
    {
        "description": "Write a function to find the minimum value in a given heterogeneous list.",
        "task_name": "Mbpp/410",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def min_val(lst):\n    # Filter out only integer values from the list\n    int_values = [x for x in lst if isinstance(x, int)]\n    # Find and return the minimum value among the integer values\n    return min(int_values)\n\n# Test cases to validate the solution\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2\nassert min_val(['Python', 15, 20, 25]) == 15\nassert min_val(['Python', 30, 20, 40, 50, 'version']) == 20\n",
        "correct": true,
        "task_id": "173",
        "depth": 0,
        "functions": 1,
        "unique_id": "173_gpt-4o"
    },
    {
        "description": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "task_name": "Mbpp/429",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))\n\n# Testing the function with the provided test cases\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n",
        "correct": true,
        "task_id": "186",
        "depth": 0,
        "functions": 1,
        "unique_id": "186_gpt-4o"
    },
    {
        "description": "Write a function to remove odd characters in a string.",
        "task_name": "Mbpp/437",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def remove_odd(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])\n\n# Testing the function with the provided test cases\nassert remove_odd(\"python\") == \"yhn\"\nassert remove_odd(\"program\") == \"rga\"\nassert remove_odd(\"language\") == \"agae\"\n",
        "correct": true,
        "task_id": "192",
        "depth": 0,
        "functions": 1,
        "unique_id": "192_gpt-4o"
    },
    {
        "description": "Write a python function to remove duplicate numbers from a given number of lists.",
        "task_name": "Mbpp/572",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "from collections import Counter\n\ndef two_unique_nums(lst):\n    # Count the occurrences of each number in the list\n    count = Counter(lst)\n    \n    # Filter out the numbers that occur more than once\n    result = [num for num in lst if count[num] == 1]\n    \n    return result\n\n# Testing the function with the provided test cases\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]\n",
        "correct": true,
        "task_id": "239",
        "depth": 0,
        "functions": 1,
        "unique_id": "239_gpt-4o"
    },
    {
        "description": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "task_name": "Mbpp/765",
        "dataset": "mbppplus",
        "model": "gpt-4o",
        "generated_code": "def is_polite(n):\n    count = 0\n    number = 1\n    while count < n:\n        if (number & (number - 1)) != 0:  # Check if number is not a power of 2\n            count += 1\n        number += 1\n    return number - 1\n\n# Testing the function\nassert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13\n",
        "correct": false,
        "task_id": "328",
        "depth": 1,
        "functions": 1,
        "unique_id": "328_gpt-4o"
    },
    {
        "description": "Write a function to check whether it follows the sequence given in the patterns array.",
        "task_name": "Mbpp/74",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def is_samepatterns(patterns1, patterns2):\n    if len(patterns1) != len(patterns2):\n        return False\n    \n    mapping = {}\n    for p1, p2 in zip(patterns1, patterns2):\n        if p1 not in mapping:\n            mapping[p1] = p2\n        elif mapping[p1] != p2:\n            return False\n    \n    return True\n",
        "correct": false,
        "task_id": "32",
        "depth": 1,
        "functions": 1,
        "unique_id": "32_llama3point1-70b"
    },
    {
        "description": "Write a function to check whether the given number is undulating or not.",
        "task_name": "Mbpp/92",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def is_undulating(n):\n    n = str(n)\n    undulating = True\n    for i in range(1, len(n) - 1):\n        if (n[i-1] < n[i] and n[i] < n[i+1]) or (n[i-1] > n[i] and n[i] > n[i+1]):\n            pass\n        else:\n            undulating = False\n            break\n    return undulating\n",
        "correct": false,
        "task_id": "45",
        "depth": 1,
        "functions": 1,
        "unique_id": "45_llama3point1-70b"
    },
    {
        "description": "Write a function to convert a tuple to a string.",
        "task_name": "Mbpp/132",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def tup_string(tup):\n  return \"\".join(tup)\n",
        "correct": true,
        "task_id": "76",
        "depth": 0,
        "functions": 1,
        "unique_id": "76_llama3point1-70b"
    },
    {
        "description": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "task_name": "Mbpp/223",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def is_majority(arr, n, x):\n    count = arr.count(x)\n    return count > n/2",
        "correct": true,
        "task_id": "97",
        "depth": 0,
        "functions": 1,
        "unique_id": "97_llama3point1-70b"
    },
    {
        "description": "Write a python function to set all even bits of a given number.",
        "task_name": "Mbpp/235",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def even_bit_set_number(n):\n    return n | 0xAAAAAAAA\n",
        "correct": false,
        "task_id": "105",
        "depth": 0,
        "functions": 1,
        "unique_id": "105_llama3point1-70b"
    },
    {
        "description": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "task_name": "Mbpp/265",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]\n",
        "correct": true,
        "task_id": "125",
        "depth": 0,
        "functions": 1,
        "unique_id": "125_llama3point1-70b"
    },
    {
        "description": "Write a function to find the lateral surface area of a cube given its side length.",
        "task_name": "Mbpp/266",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def lateralsurface_cube(side_length):\n  return 4 * (side_length ** 2)\n",
        "correct": false,
        "task_id": "126",
        "depth": 0,
        "functions": 1,
        "unique_id": "126_llama3point1-70b"
    },
    {
        "description": "Write a python function to count the occurence of all elements of list in a tuple.",
        "task_name": "Mbpp/446",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def count_Occurrence(tup, lst):\n    return sum(tup.count(element) for element in lst)\n",
        "correct": true,
        "task_id": "197",
        "depth": 0,
        "functions": 1,
        "unique_id": "197_llama3point1-70b"
    },
    {
        "description": "Write a python function to count the number of pairs whose xor value is odd.",
        "task_name": "Mbpp/556",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def find_Odd_Pair(arr, n):\n    odd_count = sum(1 for num in arr if num % 2 != 0)\n    even_count = n - odd_count\n    return odd_count * even_count + (odd_count * (odd_count - 1)) // 2\n",
        "correct": false,
        "task_id": "226",
        "depth": 0,
        "functions": 1,
        "unique_id": "226_llama3point1-70b"
    },
    {
        "description": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "task_name": "Mbpp/607",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "import re\n\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None\n",
        "correct": true,
        "task_id": "265",
        "depth": 0,
        "functions": 1,
        "unique_id": "265_llama3point1-70b"
    },
    {
        "description": "Write a function to sort a given list of strings of numbers numerically.",
        "task_name": "Mbpp/749",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def sort_numeric_strings(num_strings):\n  return sorted([int(num) for num in num_strings])\n",
        "correct": true,
        "task_id": "314",
        "depth": 0,
        "functions": 1,
        "unique_id": "314_llama3point1-70b"
    },
    {
        "description": "Write a python function to check whether every odd index contains odd numbers of a given list.",
        "task_name": "Mbpp/775",
        "dataset": "mbppplus",
        "model": "llama3point1-70b",
        "generated_code": "def odd_position(lst):\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            return False\n    return True\n",
        "correct": true,
        "task_id": "336",
        "depth": 1,
        "functions": 1,
        "unique_id": "336_llama3point1-70b"
    }
]