[
    {
        "task_id": "Mbpp/278",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": false,
        "description": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
        "generated_code": "def count_first_elements(tup):\n    for elem in tup:\n        if isinstance(elem, tuple):\n            return tup.index(elem)\n    return len(tup)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    1,
                    5,
                    7,
                    [
                        4,
                        6
                    ],
                    10
                ]
            ],
            "expected": 4,
            "got": 5
        }
    },
    {
        "task_id": "Mbpp/278",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": false,
        "description": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
        "generated_code": "def count_first_elements(tup):\n    count = 0\n    for elem in tup:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count\n\n# Test cases\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3\nassert count_first_elements((2, 9, (5, 7), 11)) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8)) == 4\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    1,
                    5,
                    7,
                    [
                        4,
                        6
                    ],
                    10
                ]
            ],
            "expected": 4,
            "got": 5
        }
    },
    {
        "task_id": "Mbpp/628",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": true,
        "description": "Write a function to replace all spaces in the given string with '%20'.",
        "generated_code": "def replace_spaces(s: str) -> str:\n    return s.replace(' ', '%20')\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/628",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": true,
        "description": "Write a function to replace all spaces in the given string with '%20'.",
        "generated_code": "def replace_spaces(input_string):\n    return input_string.replace(' ', '%20')\n\n# Test cases\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/624",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": true,
        "description": "Write a python function to convert a given string to uppercase.",
        "generated_code": "def is_upper(s: str) -> str:\n    return s.upper()\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/624",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": true,
        "description": "Write a python function to convert a given string to uppercase.",
        "generated_code": "def is_upper(s):\n    return s.upper()\n\n# Tests to validate the solution\nassert is_upper(\"person\") == \"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/297",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": true,
        "description": "Write a function to flatten a given nested list structure.",
        "generated_code": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/297",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": true,
        "description": "Write a function to flatten a given nested list structure.",
        "generated_code": "def flatten_list(nested_list):\n    flat_list = []\n    \n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    \n    return flat_list\n\n# Testing the function with the provided test cases\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/769",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": false,
        "description": "Write a python function to get the difference between two lists.",
        "generated_code": "def Diff(list1, list2):\n    return sorted(list(set(list1) ^ set(list2)))\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    10,
                    15,
                    20,
                    25,
                    30,
                    35,
                    40
                ],
                [
                    25,
                    40,
                    35
                ]
            ],
            "expected": [
                10,
                20,
                30,
                15
            ],
            "got": [
                10,
                15,
                20,
                30
            ]
        }
    },
    {
        "task_id": "Mbpp/769",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": false,
        "description": "Write a python function to get the difference between two lists.",
        "generated_code": "def Diff(list1, list2):\n    # Convert lists to sets and find their symmetric difference\n    set1 = set(list1)\n    set2 = set(list2)\n    diff_elements = set1.symmetric_difference(set2)\n    \n    # Convert the set back to a list and sort it to ensure the order matches the expected results\n    result_list = list(diff_elements)\n    result_list.sort(key=lambda x: (list1 + list2).index(x))\n    \n    return result_list\n\n# Test cases\nassert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]\nassert Diff([1,2,3,4,5], [6,7,1]) == [2,3,4,5,6,7]\nassert Diff([1,2,3], [6,7,1]) == [2,3,6,7]\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    10,
                    15,
                    20,
                    25,
                    30,
                    35,
                    40
                ],
                [
                    25,
                    40,
                    35
                ]
            ],
            "expected": [
                10,
                20,
                30,
                15
            ],
            "got": null
        }
    }
]