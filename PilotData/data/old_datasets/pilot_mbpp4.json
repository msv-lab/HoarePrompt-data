[
    {
        "task_id": "Mbpp/612",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": true,
        "description": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
        "generated_code": "def merge(list_of_lists):\n    return [list(element[0] for element in list_of_lists), list(element[1] for element in list_of_lists)]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/612",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": true,
        "description": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
        "generated_code": "def merge(list_of_lists):\n    first_elements = [sublist[0] for sublist in list_of_lists]\n    second_elements = [sublist[1] for sublist in list_of_lists]\n    return [first_elements, second_elements]\n\n# Test cases\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([[[1], [2]], [[3], [4]], [[5], [6]], [[7], [8]]]) == [[[1], [3], [5], [7]], [[2], [4], [6], [8]]]\n\nprint(\"All test cases passed!\")\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/250",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": true,
        "description": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "generated_code": "def count_X(tup, elem):\n    return tup.count(elem)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/250",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": true,
        "description": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "generated_code": "def count_X(tup, element):\n    return tup.count(element)\n\n# Tests\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/252",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": false,
        "description": "Write a python function to convert complex numbers to polar coordinates.",
        "generated_code": "import cmath\ndef convert(c):\n    return (abs(c), cmath.phase(c))\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "(1+2j)"
            ],
            "expected": null,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/252",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": false,
        "description": "Write a python function to convert complex numbers to polar coordinates.",
        "generated_code": "import cmath\n\ndef convert(num):\n    return cmath.polar(complex(num))\n\n# Test cases\nassert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0, 0.0)\nassert convert(5) == (5.0, 0.0)\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "(1+2j)"
            ],
            "expected": null,
            "got": [
                2.23606797749979,
                1.1071487177940904
            ]
        }
    },
    {
        "task_id": "Mbpp/478",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": true,
        "description": "Write a function to remove lowercase substrings from a given string.",
        "generated_code": "def remove_lowercase(s: str) -> str:\n    return ''.join(c for c in s if c.isupper())\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/478",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": true,
        "description": "Write a function to remove lowercase substrings from a given string.",
        "generated_code": "def remove_lowercase(s: str) -> str:\n    return ''.join([char for char in s if char.isupper()])\n\n# Testing the function\nassert remove_lowercase(\"PYTHon\") == 'PYTH'\nassert remove_lowercase(\"FInD\") == 'FID'\nassert remove_lowercase(\"STRinG\") == 'STRG'\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/309",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": true,
        "description": "Write a python function to find the maximum of two numbers.",
        "generated_code": "def maximum(a, b):\n    return max(a, b)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/309",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": true,
        "description": "Write a python function to find the maximum of two numbers.",
        "generated_code": "def maximum(a, b):\n    return a if a > b else b\n\n# Test cases to verify the implementation\nassert maximum(5, 10) == 10\nassert maximum(-1, -2) == -1\nassert maximum(9, 7) == 9\n",
        "counter_example": null
    }
]