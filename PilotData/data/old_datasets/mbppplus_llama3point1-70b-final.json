[
    {
        "task_id": "Mbpp/2",
        "specification": "Write a function to find the shared elements from the given two lists.",
        "generated_code": "def similar_elements(test_tup1, test_tup2):\n  return tuple(set(test_tup1) & set(test_tup2))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/3",
        "specification": "Write a python function to identify non-prime numbers.",
        "generated_code": "import math\ndef is_not_prime(n):\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/4",
        "specification": "Write a function to find the n largest integers from a given list of numbers, returned in descending order.",
        "generated_code": "import heapq as hq\ndef heap_queue_largest(nums: list, n: int) -> list:\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/6",
        "specification": "Write a python function to check whether the two numbers differ at one bit position only or not.",
        "generated_code": "def differ_At_One_Bit_Pos(num1, num2):\n    return bin(num1 ^ num2).count('1') == 1\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.9351851851851852,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                -10,
                10
            ],
            "expected": false,
            "got": true
        }
    },
    {
        "task_id": "Mbpp/7",
        "specification": "Write a function to find all words which are at least 4 characters long in a string.",
        "generated_code": "def find_char_long(s):\n    return [word for word in s.split() if len(word) >= 4]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/8",
        "specification": "Write a function to find squares of individual elements in a list.",
        "generated_code": "def square_nums(nums):\n    return [num ** 2 for num in nums]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/9",
        "specification": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "generated_code": "def find_Rotations(s: str) -> int:\n    \"\"\"\n    Find the minimum number of rotations required to get the same string.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        int: The minimum number of rotations required.\n    \"\"\"\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/11",
        "specification": "Write a python function to remove first and last occurrence of a given character from the string.",
        "generated_code": "def remove_Occ(s, char):\n    first_occurrence = s.find(char)\n    last_occurrence = s.rfind(char)\n    \n    if first_occurrence != -1 and last_occurrence != -1:\n        if first_occurrence == last_occurrence:\n            return s.replace(char, '', 1)\n        else:\n            return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    else:\n        return s\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/12",
        "specification": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "generated_code": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/14",
        "specification": "Write a python function to find the volume of a triangular prism.",
        "generated_code": "def find_Volume(b, h, l):\n  return (b * h / 2) * l\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.9907407407407407,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                123456789,
                987654321,
                12345
            ],
            "expected": 7.526291655427412e+20,
            "got": 7.526291655427411e+20
        }
    },
    {
        "task_id": "Mbpp/16",
        "specification": "Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.",
        "generated_code": "def text_lowercase_underscore(s: str) -> bool:\n    \"\"\"\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    return all(c.islower() or c == '_' for c in s)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.6637168141592921,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                "_"
            ],
            "expected": false,
            "got": true
        }
    },
    {
        "task_id": "Mbpp/17",
        "specification": "Write a function that returns the perimeter of a square given its side length as input.",
        "generated_code": "def square_perimeter(side_length):\n    return 4 * side_length",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/18",
        "specification": "Write a function to remove characters from the first string which are present in the second string.",
        "generated_code": "def remove_dirty_chars(main_string, dirty_chars):\n    return ''.join(char for char in main_string if char not in dirty_chars)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/19",
        "specification": "Write a function to find whether a given array of integers contains any duplicate element.",
        "generated_code": "def test_duplicate(arr):\n    return len(arr) != len(set(arr))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/20",
        "specification": "Write a function to check if the given number is woodball or not.",
        "generated_code": "def is_woodall(n):\n    def check_woodall(n):\n        sum = 0\n        for i in range(1, n+1):\n            sum += i**i\n        return sum == n\n    \n    return check_woodall(n)\n",
        "base_accuracy": 0.6666666666666666,
        "plus_accuracy": 0.039603960396039604,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                383
            ],
            "expected": true,
            "got": false
        }
    },
    {
        "task_id": "Mbpp/56",
        "specification": "Write a python function to check if a given number is one less than twice its reverse.",
        "generated_code": "def check(n):\n    rev = int(str(n)[::-1])\n    return n == 2 * rev - 1\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/57",
        "specification": "Write a python function to find the largest number that can be formed with the given list of digits.",
        "generated_code": "def find_Max_Num(digits):\n    return int(''.join(map(str, sorted(digits, reverse=True))))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/58",
        "specification": "Write a python function to check whether the given two integers have opposite sign or not.",
        "generated_code": "def opposite_Signs(a: int, b: int) -> bool:\n    \"\"\"\n    Checks whether two integers have opposite signs.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        bool: True if the integers have opposite signs, False otherwise.\n    \"\"\"\n    return (a < 0 and b > 0) or (a > 0 and b < 0)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/59",
        "specification": "Write a function to find the nth octagonal number.",
        "generated_code": "def is_octagonal(n):\n    return n*(2*n - 1)\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.019801980198019802,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                5
            ],
            "expected": 65,
            "got": 45
        }
    },
    {
        "task_id": "Mbpp/61",
        "specification": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
        "generated_code": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if len(substring) == sum(int(digit) for digit in substring):\n                count += 1\n    return count\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/62",
        "specification": "Write a python function to find smallest number in a list.",
        "generated_code": "def smallest_num(nums):\n    return min(nums)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/63",
        "specification": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "generated_code": "def max_difference(tuples):\n    return max(max(t) - min(t) for t in tuples)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/64",
        "specification": "Write a function to sort a list of tuples using the second value of each tuple.",
        "generated_code": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/65",
        "specification": "Write a function to flatten a list and sum all of its elements.",
        "generated_code": "def recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/66",
        "specification": "Write a python function to count the number of positive numbers in a list.",
        "generated_code": "def pos_count(lst):\n    return sum(1 for x in lst if x > 0)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/67",
        "specification": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "generated_code": "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/68",
        "specification": "Write a python function to check whether the given array is monotonic or not.",
        "generated_code": "def is_Monotonic(arr):\n    increasing = decreasing = True\n    \n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            increasing = False\n        if arr[i] < arr[i + 1]:\n            decreasing = False\n            \n    return increasing or decreasing\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/69",
        "specification": "Write a function to check whether a list contains the given sublist or not.",
        "generated_code": "def is_sublist(main_list, sub_list):\n    return sub_list in [main_list[i:i+len(sub_list)] for i in range(len(main_list)-len(sub_list)+1)]",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/70",
        "specification": "Write a function to find whether all the given tuples have equal length or not.",
        "generated_code": "def get_equal(tuples):\n    length = len(tuples[0])\n    for t in tuples:\n        if len(t) != length:\n            return False\n    return True\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/71",
        "specification": "Write a function to sort a list of elements.",
        "generated_code": "def comb_sort(nums):\n    def get_next_gap(gap):\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n\n    return nums\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/72",
        "specification": "Write a python function to check whether the given number can be represented as the difference of two squares or not.",
        "generated_code": "import math\n\ndef dif_Square(n):\n    for i in range(int(math.sqrt(n)), 0, -1):\n        if i*i <= n:\n            return True\n    return False\n",
        "base_accuracy": 0.6666666666666666,
        "plus_accuracy": 0.7596153846153846,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                10
            ],
            "expected": false,
            "got": true
        }
    },
    {
        "task_id": "Mbpp/74",
        "specification": "Write a function to check whether it follows the sequence given in the patterns array.",
        "generated_code": "def is_samepatterns(patterns1, patterns2):\n    if len(patterns1) != len(patterns2):\n        return False\n    \n    mapping = {}\n    for p1, p2 in zip(patterns1, patterns2):\n        if p1 not in mapping:\n            mapping[p1] = p2\n        elif mapping[p1] != p2:\n            return False\n    \n    return True\n",
        "base_accuracy": 0.6666666666666666,
        "plus_accuracy": 0.9401709401709402,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                [
                    "red",
                    "green",
                    "greenn"
                ],
                [
                    "a",
                    "b",
                    "b"
                ]
            ],
            "expected": false,
            "got": true
        }
    },
    {
        "task_id": "Mbpp/75",
        "specification": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "generated_code": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Find tuples which have all elements divisible by k from the given list of tuples.\n    \n    Args:\n        tuples_list (list): A list of tuples.\n        k (int): The divisor.\n    \n    Returns:\n        list: A list of tuples where all elements are divisible by k.\n    \"\"\"\n    return [tup for tup in tuples_list if all(num % k == 0 for num in tup)]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/77",
        "specification": "Write a python function to find whether a number is divisible by 11.",
        "generated_code": "def is_Diff(n):\n    return sum(int(digit) for index, digit in enumerate(str(n)) if index % 2 == 0) - sum(int(digit) for index, digit in enumerate(str(n)) if index % 2 == 1) == 0 or sum(int(digit) for index, digit in enumerate(str(n)) if index % 2 == 0) - sum(int(digit) for index, digit in enumerate(str(n)) if index % 2 == 1) == 11\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.45689655172413796,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                -1212
            ],
            "expected": false,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/79",
        "specification": "Write a python function to check whether the length of the word is odd or not.",
        "generated_code": "def word_len(word: str) -> bool:\n    return len(word) % 2 != 0\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/80",
        "specification": "Write a function to find the nth tetrahedral number.",
        "generated_code": "def tetrahedral_number(n: int) -> int:\n    \"\"\"\n    This function calculates the nth tetrahedral number.\n    \n    Parameters:\n    n (int): The position of the tetrahedral number to be calculated.\n    \n    Returns:\n    int: The nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/82",
        "specification": "Write a function to find the volume of a sphere.",
        "generated_code": "import math\n\ndef volume_sphere(radius: float) -> float:\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Args:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * (radius ** 3)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/84",
        "specification": "Write a function to find the nth number in the newman conway sequence.",
        "generated_code": "def sequence(n):\n    a = [0, 1]\n    for i in range(2, n+1):\n        a.append(a[i-1-a[i-2]])\n    return a[n]\n",
        "base_accuracy": 0.3333333333333333,
        "plus_accuracy": 0.009259259259259259,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                10
            ],
            "expected": 6,
            "got": 1
        }
    },
    {
        "task_id": "Mbpp/85",
        "specification": "Write a function to find the surface area of a sphere.",
        "generated_code": "import math\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * (radius ** 2)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/86",
        "specification": "Write a function to find nth centered hexagonal number.",
        "generated_code": "def centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n    This function calculates the nth centered hexagonal number.\n    \n    Args:\n    n (int): The position of the centered hexagonal number to be calculated.\n    \n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.009900990099009901,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                10
            ],
            "expected": 271,
            "got": 190
        }
    },
    {
        "task_id": "Mbpp/88",
        "specification": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
        "generated_code": "def freq_count(lst):\n    return {i: lst.count(i) for i in set(lst)}\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/89",
        "specification": "Write a function to find the closest smaller number than n.",
        "generated_code": "def closest_num(n):\n    return n - 1\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/90",
        "specification": "Write a python function to find the length of the longest word.",
        "generated_code": "def len_log(words):\n    return max(len(word) for word in words)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/91",
        "specification": "Write a function to check if a string is present as a substring in a given list of string values.",
        "generated_code": "def find_substring(lst, substring):\n    return any(substring in string for string in lst)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/92",
        "specification": "Write a function to check whether the given number is undulating or not.",
        "generated_code": "def is_undulating(n):\n    n = str(n)\n    undulating = True\n    for i in range(1, len(n) - 1):\n        if (n[i-1] < n[i] and n[i] < n[i+1]) or (n[i-1] > n[i] and n[i] > n[i+1]):\n            pass\n        else:\n            undulating = False\n            break\n    return undulating\n",
        "base_accuracy": 0.3333333333333333,
        "plus_accuracy": 0.8910891089108911,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                1212121
            ],
            "expected": true,
            "got": false
        }
    },
    {
        "task_id": "Mbpp/93",
        "specification": "Write a function to calculate the value of 'a' to the power 'b'.",
        "generated_code": "def power(a, b):\n    return a ** b\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/94",
        "specification": "Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.",
        "generated_code": "def index_minimum(lst):\n    return min(lst, key=lambda x: x[1])[0]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/95",
        "specification": "Write a python function to find the length of the smallest list in a list of lists.",
        "generated_code": "def Find_Min_Length(list_of_lists):\n    return min(len(sublist) for sublist in list_of_lists)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/96",
        "specification": "Write a python function to find the number of divisors of a given integer.",
        "generated_code": "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/97",
        "specification": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
        "generated_code": "def frequency_lists(lists):\n    flattened_list = [element for sublist in lists for element in sublist]\n    frequency_dict = {}\n    for element in flattened_list:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/98",
        "specification": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "generated_code": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/99",
        "specification": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "generated_code": "def decimal_to_binary(n: int) -> str:\n  return bin(n)[2:]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.5096153846153846,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                -5
            ],
            "expected": "-101",
            "got": "b101"
        }
    },
    {
        "task_id": "Mbpp/100",
        "specification": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "generated_code": "def next_smallest_palindrome(n: int) -> int:\n    def is_palindrome(num: int) -> bool:\n        return str(num) == str(num)[::-1]\n\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/101",
        "specification": "Write a function to find the kth element in the given array using 1-based indexing.",
        "generated_code": "def kth_element(arr, k):\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n    return arr[k-1]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/102",
        "specification": "Write a function to convert a snake case string to camel case string.",
        "generated_code": "def snake_to_camel(snake_case_str):\n    words = snake_case_str.split('_')\n    camel_case_str = ''.join(word.capitalize() for word in words)\n    return camel_case_str\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.09090909090909091,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                "___python_program"
            ],
            "expected": "___PythonProgram",
            "got": "PythonProgram"
        }
    },
    {
        "task_id": "Mbpp/103",
        "specification": "Write a function to find the Eulerian number a(n, m).",
        "generated_code": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m)\n    \n    The Eulerian number a(n, m) counts the number of permutations of n elements\n    with exactly m runs of consecutive elements in increasing order.\n    \n    The formula used here is based on the recursive relationship:\n    a(n, m) = (n-m+1) * a(n-1, m-1) + m * a(n-1, m)\n    \n    :param n: The number of elements\n    :param m: The number of runs\n    :return: The Eulerian number a(n, m)\n    \"\"\"\n    # Base cases\n    if m == 0:\n        return 0\n    if n == m:\n        return 1\n    \n    # Initialize a dictionary to store the results of subproblems\n    memo = {(i, j): 0 for i in range(n+1) for j in range(m+1)}\n    \n    # Base cases\n    for i in range(n+1):\n        memo[(i, 0)] = 0\n        memo[(i, i)] = 1\n    \n    # Fill the memo dictionary using the recursive relationship\n    for i in range(1, n+1):\n        for j in range(1, min(i, m)+1):\n            memo[(i, j)] = (i-j+1) * memo[(i-1, j-1)] + j * memo[(i-1, j)]\n    \n    return memo[(n, m)]\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.4752475247524752,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                3,
                1
            ],
            "expected": 4,
            "got": 1
        }
    },
    {
        "task_id": "Mbpp/104",
        "specification": "Write a function to sort each sublist of strings in a given list of lists.",
        "generated_code": "def sort_sublists(list_of_lists):\n    return [sorted(sublist, key=str.lower) for sublist in list_of_lists]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.9586776859504132,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                [
                    [
                        "IODiWvh",
                        "e",
                        "f",
                        "dog",
                        "r",
                        "cat",
                        "a"
                    ],
                    [
                        "cat",
                        "dog",
                        "elephant"
                    ],
                    [
                        "giraffe"
                    ],
                    [
                        "zebra",
                        "lion",
                        "tiger"
                    ]
                ]
            ],
            "expected": [
                [
                    "IODiWvh",
                    "a",
                    "cat",
                    "dog",
                    "e",
                    "f",
                    "r"
                ],
                [
                    "cat",
                    "dog",
                    "elephant"
                ],
                [
                    "giraffe"
                ],
                [
                    "lion",
                    "tiger",
                    "zebra"
                ]
            ],
            "got": [
                [
                    "a",
                    "cat",
                    "dog",
                    "e",
                    "f",
                    "IODiWvh",
                    "r"
                ],
                [
                    "cat",
                    "dog",
                    "elephant"
                ],
                [
                    "giraffe"
                ],
                [
                    "lion",
                    "tiger",
                    "zebra"
                ]
            ]
        }
    },
    {
        "task_id": "Mbpp/105",
        "specification": "Write a python function to count true booleans in the given list.",
        "generated_code": "def count(lst):\n    return sum(1 for elem in lst if elem)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/108",
        "specification": "Write a function to merge three lists into a single sorted list.",
        "generated_code": "def merge_sorted_list(list1, list2, list3):\n    return sorted(list1 + list2 + list3)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/109",
        "specification": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "generated_code": "def odd_Equivalent(s, times):\n    count = 0\n    for i in range(times):\n        if s.count('1') % 2 != 0:\n            count += 1\n        s = s[-1] + s[:-1]  # rotate the string\n    return count\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.029411764705882353,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                "011001",
                6
            ],
            "expected": 3,
            "got": 6
        }
    },
    {
        "task_id": "Mbpp/111",
        "specification": "Write a function to find the common elements in given nested lists.",
        "generated_code": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Find the common elements in given nested lists.\n\n    Args:\n        nested_lists (list of lists): A list of lists containing integers.\n\n    Returns:\n        list: A list of common elements found in all nested lists.\n    \"\"\"\n    # Convert the first list to a set for efficient lookups\n    common_elements = set(nested_lists[0])\n    \n    # Iterate over the remaining lists\n    for lst in nested_lists[1:]:\n        # Update the common_elements set to include only elements present in the current list\n        common_elements &= set(lst)\n    \n    # Convert the set back to a list and return it\n    return list(common_elements)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/113",
        "specification": "Write a function to check if a string represents an integer or not.",
        "generated_code": "def check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.9669421487603306,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                ""
            ],
            "expected": null,
            "got": false
        }
    },
    {
        "task_id": "Mbpp/116",
        "specification": "Write a function to convert a given tuple of positive integers into a single integer.",
        "generated_code": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/118",
        "specification": "Write a function to convert a string to a list of strings split on the space character.",
        "generated_code": "def string_to_list(s):\n    return s.split()\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.8018867924528302,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                ""
            ],
            "expected": [
                ""
            ],
            "got": []
        }
    },
    {
        "task_id": "Mbpp/119",
        "specification": "Write a python function to find the element that appears only once in a sorted array.",
        "generated_code": "def search(arr):\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            return arr[i]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.2616822429906542,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                []
            ],
            "expected": 0,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/120",
        "specification": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
        "generated_code": "def max_product_tuple(tuple_list):\n    max_product = 0\n    for tup in tuple_list:\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n    return max_product\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "assertion",
            "error": "name 'math' is not defined"
        }
    },
    {
        "task_id": "Mbpp/123",
        "specification": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "generated_code": "def sum_of_divisors(n):\n    divisors_sum = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i != n:\n                divisors_sum += i + n // i\n            else:\n                divisors_sum += i\n    return divisors_sum - n\n\ndef amicable_numbers_sum(n):\n    amicable_sum = 0\n    for num in range(1, n + 1):\n        if sum_of_divisors(num) < n:\n            if sum_of_divisors(sum_of_divisors(num)) == num and num != sum_of_divisors(num):\n                amicable_sum += num\n    return amicable_sum\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/124",
        "specification": "Write a function to get the angle of a complex number.",
        "generated_code": "import cmath\n\ndef angle_complex(real, imag):\n    complex_num = complex(real, imag)\n    return cmath.phase(complex_num)\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.0,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                "0",
                "1j"
            ],
            "expected": 1.5707963267948966,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/125",
        "specification": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "generated_code": "def find_length(s: str) -> int:\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for char in s:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.8333333333333334,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                "11000010001"
            ],
            "expected": 6,
            "got": 4
        }
    },
    {
        "task_id": "Mbpp/126",
        "specification": "Write a python function to find the sum of common divisors of two given numbers.",
        "generated_code": "def sum(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    common_divisors = [i for i in range(1, gcd(a, b) + 1) if gcd(a, b) % i == 0]\n    return sum(common_divisors)\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.0,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                10,
                15
            ],
            "expected": 6.0,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/127",
        "specification": "Write a function to multiply two integers.",
        "generated_code": "def multiply_int(a, b):\n    return a * b\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/128",
        "specification": "Write a function to find words that are longer than n characters from a given list of words.",
        "generated_code": "def long_words(n, sentence):\n    return [word for word in sentence.split() if len(word) > n]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/129",
        "specification": "Write a function to calculate whether the matrix is a magic square.",
        "generated_code": "def magic_square_test(matrix):\n    # Calculate the sum of the first row\n    target_sum = sum(matrix[0])\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n    \n    # Check columns\n    for col in range(len(matrix[0])):\n        if sum(matrix[row][col] for row in range(len(matrix))) != target_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(len(matrix))) != target_sum:\n        return False\n    if sum(matrix[i][len(matrix) - i - 1] for i in range(len(matrix))) != target_sum:\n        return False\n    \n    return True\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/130",
        "specification": "Write a function to find the item with maximum frequency in a given list.",
        "generated_code": "def max_occurrences(lst):\n    return max(set(lst), key=lst.count)\n",
        "base_accuracy": 0.6666666666666666,
        "plus_accuracy": 0.9705882352941176,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                [
                    2,
                    3,
                    8,
                    4,
                    7,
                    9,
                    8,
                    7,
                    9,
                    15,
                    14,
                    10,
                    12,
                    13,
                    16,
                    18
                ]
            ],
            "expected": 8,
            "got": 7
        }
    },
    {
        "task_id": "Mbpp/131",
        "specification": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
        "generated_code": "def reverse_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left, right = left + 1, right - 1\n    return ''.join(s)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/132",
        "specification": "Write a function to convert a tuple to a string.",
        "generated_code": "def tup_string(tup):\n  return \"\".join(tup)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/133",
        "specification": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
        "generated_code": "def sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/135",
        "specification": "Write a function to find the nth hexagonal number.",
        "generated_code": "def hexagonal_num(n):\n  return n * (2 * n - 1)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/137",
        "specification": "Write a function to find the ratio of zeroes to non-zeroes in an array of integers.",
        "generated_code": "def zero_count(arr):\n    zeros = arr.count(0)\n    non_zeros = len(arr) - zeros\n    if non_zeros == 0:\n        return 0\n    return zeros / non_zeros\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.990990990990991,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "expected": Infinity,
            "got": 0
        }
    },
    {
        "task_id": "Mbpp/138",
        "specification": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "generated_code": "def is_Sum_Of_Powers_Of_Two(n):\n    bin_str = bin(n)[2:]  # convert the number to binary and remove the '0b' prefix\n    return '11' not in bin_str  # check if there are no consecutive 1s in the binary representation",
        "base_accuracy": 0.6666666666666666,
        "plus_accuracy": 0.6310679611650486,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                14
            ],
            "expected": true,
            "got": false
        }
    },
    {
        "task_id": "Mbpp/139",
        "specification": "Write a function to find the circumference of a circle.",
        "generated_code": "import math\n\ndef circle_circumference(radius):\n  return 2 * math.pi * radius\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/140",
        "specification": "Write a function to flatten the list of lists into a single set of numbers.",
        "generated_code": "def extract_singly(lst):\n    return set(num for tup in lst for num in tup)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/141",
        "specification": "Write a function to sort a list of elements.",
        "generated_code": "def pancake_sort(arr):\n    n = len(arr)\n    for size in range(n, 0, -1):\n        max_index = arr.index(max(arr[:size]))\n        if max_index != size-1:\n            if max_index != 0:\n                arr[:max_index+1] = arr[:max_index+1][::-1]\n            arr[:size] = arr[:size][::-1]\n    return arr\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/142",
        "specification": "Write a function to count number items that are identical in the same position of three given lists.",
        "generated_code": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.5636363636363636,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ]
            ],
            "expected": 5,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/145",
        "specification": "Write a python function to find the maximum difference between any two elements in a given array.",
        "generated_code": "def max_Abs_Diff(arr):\n    return max(arr) - min(arr)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/160",
        "specification": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
        "generated_code": "def find_solution(a, b, n):\n    def extended_euclidean(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = extended_euclidean(b % a, a)\n            return gcd, y - (b // a) * x, x\n\n    gcd, x, y = extended_euclidean(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return x, y",
        "base_accuracy": 0.3333333333333333,
        "plus_accuracy": 0.34951456310679613,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                2,
                3,
                7
            ],
            "expected": [
                2,
                1
            ],
            "got": [
                -7,
                7
            ]
        }
    },
    {
        "task_id": "Mbpp/161",
        "specification": "Write a function to remove all elements from a given list present in another list.",
        "generated_code": "def remove_elements(original_list, elements_to_remove):\n    return [element for element in original_list if element not in elements_to_remove]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/162",
        "specification": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "generated_code": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/165",
        "specification": "Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).",
        "generated_code": "def count_char_position(s):\n    s = s.lower()\n    count = 0\n    for i, char in enumerate(s):\n        if ord(char) - 96 == i + 1:\n            count += 1\n    return count\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/166",
        "specification": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "generated_code": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/167",
        "specification": "Write a python function to find the smallest power of 2 greater than or equal to n.",
        "generated_code": "import math\n\ndef next_power_of_2(n):\n    return 2 ** math.ceil(math.log2(n + 1))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.9464285714285714,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                1
            ],
            "expected": 1,
            "got": 2
        }
    },
    {
        "task_id": "Mbpp/168",
        "specification": "Write a function to count the number of occurrences of a number in a given list.",
        "generated_code": "def frequency(lst, num):\n    return lst.count(num)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/170",
        "specification": "Write a function to find the sum of numbers in a list within a range specified by two indices.",
        "generated_code": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/171",
        "specification": "Write a function to find the perimeter of a regular pentagon from the length of its sides.",
        "generated_code": "def perimeter_pentagon(side_length: int) -> int:\n    return 5 * side_length\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/172",
        "specification": "Write a function to count the number of occurence of the string 'std' in a given string.",
        "generated_code": "def count_occurance(s):\n    return s.count(\"std\")\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/222",
        "specification": "Write a function to check if all the elements in tuple have same data type or not.",
        "generated_code": "def check_type(tup):\n    return len(set(type(x) for x in tup)) == 1\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/223",
        "specification": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "generated_code": "def is_majority(arr, n, x):\n    count = arr.count(x)\n    return count > n/2",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/224",
        "specification": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
        "generated_code": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/226",
        "specification": "Write a python function to remove the characters which have odd index values of a given string.",
        "generated_code": "def odd_values_string(s):\n    return ''.join(s[i] for i in range(0, len(s), 2))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/227",
        "specification": "Write a function to find minimum of three numbers.",
        "generated_code": "def min_of_three(a, b, c):\n    return min(a, b, c)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/230",
        "specification": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "generated_code": "def replace_blank(s, char):\n    return s.replace(\" \", char)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/232",
        "specification": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
        "generated_code": "def larg_nnum(lst, n):\n    return sorted(set(lst), reverse=True)[:n]",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/233",
        "specification": "Write a function to find the lateral surface area of a cylinder.",
        "generated_code": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/234",
        "specification": "Write a function to find the volume of a cube given its side length.",
        "generated_code": "def volume_cube(side_length):\n    return side_length ** 3\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/235",
        "specification": "Write a python function to set all even bits of a given number.",
        "generated_code": "def even_bit_set_number(n):\n    return n | 0xAAAAAAAA\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.0,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                10
            ],
            "expected": 10,
            "got": 2863311530
        }
    },
    {
        "task_id": "Mbpp/237",
        "specification": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
        "generated_code": "def check_occurences(tuples):\n    freq_dict = {}\n    for tup in tuples:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in freq_dict:\n            freq_dict[sorted_tup] += 1\n        else:\n            freq_dict[sorted_tup] = 1\n    return freq_dict\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.009009009009009009,
        "assertion_passed": true,
        "counterexample": "(non-serializable) {'test_type': 'base', 'input': [[[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]], 'expected': {(1, 3): 2, (2, 5): 2, (3, 6): 1}, 'got': {(1, 3): 2, (2, 5): 2, (3, 6): 1}}"
    },
    {
        "task_id": "Mbpp/238",
        "specification": "Write a python function to count the number of non-empty substrings of a given string.",
        "generated_code": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/239",
        "specification": "Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.",
        "generated_code": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        total = 0\n        for i in range(1, m + 1):\n            total += get_total_number_of_sequences(m // i, n - 1)\n        return total",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.0,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                10,
                4
            ],
            "expected": 4,
            "got": 89
        }
    },
    {
        "task_id": "Mbpp/240",
        "specification": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "generated_code": "def replace_list(list1, list2):\n    if list1:\n        list1[-1:] = list2\n    else:\n        list1 = list2\n    return list1\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/242",
        "specification": "Write a function to count the total number of characters in a string.",
        "generated_code": "def count_charac(s):\n    return len(s.replace(\" \", \"\"))\n",
        "base_accuracy": 0.6666666666666666,
        "plus_accuracy": 1.0,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                "python programming"
            ],
            "expected": 18,
            "got": 17
        }
    },
    {
        "task_id": "Mbpp/244",
        "specification": "Write a python function to find the next perfect square greater than a given number.",
        "generated_code": "def next_Perfect_Square(n: int) -> int:\n    i = 1\n    while True:\n        perfect_square = i * i\n        if perfect_square > n:\n            return perfect_square\n        i += 1\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.8899082568807339,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                -5
            ],
            "expected": 0,
            "got": 1
        }
    },
    {
        "task_id": "Mbpp/245",
        "specification": "Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.",
        "generated_code": "def max_sum(arr):\n    n = len(arr)\n    inc = [0]*n\n    dec = [0]*n\n    for i in range(1, n):\n        inc[i] = max(inc[i-1] + arr[i], arr[i])\n    for i in range(n-2, -1, -1):\n        dec[i] = max(dec[i+1] + arr[i], arr[i])\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.04950495049504951,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                [
                    1,
                    15,
                    51,
                    45,
                    33,
                    100,
                    12,
                    18,
                    9
                ]
            ],
            "expected": 194,
            "got": 274
        }
    },
    {
        "task_id": "Mbpp/247",
        "specification": "Write a function to find the length of the longest palindromic subsequence in the given string.",
        "generated_code": "def lps(s):\n    s = s.replace(\" \", \"\").lower()\n    n = len(s)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n",
        "base_accuracy": 0.3333333333333333,
        "plus_accuracy": 0.9903846153846154,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                "TENS FOR TENS"
            ],
            "expected": 5,
            "got": 3
        }
    },
    {
        "task_id": "Mbpp/250",
        "specification": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "generated_code": "def count_X(tup, elem):\n    return tup.count(elem)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/251",
        "specification": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
        "generated_code": "def insert_element(lst, elem):\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/252",
        "specification": "Write a python function to convert complex numbers to polar coordinates.",
        "generated_code": "import cmath\ndef convert(n):\n    complex_num = complex(n)\n    polar_coordinates = cmath.polar(complex_num)\n    return polar_coordinates\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/253",
        "specification": "Write a python function that returns the number of integer elements in a given list.",
        "generated_code": "def count_integer(lst):\n    return sum(isinstance(x, int) for x in lst)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/256",
        "specification": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "generated_code": "def count_Primes_nums(n: int) -> int:\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number.\n    \n    Parameters:\n    n (int): A non-negative integer.\n    \n    Returns:\n    int: The number of prime numbers less than n.\n    \"\"\"\n    def is_prime(num: int) -> bool:\n        \"\"\"\n        Helper function to check if a number is prime.\n        \n        Parameters:\n        num (int): The number to check.\n        \n        Returns:\n        bool: True if the number is prime, False otherwise.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/257",
        "specification": "Write a function that takes in two numbers and returns a tuple with the second number and then the first number.",
        "generated_code": "def swap_numbers(a, b):\n  return (b, a)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/259",
        "specification": "Write a function to maximize the given two tuples.",
        "generated_code": "def maximize_elements(tup1, tup2):\n    return tuple(max(i, j) for i, j in zip(tup1, tup2))\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.9504950495049505,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                [
                    [
                        1,
                        3
                    ],
                    [
                        4,
                        5
                    ],
                    [
                        2,
                        9
                    ],
                    [
                        1,
                        10
                    ]
                ],
                [
                    [
                        6,
                        7
                    ],
                    [
                        3,
                        9
                    ],
                    [
                        1,
                        1
                    ],
                    [
                        7,
                        3
                    ]
                ]
            ],
            "expected": [
                [
                    6,
                    7
                ],
                [
                    4,
                    9
                ],
                [
                    2,
                    9
                ],
                [
                    7,
                    10
                ]
            ],
            "got": [
                [
                    6,
                    7
                ],
                [
                    4,
                    5
                ],
                [
                    2,
                    9
                ],
                [
                    7,
                    3
                ]
            ]
        }
    },
    {
        "task_id": "Mbpp/260",
        "specification": "Write a function to find the nth newman–shanks–williams prime number.",
        "generated_code": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"Find the nth Newman-Shanks-Williams prime number.\"\"\"\n    if n == 1:\n        return 7  # The first NSW prime is 7\n    \n    # Initialize the count of NSW primes and the current number\n    count = 1\n    num = 7\n    \n    while True:\n        # Check if the current number is a prime number\n        if is_prime(num):\n            # Check if the current prime number is congruent to 1 or 5 modulo 6\n            if num % 6 in [1, 5]:\n                # Increment the count of NSW primes\n                count += 1\n                \n                # If we have found the nth NSW prime, return it\n                if count == n:\n                    return num\n        \n        # Move on to the next number\n        num += 1\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.0,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                3
            ],
            "expected": 7,
            "got": 11
        }
    },
    {
        "task_id": "Mbpp/261",
        "specification": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "generated_code": "def division_elements(tuple1, tuple2):\n    return tuple(a // b for a, b in zip(tuple1, tuple2))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.504950495049505,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                [
                    5,
                    2,
                    3,
                    3
                ],
                [
                    5,
                    2,
                    3,
                    4
                ]
            ],
            "expected": [
                1.0,
                1.0,
                1.0,
                0.75
            ],
            "got": [
                1,
                1,
                1,
                0
            ]
        }
    },
    {
        "task_id": "Mbpp/262",
        "specification": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
        "generated_code": "def split_two_parts(lst, L):\n    return lst[:L], lst[L:]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/264",
        "specification": "Write a function to calculate a dog's age in dog's years.",
        "generated_code": "def dog_age(human_age):\n    if human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/265",
        "specification": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "generated_code": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/266",
        "specification": "Write a function to find the lateral surface area of a cube given its side length.",
        "generated_code": "def lateralsurface_cube(side_length):\n  return 4 * (side_length ** 2)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.9903846153846154,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                83.57157718204266
            ],
            "expected": 27936.83405077645,
            "got": 27936.834050776455
        }
    },
    {
        "task_id": "Mbpp/267",
        "specification": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "generated_code": "def square_Sum(n):\n    return sum([(2*i-1)**2 for i in range(1, n+1)])\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.6974789915966386,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                1000000.0
            ],
            "expected": 1.333333333333e+18,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/268",
        "specification": "Write a function to find the n'th star number.",
        "generated_code": "def find_star_num(n):\n    return (6*n*(n-1) + 1)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/269",
        "specification": "Write a function to find the ascii value of a character.",
        "generated_code": "def ascii_value(char: str) -> int:\n    \"\"\"\n    Returns the ASCII value of a given character.\n    \n    Parameters:\n    char (str): A single character.\n    \n    Returns:\n    int: The ASCII value of the character.\n    \"\"\"\n    return ord(char)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/270",
        "specification": "Write a python function to find the sum of even numbers at even positions of a list.",
        "generated_code": "def sum_even_and_even_index(lst):\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 0])\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/271",
        "specification": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "generated_code": "def even_Power_Sum(n: int) -> int:\n    return sum([i**5 for i in range(2, 2*n+1, 2)])\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/272",
        "specification": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
        "generated_code": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/273",
        "specification": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "generated_code": "def substract_elements(tup1, tup2):\n    return tuple(a - b for a, b in zip(tup1, tup2))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/274",
        "specification": "Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.",
        "generated_code": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/276",
        "specification": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
        "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * (radius ** 2) * height\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/277",
        "specification": "Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.",
        "generated_code": "def dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/279",
        "specification": "Write a function to find the nth decagonal number.",
        "generated_code": "def is_num_decagonal(n):\n  return 5 * n**2 - 5 * n\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.009009009009009009,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                3
            ],
            "expected": 27,
            "got": 30
        }
    },
    {
        "task_id": "Mbpp/280",
        "specification": "Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).",
        "generated_code": "def sequential_search(array, element):\n    try:\n        index = array.index(element)\n        return (True, index)\n    except ValueError:\n        return (False, -1)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/281",
        "specification": "Write a python function to check if the elements of a given list are unique or not.",
        "generated_code": "def all_unique(lst):\n    return len(lst) == len(set(lst))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/282",
        "specification": "Write a function to subtract two lists element-wise.",
        "generated_code": "def sub_list(list1, list2):\n    return [x - y for x, y in zip(list1, list2)]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/283",
        "specification": "Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.",
        "generated_code": "def validate(n):\n    str_n = str(n)\n    for digit in str_n:\n        if str_n.count(digit) > int(digit):\n            return False\n    return True",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/284",
        "specification": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "generated_code": "def check_element(lst, element):\n    return all(item == element for item in lst)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/285",
        "specification": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "generated_code": "import re\ndef text_match_two_three(s):\n  return bool(re.search('ab{2,3}', s))",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/286",
        "specification": "Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.",
        "generated_code": "def max_sub_array_sum_repeated(arr, n, k):\n    \"\"\"\n    Find the largest sum of a contiguous array in the modified array \n    which is formed by repeating the given array k times.\n\n    Args:\n        arr (list): The input array.\n        n (int): The size of the input array.\n        k (int): The number of times the array is repeated.\n\n    Returns:\n        int: The maximum sum of a contiguous subarray.\n    \"\"\"\n    # Calculate the sum of the original array\n    total_sum = sum(arr)\n    \n    # Calculate the maximum sum of a contiguous subarray in the original array\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum = max(arr[i], current_sum + arr[i])\n        max_sum = max(max_sum, current_sum)\n    \n    # If k is 1, return the maximum sum of a contiguous subarray in the original array\n    if k == 1:\n        return max_sum\n    \n    # Calculate the maximum sum of a contiguous subarray in the modified array\n    max_sum_repeated = max_sum * k\n    if total_sum > 0:\n        max_sum_repeated += (k - 1) * total_sum\n    \n    return max_sum_repeated\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.08823529411764706,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                [
                    10,
                    20,
                    -30,
                    -1
                ],
                4,
                3
            ],
            "expected": 30,
            "got": 90
        }
    },
    {
        "task_id": "Mbpp/287",
        "specification": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "generated_code": "def square_Sum(n):\n    return sum(i**2 for i in range(2, 2*n+1, 2))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.839622641509434,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                1000000
            ],
            "expected": 1.333335333334e+18,
            "got": 1333335333334000000
        }
    },
    {
        "task_id": "Mbpp/290",
        "specification": "Write a function to find the list of maximum length in a list of lists.",
        "generated_code": "def max_length(list_of_lists):\n    max_len = max(len(sublist) for sublist in list_of_lists)\n    max_sublists = [sublist for sublist in list_of_lists if len(sublist) == max_len]\n    return (max_len, max_sublists[0])\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.0,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "base",
            "input": [
                [
                    [
                        0
                    ],
                    [
                        1,
                        3
                    ],
                    [
                        5,
                        7
                    ],
                    [
                        9,
                        11
                    ],
                    [
                        13,
                        15,
                        17
                    ]
                ]
            ],
            "expected": [
                3,
                [
                    13,
                    15,
                    17
                ]
            ],
            "got": [
                3,
                [
                    13,
                    15,
                    17
                ]
            ]
        }
    },
    {
        "task_id": "Mbpp/292",
        "specification": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
        "generated_code": "def find(a, b):\n    return a // b\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/293",
        "specification": "Write a function to find the third side of a right angled triangle.",
        "generated_code": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/294",
        "specification": "Write a function to find the maximum value in a given heterogeneous list.",
        "generated_code": "def max_val(lst):\n    \"\"\"\n    This function finds the maximum value in a given heterogeneous list.\n    \n    Args:\n        lst (list): A list containing different types of elements.\n    \n    Returns:\n        The maximum value from the list.\n    \"\"\"\n    max_val = float('-inf')  # Initialize max_val as negative infinity\n    for item in lst:\n        if isinstance(item, (int, float)):  # Check if the item is a number\n            max_val = max(max_val, item)  # Update max_val if the item is larger\n    return max_val\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/296",
        "specification": "Write a python function to count inversions in an array.",
        "generated_code": "def get_Inv_Count(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/297",
        "specification": "Write a function to flatten a given nested list structure.",
        "generated_code": "def flatten_list(nested_list):\n  flat_list = []\n  for i in nested_list:\n    if type(i) == list:\n      flat_list.extend(flatten_list(i))\n    else:\n      flat_list.append(i)\n  return flat_list\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/299",
        "specification": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "generated_code": "def max_aggregate(tuples):\n    aggregate_dict = {}\n    for name, score in tuples:\n        if name in aggregate_dict:\n            aggregate_dict[name] += score\n        else:\n            aggregate_dict[name] = score\n    max_name = max(aggregate_dict, key=aggregate_dict.get)\n    return (max_name, aggregate_dict[max_name])\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/300",
        "specification": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "generated_code": "import math\n\ndef count_binary_seq(n):\n    total_combinations = 2 ** (2 * n)\n    half_combinations = total_combinations / 2\n    return half_combinations",
        "base_accuracy": 0.3333333333333333,
        "plus_accuracy": 0.008849557522123894,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                2
            ],
            "expected": 6.0,
            "got": 8.0
        }
    },
    {
        "task_id": "Mbpp/301",
        "specification": "Write a function to find the depth of a dictionary.",
        "generated_code": "def dict_depth(dictionary):\n  if not isinstance(dictionary, dict) or not dictionary:\n    return 0\n  elif all(not isinstance(value, dict) for value in dictionary.values()):\n    return 1\n  else:\n    return 1 + max(dict_depth(value) for value in dictionary.values() if isinstance(value, dict))\n",
        "base_accuracy": 0.6666666666666666,
        "plus_accuracy": 0.6454545454545455,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                {
                    "a": 1,
                    "b": {
                        "c": {
                            "d": {}
                        }
                    }
                }
            ],
            "expected": 4,
            "got": 3
        }
    },
    {
        "task_id": "Mbpp/306",
        "specification": "Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .",
        "generated_code": "def max_sum_increasing_subseq(nums, n, k, i):\n    max_sum = 0\n    for j in range(i, k):\n        prev_sum = 0\n        for l in range(j):\n            if nums[l] < nums[j]:\n                prev_sum = max(prev_sum, max_sum_increasing_subseq(nums, n, l, l))\n        max_sum = max(max_sum, prev_sum + nums[j])\n    return max_sum\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.009900990099009901,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                [
                    1,
                    101,
                    2,
                    3,
                    100,
                    4,
                    5
                ],
                7,
                4,
                6
            ],
            "expected": 11,
            "got": 0
        }
    },
    {
        "task_id": "Mbpp/308",
        "specification": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
        "generated_code": "def large_product(list1, list2, n):\n    products = [a * b for a in list1 for b in list2]\n    return sorted(products, reverse=True)[:n]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/309",
        "specification": "Write a python function to find the maximum of two numbers.",
        "generated_code": "def maximum(a, b):\n    return max(a, b)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/311",
        "specification": "Write a python function to set the left most unset bit.",
        "generated_code": "def set_left_most_unset_bit(n):\n    # Find the left most unset bit\n    i = 0\n    while (n & (1 << i)) != 0:\n        i += 1\n\n    # Set the left most unset bit\n    return n | (1 << i)\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.1651376146788991,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                10
            ],
            "expected": 14,
            "got": 11
        }
    },
    {
        "task_id": "Mbpp/312",
        "specification": "Write a function to find the volume of a cone.",
        "generated_code": "import math\ndef volume_cone(radius, height):\n    return (1.0/3)*math.pi*radius*radius*height\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/388",
        "specification": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "generated_code": "def highest_Power_of_2(n):\n    i = 1\n    while i <= n:\n        i *= 2\n    return i // 2\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/389",
        "specification": "Write a function to find the n'th lucas number.",
        "generated_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/390",
        "specification": "Write a function to apply a given format string to all of the elements in a list.",
        "generated_code": "def add_string(lst, format_str):\n    return [format_str.format(i) for i in lst]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/391",
        "specification": "Write a function to convert more than one list to nested dictionary.",
        "generated_code": "def convert_list_dictionary(list1, list2, list3):\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.6730769230769231,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                [
                    "S001",
                    "S002",
                    "S003",
                    "S004"
                ],
                [
                    "Adina Park",
                    "Leyton Marsh",
                    "Duncan Boyle",
                    "Saim Richards"
                ],
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        4,
                        5,
                        6
                    ],
                    {
                        "a": "x",
                        "b": "y",
                        "c": "z"
                    }
                ]
            ],
            "expected": [
                {
                    "S001": {
                        "Adina Park": [
                            1,
                            2,
                            3
                        ]
                    }
                },
                {
                    "S002": {
                        "Leyton Marsh": [
                            4,
                            5,
                            6
                        ]
                    }
                },
                {
                    "S003": {
                        "Duncan Boyle": {
                            "a": "x",
                            "b": "y",
                            "c": "z"
                        }
                    }
                }
            ],
            "got": null
        }
    },
    {
        "task_id": "Mbpp/392",
        "specification": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "generated_code": "def get_max_sum(n):\n    if n < 2:\n        return n\n    else:\n        return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/394",
        "specification": "Write a function to check if given tuple contains no duplicates.",
        "generated_code": "def check_distinct(tup):\n    return len(tup) == len(set(tup))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/395",
        "specification": "Write a python function to find the first non-repeated character in a given string.",
        "generated_code": "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/397",
        "specification": "Write a function to find the median of three numbers.",
        "generated_code": "def median_numbers(a, b, c):\n    return sorted([a, b, c])[1]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/398",
        "specification": "Write a function to compute the sum of digits of each number of a given list.",
        "generated_code": "def sum_of_digits(lst):\n    total_sum = 0\n    for item in lst:\n        if isinstance(item, (int, float)):\n            total_sum += sum(int(digit) for digit in str(abs(int(item))))\n    return total_sum\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.9714285714285714,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                [
                    10,
                    -5,
                    "abc",
                    0,
                    3.14
                ]
            ],
            "expected": 14,
            "got": 9
        }
    },
    {
        "task_id": "Mbpp/404",
        "specification": "Write a python function to find the minimum of two numbers.",
        "generated_code": "def minimum(a, b):\n    return min(a, b)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/405",
        "specification": "Write a function to check whether an element exists within a tuple.",
        "generated_code": "def check_tuplex(tup, element):\n  return element in tup\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/406",
        "specification": "Write a python function to find whether the parity of a given number is odd.",
        "generated_code": "def find_Parity(n):\n    return n % 2 != 0\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/409",
        "specification": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "generated_code": "def min_product_tuple(tuple_list):\n    return min(x * y for x, y in tuple_list)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/410",
        "specification": "Write a function to find the minimum value in a given heterogeneous list.",
        "generated_code": "def min_val(lst):\n    return min([i for i in lst if isinstance(i, (int, float))])\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.9230769230769231,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                [
                    "Python",
                    10,
                    5,
                    2.5,
                    2.5,
                    "version"
                ]
            ],
            "expected": 5,
            "got": 2.5
        }
    },
    {
        "task_id": "Mbpp/412",
        "specification": "Write a python function to remove odd numbers from a given list.",
        "generated_code": "def remove_odd(numbers):\n    return [num for num in numbers if num % 2 == 0]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/413",
        "specification": "Write a function to extract the nth element from a given list of tuples.",
        "generated_code": "def extract_nth_element(tuple_list, n):\n    return [tup[n] for tup in tuple_list]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/414",
        "specification": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
        "generated_code": "def overlapping(seq1, seq2):\n    return any(element in seq2 for element in seq1)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/418",
        "specification": "Write a python function to find the element of a list having maximum length.",
        "generated_code": "def Find_Max(lst):\n    return max(lst, key=len)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/419",
        "specification": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "generated_code": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/420",
        "specification": "Write a python function to find the cube sum of first n even natural numbers.",
        "generated_code": "def cube_Sum(n):\n    return sum(i**3 for i in range(2, n*2+1, 2))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/421",
        "specification": "Write a function to concatenate each element of tuple by the delimiter.",
        "generated_code": "def concatenate_tuple(test_tup):\n    return '-'.join(map(str, test_tup))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/422",
        "specification": "Write a python function to find the average of cubes of first n natural numbers.",
        "generated_code": "def find_Average_Of_Cube(n):\n    return sum(i**3 for i in range(1, n+1)) / n\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/424",
        "specification": "Write a function to extract only the rear index element of each string in the given tuple.",
        "generated_code": "def extract_rear(strings):\n    return [s[-1] for s in strings]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/425",
        "specification": "Write a function to count the number of sublists containing a particular element.",
        "generated_code": "def count_element_in_list(lst, element):\n    \"\"\"\n    Counts the number of sublists containing a particular element.\n\n    Args:\n        lst (list): The list of sublists to search.\n        element: The element to count.\n\n    Returns:\n        int: The number of sublists containing the element.\n    \"\"\"\n    return sum(1 for sublist in lst if element in sublist)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/426",
        "specification": "Write a function to filter odd numbers.",
        "generated_code": "def filter_oddnumbers(nums):\n  return [num for num in nums if num % 2 != 0]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/428",
        "specification": "Write a function to sort the given array by using shell sort.",
        "generated_code": "def shell_sort(nums):\n  gap = len(nums) // 2\n  while gap > 0:\n    for i in range(gap, len(nums)):\n      temp = nums[i]\n      j = i\n      while j >= gap and nums[j - gap] > temp:\n        nums[j] = nums[j - gap]\n        j -= gap\n      nums[j] = temp\n    gap //= 2\n  return nums\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/429",
        "specification": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "generated_code": "def and_tuples(tup1, tup2):\n    return tuple(x & y for x, y in zip(tup1, tup2))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/430",
        "specification": "Write a function to find the directrix of a parabola.",
        "generated_code": "def parabola_directrix(a, h, k):\n  return k - (1 / (4 * a))\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.14705882352941177,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                5,
                3,
                2
            ],
            "expected": 1,
            "got": 1.95
        }
    },
    {
        "task_id": "Mbpp/432",
        "specification": "Write a function to find the median length of a trapezium.",
        "generated_code": "def median_trapezium(*args):\n    num_list = sorted([*args])\n    n = len(num_list)\n    if n % 2 == 0:\n        median = (num_list[n//2 - 1] + num_list[n//2]) / 2\n    else:\n        median = num_list[n//2]\n    return median\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.0660377358490566,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                15,
                25,
                35
            ],
            "expected": 20.0,
            "got": 25
        }
    },
    {
        "task_id": "Mbpp/433",
        "specification": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "generated_code": "def check_greater(arr, num):\n    return num > max(arr)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.970873786407767,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                [],
                10
            ],
            "expected": true,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/435",
        "specification": "Write a python function to find the last digit of a given number.",
        "generated_code": "def last_Digit(n):\n    return n % 10\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.6310679611650486,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                -987
            ],
            "expected": 7,
            "got": 3
        }
    },
    {
        "task_id": "Mbpp/436",
        "specification": "Write a python function to return the negative numbers in a list.",
        "generated_code": "def neg_nos(lst):\n    return [num for num in lst if num < 0]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/437",
        "specification": "Write a function to remove odd characters in a string.",
        "generated_code": "def remove_odd(s):\n  return \"\".join([s[i] for i in range(len(s)) if i % 2 == 0])\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.009708737864077669,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                "python"
            ],
            "expected": "yhn",
            "got": "pto"
        }
    },
    {
        "task_id": "Mbpp/439",
        "specification": "Write a function to join a list of multiple integers into a single integer.",
        "generated_code": "def multiple_to_single(nums):\n    return int(''.join(map(str, nums)))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/440",
        "specification": "Write a function to find the first adverb and their positions in a given sentence.",
        "generated_code": "import re\n\ndef find_adverb_position(sentence):\n    adverbs = ['clearly', 'seriously', 'unfortunately']\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if word.strip('!!') in adverbs:\n            return (i, len(sentence[:sentence.find(word)]), word.strip('!!'))\n    return None\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.4368932038834951,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                "clearly!! we can see the sky"
            ],
            "expected": [
                0,
                7,
                "clearly"
            ],
            "got": [
                0,
                0,
                "clearly"
            ]
        }
    },
    {
        "task_id": "Mbpp/441",
        "specification": "Write a function to find the surface area of a cube of a given size.",
        "generated_code": "def surfacearea_cube(size):\n    return 6 * size ** 2\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.7272727272727273,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                1000.99
            ],
            "expected": 6011885.880600001,
            "got": 6011885.8806
        }
    },
    {
        "task_id": "Mbpp/445",
        "specification": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "generated_code": "def index_multiplication(tuple1, tuple2):\n    return tuple((a[0]*b[0], a[1]*b[1]) for a, b in zip(tuple1, tuple2))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/446",
        "specification": "Write a python function to count the occurence of all elements of list in a tuple.",
        "generated_code": "def count_Occurrence(tup, lst):\n    return sum(tup.count(element) for element in lst)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/447",
        "specification": "Write a function to find cubes of individual elements in a list.",
        "generated_code": "def cube_nums(nums):\n    return [num ** 3 for num in nums]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/448",
        "specification": "Write a function to calculate the sum of perrin numbers.",
        "generated_code": "def cal_sum(n):\n    perrin_sequence = [3, 0, 2]\n    for i in range(3, n):\n        perrin_sequence.append(perrin_sequence[i-2] + perrin_sequence[i-3])\n    return sum(perrin_sequence[:n])\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.5742574257425742,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                9
            ],
            "expected": 49,
            "got": 37
        }
    },
    {
        "task_id": "Mbpp/450",
        "specification": "Write a function to extract specified size of strings from a given list of string values.",
        "generated_code": "def extract_string(strings, size):\n    return [s for s in strings if len(s) == size]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/451",
        "specification": "Write a function to remove all whitespaces from the given string.",
        "generated_code": "def remove_whitespaces(input_string):\n    return input_string.replace(\" \", \"\")\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.9174311926605505,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                "\n\t"
            ],
            "expected": "",
            "got": "\n\t"
        }
    },
    {
        "task_id": "Mbpp/453",
        "specification": "Write a python function to find the sum of even factors of a number.",
        "generated_code": "def sumofFactors(n):\n    return sum(i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/454",
        "specification": "Write a function that matches a word containing 'z'.",
        "generated_code": "import re\ndef text_match_wordz(s):\n  return bool(re.search(r'\\bz\\b', s))\n",
        "base_accuracy": 0.3333333333333333,
        "plus_accuracy": 0.8737864077669902,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                "pythonz."
            ],
            "expected": true,
            "got": false
        }
    },
    {
        "task_id": "Mbpp/455",
        "specification": "Write a function to check whether the given month number contains 31 days or not.",
        "generated_code": "def check_monthnumb_number(n):\n    months_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return n in months_31_days\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/456",
        "specification": "Write a function to reverse each string in a given list of string values.",
        "generated_code": "def reverse_string_list(strings):\n    return [s[::-1] for s in strings]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/457",
        "specification": "Write a python function to find the sublist having minimum length.",
        "generated_code": "def Find_Min(sublists):\n    return min(sublists, key=len)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/458",
        "specification": "Write a function to find the area of a rectangle.",
        "generated_code": "def rectangle_area(length, width):\n    return length * width\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/459",
        "specification": "Write a function to remove uppercase substrings from a given string.",
        "generated_code": "def remove_uppercase(s: str) -> str:\n    result = ''\n    substring = ''\n    for char in s:\n        if char.isupper():\n            substring += char\n        else:\n            result += char\n            substring = ''\n    return result\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/460",
        "specification": "Write a python function to get the first element of each sublist.",
        "generated_code": "def Extract(sublists):\n    return [sublist[0] for sublist in sublists]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/462",
        "specification": "Write a function to find all possible combinations of the elements of a given list.",
        "generated_code": "from itertools import chain, combinations\n\ndef combinations_list(lst):\n    return list(chain(*map(lambda x: combinations(lst, x), range(0, len(lst) + 1))))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "assertion",
            "error": ""
        }
    },
    {
        "task_id": "Mbpp/463",
        "specification": "Write a function to find the maximum product subarray of the given array.",
        "generated_code": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = min_product = result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n\n        result = max(result, max_product)\n\n    return result\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/465",
        "specification": "Write a function to drop empty items from a given dictionary.",
        "generated_code": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/468",
        "specification": "Write a function to find the maximum product formed by multiplying numbers of an increasing sublist of that array.",
        "generated_code": "def max_product(nums):\n    n = len(nums)\n    max_product = [1] * n\n    min_product = [1] * n\n    \n    for i in range(1, n):\n        if nums[i-1] < nums[i]:\n            max_product[i] = max_product[i-1] * nums[i]\n        else:\n            max_product[i] = nums[i]\n    \n    result = max(max_product)\n    \n    return result\n",
        "base_accuracy": 0.6666666666666666,
        "plus_accuracy": 0.44545454545454544,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                [
                    4,
                    42,
                    55,
                    68,
                    80
                ]
            ],
            "expected": 50265600,
            "got": 12566400
        }
    },
    {
        "task_id": "Mbpp/470",
        "specification": "Write a function to find the pairwise addition of the neighboring elements of the given tuple.",
        "generated_code": "def add_pairwise(tup):\n    return tuple(a + b for a, b in zip(tup, tup[1:]))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/471",
        "specification": "Write a python function to find the product of the array multiplication modulo n.",
        "generated_code": "def find_remainder(nums, n):\n    product = 1\n    for num in nums:\n        product = (product * num) % n\n    return product\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/472",
        "specification": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "generated_code": "def check_Consecutive(lst):\n    lst.sort()\n    return all(lst[i] - lst[i-1] == 1 for i in range(1, len(lst))) and len(lst) == len(set(lst))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/473",
        "specification": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "generated_code": "def tuple_intersection(list1, list2):\n    return set(tuple(sorted(t)) for t in list1) & set(tuple(sorted(t)) for t in list2)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/474",
        "specification": "Write a function to replace characters in a string.",
        "generated_code": "def replace_char(s, old, new):\n    return s.replace(old, new)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/475",
        "specification": "Write a function to sort a dictionary by value.",
        "generated_code": "def sort_counter(counter_dict):\n  return sorted(counter_dict.items(), key=lambda x: x[1], reverse=True)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/476",
        "specification": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "generated_code": "def big_sum(arr):\n    return max(arr) + min(arr)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/477",
        "specification": "Write a python function to convert the given string to lower case.",
        "generated_code": "def is_lower(s: str) -> str:\n  return s.lower()\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/478",
        "specification": "Write a function to remove lowercase substrings from a given string.",
        "generated_code": "def remove_lowercase(s):\n    result = ''\n    for char in s:\n        if char.isupper():\n            result += char\n    return result\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/479",
        "specification": "Write a python function to find the first digit of a given number.",
        "generated_code": "def first_Digit(n):\n    return int(str(n)[0])\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/554",
        "specification": "Write a python function which takes a list of integers and only returns the odd ones.",
        "generated_code": "def Split(lst):\n    return [i for i in lst if i % 2 != 0]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/555",
        "specification": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "generated_code": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural_numbers\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/556",
        "specification": "Write a python function to count the number of pairs whose xor value is odd.",
        "generated_code": "def find_Odd_Pair(arr, n):\n    odd_count = sum(1 for num in arr if num % 2 != 0)\n    even_count = n - odd_count\n    return odd_count * even_count + (odd_count * (odd_count - 1)) // 2\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.44660194174757284,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                [
                    5,
                    4,
                    7,
                    2,
                    1
                ],
                5
            ],
            "expected": 6,
            "got": 9
        }
    },
    {
        "task_id": "Mbpp/557",
        "specification": "Write a function to toggle the case of all characters in a string.",
        "generated_code": "def toggle_string(s):\n    return s.swapcase()\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/558",
        "specification": "Write a python function to find the sum of the per-digit difference between two integers.",
        "generated_code": "def digit_distance_nums(num1: int, num2: int) -> int:\n    \"\"\"\n    Calculate the sum of the per-digit difference between two integers.\n    \n    Args:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n    \n    Returns:\n    int: The sum of the per-digit difference between num1 and num2.\n    \"\"\"\n    # Convert the integers to strings to easily access each digit\n    str_num1 = str(num1)\n    str_num2 = str(num2)\n    \n    # Initialize the sum of differences\n    sum_diff = 0\n    \n    # Iterate over the digits of the numbers\n    for digit1, digit2 in zip(str_num1, str_num2):\n        # Calculate the absolute difference between the digits\n        diff = abs(int(digit1) - int(digit2))\n        # Add the difference to the sum\n        sum_diff += diff\n    \n    # If one number has more digits than the other, add the remaining digits to the sum\n    if len(str_num1) > len(str_num2):\n        for digit in str_num1[len(str_num2):]:\n            sum_diff += int(digit)\n    elif len(str_num2) > len(str_num1):\n        for digit in str_num2[len(str_num1):]:\n            sum_diff += int(digit)\n    \n    return sum_diff\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.7622377622377622,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                12345,
                9
            ],
            "expected": 14,
            "got": 22
        }
    },
    {
        "task_id": "Mbpp/559",
        "specification": "Write a function to find the sum of the largest contiguous sublist in the given list.",
        "generated_code": "def max_sub_array_sum(nums, n):\n    \"\"\"\n    Find the sum of the largest contiguous sublist in the given list.\n\n    Args:\n        nums (list): The input list of numbers.\n        n (int): The size of the input list.\n\n    Returns:\n        int: The sum of the largest contiguous sublist.\n    \"\"\"\n    if not nums:\n        return 0\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.3302752293577982,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                [
                    -10,
                    -5,
                    -3,
                    -2,
                    -1
                ],
                5
            ],
            "expected": 0,
            "got": -1
        }
    },
    {
        "task_id": "Mbpp/560",
        "specification": "Write a function to find the union of the elements of two given tuples and output them in sorted order.",
        "generated_code": "def union_elements(tup1, tup2):\n    return tuple(sorted(set(tup1) | set(tup2)))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/562",
        "specification": "Write a python function to find the length of the longest sublists.",
        "generated_code": "def Find_Max_Length(sublists):\n    return max(len(sublist) for sublist in sublists)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/563",
        "specification": "Write a function to extract values between quotation marks from a string.",
        "generated_code": "import re\n\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/564",
        "specification": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "generated_code": "import math\ndef count_Pairs(arr, n):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if arr[i] != arr[j]:\n        count += 1\n  return count\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/565",
        "specification": "Write a python function to split a string into characters.",
        "generated_code": "def split(s):\n    return list(s)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/566",
        "specification": "Write a function to get the sum of the digits of a non-negative integer.",
        "generated_code": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/567",
        "specification": "Write a function to check whether a specified list is sorted or not.",
        "generated_code": "def issort_list(nums):\n    return nums == sorted(nums)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/568",
        "specification": "Write a function to create a list of N empty dictionaries.",
        "generated_code": "def empty_list(n):\n    return [{} for _ in range(n)]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/569",
        "specification": "Write a function to sort each sublist of strings in a given list of lists.",
        "generated_code": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/572",
        "specification": "Write a python function to remove duplicate numbers from a given number of lists.",
        "generated_code": "def two_unique_nums(lst):\n  return [num for num in lst if lst.count(num) == 1]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/573",
        "specification": "Write a python function to calculate the product of the unique numbers in a given list.",
        "generated_code": "def unique_product(numbers):\n    unique_nums = set(numbers)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/576",
        "specification": "Write a python function to check whether a list is sublist of another or not.",
        "generated_code": "def is_Sub_Array(main_list, sub_list):\n    return ''.join(map(str, sub_list)) in ''.join(map(str, main_list))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.9636363636363636,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    3,
                    5
                ]
            ],
            "expected": true,
            "got": false
        }
    },
    {
        "task_id": "Mbpp/577",
        "specification": "Write a python function to find the last digit in factorial of a given number.",
        "generated_code": "def last_Digit_Factorial(n):\n    if n < 0:\n        return \"Factorial is not defined for negative numbers\"\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        factorial = 1\n        for i in range(2, n + 1):\n            factorial *= i\n        return factorial % 10\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.1619047619047619,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                2.5
            ],
            "expected": 0,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/578",
        "specification": "Write a function to interleave 3 lists of the same length into a single flat list.",
        "generated_code": "def interleave_lists(list1, list2, list3):\n    return [x for tup in zip(list1, list2, list3) for x in tup]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/579",
        "specification": "Write a function to find the dissimilar elements in the given two tuples.",
        "generated_code": "def find_dissimilar(tup1, tup2):\n    return tuple(set(tup1) ^ set(tup2))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/583",
        "specification": "Write a function which returns nth catalan number.",
        "generated_code": "def catalan_number(n):\n    catalan = [0 for i in range(n + 1)]\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] = catalan[i] + catalan[j] * catalan[i-j-1]\n\n    return catalan[n]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.8888888888888888,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                0
            ],
            "expected": 1,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/585",
        "specification": "Write a function to find the n most expensive items in a given dataset.",
        "generated_code": "import heapq as hq\ndef expensive_items(data, n):\n  return hq.nlargest(n, data, key=lambda x: x['price'])\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/586",
        "specification": "Write a python function to split a list at the nth eelment and add the first part to the end.",
        "generated_code": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/587",
        "specification": "Write a function to convert a list to a tuple.",
        "generated_code": "def list_tuple(input_list):\n    return tuple(input_list)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/588",
        "specification": "Write a python function to find the difference between largest and smallest value in a given list.",
        "generated_code": "def big_diff(nums):\n    return max(nums) - min(nums)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/589",
        "specification": "Write a function to find perfect squares between two given numbers.",
        "generated_code": "import math\n\ndef perfect_squares(start, end):\n    perfect_squares_list = []\n    for num in range(start, end + 1):\n        sqrt_num = math.sqrt(num)\n        if sqrt_num == int(sqrt_num):\n            perfect_squares_list.append(num)\n    return perfect_squares_list\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.5339805825242718,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                -10,
                -1
            ],
            "expected": [],
            "got": null
        }
    },
    {
        "task_id": "Mbpp/590",
        "specification": "Write a function to convert rectangular coordinates to polar coordinates.",
        "generated_code": "import math\n\ndef polar_rect(x, y):\n    r = math.hypot(x, y)\n    phi = math.atan2(y, x)\n    return (r, phi)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/591",
        "specification": "Write a python function to interchange the first and last elements in a list.",
        "generated_code": "def swap_List(inputList):\n    if len(inputList) > 1:\n        inputList[0], inputList[-1] = inputList[-1], inputList[0]\n    return inputList\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/592",
        "specification": "Write a python function to find the sum of the product of consecutive binomial co-efficients.",
        "generated_code": "import math\n\ndef sum_Of_product(n):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n        n (int): The number of terms to consider.\n\n    Returns:\n        int: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        total += math.comb(n, i) * math.comb(n, i - 1)\n    return total\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/593",
        "specification": "Write a function to remove leading zeroes from an ip address.",
        "generated_code": "def removezero_ip(ip):\n  return '.'.join(str(int(i)) for i in ip.split('.'))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.4158415841584158,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                "ogsr"
            ],
            "expected": "ogsr",
            "got": null
        }
    },
    {
        "task_id": "Mbpp/594",
        "specification": "Write a function to find the difference of the first even and first odd number of a given list.",
        "generated_code": "def diff_even_odd(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    first_even = even_numbers[0]\n    first_odd = odd_numbers[0]\n    return abs(first_even - first_odd)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/596",
        "specification": "Write a function to find the size in bytes of the given tuple.",
        "generated_code": "import sys\n\ndef tuple_size(tup):\n    \"\"\"\n    This function calculates the size in bytes of a given tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        int: The size of the tuple in bytes.\n    \"\"\"\n    return sys.getsizeof(tup)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/597",
        "specification": "Write a function to find kth element from the given two arrays.",
        "generated_code": "def find_kth(arr1, arr2, k):\n    merged = sorted(arr1 + arr2)\n    return merged[k-1]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/598",
        "specification": "Write a function to check whether the given number is armstrong or not.",
        "generated_code": "def armstrong_number(num):\n    num_str = str(num)\n    num_len = len(num_str)\n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** num_len\n    return sum == num\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/599",
        "specification": "Write a function to find sum and average of first n natural numbers.",
        "generated_code": "def sum_average(n):\n    total = sum(range(1, n + 1))\n    average = total / n\n    return total, average\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/600",
        "specification": "Write a python function to check whether the given number is even or not.",
        "generated_code": "def is_Even(num):\n    return num % 2 == 0\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/602",
        "specification": "Write a python function to find the first repeated character in a given string.",
        "generated_code": "def first_repeated_char(s: str) -> str:\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/604",
        "specification": "Write a function to reverse words seperated by spaces in a given string.",
        "generated_code": "def reverse_words(s):\n    return ' '.join(reversed(s.split()))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/605",
        "specification": "Write a function to check if the given integer is a prime number.",
        "generated_code": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/606",
        "specification": "Write a function to convert degrees to radians.",
        "generated_code": "import math\ndef radian_degree(deg):\n    return deg * math.pi / 180\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/607",
        "specification": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "generated_code": "import re\n\ndef find_literals(s, pattern):\n    match = re.search(pattern, s)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/608",
        "specification": "Write a python function to find nth bell number.",
        "generated_code": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/610",
        "specification": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.",
        "generated_code": "def remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/611",
        "specification": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.",
        "generated_code": "def max_of_nth(matrix, n):\n    return max(row[n-1] for row in matrix)\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.039603960396039604,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                [
                    [
                        5,
                        6,
                        7
                    ],
                    [
                        1,
                        3,
                        5
                    ],
                    [
                        8,
                        9,
                        19
                    ]
                ],
                2
            ],
            "expected": 19,
            "got": 9
        }
    },
    {
        "task_id": "Mbpp/612",
        "specification": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
        "generated_code": "def merge(lst):\n    return [[i[0] for i in lst], [i[1] for i in lst]]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/614",
        "specification": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
        "generated_code": "def cummulative_sum(tuples):\n    return sum(sum(t) for t in tuples)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/615",
        "specification": "Write a function that takes a tuple of tuples and returns a list where each element is the average of the corresponding values from each tuple. For each position, compute the average of values from all tuples at that position.",
        "generated_code": "def average_tuple(tuples):\n    return [sum(val) / len(tuples) for val in zip(*tuples)]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/616",
        "specification": "Write a function which takes two tuples of the same length and performs the element wise modulo.",
        "generated_code": "def tuple_modulo(tup1, tup2):\n    return tuple(a % b for a, b in zip(tup1, tup2))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/618",
        "specification": "Write a function to divide two lists element wise.",
        "generated_code": "def div_list(list1, list2):\n  return [x/y for x, y in zip(list1, list2)]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/619",
        "specification": "Write a function to move all the numbers to the end of the given string.",
        "generated_code": "def move_num(s):\n    \"\"\"\n    Move all the numbers to the end of the given string.\n    \n    Args:\n        s (str): The input string.\n    \n    Returns:\n        str: The string with all numbers at the end.\n    \"\"\"\n    num_str = ''\n    non_num_str = ''\n    for char in s:\n        if char.isdigit():\n            num_str += char\n        else:\n            non_num_str += char\n    return non_num_str + num_str\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/620",
        "specification": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.",
        "generated_code": "def largest_subset(nums):\n    if not nums:\n        return 0\n\n    nums.sort()\n    dp = [1] * len(nums)\n\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/622",
        "specification": "Write a function to find the median of two sorted lists of same size.",
        "generated_code": "def get_median(list1, list2, size):\n    merged_list = sorted(list1 + list2)\n    middle_index = size - 1\n    if size % 2 == 0:\n        median = (merged_list[middle_index] + merged_list[middle_index + 1]) / 2\n    else:\n        median = merged_list[middle_index]\n    return median\n",
        "base_accuracy": 0.6666666666666666,
        "plus_accuracy": 0.4144144144144144,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                [
                    1,
                    12,
                    15,
                    26,
                    38
                ],
                [
                    2,
                    13,
                    17,
                    30,
                    45
                ],
                5
            ],
            "expected": 16.0,
            "got": 15
        }
    },
    {
        "task_id": "Mbpp/623",
        "specification": "Write a function to compute the n-th power of each number in a list.",
        "generated_code": "def nth_nums(numbers, n):\n    return [num ** n for num in numbers]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/624",
        "specification": "Write a python function to convert a given string to uppercase.",
        "generated_code": "def is_upper(s: str) -> str:\n    return s.upper()\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/626",
        "specification": "Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.",
        "generated_code": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    if radius == 0:\n        return 0\n    area = (radius ** 2) * math.pi / 2\n    return area\n",
        "base_accuracy": 0.6666666666666666,
        "plus_accuracy": 0.42857142857142855,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                2
            ],
            "expected": 4,
            "got": 6.283185307179586
        }
    },
    {
        "task_id": "Mbpp/628",
        "specification": "Write a function to replace all spaces in the given string with '%20'.",
        "generated_code": "def replace_spaces(input_str):\n    return input_str.replace(' ', '%20')\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/629",
        "specification": "Write a python function to find even numbers from a list of numbers.",
        "generated_code": "def Split(numbers):\n    return [num for num in numbers if num % 2 == 0]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/631",
        "specification": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "generated_code": "def replace_spaces(s: str) -> str:\n    s = s.replace(' ', '_')\n    s = s.replace('_', ' ')\n    s = s.replace(' ', '_')\n    return s\n",
        "base_accuracy": 0.6666666666666666,
        "plus_accuracy": 1.0,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                "The_Avengers"
            ],
            "expected": "The Avengers",
            "got": "The_Avengers"
        }
    },
    {
        "task_id": "Mbpp/632",
        "specification": "Write a python function to move all zeroes to the end of the given list.",
        "generated_code": "def move_zero(nums):\n    return [num for num in nums if num != 0] + [num for num in nums if num == 0]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/633",
        "specification": "Write a python function to find the sum of xor of all pairs of numbers in the given list.",
        "generated_code": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    This function calculates the sum of xor of all pairs of numbers in the given list.\n    \n    Args:\n        nums (list): A list of integers.\n        n (int): The number of elements in the list.\n    \n    Returns:\n        int: The sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_sum += nums[i] ^ nums[j]\n    return total_sum\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/635",
        "specification": "Write a function to sort the given list.",
        "generated_code": "import heapq as hq\ndef heap_sort(lst):\n  hq.heapify(lst)\n  return [hq.heappop(lst) for _ in range(len(lst))]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/637",
        "specification": "Write a function to check whether the given amount has no profit and no loss",
        "generated_code": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/638",
        "specification": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "generated_code": "import math\ndef wind_chill(velocity,temp):\n    if temp > 0 or velocity < 3:\n        return temp\n    else:\n        return math.ceil(13.12 + 0.6215 * temp - 11.37 * (velocity ** 0.16) + 0.3965 * temp * (velocity ** 0.16))\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.0784313725490196,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                120,
                35
            ],
            "expected": 40,
            "got": 35
        }
    },
    {
        "task_id": "Mbpp/639",
        "specification": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
        "generated_code": "def sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.0990990990990991,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                [
                    "John",
                    "dylan",
                    "!Rebecca",
                    "Diana!",
                    "-",
                    "_"
                ]
            ],
            "expected": 20,
            "got": 10
        }
    },
    {
        "task_id": "Mbpp/641",
        "specification": "Write a function to find the nth nonagonal number.",
        "generated_code": "def is_nonagonal(n):\n    return n * (n * 8 - 7)\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.0392156862745098,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                10
            ],
            "expected": 325,
            "got": 730
        }
    },
    {
        "task_id": "Mbpp/643",
        "specification": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "generated_code": "def text_match_wordz_middle(s):\n    words = s.split()\n    for word in words:\n        if len(word) > 1 and 'z' in word[1:-1]:\n            return True\n    return False\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/644",
        "specification": "Write a python function to reverse an array upto a given position.",
        "generated_code": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/721",
        "specification": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "generated_code": "def maxAverageOfPath(matrix):\n    rows, cols = len(matrix), len(matrix[0])\n    max_avg = float('-inf')\n\n    def dfs(row, col, total, count):\n        nonlocal max_avg\n        if row == rows - 1 and col == cols - 1:\n            max_avg = max(max_avg, total / count)\n            return\n        if row < rows - 1:\n            dfs(row + 1, col, total + matrix[row + 1][col], count + 1)\n        if col < cols - 1:\n            dfs(row, col + 1, total + matrix[row][col + 1], count + 1)\n\n    dfs(0, 0, matrix[0][0], 1)\n    return round(max_avg, 1)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.33663366336633666,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                [
                    [
                        1,
                        1,
                        -1,
                        0
                    ],
                    [
                        1,
                        1,
                        -1,
                        0
                    ],
                    [
                        1,
                        1,
                        -1,
                        0
                    ],
                    [
                        1,
                        1,
                        -1,
                        0
                    ]
                ]
            ],
            "expected": 0.5714285714285714,
            "got": 0.6
        }
    },
    {
        "task_id": "Mbpp/722",
        "specification": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "generated_code": "def filter_data(students, min_height, min_weight):\n    filtered_students = {name: (height, weight) for name, (height, weight) in students.items() if height > min_height and weight > min_weight}\n    return filtered_students\n",
        "base_accuracy": 0.6666666666666666,
        "plus_accuracy": 0.908256880733945,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                {
                    "Cierra Vega": [
                        6.2,
                        70
                    ],
                    "Alden Cantrell": [
                        5.9,
                        65
                    ],
                    "Kierra Gentry": [
                        6.0,
                        68
                    ],
                    "Pierre Cox": [
                        5.8,
                        66
                    ]
                },
                6.0,
                70
            ],
            "expected": {
                "Cierra Vega": [
                    6.2,
                    70
                ]
            },
            "got": {}
        }
    },
    {
        "task_id": "Mbpp/723",
        "specification": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.",
        "generated_code": "def count_same_pair(list1, list2):\n    return sum(1 for i, j in zip(list1, list2) if i == j)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/724",
        "specification": "Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.",
        "generated_code": "def power_base_sum(base, power):\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/725",
        "specification": "Write a function to extract values between quotation marks \" \" of the given string.",
        "generated_code": "def extract_quotation(s):\n    result = []\n    in_quote = False\n    current_quote = \"\"\n    for char in s:\n        if char == '\"':\n            if in_quote:\n                result.append(current_quote)\n            in_quote = not in_quote\n            current_quote = \"\"\n        elif in_quote:\n            current_quote += char\n    return result\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/726",
        "specification": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
        "generated_code": "def multiply_elements(numbers):\n    return tuple(a * b for a, b in zip(numbers, numbers[1:]))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/728",
        "specification": "Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].",
        "generated_code": "def sum_list(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/730",
        "specification": "Write a function to remove consecutive duplicates of a given list.",
        "generated_code": "def consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/731",
        "specification": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "generated_code": "import math\n\ndef lateralsurface_cone(r, h):\n    l = math.sqrt(r**2 + h**2)\n    return math.pi * r * l",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/732",
        "specification": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
        "generated_code": "def replace_specialchar(s):\n    return s.replace(' ', ':').replace(',', ':').replace('.', ':')\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/733",
        "specification": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "generated_code": "def find_first_occurrence(arr, num):\n    for i, x in enumerate(arr):\n        if x == num:\n            return i\n    return -1  # return -1 if num is not found in the array\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/734",
        "specification": "Write a python function to find sum of products of all possible sublists of a given list.",
        "generated_code": "def sum_Of_Subarray_Prod(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            subarray = lst[i:j+1]\n            prod = 1\n            for num in subarray:\n                prod *= num\n            total_sum += prod\n    return total_sum\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/735",
        "specification": "Write a python function to toggle bits of the number except the first and the last bit.",
        "generated_code": "def toggle_middle_bits(n):\n    # Convert the number to binary and remove the '0b' prefix\n    bin_n = bin(n)[2:]\n    \n    # Toggle the middle bits by XORing with a string of 1s\n    toggled_bin = bin_n[0] + ''.join('1' if bit == '0' else '0' for bit in bin_n[1:-1]) + bin_n[-1]\n    \n    # Convert the toggled binary string back to an integer\n    toggled_n = int(toggled_bin, 2)\n    \n    return toggled_n\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/736",
        "specification": "Write a function to locate the left insertion point for a specified value in sorted order.",
        "generated_code": "def left_insertion(sorted_list, value):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    Args:\n        sorted_list (list): A sorted list of elements.\n        value: The value to be inserted.\n\n    Returns:\n        int: The index where the value should be inserted to maintain sorted order.\n    \"\"\"\n    for i, x in enumerate(sorted_list):\n        if x >= value:\n            return i\n    return len(sorted_list)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/737",
        "specification": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "generated_code": "import re\n\ndef check_str(s):\n    return bool(re.match('^[aeiouAEIOU]', s))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/739",
        "specification": "Write a python function to find the index of smallest triangular number with n digits.",
        "generated_code": "def find_Index(n):\n    import math\n    idx = 1\n    while True:\n        triangular_num = (idx * (idx + 1)) // 2\n        if len(str(triangular_num)) >= n:\n            return idx\n        idx += 1\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.1553398058252427,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                100
            ],
            "expected": 44721359549995794750898931231328928455603737591808,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/740",
        "specification": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.",
        "generated_code": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i+1] for i in range(0, len(tup), 2)}\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/741",
        "specification": "Write a python function to check whether all the characters are same or not.",
        "generated_code": "def all_Characters_Same(s):\n    return len(set(s)) == 1\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.9900990099009901,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                ""
            ],
            "expected": true,
            "got": false
        }
    },
    {
        "task_id": "Mbpp/742",
        "specification": "Write a function to caluclate the area of a tetrahedron.",
        "generated_code": "import math\n\ndef area_tetrahedron(edge_length):\n    return (edge_length ** 2) * math.sqrt(3)",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/743",
        "specification": "Write a function to rotate a given list by specified number of items to the right direction.",
        "generated_code": "def rotate_right(lst, n):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.991304347826087,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                [],
                0
            ],
            "expected": [],
            "got": null
        }
    },
    {
        "task_id": "Mbpp/744",
        "specification": "Write a function to check if the given tuple has any none value or not.",
        "generated_code": "def check_none(tup):\n    return any(x is None for x in tup)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/745",
        "specification": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.",
        "generated_code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num)]\n        if all(num % digit == 0 for digit in digits if digit != 0):\n            result.append(num)\n    return result\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "assertion",
            "error": ""
        }
    },
    {
        "task_id": "Mbpp/749",
        "specification": "Write a function to sort a given list of strings of numbers numerically.",
        "generated_code": "def sort_numeric_strings(num_strings):\n  return sorted([int(num) for num in num_strings])\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/750",
        "specification": "Write a function to add the given tuple to the given list.",
        "generated_code": "def add_tuple(input_list, input_tuple):\n  return input_list + list(input_tuple)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/751",
        "specification": "Write a function to check if the given array represents min heap or not.",
        "generated_code": "def check_min_heap(heap):\n    for i in range(len(heap)):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < len(heap) and heap[i] > heap[left_child]:\n            return False\n        if right_child < len(heap) and heap[i] > heap[right_child]:\n            return False\n    return True",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/752",
        "specification": "Write a function to find the nth jacobsthal number.  0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...",
        "generated_code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, 2*a + b\n        return b\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/753",
        "specification": "Write a function to find minimum k records from tuple list.  - in this case a verbatim copy of test cases",
        "generated_code": "def min_k(records, k):\n    return sorted(records, key=lambda x: x[1])[:k]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/754",
        "specification": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.",
        "generated_code": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/755",
        "specification": "Write a function to find the second smallest number in a list.",
        "generated_code": "def second_smallest(nums):\n    unique_nums = list(set(nums))\n    if len(unique_nums) < 2:\n        return None\n    return sorted(unique_nums)[1]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/757",
        "specification": "Write a function to count the pairs of reverse strings in the given string list.",
        "generated_code": "def count_reverse_pairs(strings):\n    count = 0\n    for s in strings:\n        reverse_s = s[::-1]\n        if reverse_s in strings and reverse_s != s:\n            count += 1\n            strings.remove(reverse_s)\n    return count\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.6727272727272727,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                [
                    "abc",
                    "cba",
                    "def",
                    "fed",
                    "hij",
                    "jih",
                    "klm",
                    "mlk",
                    "def"
                ]
            ],
            "expected": 5,
            "got": 4
        }
    },
    {
        "task_id": "Mbpp/758",
        "specification": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.",
        "generated_code": "def unique_sublists(lst):\n    sublist_counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.008928571428571428,
        "assertion_passed": true,
        "counterexample": "(non-serializable) {'test_type': 'base', 'input': [[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]], 'expected': {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}, 'got': {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}}"
    },
    {
        "task_id": "Mbpp/759",
        "specification": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "generated_code": "import re\ndef is_decimal(s):\n  pattern = r'^\\d+\\.\\d{2}$'\n  return bool(re.match(pattern, s))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/760",
        "specification": "Write a python function to check whether a list of numbers contains only one distinct element or not.",
        "generated_code": "def unique_Element(lst):\n    return len(set(lst)) == 1\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/762",
        "specification": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "generated_code": "def check_monthnumber_number(month):\n    thirty_days_months = [4, 6, 9, 11]\n    return month in thirty_days_months\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/763",
        "specification": "Write a python function to find the minimum difference between any two elements in a given array.",
        "generated_code": "def find_min_diff(arr, target):\n    arr = sorted(arr)\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i] - arr[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/764",
        "specification": "Write a python function to count number of digits in a given string.",
        "generated_code": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/765",
        "specification": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "generated_code": "def is_polite(n):\n    def count_divisors(num):\n        count = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                count += 1\n        return count\n\n    num = 1\n    while True:\n        if count_divisors(num) == n:\n            return num\n        num += 1\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.0,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                7
            ],
            "expected": 11,
            "got": 64
        }
    },
    {
        "task_id": "Mbpp/766",
        "specification": "Write a function to return a list of all pairs of consecutive items in a given list.",
        "generated_code": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/767",
        "specification": "Write a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,",
        "generated_code": "def get_pairs_count(nums, total_sum):\n    num_count = {}\n    pairs_count = 0\n    \n    for num in nums:\n        complement = total_sum - num\n        if complement in num_count:\n            pairs_count += num_count[complement]\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    \n    return pairs_count\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/769",
        "specification": "Write a python function to get the difference between two lists.",
        "generated_code": "def Diff(list1, list2):\n    return [element for element in list1 + list2 if (element in list1) ^ (element in list2)]\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/770",
        "specification": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
        "generated_code": "def odd_num_sum(n):\n    return sum((2*i-1)**4 for i in range(1, n+1))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/771",
        "specification": "Write a function to check if the given expression is balanced or not.",
        "generated_code": "def check_expression(expression: str) -> bool:\n    stack = []\n    brackets = {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n    \n    for char in expression:\n        if char in brackets:\n            stack.append(char)\n        elif char in brackets.values():\n            if not stack or brackets[stack.pop()] != char:\n                return False\n    \n    return not stack\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.9902912621359223,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                ""
            ],
            "expected": false,
            "got": true
        }
    },
    {
        "task_id": "Mbpp/772",
        "specification": "Write a function to remove all the words with k length in the given string.",
        "generated_code": "def remove_length(s, k):\n    return ' '.join([word for word in s.split() if len(word) != k])\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/773",
        "specification": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
        "generated_code": "def occurance_substring(string, substring):\n    start = string.find(substring)\n    if start == -1:\n        return None\n    end = start + len(substring)\n    return (substring, start, end - 1)\n",
        "base_accuracy": 0.25,
        "plus_accuracy": 0.7425742574257426,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                "python programming, python language",
                "python"
            ],
            "expected": [
                "python",
                0,
                6
            ],
            "got": [
                "python",
                0,
                5
            ]
        }
    },
    {
        "task_id": "Mbpp/775",
        "specification": "Write a python function to check whether every odd index contains odd numbers of a given list.",
        "generated_code": "def odd_position(lst):\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            return False\n    return True\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/777",
        "specification": "Write a python function to find the sum of non-repeated elements in a given list.",
        "generated_code": "def find_sum(lst):\n    return sum(i for i in lst if lst.count(i) == 1)\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.05454545454545454,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                [
                    1,
                    2,
                    3,
                    1,
                    1,
                    4,
                    5,
                    6
                ]
            ],
            "expected": 21,
            "got": 20
        }
    },
    {
        "task_id": "Mbpp/778",
        "specification": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
        "generated_code": "def pack_consecutive_duplicates(lst):\n    result = []\n    current_group = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_group.append(lst[i])\n        else:\n            result.append(current_group)\n            current_group = [lst[i]]\n            \n    result.append(current_group)\n    return result\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.9906542056074766,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                []
            ],
            "expected": [],
            "got": null
        }
    },
    {
        "task_id": "Mbpp/780",
        "specification": "Write a function to find the combinations of sums with tuples in the given tuple list.",
        "generated_code": "def find_combinations(tuples):\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i, len(tuples)):\n            combination = tuple(a + b for a, b in zip(tuples[i], tuples[j]))\n            result.append(combination)\n    return result\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "assertion",
            "error": ""
        }
    },
    {
        "task_id": "Mbpp/781",
        "specification": "Write a python function to check whether the count of divisors is even.",
        "generated_code": "def count_divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.9203539823008849,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                987654321
            ],
            "expected": true,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/782",
        "specification": "Write a python function to find the sum of all odd length subarrays.",
        "generated_code": "def odd_length_sum(nums):\n    total_sum = 0\n    n = len(nums)\n    for length in range(1, n + 1):\n        if length % 2 != 0:\n            for i in range(n - length + 1):\n                total_sum += sum(nums[i:i + length])\n    return total_sum\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/784",
        "specification": "Write a function to find the product of first even and odd number of a given list.",
        "generated_code": "def mul_even_odd(nums):\n    even = next((num for num in nums if num % 2 == 0), None)\n    odd = next((num for num in nums if num % 2 != 0), None)\n    return even * odd\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/785",
        "specification": "Write a function to convert tuple string to integer tuple.",
        "generated_code": "def tuple_str_int(s):\n    return tuple(int(x) for x in s.strip(\"()\").split(\",\"))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/786",
        "specification": "Write a function to locate the right insertion point for a specified value in sorted order.",
        "generated_code": "def right_insertion(sorted_list, value):\n    for i in range(len(sorted_list)):\n        if sorted_list[i] >= value:\n            return i\n    return len(sorted_list)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.5242718446601942,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                [
                    50.64327388212607,
                    -72.16612625583227,
                    95.25630303581863,
                    -75.73998556144497,
                    11.857449640680656,
                    90.05081633927793,
                    -90.20293226837086,
                    -12.02758648076636,
                    -35.964731488229475
                ],
                7
            ],
            "expected": 2,
            "got": 0
        }
    },
    {
        "task_id": "Mbpp/787",
        "specification": "Write a function that matches a string that has an a followed by three 'b'.",
        "generated_code": "import re\n\ndef text_match_three(text):\n    return bool(re.search(\"abbbb\", text))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/788",
        "specification": "Write a function to create a new tuple from the given string and list.",
        "generated_code": "def new_tuple(lst, str):\n    return tuple(lst + [str])\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/790",
        "specification": "Write a python function to check whether every even index contains even numbers of a given list.",
        "generated_code": "def even_position(lst):\n    return all(lst[i] % 2 == 0 for i in range(0, len(lst), 2))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.8558558558558559,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                [
                    2,
                    1,
                    4,
                    2,
                    6,
                    1,
                    8,
                    2,
                    10,
                    1,
                    12
                ]
            ],
            "expected": false,
            "got": true
        }
    },
    {
        "task_id": "Mbpp/791",
        "specification": "Write a function to remove tuples from the given tuple.",
        "generated_code": "def remove_nested(tup):\n    return tuple(x for x in tup if not isinstance(x, tuple))\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.1111111111111111,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "base",
            "input": [
                [
                    1,
                    5,
                    7,
                    [
                        4,
                        6
                    ],
                    10
                ]
            ],
            "expected": [
                1,
                5,
                7,
                [
                    4,
                    6
                ],
                10
            ],
            "got": [
                1,
                5,
                7,
                [
                    4,
                    6
                ],
                10
            ]
        }
    },
    {
        "task_id": "Mbpp/792",
        "specification": "Write a python function to count the number of lists in a given number of lists.",
        "generated_code": "def count_list(nested_list):\n    return len(nested_list)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.8608695652173913,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                [
                    2,
                    3,
                    [
                        4,
                        [
                            5,
                            [
                                6,
                                [
                                    7,
                                    [
                                        8,
                                        9
                                    ]
                                ]
                            ]
                        ]
                    ]
                ]
            ],
            "expected": 1,
            "got": 3
        }
    },
    {
        "task_id": "Mbpp/793",
        "specification": "Write a python function to find the last position of an element in a sorted array.",
        "generated_code": "def last(arr, target):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == target:\n            return i\n    return -1\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/794",
        "specification": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "generated_code": "import re\n\ndef text_starta_endb(text):\n    return bool(re.match(r'a.*b$', text))",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.8446601941747572,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                "xaabbyz1323ababb"
            ],
            "expected": true,
            "got": false
        }
    },
    {
        "task_id": "Mbpp/796",
        "specification": "Write function to find the sum of all items in the given dictionary.",
        "generated_code": "def return_sum(input_dict):\n  return sum(input_dict.values())\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/797",
        "specification": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
        "generated_code": "def sum_in_range(l, r):\n    return sum(i for i in range(l, r+1) if i % 2 != 0)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/798",
        "specification": "Write a python function to find the sum of an array.",
        "generated_code": "def _sum(arr):\n    return sum(arr)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/799",
        "specification": "Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.",
        "generated_code": "def left_rotate(n, d):\n    d = d % 32  # to handle cases where d is greater than 32\n    return (n << d) | (n >> (32 - d))\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/800",
        "specification": "Write a function to remove all whitespaces from a string.",
        "generated_code": "def remove_all_spaces(input_str):\n    return input_str.replace(\" \", \"\")\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/801",
        "specification": "Write a python function to count the number of equal numbers from three given integers.",
        "generated_code": "def test_three_equal(a, b, c):\n    counts = [a, b, c].count(a)\n    if counts == 1:\n        return 0\n    else:\n        return counts\n",
        "base_accuracy": 0.6666666666666666,
        "plus_accuracy": 0.8090909090909091,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                1,
                2,
                2
            ],
            "expected": 2,
            "got": 0
        }
    },
    {
        "task_id": "Mbpp/803",
        "specification": "Write a function to check whether the given number is a perfect square or not.",
        "generated_code": "import math\ndef is_perfect_square(n):\n    root = math.sqrt(n)\n    return root == int(root)\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 0.7547169811320755,
        "assertion_passed": true,
        "counterexample": {
            "test_type": "plus",
            "input": [
                -9
            ],
            "expected": false,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/804",
        "specification": "Write a function to check whether the product of numbers in a list is even or not.",
        "generated_code": "def is_product_even(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product % 2 == 0\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/805",
        "specification": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
        "generated_code": "def max_sum_list(lists):\n    return max(lists, key=sum)",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/806",
        "specification": "Write a function to find maximum run of uppercase characters in the given string.",
        "generated_code": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/807",
        "specification": "Write a python function to find the first odd number in a given list of numbers.",
        "generated_code": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/808",
        "specification": "Write a function to check if the given tuples contain the k or not.",
        "generated_code": "def check_K(tuple1, k):\n  return k in tuple1\n",
        "base_accuracy": 1.0,
        "plus_accuracy": 1.0,
        "assertion_passed": true,
        "counterexample": null
    },
    {
        "task_id": "Mbpp/809",
        "specification": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
        "generated_code": "def check_smaller(tup1, tup2):\n  return all(x < y for x, y in zip(tup1, tup2))\n",
        "base_accuracy": 0.0,
        "plus_accuracy": 0.9098360655737705,
        "assertion_passed": false,
        "counterexample": {
            "test_type": "base",
            "input": [
                [
                    1,
                    2,
                    3
                ],
                [
                    2,
                    3,
                    4
                ]
            ],
            "expected": false,
            "got": true
        }
    }
]