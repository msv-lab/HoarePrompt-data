[
    {
        "task_id": "Mbpp/567",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": true,
        "description": "Write a function to check whether a specified list is sorted or not.",
        "generated_code": "def issort_list(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/567",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": true,
        "description": "Write a function to check whether a specified list is sorted or not.",
        "generated_code": "def issort_list(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n# Test cases\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == False\nassert issort_list([1, 2, 4, 6, 8, 10, 15, 14, 20]) == False\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/744",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": true,
        "description": "Write a function to check if the given tuple has any none value or not.",
        "generated_code": "def check_none(tup):\n    return any(x is None for x in tup)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/744",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": true,
        "description": "Write a function to check if the given tuple has any none value or not.",
        "generated_code": "def check_none(tup):\n    for item in tup:\n        if item is None:\n            return True\n    return False\n\n# Test cases to validate the solution\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/741",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": false,
        "description": "Write a python function to check whether all the characters are same or not.",
        "generated_code": "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                ""
            ],
            "expected": true,
            "got": false
        }
    },
    {
        "task_id": "Mbpp/741",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": true,
        "description": "Write a python function to check whether all the characters are same or not.",
        "generated_code": "def all_Characters_Same(s):\n    if not s:  # If the string is empty, return True (edge case)\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True\n\n# Tests\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/722",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": false,
        "description": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "generated_code": "def filter_data(student_data, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in student_data.items() if height >= min_height and weight >= min_weight}\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                {
                    "Cierra Vega": [
                        6.2,
                        70
                    ],
                    "Alden Cantrell": [
                        5.9,
                        65
                    ],
                    "Kierra Gentry": [
                        6.0,
                        68
                    ],
                    "Pierre Cox": [
                        5.8,
                        66
                    ]
                },
                6.0,
                70
            ],
            "expected": {
                "Cierra Vega": [
                    6.2,
                    70
                ]
            },
            "got": {
                "Cierra Vega": [
                    6.2,
                    70
                ]
            }
        }
    },
    {
        "task_id": "Mbpp/722",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": false,
        "description": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "generated_code": "def filter_data(student_dict, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in student_dict.items() if height >= min_height and weight >= min_weight}\n\n# Test cases\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70) == {'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67) == {'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64) == {'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                {
                    "Cierra Vega": [
                        6.2,
                        70
                    ],
                    "Alden Cantrell": [
                        5.9,
                        65
                    ],
                    "Kierra Gentry": [
                        6.0,
                        68
                    ],
                    "Pierre Cox": [
                        5.8,
                        66
                    ]
                },
                6.0,
                70
            ],
            "expected": {
                "Cierra Vega": [
                    6.2,
                    70
                ]
            },
            "got": {
                "Cierra Vega": [
                    6.2,
                    70
                ]
            }
        }
    },
    {
        "task_id": "Mbpp/166",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": true,
        "description": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "generated_code": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/166",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": true,
        "description": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "generated_code": "def find_even_pair(lst):\n    even_count = sum(1 for x in lst if x % 2 == 0)\n    odd_count = len(lst) - even_count  # total count minus even count gives odd count\n\n    # Calculate the number of pairs that XOR to an even number\n    even_pairs = even_count * (even_count - 1) // 2\n    odd_pairs = odd_count * (odd_count - 1) // 2\n    \n    return even_pairs + odd_pairs\n\n# Test cases\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\nassert find_even_pair([1, 2, 3]) == 1\n",
        "counter_example": null
    }
]