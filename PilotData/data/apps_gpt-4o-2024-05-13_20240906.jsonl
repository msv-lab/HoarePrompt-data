{
    "task_id": "0000",
    "question": "An accordion is a string (yes, in the real world accordions are musical instruments, but let's forget about it for a while) which can be represented as a concatenation of: an opening bracket (ASCII code $091$), a colon (ASCII code $058$), some (possibly zero) vertical line characters (ASCII code $124$), another colon, and a closing bracket (ASCII code $093$). The length of the accordion is the number of characters in it.\n\nFor example, [::], [:||:] and [:|||:] are accordions having length $4$, $6$ and $7$. (:|:), {:||:}, [:], ]:||:[ are not accordions. \n\nYou are given a string $s$. You want to transform it into an accordion by removing some (possibly zero) characters from it. Note that you may not insert new characters or reorder existing ones. Is it possible to obtain an accordion by removing characters from $s$, and if so, what is the maximum possible length of the result?\n\n\n-----Input-----\n\nThe only line contains one string $s$ ($1 \\le |s| \\le 500000$). It consists of lowercase Latin letters and characters [, ], : and |.\n\n\n-----Output-----\n\nIf it is not possible to obtain an accordion by removing some characters from $s$, print $-1$. Otherwise print maximum possible length of the resulting accordion.\n\n\n-----Examples-----\nInput\n|[a:b:|]\n\nOutput\n4\n\nInput\n|]:[|:]\n\nOutput\n-1",
    "generated_code": "s = input()\nn = len(s)\nind = -1\nf = False\nfor i in range(n):\n    if s[i] == '[':\n        f = True\n    elif s[i] == ':':\n        if f:\n            ind = i\n            break\nbind = -1\nf = False\nfor i in range(n-1,-1,-1):\n    if s[i] == ']':\n        f = True\n    elif s[i] == ':':\n        if f:\n            bind = i\n            break\n# print(ind,bind)\nif ind == -1 or bind == -1:\n    print(-1)\nelif ind >= bind:\n    print(-1)\nelse:\n    ans = 4\n    for i in range(ind+1,bind):\n        if s[i] == '|':\n            ans += 1\n    print(ans)\n",
    "pass_rate": 1.0,
    "passed_tests": 565,
    "total_tests": 565
}
{
    "task_id": "0001",
    "question": "Anton has the integer x. He is interested what positive integer, which doesn't exceed x, has the maximum sum of digits.\n\nYour task is to help Anton and to find the integer that interests him. If there are several such integers, determine the biggest of them. \n\n\n-----Input-----\n\nThe first line contains the positive integer x (1 \u2264 x \u2264 10^18) \u2014 the integer which Anton has. \n\n\n-----Output-----\n\nPrint the positive integer which doesn't exceed x and has the maximum sum of digits. If there are several such integers, print the biggest of them. Printed integer must not contain leading zeros.\n\n\n-----Examples-----\nInput\n100\n\nOutput\n99\n\nInput\n48\n\nOutput\n48\n\nInput\n521\n\nOutput\n499",
    "generated_code": "def digit_sum(n):\n    return sum(int(d) for d in str(n))\n\nx = int(input())\n\n# To find the optimal number, let's first explore the direct value of x\nmax_sum = digit_sum(x)\nresult = x\n\n# We will also check numbers with the form of 999..9 which are closer to x\nfor i in range(len(str(x))):\n    # Create a number which is 'x' with the first non-zero digit decremented by 1\n    # and all subsequent digits set to 9\n    candidate = list(str(x))\n    if candidate[i] != '0':\n        candidate[i] = str(int(candidate[i]) - 1)\n        for j in range(i+1, len(candidate)):\n            candidate[j] = '9'\n        candidate = int(''.join(candidate))\n        current_sum = digit_sum(candidate)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = candidate\n        elif current_sum == max_sum:\n            result = max(result, candidate)\n\nprint(result)\n",
    "pass_rate": 1.0,
    "passed_tests": 278,
    "total_tests": 278
}
{
    "task_id": "0002",
    "question": "Apart from having lots of holidays throughout the year, residents of Berland also have whole lucky years. Year is considered lucky if it has no more than 1 non-zero digit in its number. So years 100, 40000, 5 are lucky and 12, 3001 and 12345 are not.\n\nYou are given current year in Berland. Your task is to find how long will residents of Berland wait till the next lucky year.\n\n\n-----Input-----\n\nThe first line contains integer number n (1 \u2264 n \u2264 10^9) \u2014 current year in Berland.\n\n\n-----Output-----\n\nOutput amount of years from the current year to the next lucky one.\n\n\n-----Examples-----\nInput\n4\n\nOutput\n1\n\nInput\n201\n\nOutput\n99\n\nInput\n4000\n\nOutput\n1000\n\n\n\n-----Note-----\n\nIn the first example next lucky year is 5. In the second one \u2014 300. In the third \u2014 5000.",
    "generated_code": "def is_lucky(year):\n    \"\"\"\n    Check if the given year is a lucky year.\n    A lucky year has no more than 1 non-zero digit.\n    \"\"\"\n    non_zero_digits = [digit for digit in str(year) if digit != '0']\n    return len(non_zero_digits) <= 1\n\ndef next_lucky_year(current_year):\n    \"\"\"\n    Find the next lucky year after the given current year.\n    \"\"\"\n    year = current_year + 1\n    while not is_lucky(year):\n        year += 1\n    return year\n\n# Read input\ncurrent_year = int(input())\n\n# Calculate the number of years to wait for the next lucky year\nnext_year = next_lucky_year(current_year)\nyears_to_wait = next_year - current_year\n\n# Output the result\nprint(years_to_wait)\n",
    "pass_rate": 0.9704797047970479,
    "passed_tests": 263,
    "total_tests": 271
}
{
    "task_id": "0003",
    "question": "You have a long fence which consists of $n$ sections. Unfortunately, it is not painted, so you decided to hire $q$ painters to paint it. $i$-th painter will paint all sections $x$ such that $l_i \\le x \\le r_i$.\n\nUnfortunately, you are on a tight budget, so you may hire only $q - 2$ painters. Obviously, only painters you hire will do their work.\n\nYou want to maximize the number of painted sections if you choose $q - 2$ painters optimally. A section is considered painted if at least one painter paints it.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($3 \\le n, q \\le 5000$) \u2014 the number of sections and the number of painters availible for hire, respectively.\n\nThen $q$ lines follow, each describing one of the painters: $i$-th line contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$).\n\n\n-----Output-----\n\nPrint one integer \u2014 maximum number of painted sections if you hire $q - 2$ painters.\n\n\n-----Examples-----\nInput\n7 5\n1 4\n4 5\n5 6\n6 7\n3 5\n\nOutput\n7\n\nInput\n4 3\n1 1\n2 2\n3 4\n\nOutput\n2\n\nInput\n4 4\n1 1\n2 2\n2 3\n3 4\n\nOutput\n3",
    "generated_code": "n, q = map(int, input().split())\npainters = [tuple(map(int, input().split())) for _ in range(q)]\n\n# Function to calculate the total painted sections with given painters\ndef calculate_painted_sections(painters):\n    painted = [0] * (n + 1)\n    for l, r in painters:\n        painted[l - 1] += 1\n        if r < n:\n            painted[r] -= 1\n    \n    total_painted = 0\n    current_paint = 0\n    for i in range(n):\n        current_paint += painted[i]\n        if current_paint > 0:\n            total_painted += 1\n    return total_painted\n\n# Calculate total painted sections with all painters\ntotal_painted_with_all = calculate_painted_sections(painters)\n\n# Function to calculate the sections painted by removing one painter\ndef calculate_with_one_removed(painters, remove_index):\n    new_painters = painters[:remove_index] + painters[remove_index + 1:]\n    return calculate_painted_sections(new_painters)\n\n# Calculate the sections painted by removing each painter\npainted_with_one_removed = [calculate_with_one_removed(painters, i) for i in range(q)]\n\n# Find the maximum sections painted by removing two painters\nmax_painted = 0\nfor i in range(q):\n    for j in range(i + 1, q):\n        new_painters = painters[:i] + painters[i + 1:j] + painters[j + 1:]\n        max_painted = max(max_painted, calculate_painted_sections(new_painters))\n\nprint(max_painted)\n",
    "pass_rate": 1.0,
    "passed_tests": 259,
    "total_tests": 259
}
{
    "task_id": "0004",
    "question": "Jamie loves sleeping. One day, he decides that he needs to wake up at exactly hh: mm. However, he hates waking up, so he wants to make waking up less painful by setting the alarm at a lucky time. He will then press the snooze button every x minutes until hh: mm is reached, and only then he will wake up. He wants to know what is the smallest number of times he needs to press the snooze button.\n\nA time is considered lucky if it contains a digit '7'. For example, 13: 07 and 17: 27 are lucky, while 00: 48 and 21: 34 are not lucky.\n\nNote that it is not necessary that the time set for the alarm and the wake-up time are on the same day. It is guaranteed that there is a lucky time Jamie can set so that he can wake at hh: mm.\n\nFormally, find the smallest possible non-negative integer y such that the time representation of the time x\u00b7y minutes before hh: mm contains the digit '7'.\n\nJamie uses 24-hours clock, so after 23: 59 comes 00: 00.\n\n\n-----Input-----\n\nThe first line contains a single integer x (1 \u2264 x \u2264 60).\n\nThe second line contains two two-digit integers, hh and mm (00 \u2264 hh \u2264 23, 00 \u2264 mm \u2264 59).\n\n\n-----Output-----\n\nPrint the minimum number of times he needs to press the button.\n\n\n-----Examples-----\nInput\n3\n11 23\n\nOutput\n2\n\nInput\n5\n01 07\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample, Jamie needs to wake up at 11:23. So, he can set his alarm at 11:17. He would press the snooze button when the alarm rings at 11:17 and at 11:20.\n\nIn the second sample, Jamie can set his alarm at exactly at 01:07 which is lucky.",
    "generated_code": "def is_lucky(hh, mm):\n    return '7' in f\"{hh:02d}{mm:02d}\"\n\ndef find_min_snoozes(x, hh, mm):\n    snoozes = 0\n    while not is_lucky(hh, mm):\n        mm -= x\n        if mm < 0:\n            mm += 60\n            hh -= 1\n            if hh < 0:\n                hh = 23\n        snoozes += 1\n    return snoozes\n\nif __name__ == \"__main__\":\n    x = int(input())\n    hh, mm = map(int, input().split())\n    print(find_min_snoozes(x, hh, mm))\n",
    "pass_rate": 1.0,
    "passed_tests": 254,
    "total_tests": 254
}
{
    "task_id": "0005",
    "question": "Luba is surfing the Internet. She currently has n opened tabs in her browser, indexed from 1 to n from left to right. The mouse cursor is currently located at the pos-th tab. Luba needs to use the tabs with indices from l to r (inclusive) for her studies, and she wants to close all the tabs that don't belong to this segment as fast as possible.\n\nEach second Luba can either try moving the cursor to the left or to the right (if the cursor is currently at the tab i, then she can move it to the tab max(i - 1, a) or to the tab min(i + 1, b)) or try closing all the tabs to the left or to the right of the cursor (if the cursor is currently at the tab i, she can close all the tabs with indices from segment [a, i - 1] or from segment [i + 1, b]). In the aforementioned expressions a and b denote the minimum and maximum index of an unclosed tab, respectively. For example, if there were 7 tabs initially and tabs 1, 2 and 7 are closed, then a = 3, b = 6.\n\nWhat is the minimum number of seconds Luba has to spend in order to leave only the tabs with initial indices from l to r inclusive opened?\n\n\n-----Input-----\n\nThe only line of input contains four integer numbers n, pos, l, r (1 \u2264 n \u2264 100, 1 \u2264 pos \u2264 n, 1 \u2264 l \u2264 r \u2264 n) \u2014 the number of the tabs, the cursor position and the segment which Luba needs to leave opened.\n\n\n-----Output-----\n\nPrint one integer equal to the minimum number of seconds required to close all the tabs outside the segment [l, r].\n\n\n-----Examples-----\nInput\n6 3 2 4\n\nOutput\n5\n\nInput\n6 3 1 3\n\nOutput\n1\n\nInput\n5 2 1 5\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first test Luba can do the following operations: shift the mouse cursor to the tab 2, close all the tabs to the left of it, shift the mouse cursor to the tab 3, then to the tab 4, and then close all the tabs to the right of it.\n\nIn the second test she only needs to close all the tabs to the right of the current position of the cursor.\n\nIn the third test Luba doesn't need to do anything.",
    "generated_code": "# Read input\nn, pos, l, r = map(int, input().split())\n\n# Initialize the minimum number of seconds to 0\nseconds = 0\n\n# Case when both l and r are within the range\nif l > 1 and r < n:\n    # Calculate the cost to close either left or right first and then move to the other side\n    close_left_first = abs(pos - l) + 1 + abs(r - l) + 1\n    close_right_first = abs(pos - r) + 1 + abs(r - l) + 1\n    seconds = min(close_left_first, close_right_first)\n# Case when only the right side needs to be closed\nelif l > 1:\n    seconds = abs(pos - l) + 1\n# Case when only the left side needs to be closed\nelif r < n:\n    seconds = abs(pos - r) + 1\n\n# If l <= 1 and r >= n, no tabs need to be closed\nprint(seconds)\n",
    "pass_rate": 1.0,
    "passed_tests": 229,
    "total_tests": 229
}
{
    "task_id": "0006",
    "question": "You are fighting with Zmei Gorynich \u2014 a ferocious monster from Slavic myths, a huge dragon-like reptile with multiple heads! \n\n $m$ \n\nInitially Zmei Gorynich has $x$ heads. You can deal $n$ types of blows. If you deal a blow of the $i$-th type, you decrease the number of Gorynich's heads by $min(d_i, curX)$, there $curX$ is the current number of heads. But if after this blow Zmei Gorynich has at least one head, he grows $h_i$ new heads. If $curX = 0$ then Gorynich is defeated. \n\nYou can deal each blow any number of times, in any order.\n\nFor example, if $curX = 10$, $d = 7$, $h = 10$ then the number of heads changes to $13$ (you cut $7$ heads off, but then Zmei grows $10$ new ones), but if $curX = 10$, $d = 11$, $h = 100$ then number of heads changes to $0$ and Zmei Gorynich is considered defeated.\n\nCalculate the minimum number of blows to defeat Zmei Gorynich!\n\nYou have to answer $t$ independent queries.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) \u2013 the number of queries.\n\nThe first line of each query contains two integers $n$ and $x$ ($1 \\le n \\le 100$, $1 \\le x \\le 10^9$) \u2014 the number of possible types of blows and the number of heads Zmei initially has, respectively.\n\nThe following $n$ lines of each query contain the descriptions of types of blows you can deal. The $i$-th line contains two integers $d_i$ and $h_i$ ($1 \\le d_i, h_i \\le 10^9$) \u2014 the description of the $i$-th blow.\n\n\n-----Output-----\n\nFor each query print the minimum number of blows you have to deal to defeat Zmei Gorynich. \n\nIf Zmei Gorynuch cannot be defeated print $-1$.\n\n\n-----Example-----\nInput\n3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n\nOutput\n2\n3\n-1\n\n\n\n-----Note-----\n\nIn the first query you can deal the first blow (after that the number of heads changes to $10 - 6 + 3 = 7$), and then deal the second blow.\n\nIn the second query you just deal the first blow three times, and Zmei is defeated. \n\nIn third query you can not defeat Zmei Gorynich. Maybe it's better to convince it to stop fighting?",
    "generated_code": "def min_blows_to_defeat(t, queries):\n    results = []\n    \n    for query in queries:\n        n, x = query[0]\n        blows = query[1]\n        \n        max_d_minus_h = -1\n        max_d = -1\n        \n        for d, h in blows:\n            if d > max_d:\n                max_d = d\n            if d - h > max_d_minus_h:\n                max_d_minus_h = d - h\n        \n        if max_d >= x:\n            results.append(1)\n            continue\n        \n        if max_d_minus_h <= 0:\n            results.append(-1)\n            continue\n        \n        remaining_heads = x - max_d\n        blows_needed = (remaining_heads + max_d_minus_h - 1) // max_d_minus_h + 1\n        results.append(blows_needed)\n    \n    return results\n\n\n# Reading input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nt = int(data[0])\nindex = 1\nqueries = []\n\nfor _ in range(t):\n    n = int(data[index])\n    x = int(data[index + 1])\n    blows = []\n    \n    for i in range(n):\n        d = int(data[index + 2 + 2 * i])\n        h = int(data[index + 3 + 2 * i])\n        blows.append((d, h))\n        \n    queries.append(((n, x), blows))\n    index += 2 + 2 * n\n\nresults = min_blows_to_defeat(t, queries)\nfor result in results:\n    print(result)\n",
    "pass_rate": 1.0,
    "passed_tests": 224,
    "total_tests": 224
}
{
    "task_id": "0007",
    "question": "Anton likes to listen to fairy tales, especially when Danik, Anton's best friend, tells them. Right now Danik tells Anton a fairy tale:\n\n\"Once upon a time, there lived an emperor. He was very rich and had much grain. One day he ordered to build a huge barn to put there all his grain. Best builders were building that barn for three days and three nights. But they overlooked and there remained a little hole in the barn, from which every day sparrows came through. Here flew a sparrow, took a grain and flew away...\"\n\nMore formally, the following takes place in the fairy tale. At the beginning of the first day the barn with the capacity of n grains was full. Then, every day (starting with the first day) the following happens:  m grains are brought to the barn. If m grains doesn't fit to the barn, the barn becomes full and the grains that doesn't fit are brought back (in this problem we can assume that the grains that doesn't fit to the barn are not taken into account).  Sparrows come and eat grain. In the i-th day i sparrows come, that is on the first day one sparrow come, on the second day two sparrows come and so on. Every sparrow eats one grain. If the barn is empty, a sparrow eats nothing. \n\nAnton is tired of listening how Danik describes every sparrow that eats grain from the barn. Anton doesn't know when the fairy tale ends, so he asked you to determine, by the end of which day the barn will become empty for the first time. Help Anton and write a program that will determine the number of that day!\n\n\n-----Input-----\n\nThe only line of the input contains two integers n and m (1 \u2264 n, m \u2264 10^18)\u00a0\u2014 the capacity of the barn and the number of grains that are brought every day.\n\n\n-----Output-----\n\nOutput one integer\u00a0\u2014 the number of the day when the barn will become empty for the first time. Days are numbered starting with one.\n\n\n-----Examples-----\nInput\n5 2\n\nOutput\n4\n\nInput\n8 1\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first sample the capacity of the barn is five grains and two grains are brought every day. The following happens:  At the beginning of the first day grain is brought to the barn. It's full, so nothing happens.  At the end of the first day one sparrow comes and eats one grain, so 5 - 1 = 4 grains remain.  At the beginning of the second day two grains are brought. The barn becomes full and one grain doesn't fit to it.  At the end of the second day two sparrows come. 5 - 2 = 3 grains remain.  At the beginning of the third day two grains are brought. The barn becomes full again.  At the end of the third day three sparrows come and eat grain. 5 - 3 = 2 grains remain.  At the beginning of the fourth day grain is brought again. 2 + 2 = 4 grains remain.  At the end of the fourth day four sparrows come and eat grain. 4 - 4 = 0 grains remain. The barn is empty. \n\nSo the answer is 4, because by the end of the fourth day the barn becomes empty.",
    "generated_code": "n, m = map(int, input().split())\n\nday = 0\nwhile n > 0:\n    day += 1\n    n += m  # Grains brought to the barn\n    n -= day  # Sparrows eat grains\n\nprint(day)\n",
    "pass_rate": 0.02242152466367713,
    "passed_tests": 5,
    "total_tests": 223
}
{
    "task_id": "0008",
    "question": "Tokitsukaze is playing a game derivated from Japanese mahjong. In this game, she has three tiles in her hand. Each tile she owns is a suited tile, which means it has a suit (manzu, pinzu or souzu) and a number (a digit ranged from $1$ to $9$). In this problem, we use one digit and one lowercase letter, which is the first character of the suit, to represent a suited tile. All possible suited tiles are represented as 1m, 2m, $\\ldots$, 9m, 1p, 2p, $\\ldots$, 9p, 1s, 2s, $\\ldots$, 9s.\n\nIn order to win the game, she must have at least one mentsu (described below) in her hand, so sometimes she should draw extra suited tiles. After drawing a tile, the number of her tiles increases by one. She can draw any tiles she wants, including those already in her hand.\n\nDo you know the minimum number of extra suited tiles she needs to draw so that she can win?\n\nHere are some useful definitions in this game:  A mentsu, also known as meld, is formed by a koutsu or a shuntsu;  A koutsu, also known as triplet, is made of three identical tiles, such as [1m, 1m, 1m], however, [1m, 1p, 1s] or [1m, 4m, 7m] is NOT a koutsu;  A shuntsu, also known as sequence, is made of three sequential numbered tiles in the same suit, such as [1m, 2m, 3m] and [5s, 7s, 6s], however, [9m, 1m, 2m] or [1m, 2p, 3s] is NOT a shuntsu. \n\nSome examples:   [2m, 3p, 2s, 4m, 1s, 2s, 4s] \u2014 it contains no koutsu or shuntsu, so it includes no mentsu;  [4s, 3m, 3p, 4s, 5p, 4s, 5p] \u2014 it contains a koutsu, [4s, 4s, 4s], but no shuntsu, so it includes a mentsu;  [5p, 5s, 9m, 4p, 1s, 7p, 7m, 6p] \u2014 it contains no koutsu but a shuntsu, [5p, 4p, 6p] or [5p, 7p, 6p], so it includes a mentsu. \n\nNote that the order of tiles is unnecessary and you can assume the number of each type of suited tiles she can draw is infinite.\n\n\n-----Input-----\n\nThe only line contains three strings\u00a0\u2014 the tiles in Tokitsukaze's hand. For each string, the first character is a digit ranged from $1$ to $9$ and the second character is m, p or s.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of extra suited tiles she needs to draw.\n\n\n-----Examples-----\nInput\n1s 2s 3s\n\nOutput\n0\n\nInput\n9m 9m 9m\n\nOutput\n0\n\nInput\n3p 9m 2p\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example, Tokitsukaze already has a shuntsu.\n\nIn the second example, Tokitsukaze already has a koutsu.\n\nIn the third example, Tokitsukaze can get a shuntsu by drawing one suited tile\u00a0\u2014 1p or 4p. The resulting tiles will be [3p, 9m, 2p, 1p] or [3p, 9m, 2p, 4p].",
    "generated_code": "def min_extra_tiles_needed(tiles):\n    def is_koutsu(tiles):\n        return tiles[0] == tiles[1] == tiles[2]\n    \n    def is_shuntsu(tiles):\n        tiles.sort()\n        return tiles[0][1] == tiles[1][1] == tiles[2][1] and int(tiles[2][0]) == int(tiles[1][0]) + 1 == int(tiles[0][0]) + 2\n    \n    def one_tile_away(tiles):\n        # Check pairs for potential koutsu\n        if tiles[0] == tiles[1] or tiles[0] == tiles[2] or tiles[1] == tiles[2]:\n            return True\n        \n        # Check pairs for potential shuntsu\n        tiles.sort()\n        if tiles[0][1] == tiles[1][1] and (int(tiles[1][0]) == int(tiles[0][0]) + 1 or int(tiles[1][0]) == int(tiles[0][0]) + 2):\n            return True\n        if tiles[0][1] == tiles[2][1] and (int(tiles[2][0]) == int(tiles[0][0]) + 1 or int(tiles[2][0]) == int(tiles[0][0]) + 2):\n            return True\n        if tiles[1][1] == tiles[2][1] and (int(tiles[2][0]) == int(tiles[1][0]) + 1 or int(tiles[2][0]) == int(tiles[1][0]) + 2):\n            return True\n        \n        return False\n    \n    if is_koutsu(tiles) or is_shuntsu(tiles):\n        return 0\n    elif one_tile_away(tiles):\n        return 1\n    else:\n        return 2\n\n# Read input\ntiles = input().split()\nprint(min_extra_tiles_needed(tiles))\n",
    "pass_rate": 1.0,
    "passed_tests": 213,
    "total_tests": 213
}
{
    "task_id": "0009",
    "question": "Yet another round on DecoForces is coming! Grandpa Maks wanted to participate in it but someone has stolen his precious sofa! And how can one perform well with such a major loss?\n\nFortunately, the thief had left a note for Grandpa Maks. This note got Maks to the sofa storehouse. Still he had no idea which sofa belongs to him as they all looked the same!\n\nThe storehouse is represented as matrix n \u00d7 m. Every sofa takes two neighbouring by some side cells. No cell is covered by more than one sofa. There can be empty cells.\n\nSofa A is standing to the left of sofa B if there exist two such cells a and b that x_{a} < x_{b}, a is covered by A and b is covered by B. Sofa A is standing to the top of sofa B if there exist two such cells a and b that y_{a} < y_{b}, a is covered by A and b is covered by B. Right and bottom conditions are declared the same way. \n\nNote that in all conditions A \u2260 B. Also some sofa A can be both to the top of another sofa B and to the bottom of it. The same is for left and right conditions.\n\nThe note also stated that there are cnt_{l} sofas to the left of Grandpa Maks's sofa, cnt_{r} \u2014 to the right, cnt_{t} \u2014 to the top and cnt_{b} \u2014 to the bottom.\n\nGrandpa Maks asks you to help him to identify his sofa. It is guaranteed that there is no more than one sofa of given conditions.\n\nOutput the number of Grandpa Maks's sofa. If there is no such sofa that all the conditions are met for it then output -1.\n\n\n-----Input-----\n\nThe first line contains one integer number d (1 \u2264 d \u2264 10^5) \u2014 the number of sofas in the storehouse.\n\nThe second line contains two integer numbers n, m (1 \u2264 n, m \u2264 10^5) \u2014 the size of the storehouse.\n\nNext d lines contains four integer numbers x_1, y_1, x_2, y_2 (1 \u2264 x_1, x_2 \u2264 n, 1 \u2264 y_1, y_2 \u2264 m) \u2014 coordinates of the i-th sofa. It is guaranteed that cells (x_1, y_1) and (x_2, y_2) have common side, (x_1, y_1)  \u2260  (x_2, y_2) and no cell is covered by more than one sofa.\n\nThe last line contains four integer numbers cnt_{l}, cnt_{r}, cnt_{t}, cnt_{b} (0 \u2264 cnt_{l}, cnt_{r}, cnt_{t}, cnt_{b} \u2264 d - 1).\n\n\n-----Output-----\n\nPrint the number of the sofa for which all the conditions are met. Sofas are numbered 1 through d as given in input. If there is no such sofa then print -1.\n\n\n-----Examples-----\nInput\n2\n3 2\n3 1 3 2\n1 2 2 2\n1 0 0 1\n\nOutput\n1\n\nInput\n3\n10 10\n1 2 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0\n\nOutput\n2\n\nInput\n2\n2 2\n2 1 1 1\n1 2 2 2\n1 0 0 0\n\nOutput\n-1\n\n\n\n-----Note-----\n\nLet's consider the second example.   The first sofa has 0 to its left, 2 sofas to its right ((1, 1) is to the left of both (5, 5) and (5, 4)), 0 to its top and 2 to its bottom (both 2nd and 3rd sofas are below).  The second sofa has cnt_{l} = 2, cnt_{r} = 1, cnt_{t} = 2 and cnt_{b} = 0.  The third sofa has cnt_{l} = 2, cnt_{r} = 1, cnt_{t} = 1 and cnt_{b} = 1. \n\nSo the second one corresponds to the given conditions.\n\nIn the third example   The first sofa has cnt_{l} = 1, cnt_{r} = 1, cnt_{t} = 0 and cnt_{b} = 1.  The second sofa has cnt_{l} = 1, cnt_{r} = 1, cnt_{t} = 1 and cnt_{b} = 0. \n\nAnd there is no sofa with the set (1, 0, 0, 0) so the answer is -1.",
    "generated_code": "def find_grandpa_maks_sofa():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    d = int(data[0])\n    n, m = int(data[1]), int(data[2])\n    \n    sofas = []\n    for i in range(d):\n        x1, y1, x2, y2 = int(data[3 + 4 * i]), int(data[4 + 4 * i]), int(data[5 + 4 * i]), int(data[6 + 4 * i])\n        sofas.append((x1, y1, x2, y2))\n    \n    cnt_l, cnt_r, cnt_t, cnt_b = int(data[-4]), int(data[-3]), int(data[-2]), int(data[-1])\n    \n    left_count = [0] * d\n    right_count = [0] * d\n    top_count = [0] * d\n    bottom_count = [0] * d\n    \n    for i in range(d):\n        for j in range(d):\n            if i != j:\n                if sofas[i][0] < sofas[j][0] or sofas[i][2] < sofas[j][2]:\n                    right_count[i] += 1\n                if sofas[i][0] > sofas[j][0] or sofas[i][2] > sofas[j][2]:\n                    left_count[i] += 1\n                if sofas[i][1] < sofas[j][1] or sofas[i][3] < sofas[j][3]:\n                    bottom_count[i] += 1\n                if sofas[i][1] > sofas[j][1] or sofas[i][3] > sofas[j][3]:\n                    top_count[i] += 1\n    \n    for i in range(d):\n        if left_count[i] == cnt_l and right_count[i] == cnt_r and top_count[i] == cnt_t and bottom_count[i] == cnt_b:\n            print(i + 1)\n            return\n    \n    print(-1)\n\nfind_grandpa_maks_sofa()\n",
    "pass_rate": 0.926829268292683,
    "passed_tests": 190,
    "total_tests": 205
}
{
    "task_id": "0010",
    "question": "On the planet Mars a year lasts exactly n days (there are no leap years on Mars). But Martians have the same weeks as earthlings\u00a0\u2014 5 work days and then 2 days off. Your task is to determine the minimum possible and the maximum possible number of days off per year on Mars.\n\n\n-----Input-----\n\nThe first line of the input contains a positive integer n (1 \u2264 n \u2264 1 000 000)\u00a0\u2014 the number of days in a year on Mars.\n\n\n-----Output-----\n\nPrint two integers\u00a0\u2014 the minimum possible and the maximum possible number of days off per year on Mars.\n\n\n-----Examples-----\nInput\n14\n\nOutput\n4 4\n\nInput\n2\n\nOutput\n0 2\n\n\n\n-----Note-----\n\nIn the first sample there are 14 days in a year on Mars, and therefore independently of the day a year starts with there will be exactly 4 days off .\n\nIn the second sample there are only 2 days in a year on Mars, and they can both be either work days or days off.",
    "generated_code": "n = int(input())\n\n# Calculate full weeks and remaining days\nfull_weeks = n // 7\nremaining_days = n % 7\n\n# Minimum days off: full weeks * 2 + extra days off in incomplete week\nmin_days_off = full_weeks * 2\nif remaining_days > 5:\n    min_days_off += remaining_days - 5\n\n# Maximum days off: full weeks * 2 + remaining days (if remaining days <= 2)\nmax_days_off = full_weeks * 2 + min(remaining_days, 2)\n\nprint(min_days_off, max_days_off)\n",
    "pass_rate": 1.0,
    "passed_tests": 198,
    "total_tests": 198
}
{
    "task_id": "0011",
    "question": "Little Joty has got a task to do. She has a line of n tiles indexed from 1 to n. She has to paint them in a strange pattern.\n\nAn unpainted tile should be painted Red if it's index is divisible by a and an unpainted tile should be painted Blue if it's index is divisible by b. So the tile with the number divisible by a and b can be either painted Red or Blue.\n\nAfter her painting is done, she will get p chocolates for each tile that is painted Red and q chocolates for each tile that is painted Blue.\n\nNote that she can paint tiles in any order she wants.\n\nGiven the required information, find the maximum\u00a0number of chocolates Joty can get.\n\n\n-----Input-----\n\nThe only line contains five integers n, a, b, p and q (1 \u2264 n, a, b, p, q \u2264 10^9).\n\n\n-----Output-----\n\nPrint the only integer s \u2014 the maximum number of chocolates Joty can get.\n\nNote that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.\n\n\n-----Examples-----\nInput\n5 2 3 12 15\n\nOutput\n39\n\nInput\n20 2 3 3 5\n\nOutput\n51",
    "generated_code": "import math\n\ndef lcm(x, y):\n    return (x * y) // math.gcd(x, y)\n\n# Read the input\nn, a, b, p, q = map(int, input().split())\n\n# Calculate the counts\ncount_red = n // a\ncount_blue = n // b\ncount_both = n // lcm(a, b)\n\n# Calculate the maximum chocolates\nmax_chocolates = count_red * p + count_blue * q - count_both * min(p, q)\n\n# Output the result\nprint(max_chocolates)\n",
    "pass_rate": 1.0,
    "passed_tests": 185,
    "total_tests": 185
}
{
    "task_id": "0012",
    "question": "Vova has won $n$ trophies in different competitions. Each trophy is either golden or silver. The trophies are arranged in a row.\n\nThe beauty of the arrangement is the length of the longest subsegment consisting of golden trophies. Vova wants to swap two trophies (not necessarily adjacent ones) to make the arrangement as beautiful as possible \u2014 that means, to maximize the length of the longest such subsegment.\n\nHelp Vova! Tell him the maximum possible beauty of the arrangement if he is allowed to do at most one swap.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($2 \\le n \\le 10^5$) \u2014 the number of trophies.\n\nThe second line contains $n$ characters, each of them is either G or S. If the $i$-th character is G, then the $i$-th trophy is a golden one, otherwise it's a silver trophy. \n\n\n-----Output-----\n\nPrint the maximum possible length of a subsegment of golden trophies, if Vova is allowed to do at most one swap.\n\n\n-----Examples-----\nInput\n10\nGGGSGGGSGG\n\nOutput\n7\n\nInput\n4\nGGGG\n\nOutput\n4\n\nInput\n3\nSSS\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example Vova has to swap trophies with indices $4$ and $10$. Thus he will obtain the sequence \"GGGGGGGSGS\", the length of the longest subsegment of golden trophies is $7$. \n\nIn the second example Vova can make no swaps at all. The length of the longest subsegment of golden trophies in the sequence is $4$. \n\nIn the third example Vova cannot do anything to make the length of the longest subsegment of golden trophies in the sequence greater than $0$.",
    "generated_code": "def max_beauty_after_swap(n, trophies):\n    if n == 0:\n        return 0\n    \n    segments = []\n    current_length = 0\n    \n    for char in trophies:\n        if char == 'G':\n            current_length += 1\n        else:\n            if current_length > 0:\n                segments.append(current_length)\n            current_length = 0\n    \n    if current_length > 0:\n        segments.append(current_length)\n    \n    if not segments:\n        return 0\n    \n    max_length = max(segments)\n    \n    if len(segments) == 1:\n        if 'S' in trophies:\n            return max_length + 1\n        return max_length\n    \n    for i in range(len(segments) - 1):\n        if trophies[trophies.index('G' * segments[i]) + segments[i]] == 'S' and trophies[trophies.rindex('G' * segments[i+1]) - 1] == 'S':\n            max_length = max(max_length, segments[i] + segments[i+1] + 1)\n    \n    return max_length + (1 if trophies.count('G') < n else 0)\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    trophies = input().strip()\n    print(max_beauty_after_swap(n, trophies))\n",
    "pass_rate": 0.06043956043956044,
    "passed_tests": 11,
    "total_tests": 182
}
{
    "task_id": "0013",
    "question": "Now you can take online courses in the Berland State University! Polycarp needs to pass k main online courses of his specialty to get a diploma. In total n courses are availiable for the passage.\n\nThe situation is complicated by the dependence of online courses, for each course there is a list of those that must be passed before starting this online course (the list can be empty, it means that there is no limitation).\n\nHelp Polycarp to pass the least number of courses in total to get the specialty (it means to pass all main and necessary courses). Write a program which prints the order of courses. \n\nPolycarp passes courses consistently, he starts the next course when he finishes the previous one. Each course can't be passed more than once. \n\n\n-----Input-----\n\nThe first line contains n and k (1 \u2264 k \u2264 n \u2264 10^5) \u2014 the number of online-courses and the number of main courses of Polycarp's specialty. \n\nThe second line contains k distinct integers from 1 to n \u2014 numbers of main online-courses of Polycarp's specialty. \n\nThen n lines follow, each of them describes the next course: the i-th of them corresponds to the course i. Each line starts from the integer t_{i} (0 \u2264 t_{i} \u2264 n - 1) \u2014 the number of courses on which the i-th depends. Then there follows the sequence of t_{i} distinct integers from 1 to n \u2014 numbers of courses in random order, on which the i-th depends. It is guaranteed that no course can depend on itself. \n\nIt is guaranteed that the sum of all values t_{i} doesn't exceed 10^5. \n\n\n-----Output-----\n\nPrint -1, if there is no the way to get a specialty. \n\nOtherwise, in the first line print the integer m \u2014 the minimum number of online-courses which it is necessary to pass to get a specialty. In the second line print m distinct integers \u2014 numbers of courses which it is necessary to pass in the chronological order of their passage. If there are several answers it is allowed to print any of them.\n\n\n-----Examples-----\nInput\n6 2\n5 3\n0\n0\n0\n2 2 1\n1 4\n1 5\n\nOutput\n5\n1 2 3 4 5 \n\nInput\n9 3\n3 9 5\n0\n0\n3 9 4 5\n0\n0\n1 8\n1 6\n1 2\n2 1 2\n\nOutput\n6\n1 2 9 4 5 3 \n\nInput\n3 3\n1 2 3\n1 2\n1 3\n1 1\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first test firstly you can take courses number 1 and 2, after that you can take the course number 4, then you can take the course number 5, which is the main. After that you have to take only the course number 3, which is the last not passed main course.",
    "generated_code": "def main():\n    import sys\n    input = sys.stdin.read\n    from collections import deque, defaultdict\n    \n    data = input().split()\n    \n    index = 0\n    n = int(data[index])\n    k = int(data[index + 1])\n    index += 2\n    \n    main_courses = list(map(int, data[index:index + k]))\n    index += k\n    \n    prerequisites = defaultdict(list)\n    in_degree = [0] * (n + 1)\n    \n    for course in range(1, n + 1):\n        t_i = int(data[index])\n        index += 1\n        for _ in range(t_i):\n            prereq = int(data[index])\n            index += 1\n            prerequisites[prereq].append(course)\n            in_degree[course] += 1\n    \n    queue = deque()\n    for course in range(1, n + 1):\n        if in_degree[course] == 0:\n            queue.append(course)\n    \n    topo_order = []\n    while queue:\n        course = queue.popleft()\n        topo_order.append(course)\n        for next_course in prerequisites[course]:\n            in_degree[next_course] -= 1\n            if in_degree[next_course] == 0:\n                queue.append(next_course)\n    \n    if len(topo_order) != n:\n        print(-1)\n        return\n    \n    required_courses = set()\n    course_position = {course: i for i, course in enumerate(topo_order)}\n    \n    def dfs(course):\n        if course in required_courses:\n            return\n        required_courses.add(course)\n        for pre_course in prerequisites[course]:\n            dfs(pre_course)\n    \n    for course in main_courses:\n        dfs(course)\n    \n    result = sorted(required_courses, key=lambda x: course_position[x])\n    print(len(result))\n    print(\" \".join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n",
    "pass_rate": 0.4230769230769231,
    "passed_tests": 77,
    "total_tests": 182
}
{
    "task_id": "0014",
    "question": "Let's suppose you have an array a, a stack s (initially empty) and an array b (also initially empty).\n\nYou may perform the following operations until both a and s are empty:\n\n  Take the first element of a, push it into s and remove it from a (if a is not empty);  Take the top element from s, append it to the end of array b and remove it from s (if s is not empty). \n\nYou can perform these operations in arbitrary order.\n\nIf there exists a way to perform the operations such that array b is sorted in non-descending order in the end, then array a is called stack-sortable.\n\nFor example, [3, 1, 2] is stack-sortable, because b will be sorted if we perform the following operations:\n\n  Remove 3 from a and push it into s;  Remove 1 from a and push it into s;  Remove 1 from s and append it to the end of b;  Remove 2 from a and push it into s;  Remove 2 from s and append it to the end of b;  Remove 3 from s and append it to the end of b. \n\nAfter all these operations b = [1, 2, 3], so [3, 1, 2] is stack-sortable. [2, 3, 1] is not stack-sortable.\n\nYou are given k first elements of some permutation p of size n (recall that a permutation of size n is an array of size n where each integer from 1 to n occurs exactly once). You have to restore the remaining n - k elements of this permutation so it is stack-sortable. If there are multiple answers, choose the answer such that p is lexicographically maximal (an array q is lexicographically greater than an array p iff there exists some integer k such that for every i < k q_{i} = p_{i}, and q_{k} > p_{k}). You may not swap or change any of first k elements of the permutation.\n\nPrint the lexicographically maximal permutation p you can obtain.\n\nIf there exists no answer then output -1.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (2 \u2264 n \u2264 200000, 1 \u2264 k < n) \u2014 the size of a desired permutation, and the number of elements you are given, respectively.\n\nThe second line contains k integers p_1, p_2, ..., p_{k} (1 \u2264 p_{i} \u2264 n) \u2014 the first k elements of p. These integers are pairwise distinct.\n\n\n-----Output-----\n\nIf it is possible to restore a stack-sortable permutation p of size n such that the first k elements of p are equal to elements given in the input, print lexicographically maximal such permutation.\n\nOtherwise print -1.\n\n\n-----Examples-----\nInput\n5 3\n3 2 1\n\nOutput\n3 2 1 5 4 \nInput\n5 3\n2 3 1\n\nOutput\n-1\n\nInput\n5 1\n3\n\nOutput\n3 2 1 5 4 \nInput\n5 2\n3 4\n\nOutput\n-1",
    "generated_code": "def is_stack_sortable(n, k, initial_elements):\n    # Remaining elements to consider from n to 1\n    remaining = set(range(1, n + 1)) - set(initial_elements)\n    remaining = sorted(remaining, reverse=True)\n    \n    stack = []\n    b = []\n    \n    # Index for remaining elements\n    idx = 0\n    \n    # Process the k initial elements\n    for num in initial_elements:\n        stack.append(num)\n        while stack and (not b or stack[-1] == b[-1] + 1):\n            b.append(stack.pop())\n\n    # Process the remaining elements\n    while idx < len(remaining):\n        stack.append(remaining[idx])\n        idx += 1\n        while stack and (not b or stack[-1] == b[-1] + 1):\n            b.append(stack.pop())\n    \n    if len(b) == n:\n        return ' '.join(map(str, initial_elements + remaining))\n    else:\n        return -1\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nk = int(data[1])\ninitial_elements = list(map(int, data[2:2+k]))\n\nresult = is_stack_sortable(n, k, initial_elements)\nprint(result)\n",
    "pass_rate": 0.5082872928176796,
    "passed_tests": 92,
    "total_tests": 181
}
{
    "task_id": "0015",
    "question": "Vasya likes everything infinite. Now he is studying the properties of a sequence s, such that its first element is equal to a (s_1 = a), and the difference between any two neighbouring elements is equal to c (s_{i} - s_{i} - 1 = c). In particular, Vasya wonders if his favourite integer b appears in this sequence, that is, there exists a positive integer i, such that s_{i} = b. Of course, you are the person he asks for a help.\n\n\n-----Input-----\n\nThe first line of the input contain three integers a, b and c ( - 10^9 \u2264 a, b, c \u2264 10^9)\u00a0\u2014 the first element of the sequence, Vasya's favorite number and the difference between any two neighbouring elements of the sequence, respectively.\n\n\n-----Output-----\n\nIf b appears in the sequence s print \"YES\" (without quotes), otherwise print \"NO\" (without quotes).\n\n\n-----Examples-----\nInput\n1 7 3\n\nOutput\nYES\n\nInput\n10 10 0\n\nOutput\nYES\n\nInput\n1 -4 5\n\nOutput\nNO\n\nInput\n0 60 50\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first sample, the sequence starts from integers 1, 4, 7, so 7 is its element.\n\nIn the second sample, the favorite integer of Vasya is equal to the first element of the sequence.\n\nIn the third sample all elements of the sequence are greater than Vasya's favorite integer.\n\nIn the fourth sample, the sequence starts from 0, 50, 100, and all the following elements are greater than Vasya's favorite integer.",
    "generated_code": "a, b, c = map(int, input().split())\n\nif c == 0:\n    if a == b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelse:\n    if (b - a) % c == 0 and (b - a) // c >= 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
    "pass_rate": 1.0,
    "passed_tests": 178,
    "total_tests": 178
}
{
    "task_id": "0016",
    "question": "A string is called bracket sequence if it does not contain any characters other than \"(\" and \")\". A bracket sequence is called regular if it it is possible to obtain correct arithmetic expression by inserting characters \"+\" and \"1\" into this sequence. For example, \"\", \"(())\" and \"()()\" are regular bracket sequences; \"))\" and \")((\" are bracket sequences (but not regular ones), and \"(a)\" and \"(1)+(1)\" are not bracket sequences at all.\n\nYou have a number of strings; each string is a bracket sequence of length $2$. So, overall you have $cnt_1$ strings \"((\", $cnt_2$ strings \"()\", $cnt_3$ strings \")(\" and $cnt_4$ strings \"))\". You want to write all these strings in some order, one after another; after that, you will get a long bracket sequence of length $2(cnt_1 + cnt_2 + cnt_3 + cnt_4)$. You wonder: is it possible to choose some order of the strings you have such that you will get a regular bracket sequence? Note that you may not remove any characters or strings, and you may not add anything either.\n\n\n-----Input-----\n\nThe input consists of four lines, $i$-th of them contains one integer $cnt_i$ ($0 \\le cnt_i \\le 10^9$).\n\n\n-----Output-----\n\nPrint one integer: $1$ if it is possible to form a regular bracket sequence by choosing the correct order of the given strings, $0$ otherwise.\n\n\n-----Examples-----\nInput\n3\n1\n4\n3\n\nOutput\n1\n\nInput\n0\n0\n0\n0\n\nOutput\n1\n\nInput\n1\n2\n3\n4\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example it is possible to construct a string \"(())()(()((()()()())))\", which is a regular bracket sequence.\n\nIn the second example it is possible to construct a string \"\", which is a regular bracket sequence.",
    "generated_code": "# Read input values\ncnt1 = int(input())\ncnt2 = int(input())\ncnt3 = int(input())\ncnt4 = int(input())\n\n# To form a regular bracket sequence, the number of opening brackets must be equal to the number of closing brackets\n# and at every point in the sequence from left to right, the number of closing brackets should not exceed the number of opening brackets\n# The count of opening brackets is cnt1 + cnt2 and the count of closing brackets is cnt3 + cnt4\n\n# Check if the counts match\nif cnt1 + cnt2 != cnt3 + cnt4:\n    print(0)\nelse:\n    # Check for the feasibility of constructing a valid sequence\n    if cnt3 == 0 or cnt2 > 0:\n        print(1)\n    else:\n        print(0)\n",
    "pass_rate": 0.47398843930635837,
    "passed_tests": 82,
    "total_tests": 173
}
{
    "task_id": "0017",
    "question": "Arpa is researching the Mexican wave.\n\nThere are n spectators in the stadium, labeled from 1 to n. They start the Mexican wave at time 0. \n\n  At time 1, the first spectator stands.  At time 2, the second spectator stands.  ...  At time k, the k-th spectator stands.  At time k + 1, the (k + 1)-th spectator stands and the first spectator sits.  At time k + 2, the (k + 2)-th spectator stands and the second spectator sits.  ...  At time n, the n-th spectator stands and the (n - k)-th spectator sits.  At time n + 1, the (n + 1 - k)-th spectator sits.  ...  At time n + k, the n-th spectator sits. \n\nArpa wants to know how many spectators are standing at time t.\n\n\n-----Input-----\n\nThe first line contains three integers n, k, t (1 \u2264 n \u2264 10^9, 1 \u2264 k \u2264 n, 1 \u2264 t < n + k).\n\n\n-----Output-----\n\nPrint single integer: how many spectators are standing at time t.\n\n\n-----Examples-----\nInput\n10 5 3\n\nOutput\n3\n\nInput\n10 5 7\n\nOutput\n5\n\nInput\n10 5 12\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the following a sitting spectator is represented as -, a standing spectator is represented as ^.\n\n  At t = 0\u2002 ---------- $\\Rightarrow$ number of standing spectators = 0.  At t = 1\u2002 ^--------- $\\Rightarrow$ number of standing spectators = 1.  At t = 2\u2002 ^^-------- $\\Rightarrow$ number of standing spectators = 2.  At t = 3\u2002 ^^^------- $\\Rightarrow$ number of standing spectators = 3.  At t = 4\u2002 ^^^^------ $\\Rightarrow$ number of standing spectators = 4.  At t = 5\u2002 ^^^^^----- $\\Rightarrow$ number of standing spectators = 5.  At t = 6\u2002 -^^^^^---- $\\Rightarrow$ number of standing spectators = 5.  At t = 7\u2002 --^^^^^--- $\\Rightarrow$ number of standing spectators = 5.  At t = 8\u2002 ---^^^^^-- $\\Rightarrow$ number of standing spectators = 5.  At t = 9\u2002 ----^^^^^- $\\Rightarrow$ number of standing spectators = 5.  At t = 10 -----^^^^^ $\\Rightarrow$ number of standing spectators = 5.  At t = 11 ------^^^^ $\\Rightarrow$ number of standing spectators = 4.  At t = 12 -------^^^ $\\Rightarrow$ number of standing spectators = 3.  At t = 13 --------^^ $\\Rightarrow$ number of standing spectators = 2.  At t = 14 ---------^ $\\Rightarrow$ number of standing spectators = 1.  At t = 15 ---------- $\\Rightarrow$ number of standing spectators = 0.",
    "generated_code": "n, k, t = map(int, input().split())\n\nif t <= k:\n    print(t)\nelif t <= n:\n    print(k)\nelse:\n    print(n + k - t)\n",
    "pass_rate": 1.0,
    "passed_tests": 166,
    "total_tests": 166
}
{
    "task_id": "0018",
    "question": "Petya recieved a gift of a string s with length up to 10^5 characters for his birthday. He took two more empty strings t and u and decided to play a game. This game has two possible moves:  Extract the first character of s and append t with this character.  Extract the last character of t and append u with this character. \n\nPetya wants to get strings s and t empty and string u lexicographically minimal.\n\nYou should write a program that will help Petya win the game.\n\n\n-----Input-----\n\nFirst line contains non-empty string s (1 \u2264 |s| \u2264 10^5), consisting of lowercase English letters.\n\n\n-----Output-----\n\nPrint resulting string u.\n\n\n-----Examples-----\nInput\ncab\n\nOutput\nabc\n\nInput\nacdb\n\nOutput\nabdc",
    "generated_code": "s = input()\n\nt = []\nu = []\nmin_suffix = list(s)\n\n# Prepare the min_suffix array\nfor i in range(len(s) - 2, -1, -1):\n    min_suffix[i] = min(min_suffix[i], min_suffix[i + 1])\n\n# Process the characters\nfor i in range(len(s)):\n    # Move the first character of s to t\n    t.append(s[i])\n    # Ensure the top of t is lexicographically minimal\n    while t and t[-1] <= min_suffix[i]:\n        u.append(t.pop())\n\n# Append any remaining characters in t to u\nu.extend(reversed(t))\n\nprint(\"\".join(u))\n",
    "pass_rate": 0.8658536585365854,
    "passed_tests": 142,
    "total_tests": 164
}
{
    "task_id": "0019",
    "question": "Polycarp has recently created a new level in this cool new game Berlio Maker 85 and uploaded it online. Now players from all over the world can try his level.\n\nAll levels in this game have two stats to them: the number of plays and the number of clears. So when a player attempts the level, the number of plays increases by $1$. If he manages to finish the level successfully then the number of clears increases by $1$ as well. Note that both of the statistics update at the same time (so if the player finishes the level successfully then the number of plays will increase at the same time as the number of clears).\n\nPolycarp is very excited about his level, so he keeps peeking at the stats to know how hard his level turns out to be.\n\nSo he peeked at the stats $n$ times and wrote down $n$ pairs of integers \u2014 $(p_1, c_1), (p_2, c_2), \\dots, (p_n, c_n)$, where $p_i$ is the number of plays at the $i$-th moment of time and $c_i$ is the number of clears at the same moment of time. The stats are given in chronological order (i.e. the order of given pairs is exactly the same as Polycarp has written down).\n\nBetween two consecutive moments of time Polycarp peeked at the stats many players (but possibly zero) could attempt the level.\n\nFinally, Polycarp wonders if he hasn't messed up any records and all the pairs are correct. If there could exist such a sequence of plays (and clears, respectively) that the stats were exactly as Polycarp has written down, then he considers his records correct.\n\nHelp him to check the correctness of his records.\n\nFor your convenience you have to answer multiple independent test cases.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ $(1 \\le T \\le 500)$ \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$) \u2014 the number of moments of time Polycarp peeked at the stats.\n\nEach of the next $n$ lines contains two integers $p_i$ and $c_i$ ($0 \\le p_i, c_i \\le 1000$) \u2014 the number of plays and the number of clears of the level at the $i$-th moment of time.\n\nNote that the stats are given in chronological order.\n\n\n-----Output-----\n\nFor each test case print a single line.\n\nIf there could exist such a sequence of plays (and clears, respectively) that the stats were exactly as Polycarp has written down, then print \"YES\".\n\nOtherwise, print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n6\n3\n0 0\n1 1\n1 2\n2\n1 0\n1000 3\n4\n10 1\n15 2\n10 2\n15 2\n1\n765 432\n2\n4 4\n4 3\n5\n0 0\n1 0\n1 0\n1 0\n1 0\n\nOutput\nNO\nYES\nNO\nYES\nNO\nYES\n\n\n\n-----Note-----\n\nIn the first test case at the third moment of time the number of clears increased but the number of plays did not, that couldn't have happened.\n\nThe second test case is a nice example of a Super Expert level.\n\nIn the third test case the number of plays decreased, which is impossible.\n\nThe fourth test case is probably an auto level with a single jump over the spike.\n\nIn the fifth test case the number of clears decreased, which is also impossible.\n\nNobody wanted to play the sixth test case; Polycarp's mom attempted it to make him feel better, however, she couldn't clear it.",
    "generated_code": "def is_correct_records(n, records):\n    for i in range(n):\n        p1, c1 = records[i]\n        if c1 > p1:\n            return \"NO\"\n        if i > 0:\n            p0, c0 = records[i - 1]\n            if p1 < p0 or c1 < c0 or (p1 - p0) < (c1 - c0):\n                return \"NO\"\n    return \"YES\"\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    index = 0\n    T = int(data[index])\n    index += 1\n    results = []\n    \n    for _ in range(T):\n        n = int(data[index])\n        index += 1\n        records = []\n        for _ in range(n):\n            p = int(data[index])\n            c = int(data[index + 1])\n            records.append((p, c))\n            index += 2\n        results.append(is_correct_records(n, records))\n    \n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()\n",
    "pass_rate": 1.0,
    "passed_tests": 164,
    "total_tests": 164
}
{
    "task_id": "0020",
    "question": "Karen is getting ready for a new school day!\n\n [Image] \n\nIt is currently hh:mm, given in a 24-hour format. As you know, Karen loves palindromes, and she believes that it is good luck to wake up when the time is a palindrome.\n\nWhat is the minimum number of minutes she should sleep, such that, when she wakes up, the time is a palindrome?\n\nRemember that a palindrome is a string that reads the same forwards and backwards. For instance, 05:39 is not a palindrome, because 05:39 backwards is 93:50. On the other hand, 05:50 is a palindrome, because 05:50 backwards is 05:50.\n\n\n-----Input-----\n\nThe first and only line of input contains a single string in the format hh:mm (00 \u2264  hh  \u2264 23, 00 \u2264  mm  \u2264 59).\n\n\n-----Output-----\n\nOutput a single integer on a line by itself, the minimum number of minutes she should sleep, such that, when she wakes up, the time is a palindrome.\n\n\n-----Examples-----\nInput\n05:39\n\nOutput\n11\n\nInput\n13:31\n\nOutput\n0\n\nInput\n23:59\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first test case, the minimum number of minutes Karen should sleep for is 11. She can wake up at 05:50, when the time is a palindrome.\n\nIn the second test case, Karen can wake up immediately, as the current time, 13:31, is already a palindrome.\n\nIn the third test case, the minimum number of minutes Karen should sleep for is 1 minute. She can wake up at 00:00, when the time is a palindrome.",
    "generated_code": "def is_palindrome(time):\n    return time == time[::-1]\n\ndef minutes_to_next_palindrome(hh, mm):\n    while True:\n        mm += 1\n        if mm == 60:\n            mm = 0\n            hh += 1\n            if hh == 24:\n                hh = 0\n        time = f\"{hh:02d}:{mm:02d}\"\n        if is_palindrome(time):\n            return (hh, mm)\n\ns = input().strip()\nhh, mm = map(int, s.split(':'))\n\noriginal_time = (hh, mm)\nnext_palindrome_time = minutes_to_next_palindrome(hh, mm)\nwhile next_palindrome_time != original_time:\n    hh, mm = next_palindrome_time\n    minutes_passed = (hh * 60 + mm) - (original_time[0] * 60 + original_time[1])\n    if minutes_passed < 0:\n        minutes_passed += 24 * 60\n    break\n\nprint(minutes_passed)\n",
    "pass_rate": 0.875,
    "passed_tests": 140,
    "total_tests": 160
}
{
    "task_id": "0021",
    "question": "Nicholas has an array a that contains n distinct integers from 1 to n. In other words, Nicholas has a permutation of size n.\n\nNicholas want the minimum element (integer 1) and the maximum element (integer n) to be as far as possible from each other. He wants to perform exactly one swap in order to maximize the distance between the minimum and the maximum elements. The distance between two elements is considered to be equal to the absolute difference between their positions.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 100)\u00a0\u2014 the size of the permutation.\n\nThe second line of the input contains n distinct integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 n), where a_{i} is equal to the element at the i-th position.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum possible distance between the minimum and the maximum elements Nicholas can achieve by performing exactly one swap.\n\n\n-----Examples-----\nInput\n5\n4 5 1 3 2\n\nOutput\n3\n\nInput\n7\n1 6 5 3 4 7 2\n\nOutput\n6\n\nInput\n6\n6 5 4 3 2 1\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first sample, one may obtain the optimal answer by swapping elements 1 and 2.\n\nIn the second sample, the minimum and the maximum elements will be located in the opposite ends of the array if we swap 7 and 2.\n\nIn the third sample, the distance between the minimum and the maximum elements is already maximum possible, so we just perform some unnecessary swap, for example, one can swap 5 and 2.",
    "generated_code": "# Reading input\nn = int(input())\na = list(map(int, input().split()))\n\n# Find the positions of the minimum and maximum elements\nmin_pos = a.index(1)\nmax_pos = a.index(n)\n\n# Calculate the distances without any swap\ncurrent_distance = abs(min_pos - max_pos)\n\n# Possible new positions after swapping\n# Swap min element to the start of the array\ndistance1 = abs(0 - max_pos)\n# Swap min element to the end of the array\ndistance2 = abs((n-1) - max_pos)\n# Swap max element to the start of the array\ndistance3 = abs(0 - min_pos)\n# Swap max element to the end of the array\ndistance4 = abs((n-1) - min_pos)\n\n# The maximum possible distance after one swap\nmax_distance = max(current_distance, distance1, distance2, distance3, distance4)\n\n# Output the result\nprint(max_distance)\n",
    "pass_rate": 1.0,
    "passed_tests": 159,
    "total_tests": 159
}
{
    "task_id": "0022",
    "question": "Let's call a string \"s-palindrome\" if it is symmetric about the middle of the string. For example, the string \"oHo\" is \"s-palindrome\", but the string \"aa\" is not. The string \"aa\" is not \"s-palindrome\", because the second half of it is not a mirror reflection of the first half.\n\n [Image] English alphabet \n\nYou are given a string s. Check if the string is \"s-palindrome\".\n\n\n-----Input-----\n\nThe only line contains the string s (1 \u2264 |s| \u2264 1000) which consists of only English letters.\n\n\n-----Output-----\n\nPrint \"TAK\" if the string s is \"s-palindrome\" and \"NIE\" otherwise.\n\n\n-----Examples-----\nInput\noXoxoXo\n\nOutput\nTAK\n\nInput\nbod\n\nOutput\nTAK\n\nInput\nER\n\nOutput\nNIE",
    "generated_code": "# Read the input string\ns = input()\n\n# Define a function to check if the string is an s-palindrome\ndef is_s_palindrome(s):\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            return False\n    return True\n\n# Check if the string s is an s-palindrome\nif is_s_palindrome(s):\n    print(\"TAK\")\nelse:\n    print(\"NIE\")\n",
    "pass_rate": 0.2929936305732484,
    "passed_tests": 46,
    "total_tests": 157
}
{
    "task_id": "0023",
    "question": "You are given two positive integer numbers a and b. Permute (change order) of the digits of a to construct maximal number not exceeding b. No number in input and/or output can start with the digit 0.\n\nIt is allowed to leave a as it is.\n\n\n-----Input-----\n\nThe first line contains integer a (1 \u2264 a \u2264 10^18). The second line contains integer b (1 \u2264 b \u2264 10^18). Numbers don't have leading zeroes. It is guaranteed that answer exists.\n\n\n-----Output-----\n\nPrint the maximum possible number that is a permutation of digits of a and is not greater than b. The answer can't have any leading zeroes. It is guaranteed that the answer exists.\n\nThe number in the output should have exactly the same length as number a. It should be a permutation of digits of a.\n\n\n-----Examples-----\nInput\n123\n222\n\nOutput\n213\n\nInput\n3921\n10000\n\nOutput\n9321\n\nInput\n4940\n5000\n\nOutput\n4940",
    "generated_code": "from itertools import permutations\n\n# Read the input values\na = input().strip()\nb = input().strip()\n\n# Convert b to integer for comparison\nb_int = int(b)\n\n# Generate all permutations of the digits in a\nperms = permutations(a)\nmax_num = -1\n\n# Iterate through all permutations\nfor perm in perms:\n    # Join the permutation into a number and convert to integer\n    num_str = ''.join(perm)\n    \n    # Ensure the number doesn't start with a zero\n    if num_str[0] != '0':\n        num_int = int(num_str)\n        \n        # Check if the number is not greater than b and is the largest found so far\n        if num_int <= b_int and num_int > max_num:\n            max_num = num_int\n\n# Print the result\nprint(max_num)\n",
    "pass_rate": 0.7898089171974523,
    "passed_tests": 124,
    "total_tests": 157
}
{
    "task_id": "0024",
    "question": "Alice and Bob play 5-in-a-row game. They have a playing field of size 10 \u00d7 10. In turns they put either crosses or noughts, one at a time. Alice puts crosses and Bob puts noughts.\n\nIn current match they have made some turns and now it's Alice's turn. She wonders if she can put cross in such empty cell that she wins immediately.\n\nAlice wins if some crosses in the field form line of length not smaller than 5. This line can be horizontal, vertical and diagonal.\n\n\n-----Input-----\n\nYou are given matrix 10 \u00d7 10 (10 lines of 10 characters each) with capital Latin letters 'X' being a cross, letters 'O' being a nought and '.' being an empty cell. The number of 'X' cells is equal to the number of 'O' cells and there is at least one of each type. There is at least one empty cell.\n\nIt is guaranteed that in the current arrangement nobody has still won.\n\n\n-----Output-----\n\nPrint 'YES' if it's possible for Alice to win in one turn by putting cross in some empty cell. Otherwise print 'NO'.\n\n\n-----Examples-----\nInput\nXX.XX.....\n.....OOOO.\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n\nOutput\nYES\n\nInput\nXXOXX.....\nOO.O......\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n\nOutput\nNO",
    "generated_code": "def check_win(board, x, y):\n    # Directions for horizontal, vertical, and diagonal checks\n    directions = [(1, 0), (0, 1), (1, 1), (1, -1)]\n    \n    for dx, dy in directions:\n        count = 1  # Start with the current cell\n        \n        # Check in the positive direction\n        for i in range(1, 5):\n            nx, ny = x + i * dx, y + i * dy\n            if 0 <= nx < 10 and 0 <= ny < 10 and board[nx][ny] == 'X':\n                count += 1\n            else:\n                break\n        \n        # Check in the negative direction\n        for i in range(1, 5):\n            nx, ny = x - i * dx, y - i * dy\n            if 0 <= nx < 10 and 0 <= ny < 10 and board[nx][ny] == 'X':\n                count += 1\n            else:\n                break\n        \n        if count >= 5:\n            return True\n    \n    return False\n\ndef can_alice_win(board):\n    for i in range(10):\n        for j in range(10):\n            if board[i][j] == '.':\n                if check_win(board, i, j):\n                    return True\n    return False\n\n# Read input\nboard = [input().strip() for _ in range(10)]\n\n# Check if Alice can win\nif can_alice_win(board):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
    "pass_rate": 1.0,
    "passed_tests": 156,
    "total_tests": 156
}
{
    "task_id": "0025",
    "question": "You are given matrix with n rows and n columns filled with zeroes. You should put k ones in it in such a way that the resulting matrix is symmetrical with respect to the main diagonal (the diagonal that goes from the top left to the bottom right corner) and is lexicographically maximal.\n\nOne matrix is lexicographically greater than the other if the first different number in the first different row from the top in the first matrix is greater than the corresponding number in the second one.\n\nIf there exists no such matrix then output -1.\n\n\n-----Input-----\n\nThe first line consists of two numbers n and k (1 \u2264 n \u2264 100, 0 \u2264 k \u2264 10^6).\n\n\n-----Output-----\n\nIf the answer exists then output resulting matrix. Otherwise output -1.\n\n\n-----Examples-----\nInput\n2 1\n\nOutput\n1 0 \n0 0 \n\nInput\n3 2\n\nOutput\n1 0 0 \n0 1 0 \n0 0 0 \n\nInput\n2 5\n\nOutput\n-1",
    "generated_code": "def create_symmetrical_matrix(n, k):\n    if k > n * n:\n        print(-1)\n        return\n\n    matrix = [[0] * n for _ in range(n)]\n    ones_to_place = k\n\n    # Place ones on the diagonal first\n    for i in range(n):\n        if ones_to_place > 0:\n            matrix[i][i] = 1\n            ones_to_place -= 1\n\n    # Place remaining ones symmetrically\n    for i in range(n):\n        for j in range(i + 1, n):\n            if ones_to_place >= 2:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                ones_to_place -= 2\n\n    # If we still have ones to place, but no valid positions, return -1\n    if ones_to_place > 0:\n        print(-1)\n        return\n\n    # Print the resulting matrix\n    for row in matrix:\n        print(' '.join(map(str, row)))\n\n# Read input\nn, k = map(int, input().split())\ncreate_symmetrical_matrix(n, k)\n",
    "pass_rate": 0.5448717948717948,
    "passed_tests": 85,
    "total_tests": 156
}
{
    "task_id": "0026",
    "question": "Wet Shark asked Rat Kwesh to generate three positive real numbers x, y and z, from 0.1 to 200.0, inclusive. Wet Krash wants to impress Wet Shark, so all generated numbers will have exactly one digit after the decimal point.\n\nWet Shark knows Rat Kwesh will want a lot of cheese. So he will give the Rat an opportunity to earn a lot of cheese. He will hand the three numbers x, y and z to Rat Kwesh, and Rat Kwesh will pick one of the these twelve options:  a_1 = x^{y}^{z};  a_2 = x^{z}^{y};  a_3 = (x^{y})^{z};  a_4 = (x^{z})^{y};  a_5 = y^{x}^{z};  a_6 = y^{z}^{x};  a_7 = (y^{x})^{z};  a_8 = (y^{z})^{x};  a_9 = z^{x}^{y};  a_10 = z^{y}^{x};  a_11 = (z^{x})^{y};  a_12 = (z^{y})^{x}. \n\nLet m be the maximum of all the a_{i}, and c be the smallest index (from 1 to 12) such that a_{c} = m. Rat's goal is to find that c, and he asks you to help him. Rat Kwesh wants to see how much cheese he gets, so he you will have to print the expression corresponding to that a_{c}.\n\n \n\n\n-----Input-----\n\nThe only line of the input contains three space-separated real numbers x, y and z (0.1 \u2264 x, y, z \u2264 200.0). Each of x, y and z is given with exactly one digit after the decimal point.\n\n\n-----Output-----\n\nFind the maximum value of expression among x^{y}^{z}, x^{z}^{y}, (x^{y})^{z}, (x^{z})^{y}, y^{x}^{z}, y^{z}^{x}, (y^{x})^{z}, (y^{z})^{x}, z^{x}^{y}, z^{y}^{x}, (z^{x})^{y}, (z^{y})^{x} and print the corresponding expression. If there are many maximums, print the one that comes first in the list. \n\nx^{y}^{z} should be outputted as x^y^z (without brackets), and (x^{y})^{z} should be outputted as (x^y)^z (quotes for clarity). \n\n\n-----Examples-----\nInput\n1.1 3.4 2.5\n\nOutput\nz^y^x\n\nInput\n2.0 2.0 2.0\n\nOutput\nx^y^z\n\nInput\n1.9 1.8 1.7\n\nOutput\n(x^y)^z",
    "generated_code": "import math\nimport sys\n\n# Read input\nx, y, z = map(float, input().split())\n\n# List of expressions and their corresponding calculation in logarithmic form\nexpressions = [\n    (x**(y**z), \"x^y^z\"),\n    (x**(z**y), \"x^z^y\"),\n    ((x**y)**z, \"(x^y)^z\"),\n    ((x**z)**y, \"(x^z)^y\"),\n    (y**(x**z), \"y^x^z\"),\n    (y**(z**x), \"y^z^x\"),\n    ((y**x)**z, \"(y^x)^z\"),\n    ((y**z)**x, \"(y^z)^x\"),\n    (z**(x**y), \"z^x^y\"),\n    (z**(y**x), \"z^y^x\"),\n    ((z**x)**y, \"(z^x)^y\"),\n    ((z**y)**x, \"(z^y)^x\")\n]\n\n# Find the maximum value and its corresponding expression\nmax_value, max_expression = max(expressions, key=lambda item: item[0])\n\n# Output the result\nprint(max_expression)\n",
    "pass_rate": 0.6776315789473685,
    "passed_tests": 103,
    "total_tests": 152
}
{
    "task_id": "0027",
    "question": "You are given a string s consisting of n lowercase Latin letters. You have to type this string using your keyboard.\n\nInitially, you have an empty string. Until you type the whole string, you may perform the following operation:  add a character to the end of the string. \n\nBesides, at most once you may perform one additional operation: copy the string and append it to itself.\n\nFor example, if you have to type string abcabca, you can type it in 7 operations if you type all the characters one by one. However, you can type it in 5 operations if you type the string abc first and then copy it and type the last character.\n\nIf you have to type string aaaaaaaaa, the best option is to type 4 characters one by one, then copy the string, and then type the remaining character.\n\nPrint the minimum number of operations you need to type the given string.\n\n\n-----Input-----\n\nThe first line of the input containing only one integer number n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the string you have to type. The second line containing the string s consisting of n lowercase Latin letters.\n\n\n-----Output-----\n\nPrint one integer number\u00a0\u2014 the minimum number of operations you need to type the given string.\n\n\n-----Examples-----\nInput\n7\nabcabca\n\nOutput\n5\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\n\n\n-----Note-----\n\nThe first test described in the problem statement.\n\nIn the second test you can only type all the characters one by one.",
    "generated_code": "# Reading input\nn = int(input())\ns = input()\n\n# Initialize the minimum number of operations to a large number\nmin_operations = n\n\n# Iterate through possible lengths of the substring to copy\nfor length in range(1, n):\n    # Check if the substring of this length can be copied and then used to form the string\n    if s[:length] == s[length:length*2]:\n        # Calculate the number of operations needed\n        operations = length + 1 + (n - length*2)\n        min_operations = min(min_operations, operations)\n\n# Print the minimum number of operations\nprint(min_operations)\n",
    "pass_rate": 1.0,
    "passed_tests": 148,
    "total_tests": 148
}
{
    "task_id": "0028",
    "question": "The All-Berland National Olympiad in Informatics has just ended! Now Vladimir wants to upload the contest from the Olympiad as a gym to a popular Codehorses website.\n\nUnfortunately, the archive with Olympiad's data is a mess. For example, the files with tests are named arbitrary without any logic.\n\nVladimir wants to rename the files with tests so that their names are distinct integers starting from 1 without any gaps, namely, \"1\", \"2\", ..., \"n', where n is the total number of tests.\n\nSome of the files contain tests from statements (examples), while others contain regular tests. It is possible that there are no examples, and it is possible that all tests are examples. Vladimir wants to rename the files so that the examples are the first several tests, all all the next files contain regular tests only.\n\nThe only operation Vladimir can perform is the \"move\" command. Vladimir wants to write a script file, each of the lines in which is \"move file_1 file_2\", that means that the file \"file_1\" is to be renamed to \"file_2\". If there is a file \"file_2\" at the moment of this line being run, then this file is to be rewritten. After the line \"move file_1 file_2\" the file \"file_1\" doesn't exist, but there is a file \"file_2\" with content equal to the content of \"file_1\" before the \"move\" command.\n\nHelp Vladimir to write the script file with the minimum possible number of lines so that after this script is run:  all examples are the first several tests having filenames \"1\", \"2\", ..., \"e\", where e is the total number of examples;  all other files contain regular tests with filenames \"e + 1\", \"e + 2\", ..., \"n\", where n is the total number of all tests. \n\n\n-----Input-----\n\nThe first line contains single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of files with tests.\n\nn lines follow, each describing a file with test. Each line has a form of \"name_i type_i\", where \"name_i\" is the filename, and \"type_i\" equals \"1\", if the i-th file contains an example test, and \"0\" if it contains a regular test. Filenames of each file are strings of digits and small English letters with length from 1 to 6 characters. The filenames are guaranteed to be distinct.\n\n\n-----Output-----\n\nIn the first line print the minimum number of lines in Vladimir's script file.\n\nAfter that print the script file, each line should be \"move file_1 file_2\", where \"file_1\" is an existing at the moment of this line being run filename, and \"file_2\" \u2014 is a string of digits and small English letters with length from 1 to 6.\n\n\n-----Examples-----\nInput\n5\n01 0\n2 1\n2extra 0\n3 1\n99 0\n\nOutput\n4\nmove 3 1\nmove 01 5\nmove 2extra 4\nmove 99 3\n\nInput\n2\n1 0\n2 1\n\nOutput\n3\nmove 1 3\nmove 2 1\nmove 3 2\nInput\n5\n1 0\n11 1\n111 0\n1111 1\n11111 0\n\nOutput\n5\nmove 1 5\nmove 11 1\nmove 1111 2\nmove 111 4\nmove 11111 3",
    "generated_code": "# Read the number of files\nn = int(input().strip())\n\n# Initialize lists to store the example files and regular test files\nexamples = []\nregulars = []\n\n# Read each file and categorize it\nfor _ in range(n):\n    name, type_ = input().strip().split()\n    if type_ == '1':\n        examples.append(name)\n    else:\n        regulars.append(name)\n\n# Initialize the list to store the move operations\nmoves = []\n\n# Track the current file number for examples and regulars\ncurrent_example = 1\ncurrent_regular = len(examples) + 1\n\n# Create a dictionary to store the final position of each file\nfinal_pos = {}\n\n# Assign final positions for example files\nfor example in examples:\n    final_pos[example] = str(current_example)\n    current_example += 1\n\n# Assign final positions for regular test files\nfor regular in regulars:\n    final_pos[regular] = str(current_regular)\n    current_regular += 1\n\n# Track available temporary filenames\ntemp_name = n + 1\ntemp_files = set(str(i) for i in range(1, n + 1))\n\n# Generate the move operations\nfor original, final in final_pos.items():\n    if original != final:\n        # If final position is already occupied, use a temporary file\n        if final in temp_files:\n            temp_files.remove(final)\n        else:\n            while str(temp_name) in temp_files:\n                temp_name += 1\n            moves.append(f\"move {final} {temp_name}\")\n            temp_files.add(final)\n            final = str(temp_name)\n        \n        moves.append(f\"move {original} {final}\")\n\n# Output the number of move operations\nprint(len(moves))\n\n# Output each move operation\nfor move in moves:\n    print(move)\n",
    "pass_rate": 0.2602739726027397,
    "passed_tests": 38,
    "total_tests": 146
}
{
    "task_id": "0029",
    "question": "Luba has a ticket consisting of 6 digits. In one move she can choose digit in any position and replace it with arbitrary digit. She wants to know the minimum number of digits she needs to replace in order to make the ticket lucky.\n\nThe ticket is considered lucky if the sum of first three digits equals to the sum of last three digits.\n\n\n-----Input-----\n\nYou are given a string consisting of 6 characters (all characters are digits from 0 to 9) \u2014 this string denotes Luba's ticket. The ticket can start with the digit 0.\n\n\n-----Output-----\n\nPrint one number \u2014 the minimum possible number of digits Luba needs to replace to make the ticket lucky.\n\n\n-----Examples-----\nInput\n000000\n\nOutput\n0\n\nInput\n123456\n\nOutput\n2\n\nInput\n111000\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example the ticket is already lucky, so the answer is 0.\n\nIn the second example Luba can replace 4 and 5 with zeroes, and the ticket will become lucky. It's easy to see that at least two replacements are required.\n\nIn the third example Luba can replace any zero with 3. It's easy to see that at least one replacement is required.",
    "generated_code": "def min_replacements_to_lucky(ticket):\n    # Convert the string ticket to a list of integers\n    digits = list(map(int, ticket))\n    \n    # Calculate the sum of the first three digits and the last three digits\n    first_half_sum = sum(digits[:3])\n    second_half_sum = sum(digits[3:])\n    \n    # If the sums are already equal, no replacements are needed\n    if first_half_sum == second_half_sum:\n        return 0\n    \n    # Calculate the difference between the two sums\n    diff = abs(first_half_sum - second_half_sum)\n    \n    # List to store the possible improvements by changing a single digit\n    improvements = []\n    \n    for i in range(3):\n        # Calculate max improvement by changing a digit in the first half\n        improvements.append(9 - digits[i])\n        # Calculate max improvement by changing a digit in the second half\n        improvements.append(9 - digits[3 + i])\n    \n    # Sort improvements in descending order\n    improvements.sort(reverse=True)\n    \n    # Initialize replacements to 0\n    replacements = 0\n    \n    # Apply the greatest improvements until the difference is zero or less\n    for improvement in improvements:\n        diff -= improvement\n        replacements += 1\n        if diff <= 0:\n            return replacements\n    \n    # If after all improvements, difference is not zero, return replacements\n    return replacements\n\n# Read the input ticket\nticket = input().strip()\n\n# Calculate and print the minimum replacements needed\nprint(min_replacements_to_lucky(ticket))\n",
    "pass_rate": 0.5448275862068965,
    "passed_tests": 79,
    "total_tests": 145
}
{
    "task_id": "0030",
    "question": "The campus has $m$ rooms numbered from $0$ to $m - 1$. Also the $x$-mouse lives in the campus. The $x$-mouse is not just a mouse: each second $x$-mouse moves from room $i$ to the room $i \\cdot x \\mod{m}$ (in fact, it teleports from one room to another since it doesn't visit any intermediate room). Starting position of the $x$-mouse is unknown.\n\nYou are responsible to catch the $x$-mouse in the campus, so you are guessing about minimum possible number of traps (one trap in one room) you need to place. You are sure that if the $x$-mouse enters a trapped room, it immediately gets caught.\n\nAnd the only observation you made is $\\text{GCD} (x, m) = 1$.\n\n\n-----Input-----\n\nThe only line contains two integers $m$ and $x$ ($2 \\le m \\le 10^{14}$, $1 \\le x < m$, $\\text{GCD} (x, m) = 1$) \u2014 the number of rooms and the parameter of $x$-mouse. \n\n\n-----Output-----\n\nPrint the only integer \u2014 minimum number of traps you need to install to catch the $x$-mouse.\n\n\n-----Examples-----\nInput\n4 3\n\nOutput\n3\n\nInput\n5 2\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example you can, for example, put traps in rooms $0$, $2$, $3$. If the $x$-mouse starts in one of this rooms it will be caught immediately. If $x$-mouse starts in the $1$-st rooms then it will move to the room $3$, where it will be caught.\n\nIn the second example you can put one trap in room $0$ and one trap in any other room since $x$-mouse will visit all rooms $1..m-1$ if it will start in any of these rooms.",
    "generated_code": "def min_traps(m, x):\n    # Using the fact that GCD(x, m) = 1, x is a generator of the multiplicative group of integers modulo m\n    # Therefore, x will visit all rooms exactly once before returning to the starting room\n    # Hence, every room will be visited and the number of traps needed is equal to the number of rooms\n\n    return m\n\n# Reading input\nm, x = map(int, input().split())\n\n# Outputting the result\nprint(min_traps(m, x))\n",
    "pass_rate": 0.027972027972027972,
    "passed_tests": 4,
    "total_tests": 143
}
{
    "task_id": "0031",
    "question": "ZS the Coder has recently found an interesting concept called the Birthday Paradox. It states that given a random set of 23 people, there is around 50% chance that some two of them share the same birthday. ZS the Coder finds this very interesting, and decides to test this with the inhabitants of Udayland.\n\nIn Udayland, there are 2^{n} days in a year. ZS the Coder wants to interview k people from Udayland, each of them has birthday in one of 2^{n} days (each day with equal probability). He is interested in the probability of at least two of them have the birthday at the same day. \n\nZS the Coder knows that the answer can be written as an irreducible fraction $\\frac{A}{B}$. He wants to find the values of A and B (he does not like to deal with floating point numbers). Can you help him?\n\n\n-----Input-----\n\nThe first and only line of the input contains two integers n and k (1 \u2264 n \u2264 10^18, 2 \u2264 k \u2264 10^18), meaning that there are 2^{n} days in a year and that ZS the Coder wants to interview exactly k people.\n\n\n-----Output-----\n\nIf the probability of at least two k people having the same birthday in 2^{n} days long year equals $\\frac{A}{B}$ (A \u2265 0, B \u2265 1, $\\operatorname{gcd}(A, B) = 1$), print the A and B in a single line.\n\nSince these numbers may be too large, print them modulo 10^6 + 3. Note that A and B must be coprime before their remainders modulo 10^6 + 3 are taken.\n\n\n-----Examples-----\nInput\n3 2\n\nOutput\n1 8\nInput\n1 3\n\nOutput\n1 1\nInput\n4 3\n\nOutput\n23 128\n\n\n-----Note-----\n\nIn the first sample case, there are 2^3 = 8 days in Udayland. The probability that 2 people have the same birthday among 2 people is clearly $\\frac{1}{8}$, so A = 1, B = 8.\n\nIn the second sample case, there are only 2^1 = 2 days in Udayland, but there are 3 people, so it is guaranteed that two of them have the same birthday. Thus, the probability is 1 and A = B = 1.",
    "generated_code": "import sys\nimport math\n\nMOD = 10**6 + 3\n\ndef mod_inverse(a, p):\n    return pow(a, p - 2, p)\n\ndef main():\n    input = sys.stdin.read\n    n, k = map(int, input().strip().split())\n    \n    if k > (2 ** n):\n        print(1, 1)\n        return\n\n    days = 2 ** n\n    \n    numerator = 1\n    for i in range(k):\n        numerator = (numerator * (days - i)) % MOD\n\n    denominator = pow(days, k, MOD)\n    \n    no_collision_prob = numerator * mod_inverse(denominator, MOD) % MOD\n    collision_prob = (1 - no_collision_prob + MOD) % MOD\n    \n    gcd = math.gcd(collision_prob, MOD)\n    A = collision_prob // gcd\n    B = MOD // gcd\n    \n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n",
    "pass_rate": 0.014388489208633094,
    "passed_tests": 2,
    "total_tests": 139
}
{
    "task_id": "0032",
    "question": "In this problem we assume the Earth to be a completely round ball and its surface a perfect sphere. The length of the equator and any meridian is considered to be exactly 40 000 kilometers. Thus, travelling from North Pole to South Pole or vice versa takes exactly 20 000 kilometers.\n\nLimak, a polar bear, lives on the North Pole. Close to the New Year, he helps somebody with delivering packages all around the world. Instead of coordinates of places to visit, Limak got a description how he should move, assuming that he starts from the North Pole. The description consists of n parts. In the i-th part of his journey, Limak should move t_{i} kilometers in the direction represented by a string dir_{i} that is one of: \"North\", \"South\", \"West\", \"East\".\n\nLimak isn\u2019t sure whether the description is valid. You must help him to check the following conditions:  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the North Pole, he can move only to the South.  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the South Pole, he can move only to the North.  The journey must end on the North Pole. \n\nCheck if the above conditions are satisfied and print \"YES\" or \"NO\" on a single line.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 50).\n\nThe i-th of next n lines contains an integer t_{i} and a string dir_{i} (1 \u2264 t_{i} \u2264 10^6, $\\operatorname{dir}_{i} \\in \\{\\text{North, South, West, East} \\}$)\u00a0\u2014 the length and the direction of the i-th part of the journey, according to the description Limak got.\n\n\n-----Output-----\n\nPrint \"YES\" if the description satisfies the three conditions, otherwise print \"NO\", both without the quotes.\n\n\n-----Examples-----\nInput\n5\n7500 South\n10000 East\n3500 North\n4444 West\n4000 North\n\nOutput\nYES\n\nInput\n2\n15000 South\n4000 East\n\nOutput\nNO\n\nInput\n5\n20000 South\n1000 North\n1000000 West\n9000 North\n10000 North\n\nOutput\nYES\n\nInput\n3\n20000 South\n10 East\n20000 North\n\nOutput\nNO\n\nInput\n2\n1000 North\n1000 South\n\nOutput\nNO\n\nInput\n4\n50 South\n50 North\n15000 South\n15000 North\n\nOutput\nYES\n\n\n\n-----Note-----\n\nDrawings below show how Limak's journey would look like in first two samples. In the second sample the answer is \"NO\" because he doesn't end on the North Pole. [Image]",
    "generated_code": "# Read input\nn = int(input().strip())\n\n# Initialize the current position at the North Pole (0 kilometers from North Pole)\nposition = 0\n\n# Process each movement\nvalid = True\nfor _ in range(n):\n    t, direction = input().split()\n    t = int(t)\n    \n    if direction == \"North\":\n        position -= t\n    elif direction == \"South\":\n        position += t\n    \n    # Check invalid conditions\n    if position < 0 or position > 20000:\n        valid = False\n        break\n    if (position == 0 and direction != \"South\") or (position == 20000 and direction != \"North\"):\n        valid = False\n        break\n\n# The journey must end at the North Pole\nif position != 0:\n    valid = False\n\n# Print the result\nif valid:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
    "pass_rate": 0.8467153284671532,
    "passed_tests": 116,
    "total_tests": 137
}
{
    "task_id": "0033",
    "question": "You are given two arithmetic progressions: a_1k + b_1 and a_2l + b_2. Find the number of integers x such that L \u2264 x \u2264 R and x = a_1k' + b_1 = a_2l' + b_2, for some integers k', l' \u2265 0.\n\n\n-----Input-----\n\nThe only line contains six integers a_1, b_1, a_2, b_2, L, R (0 < a_1, a_2 \u2264 2\u00b710^9,  - 2\u00b710^9 \u2264 b_1, b_2, L, R \u2264 2\u00b710^9, L \u2264 R).\n\n\n-----Output-----\n\nPrint the desired number of integers x.\n\n\n-----Examples-----\nInput\n2 0 3 3 5 21\n\nOutput\n3\n\nInput\n2 4 3 0 6 17\n\nOutput\n2",
    "generated_code": "# Use Standard Input format\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef count_common_terms(a1, b1, a2, b2, L, R):\n    # Calculate the GCD of a1 and a2\n    g = gcd(a1, a2)\n    \n    # Find the difference between b1 and b2\n    diff = abs(b1 - b2)\n    \n    # If the difference is not divisible by the GCD, no common term exists\n    if diff % g != 0:\n        return 0\n    \n    # Calculate the least common multiple (LCM) of a1 and a2\n    lcm = a1 * (a2 // g)\n    \n    # Find the first common term in the range [L, R]\n    # x = a1 * k + b1 = a2 * l + b2\n    # Let t be the first common term\n    # t = lcm * n + c (n is an integer)\n    # We need to find n such that L <= t <= R\n    # L <= lcm * n + c <= R\n    # (L - c) / lcm <= n <= (R - c) / lcm\n    \n    # Calculate c\n    c = (b2 * a1 - b1 * a2) // g\n    c = (c % lcm + lcm) % lcm\n    \n    # Calculate the range for n\n    lower_bound = (L - c + lcm - 1) // lcm\n    upper_bound = (R - c) // lcm\n    \n    # If the bounds are valid, return the number of integers in the range\n    if lower_bound <= upper_bound:\n        return upper_bound - lower_bound + 1\n    else:\n        return 0\n\n# Read input\na1, b1, a2, b2, L, R = map(int, input().split())\n\n# Output the result\nprint(count_common_terms(a1, b1, a2, b2, L, R))\n",
    "pass_rate": 0.5037037037037037,
    "passed_tests": 68,
    "total_tests": 135
}
{
    "task_id": "0034",
    "question": "It's New Year's Eve soon, so Ivan decided it's high time he started setting the table. Ivan has bought two cakes and cut them into pieces: the first cake has been cut into a pieces, and the second one \u2014 into b pieces.\n\nIvan knows that there will be n people at the celebration (including himself), so Ivan has set n plates for the cakes. Now he is thinking about how to distribute the cakes between the plates. Ivan wants to do it in such a way that all following conditions are met:  Each piece of each cake is put on some plate;  Each plate contains at least one piece of cake;  No plate contains pieces of both cakes. \n\nTo make his guests happy, Ivan wants to distribute the cakes in such a way that the minimum number of pieces on the plate is maximized. Formally, Ivan wants to know the maximum possible number x such that he can distribute the cakes according to the aforementioned conditions, and each plate will contain at least x pieces of cake.\n\nHelp Ivan to calculate this number x!\n\n\n-----Input-----\n\nThe first line contains three integers n, a and b (1 \u2264 a, b \u2264 100, 2 \u2264 n \u2264 a + b) \u2014 the number of plates, the number of pieces of the first cake, and the number of pieces of the second cake, respectively.\n\n\n-----Output-----\n\nPrint the maximum possible number x such that Ivan can distribute the cake in such a way that each plate will contain at least x pieces of cake.\n\n\n-----Examples-----\nInput\n5 2 3\n\nOutput\n1\n\nInput\n4 7 10\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example there is only one way to distribute cakes to plates, all of them will have 1 cake on it.\n\nIn the second example you can have two plates with 3 and 4 pieces of the first cake and two plates both with 5 pieces of the second cake. Minimal number of pieces is 3.",
    "generated_code": "def is_feasible(n, a, b, x):\n    if x == 0:\n        return False\n    plates_needed_for_a = (a + x - 1) // x  # equivalent to ceil(a / x)\n    plates_needed_for_b = (b + x - 1) // x  # equivalent to ceil(b / x)\n    return plates_needed_for_a + plates_needed_for_b <= n\n\ndef max_min_pieces(n, a, b):\n    low, high = 1, max(a, b)\n    best_x = 0\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if is_feasible(n, a, b, mid):\n            best_x = mid\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return best_x\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    n = int(data[0])\n    a = int(data[1])\n    b = int(data[2])\n    print(max_min_pieces(n, a, b))\n",
    "pass_rate": 0.007407407407407408,
    "passed_tests": 1,
    "total_tests": 135
}
{
    "task_id": "0035",
    "question": "The flag of Berland is such rectangular field n \u00d7 m that satisfies following conditions:\n\n  Flag consists of three colors which correspond to letters 'R', 'G' and 'B'.  Flag consists of three equal in width and height stripes, parralel to each other and to sides of the flag. Each stripe has exactly one color.  Each color should be used in exactly one stripe. \n\nYou are given a field n \u00d7 m, consisting of characters 'R', 'G' and 'B'. Output \"YES\" (without quotes) if this field corresponds to correct flag of Berland. Otherwise, print \"NO\" (without quotes).\n\n\n-----Input-----\n\nThe first line contains two integer numbers n and m (1 \u2264 n, m \u2264 100) \u2014 the sizes of the field.\n\nEach of the following n lines consisting of m characters 'R', 'G' and 'B' \u2014 the description of the field.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes) if the given field corresponds to correct flag of Berland . Otherwise, print \"NO\" (without quotes).\n\n\n-----Examples-----\nInput\n6 5\nRRRRR\nRRRRR\nBBBBB\nBBBBB\nGGGGG\nGGGGG\n\nOutput\nYES\n\nInput\n4 3\nBRG\nBRG\nBRG\nBRG\n\nOutput\nYES\n\nInput\n6 7\nRRRGGGG\nRRRGGGG\nRRRGGGG\nRRRBBBB\nRRRBBBB\nRRRBBBB\n\nOutput\nNO\n\nInput\n4 4\nRRRR\nRRRR\nBBBB\nGGGG\n\nOutput\nNO\n\n\n\n-----Note-----\n\nThe field in the third example doesn't have three parralel stripes.\n\nRows of the field in the fourth example are parralel to each other and to borders. But they have different heights \u2014 2, 1 and 1.",
    "generated_code": "def is_valid_flag(n, m, flag):\n    def check_rows():\n        # Check if the flag is split equally in height into three horizontal stripes\n        if n % 3 != 0:\n            return False\n        stripe_height = n // 3\n        stripe_colors = [flag[0][0], flag[stripe_height][0], flag[2 * stripe_height][0]]\n        if len(set(stripe_colors)) != 3:\n            return False\n        for i in range(3):\n            for row in flag[i * stripe_height:(i + 1) * stripe_height]:\n                if any(cell != stripe_colors[i] for cell in row):\n                    return False\n        return True\n\n    def check_columns():\n        # Check if the flag is split equally in width into three vertical stripes\n        if m % 3 != 0:\n            return False\n        stripe_width = m // 3\n        stripe_colors = [flag[0][0], flag[0][stripe_width], flag[0][2 * stripe_width]]\n        if len(set(stripe_colors)) != 3:\n            return False\n        for i in range(3):\n            for row in flag:\n                if any(row[j] != stripe_colors[i] for j in range(i * stripe_width, (i + 1) * stripe_width)):\n                    return False\n        return True\n\n    return check_rows() or check_columns()\n\n# Read input\nn, m = map(int, input().split())\nflag = [input().strip() for _ in range(n)]\n\n# Determine if the flag is valid\nif is_valid_flag(n, m, flag):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
    "pass_rate": 1.0,
    "passed_tests": 135,
    "total_tests": 135
}
{
    "task_id": "0036",
    "question": "Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \n\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\n\n\n-----Input-----\n\nThe only line of the input contains integer n (0 \u2264 n \u2264 10^18)\u00a0\u2014 the number of Ayrat's moves.\n\n\n-----Output-----\n\nPrint two integers x and y\u00a0\u2014 current coordinates of Ayrat coordinates.\n\n\n-----Examples-----\nInput\n3\n\nOutput\n-2 0\n\nInput\n7\n\nOutput\n3 2",
    "generated_code": "def find_coordinates(n):\n    if n == 0:\n        return 0, 0\n    \n    layer = 1\n    while True:\n        if n <= 6 * layer:\n            break\n        n -= 6 * layer\n        layer += 1\n    \n    x, y = layer, 0\n    directions = [(0, -1), (-1, -1), (-1, 0), (0, 1), (1, 1), (1, 0)]\n    \n    for direction in directions:\n        moves = min(n, layer)\n        x += direction[0] * moves\n        y += direction[1] * moves\n        n -= moves\n        if n == 0:\n            break\n    \n    return x, y\n\n# Reading input\nn = int(input())\n\n# Finding and printing coordinates\nx, y = find_coordinates(n)\nprint(x, y)\n",
    "pass_rate": 0.007407407407407408,
    "passed_tests": 1,
    "total_tests": 135
}
{
    "task_id": "0037",
    "question": "Dante is engaged in a fight with \"The Savior\". Before he can fight it with his sword, he needs to break its shields. He has two guns, Ebony and Ivory, each of them is able to perform any non-negative number of shots.\n\nFor every bullet that hits the shield, Ebony deals a units of damage while Ivory deals b units of damage. In order to break the shield Dante has to deal exactly c units of damage. Find out if this is possible.\n\n\n-----Input-----\n\nThe first line of the input contains three integers a, b, c (1 \u2264 a, b \u2264 100, 1 \u2264 c \u2264 10 000)\u00a0\u2014 the number of units of damage dealt by Ebony gun and Ivory gun, and the total number of damage required to break the shield, respectively.\n\n\n-----Output-----\n\nPrint \"Yes\" (without quotes) if Dante can deal exactly c damage to the shield and \"No\" (without quotes) otherwise.\n\n\n-----Examples-----\nInput\n4 6 15\n\nOutput\nNo\n\nInput\n3 2 7\n\nOutput\nYes\n\nInput\n6 11 6\n\nOutput\nYes\n\n\n\n-----Note-----\n\nIn the second sample, Dante can fire 1 bullet from Ebony and 2 from Ivory to deal exactly 1\u00b73 + 2\u00b72 = 7 damage. In the third sample, Dante can fire 1 bullet from ebony and no bullets from ivory to do 1\u00b76 + 0\u00b711 = 6 damage.",
    "generated_code": "# Read inputs\na, b, c = map(int, input().split())\n\n# Function to check if it's possible to deal exact c damage\ndef can_deal_exact_damage(a, b, c):\n    # Iterate over possible shots from Ebony gun\n    for i in range(c // a + 1):\n        remaining_damage = c - i * a\n        # Check if the remaining damage can be dealt by Ivory gun\n        if remaining_damage % b == 0:\n            return True\n    return False\n\n# Check if we can deal exactly c damage and print the result\nif can_deal_exact_damage(a, b, c):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n",
    "pass_rate": 1.0,
    "passed_tests": 134,
    "total_tests": 134
}
{
    "task_id": "0038",
    "question": "Running with barriers on the circle track is very popular in the country where Dasha lives, so no wonder that on her way to classes she saw the following situation:\n\nThe track is the circle with length L, in distinct points of which there are n barriers. Athlete always run the track in counterclockwise direction if you look on him from above. All barriers are located at integer distance from each other along the track. \n\nHer friends the parrot Kefa and the leopard Sasha participated in competitions and each of them ran one lap. Each of the friends started from some integral point on the track. Both friends wrote the distance from their start along the track to each of the n barriers. Thus, each of them wrote n integers in the ascending order, each of them was between 0 and L - 1, inclusively. [Image] Consider an example. Let L = 8, blue points are barriers, and green points are Kefa's start (A) and Sasha's start (B). Then Kefa writes down the sequence [2, 4, 6], and Sasha writes down [1, 5, 7]. \n\nThere are several tracks in the country, all of them have same length and same number of barriers, but the positions of the barriers can differ among different tracks. Now Dasha is interested if it is possible that Kefa and Sasha ran the same track or they participated on different tracks. \n\nWrite the program which will check that Kefa's and Sasha's tracks coincide (it means that one can be obtained from the other by changing the start position). Note that they always run the track in one direction \u2014 counterclockwise, if you look on a track from above. \n\n\n-----Input-----\n\nThe first line contains two integers n and L (1 \u2264 n \u2264 50, n \u2264 L \u2264 100) \u2014 the number of barriers on a track and its length. \n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Kefa's start to each barrier in the order of its appearance. All integers are in the range from 0 to L - 1 inclusively.\n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Sasha's start to each barrier in the order of its overcoming. All integers are in the range from 0 to L - 1 inclusively.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes), if Kefa and Sasha ran the coinciding tracks (it means that the position of all barriers coincides, if they start running from the same points on the track). Otherwise print \"NO\" (without quotes).\n\n\n-----Examples-----\nInput\n3 8\n2 4 6\n1 5 7\n\nOutput\nYES\n\nInput\n4 9\n2 3 5 8\n0 1 3 6\n\nOutput\nYES\n\nInput\n2 4\n1 3\n1 2\n\nOutput\nNO\n\n\n\n-----Note-----\n\nThe first test is analyzed in the statement.",
    "generated_code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    L = int(data[1])\n    \n    kefa_distances = list(map(int, data[2:2 + n]))\n    sasha_distances = list(map(int, data[2 + n:2 + 2 * n]))\n    \n    def get_differences(distances):\n        return [(distances[(i + 1) % n] - distances[i]) % L for i in range(n)]\n    \n    kefa_diffs = get_differences(kefa_distances)\n    sasha_diffs = get_differences(sasha_distances)\n    \n    sasha_diffs_doubled = sasha_diffs * 2\n    \n    def is_sublist(lst, sublst):\n        l = len(sublst)\n        return any(sublst == lst[i:i + l] for i in range(len(lst) - l + 1))\n    \n    if is_sublist(sasha_diffs_doubled, kefa_diffs):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "pass_rate": 1.0,
    "passed_tests": 134,
    "total_tests": 134
}
{
    "task_id": "0039",
    "question": "A string is a palindrome if it reads the same from the left to the right and from the right to the left. For example, the strings \"kek\", \"abacaba\", \"r\" and \"papicipap\" are palindromes, while the strings \"abb\" and \"iq\" are not.\n\nA substring $s[l \\ldots r]$ ($1 \\leq l \\leq r \\leq |s|$) of a string $s = s_{1}s_{2} \\ldots s_{|s|}$ is the string $s_{l}s_{l + 1} \\ldots s_{r}$.\n\nAnna does not like palindromes, so she makes her friends call her Ann. She also changes all the words she reads in a similar way. Namely, each word $s$ is changed into its longest substring that is not a palindrome. If all the substrings of $s$ are palindromes, she skips the word at all.\n\nSome time ago Ann read the word $s$. What is the word she changed it into?\n\n\n-----Input-----\n\nThe first line contains a non-empty string $s$ with length at most $50$ characters, containing lowercase English letters only.\n\n\n-----Output-----\n\nIf there is such a substring in $s$ that is not a palindrome, print the maximum length of such a substring. Otherwise print $0$.\n\nNote that there can be multiple longest substrings that are not palindromes, but their length is unique.\n\n\n-----Examples-----\nInput\nmew\n\nOutput\n3\n\nInput\nwuffuw\n\nOutput\n5\n\nInput\nqqqqqqqq\n\nOutput\n0\n\n\n\n-----Note-----\n\n\"mew\" is not a palindrome, so the longest substring of it that is not a palindrome, is the string \"mew\" itself. Thus, the answer for the first example is $3$.\n\nThe string \"uffuw\" is one of the longest non-palindrome substrings (of length $5$) of the string \"wuffuw\", so the answer for the second example is $5$.\n\nAll substrings of the string \"qqqqqqqq\" consist of equal characters so they are palindromes. This way, there are no non-palindrome substrings. Thus, the answer for the third example is $0$.",
    "generated_code": "def is_palindrome(sub):\n    return sub == sub[::-1]\n\ndef longest_non_palindrome_substring(s):\n    n = len(s)\n    \n    # Check if the entire string is a palindrome\n    if not is_palindrome(s):\n        return n\n    \n    # If all characters in the string are the same, every substring is a palindrome\n    if all(ch == s[0] for ch in s):\n        return 0\n    \n    # Check substrings excluding the first or the last character\n    return n - 1\n\n# Read input\ns = input().strip()\n\n# Print the result\nprint(longest_non_palindrome_substring(s))\n",
    "pass_rate": 1.0,
    "passed_tests": 133,
    "total_tests": 133
}
{
    "task_id": "0040",
    "question": "Is it rated?\n\nHere it is. The Ultimate Question of Competitive Programming, Codeforces, and Everything. And you are here to answer it.\n\nAnother Codeforces round has been conducted. No two participants have the same number of points. For each participant, from the top to the bottom of the standings, their rating before and after the round is known.\n\nIt's known that if at least one participant's rating has changed, then the round was rated for sure.\n\nIt's also known that if the round was rated and a participant with lower rating took a better place in the standings than a participant with higher rating, then at least one round participant's rating has changed.\n\nIn this problem, you should not make any other assumptions about the rating system.\n\nDetermine if the current round is rated, unrated, or it's impossible to determine whether it is rated of not.\n\n\n-----Input-----\n\nThe first line contains a single integer n (2 \u2264 n \u2264 1000)\u00a0\u2014 the number of round participants.\n\nEach of the next n lines contains two integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 4126)\u00a0\u2014 the rating of the i-th participant before and after the round, respectively. The participants are listed in order from the top to the bottom of the standings.\n\n\n-----Output-----\n\nIf the round is rated for sure, print \"rated\". If the round is unrated for sure, print \"unrated\". If it's impossible to determine whether the round is rated or not, print \"maybe\".\n\n\n-----Examples-----\nInput\n6\n3060 3060\n2194 2194\n2876 2903\n2624 2624\n3007 2991\n2884 2884\n\nOutput\nrated\n\nInput\n4\n1500 1500\n1300 1300\n1200 1200\n1400 1400\n\nOutput\nunrated\n\nInput\n5\n3123 3123\n2777 2777\n2246 2246\n2246 2246\n1699 1699\n\nOutput\nmaybe\n\n\n\n-----Note-----\n\nIn the first example, the ratings of the participants in the third and fifth places have changed, therefore, the round was rated.\n\nIn the second example, no one's rating has changed, but the participant in the second place has lower rating than the participant in the fourth place. Therefore, if the round was rated, someone's rating would've changed for sure.\n\nIn the third example, no one's rating has changed, and the participants took places in non-increasing order of their rating. Therefore, it's impossible to determine whether the round is rated or not.",
    "generated_code": "n = int(input())\nratings = [tuple(map(int, input().split())) for _ in range(n)]\n\nrated = False\nunrated = False\nfor i in range(n):\n    if ratings[i][0] != ratings[i][1]:\n        rated = True\n        break\n\nif not rated:\n    for i in range(1, n):\n        if ratings[i][0] > ratings[i - 1][0]:\n            unrated = True\n            break\n\nif rated:\n    print(\"rated\")\nelif unrated:\n    print(\"unrated\")\nelse:\n    print(\"maybe\")\n",
    "pass_rate": 1.0,
    "passed_tests": 132,
    "total_tests": 132
}
{
    "task_id": "0041",
    "question": "You are given the array of integer numbers a_0, a_1, ..., a_{n} - 1. For each element find the distance to the nearest zero (to the element which equals to zero). There is at least one zero element in the given array.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 2\u00b710^5) \u2014 length of the array a. The second line contains integer elements of the array separated by single spaces ( - 10^9 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint the sequence d_0, d_1, ..., d_{n} - 1, where d_{i} is the difference of indices between i and nearest j such that a_{j} = 0. It is possible that i = j.\n\n\n-----Examples-----\nInput\n9\n2 1 0 3 0 0 3 2 4\n\nOutput\n2 1 0 1 0 0 1 2 3 \nInput\n5\n0 1 2 3 4\n\nOutput\n0 1 2 3 4 \nInput\n7\n5 6 0 1 -2 3 4\n\nOutput\n2 1 0 1 2 3 4",
    "generated_code": "n = int(input())\na = list(map(int, input().split()))\n\n# Initialize the result array with a large number\nresult = [float('inf')] * n\n\n# Forward pass to find minimum distances to zero\nlast_zero_index = -1\nfor i in range(n):\n    if a[i] == 0:\n        last_zero_index = i\n    if last_zero_index != -1:\n        result[i] = i - last_zero_index\n\n# Backward pass to update the minimum distances to zero\nlast_zero_index = -1\nfor i in range(n-1, -1, -1):\n    if a[i] == 0:\n        last_zero_index = i\n    if last_zero_index != -1:\n        result[i] = min(result[i], last_zero_index - i)\n\nprint(\" \".join(map(str, result)))\n",
    "pass_rate": 1.0,
    "passed_tests": 132,
    "total_tests": 132
}
{
    "task_id": "0042",
    "question": "You are given a binary string $s$.\n\nFind the number of distinct cyclical binary strings of length $n$ which contain $s$ as a substring.\n\nThe cyclical string $t$ contains $s$ as a substring if there is some cyclical shift of string $t$, such that $s$ is a substring of this cyclical shift of $t$.\n\nFor example, the cyclical string \"000111\" contains substrings \"001\", \"01110\" and \"10\", but doesn't contain \"0110\" and \"10110\".\n\nTwo cyclical strings are called different if they differ from each other as strings. For example, two different strings, which differ from each other by a cyclical shift, are still considered different cyclical strings.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 40$)\u00a0\u2014 the length of the target string $t$.\n\nThe next line contains the string $s$ ($1 \\le |s| \\le n$)\u00a0\u2014 the string which must be a substring of cyclical string $t$. String $s$ contains only characters '0' and '1'.\n\n\n-----Output-----\n\nPrint the only integer\u00a0\u2014 the number of distinct cyclical binary strings $t$, which contain $s$ as a substring.\n\n\n-----Examples-----\nInput\n2\n0\n\nOutput\n3\nInput\n4\n1010\n\nOutput\n2\nInput\n20\n10101010101010\n\nOutput\n962\n\n\n-----Note-----\n\nIn the first example, there are three cyclical strings, which contain \"0\"\u00a0\u2014 \"00\", \"01\" and \"10\".\n\nIn the second example, there are only two such strings\u00a0\u2014 \"1010\", \"0101\".",
    "generated_code": "def has_substring_in_cyclic_permutations(t, s):\n    # Create a doubled version of t to easily check cyclic permutations\n    doubled_t = t + t\n    return s in doubled_t\n\ndef count_valid_cyclic_strings(n, s):\n    count = 0\n    for i in range(2**n):\n        t = bin(i)[2:].zfill(n)\n        if has_substring_in_cyclic_permutations(t, s):\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    s = data[1]\n    \n    result = count_valid_cyclic_strings(n, s)\n    print(result)\n",
    "pass_rate": 0.25190839694656486,
    "passed_tests": 33,
    "total_tests": 131
}
{
    "task_id": "0043",
    "question": "You are given the set of vectors on the plane, each of them starting at the origin. Your task is to find a pair of vectors with the minimal non-oriented angle between them.\n\nNon-oriented angle is non-negative value, minimal between clockwise and counterclockwise direction angles. Non-oriented angle is always between 0 and \u03c0. For example, opposite directions vectors have angle equals to \u03c0.\n\n\n-----Input-----\n\nFirst line of the input contains a single integer n (2 \u2264 n \u2264 100 000)\u00a0\u2014 the number of vectors.\n\nThe i-th of the following n lines contains two integers x_{i} and y_{i} (|x|, |y| \u2264 10 000, x^2 + y^2 > 0)\u00a0\u2014 the coordinates of the i-th vector. Vectors are numbered from 1 to n in order of appearing in the input. It is guaranteed that no two vectors in the input share the same direction (but they still can have opposite directions).\n\n\n-----Output-----\n\nPrint two integer numbers a and b (a \u2260 b)\u00a0\u2014 a pair of indices of vectors with the minimal non-oriented angle. You can print the numbers in any order. If there are many possible answers, print any.\n\n\n-----Examples-----\nInput\n4\n-1 0\n0 -1\n1 0\n1 1\n\nOutput\n3 4\n\nInput\n6\n-1 0\n0 -1\n1 0\n1 1\n-4 -5\n-4 -6\n\nOutput\n6 5",
    "generated_code": "import math\nimport sys\n\ninput = sys.stdin.read\ndef find_min_angle_pair(vectors):\n    n = len(vectors)\n    \n    # Convert vectors to angles with respect to x-axis\n    angles = []\n    for i, (x, y) in enumerate(vectors):\n        angle = math.atan2(y, x)\n        angles.append((angle, i + 1))\n    \n    # Sort by angle\n    angles.sort()\n    \n    # Initialize the minimum angle difference to a large number\n    min_diff = float('inf')\n    min_pair = (-1, -1)\n    \n    # Compare consecutive angles in the sorted list\n    for i in range(n):\n        angle1, idx1 = angles[i]\n        angle2, idx2 = angles[(i + 1) % n]  # Wrap around to the first element\n        diff = abs(angle1 - angle2)\n        if diff > math.pi:\n            diff = 2 * math.pi - diff\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (idx1, idx2)\n    \n    return min_pair\n\n# Read input\ndata = input().strip().split()\nn = int(data[0])\nvectors = []\nfor i in range(n):\n    x = int(data[2 * i + 1])\n    y = int(data[2 * i + 2])\n    vectors.append((x, y))\n\n# Find and print the result\na, b = find_min_angle_pair(vectors)\nprint(a, b)\n",
    "pass_rate": 0.9230769230769231,
    "passed_tests": 120,
    "total_tests": 130
}
{
    "task_id": "0044",
    "question": "Vasiliy has a car and he wants to get from home to the post office. The distance which he needs to pass equals to d kilometers.\n\nVasiliy's car is not new \u2014 it breaks after driven every k kilometers and Vasiliy needs t seconds to repair it. After repairing his car Vasiliy can drive again (but after k kilometers it will break again, and so on). In the beginning of the trip the car is just from repair station.\n\nTo drive one kilometer on car Vasiliy spends a seconds, to walk one kilometer on foot he needs b seconds (a < b).\n\nYour task is to find minimal time after which Vasiliy will be able to reach the post office. Consider that in every moment of time Vasiliy can left his car and start to go on foot.\n\n\n-----Input-----\n\nThe first line contains 5 positive integers d, k, a, b, t (1 \u2264 d \u2264 10^12; 1 \u2264 k, a, b, t \u2264 10^6; a < b), where:  d \u2014 the distance from home to the post office;  k \u2014 the distance, which car is able to drive before breaking;  a \u2014 the time, which Vasiliy spends to drive 1 kilometer on his car;  b \u2014 the time, which Vasiliy spends to walk 1 kilometer on foot;  t \u2014 the time, which Vasiliy spends to repair his car. \n\n\n-----Output-----\n\nPrint the minimal time after which Vasiliy will be able to reach the post office.\n\n\n-----Examples-----\nInput\n5 2 1 4 10\n\nOutput\n14\n\nInput\n5 2 1 4 5\n\nOutput\n13\n\n\n\n-----Note-----\n\nIn the first example Vasiliy needs to drive the first 2 kilometers on the car (in 2 seconds) and then to walk on foot 3 kilometers (in 12 seconds). So the answer equals to 14 seconds.\n\nIn the second example Vasiliy needs to drive the first 2 kilometers on the car (in 2 seconds), then repair his car (in 5 seconds) and drive 2 kilometers more on the car (in 2 seconds). After that he needs to walk on foot 1 kilometer (in 4 seconds). So the answer equals to 13 seconds.",
    "generated_code": "# Read input\nd, k, a, b, t = map(int, input().split())\n\n# If the distance to the post office is less than or equal to the distance the car can drive before breaking\nif d <= k:\n    # Drive the entire distance\n    print(d * a)\nelse:\n    # Calculate the time for the first k kilometers (since no repair is needed initially)\n    time = k * a\n    remaining_distance = d - k\n    \n    # Calculate the number of full segments (k kilometers each) the car can drive after the initial k kilometers\n    full_segments = remaining_distance // k\n    # Calculate the remaining kilometers after the full segments\n    remaining_kilometers = remaining_distance % k\n    \n    # Calculate the time for the full segments\n    if full_segments > 0:\n        # Time for driving full segments and repairing after each segment\n        time += full_segments * (k * a + t)\n    \n    # Calculate the time for the remaining kilometers\n    if remaining_kilometers > 0:\n        # Compare the time for driving the remaining kilometers (with one more repair) and walking them\n        drive_and_repair_time = remaining_kilometers * a + t\n        walk_time = remaining_kilometers * b\n        time += min(drive_and_repair_time, walk_time)\n    \n    # Add the time for walking the remaining kilometers directly if it's faster than driving and repairing\n    print(time)\n",
    "pass_rate": 0.9224806201550387,
    "passed_tests": 119,
    "total_tests": 129
}
{
    "task_id": "0045",
    "question": "You are given positive integer number n. You should create such strictly increasing sequence of k positive numbers a_1, a_2, ..., a_{k}, that their sum is equal to n and greatest common divisor is maximal.\n\nGreatest common divisor of sequence is maximum of such numbers that every element of sequence is divisible by them.\n\nIf there is no possible sequence then output -1.\n\n\n-----Input-----\n\nThe first line consists of two numbers n and k (1 \u2264 n, k \u2264 10^10).\n\n\n-----Output-----\n\nIf the answer exists then output k numbers \u2014 resulting sequence. Otherwise output -1. If there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n6 3\n\nOutput\n1 2 3\n\nInput\n8 2\n\nOutput\n2 6\n\nInput\n5 3\n\nOutput\n-1",
    "generated_code": "def create_sequence(n, k):\n    min_sum = k * (k + 1) // 2\n    if n < min_sum:\n        return [-1]\n    \n    # Create the initial sequence\n    sequence = list(range(1, k + 1))\n    current_sum = min_sum\n    \n    # Distribute the remaining value to maximize the GCD\n    remaining = n - current_sum\n    for i in range(k - 1, -1, -1):\n        if remaining == 0:\n            break\n        max_add = remaining if i == k - 1 else sequence[i + 1] - sequence[i] - 1\n        add_value = min(max_add, remaining)\n        sequence[i] += add_value\n        remaining -= add_value\n    \n    return sequence\n\n# Read input\nn, k = map(int, input().split())\n\n# Get the sequence\nresult = create_sequence(n, k)\n\n# Print the result\nif result == [-1]:\n    print(-1)\nelse:\n    print(' '.join(map(str, result)))\n",
    "pass_rate": 0.8682170542635659,
    "passed_tests": 112,
    "total_tests": 129
}
{
    "task_id": "0046",
    "question": "After finishing eating her bun, Alyona came up with two integers n and m. She decided to write down two columns of integers\u00a0\u2014 the first column containing integers from 1 to n and the second containing integers from 1 to m. Now the girl wants to count how many pairs of integers she can choose, one from the first column and the other from the second column, such that their sum is divisible by 5.\n\nFormally, Alyona wants to count the number of pairs of integers (x, y) such that 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m and $(x + y) \\operatorname{mod} 5$ equals 0.\n\nAs usual, Alyona has some troubles and asks you to help.\n\n\n-----Input-----\n\nThe only line of the input contains two integers n and m (1 \u2264 n, m \u2264 1 000 000).\n\n\n-----Output-----\n\nPrint the only integer\u00a0\u2014 the number of pairs of integers (x, y) such that 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m and (x + y) is divisible by 5.\n\n\n-----Examples-----\nInput\n6 12\n\nOutput\n14\n\nInput\n11 14\n\nOutput\n31\n\nInput\n1 5\n\nOutput\n1\n\nInput\n3 8\n\nOutput\n5\n\nInput\n5 7\n\nOutput\n7\n\nInput\n21 21\n\nOutput\n88\n\n\n\n-----Note-----\n\nFollowing pairs are suitable in the first sample case:   for x = 1 fits y equal to 4 or 9;  for x = 2 fits y equal to 3 or 8;  for x = 3 fits y equal to 2, 7 or 12;  for x = 4 fits y equal to 1, 6 or 11;  for x = 5 fits y equal to 5 or 10;  for x = 6 fits y equal to 4 or 9. \n\nOnly the pair (1, 4) is suitable in the third sample case.",
    "generated_code": "# Read input values\nn, m = map(int, input().split())\n\n# We will use modular arithmetic to count the pairs\ncount_x = [0] * 5\ncount_y = [0] * 5\n\n# Count occurrences of each remainder when divided by 5 for 1 to n\nfor i in range(1, n + 1):\n    count_x[i % 5] += 1\n\n# Count occurrences of each remainder when divided by 5 for 1 to m\nfor i in range(1, m + 1):\n    count_y[i % 5] += 1\n\n# Calculate the number of valid pairs\nresult = (count_x[0] * count_y[0] +\n          count_x[1] * count_y[4] +\n          count_x[2] * count_y[3] +\n          count_x[3] * count_y[2] +\n          count_x[4] * count_y[1])\n\nprint(result)\n",
    "pass_rate": 1.0,
    "passed_tests": 128,
    "total_tests": 128
}
{
    "task_id": "0047",
    "question": "You are given an array $a$ consisting of $n$ integers. Beauty of array is the maximum sum of some consecutive subarray of this array (this subarray may be empty). For example, the beauty of the array [10, -5, 10, -4, 1] is 15, and the beauty of the array [-3, -5, -1] is 0.\n\nYou may choose at most one consecutive subarray of $a$ and multiply all values contained in this subarray by $x$. You want to maximize the beauty of array after applying at most one such operation.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $x$ ($1 \\le n \\le 3 \\cdot 10^5, -100 \\le x \\le 100$) \u2014 the length of array $a$ and the integer $x$ respectively.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$) \u2014 the array $a$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum possible beauty of array $a$ after multiplying all values belonging to some consecutive subarray $x$.\n\n\n-----Examples-----\nInput\n5 -2\n-3 8 -2 1 -6\n\nOutput\n22\n\nInput\n12 -3\n1 3 3 7 1 3 3 7 1 3 3 7\n\nOutput\n42\n\nInput\n5 10\n-1 -2 -3 -4 -5\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first test case we need to multiply the subarray [-2, 1, -6], and the array becomes [-3, 8, 4, -2, 12] with beauty 22 ([-3, 8, 4, -2, 12]).\n\nIn the second test case we don't need to multiply any subarray at all.\n\nIn the third test case no matter which subarray we multiply, the beauty of array will be equal to 0.",
    "generated_code": "n, x = map(int, input().split())\na = list(map(int, input().split()))\n\nif n == 0:\n    print(0)\nelse:\n    dp_no_mult = [0] * n\n    dp_with_mult = [0] * n\n    dp_post_mult = [0] * n\n\n    dp_no_mult[0] = max(0, a[0])\n    dp_with_mult[0] = max(0, a[0] * x)\n    dp_post_mult[0] = dp_with_mult[0]\n\n    for i in range(1, n):\n        dp_no_mult[i] = max(0, dp_no_mult[i-1] + a[i])\n        dp_with_mult[i] = max(0, dp_no_mult[i-1] + a[i] * x, a[i] * x)\n        dp_post_mult[i] = max(0, dp_with_mult[i-1] + a[i], dp_post_mult[i-1] + a[i])\n\n    max_beauty = max(max(dp_no_mult), max(dp_with_mult), max(dp_post_mult))\n    print(max_beauty)\n",
    "pass_rate": 0.5511811023622047,
    "passed_tests": 70,
    "total_tests": 127
}
{
    "task_id": "0048",
    "question": "Bizon the Champion isn't just charming, he also is very smart.\n\nWhile some of us were learning the multiplication table, Bizon the Champion had fun in his own manner. Bizon the Champion painted an n \u00d7 m multiplication table, where the element on the intersection of the i-th row and j-th column equals i\u00b7j (the rows and columns of the table are numbered starting from 1). Then he was asked: what number in the table is the k-th largest number? Bizon the Champion always answered correctly and immediately. Can you repeat his success?\n\nConsider the given multiplication table. If you write out all n\u00b7m numbers from the table in the non-decreasing order, then the k-th number you write out is called the k-th largest number.\n\n\n-----Input-----\n\nThe single line contains integers n, m and k (1 \u2264 n, m \u2264 5\u00b710^5;\u00a01 \u2264 k \u2264 n\u00b7m).\n\n\n-----Output-----\n\nPrint the k-th largest number in a n \u00d7 m multiplication table.\n\n\n-----Examples-----\nInput\n2 2 2\n\nOutput\n2\n\nInput\n2 3 4\n\nOutput\n3\n\nInput\n1 10 5\n\nOutput\n5\n\n\n\n-----Note-----\n\nA 2 \u00d7 3 multiplication table looks like this:\n\n1 2 3\n\n2 4 6",
    "generated_code": "def kth_largest_number(n, m, k):\n    l, r = 1, n * m\n    \n    while l < r:\n        mid = (l + r) // 2\n        count = 0\n        \n        for i in range(1, n + 1):\n            count += min(mid // i, m)\n        \n        if count < k:\n            l = mid + 1\n        else:\n            r = mid\n    \n    return l\n\n# Reading input\nn, m, k = map(int, input().split())\n\n# Output the result\nprint(kth_largest_number(n, m, k))\n",
    "pass_rate": 1.0,
    "passed_tests": 127,
    "total_tests": 127
}
{
    "task_id": "0049",
    "question": "Let's write all the positive integer numbers one after another from $1$ without any delimiters (i.e. as a single string). It will be the infinite sequence starting with 123456789101112131415161718192021222324252627282930313233343536...\n\nYour task is to print the $k$-th digit of this sequence.\n\n\n-----Input-----\n\nThe first and only line contains integer $k$ ($1 \\le k \\le 10^{12}$) \u2014 the position to process ($1$-based index).\n\n\n-----Output-----\n\nPrint the $k$-th digit of the resulting infinite sequence.\n\n\n-----Examples-----\nInput\n7\n\nOutput\n7\n\nInput\n21\n\nOutput\n5",
    "generated_code": "def find_kth_digit(k):\n    digit_length = 1\n    count = 9\n    current_range_start = 1\n\n    while k > digit_length * count:\n        k -= digit_length * count\n        digit_length += 1\n        count *= 10\n        current_range_start *= 10\n\n    number = current_range_start + (k - 1) // digit_length\n    digit_index = (k - 1) % digit_length\n\n    return str(number)[digit_index]\n\n# Read input\nk = int(input())\n# Print the k-th digit\nprint(find_kth_digit(k))\n",
    "pass_rate": 1.0,
    "passed_tests": 125,
    "total_tests": 125
}
{
    "task_id": "0050",
    "question": "Welcome to Codeforces Stock Exchange! We're pretty limited now as we currently allow trading on one stock, Codeforces Ltd. We hope you'll still be able to make profit from the market!\n\nIn the morning, there are $n$ opportunities to buy shares. The $i$-th of them allows to buy as many shares as you want, each at the price of $s_i$ bourles.\n\nIn the evening, there are $m$ opportunities to sell shares. The $i$-th of them allows to sell as many shares as you want, each at the price of $b_i$ bourles. You can't sell more shares than you have.\n\nIt's morning now and you possess $r$ bourles and no shares.\n\nWhat is the maximum number of bourles you can hold after the evening?\n\n\n-----Input-----\n\nThe first line of the input contains three integers $n, m, r$ ($1 \\leq n \\leq 30$, $1 \\leq m \\leq 30$, $1 \\leq r \\leq 1000$) \u2014 the number of ways to buy the shares on the market, the number of ways to sell the shares on the market, and the number of bourles you hold now.\n\nThe next line contains $n$ integers $s_1, s_2, \\dots, s_n$ ($1 \\leq s_i \\leq 1000$); $s_i$ indicates the opportunity to buy shares at the price of $s_i$ bourles.\n\nThe following line contains $m$ integers $b_1, b_2, \\dots, b_m$ ($1 \\leq b_i \\leq 1000$); $b_i$ indicates the opportunity to sell shares at the price of $b_i$ bourles.\n\n\n-----Output-----\n\nOutput a single integer \u2014 the maximum number of bourles you can hold after the evening.\n\n\n-----Examples-----\nInput\n3 4 11\n4 2 5\n4 4 5 4\n\nOutput\n26\n\nInput\n2 2 50\n5 7\n4 2\n\nOutput\n50\n\n\n\n-----Note-----\n\nIn the first example test, you have $11$ bourles in the morning. It's optimal to buy $5$ shares of a stock at the price of $2$ bourles in the morning, and then to sell all of them at the price of $5$ bourles in the evening. It's easy to verify that you'll have $26$ bourles after the evening.\n\nIn the second example test, it's optimal not to take any action.",
    "generated_code": "# Read the input values\nn, m, r = map(int, input().split())\ns = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# Find the minimum buy price and maximum sell price\nmin_buy_price = min(s)\nmax_sell_price = max(b)\n\n# Calculate the maximum number of shares we can buy\nif min_buy_price >= max_sell_price:\n    # If it's not profitable to buy and sell, keep the initial bourles\n    print(r)\nelse:\n    shares_bought = r // min_buy_price\n    remaining_bourles = r % min_buy_price\n    total_bourles_after_selling = shares_bought * max_sell_price + remaining_bourles\n    print(total_bourles_after_selling)\n",
    "pass_rate": 1.0,
    "passed_tests": 124,
    "total_tests": 124
}
{
    "task_id": "0051",
    "question": "\u0412 \u0411\u0435\u0440\u043b\u044f\u043d\u0434\u0441\u043a\u043e\u043c \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0435 \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0435\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430\u043c\u0438 \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0431\u0435\u0437 \u043e\u0448\u0438\u0431\u043e\u043a. \u041f\u0440\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0435 \u0434\u0432\u0443\u0445 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u0434\u0440\u044f\u0434 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0430 \u043e\u0448\u0438\u0431\u043a\u0430, \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u044d\u0442\u0438 \u0434\u0432\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u043b\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u043e\u0434\u043d\u043e. \u041f\u0440\u0438 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0438\u044f\u043d\u0438\u0438 \u043a\u043e\u043d\u0435\u0446 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u043e\u0432\u043c\u0435\u0449\u0430\u0435\u0442\u0441\u044f \u0441 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0432\u0442\u043e\u0440\u043e\u0433\u043e. \u041a\u043e\u043d\u0435\u0447\u043d\u043e, \u0441\u043e\u0432\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c. \u0414\u043b\u0438\u043d\u0430 \u0441\u043e\u0432\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0447\u0438\u0441\u043b\u043e\u043c, \u043c\u0435\u043d\u044c\u0448\u0438\u043c \u0434\u043b\u0438\u043d\u044b \u0442\u0435\u043a\u0441\u0442\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0435 \u0434\u0432\u0443\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u00ababrakadabra\u00bb \u043f\u043e\u0434\u0440\u044f\u0434 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0447\u0442\u043e \u043e\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e \u0441 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u0438\u0434\u0430, \u0438 \u0442\u043e\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0438\u0434\u0430 \u00ababrakadabrabrakadabra\u00bb \u0438\u043b\u0438 \u00ababrakadabrakadabra\u00bb (\u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043e\u0432\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u043e \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443, \u0430 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u2014 \u043f\u043e \u0447\u0435\u0442\u044b\u0440\u0435\u043c).\n\n\u041f\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u043c\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044e t \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043b\u0438, \u0447\u0442\u043e \u044d\u0442\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0448\u0438\u0431\u043a\u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0433\u043e \u0432\u0438\u0434\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0435\u0442\u0438, \u0438 \u0435\u0441\u043b\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 s. \n\n\u041d\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044e \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043d\u0430\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u0430 \u043d\u0430 \u0434\u0440\u0443\u0433\u0430 \u0434\u0432\u0443\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00ababcd\u00bb, \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c, \u0447\u0442\u043e \u0432 \u043d\u0451\u043c \u043e\u0448\u0438\u0431\u043a\u0438 \u043d\u0435\u0442. \u0410\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e, \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0434\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u043b\u0435\u0434 \u0437\u0430 \u0434\u0440\u0443\u0433\u0438\u043c \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c \u043e\u0448\u0438\u0431\u043a\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00ababcabc\u00bb, \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0441\u0447\u0438\u0442\u0430\u0442\u044c, \u0447\u0442\u043e \u0432 \u043d\u0451\u043c \u043e\u0448\u0438\u0431\u043a\u0438 \u043d\u0435\u0442.\n\n\n-----\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435-----\n\n\u0412 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043d\u0435\u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 t, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0438\u0437 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u0431\u0443\u043a\u0432 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430. \u0414\u043b\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 t \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u0438\u0442 100 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\n\n-----\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435-----\n\n\u0415\u0441\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 t \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043e\u0448\u0438\u0431\u043a\u0438, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u00abNO\u00bb (\u0431\u0435\u0437 \u043a\u0430\u0432\u044b\u0447\u0435\u043a) \u0432 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u00abYES\u00bb (\u0431\u0435\u0437 \u043a\u0430\u0432\u044b\u0447\u0435\u043a), \u0430 \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0443 s\u00a0\u2014 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0433\u043b\u043e \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u043e\u0448\u0438\u0431\u043a\u0435. \u0415\u0441\u043b\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e, \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442\u0441\u044f \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u043d\u0438\u0445.\n\n\n-----\u041f\u0440\u0438\u043c\u0435\u0440\u044b-----\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nabrakadabrabrakadabra\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nYES\nabrakadabra\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nacacacaca\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nYES\nacaca\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nabcabc\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nNO\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nabababab\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nYES\nababab\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\ntatbt\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nNO\n\n\n\n-----\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435-----\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u043c \u043e\u0442\u0432\u0435\u0442\u043e\u043c \u0442\u0430\u043a\u0436\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 acacaca.",
    "generated_code": "def find_possible_message(t):\n    n = len(t)\n\n    # Try to find the maximum overlap\n    for i in range(1, n):\n        if t.startswith(t[i:]):\n            s = t[:i]\n            return \"YES\", s\n    return \"NO\", None\n\nt = input().strip()\nresult, s = find_possible_message(t)\n\nif result == \"NO\":\n    print(result)\nelse:\n    print(result)\n    print(s)\n",
    "pass_rate": 0.024193548387096774,
    "passed_tests": 3,
    "total_tests": 124
}
{
    "task_id": "0052",
    "question": "Daniel is organizing a football tournament. He has come up with the following tournament format:   In the first several (possibly zero) stages, while the number of teams is even, they split in pairs and play one game for each pair. At each stage the loser of each pair is eliminated (there are no draws). Such stages are held while the number of teams is even.  Eventually there will be an odd number of teams remaining. If there is one team remaining, it will be declared the winner, and the tournament ends. Otherwise each of the remaining teams will play with each other remaining team once in round robin tournament (if there are x teams, there will be $\\frac{x \\cdot(x - 1)}{2}$ games), and the tournament ends. \n\nFor example, if there were 20 teams initially, they would begin by playing 10 games. So, 10 teams would be eliminated, and the remaining 10 would play 5 games. Then the remaining 5 teams would play 10 games in a round robin tournament. In total there would be 10+5+10=25 games.\n\nDaniel has already booked the stadium for n games. Help him to determine how many teams he should invite so that the tournament needs exactly n games. You should print all possible numbers of teams that will yield exactly n games in ascending order, or -1 if there are no such numbers.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^18), the number of games that should be played.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Output-----\n\nPrint all possible numbers of invited teams in ascending order, one per line. If exactly n games cannot be played, output one number: -1.\n\n\n-----Examples-----\nInput\n3\n\nOutput\n3\n4\n\nInput\n25\n\nOutput\n20\n\nInput\n2\n\nOutput\n-1",
    "generated_code": "def possible_teams(n):\n    results = []\n    max_teams = 2 * (n + 1)\n    for teams in range(1, max_teams + 1):\n        games_played = 0\n        current_teams = teams\n        \n        while current_teams % 2 == 0:\n            games_played += current_teams // 2\n            current_teams //= 2\n        \n        if current_teams > 1:\n            games_played += current_teams * (current_teams - 1) // 2\n        \n        if games_played == n:\n            results.append(teams)\n    \n    return results if results else [-1]\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    results = possible_teams(n)\n    for result in results:\n        print(result)\n",
    "pass_rate": 0.34146341463414637,
    "passed_tests": 42,
    "total_tests": 123
}
{
    "task_id": "0053",
    "question": "A string a of length m is called antipalindromic iff m is even, and for each i (1 \u2264 i \u2264 m) a_{i} \u2260 a_{m} - i + 1.\n\nIvan has a string s consisting of n lowercase Latin letters; n is even. He wants to form some string t that will be an antipalindromic permutation of s. Also Ivan has denoted the beauty of index i as b_{i}, and the beauty of t as the sum of b_{i} among all indices i such that s_{i} = t_{i}.\n\nHelp Ivan to determine maximum possible beauty of t he can get.\n\n\n-----Input-----\n\nThe first line contains one integer n (2 \u2264 n \u2264 100, n is even) \u2014 the number of characters in s.\n\nThe second line contains the string s itself. It consists of only lowercase Latin letters, and it is guaranteed that its letters can be reordered to form an antipalindromic string.\n\nThe third line contains n integer numbers b_1, b_2, ..., b_{n} (1 \u2264 b_{i} \u2264 100), where b_{i} is the beauty of index i.\n\n\n-----Output-----\n\nPrint one number \u2014 the maximum possible beauty of t.\n\n\n-----Examples-----\nInput\n8\nabacabac\n1 1 1 1 1 1 1 1\n\nOutput\n8\n\nInput\n8\nabaccaba\n1 2 3 4 5 6 7 8\n\nOutput\n26\n\nInput\n8\nabacabca\n1 2 3 4 4 3 2 1\n\nOutput\n17",
    "generated_code": "n = int(input())\ns = input().strip()\nbeauty = list(map(int, input().strip().split()))\n\n# Create a dictionary to keep track of the beauty scores of each character\nchar_beauty = {}\nfor i in range(n):\n    if s[i] not in char_beauty:\n        char_beauty[s[i]] = []\n    char_beauty[s[i]].append(beauty[i])\n\n# Sort the beauty scores of each character in descending order\nfor char in char_beauty:\n    char_beauty[char].sort(reverse=True)\n\n# To form the antipalindromic string, we need to pair characters in such a way\n# that no character at index i matches the character at index n - i - 1.\n# We will take the highest beauty scores for the first half and the second highest for the second half.\nmax_beauty = 0\nhalf_n = n // 2\n\n# Sort characters by the number of occurrences in descending order\nsorted_chars = sorted(char_beauty.keys(), key=lambda x: len(char_beauty[x]), reverse=True)\n\n# Create the antipalindromic string by distributing the characters\nfor char in sorted_chars:\n    beauties = char_beauty[char]\n    for i in range(len(beauties)):\n        # Add the beauty score to the maximum beauty\n        max_beauty += beauties[i]\n\nprint(max_beauty)\n",
    "pass_rate": 0.4098360655737705,
    "passed_tests": 50,
    "total_tests": 122
}
{
    "task_id": "0054",
    "question": "Vanya has a scales for weighing loads and weights of masses w^0, w^1, w^2, ..., w^100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.\n\n\n-----Input-----\n\nThe first line contains two integers w, m (2 \u2264 w \u2264 10^9, 1 \u2264 m \u2264 10^9) \u2014 the number defining the masses of the weights and the mass of the item.\n\n\n-----Output-----\n\nPrint word 'YES' if the item can be weighted and 'NO' if it cannot.\n\n\n-----Examples-----\nInput\n3 7\n\nOutput\nYES\n\nInput\n100 99\n\nOutput\nYES\n\nInput\n100 50\n\nOutput\nNO\n\n\n\n-----Note-----\n\nNote to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.\n\nNote to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.\n\nNote to the third sample test. It is impossible to measure the weight of the item in the manner described in the input.",
    "generated_code": "def can_balance(w, m):\n    while m > 0:\n        if m % w == 0:\n            m //= w\n        elif (m + 1) % w == 0:\n            m = (m + 1) // w\n        elif (m - 1) % w == 0:\n            m = (m - 1) // w\n        else:\n            return \"NO\"\n    return \"YES\"\n\nif __name__ == \"__main__\":\n    w, m = map(int, input().split())\n    print(can_balance(w, m))\n",
    "pass_rate": 0.9508196721311475,
    "passed_tests": 116,
    "total_tests": 122
}
{
    "task_id": "0055",
    "question": "Jamie is preparing a Codeforces round. He has got an idea for a problem, but does not know how to solve it. Help him write a solution to the following problem:\n\nFind k integers such that the sum of two to the power of each number equals to the number n and the largest integer in the answer is as small as possible. As there may be multiple answers, you are asked to output the lexicographically largest one. \n\nTo be more clear, consider all integer sequence with length k (a_1, a_2, ..., a_{k}) with $\\sum_{i = 1}^{k} 2^{a_{i}} = n$. Give a value $y = \\operatorname{max}_{1 \\leq i \\leq k} a_{i}$ to each sequence. Among all sequence(s) that have the minimum y value, output the one that is the lexicographically largest.\n\nFor definitions of powers and lexicographical order see notes.\n\n\n-----Input-----\n\nThe first line consists of two integers n and k (1 \u2264 n \u2264 10^18, 1 \u2264 k \u2264 10^5)\u00a0\u2014 the required sum and the length of the sequence.\n\n\n-----Output-----\n\nOutput \"No\" (without quotes) in a single line if there does not exist such sequence. Otherwise, output \"Yes\" (without quotes) in the first line, and k numbers separated by space in the second line\u00a0\u2014 the required sequence.\n\nIt is guaranteed that the integers in the answer sequence fit the range [ - 10^18, 10^18].\n\n\n-----Examples-----\nInput\n23 5\n\nOutput\nYes\n3 3 2 1 0 \n\nInput\n13 2\n\nOutput\nNo\n\nInput\n1 2\n\nOutput\nYes\n-1 -1 \n\n\n\n-----Note-----\n\nSample 1:\n\n2^3 + 2^3 + 2^2 + 2^1 + 2^0 = 8 + 8 + 4 + 2 + 1 = 23\n\nAnswers like (3, 3, 2, 0, 1) or (0, 1, 2, 3, 3) are not lexicographically largest.\n\nAnswers like (4, 1, 1, 1, 0) do not have the minimum y value.\n\nSample 2:\n\nIt can be shown there does not exist a sequence with length 2.\n\nSample 3:\n\n$2^{-1} + 2^{-1} = \\frac{1}{2} + \\frac{1}{2} = 1$\n\nPowers of 2:\n\nIf x > 0, then 2^{x} = 2\u00b72\u00b72\u00b7...\u00b72 (x times).\n\nIf x = 0, then 2^{x} = 1.\n\nIf x < 0, then $2^{x} = \\frac{1}{2^{-x}}$.\n\nLexicographical order:\n\nGiven two different sequences of the same length, (a_1, a_2, ... , a_{k}) and (b_1, b_2, ... , b_{k}), the first one is smaller than the second one for the lexicographical order, if and only if a_{i} < b_{i}, for the first i where a_{i} and b_{i} differ.",
    "generated_code": "def find_lexicographically_largest_sequence(n, k):\n    # Convert n to its binary representation to count the number of 1s\n    bits = bin(n).count('1')\n    \n    # If the number of 1s in binary representation of n is greater than k, it's impossible\n    if bits > k:\n        return \"No\"\n    \n    # Create a list with all the powers of 2 that sum up to n\n    powers = []\n    for i in range(61):\n        if n & (1 << i):\n            powers.append(i)\n    \n    # Add as many zeros as required to achieve the length k\n    while len(powers) < k:\n        powers.append(0)\n    \n    # Sort in lexicographically largest order\n    powers.sort(reverse=True)\n    \n    # Output the results\n    return f\"Yes\\n{' '.join(map(str, powers))}\"\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().strip().split()\nn = int(data[0])\nk = int(data[1])\n\n# Print output\nprint(find_lexicographically_largest_sequence(n, k))\n",
    "pass_rate": 0.5081967213114754,
    "passed_tests": 62,
    "total_tests": 122
}
{
    "task_id": "0056",
    "question": "Mary has just graduated from one well-known University and is now attending celebration party. Students like to dream of a beautiful life, so they used champagne glasses to construct a small pyramid. The height of the pyramid is n. The top level consists of only 1 glass, that stands on 2 glasses on the second level (counting from the top), then 3 glasses on the third level and so on.The bottom level consists of n glasses.\n\nVlad has seen in the movies many times how the champagne beautifully flows from top levels to bottom ones, filling all the glasses simultaneously. So he took a bottle and started to pour it in the glass located at the top of the pyramid.\n\nEach second, Vlad pours to the top glass the amount of champagne equal to the size of exactly one glass. If the glass is already full, but there is some champagne flowing in it, then it pours over the edge of the glass and is equally distributed over two glasses standing under. If the overflowed glass is at the bottom level, then the champagne pours on the table. For the purpose of this problem we consider that champagne is distributed among pyramid glasses immediately. Vlad is interested in the number of completely full glasses if he stops pouring champagne in t seconds.\n\nPictures below illustrate the pyramid consisting of three levels. [Image] [Image] \n\n\n-----Input-----\n\nThe only line of the input contains two integers n and t (1 \u2264 n \u2264 10, 0 \u2264 t \u2264 10 000)\u00a0\u2014 the height of the pyramid and the number of seconds Vlad will be pouring champagne from the bottle.\n\n\n-----Output-----\n\nPrint the single integer\u00a0\u2014 the number of completely full glasses after t seconds.\n\n\n-----Examples-----\nInput\n3 5\n\nOutput\n4\n\nInput\n4 8\n\nOutput\n6\n\n\n\n-----Note-----\n\nIn the first sample, the glasses full after 5 seconds are: the top glass, both glasses on the second level and the middle glass at the bottom level. Left and right glasses of the bottom level will be half-empty.",
    "generated_code": "n, t = map(int, input().split())\n\n# Create a 2D list to maintain the champagne amount in each glass\nglasses = [[0] * (i + 1) for i in range(n)]\n\n# Start pouring the champagne into the top glass\nglasses[0][0] = t\n\n# Distribute the champagne among the pyramid\nfor i in range(n):\n    for j in range(i + 1):\n        if glasses[i][j] > 1:\n            overflow = (glasses[i][j] - 1) / 2\n            glasses[i][j] = 1\n            if i + 1 < n:\n                glasses[i + 1][j] += overflow\n                glasses[i + 1][j + 1] += overflow\n\n# Count the number of completely full glasses\nfull_glasses = sum(1 for i in range(n) for j in range(i + 1) if glasses[i][j] >= 1)\n\nprint(full_glasses)\n",
    "pass_rate": 1.0,
    "passed_tests": 121,
    "total_tests": 121
}
{
    "task_id": "0057",
    "question": "After making bad dives into swimming pools, Wilbur wants to build a swimming pool in the shape of a rectangle in his backyard. He has set up coordinate axes, and he wants the sides of the rectangle to be parallel to them. Of course, the area of the rectangle must be positive. Wilbur had all four vertices of the planned pool written on a paper, until his friend came along and erased some of the vertices.\n\nNow Wilbur is wondering, if the remaining n vertices of the initial rectangle give enough information to restore the area of the planned swimming pool.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 4)\u00a0\u2014 the number of vertices that were not erased by Wilbur's friend.\n\nEach of the following n lines contains two integers x_{i} and y_{i} ( - 1000 \u2264 x_{i}, y_{i} \u2264 1000)\u00a0\u2014the coordinates of the i-th vertex that remains. Vertices are given in an arbitrary order.\n\nIt's guaranteed that these points are distinct vertices of some rectangle, that has positive area and which sides are parallel to the coordinate axes.\n\n\n-----Output-----\n\nPrint the area of the initial rectangle if it could be uniquely determined by the points remaining. Otherwise, print  - 1. \n\n\n-----Examples-----\nInput\n2\n0 0\n1 1\n\nOutput\n1\n\nInput\n1\n1 1\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first sample, two opposite corners of the initial rectangle are given, and that gives enough information to say that the rectangle is actually a unit square.\n\nIn the second sample there is only one vertex left and this is definitely not enough to uniquely define the area.",
    "generated_code": "def calculate_area(vertices):\n    if len(vertices) == 1:\n        return -1\n    elif len(vertices) == 2:\n        # Two points provided\n        (x1, y1), (x2, y2) = vertices\n        return abs(x2 - x1) * abs(y2 - y1)\n    elif len(vertices) == 3:\n        # Three points provided\n        (x1, y1), (x2, y2), (x3, y3) = vertices\n        if x1 == x2:\n            width = abs(x3 - x1)\n        elif x1 == x3:\n            width = abs(x2 - x1)\n        else:\n            width = abs(x2 - x3)\n        \n        if y1 == y2:\n            height = abs(y3 - y1)\n        elif y1 == y3:\n            height = abs(y2 - y1)\n        else:\n            height = abs(y2 - y3)\n\n        return width * height\n    else:\n        # Four points provided\n        x_coords = [x for x, y in vertices]\n        y_coords = [y for x, y in vertices]\n        width = max(x_coords) - min(x_coords)\n        height = max(y_coords) - min(y_coords)\n        return width * height\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nvertices = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(n)]\n\nprint(calculate_area(vertices))\n",
    "pass_rate": 0.6033057851239669,
    "passed_tests": 73,
    "total_tests": 121
}
{
    "task_id": "0058",
    "question": "Petya has equal wooden bars of length n. He wants to make a frame for two equal doors. Each frame has two vertical (left and right) sides of length a and one top side of length b. A solid (i.e. continuous without breaks) piece of bar is needed for each side.\n\nDetermine a minimal number of wooden bars which are needed to make the frames for two doors. Petya can cut the wooden bars into any parts, but each side of each door should be a solid piece of a wooden bar (or a whole wooden bar).\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 1 000) \u2014 the length of each wooden bar.\n\nThe second line contains a single integer a (1 \u2264 a \u2264 n) \u2014 the length of the vertical (left and right) sides of a door frame.\n\nThe third line contains a single integer b (1 \u2264 b \u2264 n) \u2014 the length of the upper side of a door frame.\n\n\n-----Output-----\n\nPrint the minimal number of wooden bars with length n which are needed to make the frames for two doors.\n\n\n-----Examples-----\nInput\n8\n1\n2\n\nOutput\n1\n\nInput\n5\n3\n4\n\nOutput\n6\n\nInput\n6\n4\n2\n\nOutput\n4\n\nInput\n20\n5\n6\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example one wooden bar is enough, since the total length of all six sides of the frames for two doors is 8.\n\nIn the second example 6 wooden bars is enough, because for each side of the frames the new wooden bar is needed.",
    "generated_code": "# Read input values\nn = int(input())\na = int(input())\nb = int(input())\n\n# Calculate the total length required for two doors\ntotal_length_needed = 2 * (2 * a + b)\n\n# Calculate the minimal number of wooden bars required\nmin_bars_needed = (total_length_needed + n - 1) // n\n\n# Output the result\nprint(min_bars_needed)\n",
    "pass_rate": 0.8083333333333333,
    "passed_tests": 97,
    "total_tests": 120
}
{
    "task_id": "0059",
    "question": "You have an array a consisting of n integers. Each integer from 1 to n appears exactly once in this array.\n\nFor some indices i (1 \u2264 i \u2264 n - 1) it is possible to swap i-th element with (i + 1)-th, for other indices it is not possible. You may perform any number of swapping operations any order. There is no limit on the number of times you swap i-th element with (i + 1)-th (if the position is not forbidden).\n\nCan you make this array sorted in ascending order performing some sequence of swapping operations?\n\n\n-----Input-----\n\nThe first line contains one integer n (2 \u2264 n \u2264 200000) \u2014 the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 200000) \u2014 the elements of the array. Each integer from 1 to n appears exactly once.\n\nThe third line contains a string of n - 1 characters, each character is either 0 or 1. If i-th character is 1, then you can swap i-th element with (i + 1)-th any number of times, otherwise it is forbidden to swap i-th element with (i + 1)-th.\n\n\n-----Output-----\n\nIf it is possible to sort the array in ascending order using any sequence of swaps you are allowed to make, print YES. Otherwise, print NO.\n\n\n-----Examples-----\nInput\n6\n1 2 5 3 4 6\n01110\n\nOutput\nYES\n\nInput\n6\n1 2 5 3 4 6\n01010\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example you may swap a_3 and a_4, and then swap a_4 and a_5.",
    "generated_code": "def can_sort_array(n, a, swaps):\n    # Initialize the start of the current segment\n    start = 0\n\n    while start < n - 1:\n        if swaps[start] == '0':\n            start += 1\n            continue\n\n        # Find the end of this segment\n        end = start\n        while end < n - 1 and swaps[end] == '1':\n            end += 1\n        \n        # Extract the segment we can swap\n        segment = a[start:end + 1]\n        # Sort the segment\n        sorted_segment = sorted(segment)\n        \n        # Check if the sorted segment matches the original segment\n        if sorted_segment != segment:\n            return \"NO\"\n        \n        # Move to the next segment\n        start = end + 1\n\n    return \"YES\"\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    n = int(data[0])\n    a = list(map(int, data[1:n+1]))\n    swaps = data[n+1]\n    \n    print(can_sort_array(n, a, swaps))\n",
    "pass_rate": 0.8166666666666667,
    "passed_tests": 98,
    "total_tests": 120
}
{
    "task_id": "0060",
    "question": "A new airplane SuperPuperJet has an infinite number of rows, numbered with positive integers starting with 1 from cockpit to tail. There are six seats in each row, denoted with letters from 'a' to 'f'. Seats 'a', 'b' and 'c' are located to the left of an aisle (if one looks in the direction of the cockpit), while seats 'd', 'e' and 'f' are located to the right. Seats 'a' and 'f' are located near the windows, while seats 'c' and 'd' are located near the aisle.  [Image] \n\n\u00a0\n\nIt's lunch time and two flight attendants have just started to serve food. They move from the first rows to the tail, always maintaining a distance of two rows from each other because of the food trolley. Thus, at the beginning the first attendant serves row 1 while the second attendant serves row 3. When both rows are done they move one row forward: the first attendant serves row 2 while the second attendant serves row 4. Then they move three rows forward and the first attendant serves row 5 while the second attendant serves row 7. Then they move one row forward again and so on.\n\nFlight attendants work with the same speed: it takes exactly 1 second to serve one passenger and 1 second to move one row forward. Each attendant first serves the passengers on the seats to the right of the aisle and then serves passengers on the seats to the left of the aisle (if one looks in the direction of the cockpit). Moreover, they always serve passengers in order from the window to the aisle. Thus, the first passenger to receive food in each row is located in seat 'f', and the last one\u00a0\u2014 in seat 'c'. Assume that all seats are occupied.\n\nVasya has seat s in row n and wants to know how many seconds will pass before he gets his lunch.\n\n\n-----Input-----\n\nThe only line of input contains a description of Vasya's seat in the format ns, where n (1 \u2264 n \u2264 10^18) is the index of the row and s is the seat in this row, denoted as letter from 'a' to 'f'. The index of the row and the seat are not separated by a space.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the number of seconds Vasya has to wait until he gets his lunch.\n\n\n-----Examples-----\nInput\n1f\n\nOutput\n1\n\nInput\n2d\n\nOutput\n10\n\nInput\n4a\n\nOutput\n11\n\nInput\n5e\n\nOutput\n18\n\n\n\n-----Note-----\n\nIn the first sample, the first flight attendant serves Vasya first, so Vasya gets his lunch after 1 second.\n\nIn the second sample, the flight attendants will spend 6 seconds to serve everyone in the rows 1 and 3, then they will move one row forward in 1 second. As they first serve seats located to the right of the aisle in order from window to aisle, Vasya has to wait 3 more seconds. The total is 6 + 1 + 3 = 10.",
    "generated_code": "def time_to_get_lunch(seat_description):\n    n = int(seat_description[:-1])\n    s = seat_description[-1]\n    \n    # Determine which flight attendant serves row n\n    if (n - 1) % 4 < 2:\n        position = 1  # First flight attendant\n    else:\n        position = 2  # Second flight attendant\n    \n    # Initial time to serve all previous complete sets of 4 rows\n    full_sets = (n - 1) // 4\n    time = full_sets * 8 * 3  # 8 seats per set and 3 seconds to serve each row\n    \n    # Time to move to the current set\n    if position == 1:\n        time += (n - 1) % 4 * 3\n    else:\n        time += ((n - 1) % 4 - 2) * 3 + 6  # Second attendant serves 2 rows ahead\n    \n    # Time to serve the current row\n    if position == 1:\n        if s == 'f':\n            time += 1\n        elif s == 'e':\n            time += 2\n        elif s == 'd':\n            time += 3\n        elif s == 'c':\n            time += 4\n        elif s == 'b':\n            time += 5\n        elif s == 'a':\n            time += 6\n    else:\n        if s == 'f':\n            time += 1\n        elif s == 'e':\n            time += 2\n        elif s == 'd':\n            time += 3\n        elif s == 'c':\n            time += 4\n        elif s == 'b':\n            time += 5\n        elif s == 'a':\n            time += 6\n\n    return time\n\n# Input\nseat_description = input().strip()\n\n# Output\nprint(time_to_get_lunch(seat_description))\n",
    "pass_rate": 0.04201680672268908,
    "passed_tests": 5,
    "total_tests": 119
}
{
    "task_id": "0061",
    "question": "After seeing the \"ALL YOUR BASE ARE BELONG TO US\" meme for the first time, numbers X and Y realised that they have different bases, which complicated their relations.\n\nYou're given a number X represented in base b_{x} and a number Y represented in base b_{y}. Compare those two numbers.\n\n\n-----Input-----\n\nThe first line of the input contains two space-separated integers n and b_{x} (1 \u2264 n \u2264 10, 2 \u2264 b_{x} \u2264 40), where n is the number of digits in the b_{x}-based representation of X. \n\nThe second line contains n space-separated integers x_1, x_2, ..., x_{n} (0 \u2264 x_{i} < b_{x}) \u2014 the digits of X. They are given in the order from the most significant digit to the least significant one.\n\nThe following two lines describe Y in the same way: the third line contains two space-separated integers m and b_{y} (1 \u2264 m \u2264 10, 2 \u2264 b_{y} \u2264 40, b_{x} \u2260 b_{y}), where m is the number of digits in the b_{y}-based representation of Y, and the fourth line contains m space-separated integers y_1, y_2, ..., y_{m} (0 \u2264 y_{i} < b_{y}) \u2014 the digits of Y.\n\nThere will be no leading zeroes. Both X and Y will be positive. All digits of both numbers are given in the standard decimal numeral system.\n\n\n-----Output-----\n\nOutput a single character (quotes for clarity):   '<' if X < Y  '>' if X > Y  '=' if X = Y \n\n\n-----Examples-----\nInput\n6 2\n1 0 1 1 1 1\n2 10\n4 7\n\nOutput\n=\n\nInput\n3 3\n1 0 2\n2 5\n2 4\n\nOutput\n<\n\nInput\n7 16\n15 15 4 0 0 7 10\n7 9\n4 8 0 3 1 5 0\n\nOutput\n>\n\n\n\n-----Note-----\n\nIn the first sample, X = 101111_2 = 47_10 = Y.\n\nIn the second sample, X = 102_3 = 21_5 and Y = 24_5 = 112_3, thus X < Y.\n\nIn the third sample, $X = FF 4007 A_{16}$ and Y = 4803150_9. We may notice that X starts with much larger digits and b_{x} is much larger than b_{y}, so X is clearly larger than Y.",
    "generated_code": "# Read input values\nn, b_x = map(int, input().split())\nx_digits = list(map(int, input().split()))\nm, b_y = map(int, input().split())\ny_digits = list(map(int, input().split()))\n\n# Function to convert a number in a given base to decimal\ndef to_decimal(digits, base):\n    decimal_value = 0\n    for digit in digits:\n        decimal_value = decimal_value * base + digit\n    return decimal_value\n\n# Convert both numbers to their decimal equivalents\nX = to_decimal(x_digits, b_x)\nY = to_decimal(y_digits, b_y)\n\n# Compare the two decimal values and print the appropriate result\nif X < Y:\n    print('<')\nelif X > Y:\n    print('>')\nelse:\n    print('=')\n",
    "pass_rate": 1.0,
    "passed_tests": 118,
    "total_tests": 118
}
{
    "task_id": "0062",
    "question": "Since most contestants do not read this part, I have to repeat that Bitlandians are quite weird. They have their own jobs, their own working method, their own lives, their own sausages and their own games!\n\nSince you are so curious about Bitland, I'll give you the chance of peeking at one of these games.\n\nBitLGM and BitAryo are playing yet another of their crazy-looking genius-needed Bitlandish games. They've got a sequence of n non-negative integers a_1, a_2, ..., a_{n}. The players make moves in turns. BitLGM moves first. Each player can and must do one of the two following actions in his turn:\n\n  Take one of the integers (we'll denote it as a_{i}). Choose integer x (1 \u2264 x \u2264 a_{i}). And then decrease a_{i} by x, that is, apply assignment: a_{i} = a_{i} - x.  Choose integer x $(1 \\leq x \\leq \\operatorname{min}_{i = 1} a_{i})$. And then decrease all a_{i} by x, that is, apply assignment: a_{i} = a_{i} - x, for all i. \n\nThe player who cannot make a move loses.\n\nYou're given the initial sequence a_1, a_2, ..., a_{n}. Determine who wins, if both players plays optimally well and if BitLGM and BitAryo start playing the described game in this sequence.\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 3).\n\nThe next line contains n integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} < 300).\n\n\n-----Output-----\n\nWrite the name of the winner (provided that both players play optimally well). Either \"BitLGM\" or \"BitAryo\" (without the quotes).\n\n\n-----Examples-----\nInput\n2\n1 1\n\nOutput\nBitLGM\n\nInput\n2\n1 2\n\nOutput\nBitAryo\n\nInput\n3\n1 2 1\n\nOutput\nBitLGM",
    "generated_code": "def determine_winner(n, a):\n    if n == 1:\n        # If there's only one element, whoever starts will win since they can always take the whole number\n        return \"BitLGM\"\n    elif n == 2:\n        # With two elements, use parity check\n        if a[0] == a[1]:\n            return \"BitLGM\"\n        else:\n            return \"BitAryo\"\n    elif n == 3:\n        # With three elements, use XOR to determine the winner\n        if a[0] ^ a[1] ^ a[2] == 0:\n            return \"BitAryo\"\n        else:\n            return \"BitLGM\"\n    return \"\"\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    n = int(data[0])\n    a = list(map(int, data[1:n+1]))\n    print(determine_winner(n, a))\n",
    "pass_rate": 0.8205128205128205,
    "passed_tests": 96,
    "total_tests": 117
}
{
    "task_id": "0063",
    "question": "Vova again tries to play some computer card game.\n\nThe rules of deck creation in this game are simple. Vova is given an existing deck of n cards and a magic number k. The order of the cards in the deck is fixed. Each card has a number written on it; number a_{i} is written on the i-th card in the deck.\n\nAfter receiving the deck and the magic number, Vova removes x (possibly x = 0) cards from the top of the deck, y (possibly y = 0) cards from the bottom of the deck, and the rest of the deck is his new deck (Vova has to leave at least one card in the deck after removing cards). So Vova's new deck actually contains cards x + 1, x + 2, ... n - y - 1, n - y from the original deck.\n\nVova's new deck is considered valid iff the product of all numbers written on the cards in his new deck is divisible by k. So Vova received a deck (possibly not a valid one) and a number k, and now he wonders, how many ways are there to choose x and y so the deck he will get after removing x cards from the top and y cards from the bottom is valid?\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 10^9).\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 the numbers written on the cards.\n\n\n-----Output-----\n\nPrint the number of ways to choose x and y so the resulting deck is valid.\n\n\n-----Examples-----\nInput\n3 4\n6 2 8\n\nOutput\n4\n\nInput\n3 6\n9 1 14\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example the possible values of x and y are:\n\n  x = 0, y = 0;  x = 1, y = 0;  x = 2, y = 0;  x = 0, y = 1.",
    "generated_code": "def count_ways_to_choose_deck(n, k, cards):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    if k == 1:\n        return n * (n + 1) // 2\n\n    from math import gcd\n    from itertools import accumulate\n\n    prefix_gcd = [0] * (n + 1)\n    suffix_gcd = [0] * (n + 1)\n\n    for i in range(n):\n        prefix_gcd[i + 1] = gcd(prefix_gcd[i], cards[i])\n\n    for i in range(n - 1, -1, -1):\n        suffix_gcd[i] = gcd(suffix_gcd[i + 1], cards[i])\n\n    count = 0\n    for x in range(n):\n        for y in range(n - x):\n            if gcd(prefix_gcd[x], suffix_gcd[n - y]) % k == 0:\n                count += 1\n    return count\n\n# Read input\nn, k = map(int, input().split())\ncards = list(map(int, input().split()))\n\n# Calculate and print the result\nresult = count_ways_to_choose_deck(n, k, cards)\nprint(result)\n",
    "pass_rate": 0.1810344827586207,
    "passed_tests": 21,
    "total_tests": 116
}
{
    "task_id": "0064",
    "question": "One day Kefa found n baloons. For convenience, we denote color of i-th baloon as s_{i} \u2014 lowercase letter of the Latin alphabet. Also Kefa has k friends. Friend will be upset, If he get two baloons of the same color. Kefa want to give out all baloons to his friends. Help Kefa to find out, can he give out all his baloons, such that no one of his friens will be upset \u2014 print \u00abYES\u00bb, if he can, and \u00abNO\u00bb, otherwise. Note, that Kefa's friend will not upset, if he doesn't get baloons at all.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 100) \u2014 the number of baloons and friends.\n\nNext line contains string s \u2014 colors of baloons.\n\n\n-----Output-----\n\nAnswer to the task \u2014 \u00abYES\u00bb or \u00abNO\u00bb in a single line.\n\nYou can choose the case (lower or upper) for each letter arbitrary.\n\n\n-----Examples-----\nInput\n4 2\naabb\n\nOutput\nYES\n\nInput\n6 3\naacaab\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first sample Kefa can give 1-st and 3-rd baloon to the first friend, and 2-nd and 4-th to the second.\n\nIn the second sample Kefa needs to give to all his friends baloons of color a, but one baloon will stay, thats why answer is \u00abNO\u00bb.",
    "generated_code": "n, k = map(int, input().split())\ns = input()\n\n# Count the occurrences of each balloon color\ncolor_counts = {}\nfor color in s:\n    if color in color_counts:\n        color_counts[color] += 1\n    else:\n        color_counts[color] = 1\n\n# Check if any color appears more times than k\ncan_distribute = all(count <= k for count in color_counts.values())\n\nif can_distribute:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
    "pass_rate": 1.0,
    "passed_tests": 114,
    "total_tests": 114
}
{
    "task_id": "0065",
    "question": "You are given an array of n integer numbers a_0, a_1, ..., a_{n} - 1. Find the distance between two closest (nearest) minimums in it. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Input-----\n\nThe first line contains positive integer n (2 \u2264 n \u2264 10^5) \u2014 size of the given array. The second line contains n integers a_0, a_1, ..., a_{n} - 1 (1 \u2264 a_{i} \u2264 10^9) \u2014 elements of the array. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Output-----\n\nPrint the only number \u2014 distance between two nearest minimums in the array.\n\n\n-----Examples-----\nInput\n2\n3 3\n\nOutput\n1\n\nInput\n3\n5 6 5\n\nOutput\n2\n\nInput\n9\n2 1 3 5 4 1 2 3 1\n\nOutput\n3",
    "generated_code": "# Read the input\nn = int(input())\narr = list(map(int, input().split()))\n\n# Find the minimum value in the array\nmin_val = min(arr)\n\n# Initialize variables to store the minimum distance\nmin_distance = float('inf')\nlast_pos = -1\n\n# Iterate through the array to find the positions of the minimum value\nfor i in range(n):\n    if arr[i] == min_val:\n        if last_pos != -1:\n            min_distance = min(min_distance, i - last_pos)\n        last_pos = i\n\n# Print the minimum distance\nprint(min_distance)\n",
    "pass_rate": 1.0,
    "passed_tests": 114,
    "total_tests": 114
}
{
    "task_id": "0066",
    "question": "Vector Willman and Array Bolt are the two most famous athletes of Byteforces. They are going to compete in a race with a distance of L meters today.\n\n [Image] \n\nWillman and Bolt have exactly the same speed, so when they compete the result is always a tie. That is a problem for the organizers because they want a winner. \n\nWhile watching previous races the organizers have noticed that Willman can perform only steps of length equal to w meters, and Bolt can perform only steps of length equal to b meters. Organizers decided to slightly change the rules of the race. Now, at the end of the racetrack there will be an abyss, and the winner will be declared the athlete, who manages to run farther from the starting point of the the racetrack (which is not the subject to change by any of the athletes). \n\nNote that none of the athletes can run infinitely far, as they both will at some moment of time face the point, such that only one step further will cause them to fall in the abyss. In other words, the athlete will not fall into the abyss if the total length of all his steps will be less or equal to the chosen distance L.\n\nSince the organizers are very fair, the are going to set the length of the racetrack as an integer chosen randomly and uniformly in range from 1 to t (both are included). What is the probability that Willman and Bolt tie again today?\n\n\n-----Input-----\n\nThe first line of the input contains three integers t, w and b (1 \u2264 t, w, b \u2264 5\u00b710^18) \u2014 the maximum possible length of the racetrack, the length of Willman's steps and the length of Bolt's steps respectively.\n\n\n-----Output-----\n\nPrint the answer to the problem as an irreducible fraction [Image]. Follow the format of the samples output.\n\nThe fraction [Image] (p and q are integers, and both p \u2265 0 and q > 0 holds) is called irreducible, if there is no such integer d > 1, that both p and q are divisible by d.\n\n\n-----Examples-----\nInput\n10 3 2\n\nOutput\n3/10\n\nInput\n7 1 2\n\nOutput\n3/7\n\n\n\n-----Note-----\n\nIn the first sample Willman and Bolt will tie in case 1, 6 or 7 are chosen as the length of the racetrack.",
    "generated_code": "import math\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solve(t, w, b):\n    if w > b:\n        w, b = b, w\n    \n    # The maximum lcm to be considered\n    lcm = w * (b // gcd(w, b))\n    # Count of numbers up to min(t, lcm - 1) that are multiples of w or b\n    tie_count = min(t, lcm - 1) // w + min(t, lcm - 1) // b - min(t, lcm - 1) // lcm\n    \n    # Add the numbers up to t that are multiples of both w and b if t >= lcm\n    if t >= lcm:\n        tie_count += t // lcm * (w + b - 1)\n    \n    # Total numbers considered\n    total = t\n    \n    # Reduce fraction\n    common_divisor = gcd(tie_count, total)\n    tie_count //= common_divisor\n    total //= common_divisor\n    \n    print(f\"{tie_count}/{total}\")\n\n# Reading input\nt, w, b = map(int, input().split())\nsolve(t, w, b)\n",
    "pass_rate": 0.017543859649122806,
    "passed_tests": 2,
    "total_tests": 114
}
{
    "task_id": "0067",
    "question": "Nauuo is a girl who loves writing comments.\n\nOne day, she posted a comment on Codeforces, wondering whether she would get upvotes or downvotes.\n\nIt's known that there were $x$ persons who would upvote, $y$ persons who would downvote, and there were also another $z$ persons who would vote, but you don't know whether they would upvote or downvote. Note that each of the $x+y+z$ people would vote exactly one time.\n\nThere are three different results: if there are more people upvote than downvote, the result will be \"+\"; if there are more people downvote than upvote, the result will be \"-\"; otherwise the result will be \"0\".\n\nBecause of the $z$ unknown persons, the result may be uncertain (i.e. there are more than one possible results). More formally, the result is uncertain if and only if there exist two different situations of how the $z$ persons vote, that the results are different in the two situations.\n\nTell Nauuo the result or report that the result is uncertain.\n\n\n-----Input-----\n\nThe only line contains three integers $x$, $y$, $z$ ($0\\le x,y,z\\le100$), corresponding to the number of persons who would upvote, downvote or unknown.\n\n\n-----Output-----\n\nIf there is only one possible result, print the result : \"+\", \"-\" or \"0\".\n\nOtherwise, print \"?\" to report that the result is uncertain.\n\n\n-----Examples-----\nInput\n3 7 0\n\nOutput\n-\nInput\n2 0 1\n\nOutput\n+\nInput\n1 1 0\n\nOutput\n0\nInput\n0 0 1\n\nOutput\n?\n\n\n-----Note-----\n\nIn the first example, Nauuo would definitely get three upvotes and seven downvotes, so the only possible result is \"-\".\n\nIn the second example, no matter the person unknown downvotes or upvotes, Nauuo would get more upvotes than downvotes. So the only possible result is \"+\".\n\nIn the third example, Nauuo would definitely get one upvote and one downvote, so the only possible result is \"0\".\n\nIn the fourth example, if the only one person upvoted, the result would be \"+\", otherwise, the result would be \"-\". There are two possible results, so the result is uncertain.",
    "generated_code": "x, y, z = map(int, input().split())\n\nif x > y + z:\n    print(\"+\")\nelif y > x + z:\n    print(\"-\")\nelif x == y and z == 0:\n    print(\"0\")\nelse:\n    print(\"?\")\n",
    "pass_rate": 1.0,
    "passed_tests": 114,
    "total_tests": 114
}
{
    "task_id": "0068",
    "question": "Vasya has got a robot which is situated on an infinite Cartesian plane, initially in the cell $(0, 0)$. Robot can perform the following four kinds of operations:   U \u2014 move from $(x, y)$ to $(x, y + 1)$;  D \u2014 move from $(x, y)$ to $(x, y - 1)$;  L \u2014 move from $(x, y)$ to $(x - 1, y)$;  R \u2014 move from $(x, y)$ to $(x + 1, y)$. \n\nVasya also has got a sequence of $n$ operations. Vasya wants to modify this sequence so after performing it the robot will end up in $(x, y)$.\n\nVasya wants to change the sequence so the length of changed subsegment is minimum possible. This length can be calculated as follows: $maxID - minID + 1$, where $maxID$ is the maximum index of a changed operation, and $minID$ is the minimum index of a changed operation. For example, if Vasya changes RRRRRRR to RLRRLRL, then the operations with indices $2$, $5$ and $7$ are changed, so the length of changed subsegment is $7 - 2 + 1 = 6$. Another example: if Vasya changes DDDD to DDRD, then the length of changed subsegment is $1$. \n\nIf there are no changes, then the length of changed subsegment is $0$. Changing an operation means replacing it with some operation (possibly the same); Vasya can't insert new operations into the sequence or remove them.\n\nHelp Vasya! Tell him the minimum length of subsegment that he needs to change so that the robot will go from $(0, 0)$ to $(x, y)$, or tell him that it's impossible.\n\n\n-----Input-----\n\nThe first line contains one integer number $n~(1 \\le n \\le 2 \\cdot 10^5)$ \u2014 the number of operations.\n\nThe second line contains the sequence of operations \u2014 a string of $n$ characters. Each character is either U, D, L or R.\n\nThe third line contains two integers $x, y~(-10^9 \\le x, y \\le 10^9)$ \u2014 the coordinates of the cell where the robot should end its path.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum possible length of subsegment that can be changed so the resulting sequence of operations moves the robot from $(0, 0)$ to $(x, y)$. If this change is impossible, print $-1$.\n\n\n-----Examples-----\nInput\n5\nRURUU\n-2 3\n\nOutput\n3\n\nInput\n4\nRULR\n1 1\n\nOutput\n0\n\nInput\n3\nUUU\n100 100\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example the sequence can be changed to LULUU. So the length of the changed subsegment is $3 - 1 + 1 = 3$.\n\nIn the second example the given sequence already leads the robot to $(x, y)$, so the length of the changed subsegment is $0$.\n\nIn the third example the robot can't end his path in the cell $(x, y)$.",
    "generated_code": "def get_min_length_to_reach_destination(n, operations, x, y):\n    # Calculate the net movements required to reach (x, y)\n    net_x, net_y = 0, 0\n    for op in operations:\n        if op == 'U':\n            net_y += 1\n        elif op == 'D':\n            net_y -= 1\n        elif op == 'L':\n            net_x -= 1\n        elif op == 'R':\n            net_x += 1\n\n    # Calculate the difference between current position and target position\n    diff_x, diff_y = net_x - x, net_y - y\n\n    # If the difference is zero, then we already reached the target\n    if diff_x == 0 and diff_y == 0:\n        return 0\n\n    # Use a sliding window to find the shortest subsegment that can balance the difference\n    min_length = float('inf')\n    left = 0\n\n    for right in range(n):\n        if operations[right] == 'U':\n            diff_y -= 1\n        elif operations[right] == 'D':\n            diff_y += 1\n        elif operations[right] == 'L':\n            diff_x += 1\n        elif operations[right] == 'R':\n            diff_x -= 1\n\n        # Try to balance the difference with the current window\n        while diff_x == 0 and diff_y == 0:\n            min_length = min(min_length, right - left + 1)\n            if operations[left] == 'U':\n                diff_y += 1\n            elif operations[left] == 'D':\n                diff_y -= 1\n            elif operations[left] == 'L':\n                diff_x -= 1\n            elif operations[left] == 'R':\n                diff_x += 1\n            left += 1\n\n    return -1 if min_length == float('inf') else min_length\n\n# Read input\nn = int(input())\noperations = input().strip()\nx, y = map(int, input().split())\n\n# Calculate and print the result\nprint(get_min_length_to_reach_destination(n, operations, x, y))\n",
    "pass_rate": 0.1504424778761062,
    "passed_tests": 17,
    "total_tests": 113
}
{
    "task_id": "0069",
    "question": "You are given string $s$ of length $n$ consisting of 0-s and 1-s. You build an infinite string $t$ as a concatenation of an infinite number of strings $s$, or $t = ssss \\dots$ For example, if $s =$ 10010, then $t =$ 100101001010010...\n\nCalculate the number of prefixes of $t$ with balance equal to $x$. The balance of some string $q$ is equal to $cnt_{0, q} - cnt_{1, q}$, where $cnt_{0, q}$ is the number of occurrences of 0 in $q$, and $cnt_{1, q}$ is the number of occurrences of 1 in $q$. The number of such prefixes can be infinite; if it is so, you must say that.\n\nA prefix is a string consisting of several first letters of a given string, without any reorders. An empty prefix is also a valid prefix. For example, the string \"abcd\" has 5 prefixes: empty string, \"a\", \"ab\", \"abc\" and \"abcd\".\n\n\n-----Input-----\n\nThe first line contains the single integer $T$ ($1 \\le T \\le 100$) \u2014 the number of test cases.\n\nNext $2T$ lines contain descriptions of test cases \u2014 two lines per test case. The first line contains two integers $n$ and $x$ ($1 \\le n \\le 10^5$, $-10^9 \\le x \\le 10^9$) \u2014 the length of string $s$ and the desired balance, respectively.\n\nThe second line contains the binary string $s$ ($|s| = n$, $s_i \\in \\{\\text{0}, \\text{1}\\}$).\n\nIt's guaranteed that the total sum of $n$ doesn't exceed $10^5$.\n\n\n-----Output-----\n\nPrint $T$ integers \u2014 one per test case. For each test case print the number of prefixes or $-1$ if there is an infinite number of such prefixes.\n\n\n-----Example-----\nInput\n4\n6 10\n010010\n5 3\n10101\n1 0\n0\n2 0\n01\n\nOutput\n3\n0\n1\n-1\n\n\n\n-----Note-----\n\nIn the first test case, there are 3 good prefixes of $t$: with length $28$, $30$ and $32$.",
    "generated_code": "def calculate_prefixes(T, test_cases):\n    results = []\n    for n, x, s in test_cases:\n        balance = [0] * (n + 1)\n        for i in range(n):\n            balance[i + 1] = balance[i] + (1 if s[i] == '0' else -1)\n        \n        total_balance = balance[n]\n        \n        if total_balance == 0:\n            found = False\n            for i in range(n + 1):\n                if balance[i] == x:\n                    results.append(-1)\n                    found = True\n                    break\n            if not found:\n                results.append(0)\n        else:\n            count = 0\n            for i in range(n + 1):\n                if (x - balance[i]) % total_balance == 0 and (x - balance[i]) // total_balance >= 0:\n                    count += 1\n            results.append(count)\n    \n    return results\n\n# Reading input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nT = int(data[0])\nindex = 1\ntest_cases = []\nfor _ in range(T):\n    n = int(data[index])\n    x = int(data[index + 1])\n    s = data[index + 2]\n    test_cases.append((n, x, s))\n    index += 3\n\n# Processing and printing results\nresults = calculate_prefixes(T, test_cases)\nfor result in results:\n    print(result)\n",
    "pass_rate": 0.5221238938053098,
    "passed_tests": 59,
    "total_tests": 113
}
{
    "task_id": "0070",
    "question": "Polycarp is crazy about round numbers. He especially likes the numbers divisible by 10^{k}.\n\nIn the given number of n Polycarp wants to remove the least number of digits to get a number that is divisible by 10^{k}. For example, if k = 3, in the number 30020 it is enough to delete a single digit (2). In this case, the result is 3000 that is divisible by 10^3 = 1000.\n\nWrite a program that prints the minimum number of digits to be deleted from the given integer number n, so that the result is divisible by 10^{k}. The result should not start with the unnecessary leading zero (i.e., zero can start only the number 0, which is required to be written as exactly one digit).\n\nIt is guaranteed that the answer exists.\n\n\n-----Input-----\n\nThe only line of the input contains two integer numbers n and k (0 \u2264 n \u2264 2 000 000 000, 1 \u2264 k \u2264 9).\n\nIt is guaranteed that the answer exists. All numbers in the input are written in traditional notation of integers, that is, without any extra leading zeros.\n\n\n-----Output-----\n\nPrint w \u2014 the required minimal number of digits to erase. After removing the appropriate w digits from the number n, the result should have a value that is divisible by 10^{k}. The result can start with digit 0 in the single case (the result is zero and written by exactly the only digit 0).\n\n\n-----Examples-----\nInput\n30020 3\n\nOutput\n1\n\nInput\n100 9\n\nOutput\n2\n\nInput\n10203049 2\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the example 2 you can remove two digits: 1 and any 0. The result is number 0 which is divisible by any number.",
    "generated_code": "n, k = input().split()\nn = list(n)\nk = int(k)\n\n# Reverse the list to facilitate counting zeros from the end\nn.reverse()\n\n# Count the number of zeros and the number of digits to remove\nzero_count = 0\nremove_count = 0\n\nfor digit in n:\n    if zero_count == k:\n        break\n    if digit == '0':\n        zero_count += 1\n    else:\n        remove_count += 1\n\nif zero_count < k:\n    # If there are not enough zeros, we need to remove the remaining digits\n    remove_count += (k - zero_count)\n\nprint(remove_count)\n",
    "pass_rate": 0.6216216216216216,
    "passed_tests": 69,
    "total_tests": 111
}
{
    "task_id": "0071",
    "question": "On the Literature lesson Sergei noticed an awful injustice, it seems that some students are asked more often than others.\n\nSeating in the class looks like a rectangle, where n rows with m pupils in each. \n\nThe teacher asks pupils in the following order: at first, she asks all pupils from the first row in the order of their seating, then she continues to ask pupils from the next row. If the teacher asked the last row, then the direction of the poll changes, it means that she asks the previous row. The order of asking the rows looks as follows: the 1-st row, the 2-nd row, ..., the n - 1-st row, the n-th row, the n - 1-st row, ..., the 2-nd row, the 1-st row, the 2-nd row, ...\n\nThe order of asking of pupils on the same row is always the same: the 1-st pupil, the 2-nd pupil, ..., the m-th pupil.\n\nDuring the lesson the teacher managed to ask exactly k questions from pupils in order described above. Sergei seats on the x-th row, on the y-th place in the row. Sergei decided to prove to the teacher that pupils are asked irregularly, help him count three values:  the maximum number of questions a particular pupil is asked,  the minimum number of questions a particular pupil is asked,  how many times the teacher asked Sergei. \n\nIf there is only one row in the class, then the teacher always asks children from this row.\n\n\n-----Input-----\n\nThe first and the only line contains five integers n, m, k, x and y (1 \u2264 n, m \u2264 100, 1 \u2264 k \u2264 10^18, 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m).\n\n\n-----Output-----\n\nPrint three integers:  the maximum number of questions a particular pupil is asked,  the minimum number of questions a particular pupil is asked,  how many times the teacher asked Sergei. \n\n\n-----Examples-----\nInput\n1 3 8 1 1\n\nOutput\n3 2 3\nInput\n4 2 9 4 2\n\nOutput\n2 1 1\nInput\n5 5 25 4 3\n\nOutput\n1 1 1\nInput\n100 100 1000000000000000000 100 100\n\nOutput\n101010101010101 50505050505051 50505050505051\n\n\n-----Note-----\n\nThe order of asking pupils in the first test:   the pupil from the first row who seats at the first table, it means it is Sergei;  the pupil from the first row who seats at the second table;  the pupil from the first row who seats at the third table;  the pupil from the first row who seats at the first table, it means it is Sergei;  the pupil from the first row who seats at the second table;  the pupil from the first row who seats at the third table;  the pupil from the first row who seats at the first table, it means it is Sergei;  the pupil from the first row who seats at the second table; \n\nThe order of asking pupils in the second test:   the pupil from the first row who seats at the first table;  the pupil from the first row who seats at the second table;  the pupil from the second row who seats at the first table;  the pupil from the second row who seats at the second table;  the pupil from the third row who seats at the first table;  the pupil from the third row who seats at the second table;  the pupil from the fourth row who seats at the first table;  the pupil from the fourth row who seats at the second table, it means it is Sergei;  the pupil from the third row who seats at the first table;",
    "generated_code": "# Read the input\nn, m, k, x, y = map(int, input().split())\n\n# Special case when there is only one row\nif n == 1:\n    max_questions = (k + m - 1) // m\n    min_questions = k // m\n    sergei_questions = (k + y - 1) // m\n    print(max_questions, min_questions, sergei_questions)\nelse:\n    # Calculate the full cycles\n    full_cycle = (2 * n - 2) * m\n    full_cycles = k // full_cycle\n    remaining_questions = k % full_cycle\n\n    # Calculate the number of questions each pupil gets in full cycles\n    max_questions = (full_cycles * 2) + 1\n    min_questions = full_cycles * 2\n\n    # Count the remaining questions\n    questions_per_pupil = [[0] * m for _ in range(n)]\n\n    # Forward direction\n    for i in range(n):\n        for j in range(m):\n            if remaining_questions > 0:\n                questions_per_pupil[i][j] += 1\n                remaining_questions -= 1\n\n    # Backward direction\n    for i in range(n-2, 0, -1):\n        for j in range(m):\n            if remaining_questions > 0:\n                questions_per_pupil[i][j] += 1\n                remaining_questions -= 1\n\n    # Update the max and min questions based on remaining questions\n    for i in range(n):\n        for j in range(m):\n            if questions_per_pupil[i][j] > 0:\n                max_questions = max(max_questions, full_cycles * 2 + questions_per_pupil[i][j])\n                min_questions = min(min_questions, full_cycles * 2 + questions_per_pupil[i][j])\n\n    # Find how many times Sergei was asked\n    sergei_questions = full_cycles * 2 + questions_per_pupil[x-1][y-1]\n\n    print(max_questions, min_questions, sergei_questions)\n",
    "pass_rate": 0.3153153153153153,
    "passed_tests": 35,
    "total_tests": 111
}
{
    "task_id": "0072",
    "question": "After the big birthday party, Katie still wanted Shiro to have some more fun. Later, she came up with a game called treasure hunt. Of course, she invited her best friends Kuro and Shiro to play with her.\n\nThe three friends are very smart so they passed all the challenges very quickly and finally reached the destination. But the treasure can only belong to one cat so they started to think of something which can determine who is worthy of the treasure. Instantly, Kuro came up with some ribbons.\n\nA random colorful ribbon is given to each of the cats. Each color of the ribbon can be represented as an uppercase or lowercase Latin letter. Let's call a consecutive subsequence of colors that appears in the ribbon a subribbon. The beauty of a ribbon is defined as the maximum number of times one of its subribbon appears in the ribbon. The more the subribbon appears, the more beautiful is the ribbon. For example, the ribbon aaaaaaa has the beauty of $7$ because its subribbon a appears $7$ times, and the ribbon abcdabc has the beauty of $2$ because its subribbon abc appears twice.\n\nThe rules are simple. The game will have $n$ turns. Every turn, each of the cats must change strictly one color (at one position) in his/her ribbon to an arbitrary color which is different from the unchanged one. For example, a ribbon aaab can be changed into acab in one turn. The one having the most beautiful ribbon after $n$ turns wins the treasure.\n\nCould you find out who is going to be the winner if they all play optimally?\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($0 \\leq n \\leq 10^{9}$)\u00a0\u2014 the number of turns.\n\nNext 3 lines contain 3 ribbons of Kuro, Shiro and Katie one per line, respectively. Each ribbon is a string which contains no more than $10^{5}$ uppercase and lowercase Latin letters and is not empty. It is guaranteed that the length of all ribbons are equal for the purpose of fairness. Note that uppercase and lowercase letters are considered different colors.\n\n\n-----Output-----\n\nPrint the name of the winner (\"Kuro\", \"Shiro\" or \"Katie\"). If there are at least two cats that share the maximum beauty, print \"Draw\".\n\n\n-----Examples-----\nInput\n3\nKuroo\nShiro\nKatie\n\nOutput\nKuro\n\nInput\n7\ntreasurehunt\nthreefriends\nhiCodeforces\n\nOutput\nShiro\n\nInput\n1\nabcabc\ncbabac\nababca\n\nOutput\nKatie\n\nInput\n15\nfoPaErcvJ\nmZaxowpbt\nmkuOlaHRE\n\nOutput\nDraw\n\n\n\n-----Note-----\n\nIn the first example, after $3$ turns, Kuro can change his ribbon into ooooo, which has the beauty of $5$, while reaching such beauty for Shiro and Katie is impossible (both Shiro and Katie can reach the beauty of at most $4$, for example by changing Shiro's ribbon into SSiSS and changing Katie's ribbon into Kaaaa). Therefore, the winner is Kuro.\n\nIn the fourth example, since the length of each of the string is $9$ and the number of turn is $15$, everyone can change their ribbons in some way to reach the maximal beauty of $9$ by changing their strings into zzzzzzzzz after 9 turns, and repeatedly change their strings into azzzzzzzz and then into zzzzzzzzz thrice. Therefore, the game ends in a draw.",
    "generated_code": "def max_beauty_after_n_turns(ribbon, n):\n    from collections import Counter\n    length = len(ribbon)\n    frequencies = Counter(ribbon)\n    max_beauty = 0\n    for char in frequencies:\n        if frequencies[char] + n >= length:\n            max_beauty = length\n        else:\n            max_beauty = max(max_beauty, frequencies[char] + n)\n    return max_beauty\n\ndef determine_winner(n, kuro, shiro, katie):\n    kuro_beauty = max_beauty_after_n_turns(kuro, n)\n    shiro_beauty = max_beauty_after_n_turns(shiro, n)\n    katie_beauty = max_beauty_after_n_turns(katie, n)\n    \n    beauties = [kuro_beauty, shiro_beauty, katie_beauty]\n    max_beauty = max(beauties)\n    \n    if beauties.count(max_beauty) > 1:\n        return \"Draw\"\n    elif max_beauty == kuro_beauty:\n        return \"Kuro\"\n    elif max_beauty == shiro_beauty:\n        return \"Shiro\"\n    else:\n        return \"Katie\"\n\n# Reading input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nkuro = data[1]\nshiro = data[2]\nkatie = data[3]\n\n# Determine the winner\nprint(determine_winner(n, kuro, shiro, katie))\n",
    "pass_rate": 0.9636363636363636,
    "passed_tests": 106,
    "total_tests": 110
}
{
    "task_id": "0073",
    "question": "Mister B once received a gift: it was a book about aliens, which he started read immediately. This book had c pages.\n\nAt first day Mister B read v_0 pages, but after that he started to speed up. Every day, starting from the second, he read a pages more than on the previous day (at first day he read v_0 pages, at second\u00a0\u2014 v_0 + a pages, at third\u00a0\u2014 v_0 + 2a pages, and so on). But Mister B is just a human, so he physically wasn't able to read more than v_1 pages per day.\n\nAlso, to refresh his memory, every day, starting from the second, Mister B had to reread last l pages he read on the previous day. Mister B finished the book when he read the last page for the first time.\n\nHelp Mister B to calculate how many days he needed to finish the book.\n\n\n-----Input-----\n\nFirst and only line contains five space-separated integers: c, v_0, v_1, a and l (1 \u2264 c \u2264 1000, 0 \u2264 l < v_0 \u2264 v_1 \u2264 1000, 0 \u2264 a \u2264 1000) \u2014 the length of the book in pages, the initial reading speed, the maximum reading speed, the acceleration in reading speed and the number of pages for rereading.\n\n\n-----Output-----\n\nPrint one integer \u2014 the number of days Mister B needed to finish the book.\n\n\n-----Examples-----\nInput\n5 5 10 5 4\n\nOutput\n1\n\nInput\n12 4 12 4 1\n\nOutput\n3\n\nInput\n15 1 100 0 0\n\nOutput\n15\n\n\n\n-----Note-----\n\nIn the first sample test the book contains 5 pages, so Mister B read it right at the first day.\n\nIn the second sample test at first day Mister B read pages number 1 - 4, at second day\u00a0\u2014 4 - 11, at third day\u00a0\u2014 11 - 12 and finished the book.\n\nIn third sample test every day Mister B read 1 page of the book, so he finished in 15 days.",
    "generated_code": "# Read input\nc, v_0, v_1, a, l = map(int, input().split())\n\n# Initialize variables\ndays = 0\npages_read = 0\ncurrent_speed = v_0\n\n# Simulate the reading process\nwhile pages_read < c:\n    days += 1\n    pages_read += current_speed\n    if pages_read >= c:\n        break\n    pages_read -= l\n    current_speed = min(current_speed + a, v_1)\n\n# Output the number of days needed\nprint(days)\n",
    "pass_rate": 1.0,
    "passed_tests": 110,
    "total_tests": 110
}
{
    "task_id": "0074",
    "question": "Dima loves representing an odd number as the sum of multiple primes, and Lisa loves it when there are at most three primes. Help them to represent the given number as the sum of at most than three primes.\n\nMore formally, you are given an odd numer n. Find a set of numbers p_{i} (1 \u2264 i \u2264 k), such that\n\n\n\n 1 \u2264 k \u2264 3\n\n p_{i} is a prime\n\n $\\sum_{i = 1}^{k} p_{i} = n$\n\nThe numbers p_{i} do not necessarily have to be distinct. It is guaranteed that at least one possible solution exists.\n\n\n-----Input-----\n\nThe single line contains an odd number n (3 \u2264 n < 10^9).\n\n\n-----Output-----\n\nIn the first line print k (1 \u2264 k \u2264 3), showing how many numbers are in the representation you found.\n\nIn the second line print numbers p_{i} in any order. If there are multiple possible solutions, you can print any of them.\n\n\n-----Examples-----\nInput\n27\n\nOutput\n3\n5 11 11\n\n\n\n-----Note-----\n\nA prime is an integer strictly larger than one that is divisible only by one and by itself.",
    "generated_code": "import sys\nimport math\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef find_three_primes(n):\n    if is_prime(n):\n        return [1, [n]]\n    if is_prime(n - 2):\n        return [2, [2, n - 2]]\n    for p1 in range(2, n):\n        if is_prime(p1):\n            for p2 in range(2, n - p1):\n                if is_prime(p2) and is_prime(n - p1 - p2):\n                    return [3, [p1, p2, n - p1 - p2]]\n    return None\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    result = find_three_primes(n)\n    if result:\n        print(result[0])\n        print(\" \".join(map(str, result[1])))\n",
    "pass_rate": 0.4954128440366973,
    "passed_tests": 54,
    "total_tests": 109
}
{
    "task_id": "0075",
    "question": "You are given a description of a depot. It is a rectangular checkered field of n \u00d7 m size. Each cell in a field can be empty (\".\") or it can be occupied by a wall (\"*\"). \n\nYou have one bomb. If you lay the bomb at the cell (x, y), then after triggering it will wipe out all walls in the row x and all walls in the column y.\n\nYou are to determine if it is possible to wipe out all walls in the depot by placing and triggering exactly one bomb. The bomb can be laid both in an empty cell or in a cell occupied by a wall.\n\n\n-----Input-----\n\nThe first line contains two positive integers n and m (1 \u2264 n, m \u2264 1000)\u00a0\u2014 the number of rows and columns in the depot field. \n\nThe next n lines contain m symbols \".\" and \"*\" each\u00a0\u2014 the description of the field. j-th symbol in i-th of them stands for cell (i, j). If the symbol is equal to \".\", then the corresponding cell is empty, otherwise it equals \"*\" and the corresponding cell is occupied by a wall.\n\n\n-----Output-----\n\nIf it is impossible to wipe out all walls by placing and triggering exactly one bomb, then print \"NO\" in the first line (without quotes).\n\nOtherwise print \"YES\" (without quotes) in the first line and two integers in the second line\u00a0\u2014 the coordinates of the cell at which the bomb should be laid. If there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n3 4\n.*..\n....\n.*..\n\nOutput\nYES\n1 2\n\nInput\n3 3\n..*\n.*.\n*..\n\nOutput\nNO\n\nInput\n6 5\n..*..\n..*..\n*****\n..*..\n..*..\n..*..\n\nOutput\nYES\n3 3",
    "generated_code": "# Read the input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nm = int(data[1])\ngrid = [data[i + 2] for i in range(n)]\n\n# Count the number of walls in each row and each column\nrow_walls = [0] * n\ncol_walls = [0] * m\ntotal_walls = 0\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*':\n            row_walls[i] += 1\n            col_walls[j] += 1\n            total_walls += 1\n\n# Check if there's a cell where we can place the bomb to clear all walls\nfor i in range(n):\n    for j in range(m):\n        # Total walls that will be cleared by placing the bomb in cell (i, j)\n        cleared_walls = row_walls[i] + col_walls[j]\n        if grid[i][j] == '*':\n            cleared_walls -= 1  # Avoid double counting the cell itself if it's a wall\n        if cleared_walls == total_walls:\n            print(\"YES\")\n            print(i + 1, j + 1)\n            exit()\n\nprint(\"NO\")\n",
    "pass_rate": 0.8596491228070176,
    "passed_tests": 98,
    "total_tests": 114
}
{
    "task_id": "0076",
    "question": "Berland Football Cup starts really soon! Commentators from all over the world come to the event.\n\nOrganizers have already built $n$ commentary boxes. $m$ regional delegations will come to the Cup. Every delegation should get the same number of the commentary boxes. If any box is left unoccupied then the delegations will be upset. So each box should be occupied by exactly one delegation.\n\nIf $n$ is not divisible by $m$, it is impossible to distribute the boxes to the delegations at the moment.\n\nOrganizers can build a new commentary box paying $a$ burles and demolish a commentary box paying $b$ burles. They can both build and demolish boxes arbitrary number of times (each time paying a corresponding fee). It is allowed to demolish all the existing boxes.\n\nWhat is the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by $m$)?\n\n\n-----Input-----\n\nThe only line contains four integer numbers $n$, $m$, $a$ and $b$ ($1 \\le n, m \\le 10^{12}$, $1 \\le a, b \\le 100$), where $n$ is the initial number of the commentary boxes, $m$ is the number of delegations to come, $a$ is the fee to build a box and $b$ is the fee to demolish a box.\n\n\n-----Output-----\n\nOutput the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by $m$). It is allowed that the final number of the boxes is equal to $0$.\n\n\n-----Examples-----\nInput\n9 7 3 8\n\nOutput\n15\n\nInput\n2 7 3 7\n\nOutput\n14\n\nInput\n30 6 17 19\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example organizers can build $5$ boxes to make the total of $14$ paying $3$ burles for the each of them.\n\nIn the second example organizers can demolish $2$ boxes to make the total of $0$ paying $7$ burles for the each of them.\n\nIn the third example organizers are already able to distribute all the boxes equally among the delegations, each one get $5$ boxes.",
    "generated_code": "# Read input values\nn, m, a, b = map(int, input().split())\n\n# Calculate the remainder when n is divided by m\nremainder = n % m\n\n# If n is already divisible by m, no cost is needed\nif remainder == 0:\n    print(0)\nelse:\n    # Calculate the cost to add boxes to make n divisible by m\n    cost_to_add = (m - remainder) * a\n    # Calculate the cost to remove boxes to make n divisible by m\n    cost_to_remove = remainder * b\n    # The minimal cost will be the lesser of the two calculated costs\n    print(min(cost_to_add, cost_to_remove))\n",
    "pass_rate": 1.0,
    "passed_tests": 109,
    "total_tests": 109
}
{
    "task_id": "0077",
    "question": "You are given sequence a_1, a_2, ..., a_{n} of integer numbers of length n. Your task is to find such subsequence that its sum is odd and maximum among all such subsequences. It's guaranteed that given sequence contains subsequence with odd sum.\n\nSubsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.\n\nYou should write a program which finds sum of the best subsequence.\n\n\n-----Input-----\n\nThe first line contains integer number n (1 \u2264 n \u2264 10^5).\n\nThe second line contains n integer numbers a_1, a_2, ..., a_{n} ( - 10^4 \u2264 a_{i} \u2264 10^4). The sequence contains at least one subsequence with odd sum.\n\n\n-----Output-----\n\nPrint sum of resulting subseqeuence.\n\n\n-----Examples-----\nInput\n4\n-2 2 -3 1\n\nOutput\n3\n\nInput\n3\n2 -5 -3\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example sum of the second and the fourth elements is 3.",
    "generated_code": "# Use Standard Input format\nimport sys\ninput = sys.stdin.read\n\ndef max_odd_sum_subsequence(n, arr):\n    total_sum = sum(arr)\n    if total_sum % 2 != 0:\n        return total_sum\n    smallest_odd = float('inf')\n    for num in arr:\n        if num % 2 != 0:\n            smallest_odd = min(smallest_odd, num)\n    if smallest_odd == float('inf'):\n        return -1\n    return total_sum - smallest_odd\n\ndef main():\n    data = input().split()\n    n = int(data[0])\n    arr = list(map(int, data[1:]))\n    print(max_odd_sum_subsequence(n, arr))\n\nif __name__ == \"__main__\":\n    main()\n",
    "pass_rate": 0.3669724770642202,
    "passed_tests": 40,
    "total_tests": 109
}
{
    "task_id": "0078",
    "question": "The only difference between easy and hard versions is constraints.\n\nPolycarp loves to listen to music, so he never leaves the player, even on the way home from the university. Polycarp overcomes the distance from the university to the house in exactly $T$ minutes.\n\nIn the player, Polycarp stores $n$ songs, each of which is characterized by two parameters: $t_i$ and $g_i$, where $t_i$ is the length of the song in minutes ($1 \\le t_i \\le 15$), $g_i$ is its genre ($1 \\le g_i \\le 3$).\n\nPolycarp wants to create such a playlist so that he can listen to music all the time on the way from the university to his home, and at the time of his arrival home, the playlist is over. Polycarp never interrupts songs and always listens to them from beginning to end. Thus, if he started listening to the $i$-th song, he would spend exactly $t_i$ minutes on its listening. Polycarp also does not like when two songs of the same genre play in a row (i.e. successively/adjacently) or when the songs in his playlist are repeated.\n\nHelp Polycarpus count the number of different sequences of songs (their order matters), the total duration is exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $T$ ($1 \\le n \\le 15, 1 \\le T \\le 225$) \u2014 the number of songs in the player and the required total duration, respectively.\n\nNext, the $n$ lines contain descriptions of songs: the $i$-th line contains two integers $t_i$ and $g_i$ ($1 \\le t_i \\le 15, 1 \\le g_i \\le 3$) \u2014 the duration of the $i$-th song and its genre, respectively.\n\n\n-----Output-----\n\nOutput one integer \u2014 the number of different sequences of songs, the total length of exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different. Since the answer may be huge, output it modulo $10^9 + 7$ (that is, the remainder when dividing the quantity by $10^9 + 7$).\n\n\n-----Examples-----\nInput\n3 3\n1 1\n1 2\n1 3\n\nOutput\n6\n\nInput\n3 3\n1 1\n1 1\n1 3\n\nOutput\n2\n\nInput\n4 10\n5 3\n2 1\n3 2\n5 1\n\nOutput\n10\n\n\n\n-----Note-----\n\nIn the first example, Polycarp can make any of the $6$ possible playlist by rearranging the available songs: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$ and $[3, 2, 1]$ (indices of the songs are given).\n\nIn the second example, the first and second songs cannot go in succession (since they have the same genre). Thus, Polycarp can create a playlist in one of $2$ possible ways: $[1, 3, 2]$ and $[2, 3, 1]$ (indices of the songs are given).\n\nIn the third example, Polycarp can make the following playlists: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$, $[3, 2, 1]$, $[1, 4]$, $[4, 1]$, $[2, 3, 4]$ and $[4, 3, 2]$ (indices of the songs are given).",
    "generated_code": "MOD = 10**9 + 7\n\ndef count_playlists(n, T, songs):\n    dp = [[[0] * (T + 1) for _ in range(4)] for _ in range(1 << n)]\n    for i in range(n):\n        if songs[i][0] <= T:\n            dp[1 << i][songs[i][1]][songs[i][0]] = 1\n    \n    for mask in range(1 << n):\n        for last_genre in range(1, 4):\n            for total_time in range(T + 1):\n                if dp[mask][last_genre][total_time] == 0:\n                    continue\n                for i in range(n):\n                    if mask & (1 << i) == 0:\n                        duration, genre = songs[i]\n                        if genre != last_genre and total_time + duration <= T:\n                            new_mask = mask | (1 << i)\n                            dp[new_mask][genre][total_time + duration] = (dp[new_mask][genre][total_time + duration] + dp[mask][last_genre][total_time]) % MOD\n    \n    result = 0\n    for last_genre in range(1, 4):\n        result = (result + dp[(1 << n) - 1][last_genre][T]) % MOD\n    \n    return result\n\n# Reading the input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\nT = int(data[1])\nsongs = [(int(data[i*2+2]), int(data[i*2+3])) for i in range(n)]\nprint(count_playlists(n, T, songs))\n",
    "pass_rate": 0.5412844036697247,
    "passed_tests": 59,
    "total_tests": 109
}
{
    "task_id": "0079",
    "question": "Vivek initially has an empty array $a$ and some integer constant $m$.\n\nHe performs the following algorithm:  Select a random integer $x$ uniformly in range from $1$ to $m$ and append it to the end of $a$.  Compute the greatest common divisor of integers in $a$.  In case it equals to $1$, break  Otherwise, return to step $1$. \n\nFind the expected length of $a$. It can be shown that it can be represented as $\\frac{P}{Q}$ where $P$ and $Q$ are coprime integers and $Q\\neq 0 \\pmod{10^9+7}$. Print the value of $P \\cdot Q^{-1} \\pmod{10^9+7}$.\n\n\n-----Input-----\n\nThe first and only line contains a single integer $m$ ($1 \\leq m \\leq 100000$).\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the expected length of the array $a$ written as $P \\cdot Q^{-1} \\pmod{10^9+7}$.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n1\n\nInput\n2\n\nOutput\n2\n\nInput\n4\n\nOutput\n333333338\n\n\n\n-----Note-----\n\nIn the first example, since Vivek can choose only integers from $1$ to $1$, he will have $a=[1]$ after the first append operation, and after that quit the algorithm. Hence the length of $a$ is always $1$, so its expected value is $1$ as well.\n\nIn the second example, Vivek each time will append either $1$ or $2$, so after finishing the algorithm he will end up having some number of $2$'s (possibly zero), and a single $1$ in the end. The expected length of the list is $1\\cdot \\frac{1}{2} + 2\\cdot \\frac{1}{2^2} + 3\\cdot \\frac{1}{2^3} + \\ldots = 2$.",
    "generated_code": "MOD = 10**9 + 7\n\ndef mod_inv(x, p):\n    return pow(x, p - 2, p)\n\ndef euler_totient(n):\n    phi = list(range(n + 1))\n    for i in range(2, n + 1):\n        if phi[i] == i:  # i is a prime\n            for j in range(i, n + 1, i):\n                phi[j] *= (i - 1)\n                phi[j] //= i\n    return phi\n\ndef expected_length(m):\n    phi = euler_totient(m)\n    P, Q = 0, 1\n    for i in range(1, m + 1):\n        P = (P * i + Q * phi[i]) % MOD\n        Q = Q * i % MOD\n    result = P * mod_inv(Q, MOD) % MOD\n    return result\n\nm = int(input())\nprint(expected_length(m))\n",
    "pass_rate": 0.009174311926605505,
    "passed_tests": 1,
    "total_tests": 109
}
{
    "task_id": "0080",
    "question": "Today on Informatics class Nastya learned about GCD and LCM (see links below). Nastya is very intelligent, so she solved all the tasks momentarily and now suggests you to solve one of them as well.\n\nWe define a pair of integers (a, b) good, if GCD(a, b) = x and LCM(a, b) = y, where GCD(a, b) denotes the greatest common divisor of a and b, and LCM(a, b) denotes the least common multiple of a and b.\n\nYou are given two integers x and y. You are to find the number of good pairs of integers (a, b) such that l \u2264 a, b \u2264 r. Note that pairs (a, b) and (b, a) are considered different if a \u2260 b.\n\n\n-----Input-----\n\nThe only line contains four integers l, r, x, y (1 \u2264 l \u2264 r \u2264 10^9, 1 \u2264 x \u2264 y \u2264 10^9).\n\n\n-----Output-----\n\nIn the only line print the only integer\u00a0\u2014 the answer for the problem.\n\n\n-----Examples-----\nInput\n1 2 1 2\n\nOutput\n2\n\nInput\n1 12 1 12\n\nOutput\n4\n\nInput\n50 100 3 30\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example there are two suitable good pairs of integers (a, b): (1, 2) and (2, 1).\n\nIn the second example there are four suitable good pairs of integers (a, b): (1, 12), (12, 1), (3, 4) and (4, 3).\n\nIn the third example there are good pairs of integers, for example, (3, 30), but none of them fits the condition l \u2264 a, b \u2264 r.",
    "generated_code": "import math\nimport sys\ninput = sys.stdin.read\n\ndef find_good_pairs(l, r, x, y):\n    if y % x != 0:\n        return 0\n\n    good_pairs_count = 0\n    product = y // x\n\n    for a in range(1, int(math.sqrt(product)) + 1):\n        if product % a == 0:\n            b = product // a\n            a *= x\n            b *= x\n            if a >= l and a <= r and b >= l and b <= r and math.gcd(a, b) == x:\n                if a != b:\n                    good_pairs_count += 2  # (a, b) and (b, a)\n                else:\n                    good_pairs_count += 1  # (a, a)\n    \n    return good_pairs_count\n\nif __name__ == \"__main__\":\n    l, r, x, y = map(int, input().strip().split())\n    print(find_good_pairs(l, r, x, y))\n",
    "pass_rate": 1.0,
    "passed_tests": 108,
    "total_tests": 108
}
{
    "task_id": "0081",
    "question": "Neko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.\n\nNeko has two integers $a$ and $b$. His goal is to find a non-negative integer $k$ such that the least common multiple of $a+k$ and $b+k$ is the smallest possible. If there are multiple optimal integers $k$, he needs to choose the smallest one.\n\nGiven his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n\n-----Input-----\n\nThe only line contains two integers $a$ and $b$ ($1 \\le a, b \\le 10^9$).\n\n\n-----Output-----\n\nPrint the smallest non-negative integer $k$ ($k \\ge 0$) such that the lowest common multiple of $a+k$ and $b+k$ is the smallest possible.\n\nIf there are many possible integers $k$ giving the same value of the least common multiple, print the smallest one.\n\n\n-----Examples-----\nInput\n6 10\n\nOutput\n2\nInput\n21 31\n\nOutput\n9\nInput\n5 10\n\nOutput\n0\n\n\n-----Note-----\n\nIn the first test, one should choose $k = 2$, as the least common multiple of $6 + 2$ and $10 + 2$ is $24$, which is the smallest least common multiple possible.",
    "generated_code": "import math\n\ndef find_minimum_k(a, b):\n    if a == b:\n        return 0\n    \n    d = abs(a - b)\n    min_lcm = float('inf')\n    min_k = 0\n    \n    for g in range(1, int(math.sqrt(d)) + 1):\n        if d % g == 0:\n            for divisor in [g, d // g]:\n                k = (divisor - a % divisor) % divisor\n                lcm_val = (a + k) * (b + k) // math.gcd(a + k, b + k)\n                \n                if lcm_val < min_lcm:\n                    min_lcm = lcm_val\n                    min_k = k\n                elif lcm_val == min_lcm:\n                    min_k = min(min_k, k)\n    \n    return min_k\n\n# Reading input\na, b = map(int, input().strip().split())\n\n# Finding and printing the minimum k\nprint(find_minimum_k(a, b))\n",
    "pass_rate": 1.0,
    "passed_tests": 108,
    "total_tests": 108
}
{
    "task_id": "0082",
    "question": "Noora is a student of one famous high school. It's her final year in school\u00a0\u2014 she is going to study in university next year. However, she has to get an \u00abA\u00bb graduation certificate in order to apply to a prestigious one.\n\nIn school, where Noora is studying, teachers are putting down marks to the online class register, which are integers from 1 to k. The worst mark is 1, the best is k. Mark that is going to the certificate, is calculated as an average of all the marks, rounded to the closest integer. If several answers are possible, rounding up is produced. For example, 7.3 is rounded to 7, but 7.5 and 7.8784\u00a0\u2014 to 8. \n\nFor instance, if Noora has marks [8, 9], then the mark to the certificate is 9, because the average is equal to 8.5 and rounded to 9, but if the marks are [8, 8, 9], Noora will have graduation certificate with 8.\n\nTo graduate with \u00abA\u00bb certificate, Noora has to have mark k.\n\nNoora got n marks in register this year. However, she is afraid that her marks are not enough to get final mark k. Noora decided to ask for help in the internet, where hacker Leha immediately responded to her request. He is ready to hack class register for Noora and to add Noora any number of additional marks from 1 to k. At the same time, Leha want his hack be unseen to everyone, so he decided to add as less as possible additional marks. Please help Leha to calculate the minimal number of marks he has to add, so that final Noora's mark will become equal to k.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 100) denoting the number of marks, received by Noora and the value of highest possible mark.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 k) denoting marks received by Noora before Leha's hack.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 minimal number of additional marks, that Leha has to add in order to change Noora's final mark to k.\n\n\n-----Examples-----\nInput\n2 10\n8 9\n\nOutput\n4\nInput\n3 5\n4 4 4\n\nOutput\n3\n\n\n-----Note-----\n\nConsider the first example testcase.\n\nMaximal mark is 10, Noora received two marks\u00a0\u2014 8 and 9, so current final mark is 9. To fix it, Leha can add marks [10, 10, 10, 10] (4 marks in total) to the registry, achieving Noora having average mark equal to $\\frac{8 + 9 + 10 + 10 + 10 + 10}{6} = \\frac{57}{6} = 9.5$. Consequently, new final mark is 10. Less number of marks won't fix the situation.\n\nIn the second example Leha can add [5, 5, 5] to the registry, so that making average mark equal to 4.5, which is enough to have 5 in the certificate.",
    "generated_code": "# Use Standard Input format\nimport math\n\n# Read input values\nn, k = map(int, input().split())\nmarks = list(map(int, input().split()))\n\n# Calculate the current sum of marks\ncurrent_sum = sum(marks)\n\n# Calculate the current average mark\ncurrent_average = current_sum / n\n\n# If the current average is already k, no additional marks are needed\nif current_average >= k:\n    print(0)\nelse:\n    # Initialize the number of additional marks needed\n    additional_marks_needed = 0\n\n    # Keep adding the highest mark (k) until the average reaches or exceeds k\n    while True:\n        additional_marks_needed += 1\n        new_sum = current_sum + additional_marks_needed * k\n        new_total_marks = n + additional_marks_needed\n        new_average = new_sum / new_total_marks\n        \n        # Check if the new average is sufficient\n        if new_average >= k:\n            print(additional_marks_needed)\n            break\n",
    "pass_rate": 0.330188679245283,
    "passed_tests": 35,
    "total_tests": 106
}
{
    "task_id": "0083",
    "question": "You are given an array of $n$ integers: $a_1, a_2, \\ldots, a_n$. Your task is to find some non-zero integer $d$ ($-10^3 \\leq d \\leq 10^3$) such that, after each number in the array is divided by $d$, the number of positive numbers that are presented in the array is greater than or equal to half of the array size (i.e., at least $\\lceil\\frac{n}{2}\\rceil$). Note that those positive numbers do not need to be an integer (e.g., a $2.5$ counts as a positive number). If there are multiple values of $d$ that satisfy the condition, you may print any of them. In case that there is no such $d$, print a single integer $0$.\n\nRecall that $\\lceil x \\rceil$ represents the smallest integer that is not less than $x$ and that zero ($0$) is neither positive nor negative.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($1 \\le n \\le 100$)\u00a0\u2014 the number of elements in the array.\n\nThe second line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($-10^3 \\le a_i \\le 10^3$).\n\n\n-----Output-----\n\nPrint one integer $d$ ($-10^3 \\leq d \\leq 10^3$ and $d \\neq 0$) that satisfies the given condition. If there are multiple values of $d$ that satisfy the condition, you may print any of them. In case that there is no such $d$, print a single integer $0$.\n\n\n-----Examples-----\nInput\n5\n10 0 -7 2 6\nOutput\n4\nInput\n7\n0 0 1 -1 0 0 2\n\nOutput\n0\n\n\n-----Note-----\n\nIn the first sample, $n = 5$, so we need at least $\\lceil\\frac{5}{2}\\rceil = 3$ positive numbers after division. If $d = 4$, the array after division is $[2.5, 0, -1.75, 0.5, 1.5]$, in which there are $3$ positive numbers (namely: $2.5$, $0.5$, and $1.5$).\n\nIn the second sample, there is no valid $d$, so $0$ should be printed.",
    "generated_code": "def find_d(n, arr):\n    for d in range(1, 1001):\n        positive_count = sum(1 for x in arr if x / d > 0)\n        if positive_count >= (n + 1) // 2:\n            return d\n    for d in range(-1, -1001, -1):\n        positive_count = sum(1 for x in arr if x / d > 0)\n        if positive_count >= (n + 1) // 2:\n            return d\n    return 0\n\nn = int(input())\narr = list(map(int, input().split()))\n\nprint(find_d(n, arr))\n",
    "pass_rate": 1.0,
    "passed_tests": 106,
    "total_tests": 106
}
{
    "task_id": "0084",
    "question": "There are n shovels in Polycarp's shop. The i-th shovel costs i burles, that is, the first shovel costs 1 burle, the second shovel costs 2 burles, the third shovel costs 3 burles, and so on. Polycarps wants to sell shovels in pairs.\n\nVisitors are more likely to buy a pair of shovels if their total cost ends with several 9s. Because of this, Polycarp wants to choose a pair of shovels to sell in such a way that the sum of their costs ends with maximum possible number of nines. For example, if he chooses shovels with costs 12345 and 37454, their total cost is 49799, it ends with two nines.\n\nYou are to compute the number of pairs of shovels such that their total cost ends with maximum possible number of nines. Two pairs are considered different if there is a shovel presented in one pair, but not in the other.\n\n\n-----Input-----\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^9) \u2014 the number of shovels in Polycarp's shop.\n\n\n-----Output-----\n\nPrint the number of pairs of shovels such that their total cost ends with maximum possible number of nines. \n\nNote that it is possible that the largest number of 9s at the end is 0, then you should count all such ways.\n\nIt is guaranteed that for every n \u2264 10^9 the answer doesn't exceed 2\u00b710^9.\n\n\n-----Examples-----\nInput\n7\n\nOutput\n3\n\nInput\n14\n\nOutput\n9\n\nInput\n50\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example the maximum possible number of nines at the end is one. Polycarp cah choose the following pairs of shovels for that purpose:  2 and 7;  3 and 6;  4 and 5. \n\nIn the second example the maximum number of nines at the end of total cost of two shovels is one. The following pairs of shovels suit Polycarp:  1 and 8;  2 and 7;  3 and 6;  4 and 5;  5 and 14;  6 and 13;  7 and 12;  8 and 11;  9 and 10. \n\nIn the third example it is necessary to choose shovels 49 and 50, because the sum of their cost is 99, that means that the total number of nines is equal to two, which is maximum possible for n = 50.",
    "generated_code": "def find_pairs_with_max_nines(n):\n    max_nines_count = 0\n    for i in range(1, n // 2 + 1):\n        sum_cost = i + (n - i)\n        reversed_sum_str = str(sum_cost)[::-1]\n        \n        count_nines = 0\n        for ch in reversed_sum_str:\n            if ch == '9':\n                count_nines += 1\n            else:\n                break\n        \n        if count_nines > max_nines_count:\n            max_nines_count = count_nines\n    \n    return max_nines_count\n\nn = int(input())\nprint(find_pairs_with_max_nines(n))\n",
    "pass_rate": 0.0,
    "passed_tests": 0,
    "total_tests": 106
}
{
    "task_id": "0085",
    "question": "Polycarpus likes giving presents to Paraskevi. He has bought two chocolate bars, each of them has the shape of a segmented rectangle. The first bar is a_1 \u00d7 b_1 segments large and the second one is a_2 \u00d7 b_2 segments large.\n\nPolycarpus wants to give Paraskevi one of the bars at the lunch break and eat the other one himself. Besides, he wants to show that Polycarpus's mind and Paraskevi's beauty are equally matched, so the two bars must have the same number of squares.\n\nTo make the bars have the same number of squares, Polycarpus eats a little piece of chocolate each minute. Each minute he does the following:  he either breaks one bar exactly in half (vertically or horizontally) and eats exactly a half of the bar,  or he chips of exactly one third of a bar (vertically or horizontally) and eats exactly a third of the bar. \n\nIn the first case he is left with a half, of the bar and in the second case he is left with two thirds of the bar.\n\nBoth variants aren't always possible, and sometimes Polycarpus cannot chip off a half nor a third. For example, if the bar is 16 \u00d7 23, then Polycarpus can chip off a half, but not a third. If the bar is 20 \u00d7 18, then Polycarpus can chip off both a half and a third. If the bar is 5 \u00d7 7, then Polycarpus cannot chip off a half nor a third.\n\nWhat is the minimum number of minutes Polycarpus needs to make two bars consist of the same number of squares? Find not only the required minimum number of minutes, but also the possible sizes of the bars after the process.\n\n\n-----Input-----\n\nThe first line of the input contains integers a_1, b_1 (1 \u2264 a_1, b_1 \u2264 10^9) \u2014 the initial sizes of the first chocolate bar. The second line of the input contains integers a_2, b_2 (1 \u2264 a_2, b_2 \u2264 10^9) \u2014 the initial sizes of the second bar.\n\nYou can use the data of type int64 (in Pascal), long long (in \u0421++), long (in Java) to process large integers (exceeding 2^31 - 1).\n\n\n-----Output-----\n\nIn the first line print m \u2014 the sought minimum number of minutes. In the second and third line print the possible sizes of the bars after they are leveled in m minutes. Print the sizes using the format identical to the input format. Print the sizes (the numbers in the printed pairs) in any order. The second line must correspond to the first bar and the third line must correspond to the second bar. If there are multiple solutions, print any of them.\n\nIf there is no solution, print a single line with integer -1.\n\n\n-----Examples-----\nInput\n2 6\n2 3\n\nOutput\n1\n1 6\n2 3\n\nInput\n36 5\n10 16\n\nOutput\n3\n16 5\n5 16\n\nInput\n3 5\n2 1\n\nOutput\n-1",
    "generated_code": "from collections import deque\nimport math\n\ndef min_operations_to_equal_areas(a1, b1, a2, b2):\n    area1 = a1 * b1\n    area2 = a2 * b2\n    \n    if area1 == area2:\n        return 0, (a1, b1), (a2, b2)\n    \n    def possible_operations(area):\n        halves = []\n        thirds = []\n        if area % 2 == 0:\n            halves.append(area // 2)\n        if area % 3 == 0:\n            thirds.append(2 * (area // 3))\n        return halves + thirds\n    \n    visited = set()\n    queue = deque([(area1, area2, 0, (a1, b1), (a2, b2))])\n    visited.add((area1, area2))\n    \n    while queue:\n        curr_area1, curr_area2, steps, dim1, dim2 = queue.popleft()\n        \n        for new_area1 in possible_operations(curr_area1):\n            if new_area1 == curr_area2:\n                return steps + 1, (dim1[0] * new_area1 // curr_area1, dim1[1] * new_area1 // curr_area1), dim2\n            if (new_area1, curr_area2) not in visited:\n                visited.add((new_area1, curr_area2))\n                queue.append((new_area1, curr_area2, steps + 1, (dim1[0] * new_area1 // curr_area1, dim1[1] * new_area1 // curr_area1), dim2))\n        \n        for new_area2 in possible_operations(curr_area2):\n            if new_area2 == curr_area1:\n                return steps + 1, dim1, (dim2[0] * new_area2 // curr_area2, dim2[1] * new_area2 // curr_area2)\n            if (curr_area1, new_area2) not in visited:\n                visited.add((curr_area1, new_area2))\n                queue.append((curr_area1, new_area2, steps + 1, dim1, (dim2[0] * new_area2 // curr_area2, dim2[1] * new_area2 // curr_area2)))\n    \n    return -1\n\n# Read input\na1, b1 = map(int, input().split())\na2, b2 = map(int, input().split())\n\nresult = min_operations_to_equal_areas(a1, b1, a2, b2)\nif result == -1:\n    print(-1)\nelse:\n    steps, new_dim1, new_dim2 = result\n    print(steps)\n    print(new_dim1[0], new_dim1[1])\n    print(new_dim2[0], new_dim2[1])\n",
    "pass_rate": 0.2641509433962264,
    "passed_tests": 28,
    "total_tests": 106
}
{
    "task_id": "0086",
    "question": "Polycarp and Vasiliy love simple logical games. Today they play a game with infinite chessboard and one pawn for each player. Polycarp and Vasiliy move in turns, Polycarp starts. In each turn Polycarp can move his pawn from cell (x, y) to (x - 1, y) or (x, y - 1). Vasiliy can move his pawn from (x, y) to one of cells: (x - 1, y), (x - 1, y - 1) and (x, y - 1). Both players are also allowed to skip move. \n\nThere are some additional restrictions \u2014 a player is forbidden to move his pawn to a cell with negative x-coordinate or y-coordinate or to the cell containing opponent's pawn The winner is the first person to reach cell (0, 0). \n\nYou are given the starting coordinates of both pawns. Determine who will win if both of them play optimally well.\n\n\n-----Input-----\n\nThe first line contains four integers: x_{p}, y_{p}, x_{v}, y_{v} (0 \u2264 x_{p}, y_{p}, x_{v}, y_{v} \u2264 10^5) \u2014 Polycarp's and Vasiliy's starting coordinates.\n\nIt is guaranteed that in the beginning the pawns are in different cells and none of them is in the cell (0, 0).\n\n\n-----Output-----\n\nOutput the name of the winner: \"Polycarp\" or \"Vasiliy\".\n\n\n-----Examples-----\nInput\n2 1 2 2\n\nOutput\nPolycarp\n\nInput\n4 7 7 4\n\nOutput\nVasiliy\n\n\n\n-----Note-----\n\nIn the first sample test Polycarp starts in (2, 1) and will move to (1, 1) in the first turn. No matter what his opponent is doing, in the second turn Polycarp can move to (1, 0) and finally to (0, 0) in the third turn.",
    "generated_code": "# Read input\nxp, yp, xv, yv = map(int, input().split())\n\n# Calculate distances\npolycarp_distance = xp + yp\nvasiliy_distance = max(xv, yv)\n\n# Determine the winner\nif polycarp_distance <= vasiliy_distance:\n    print(\"Polycarp\")\nelse:\n    print(\"Vasiliy\")\n",
    "pass_rate": 0.8476190476190476,
    "passed_tests": 89,
    "total_tests": 105
}
{
    "task_id": "0087",
    "question": "Petr wants to make a calendar for current month. For this purpose he draws a table in which columns correspond to weeks (a week is seven consequent days from Monday to Sunday), rows correspond to weekdays, and cells contain dates. For example, a calendar for January 2017 should look like on the picture: $\\left. \\begin{array}{|r|r|r|r|r|r|} \\hline & {2} & {9} & {16} & {23} & {30} \\\\ \\hline & {3} & {10} & {17} & {24} & {31} \\\\ \\hline & {4} & {11} & {18} & {25} & {} \\\\ \\hline & {5} & {12} & {19} & {26} & {} \\\\ \\hline & {6} & {13} & {20} & {27} & {} \\\\ \\hline & {7} & {14} & {21} & {28} & {} \\\\ \\hline 1 & {8} & {15} & {22} & {29} & {} \\\\ \\hline \\end{array} \\right.$ \n\nPetr wants to know how many columns his table should have given the month and the weekday of the first date of that month? Assume that the year is non-leap.\n\n\n-----Input-----\n\nThe only line contain two integers m and d (1 \u2264 m \u2264 12, 1 \u2264 d \u2264 7)\u00a0\u2014 the number of month (January is the first month, December is the twelfth) and the weekday of the first date of this month (1 is Monday, 7 is Sunday).\n\n\n-----Output-----\n\nPrint single integer: the number of columns the table should have.\n\n\n-----Examples-----\nInput\n1 7\n\nOutput\n6\n\nInput\n1 1\n\nOutput\n5\n\nInput\n11 6\n\nOutput\n5\n\n\n\n-----Note-----\n\nThe first example corresponds to the January 2017 shown on the picture in the statements.\n\nIn the second example 1-st January is Monday, so the whole month fits into 5 columns.\n\nIn the third example 1-st November is Saturday and 5 columns is enough.",
    "generated_code": "# Read the input values\nm, d = map(int, input().split())\n\n# Number of days in each month for a non-leap year\ndays_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n# Get the number of days in the given month\ndays = days_in_month[m - 1]\n\n# Calculate the number of columns required\n# d is the weekday of the first day, we subtract 1 to convert it to 0-indexed\n# (d - 1) is the number of days in the first week before the first day of the month\n# Adding days and (d - 1) gives the total number of cells needed\n# Divide by 7 to get the number of weeks (ceil division)\ncolumns = (days + (d - 1) + 6) // 7\n\n# Print the result\nprint(columns)\n",
    "pass_rate": 1.0,
    "passed_tests": 104,
    "total_tests": 104
}
{
    "task_id": "0088",
    "question": "The year 2015 is almost over.\n\nLimak is a little polar bear. He has recently learnt about the binary system. He noticed that the passing year has exactly one zero in its representation in the binary system\u00a0\u2014 2015_10 = 11111011111_2. Note that he doesn't care about the number of zeros in the decimal representation.\n\nLimak chose some interval of years. He is going to count all years from this interval that have exactly one zero in the binary representation. Can you do it faster?\n\nAssume that all positive integers are always written without leading zeros.\n\n\n-----Input-----\n\nThe only line of the input contains two integers a and b (1 \u2264 a \u2264 b \u2264 10^18)\u00a0\u2014 the first year and the last year in Limak's interval respectively.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2013 the number of years Limak will count in his chosen interval.\n\n\n-----Examples-----\nInput\n5 10\n\nOutput\n2\n\nInput\n2015 2015\n\nOutput\n1\n\nInput\n100 105\n\nOutput\n0\n\nInput\n72057594000000000 72057595000000000\n\nOutput\n26\n\n\n\n-----Note-----\n\nIn the first sample Limak's interval contains numbers 5_10 = 101_2, 6_10 = 110_2, 7_10 = 111_2, 8_10 = 1000_2, 9_10 = 1001_2 and 10_10 = 1010_2. Two of them (101_2 and 110_2) have the described property.",
    "generated_code": "def count_years_with_one_zero(a, b):\n    result = 0\n    for k in range(2, 61):  # k is the total number of bits\n        for m in range(k):\n            # Generate the number with exactly one zero\n            number = (1 << k) - 1 - (1 << m)\n            if a <= number <= b:\n                result += 1\n    return result\n\n# Read input\na, b = map(int, input().split())\n\n# Calculate and print result\nprint(count_years_with_one_zero(a, b))\n",
    "pass_rate": 0.2621359223300971,
    "passed_tests": 27,
    "total_tests": 103
}
{
    "task_id": "0089",
    "question": "You are given an integer N. Consider all possible segments on the coordinate axis with endpoints at integer points with coordinates between 0 and N, inclusive; there will be $\\frac{n(n + 1)}{2}$ of them.\n\nYou want to draw these segments in several layers so that in each layer the segments don't overlap (they might touch at the endpoints though). You can not move the segments to a different location on the coordinate axis. \n\nFind the minimal number of layers you have to use for the given N.\n\n\n-----Input-----\n\nThe only input line contains a single integer N (1 \u2264 N \u2264 100).\n\n\n-----Output-----\n\nOutput a single integer - the minimal number of layers required to draw the segments for the given N.\n\n\n-----Examples-----\nInput\n2\n\nOutput\n2\n\nInput\n3\n\nOutput\n4\n\nInput\n4\n\nOutput\n6\n\n\n\n-----Note-----\n\nAs an example, here are the segments and their optimal arrangement into layers for N = 4. [Image]",
    "generated_code": "# Use Standard Input format\nn = int(input())\nprint(n)\n",
    "pass_rate": 0.029411764705882353,
    "passed_tests": 3,
    "total_tests": 102
}
{
    "task_id": "0090",
    "question": "Anya loves to fold and stick. Today she decided to do just that.\n\nAnya has n cubes lying in a line and numbered from 1 to n from left to right, with natural numbers written on them. She also has k stickers with exclamation marks. We know that the number of stickers does not exceed the number of cubes.\n\nAnya can stick an exclamation mark on the cube and get the factorial of the number written on the cube. For example, if a cube reads 5, then after the sticking it reads 5!, which equals 120.\n\nYou need to help Anya count how many ways there are to choose some of the cubes and stick on some of the chosen cubes at most k exclamation marks so that the sum of the numbers written on the chosen cubes after the sticking becomes equal to S. Anya can stick at most one exclamation mark on each cube. Can you do it?\n\nTwo ways are considered the same if they have the same set of chosen cubes and the same set of cubes with exclamation marks.\n\n\n-----Input-----\n\nThe first line of the input contains three space-separated integers n, k and S (1 \u2264 n \u2264 25, 0 \u2264 k \u2264 n, 1 \u2264 S \u2264 10^16)\u00a0\u2014\u00a0the number of cubes and the number of stickers that Anya has, and the sum that she needs to get. \n\nThe second line contains n positive integers a_{i} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014\u00a0the numbers, written on the cubes. The cubes in the input are described in the order from left to right, starting from the first one. \n\nMultiple cubes can contain the same numbers.\n\n\n-----Output-----\n\nOutput the number of ways to choose some number of cubes and stick exclamation marks on some of them so that the sum of the numbers became equal to the given number S.\n\n\n-----Examples-----\nInput\n2 2 30\n4 3\n\nOutput\n1\n\nInput\n2 2 7\n4 3\n\nOutput\n1\n\nInput\n3 1 1\n1 1 1\n\nOutput\n6\n\n\n\n-----Note-----\n\nIn the first sample the only way is to choose both cubes and stick an exclamation mark on each of them.\n\nIn the second sample the only way is to choose both cubes but don't stick an exclamation mark on any of them.\n\nIn the third sample it is possible to choose any of the cubes in three ways, and also we may choose to stick or not to stick the exclamation mark on it. So, the total number of ways is six.",
    "generated_code": "from functools import lru_cache\nimport math\n\ndef solve(n, k, S, a):\n    # Precompute the factorial values for the given numbers that may have exclamation marks\n    factorial = [math.factorial(x) for x in a]\n    \n    @lru_cache(None)\n    def dp(index, remaining_k, current_sum):\n        # Base case: if we have reached the end of the list\n        if index == n:\n            return 1 if current_sum == S else 0\n        \n        # Case 1: Don't pick the current cube\n        ways = dp(index + 1, remaining_k, current_sum)\n        \n        # Case 2: Pick the current cube without exclamation mark\n        ways += dp(index + 1, remaining_k, current_sum + a[index])\n        \n        # Case 3: Pick the current cube with exclamation mark (if we still have stickers left)\n        if remaining_k > 0:\n            ways += dp(index + 1, remaining_k - 1, current_sum + factorial[index])\n        \n        return ways\n    \n    return dp(0, k, 0)\n\n# Read input\nn, k, S = map(int, input().split())\na = list(map(int, input().split()))\n\nprint(solve(n, k, S, a))\n",
    "pass_rate": 0.2647058823529412,
    "passed_tests": 27,
    "total_tests": 102
}
{
    "task_id": "0091",
    "question": "Suppose you are performing the following algorithm. There is an array $v_1, v_2, \\dots, v_n$ filled with zeroes at start. The following operation is applied to the array several times \u2014 at $i$-th step ($0$-indexed) you can:   either choose position $pos$ ($1 \\le pos \\le n$) and increase $v_{pos}$ by $k^i$;  or not choose any position and skip this step. \n\nYou can choose how the algorithm would behave on each step and when to stop it. The question is: can you make array $v$ equal to the given array $a$ ($v_j = a_j$ for each $j$) after some step?\n\n\n-----Input-----\n\nThe first line contains one integer $T$ ($1 \\le T \\le 1000$) \u2014 the number of test cases. Next $2T$ lines contain test cases \u2014 two lines per test case.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 30$, $2 \\le k \\le 100$) \u2014 the size of arrays $v$ and $a$ and value $k$ used in the algorithm.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^{16}$) \u2014 the array you'd like to achieve.\n\n\n-----Output-----\n\nFor each test case print YES (case insensitive) if you can achieve the array $a$ after some step or NO (case insensitive) otherwise.\n\n\n-----Example-----\nInput\n5\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n\nOutput\nYES\nYES\nNO\nNO\nYES\n\n\n\n-----Note-----\n\nIn the first test case, you can stop the algorithm before the $0$-th step, or don't choose any position several times and stop the algorithm.\n\nIn the second test case, you can add $k^0$ to $v_1$ and stop the algorithm.\n\nIn the third test case, you can't make two $1$ in the array $v$.\n\nIn the fifth test case, you can skip $9^0$ and $9^1$, then add $9^2$ and $9^3$ to $v_3$, skip $9^4$ and finally, add $9^5$ to $v_2$.",
    "generated_code": "def can_achieve_array(T, test_cases):\n    results = []\n\n    for t in range(T):\n        n, k = test_cases[t][0]\n        a = test_cases[t][1]\n        \n        # Step 1: Convert each a_i to its representation in base k\n        max_power = 0\n        base_k_rep = []\n        \n        for num in a:\n            power = 0\n            while num:\n                base_k_rep.append((num % k, power))\n                num //= k\n                power += 1\n                max_power = max(max_power, power)\n        \n        # Step 2: Check if the representation is valid\n        count = [0] * (max_power + 1)\n        \n        for value, power in base_k_rep:\n            count[power] += value\n        \n        is_possible = True\n        for c in count:\n            if c > 1:\n                is_possible = False\n                break\n        \n        if is_possible:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    return results\n\n# Reading input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nT = int(data[0])\ntest_cases = []\nindex = 1\n\nfor _ in range(T):\n    n = int(data[index])\n    k = int(data[index + 1])\n    a = list(map(int, data[index + 2:index + 2 + n]))\n    test_cases.append(((n, k), a))\n    index += 2 + n\n\n# Processing and printing the result\nresults = can_achieve_array(T, test_cases)\nfor result in results:\n    print(result)\n",
    "pass_rate": 1.0,
    "passed_tests": 102,
    "total_tests": 102
}
{
    "task_id": "0092",
    "question": "Let's denote d(n) as the number of divisors of a positive integer n. You are given three integers a, b and c. Your task is to calculate the following sum:\n\n$\\sum_{i = 1}^{a} \\sum_{j = 1}^{b} \\sum_{k = 1}^{c} d(i \\cdot j \\cdot k)$\n\nFind the sum modulo 1073741824 (2^30).\n\n\n-----Input-----\n\nThe first line contains three space-separated integers a, b and c (1 \u2264 a, b, c \u2264 100).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the required sum modulo 1073741824 (2^30).\n\n\n-----Examples-----\nInput\n2 2 2\n\nOutput\n20\n\nInput\n5 6 7\n\nOutput\n1520\n\n\n\n-----Note-----\n\nFor the first example.\n\n  d(1\u00b71\u00b71) = d(1) = 1;  d(1\u00b71\u00b72) = d(2) = 2;  d(1\u00b72\u00b71) = d(2) = 2;  d(1\u00b72\u00b72) = d(4) = 3;  d(2\u00b71\u00b71) = d(2) = 2;  d(2\u00b71\u00b72) = d(4) = 3;  d(2\u00b72\u00b71) = d(4) = 3;  d(2\u00b72\u00b72) = d(8) = 4. \n\nSo the result is 1 + 2 + 2 + 3 + 2 + 3 + 3 + 4 = 20.",
    "generated_code": "def count_divisors(n):\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n        i += 1\n    return count\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    a = int(data[0])\n    b = int(data[1])\n    c = int(data[2])\n    \n    MOD = 1073741824\n    \n    total_sum = 0\n    divisor_count = {}\n    \n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            for k in range(1, c + 1):\n                product = i * j * k\n                if product not in divisor_count:\n                    divisor_count[product] = count_divisors(product)\n                total_sum = (total_sum + divisor_count[product]) % MOD\n    \n    print(total_sum)\n\nif __name__ == \"__main__\":\n    main()\n",
    "pass_rate": 1.0,
    "passed_tests": 102,
    "total_tests": 102
}
{
    "task_id": "0093",
    "question": "Bessie the cow and her best friend Elsie each received a sliding puzzle on Pi Day. Their puzzles consist of a 2 \u00d7 2 grid and three tiles labeled 'A', 'B', and 'C'. The three tiles sit on top of the grid, leaving one grid cell empty. To make a move, Bessie or Elsie can slide a tile adjacent to the empty cell into the empty cell as shown below: $\\rightarrow$ \n\nIn order to determine if they are truly Best Friends For Life (BFFLs), Bessie and Elsie would like to know if there exists a sequence of moves that takes their puzzles to the same configuration (moves can be performed in both puzzles). Two puzzles are considered to be in the same configuration if each tile is on top of the same grid cell in both puzzles. Since the tiles are labeled with letters, rotations and reflections are not allowed.\n\n\n-----Input-----\n\nThe first two lines of the input consist of a 2 \u00d7 2 grid describing the initial configuration of Bessie's puzzle. The next two lines contain a 2 \u00d7 2 grid describing the initial configuration of Elsie's puzzle. The positions of the tiles are labeled 'A', 'B', and 'C', while the empty cell is labeled 'X'. It's guaranteed that both puzzles contain exactly one tile with each letter and exactly one empty position.\n\n\n-----Output-----\n\nOutput \"YES\"(without quotes) if the puzzles can reach the same configuration (and Bessie and Elsie are truly BFFLs). Otherwise, print \"NO\" (without quotes).\n\n\n-----Examples-----\nInput\nAB\nXC\nXB\nAC\n\nOutput\nYES\n\nInput\nAB\nXC\nAC\nBX\n\nOutput\nNO\n\n\n\n-----Note-----\n\nThe solution to the first sample is described by the image. All Bessie needs to do is slide her 'A' tile down.\n\nIn the second sample, the two puzzles can never be in the same configuration. Perhaps Bessie and Elsie are not meant to be friends after all...",
    "generated_code": "def bfs(start):\n    from collections import deque\n    \n    queue = deque([start])\n    seen = set([start])\n    \n    while queue:\n        current = queue.popleft()\n        yield current  # This allows us to iterate over all reachable states\n        \n        # Locate the empty cell 'X'\n        x, y = [(i, j) for i in range(2) for j in range(2) if current[i][j] == 'X'][0]\n        \n        # Possible moves (up, down, left, right)\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < 2 and 0 <= ny < 2:\n                # Swap the empty cell with the adjacent cell\n                new_state = [list(row) for row in current]\n                new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]\n                new_state = tuple(tuple(row) for row in new_state)\n                if new_state not in seen:\n                    seen.add(new_state)\n                    queue.append(new_state)\n\ndef can_reach_same_configuration(bessie, elsie):\n    start_bessie = tuple(tuple(row) for row in bessie)\n    start_elsie = tuple(tuple(row) for row in elsie)\n    \n    reachable_from_bessie = set(bfs(start_bessie))\n    reachable_from_elsie = set(bfs(start_elsie))\n    \n    return not reachable_from_bessie.isdisjoint(reachable_from_elsie)\n\nif __name__ == \"__main__\":\n    bessie = [input().strip() for _ in range(2)]\n    elsie = [input().strip() for _ in range(2)]\n    \n    if can_reach_same_configuration(bessie, elsie):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
    "pass_rate": 1.0,
    "passed_tests": 102,
    "total_tests": 102
}
{
    "task_id": "0094",
    "question": "Alexander is learning how to convert numbers from the decimal system to any other, however, he doesn't know English letters, so he writes any number only as a decimal number, it means that instead of the letter A he will write the number 10. Thus, by converting the number 475 from decimal to hexadecimal system, he gets 11311 (475 = 1\u00b716^2 + 13\u00b716^1 + 11\u00b716^0). Alexander lived calmly until he tried to convert the number back to the decimal number system.\n\nAlexander remembers that he worked with little numbers so he asks to find the minimum decimal number so that by converting it to the system with the base n he will get the number k.\n\n\n-----Input-----\n\nThe first line contains the integer n (2 \u2264 n \u2264 10^9). The second line contains the integer k (0 \u2264 k < 10^60), it is guaranteed that the number k contains no more than 60 symbols. All digits in the second line are strictly less than n.\n\nAlexander guarantees that the answer exists and does not exceed 10^18.\n\nThe number k doesn't contain leading zeros.\n\n\n-----Output-----\n\nPrint the number x (0 \u2264 x \u2264 10^18)\u00a0\u2014 the answer to the problem.\n\n\n-----Examples-----\nInput\n13\n12\n\nOutput\n12\nInput\n16\n11311\n\nOutput\n475\nInput\n20\n999\n\nOutput\n3789\nInput\n17\n2016\n\nOutput\n594\n\n\n-----Note-----\n\nIn the first example 12 could be obtained by converting two numbers to the system with base 13: 12 = 12\u00b713^0 or 15 = 1\u00b713^1 + 2\u00b713^0.",
    "generated_code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    k = data[1]\n    \n    # Convert the number k, which is a string in base n, to a decimal number\n    decimal_number = 0\n    power = 0\n    \n    for digit in reversed(k):\n        decimal_number += int(digit) * (n ** power)\n        power += 1\n    \n    print(decimal_number)\n\nif __name__ == \"__main__\":\n    main()\n",
    "pass_rate": 0.29411764705882354,
    "passed_tests": 30,
    "total_tests": 102
}
{
    "task_id": "0095",
    "question": "Array of integers is unimodal, if:\n\n  it is strictly increasing in the beginning;  after that it is constant;  after that it is strictly decreasing. \n\nThe first block (increasing) and the last block (decreasing) may be absent. It is allowed that both of this blocks are absent.\n\nFor example, the following three arrays are unimodal: [5, 7, 11, 11, 2, 1], [4, 4, 2], [7], but the following three are not unimodal: [5, 5, 6, 6, 1], [1, 2, 1, 2], [4, 5, 5, 6].\n\nWrite a program that checks if an array is unimodal.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 1 000) \u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint \"YES\" if the given array is unimodal. Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\n\n-----Examples-----\nInput\n6\n1 5 5 5 4 2\n\nOutput\nYES\n\nInput\n5\n10 20 30 20 10\n\nOutput\nYES\n\nInput\n4\n1 2 1 2\n\nOutput\nNO\n\nInput\n7\n3 3 3 3 3 3 3\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first example the array is unimodal, because it is strictly increasing in the beginning (from position 1 to position 2, inclusively), that it is constant (from position 2 to position 4, inclusively) and then it is strictly decreasing (from position 4 to position 6, inclusively).",
    "generated_code": "def is_unimodal(arr):\n    n = len(arr)\n    \n    if n == 1:\n        return True\n\n    i = 1\n    # Check increasing part\n    while i < n and arr[i] > arr[i - 1]:\n        i += 1\n\n    # Check constant part\n    while i < n and arr[i] == arr[i - 1]:\n        i += 1\n\n    # Check decreasing part\n    while i < n and arr[i] < arr[i - 1]:\n        i += 1\n\n    # If we have traversed the whole array, it's unimodal\n    return i == n\n\n\n# Read input\nn = int(input())\narr = list(map(int, input().split()))\n\nif is_unimodal(arr):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
    "pass_rate": 1.0,
    "passed_tests": 101,
    "total_tests": 101
}
{
    "task_id": "0096",
    "question": "At first, let's define function $f(x)$ as follows: $$ \\begin{matrix} f(x) & = & \\left\\{ \\begin{matrix} \\frac{x}{2} & \\mbox{if } x \\text{ is even} \\\\ x - 1 & \\mbox{otherwise } \\end{matrix} \\right. \\end{matrix} $$\n\nWe can see that if we choose some value $v$ and will apply function $f$ to it, then apply $f$ to $f(v)$, and so on, we'll eventually get $1$. Let's write down all values we get in this process in a list and denote this list as $path(v)$. For example, $path(1) = [1]$, $path(15) = [15, 14, 7, 6, 3, 2, 1]$, $path(32) = [32, 16, 8, 4, 2, 1]$.\n\nLet's write all lists $path(x)$ for every $x$ from $1$ to $n$. The question is next: what is the maximum value $y$ such that $y$ is contained in at least $k$ different lists $path(x)$?\n\nFormally speaking, you need to find maximum $y$ such that $\\left| \\{ x ~|~ 1 \\le x \\le n, y \\in path(x) \\} \\right| \\ge k$.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 10^{18}$).\n\n\n-----Output-----\n\nPrint the only integer \u2014 the maximum value that is contained in at least $k$ paths.\n\n\n-----Examples-----\nInput\n11 3\n\nOutput\n5\n\nInput\n11 6\n\nOutput\n4\n\nInput\n20 20\n\nOutput\n1\n\nInput\n14 5\n\nOutput\n6\n\nInput\n1000000 100\n\nOutput\n31248\n\n\n\n-----Note-----\n\nIn the first example, the answer is $5$, since $5$ occurs in $path(5)$, $path(10)$ and $path(11)$.\n\nIn the second example, the answer is $4$, since $4$ occurs in $path(4)$, $path(5)$, $path(8)$, $path(9)$, $path(10)$ and $path(11)$.\n\nIn the third example $n = k$, so the answer is $1$, since $1$ is the only number occuring in all paths for integers from $1$ to $20$.",
    "generated_code": "def max_value_in_k_paths(n, k):\n    current = n\n    result = 1\n\n    while current > 0:\n        if n // current >= k:\n            result = current\n            break\n        current //= 2\n\n    return result\n\n# Reading input\nn, k = map(int, input().split())\n\n# Computing result\nresult = max_value_in_k_paths(n, k)\n\n# Printing result\nprint(result)\n",
    "pass_rate": 0.1485148514851485,
    "passed_tests": 15,
    "total_tests": 101
}
{
    "task_id": "0097",
    "question": "Consider a billiard table of rectangular size $n \\times m$ with four pockets. Let's introduce a coordinate system with the origin at the lower left corner (see the picture).  [Image] \n\nThere is one ball at the point $(x, y)$ currently. Max comes to the table and strikes the ball. The ball starts moving along a line that is parallel to one of the axes or that makes a $45^{\\circ}$ angle with them. We will assume that:   the angles between the directions of the ball before and after a collision with a side are equal,  the ball moves indefinitely long, it only stops when it falls into a pocket,  the ball can be considered as a point, it falls into a pocket if and only if its coordinates coincide with one of the pockets,  initially the ball is not in a pocket. \n\nNote that the ball can move along some side, in this case the ball will just fall into the pocket at the end of the side.\n\nYour task is to determine whether the ball will fall into a pocket eventually, and if yes, which of the four pockets it will be.\n\n\n-----Input-----\n\nThe only line contains $6$ integers $n$, $m$, $x$, $y$, $v_x$, $v_y$ ($1 \\leq n, m \\leq 10^9$, $0 \\leq x \\leq n$; $0 \\leq y \\leq m$; $-1 \\leq v_x, v_y \\leq 1$; $(v_x, v_y) \\neq (0, 0)$)\u00a0\u2014 the width of the table, the length of the table, the $x$-coordinate of the initial position of the ball, the $y$-coordinate of the initial position of the ball, the $x$-component of its initial speed and the $y$-component of its initial speed, respectively. It is guaranteed that the ball is not initially in a pocket.\n\n\n-----Output-----\n\nPrint the coordinates of the pocket the ball will fall into, or $-1$ if the ball will move indefinitely.\n\n\n-----Examples-----\nInput\n4 3 2 2 -1 1\n\nOutput\n0 0\nInput\n4 4 2 0 1 1\n\nOutput\n-1\nInput\n10 10 10 1 -1 0\n\nOutput\n-1\n\n\n-----Note-----\n\nThe first sample:  [Image] \n\nThe second sample:  [Image] \n\nIn the third sample the ball will never change its $y$ coordinate, so the ball will never fall into a pocket.",
    "generated_code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    n, m, x, y, vx, vy = map(int, data)\n\n    # If the ball moves indefinitely in any direction\n    if vx == 0 and (x == 0 or x == n):\n        print(f\"{x} {0 if vy == 1 else m}\")\n        return\n    if vy == 0 and (y == 0 or y == m):\n        print(f\"{0 if vx == 1 else n} {y}\")\n        return\n    \n    if vx == 0 or vy == 0:\n        print(-1)\n        return\n\n    # Calculate the number of reflections needed for both dimensions\n    tx = (n - x) if vx == 1 else x\n    ty = (m - y) if vy == 1 else y\n\n    # Calculate the least number of reflections required to hit an edge\n    if vx == 1:\n        tx = (n - x) if vx == 1 else x\n    else:\n        tx = x\n\n    if vy == 1:\n        ty = (m - y) if vy == 1 else y\n    else:\n        ty = y\n\n    # Calculate the number of reflections\n    if tx == ty:\n        if vx == 1 and vy == 1:\n            print(f\"{n} {m}\")\n        elif vx == 1 and vy == -1:\n            print(f\"{n} {0}\")\n        elif vx == -1 and vy == 1:\n            print(f\"{0} {m}\")\n        else:\n            print(f\"{0} {0}\")\n    elif tx > ty:\n        if vy == 1:\n            print(-1)\n        else:\n            if vx == 1:\n                print(f\"{n} {0}\")\n            else:\n                print(f\"{0} {0}\")\n    else:\n        if vx == 1:\n            print(-1)\n        else:\n            if vy == 1:\n                print(f\"{0} {m}\")\n            else:\n                print(f\"{0} {0}\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "pass_rate": 0.25742574257425743,
    "passed_tests": 26,
    "total_tests": 101
}
{
    "task_id": "0098",
    "question": "Gerald bought two very rare paintings at the Sotheby's auction and he now wants to hang them on the wall. For that he bought a special board to attach it to the wall and place the paintings on the board. The board has shape of an a_1 \u00d7 b_1 rectangle, the paintings have shape of a a_2 \u00d7 b_2 and a_3 \u00d7 b_3 rectangles.\n\nSince the paintings are painted in the style of abstract art, it does not matter exactly how they will be rotated, but still, one side of both the board, and each of the paintings must be parallel to the floor. The paintings can touch each other and the edges of the board, but can not overlap or go beyond the edge of the board. Gerald asks whether it is possible to place the paintings on the board, or is the board he bought not large enough?\n\n\n-----Input-----\n\nThe first line contains two space-separated numbers a_1 and b_1 \u2014 the sides of the board. Next two lines contain numbers a_2, b_2, a_3 and b_3 \u2014 the sides of the paintings. All numbers a_{i}, b_{i} in the input are integers and fit into the range from 1 to 1000.\n\n\n-----Output-----\n\nIf the paintings can be placed on the wall, print \"YES\" (without the quotes), and if they cannot, print \"NO\" (without the quotes).\n\n\n-----Examples-----\nInput\n3 2\n1 3\n2 1\n\nOutput\nYES\n\nInput\n5 5\n3 3\n3 3\n\nOutput\nNO\n\nInput\n4 2\n2 3\n1 2\n\nOutput\nYES\n\n\n\n-----Note-----\n\nThat's how we can place the pictures in the first test:\n\n[Image]\n\nAnd that's how we can do it in the third one.\n\n[Image]",
    "generated_code": "def can_place_paintings(a1, b1, a2, b2, a3, b3):\n    # Check all possible rotations and placements\n    paintings = [(a2, b2), (b2, a2), (a3, b3), (b3, a3)]\n    \n    for (p1_w, p1_h) in paintings[:2]:\n        for (p2_w, p2_h) in paintings[2:]:\n            if (p1_w + p2_w <= a1 and max(p1_h, p2_h) <= b1) or (p1_w + p2_w <= b1 and max(p1_h, p2_h) <= a1):\n                return \"YES\"\n            if (p1_h + p2_h <= b1 and max(p1_w, p2_w) <= a1) or (p1_h + p2_h <= a1 and max(p1_w, p2_w) <= b1):\n                return \"YES\"\n    return \"NO\"\n\n# Read input\na1, b1 = map(int, input().split())\na2, b2 = map(int, input().split())\na3, b3 = map(int, input().split())\n\n# Print the result\nprint(can_place_paintings(a1, b1, a2, b2, a3, b3))\n",
    "pass_rate": 1.0,
    "passed_tests": 101,
    "total_tests": 101
}
{
    "task_id": "0099",
    "question": "Masha really loves algebra. On the last lesson, her strict teacher Dvastan gave she new exercise.\n\nYou are given geometric progression b defined by two integers b_1 and q. Remind that a geometric progression is a sequence of integers b_1, b_2, b_3, ..., where for each i > 1 the respective term satisfies the condition b_{i} = b_{i} - 1\u00b7q, where q is called the common ratio of the progression. Progressions in Uzhlyandia are unusual: both b_1 and q can equal 0. Also, Dvastan gave Masha m \"bad\" integers a_1, a_2, ..., a_{m}, and an integer l.\n\nMasha writes all progression terms one by one onto the board (including repetitive) while condition |b_{i}| \u2264 l is satisfied (|x| means absolute value of x). There is an exception: if a term equals one of the \"bad\" integers, Masha skips it (doesn't write onto the board) and moves forward to the next term.\n\nBut the lesson is going to end soon, so Masha has to calculate how many integers will be written on the board. In order not to get into depression, Masha asked you for help: help her calculate how many numbers she will write, or print \"inf\" in case she needs to write infinitely many integers.\n\n\n-----Input-----\n\nThe first line of input contains four integers b_1, q, l, m (-10^9 \u2264 b_1, q \u2264 10^9, 1 \u2264 l \u2264 10^9, 1 \u2264 m \u2264 10^5)\u00a0\u2014 the initial term and the common ratio of progression, absolute value of maximal number that can be written on the board and the number of \"bad\" integers, respectively.\n\nThe second line contains m distinct integers a_1, a_2, ..., a_{m} (-10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 numbers that will never be written on the board.\n\n\n-----Output-----\n\nPrint the only integer, meaning the number of progression terms that will be written on the board if it is finite, or \"inf\" (without quotes) otherwise.\n\n\n-----Examples-----\nInput\n3 2 30 4\n6 14 25 48\n\nOutput\n3\nInput\n123 1 2143435 4\n123 11 -5453 141245\n\nOutput\n0\nInput\n123 1 2143435 4\n54343 -13 6 124\n\nOutput\ninf\n\n\n-----Note-----\n\nIn the first sample case, Masha will write integers 3, 12, 24. Progression term 6 will be skipped because it is a \"bad\" integer. Terms bigger than 24 won't be written because they exceed l by absolute value.\n\nIn the second case, Masha won't write any number because all terms are equal 123 and this is a \"bad\" integer.\n\nIn the third case, Masha will write infinitely integers 123.",
    "generated_code": "def is_bad(num, bad_set):\n    return num in bad_set\n\ndef calculate_terms(b1, q, l, bad_set):\n    if abs(b1) > l:\n        return 0\n\n    if b1 == 0:\n        return \"inf\" if 0 not in bad_set else 0\n\n    if q == 0:\n        if 0 in bad_set:\n            return 0 if b1 in bad_set else 1\n        return \"inf\" if b1 not in bad_set else 1\n\n    if q == 1:\n        return \"inf\" if b1 not in bad_set else 0\n\n    if q == -1:\n        if b1 not in bad_set or -b1 not in bad_set:\n            return \"inf\"\n        return 0\n\n    count = 0\n    term = b1\n    while abs(term) <= l:\n        if term not in bad_set:\n            count += 1\n        term *= q\n\n    return count\n\nimport sys\ninput = sys.stdin.read\n\ndata = input().split()\nb1 = int(data[0])\nq = int(data[1])\nl = int(data[2])\nm = int(data[3])\nbad_set = set(int(data[i]) for i in range(4, 4 + m))\n\nresult = calculate_terms(b1, q, l, bad_set)\nprint(result)\n",
    "pass_rate": 0.92,
    "passed_tests": 92,
    "total_tests": 100
}
{
    "task_id": "0100",
    "question": "Innocentius has a problem \u2014 his computer monitor has broken. Now some of the pixels are \"dead\", that is, they are always black. As consequence, Innocentius can't play the usual computer games. He is recently playing the following game with his younger brother Polycarpus.\n\nInnocentius is touch-typing a program that paints a white square one-pixel wide frame on the black screen. As the monitor is broken, some pixels that should be white remain black. Polycarpus should look at what the program displayed on the screen and guess the position and size of the frame Innocentius has painted. Polycarpus doesn't like the game but Innocentius persuaded brother to play as \"the game is good for the imagination and attention\".\n\nHelp Polycarpus, automatize his part in the gaming process. Write the code that finds such possible square frame that:  the frame's width is 1 pixel,  the frame doesn't go beyond the borders of the screen,  all white pixels of the monitor are located on the frame,  of all frames that satisfy the previous three conditions, the required frame must have the smallest size. \n\nFormally, a square frame is represented by such pixels of the solid square, that are on the square's border, that is, are not fully surrounded by the other pixels of the square. For example, if the frame's size is d = 3, then it consists of 8 pixels, if its size is d = 2, then it contains 4 pixels and if d = 1, then the frame is reduced to a single pixel.\n\n\n-----Input-----\n\nThe first line contains the resolution of the monitor as a pair of integers n, m (1 \u2264 n, m \u2264 2000). The next n lines contain exactly m characters each \u2014 the state of the monitor pixels at the moment of the game. Character \".\" (period, ASCII code 46) corresponds to the black pixel, and character \"w\" (lowercase English letter w) corresponds to the white pixel. It is guaranteed that at least one pixel of the monitor is white.\n\n\n-----Output-----\n\nPrint the monitor screen. Represent the sought frame by characters \"+\" (the \"plus\" character). The pixels that has become white during the game mustn't be changed. Print them as \"w\". If there are multiple possible ways to position the frame of the minimum size, print any of them.\n\nIf the required frame doesn't exist, then print a single line containing number -1.\n\n\n-----Examples-----\nInput\n4 8\n..w..w..\n........\n........\n..w..w..\n\nOutput\n..w++w..\n..+..+..\n..+..+..\n..w++w..\n\nInput\n5 6\n......\n.w....\n......\n..w...\n......\n\nOutput\n......\n+w+...\n+.+...\n++w...\n......\n\nInput\n2 4\n....\n.w..\n\nOutput\n....\n.w..\n\nInput\n2 6\nw..w.w\n...w..\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first sample the required size of the optimal frame equals 4. In the second sample the size of the optimal frame equals 3. In the third sample, the size of the optimal frame is 1. In the fourth sample, the required frame doesn't exist.",
    "generated_code": "def find_frame(n, m, screen):\n    # Find the min and max row and column indices where 'w' is found\n    min_row, max_row = n, 0\n    min_col, max_col = m, 0\n    \n    for i in range(n):\n        for j in range(m):\n            if screen[i][j] == 'w':\n                if i < min_row:\n                    min_row = i\n                if i > max_row:\n                    max_row = i\n                if j < min_col:\n                    min_col = j\n                if j > max_col:\n                    max_col = j\n    \n    # Calculate the height and width of the frame\n    frame_height = max_row - min_row + 1\n    frame_width = max_col - min_col + 1\n    \n    # Check if the frame is square and within bounds\n    if frame_height != frame_width:\n        print(-1)\n        return\n    \n    # Output the modified screen with the frame represented by '+'\n    for i in range(n):\n        line = []\n        for j in range(m):\n            if min_row <= i <= max_row and min_col <= j <= max_col:\n                if screen[i][j] == 'w':\n                    line.append('w')\n                else:\n                    line.append('+')\n            else:\n                line.append(screen[i][j])\n        print(\"\".join(line))\n\n# Read input\nn, m = map(int, input().split())\nscreen = [input().strip() for _ in range(n)]\n\nfind_frame(n, m, screen)\n",
    "pass_rate": 0.5714285714285714,
    "passed_tests": 60,
    "total_tests": 105
}
{
    "task_id": "0101",
    "question": "Vasya has n burles. One bottle of Ber-Cola costs a burles and one Bars bar costs b burles. He can buy any non-negative integer number of bottles of Ber-Cola and any non-negative integer number of Bars bars.\n\nFind out if it's possible to buy some amount of bottles of Ber-Cola and Bars bars and spend exactly n burles.\n\nIn other words, you should find two non-negative integers x and y such that Vasya can buy x bottles of Ber-Cola and y Bars bars and x\u00b7a + y\u00b7b = n or tell that it's impossible.\n\n\n-----Input-----\n\nFirst line contains single integer n (1 \u2264 n \u2264 10 000 000)\u00a0\u2014 amount of money, that Vasya has.\n\nSecond line contains single integer a (1 \u2264 a \u2264 10 000 000)\u00a0\u2014 cost of one bottle of Ber-Cola.\n\nThird line contains single integer b (1 \u2264 b \u2264 10 000 000)\u00a0\u2014 cost of one Bars bar.\n\n\n-----Output-----\n\nIf Vasya can't buy Bars and Ber-Cola in such a way to spend exactly n burles print \u00abNO\u00bb (without quotes).\n\nOtherwise in first line print \u00abYES\u00bb (without quotes). In second line print two non-negative integers x and y\u00a0\u2014 number of bottles of Ber-Cola and number of Bars bars Vasya should buy in order to spend exactly n burles, i.e. x\u00b7a + y\u00b7b = n. If there are multiple answers print any of them.\n\nAny of numbers x and y can be equal 0.\n\n\n-----Examples-----\nInput\n7\n2\n3\n\nOutput\nYES\n2 1\n\nInput\n100\n25\n10\n\nOutput\nYES\n0 10\n\nInput\n15\n4\n8\n\nOutput\nNO\n\nInput\n9960594\n2551\n2557\n\nOutput\nYES\n1951 1949\n\n\n\n-----Note-----\n\nIn first example Vasya can buy two bottles of Ber-Cola and one Bars bar. He will spend exactly 2\u00b72 + 1\u00b73 = 7 burles.\n\nIn second example Vasya can spend exactly n burles multiple ways:   buy two bottles of Ber-Cola and five Bars bars;  buy four bottles of Ber-Cola and don't buy Bars bars;  don't buy Ber-Cola and buy 10 Bars bars. \n\nIn third example it's impossible to but Ber-Cola and Bars bars in order to spend exactly n burles.",
    "generated_code": "n = int(input())\na = int(input())\nb = int(input())\n\ndef find_solution(n, a, b):\n    for x in range(n // a + 1):\n        if (n - x * a) % b == 0:\n            y = (n - x * a) // b\n            return (x, y)\n    return None\n\nresult = find_solution(n, a, b)\n\nif result:\n    print(\"YES\")\n    print(result[0], result[1])\nelse:\n    print(\"NO\")\n",
    "pass_rate": 1.0,
    "passed_tests": 100,
    "total_tests": 100
}
{
    "task_id": "0102",
    "question": "Today Tavas got his test result as an integer score and he wants to share it with his girlfriend, Nafas.\n\nHis phone operating system is Tavdroid, and its keyboard doesn't have any digits! He wants to share his score with Nafas via text, so he has no choice but to send this number using words. [Image] \n\nHe ate coffee mix without water again, so right now he's really messed up and can't think.\n\nYour task is to help him by telling him what to type.\n\n\n-----Input-----\n\nThe first and only line of input contains an integer s (0 \u2264 s \u2264 99), Tavas's score. \n\n\n-----Output-----\n\nIn the first and only line of output, print a single string consisting only from English lowercase letters and hyphens ('-'). Do not use spaces.\n\n\n-----Examples-----\nInput\n6\n\nOutput\nsix\n\nInput\n99\n\nOutput\nninety-nine\n\nInput\n20\n\nOutput\ntwenty\n\n\n\n-----Note-----\n\nYou can find all you need to know about English numerals in http://en.wikipedia.org/wiki/English_numerals .",
    "generated_code": "def number_to_words(n):\n    ones = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n    teens = [\"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\n    tens = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n\n    if 0 <= n < 10:\n        return ones[n]\n    elif 10 <= n < 20:\n        return teens[n - 10]\n    elif 20 <= n < 100:\n        if n % 10 == 0:\n            return tens[n // 10]\n        else:\n            return tens[n // 10] + \"-\" + ones[n % 10]\n\n# Reading input\ns = int(input().strip())\n\n# Printing the output\nprint(number_to_words(s))\n",
    "pass_rate": 1.0,
    "passed_tests": 100,
    "total_tests": 100
}
{
    "task_id": "0103",
    "question": "JATC and his friend Giraffe are currently in their room, solving some problems. Giraffe has written on the board an array $a_1$, $a_2$, ..., $a_n$ of integers, such that $1 \\le a_1 < a_2 < \\ldots < a_n \\le 10^3$, and then went to the bathroom.\n\nJATC decided to prank his friend by erasing some consecutive elements in the array. Since he doesn't want for the prank to go too far, he will only erase in a way, such that Giraffe can still restore the array using the information from the remaining elements. Because Giraffe has created the array, he's also aware that it's an increasing array and all the elements are integers in the range $[1, 10^3]$.\n\nJATC wonders what is the greatest number of elements he can erase?\n\n\n-----Input-----\n\nThe first line of the input contains a single integer $n$ ($1 \\le n \\le 100$)\u00a0\u2014 the number of elements in the array.\n\nThe second line of the input contains $n$ integers $a_i$ ($1 \\le a_1<a_2<\\dots<a_n \\le 10^3$)\u00a0\u2014 the array written by Giraffe.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum number of consecutive elements in the array that JATC can erase.\n\nIf it is impossible to erase even a single element, print $0$.\n\n\n-----Examples-----\nInput\n6\n1 3 4 5 6 9\n\nOutput\n2\nInput\n3\n998 999 1000\n\nOutput\n2\nInput\n5\n1 2 3 4 5\n\nOutput\n4\n\n\n-----Note-----\n\nIn the first example, JATC can erase the third and fourth elements, leaving the array $[1, 3, \\_, \\_, 6, 9]$. As you can see, there is only one way to fill in the blanks.\n\nIn the second example, JATC can erase the second and the third elements. The array will become $[998, \\_, \\_]$. Because all the elements are less than or equal to $1000$, the array is still can be restored. Note, that he can't erase the first $2$ elements.\n\nIn the third example, JATC can erase the first $4$ elements. Since all the elements are greater than or equal to $1$, Giraffe can still restore the array. Note, that he can't erase the last $4$ elements.",
    "generated_code": "n = int(input())\narr = list(map(int, input().split()))\n\nmax_erase = 0\n\nfor i in range(1, n):\n    max_erase = max(max_erase, arr[i] - arr[i-1] - 1)\n\nprint(max_erase)\n",
    "pass_rate": 0.1414141414141414,
    "passed_tests": 14,
    "total_tests": 99
}
{
    "task_id": "0104",
    "question": "Polycarp has created his own training plan to prepare for the programming contests. He will train for $n$ days, all days are numbered from $1$ to $n$, beginning from the first.\n\nOn the $i$-th day Polycarp will necessarily solve $a_i$ problems. One evening Polycarp plans to celebrate the equator. He will celebrate it on the first evening of such a day that from the beginning of the training and to this day inclusive he will solve half or more of all the problems.\n\nDetermine the index of day when Polycarp will celebrate the equator.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 200\\,000$) \u2014 the number of days to prepare for the programming contests.\n\nThe second line contains a sequence $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10\\,000$), where $a_i$ equals to the number of problems, which Polycarp will solve on the $i$-th day.\n\n\n-----Output-----\n\nPrint the index of the day when Polycarp will celebrate the equator.\n\n\n-----Examples-----\nInput\n4\n1 3 2 1\n\nOutput\n2\n\nInput\n6\n2 2 2 2 2 2\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example Polycarp will celebrate the equator on the evening of the second day, because up to this day (inclusive) he will solve $4$ out of $7$ scheduled problems on four days of the training.\n\nIn the second example Polycarp will celebrate the equator on the evening of the third day, because up to this day (inclusive) he will solve $6$ out of $12$ scheduled problems on six days of the training.",
    "generated_code": "# Read input values\nn = int(input())\na = list(map(int, input().split()))\n\n# Calculate total problems to be solved\ntotal_problems = sum(a)\n\n# Half of the total problems (ceiling value)\nhalf_problems = (total_problems + 1) // 2\n\n# Iterate through the list and find the day when half of the problems are solved\ncurrent_sum = 0\nfor i in range(n):\n    current_sum += a[i]\n    if current_sum >= half_problems:\n        print(i + 1)\n        break\n",
    "pass_rate": 1.0,
    "passed_tests": 99,
    "total_tests": 99
}
{
    "task_id": "0105",
    "question": "You stumbled upon a new kind of chess puzzles. The chessboard you are given is not necesserily $8 \\times 8$, but it still is $N \\times N$. Each square has some number written on it, all the numbers are from $1$ to $N^2$ and all the numbers are pairwise distinct. The $j$-th square in the $i$-th row has a number $A_{ij}$ written on it.\n\nIn your chess set you have only three pieces: a knight, a bishop and a rook. At first, you put one of them on the square with the number $1$ (you can choose which one). Then you want to reach square $2$ (possibly passing through some other squares in process), then square $3$ and so on until you reach square $N^2$. In one step you are allowed to either make a valid move with the current piece or replace it with some other piece. Each square can be visited arbitrary number of times.\n\nA knight can move to a square that is two squares away horizontally and one square vertically, or two squares vertically and one square horizontally. A bishop moves diagonally. A rook moves horizontally or vertically. The move should be performed to a different square from the one a piece is currently standing on.\n\nYou want to minimize the number of steps of the whole traversal. Among all the paths to have the same number of steps you want to choose the one with the lowest number of piece replacements.\n\nWhat is the path you should take to satisfy all conditions?\n\n\n-----Input-----\n\nThe first line contains a single integer $N$ ($3 \\le N \\le 10$) \u2014 the size of the chessboard.\n\nEach of the next $N$ lines contains $N$ integers $A_{i1}, A_{i2}, \\dots, A_{iN}$ ($1 \\le A_{ij} \\le N^2$) \u2014 the numbers written on the squares of the $i$-th row of the board.\n\nIt is guaranteed that all $A_{ij}$ are pairwise distinct.\n\n\n-----Output-----\n\nThe only line should contain two integers \u2014 the number of steps in the best answer and the number of replacement moves in it.\n\n\n-----Example-----\nInput\n3\n1 9 3\n8 6 7\n4 2 5\n\nOutput\n12 1\n\n\n\n-----Note-----\n\nHere are the steps for the first example (the starting piece is a knight):  Move to $(3, 2)$  Move to $(1, 3)$  Move to $(3, 2)$  Replace the knight with a rook  Move to $(3, 1)$  Move to $(3, 3)$  Move to $(3, 2)$  Move to $(2, 2)$  Move to $(2, 3)$  Move to $(2, 1)$  Move to $(1, 1)$  Move to $(1, 2)$",
    "generated_code": "import sys\nfrom collections import deque\n\ndef bfs(start_pos, start_piece, target, piece_moves, N):\n    queue = deque([(start_pos, start_piece, 0, 0)])  # (position, current piece, steps, replacements)\n    visited = set((start_pos, start_piece))\n    \n    while queue:\n        (x, y), piece, steps, replacements = queue.popleft()\n        \n        if target == (x, y):\n            return steps, replacements\n        \n        # Try to move with the current piece\n        for dx, dy in piece_moves[piece]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny, piece) not in visited:\n                visited.add((nx, ny, piece))\n                queue.append(((nx, ny), piece, steps + 1, replacements))\n        \n        # Try to replace the piece and move\n        for new_piece in piece_moves:\n            if new_piece != piece:\n                if (x, y, new_piece) not in visited:\n                    visited.add((x, y, new_piece))\n                    queue.append(((x, y), new_piece, steps + 1, replacements + 1))\n\ndef main():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    board = []\n    index = 1\n    for i in range(N):\n        row = list(map(int, data[index:index + N]))\n        board.append(row)\n        index += N\n    \n    positions = {}\n    for i in range(N):\n        for j in range(N):\n            positions[board[i][j]] = (i, j)\n    \n    piece_moves = {\n        'knight': [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)],\n        'bishop': [(i, i) for i in range(-N + 1, N) if i != 0] + [(i, -i) for i in range(-N + 1, N) if i != 0],\n        'rook': [(i, 0) for i in range(-N + 1, N) if i != 0] + [(0, i) for i in range(-N + 1, N) if i != 0]\n    }\n    \n    min_steps = float('inf')\n    min_replacements = float('inf')\n    \n    for start_piece in piece_moves:\n        steps, replacements = 0, 0\n        for target in range(2, N * N + 1):\n            current_pos = positions[target - 1]\n            next_pos = positions[target]\n            res = bfs(current_pos, start_piece, next_pos, piece_moves, N)\n            if res:\n                step, replacement = res\n                steps += step\n                replacements += replacement\n            else:\n                break\n        \n        if steps < min_steps or (steps == min_steps and replacements < min_replacements):\n            min_steps = steps\n            min_replacements = replacements\n    \n    print(min_steps, min_replacements)\n\nif __name__ == \"__main__\":\n    main()\n",
    "pass_rate": 0.19387755102040816,
    "passed_tests": 19,
    "total_tests": 98
}
{
    "task_id": "0106",
    "question": "\u0415\u0441\u0442\u044c n-\u043f\u043e\u0434\u044a\u0435\u0437\u0434\u043d\u044b\u0439 \u0434\u043e\u043c, \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0435 \u043f\u043e m \u044d\u0442\u0430\u0436\u0435\u0439, \u0438 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u044d\u0442\u0430\u0436\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0430 \u0440\u043e\u0432\u043d\u043e k \u043a\u0432\u0430\u0440\u0442\u0438\u0440. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432 \u0434\u043e\u043c\u0435 \u0432\u0441\u0435\u0433\u043e n\u00b7m\u00b7k \u043a\u0432\u0430\u0440\u0442\u0438\u0440. \u041e\u043d\u0438 \u043f\u0440\u043e\u043d\u0443\u043c\u0435\u0440\u043e\u0432\u0430\u043d\u044b \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043e\u0442 1 \u0434\u043e n\u00b7m\u00b7k, \u0442\u043e \u0435\u0441\u0442\u044c \u043f\u0435\u0440\u0432\u0430\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430 \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u044d\u0442\u0430\u0436\u0435 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0435 \u0438\u043c\u0435\u0435\u0442 \u043d\u043e\u043c\u0435\u0440 1, \u043f\u0435\u0440\u0432\u0430\u044f \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0430 \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u043c \u044d\u0442\u0430\u0436\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u043e\u043c\u0435\u0440 k + 1 \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u044d\u0442\u043e\u0433\u043e \u0434\u043e\u043c\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u043d \u043a\u0440\u0443\u0433\u043b\u044b\u0439. \u0422\u043e \u0435\u0441\u0442\u044c \u0435\u0441\u043b\u0438 \u043e\u0431\u0445\u043e\u0434\u0438\u0442\u044c \u0435\u0433\u043e \u043f\u043e \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0435\u043b\u043a\u0435, \u0442\u043e \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0430 \u043d\u043e\u043c\u0435\u0440 1 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043f\u043e\u0434\u044a\u0435\u0437\u0434 \u043d\u043e\u043c\u0435\u0440 2, \u0437\u0430\u0442\u0435\u043c \u043f\u043e\u0434\u044a\u0435\u0437\u0434 \u043d\u043e\u043c\u0435\u0440 3 \u0438 \u0442\u0430\u043a \u0434\u0430\u043b\u0435\u0435 \u0434\u043e \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0430 \u043d\u043e\u043c\u0435\u0440 n. \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0430 \u043d\u043e\u043c\u0435\u0440 n \u0441\u043d\u043e\u0432\u0430 \u0438\u0434\u0451\u0442 \u043f\u043e\u0434\u044a\u0435\u0437\u0434 \u043d\u043e\u043c\u0435\u0440 1.\n\n\u042d\u0434\u0432\u0430\u0440\u0434 \u0436\u0438\u0432\u0451\u0442 \u0432 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0435 \u043d\u043e\u043c\u0435\u0440 a, \u0430 \u041d\u0430\u0442\u0430\u0448\u0430\u00a0\u2014 \u0432 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u0435 \u043d\u043e\u043c\u0435\u0440 b. \u041f\u0435\u0440\u0435\u0445\u043e\u0434 \u043d\u0430 1 \u044d\u0442\u0430\u0436 \u0432\u0432\u0435\u0440\u0445 \u0438\u043b\u0438 \u0432\u043d\u0438\u0437 \u043f\u043e \u043b\u0435\u0441\u0442\u043d\u0438\u0446\u0435 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 5 \u0441\u0435\u043a\u0443\u043d\u0434, \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u043e\u0442 \u0434\u0432\u0435\u0440\u0438 \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0430 \u043a \u0434\u0432\u0435\u0440\u0438 \u0441\u043e\u0441\u0435\u0434\u043d\u0435\u0433\u043e \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0430\u00a0\u2014 15 \u0441\u0435\u043a\u0443\u043d\u0434, \u0430 \u043f\u0435\u0440\u0435\u0445\u043e\u0434 \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u0442\u0430\u0436\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0430 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043c\u0433\u043d\u043e\u0432\u0435\u043d\u043d\u043e. \u0422\u0430\u043a\u0436\u0435 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0435 \u0434\u043e\u043c\u0430 \u0435\u0441\u0442\u044c \u043b\u0438\u0444\u0442. \u041e\u043d \u0443\u0441\u0442\u0440\u043e\u0435\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: \u043e\u043d \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u0440\u0438\u0435\u0437\u0436\u0430\u0435\u0442 \u0440\u043e\u0432\u043d\u043e \u0447\u0435\u0440\u0435\u0437 10 \u0441\u0435\u043a\u0443\u043d\u0434 \u043f\u043e\u0441\u043b\u0435 \u0432\u044b\u0437\u043e\u0432\u0430, \u0430 \u0447\u0442\u043e\u0431\u044b \u043f\u0435\u0440\u0435\u043c\u0435\u0441\u0442\u0438\u0442\u044c \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u043d\u0430 \u043e\u0434\u0438\u043d \u044d\u0442\u0430\u0436 \u0432\u0432\u0435\u0440\u0445 \u0438\u043b\u0438 \u0432\u043d\u0438\u0437, \u043b\u0438\u0444\u0442 \u0442\u0440\u0430\u0442\u0438\u0442 \u0440\u043e\u0432\u043d\u043e 1 \u0441\u0435\u043a\u0443\u043d\u0434\u0443. \u041f\u043e\u0441\u0430\u0434\u043a\u0430 \u0438 \u0432\u044b\u0441\u0430\u0434\u043a\u0430 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u044f\u0442 \u043c\u0433\u043d\u043e\u0432\u0435\u043d\u043d\u043e.\n\n\u041f\u043e\u043c\u043e\u0433\u0438\u0442\u0435 \u042d\u0434\u0432\u0430\u0440\u0434\u0443 \u043d\u0430\u0439\u0442\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043d \u0441\u043c\u043e\u0436\u0435\u0442 \u0434\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u0434\u043e \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u041d\u0430\u0442\u0430\u0448\u0438. \u0421\u0447\u0438\u0442\u0430\u0439\u0442\u0435, \u0447\u0442\u043e \u042d\u0434\u0432\u0430\u0440\u0434 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0439\u0442\u0438 \u0438\u0437 \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u0442\u0430\u0436\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0430 (\u044d\u0442\u043e \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043c\u0433\u043d\u043e\u0432\u0435\u043d\u043d\u043e). \u0415\u0441\u043b\u0438 \u042d\u0434\u0432\u0430\u0440\u0434 \u0441\u0442\u043e\u0438\u0442 \u043f\u0435\u0440\u0435\u0434 \u0434\u0432\u0435\u0440\u044c\u044e \u043a\u0430\u043a\u043e\u0433\u043e-\u0442\u043e \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0430, \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u0439\u0442\u0438 \u0432 \u043d\u0435\u0433\u043e \u0438 \u0441\u0440\u0430\u0437\u0443 \u043e\u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u044d\u0442\u0430\u0436\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0430 (\u044d\u0442\u043e \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043c\u0433\u043d\u043e\u0432\u0435\u043d\u043d\u043e). \u042d\u0434\u0432\u0430\u0440\u0434 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u0431\u0438\u0440\u0430\u0442\u044c, \u0432 \u043a\u0430\u043a\u043e\u043c \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0438\u0434\u0442\u0438 \u0432\u043e\u043a\u0440\u0443\u0433 \u0434\u043e\u043c\u0430.\n\n\n-----\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435-----\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043b\u0435\u0434\u0443\u044e\u0442 \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430 n, m, k (1 \u2264 n, m, k \u2264 1000)\u00a0\u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u043e\u0432 \u0432 \u0434\u043e\u043c\u0435, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u0430\u0436\u0435\u0439 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0435 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0440\u0442\u0438\u0440 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u044d\u0442\u0430\u0436\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e.\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 a \u0438 b (1 \u2264 a, b \u2264 n\u00b7m\u00b7k)\u00a0\u2014 \u043d\u043e\u043c\u0435\u0440\u0430 \u043a\u0432\u0430\u0440\u0442\u0438\u0440, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0436\u0438\u0432\u0443\u0442 \u042d\u0434\u0432\u0430\u0440\u0434 \u0438 \u041d\u0430\u0442\u0430\u0448\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u044d\u0442\u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b. \n\n\n-----\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435-----\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e\u00a0\u2014 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f (\u0432 \u0441\u0435\u043a\u0443\u043d\u0434\u0430\u0445), \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u042d\u0434\u0432\u0430\u0440\u0434 \u0441\u043c\u043e\u0436\u0435\u0442 \u0434\u043e\u0431\u0440\u0430\u0442\u044c\u0441\u044f \u043e\u0442 \u0441\u0432\u043e\u0435\u0439 \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u0434\u043e \u043a\u0432\u0430\u0440\u0442\u0438\u0440\u044b \u041d\u0430\u0442\u0430\u0448\u0438.\n\n\n-----\u041f\u0440\u0438\u043c\u0435\u0440\u044b-----\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n4 10 5\n200 6\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n39\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n3 1 5\n7 2\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n15\n\n\n\n-----\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435-----\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u042d\u0434\u0432\u0430\u0440\u0434 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 4 \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0435 \u043d\u0430 10 \u044d\u0442\u0430\u0436\u0435, \u0430 \u041d\u0430\u0442\u0430\u0448\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 1 \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0435 \u043d\u0430 2 \u044d\u0442\u0430\u0436\u0435. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u042d\u0434\u0432\u0430\u0440\u0434\u0443 \u0432\u044b\u0433\u043e\u0434\u043d\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043f\u0443\u0441\u0442\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u043b\u0438\u0444\u0442\u0435 \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u0442\u0430\u0436 (\u043d\u0430 \u044d\u0442\u043e \u043e\u043d \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u0442 19 \u0441\u0435\u043a\u0443\u043d\u0434, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 10\u00a0\u2014 \u043d\u0430 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u0438 9\u00a0\u2014 \u043d\u0430 \u043f\u043e\u0435\u0437\u0434\u043a\u0443 \u043d\u0430 \u043b\u0438\u0444\u0442\u0435), \u0437\u0430\u0442\u0435\u043c \u043e\u0431\u043e\u0439\u0442\u0438 \u0434\u043e\u043c \u043f\u0440\u043e\u0442\u0438\u0432 \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0435\u043b\u043a\u0438 \u0434\u043e \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0430 \u043d\u043e\u043c\u0435\u0440 1 (\u043d\u0430 \u044d\u0442\u043e \u043e\u043d \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u0442 15 \u0441\u0435\u043a\u0443\u043d\u0434), \u0438 \u043d\u0430\u043a\u043e\u043d\u0435\u0446 \u043f\u043e\u0434\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u043e \u043b\u0435\u0441\u0442\u043d\u0438\u0446\u0435 \u043d\u0430 \u044d\u0442\u0430\u0436 \u043d\u043e\u043c\u0435\u0440 2 (\u043d\u0430 \u044d\u0442\u043e \u043e\u043d \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u0442 5 \u0441\u0435\u043a\u0443\u043d\u0434). \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u043e\u0442\u0432\u0435\u0442 \u0440\u0430\u0432\u0435\u043d 19 + 15 + 5 = 39.\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u042d\u0434\u0432\u0430\u0440\u0434 \u0436\u0438\u0432\u0451\u0442 \u0432 \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0435 2 \u043d\u0430 \u044d\u0442\u0430\u0436\u0435 1, \u0430 \u041d\u0430\u0442\u0430\u0448\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0435 1 \u043d\u0430 \u044d\u0442\u0430\u0436\u0435 1. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u042d\u0434\u0432\u0430\u0440\u0434\u0443 \u0432\u044b\u0433\u043e\u0434\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0431\u043e\u0439\u0442\u0438 \u0434\u043e\u043c \u043f\u043e \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0435\u043b\u043a\u0435 \u0434\u043e \u043f\u043e\u0434\u044a\u0435\u0437\u0434\u0430 1, \u043d\u0430 \u044d\u0442\u043e \u043e\u043d \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u0442 15 \u0441\u0435\u043a\u0443\u043d\u0434.",
    "generated_code": "# Read input values\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nm = int(data[1])\nk = int(data[2])\na = int(data[3])\nb = int(data[4])\n\n# Calculate positions in terms of entrances and floors\ndef get_position(x):\n    x -= 1\n    entrance = (x // k) // m + 1\n    floor = (x // k) % m + 1\n    return entrance, floor\n\na_entrance, a_floor = get_position(a)\nb_entrance, b_floor = get_position(b)\n\n# Calculate distances\ndist_entrances = min(abs(a_entrance - b_entrance), n - abs(a_entrance - b_entrance)) * 15\ndist_floors = abs(a_floor - b_floor) * 5\n\n# If Edward is not on the 1st floor, he needs to use the elevator\nif a_floor != 1:\n    elevator_time = 10 + (a_floor - 1)\nelse:\n    elevator_time = 0\n\n# Minimum time to go from a to b\nmin_time = elevator_time + dist_entrances + dist_floors\n\nprint(min_time)\n",
    "pass_rate": 0.11224489795918367,
    "passed_tests": 11,
    "total_tests": 98
}
{
    "task_id": "0107",
    "question": "Top-model Izabella participates in the competition. She wants to impress judges and show her mathematical skills.\n\nHer problem is following: for given string, consisting of only 0 and 1, tell if it's possible to remove some digits in such a way, that remaining number is a representation of some positive integer, divisible by 64, in the binary numerical system.\n\n\n-----Input-----\n\nIn the only line given a non-empty binary string s with length up to 100.\n\n\n-----Output-----\n\nPrint \u00abyes\u00bb (without quotes) if it's possible to remove digits required way and \u00abno\u00bb otherwise.\n\n\n-----Examples-----\nInput\n100010001\n\nOutput\nyes\nInput\n100\n\nOutput\nno\n\n\n-----Note-----\n\nIn the first test case, you can get string 1 000 000 after removing two ones which is a representation of number 64 in the binary numerical system.\n\nYou can read more about binary numeral system representation here: https://en.wikipedia.org/wiki/Binary_system",
    "generated_code": "s = input().strip()\n\n# We need to find a subsequence that represents a number which is divisible by 64.\n# This means the number should end with '000000' (i.e., 6 zeros).\n\n# Let's check if there are at least 6 zeros in the string.\nzero_count = s.count('0')\n\nif zero_count < 6:\n    print(\"no\")\nelse:\n    # Now we need to make sure there is at least one '1' before the last 6 zeros.\n    # We can iterate through the string and count the zeros while ensuring there's at least one '1' before the last 6 zeros.\n    count = 0\n    found_one = False\n    for char in reversed(s):\n        if char == '0':\n            count += 1\n        if count == 6:\n            break\n        if char == '1':\n            found_one = True\n    \n    if found_one and count >= 6:\n        print(\"yes\")\n    else:\n        print(\"no\")\n",
    "pass_rate": 0.3979591836734694,
    "passed_tests": 39,
    "total_tests": 98
}
{
    "task_id": "0108",
    "question": "You are given a string s consisting of |s| small english letters.\n\nIn one move you can replace any character of this string to the next character in alphabetical order (a will be replaced with b, s will be replaced with t, etc.). You cannot replace letter z with any other letter.\n\nYour target is to make some number of moves (not necessary minimal) to get string abcdefghijklmnopqrstuvwxyz (english alphabet) as a subsequence. Subsequence of the string is the string that is obtained by deleting characters at some positions. You need to print the string that will be obtained from the given string and will be contain english alphabet as a subsequence or say that it is impossible.\n\n\n-----Input-----\n\nThe only one line of the input consisting of the string s consisting of |s| (1 \u2264 |s| \u2264 10^5) small english letters.\n\n\n-----Output-----\n\nIf you can get a string that can be obtained from the given string and will contain english alphabet as a subsequence, print it. Otherwise print \u00ab-1\u00bb (without quotes).\n\n\n-----Examples-----\nInput\naacceeggiikkmmooqqssuuwwyy\n\nOutput\nabcdefghijklmnopqrstuvwxyz\n\nInput\nthereisnoanswer\n\nOutput\n-1",
    "generated_code": "s = input()\n\n# The target string we aim to get as a subsequence\ntarget = \"abcdefghijklmnopqrstuvwxyz\"\n\n# Pointers for both the input string `s` and the target string\ni, j = 0, 0\n\n# Lengths of the input string and the target string\nn, m = len(s), len(target)\n\n# Iterate over the input string and try to match characters with the target string\nwhile i < n and j < m:\n    if s[i] == target[j]:\n        j += 1\n    i += 1\n\n# Check if we have matched the entire target string\nif j == m:\n    print(target)\nelse:\n    print(-1)\n",
    "pass_rate": 0.12244897959183673,
    "passed_tests": 12,
    "total_tests": 98
}
{
    "task_id": "0109",
    "question": "While Grisha was celebrating New Year with Ded Moroz, Misha gifted Sasha a small rectangular pond of size n \u00d7 m, divided into cells of size 1 \u00d7 1, inhabited by tiny evil fishes (no more than one fish per cell, otherwise they'll strife!).\n\nThe gift bundle also includes a square scoop of size r \u00d7 r, designed for fishing. If the lower-left corner of the scoop-net is located at cell (x, y), all fishes inside the square (x, y)...(x + r - 1, y + r - 1) get caught. Note that the scoop-net should lie completely inside the pond when used.\n\nUnfortunately, Sasha is not that skilled in fishing and hence throws the scoop randomly. In order to not frustrate Sasha, Misha decided to release k fishes into the empty pond in such a way that the expected value of the number of caught fishes is as high as possible. Help Misha! In other words, put k fishes in the pond into distinct cells in such a way that when the scoop-net is placed into a random position among (n - r + 1)\u00b7(m - r + 1) possible positions, the average number of caught fishes is as high as possible.\n\n\n-----Input-----\n\nThe only line contains four integers n, m, r, k (1 \u2264 n, m \u2264 10^5, 1 \u2264 r \u2264 min(n, m), 1 \u2264 k \u2264 min(n\u00b7m, 10^5)).\n\n\n-----Output-----\n\nPrint a single number\u00a0\u2014 the maximum possible expected number of caught fishes.\n\nYou answer is considered correct, is its absolute or relative error does not exceed 10^{ - 9}. Namely, let your answer be a, and the jury's answer be b. Your answer is considered correct, if $\\frac{|a - b|}{\\operatorname{max}(1,|b|)} \\leq 10^{-9}$.\n\n\n-----Examples-----\nInput\n3 3 2 3\n\nOutput\n2.0000000000\n\nInput\n12 17 9 40\n\nOutput\n32.8333333333\n\n\n\n-----Note-----\n\nIn the first example you can put the fishes in cells (2, 1), (2, 2), (2, 3). In this case, for any of four possible positions of the scoop-net (highlighted with light green), the number of fishes inside is equal to two, and so is the expected value. [Image]",
    "generated_code": "def calculate_expected_fishes(n, m, r, k):\n    # First, calculate the number of times each cell is covered by the scoop-net.\n    def calculate_coverage(x, y):\n        return (min(n - r + 1, x + 1) - max(0, x - r + 1)) * (min(m - r + 1, y + 1) - max(0, y - r + 1))\n\n    # Priority queue to store fish positions by coverage\n    import heapq\n    pq = []\n    \n    # Populate the priority queue with all possible cell coordinates and their coverage\n    for x in range(n):\n        for y in range(m):\n            coverage = calculate_coverage(x, y)\n            heapq.heappush(pq, (-coverage, x, y))\n    \n    # Place the fishes in the cells with the highest coverage\n    total_coverage = 0\n    for _ in range(k):\n        coverage, x, y = heapq.heappop(pq)\n        total_coverage -= coverage\n    \n    # Calculate the expected value\n    total_positions = (n - r + 1) * (m - r + 1)\n    expected_value = total_coverage / total_positions\n    \n    return expected_value\n\n# Read input\nimport sys\ninput = sys.stdin.read\nn, m, r, k = map(int, input().strip().split())\n\n# Calculate and print the answer\nresult = calculate_expected_fishes(n, m, r, k)\nprint(f\"{result:.10f}\")\n",
    "pass_rate": 0.30927835051546393,
    "passed_tests": 30,
    "total_tests": 97
}
{
    "task_id": "0110",
    "question": "Nick had received an awesome array of integers $a=[a_1, a_2, \\dots, a_n]$ as a gift for his $5$ birthday from his mother. He was already going to explore its various properties but after unpacking he was disappointed a lot because the product $a_1 \\cdot a_2 \\cdot \\dots a_n$ of its elements seemed to him not large enough.\n\nHe was ready to throw out the array, but his mother reassured him. She told him, that array would not be spoiled after the following operation: choose any index $i$ ($1 \\le i \\le n$) and do $a_i := -a_i - 1$.\n\nFor example, he can change array $[3, -1, -4, 1]$ to an array $[-4, -1, 3, 1]$ after applying this operation to elements with indices $i=1$ and $i=3$. \n\nKolya had immediately understood that sometimes it's possible to increase the product of integers of the array a lot. Now he has decided that he wants to get an array with the maximal possible product of integers using only this operation with its elements (possibly zero, one or more times, as many as he wants), it is not forbidden to do this operation several times for the same index. \n\nHelp Kolya and print the array with the maximal possible product of elements $a_1 \\cdot a_2 \\cdot \\dots a_n$ which can be received using only this operation in some order.\n\nIf there are multiple answers, print any of them.\n\n\n-----Input-----\n\nThe first line contains integer $n$ ($1 \\leq n \\leq 10^{5}$)\u00a0\u2014 number of integers in the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($-10^{6} \\leq a_i \\leq 10^{6}$)\u00a0\u2014 elements of the array\n\n\n-----Output-----\n\nPrint $n$ numbers\u00a0\u2014 elements of the array with the maximal possible product of elements which can be received using only this operation in some order from the given array.\n\nIf there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n4\n2 2 2 2\n\nOutput\n-3 -3 -3 -3 \nInput\n1\n0\n\nOutput\n0 \nInput\n3\n-3 -3 2\n\nOutput\n-3 -3 2",
    "generated_code": "def maximize_product(n, a):\n    # Apply the transformation to maximize product\n    for i in range(n):\n        if a[i] >= 0:\n            a[i] = -a[i] - 1\n    \n    # Check the number of negative numbers\n    negative_count = sum(1 for x in a if x < 0)\n    \n    # If the number of negative numbers is odd, flip the smallest (most negative) number to positive\n    if negative_count % 2 != 0:\n        min_index = a.index(min(a))\n        a[min_index] = -a[min_index] - 1\n    \n    return a\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\na = list(map(int, data[1:]))\n\n# Get the result\nresult = maximize_product(n, a)\n\n# Print the result\nprint(' '.join(map(str, result)))\n",
    "pass_rate": 0.9895833333333334,
    "passed_tests": 95,
    "total_tests": 96
}
{
    "task_id": "0111",
    "question": "You are given two integers n and k. Find k-th smallest divisor of n, or report that it doesn't exist.\n\nDivisor of n is any such natural number, that n can be divided by it without remainder.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 10^15, 1 \u2264 k \u2264 10^9).\n\n\n-----Output-----\n\nIf n has less than k divisors, output -1.\n\nOtherwise, output the k-th smallest divisor of n.\n\n\n-----Examples-----\nInput\n4 2\n\nOutput\n2\n\nInput\n5 3\n\nOutput\n-1\n\nInput\n12 5\n\nOutput\n6\n\n\n\n-----Note-----\n\nIn the first example, number 4 has three divisors: 1, 2 and 4. The second one is 2.\n\nIn the second example, number 5 has only two divisors: 1 and 5. The third divisor doesn't exist, so the answer is -1.",
    "generated_code": "def kth_smallest_divisor(n, k):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    divisors.sort()\n    \n    if len(divisors) < k:\n        return -1\n    else:\n        return divisors[k-1]\n\n# Use Standard Input format\nn, k = map(int, input().split())\nprint(kth_smallest_divisor(n, k))\n",
    "pass_rate": 1.0,
    "passed_tests": 96,
    "total_tests": 96
}
{
    "task_id": "0112",
    "question": "Absent-minded Masha got set of n cubes for her birthday.\n\nAt each of 6 faces of each cube, there is exactly one digit from 0 to 9. Masha became interested what is the largest natural x such she can make using her new cubes all integers from 1 to x.\n\nTo make a number Masha can rotate her cubes and put them in a row. After that, she looks at upper faces of cubes from left to right and reads the number.\n\nThe number can't contain leading zeros. It's not required to use all cubes to build a number.\n\nPay attention: Masha can't make digit 6 from digit 9 and vice-versa using cube rotations.\n\n\n-----Input-----\n\nIn first line integer n is given (1 \u2264 n \u2264 3)\u00a0\u2014 the number of cubes, Masha got for her birthday.\n\nEach of next n lines contains 6 integers a_{i}_{j} (0 \u2264 a_{i}_{j} \u2264 9)\u00a0\u2014 number on j-th face of i-th cube.\n\n\n-----Output-----\n\nPrint single integer\u00a0\u2014 maximum number x such Masha can make any integers from 1 to x using her cubes or 0 if Masha can't make even 1.\n\n\n-----Examples-----\nInput\n3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n\nOutput\n87\nInput\n3\n0 1 3 5 6 8\n1 2 4 5 7 8\n2 3 4 6 7 9\n\nOutput\n98\n\n\n-----Note-----\n\nIn the first test case, Masha can build all numbers from 1 to 87, but she can't make 88 because there are no two cubes with digit 8.",
    "generated_code": "def max_number_with_cubes(cubes):\n    from itertools import permutations\n\n    def can_form_number(number, cubes):\n        number_str = str(number)\n        n = len(number_str)\n        if n > len(cubes):\n            return False\n        for perm in permutations(cubes, n):\n            if all(number_str[i] in perm[i] for i in range(n)):\n                return True\n        return False\n\n    cubes = [set(map(int, input().split())) for _ in range(cubes)]\n    max_num = 0\n    while can_form_number(max_num + 1, cubes):\n        max_num += 1\n    return max_num\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(max_number_with_cubes(n))\n",
    "pass_rate": 0.15625,
    "passed_tests": 15,
    "total_tests": 96
}
{
    "task_id": "0113",
    "question": "For a given positive integer n denote its k-rounding as the minimum positive integer x, such that x ends with k or more zeros in base 10 and is divisible by n.\n\nFor example, 4-rounding of 375 is 375\u00b780 = 30000. 30000 is the minimum integer such that it ends with 4 or more zeros and is divisible by 375.\n\nWrite a program that will perform the k-rounding of n.\n\n\n-----Input-----\n\nThe only line contains two integers n and k (1 \u2264 n \u2264 10^9, 0 \u2264 k \u2264 8).\n\n\n-----Output-----\n\nPrint the k-rounding of n.\n\n\n-----Examples-----\nInput\n375 4\n\nOutput\n30000\n\nInput\n10000 1\n\nOutput\n10000\n\nInput\n38101 0\n\nOutput\n38101\n\nInput\n123456789 8\n\nOutput\n12345678900000000",
    "generated_code": "n, k = map(int, input().split())\n\n# Calculate the smallest number 10^k, which is 1 followed by k zeros.\nten_power_k = 10 ** k\n\n# The k-rounding of n is the smallest multiple of ten_power_k that is also a multiple of n.\n# This can be found by calculating the least common multiple (LCM) of n and ten_power_k.\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nresult = lcm(n, ten_power_k)\nprint(result)\n",
    "pass_rate": 1.0,
    "passed_tests": 96,
    "total_tests": 96
}
{
    "task_id": "0114",
    "question": "You are given two matrices $A$ and $B$. Each matrix contains exactly $n$ rows and $m$ columns. Each element of $A$ is either $0$ or $1$; each element of $B$ is initially $0$.\n\nYou may perform some operations with matrix $B$. During each operation, you choose any submatrix of $B$ having size $2 \\times 2$, and replace every element in the chosen submatrix with $1$. In other words, you choose two integers $x$ and $y$ such that $1 \\le x < n$ and $1 \\le y < m$, and then set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$.\n\nYour goal is to make matrix $B$ equal to matrix $A$. Two matrices $A$ and $B$ are equal if and only if every element of matrix $A$ is equal to the corresponding element of matrix $B$.\n\nIs it possible to make these matrices equal? If it is, you have to come up with a sequence of operations that makes $B$ equal to $A$. Note that you don't have to minimize the number of operations.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($2 \\le n, m \\le 50$).\n\nThen $n$ lines follow, each containing $m$ integers. The $j$-th integer in the $i$-th line is $A_{i, j}$. Each integer is either $0$ or $1$.\n\n\n-----Output-----\n\nIf it is impossible to make $B$ equal to $A$, print one integer $-1$.\n\nOtherwise, print any sequence of operations that transforms $B$ into $A$ in the following format: the first line should contain one integer $k$ \u2014 the number of operations, and then $k$ lines should follow, each line containing two integers $x$ and $y$ for the corresponding operation (set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$). The condition $0 \\le k \\le 2500$ should hold.\n\n\n-----Examples-----\nInput\n3 3\n1 1 1\n1 1 1\n0 1 1\n\nOutput\n3\n1 1\n1 2\n2 2\n\nInput\n3 3\n1 0 1\n1 0 1\n0 0 0\n\nOutput\n-1\n\nInput\n3 2\n0 0\n0 0\n0 0\n\nOutput\n0\n\n\n\n-----Note-----\n\nThe sequence of operations in the first example: $\\begin{matrix} 0 & 0 & 0 & & 1 & 1 & 0 & & 1 & 1 & 1 & & 1 & 1 & 1 \\\\ 0 & 0 & 0 & \\rightarrow & 1 & 1 & 0 & \\rightarrow & 1 & 1 & 1 & \\rightarrow & 1 & 1 & 1 \\\\ 0 & 0 & 0 & & 0 & 0 & 0 & & 0 & 0 & 0 & & 0 & 1 & 1 \\end{matrix}$",
    "generated_code": "def transform_matrices(n, m, A):\n    B = [[0] * m for _ in range(n)]\n    operations = []\n\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if A[i][j] == 1 and A[i][j + 1] == 1 and A[i + 1][j] == 1 and A[i + 1][j + 1] == 1:\n                B[i][j] = B[i][j + 1] = B[i + 1][j] = B[i + 1][j + 1] = 1\n                operations.append((i + 1, j + 1))\n\n    if A == B:\n        print(len(operations))\n        for op in operations:\n            print(op[0], op[1])\n    else:\n        print(-1)\n\n# Reading input\nn, m = map(int, input().split())\nA = [list(map(int, input().split())) for _ in range(n)]\n\n# Transform matrices\ntransform_matrices(n, m, A)\n",
    "pass_rate": 1.0,
    "passed_tests": 96,
    "total_tests": 96
}
{
    "task_id": "0115",
    "question": "The Bad Luck Island is inhabited by three kinds of species: r rocks, s scissors and p papers. At some moments of time two random individuals meet (all pairs of individuals can meet equiprobably), and if they belong to different species, then one individual kills the other one: a rock kills scissors, scissors kill paper, and paper kills a rock. Your task is to determine for each species what is the probability that this species will be the only one to inhabit this island after a long enough period of time.\n\n\n-----Input-----\n\nThe single line contains three integers r, s and p (1 \u2264 r, s, p \u2264 100)\u00a0\u2014 the original number of individuals in the species of rock, scissors and paper, respectively.\n\n\n-----Output-----\n\nPrint three space-separated real numbers: the probabilities, at which the rocks, the scissors and the paper will be the only surviving species, respectively. The answer will be considered correct if the relative or absolute error of each number doesn't exceed 10^{ - 9}.\n\n\n-----Examples-----\nInput\n2 2 2\n\nOutput\n0.333333333333 0.333333333333 0.333333333333\n\nInput\n2 1 2\n\nOutput\n0.150000000000 0.300000000000 0.550000000000\n\nInput\n1 1 3\n\nOutput\n0.057142857143 0.657142857143 0.285714285714",
    "generated_code": "def bad_luck_island(r, s, p):\n    dp = [[[0.0 for _ in range(p + 1)] for _ in range(s + 1)] for _ in range(r + 1)]\n    \n    for i in range(r + 1):\n        for j in range(s + 1):\n            for k in range(p + 1):\n                if i == 0 and j == 0 and k == 0:\n                    continue\n                if i == 0 and j == 0:\n                    dp[i][j][k] = 1.0\n                elif i == 0 and k == 0:\n                    dp[i][j][k] = 1.0\n                elif j == 0 and k == 0:\n                    dp[i][j][k] = 1.0\n                elif i == 0:\n                    dp[i][j][k] = dp[i][j - 1][k] * j / (j + k) + dp[i][j][k - 1] * k / (j + k)\n                elif j == 0:\n                    dp[i][j][k] = dp[i - 1][j][k] * i / (i + k) + dp[i][j][k - 1] * k / (i + k)\n                elif k == 0:\n                    dp[i][j][k] = dp[i - 1][j][k] * i / (i + j) + dp[i][j - 1][k] * j / (i + j)\n                else:\n                    total = i * j + j * k + k * i\n                    dp[i][j][k] = (dp[i - 1][j][k] * i * k + dp[i][j - 1][k] * j * k + dp[i][j][k - 1] * i * j) / total\n    \n    rock_prob = 0.0\n    scissor_prob = 0.0\n    paper_prob = 0.0\n    \n    for i in range(1, r + 1):\n        rock_prob += dp[i][0][0]\n    for j in range(1, s + 1):\n        scissor_prob += dp[0][j][0]\n    for k in range(1, p + 1):\n        paper_prob += dp[0][0][k]\n    \n    return rock_prob, scissor_prob, paper_prob\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    r, s, p = map(int, input().strip().split())\n    rock_prob, scissor_prob, paper_prob = bad_luck_island(r, s, p)\n    print(f\"{rock_prob:.12f} {scissor_prob:.12f} {paper_prob:.12f}\")\n",
    "pass_rate": 0.0,
    "passed_tests": 0,
    "total_tests": 96
}
{
    "task_id": "0116",
    "question": "Today an outstanding event is going to happen in the forest\u00a0\u2014 hedgehog Filya will come to his old fried Sonya!\n\nSonya is an owl and she sleeps during the day and stay awake from minute l_1 to minute r_1 inclusive. Also, during the minute k she prinks and is unavailable for Filya.\n\nFilya works a lot and he plans to visit Sonya from minute l_2 to minute r_2 inclusive.\n\nCalculate the number of minutes they will be able to spend together.\n\n\n-----Input-----\n\nThe only line of the input contains integers l_1, r_1, l_2, r_2 and k (1 \u2264 l_1, r_1, l_2, r_2, k \u2264 10^18, l_1 \u2264 r_1, l_2 \u2264 r_2), providing the segments of time for Sonya and Filya and the moment of time when Sonya prinks.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the number of minutes Sonya and Filya will be able to spend together.\n\n\n-----Examples-----\nInput\n1 10 9 20 1\n\nOutput\n2\n\nInput\n1 100 50 200 75\n\nOutput\n50\n\n\n\n-----Note-----\n\nIn the first sample, they will be together during minutes 9 and 10.\n\nIn the second sample, they will be together from minute 50 to minute 74 and from minute 76 to minute 100.",
    "generated_code": "# Read input values\nl1, r1, l2, r2, k = map(int, input().split())\n\n# Calculate the intersection of the intervals [l1, r1] and [l2, r2]\nstart = max(l1, l2)\nend = min(r1, r2)\n\n# Check if there is no overlap\nif start > end:\n    print(0)\nelse:\n    # Calculate the number of minutes they can spend together\n    # Exclude the minute k if it lies within the interval\n    if start <= k <= end:\n        print(end - start)\n    else:\n        print(end - start + 1)\n",
    "pass_rate": 1.0,
    "passed_tests": 96,
    "total_tests": 96
}
{
    "task_id": "0117",
    "question": "There is a grass field that stretches infinitely.\nIn this field, there is a negligibly small cow. Let (x, y) denote the point that is x\\ \\mathrm{cm} south and y\\ \\mathrm{cm} east of the point where the cow stands now. The cow itself is standing at (0, 0).\nThere are also N north-south lines and M east-west lines drawn on the field. The i-th north-south line is the segment connecting the points (A_i, C_i) and (B_i, C_i), and the j-th east-west line is the segment connecting the points (D_j, E_j) and (D_j, F_j).\nWhat is the area of the region the cow can reach when it can move around as long as it does not cross the segments (including the endpoints)? If this area is infinite, print INF instead.\n\n-----Constraints-----\n - All values in input are integers between -10^9 and 10^9  (inclusive).\n - 1 \\leq N, M \\leq 1000\n - A_i < B_i\\ (1 \\leq i \\leq N)\n - E_j < F_j\\ (1 \\leq j \\leq M)\n - The point (0, 0) does not lie on any of the given segments.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 B_1 C_1\n:\nA_N B_N C_N\nD_1 E_1 F_1\n:\nD_M E_M F_M\n\n-----Output-----\nIf the area of the region the cow can reach is infinite, print INF; otherwise, print an integer representing the area in \\mathrm{cm^2}.\n(Under the constraints, it can be proved that the area of the region is always an integer if it is not infinite.)\n\n-----Sample Input-----\n5 6\n1 2 0\n0 1 1\n0 2 2\n-3 4 -1\n-2 6 3\n1 0 1\n0 1 2\n2 0 2\n-1 -4 5\n3 -2 4\n1 2 4\n\n-----Sample Output-----\n13\n\nThe area of the region the cow can reach is 13\\ \\mathrm{cm^2}.",
    "generated_code": "def main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    M = int(data[1])\n    \n    north_south_lines = []\n    east_west_lines = []\n    \n    index = 2\n    for _ in range(N):\n        A, B, C = int(data[index]), int(data[index+1]), int(data[index+2])\n        north_south_lines.append((A, B, C))\n        index += 3\n    \n    for _ in range(M):\n        D, E, F = int(data[index]), int(data[index+1]), int(data[index+2])\n        east_west_lines.append((D, E, F))\n        index += 3\n    \n    min_x = -float('inf')\n    max_x = float('inf')\n    min_y = -float('inf')\n    max_y = float('inf')\n    \n    for A, B, C in north_south_lines:\n        if C == 0:\n            min_x = max(min_x, B)\n        elif C == 1:\n            min_x = max(min_x, A)\n            max_x = min(max_x, B)\n        else:\n            max_x = min(max_x, A)\n    \n    for D, E, F in east_west_lines:\n        if E == 0:\n            min_y = max(min_y, F)\n        elif E == 1:\n            min_y = max(min_y, D)\n            max_y = min(max_y, F)\n        else:\n            max_y = min(max_y, D)\n    \n    if min_x == -float('inf') or max_x == float('inf') or min_y == -float('inf') or max_y == float('inf'):\n        print('INF')\n    else:\n        if min_x < max_x and min_y < max_y:\n            area = (max_x - min_x) * (max_y - min_y)\n            print(area)\n        else:\n            print(0)\n\nif __name__ == \"__main__\":\n    main()\n",
    "pass_rate": 0.2604166666666667,
    "passed_tests": 25,
    "total_tests": 96
}
{
    "task_id": "0118",
    "question": "Ted has a pineapple. This pineapple is able to bark like a bulldog! At time t (in seconds) it barks for the first time. Then every s seconds after it, it barks twice with 1 second interval. Thus it barks at times t, t + s, t + s + 1, t + 2s, t + 2s + 1, etc.\n\n [Image] \n\nBarney woke up in the morning and wants to eat the pineapple, but he can't eat it when it's barking. Barney plans to eat it at time x (in seconds), so he asked you to tell him if it's gonna bark at that time.\n\n\n-----Input-----\n\nThe first and only line of input contains three integers t, s and x (0 \u2264 t, x \u2264 10^9, 2 \u2264 s \u2264 10^9)\u00a0\u2014 the time the pineapple barks for the first time, the pineapple barking interval, and the time Barney wants to eat the pineapple respectively.\n\n\n-----Output-----\n\nPrint a single \"YES\" (without quotes) if the pineapple will bark at time x or a single \"NO\" (without quotes) otherwise in the only line of output.\n\n\n-----Examples-----\nInput\n3 10 4\n\nOutput\nNO\n\nInput\n3 10 3\n\nOutput\nYES\n\nInput\n3 8 51\n\nOutput\nYES\n\nInput\n3 8 52\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first and the second sample cases pineapple will bark at moments 3, 13, 14, ..., so it won't bark at the moment 4 and will bark at the moment 3.\n\nIn the third and fourth sample cases pineapple will bark at moments 3, 11, 12, 19, 20, 27, 28, 35, 36, 43, 44, 51, 52, 59, ..., so it will bark at both moments 51 and 52.",
    "generated_code": "t, s, x = map(int, input().split())\n\nif x == t:\n    print(\"YES\")\nelif x > t and ((x - t) % s == 0 or (x - t - 1) % s == 0 and x != t + 1):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
    "pass_rate": 1.0,
    "passed_tests": 95,
    "total_tests": 95
}
{
    "task_id": "0119",
    "question": "You are given a sequence a_1, a_2, ..., a_{n} of one-dimensional segments numbered 1 through n. Your task is to find two distinct indices i and j such that segment a_{i} lies within segment a_{j}.\n\nSegment [l_1, r_1] lies within segment [l_2, r_2] iff l_1 \u2265 l_2 and r_1 \u2264 r_2.\n\nPrint indices i and j. If there are multiple answers, print any of them. If no answer exists, print -1 -1.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 3\u00b710^5) \u2014 the number of segments.\n\nEach of the next n lines contains two integers l_{i} and r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 10^9) \u2014 the i-th segment.\n\n\n-----Output-----\n\nPrint two distinct indices i and j such that segment a_{i} lies within segment a_{j}. If there are multiple answers, print any of them. If no answer exists, print -1 -1.\n\n\n-----Examples-----\nInput\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n\nOutput\n2 1\n\nInput\n3\n1 5\n2 6\n6 20\n\nOutput\n-1 -1\n\n\n\n-----Note-----\n\nIn the first example the following pairs are considered correct:  (2, 1), (3, 1), (4, 1), (5, 1) \u2014 not even touching borders;  (3, 2), (4, 2), (3, 5), (4, 5) \u2014 touch one border;  (5, 2), (2, 5) \u2014 match exactly.",
    "generated_code": "n = int(input())\nsegments = []\n\nfor i in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r, i + 1))\n\n# Sort segments by the starting point, and then by the ending point in descending order\nsegments.sort(key=lambda x: (x[0], -x[1]))\n\nmax_r = -1\nmax_r_index = -1\n\nfor l, r, index in segments:\n    if max_r >= r:\n        print(index, max_r_index)\n        break\n    if r > max_r:\n        max_r = r\n        max_r_index = index\nelse:\n    print(-1, -1)\n",
    "pass_rate": 1.0,
    "passed_tests": 95,
    "total_tests": 95
}
{
    "task_id": "0120",
    "question": "The process of mammoth's genome decoding in Berland comes to its end!\n\nOne of the few remaining tasks is to restore unrecognized nucleotides in a found chain s. Each nucleotide is coded with a capital letter of English alphabet: 'A', 'C', 'G' or 'T'. Unrecognized nucleotides are coded by a question mark '?'. Thus, s is a string consisting of letters 'A', 'C', 'G', 'T' and characters '?'.\n\nIt is known that the number of nucleotides of each of the four types in the decoded genome of mammoth in Berland should be equal.\n\nYour task is to decode the genome and replace each unrecognized nucleotide with one of the four types so that the number of nucleotides of each of the four types becomes equal.\n\n\n-----Input-----\n\nThe first line contains the integer n (4 \u2264 n \u2264 255)\u00a0\u2014 the length of the genome.\n\nThe second line contains the string s of length n\u00a0\u2014 the coded genome. It consists of characters 'A', 'C', 'G', 'T' and '?'.\n\n\n-----Output-----\n\nIf it is possible to decode the genome, print it. If there are multiple answer, print any of them. If it is not possible, print three equals signs in a row: \"===\" (without quotes).\n\n\n-----Examples-----\nInput\n8\nAG?C??CT\n\nOutput\nAGACGTCT\n\nInput\n4\nAGCT\n\nOutput\nAGCT\n\nInput\n6\n????G?\n\nOutput\n===\n\nInput\n4\nAA??\n\nOutput\n===\n\n\n\n-----Note-----\n\nIn the first example you can replace the first question mark with the letter 'A', the second question mark with the letter 'G', the third question mark with the letter 'T', then each nucleotide in the genome would be presented twice.\n\nIn the second example the genome is already decoded correctly and each nucleotide is exactly once in it.\n\nIn the third and the fourth examples it is impossible to decode the genom.",
    "generated_code": "s = input()\nn = int(s)\ngenome = input()\n\nA_count = genome.count('A')\nC_count = genome.count('C')\nG_count = genome.count('G')\nT_count = genome.count('T')\nquestion_count = genome.count('?')\n\nmax_count = max(A_count, C_count, G_count, T_count)\nneeded_for_A = max_count - A_count\nneeded_for_C = max_count - C_count\nneeded_for_G = max_count - G_count\nneeded_for_T = max_count - T_count\n\ntotal_needed = needed_for_A + needed_for_C + needed_for_G + needed_for_T\n\nif total_needed != question_count or (n % 4 != 0):\n    print(\"===\")\nelse:\n    genome_list = list(genome)\n    for i in range(len(genome_list)):\n        if genome_list[i] == '?':\n            if needed_for_A > 0:\n                genome_list[i] = 'A'\n                needed_for_A -= 1\n            elif needed_for_C > 0:\n                genome_list[i] = 'C'\n                needed_for_C -= 1\n            elif needed_for_G > 0:\n                genome_list[i] = 'G'\n                needed_for_G -= 1\n            elif needed_for_T > 0:\n                genome_list[i] = 'T'\n                needed_for_T -= 1\n\n    print(''.join(genome_list))\n",
    "pass_rate": 0.3894736842105263,
    "passed_tests": 37,
    "total_tests": 95
}
{
    "task_id": "0121",
    "question": "Ilya is an experienced player in tic-tac-toe on the 4 \u00d7 4 field. He always starts and plays with Xs. He played a lot of games today with his friend Arseny. The friends became tired and didn't finish the last game. It was Ilya's turn in the game when they left it. Determine whether Ilya could have won the game by making single turn or not. \n\nThe rules of tic-tac-toe on the 4 \u00d7 4 field are as follows. Before the first turn all the field cells are empty. The two players take turns placing their signs into empty cells (the first player places Xs, the second player places Os). The player who places Xs goes first, the another one goes second. The winner is the player who first gets three of his signs in a row next to each other (horizontal, vertical or diagonal).\n\n\n-----Input-----\n\nThe tic-tac-toe position is given in four lines.\n\nEach of these lines contains four characters. Each character is '.' (empty cell), 'x' (lowercase English letter x), or 'o' (lowercase English letter o). It is guaranteed that the position is reachable playing tic-tac-toe, and it is Ilya's turn now (in particular, it means that the game is not finished). It is possible that all the cells are empty, it means that the friends left without making single turn.\n\n\n-----Output-----\n\nPrint single line: \"YES\" in case Ilya could have won by making single turn, and \"NO\" otherwise.\n\n\n-----Examples-----\nInput\nxx..\n.oo.\nx...\noox.\n\nOutput\nYES\n\nInput\nx.ox\nox..\nx.o.\noo.x\n\nOutput\nNO\n\nInput\nx..x\n..oo\no...\nx.xo\n\nOutput\nYES\n\nInput\no.x.\no...\n.x..\nooxx\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example Ilya had two winning moves: to the empty cell in the left column and to the leftmost empty cell in the first row.\n\nIn the second example it wasn't possible to win by making single turn.\n\nIn the third example Ilya could have won by placing X in the last row between two existing Xs.\n\nIn the fourth example it wasn't possible to win by making single turn.",
    "generated_code": "def check_win(board):\n    # Check rows and columns for win\n    for i in range(4):\n        for j in range(2):\n            if board[i][j:j+3].count('x') == 3:\n                return True\n            if [board[j+k][i] for k in range(3)].count('x') == 3:\n                return True\n    \n    # Check diagonals for win\n    for i in range(2):\n        for j in range(2):\n            if board[i][j] == 'x' and board[i+1][j+1] == 'x' and board[i+2][j+2] == 'x':\n                return True\n            if board[i][j+2] == 'x' and board[i+1][j+1] == 'x' and board[i+2][j] == 'x':\n                return True\n    \n    return False\n\ndef main():\n    board = [list(input()) for _ in range(4)]\n    \n    for i in range(4):\n        for j in range(4):\n            if board[i][j] == '.':\n                board[i][j] = 'x'\n                if check_win(board):\n                    print(\"YES\")\n                    return\n                board[i][j] = '.'\n    \n    print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n",
    "pass_rate": 1.0,
    "passed_tests": 95,
    "total_tests": 95
}
{
    "task_id": "0122",
    "question": "Vasya has an array a consisting of positive integer numbers. Vasya wants to divide this array into two non-empty consecutive parts (the prefix and the suffix) so that the sum of all elements in the first part equals to the sum of elements in the second part. It is not always possible, so Vasya will move some element before dividing the array (Vasya will erase some element and insert it into an arbitrary position).\n\nInserting an element in the same position he was erased from is also considered moving.\n\nCan Vasya divide the array after choosing the right element to move and its new position?\n\n\n-----Input-----\n\nThe first line contains single integer n (1 \u2264 n \u2264 100000) \u2014 the size of the array.\n\nThe second line contains n integers a_1, a_2... a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint YES if Vasya can divide the array after moving one element. Otherwise print NO.\n\n\n-----Examples-----\nInput\n3\n1 3 2\n\nOutput\nYES\n\nInput\n5\n1 2 3 4 5\n\nOutput\nNO\n\nInput\n5\n2 2 3 4 5\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first example Vasya can move the second element to the end of the array.\n\nIn the second example no move can make the division possible.\n\nIn the third example Vasya can move the fourth element by one position to the left.",
    "generated_code": "n = int(input())\na = list(map(int, input().split()))\n\ntotal_sum = sum(a)\n\n# Function to check if the array can be split into two parts with equal sum\ndef can_split_with_equal_sum(arr):\n    left_sum = 0\n    for i in range(len(arr) - 1):\n        left_sum += arr[i]\n        if left_sum * 2 == sum(arr):\n            return True\n    return False\n\n# Check if we can split the array by moving one element\nfor i in range(n):\n    modified_array = a[:i] + a[i+1:]\n    if can_split_with_equal_sum(modified_array):\n        print(\"YES\")\n        exit()\n\nprint(\"NO\")\n",
    "pass_rate": 0.5368421052631579,
    "passed_tests": 51,
    "total_tests": 95
}
{
    "task_id": "0123",
    "question": "A few years ago, Hitagi encountered a giant crab, who stole the whole of her body weight. Ever since, she tried to avoid contact with others, for fear that this secret might be noticed.\n\nTo get rid of the oddity and recover her weight, a special integer sequence is needed. Hitagi's sequence has been broken for a long time, but now Kaiki provides an opportunity.\n\nHitagi's sequence a has a length of n. Lost elements in it are denoted by zeros. Kaiki provides another sequence b, whose length k equals the number of lost elements in a (i.e. the number of zeros). Hitagi is to replace each zero in a with an element from b so that each element in b should be used exactly once. Hitagi knows, however, that, apart from 0, no integer occurs in a and b more than once in total.\n\nIf the resulting sequence is not an increasing sequence, then it has the power to recover Hitagi from the oddity. You are to determine whether this is possible, or Kaiki's sequence is just another fake. In other words, you should detect whether it is possible to replace each zero in a with an integer from b so that each integer from b is used exactly once, and the resulting sequence is not increasing.\n\n\n-----Input-----\n\nThe first line of input contains two space-separated positive integers n (2 \u2264 n \u2264 100) and k (1 \u2264 k \u2264 n) \u2014 the lengths of sequence a and b respectively.\n\nThe second line contains n space-separated integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 200) \u2014 Hitagi's broken sequence with exactly k zero elements.\n\nThe third line contains k space-separated integers b_1, b_2, ..., b_{k} (1 \u2264 b_{i} \u2264 200) \u2014 the elements to fill into Hitagi's sequence.\n\nInput guarantees that apart from 0, no integer occurs in a and b more than once in total.\n\n\n-----Output-----\n\nOutput \"Yes\" if it's possible to replace zeros in a with elements in b and make the resulting sequence not increasing, and \"No\" otherwise.\n\n\n-----Examples-----\nInput\n4 2\n11 0 0 14\n5 4\n\nOutput\nYes\n\nInput\n6 1\n2 3 0 8 9 10\n5\n\nOutput\nNo\n\nInput\n4 1\n8 94 0 4\n89\n\nOutput\nYes\n\nInput\n7 7\n0 0 0 0 0 0 0\n1 2 3 4 5 6 7\n\nOutput\nYes\n\n\n\n-----Note-----\n\nIn the first sample:   Sequence a is 11, 0, 0, 14.  Two of the elements are lost, and the candidates in b are 5 and 4.  There are two possible resulting sequences: 11, 5, 4, 14 and 11, 4, 5, 14, both of which fulfill the requirements. Thus the answer is \"Yes\". \n\nIn the second sample, the only possible resulting sequence is 2, 3, 5, 8, 9, 10, which is an increasing sequence and therefore invalid.",
    "generated_code": "# Read input\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\n# Sort b in descending order to try to make the resulting sequence non-increasing\nb.sort(reverse=True)\n\n# Replace zeros in a with elements from b\nindex_b = 0\nfor i in range(n):\n    if a[i] == 0:\n        a[i] = b[index_b]\n        index_b += 1\n\n# Check if the resulting sequence is non-increasing\nnon_increasing = False\nfor i in range(1, n):\n    if a[i] < a[i-1]:\n        non_increasing = True\n        break\n\n# Output result\nif non_increasing:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n",
    "pass_rate": 1.0,
    "passed_tests": 94,
    "total_tests": 94
}
{
    "task_id": "0124",
    "question": "The Duck song\n\nFor simplicity, we'll assume that there are only three types of grapes: green grapes, purple grapes and black grapes.\n\nAndrew, Dmitry and Michal are all grapes' lovers, however their preferences of grapes are different. To make all of them happy, the following should happen: Andrew, Dmitry and Michal should eat at least $x$, $y$ and $z$ grapes, respectively. Andrew has an extreme affinity for green grapes, thus he will eat green grapes and green grapes only. On the other hand, Dmitry is not a fan of black grapes\u00a0\u2014 any types of grapes except black would do for him. In other words, Dmitry can eat green and purple grapes. Michal has a common taste\u00a0\u2014 he enjoys grapes in general and will be pleased with any types of grapes, as long as the quantity is sufficient.\n\nKnowing that his friends are so fond of grapes, Aki decided to host a grape party with them. He has prepared a box with $a$ green grapes, $b$ purple grapes and $c$ black grapes.\n\nHowever, Aki isn't sure if the box he prepared contains enough grapes to make everyone happy. Can you please find out whether it's possible to distribute grapes so that everyone is happy or Aki has to buy some more grapes?\n\nIt is not required to distribute all the grapes, so it's possible that some of them will remain unused.\n\n\n-----Input-----\n\nThe first line contains three integers $x$, $y$ and $z$ ($1 \\le x, y, z \\le 10^5$)\u00a0\u2014 the number of grapes Andrew, Dmitry and Michal want to eat.\n\nThe second line contains three integers $a$, $b$, $c$ ($1 \\le a, b, c \\le 10^5$)\u00a0\u2014 the number of green, purple and black grapes in the box.\n\n\n-----Output-----\n\nIf there is a grape distribution that allows everyone to be happy, print \"YES\", otherwise print \"NO\".\n\n\n-----Examples-----\nInput\n1 6 2\n4 3 3\n\nOutput\nYES\n\nInput\n5 1 1\n4 3 2\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example, there is only one possible distribution:\n\nAndrew should take $1$ green grape, Dmitry should take $3$ remaining green grapes and $3$ purple grapes, and Michal will take $2$ out of $3$ available black grapes.\n\nIn the second test, there is no possible distribution, since Andrew is not be able to eat enough green grapes. :(",
    "generated_code": "# Read input values\nx, y, z = map(int, input().split())\na, b, c = map(int, input().split())\n\n# Check if Andrew can get his required green grapes\nif a >= x:\n    a -= x\nelse:\n    print(\"NO\")\n    exit()\n\n# Check if Dmitry can get his required grapes from the remaining green and purple grapes\nif a + b >= y:\n    # Calculate remaining grapes after Dmitry takes his share\n    remaining_grapes = (a + b) - y\n    # Check if Michal can get his required grapes from the remaining green, purple and black grapes\n    if remaining_grapes + c >= z:\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelse:\n    print(\"NO\")\n",
    "pass_rate": 1.0,
    "passed_tests": 94,
    "total_tests": 94
}
{
    "task_id": "0125",
    "question": "Sagheer is walking in the street when he comes to an intersection of two roads. Each road can be represented as two parts where each part has 3 lanes getting into the intersection (one for each direction) and 3 lanes getting out of the intersection, so we have 4 parts in total. Each part has 4 lights, one for each lane getting into the intersection (l \u2014 left, s \u2014 straight, r \u2014 right) and a light p for a pedestrian crossing.  [Image] \n\nAn accident is possible if a car can hit a pedestrian. This can happen if the light of a pedestrian crossing of some part and the light of a lane that can get to or from that same part are green at the same time.\n\nNow, Sagheer is monitoring the configuration of the traffic lights. Your task is to help him detect whether an accident is possible.\n\n\n-----Input-----\n\nThe input consists of four lines with each line describing a road part given in a counter-clockwise order.\n\nEach line contains four integers l, s, r, p \u2014 for the left, straight, right and pedestrian lights, respectively. The possible values are 0 for red light and 1 for green light.\n\n\n-----Output-----\n\nOn a single line, print \"YES\" if an accident is possible, and \"NO\" otherwise.\n\n\n-----Examples-----\nInput\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 0 0 1\n\nOutput\nYES\n\nInput\n0 1 1 0\n1 0 1 0\n1 1 0 0\n0 0 0 1\n\nOutput\nNO\n\nInput\n1 0 0 0\n0 0 0 1\n0 0 0 0\n1 0 1 0\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example, some accidents are possible because cars of part 1 can hit pedestrians of parts 1 and 4. Also, cars of parts 2 and 3 can hit pedestrians of part 4.\n\nIn the second example, no car can pass the pedestrian crossing of part 4 which is the only green pedestrian light. So, no accident can occur.",
    "generated_code": "# Read the input for the four parts\nparts = [list(map(int, input().split())) for _ in range(4)]\n\n# Check for any possible accident conditions\naccident_possible = False\nfor i in range(4):\n    l, s, r, p = parts[i]\n    # If pedestrian light p is green\n    if p == 1:\n        # Check if any of the lights of the same part are green\n        if l == 1 or s == 1 or r == 1:\n            accident_possible = True\n            break\n        # Check if any of the corresponding lights from the other parts can cause an accident\n        if parts[(i + 1) % 4][0] == 1 or parts[(i + 2) % 4][1] == 1 or parts[(i + 3) % 4][2] == 1:\n            accident_possible = True\n            break\n\n# Output the result\nprint(\"YES\" if accident_possible else \"NO\")\n",
    "pass_rate": 1.0,
    "passed_tests": 93,
    "total_tests": 93
}
{
    "task_id": "0126",
    "question": "While swimming at the beach, Mike has accidentally dropped his cellphone into the water. There was no worry as he bought a cheap replacement phone with an old-fashioned keyboard. The keyboard has only ten digital equal-sized keys, located in the following way: [Image] \n\nTogether with his old phone, he lost all his contacts and now he can only remember the way his fingers moved when he put some number in. One can formally consider finger movements as a sequence of vectors connecting centers of keys pressed consecutively to put in a number. For example, the finger movements for number \"586\" are the same as finger movements for number \"253\": [Image]  [Image] \n\nMike has already put in a number by his \"finger memory\" and started calling it, so he is now worrying, can he be sure that he is calling the correct number? In other words, is there any other number, that has the same finger movements?\n\n\n-----Input-----\n\nThe first line of the input contains the only integer n (1 \u2264 n \u2264 9)\u00a0\u2014 the number of digits in the phone number that Mike put in.\n\nThe second line contains the string consisting of n digits (characters from '0' to '9') representing the number that Mike put in.\n\n\n-----Output-----\n\nIf there is no other phone number with the same finger movements and Mike can be sure he is calling the correct number, print \"YES\" (without quotes) in the only line.\n\nOtherwise print \"NO\" (without quotes) in the first line.\n\n\n-----Examples-----\nInput\n3\n586\n\nOutput\nNO\n\nInput\n2\n09\n\nOutput\nNO\n\nInput\n9\n123456789\n\nOutput\nYES\n\nInput\n3\n911\n\nOutput\nYES\n\n\n\n-----Note-----\n\nYou can find the picture clarifying the first sample case in the statement above.",
    "generated_code": "1 2 3\n4 5 6\n7 8 9\n  0\n",
    "pass_rate": 0.0,
    "passed_tests": 0,
    "total_tests": 93
}
{
    "task_id": "0127",
    "question": "Summer holidays! Someone is going on trips, someone is visiting grandparents, but someone is trying to get a part-time job. This summer Noora decided that she wants to earn some money, and took a job in a shop as an assistant.\n\nShop, where Noora is working, has a plan on the following n days. For each day sales manager knows exactly, that in i-th day k_{i} products will be put up for sale and exactly l_{i} clients will come to the shop that day. Also, the manager is sure, that everyone, who comes to the shop, buys exactly one product or, if there aren't any left, leaves the shop without buying anything. Moreover, due to the short shelf-life of the products, manager established the following rule: if some part of the products left on the shelves at the end of the day, that products aren't kept on the next day and are sent to the dump.\n\nFor advertising purposes manager offered to start a sell-out in the shop. He asked Noora to choose any f days from n next for sell-outs. On each of f chosen days the number of products were put up for sale would be doubled. Thus, if on i-th day shop planned to put up for sale k_{i} products and Noora has chosen this day for sell-out, shelves of the shop would keep 2\u00b7k_{i} products. Consequently, there is an opportunity to sell two times more products on days of sell-out.\n\nNoora's task is to choose f days to maximize total number of sold products. She asks you to help her with such a difficult problem.\n\n\n-----Input-----\n\nThe first line contains two integers n and f (1 \u2264 n \u2264 10^5, 0 \u2264 f \u2264 n) denoting the number of days in shop's plan and the number of days that Noora has to choose for sell-out.\n\nEach line of the following n subsequent lines contains two integers k_{i}, l_{i} (0 \u2264 k_{i}, l_{i} \u2264 10^9) denoting the number of products on the shelves of the shop on the i-th day and the number of clients that will come to the shop on i-th day.\n\n\n-----Output-----\n\nPrint a single integer denoting the maximal number of products that shop can sell.\n\n\n-----Examples-----\nInput\n4 2\n2 1\n3 5\n2 3\n1 5\n\nOutput\n10\nInput\n4 1\n0 2\n0 3\n3 5\n0 6\n\nOutput\n5\n\n\n-----Note-----\n\nIn the first example we can choose days with numbers 2 and 4 for sell-out. In this case new numbers of products for sale would be equal to [2, 6, 2, 2] respectively. So on the first day shop will sell 1 product, on the second\u00a0\u2014 5, on the third\u00a0\u2014 2, on the fourth\u00a0\u2014 2. In total 1 + 5 + 2 + 2 = 10 product units.\n\nIn the second example it is possible to sell 5 products, if you choose third day for sell-out.",
    "generated_code": "n, f = map(int, input().split())\ndays = []\n\nfor _ in range(n):\n    k, l = map(int, input().split())\n    days.append((k, l))\n\n# Calculate the initial sales without any sell-out days\ninitial_sales = sum(min(k, l) for k, l in days)\n\n# Calculate the potential increase in sales if a day is chosen for sell-out\npotential_increases = []\nfor k, l in days:\n    if k < l:\n        potential_increases.append(min(2 * k, l) - min(k, l))\n    else:\n        potential_increases.append(0)\n\n# Sort the potential increases in descending order\npotential_increases.sort(reverse=True)\n\n# Sum the top f increases\nmax_additional_sales = sum(potential_increases[:f])\n\n# The maximum possible sales are the initial sales plus the max additional sales\nmax_sales = initial_sales + max_additional_sales\n\nprint(max_sales)\n",
    "pass_rate": 1.0,
    "passed_tests": 93,
    "total_tests": 93
}
{
    "task_id": "0128",
    "question": "It is a balmy spring afternoon, and Farmer John's n cows are ruminating about link-cut cacti in their stalls. The cows, labeled 1 through n, are arranged so that the i-th cow occupies the i-th stall from the left. However, Elsie, after realizing that she will forever live in the shadows beyond Bessie's limelight, has formed the Mischievous Mess Makers and is plotting to disrupt this beautiful pastoral rhythm. While Farmer John takes his k minute long nap, Elsie and the Mess Makers plan to repeatedly choose two distinct stalls and swap the cows occupying those stalls, making no more than one swap each minute.\n\nBeing the meticulous pranksters that they are, the Mischievous Mess Makers would like to know the maximum messiness attainable in the k minutes that they have. We denote as p_{i} the label of the cow in the i-th stall. The messiness of an arrangement of cows is defined as the number of pairs (i, j) such that i < j and p_{i} > p_{j}.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (1 \u2264 n, k \u2264 100 000)\u00a0\u2014 the number of cows and the length of Farmer John's nap, respectively.\n\n\n-----Output-----\n\nOutput a single integer, the maximum messiness that the Mischievous Mess Makers can achieve by performing no more than k swaps. \n\n\n-----Examples-----\nInput\n5 2\n\nOutput\n10\n\nInput\n1 10\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample, the Mischievous Mess Makers can swap the cows in the stalls 1 and 5 during the first minute, then the cows in stalls 2 and 4 during the second minute. This reverses the arrangement of cows, giving us a total messiness of 10.\n\nIn the second sample, there is only one cow, so the maximum possible messiness is 0.",
    "generated_code": "n, k = map(int, input().split())\n\nif n == 1:\n    print(0)\nelse:\n    max_messiness = n * (n - 1) // 2\n    print(max_messiness)\n",
    "pass_rate": 0.5543478260869565,
    "passed_tests": 51,
    "total_tests": 92
}
{
    "task_id": "0129",
    "question": "Ivan is collecting coins. There are only $N$ different collectible coins, Ivan has $K$ of them. He will be celebrating his birthday soon, so all his $M$ freinds decided to gift him coins. They all agreed to three terms:  Everyone must gift as many coins as others. All coins given to Ivan must be different. Not less than $L$ coins from gifts altogether, must be new in Ivan's collection.\n\nBut his friends don't know which coins have Ivan already got in his collection. They don't want to spend money so they want to buy minimum quantity of coins, that satisfy all terms, irrespective of the Ivan's collection. Help them to find this minimum number of coins or define it's not possible to meet all the terms.\n\n\n-----Input-----\n\nThe only line of input contains 4 integers $N$, $M$, $K$, $L$ ($1 \\le K \\le N \\le 10^{18}$; $1 \\le M, \\,\\, L \\le 10^{18}$)\u00a0\u2014 quantity of different coins, number of Ivan's friends, size of Ivan's collection and quantity of coins, that must be new in Ivan's collection.\n\n\n-----Output-----\n\nPrint one number\u00a0\u2014 minimal number of coins one friend can gift to satisfy all the conditions. If it is impossible to satisfy all three conditions print \"-1\" (without quotes).\n\n\n-----Examples-----\nInput\n20 15 2 3\n\nOutput\n1\nInput\n10 11 2 4\n\nOutput\n-1\n\n\n-----Note-----\n\nIn the first test, one coin from each friend is enough, as he will be presented with 15 different coins and 13 of them will definitely be new.\n\nIn the second test, Ivan has 11 friends, but there are only 10 different coins. So all friends can't present him different coins.",
    "generated_code": "# Read the input values\nN, M, K, L = map(int, input().split())\n\n# Calculate the minimum number of coins each friend must gift\n# All friends need to gift the same number of coins, say x\n# Total coins gifted = M * x\n# At least L coins must be new, so M * x - K >= L\n\n# Rearrange the inequality: M * x >= L + K\n# So, x >= (L + K) / M\n\n# Calculate the minimum x\nmin_x = (L + K + M - 1) // M  # This is the ceiling of (L + K) / M\n\n# Now check if it's possible to gift min_x coins each and still have all coins different\n# Total coins gifted = M * min_x must be <= N\nif M * min_x > N:\n    print(-1)\nelse:\n    print(min_x)\n",
    "pass_rate": 1.0,
    "passed_tests": 91,
    "total_tests": 91
}
{
    "task_id": "0130",
    "question": "Polycarp has a checkered sheet of paper of size n \u00d7 m. Polycarp painted some of cells with black, the others remained white. Inspired by Malevich's \"Black Square\", Polycarp wants to paint minimum possible number of white cells with black so that all black cells form a square.\n\nYou are to determine the minimum possible number of cells needed to be painted black so that the black cells form a black square with sides parallel to the painting's sides. All the cells that do not belong to the square should be white. The square's side should have positive length.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 100) \u2014 the sizes of the sheet.\n\nThe next n lines contain m letters 'B' or 'W' each \u2014 the description of initial cells' colors. If a letter is 'B', then the corresponding cell is painted black, otherwise it is painted white.\n\n\n-----Output-----\n\nPrint the minimum number of cells needed to be painted black so that the black cells form a black square with sides parallel to the painting's sides. All the cells that do not belong to the square should be white. If it is impossible, print -1.\n\n\n-----Examples-----\nInput\n5 4\nWWWW\nWWWB\nWWWB\nWWBB\nWWWW\n\nOutput\n5\n\nInput\n1 2\nBB\n\nOutput\n-1\n\nInput\n3 3\nWWW\nWWW\nWWW\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example it is needed to paint 5 cells \u2014 (2, 2), (2, 3), (3, 2), (3, 3) and (4, 2). Then there will be a square with side equal to three, and the upper left corner in (2, 2).\n\nIn the second example all the cells are painted black and form a rectangle, so it's impossible to get a square.\n\nIn the third example all cells are colored white, so it's sufficient to color any cell black.",
    "generated_code": "# Read input\nn, m = map(int, input().split())\ngrid = [input().strip() for _ in range(n)]\n\n# Find the boundaries of the black cells\ntop, bottom, left, right = n, -1, m, -1\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'B':\n            top = min(top, i)\n            bottom = max(bottom, i)\n            left = min(left, j)\n            right = max(right, j)\n\n# If there are no black cells\nif top == n:\n    print(1)\n    exit()\n\n# Determine the dimensions of the black rectangle\nheight = bottom - top + 1\nwidth = right - left + 1\n\n# If it's impossible to form a square\nif height != width:\n    side_length = max(height, width)\n\n    if side_length > n or side_length > m:\n        print(-1)\n    else:\n        # Calculate how many additional cells need to be painted\n        additional_cells = 0\n        for i in range(top, top + side_length):\n            for j in range(left, left + side_length):\n                if i >= n or j >= m or grid[i][j] == 'W':\n                    additional_cells += 1\n        print(additional_cells)\nelse:\n    print(0)\n",
    "pass_rate": 0.8681318681318682,
    "passed_tests": 79,
    "total_tests": 91
}
