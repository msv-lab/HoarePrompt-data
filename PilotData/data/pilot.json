[
    {
        "task_id": "0080",
        "question": "Today on Informatics class Nastya learned about GCD and LCM (see links below). Nastya is very intelligent, so she solved all the tasks momentarily and now suggests you to solve one of them as well.\n\nWe define a pair of integers (a, b) good, if GCD(a, b) = x and LCM(a, b) = y, where GCD(a, b) denotes the greatest common divisor of a and b, and LCM(a, b) denotes the least common multiple of a and b.\n\nYou are given two integers x and y. You are to find the number of good pairs of integers (a, b) such that l ≤ a, b ≤ r. Note that pairs (a, b) and (b, a) are considered different if a ≠ b.\n\n\n-----Input-----\n\nThe only line contains four integers l, r, x, y (1 ≤ l ≤ r ≤ 10^9, 1 ≤ x ≤ y ≤ 10^9).\n\n\n-----Output-----\n\nIn the only line print the only integer — the answer for the problem.\n\n\n-----Examples-----\nInput\n1 2 1 2\n\nOutput\n2\n\nInput\n1 12 1 12\n\nOutput\n4\n\nInput\n50 100 3 30\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example there are two suitable good pairs of integers (a, b): (1, 2) and (2, 1).\n\nIn the second example there are four suitable good pairs of integers (a, b): (1, 12), (12, 1), (3, 4) and (4, 3).\n\nIn the third example there are good pairs of integers, for example, (3, 30), but none of them fits the condition l ≤ a, b ≤ r.",
        "generated_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nl, r, x, y = map(int, input().split())\n\ncount = 0\nfor a in range(l, r + 1):\n    for b in range(a, r + 1):\n        if gcd(a, b) == x and lcm(a, b) == y:\n            count += 1\n\nprint(count)\n",
        "pass_rate": 0.12962962962962962,
        "passed_tests": 14,
        "total_tests": 108
    },
    {
        "task_id": "0094",
        "question": "Alexander is learning how to convert numbers from the decimal system to any other, however, he doesn't know English letters, so he writes any number only as a decimal number, it means that instead of the letter A he will write the number 10. Thus, by converting the number 475 from decimal to hexadecimal system, he gets 11311 (475 = 1·16^2 + 13·16^1 + 11·16^0). Alexander lived calmly until he tried to convert the number back to the decimal number system.\n\nAlexander remembers that he worked with little numbers so he asks to find the minimum decimal number so that by converting it to the system with the base n he will get the number k.\n\n\n-----Input-----\n\nThe first line contains the integer n (2 ≤ n ≤ 10^9). The second line contains the integer k (0 ≤ k < 10^60), it is guaranteed that the number k contains no more than 60 symbols. All digits in the second line are strictly less than n.\n\nAlexander guarantees that the answer exists and does not exceed 10^18.\n\nThe number k doesn't contain leading zeros.\n\n\n-----Output-----\n\nPrint the number x (0 ≤ x ≤ 10^18) — the answer to the problem.\n\n\n-----Examples-----\nInput\n13\n12\n\nOutput\n12\nInput\n16\n11311\n\nOutput\n475\nInput\n20\n999\n\nOutput\n3789\nInput\n17\n2016\n\nOutput\n594\n\n\n-----Note-----\n\nIn the first example 12 could be obtained by converting two numbers to the system with base 13: 12 = 12·13^0 or 15 = 1·13^1 + 2·13^0.",
        "generated_code": "n = int(input())\nk = input()\nx = 0\nfor i, c in enumerate(reversed(k)):\n    x += int(c) * (n ** i)\nprint(x)\n",
        "pass_rate": 0.29411764705882354,
        "passed_tests": 30,
        "total_tests": 102
    },
    {
        "task_id": "0113",
        "question": "For a given positive integer n denote its k-rounding as the minimum positive integer x, such that x ends with k or more zeros in base 10 and is divisible by n.\n\nFor example, 4-rounding of 375 is 375·80 = 30000. 30000 is the minimum integer such that it ends with 4 or more zeros and is divisible by 375.\n\nWrite a program that will perform the k-rounding of n.\n\n\n-----Input-----\n\nThe only line contains two integers n and k (1 ≤ n ≤ 10^9, 0 ≤ k ≤ 8).\n\n\n-----Output-----\n\nPrint the k-rounding of n.\n\n\n-----Examples-----\nInput\n375 4\n\nOutput\n30000\n\nInput\n10000 1\n\nOutput\n10000\n\nInput\n38101 0\n\nOutput\n38101\n\nInput\n123456789 8\n\nOutput\n12345678900000000",
        "generated_code": "n, k = map(int, input().split())\nx = 10**k\nwhile x % n != 0:\n    x *= 10\nprint(x)\n",
        "pass_rate": 0.3854166666666667,
        "passed_tests": 37,
        "total_tests": 96
    },
    {
        "task_id": "0119",
        "question": "You are given a sequence a_1, a_2, ..., a_{n} of one-dimensional segments numbered 1 through n. Your task is to find two distinct indices i and j such that segment a_{i} lies within segment a_{j}.\n\nSegment [l_1, r_1] lies within segment [l_2, r_2] iff l_1 ≥ l_2 and r_1 ≤ r_2.\n\nPrint indices i and j. If there are multiple answers, print any of them. If no answer exists, print -1 -1.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 ≤ n ≤ 3·10^5) — the number of segments.\n\nEach of the next n lines contains two integers l_{i} and r_{i} (1 ≤ l_{i} ≤ r_{i} ≤ 10^9) — the i-th segment.\n\n\n-----Output-----\n\nPrint two distinct indices i and j such that segment a_{i} lies within segment a_{j}. If there are multiple answers, print any of them. If no answer exists, print -1 -1.\n\n\n-----Examples-----\nInput\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n\nOutput\n2 1\n\nInput\n3\n1 5\n2 6\n6 20\n\nOutput\n-1 -1\n\n\n\n-----Note-----\n\nIn the first example the following pairs are considered correct:  (2, 1), (3, 1), (4, 1), (5, 1) — not even touching borders;  (3, 2), (4, 2), (3, 5), (4, 5) — touch one border;  (5, 2), (2, 5) — match exactly.",
        "generated_code": "n = int(input())\nsegments = []\nfor _ in range(n):\n    l, r = map(int, input().split())\n    segments.append((l, r))\n\nfor i in range(n):\n    for j in range(n):\n        if i != j and segments[i][0] >= segments[j][0] and segments[i][1] <= segments[j][1]:\n            print(i+1, j+1)\n            exit()\n\nprint(-1, -1)\n",
        "pass_rate": 0.8,
        "passed_tests": 76,
        "total_tests": 95
    },
    {
        "task_id": "0084",
        "question": "There are n shovels in Polycarp's shop. The i-th shovel costs i burles, that is, the first shovel costs 1 burle, the second shovel costs 2 burles, the third shovel costs 3 burles, and so on. Polycarps wants to sell shovels in pairs.\n\nVisitors are more likely to buy a pair of shovels if their total cost ends with several 9s. Because of this, Polycarp wants to choose a pair of shovels to sell in such a way that the sum of their costs ends with maximum possible number of nines. For example, if he chooses shovels with costs 12345 and 37454, their total cost is 49799, it ends with two nines.\n\nYou are to compute the number of pairs of shovels such that their total cost ends with maximum possible number of nines. Two pairs are considered different if there is a shovel presented in one pair, but not in the other.\n\n\n-----Input-----\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^9) — the number of shovels in Polycarp's shop.\n\n\n-----Output-----\n\nPrint the number of pairs of shovels such that their total cost ends with maximum possible number of nines. \n\nNote that it is possible that the largest number of 9s at the end is 0, then you should count all such ways.\n\nIt is guaranteed that for every n ≤ 10^9 the answer doesn't exceed 2·10^9.\n\n\n-----Examples-----\nInput\n7\n\nOutput\n3\n\nInput\n14\n\nOutput\n9\n\nInput\n50\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example the maximum possible number of nines at the end is one. Polycarp cah choose the following pairs of shovels for that purpose:  2 and 7;  3 and 6;  4 and 5. \n\nIn the second example the maximum number of nines at the end of total cost of two shovels is one. The following pairs of shovels suit Polycarp:  1 and 8;  2 and 7;  3 and 6;  4 and 5;  5 and 14;  6 and 13;  7 and 12;  8 and 11;  9 and 10. \n\nIn the third example it is necessary to choose shovels 49 and 50, because the sum of their cost is 99, that means that the total number of nines is equal to two, which is maximum possible for n = 50.",
        "generated_code": "n = int(input())\nmax_nines = 0\ncount = 0\nfor i in range(1, n+1):\n    for j in range(i, n+1):\n        total_cost = i + j\n        nines = len(str(total_cost)) - len(str(total_cost).rstrip('9'))\n        if nines > max_nines:\n            max_nines = nines\n            count = 1\n        elif nines == max_nines:\n            count += 1\nprint(count)\n",
        "pass_rate": 0.4811320754716981,
        "passed_tests": 51,
        "total_tests": 106
    },
    {
        "task_id": "0024",
        "question": "Alice and Bob play 5-in-a-row game. They have a playing field of size 10 × 10. In turns they put either crosses or noughts, one at a time. Alice puts crosses and Bob puts noughts.\n\nIn current match they have made some turns and now it's Alice's turn. She wonders if she can put cross in such empty cell that she wins immediately.\n\nAlice wins if some crosses in the field form line of length not smaller than 5. This line can be horizontal, vertical and diagonal.\n\n\n-----Input-----\n\nYou are given matrix 10 × 10 (10 lines of 10 characters each) with capital Latin letters 'X' being a cross, letters 'O' being a nought and '.' being an empty cell. The number of 'X' cells is equal to the number of 'O' cells and there is at least one of each type. There is at least one empty cell.\n\nIt is guaranteed that in the current arrangement nobody has still won.\n\n\n-----Output-----\n\nPrint 'YES' if it's possible for Alice to win in one turn by putting cross in some empty cell. Otherwise print 'NO'.\n\n\n-----Examples-----\nInput\nXX.XX.....\n.....OOOO.\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n\nOutput\nYES\n\nInput\nXXOXX.....\nOO.O......\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n\nOutput\nNO",
        "generated_code": "def check_win(board):\n    # Check horizontal\n    for i in range(10):\n        for j in range(6):\n            if board[i][j] == '.' and all(board[i][k] == 'X' for k in range(j, j+5)):\n                return True\n\n    # Check vertical\n    for i in range(6):\n        for j in range(10):\n            if board[i][j] == '.' and all(board[k][j] == 'X' for k in range(i, i+5)):\n                return True\n\n    # Check diagonal (top-left to bottom-right)\n    for i in range(6):\n        for j in range(6):\n            if board[i][j] == '.' and all(board[k][k] == 'X' for k in range(i, i+5)):\n                return True\n\n    # Check diagonal (bottom-left to top-right)\n    for i in range(4, 10):\n        for j in range(6):\n            if board[i][j] == '.' and all(board[k][j+k-i] == 'X' for k in range(i, i-5, -1)):\n                return True\n\n    return False\n\nboard = []\nfor _ in range(10):\n    board.append(list(input()))\n\nprint('YES' if check_win(board) else 'NO')\n",
        "pass_rate": 0.2564102564102564,
        "passed_tests": 40,
        "total_tests": 156
    },
    {
        "task_id": "0097",
        "question": "Consider a billiard table of rectangular size $n \\times m$ with four pockets. Let's introduce a coordinate system with the origin at the lower left corner (see the picture).  [Image] \n\nThere is one ball at the point $(x, y)$ currently. Max comes to the table and strikes the ball. The ball starts moving along a line that is parallel to one of the axes or that makes a $45^{\\circ}$ angle with them. We will assume that:   the angles between the directions of the ball before and after a collision with a side are equal,  the ball moves indefinitely long, it only stops when it falls into a pocket,  the ball can be considered as a point, it falls into a pocket if and only if its coordinates coincide with one of the pockets,  initially the ball is not in a pocket. \n\nNote that the ball can move along some side, in this case the ball will just fall into the pocket at the end of the side.\n\nYour task is to determine whether the ball will fall into a pocket eventually, and if yes, which of the four pockets it will be.\n\n\n-----Input-----\n\nThe only line contains $6$ integers $n$, $m$, $x$, $y$, $v_x$, $v_y$ ($1 \\leq n, m \\leq 10^9$, $0 \\leq x \\leq n$; $0 \\leq y \\leq m$; $-1 \\leq v_x, v_y \\leq 1$; $(v_x, v_y) \\neq (0, 0)$) — the width of the table, the length of the table, the $x$-coordinate of the initial position of the ball, the $y$-coordinate of the initial position of the ball, the $x$-component of its initial speed and the $y$-component of its initial speed, respectively. It is guaranteed that the ball is not initially in a pocket.\n\n\n-----Output-----\n\nPrint the coordinates of the pocket the ball will fall into, or $-1$ if the ball will move indefinitely.\n\n\n-----Examples-----\nInput\n4 3 2 2 -1 1\n\nOutput\n0 0\nInput\n4 4 2 0 1 1\n\nOutput\n-1\nInput\n10 10 10 1 -1 0\n\nOutput\n-1\n\n\n-----Note-----\n\nThe first sample:  [Image] \n\nThe second sample:  [Image] \n\nIn the third sample the ball will never change its $y$ coordinate, so the ball will never fall into a pocket.",
        "generated_code": "n, m, x, y, vx, vy = map(int, input().split())\n\ndef will_fall_into_pocket(nx, ny, vx, vy):\n    if vx == 0 and vy == 0:\n        return False\n    if vx == 0:\n        return ny == 0 or ny == m\n    if vy == 0:\n        return nx == 0 or nx == n\n    dx, dy = abs(vx), abs(vy)\n    if dx == dy:\n        return (nx + vx) % (2 * dx) == 0 and (ny + vy) % (2 * dy) == 0\n    if dx > dy:\n        return (ny + vy) % (2 * dy) == 0\n    else:\n        return (nx + vx) % (2 * dx) == 0\n\nif will_fall_into_pocket(x, y, vx, vy):\n    if x == 0 and y == 0:\n        print(\"0 0\")\n    elif x == n and y == 0:\n        print(str(n) + \" 0\")\n    elif x == 0 and y == m:\n        print(\"0 \" + str(m))\n    else:\n        print(str(n) + \" \" + str(m))\nelse:\n    print(\"-1\")\n",
        "pass_rate": 0.21782178217821782,
        "passed_tests": 22,
        "total_tests": 101
    },
    {
        "task_id": "0074",
        "question": "Dima loves representing an odd number as the sum of multiple primes, and Lisa loves it when there are at most three primes. Help them to represent the given number as the sum of at most than three primes.\n\nMore formally, you are given an odd numer n. Find a set of numbers p_{i} (1 ≤ i ≤ k), such that\n\n\n\n 1 ≤ k ≤ 3\n\n p_{i} is a prime\n\n $\\sum_{i = 1}^{k} p_{i} = n$\n\nThe numbers p_{i} do not necessarily have to be distinct. It is guaranteed that at least one possible solution exists.\n\n\n-----Input-----\n\nThe single line contains an odd number n (3 ≤ n < 10^9).\n\n\n-----Output-----\n\nIn the first line print k (1 ≤ k ≤ 3), showing how many numbers are in the representation you found.\n\nIn the second line print numbers p_{i} in any order. If there are multiple possible solutions, you can print any of them.\n\n\n-----Examples-----\nInput\n27\n\nOutput\n3\n5 11 11\n\n\n\n-----Note-----\n\nA prime is an integer strictly larger than one that is divisible only by one and by itself.",
        "generated_code": "def is_prime(x):\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\n\nn = int(input())\nprimes = []\nfor i in range(2, n):\n    if is_prime(i):\n        primes.append(i)\n\nfor k in range(1, 4):\n    for p1 in primes:\n        if k == 1:\n            if p1 == n:\n                print(1)\n                print(p1)\n                exit()\n        elif k == 2:\n            for p2 in primes:\n                if p1 + p2 == n:\n                    print(2)\n                    print(p1, p2)\n                    exit()\n        else:\n            for p2 in primes:\n                for p3 in primes:\n                    if p1 + p2 + p3 == n:\n                        print(3)\n                        print(p1, p2, p3)\n                        exit()\n",
        "pass_rate": 0.22935779816513763,
        "passed_tests": 25,
        "total_tests": 109
    },
    {
        "task_id": "0106",
        "question": "Есть n-подъездный дом, в каждом подъезде по m этажей, и на каждом этаже каждого подъезда ровно k квартир. Таким образом, в доме всего n·m·k квартир. Они пронумерованы естественным образом от 1 до n·m·k, то есть первая квартира на первом этаже в первом подъезде имеет номер 1, первая квартира на втором этаже первого подъезда имеет номер k + 1 и так далее. Особенность этого дома состоит в том, что он круглый. То есть если обходить его по часовой стрелке, то после подъезда номер 1 следует подъезд номер 2, затем подъезд номер 3 и так далее до подъезда номер n. После подъезда номер n снова идёт подъезд номер 1.\n\nЭдвард живёт в квартире номер a, а Наташа — в квартире номер b. Переход на 1 этаж вверх или вниз по лестнице занимает 5 секунд, переход от двери подъезда к двери соседнего подъезда — 15 секунд, а переход в пределах одного этажа одного подъезда происходит мгновенно. Также в каждом подъезде дома есть лифт. Он устроен следующим образом: он всегда приезжает ровно через 10 секунд после вызова, а чтобы переместить пассажира на один этаж вверх или вниз, лифт тратит ровно 1 секунду. Посадка и высадка происходят мгновенно.\n\nПомогите Эдварду найти минимальное время, за которое он сможет добраться до квартиры Наташи. Считайте, что Эдвард может выйти из подъезда только с первого этажа соответствующего подъезда (это происходит мгновенно). Если Эдвард стоит перед дверью какого-то подъезда, он может зайти в него и сразу окажется на первом этаже этого подъезда (это также происходит мгновенно). Эдвард может выбирать, в каком направлении идти вокруг дома.\n\n\n-----Входные данные-----\n\nВ первой строке входных данных следуют три числа n, m, k (1 ≤ n, m, k ≤ 1000) — количество подъездов в доме, количество этажей в каждом подъезде и количество квартир на каждом этаже каждого подъезда соответственно.\n\nВо второй строке входных данных записаны два числа a и b (1 ≤ a, b ≤ n·m·k) — номера квартир, в которых живут Эдвард и Наташа, соответственно. Гарантируется, что эти номера различны. \n\n\n-----Выходные данные-----\n\nВыведите единственное целое число — минимальное время (в секундах), за которое Эдвард сможет добраться от своей квартиры до квартиры Наташи.\n\n\n-----Примеры-----\nВходные данные\n4 10 5\n200 6\n\nВыходные данные\n39\n\nВходные данные\n3 1 5\n7 2\n\nВыходные данные\n15\n\n\n\n-----Примечание-----\n\nВ первом тестовом примере Эдвард находится в 4 подъезде на 10 этаже, а Наташа находится в 1 подъезде на 2 этаже. Поэтому Эдварду выгодно сначала спуститься на лифте на первый этаж (на это он потратит 19 секунд, из которых 10 — на ожидание и 9 — на поездку на лифте), затем обойти дом против часовой стрелки до подъезда номер 1 (на это он потратит 15 секунд), и наконец подняться по лестнице на этаж номер 2 (на это он потратит 5 секунд). Таким образом, ответ равен 19 + 15 + 5 = 39.\n\nВо втором тестовом примере Эдвард живёт в подъезде 2 на этаже 1, а Наташа находится в подъезде 1 на этаже 1. Поэтому Эдварду выгодно просто обойти дом по часовой стрелке до подъезда 1, на это он потратит 15 секунд.",
        "generated_code": "n, m, k = map(int, input().split())\na, b = map(int, input().split())\n\n# Calculate the floor and entrance numbers for Edward and Natasha\na_entrance = (a - 1) // (m * k) + 1\na_floor = (a - 1) % (m * k) // k + 1\nb_entrance = (b - 1) // (m * k) + 1\nb_floor = (b - 1) % (m * k) // k + 1\n\n# Calculate the minimum time to reach Natasha's apartment\ntime = 0\nif a_entrance != b_entrance:\n    # Move to the first floor of the current entrance\n    time += 10 + (a_floor - 1)\n    # Move to the next entrance\n    time += 15\n    # Move to the target entrance\n    time += 15 * ((b_entrance - a_entrance) % n)\n# Move to the target floor\ntime += abs(b_floor - 1)\n\nprint(time)\n",
        "pass_rate": 0.04081632653061224,
        "passed_tests": 4,
        "total_tests": 98
    },
    {
        "task_id": "0088",
        "question": "The year 2015 is almost over.\n\nLimak is a little polar bear. He has recently learnt about the binary system. He noticed that the passing year has exactly one zero in its representation in the binary system — 2015_10 = 11111011111_2. Note that he doesn't care about the number of zeros in the decimal representation.\n\nLimak chose some interval of years. He is going to count all years from this interval that have exactly one zero in the binary representation. Can you do it faster?\n\nAssume that all positive integers are always written without leading zeros.\n\n\n-----Input-----\n\nThe only line of the input contains two integers a and b (1 ≤ a ≤ b ≤ 10^18) — the first year and the last year in Limak's interval respectively.\n\n\n-----Output-----\n\nPrint one integer – the number of years Limak will count in his chosen interval.\n\n\n-----Examples-----\nInput\n5 10\n\nOutput\n2\n\nInput\n2015 2015\n\nOutput\n1\n\nInput\n100 105\n\nOutput\n0\n\nInput\n72057594000000000 72057595000000000\n\nOutput\n26\n\n\n\n-----Note-----\n\nIn the first sample Limak's interval contains numbers 5_10 = 101_2, 6_10 = 110_2, 7_10 = 111_2, 8_10 = 1000_2, 9_10 = 1001_2 and 10_10 = 1010_2. Two of them (101_2 and 110_2) have the described property.",
        "generated_code": "def count_years_with_one_zero(a, b):\n    def count_zeros(n):\n        bin_str = bin(n)[2:]\n        return bin_str.count('0')\n\n    count = 0\n    for year in range(a, b + 1):\n        if count_zeros(year) == 1:\n            count += 1\n    return count\n\na, b = map(int, input().split())\nprint(count_years_with_one_zero(a, b))\n",
        "pass_rate": 0.7184466019417476,
        "passed_tests": 74,
        "total_tests": 103
    },
    {
        "task_id": "0003",
        "question": "You have a long fence which consists of $n$ sections. Unfortunately, it is not painted, so you decided to hire $q$ painters to paint it. $i$-th painter will paint all sections $x$ such that $l_i \\le x \\le r_i$.\n\nUnfortunately, you are on a tight budget, so you may hire only $q - 2$ painters. Obviously, only painters you hire will do their work.\n\nYou want to maximize the number of painted sections if you choose $q - 2$ painters optimally. A section is considered painted if at least one painter paints it.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($3 \\le n, q \\le 5000$) — the number of sections and the number of painters availible for hire, respectively.\n\nThen $q$ lines follow, each describing one of the painters: $i$-th line contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le n$).\n\n\n-----Output-----\n\nPrint one integer — maximum number of painted sections if you hire $q - 2$ painters.\n\n\n-----Examples-----\nInput\n7 5\n1 4\n4 5\n5 6\n6 7\n3 5\n\nOutput\n7\n\nInput\n4 3\n1 1\n2 2\n3 4\n\nOutput\n2\n\nInput\n4 4\n1 1\n2 2\n2 3\n3 4\n\nOutput\n3",
        "generated_code": "n, q = map(int, input().split())\npainters = []\nfor _ in range(q):\n    l, r = map(int, input().split())\n    painters.append((l, r))\n\npainters.sort()\n\ndp = [0] * (n + 1)\nfor l, r in painters:\n    for i in range(l, r + 1):\n        dp[i] += 1\n\nres = 0\nfor i in range(1, n + 1):\n    res = max(res, dp[i])\n\nprint(res - (q - 2))\n",
        "pass_rate": 0.003861003861003861,
        "passed_tests": 1,
        "total_tests": 259
    },
    {
        "task_id": "0056",
        "question": "Mary has just graduated from one well-known University and is now attending celebration party. Students like to dream of a beautiful life, so they used champagne glasses to construct a small pyramid. The height of the pyramid is n. The top level consists of only 1 glass, that stands on 2 glasses on the second level (counting from the top), then 3 glasses on the third level and so on.The bottom level consists of n glasses.\n\nVlad has seen in the movies many times how the champagne beautifully flows from top levels to bottom ones, filling all the glasses simultaneously. So he took a bottle and started to pour it in the glass located at the top of the pyramid.\n\nEach second, Vlad pours to the top glass the amount of champagne equal to the size of exactly one glass. If the glass is already full, but there is some champagne flowing in it, then it pours over the edge of the glass and is equally distributed over two glasses standing under. If the overflowed glass is at the bottom level, then the champagne pours on the table. For the purpose of this problem we consider that champagne is distributed among pyramid glasses immediately. Vlad is interested in the number of completely full glasses if he stops pouring champagne in t seconds.\n\nPictures below illustrate the pyramid consisting of three levels. [Image] [Image] \n\n\n-----Input-----\n\nThe only line of the input contains two integers n and t (1 ≤ n ≤ 10, 0 ≤ t ≤ 10 000) — the height of the pyramid and the number of seconds Vlad will be pouring champagne from the bottle.\n\n\n-----Output-----\n\nPrint the single integer — the number of completely full glasses after t seconds.\n\n\n-----Examples-----\nInput\n3 5\n\nOutput\n4\n\nInput\n4 8\n\nOutput\n6\n\n\n\n-----Note-----\n\nIn the first sample, the glasses full after 5 seconds are: the top glass, both glasses on the second level and the middle glass at the bottom level. Left and right glasses of the bottom level will be half-empty.",
        "generated_code": "n, t = map(int, input().split())\ntotal_glasses = n * (n + 1) // 2\nfull_glasses = min(total_glasses, t)\ncurrent_level = 1\nwhile full_glasses > current_level:\n    full_glasses -= current_level\n    current_level += 1\nprint(full_glasses)\n",
        "pass_rate": 0.11570247933884298,
        "passed_tests": 14,
        "total_tests": 121
    },
    {
        "task_id": "0016",
        "question": "A string is called bracket sequence if it does not contain any characters other than \"(\" and \")\". A bracket sequence is called regular if it it is possible to obtain correct arithmetic expression by inserting characters \"+\" and \"1\" into this sequence. For example, \"\", \"(())\" and \"()()\" are regular bracket sequences; \"))\" and \")((\" are bracket sequences (but not regular ones), and \"(a)\" and \"(1)+(1)\" are not bracket sequences at all.\n\nYou have a number of strings; each string is a bracket sequence of length $2$. So, overall you have $cnt_1$ strings \"((\", $cnt_2$ strings \"()\", $cnt_3$ strings \")(\" and $cnt_4$ strings \"))\". You want to write all these strings in some order, one after another; after that, you will get a long bracket sequence of length $2(cnt_1 + cnt_2 + cnt_3 + cnt_4)$. You wonder: is it possible to choose some order of the strings you have such that you will get a regular bracket sequence? Note that you may not remove any characters or strings, and you may not add anything either.\n\n\n-----Input-----\n\nThe input consists of four lines, $i$-th of them contains one integer $cnt_i$ ($0 \\le cnt_i \\le 10^9$).\n\n\n-----Output-----\n\nPrint one integer: $1$ if it is possible to form a regular bracket sequence by choosing the correct order of the given strings, $0$ otherwise.\n\n\n-----Examples-----\nInput\n3\n1\n4\n3\n\nOutput\n1\n\nInput\n0\n0\n0\n0\n\nOutput\n1\n\nInput\n1\n2\n3\n4\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example it is possible to construct a string \"(())()(()((()()()())))\", which is a regular bracket sequence.\n\nIn the second example it is possible to construct a string \"\", which is a regular bracket sequence.",
        "generated_code": "cnt1, cnt2, cnt3, cnt4 = map(int, [input() for _ in range(4)])\n\nif cnt3 > cnt1 + cnt2:\n    print(0)\nelse:\n    print(1)\n",
        "pass_rate": 0.3063583815028902,
        "passed_tests": 53,
        "total_tests": 173
    },
    {
        "task_id": "0108",
        "question": "You are given a string s consisting of |s| small english letters.\n\nIn one move you can replace any character of this string to the next character in alphabetical order (a will be replaced with b, s will be replaced with t, etc.). You cannot replace letter z with any other letter.\n\nYour target is to make some number of moves (not necessary minimal) to get string abcdefghijklmnopqrstuvwxyz (english alphabet) as a subsequence. Subsequence of the string is the string that is obtained by deleting characters at some positions. You need to print the string that will be obtained from the given string and will be contain english alphabet as a subsequence or say that it is impossible.\n\n\n-----Input-----\n\nThe only one line of the input consisting of the string s consisting of |s| (1 ≤ |s| ≤ 10^5) small english letters.\n\n\n-----Output-----\n\nIf you can get a string that can be obtained from the given string and will contain english alphabet as a subsequence, print it. Otherwise print «-1» (without quotes).\n\n\n-----Examples-----\nInput\naacceeggiikkmmooqqssuuwwyy\n\nOutput\nabcdefghijklmnopqrstuvwxyz\n\nInput\nthereisnoanswer\n\nOutput\n-1",
        "generated_code": "s = input()\nn = len(s)\nres = ''\nj = 0\nfor i in range(26):\n    while j < n and ord(s[j]) < ord('a') + i:\n        j += 1\n    if j == n:\n        print('-1')\n        exit()\n    res += chr(ord('a') + i)\nprint(res)\n",
        "pass_rate": 0.1326530612244898,
        "passed_tests": 13,
        "total_tests": 98
    },
    {
        "task_id": "0028",
        "question": "The All-Berland National Olympiad in Informatics has just ended! Now Vladimir wants to upload the contest from the Olympiad as a gym to a popular Codehorses website.\n\nUnfortunately, the archive with Olympiad's data is a mess. For example, the files with tests are named arbitrary without any logic.\n\nVladimir wants to rename the files with tests so that their names are distinct integers starting from 1 without any gaps, namely, \"1\", \"2\", ..., \"n', where n is the total number of tests.\n\nSome of the files contain tests from statements (examples), while others contain regular tests. It is possible that there are no examples, and it is possible that all tests are examples. Vladimir wants to rename the files so that the examples are the first several tests, all all the next files contain regular tests only.\n\nThe only operation Vladimir can perform is the \"move\" command. Vladimir wants to write a script file, each of the lines in which is \"move file_1 file_2\", that means that the file \"file_1\" is to be renamed to \"file_2\". If there is a file \"file_2\" at the moment of this line being run, then this file is to be rewritten. After the line \"move file_1 file_2\" the file \"file_1\" doesn't exist, but there is a file \"file_2\" with content equal to the content of \"file_1\" before the \"move\" command.\n\nHelp Vladimir to write the script file with the minimum possible number of lines so that after this script is run:  all examples are the first several tests having filenames \"1\", \"2\", ..., \"e\", where e is the total number of examples;  all other files contain regular tests with filenames \"e + 1\", \"e + 2\", ..., \"n\", where n is the total number of all tests. \n\n\n-----Input-----\n\nThe first line contains single integer n (1 ≤ n ≤ 10^5) — the number of files with tests.\n\nn lines follow, each describing a file with test. Each line has a form of \"name_i type_i\", where \"name_i\" is the filename, and \"type_i\" equals \"1\", if the i-th file contains an example test, and \"0\" if it contains a regular test. Filenames of each file are strings of digits and small English letters with length from 1 to 6 characters. The filenames are guaranteed to be distinct.\n\n\n-----Output-----\n\nIn the first line print the minimum number of lines in Vladimir's script file.\n\nAfter that print the script file, each line should be \"move file_1 file_2\", where \"file_1\" is an existing at the moment of this line being run filename, and \"file_2\" — is a string of digits and small English letters with length from 1 to 6.\n\n\n-----Examples-----\nInput\n5\n01 0\n2 1\n2extra 0\n3 1\n99 0\n\nOutput\n4\nmove 3 1\nmove 01 5\nmove 2extra 4\nmove 99 3\n\nInput\n2\n1 0\n2 1\n\nOutput\n3\nmove 1 3\nmove 2 1\nmove 3 2\nInput\n5\n1 0\n11 1\n111 0\n1111 1\n11111 0\n\nOutput\n5\nmove 1 5\nmove 11 1\nmove 1111 2\nmove 111 4\nmove 11111 3",
        "generated_code": "n = int(input())\nfiles = {}\nfor i in range(n):\n    name, type_ = input().split()\n    files[name] = int(type_)\n\nexamples = sorted([name for name, type_ in files.items() if type_ == 1])\nregulars = sorted([name for name, type_ in files.items() if type_ == 0])\n\nscript = []\nfor i, name in enumerate(examples, 1):\n    if name != str(i):\n        script.append(f\"move {name} {i}\")\nfor i, name in enumerate(regulars, len(examples) + 1):\n    if name != str(i):\n        script.append(f\"move {name} {i}\")\n\nprint(len(script))\nfor line in script:\n    print(line)\n",
        "pass_rate": 0.2328767123287671,
        "passed_tests": 34,
        "total_tests": 146
    },
    {
        "task_id": "0116",
        "question": "Today an outstanding event is going to happen in the forest — hedgehog Filya will come to his old fried Sonya!\n\nSonya is an owl and she sleeps during the day and stay awake from minute l_1 to minute r_1 inclusive. Also, during the minute k she prinks and is unavailable for Filya.\n\nFilya works a lot and he plans to visit Sonya from minute l_2 to minute r_2 inclusive.\n\nCalculate the number of minutes they will be able to spend together.\n\n\n-----Input-----\n\nThe only line of the input contains integers l_1, r_1, l_2, r_2 and k (1 ≤ l_1, r_1, l_2, r_2, k ≤ 10^18, l_1 ≤ r_1, l_2 ≤ r_2), providing the segments of time for Sonya and Filya and the moment of time when Sonya prinks.\n\n\n-----Output-----\n\nPrint one integer — the number of minutes Sonya and Filya will be able to spend together.\n\n\n-----Examples-----\nInput\n1 10 9 20 1\n\nOutput\n2\n\nInput\n1 100 50 200 75\n\nOutput\n50\n\n\n\n-----Note-----\n\nIn the first sample, they will be together during minutes 9 and 10.\n\nIn the second sample, they will be together from minute 50 to minute 74 and from minute 76 to minute 100.",
        "generated_code": "l1, r1, l2, r2, k = map(int, input().split())\n\n# Calculate the intersection of intervals [l1, r1] and [l2, r2]\nintersection_l = max(l1, l2)\nintersection_r = min(r1, r2)\n\n# If the intersection is not empty\nif intersection_l <= intersection_r:\n    # Check if k is in the intersection\n    if k >= intersection_l and k <= intersection_r:\n        # Subtract 1 from the length of the intersection because Sonya prinks at minute k\n        print(max(0, intersection_r - intersection_l - 1))\n    else:\n        print(intersection_r - intersection_l + 1)\nelse:\n    print(0)\n",
        "pass_rate": 0.8541666666666666,
        "passed_tests": 82,
        "total_tests": 96
    },
    {
        "task_id": "0078",
        "question": "The only difference between easy and hard versions is constraints.\n\nPolycarp loves to listen to music, so he never leaves the player, even on the way home from the university. Polycarp overcomes the distance from the university to the house in exactly $T$ minutes.\n\nIn the player, Polycarp stores $n$ songs, each of which is characterized by two parameters: $t_i$ and $g_i$, where $t_i$ is the length of the song in minutes ($1 \\le t_i \\le 15$), $g_i$ is its genre ($1 \\le g_i \\le 3$).\n\nPolycarp wants to create such a playlist so that he can listen to music all the time on the way from the university to his home, and at the time of his arrival home, the playlist is over. Polycarp never interrupts songs and always listens to them from beginning to end. Thus, if he started listening to the $i$-th song, he would spend exactly $t_i$ minutes on its listening. Polycarp also does not like when two songs of the same genre play in a row (i.e. successively/adjacently) or when the songs in his playlist are repeated.\n\nHelp Polycarpus count the number of different sequences of songs (their order matters), the total duration is exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $T$ ($1 \\le n \\le 15, 1 \\le T \\le 225$) — the number of songs in the player and the required total duration, respectively.\n\nNext, the $n$ lines contain descriptions of songs: the $i$-th line contains two integers $t_i$ and $g_i$ ($1 \\le t_i \\le 15, 1 \\le g_i \\le 3$) — the duration of the $i$-th song and its genre, respectively.\n\n\n-----Output-----\n\nOutput one integer — the number of different sequences of songs, the total length of exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different. Since the answer may be huge, output it modulo $10^9 + 7$ (that is, the remainder when dividing the quantity by $10^9 + 7$).\n\n\n-----Examples-----\nInput\n3 3\n1 1\n1 2\n1 3\n\nOutput\n6\n\nInput\n3 3\n1 1\n1 1\n1 3\n\nOutput\n2\n\nInput\n4 10\n5 3\n2 1\n3 2\n5 1\n\nOutput\n10\n\n\n\n-----Note-----\n\nIn the first example, Polycarp can make any of the $6$ possible playlist by rearranging the available songs: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$ and $[3, 2, 1]$ (indices of the songs are given).\n\nIn the second example, the first and second songs cannot go in succession (since they have the same genre). Thus, Polycarp can create a playlist in one of $2$ possible ways: $[1, 3, 2]$ and $[2, 3, 1]$ (indices of the songs are given).\n\nIn the third example, Polycarp can make the following playlists: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$, $[3, 2, 1]$, $[1, 4]$, $[4, 1]$, $[2, 3, 4]$ and $[4, 3, 2]$ (indices of the songs are given).",
        "generated_code": "n, T = map(int, input().split())\nsongs = []\nfor _ in range(n):\n    t, g = map(int, input().split())\n    songs.append((t, g))\n\nMOD = 10**9 + 7\ndp = [[[0]*(T+1) for _ in range(4)] for _ in range(n+1)]\ndp[0][0][0] = 1\n\nfor i in range(n):\n    for j in range(T+1):\n        for k in range(4):\n            if j < songs[i][0]:\n                dp[i+1][k][j] = dp[i][k][j]\n            else:\n                dp[i+1][k][j] = (dp[i][k][j] + dp[i][k-songs[i][1]][j-songs[i][0]]) % MOD\n\nprint(dp[n][0][T])\n",
        "pass_rate": 0.41284403669724773,
        "passed_tests": 45,
        "total_tests": 109
    },
    {
        "task_id": "0006",
        "question": "You are fighting with Zmei Gorynich — a ferocious monster from Slavic myths, a huge dragon-like reptile with multiple heads! \n\n $m$ \n\nInitially Zmei Gorynich has $x$ heads. You can deal $n$ types of blows. If you deal a blow of the $i$-th type, you decrease the number of Gorynich's heads by $min(d_i, curX)$, there $curX$ is the current number of heads. But if after this blow Zmei Gorynich has at least one head, he grows $h_i$ new heads. If $curX = 0$ then Gorynich is defeated. \n\nYou can deal each blow any number of times, in any order.\n\nFor example, if $curX = 10$, $d = 7$, $h = 10$ then the number of heads changes to $13$ (you cut $7$ heads off, but then Zmei grows $10$ new ones), but if $curX = 10$, $d = 11$, $h = 100$ then number of heads changes to $0$ and Zmei Gorynich is considered defeated.\n\nCalculate the minimum number of blows to defeat Zmei Gorynich!\n\nYou have to answer $t$ independent queries.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) – the number of queries.\n\nThe first line of each query contains two integers $n$ and $x$ ($1 \\le n \\le 100$, $1 \\le x \\le 10^9$) — the number of possible types of blows and the number of heads Zmei initially has, respectively.\n\nThe following $n$ lines of each query contain the descriptions of types of blows you can deal. The $i$-th line contains two integers $d_i$ and $h_i$ ($1 \\le d_i, h_i \\le 10^9$) — the description of the $i$-th blow.\n\n\n-----Output-----\n\nFor each query print the minimum number of blows you have to deal to defeat Zmei Gorynich. \n\nIf Zmei Gorynuch cannot be defeated print $-1$.\n\n\n-----Example-----\nInput\n3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n\nOutput\n2\n3\n-1\n\n\n\n-----Note-----\n\nIn the first query you can deal the first blow (after that the number of heads changes to $10 - 6 + 3 = 7$), and then deal the second blow.\n\nIn the second query you just deal the first blow three times, and Zmei is defeated. \n\nIn third query you can not defeat Zmei Gorynich. Maybe it's better to convince it to stop fighting?",
        "generated_code": "t = int(input())\nfor _ in range(t):\n    n, x = map(int, input().split())\n    blows = []\n    for _ in range(n):\n        d, h = map(int, input().split())\n        blows.append((d, h))\n    blows.sort(key=lambda x: x[0] - x[1], reverse=True)\n    ans = 0\n    for d, h in blows:\n        while x > 0:\n            x -= min(d, x)\n            if x > 0:\n                x += h\n            ans += 1\n        if x <= 0:\n            break\n    if x <= 0:\n        print(ans)\n    else:\n        print(-1)\n",
        "pass_rate": 0.7767857142857143,
        "passed_tests": 174,
        "total_tests": 224
    },
    {
        "task_id": "0126",
        "question": "While swimming at the beach, Mike has accidentally dropped his cellphone into the water. There was no worry as he bought a cheap replacement phone with an old-fashioned keyboard. The keyboard has only ten digital equal-sized keys, located in the following way: [Image] \n\nTogether with his old phone, he lost all his contacts and now he can only remember the way his fingers moved when he put some number in. One can formally consider finger movements as a sequence of vectors connecting centers of keys pressed consecutively to put in a number. For example, the finger movements for number \"586\" are the same as finger movements for number \"253\": [Image]  [Image] \n\nMike has already put in a number by his \"finger memory\" and started calling it, so he is now worrying, can he be sure that he is calling the correct number? In other words, is there any other number, that has the same finger movements?\n\n\n-----Input-----\n\nThe first line of the input contains the only integer n (1 ≤ n ≤ 9) — the number of digits in the phone number that Mike put in.\n\nThe second line contains the string consisting of n digits (characters from '0' to '9') representing the number that Mike put in.\n\n\n-----Output-----\n\nIf there is no other phone number with the same finger movements and Mike can be sure he is calling the correct number, print \"YES\" (without quotes) in the only line.\n\nOtherwise print \"NO\" (without quotes) in the first line.\n\n\n-----Examples-----\nInput\n3\n586\n\nOutput\nNO\n\nInput\n2\n09\n\nOutput\nNO\n\nInput\n9\n123456789\n\nOutput\nYES\n\nInput\n3\n911\n\nOutput\nYES\n\n\n\n-----Note-----\n\nYou can find the picture clarifying the first sample case in the statement above.",
        "generated_code": "n = int(input())\nnum = input()\n\ndef get_finger_movement(digit):\n    movements = [(0, 0), (-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]\n    return movements[int(digit)]\n\ndef is_unique(num):\n    num_movements = [get_finger_movement(digit) for digit in num]\n    for i in range(10**n):\n        str_i = str(i).zfill(n)\n        if str_i != num:\n            i_movements = [get_finger_movement(digit) for digit in str_i]\n            if i_movements == num_movements:\n                return False\n    return True\n\nprint(\"YES\" if is_unique(num) else \"NO\")\n",
        "pass_rate": 0.0,
        "passed_tests": 0,
        "total_tests": 93
    },
    {
        "task_id": "0042",
        "question": "You are given a binary string $s$.\n\nFind the number of distinct cyclical binary strings of length $n$ which contain $s$ as a substring.\n\nThe cyclical string $t$ contains $s$ as a substring if there is some cyclical shift of string $t$, such that $s$ is a substring of this cyclical shift of $t$.\n\nFor example, the cyclical string \"000111\" contains substrings \"001\", \"01110\" and \"10\", but doesn't contain \"0110\" and \"10110\".\n\nTwo cyclical strings are called different if they differ from each other as strings. For example, two different strings, which differ from each other by a cyclical shift, are still considered different cyclical strings.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 40$) — the length of the target string $t$.\n\nThe next line contains the string $s$ ($1 \\le |s| \\le n$) — the string which must be a substring of cyclical string $t$. String $s$ contains only characters '0' and '1'.\n\n\n-----Output-----\n\nPrint the only integer — the number of distinct cyclical binary strings $t$, which contain $s$ as a substring.\n\n\n-----Examples-----\nInput\n2\n0\n\nOutput\n3\nInput\n4\n1010\n\nOutput\n2\nInput\n20\n10101010101010\n\nOutput\n962\n\n\n-----Note-----\n\nIn the first example, there are three cyclical strings, which contain \"0\" — \"00\", \"01\" and \"10\".\n\nIn the second example, there are only two such strings — \"1010\", \"0101\".",
        "generated_code": "def count_cyclical_strings(n, s):\n    count = 0\n    for i in range(2**n):\n        bin_str = bin(i)[2:].zfill(n)\n        for j in range(n):\n            cyclical_str = bin_str[j:] + bin_str[:j]\n            if s in cyclical_str:\n                count += 1\n                break\n    return count\n\nn = int(input())\ns = input()\nprint(count_cyclical_strings(n, s))\n",
        "pass_rate": 0.21374045801526717,
        "passed_tests": 28,
        "total_tests": 131
    },
    {
        "task_id": "0030",
        "question": "The campus has $m$ rooms numbered from $0$ to $m - 1$. Also the $x$-mouse lives in the campus. The $x$-mouse is not just a mouse: each second $x$-mouse moves from room $i$ to the room $i \\cdot x \\mod{m}$ (in fact, it teleports from one room to another since it doesn't visit any intermediate room). Starting position of the $x$-mouse is unknown.\n\nYou are responsible to catch the $x$-mouse in the campus, so you are guessing about minimum possible number of traps (one trap in one room) you need to place. You are sure that if the $x$-mouse enters a trapped room, it immediately gets caught.\n\nAnd the only observation you made is $\\text{GCD} (x, m) = 1$.\n\n\n-----Input-----\n\nThe only line contains two integers $m$ and $x$ ($2 \\le m \\le 10^{14}$, $1 \\le x < m$, $\\text{GCD} (x, m) = 1$) — the number of rooms and the parameter of $x$-mouse. \n\n\n-----Output-----\n\nPrint the only integer — minimum number of traps you need to install to catch the $x$-mouse.\n\n\n-----Examples-----\nInput\n4 3\n\nOutput\n3\n\nInput\n5 2\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example you can, for example, put traps in rooms $0$, $2$, $3$. If the $x$-mouse starts in one of this rooms it will be caught immediately. If $x$-mouse starts in the $1$-st rooms then it will move to the room $3$, where it will be caught.\n\nIn the second example you can put one trap in room $0$ and one trap in any other room since $x$-mouse will visit all rooms $1..m-1$ if it will start in any of these rooms.",
        "generated_code": "m, x = map(int, input().split())\nprint(m - 1)\n",
        "pass_rate": 0.006993006993006993,
        "passed_tests": 1,
        "total_tests": 143
    },
    {
        "task_id": "0065",
        "question": "You are given an array of n integer numbers a_0, a_1, ..., a_{n} - 1. Find the distance between two closest (nearest) minimums in it. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Input-----\n\nThe first line contains positive integer n (2 ≤ n ≤ 10^5) — size of the given array. The second line contains n integers a_0, a_1, ..., a_{n} - 1 (1 ≤ a_{i} ≤ 10^9) — elements of the array. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Output-----\n\nPrint the only number — distance between two nearest minimums in the array.\n\n\n-----Examples-----\nInput\n2\n3 3\n\nOutput\n1\n\nInput\n3\n5 6 5\n\nOutput\n2\n\nInput\n9\n2 1 3 5 4 1 2 3 1\n\nOutput\n3",
        "generated_code": "n = int(input())\narr = list(map(int, input().split()))\nmin_val = min(arr)\nmin_indices = [i for i, x in enumerate(arr) if x == min_val]\nmin_indices.sort()\n\nmin_dist = float('inf')\nfor i in range(1, len(min_indices)):\n    dist = min_indices[i] - min_indices[i-1]\n    min_dist = min(min_dist, dist)\n\nprint(min_dist)\n",
        "pass_rate": 1.0,
        "passed_tests": 114,
        "total_tests": 114
    },
    {
        "task_id": "0085",
        "question": "Polycarpus likes giving presents to Paraskevi. He has bought two chocolate bars, each of them has the shape of a segmented rectangle. The first bar is a_1 × b_1 segments large and the second one is a_2 × b_2 segments large.\n\nPolycarpus wants to give Paraskevi one of the bars at the lunch break and eat the other one himself. Besides, he wants to show that Polycarpus's mind and Paraskevi's beauty are equally matched, so the two bars must have the same number of squares.\n\nTo make the bars have the same number of squares, Polycarpus eats a little piece of chocolate each minute. Each minute he does the following:  he either breaks one bar exactly in half (vertically or horizontally) and eats exactly a half of the bar,  or he chips of exactly one third of a bar (vertically or horizontally) and eats exactly a third of the bar. \n\nIn the first case he is left with a half, of the bar and in the second case he is left with two thirds of the bar.\n\nBoth variants aren't always possible, and sometimes Polycarpus cannot chip off a half nor a third. For example, if the bar is 16 × 23, then Polycarpus can chip off a half, but not a third. If the bar is 20 × 18, then Polycarpus can chip off both a half and a third. If the bar is 5 × 7, then Polycarpus cannot chip off a half nor a third.\n\nWhat is the minimum number of minutes Polycarpus needs to make two bars consist of the same number of squares? Find not only the required minimum number of minutes, but also the possible sizes of the bars after the process.\n\n\n-----Input-----\n\nThe first line of the input contains integers a_1, b_1 (1 ≤ a_1, b_1 ≤ 10^9) — the initial sizes of the first chocolate bar. The second line of the input contains integers a_2, b_2 (1 ≤ a_2, b_2 ≤ 10^9) — the initial sizes of the second bar.\n\nYou can use the data of type int64 (in Pascal), long long (in С++), long (in Java) to process large integers (exceeding 2^31 - 1).\n\n\n-----Output-----\n\nIn the first line print m — the sought minimum number of minutes. In the second and third line print the possible sizes of the bars after they are leveled in m minutes. Print the sizes using the format identical to the input format. Print the sizes (the numbers in the printed pairs) in any order. The second line must correspond to the first bar and the third line must correspond to the second bar. If there are multiple solutions, print any of them.\n\nIf there is no solution, print a single line with integer -1.\n\n\n-----Examples-----\nInput\n2 6\n2 3\n\nOutput\n1\n1 6\n2 3\n\nInput\n36 5\n10 16\n\nOutput\n3\n16 5\n5 16\n\nInput\n3 5\n2 1\n\nOutput\n-1",
        "generated_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\na1, b1 = map(int, input().split())\na2, b2 = map(int, input().split())\n\nn1 = a1 * b1\nn2 = a2 * b2\n\nif n1 != n2:\n    print(-1)\nelse:\n    l = lcm(a1, b1)\n    res = []\n    for x in range(1, int(l ** 0.5) + 1):\n        if l % x == 0:\n            res.append((x, l // x))\n    res.sort()\n    m = float('inf')\n    ans = None\n    for x, y in res:\n        t = 0\n        while a1 != x or b1 != y:\n            if a1 > x and b1 > y:\n                if a1 % 2 == 0 and b1 % 2 == 0:\n                    a1 //= 2\n                    b1 //= 2\n                elif a1 % 3 == 0 and b1 % 3 == 0:\n                    a1 //= 3\n                    b1 //= 3\n                elif a1 % 2 == 0:\n                    a1 //= 2\n                elif b1 % 2 == 0:\n                    b1 //= 2\n                elif a1 % 3 == 0:\n                    a1 //= 3\n                elif b1 % 3 == 0:\n                    b1 //= 3\n                else:\n                    break\n            else:\n                break\n            t += 1\n        else:\n            m = min(m, t)\n            ans = (x, y)\n    if ans is None:\n        print(-1)\n    else:\n        print(m)\n        print(ans[0], ans[1])\n        print(ans[0], ans[1])\n",
        "pass_rate": 0.1509433962264151,
        "passed_tests": 16,
        "total_tests": 106
    },
    {
        "task_id": "0022",
        "question": "Let's call a string \"s-palindrome\" if it is symmetric about the middle of the string. For example, the string \"oHo\" is \"s-palindrome\", but the string \"aa\" is not. The string \"aa\" is not \"s-palindrome\", because the second half of it is not a mirror reflection of the first half.\n\n [Image] English alphabet \n\nYou are given a string s. Check if the string is \"s-palindrome\".\n\n\n-----Input-----\n\nThe only line contains the string s (1 ≤ |s| ≤ 1000) which consists of only English letters.\n\n\n-----Output-----\n\nPrint \"TAK\" if the string s is \"s-palindrome\" and \"NIE\" otherwise.\n\n\n-----Examples-----\nInput\noXoxoXo\n\nOutput\nTAK\n\nInput\nbod\n\nOutput\nTAK\n\nInput\nER\n\nOutput\nNIE",
        "generated_code": "s = input()\nn = len(s)\nif s == s[::-1]:\n    print(\"TAK\")\nelse:\n    print(\"NIE\")\n",
        "pass_rate": 0.2929936305732484,
        "passed_tests": 46,
        "total_tests": 157
    },
    {
        "task_id": "0124",
        "question": "The Duck song\n\nFor simplicity, we'll assume that there are only three types of grapes: green grapes, purple grapes and black grapes.\n\nAndrew, Dmitry and Michal are all grapes' lovers, however their preferences of grapes are different. To make all of them happy, the following should happen: Andrew, Dmitry and Michal should eat at least $x$, $y$ and $z$ grapes, respectively. Andrew has an extreme affinity for green grapes, thus he will eat green grapes and green grapes only. On the other hand, Dmitry is not a fan of black grapes — any types of grapes except black would do for him. In other words, Dmitry can eat green and purple grapes. Michal has a common taste — he enjoys grapes in general and will be pleased with any types of grapes, as long as the quantity is sufficient.\n\nKnowing that his friends are so fond of grapes, Aki decided to host a grape party with them. He has prepared a box with $a$ green grapes, $b$ purple grapes and $c$ black grapes.\n\nHowever, Aki isn't sure if the box he prepared contains enough grapes to make everyone happy. Can you please find out whether it's possible to distribute grapes so that everyone is happy or Aki has to buy some more grapes?\n\nIt is not required to distribute all the grapes, so it's possible that some of them will remain unused.\n\n\n-----Input-----\n\nThe first line contains three integers $x$, $y$ and $z$ ($1 \\le x, y, z \\le 10^5$) — the number of grapes Andrew, Dmitry and Michal want to eat.\n\nThe second line contains three integers $a$, $b$, $c$ ($1 \\le a, b, c \\le 10^5$) — the number of green, purple and black grapes in the box.\n\n\n-----Output-----\n\nIf there is a grape distribution that allows everyone to be happy, print \"YES\", otherwise print \"NO\".\n\n\n-----Examples-----\nInput\n1 6 2\n4 3 3\n\nOutput\nYES\n\nInput\n5 1 1\n4 3 2\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example, there is only one possible distribution:\n\nAndrew should take $1$ green grape, Dmitry should take $3$ remaining green grapes and $3$ purple grapes, and Michal will take $2$ out of $3$ available black grapes.\n\nIn the second test, there is no possible distribution, since Andrew is not be able to eat enough green grapes. :(",
        "generated_code": "x, y, z = map(int, input().split())\na, b, c = map(int, input().split())\n\nif x > a:\n    print(\"NO\")\nelif y > a + b:\n    print(\"NO\")\nelif z > a + b + c:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n",
        "pass_rate": 0.5638297872340425,
        "passed_tests": 53,
        "total_tests": 94
    },
    {
        "task_id": "0059",
        "question": "You have an array a consisting of n integers. Each integer from 1 to n appears exactly once in this array.\n\nFor some indices i (1 ≤ i ≤ n - 1) it is possible to swap i-th element with (i + 1)-th, for other indices it is not possible. You may perform any number of swapping operations any order. There is no limit on the number of times you swap i-th element with (i + 1)-th (if the position is not forbidden).\n\nCan you make this array sorted in ascending order performing some sequence of swapping operations?\n\n\n-----Input-----\n\nThe first line contains one integer n (2 ≤ n ≤ 200000) — the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 200000) — the elements of the array. Each integer from 1 to n appears exactly once.\n\nThe third line contains a string of n - 1 characters, each character is either 0 or 1. If i-th character is 1, then you can swap i-th element with (i + 1)-th any number of times, otherwise it is forbidden to swap i-th element with (i + 1)-th.\n\n\n-----Output-----\n\nIf it is possible to sort the array in ascending order using any sequence of swaps you are allowed to make, print YES. Otherwise, print NO.\n\n\n-----Examples-----\nInput\n6\n1 2 5 3 4 6\n01110\n\nOutput\nYES\n\nInput\n6\n1 2 5 3 4 6\n01010\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example you may swap a_3 and a_4, and then swap a_4 and a_5.",
        "generated_code": "def can_sort_array(n, a, swaps):\n    # Initialize the start of the current segment\n    start = 0\n\n    while start < n - 1:\n        if swaps[start] == '0':\n            start += 1\n            continue\n\n        # Find the end of this segment\n        end = start\n        while end < n - 1 and swaps[end] == '1':\n            end += 1\n        \n        # Extract the segment we can swap\n        segment = a[start:end + 1]\n        # Sort the segment\n        sorted_segment = sorted(segment)\n        \n        # Check if the sorted segment matches the original segment\n        if sorted_segment != segment:\n            return \"NO\"\n        \n        # Move to the next segment\n        start = end + 1\n\n    return \"YES\"\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    n = int(data[0])\n    a = list(map(int, data[1:n+1]))\n    swaps = data[n+1]\n    \n    print(can_sort_array(n, a, swaps))\n",
        "pass_rate": 0.8166666666666667,
        "passed_tests": 98,
        "total_tests": 120
    },
    {
        "task_id": "0028",
        "question": "The All-Berland National Olympiad in Informatics has just ended! Now Vladimir wants to upload the contest from the Olympiad as a gym to a popular Codehorses website.\n\nUnfortunately, the archive with Olympiad's data is a mess. For example, the files with tests are named arbitrary without any logic.\n\nVladimir wants to rename the files with tests so that their names are distinct integers starting from 1 without any gaps, namely, \"1\", \"2\", ..., \"n', where n is the total number of tests.\n\nSome of the files contain tests from statements (examples), while others contain regular tests. It is possible that there are no examples, and it is possible that all tests are examples. Vladimir wants to rename the files so that the examples are the first several tests, all all the next files contain regular tests only.\n\nThe only operation Vladimir can perform is the \"move\" command. Vladimir wants to write a script file, each of the lines in which is \"move file_1 file_2\", that means that the file \"file_1\" is to be renamed to \"file_2\". If there is a file \"file_2\" at the moment of this line being run, then this file is to be rewritten. After the line \"move file_1 file_2\" the file \"file_1\" doesn't exist, but there is a file \"file_2\" with content equal to the content of \"file_1\" before the \"move\" command.\n\nHelp Vladimir to write the script file with the minimum possible number of lines so that after this script is run:  all examples are the first several tests having filenames \"1\", \"2\", ..., \"e\", where e is the total number of examples;  all other files contain regular tests with filenames \"e + 1\", \"e + 2\", ..., \"n\", where n is the total number of all tests. \n\n\n-----Input-----\n\nThe first line contains single integer n (1 ≤ n ≤ 10^5) — the number of files with tests.\n\nn lines follow, each describing a file with test. Each line has a form of \"name_i type_i\", where \"name_i\" is the filename, and \"type_i\" equals \"1\", if the i-th file contains an example test, and \"0\" if it contains a regular test. Filenames of each file are strings of digits and small English letters with length from 1 to 6 characters. The filenames are guaranteed to be distinct.\n\n\n-----Output-----\n\nIn the first line print the minimum number of lines in Vladimir's script file.\n\nAfter that print the script file, each line should be \"move file_1 file_2\", where \"file_1\" is an existing at the moment of this line being run filename, and \"file_2\" — is a string of digits and small English letters with length from 1 to 6.\n\n\n-----Examples-----\nInput\n5\n01 0\n2 1\n2extra 0\n3 1\n99 0\n\nOutput\n4\nmove 3 1\nmove 01 5\nmove 2extra 4\nmove 99 3\n\nInput\n2\n1 0\n2 1\n\nOutput\n3\nmove 1 3\nmove 2 1\nmove 3 2\nInput\n5\n1 0\n11 1\n111 0\n1111 1\n11111 0\n\nOutput\n5\nmove 1 5\nmove 11 1\nmove 1111 2\nmove 111 4\nmove 11111 3",
        "generated_code": "# Read the number of files\nn = int(input().strip())\n\n# Initialize lists to store the example files and regular test files\nexamples = []\nregulars = []\n\n# Read each file and categorize it\nfor _ in range(n):\n    name, type_ = input().strip().split()\n    if type_ == '1':\n        examples.append(name)\n    else:\n        regulars.append(name)\n\n# Initialize the list to store the move operations\nmoves = []\n\n# Track the current file number for examples and regulars\ncurrent_example = 1\ncurrent_regular = len(examples) + 1\n\n# Create a dictionary to store the final position of each file\nfinal_pos = {}\n\n# Assign final positions for example files\nfor example in examples:\n    final_pos[example] = str(current_example)\n    current_example += 1\n\n# Assign final positions for regular test files\nfor regular in regulars:\n    final_pos[regular] = str(current_regular)\n    current_regular += 1\n\n# Track available temporary filenames\ntemp_name = n + 1\ntemp_files = set(str(i) for i in range(1, n + 1))\n\n# Generate the move operations\nfor original, final in final_pos.items():\n    if original != final:\n        # If final position is already occupied, use a temporary file\n        if final in temp_files:\n            temp_files.remove(final)\n        else:\n            while str(temp_name) in temp_files:\n                temp_name += 1\n            moves.append(f\"move {final} {temp_name}\")\n            temp_files.add(final)\n            final = str(temp_name)\n        \n        moves.append(f\"move {original} {final}\")\n\n# Output the number of move operations\nprint(len(moves))\n\n# Output each move operation\nfor move in moves:\n    print(move)\n",
        "pass_rate": 0.2602739726027397,
        "passed_tests": 38,
        "total_tests": 146
    },
    {
        "task_id": "0081",
        "question": "Neko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.\n\nNeko has two integers $a$ and $b$. His goal is to find a non-negative integer $k$ such that the least common multiple of $a+k$ and $b+k$ is the smallest possible. If there are multiple optimal integers $k$, he needs to choose the smallest one.\n\nGiven his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?\n\n\n-----Input-----\n\nThe only line contains two integers $a$ and $b$ ($1 \\le a, b \\le 10^9$).\n\n\n-----Output-----\n\nPrint the smallest non-negative integer $k$ ($k \\ge 0$) such that the lowest common multiple of $a+k$ and $b+k$ is the smallest possible.\n\nIf there are many possible integers $k$ giving the same value of the least common multiple, print the smallest one.\n\n\n-----Examples-----\nInput\n6 10\n\nOutput\n2\nInput\n21 31\n\nOutput\n9\nInput\n5 10\n\nOutput\n0\n\n\n-----Note-----\n\nIn the first test, one should choose $k = 2$, as the least common multiple of $6 + 2$ and $10 + 2$ is $24$, which is the smallest least common multiple possible.",
        "generated_code": "import math\n\ndef find_minimum_k(a, b):\n    if a == b:\n        return 0\n    \n    d = abs(a - b)\n    min_lcm = float('inf')\n    min_k = 0\n    \n    for g in range(1, int(math.sqrt(d)) + 1):\n        if d % g == 0:\n            for divisor in [g, d // g]:\n                k = (divisor - a % divisor) % divisor\n                lcm_val = (a + k) * (b + k) // math.gcd(a + k, b + k)\n                \n                if lcm_val < min_lcm:\n                    min_lcm = lcm_val\n                    min_k = k\n                elif lcm_val == min_lcm:\n                    min_k = min(min_k, k)\n    \n    return min_k\n\n# Reading input\na, b = map(int, input().strip().split())\n\n# Finding and printing the minimum k\nprint(find_minimum_k(a, b))\n",
        "pass_rate": 1.0,
        "passed_tests": 108,
        "total_tests": 108
    },
    {
        "task_id": "0096",
        "question": "At first, let's define function $f(x)$ as follows: $$ \\begin{matrix} f(x) & = & \\left\\{ \\begin{matrix} \\frac{x}{2} & \\mbox{if } x \\text{ is even} \\\\ x - 1 & \\mbox{otherwise } \\end{matrix} \\right. \\end{matrix} $$\n\nWe can see that if we choose some value $v$ and will apply function $f$ to it, then apply $f$ to $f(v)$, and so on, we'll eventually get $1$. Let's write down all values we get in this process in a list and denote this list as $path(v)$. For example, $path(1) = [1]$, $path(15) = [15, 14, 7, 6, 3, 2, 1]$, $path(32) = [32, 16, 8, 4, 2, 1]$.\n\nLet's write all lists $path(x)$ for every $x$ from $1$ to $n$. The question is next: what is the maximum value $y$ such that $y$ is contained in at least $k$ different lists $path(x)$?\n\nFormally speaking, you need to find maximum $y$ such that $\\left| \\{ x ~|~ 1 \\le x \\le n, y \\in path(x) \\} \\right| \\ge k$.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 10^{18}$).\n\n\n-----Output-----\n\nPrint the only integer — the maximum value that is contained in at least $k$ paths.\n\n\n-----Examples-----\nInput\n11 3\n\nOutput\n5\n\nInput\n11 6\n\nOutput\n4\n\nInput\n20 20\n\nOutput\n1\n\nInput\n14 5\n\nOutput\n6\n\nInput\n1000000 100\n\nOutput\n31248\n\n\n\n-----Note-----\n\nIn the first example, the answer is $5$, since $5$ occurs in $path(5)$, $path(10)$ and $path(11)$.\n\nIn the second example, the answer is $4$, since $4$ occurs in $path(4)$, $path(5)$, $path(8)$, $path(9)$, $path(10)$ and $path(11)$.\n\nIn the third example $n = k$, so the answer is $1$, since $1$ is the only number occuring in all paths for integers from $1$ to $20$.",
        "generated_code": "def max_value_in_k_paths(n, k):\n    current = n\n    result = 1\n\n    while current > 0:\n        if n // current >= k:\n            result = current\n            break\n        current //= 2\n\n    return result\n\n# Reading input\nn, k = map(int, input().split())\n\n# Computing result\nresult = max_value_in_k_paths(n, k)\n\n# Printing result\nprint(result)\n",
        "pass_rate": 0.1485148514851485,
        "passed_tests": 15,
        "total_tests": 101
    },
    {
        "task_id": "0022",
        "question": "Let's call a string \"s-palindrome\" if it is symmetric about the middle of the string. For example, the string \"oHo\" is \"s-palindrome\", but the string \"aa\" is not. The string \"aa\" is not \"s-palindrome\", because the second half of it is not a mirror reflection of the first half.\n\n [Image] English alphabet \n\nYou are given a string s. Check if the string is \"s-palindrome\".\n\n\n-----Input-----\n\nThe only line contains the string s (1 ≤ |s| ≤ 1000) which consists of only English letters.\n\n\n-----Output-----\n\nPrint \"TAK\" if the string s is \"s-palindrome\" and \"NIE\" otherwise.\n\n\n-----Examples-----\nInput\noXoxoXo\n\nOutput\nTAK\n\nInput\nbod\n\nOutput\nTAK\n\nInput\nER\n\nOutput\nNIE",
        "generated_code": "# Read the input string\ns = input()\n\n# Define a function to check if the string is an s-palindrome\ndef is_s_palindrome(s):\n    n = len(s)\n    for i in range(n // 2):\n        if s[i] != s[n - 1 - i]:\n            return False\n    return True\n\n# Check if the string s is an s-palindrome\nif is_s_palindrome(s):\n    print(\"TAK\")\nelse:\n    print(\"NIE\")\n",
        "pass_rate": 0.2929936305732484,
        "passed_tests": 46,
        "total_tests": 157
    },
    {
        "task_id": "0073",
        "question": "Mister B once received a gift: it was a book about aliens, which he started read immediately. This book had c pages.\n\nAt first day Mister B read v_0 pages, but after that he started to speed up. Every day, starting from the second, he read a pages more than on the previous day (at first day he read v_0 pages, at second — v_0 + a pages, at third — v_0 + 2a pages, and so on). But Mister B is just a human, so he physically wasn't able to read more than v_1 pages per day.\n\nAlso, to refresh his memory, every day, starting from the second, Mister B had to reread last l pages he read on the previous day. Mister B finished the book when he read the last page for the first time.\n\nHelp Mister B to calculate how many days he needed to finish the book.\n\n\n-----Input-----\n\nFirst and only line contains five space-separated integers: c, v_0, v_1, a and l (1 ≤ c ≤ 1000, 0 ≤ l < v_0 ≤ v_1 ≤ 1000, 0 ≤ a ≤ 1000) — the length of the book in pages, the initial reading speed, the maximum reading speed, the acceleration in reading speed and the number of pages for rereading.\n\n\n-----Output-----\n\nPrint one integer — the number of days Mister B needed to finish the book.\n\n\n-----Examples-----\nInput\n5 5 10 5 4\n\nOutput\n1\n\nInput\n12 4 12 4 1\n\nOutput\n3\n\nInput\n15 1 100 0 0\n\nOutput\n15\n\n\n\n-----Note-----\n\nIn the first sample test the book contains 5 pages, so Mister B read it right at the first day.\n\nIn the second sample test at first day Mister B read pages number 1 - 4, at second day — 4 - 11, at third day — 11 - 12 and finished the book.\n\nIn third sample test every day Mister B read 1 page of the book, so he finished in 15 days.",
        "generated_code": "# Read input\nc, v_0, v_1, a, l = map(int, input().split())\n\n# Initialize variables\ndays = 0\npages_read = 0\ncurrent_speed = v_0\n\n# Simulate the reading process\nwhile pages_read < c:\n    days += 1\n    pages_read += current_speed\n    if pages_read >= c:\n        break\n    pages_read -= l\n    current_speed = min(current_speed + a, v_1)\n\n# Output the number of days needed\nprint(days)\n",
        "pass_rate": 1.0,
        "passed_tests": 110,
        "total_tests": 110
    },
    {
        "task_id": "0047",
        "question": "You are given an array $a$ consisting of $n$ integers. Beauty of array is the maximum sum of some consecutive subarray of this array (this subarray may be empty). For example, the beauty of the array [10, -5, 10, -4, 1] is 15, and the beauty of the array [-3, -5, -1] is 0.\n\nYou may choose at most one consecutive subarray of $a$ and multiply all values contained in this subarray by $x$. You want to maximize the beauty of array after applying at most one such operation.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $x$ ($1 \\le n \\le 3 \\cdot 10^5, -100 \\le x \\le 100$) — the length of array $a$ and the integer $x$ respectively.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$) — the array $a$.\n\n\n-----Output-----\n\nPrint one integer — the maximum possible beauty of array $a$ after multiplying all values belonging to some consecutive subarray $x$.\n\n\n-----Examples-----\nInput\n5 -2\n-3 8 -2 1 -6\n\nOutput\n22\n\nInput\n12 -3\n1 3 3 7 1 3 3 7 1 3 3 7\n\nOutput\n42\n\nInput\n5 10\n-1 -2 -3 -4 -5\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first test case we need to multiply the subarray [-2, 1, -6], and the array becomes [-3, 8, 4, -2, 12] with beauty 22 ([-3, 8, 4, -2, 12]).\n\nIn the second test case we don't need to multiply any subarray at all.\n\nIn the third test case no matter which subarray we multiply, the beauty of array will be equal to 0.",
        "generated_code": "n, x = map(int, input().split())\na = list(map(int, input().split()))\n\nif n == 0:\n    print(0)\nelse:\n    dp_no_mult = [0] * n\n    dp_with_mult = [0] * n\n    dp_post_mult = [0] * n\n\n    dp_no_mult[0] = max(0, a[0])\n    dp_with_mult[0] = max(0, a[0] * x)\n    dp_post_mult[0] = dp_with_mult[0]\n\n    for i in range(1, n):\n        dp_no_mult[i] = max(0, dp_no_mult[i-1] + a[i])\n        dp_with_mult[i] = max(0, dp_no_mult[i-1] + a[i] * x, a[i] * x)\n        dp_post_mult[i] = max(0, dp_with_mult[i-1] + a[i], dp_post_mult[i-1] + a[i])\n\n    max_beauty = max(max(dp_no_mult), max(dp_with_mult), max(dp_post_mult))\n    print(max_beauty)\n",
        "pass_rate": 0.5511811023622047,
        "passed_tests": 70,
        "total_tests": 127
    },
    {
        "task_id": "0125",
        "question": "Sagheer is walking in the street when he comes to an intersection of two roads. Each road can be represented as two parts where each part has 3 lanes getting into the intersection (one for each direction) and 3 lanes getting out of the intersection, so we have 4 parts in total. Each part has 4 lights, one for each lane getting into the intersection (l — left, s — straight, r — right) and a light p for a pedestrian crossing.  [Image] \n\nAn accident is possible if a car can hit a pedestrian. This can happen if the light of a pedestrian crossing of some part and the light of a lane that can get to or from that same part are green at the same time.\n\nNow, Sagheer is monitoring the configuration of the traffic lights. Your task is to help him detect whether an accident is possible.\n\n\n-----Input-----\n\nThe input consists of four lines with each line describing a road part given in a counter-clockwise order.\n\nEach line contains four integers l, s, r, p — for the left, straight, right and pedestrian lights, respectively. The possible values are 0 for red light and 1 for green light.\n\n\n-----Output-----\n\nOn a single line, print \"YES\" if an accident is possible, and \"NO\" otherwise.\n\n\n-----Examples-----\nInput\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 0 0 1\n\nOutput\nYES\n\nInput\n0 1 1 0\n1 0 1 0\n1 1 0 0\n0 0 0 1\n\nOutput\nNO\n\nInput\n1 0 0 0\n0 0 0 1\n0 0 0 0\n1 0 1 0\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example, some accidents are possible because cars of part 1 can hit pedestrians of parts 1 and 4. Also, cars of parts 2 and 3 can hit pedestrians of part 4.\n\nIn the second example, no car can pass the pedestrian crossing of part 4 which is the only green pedestrian light. So, no accident can occur.",
        "generated_code": "# Read the input for the four parts\nparts = [list(map(int, input().split())) for _ in range(4)]\n\n# Check for any possible accident conditions\naccident_possible = False\nfor i in range(4):\n    l, s, r, p = parts[i]\n    # If pedestrian light p is green\n    if p == 1:\n        # Check if any of the lights of the same part are green\n        if l == 1 or s == 1 or r == 1:\n            accident_possible = True\n            break\n        # Check if any of the corresponding lights from the other parts can cause an accident\n        if parts[(i + 1) % 4][0] == 1 or parts[(i + 2) % 4][1] == 1 or parts[(i + 3) % 4][2] == 1:\n            accident_possible = True\n            break\n\n# Output the result\nprint(\"YES\" if accident_possible else \"NO\")\n",
        "pass_rate": 1.0,
        "passed_tests": 93,
        "total_tests": 93
    },
    {
        "task_id": "0090",
        "question": "Anya loves to fold and stick. Today she decided to do just that.\n\nAnya has n cubes lying in a line and numbered from 1 to n from left to right, with natural numbers written on them. She also has k stickers with exclamation marks. We know that the number of stickers does not exceed the number of cubes.\n\nAnya can stick an exclamation mark on the cube and get the factorial of the number written on the cube. For example, if a cube reads 5, then after the sticking it reads 5!, which equals 120.\n\nYou need to help Anya count how many ways there are to choose some of the cubes and stick on some of the chosen cubes at most k exclamation marks so that the sum of the numbers written on the chosen cubes after the sticking becomes equal to S. Anya can stick at most one exclamation mark on each cube. Can you do it?\n\nTwo ways are considered the same if they have the same set of chosen cubes and the same set of cubes with exclamation marks.\n\n\n-----Input-----\n\nThe first line of the input contains three space-separated integers n, k and S (1 ≤ n ≤ 25, 0 ≤ k ≤ n, 1 ≤ S ≤ 10^16) — the number of cubes and the number of stickers that Anya has, and the sum that she needs to get. \n\nThe second line contains n positive integers a_{i} (1 ≤ a_{i} ≤ 10^9) — the numbers, written on the cubes. The cubes in the input are described in the order from left to right, starting from the first one. \n\nMultiple cubes can contain the same numbers.\n\n\n-----Output-----\n\nOutput the number of ways to choose some number of cubes and stick exclamation marks on some of them so that the sum of the numbers became equal to the given number S.\n\n\n-----Examples-----\nInput\n2 2 30\n4 3\n\nOutput\n1\n\nInput\n2 2 7\n4 3\n\nOutput\n1\n\nInput\n3 1 1\n1 1 1\n\nOutput\n6\n\n\n\n-----Note-----\n\nIn the first sample the only way is to choose both cubes and stick an exclamation mark on each of them.\n\nIn the second sample the only way is to choose both cubes but don't stick an exclamation mark on any of them.\n\nIn the third sample it is possible to choose any of the cubes in three ways, and also we may choose to stick or not to stick the exclamation mark on it. So, the total number of ways is six.",
        "generated_code": "from functools import lru_cache\nimport math\n\ndef solve(n, k, S, a):\n    # Precompute the factorial values for the given numbers that may have exclamation marks\n    factorial = [math.factorial(x) for x in a]\n    \n    @lru_cache(None)\n    def dp(index, remaining_k, current_sum):\n        # Base case: if we have reached the end of the list\n        if index == n:\n            return 1 if current_sum == S else 0\n        \n        # Case 1: Don't pick the current cube\n        ways = dp(index + 1, remaining_k, current_sum)\n        \n        # Case 2: Pick the current cube without exclamation mark\n        ways += dp(index + 1, remaining_k, current_sum + a[index])\n        \n        # Case 3: Pick the current cube with exclamation mark (if we still have stickers left)\n        if remaining_k > 0:\n            ways += dp(index + 1, remaining_k - 1, current_sum + factorial[index])\n        \n        return ways\n    \n    return dp(0, k, 0)\n\n# Read input\nn, k, S = map(int, input().split())\na = list(map(int, input().split()))\n\nprint(solve(n, k, S, a))\n",
        "pass_rate": 0.2647058823529412,
        "passed_tests": 27,
        "total_tests": 102
    },
    {
        "task_id": "0126",
        "question": "While swimming at the beach, Mike has accidentally dropped his cellphone into the water. There was no worry as he bought a cheap replacement phone with an old-fashioned keyboard. The keyboard has only ten digital equal-sized keys, located in the following way: [Image] \n\nTogether with his old phone, he lost all his contacts and now he can only remember the way his fingers moved when he put some number in. One can formally consider finger movements as a sequence of vectors connecting centers of keys pressed consecutively to put in a number. For example, the finger movements for number \"586\" are the same as finger movements for number \"253\": [Image]  [Image] \n\nMike has already put in a number by his \"finger memory\" and started calling it, so he is now worrying, can he be sure that he is calling the correct number? In other words, is there any other number, that has the same finger movements?\n\n\n-----Input-----\n\nThe first line of the input contains the only integer n (1 ≤ n ≤ 9) — the number of digits in the phone number that Mike put in.\n\nThe second line contains the string consisting of n digits (characters from '0' to '9') representing the number that Mike put in.\n\n\n-----Output-----\n\nIf there is no other phone number with the same finger movements and Mike can be sure he is calling the correct number, print \"YES\" (without quotes) in the only line.\n\nOtherwise print \"NO\" (without quotes) in the first line.\n\n\n-----Examples-----\nInput\n3\n586\n\nOutput\nNO\n\nInput\n2\n09\n\nOutput\nNO\n\nInput\n9\n123456789\n\nOutput\nYES\n\nInput\n3\n911\n\nOutput\nYES\n\n\n\n-----Note-----\n\nYou can find the picture clarifying the first sample case in the statement above.",
        "generated_code": "1 2 3\n4 5 6\n7 8 9\n  0\n",
        "pass_rate": 0.0,
        "passed_tests": 0,
        "total_tests": 93
    },
    {
        "task_id": "0071",
        "question": "On the Literature lesson Sergei noticed an awful injustice, it seems that some students are asked more often than others.\n\nSeating in the class looks like a rectangle, where n rows with m pupils in each. \n\nThe teacher asks pupils in the following order: at first, she asks all pupils from the first row in the order of their seating, then she continues to ask pupils from the next row. If the teacher asked the last row, then the direction of the poll changes, it means that she asks the previous row. The order of asking the rows looks as follows: the 1-st row, the 2-nd row, ..., the n - 1-st row, the n-th row, the n - 1-st row, ..., the 2-nd row, the 1-st row, the 2-nd row, ...\n\nThe order of asking of pupils on the same row is always the same: the 1-st pupil, the 2-nd pupil, ..., the m-th pupil.\n\nDuring the lesson the teacher managed to ask exactly k questions from pupils in order described above. Sergei seats on the x-th row, on the y-th place in the row. Sergei decided to prove to the teacher that pupils are asked irregularly, help him count three values:  the maximum number of questions a particular pupil is asked,  the minimum number of questions a particular pupil is asked,  how many times the teacher asked Sergei. \n\nIf there is only one row in the class, then the teacher always asks children from this row.\n\n\n-----Input-----\n\nThe first and the only line contains five integers n, m, k, x and y (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 10^18, 1 ≤ x ≤ n, 1 ≤ y ≤ m).\n\n\n-----Output-----\n\nPrint three integers:  the maximum number of questions a particular pupil is asked,  the minimum number of questions a particular pupil is asked,  how many times the teacher asked Sergei. \n\n\n-----Examples-----\nInput\n1 3 8 1 1\n\nOutput\n3 2 3\nInput\n4 2 9 4 2\n\nOutput\n2 1 1\nInput\n5 5 25 4 3\n\nOutput\n1 1 1\nInput\n100 100 1000000000000000000 100 100\n\nOutput\n101010101010101 50505050505051 50505050505051\n\n\n-----Note-----\n\nThe order of asking pupils in the first test:   the pupil from the first row who seats at the first table, it means it is Sergei;  the pupil from the first row who seats at the second table;  the pupil from the first row who seats at the third table;  the pupil from the first row who seats at the first table, it means it is Sergei;  the pupil from the first row who seats at the second table;  the pupil from the first row who seats at the third table;  the pupil from the first row who seats at the first table, it means it is Sergei;  the pupil from the first row who seats at the second table; \n\nThe order of asking pupils in the second test:   the pupil from the first row who seats at the first table;  the pupil from the first row who seats at the second table;  the pupil from the second row who seats at the first table;  the pupil from the second row who seats at the second table;  the pupil from the third row who seats at the first table;  the pupil from the third row who seats at the second table;  the pupil from the fourth row who seats at the first table;  the pupil from the fourth row who seats at the second table, it means it is Sergei;  the pupil from the third row who seats at the first table;",
        "generated_code": "# Read the input\nn, m, k, x, y = map(int, input().split())\n\n# Special case when there is only one row\nif n == 1:\n    max_questions = (k + m - 1) // m\n    min_questions = k // m\n    sergei_questions = (k + y - 1) // m\n    print(max_questions, min_questions, sergei_questions)\nelse:\n    # Calculate the full cycles\n    full_cycle = (2 * n - 2) * m\n    full_cycles = k // full_cycle\n    remaining_questions = k % full_cycle\n\n    # Calculate the number of questions each pupil gets in full cycles\n    max_questions = (full_cycles * 2) + 1\n    min_questions = full_cycles * 2\n\n    # Count the remaining questions\n    questions_per_pupil = [[0] * m for _ in range(n)]\n\n    # Forward direction\n    for i in range(n):\n        for j in range(m):\n            if remaining_questions > 0:\n                questions_per_pupil[i][j] += 1\n                remaining_questions -= 1\n\n    # Backward direction\n    for i in range(n-2, 0, -1):\n        for j in range(m):\n            if remaining_questions > 0:\n                questions_per_pupil[i][j] += 1\n                remaining_questions -= 1\n\n    # Update the max and min questions based on remaining questions\n    for i in range(n):\n        for j in range(m):\n            if questions_per_pupil[i][j] > 0:\n                max_questions = max(max_questions, full_cycles * 2 + questions_per_pupil[i][j])\n                min_questions = min(min_questions, full_cycles * 2 + questions_per_pupil[i][j])\n\n    # Find how many times Sergei was asked\n    sergei_questions = full_cycles * 2 + questions_per_pupil[x-1][y-1]\n\n    print(max_questions, min_questions, sergei_questions)\n",
        "pass_rate": 0.3153153153153153,
        "passed_tests": 35,
        "total_tests": 111
    },
    {
        "task_id": "0127",
        "question": "Summer holidays! Someone is going on trips, someone is visiting grandparents, but someone is trying to get a part-time job. This summer Noora decided that she wants to earn some money, and took a job in a shop as an assistant.\n\nShop, where Noora is working, has a plan on the following n days. For each day sales manager knows exactly, that in i-th day k_{i} products will be put up for sale and exactly l_{i} clients will come to the shop that day. Also, the manager is sure, that everyone, who comes to the shop, buys exactly one product or, if there aren't any left, leaves the shop without buying anything. Moreover, due to the short shelf-life of the products, manager established the following rule: if some part of the products left on the shelves at the end of the day, that products aren't kept on the next day and are sent to the dump.\n\nFor advertising purposes manager offered to start a sell-out in the shop. He asked Noora to choose any f days from n next for sell-outs. On each of f chosen days the number of products were put up for sale would be doubled. Thus, if on i-th day shop planned to put up for sale k_{i} products and Noora has chosen this day for sell-out, shelves of the shop would keep 2·k_{i} products. Consequently, there is an opportunity to sell two times more products on days of sell-out.\n\nNoora's task is to choose f days to maximize total number of sold products. She asks you to help her with such a difficult problem.\n\n\n-----Input-----\n\nThe first line contains two integers n and f (1 ≤ n ≤ 10^5, 0 ≤ f ≤ n) denoting the number of days in shop's plan and the number of days that Noora has to choose for sell-out.\n\nEach line of the following n subsequent lines contains two integers k_{i}, l_{i} (0 ≤ k_{i}, l_{i} ≤ 10^9) denoting the number of products on the shelves of the shop on the i-th day and the number of clients that will come to the shop on i-th day.\n\n\n-----Output-----\n\nPrint a single integer denoting the maximal number of products that shop can sell.\n\n\n-----Examples-----\nInput\n4 2\n2 1\n3 5\n2 3\n1 5\n\nOutput\n10\nInput\n4 1\n0 2\n0 3\n3 5\n0 6\n\nOutput\n5\n\n\n-----Note-----\n\nIn the first example we can choose days with numbers 2 and 4 for sell-out. In this case new numbers of products for sale would be equal to [2, 6, 2, 2] respectively. So on the first day shop will sell 1 product, on the second — 5, on the third — 2, on the fourth — 2. In total 1 + 5 + 2 + 2 = 10 product units.\n\nIn the second example it is possible to sell 5 products, if you choose third day for sell-out.",
        "generated_code": "n, f = map(int, input().split())\ndays = []\n\nfor _ in range(n):\n    k, l = map(int, input().split())\n    days.append((k, l))\n\n# Calculate the initial sales without any sell-out days\ninitial_sales = sum(min(k, l) for k, l in days)\n\n# Calculate the potential increase in sales if a day is chosen for sell-out\npotential_increases = []\nfor k, l in days:\n    if k < l:\n        potential_increases.append(min(2 * k, l) - min(k, l))\n    else:\n        potential_increases.append(0)\n\n# Sort the potential increases in descending order\npotential_increases.sort(reverse=True)\n\n# Sum the top f increases\nmax_additional_sales = sum(potential_increases[:f])\n\n# The maximum possible sales are the initial sales plus the max additional sales\nmax_sales = initial_sales + max_additional_sales\n\nprint(max_sales)\n",
        "pass_rate": 1.0,
        "passed_tests": 93,
        "total_tests": 93
    },
    {
        "task_id": "0070",
        "question": "Polycarp is crazy about round numbers. He especially likes the numbers divisible by 10^{k}.\n\nIn the given number of n Polycarp wants to remove the least number of digits to get a number that is divisible by 10^{k}. For example, if k = 3, in the number 30020 it is enough to delete a single digit (2). In this case, the result is 3000 that is divisible by 10^3 = 1000.\n\nWrite a program that prints the minimum number of digits to be deleted from the given integer number n, so that the result is divisible by 10^{k}. The result should not start with the unnecessary leading zero (i.e., zero can start only the number 0, which is required to be written as exactly one digit).\n\nIt is guaranteed that the answer exists.\n\n\n-----Input-----\n\nThe only line of the input contains two integer numbers n and k (0 ≤ n ≤ 2 000 000 000, 1 ≤ k ≤ 9).\n\nIt is guaranteed that the answer exists. All numbers in the input are written in traditional notation of integers, that is, without any extra leading zeros.\n\n\n-----Output-----\n\nPrint w — the required minimal number of digits to erase. After removing the appropriate w digits from the number n, the result should have a value that is divisible by 10^{k}. The result can start with digit 0 in the single case (the result is zero and written by exactly the only digit 0).\n\n\n-----Examples-----\nInput\n30020 3\n\nOutput\n1\n\nInput\n100 9\n\nOutput\n2\n\nInput\n10203049 2\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the example 2 you can remove two digits: 1 and any 0. The result is number 0 which is divisible by any number.",
        "generated_code": "n, k = input().split()\nn = list(n)\nk = int(k)\n\n# Reverse the list to facilitate counting zeros from the end\nn.reverse()\n\n# Count the number of zeros and the number of digits to remove\nzero_count = 0\nremove_count = 0\n\nfor digit in n:\n    if zero_count == k:\n        break\n    if digit == '0':\n        zero_count += 1\n    else:\n        remove_count += 1\n\nif zero_count < k:\n    # If there are not enough zeros, we need to remove the remaining digits\n    remove_count += (k - zero_count)\n\nprint(remove_count)\n",
        "pass_rate": 0.6216216216216216,
        "passed_tests": 69,
        "total_tests": 111
    },
    {
        "task_id": "0007",
        "question": "Anton likes to listen to fairy tales, especially when Danik, Anton's best friend, tells them. Right now Danik tells Anton a fairy tale:\n\n\"Once upon a time, there lived an emperor. He was very rich and had much grain. One day he ordered to build a huge barn to put there all his grain. Best builders were building that barn for three days and three nights. But they overlooked and there remained a little hole in the barn, from which every day sparrows came through. Here flew a sparrow, took a grain and flew away...\"\n\nMore formally, the following takes place in the fairy tale. At the beginning of the first day the barn with the capacity of n grains was full. Then, every day (starting with the first day) the following happens:  m grains are brought to the barn. If m grains doesn't fit to the barn, the barn becomes full and the grains that doesn't fit are brought back (in this problem we can assume that the grains that doesn't fit to the barn are not taken into account).  Sparrows come and eat grain. In the i-th day i sparrows come, that is on the first day one sparrow come, on the second day two sparrows come and so on. Every sparrow eats one grain. If the barn is empty, a sparrow eats nothing. \n\nAnton is tired of listening how Danik describes every sparrow that eats grain from the barn. Anton doesn't know when the fairy tale ends, so he asked you to determine, by the end of which day the barn will become empty for the first time. Help Anton and write a program that will determine the number of that day!\n\n\n-----Input-----\n\nThe only line of the input contains two integers n and m (1 ≤ n, m ≤ 10^18) — the capacity of the barn and the number of grains that are brought every day.\n\n\n-----Output-----\n\nOutput one integer — the number of the day when the barn will become empty for the first time. Days are numbered starting with one.\n\n\n-----Examples-----\nInput\n5 2\n\nOutput\n4\n\nInput\n8 1\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first sample the capacity of the barn is five grains and two grains are brought every day. The following happens:  At the beginning of the first day grain is brought to the barn. It's full, so nothing happens.  At the end of the first day one sparrow comes and eats one grain, so 5 - 1 = 4 grains remain.  At the beginning of the second day two grains are brought. The barn becomes full and one grain doesn't fit to it.  At the end of the second day two sparrows come. 5 - 2 = 3 grains remain.  At the beginning of the third day two grains are brought. The barn becomes full again.  At the end of the third day three sparrows come and eat grain. 5 - 3 = 2 grains remain.  At the beginning of the fourth day grain is brought again. 2 + 2 = 4 grains remain.  At the end of the fourth day four sparrows come and eat grain. 4 - 4 = 0 grains remain. The barn is empty. \n\nSo the answer is 4, because by the end of the fourth day the barn becomes empty.",
        "generated_code": "n, m = map(int, input().split())\n\nday = 0\nwhile n > 0:\n    day += 1\n    n += m  # Grains brought to the barn\n    n -= day  # Sparrows eat grains\n\nprint(day)\n",
        "pass_rate": 0.02242152466367713,
        "passed_tests": 5,
        "total_tests": 223
    },
    {
        "task_id": "0067",
        "question": "Nauuo is a girl who loves writing comments.\n\nOne day, she posted a comment on Codeforces, wondering whether she would get upvotes or downvotes.\n\nIt's known that there were $x$ persons who would upvote, $y$ persons who would downvote, and there were also another $z$ persons who would vote, but you don't know whether they would upvote or downvote. Note that each of the $x+y+z$ people would vote exactly one time.\n\nThere are three different results: if there are more people upvote than downvote, the result will be \"+\"; if there are more people downvote than upvote, the result will be \"-\"; otherwise the result will be \"0\".\n\nBecause of the $z$ unknown persons, the result may be uncertain (i.e. there are more than one possible results). More formally, the result is uncertain if and only if there exist two different situations of how the $z$ persons vote, that the results are different in the two situations.\n\nTell Nauuo the result or report that the result is uncertain.\n\n\n-----Input-----\n\nThe only line contains three integers $x$, $y$, $z$ ($0\\le x,y,z\\le100$), corresponding to the number of persons who would upvote, downvote or unknown.\n\n\n-----Output-----\n\nIf there is only one possible result, print the result : \"+\", \"-\" or \"0\".\n\nOtherwise, print \"?\" to report that the result is uncertain.\n\n\n-----Examples-----\nInput\n3 7 0\n\nOutput\n-\nInput\n2 0 1\n\nOutput\n+\nInput\n1 1 0\n\nOutput\n0\nInput\n0 0 1\n\nOutput\n?\n\n\n-----Note-----\n\nIn the first example, Nauuo would definitely get three upvotes and seven downvotes, so the only possible result is \"-\".\n\nIn the second example, no matter the person unknown downvotes or upvotes, Nauuo would get more upvotes than downvotes. So the only possible result is \"+\".\n\nIn the third example, Nauuo would definitely get one upvote and one downvote, so the only possible result is \"0\".\n\nIn the fourth example, if the only one person upvoted, the result would be \"+\", otherwise, the result would be \"-\". There are two possible results, so the result is uncertain.",
        "generated_code": "x, y, z = map(int, input().split())\n\nif x > y + z:\n    print(\"+\")\nelif y > x + z:\n    print(\"-\")\nelif x == y and z == 0:\n    print(\"0\")\nelse:\n    print(\"?\")\n",
        "pass_rate": 1.0,
        "passed_tests": 114,
        "total_tests": 114
    },
    {
        "task_id": "0010",
        "question": "On the planet Mars a year lasts exactly n days (there are no leap years on Mars). But Martians have the same weeks as earthlings — 5 work days and then 2 days off. Your task is to determine the minimum possible and the maximum possible number of days off per year on Mars.\n\n\n-----Input-----\n\nThe first line of the input contains a positive integer n (1 ≤ n ≤ 1 000 000) — the number of days in a year on Mars.\n\n\n-----Output-----\n\nPrint two integers — the minimum possible and the maximum possible number of days off per year on Mars.\n\n\n-----Examples-----\nInput\n14\n\nOutput\n4 4\n\nInput\n2\n\nOutput\n0 2\n\n\n\n-----Note-----\n\nIn the first sample there are 14 days in a year on Mars, and therefore independently of the day a year starts with there will be exactly 4 days off .\n\nIn the second sample there are only 2 days in a year on Mars, and they can both be either work days or days off.",
        "generated_code": "n = int(input())\n\n# Calculate full weeks and remaining days\nfull_weeks = n // 7\nremaining_days = n % 7\n\n# Minimum days off: full weeks * 2 + extra days off in incomplete week\nmin_days_off = full_weeks * 2\nif remaining_days > 5:\n    min_days_off += remaining_days - 5\n\n# Maximum days off: full weeks * 2 + remaining days (if remaining days <= 2)\nmax_days_off = full_weeks * 2 + min(remaining_days, 2)\n\nprint(min_days_off, max_days_off)\n",
        "pass_rate": 1.0,
        "passed_tests": 198,
        "total_tests": 198
    },
    {
        "task_id": "0084",
        "question": "There are n shovels in Polycarp's shop. The i-th shovel costs i burles, that is, the first shovel costs 1 burle, the second shovel costs 2 burles, the third shovel costs 3 burles, and so on. Polycarps wants to sell shovels in pairs.\n\nVisitors are more likely to buy a pair of shovels if their total cost ends with several 9s. Because of this, Polycarp wants to choose a pair of shovels to sell in such a way that the sum of their costs ends with maximum possible number of nines. For example, if he chooses shovels with costs 12345 and 37454, their total cost is 49799, it ends with two nines.\n\nYou are to compute the number of pairs of shovels such that their total cost ends with maximum possible number of nines. Two pairs are considered different if there is a shovel presented in one pair, but not in the other.\n\n\n-----Input-----\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^9) — the number of shovels in Polycarp's shop.\n\n\n-----Output-----\n\nPrint the number of pairs of shovels such that their total cost ends with maximum possible number of nines. \n\nNote that it is possible that the largest number of 9s at the end is 0, then you should count all such ways.\n\nIt is guaranteed that for every n ≤ 10^9 the answer doesn't exceed 2·10^9.\n\n\n-----Examples-----\nInput\n7\n\nOutput\n3\n\nInput\n14\n\nOutput\n9\n\nInput\n50\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example the maximum possible number of nines at the end is one. Polycarp cah choose the following pairs of shovels for that purpose:  2 and 7;  3 and 6;  4 and 5. \n\nIn the second example the maximum number of nines at the end of total cost of two shovels is one. The following pairs of shovels suit Polycarp:  1 and 8;  2 and 7;  3 and 6;  4 and 5;  5 and 14;  6 and 13;  7 and 12;  8 and 11;  9 and 10. \n\nIn the third example it is necessary to choose shovels 49 and 50, because the sum of their cost is 99, that means that the total number of nines is equal to two, which is maximum possible for n = 50.",
        "generated_code": "def find_pairs_with_max_nines(n):\n    max_nines_count = 0\n    for i in range(1, n // 2 + 1):\n        sum_cost = i + (n - i)\n        reversed_sum_str = str(sum_cost)[::-1]\n        \n        count_nines = 0\n        for ch in reversed_sum_str:\n            if ch == '9':\n                count_nines += 1\n            else:\n                break\n        \n        if count_nines > max_nines_count:\n            max_nines_count = count_nines\n    \n    return max_nines_count\n\nn = int(input())\nprint(find_pairs_with_max_nines(n))\n",
        "pass_rate": 0.0,
        "passed_tests": 0,
        "total_tests": 106
    },
    {
        "task_id": "0104",
        "question": "Polycarp has created his own training plan to prepare for the programming contests. He will train for $n$ days, all days are numbered from $1$ to $n$, beginning from the first.\n\nOn the $i$-th day Polycarp will necessarily solve $a_i$ problems. One evening Polycarp plans to celebrate the equator. He will celebrate it on the first evening of such a day that from the beginning of the training and to this day inclusive he will solve half or more of all the problems.\n\nDetermine the index of day when Polycarp will celebrate the equator.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 200\\,000$) — the number of days to prepare for the programming contests.\n\nThe second line contains a sequence $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10\\,000$), where $a_i$ equals to the number of problems, which Polycarp will solve on the $i$-th day.\n\n\n-----Output-----\n\nPrint the index of the day when Polycarp will celebrate the equator.\n\n\n-----Examples-----\nInput\n4\n1 3 2 1\n\nOutput\n2\n\nInput\n6\n2 2 2 2 2 2\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example Polycarp will celebrate the equator on the evening of the second day, because up to this day (inclusive) he will solve $4$ out of $7$ scheduled problems on four days of the training.\n\nIn the second example Polycarp will celebrate the equator on the evening of the third day, because up to this day (inclusive) he will solve $6$ out of $12$ scheduled problems on six days of the training.",
        "generated_code": "# Read input values\nn = int(input())\na = list(map(int, input().split()))\n\n# Calculate total problems to be solved\ntotal_problems = sum(a)\n\n# Half of the total problems (ceiling value)\nhalf_problems = (total_problems + 1) // 2\n\n# Iterate through the list and find the day when half of the problems are solved\ncurrent_sum = 0\nfor i in range(n):\n    current_sum += a[i]\n    if current_sum >= half_problems:\n        print(i + 1)\n        break\n",
        "pass_rate": 1.0,
        "passed_tests": 99,
        "total_tests": 99
    },
    {
        "task_id": "0106",
        "question": "Есть n-подъездный дом, в каждом подъезде по m этажей, и на каждом этаже каждого подъезда ровно k квартир. Таким образом, в доме всего n·m·k квартир. Они пронумерованы естественным образом от 1 до n·m·k, то есть первая квартира на первом этаже в первом подъезде имеет номер 1, первая квартира на втором этаже первого подъезда имеет номер k + 1 и так далее. Особенность этого дома состоит в том, что он круглый. То есть если обходить его по часовой стрелке, то после подъезда номер 1 следует подъезд номер 2, затем подъезд номер 3 и так далее до подъезда номер n. После подъезда номер n снова идёт подъезд номер 1.\n\nЭдвард живёт в квартире номер a, а Наташа — в квартире номер b. Переход на 1 этаж вверх или вниз по лестнице занимает 5 секунд, переход от двери подъезда к двери соседнего подъезда — 15 секунд, а переход в пределах одного этажа одного подъезда происходит мгновенно. Также в каждом подъезде дома есть лифт. Он устроен следующим образом: он всегда приезжает ровно через 10 секунд после вызова, а чтобы переместить пассажира на один этаж вверх или вниз, лифт тратит ровно 1 секунду. Посадка и высадка происходят мгновенно.\n\nПомогите Эдварду найти минимальное время, за которое он сможет добраться до квартиры Наташи. Считайте, что Эдвард может выйти из подъезда только с первого этажа соответствующего подъезда (это происходит мгновенно). Если Эдвард стоит перед дверью какого-то подъезда, он может зайти в него и сразу окажется на первом этаже этого подъезда (это также происходит мгновенно). Эдвард может выбирать, в каком направлении идти вокруг дома.\n\n\n-----Входные данные-----\n\nВ первой строке входных данных следуют три числа n, m, k (1 ≤ n, m, k ≤ 1000) — количество подъездов в доме, количество этажей в каждом подъезде и количество квартир на каждом этаже каждого подъезда соответственно.\n\nВо второй строке входных данных записаны два числа a и b (1 ≤ a, b ≤ n·m·k) — номера квартир, в которых живут Эдвард и Наташа, соответственно. Гарантируется, что эти номера различны. \n\n\n-----Выходные данные-----\n\nВыведите единственное целое число — минимальное время (в секундах), за которое Эдвард сможет добраться от своей квартиры до квартиры Наташи.\n\n\n-----Примеры-----\nВходные данные\n4 10 5\n200 6\n\nВыходные данные\n39\n\nВходные данные\n3 1 5\n7 2\n\nВыходные данные\n15\n\n\n\n-----Примечание-----\n\nВ первом тестовом примере Эдвард находится в 4 подъезде на 10 этаже, а Наташа находится в 1 подъезде на 2 этаже. Поэтому Эдварду выгодно сначала спуститься на лифте на первый этаж (на это он потратит 19 секунд, из которых 10 — на ожидание и 9 — на поездку на лифте), затем обойти дом против часовой стрелки до подъезда номер 1 (на это он потратит 15 секунд), и наконец подняться по лестнице на этаж номер 2 (на это он потратит 5 секунд). Таким образом, ответ равен 19 + 15 + 5 = 39.\n\nВо втором тестовом примере Эдвард живёт в подъезде 2 на этаже 1, а Наташа находится в подъезде 1 на этаже 1. Поэтому Эдварду выгодно просто обойти дом по часовой стрелке до подъезда 1, на это он потратит 15 секунд.",
        "generated_code": "# Read input values\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nm = int(data[1])\nk = int(data[2])\na = int(data[3])\nb = int(data[4])\n\n# Calculate positions in terms of entrances and floors\ndef get_position(x):\n    x -= 1\n    entrance = (x // k) // m + 1\n    floor = (x // k) % m + 1\n    return entrance, floor\n\na_entrance, a_floor = get_position(a)\nb_entrance, b_floor = get_position(b)\n\n# Calculate distances\ndist_entrances = min(abs(a_entrance - b_entrance), n - abs(a_entrance - b_entrance)) * 15\ndist_floors = abs(a_floor - b_floor) * 5\n\n# If Edward is not on the 1st floor, he needs to use the elevator\nif a_floor != 1:\n    elevator_time = 10 + (a_floor - 1)\nelse:\n    elevator_time = 0\n\n# Minimum time to go from a to b\nmin_time = elevator_time + dist_entrances + dist_floors\n\nprint(min_time)\n",
        "pass_rate": 0.11224489795918367,
        "passed_tests": 11,
        "total_tests": 98
    },
    {
        "task_id": "0004",
        "question": "Jamie loves sleeping. One day, he decides that he needs to wake up at exactly hh: mm. However, he hates waking up, so he wants to make waking up less painful by setting the alarm at a lucky time. He will then press the snooze button every x minutes until hh: mm is reached, and only then he will wake up. He wants to know what is the smallest number of times he needs to press the snooze button.\n\nA time is considered lucky if it contains a digit '7'. For example, 13: 07 and 17: 27 are lucky, while 00: 48 and 21: 34 are not lucky.\n\nNote that it is not necessary that the time set for the alarm and the wake-up time are on the same day. It is guaranteed that there is a lucky time Jamie can set so that he can wake at hh: mm.\n\nFormally, find the smallest possible non-negative integer y such that the time representation of the time x·y minutes before hh: mm contains the digit '7'.\n\nJamie uses 24-hours clock, so after 23: 59 comes 00: 00.\n\n\n-----Input-----\n\nThe first line contains a single integer x (1 ≤ x ≤ 60).\n\nThe second line contains two two-digit integers, hh and mm (00 ≤ hh ≤ 23, 00 ≤ mm ≤ 59).\n\n\n-----Output-----\n\nPrint the minimum number of times he needs to press the button.\n\n\n-----Examples-----\nInput\n3\n11 23\n\nOutput\n2\n\nInput\n5\n01 07\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample, Jamie needs to wake up at 11:23. So, he can set his alarm at 11:17. He would press the snooze button when the alarm rings at 11:17 and at 11:20.\n\nIn the second sample, Jamie can set his alarm at exactly at 01:07 which is lucky.",
        "generated_code": "def is_lucky(hh, mm):\n    return '7' in f\"{hh:02d}{mm:02d}\"\n\ndef find_min_snoozes(x, hh, mm):\n    snoozes = 0\n    while not is_lucky(hh, mm):\n        mm -= x\n        if mm < 0:\n            mm += 60\n            hh -= 1\n            if hh < 0:\n                hh = 23\n        snoozes += 1\n    return snoozes\n\nif __name__ == \"__main__\":\n    x = int(input())\n    hh, mm = map(int, input().split())\n    print(find_min_snoozes(x, hh, mm))\n",
        "pass_rate": 1.0,
        "passed_tests": 254,
        "total_tests": 254
    },
    {
        "task_id": "0002",
        "question": "Apart from having lots of holidays throughout the year, residents of Berland also have whole lucky years. Year is considered lucky if it has no more than 1 non-zero digit in its number. So years 100, 40000, 5 are lucky and 12, 3001 and 12345 are not.\n\nYou are given current year in Berland. Your task is to find how long will residents of Berland wait till the next lucky year.\n\n\n-----Input-----\n\nThe first line contains integer number n (1 ≤ n ≤ 10^9) — current year in Berland.\n\n\n-----Output-----\n\nOutput amount of years from the current year to the next lucky one.\n\n\n-----Examples-----\nInput\n4\n\nOutput\n1\n\nInput\n201\n\nOutput\n99\n\nInput\n4000\n\nOutput\n1000\n\n\n\n-----Note-----\n\nIn the first example next lucky year is 5. In the second one — 300. In the third — 5000.",
        "generated_code": "def is_lucky(year):\n    \"\"\"\n    Check if the given year is a lucky year.\n    A lucky year has no more than 1 non-zero digit.\n    \"\"\"\n    non_zero_digits = [digit for digit in str(year) if digit != '0']\n    return len(non_zero_digits) <= 1\n\ndef next_lucky_year(current_year):\n    \"\"\"\n    Find the next lucky year after the given current year.\n    \"\"\"\n    year = current_year + 1\n    while not is_lucky(year):\n        year += 1\n    return year\n\n# Read input\ncurrent_year = int(input())\n\n# Calculate the number of years to wait for the next lucky year\nnext_year = next_lucky_year(current_year)\nyears_to_wait = next_year - current_year\n\n# Output the result\nprint(years_to_wait)\n",
        "pass_rate": 0.9704797047970479,
        "passed_tests": 263,
        "total_tests": 271
    },
    {
        "task_id": "0008",
        "question": "Tokitsukaze is playing a game derivated from Japanese mahjong. In this game, she has three tiles in her hand. Each tile she owns is a suited tile, which means it has a suit (manzu, pinzu or souzu) and a number (a digit ranged from $1$ to $9$). In this problem, we use one digit and one lowercase letter, which is the first character of the suit, to represent a suited tile. All possible suited tiles are represented as 1m, 2m, $\\ldots$, 9m, 1p, 2p, $\\ldots$, 9p, 1s, 2s, $\\ldots$, 9s.\n\nIn order to win the game, she must have at least one mentsu (described below) in her hand, so sometimes she should draw extra suited tiles. After drawing a tile, the number of her tiles increases by one. She can draw any tiles she wants, including those already in her hand.\n\nDo you know the minimum number of extra suited tiles she needs to draw so that she can win?\n\nHere are some useful definitions in this game:  A mentsu, also known as meld, is formed by a koutsu or a shuntsu;  A koutsu, also known as triplet, is made of three identical tiles, such as [1m, 1m, 1m], however, [1m, 1p, 1s] or [1m, 4m, 7m] is NOT a koutsu;  A shuntsu, also known as sequence, is made of three sequential numbered tiles in the same suit, such as [1m, 2m, 3m] and [5s, 7s, 6s], however, [9m, 1m, 2m] or [1m, 2p, 3s] is NOT a shuntsu. \n\nSome examples:   [2m, 3p, 2s, 4m, 1s, 2s, 4s] — it contains no koutsu or shuntsu, so it includes no mentsu;  [4s, 3m, 3p, 4s, 5p, 4s, 5p] — it contains a koutsu, [4s, 4s, 4s], but no shuntsu, so it includes a mentsu;  [5p, 5s, 9m, 4p, 1s, 7p, 7m, 6p] — it contains no koutsu but a shuntsu, [5p, 4p, 6p] or [5p, 7p, 6p], so it includes a mentsu. \n\nNote that the order of tiles is unnecessary and you can assume the number of each type of suited tiles she can draw is infinite.\n\n\n-----Input-----\n\nThe only line contains three strings — the tiles in Tokitsukaze's hand. For each string, the first character is a digit ranged from $1$ to $9$ and the second character is m, p or s.\n\n\n-----Output-----\n\nPrint a single integer — the minimum number of extra suited tiles she needs to draw.\n\n\n-----Examples-----\nInput\n1s 2s 3s\n\nOutput\n0\n\nInput\n9m 9m 9m\n\nOutput\n0\n\nInput\n3p 9m 2p\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example, Tokitsukaze already has a shuntsu.\n\nIn the second example, Tokitsukaze already has a koutsu.\n\nIn the third example, Tokitsukaze can get a shuntsu by drawing one suited tile — 1p or 4p. The resulting tiles will be [3p, 9m, 2p, 1p] or [3p, 9m, 2p, 4p].",
        "generated_code": "def min_extra_tiles_needed(tiles):\n    def is_koutsu(tiles):\n        return tiles[0] == tiles[1] == tiles[2]\n    \n    def is_shuntsu(tiles):\n        tiles.sort()\n        return tiles[0][1] == tiles[1][1] == tiles[2][1] and int(tiles[2][0]) == int(tiles[1][0]) + 1 == int(tiles[0][0]) + 2\n    \n    def one_tile_away(tiles):\n        # Check pairs for potential koutsu\n        if tiles[0] == tiles[1] or tiles[0] == tiles[2] or tiles[1] == tiles[2]:\n            return True\n        \n        # Check pairs for potential shuntsu\n        tiles.sort()\n        if tiles[0][1] == tiles[1][1] and (int(tiles[1][0]) == int(tiles[0][0]) + 1 or int(tiles[1][0]) == int(tiles[0][0]) + 2):\n            return True\n        if tiles[0][1] == tiles[2][1] and (int(tiles[2][0]) == int(tiles[0][0]) + 1 or int(tiles[2][0]) == int(tiles[0][0]) + 2):\n            return True\n        if tiles[1][1] == tiles[2][1] and (int(tiles[2][0]) == int(tiles[1][0]) + 1 or int(tiles[2][0]) == int(tiles[1][0]) + 2):\n            return True\n        \n        return False\n    \n    if is_koutsu(tiles) or is_shuntsu(tiles):\n        return 0\n    elif one_tile_away(tiles):\n        return 1\n    else:\n        return 2\n\n# Read input\ntiles = input().split()\nprint(min_extra_tiles_needed(tiles))\n",
        "pass_rate": 1.0,
        "passed_tests": 213,
        "total_tests": 213
    },
    {
        "task_id": "0077",
        "question": "You are given sequence a_1, a_2, ..., a_{n} of integer numbers of length n. Your task is to find such subsequence that its sum is odd and maximum among all such subsequences. It's guaranteed that given sequence contains subsequence with odd sum.\n\nSubsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.\n\nYou should write a program which finds sum of the best subsequence.\n\n\n-----Input-----\n\nThe first line contains integer number n (1 ≤ n ≤ 10^5).\n\nThe second line contains n integer numbers a_1, a_2, ..., a_{n} ( - 10^4 ≤ a_{i} ≤ 10^4). The sequence contains at least one subsequence with odd sum.\n\n\n-----Output-----\n\nPrint sum of resulting subseqeuence.\n\n\n-----Examples-----\nInput\n4\n-2 2 -3 1\n\nOutput\n3\n\nInput\n3\n2 -5 -3\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example sum of the second and the fourth elements is 3.",
        "generated_code": "# Use Standard Input format\nimport sys\ninput = sys.stdin.read\n\ndef max_odd_sum_subsequence(n, arr):\n    total_sum = sum(arr)\n    if total_sum % 2 != 0:\n        return total_sum\n    smallest_odd = float('inf')\n    for num in arr:\n        if num % 2 != 0:\n            smallest_odd = min(smallest_odd, num)\n    if smallest_odd == float('inf'):\n        return -1\n    return total_sum - smallest_odd\n\ndef main():\n    data = input().split()\n    n = int(data[0])\n    arr = list(map(int, data[1:]))\n    print(max_odd_sum_subsequence(n, arr))\n\nif __name__ == \"__main__\":\n    main()\n",
        "pass_rate": 0.3669724770642202,
        "passed_tests": 40,
        "total_tests": 109
    },
    {
        "task_id": "0017",
        "question": "Arpa is researching the Mexican wave.\n\nThere are n spectators in the stadium, labeled from 1 to n. They start the Mexican wave at time 0. \n\n  At time 1, the first spectator stands.  At time 2, the second spectator stands.  ...  At time k, the k-th spectator stands.  At time k + 1, the (k + 1)-th spectator stands and the first spectator sits.  At time k + 2, the (k + 2)-th spectator stands and the second spectator sits.  ...  At time n, the n-th spectator stands and the (n - k)-th spectator sits.  At time n + 1, the (n + 1 - k)-th spectator sits.  ...  At time n + k, the n-th spectator sits. \n\nArpa wants to know how many spectators are standing at time t.\n\n\n-----Input-----\n\nThe first line contains three integers n, k, t (1 ≤ n ≤ 10^9, 1 ≤ k ≤ n, 1 ≤ t < n + k).\n\n\n-----Output-----\n\nPrint single integer: how many spectators are standing at time t.\n\n\n-----Examples-----\nInput\n10 5 3\n\nOutput\n3\n\nInput\n10 5 7\n\nOutput\n5\n\nInput\n10 5 12\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the following a sitting spectator is represented as -, a standing spectator is represented as ^.\n\n  At t = 0  ---------- $\\Rightarrow$ number of standing spectators = 0.  At t = 1  ^--------- $\\Rightarrow$ number of standing spectators = 1.  At t = 2  ^^-------- $\\Rightarrow$ number of standing spectators = 2.  At t = 3  ^^^------- $\\Rightarrow$ number of standing spectators = 3.  At t = 4  ^^^^------ $\\Rightarrow$ number of standing spectators = 4.  At t = 5  ^^^^^----- $\\Rightarrow$ number of standing spectators = 5.  At t = 6  -^^^^^---- $\\Rightarrow$ number of standing spectators = 5.  At t = 7  --^^^^^--- $\\Rightarrow$ number of standing spectators = 5.  At t = 8  ---^^^^^-- $\\Rightarrow$ number of standing spectators = 5.  At t = 9  ----^^^^^- $\\Rightarrow$ number of standing spectators = 5.  At t = 10 -----^^^^^ $\\Rightarrow$ number of standing spectators = 5.  At t = 11 ------^^^^ $\\Rightarrow$ number of standing spectators = 4.  At t = 12 -------^^^ $\\Rightarrow$ number of standing spectators = 3.  At t = 13 --------^^ $\\Rightarrow$ number of standing spectators = 2.  At t = 14 ---------^ $\\Rightarrow$ number of standing spectators = 1.  At t = 15 ---------- $\\Rightarrow$ number of standing spectators = 0.",
        "generated_code": "n, k, t = map(int, input().split())\n\nif t <= k:\n    print(t)\nelif t <= n:\n    print(k)\nelse:\n    print(n + k - t)\n",
        "pass_rate": 1.0,
        "passed_tests": 166,
        "total_tests": 166
    },
    {
        "task_id": "0006",
        "question": "You are fighting with Zmei Gorynich — a ferocious monster from Slavic myths, a huge dragon-like reptile with multiple heads! \n\n $m$ \n\nInitially Zmei Gorynich has $x$ heads. You can deal $n$ types of blows. If you deal a blow of the $i$-th type, you decrease the number of Gorynich's heads by $min(d_i, curX)$, there $curX$ is the current number of heads. But if after this blow Zmei Gorynich has at least one head, he grows $h_i$ new heads. If $curX = 0$ then Gorynich is defeated. \n\nYou can deal each blow any number of times, in any order.\n\nFor example, if $curX = 10$, $d = 7$, $h = 10$ then the number of heads changes to $13$ (you cut $7$ heads off, but then Zmei grows $10$ new ones), but if $curX = 10$, $d = 11$, $h = 100$ then number of heads changes to $0$ and Zmei Gorynich is considered defeated.\n\nCalculate the minimum number of blows to defeat Zmei Gorynich!\n\nYou have to answer $t$ independent queries.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 100$) – the number of queries.\n\nThe first line of each query contains two integers $n$ and $x$ ($1 \\le n \\le 100$, $1 \\le x \\le 10^9$) — the number of possible types of blows and the number of heads Zmei initially has, respectively.\n\nThe following $n$ lines of each query contain the descriptions of types of blows you can deal. The $i$-th line contains two integers $d_i$ and $h_i$ ($1 \\le d_i, h_i \\le 10^9$) — the description of the $i$-th blow.\n\n\n-----Output-----\n\nFor each query print the minimum number of blows you have to deal to defeat Zmei Gorynich. \n\nIf Zmei Gorynuch cannot be defeated print $-1$.\n\n\n-----Example-----\nInput\n3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n\nOutput\n2\n3\n-1\n\n\n\n-----Note-----\n\nIn the first query you can deal the first blow (after that the number of heads changes to $10 - 6 + 3 = 7$), and then deal the second blow.\n\nIn the second query you just deal the first blow three times, and Zmei is defeated. \n\nIn third query you can not defeat Zmei Gorynich. Maybe it's better to convince it to stop fighting?",
        "generated_code": "def min_blows_to_defeat(t, queries):\n    results = []\n    \n    for query in queries:\n        n, x = query[0]\n        blows = query[1]\n        \n        max_d_minus_h = -1\n        max_d = -1\n        \n        for d, h in blows:\n            if d > max_d:\n                max_d = d\n            if d - h > max_d_minus_h:\n                max_d_minus_h = d - h\n        \n        if max_d >= x:\n            results.append(1)\n            continue\n        \n        if max_d_minus_h <= 0:\n            results.append(-1)\n            continue\n        \n        remaining_heads = x - max_d\n        blows_needed = (remaining_heads + max_d_minus_h - 1) // max_d_minus_h + 1\n        results.append(blows_needed)\n    \n    return results\n\n\n# Reading input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nt = int(data[0])\nindex = 1\nqueries = []\n\nfor _ in range(t):\n    n = int(data[index])\n    x = int(data[index + 1])\n    blows = []\n    \n    for i in range(n):\n        d = int(data[index + 2 + 2 * i])\n        h = int(data[index + 3 + 2 * i])\n        blows.append((d, h))\n        \n    queries.append(((n, x), blows))\n    index += 2 + 2 * n\n\nresults = min_blows_to_defeat(t, queries)\nfor result in results:\n    print(result)\n",
        "pass_rate": 1.0,
        "passed_tests": 224,
        "total_tests": 224
    },
    {
        "task_id": "Mbpp/89",
        "specification": "Write a function to find the closest smaller number than n.",
        "generated_code": "def closest_num(n: int) -> int:\n    return n - 1\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/89",
            "tests": [
                {
                    "test": "assert closest_num(11) == 10",
                    "status": "Passed"
                },
                {
                    "test": "assert closest_num(7) == 6",
                    "status": "Passed"
                },
                {
                    "test": "assert closest_num(12) == 11",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/101",
        "specification": "Write a function to find the kth element in the given array using 1-based indexing.",
        "generated_code": "def kth_element(array, k):\n    return sorted(array)[k-1]\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/101",
            "tests": [],
            "errors": [
                {
                    "test": "assert kth_element([12,3,5,7,19], 2) == 3",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert kth_element([17,24,8,23], 3) == 8",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert kth_element([16,21,25,36,4], 4) == 36",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/763",
        "specification": "Write a python function to find the minimum difference between any two elements in a given array.",
        "generated_code": "def find_min_diff(arr, n):\n    arr = sorted(list(arr))\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/763",
            "tests": [
                {
                    "test": "assert find_min_diff((1,5,3,19,18,25),6) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert find_min_diff((4,3,2,6),4) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert find_min_diff((30,5,20,9),4) == 4",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/744",
        "specification": "Write a function to check if the given tuple has any none value or not.",
        "generated_code": "def check_none(tup):\n    return any(i is None for i in tup)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/744",
            "tests": [
                {
                    "test": "assert check_none((10, 4, 5, 6, None)) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert check_none((7, 8, 9, 11, 14)) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert check_none((1, 2, 3, 4, None)) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/125",
        "specification": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "generated_code": "def find_length(s: str) -> int:\n    max_diff = 0\n    zeros = 0\n    ones = 0\n    for char in s:\n        if char == '0':\n            zeros += 1\n        else:\n            ones += 1\n        max_diff = max(max_diff, abs(zeros - ones))\n    return max_diff\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/125",
            "tests": [],
            "errors": [
                {
                    "test": "assert find_length(\"11000010001\") == 6",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\nAssertionError"
                },
                {
                    "test": "assert find_length(\"10111\") == 1",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\nAssertionError"
                },
                {
                    "test": "assert find_length(\"11011101100101\") == 2",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/749",
        "specification": "Write a function to sort a given list of strings of numbers numerically.",
        "generated_code": "def sort_numeric_strings(lst: list) -> list:\n    return sorted(lst, key=int)\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/749",
            "tests": [],
            "errors": [
                {
                    "test": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                },
                {
                    "test": "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/596",
        "specification": "Write a function to find the size in bytes of the given tuple.",
        "generated_code": "import sys\n\ndef tuple_size(tup: tuple) -> int:\n    return sys.getsizeof(tup)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/596",
            "tests": [
                {
                    "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
                    "status": "Passed"
                },
                {
                    "test": "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
                    "status": "Passed"
                },
                {
                    "test": "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/414",
        "specification": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
        "generated_code": "def overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1) or any(i in seq1 for i in seq2)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/414",
            "tests": [
                {
                    "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert overlapping([1,2,3],[4,5,6]) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert overlapping([1,4,5],[1,4,5]) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/478",
        "specification": "Write a function to remove lowercase substrings from a given string.",
        "generated_code": "def remove_lowercase(s: str) -> str:\n    result = ''\n    i = 0\n    while i < len(s):\n        if s[i].islower():\n            while i < len(s) and s[i].islower():\n                i += 1\n        else:\n            result += s[i]\n            i += 1\n    return result\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/478",
            "tests": [
                {
                    "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_lowercase(\"FInD\")==('FID')",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_lowercase(\"STRinG\")==('STRG')",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/554",
        "specification": "Write a python function which takes a list of integers and only returns the odd ones.",
        "generated_code": "def Split(lst):\n    return [x for x in lst if x % 2 != 0]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/554",
            "tests": [
                {
                    "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]",
                    "status": "Passed"
                },
                {
                    "test": "assert Split([10,11,12,13]) == [11,13]",
                    "status": "Passed"
                },
                {
                    "test": "assert Split([7,8,9,1]) == [7,9,1]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/474",
        "specification": "Write a function to replace characters in a string.",
        "generated_code": "def replace_char(s, old, new):\n    return s.replace(old, new)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/474",
            "tests": [
                {
                    "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
                    "status": "Passed"
                },
                {
                    "test": "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
                    "status": "Passed"
                },
                {
                    "test": "assert replace_char(\"python\",'l','a')==(\"python\")",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/770",
        "specification": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
        "generated_code": "def odd_num_sum(n):\n    return sum(i**4 for i in range(1, 2*n, 2))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/770",
            "tests": [
                {
                    "test": "assert odd_num_sum(2) == 82",
                    "status": "Passed"
                },
                {
                    "test": "assert odd_num_sum(3) == 707",
                    "status": "Passed"
                },
                {
                    "test": "assert odd_num_sum(4) == 3108",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/88",
        "specification": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
        "generated_code": "def freq_count(lst):\n    return {i: lst.count(i) for i in set(lst)}\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/88",
            "tests": [
                {
                    "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})",
                    "status": "Passed"
                },
                {
                    "test": "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})",
                    "status": "Passed"
                },
                {
                    "test": "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/624",
        "specification": "Write a python function to convert a given string to uppercase.",
        "generated_code": "def is_upper(s: str) -> str:\n    return s.upper()\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/624",
            "tests": [
                {
                    "test": "assert is_upper(\"person\") ==\"PERSON\"",
                    "status": "Passed"
                },
                {
                    "test": "assert is_upper(\"final\") == \"FINAL\"",
                    "status": "Passed"
                },
                {
                    "test": "assert is_upper(\"Valid\") == \"VALID\"",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/741",
        "specification": "Write a python function to check whether all the characters are same or not.",
        "generated_code": "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/741",
            "tests": [
                {
                    "test": "assert all_Characters_Same(\"python\") == False",
                    "status": "Passed"
                },
                {
                    "test": "assert all_Characters_Same(\"aaa\") == True",
                    "status": "Passed"
                },
                {
                    "test": "assert all_Characters_Same(\"data\") == False",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/58",
        "specification": "Write a python function to check whether the given two integers have opposite sign or not.",
        "generated_code": "def opposite_Signs(a, b):\n    return (a > 0 and b < 0) or (a < 0 and b > 0)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/58",
            "tests": [
                {
                    "test": "assert opposite_Signs(1,-2) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert opposite_Signs(3,2) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert opposite_Signs(-10,-10) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert opposite_Signs(-2,2) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/622",
        "specification": "Write a function to find the median of two sorted lists of same size.",
        "generated_code": "def get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    mid = n\n    if n % 2 == 0:\n        median = (merged_list[mid - 1] + merged_list[mid]) / 2\n    else:\n        median = merged_list[mid]\n    return median\n",
        "pass_rate": 0.6666666666666666,
        "test_results": {
            "task_id": "Mbpp/622",
            "tests": [
                {
                    "test": "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5",
                    "status": "Passed"
                },
                {
                    "test": "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/631",
        "specification": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "generated_code": "def replace_spaces(s: str) -> str:\n    s = s.replace(' ', '_')\n    s = s.replace('_', ' ')\n    s = s.replace(' ', '_')\n    return s\n",
        "pass_rate": 0.6666666666666666,
        "test_results": {
            "task_id": "Mbpp/631",
            "tests": [
                {
                    "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
                    "status": "Passed"
                },
                {
                    "test": "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert replace_spaces('The_Avengers') == 'The Avengers'",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 7, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/758",
        "specification": "Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.",
        "generated_code": "def unique_sublists(list_of_lists):\n    sublist_count = {}\n    for sublist in list_of_lists:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in sublist_count:\n            sublist_count[tuple_sublist] += 1\n        else:\n            sublist_count[tuple_sublist] = 1\n    return sublist_count\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/758",
            "tests": [
                {
                    "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
                    "status": "Passed"
                },
                {
                    "test": "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
                    "status": "Passed"
                },
                {
                    "test": "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
                    "status": "Passed"
                },
                {
                    "test": "assert unique_sublists([['john']])=={('john',): 1}",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/476",
        "specification": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "generated_code": "def big_sum(nums):\n    return max(nums) + min(nums)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/476",
            "tests": [
                {
                    "test": "assert big_sum([1,2,3]) == 4",
                    "status": "Passed"
                },
                {
                    "test": "assert big_sum([-1,2,3,4]) == 3",
                    "status": "Passed"
                },
                {
                    "test": "assert big_sum([2,3,6]) == 8",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/167",
        "specification": "Write a python function to find the smallest power of 2 greater than or equal to n.",
        "generated_code": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/167",
            "tests": [
                {
                    "test": "assert next_power_of_2(0) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert next_power_of_2(5) == 8",
                    "status": "Passed"
                },
                {
                    "test": "assert next_power_of_2(17) == 32",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/267",
        "specification": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "generated_code": "def square_Sum(n: int) -> int:\n    sum_of_squares = sum(i**2 for i in range(1, 2*n + 1, 2))\n    return sum_of_squares\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/267",
            "tests": [
                {
                    "test": "assert square_Sum(2) == 10",
                    "status": "Passed"
                },
                {
                    "test": "assert square_Sum(3) == 35",
                    "status": "Passed"
                },
                {
                    "test": "assert square_Sum(4) == 84",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/312",
        "specification": "Write a function to find the volume of a cone.",
        "generated_code": "import math\n\ndef volume_cone(radius, height):\n    return (1.0/3) * math.pi * (radius ** 2) * height\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/312",
            "tests": [
                {
                    "test": "import math",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)",
                    "status": "Passed"
                },
                {
                    "test": "assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/95",
        "specification": "Write a python function to find the length of the smallest list in a list of lists.",
        "generated_code": "def Find_Min_Length(list_of_lists):\n    return min(len(sublist) for sublist in list_of_lists)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/95",
            "tests": [
                {
                    "test": "assert Find_Min_Length([[1],[1,2]]) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
                    "status": "Passed"
                },
                {
                    "test": "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/232",
        "specification": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
        "generated_code": "def larg_nnum(nums, n):\n    return sorted(set(nums), reverse=True)[:n]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/232",
            "tests": [
                {
                    "test": "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])",
                    "status": "Passed"
                },
                {
                    "test": "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])",
                    "status": "Passed"
                },
                {
                    "test": "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/161",
        "specification": "Write a function to remove all elements from a given list present in another list.",
        "generated_code": "def remove_elements(main_list, remove_list):\n    return [element for element in main_list if element not in remove_list]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/161",
            "tests": [
                {
                    "test": "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/140",
        "specification": "Write a function to flatten the list of lists into a single set of numbers.",
        "generated_code": "def extract_singly(list_of_tuples):\n    return set.union(*map(set, list_of_tuples))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/140",
            "tests": [
                {
                    "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == set([3, 4, 5, 7, 1])",
                    "status": "Passed"
                },
                {
                    "test": "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == set([1, 2, 3, 4, 7, 8])",
                    "status": "Passed"
                },
                {
                    "test": "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == set([7, 8, 9, 10, 11, 12])",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/287",
        "specification": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "generated_code": "def square_Sum(n: int) -> int:\n    return sum(i**2 for i in range(2, 2*n + 1, 2))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/287",
            "tests": [
                {
                    "test": "assert square_Sum(2) == 20",
                    "status": "Passed"
                },
                {
                    "test": "assert square_Sum(3) == 56",
                    "status": "Passed"
                },
                {
                    "test": "assert square_Sum(4) == 120",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/240",
        "specification": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "generated_code": "def replace_list(list1, list2):\n    list1 = list1[:-1]\n    list1.extend(list2)\n    return list1\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/240",
            "tests": [
                {
                    "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
                    "status": "Passed"
                },
                {
                    "test": "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
                    "status": "Passed"
                },
                {
                    "test": "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/128",
        "specification": "Write a function to find words that are longer than n characters from a given list of words.",
        "generated_code": "def long_words(n, sentence):\n    words = sentence.split()\n    return [word for word in words if len(word) > n]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/128",
            "tests": [
                {
                    "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
                    "status": "Passed"
                },
                {
                    "test": "assert long_words(2,\"writing a program\")==['writing','program']",
                    "status": "Passed"
                },
                {
                    "test": "assert long_words(5,\"sorting list\")==['sorting']",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/394",
        "specification": "Write a function to check if given tuple contains no duplicates.",
        "generated_code": "def check_distinct(tup):\n    return len(tup) == len(set(tup))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/394",
            "tests": [
                {
                    "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
                    "status": "Passed"
                },
                {
                    "test": "assert check_distinct((1, 4, 5, 6)) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert check_distinct((2, 3, 4, 5, 6)) == True",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/138",
        "specification": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "generated_code": "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    bin_str = bin(n)[2:]\n    return all(c == '0' for c in bin_str) or any(c == '1' for i, c in enumerate(bin_str) if bin_str[i+1:] == '0' * (len(bin_str) - i - 1))\n",
        "pass_rate": 0.6666666666666666,
        "test_results": {
            "task_id": "Mbpp/138",
            "tests": [
                {
                    "test": "assert is_Sum_Of_Powers_Of_Two(10) == True",
                    "status": "Passed"
                },
                {
                    "test": "assert is_Sum_Of_Powers_Of_Two(14) == True",
                    "status": "Passed"
                }
            ],
            "errors": [
                {
                    "test": "assert is_Sum_Of_Powers_Of_Two(7) == False",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 5, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/441",
        "specification": "Write a function to find the surface area of a cube of a given size.",
        "generated_code": "def surfacearea_cube(size: int) -> int:\n    return 6 * (size ** 2)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/441",
            "tests": [
                {
                    "test": "assert surfacearea_cube(5)==150",
                    "status": "Passed"
                },
                {
                    "test": "assert surfacearea_cube(3)==54",
                    "status": "Passed"
                },
                {
                    "test": "assert surfacearea_cube(10)==600",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/62",
        "specification": "Write a python function to find smallest number in a list.",
        "generated_code": "def smallest_num(nums):\n    return min(nums)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/62",
            "tests": [
                {
                    "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert smallest_num([1, 2, 3]) == 1",
                    "status": "Passed"
                },
                {
                    "test": "assert smallest_num([45, 46, 50, 60]) == 45",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/120",
        "specification": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
        "generated_code": "def max_product_tuple(tuples_list):\n    return max(abs(a * b) for a, b in tuples_list)\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/120",
            "tests": [],
            "errors": [
                {
                    "test": "assert math.isclose(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]), 36, rel_tol=0.001)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nNameError: name 'math' is not defined"
                },
                {
                    "test": "assert math.isclose(max_product_tuple([(10,20), (15,2), (5,10)] ), 200, rel_tol=0.001)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nNameError: name 'math' is not defined"
                },
                {
                    "test": "assert math.isclose(max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] ), 484, rel_tol=0.001)",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 4, in <module>\nNameError: name 'math' is not defined"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/305",
        "specification": "Write a function to return two words from a list of words starting with letter 'p'.",
        "generated_code": "def start_withp(lst):\n    words_starting_with_p = [word for sentence in lst for word in sentence.split() if word[0].lower() == 'p']\n    return tuple(words_starting_with_p[:2])\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/305",
            "tests": [
                {
                    "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
                    "status": "Passed"
                },
                {
                    "test": "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
                    "status": "Passed"
                },
                {
                    "test": "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/266",
        "specification": "Write a function to find the lateral surface area of a cube given its side length.",
        "generated_code": "def lateralsurface_cube(side_length: int) -> int:\n    return 4 * side_length ** 2\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/266",
            "tests": [
                {
                    "test": "assert lateralsurface_cube(5)==100",
                    "status": "Passed"
                },
                {
                    "test": "assert lateralsurface_cube(9)==324",
                    "status": "Passed"
                },
                {
                    "test": "assert lateralsurface_cube(10)==400",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/555",
        "specification": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "generated_code": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural_numbers\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/555",
            "tests": [
                {
                    "test": "assert difference(3) == 30",
                    "status": "Passed"
                },
                {
                    "test": "assert difference(5) == 210",
                    "status": "Passed"
                },
                {
                    "test": "assert difference(2) == 6",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/457",
        "specification": "Write a python function to find the sublist having minimum length.",
        "generated_code": "def Find_Min(sublists):\n    min_len = min(len(sublist) for sublist in sublists)\n    return [sublist for sublist in sublists if len(sublist) == min_len][0]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/457",
            "tests": [
                {
                    "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
                    "status": "Passed"
                },
                {
                    "test": "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
                    "status": "Passed"
                },
                {
                    "test": "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/437",
        "specification": "Write a function to remove odd characters in a string.",
        "generated_code": "def remove_odd(s: str) -> str:\n    return s[1::2]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/437",
            "tests": [
                {
                    "test": "assert remove_odd(\"python\")==(\"yhn\")",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_odd(\"program\")==(\"rga\")",
                    "status": "Passed"
                },
                {
                    "test": "assert remove_odd(\"language\")==(\"agae\")",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/429",
        "specification": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "generated_code": "def and_tuples(tup1, tup2):\n    return tuple((x & y) for x, y in zip(tup1, tup2))\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/429",
            "tests": [
                {
                    "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
                    "status": "Passed"
                },
                {
                    "test": "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
                    "status": "Passed"
                },
                {
                    "test": "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/590",
        "specification": "Write a function to convert polar coordinates to rectangular coordinates.",
        "generated_code": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(math.radians(theta))\n    y = r * math.sin(math.radians(theta))\n    complex_coord = complex(x, y)\n    return ((x, y), complex_coord)\n",
        "pass_rate": 0.0,
        "test_results": {
            "task_id": "Mbpp/590",
            "tests": [],
            "errors": [
                {
                    "test": "assert polar_rect(3, 4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                },
                {
                    "test": "assert polar_rect(4, 7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                },
                {
                    "test": "assert polar_rect(15, 17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
                    "error": "Traceback (most recent call last):\n  File \"<string>\", line 10, in <module>\nAssertionError"
                }
            ]
        }
    },
    {
        "task_id": "Mbpp/766",
        "specification": "Write a function to return a list of all pairs of consecutive items in a given list.",
        "generated_code": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/766",
            "tests": [
                {
                    "test": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]",
                    "status": "Passed"
                },
                {
                    "test": "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
                    "status": "Passed"
                },
                {
                    "test": "assert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]",
                    "status": "Passed"
                },
                {
                    "test": "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/271",
        "specification": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "generated_code": "def even_Power_Sum(n: int) -> int:\n    total = 0\n    count = 0\n    num = 2\n    while count < n:\n        total += num ** 5\n        num += 2\n        count += 1\n    return total\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/271",
            "tests": [
                {
                    "test": "assert even_Power_Sum(2) == 1056",
                    "status": "Passed"
                },
                {
                    "test": "assert even_Power_Sum(3) == 8832",
                    "status": "Passed"
                },
                {
                    "test": "assert even_Power_Sum(1) == 32",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/108",
        "specification": "Write a function to merge three lists into a single sorted list.",
        "generated_code": "def merge_sorted_list(list1, list2, list3):\n    return sorted(list1 + list2 + list3)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/108",
            "tests": [
                {
                    "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
                    "status": "Passed"
                },
                {
                    "test": "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
                    "status": "Passed"
                },
                {
                    "test": "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/142",
        "specification": "Write a function to count number items that are identical in the same position of three given lists.",
        "generated_code": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/142",
            "tests": [
                {
                    "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
                    "status": "Passed"
                },
                {
                    "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
                    "status": "Passed"
                },
                {
                    "test": "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/596",
        "specification": "Write a function to find the size in bytes of the given tuple.",
        "generated_code": "import sys\n\ndef tuple_size(tup: tuple) -> int:\n    return sys.getsizeof(tup)\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/596",
            "tests": [
                {
                    "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
                    "status": "Passed"
                },
                {
                    "test": "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
                    "status": "Passed"
                },
                {
                    "test": "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/623",
        "specification": "Write a function to compute the n-th power of each number in a list.",
        "generated_code": "def nth_nums(nums, n):\n    return [num ** n for num in nums]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/623",
            "tests": [
                {
                    "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
                    "status": "Passed"
                },
                {
                    "test": "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])",
                    "status": "Passed"
                },
                {
                    "test": "assert nth_nums([12,15],5)==([248832, 759375])",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/589",
        "specification": "Write a function to find perfect squares between two given numbers.",
        "generated_code": "def perfect_squares(start, end):\n    return [i**2 for i in range(1, int(end**0.5) + 1) if start <= i**2 <= end]\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/589",
            "tests": [
                {
                    "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
                    "status": "Passed"
                },
                {
                    "test": "assert perfect_squares(50,100)==[64, 81, 100]",
                    "status": "Passed"
                },
                {
                    "test": "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    },
    {
        "task_id": "Mbpp/397",
        "specification": "Write a function to find the median of three numbers.",
        "generated_code": "def median_numbers(a, b, c):\n    return float(sorted([a, b, c])[1])\n",
        "pass_rate": 1.0,
        "test_results": {
            "task_id": "Mbpp/397",
            "tests": [
                {
                    "test": "assert median_numbers(25,55,65)==55.0",
                    "status": "Passed"
                },
                {
                    "test": "assert median_numbers(20,10,30)==20.0",
                    "status": "Passed"
                },
                {
                    "test": "assert median_numbers(15,45,75)==45.0",
                    "status": "Passed"
                }
            ],
            "errors": []
        }
    }
]