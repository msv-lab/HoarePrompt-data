[
    {
        "task_id": "0178",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "A telephone number is a sequence of exactly $11$ digits such that its first digit is 8.\n\nVasya and Petya are playing a game. Initially they have a string $s$ of length $n$ ($n$ is odd) consisting of digits. Vasya makes the first move, then players alternate turns. In one move the player must choose a character and erase it from the current string. For example, if the current string 1121, after the player's move it may be 112, 111 or 121. The game ends when the length of string $s$ becomes 11. If the resulting string is a telephone number, Vasya wins, otherwise Petya wins.\n\nYou have to determine if Vasya has a winning strategy (that is, if Vasya can win the game no matter which characters Petya chooses during his moves).\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($13 \\le n < 10^5$, $n$ is odd) — the length of string $s$.\n\nThe second line contains the string $s$ ($|s| = n$) consisting only of decimal digits.\n\n\n-----Output-----\n\nIf Vasya has a strategy that guarantees him victory, print YES.\n\nOtherwise print NO.\n\n\n-----Examples-----\nInput\n13\n8380011223344\n\nOutput\nYES\n\nInput\n15\n807345619350641\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example Vasya needs to erase the second character. Then Petya cannot erase a character from the remaining string 880011223344 so that it does not become a telephone number.\n\nIn the second example after Vasya's turn Petya can erase one character character 8. The resulting string can't be a telephone number, because there is no digit 8 at all.",
        "generated_code": "n = int(input())\ns = input()\n\ndef can_win(s):\n    if len(s) < 11:\n        return False\n    if s[0] != '8':\n        return False\n    return True\n\ndef has_winning_strategy(s):\n    if can_win(s):\n        return True\n    for i in range(len(s)):\n        if has_winning_strategy(s[:i] + s[i+1:]):\n            return False\n    return True\n\nif has_winning_strategy(s):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
        "counter_example": {
            "input": "15\n807345619350641\n",
            "expected": "NO\n",
            "got": "YES"
        }
    },
    {
        "task_id": "0178",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "A telephone number is a sequence of exactly $11$ digits such that its first digit is 8.\n\nVasya and Petya are playing a game. Initially they have a string $s$ of length $n$ ($n$ is odd) consisting of digits. Vasya makes the first move, then players alternate turns. In one move the player must choose a character and erase it from the current string. For example, if the current string 1121, after the player's move it may be 112, 111 or 121. The game ends when the length of string $s$ becomes 11. If the resulting string is a telephone number, Vasya wins, otherwise Petya wins.\n\nYou have to determine if Vasya has a winning strategy (that is, if Vasya can win the game no matter which characters Petya chooses during his moves).\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($13 \\le n < 10^5$, $n$ is odd) — the length of string $s$.\n\nThe second line contains the string $s$ ($|s| = n$) consisting only of decimal digits.\n\n\n-----Output-----\n\nIf Vasya has a strategy that guarantees him victory, print YES.\n\nOtherwise print NO.\n\n\n-----Examples-----\nInput\n13\n8380011223344\n\nOutput\nYES\n\nInput\n15\n807345619350641\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example Vasya needs to erase the second character. Then Petya cannot erase a character from the remaining string 880011223344 so that it does not become a telephone number.\n\nIn the second example after Vasya's turn Petya can erase one character character 8. The resulting string can't be a telephone number, because there is no digit 8 at all.",
        "generated_code": "# Read the length of the string\nn = int(input().strip())\n\n# Read the string itself\ns = input().strip()\n\n# Determine the number of moves each player will make\nmoves = (n - 11) // 2\n\n# Count the number of occurrences of '8' in the first (n - 11) characters\ncount_8 = s[:n-11].count('8')\n\n# Vasya wins if there are more '8's than the number of non-'8' characters Petya can remove\nif count_8 > moves:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
        "counter_example": {
            "input": "13\n8380011223344\n",
            "expected": "YES\n",
            "got": "NO"
        }
    },
    {
        "task_id": "0135",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Imp is watching a documentary about cave painting. [Image] \n\nSome numbers, carved in chaotic order, immediately attracted his attention. Imp rapidly proposed a guess that they are the remainders of division of a number n by all integers i from 1 to k. Unfortunately, there are too many integers to analyze for Imp.\n\nImp wants you to check whether all these remainders are distinct. Formally, he wants to check, if all $n \\text{mod} i$, 1 ≤ i ≤ k, are distinct, i. e. there is no such pair (i, j) that:   1 ≤ i < j ≤ k,  $n \\operatorname{mod} i = n \\operatorname{mod} j$, where $x \\operatorname{mod} y$ is the remainder of division x by y. \n\n\n-----Input-----\n\nThe only line contains two integers n, k (1 ≤ n, k ≤ 10^18).\n\n\n-----Output-----\n\nPrint \"Yes\", if all the remainders are distinct, and \"No\" otherwise.\n\nYou can print each letter in arbitrary case (lower or upper).\n\n\n-----Examples-----\nInput\n4 4\n\nOutput\nNo\n\nInput\n5 3\n\nOutput\nYes\n\n\n\n-----Note-----\n\nIn the first sample remainders modulo 1 and 4 coincide.",
        "generated_code": "n, k = map(int, input().split())\nseen = set()\nfor i in range(1, k+1):\n    remainder = n % i\n    if remainder in seen:\n        print(\"No\")\n        exit()\n    seen.add(remainder)\nprint(\"Yes\")\n",
        "counter_example": null
    },
    {
        "task_id": "0135",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Imp is watching a documentary about cave painting. [Image] \n\nSome numbers, carved in chaotic order, immediately attracted his attention. Imp rapidly proposed a guess that they are the remainders of division of a number n by all integers i from 1 to k. Unfortunately, there are too many integers to analyze for Imp.\n\nImp wants you to check whether all these remainders are distinct. Formally, he wants to check, if all $n \\text{mod} i$, 1 ≤ i ≤ k, are distinct, i. e. there is no such pair (i, j) that:   1 ≤ i < j ≤ k,  $n \\operatorname{mod} i = n \\operatorname{mod} j$, where $x \\operatorname{mod} y$ is the remainder of division x by y. \n\n\n-----Input-----\n\nThe only line contains two integers n, k (1 ≤ n, k ≤ 10^18).\n\n\n-----Output-----\n\nPrint \"Yes\", if all the remainders are distinct, and \"No\" otherwise.\n\nYou can print each letter in arbitrary case (lower or upper).\n\n\n-----Examples-----\nInput\n4 4\n\nOutput\nNo\n\nInput\n5 3\n\nOutput\nYes\n\n\n\n-----Note-----\n\nIn the first sample remainders modulo 1 and 4 coincide.",
        "generated_code": "n, k = map(int, input().split())\n\ndef are_remainders_distinct(n, k):\n    # For k >= n, there will always be non-distinct remainders\n    if k >= n:\n        return \"No\"\n    \n    # For k < n, we'll check for remainders\n    seen_remainders = set()\n    for i in range(1, k + 1):\n        remainder = n % i\n        if remainder in seen_remainders:\n            return \"No\"\n        seen_remainders.add(remainder)\n    \n    return \"Yes\"\n\nprint(are_remainders_distinct(n, k))\n",
        "counter_example": {
            "input": "1 1\n",
            "expected": "Yes\n",
            "got": "No"
        }
    },
    {
        "task_id": "0007",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Anton likes to listen to fairy tales, especially when Danik, Anton's best friend, tells them. Right now Danik tells Anton a fairy tale:\n\n\"Once upon a time, there lived an emperor. He was very rich and had much grain. One day he ordered to build a huge barn to put there all his grain. Best builders were building that barn for three days and three nights. But they overlooked and there remained a little hole in the barn, from which every day sparrows came through. Here flew a sparrow, took a grain and flew away...\"\n\nMore formally, the following takes place in the fairy tale. At the beginning of the first day the barn with the capacity of n grains was full. Then, every day (starting with the first day) the following happens:  m grains are brought to the barn. If m grains doesn't fit to the barn, the barn becomes full and the grains that doesn't fit are brought back (in this problem we can assume that the grains that doesn't fit to the barn are not taken into account).  Sparrows come and eat grain. In the i-th day i sparrows come, that is on the first day one sparrow come, on the second day two sparrows come and so on. Every sparrow eats one grain. If the barn is empty, a sparrow eats nothing. \n\nAnton is tired of listening how Danik describes every sparrow that eats grain from the barn. Anton doesn't know when the fairy tale ends, so he asked you to determine, by the end of which day the barn will become empty for the first time. Help Anton and write a program that will determine the number of that day!\n\n\n-----Input-----\n\nThe only line of the input contains two integers n and m (1 ≤ n, m ≤ 10^18) — the capacity of the barn and the number of grains that are brought every day.\n\n\n-----Output-----\n\nOutput one integer — the number of the day when the barn will become empty for the first time. Days are numbered starting with one.\n\n\n-----Examples-----\nInput\n5 2\n\nOutput\n4\n\nInput\n8 1\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first sample the capacity of the barn is five grains and two grains are brought every day. The following happens:  At the beginning of the first day grain is brought to the barn. It's full, so nothing happens.  At the end of the first day one sparrow comes and eats one grain, so 5 - 1 = 4 grains remain.  At the beginning of the second day two grains are brought. The barn becomes full and one grain doesn't fit to it.  At the end of the second day two sparrows come. 5 - 2 = 3 grains remain.  At the beginning of the third day two grains are brought. The barn becomes full again.  At the end of the third day three sparrows come and eat grain. 5 - 3 = 2 grains remain.  At the beginning of the fourth day grain is brought again. 2 + 2 = 4 grains remain.  At the end of the fourth day four sparrows come and eat grain. 4 - 4 = 0 grains remain. The barn is empty. \n\nSo the answer is 4, because by the end of the fourth day the barn becomes empty.",
        "generated_code": "n, m = map(int, input().split())\n\nday = 1\ngrains = n\nwhile grains > 0:\n    grains += m\n    if grains > n:\n        grains = n\n    grains -= day\n    day += 1\n\nprint(day - 1)\n",
        "counter_example": {
            "input": "996478063 658866858\n",
            "expected": "658892843\n",
            "got": "TimeoutError: Execution exceeded time limit"
        }
    },
    {
        "task_id": "0007",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Anton likes to listen to fairy tales, especially when Danik, Anton's best friend, tells them. Right now Danik tells Anton a fairy tale:\n\n\"Once upon a time, there lived an emperor. He was very rich and had much grain. One day he ordered to build a huge barn to put there all his grain. Best builders were building that barn for three days and three nights. But they overlooked and there remained a little hole in the barn, from which every day sparrows came through. Here flew a sparrow, took a grain and flew away...\"\n\nMore formally, the following takes place in the fairy tale. At the beginning of the first day the barn with the capacity of n grains was full. Then, every day (starting with the first day) the following happens:  m grains are brought to the barn. If m grains doesn't fit to the barn, the barn becomes full and the grains that doesn't fit are brought back (in this problem we can assume that the grains that doesn't fit to the barn are not taken into account).  Sparrows come and eat grain. In the i-th day i sparrows come, that is on the first day one sparrow come, on the second day two sparrows come and so on. Every sparrow eats one grain. If the barn is empty, a sparrow eats nothing. \n\nAnton is tired of listening how Danik describes every sparrow that eats grain from the barn. Anton doesn't know when the fairy tale ends, so he asked you to determine, by the end of which day the barn will become empty for the first time. Help Anton and write a program that will determine the number of that day!\n\n\n-----Input-----\n\nThe only line of the input contains two integers n and m (1 ≤ n, m ≤ 10^18) — the capacity of the barn and the number of grains that are brought every day.\n\n\n-----Output-----\n\nOutput one integer — the number of the day when the barn will become empty for the first time. Days are numbered starting with one.\n\n\n-----Examples-----\nInput\n5 2\n\nOutput\n4\n\nInput\n8 1\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first sample the capacity of the barn is five grains and two grains are brought every day. The following happens:  At the beginning of the first day grain is brought to the barn. It's full, so nothing happens.  At the end of the first day one sparrow comes and eats one grain, so 5 - 1 = 4 grains remain.  At the beginning of the second day two grains are brought. The barn becomes full and one grain doesn't fit to it.  At the end of the second day two sparrows come. 5 - 2 = 3 grains remain.  At the beginning of the third day two grains are brought. The barn becomes full again.  At the end of the third day three sparrows come and eat grain. 5 - 3 = 2 grains remain.  At the beginning of the fourth day grain is brought again. 2 + 2 = 4 grains remain.  At the end of the fourth day four sparrows come and eat grain. 4 - 4 = 0 grains remain. The barn is empty. \n\nSo the answer is 4, because by the end of the fourth day the barn becomes empty.",
        "generated_code": "n, m = map(int, input().split())\n\n# Initialize the current number of grains in the barn\ncurrent_grains = n\n\n# Initialize the day counter\nday = 0\n\n# Loop until the barn becomes empty\nwhile current_grains > 0:\n    day += 1\n    # Add m grains to the barn\n    current_grains = min(n, current_grains + m)\n    # Sparrows eat the grains\n    current_grains -= day\n\n# Output the day when the barn becomes empty\nprint(day)\n",
        "counter_example": {
            "input": "996478063 658866858\n",
            "expected": "658892843\n",
            "got": "TimeoutError: Execution exceeded time limit"
        }
    },
    {
        "task_id": "0132",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Students Vasya and Petya are studying at the BSU (Byteland State University). At one of the breaks they decided to order a pizza. In this problem pizza is a circle of some radius. The pizza was delivered already cut into n pieces. The i-th piece is a sector of angle equal to a_{i}. Vasya and Petya want to divide all pieces of pizza into two continuous sectors in such way that the difference between angles of these sectors is minimal. Sector angle is sum of angles of all pieces in it. Pay attention, that one of sectors can be empty.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 ≤ n ≤ 360)  — the number of pieces into which the delivered pizza was cut.\n\nThe second line contains n integers a_{i} (1 ≤ a_{i} ≤ 360)  — the angles of the sectors into which the pizza was cut. The sum of all a_{i} is 360.\n\n\n-----Output-----\n\nPrint one integer  — the minimal difference between angles of sectors that will go to Vasya and Petya.\n\n\n-----Examples-----\nInput\n4\n90 90 90 90\n\nOutput\n0\n\nInput\n3\n100 100 160\n\nOutput\n40\n\nInput\n1\n360\n\nOutput\n360\n\nInput\n4\n170 30 150 10\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn first sample Vasya can take 1 and 2 pieces, Petya can take 3 and 4 pieces. Then the answer is |(90 + 90) - (90 + 90)| = 0.\n\nIn third sample there is only one piece of pizza that can be taken by only one from Vasya and Petya. So the answer is |360 - 0| = 360.\n\nIn fourth sample Vasya can take 1 and 4 pieces, then Petya will take 2 and 3 pieces. So the answer is |(170 + 10) - (30 + 150)| = 0.\n\nPicture explaning fourth sample:\n\n[Image]\n\nBoth red and green sectors consist of two adjacent pieces of pizza. So Vasya can take green sector, then Petya will take red sector.",
        "generated_code": "n = int(input())\na = list(map(int, input().split()))\na.sort()\nans = 360\ntot = 0\nfor i in range(n):\n    tot += a[i]\n    ans = min(ans, abs(tot - (360 - tot)))\nprint(ans)\n",
        "counter_example": {
            "input": "4\n170 30 150 10\n",
            "expected": "0\n",
            "got": "20"
        }
    },
    {
        "task_id": "0132",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Students Vasya and Petya are studying at the BSU (Byteland State University). At one of the breaks they decided to order a pizza. In this problem pizza is a circle of some radius. The pizza was delivered already cut into n pieces. The i-th piece is a sector of angle equal to a_{i}. Vasya and Petya want to divide all pieces of pizza into two continuous sectors in such way that the difference between angles of these sectors is minimal. Sector angle is sum of angles of all pieces in it. Pay attention, that one of sectors can be empty.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 ≤ n ≤ 360)  — the number of pieces into which the delivered pizza was cut.\n\nThe second line contains n integers a_{i} (1 ≤ a_{i} ≤ 360)  — the angles of the sectors into which the pizza was cut. The sum of all a_{i} is 360.\n\n\n-----Output-----\n\nPrint one integer  — the minimal difference between angles of sectors that will go to Vasya and Petya.\n\n\n-----Examples-----\nInput\n4\n90 90 90 90\n\nOutput\n0\n\nInput\n3\n100 100 160\n\nOutput\n40\n\nInput\n1\n360\n\nOutput\n360\n\nInput\n4\n170 30 150 10\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn first sample Vasya can take 1 and 2 pieces, Petya can take 3 and 4 pieces. Then the answer is |(90 + 90) - (90 + 90)| = 0.\n\nIn third sample there is only one piece of pizza that can be taken by only one from Vasya and Petya. So the answer is |360 - 0| = 360.\n\nIn fourth sample Vasya can take 1 and 4 pieces, then Petya will take 2 and 3 pieces. So the answer is |(170 + 10) - (30 + 150)| = 0.\n\nPicture explaning fourth sample:\n\n[Image]\n\nBoth red and green sectors consist of two adjacent pieces of pizza. So Vasya can take green sector, then Petya will take red sector.",
        "generated_code": "# Use Standard Input format\n\n# Read input\nn = int(input())\nangles = list(map(int, input().split()))\n\n# Calculate the total sum of the angles\ntotal_sum = sum(angles)\n\n# Initialize variables to find the minimum difference\nmin_diff = float('inf')\n\n# Iterate over all possible starting points for the first sector\nfor i in range(n):\n    current_sum = 0\n    for j in range(n):\n        current_sum += angles[(i + j) % n]\n        # Calculate the difference between the two sectors\n        diff = abs(total_sum - 2 * current_sum)\n        # Update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\nprint(min_diff)\n",
        "counter_example": null
    },
    {
        "task_id": "0017",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Arpa is researching the Mexican wave.\n\nThere are n spectators in the stadium, labeled from 1 to n. They start the Mexican wave at time 0. \n\n  At time 1, the first spectator stands.  At time 2, the second spectator stands.  ...  At time k, the k-th spectator stands.  At time k + 1, the (k + 1)-th spectator stands and the first spectator sits.  At time k + 2, the (k + 2)-th spectator stands and the second spectator sits.  ...  At time n, the n-th spectator stands and the (n - k)-th spectator sits.  At time n + 1, the (n + 1 - k)-th spectator sits.  ...  At time n + k, the n-th spectator sits. \n\nArpa wants to know how many spectators are standing at time t.\n\n\n-----Input-----\n\nThe first line contains three integers n, k, t (1 ≤ n ≤ 10^9, 1 ≤ k ≤ n, 1 ≤ t < n + k).\n\n\n-----Output-----\n\nPrint single integer: how many spectators are standing at time t.\n\n\n-----Examples-----\nInput\n10 5 3\n\nOutput\n3\n\nInput\n10 5 7\n\nOutput\n5\n\nInput\n10 5 12\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the following a sitting spectator is represented as -, a standing spectator is represented as ^.\n\n  At t = 0  ---------- $\\Rightarrow$ number of standing spectators = 0.  At t = 1  ^--------- $\\Rightarrow$ number of standing spectators = 1.  At t = 2  ^^-------- $\\Rightarrow$ number of standing spectators = 2.  At t = 3  ^^^------- $\\Rightarrow$ number of standing spectators = 3.  At t = 4  ^^^^------ $\\Rightarrow$ number of standing spectators = 4.  At t = 5  ^^^^^----- $\\Rightarrow$ number of standing spectators = 5.  At t = 6  -^^^^^---- $\\Rightarrow$ number of standing spectators = 5.  At t = 7  --^^^^^--- $\\Rightarrow$ number of standing spectators = 5.  At t = 8  ---^^^^^-- $\\Rightarrow$ number of standing spectators = 5.  At t = 9  ----^^^^^- $\\Rightarrow$ number of standing spectators = 5.  At t = 10 -----^^^^^ $\\Rightarrow$ number of standing spectators = 5.  At t = 11 ------^^^^ $\\Rightarrow$ number of standing spectators = 4.  At t = 12 -------^^^ $\\Rightarrow$ number of standing spectators = 3.  At t = 13 --------^^ $\\Rightarrow$ number of standing spectators = 2.  At t = 14 ---------^ $\\Rightarrow$ number of standing spectators = 1.  At t = 15 ---------- $\\Rightarrow$ number of standing spectators = 0.",
        "generated_code": "n, k, t = map(int, input().split())\nprint(min(t, k) if t <= n else k - (t - n) % k)\n",
        "counter_example": null
    },
    {
        "task_id": "0017",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Arpa is researching the Mexican wave.\n\nThere are n spectators in the stadium, labeled from 1 to n. They start the Mexican wave at time 0. \n\n  At time 1, the first spectator stands.  At time 2, the second spectator stands.  ...  At time k, the k-th spectator stands.  At time k + 1, the (k + 1)-th spectator stands and the first spectator sits.  At time k + 2, the (k + 2)-th spectator stands and the second spectator sits.  ...  At time n, the n-th spectator stands and the (n - k)-th spectator sits.  At time n + 1, the (n + 1 - k)-th spectator sits.  ...  At time n + k, the n-th spectator sits. \n\nArpa wants to know how many spectators are standing at time t.\n\n\n-----Input-----\n\nThe first line contains three integers n, k, t (1 ≤ n ≤ 10^9, 1 ≤ k ≤ n, 1 ≤ t < n + k).\n\n\n-----Output-----\n\nPrint single integer: how many spectators are standing at time t.\n\n\n-----Examples-----\nInput\n10 5 3\n\nOutput\n3\n\nInput\n10 5 7\n\nOutput\n5\n\nInput\n10 5 12\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the following a sitting spectator is represented as -, a standing spectator is represented as ^.\n\n  At t = 0  ---------- $\\Rightarrow$ number of standing spectators = 0.  At t = 1  ^--------- $\\Rightarrow$ number of standing spectators = 1.  At t = 2  ^^-------- $\\Rightarrow$ number of standing spectators = 2.  At t = 3  ^^^------- $\\Rightarrow$ number of standing spectators = 3.  At t = 4  ^^^^------ $\\Rightarrow$ number of standing spectators = 4.  At t = 5  ^^^^^----- $\\Rightarrow$ number of standing spectators = 5.  At t = 6  -^^^^^---- $\\Rightarrow$ number of standing spectators = 5.  At t = 7  --^^^^^--- $\\Rightarrow$ number of standing spectators = 5.  At t = 8  ---^^^^^-- $\\Rightarrow$ number of standing spectators = 5.  At t = 9  ----^^^^^- $\\Rightarrow$ number of standing spectators = 5.  At t = 10 -----^^^^^ $\\Rightarrow$ number of standing spectators = 5.  At t = 11 ------^^^^ $\\Rightarrow$ number of standing spectators = 4.  At t = 12 -------^^^ $\\Rightarrow$ number of standing spectators = 3.  At t = 13 --------^^ $\\Rightarrow$ number of standing spectators = 2.  At t = 14 ---------^ $\\Rightarrow$ number of standing spectators = 1.  At t = 15 ---------- $\\Rightarrow$ number of standing spectators = 0.",
        "generated_code": "n, k, t = map(int, input().split())\n\n# Determine the number of spectators standing at time t\nif t <= k:\n    print(t)\nelif t <= n:\n    print(k)\nelse:\n    print(n + k - t)\n",
        "counter_example": null
    }
]