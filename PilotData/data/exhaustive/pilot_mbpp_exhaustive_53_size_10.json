[
    {
        "task_id": "Mbpp/581",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to find the surface area of a square pyramid with a given base edge and height.",
        "generated_code": "import math\ndef surface_Area(edge, height):\n    base_area = edge ** 2\n    side_area = 2 * edge * math.sqrt((edge / 2) ** 2 + height ** 2)\n    return base_area + side_area\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                3,
                4
            ],
            "expected": 33,
            "got": 34.63201123595259
        }
    },
    {
        "task_id": "Mbpp/581",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to find the surface area of a square pyramid with a given base edge and height.",
        "generated_code": "import math\n\ndef surface_Area(base_edge, height):\n    # Calculate base area\n    base_area = base_edge * base_edge\n    \n    # Calculate slant height\n    slant_height = math.sqrt((base_edge / 2)**2 + height**2)\n    \n    # Calculate area of one triangular face\n    triangle_area = 0.5 * base_edge * slant_height\n    \n    # Calculate lateral area\n    lateral_area = 4 * triangle_area\n    \n    # Total surface area\n    total_surface_area = base_area + lateral_area\n    \n    return round(total_surface_area)\n\n# Tests\nassert surface_Area(3, 4) == 33\nassert surface_Area(4, 5) == 56\nassert surface_Area(1, 2) == 5\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                3,
                4
            ],
            "expected": 33,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/394",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to check if given tuple contains no duplicates.",
        "generated_code": "def check_distinct(tup):\n    return len(tup) == len(set(tup))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/394",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to check if given tuple contains no duplicates.",
        "generated_code": "def check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))\n\n# Testing the function with the provided test cases\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/56",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to check if a given number is one less than twice its reverse.",
        "generated_code": "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n + 1 == 2 * reversed_n\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/56",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to check if a given number is one less than twice its reverse.",
        "generated_code": "def check(n):\n    # Convert the number to a string to reverse its digits\n    reversed_n = int(str(n)[::-1])\n    # Check if the number is one less than twice its reverse\n    return n == 2 * reversed_n - 1\n\n# Provided tests\nassert check(70) == False\nassert check(23) == False\nassert check(73) == True\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/18",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to remove characters from the first string which are present in the second string.",
        "generated_code": "def remove_dirty_chars(s1, s2):\n    for char in s2:\n        s1 = s1.replace(char, '')\n    return s1\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/18",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to remove characters from the first string which are present in the second string.",
        "generated_code": "def remove_dirty_chars(first_str, second_str):\n    # Create a set of characters from the second string for quick lookup\n    dirty_set = set(second_str)\n    \n    # Use a list comprehension to filter out the characters\n    result = ''.join([char for char in first_str if char not in dirty_set])\n    \n    return result\n\n# Tests\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/451",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to remove all whitespaces from the given string.",
        "generated_code": "def remove_whitespaces(s: str) -> str:\n  return s.replace(\" \", \"\")\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/451",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to remove all whitespaces from the given string.",
        "generated_code": "def remove_whitespaces(s: str) -> str:\n    return ''.join(s.split())\n\n# Test cases to ensure the function works as expected\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "\n\t"
            ],
            "expected": "\n\t",
            "got": ""
        }
    }
]