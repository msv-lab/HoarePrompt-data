[
    {
        "task_id": "0160",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "We have a sequence of N integers: A_1, A_2, \\cdots, A_N.\nYou can perform the following operation between 0 and K times (inclusive):\n - Choose two integers i and j such that i \\neq j, each between 1 and N (inclusive). Add 1 to A_i and -1 to A_j, possibly producing a negative element.\nCompute the maximum possible positive integer that divides every element of A after the operations. Here a positive integer x divides an integer y if and only if there exists an integer z such that y = xz.\n\n-----Constraints-----\n - 2 \\leq N \\leq 500\n - 1 \\leq A_i \\leq 10^6\n - 0 \\leq K \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 \\cdots A_{N-1} A_{N}\n\n-----Output-----\nPrint the maximum possible positive integer that divides every element of A after the operations.\n\n-----Sample Input-----\n2 3\n8 20\n\n-----Sample Output-----\n7\n\n7 will divide every element of A if, for example, we perform the following operation:\n - Choose i = 2, j = 1. A becomes (7, 21).\nWe cannot reach the situation where 8 or greater integer divides every element of A.",
        "generated_code": "import math\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n\ngcd = A[0]\nfor i in range(1, N):\n    gcd = math.gcd(gcd, A[i])\n\nmax_divisor = gcd\nfor i in range(1, int(math.sqrt(gcd)) + 1):\n    if gcd % i == 0:\n        max_divisor = max(max_divisor, i)\n        if i * i != gcd:\n            max_divisor = max(max_divisor, gcd // i)\n\nprint(max_divisor)\n",
        "counter_example": {
            "input": "2 3\n8 20\n",
            "expected": "7\n",
            "got": "4"
        }
    },
    {
        "task_id": "0160",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "We have a sequence of N integers: A_1, A_2, \\cdots, A_N.\nYou can perform the following operation between 0 and K times (inclusive):\n - Choose two integers i and j such that i \\neq j, each between 1 and N (inclusive). Add 1 to A_i and -1 to A_j, possibly producing a negative element.\nCompute the maximum possible positive integer that divides every element of A after the operations. Here a positive integer x divides an integer y if and only if there exists an integer z such that y = xz.\n\n-----Constraints-----\n - 2 \\leq N \\leq 500\n - 1 \\leq A_i \\leq 10^6\n - 0 \\leq K \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 \\cdots A_{N-1} A_{N}\n\n-----Output-----\nPrint the maximum possible positive integer that divides every element of A after the operations.\n\n-----Sample Input-----\n2 3\n8 20\n\n-----Sample Output-----\n7\n\n7 will divide every element of A if, for example, we perform the following operation:\n - Choose i = 2, j = 1. A becomes (7, 21).\nWe cannot reach the situation where 8 or greater integer divides every element of A.",
        "generated_code": "import math\n\n# Read input values\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n\n# Calculate the sum of the array\nsum_A = sum(A)\n\n# Function to compute the greatest common divisor (GCD) of a list\ndef gcd_of_list(lst):\n    gcd_result = lst[0]\n    for num in lst[1:]:\n        gcd_result = math.gcd(gcd_result, num)\n    return gcd_result\n\n# Function to find all divisors of a number\ndef find_divisors(x):\n    divisors = set()\n    for i in range(1, int(math.sqrt(x)) + 1):\n        if x % i == 0:\n            divisors.add(i)\n            divisors.add(x // i)\n    return sorted(divisors, reverse=True)\n\n# Find the GCD of the array\ngcd_A = gcd_of_list(A)\n\n# Find all divisors of sum_A\ndivisors = find_divisors(sum_A)\n\n# Find the maximum divisor that divides all elements of A\nfor d in divisors:\n    if all((a % d == 0) or ((sum_A - a) % d <= K) for a in A):\n        print(d)\n        break\n",
        "counter_example": {
            "input": "2 3\n8 20\n",
            "expected": "7\n",
            "got": "4"
        }
    },
    {
        "task_id": "0078",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "The only difference between easy and hard versions is constraints.\n\nPolycarp loves to listen to music, so he never leaves the player, even on the way home from the university. Polycarp overcomes the distance from the university to the house in exactly $T$ minutes.\n\nIn the player, Polycarp stores $n$ songs, each of which is characterized by two parameters: $t_i$ and $g_i$, where $t_i$ is the length of the song in minutes ($1 \\le t_i \\le 15$), $g_i$ is its genre ($1 \\le g_i \\le 3$).\n\nPolycarp wants to create such a playlist so that he can listen to music all the time on the way from the university to his home, and at the time of his arrival home, the playlist is over. Polycarp never interrupts songs and always listens to them from beginning to end. Thus, if he started listening to the $i$-th song, he would spend exactly $t_i$ minutes on its listening. Polycarp also does not like when two songs of the same genre play in a row (i.e. successively/adjacently) or when the songs in his playlist are repeated.\n\nHelp Polycarpus count the number of different sequences of songs (their order matters), the total duration is exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $T$ ($1 \\le n \\le 15, 1 \\le T \\le 225$) — the number of songs in the player and the required total duration, respectively.\n\nNext, the $n$ lines contain descriptions of songs: the $i$-th line contains two integers $t_i$ and $g_i$ ($1 \\le t_i \\le 15, 1 \\le g_i \\le 3$) — the duration of the $i$-th song and its genre, respectively.\n\n\n-----Output-----\n\nOutput one integer — the number of different sequences of songs, the total length of exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different. Since the answer may be huge, output it modulo $10^9 + 7$ (that is, the remainder when dividing the quantity by $10^9 + 7$).\n\n\n-----Examples-----\nInput\n3 3\n1 1\n1 2\n1 3\n\nOutput\n6\n\nInput\n3 3\n1 1\n1 1\n1 3\n\nOutput\n2\n\nInput\n4 10\n5 3\n2 1\n3 2\n5 1\n\nOutput\n10\n\n\n\n-----Note-----\n\nIn the first example, Polycarp can make any of the $6$ possible playlist by rearranging the available songs: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$ and $[3, 2, 1]$ (indices of the songs are given).\n\nIn the second example, the first and second songs cannot go in succession (since they have the same genre). Thus, Polycarp can create a playlist in one of $2$ possible ways: $[1, 3, 2]$ and $[2, 3, 1]$ (indices of the songs are given).\n\nIn the third example, Polycarp can make the following playlists: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$, $[3, 2, 1]$, $[1, 4]$, $[4, 1]$, $[2, 3, 4]$ and $[4, 3, 2]$ (indices of the songs are given).",
        "generated_code": "n, T = map(int, input().split())\nsongs = []\nfor _ in range(n):\n    t, g = map(int, input().split())\n    songs.append((t, g))\n\ndp = [[[0]*4 for _ in range(16)] for _ in range(T+1)]\ndp[0][0][0] = 1\n\nfor t, g in songs:\n    for i in range(T, t-1, -1):\n        for j in range(15, -1, -1):\n            for k in range(3, -1, -1):\n                if k != g:\n                    dp[i][j+1][g] += dp[i-t][j][k]\n                    dp[i][j+1][g] %= 10**9 + 7\n\nprint(dp[T][n][0])\n",
        "counter_example": {
            "input": "3 3\n1 1\n1 2\n1 3\n",
            "expected": "6\n",
            "got": "Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\nIndexError: list index out of range"
        }
    },
    {
        "task_id": "0078",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "The only difference between easy and hard versions is constraints.\n\nPolycarp loves to listen to music, so he never leaves the player, even on the way home from the university. Polycarp overcomes the distance from the university to the house in exactly $T$ minutes.\n\nIn the player, Polycarp stores $n$ songs, each of which is characterized by two parameters: $t_i$ and $g_i$, where $t_i$ is the length of the song in minutes ($1 \\le t_i \\le 15$), $g_i$ is its genre ($1 \\le g_i \\le 3$).\n\nPolycarp wants to create such a playlist so that he can listen to music all the time on the way from the university to his home, and at the time of his arrival home, the playlist is over. Polycarp never interrupts songs and always listens to them from beginning to end. Thus, if he started listening to the $i$-th song, he would spend exactly $t_i$ minutes on its listening. Polycarp also does not like when two songs of the same genre play in a row (i.e. successively/adjacently) or when the songs in his playlist are repeated.\n\nHelp Polycarpus count the number of different sequences of songs (their order matters), the total duration is exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $T$ ($1 \\le n \\le 15, 1 \\le T \\le 225$) — the number of songs in the player and the required total duration, respectively.\n\nNext, the $n$ lines contain descriptions of songs: the $i$-th line contains two integers $t_i$ and $g_i$ ($1 \\le t_i \\le 15, 1 \\le g_i \\le 3$) — the duration of the $i$-th song and its genre, respectively.\n\n\n-----Output-----\n\nOutput one integer — the number of different sequences of songs, the total length of exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different. Since the answer may be huge, output it modulo $10^9 + 7$ (that is, the remainder when dividing the quantity by $10^9 + 7$).\n\n\n-----Examples-----\nInput\n3 3\n1 1\n1 2\n1 3\n\nOutput\n6\n\nInput\n3 3\n1 1\n1 1\n1 3\n\nOutput\n2\n\nInput\n4 10\n5 3\n2 1\n3 2\n5 1\n\nOutput\n10\n\n\n\n-----Note-----\n\nIn the first example, Polycarp can make any of the $6$ possible playlist by rearranging the available songs: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$ and $[3, 2, 1]$ (indices of the songs are given).\n\nIn the second example, the first and second songs cannot go in succession (since they have the same genre). Thus, Polycarp can create a playlist in one of $2$ possible ways: $[1, 3, 2]$ and $[2, 3, 1]$ (indices of the songs are given).\n\nIn the third example, Polycarp can make the following playlists: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$, $[3, 2, 1]$, $[1, 4]$, $[4, 1]$, $[2, 3, 4]$ and $[4, 3, 2]$ (indices of the songs are given).",
        "generated_code": "MOD = 10**9 + 7\n\ndef count_playlists(songs, n, T):\n    def backtrack(current_time, last_genre, used_songs):\n        if current_time == T:\n            return 1\n        if current_time > T:\n            return 0\n        \n        count = 0\n        for i in range(n):\n            t_i, g_i = songs[i]\n            if i not in used_songs and g_i != last_genre:\n                used_songs.add(i)\n                count = (count + backtrack(current_time + t_i, g_i, used_songs)) % MOD\n                used_songs.remove(i)\n        \n        return count\n    \n    return backtrack(0, -1, set())\n\n# Reading input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nT = int(data[1])\n\nsongs = []\nfor i in range(n):\n    t_i = int(data[2 + 2 * i])\n    g_i = int(data[3 + 2 * i])\n    songs.append((t_i, g_i))\n\n# Calculate the number of valid playlists\nresult = count_playlists(songs, n, T)\nprint(result)\n",
        "counter_example": {
            "input": "15 15\n1 1\n1 1\n1 1\n1 1\n1 1\n1 2\n1 2\n1 2\n1 2\n1 2\n1 3\n1 3\n1 3\n1 3\n1 3\n",
            "expected": "420863916\n",
            "got": "TimeoutError: Execution exceeded time limit"
        }
    },
    {
        "task_id": "0237",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "n hobbits are planning to spend the night at Frodo's house. Frodo has n beds standing in a row and m pillows (n ≤ m). Each hobbit needs a bed and at least one pillow to sleep, however, everyone wants as many pillows as possible. Of course, it's not always possible to share pillows equally, but any hobbit gets hurt if he has at least two pillows less than some of his neighbors have. \n\nFrodo will sleep on the k-th bed in the row. What is the maximum number of pillows he can have so that every hobbit has at least one pillow, every pillow is given to some hobbit and no one is hurt?\n\n\n-----Input-----\n\nThe only line contain three integers n, m and k (1 ≤ n ≤ m ≤ 10^9, 1 ≤ k ≤ n) — the number of hobbits, the number of pillows and the number of Frodo's bed.\n\n\n-----Output-----\n\nPrint single integer — the maximum number of pillows Frodo can have so that no one is hurt.\n\n\n-----Examples-----\nInput\n4 6 2\n\nOutput\n2\n\nInput\n3 10 3\n\nOutput\n4\n\nInput\n3 6 1\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example Frodo can have at most two pillows. In this case, he can give two pillows to the hobbit on the first bed, and one pillow to each of the hobbits on the third and the fourth beds.\n\nIn the second example Frodo can take at most four pillows, giving three pillows to each of the others.\n\nIn the third example Frodo can take three pillows, giving two pillows to the hobbit in the middle and one pillow to the hobbit on the third bed.",
        "generated_code": "n, m, k = map(int, input().split())\nif k == 1:\n    print(min(m // n, m - (n - 1)))\nelse:\n    print(min(m // n + 1, m - (n - k)))\n",
        "counter_example": {
            "input": "3 6 1\n",
            "expected": "3\n",
            "got": "2"
        }
    },
    {
        "task_id": "0237",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "n hobbits are planning to spend the night at Frodo's house. Frodo has n beds standing in a row and m pillows (n ≤ m). Each hobbit needs a bed and at least one pillow to sleep, however, everyone wants as many pillows as possible. Of course, it's not always possible to share pillows equally, but any hobbit gets hurt if he has at least two pillows less than some of his neighbors have. \n\nFrodo will sleep on the k-th bed in the row. What is the maximum number of pillows he can have so that every hobbit has at least one pillow, every pillow is given to some hobbit and no one is hurt?\n\n\n-----Input-----\n\nThe only line contain three integers n, m and k (1 ≤ n ≤ m ≤ 10^9, 1 ≤ k ≤ n) — the number of hobbits, the number of pillows and the number of Frodo's bed.\n\n\n-----Output-----\n\nPrint single integer — the maximum number of pillows Frodo can have so that no one is hurt.\n\n\n-----Examples-----\nInput\n4 6 2\n\nOutput\n2\n\nInput\n3 10 3\n\nOutput\n4\n\nInput\n3 6 1\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example Frodo can have at most two pillows. In this case, he can give two pillows to the hobbit on the first bed, and one pillow to each of the hobbits on the third and the fourth beds.\n\nIn the second example Frodo can take at most four pillows, giving three pillows to each of the others.\n\nIn the third example Frodo can take three pillows, giving two pillows to the hobbit in the middle and one pillow to the hobbit on the third bed.",
        "generated_code": "def max_pillows(n, m, k):\n    def can_distribute(x):\n        total_pillows = x\n        # Calculate the pillows needed on the left side of Frodo's bed\n        if k > 1:\n            left = min(k - 1, x - 1)\n            total_pillows += left * (left + 1) // 2\n            if x - 1 > left:\n                total_pillows += (k - 1 - left) * (x - left - 1)\n        # Calculate the pillows needed on the right side of Frodo's bed\n        if n - k > 0:\n            right = min(n - k, x - 1)\n            total_pillows += right * (right + 1) // 2\n            if x - 1 > right:\n                total_pillows += (n - k - right) * (x - right - 1)\n        return total_pillows <= m\n    \n    low, high = 1, m\n    while low < high:\n        mid = (low + high + 1) // 2\n        if can_distribute(mid):\n            low = mid\n        else:\n            high = mid - 1\n    return low\n\n# Reading input\nn, m, k = map(int, input().strip().split())\n\n# Output the result\nprint(max_pillows(n, m, k))\n",
        "counter_example": {
            "input": "3 10 3\n",
            "expected": "4\n",
            "got": "7"
        }
    },
    {
        "task_id": "0188",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Daenerys Targaryen has an army consisting of k groups of soldiers, the i-th group contains a_{i} soldiers. She wants to bring her army to the other side of the sea to get the Iron Throne. She has recently bought an airplane to carry her army through the sea. The airplane has n rows, each of them has 8 seats. We call two seats neighbor, if they are in the same row and in seats {1, 2}, {3, 4}, {4, 5}, {5, 6} or {7, 8}.\n\n [Image] A row in the airplane \n\nDaenerys Targaryen wants to place her army in the plane so that there are no two soldiers from different groups sitting on neighboring seats.\n\nYour task is to determine if there is a possible arranging of her army in the airplane such that the condition above is satisfied.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 ≤ n ≤ 10000, 1 ≤ k ≤ 100) — the number of rows and the number of groups of soldiers, respectively.\n\nThe second line contains k integers a_1, a_2, a_3, ..., a_{k} (1 ≤ a_{i} ≤ 10000), where a_{i} denotes the number of soldiers in the i-th group.\n\nIt is guaranteed that a_1 + a_2 + ... + a_{k} ≤ 8·n.\n\n\n-----Output-----\n\nIf we can place the soldiers in the airplane print \"YES\" (without quotes). Otherwise print \"NO\" (without quotes).\n\nYou can choose the case (lower or upper) for each letter arbitrary.\n\n\n-----Examples-----\nInput\n2 2\n5 8\n\nOutput\nYES\n\nInput\n1 2\n7 1\n\nOutput\nNO\n\nInput\n1 2\n4 4\n\nOutput\nYES\n\nInput\n1 4\n2 2 1 2\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first sample, Daenerys can place the soldiers like in the figure below:\n\n [Image] \n\nIn the second sample, there is no way to place the soldiers in the plane since the second group soldier will always have a seat neighboring to someone from the first group.\n\nIn the third example Daenerys can place the first group on seats (1, 2, 7, 8), and the second group an all the remaining seats.\n\nIn the fourth example she can place the first two groups on seats (1, 2) and (7, 8), the third group on seats (3), and the fourth group on seats (5, 6).",
        "generated_code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort(reverse=True)\n\nseat = [0] * 8\nfor i in range(8):\n    if i == 0 or i == 7:\n        seat[i] = 1\n    else:\n        seat[i] = 2\n\nans = \"YES\"\nfor i in range(k):\n    flag = False\n    for j in range(8):\n        if a[i] <= seat[j]:\n            seat[j] -= a[i]\n            flag = True\n            break\n    if not flag:\n        ans = \"NO\"\n        break\n\nprint(ans)\n",
        "counter_example": {
            "input": "2 2\n5 8\n",
            "expected": "YES\n",
            "got": "NO"
        }
    },
    {
        "task_id": "0188",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Daenerys Targaryen has an army consisting of k groups of soldiers, the i-th group contains a_{i} soldiers. She wants to bring her army to the other side of the sea to get the Iron Throne. She has recently bought an airplane to carry her army through the sea. The airplane has n rows, each of them has 8 seats. We call two seats neighbor, if they are in the same row and in seats {1, 2}, {3, 4}, {4, 5}, {5, 6} or {7, 8}.\n\n [Image] A row in the airplane \n\nDaenerys Targaryen wants to place her army in the plane so that there are no two soldiers from different groups sitting on neighboring seats.\n\nYour task is to determine if there is a possible arranging of her army in the airplane such that the condition above is satisfied.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 ≤ n ≤ 10000, 1 ≤ k ≤ 100) — the number of rows and the number of groups of soldiers, respectively.\n\nThe second line contains k integers a_1, a_2, a_3, ..., a_{k} (1 ≤ a_{i} ≤ 10000), where a_{i} denotes the number of soldiers in the i-th group.\n\nIt is guaranteed that a_1 + a_2 + ... + a_{k} ≤ 8·n.\n\n\n-----Output-----\n\nIf we can place the soldiers in the airplane print \"YES\" (without quotes). Otherwise print \"NO\" (without quotes).\n\nYou can choose the case (lower or upper) for each letter arbitrary.\n\n\n-----Examples-----\nInput\n2 2\n5 8\n\nOutput\nYES\n\nInput\n1 2\n7 1\n\nOutput\nNO\n\nInput\n1 2\n4 4\n\nOutput\nYES\n\nInput\n1 4\n2 2 1 2\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first sample, Daenerys can place the soldiers like in the figure below:\n\n [Image] \n\nIn the second sample, there is no way to place the soldiers in the plane since the second group soldier will always have a seat neighboring to someone from the first group.\n\nIn the third example Daenerys can place the first group on seats (1, 2, 7, 8), and the second group an all the remaining seats.\n\nIn the fourth example she can place the first two groups on seats (1, 2) and (7, 8), the third group on seats (3), and the fourth group on seats (5, 6).",
        "generated_code": "# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nk = int(data[1])\ngroups = list(map(int, data[2:]))\n\n# Calculate the number of rows and the maximum pairs per row\nmax_pairs_per_row = 4 * n\n\n# Count the total number of pairs needed\ntotal_pairs_needed = 0\nfor soldiers in groups:\n    total_pairs_needed += (soldiers + 1) // 2\n\n# Check if the total pairs needed can fit into the available pairs\nif total_pairs_needed <= max_pairs_per_row:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
        "counter_example": {
            "input": "1 4\n2 2 2 2\n",
            "expected": "NO\n",
            "got": "YES"
        }
    },
    {
        "task_id": "0256",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Kicker (table football) is a board game based on football, in which players control the footballers' figures mounted on rods by using bars to get the ball into the opponent's goal. When playing two on two, one player of each team controls the goalkeeper and the full-backs (plays defence), the other player controls the half-backs and forwards (plays attack).\n\nTwo teams of company Q decided to battle each other. Let's enumerate players from both teams by integers from 1 to 4. The first and second player play in the first team, the third and the fourth one play in the second team. For each of the four players we know their game skills in defence and attack. The defence skill of the i-th player is a_{i}, the attack skill is b_{i}.\n\nBefore the game, the teams determine how they will play. First the players of the first team decide who will play in the attack, and who will play in the defence. Then the second team players do the same, based on the choice of their opponents.\n\nWe will define a team's defence as the defence skill of player of the team who plays defence. Similarly, a team's attack is the attack skill of the player of the team who plays attack. We assume that one team is guaranteed to beat the other one, if its defence is strictly greater than the opponent's attack and its attack is strictly greater than the opponent's defence.\n\nThe teams of company Q know each other's strengths and therefore arrange their teams optimally. Identify the team that is guaranteed to win (if both teams act optimally) or tell that there is no such team.\n\n\n-----Input-----\n\nThe input contain the players' description in four lines. The i-th line contains two space-separated integers a_{i} and b_{i} (1 ≤ a_{i}, b_{i} ≤ 100) — the defence and the attack skill of the i-th player, correspondingly.\n\n\n-----Output-----\n\nIf the first team can win, print phrase \"Team 1\" (without the quotes), if the second team can win, print phrase \"Team 2\" (without the quotes). If no of the teams can definitely win, print \"Draw\" (without the quotes).\n\n\n-----Examples-----\nInput\n1 100\n100 1\n99 99\n99 99\n\nOutput\nTeam 1\n\nInput\n1 1\n2 2\n3 3\n2 2\n\nOutput\nTeam 2\n\nInput\n3 3\n2 2\n1 1\n2 2\n\nOutput\nDraw\n\n\n\n-----Note-----\n\nLet consider the first test sample. The first team can definitely win if it will choose the following arrangement: the first player plays attack, the second player plays defence.\n\nConsider the second sample. The order of the choosing roles for players makes sense in this sample. As the members of the first team choose first, the members of the second team can beat them (because they know the exact defence value and attack value of the first team).",
        "generated_code": "a1, b1 = map(int, input().split())\na2, b2 = map(int, input().split())\na3, b3 = map(int, input().split())\na4, b4 = map(int, input().split())\n\n# Team 1 possibilities\nteam1_defence = max(a1, a2)\nteam1_attack = max(b1, b2)\n\n# Team 2 possibilities\nteam2_defence = max(a3, a4)\nteam2_attack = max(b3, b4)\n\nif team1_defence > team2_attack and team1_attack > team2_defence:\n    print(\"Team 1\")\nelif team2_defence > team1_attack and team2_attack > team1_defence:\n    print(\"Team 2\")\nelse:\n    print(\"Draw\")\n",
        "counter_example": {
            "input": "3 3\n2 2\n1 1\n2 2\n",
            "expected": "Draw\n",
            "got": "Team 1"
        }
    },
    {
        "task_id": "0256",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Kicker (table football) is a board game based on football, in which players control the footballers' figures mounted on rods by using bars to get the ball into the opponent's goal. When playing two on two, one player of each team controls the goalkeeper and the full-backs (plays defence), the other player controls the half-backs and forwards (plays attack).\n\nTwo teams of company Q decided to battle each other. Let's enumerate players from both teams by integers from 1 to 4. The first and second player play in the first team, the third and the fourth one play in the second team. For each of the four players we know their game skills in defence and attack. The defence skill of the i-th player is a_{i}, the attack skill is b_{i}.\n\nBefore the game, the teams determine how they will play. First the players of the first team decide who will play in the attack, and who will play in the defence. Then the second team players do the same, based on the choice of their opponents.\n\nWe will define a team's defence as the defence skill of player of the team who plays defence. Similarly, a team's attack is the attack skill of the player of the team who plays attack. We assume that one team is guaranteed to beat the other one, if its defence is strictly greater than the opponent's attack and its attack is strictly greater than the opponent's defence.\n\nThe teams of company Q know each other's strengths and therefore arrange their teams optimally. Identify the team that is guaranteed to win (if both teams act optimally) or tell that there is no such team.\n\n\n-----Input-----\n\nThe input contain the players' description in four lines. The i-th line contains two space-separated integers a_{i} and b_{i} (1 ≤ a_{i}, b_{i} ≤ 100) — the defence and the attack skill of the i-th player, correspondingly.\n\n\n-----Output-----\n\nIf the first team can win, print phrase \"Team 1\" (without the quotes), if the second team can win, print phrase \"Team 2\" (without the quotes). If no of the teams can definitely win, print \"Draw\" (without the quotes).\n\n\n-----Examples-----\nInput\n1 100\n100 1\n99 99\n99 99\n\nOutput\nTeam 1\n\nInput\n1 1\n2 2\n3 3\n2 2\n\nOutput\nTeam 2\n\nInput\n3 3\n2 2\n1 1\n2 2\n\nOutput\nDraw\n\n\n\n-----Note-----\n\nLet consider the first test sample. The first team can definitely win if it will choose the following arrangement: the first player plays attack, the second player plays defence.\n\nConsider the second sample. The order of the choosing roles for players makes sense in this sample. As the members of the first team choose first, the members of the second team can beat them (because they know the exact defence value and attack value of the first team).",
        "generated_code": "# Read input\na1, b1 = map(int, input().split())\na2, b2 = map(int, input().split())\na3, b3 = map(int, input().split())\na4, b4 = map(int, input().split())\n\n# Function to determine if team1 can beat team2\ndef can_team1_win(a1, b1, a2, b2, a3, b3, a4, b4):\n    # Team 1 combinations\n    team1_defence_1 = a1\n    team1_attack_1 = b2\n    team1_defence_2 = a2\n    team1_attack_2 = b1\n    \n    # Team 2 combinations (based on team 1's choice)\n    team2_defence_1 = a3\n    team2_attack_1 = b4\n    team2_defence_2 = a4\n    team2_attack_2 = b3\n\n    # Check all combinations and if there is a guaranteed win for team 1\n    if (team1_defence_1 > team2_attack_1 and team1_attack_1 > team2_defence_1) or (team1_defence_1 > team2_attack_2 and team1_attack_1 > team2_defence_2):\n        return True\n    \n    if (team1_defence_2 > team2_attack_1 and team1_attack_2 > team2_defence_1) or (team1_defence_2 > team2_attack_2 and team1_attack_2 > team2_defence_2):\n        return True\n    \n    return False\n\n# Function to determine if team2 can beat team1\ndef can_team2_win(a1, b1, a2, b2, a3, b3, a4, b4):\n    # Team 1 combinations\n    team1_defence_1 = a1\n    team1_attack_1 = b2\n    team1_defence_2 = a2\n    team1_attack_2 = b1\n    \n    # Team 2 combinations (based on team 1's choice)\n    team2_defence_1 = a3\n    team2_attack_1 = b4\n    team2_defence_2 = a4\n    team2_attack_2 = b3\n\n    # Check all combinations and if there is a guaranteed win for team 2\n    if (team2_defence_1 > team1_attack_1 and team2_attack_1 > team1_defence_1) or (team2_defence_1 > team1_attack_2 and team2_attack_1 > team1_defence_2):\n        return True\n    \n    if (team2_defence_2 > team1_attack_1 and team2_attack_2 > team1_defence_1) or (team2_defence_2 > team1_attack_2 and team2_attack_2 > team1_defence_2):\n        return True\n    \n    return False\n\n# Determine the result\nteam1_wins = can_team1_win(a1, b1, a2, b2, a3, b3, a4, b4)\nteam2_wins = can_team2_win(a1, b1, a2, b2, a3, b3, a4, b4)\n\nif team1_wins and not team2_wins:\n    print(\"Team 1\")\nelif team2_wins and not team1_wins:\n    print(\"Team 2\")\nelse:\n    print(\"Draw\")\n",
        "counter_example": {
            "input": "1 100\n100 1\n99 99\n99 99\n",
            "expected": "Team 1\n",
            "got": "Draw"
        }
    }
]