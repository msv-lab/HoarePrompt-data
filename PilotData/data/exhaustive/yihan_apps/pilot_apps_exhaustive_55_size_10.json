[
    {
        "task_id": "0073",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Mister B once received a gift: it was a book about aliens, which he started read immediately. This book had c pages.\n\nAt first day Mister B read v_0 pages, but after that he started to speed up. Every day, starting from the second, he read a pages more than on the previous day (at first day he read v_0 pages, at second — v_0 + a pages, at third — v_0 + 2a pages, and so on). But Mister B is just a human, so he physically wasn't able to read more than v_1 pages per day.\n\nAlso, to refresh his memory, every day, starting from the second, Mister B had to reread last l pages he read on the previous day. Mister B finished the book when he read the last page for the first time.\n\nHelp Mister B to calculate how many days he needed to finish the book.\n\n\n-----Input-----\n\nFirst and only line contains five space-separated integers: c, v_0, v_1, a and l (1 ≤ c ≤ 1000, 0 ≤ l < v_0 ≤ v_1 ≤ 1000, 0 ≤ a ≤ 1000) — the length of the book in pages, the initial reading speed, the maximum reading speed, the acceleration in reading speed and the number of pages for rereading.\n\n\n-----Output-----\n\nPrint one integer — the number of days Mister B needed to finish the book.\n\n\n-----Examples-----\nInput\n5 5 10 5 4\n\nOutput\n1\n\nInput\n12 4 12 4 1\n\nOutput\n3\n\nInput\n15 1 100 0 0\n\nOutput\n15\n\n\n\n-----Note-----\n\nIn the first sample test the book contains 5 pages, so Mister B read it right at the first day.\n\nIn the second sample test at first day Mister B read pages number 1 - 4, at second day — 4 - 11, at third day — 11 - 12 and finished the book.\n\nIn third sample test every day Mister B read 1 page of the book, so he finished in 15 days.",
        "generated_code": "c, v0, v1, a, l = map(int, input().split())\ndays = 0\npages_read = 0\nwhile pages_read < c:\n    if days == 0:\n        pages_to_read = min(v0, c - pages_read)\n    else:\n        pages_to_read = min(v0 + days * a, v1, c - pages_read)\n    pages_read += pages_to_read - l\n    days += 1\nprint(days)\n",
        "counter_example": {
            "input": "5 5 10 5 4\n",
            "expected": "1\n",
            "got": "TimeoutError: Execution exceeded time limit"
        }
    },
    {
        "task_id": "0073",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Mister B once received a gift: it was a book about aliens, which he started read immediately. This book had c pages.\n\nAt first day Mister B read v_0 pages, but after that he started to speed up. Every day, starting from the second, he read a pages more than on the previous day (at first day he read v_0 pages, at second — v_0 + a pages, at third — v_0 + 2a pages, and so on). But Mister B is just a human, so he physically wasn't able to read more than v_1 pages per day.\n\nAlso, to refresh his memory, every day, starting from the second, Mister B had to reread last l pages he read on the previous day. Mister B finished the book when he read the last page for the first time.\n\nHelp Mister B to calculate how many days he needed to finish the book.\n\n\n-----Input-----\n\nFirst and only line contains five space-separated integers: c, v_0, v_1, a and l (1 ≤ c ≤ 1000, 0 ≤ l < v_0 ≤ v_1 ≤ 1000, 0 ≤ a ≤ 1000) — the length of the book in pages, the initial reading speed, the maximum reading speed, the acceleration in reading speed and the number of pages for rereading.\n\n\n-----Output-----\n\nPrint one integer — the number of days Mister B needed to finish the book.\n\n\n-----Examples-----\nInput\n5 5 10 5 4\n\nOutput\n1\n\nInput\n12 4 12 4 1\n\nOutput\n3\n\nInput\n15 1 100 0 0\n\nOutput\n15\n\n\n\n-----Note-----\n\nIn the first sample test the book contains 5 pages, so Mister B read it right at the first day.\n\nIn the second sample test at first day Mister B read pages number 1 - 4, at second day — 4 - 11, at third day — 11 - 12 and finished the book.\n\nIn third sample test every day Mister B read 1 page of the book, so he finished in 15 days.",
        "generated_code": "def main():\n    # Reading input values\n    c, v_0, v_1, a, l = map(int, input().split())\n    \n    days = 0\n    pages_read = 0\n    current_speed = v_0\n    \n    while pages_read < c:\n        days += 1\n        if days == 1:\n            # First day reading\n            pages_read += v_0\n        else:\n            # Subsequent days reading: considering reread pages\n            pages_read += min(current_speed, v_1) - l\n            current_speed += a\n        \n        # Ensure the reading speed does not exceed v_1\n        current_speed = min(current_speed, v_1)\n        \n        # If the reread pages are more than the pages read, reset the pages_read to zero\n        if pages_read < 0:\n            pages_read = 0\n    \n    print(days)\n\nif __name__ == \"__main__\":\n    main()\n",
        "counter_example": {
            "input": "737 41 74 12 11\n",
            "expected": "13\n",
            "got": "14"
        }
    },
    {
        "task_id": "0298",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "It's one more school day now. Sasha doesn't like classes and is always bored at them. So, each day he invents some game and plays in it alone or with friends.\n\nToday he invented one simple game to play with Lena, with whom he shares a desk. The rules are simple. Sasha draws n sticks in a row. After that the players take turns crossing out exactly k sticks from left or right in each turn. Sasha moves first, because he is the inventor of the game. If there are less than k sticks on the paper before some turn, the game ends. Sasha wins if he makes strictly more moves than Lena. Sasha wants to know the result of the game before playing, you are to help him.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 10^18, k ≤ n) — the number of sticks drawn by Sasha and the number k — the number of sticks to be crossed out on each turn.\n\n\n-----Output-----\n\nIf Sasha wins, print \"YES\" (without quotes), otherwise print \"NO\" (without quotes).\n\nYou can print each letter in arbitrary case (upper of lower).\n\n\n-----Examples-----\nInput\n1 1\n\nOutput\nYES\n\nInput\n10 4\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example Sasha crosses out 1 stick, and then there are no sticks. So Lena can't make a move, and Sasha wins.\n\nIn the second example Sasha crosses out 4 sticks, then Lena crosses out 4 sticks, and after that there are only 2 sticks left. Sasha can't make a move. The players make equal number of moves, so Sasha doesn't win.",
        "generated_code": "n, k = map(int, input().split())\nif (n - 1) // k > n // k:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
        "counter_example": {
            "input": "1 1\n",
            "expected": "YES\n",
            "got": "NO"
        }
    },
    {
        "task_id": "0298",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "It's one more school day now. Sasha doesn't like classes and is always bored at them. So, each day he invents some game and plays in it alone or with friends.\n\nToday he invented one simple game to play with Lena, with whom he shares a desk. The rules are simple. Sasha draws n sticks in a row. After that the players take turns crossing out exactly k sticks from left or right in each turn. Sasha moves first, because he is the inventor of the game. If there are less than k sticks on the paper before some turn, the game ends. Sasha wins if he makes strictly more moves than Lena. Sasha wants to know the result of the game before playing, you are to help him.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 10^18, k ≤ n) — the number of sticks drawn by Sasha and the number k — the number of sticks to be crossed out on each turn.\n\n\n-----Output-----\n\nIf Sasha wins, print \"YES\" (without quotes), otherwise print \"NO\" (without quotes).\n\nYou can print each letter in arbitrary case (upper of lower).\n\n\n-----Examples-----\nInput\n1 1\n\nOutput\nYES\n\nInput\n10 4\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example Sasha crosses out 1 stick, and then there are no sticks. So Lena can't make a move, and Sasha wins.\n\nIn the second example Sasha crosses out 4 sticks, then Lena crosses out 4 sticks, and after that there are only 2 sticks left. Sasha can't make a move. The players make equal number of moves, so Sasha doesn't win.",
        "generated_code": "# Read input values\nn, k = map(int, input().split())\n\n# Determine if Sasha wins\nif (n // k) % 2 == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
        "counter_example": null
    },
    {
        "task_id": "0264",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "There is an airplane which has n rows from front to back. There will be m people boarding this airplane.\n\nThis airplane has an entrance at the very front and very back of the plane.\n\nEach person has some assigned seat. It is possible for multiple people to have the same assigned seat. The people will then board the plane one by one starting with person 1. Each person can independently choose either the front entrance or back entrance to enter the plane.\n\nWhen a person walks into the plane, they walk directly to their assigned seat and will try to sit in it. If it is occupied, they will continue walking in the direction they walked in until they are at empty seat - they will take the earliest empty seat that they can find. If they get to the end of the row without finding a seat, they will be angry.\n\nFind the number of ways to assign tickets to the passengers and board the plane without anyone getting angry. Two ways are different if there exists a passenger who chose a different entrance in both ways, or the assigned seat is different. Print this count modulo 10^9 + 7.\n\n\n-----Input-----\n\nThe first line of input will contain two integers n, m (1 ≤ m ≤ n ≤ 1 000 000), the number of seats, and the number of passengers, respectively.\n\n\n-----Output-----\n\nPrint a single number, the number of ways, modulo 10^9 + 7.\n\n\n-----Example-----\nInput\n3 3\n\nOutput\n128\n\n\n\n-----Note-----\n\nHere, we will denote a passenger by which seat they were assigned, and which side they came from (either \"F\" or \"B\" for front or back, respectively).\n\nFor example, one valid way is 3B, 3B, 3B (i.e. all passengers were assigned seat 3 and came from the back entrance). Another valid way would be 2F, 1B, 3F.\n\nOne invalid way would be 2B, 2B, 2B, since the third passenger would get to the front without finding a seat.",
        "generated_code": "mod = 10**9 + 7\nn, m = map(int, input().split())\n\nres = 1\nfor _ in range(m):\n    res = (res * (n * 2)) % mod\n    n -= 1\n\nprint(res)\n",
        "counter_example": {
            "input": "3 3\n",
            "expected": "128\n",
            "got": "48"
        }
    },
    {
        "task_id": "0264",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "There is an airplane which has n rows from front to back. There will be m people boarding this airplane.\n\nThis airplane has an entrance at the very front and very back of the plane.\n\nEach person has some assigned seat. It is possible for multiple people to have the same assigned seat. The people will then board the plane one by one starting with person 1. Each person can independently choose either the front entrance or back entrance to enter the plane.\n\nWhen a person walks into the plane, they walk directly to their assigned seat and will try to sit in it. If it is occupied, they will continue walking in the direction they walked in until they are at empty seat - they will take the earliest empty seat that they can find. If they get to the end of the row without finding a seat, they will be angry.\n\nFind the number of ways to assign tickets to the passengers and board the plane without anyone getting angry. Two ways are different if there exists a passenger who chose a different entrance in both ways, or the assigned seat is different. Print this count modulo 10^9 + 7.\n\n\n-----Input-----\n\nThe first line of input will contain two integers n, m (1 ≤ m ≤ n ≤ 1 000 000), the number of seats, and the number of passengers, respectively.\n\n\n-----Output-----\n\nPrint a single number, the number of ways, modulo 10^9 + 7.\n\n\n-----Example-----\nInput\n3 3\n\nOutput\n128\n\n\n\n-----Note-----\n\nHere, we will denote a passenger by which seat they were assigned, and which side they came from (either \"F\" or \"B\" for front or back, respectively).\n\nFor example, one valid way is 3B, 3B, 3B (i.e. all passengers were assigned seat 3 and came from the back entrance). Another valid way would be 2F, 1B, 3F.\n\nOne invalid way would be 2B, 2B, 2B, since the third passenger would get to the front without finding a seat.",
        "generated_code": "MOD = 10**9 + 7\n\ndef factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result = result * i % MOD\n    return result\n\ndef number_of_ways(n, m):\n    # Compute factorial(n) and factorial(n-m)\n    fact_n = factorial(n)\n    fact_n_m = factorial(n - m)\n    \n    # The number of ways to assign tickets to passengers and ensure no one gets angry:\n    # This is computed as 2^m * factorial(n) // factorial(n-m)\n    ways = pow(2, m, MOD) * fact_n % MOD * pow(fact_n_m, MOD-2, MOD) % MOD\n    \n    return ways\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().strip().split()\nn = int(data[0])\nm = int(data[1])\n\n# Calculate the number of ways\nresult = number_of_ways(n, m)\n\n# Output the result\nprint(result)\n",
        "counter_example": {
            "input": "3 3\n",
            "expected": "128\n",
            "got": "48"
        }
    },
    {
        "task_id": "0127",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Summer holidays! Someone is going on trips, someone is visiting grandparents, but someone is trying to get a part-time job. This summer Noora decided that she wants to earn some money, and took a job in a shop as an assistant.\n\nShop, where Noora is working, has a plan on the following n days. For each day sales manager knows exactly, that in i-th day k_{i} products will be put up for sale and exactly l_{i} clients will come to the shop that day. Also, the manager is sure, that everyone, who comes to the shop, buys exactly one product or, if there aren't any left, leaves the shop without buying anything. Moreover, due to the short shelf-life of the products, manager established the following rule: if some part of the products left on the shelves at the end of the day, that products aren't kept on the next day and are sent to the dump.\n\nFor advertising purposes manager offered to start a sell-out in the shop. He asked Noora to choose any f days from n next for sell-outs. On each of f chosen days the number of products were put up for sale would be doubled. Thus, if on i-th day shop planned to put up for sale k_{i} products and Noora has chosen this day for sell-out, shelves of the shop would keep 2·k_{i} products. Consequently, there is an opportunity to sell two times more products on days of sell-out.\n\nNoora's task is to choose f days to maximize total number of sold products. She asks you to help her with such a difficult problem.\n\n\n-----Input-----\n\nThe first line contains two integers n and f (1 ≤ n ≤ 10^5, 0 ≤ f ≤ n) denoting the number of days in shop's plan and the number of days that Noora has to choose for sell-out.\n\nEach line of the following n subsequent lines contains two integers k_{i}, l_{i} (0 ≤ k_{i}, l_{i} ≤ 10^9) denoting the number of products on the shelves of the shop on the i-th day and the number of clients that will come to the shop on i-th day.\n\n\n-----Output-----\n\nPrint a single integer denoting the maximal number of products that shop can sell.\n\n\n-----Examples-----\nInput\n4 2\n2 1\n3 5\n2 3\n1 5\n\nOutput\n10\nInput\n4 1\n0 2\n0 3\n3 5\n0 6\n\nOutput\n5\n\n\n-----Note-----\n\nIn the first example we can choose days with numbers 2 and 4 for sell-out. In this case new numbers of products for sale would be equal to [2, 6, 2, 2] respectively. So on the first day shop will sell 1 product, on the second — 5, on the third — 2, on the fourth — 2. In total 1 + 5 + 2 + 2 = 10 product units.\n\nIn the second example it is possible to sell 5 products, if you choose third day for sell-out.",
        "generated_code": "n, f = map(int, input().split())\ndays = []\nfor _ in range(n):\n    k, l = map(int, input().split())\n    days.append((k, l))\n\ndays.sort(key=lambda x: x[1] - x[0], reverse=True)\n\nsold = 0\nfor i in range(n):\n    if i < f:\n        sold += min(days[i][0] * 2, days[i][1])\n    else:\n        sold += min(days[i][0], days[i][1])\n\nprint(sold)\n",
        "counter_example": {
            "input": "4 1\n0 2\n0 3\n3 5\n0 6\n",
            "expected": "5",
            "got": "3"
        }
    },
    {
        "task_id": "0127",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Summer holidays! Someone is going on trips, someone is visiting grandparents, but someone is trying to get a part-time job. This summer Noora decided that she wants to earn some money, and took a job in a shop as an assistant.\n\nShop, where Noora is working, has a plan on the following n days. For each day sales manager knows exactly, that in i-th day k_{i} products will be put up for sale and exactly l_{i} clients will come to the shop that day. Also, the manager is sure, that everyone, who comes to the shop, buys exactly one product or, if there aren't any left, leaves the shop without buying anything. Moreover, due to the short shelf-life of the products, manager established the following rule: if some part of the products left on the shelves at the end of the day, that products aren't kept on the next day and are sent to the dump.\n\nFor advertising purposes manager offered to start a sell-out in the shop. He asked Noora to choose any f days from n next for sell-outs. On each of f chosen days the number of products were put up for sale would be doubled. Thus, if on i-th day shop planned to put up for sale k_{i} products and Noora has chosen this day for sell-out, shelves of the shop would keep 2·k_{i} products. Consequently, there is an opportunity to sell two times more products on days of sell-out.\n\nNoora's task is to choose f days to maximize total number of sold products. She asks you to help her with such a difficult problem.\n\n\n-----Input-----\n\nThe first line contains two integers n and f (1 ≤ n ≤ 10^5, 0 ≤ f ≤ n) denoting the number of days in shop's plan and the number of days that Noora has to choose for sell-out.\n\nEach line of the following n subsequent lines contains two integers k_{i}, l_{i} (0 ≤ k_{i}, l_{i} ≤ 10^9) denoting the number of products on the shelves of the shop on the i-th day and the number of clients that will come to the shop on i-th day.\n\n\n-----Output-----\n\nPrint a single integer denoting the maximal number of products that shop can sell.\n\n\n-----Examples-----\nInput\n4 2\n2 1\n3 5\n2 3\n1 5\n\nOutput\n10\nInput\n4 1\n0 2\n0 3\n3 5\n0 6\n\nOutput\n5\n\n\n-----Note-----\n\nIn the first example we can choose days with numbers 2 and 4 for sell-out. In this case new numbers of products for sale would be equal to [2, 6, 2, 2] respectively. So on the first day shop will sell 1 product, on the second — 5, on the third — 2, on the fourth — 2. In total 1 + 5 + 2 + 2 = 10 product units.\n\nIn the second example it is possible to sell 5 products, if you choose third day for sell-out.",
        "generated_code": "def max_sold_products(n, f, days):\n    regular_sales = []\n    potential_sales_increase = []\n\n    for k, l in days:\n        regular_sales.append(min(k, l))\n        potential_sales_increase.append(min(2 * k, l) - min(k, l))\n\n    total_sales = sum(regular_sales)\n    potential_sales_increase.sort(reverse=True)\n\n    # Take the top f increases to maximize sales\n    total_sales += sum(potential_sales_increase[:f])\n\n    return total_sales\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nf = int(data[1])\ndays = [(int(data[2 + 2 * i]), int(data[3 + 2 * i])) for i in range(n)]\n\n# Get the result\nresult = max_sold_products(n, f, days)\n\n# Print the result\nprint(result)\n",
        "counter_example": null
    },
    {
        "task_id": "0247",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "You are given n points on Cartesian plane. Every point is a lattice point (i. e. both of its coordinates are integers), and all points are distinct.\n\nYou may draw two straight lines (not necessarily distinct). Is it possible to do this in such a way that every point lies on at least one of these lines?\n\n\n-----Input-----\n\nThe first line contains one integer n (1 ≤ n ≤ 10^5) — the number of points you are given.\n\nThen n lines follow, each line containing two integers x_{i} and y_{i} (|x_{i}|, |y_{i}| ≤ 10^9)— coordinates of i-th point. All n points are distinct.\n\n\n-----Output-----\n\nIf it is possible to draw two straight lines in such a way that each of given points belongs to at least one of these lines, print YES. Otherwise, print NO.\n\n\n-----Examples-----\nInput\n5\n0 0\n0 1\n1 1\n1 -1\n2 2\n\nOutput\nYES\n\nInput\n5\n0 0\n1 0\n2 1\n1 1\n2 3\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example it is possible to draw two lines, the one containing the points 1, 3 and 5, and another one containing two remaining points. [Image]",
        "generated_code": "n = int(input())\npoints = []\nfor _ in range(n):\n    x, y = map(int, input().split())\n    points.append((x, y))\n\nlines = {}\nfor i in range(n):\n    for j in range(i + 1, n):\n        x1, y1 = points[i]\n        x2, y2 = points[j]\n        if x1 == x2:\n            slope = 'inf'\n        else:\n            slope = (y2 - y1) * 1.0 / (x2 - x1)\n        if slope not in lines:\n            lines[slope] = set()\n        lines[slope].add((x1, y1))\n        lines[slope].add((x2, y2))\n\nfor slope, pts in lines.items():\n    if len(pts) == n:\n        print(\"YES\")\n        exit()\n\nprint(\"NO\")\n",
        "counter_example": {
            "input": "5\n0 0\n0 1\n1 1\n1 -1\n2 2\n",
            "expected": "YES\n",
            "got": "NO"
        }
    },
    {
        "task_id": "0247",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "You are given n points on Cartesian plane. Every point is a lattice point (i. e. both of its coordinates are integers), and all points are distinct.\n\nYou may draw two straight lines (not necessarily distinct). Is it possible to do this in such a way that every point lies on at least one of these lines?\n\n\n-----Input-----\n\nThe first line contains one integer n (1 ≤ n ≤ 10^5) — the number of points you are given.\n\nThen n lines follow, each line containing two integers x_{i} and y_{i} (|x_{i}|, |y_{i}| ≤ 10^9)— coordinates of i-th point. All n points are distinct.\n\n\n-----Output-----\n\nIf it is possible to draw two straight lines in such a way that each of given points belongs to at least one of these lines, print YES. Otherwise, print NO.\n\n\n-----Examples-----\nInput\n5\n0 0\n0 1\n1 1\n1 -1\n2 2\n\nOutput\nYES\n\nInput\n5\n0 0\n1 0\n2 1\n1 1\n2 3\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example it is possible to draw two lines, the one containing the points 1, 3 and 5, and another one containing two remaining points. [Image]",
        "generated_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef is_possible_to_draw_two_lines(points):\n    from collections import defaultdict\n\n    n = len(points)\n    if n <= 2:\n        return True\n\n    def normalize_slope(dx, dy):\n        if dx == 0:\n            return (0, 1)\n        if dy == 0:\n            return (1, 0)\n        g = gcd(dx, dy)\n        return (dx // g, dy // g)\n\n    for i in range(n):\n        slopes = defaultdict(int)\n        for j in range(n):\n            if i != j:\n                dx = points[j][0] - points[i][0]\n                dy = points[j][1] - points[i][1]\n                slope = normalize_slope(dx, dy)\n                slopes[slope] += 1\n\n        max_slopes = max(slopes.values())\n        if max_slopes >= n - 1:\n            return True\n\n        for slope in slopes:\n            if slopes[slope] == max_slopes:\n                line_points = [points[i]]\n                for j in range(n):\n                    if i != j:\n                        dx = points[j][0] - points[i][0]\n                        dy = points[j][1] - points[i][1]\n                        if normalize_slope(dx, dy) == slope:\n                            line_points.append(points[j])\n                remaining_points = [p for p in points if p not in line_points]\n                if len(remaining_points) == 0:\n                    return True\n                if len(remaining_points) <= 2:\n                    return True\n                break\n\n    return False\n\n# Reading input from standard input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\npoints = []\nindex = 1\nfor _ in range(n):\n    x = int(data[index])\n    y = int(data[index + 1])\n    points.append((x, y))\n    index += 2\n\nif is_possible_to_draw_two_lines(points):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
        "counter_example": {
            "input": "10\n315 202\n315 203\n315 204\n-138 -298\n-136 -295\n-134 -292\n-132 -289\n-130 -286\n-128 -283\n-126 -280\n",
            "expected": "YES\n",
            "got": "NO"
        }
    }
]