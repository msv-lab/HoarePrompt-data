[
    {
        "task_id": "Mbpp/103",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the Eulerian number a(n, m).",
        "generated_code": "def eulerian_num(n, m):\n    if m == 0 or m == n:\n        return 1\n    else:\n        return m * eulerian_num(n-1, m-1) + (m-1) * eulerian_num(n-1, m)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                3,
                1
            ],
            "expected": 4,
            "got": 1
        }
    },
    {
        "task_id": "Mbpp/103",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to find the Eulerian number a(n, m).",
        "generated_code": "def eulerian_num(n, m):\n    # Create a 2D table to store results of subproblems\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base cases\n    for i in range(n + 1):\n        dp[i][0] = 1  # a(n, 0) = 1 for all n\n    \n    # Fill the table using the recurrence relation\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n    \n    return dp[n][m]\n\n# Test cases\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                0,
                0
            ],
            "expected": 0,
            "got": 1
        }
    },
    {
        "task_id": "Mbpp/106",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to append the given list to the given tuples.",
        "generated_code": "def add_lists(lst, tup):\n    return tup + tuple(lst)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    5,
                    6,
                    7
                ],
                [
                    9,
                    10
                ]
            ],
            "expected": null,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/106",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to append the given list to the given tuples.",
        "generated_code": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)\n\n# Test cases\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    5,
                    6,
                    7
                ],
                [
                    9,
                    10
                ]
            ],
            "expected": null,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/804",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to check whether the product of numbers in a list is even or not.",
        "generated_code": "def is_product_even(lst):\n    product = 1\n    for num in lst:\n        product *= num\n    return product % 2 == 0\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/804",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to check whether the product of numbers in a list is even or not.",
        "generated_code": "def is_product_even(numbers):\n    for number in numbers:\n        if number % 2 == 0:\n            return True\n    return False\n\n# Test cases\nassert is_product_even([1, 2, 3])\nassert is_product_even([1, 2, 1, 4])\nassert not is_product_even([1, 1])\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/638",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "generated_code": "import math\ndef wind_chill(v, t):\n    wci = 13.12 + 0.6215*t - 11.37*(v**0.16) + 0.3965*t*(v**0.16)\n    return math.ceil(wci)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                120,
                35
            ],
            "expected": 40,
            "got": 41
        }
    },
    {
        "task_id": "Mbpp/638",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.",
        "generated_code": "def wind_chill(velocity, temperature):\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (velocity ** 0.16) + 0.3965 * temperature * (velocity ** 0.16)\n    return round(wind_chill_index)\n\n# Test cases\nassert wind_chill(120, 35) == 40\nassert wind_chill(40, 20) == 19\nassert wind_chill(10, 8) == 6\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/458",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the area of a rectangle.",
        "generated_code": "def rectangle_area(length, width):\n    return length * width\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/458",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the area of a rectangle.",
        "generated_code": "def rectangle_area(length, width):\n    return length * width\n\n# Test the function with the provided assertions\nassert rectangle_area(10, 20) == 200\nassert rectangle_area(10, 5) == 50\nassert rectangle_area(4, 2) == 8\n",
        "counter_example": null
    }
]