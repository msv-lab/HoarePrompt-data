[
    {
        "task_id": "Mbpp/420",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the cube sum of first n even natural numbers.",
        "generated_code": "def cube_Sum(n: int) -> int:\n    return sum(i**3 for i in range(2, 2*n + 1, 2))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/420",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the cube sum of first n even natural numbers.",
        "generated_code": "def cube_Sum(n):\n    even_numbers = [2 * i for i in range(1, n + 1)]\n    cube_sum = sum(x ** 3 for x in even_numbers)\n    return cube_sum\n\n# Tests\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/763",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the minimum difference between any two elements in a given array.",
        "generated_code": "def find_min_diff(arr, n):\n    arr = list(arr)\n    arr.sort()\n    return min(arr[i+1] - arr[i] for i in range(n-1))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/763",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the minimum difference between any two elements in a given array.",
        "generated_code": "def find_min_diff(arr, n):\n    if n < 2:\n        return 0  # If array has less than 2 elements, no valid difference can be found\n    \n    arr = sorted(arr)\n    min_diff = float('inf')\n    \n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n            \n    return min_diff\n\n# Testing the function based on the provided assertions\nassert find_min_diff((1,5,3,19,18,25),6) == 1\nassert find_min_diff((4,3,2,6),4) == 1\nassert find_min_diff((30,5,20,9),4) == 4\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/135",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the nth hexagonal number.",
        "generated_code": "def hexagonal_num(n: int) -> int:\n  return n * (2 * n - 1)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/135",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the nth hexagonal number.",
        "generated_code": "def hexagonal_num(n):\n    return n * (2 * n - 1)\n\n# Test cases\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/560",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the union of the elements of two given tuples and output them in sorted order.",
        "generated_code": "def union_elements(tup1, tup2):\n    return tuple(sorted(set(tup1) | set(tup2)))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/560",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the union of the elements of two given tuples and output them in sorted order.",
        "generated_code": "def union_elements(tup1, tup2):\n    # Step 1: Convert tuples to sets\n    set1 = set(tup1)\n    set2 = set(tup2)\n    \n    # Step 2: Find the union of the sets\n    union_set = set1 | set2\n    \n    # Step 3: Convert the union set to a sorted list\n    sorted_list = sorted(union_set)\n    \n    # Step 4: Convert the sorted list to a tuple and return\n    return tuple(sorted_list)\n\n# Provided test cases\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17)) == (11, 12, 13, 14, 15, 16, 17)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/70",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find whether all the given tuples have equal length or not.",
        "generated_code": "def get_equal(tuples):\n    return len(set(len(t) for t in tuples)) == 1\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/70",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find whether all the given tuples have equal length or not.",
        "generated_code": "def get_equal(tuples_list):\n    if not tuples_list:\n        return True  # If the list is empty, we consider all lengths to be equal.\n    \n    first_length = len(tuples_list[0])\n    for tup in tuples_list:\n        if len(tup) != first_length:\n            return False\n    return True\n\n# Test cases\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False\nassert get_equal([(1, 2), (3, 4)]) == True\n",
        "counter_example": null
    }
]