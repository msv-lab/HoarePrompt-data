[
    {
        "task_id": "Mbpp/17",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function that returns the perimeter of a square given its side length as input.",
        "generated_code": "def square_perimeter(side_length: int) -> int:\n    \"\"\"\n    This function calculates the perimeter of a square given its side length.\n\n    Args:\n        side_length (int): The length of one side of the square.\n\n    Returns:\n        int: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/17",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function that returns the perimeter of a square given its side length as input.",
        "generated_code": "def square_perimeter(side_length):\n    return 4 * side_length\n\n# Test cases\nassert square_perimeter(10) == 40\nassert square_perimeter(5) == 20\nassert square_perimeter(4) == 16\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/432",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the median length of a trapezium.",
        "generated_code": "def median_trapezium(a, b, c):\n    lengths = sorted([a, b, c])\n    n = len(lengths)\n    if n % 2 == 1:\n        median = lengths[n//2]\n    else:\n        median = (lengths[n//2 - 1] + lengths[n//2]) / 2\n    return median\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                15,
                25,
                35
            ],
            "expected": 20.0,
            "got": 25
        }
    },
    {
        "task_id": "Mbpp/432",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the median length of a trapezium.",
        "generated_code": "def median_trapezium(a, b, _):\n    return (a + b) / 2\n\n# Testing the function with provided test cases\nassert median_trapezium(15, 25, 35) == 20\nassert median_trapezium(10, 20, 30) == 15\nassert median_trapezium(6, 9, 4) == 7.5\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/809",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
        "generated_code": "def check_smaller(tup1, tup2):\n    return all(x > y for x, y in zip(tup1, tup2))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/809",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.",
        "generated_code": "def check_smaller(tuple1, tuple2):\n    for a, b in zip(tuple1, tuple2):\n        if b >= a:\n            return False\n    return True\n\n# Test cases\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/563",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to extract values between quotation marks from a string.",
        "generated_code": "import re\ndef extract_values(s):\n    return re.findall(r'\"(.*?)\"', s)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/563",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to extract values between quotation marks from a string.",
        "generated_code": "import re\n\ndef extract_values(s):\n    # Use a regular expression to find all substrings within double quotes\n    return re.findall(r'\"(.*?)\"', s)\n\n# Test cases to validate the solution\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"') == ['python', 'program', 'language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"') == ['red', 'blue', 'green', 'yellow']\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/222",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to check if all the elements in tuple have same data type or not.",
        "generated_code": "def check_type(tup):\n    return len(set(type(i) for i in tup)) == 1\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/222",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to check if all the elements in tuple have same data type or not.",
        "generated_code": "def check_type(tup):\n    if not tup:\n        return True  # An empty tuple can be considered as having the same type for all elements.\n    \n    first_type = type(tup[0])\n    for element in tup:\n        if type(element) != first_type:\n            return False\n    return True\n\n# Test cases\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((1, 2, \"4\")) == False\nassert check_type((3, 2, 1, 4, 5)) == True\n",
        "counter_example": null
    }
]