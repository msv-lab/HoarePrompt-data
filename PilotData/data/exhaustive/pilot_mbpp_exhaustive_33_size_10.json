[
    {
        "task_id": "Mbpp/604",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to reverse words seperated by spaces in a given string.",
        "generated_code": "def reverse_words(input_str: str) -> str:\n    words = input_str.split()\n    reversed_words = words[::-1]\n    reversed_str = ' '.join(reversed_words)\n    return reversed_str\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/604",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to reverse words seperated by spaces in a given string.",
        "generated_code": "def reverse_words(sentence):\n    words = sentence.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words\n\n# Test cases\nassert reverse_words(\"python program\") == \"program python\"\nassert reverse_words(\"java language\") == \"language java\"\nassert reverse_words(\"indian man\") == \"man indian\"\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/754",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.",
        "generated_code": "def extract_index_list(l1, l2, l3):\n    return [x for x in l1 if x in l2 and x in l3 and l1.index(x) == l2.index(x) == l3.index(x)]\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    1,
                    1,
                    3,
                    4,
                    5,
                    6,
                    7
                ],
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    7
                ],
                [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    7
                ]
            ],
            "expected": [
                1,
                7
            ],
            "got": [
                7
            ]
        }
    },
    {
        "task_id": "Mbpp/754",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.",
        "generated_code": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\n# Test cases\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]) == [1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 5]\nassert extract_index_list([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == []\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    2,
                    4,
                    6,
                    8,
                    10,
                    12,
                    14
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ]
            ],
            "expected": [],
            "got": null
        }
    },
    {
        "task_id": "Mbpp/790",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to check whether every even index contains even numbers of a given list.",
        "generated_code": "def even_position(lst):\n    return all(i % 2 == 0 for i in lst[::2])\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    2,
                    1,
                    4,
                    2,
                    6,
                    1,
                    8,
                    2,
                    10,
                    1,
                    12
                ]
            ],
            "expected": false,
            "got": true
        }
    },
    {
        "task_id": "Mbpp/790",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to check whether every even index contains even numbers of a given list.",
        "generated_code": "def even_position(lst):\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\n# Test cases\nassert even_position([3, 2, 1]) == False\nassert even_position([1, 2, 3]) == False\nassert even_position([2, 1, 4]) == True\n\nprint(\"All tests passed!\")\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    2,
                    1,
                    4,
                    2,
                    6,
                    1,
                    8,
                    2,
                    10,
                    1,
                    12
                ]
            ],
            "expected": false,
            "got": true
        }
    },
    {
        "task_id": "Mbpp/161",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to remove all elements from a given list present in another list.",
        "generated_code": "def remove_elements(lst, remove_lst):\n    return [i for i in lst if i not in remove_lst]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/161",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to remove all elements from a given list present in another list.",
        "generated_code": "def remove_elements(lst1, lst2):\n    return [item for item in lst1 if item not in lst2]\n\n# Testing the function with the provided test cases\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/471",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the product of the array multiplication modulo n.",
        "generated_code": "def find_remainder(arr, n):\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/471",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the product of the array multiplication modulo n.",
        "generated_code": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n\n\n# Running the provided tests\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9\nassert find_remainder([1, 1, 1], 1) == 0\nassert find_remainder([1, 2, 1], 2) == 0\n",
        "counter_example": null
    }
]