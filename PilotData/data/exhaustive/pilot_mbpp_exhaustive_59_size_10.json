[
    {
        "task_id": "Mbpp/410",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the minimum value in a given heterogeneous list.",
        "generated_code": "def min_val(het_list):\n    return min(val for val in het_list if isinstance(val, (int, float)))\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    "Python",
                    10,
                    5,
                    2.5,
                    2.5,
                    "version"
                ]
            ],
            "expected": 5,
            "got": 2.5
        }
    },
    {
        "task_id": "Mbpp/410",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the minimum value in a given heterogeneous list.",
        "generated_code": "def min_val(lst):\n    # Filter out only integer values from the list\n    int_values = [x for x in lst if isinstance(x, int)]\n    # Find and return the minimum value among the integer values\n    return min(int_values)\n\n# Test cases to validate the solution\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2\nassert min_val(['Python', 15, 20, 25]) == 15\nassert min_val(['Python', 30, 20, 40, 50, 'version']) == 20\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/84",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the nth number in the newman conway sequence.",
        "generated_code": "def sequence(n):\n    a = [0, 1]\n    while len(a) < n:\n        a.append(a[a[-1]])\n    return a[-1]\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                10
            ],
            "expected": 6,
            "got": 1
        }
    },
    {
        "task_id": "Mbpp/84",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the nth number in the newman conway sequence.",
        "generated_code": "def sequence(n):\n    if n == 1 or n == 2:\n        return 1\n    \n    seq = [0] * (n + 1)\n    seq[1], seq[2] = 1, 1\n    \n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    \n    return seq[n]\n\n# Test cases\nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/573",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to calculate the product of the unique numbers in a given list.",
        "generated_code": "def unique_product(nums):\n    unique_nums = set(nums)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/573",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to calculate the product of the unique numbers in a given list.",
        "generated_code": "from functools import reduce\nfrom operator import mul\n\ndef unique_product(numbers):\n    # Convert the list to a set to obtain unique elements\n    unique_numbers = set(numbers)\n    \n    # Calculate the product of the unique elements\n    product = reduce(mul, unique_numbers, 1)\n    \n    return product\n\n# Test cases\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000\nassert unique_product([1, 2, 3, 1]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/392",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "generated_code": "def get_max_sum(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n < 2:\n        return n\n    max_sum = n\n    for i in [2, 3, 4, 5]:\n        if n // i >= 1:\n            max_sum = max(max_sum, get_max_sum(n // i, memo) + get_max_sum(n // i, memo) + get_max_sum(n // i, memo) + get_max_sum(n // i, memo))\n    memo[n] = max_sum\n    return max_sum\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                60
            ],
            "expected": 106,
            "got": 1024
        }
    },
    {
        "task_id": "Mbpp/392",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "generated_code": "def get_max_sum(n, memo=None):\n    if memo is None:\n        memo = {}\n    \n    if n in memo:\n        return memo[n]\n    \n    if n < 12:\n        return n\n    \n    # Recursively calculate the value for f(n)\n    max_sum = max(\n        get_max_sum(n // 2, memo) +\n        get_max_sum(n // 3, memo) +\n        get_max_sum(n // 4, memo) +\n        get_max_sum(n // 5, memo),\n        n\n    )\n    \n    memo[n] = max_sum\n    return max_sum\n\n# Test cases\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                60
            ],
            "expected": 106,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/635",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to sort the given list.",
        "generated_code": "import heapq as hq\n\ndef heap_sort(nums: list) -> list:\n    return hq.nsmallest(len(nums), nums)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                []
            ],
            "expected": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "got": []
        }
    },
    {
        "task_id": "Mbpp/635",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to sort the given list.",
        "generated_code": "import heapq\n\ndef heap_sort(nums):\n    # Create a min heap from the list\n    heapq.heapify(nums)\n    \n    # Extract elements from the heap in sorted order\n    sorted_nums = [heapq.heappop(nums) for _ in range(len(nums))]\n    \n    return sorted_nums\n\n# Tests\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58]) == [14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort([7, 1, 9, 5]) == [1, 5, 7, 9]\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                []
            ],
            "expected": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9
            ],
            "got": []
        }
    }
]