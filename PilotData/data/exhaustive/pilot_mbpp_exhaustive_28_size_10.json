[
    {
        "task_id": "Mbpp/568",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to create a list of N empty dictionaries.",
        "generated_code": "def empty_list(n):\n    return [{} for _ in range(n)]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/568",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to create a list of N empty dictionaries.",
        "generated_code": "def empty_list(N):\n    return [{} for _ in range(N)]\n\n# Testing the function with provided test cases\nassert empty_list(5) == [{}, {}, {}, {}, {}]\nassert empty_list(6) == [{}, {}, {}, {}, {}, {}]\nassert empty_list(7) == [{}, {}, {}, {}, {}, {}, {}]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/230",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "generated_code": "def replace_blank(input_string, char):\n    return input_string.replace(\" \", char)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/230",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.",
        "generated_code": "def replace_blank(input_string, replacement_char):\n    return input_string.replace(' ', replacement_char)\n\n# Test cases\nassert replace_blank(\"hello people\", '@') == \"hello@people\"\nassert replace_blank(\"python program language\", '$') == \"python$program$language\"\nassert replace_blank(\"blank space\", \"-\") == \"blank-space\"\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/473",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "generated_code": "def tuple_intersection(tup_list1, tup_list2):\n    set1 = set(tuple(sorted(t)) for t in tup_list1)\n    set2 = set(tuple(sorted(t)) for t in tup_list2)\n    return set1 & set2\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/473",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "generated_code": "def tuple_intersection(list1, list2):\n    # Convert each tuple to a sorted tuple for both lists\n    set1 = {tuple(sorted(t)) for t in list1}\n    set2 = {tuple(sorted(t)) for t in list2}\n    \n    # Find the intersection of two sets\n    intersection = set1 & set2\n    \n    return intersection\n\n# Tests\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/463",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the maximum product subarray of the given array.",
        "generated_code": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n\n    max_product = nums[0]\n    min_product = nums[0]\n    result = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n\n        result = max(result, max_product)\n\n    return result\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/463",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the maximum product subarray of the given array.",
        "generated_code": "def max_subarray_product(nums):\n    if not nums:\n        return 0\n    \n    max_prod = min_prod = result = nums[0]\n    \n    for num in nums[1:]:\n        if num < 0:\n            max_prod, min_prod = min_prod, max_prod\n        \n        max_prod = max(num, max_prod * num)\n        min_prod = min(num, min_prod * num)\n        \n        result = max(result, max_prod)\n    \n    return result\n\n# Tests\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180\nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/267",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "generated_code": "def square_Sum(n: int) -> int:\n    return sum(i**2 for i in range(1, 2*n + 1, 2))\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                1000000.0
            ],
            "expected": 1.333333333333e+18,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/267",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.",
        "generated_code": "def square_Sum(n):\n    total_sum = 0\n    odd_number = 1\n    for _ in range(n):\n        total_sum += odd_number ** 2\n        odd_number += 2\n    return total_sum\n\n# Testing the function with provided test cases\nassert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                1000000.0
            ],
            "expected": 1.333333333333e+18,
            "got": null
        }
    }
]