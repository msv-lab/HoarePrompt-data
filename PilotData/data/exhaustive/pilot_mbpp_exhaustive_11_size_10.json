[
    {
        "task_id": "Mbpp/102",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to convert a snake case string to camel case string.",
        "generated_code": "def snake_to_camel(snake_str: str) -> str:\n    components = snake_str.split('_')\n    return components[0].title() + ''.join(x.title() for x in components[1:])\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "___python_program"
            ],
            "expected": "___PythonProgram",
            "got": "PythonProgram"
        }
    },
    {
        "task_id": "Mbpp/102",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to convert a snake case string to camel case string.",
        "generated_code": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.capitalize() for x in components)\n\n# Tests\nassert snake_to_camel('python_program') == 'PythonProgram'\nassert snake_to_camel('python_language') == 'PythonLanguage'\nassert snake_to_camel('programming_language') == 'ProgrammingLanguage'\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "___python_program"
            ],
            "expected": "___PythonProgram",
            "got": "PythonProgram"
        }
    },
    {
        "task_id": "Mbpp/293",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the third side of a right angled triangle.",
        "generated_code": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/293",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the third side of a right angled triangle.",
        "generated_code": "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)\n\n# Test cases\nassert math.isclose(otherside_rightangle(7, 8), 10.63014581273465, rel_tol=0.001)\nassert math.isclose(otherside_rightangle(3, 4), 5, rel_tol=0.001)\nassert math.isclose(otherside_rightangle(7, 15), 16.55294535724685, rel_tol=0.001)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/388",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "generated_code": "def highest_Power_of_2(n: int) -> int:\n    i = 1\n    while i * 2 <= n:\n        i *= 2\n    return i\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/388",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "generated_code": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n\n# Testing the function with provided test cases\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/736",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to locate the left insertion point for a specified value in sorted order.",
        "generated_code": "def left_insertion(sorted_list, target):\n    idx = len(sorted_list)\n    left, right = 0, len(sorted_list) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if sorted_list[mid] == target:\n            return mid\n        elif sorted_list[mid] < target:\n            left = mid + 1\n        else:\n            idx = mid\n            right = mid - 1\n    return idx\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/736",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to locate the left insertion point for a specified value in sorted order.",
        "generated_code": "from bisect import bisect_left\n\ndef left_insertion(sorted_list, value):\n    return bisect_left(sorted_list, value)\n\n# Test cases to verify the solution\nassert left_insertion([1,2,4,5],6) == 4\nassert left_insertion([1,2,4,5],3) == 2\nassert left_insertion([1,2,4,5],7) == 4\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/262",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
        "generated_code": "def split_two_parts(input_list, L):\n    return input_list[:L], input_list[L:]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/262",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.",
        "generated_code": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\n# Tests\nassert split_two_parts([1,1,2,3,4,4,5,1],3) == ([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2) == (['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4) == (['p', 'y', 't', 'h'], ['o', 'n'])\n",
        "counter_example": null
    }
]