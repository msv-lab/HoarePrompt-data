[
    {
        "task_id": "Mbpp/599",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find sum and average of first n natural numbers.",
        "generated_code": "def sum_average(n: int) -> tuple:\n    total_sum = n * (n + 1) // 2\n    average = total_sum / n\n    return total_sum, average\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/599",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find sum and average of first n natural numbers.",
        "generated_code": "def sum_average(n):\n    # Calculate the sum using the formula for the sum of the first n natural numbers\n    total_sum = n * (n + 1) // 2\n    \n    # Calculate the average\n    average = total_sum / n\n    \n    # Return the result as a tuple\n    return (total_sum, average)\n\n# Test cases\nassert sum_average(10) == (55, 5.5)\nassert sum_average(15) == (120, 8.0)\nassert sum_average(20) == (210, 10.5)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/781",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to check whether the count of divisors is even.",
        "generated_code": "def count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count % 2 == 0\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/781",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to check whether the count of divisors is even.",
        "generated_code": "def count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1  # Perfect square case\n            else:\n                count += 2  # Both i and n // i are divisors\n    return count % 2 == 0\n\n# Tests\nassert count_divisors(10)\nassert not count_divisors(100)\nassert count_divisors(125)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/436",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to return the negative numbers in a list.",
        "generated_code": "def neg_nos(lst):\n    return [x for x in lst if x < 0]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/436",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to return the negative numbers in a list.",
        "generated_code": "def neg_nos(nums):\n    return [num for num in nums if num < 0]\n\n# Test cases\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\nassert neg_nos([-1,-2,3,4]) == [-1,-2]\nassert neg_nos([-7,-6,8,9]) == [-7,-6]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/412",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to remove odd numbers from a given list.",
        "generated_code": "def remove_odd(nums):\n    return [num for num in nums if num % 2 == 0]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/412",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to remove odd numbers from a given list.",
        "generated_code": "def remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]\n\n# Tests to verify the function works as expected\nassert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/125",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "generated_code": "def find_length(s):\n    max_diff = 0\n    zeros, ones = 0, 0\n    for char in s:\n        if char == '0':\n            zeros += 1\n        else:\n            ones += 1\n        max_diff = max(max_diff, abs(zeros - ones))\n    return max_diff\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                "11000010001"
            ],
            "expected": 6,
            "got": 4
        }
    },
    {
        "task_id": "Mbpp/125",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "generated_code": "def find_length(binary_string: str) -> int:\n    # Transform the binary string into an array of +1 and -1\n    transformed = [1 if char == '0' else -1 for char in binary_string]\n    \n    # Initialize variables for Kadane's algorithm\n    max_diff = float('-inf')\n    current_diff = 0\n    \n    for value in transformed:\n        current_diff += value\n        if current_diff > max_diff:\n            max_diff = current_diff\n        if current_diff < 0:\n            current_diff = 0\n    \n    return max_diff\n\n# Tests\nassert find_length(\"11000010001\") == 6\nassert find_length(\"10111\") == 1\nassert find_length(\"11011101100101\") == 2\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                ""
            ],
            "expected": 0,
            "got": -Infinity
        }
    }
]