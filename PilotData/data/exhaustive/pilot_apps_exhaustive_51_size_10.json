[
    {
        "task_id": "0076",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Berland Football Cup starts really soon! Commentators from all over the world come to the event.\n\nOrganizers have already built $n$ commentary boxes. $m$ regional delegations will come to the Cup. Every delegation should get the same number of the commentary boxes. If any box is left unoccupied then the delegations will be upset. So each box should be occupied by exactly one delegation.\n\nIf $n$ is not divisible by $m$, it is impossible to distribute the boxes to the delegations at the moment.\n\nOrganizers can build a new commentary box paying $a$ burles and demolish a commentary box paying $b$ burles. They can both build and demolish boxes arbitrary number of times (each time paying a corresponding fee). It is allowed to demolish all the existing boxes.\n\nWhat is the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by $m$)?\n\n\n-----Input-----\n\nThe only line contains four integer numbers $n$, $m$, $a$ and $b$ ($1 \\le n, m \\le 10^{12}$, $1 \\le a, b \\le 100$), where $n$ is the initial number of the commentary boxes, $m$ is the number of delegations to come, $a$ is the fee to build a box and $b$ is the fee to demolish a box.\n\n\n-----Output-----\n\nOutput the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by $m$). It is allowed that the final number of the boxes is equal to $0$.\n\n\n-----Examples-----\nInput\n9 7 3 8\n\nOutput\n15\n\nInput\n2 7 3 7\n\nOutput\n14\n\nInput\n30 6 17 19\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example organizers can build $5$ boxes to make the total of $14$ paying $3$ burles for the each of them.\n\nIn the second example organizers can demolish $2$ boxes to make the total of $0$ paying $7$ burles for the each of them.\n\nIn the third example organizers are already able to distribute all the boxes equally among the delegations, each one get $5$ boxes.",
        "generated_code": "n, m, a, b = map(int, input().split())\nr = n % m\nif r == 0:\n    print(0)\nelse:\n    if m - r <= n:\n        print(min((m - r) * a, r * b))\n    else:\n        print((m - r) * a)\n",
        "counter_example": {
            "input": "2 7 3 7\n",
            "expected": "14\n",
            "got": "15"
        }
    },
    {
        "task_id": "0076",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Berland Football Cup starts really soon! Commentators from all over the world come to the event.\n\nOrganizers have already built $n$ commentary boxes. $m$ regional delegations will come to the Cup. Every delegation should get the same number of the commentary boxes. If any box is left unoccupied then the delegations will be upset. So each box should be occupied by exactly one delegation.\n\nIf $n$ is not divisible by $m$, it is impossible to distribute the boxes to the delegations at the moment.\n\nOrganizers can build a new commentary box paying $a$ burles and demolish a commentary box paying $b$ burles. They can both build and demolish boxes arbitrary number of times (each time paying a corresponding fee). It is allowed to demolish all the existing boxes.\n\nWhat is the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by $m$)?\n\n\n-----Input-----\n\nThe only line contains four integer numbers $n$, $m$, $a$ and $b$ ($1 \\le n, m \\le 10^{12}$, $1 \\le a, b \\le 100$), where $n$ is the initial number of the commentary boxes, $m$ is the number of delegations to come, $a$ is the fee to build a box and $b$ is the fee to demolish a box.\n\n\n-----Output-----\n\nOutput the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by $m$). It is allowed that the final number of the boxes is equal to $0$.\n\n\n-----Examples-----\nInput\n9 7 3 8\n\nOutput\n15\n\nInput\n2 7 3 7\n\nOutput\n14\n\nInput\n30 6 17 19\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example organizers can build $5$ boxes to make the total of $14$ paying $3$ burles for the each of them.\n\nIn the second example organizers can demolish $2$ boxes to make the total of $0$ paying $7$ burles for the each of them.\n\nIn the third example organizers are already able to distribute all the boxes equally among the delegations, each one get $5$ boxes.",
        "generated_code": "# Reading input\nn, m, a, b = map(int, input().split())\n\n# Calculating the remainder of n divided by m\nremainder = n % m\n\n# If n is already divisible by m, no cost is needed\nif remainder == 0:\n    print(0)\nelse:\n    # Calculating the cost to add boxes\n    add_boxes_cost = (m - remainder) * a\n    # Calculating the cost to remove boxes\n    remove_boxes_cost = remainder * b\n\n    # Output the minimum cost\n    print(min(add_boxes_cost, remove_boxes_cost))\n",
        "counter_example": null
    },
    {
        "task_id": "0038",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Running with barriers on the circle track is very popular in the country where Dasha lives, so no wonder that on her way to classes she saw the following situation:\n\nThe track is the circle with length L, in distinct points of which there are n barriers. Athlete always run the track in counterclockwise direction if you look on him from above. All barriers are located at integer distance from each other along the track. \n\nHer friends the parrot Kefa and the leopard Sasha participated in competitions and each of them ran one lap. Each of the friends started from some integral point on the track. Both friends wrote the distance from their start along the track to each of the n barriers. Thus, each of them wrote n integers in the ascending order, each of them was between 0 and L - 1, inclusively. [Image] Consider an example. Let L = 8, blue points are barriers, and green points are Kefa's start (A) and Sasha's start (B). Then Kefa writes down the sequence [2, 4, 6], and Sasha writes down [1, 5, 7]. \n\nThere are several tracks in the country, all of them have same length and same number of barriers, but the positions of the barriers can differ among different tracks. Now Dasha is interested if it is possible that Kefa and Sasha ran the same track or they participated on different tracks. \n\nWrite the program which will check that Kefa's and Sasha's tracks coincide (it means that one can be obtained from the other by changing the start position). Note that they always run the track in one direction — counterclockwise, if you look on a track from above. \n\n\n-----Input-----\n\nThe first line contains two integers n and L (1 ≤ n ≤ 50, n ≤ L ≤ 100) — the number of barriers on a track and its length. \n\nThe second line contains n distinct integers in the ascending order — the distance from Kefa's start to each barrier in the order of its appearance. All integers are in the range from 0 to L - 1 inclusively.\n\nThe second line contains n distinct integers in the ascending order — the distance from Sasha's start to each barrier in the order of its overcoming. All integers are in the range from 0 to L - 1 inclusively.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes), if Kefa and Sasha ran the coinciding tracks (it means that the position of all barriers coincides, if they start running from the same points on the track). Otherwise print \"NO\" (without quotes).\n\n\n-----Examples-----\nInput\n3 8\n2 4 6\n1 5 7\n\nOutput\nYES\n\nInput\n4 9\n2 3 5 8\n0 1 3 6\n\nOutput\nYES\n\nInput\n2 4\n1 3\n1 2\n\nOutput\nNO\n\n\n\n-----Note-----\n\nThe first test is analyzed in the statement.",
        "generated_code": "n, L = map(int, input().split())\nkefa = list(map(int, input().split()))\nsasha = list(map(int, input().split()))\n\ndef normalize(arr, L):\n    arr = [(x - min(arr)) % L for x in arr]\n    arr.sort()\n    return arr\n\nkefa_norm = normalize(kefa, L)\nsasha_norm = normalize(sasha, L)\n\nprint(\"YES\" if kefa_norm == sasha_norm else \"NO\")\n",
        "counter_example": {
            "input": "3 8\n2 4 6\n1 5 7\n",
            "expected": "YES\n",
            "got": "NO"
        }
    },
    {
        "task_id": "0038",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Running with barriers on the circle track is very popular in the country where Dasha lives, so no wonder that on her way to classes she saw the following situation:\n\nThe track is the circle with length L, in distinct points of which there are n barriers. Athlete always run the track in counterclockwise direction if you look on him from above. All barriers are located at integer distance from each other along the track. \n\nHer friends the parrot Kefa and the leopard Sasha participated in competitions and each of them ran one lap. Each of the friends started from some integral point on the track. Both friends wrote the distance from their start along the track to each of the n barriers. Thus, each of them wrote n integers in the ascending order, each of them was between 0 and L - 1, inclusively. [Image] Consider an example. Let L = 8, blue points are barriers, and green points are Kefa's start (A) and Sasha's start (B). Then Kefa writes down the sequence [2, 4, 6], and Sasha writes down [1, 5, 7]. \n\nThere are several tracks in the country, all of them have same length and same number of barriers, but the positions of the barriers can differ among different tracks. Now Dasha is interested if it is possible that Kefa and Sasha ran the same track or they participated on different tracks. \n\nWrite the program which will check that Kefa's and Sasha's tracks coincide (it means that one can be obtained from the other by changing the start position). Note that they always run the track in one direction — counterclockwise, if you look on a track from above. \n\n\n-----Input-----\n\nThe first line contains two integers n and L (1 ≤ n ≤ 50, n ≤ L ≤ 100) — the number of barriers on a track and its length. \n\nThe second line contains n distinct integers in the ascending order — the distance from Kefa's start to each barrier in the order of its appearance. All integers are in the range from 0 to L - 1 inclusively.\n\nThe second line contains n distinct integers in the ascending order — the distance from Sasha's start to each barrier in the order of its overcoming. All integers are in the range from 0 to L - 1 inclusively.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes), if Kefa and Sasha ran the coinciding tracks (it means that the position of all barriers coincides, if they start running from the same points on the track). Otherwise print \"NO\" (without quotes).\n\n\n-----Examples-----\nInput\n3 8\n2 4 6\n1 5 7\n\nOutput\nYES\n\nInput\n4 9\n2 3 5 8\n0 1 3 6\n\nOutput\nYES\n\nInput\n2 4\n1 3\n1 2\n\nOutput\nNO\n\n\n\n-----Note-----\n\nThe first test is analyzed in the statement.",
        "generated_code": "def are_tracks_same(n, L, kefa, sasha):\n    def get_differences(arr):\n        return [(arr[(i + 1) % n] - arr[i]) % L for i in range(n)]\n    \n    kefa_diff = get_differences(kefa)\n    sasha_diff = get_differences(sasha)\n    \n    for i in range(n):\n        if sasha_diff[i:] + sasha_diff[:i] == kefa_diff:\n            return \"YES\"\n    \n    return \"NO\"\n\n# Reading input\nn, L = map(int, input().split())\nkefa = list(map(int, input().split()))\nsasha = list(map(int, input().split()))\n\n# Output result\nprint(are_tracks_same(n, L, kefa, sasha))\n",
        "counter_example": null
    },
    {
        "task_id": "0164",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "It's a beautiful April day and Wallace is playing football with his friends. But his friends do not know that Wallace actually stayed home with Gromit and sent them his robotic self instead. Robo-Wallace has several advantages over the other guys. For example, he can hit the ball directly to the specified point. And yet, the notion of a giveaway is foreign to him. The combination of these features makes the Robo-Wallace the perfect footballer — as soon as the ball gets to him, he can just aim and hit the goal. He followed this tactics in the first half of the match, but he hit the goal rarely. The opposing team has a very good goalkeeper who catches most of the balls that fly directly into the goal. But Robo-Wallace is a quick thinker, he realized that he can cheat the goalkeeper. After all, they are playing in a football box with solid walls. Robo-Wallace can kick the ball to the other side, then the goalkeeper will not try to catch the ball. Then, if the ball bounces off the wall and flies into the goal, the goal will at last be scored.\n\nYour task is to help Robo-Wallace to detect a spot on the wall of the football box, to which the robot should kick the ball, so that the ball bounces once and only once off this wall and goes straight to the goal. In the first half of the match Robo-Wallace got a ball in the head and was severely hit. As a result, some of the schemes have been damaged. Because of the damage, Robo-Wallace can only aim to his right wall (Robo-Wallace is standing with his face to the opposing team's goal).\n\nThe football box is rectangular. Let's introduce a two-dimensional coordinate system so that point (0, 0) lies in the lower left corner of the field, if you look at the box above. Robo-Wallace is playing for the team, whose goal is to the right. It is an improvised football field, so the gate of Robo-Wallace's rivals may be not in the middle of the left wall. [Image] \n\nIn the given coordinate system you are given:   y_1, y_2 — the y-coordinates of the side pillars of the goalposts of robo-Wallace's opponents;  y_{w} — the y-coordinate of the wall to which Robo-Wallace is aiming;  x_{b}, y_{b} — the coordinates of the ball's position when it is hit;  r — the radius of the ball. \n\nA goal is scored when the center of the ball crosses the OY axis in the given coordinate system between (0, y_1) and (0, y_2). The ball moves along a straight line. The ball's hit on the wall is perfectly elastic (the ball does not shrink from the hit), the angle of incidence equals the angle of reflection. If the ball bounces off the wall not to the goal, that is, if it hits the other wall or the goal post, then the opposing team catches the ball and Robo-Wallace starts looking for miscalculation and gets dysfunctional. Such an outcome, if possible, should be avoided. We assume that the ball touches an object, if the distance from the center of the ball to the object is no greater than the ball radius r.\n\n\n-----Input-----\n\nThe first and the single line contains integers y_1, y_2, y_{w}, x_{b}, y_{b}, r (1 ≤ y_1, y_2, y_{w}, x_{b}, y_{b} ≤ 10^6; y_1 < y_2 < y_{w}; y_{b} + r < y_{w}; 2·r < y_2 - y_1).\n\nIt is guaranteed that the ball is positioned correctly in the field, doesn't cross any wall, doesn't touch the wall that Robo-Wallace is aiming at. The goal posts can't be located in the field corners.\n\n\n-----Output-----\n\nIf Robo-Wallace can't score a goal in the described manner, print \"-1\" (without the quotes). Otherwise, print a single number x_{w} — the abscissa of his point of aiming. \n\nIf there are multiple points of aiming, print the abscissa of any of them. When checking the correctness of the answer, all comparisons are made with the permissible absolute error, equal to 10^{ - 8}. \n\nIt is recommended to print as many characters after the decimal point as possible.\n\n\n-----Examples-----\nInput\n4 10 13 10 3 1\n\nOutput\n4.3750000000\n\nInput\n1 4 6 2 2 1\n\nOutput\n-1\n\nInput\n3 10 15 17 9 2\n\nOutput\n11.3333333333\n\n\n\n-----Note-----\n\nNote that in the first and third samples other correct values of abscissa x_{w} are also possible.",
        "generated_code": "def calculate_xw(y1, y2, y_w, x_b, y_b, r):\n    # Calculate the slope of the line from the ball to the goal\n    m = (y2 - y1) / (0 - x_b)\n    \n    # Calculate the y-intercept of the line from the ball to the goal\n    b = y_b - m * x_b\n    \n    # Calculate the x-coordinate of the point where the ball hits the wall\n    x_w = (y_w - b) / m\n    \n    # Check if the ball hits the wall and bounces into the goal\n    if x_w > x_b and y_w - r <= m * x_w + b <= y_w + r:\n        return x_w\n    else:\n        return -1\n\ny1, y2, y_w, x_b, y_b, r = map(int, input().split())\nx_w = calculate_xw(y1, y2, y_w, x_b, y_b, r)\nprint('{:.8f}'.format(x_w) if x_w != -1 else '-1')\n",
        "counter_example": {
            "input": "4 10 13 10 3 1\n",
            "expected": "4.3750000000\n",
            "got": "-1"
        }
    },
    {
        "task_id": "0164",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "It's a beautiful April day and Wallace is playing football with his friends. But his friends do not know that Wallace actually stayed home with Gromit and sent them his robotic self instead. Robo-Wallace has several advantages over the other guys. For example, he can hit the ball directly to the specified point. And yet, the notion of a giveaway is foreign to him. The combination of these features makes the Robo-Wallace the perfect footballer — as soon as the ball gets to him, he can just aim and hit the goal. He followed this tactics in the first half of the match, but he hit the goal rarely. The opposing team has a very good goalkeeper who catches most of the balls that fly directly into the goal. But Robo-Wallace is a quick thinker, he realized that he can cheat the goalkeeper. After all, they are playing in a football box with solid walls. Robo-Wallace can kick the ball to the other side, then the goalkeeper will not try to catch the ball. Then, if the ball bounces off the wall and flies into the goal, the goal will at last be scored.\n\nYour task is to help Robo-Wallace to detect a spot on the wall of the football box, to which the robot should kick the ball, so that the ball bounces once and only once off this wall and goes straight to the goal. In the first half of the match Robo-Wallace got a ball in the head and was severely hit. As a result, some of the schemes have been damaged. Because of the damage, Robo-Wallace can only aim to his right wall (Robo-Wallace is standing with his face to the opposing team's goal).\n\nThe football box is rectangular. Let's introduce a two-dimensional coordinate system so that point (0, 0) lies in the lower left corner of the field, if you look at the box above. Robo-Wallace is playing for the team, whose goal is to the right. It is an improvised football field, so the gate of Robo-Wallace's rivals may be not in the middle of the left wall. [Image] \n\nIn the given coordinate system you are given:   y_1, y_2 — the y-coordinates of the side pillars of the goalposts of robo-Wallace's opponents;  y_{w} — the y-coordinate of the wall to which Robo-Wallace is aiming;  x_{b}, y_{b} — the coordinates of the ball's position when it is hit;  r — the radius of the ball. \n\nA goal is scored when the center of the ball crosses the OY axis in the given coordinate system between (0, y_1) and (0, y_2). The ball moves along a straight line. The ball's hit on the wall is perfectly elastic (the ball does not shrink from the hit), the angle of incidence equals the angle of reflection. If the ball bounces off the wall not to the goal, that is, if it hits the other wall or the goal post, then the opposing team catches the ball and Robo-Wallace starts looking for miscalculation and gets dysfunctional. Such an outcome, if possible, should be avoided. We assume that the ball touches an object, if the distance from the center of the ball to the object is no greater than the ball radius r.\n\n\n-----Input-----\n\nThe first and the single line contains integers y_1, y_2, y_{w}, x_{b}, y_{b}, r (1 ≤ y_1, y_2, y_{w}, x_{b}, y_{b} ≤ 10^6; y_1 < y_2 < y_{w}; y_{b} + r < y_{w}; 2·r < y_2 - y_1).\n\nIt is guaranteed that the ball is positioned correctly in the field, doesn't cross any wall, doesn't touch the wall that Robo-Wallace is aiming at. The goal posts can't be located in the field corners.\n\n\n-----Output-----\n\nIf Robo-Wallace can't score a goal in the described manner, print \"-1\" (without the quotes). Otherwise, print a single number x_{w} — the abscissa of his point of aiming. \n\nIf there are multiple points of aiming, print the abscissa of any of them. When checking the correctness of the answer, all comparisons are made with the permissible absolute error, equal to 10^{ - 8}. \n\nIt is recommended to print as many characters after the decimal point as possible.\n\n\n-----Examples-----\nInput\n4 10 13 10 3 1\n\nOutput\n4.3750000000\n\nInput\n1 4 6 2 2 1\n\nOutput\n-1\n\nInput\n3 10 15 17 9 2\n\nOutput\n11.3333333333\n\n\n\n-----Note-----\n\nNote that in the first and third samples other correct values of abscissa x_{w} are also possible.",
        "generated_code": "def find_aiming_point(y1, y2, yw, xb, yb, r):\n    # Boundary conditions check\n    if yb + r >= yw or y1 >= y2 or y1 + r >= y2 - r:\n        return -1\n\n    # Calculate the intersection point on the right wall\n    # Using the geometry and reflection properties\n    # The goal is to find the x_w such that the ball bounces and hits the goal\n    \n    # Using the fact that the reflection point must maintain the property of the line\n    # We use the formula derived from the reflection geometry\n    # slope = (yb - y_w) / (xb - x_w)\n    # reflected_slope = (y_w - goal_y) / (x_w)\n    \n    # Choose a point on the goal line within the goal range\n    y_goal_mid = (y1 + y2) / 2\n    if y_goal_mid - r < y1 or y_goal_mid + r > y2:\n        return -1\n\n    # Calculate x_w\n    x_w = xb - (2 * (yb - y_goal_mid) * (xb - 0)) / (y_goal_mid - yb)\n    \n    if x_w <= 0:\n        return -1\n\n    return x_w\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().strip().split()\n\ny1 = int(data[0])\ny2 = int(data[1])\nyw = int(data[2])\nxb = int(data[3])\nyb = int(data[4])\nr = int(data[5])\n\n# Calculate the result\nresult = find_aiming_point(y1, y2, yw, xb, yb, r)\nif result == -1:\n    print(result)\nelse:\n    print(f\"{result:.10f}\")\n",
        "counter_example": {
            "input": "4 10 13 10 3 1\n",
            "expected": "4.3750000000\n",
            "got": "30.0000000000"
        }
    },
    {
        "task_id": "0184",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "You are at a water bowling training. There are l people who play with their left hand, r people, who play with their right hand, and a ambidexters, who can play with left or right hand.\n\nThe coach decided to form a team of even number of players, exactly half of the players should play with their right hand, and exactly half of the players should play with their left hand. One player should use only on of his hands.\n\nAmbidexters play as well with their right hand as with their left hand. In the team, an ambidexter can play with their left hand, or with their right hand.\n\nPlease find the maximum possible size of the team, where equal number of players use their left and right hands, respectively.\n\n\n-----Input-----\n\nThe only line contains three integers l, r and a (0 ≤ l, r, a ≤ 100) — the number of left-handers, the number of right-handers and the number of ambidexters at the training. \n\n\n-----Output-----\n\nPrint a single even integer — the maximum number of players in the team. It is possible that the team can only have zero number of players.\n\n\n-----Examples-----\nInput\n1 4 2\n\nOutput\n6\n\nInput\n5 5 5\n\nOutput\n14\n\nInput\n0 2 0\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example you can form a team of 6 players. You should take the only left-hander and two ambidexters to play with left hand, and three right-handers to play with right hand. The only person left can't be taken into the team.\n\nIn the second example you can form a team of 14 people. You have to take all five left-handers, all five right-handers, two ambidexters to play with left hand and two ambidexters to play with right hand.",
        "generated_code": "l, r, a = map(int, input().split())\nteam_size = min(l, r) * 2\nextra_players = (a // 2) * 2\nprint(team_size + extra_players)\n",
        "counter_example": {
            "input": "1 4 2\n",
            "expected": "6\n",
            "got": "4"
        }
    },
    {
        "task_id": "0184",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "You are at a water bowling training. There are l people who play with their left hand, r people, who play with their right hand, and a ambidexters, who can play with left or right hand.\n\nThe coach decided to form a team of even number of players, exactly half of the players should play with their right hand, and exactly half of the players should play with their left hand. One player should use only on of his hands.\n\nAmbidexters play as well with their right hand as with their left hand. In the team, an ambidexter can play with their left hand, or with their right hand.\n\nPlease find the maximum possible size of the team, where equal number of players use their left and right hands, respectively.\n\n\n-----Input-----\n\nThe only line contains three integers l, r and a (0 ≤ l, r, a ≤ 100) — the number of left-handers, the number of right-handers and the number of ambidexters at the training. \n\n\n-----Output-----\n\nPrint a single even integer — the maximum number of players in the team. It is possible that the team can only have zero number of players.\n\n\n-----Examples-----\nInput\n1 4 2\n\nOutput\n6\n\nInput\n5 5 5\n\nOutput\n14\n\nInput\n0 2 0\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example you can form a team of 6 players. You should take the only left-hander and two ambidexters to play with left hand, and three right-handers to play with right hand. The only person left can't be taken into the team.\n\nIn the second example you can form a team of 14 people. You have to take all five left-handers, all five right-handers, two ambidexters to play with left hand and two ambidexters to play with right hand.",
        "generated_code": "l, r, a = map(int, input().split())\n\n# Step 1: Balance the number of left-handers and right-handers using ambidexters\n# First, equalize l and r using ambidexters\nif l < r:\n    l += min(a, r - l)\n    a -= min(a, r - l)\nelif r < l:\n    r += min(a, l - r)\n    a -= min(a, l - r)\n\n# Step 2: If there are still ambidexters left, they should be used in pairs\n# Each pair of ambidexters can add 2 to the team, one for each side\nmax_team_size = l + r + (a // 2) * 2\n\n# Ensure the team size is even\nif max_team_size % 2 != 0:\n    max_team_size -= 1\n\nprint(max_team_size)\n",
        "counter_example": {
            "input": "0 2 0\n",
            "expected": "0\n",
            "got": "2"
        }
    },
    {
        "task_id": "0032",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "In this problem we assume the Earth to be a completely round ball and its surface a perfect sphere. The length of the equator and any meridian is considered to be exactly 40 000 kilometers. Thus, travelling from North Pole to South Pole or vice versa takes exactly 20 000 kilometers.\n\nLimak, a polar bear, lives on the North Pole. Close to the New Year, he helps somebody with delivering packages all around the world. Instead of coordinates of places to visit, Limak got a description how he should move, assuming that he starts from the North Pole. The description consists of n parts. In the i-th part of his journey, Limak should move t_{i} kilometers in the direction represented by a string dir_{i} that is one of: \"North\", \"South\", \"West\", \"East\".\n\nLimak isn’t sure whether the description is valid. You must help him to check the following conditions:  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the North Pole, he can move only to the South.  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the South Pole, he can move only to the North.  The journey must end on the North Pole. \n\nCheck if the above conditions are satisfied and print \"YES\" or \"NO\" on a single line.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 50).\n\nThe i-th of next n lines contains an integer t_{i} and a string dir_{i} (1 ≤ t_{i} ≤ 10^6, $\\operatorname{dir}_{i} \\in \\{\\text{North, South, West, East} \\}$) — the length and the direction of the i-th part of the journey, according to the description Limak got.\n\n\n-----Output-----\n\nPrint \"YES\" if the description satisfies the three conditions, otherwise print \"NO\", both without the quotes.\n\n\n-----Examples-----\nInput\n5\n7500 South\n10000 East\n3500 North\n4444 West\n4000 North\n\nOutput\nYES\n\nInput\n2\n15000 South\n4000 East\n\nOutput\nNO\n\nInput\n5\n20000 South\n1000 North\n1000000 West\n9000 North\n10000 North\n\nOutput\nYES\n\nInput\n3\n20000 South\n10 East\n20000 North\n\nOutput\nNO\n\nInput\n2\n1000 North\n1000 South\n\nOutput\nNO\n\nInput\n4\n50 South\n50 North\n15000 South\n15000 North\n\nOutput\nYES\n\n\n\n-----Note-----\n\nDrawings below show how Limak's journey would look like in first two samples. In the second sample the answer is \"NO\" because he doesn't end on the North Pole. [Image]",
        "generated_code": "n = int(input())\ncurr_lat = 90\nfor _ in range(n):\n    t, dir = input().split()\n    t = int(t)\n    if dir == \"North\":\n        curr_lat += t / 111.195\n    elif dir == \"South\":\n        curr_lat -= t / 111.195\n    else:\n        continue\n    if curr_lat < -90 or curr_lat > 90:\n        print(\"NO\")\n        exit()\n    if curr_lat == -90 and dir != \"North\":\n        print(\"NO\")\n        exit()\n    if curr_lat == 90 and dir != \"South\":\n        print(\"NO\")\n        exit()\nprint(\"YES\" if curr_lat == 90 else \"NO\")\n",
        "counter_example": {
            "input": "5\n7500 South\n10000 East\n3500 North\n4444 West\n4000 North\n",
            "expected": "YES\n",
            "got": "NO"
        }
    },
    {
        "task_id": "0032",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "In this problem we assume the Earth to be a completely round ball and its surface a perfect sphere. The length of the equator and any meridian is considered to be exactly 40 000 kilometers. Thus, travelling from North Pole to South Pole or vice versa takes exactly 20 000 kilometers.\n\nLimak, a polar bear, lives on the North Pole. Close to the New Year, he helps somebody with delivering packages all around the world. Instead of coordinates of places to visit, Limak got a description how he should move, assuming that he starts from the North Pole. The description consists of n parts. In the i-th part of his journey, Limak should move t_{i} kilometers in the direction represented by a string dir_{i} that is one of: \"North\", \"South\", \"West\", \"East\".\n\nLimak isn’t sure whether the description is valid. You must help him to check the following conditions:  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the North Pole, he can move only to the South.  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the South Pole, he can move only to the North.  The journey must end on the North Pole. \n\nCheck if the above conditions are satisfied and print \"YES\" or \"NO\" on a single line.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 50).\n\nThe i-th of next n lines contains an integer t_{i} and a string dir_{i} (1 ≤ t_{i} ≤ 10^6, $\\operatorname{dir}_{i} \\in \\{\\text{North, South, West, East} \\}$) — the length and the direction of the i-th part of the journey, according to the description Limak got.\n\n\n-----Output-----\n\nPrint \"YES\" if the description satisfies the three conditions, otherwise print \"NO\", both without the quotes.\n\n\n-----Examples-----\nInput\n5\n7500 South\n10000 East\n3500 North\n4444 West\n4000 North\n\nOutput\nYES\n\nInput\n2\n15000 South\n4000 East\n\nOutput\nNO\n\nInput\n5\n20000 South\n1000 North\n1000000 West\n9000 North\n10000 North\n\nOutput\nYES\n\nInput\n3\n20000 South\n10 East\n20000 North\n\nOutput\nNO\n\nInput\n2\n1000 North\n1000 South\n\nOutput\nNO\n\nInput\n4\n50 South\n50 North\n15000 South\n15000 North\n\nOutput\nYES\n\n\n\n-----Note-----\n\nDrawings below show how Limak's journey would look like in first two samples. In the second sample the answer is \"NO\" because he doesn't end on the North Pole. [Image]",
        "generated_code": "n = int(input())\nposition = 0  # Start at the North Pole\n\nvalid = True\n\nfor _ in range(n):\n    t, dir = input().split()\n    t = int(t)\n    \n    if dir == \"North\":\n        if position - t < 0:\n            valid = False\n        position -= t\n    elif dir == \"South\":\n        if position + t > 20000:\n            valid = False\n        position += t\n    elif dir in (\"West\", \"East\"):\n        if position == 0 or position == 20000:\n            valid = False\n    \n    if position < 0 or position > 20000:\n        valid = False\n\nif position != 0:\n    valid = False\n\nif valid:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
        "counter_example": null
    }
]