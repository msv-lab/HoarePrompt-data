[
    {
        "task_id": "Mbpp/766",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to return a list of all pairs of consecutive items in a given list.",
        "generated_code": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/766",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to return a list of all pairs of consecutive items in a given list.",
        "generated_code": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\n# Test cases\nassert pair_wise([1,1,2,3,3,4,4,5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10]) == [(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([5,1,9,7,10]) == [(5, 1), (1, 9), (9, 7), (7, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/240",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "generated_code": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/240",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
        "generated_code": "def replace_list(list1, list2):\n    return list1[:-1] + list2\n\n# Test cases\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1, 2, 3, 4, 5],[5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert replace_list([\"red\", \"blue\", \"green\"],[\"yellow\"]) == [\"red\", \"blue\", \"yellow\"]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/429",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "generated_code": "def and_tuples(tup1, tup2):\n    return tuple(bin(a & b).count('1') for a, b in zip(tup1, tup2))\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    10,
                    4,
                    6,
                    9
                ],
                [
                    5,
                    2,
                    3,
                    3
                ]
            ],
            "expected": [
                0,
                0,
                2,
                1
            ],
            "got": [
                0,
                0,
                1,
                1
            ]
        }
    },
    {
        "task_id": "Mbpp/429",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "generated_code": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))\n\n# Testing the function with the provided test cases\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/767",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,",
        "generated_code": "def get_pairs_count(nums, target_sum):\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    \n    count = 0\n    for num in num_count:\n        complement = target_sum - num\n        if complement in num_count:\n            if complement == num:\n                count += num_count[num] * (num_count[num] - 1) // 2\n            else:\n                count += num_count[num] * num_count[complement]\n    \n    return count\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    1,
                    5,
                    7,
                    -1,
                    5
                ],
                6
            ],
            "expected": 3.0,
            "got": 6
        }
    },
    {
        "task_id": "Mbpp/767",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,",
        "generated_code": "def get_pairs_count(arr, target_sum):\n    count = 0\n    freq = {}\n    \n    for num in arr:\n        complement = target_sum - num\n        if complement in freq:\n            count += freq[complement]\n        \n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    return count\n\n# Tests\nassert get_pairs_count([1,1,1,1],2) == 6\nassert get_pairs_count([1,5,7,-1,5],6) == 3\nassert get_pairs_count([1,-2,3],1) == 1\nassert get_pairs_count([-1,-2,3],-3) == 1\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/67",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "generated_code": "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][n]\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                2
            ],
            "expected": 2,
            "got": 5
        }
    },
    {
        "task_id": "Mbpp/67",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the number of ways to partition a set of Bell numbers.",
        "generated_code": "def bell_number(n):\n    if n == 0: \n        return 1\n    \n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    bell[0][0] = 1\n    \n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        \n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]\n\n# Tests\nassert bell_number(2) == 2\nassert bell_number(10) == 115975\nassert bell_number(56) == 6775685320645824322581483068371419745979053216268760300\n\n",
        "counter_example": null
    }
]