[
    {
        "task_id": "Mbpp/743",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to rotate a given list by specified number of items to the right direction.",
        "generated_code": "def rotate_right(input_list, num_rotations):\n    num_rotations = num_rotations % len(input_list)\n    return input_list[-num_rotations:] + input_list[:-num_rotations]\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [],
                0
            ],
            "expected": [],
            "got": null
        }
    },
    {
        "task_id": "Mbpp/743",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to rotate a given list by specified number of items to the right direction.",
        "generated_code": "def rotate_right(lst, k):\n    n = len(lst)\n    k = k % n  # Effective rotation\n    return lst[-k:] + lst[:-k]\n\n# Test cases\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [],
                0
            ],
            "expected": [],
            "got": null
        }
    },
    {
        "task_id": "Mbpp/726",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
        "generated_code": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/726",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.",
        "generated_code": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t) - 1))\n\n# Test cases\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\nassert multiply_elements((12,)) == ()\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/632",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to move all zeroes to the end of the given list.",
        "generated_code": "def move_zero(nums):\n    return [num for num in nums if num != 0] + [num for num in nums if num == 0]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/632",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to move all zeroes to the end of the given list.",
        "generated_code": "def move_zero(nums):\n    non_zeroes = [num for num in nums if num != 0]\n    zeroes = [0] * (len(nums) - len(non_zeroes))\n    return non_zeroes + zeroes\n\n# Test cases to verify the function\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/475",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to sort a dictionary by value.",
        "generated_code": "def sort_counter(counter: dict) -> list:\n  return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/475",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to sort a dictionary by value.",
        "generated_code": "def sort_counter(d):\n    return sorted(d.items(), key=lambda item: item[1], reverse=True)\n\n# Tests\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250}) == [('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250}) == [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/597",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find kth element from the given two sorted arrays.",
        "generated_code": "import heapq\n\ndef find_kth(arr1, arr2, k):\n    heap = []\n    heapq.heappush(heap, (arr1[0], 0, arr1))\n    heapq.heappush(heap, (arr2[0], 0, arr2))\n    kth_element = None\n    for _ in range(k):\n        val, idx, arr = heapq.heappop(heap)\n        kth_element = val\n        if idx + 1 < len(arr):\n            heapq.heappush(heap, (arr[idx + 1], idx + 1, arr))\n    return kth_element\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    1,
                    2,
                    3
                ],
                [],
                1
            ],
            "expected": 1,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/597",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to find kth element from the given two sorted arrays.",
        "generated_code": "def find_kth(arr1, arr2, k):\n    i = j = 0\n    merged = []\n    \n    # Merge the two sorted arrays\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    \n    # If there are remaining elements in arr1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    \n    # If there are remaining elements in arr2\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n    \n    # Return the k-th element (1-indexed)\n    return merged[k-1]\n\n# Tests\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    1,
                    2,
                    3
                ],
                [
                    true,
                    true,
                    false
                ],
                3
            ],
            "expected": true,
            "got": false
        }
    }
]