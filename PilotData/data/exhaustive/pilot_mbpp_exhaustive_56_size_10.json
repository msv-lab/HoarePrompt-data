[
    {
        "task_id": "Mbpp/66",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to count the number of positive numbers in a list.",
        "generated_code": "def pos_count(lst):\n    return sum(1 for num in lst if num > 0)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/66",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to count the number of positive numbers in a list.",
        "generated_code": "def pos_count(nums):\n    return len([num for num in nums if num > 0])\n\n# Test cases\nassert pos_count([1, -2, 3, -4]) == 2\nassert pos_count([3, 4, 5, -1]) == 3\nassert pos_count([1, 2, 3, 4]) == 4\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/133",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
        "generated_code": "def sum_negativenum(lst):\n    return sum(x for x in lst if x < 0)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/133",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to calculate the sum of the negative numbers of a given list of numbers.",
        "generated_code": "def sum_negativenum(numbers):\n    return sum(num for num in numbers if num < 0)\n\n# Test cases\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32\nassert sum_negativenum([10, 15, -14, 13, -18, 12, -20]) == -52\nassert sum_negativenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) == -894\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/127",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to multiply two integers.",
        "generated_code": "def multiply_int(a, b):\n    return a * b\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/127",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to multiply two integers.",
        "generated_code": "def multiply_int(a, b):\n    return a * b\n\n# Test cases\nassert multiply_int(10, 20) == 200\nassert multiply_int(5, 10) == 50\nassert multiply_int(4, 8) == 32\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/586",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to split a list at the nth eelment and add the first part to the end.",
        "generated_code": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/586",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to split a list at the nth eelment and add the first part to the end.",
        "generated_code": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n\n# Tests\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/260",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the nth newman–shanks–williams prime number.",
        "generated_code": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams_prime(num):\n        return 2 ** num - ((2 ** num) - 2) // (2 ** (num - 1) - 1)\n\n    count = 0\n    num = 2\n    while True:\n        if is_prime(newman_shanks_williams_prime(num)):\n            count += 1\n            if count == n:\n                return newman_shanks_williams_prime(num)\n        num += 1\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                3
            ],
            "expected": 7,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/260",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the nth newman–shanks–williams prime number.",
        "generated_code": "def newman_prime(n):\n    if n == 0 or n == 1:\n        return 1\n    \n    S0, S1 = 1, 1\n    for i in range(2, n+1):\n        S_next = 2 * S1 + S0\n        S0, S1 = S1, S_next\n    return S1\n\n# Test cases\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41\n",
        "counter_example": null
    }
]