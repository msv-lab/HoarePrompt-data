[
    {
        "task_id": "Mbpp/744",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to check if the given tuple has any none value or not.",
        "generated_code": "def check_none(tup):\n    return any(x is None for x in tup)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/744",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to check if the given tuple has any none value or not.",
        "generated_code": "def check_none(tup):\n    for item in tup:\n        if item is None:\n            return True\n    return False\n\n# Test cases to validate the solution\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/297",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to flatten a given nested list structure.",
        "generated_code": "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/297",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to flatten a given nested list structure.",
        "generated_code": "def flatten_list(nested_list):\n    flat_list = []\n    \n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    \n    return flat_list\n\n# Testing the function with the provided test cases\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/395",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the first non-repeated character in a given string.",
        "generated_code": "def first_non_repeating_character(s: str) -> str:\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/395",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the first non-repeated character in a given string.",
        "generated_code": "def first_non_repeating_character(s: str):\n    # Dictionary to store the frequency of each character\n    char_count = {}\n    \n    # First pass: count the frequency of each character\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Second pass: find the first character with a frequency of one\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    # If no such character exists, return None\n    return None\n\n# Test cases\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/108",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to merge three lists into a single sorted list.",
        "generated_code": "def merge_sorted_list(list1, list2, list3):\n    return sorted(list1 + list2 + list3)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/108",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to merge three lists into a single sorted list.",
        "generated_code": "def merge_sorted_list(list1, list2, list3):\n    # Combine all three lists into one\n    combined_list = list1 + list2 + list3\n    # Sort the combined list\n    sorted_list = sorted(combined_list)\n    return sorted_list\n\n# Provided test cases\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]) == [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41]) == [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/725",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to extract values between quotation marks \" \" of the given string.",
        "generated_code": "import re\n\ndef extract_quotation(s: str) -> list:\n    return re.findall(r'\"([^\"]*)\"', s)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/725",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to extract values between quotation marks \" \" of the given string.",
        "generated_code": "import re\n\ndef extract_quotation(string):\n    # Use regular expression to find all substrings enclosed in double quotes\n    return re.findall(r'\"(.*?)\"', string)\n\n# Test cases\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\nassert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []\n\n# These tests should pass without any assertion errors.\n",
        "counter_example": null
    }
]