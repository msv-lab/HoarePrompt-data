[
    {
        "task_id": "Mbpp/594",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the difference of the first even and first odd number of a given list.",
        "generated_code": "def diff_even_odd(numbers):\n    even_nums = [num for num in numbers if num % 2 == 0]\n    odd_nums = [num for num in numbers if num % 2 != 0]\n    if even_nums and odd_nums:\n        return even_nums[0] - odd_nums[0]\n    elif even_nums:\n        return even_nums[0]\n    elif odd_nums:\n        return -odd_nums[0]\n    else:\n        return 0\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/594",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to find the difference of the first even and first odd number of a given list.",
        "generated_code": "def diff_even_odd(nums):\n    first_even = None\n    first_odd = None\n    \n    for num in nums:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        raise ValueError(\"The list must contain at least one even and one odd number.\")\n    \n    return abs(first_even - first_odd)\n\n# Test cases\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    2,
                    5,
                    3,
                    6,
                    1,
                    4,
                    9,
                    8,
                    7
                ]
            ],
            "expected": -3,
            "got": 3
        }
    },
    {
        "task_id": "Mbpp/577",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to find the last digit in factorial of a given number.",
        "generated_code": "def last_Digit_Factorial(n: int) -> int:\n    if n < 2:\n        return n\n    elif n == 2 or n == 3:\n        return n\n    elif n == 4:\n        return 4\n    else:\n        return 0\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                0
            ],
            "expected": 1,
            "got": 0
        }
    },
    {
        "task_id": "Mbpp/577",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to find the last digit in factorial of a given number.",
        "generated_code": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    else:\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n        return factorial % 10\n\n# Testing the function\nassert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                2.5
            ],
            "expected": 0,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/2",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the shared elements from the given two lists.",
        "generated_code": "def similar_elements(test_tup1, test_tup2):\n  return tuple(sorted(set(test_tup1) & set(test_tup2)))\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                [
                    100,
                    200,
                    400,
                    500
                ]
            ],
            "expected": [
                200,
                100,
                500,
                400
            ],
            "got": [
                100,
                200,
                400,
                500
            ]
        }
    },
    {
        "task_id": "Mbpp/2",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to find the shared elements from the given two lists.",
        "generated_code": "def similar_elements(list1, list2):\n    # Convert both lists to sets and find their intersection\n    common_elements = set(list1) & set(list2)\n    # Convert the result back to a tuple and return\n    return tuple(sorted(common_elements))\n\n# Test cases\nassert similar_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4), (5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13), (17, 15, 14, 13)) == (13, 14)\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    100,
                    200,
                    300,
                    400,
                    500
                ],
                [
                    100,
                    200,
                    400,
                    500
                ]
            ],
            "expected": [
                200,
                100,
                500,
                400
            ],
            "got": [
                100,
                200,
                400,
                500
            ]
        }
    },
    {
        "task_id": "Mbpp/777",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to find the sum of non-repeated elements in a given list.",
        "generated_code": "def find_sum(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    sum_non_repeated = 0\n    for num, count in count_dict.items():\n        if count == 1:\n            sum_non_repeated += num\n    return sum_non_repeated\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    1,
                    2,
                    3,
                    1,
                    1,
                    4,
                    5,
                    6
                ]
            ],
            "expected": 21,
            "got": 20
        }
    },
    {
        "task_id": "Mbpp/777",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the sum of non-repeated elements in a given list.",
        "generated_code": "def find_sum(lst):\n    return sum(set(lst))\n\n# Provided test cases\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\nassert find_sum([1,10,9,4,2,10,10,45,4]) == 71\nassert find_sum([12,10,9,45,2,10,10,45,10]) == 78\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/778",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
        "generated_code": "def pack_consecutive_duplicates(lst):\n    result = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        while i + 1 < len(lst) and lst[i] == lst[i+1]:\n            i += 1\n            count += 1\n        result.append([lst[i]] * count)\n        i += 1\n    return result\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/778",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
        "generated_code": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    packed_list = []\n    current_sublist = [lst[0]]\n    \n    for elem in lst[1:]:\n        if elem == current_sublist[-1]:\n            current_sublist.append(elem)\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [elem]\n    \n    packed_list.append(current_sublist)\n    return packed_list\n\n# Test cases\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]) == [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd']) == [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n",
        "counter_example": null
    }
]