[
    {
        "task_id": "0227",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "You've got a positive integer sequence a_1, a_2, ..., a_{n}. All numbers in the sequence are distinct. Let's fix the set of variables b_1, b_2, ..., b_{m}. Initially each variable b_{i} (1 ≤ i ≤ m) contains the value of zero. Consider the following sequence, consisting of n operations.\n\nThe first operation is assigning the value of a_1 to some variable b_{x} (1 ≤ x ≤ m). Each of the following n - 1 operations is assigning to some variable b_{y} the value that is equal to the sum of values that are stored in the variables b_{i} and b_{j} (1 ≤ i, j, y ≤ m). At that, the value that is assigned on the t-th operation, must equal a_{t}. For each operation numbers y, i, j are chosen anew.\n\nYour task is to find the minimum number of variables m, such that those variables can help you perform the described sequence of operations.\n\n\n-----Input-----\n\nThe first line contains integer n (1 ≤ n ≤ 23). The second line contains n space-separated integers a_1, a_2, ..., a_{n} (1 ≤ a_{k} ≤ 10^9).\n\nIt is guaranteed that all numbers in the sequence are distinct.\n\n\n-----Output-----\n\nIn a single line print a single number — the minimum number of variables m, such that those variables can help you perform the described sequence of operations.\n\nIf you cannot perform the sequence of operations at any m, print -1.\n\n\n-----Examples-----\nInput\n5\n1 2 3 6 8\n\nOutput\n2\n\nInput\n3\n3 6 5\n\nOutput\n-1\n\nInput\n6\n2 4 8 6 10 18\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first sample, you can use two variables b_1 and b_2 to perform the following sequence of operations.  b_1 := 1;  b_2 := b_1 + b_1;  b_1 := b_1 + b_2;  b_1 := b_1 + b_1;  b_1 := b_1 + b_2.",
        "generated_code": "n = int(input())\na = list(map(int, input().split()))\na.sort()\nm = 1\nfor i in range(1, n):\n    if a[i] != a[i-1] * 2:\n        m += 1\nprint(m if m <= 23 else -1)\n",
        "counter_example": {
            "input": "5\n1 2 3 6 8\n",
            "expected": "2\n",
            "got": "3"
        }
    },
    {
        "task_id": "0227",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "You've got a positive integer sequence a_1, a_2, ..., a_{n}. All numbers in the sequence are distinct. Let's fix the set of variables b_1, b_2, ..., b_{m}. Initially each variable b_{i} (1 ≤ i ≤ m) contains the value of zero. Consider the following sequence, consisting of n operations.\n\nThe first operation is assigning the value of a_1 to some variable b_{x} (1 ≤ x ≤ m). Each of the following n - 1 operations is assigning to some variable b_{y} the value that is equal to the sum of values that are stored in the variables b_{i} and b_{j} (1 ≤ i, j, y ≤ m). At that, the value that is assigned on the t-th operation, must equal a_{t}. For each operation numbers y, i, j are chosen anew.\n\nYour task is to find the minimum number of variables m, such that those variables can help you perform the described sequence of operations.\n\n\n-----Input-----\n\nThe first line contains integer n (1 ≤ n ≤ 23). The second line contains n space-separated integers a_1, a_2, ..., a_{n} (1 ≤ a_{k} ≤ 10^9).\n\nIt is guaranteed that all numbers in the sequence are distinct.\n\n\n-----Output-----\n\nIn a single line print a single number — the minimum number of variables m, such that those variables can help you perform the described sequence of operations.\n\nIf you cannot perform the sequence of operations at any m, print -1.\n\n\n-----Examples-----\nInput\n5\n1 2 3 6 8\n\nOutput\n2\n\nInput\n3\n3 6 5\n\nOutput\n-1\n\nInput\n6\n2 4 8 6 10 18\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first sample, you can use two variables b_1 and b_2 to perform the following sequence of operations.  b_1 := 1;  b_2 := b_1 + b_1;  b_1 := b_1 + b_2;  b_1 := b_1 + b_1;  b_1 := b_1 + b_2.",
        "generated_code": "def min_variables(n, a):\n    a.sort()\n    assigned = set()\n    assigned.add(a[0])\n    m = 1\n\n    for i in range(1, n):\n        can_form = False\n        for x in assigned:\n            if (a[i] - x) in assigned:\n                can_form = True\n                break\n        if not can_form:\n            m += 1\n        assigned.add(a[i])\n    \n    return m\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nn = int(data[0])\na = list(map(int, data[1:]))\n\nprint(min_variables(n, a))\n",
        "counter_example": {
            "input": "5\n1 2 3 6 8\n",
            "expected": "2\n",
            "got": "1"
        }
    },
    {
        "task_id": "0171",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "You have probably registered on Internet sites many times. And each time you should enter your invented password. Usually the registration form automatically checks the password's crypt resistance. If the user's password isn't complex enough, a message is displayed. Today your task is to implement such an automatic check.\n\nWeb-developers of the company Q assume that a password is complex enough, if it meets all of the following conditions:  the password length is at least 5 characters;  the password contains at least one large English letter;  the password contains at least one small English letter;  the password contains at least one digit. \n\nYou are given a password. Please implement the automatic check of its complexity for company Q.\n\n\n-----Input-----\n\nThe first line contains a non-empty sequence of characters (at most 100 characters). Each character is either a large English letter, or a small English letter, or a digit, or one of characters: \"!\", \"?\", \".\", \",\", \"_\".\n\n\n-----Output-----\n\nIf the password is complex enough, print message \"Correct\" (without the quotes), otherwise print message \"Too weak\" (without the quotes).\n\n\n-----Examples-----\nInput\nabacaba\n\nOutput\nToo weak\n\nInput\nX12345\n\nOutput\nToo weak\n\nInput\nCONTEST_is_STARTED!!11\n\nOutput\nCorrect",
        "generated_code": "s = input()\nhas_upper = any(c.isupper() for c in s)\nhas_lower = any(c.islower() for c in s)\nhas_digit = any(c.isdigit() for c in s)\nif len(s) >= 5 and has_upper and has_lower and has_digit:\n    print(\"Correct\")\nelse:\n    print(\"Too weak\")\n",
        "counter_example": null
    },
    {
        "task_id": "0171",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "You have probably registered on Internet sites many times. And each time you should enter your invented password. Usually the registration form automatically checks the password's crypt resistance. If the user's password isn't complex enough, a message is displayed. Today your task is to implement such an automatic check.\n\nWeb-developers of the company Q assume that a password is complex enough, if it meets all of the following conditions:  the password length is at least 5 characters;  the password contains at least one large English letter;  the password contains at least one small English letter;  the password contains at least one digit. \n\nYou are given a password. Please implement the automatic check of its complexity for company Q.\n\n\n-----Input-----\n\nThe first line contains a non-empty sequence of characters (at most 100 characters). Each character is either a large English letter, or a small English letter, or a digit, or one of characters: \"!\", \"?\", \".\", \",\", \"_\".\n\n\n-----Output-----\n\nIf the password is complex enough, print message \"Correct\" (without the quotes), otherwise print message \"Too weak\" (without the quotes).\n\n\n-----Examples-----\nInput\nabacaba\n\nOutput\nToo weak\n\nInput\nX12345\n\nOutput\nToo weak\n\nInput\nCONTEST_is_STARTED!!11\n\nOutput\nCorrect",
        "generated_code": "password = input()\n\ndef is_complex(password):\n    if len(password) < 5:\n        return False\n    \n    has_upper = False\n    has_lower = False\n    has_digit = False\n    \n    for char in password:\n        if char.isupper():\n            has_upper = True\n        elif char.islower():\n            has_lower = True\n        elif char.isdigit():\n            has_digit = True\n    \n    return has_upper and has_lower and has_digit\n\nif is_complex(password):\n    print(\"Correct\")\nelse:\n    print(\"Too weak\")\n",
        "counter_example": null
    },
    {
        "task_id": "0268",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Mishka received a gift of multicolored pencils for his birthday! Unfortunately he lives in a monochrome world, where everything is of the same color and only saturation differs. This pack can be represented as a sequence a_1, a_2, ..., a_{n} of n integer numbers — saturation of the color of each pencil. Now Mishka wants to put all the mess in the pack in order. He has an infinite number of empty boxes to do this. He would like to fill some boxes in such a way that:\n\n  Each pencil belongs to exactly one box;  Each non-empty box has at least k pencils in it;  If pencils i and j belong to the same box, then |a_{i} - a_{j}| ≤ d, where |x| means absolute value of x. Note that the opposite is optional, there can be pencils i and j such that |a_{i} - a_{j}| ≤ d and they belong to different boxes. \n\nHelp Mishka to determine if it's possible to distribute all the pencils into boxes. Print \"YES\" if there exists such a distribution. Otherwise print \"NO\".\n\n\n-----Input-----\n\nThe first line contains three integer numbers n, k and d (1 ≤ k ≤ n ≤ 5·10^5, 0 ≤ d ≤ 10^9) — the number of pencils, minimal size of any non-empty box and maximal difference in saturation between any pair of pencils in the same box, respectively.\n\nThe second line contains n integer numbers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — saturation of color of each pencil.\n\n\n-----Output-----\n\nPrint \"YES\" if it's possible to distribute all the pencils into boxes and satisfy all the conditions. Otherwise print \"NO\".\n\n\n-----Examples-----\nInput\n6 3 10\n7 2 7 7 4 2\n\nOutput\nYES\n\nInput\n6 2 3\n4 5 3 13 4 10\n\nOutput\nYES\n\nInput\n3 2 5\n10 16 22\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example it is possible to distribute pencils into 2 boxes with 3 pencils in each with any distribution. And you also can put all the pencils into the same box, difference of any pair in it won't exceed 10.\n\nIn the second example you can split pencils of saturations [4, 5, 3, 4] into 2 boxes of size 2 and put the remaining ones into another box.",
        "generated_code": "n, k, d = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\ni = 0\nwhile i < n:\n    j = i + 1\n    while j < n and a[j] - a[i] <= d:\n        j += 1\n    if j - i < k:\n        print(\"NO\")\n        exit()\n    i = j\n\nprint(\"YES\")\n",
        "counter_example": {
            "input": "10 3 3\n1 1 2 4 5 6 9 10 11 12\n",
            "expected": "YES\n",
            "got": "NO"
        }
    },
    {
        "task_id": "0268",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Mishka received a gift of multicolored pencils for his birthday! Unfortunately he lives in a monochrome world, where everything is of the same color and only saturation differs. This pack can be represented as a sequence a_1, a_2, ..., a_{n} of n integer numbers — saturation of the color of each pencil. Now Mishka wants to put all the mess in the pack in order. He has an infinite number of empty boxes to do this. He would like to fill some boxes in such a way that:\n\n  Each pencil belongs to exactly one box;  Each non-empty box has at least k pencils in it;  If pencils i and j belong to the same box, then |a_{i} - a_{j}| ≤ d, where |x| means absolute value of x. Note that the opposite is optional, there can be pencils i and j such that |a_{i} - a_{j}| ≤ d and they belong to different boxes. \n\nHelp Mishka to determine if it's possible to distribute all the pencils into boxes. Print \"YES\" if there exists such a distribution. Otherwise print \"NO\".\n\n\n-----Input-----\n\nThe first line contains three integer numbers n, k and d (1 ≤ k ≤ n ≤ 5·10^5, 0 ≤ d ≤ 10^9) — the number of pencils, minimal size of any non-empty box and maximal difference in saturation between any pair of pencils in the same box, respectively.\n\nThe second line contains n integer numbers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — saturation of color of each pencil.\n\n\n-----Output-----\n\nPrint \"YES\" if it's possible to distribute all the pencils into boxes and satisfy all the conditions. Otherwise print \"NO\".\n\n\n-----Examples-----\nInput\n6 3 10\n7 2 7 7 4 2\n\nOutput\nYES\n\nInput\n6 2 3\n4 5 3 13 4 10\n\nOutput\nYES\n\nInput\n3 2 5\n10 16 22\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example it is possible to distribute pencils into 2 boxes with 3 pencils in each with any distribution. And you also can put all the pencils into the same box, difference of any pair in it won't exceed 10.\n\nIn the second example you can split pencils of saturations [4, 5, 3, 4] into 2 boxes of size 2 and put the remaining ones into another box.",
        "generated_code": "# Read input values\nn, k, d = map(int, input().split())\na = list(map(int, input().split()))\n\n# Sort the list of pencil saturations\na.sort()\n\n# DP array to check the possibility of forming valid boxes\ndp = [0] * (n + 1)\ndp[0] = 1  # Base case: no pencils means it's trivially possible\n\n# Sum array to maintain cumulative sums of dp values for efficient range sum calculation\nsum_dp = [0] * (n + 1)\nsum_dp[0] = dp[0]\n\n# Iterate through the pencils to fill the dp table\nfor i in range(1, n + 1):\n    left = i - k  # Minimum number of pencils required in the current box\n    right = i - 1  # Current position\n\n    # Calculate the range for valid pencils\n    if left >= 0 and a[right] - a[left] <= d:\n        if left == 0:\n            dp[i] = 1\n        else:\n            dp[i] = (sum_dp[right] - sum_dp[left - 1]) > 0\n    \n    # Update the cumulative sum array\n    sum_dp[i] = sum_dp[i - 1] + dp[i]\n\n# Check the final state of dp array to determine the result\nif dp[n] == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
        "counter_example": {
            "input": "3 2 76\n44 5 93\n",
            "expected": "NO\n",
            "got": "YES"
        }
    },
    {
        "task_id": "0259",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "It is raining heavily. But this is the first day for Serval, who just became 3 years old, to go to the kindergarten. Unfortunately, he lives far from kindergarten, and his father is too busy to drive him there. The only choice for this poor little boy is to wait for a bus on this rainy day. Under such circumstances, the poor boy will use the first bus he sees no matter where it goes. If several buses come at the same time, he will choose one randomly.\n\nServal will go to the bus station at time $t$, and there are $n$ bus routes which stop at this station. For the $i$-th bus route, the first bus arrives at time $s_i$ minutes, and each bus of this route comes $d_i$ minutes later than the previous one.\n\nAs Serval's best friend, you wonder which bus route will he get on. If several buses arrive at the same time, you can print any of them.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers $n$ and $t$ ($1\\leq n\\leq 100$, $1\\leq t\\leq 10^5$) — the number of bus routes and the time Serval goes to the station. \n\nEach of the next $n$ lines contains two space-separated integers $s_i$ and $d_i$ ($1\\leq s_i,d_i\\leq 10^5$) — the time when the first bus of this route arrives and the interval between two buses of this route.\n\n\n-----Output-----\n\nPrint one number — what bus route Serval will use. If there are several possible answers, you can print any of them.\n\n\n-----Examples-----\nInput\n2 2\n6 4\n9 5\n\nOutput\n1\n\nInput\n5 5\n3 3\n2 5\n5 6\n4 9\n6 1\n\nOutput\n3\n\nInput\n3 7\n2 2\n2 3\n2 4\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example, the first bus of the first route arrives at time $6$, and the first bus of the second route arrives at time $9$, so the first route is the answer.\n\nIn the second example, a bus of the third route arrives at time $5$, so it is the answer.\n\nIn the third example, buses of the first route come at times $2$, $4$, $6$, $8$, and so fourth, buses of the second route come at times $2$, $5$, $8$, and so fourth and buses of the third route come at times $2$, $6$, $10$, and so on, so $1$ and $2$ are both acceptable answers while $3$ is not.",
        "generated_code": "n, t = map(int, input().split())\nbuses = []\nfor _ in range(n):\n    s, d = map(int, input().split())\n    buses.append((s, d))\n\nmin_time = float('inf')\nans = -1\nfor i, (s, d) in enumerate(buses):\n    time = (t - s) % d\n    if time < min_time:\n        min_time = time\n        ans = i + 1\nprint(ans)\n",
        "counter_example": {
            "input": "4 26378\n25074 97197\n56308 49525\n92863 16363\n20209 26816\n",
            "expected": "4\n",
            "got": "1"
        }
    },
    {
        "task_id": "0259",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "It is raining heavily. But this is the first day for Serval, who just became 3 years old, to go to the kindergarten. Unfortunately, he lives far from kindergarten, and his father is too busy to drive him there. The only choice for this poor little boy is to wait for a bus on this rainy day. Under such circumstances, the poor boy will use the first bus he sees no matter where it goes. If several buses come at the same time, he will choose one randomly.\n\nServal will go to the bus station at time $t$, and there are $n$ bus routes which stop at this station. For the $i$-th bus route, the first bus arrives at time $s_i$ minutes, and each bus of this route comes $d_i$ minutes later than the previous one.\n\nAs Serval's best friend, you wonder which bus route will he get on. If several buses arrive at the same time, you can print any of them.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers $n$ and $t$ ($1\\leq n\\leq 100$, $1\\leq t\\leq 10^5$) — the number of bus routes and the time Serval goes to the station. \n\nEach of the next $n$ lines contains two space-separated integers $s_i$ and $d_i$ ($1\\leq s_i,d_i\\leq 10^5$) — the time when the first bus of this route arrives and the interval between two buses of this route.\n\n\n-----Output-----\n\nPrint one number — what bus route Serval will use. If there are several possible answers, you can print any of them.\n\n\n-----Examples-----\nInput\n2 2\n6 4\n9 5\n\nOutput\n1\n\nInput\n5 5\n3 3\n2 5\n5 6\n4 9\n6 1\n\nOutput\n3\n\nInput\n3 7\n2 2\n2 3\n2 4\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example, the first bus of the first route arrives at time $6$, and the first bus of the second route arrives at time $9$, so the first route is the answer.\n\nIn the second example, a bus of the third route arrives at time $5$, so it is the answer.\n\nIn the third example, buses of the first route come at times $2$, $4$, $6$, $8$, and so fourth, buses of the second route come at times $2$, $5$, $8$, and so fourth and buses of the third route come at times $2$, $6$, $10$, and so on, so $1$ and $2$ are both acceptable answers while $3$ is not.",
        "generated_code": "# Function to find the bus route Serval will take\ndef find_bus_route(n, t, bus_routes):\n    min_wait_time = float('inf')\n    chosen_route = -1\n\n    for i in range(n):\n        s_i, d_i = bus_routes[i]\n\n        # Calculate the first bus time after or at t\n        if s_i >= t:\n            wait_time = s_i - t\n        else:\n            if (t - s_i) % d_i == 0:\n                wait_time = 0\n            else:\n                wait_time = d_i - (t - s_i) % d_i\n\n        if wait_time < min_wait_time:\n            min_wait_time = wait_time\n            chosen_route = i + 1\n\n    return chosen_route\n\n# Read input\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\nt = int(data[1])\nbus_routes = []\n\nfor i in range(n):\n    s_i = int(data[2 + i * 2])\n    d_i = int(data[2 + i * 2 + 1])\n    bus_routes.append((s_i, d_i))\n\n# Find and print the bus route Serval will take\nprint(find_bus_route(n, t, bus_routes))\n",
        "counter_example": null
    },
    {
        "task_id": "0296",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Vasya should paint a fence in front of his own cottage. The fence is a sequence of n wooden boards arranged in a single row. Each board is a 1 centimeter wide rectangle. Let's number the board fence using numbers 1, 2, ..., n from left to right. The height of the i-th board is h_{i} centimeters.\n\nVasya has a 1 centimeter wide brush and the paint of two colors, red and green. Of course, the amount of the paint is limited. Vasya counted the area he can paint each of the colors. It turned out that he can not paint over a square centimeters of the fence red, and he can not paint over b square centimeters green. Each board of the fence should be painted exactly one of the two colors. Perhaps Vasya won't need one of the colors.\n\nIn addition, Vasya wants his fence to look smart. To do this, he should paint the fence so as to minimize the value that Vasya called the fence unattractiveness value. Vasya believes that two consecutive fence boards, painted different colors, look unattractive. The unattractiveness value of a fence is the total length of contact between the neighboring boards of various colors. To make the fence look nice, you need to minimize the value as low as possible. Your task is to find what is the minimum unattractiveness Vasya can get, if he paints his fence completely. $1$ \n\nThe picture shows the fence, where the heights of boards (from left to right) are 2,3,2,4,3,1. The first and the fifth boards are painted red, the others are painted green. The first and the second boards have contact length 2, the fourth and fifth boards have contact length 3, the fifth and the sixth have contact length 1. Therefore, the unattractiveness of the given painted fence is 2+3+1=6.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 ≤ n ≤ 200) — the number of boards in Vasya's fence.\n\nThe second line contains two integers a and b (0 ≤ a, b ≤ 4·10^4) — the area that can be painted red and the area that can be painted green, correspondingly.\n\nThe third line contains a sequence of n integers h_1, h_2, ..., h_{n} (1 ≤ h_{i} ≤ 200) — the heights of the fence boards.\n\nAll numbers in the lines are separated by single spaces.\n\n\n-----Output-----\n\nPrint a single number — the minimum unattractiveness value Vasya can get if he paints his fence completely. If it is impossible to do, print  - 1.\n\n\n-----Examples-----\nInput\n4\n5 7\n3 3 4 1\n\nOutput\n3\n\nInput\n3\n2 3\n1 3 1\n\nOutput\n2\n\nInput\n3\n3 3\n2 2 2\n\nOutput\n-1",
        "generated_code": "n = int(input())\na, b = map(int, input().split())\nh = list(map(int, input().split()))\n\ndp = [[float('inf')] * (a + 1) for _ in range(n + 1)]\ndp[0][0] = 0\n\nfor i in range(1, n + 1):\n    for j in range(a + 1):\n        if j >= h[i - 1]:\n            dp[i][j] = min(dp[i][j], dp[i - 1][j - h[i - 1]] + (h[i - 1] if i > 1 and h[i - 1] != h[i - 2] else 0))\n        dp[i][j] = min(dp[i][j], dp[i - 1][j])\n\nans = float('inf')\nfor i in range(a, -1, -1):\n    if dp[n][i] != float('inf'):\n        ans = min(ans, dp[n][i])\n\nif ans == float('inf') or a + b < sum(h):\n    print(-1)\nelse:\n    print(ans)\n",
        "counter_example": {
            "input": "4\n5 7\n3 3 4 1\n",
            "expected": "3\n",
            "got": "0"
        }
    },
    {
        "task_id": "0296",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Vasya should paint a fence in front of his own cottage. The fence is a sequence of n wooden boards arranged in a single row. Each board is a 1 centimeter wide rectangle. Let's number the board fence using numbers 1, 2, ..., n from left to right. The height of the i-th board is h_{i} centimeters.\n\nVasya has a 1 centimeter wide brush and the paint of two colors, red and green. Of course, the amount of the paint is limited. Vasya counted the area he can paint each of the colors. It turned out that he can not paint over a square centimeters of the fence red, and he can not paint over b square centimeters green. Each board of the fence should be painted exactly one of the two colors. Perhaps Vasya won't need one of the colors.\n\nIn addition, Vasya wants his fence to look smart. To do this, he should paint the fence so as to minimize the value that Vasya called the fence unattractiveness value. Vasya believes that two consecutive fence boards, painted different colors, look unattractive. The unattractiveness value of a fence is the total length of contact between the neighboring boards of various colors. To make the fence look nice, you need to minimize the value as low as possible. Your task is to find what is the minimum unattractiveness Vasya can get, if he paints his fence completely. $1$ \n\nThe picture shows the fence, where the heights of boards (from left to right) are 2,3,2,4,3,1. The first and the fifth boards are painted red, the others are painted green. The first and the second boards have contact length 2, the fourth and fifth boards have contact length 3, the fifth and the sixth have contact length 1. Therefore, the unattractiveness of the given painted fence is 2+3+1=6.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 ≤ n ≤ 200) — the number of boards in Vasya's fence.\n\nThe second line contains two integers a and b (0 ≤ a, b ≤ 4·10^4) — the area that can be painted red and the area that can be painted green, correspondingly.\n\nThe third line contains a sequence of n integers h_1, h_2, ..., h_{n} (1 ≤ h_{i} ≤ 200) — the heights of the fence boards.\n\nAll numbers in the lines are separated by single spaces.\n\n\n-----Output-----\n\nPrint a single number — the minimum unattractiveness value Vasya can get if he paints his fence completely. If it is impossible to do, print  - 1.\n\n\n-----Examples-----\nInput\n4\n5 7\n3 3 4 1\n\nOutput\n3\n\nInput\n3\n2 3\n1 3 1\n\nOutput\n2\n\nInput\n3\n3 3\n2 2 2\n\nOutput\n-1",
        "generated_code": "def min_unattractiveness(n, a, b, heights):\n    # Create a DP table to store the minimum unattractiveness value for each board\n    dp = [[float('inf')] * (a + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    \n    # Iterate over each board\n    for i in range(1, n + 1):\n        for red_paint in range(a + 1):\n            # If we can paint the current board red\n            if red_paint >= heights[i - 1]:\n                dp[i][red_paint] = min(dp[i][red_paint], dp[i - 1][red_paint - heights[i - 1]])\n            \n            # If we can paint the current board green\n            green_paint = sum(heights[:i]) - red_paint\n            if green_paint <= b:\n                dp[i][red_paint] = min(dp[i][red_paint], dp[i - 1][red_paint] + (heights[i - 1] if i > 1 and dp[i - 1][red_paint] != float('inf') and red_paint < a else 0))\n    \n    # Find the minimum unattractiveness value\n    result = float('inf')\n    for red_paint in range(a + 1):\n        if dp[n][red_paint] != float('inf'):\n            result = min(result, dp[n][red_paint])\n    \n    return -1 if result == float('inf') else result\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\n\nn = int(data[0])\na = int(data[1])\nb = int(data[2])\nheights = list(map(int, data[3:]))\n\nprint(min_unattractiveness(n, a, b, heights))\n",
        "counter_example": {
            "input": "3\n2 3\n1 3 1\n",
            "expected": "2\n",
            "got": "3"
        }
    }
]