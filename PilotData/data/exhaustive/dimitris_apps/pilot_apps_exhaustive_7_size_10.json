[
    {
        "task_id": "0134",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Katya studies in a fifth grade. Recently her class studied right triangles and the Pythagorean theorem. It appeared, that there are triples of positive integers such that you can construct a right triangle with segments of lengths corresponding to triple. Such triples are called Pythagorean triples.\n\nFor example, triples (3, 4, 5), (5, 12, 13) and (6, 8, 10) are Pythagorean triples.\n\nHere Katya wondered if she can specify the length of some side of right triangle and find any Pythagorean triple corresponding to such length? Note that the side which length is specified can be a cathetus as well as hypotenuse.\n\nKatya had no problems with completing this task. Will you do the same?\n\n\n-----Input-----\n\nThe only line of the input contains single integer n (1 ≤ n ≤ 10^9) — the length of some side of a right triangle.\n\n\n-----Output-----\n\nPrint two integers m and k (1 ≤ m, k ≤ 10^18), such that n, m and k form a Pythagorean triple, in the only line.\n\nIn case if there is no any Pythagorean triple containing integer n, print  - 1 in the only line. If there are many answers, print any of them.\n\n\n-----Examples-----\nInput\n3\n\nOutput\n4 5\nInput\n6\n\nOutput\n8 10\nInput\n1\n\nOutput\n-1\nInput\n17\n\nOutput\n144 145\nInput\n67\n\nOutput\n2244 2245\n\n\n-----Note-----[Image]\n\nIllustration for the first sample.",
        "generated_code": "n = int(input())\nif n == 1:\n    print(-1)\nelse:\n    for m in range(n, int(1e18) + 1):\n        k = (m ** 2 - n ** 2) ** 0.5\n        if k == int(k):\n            print(m, int(k) + n)\n            break\n    else:\n        print(-1)\n",
        "counter_example": {
            "input": "3\n",
            "expected": "4 5",
            "got": "3 3"
        }
    },
    {
        "task_id": "0134",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Katya studies in a fifth grade. Recently her class studied right triangles and the Pythagorean theorem. It appeared, that there are triples of positive integers such that you can construct a right triangle with segments of lengths corresponding to triple. Such triples are called Pythagorean triples.\n\nFor example, triples (3, 4, 5), (5, 12, 13) and (6, 8, 10) are Pythagorean triples.\n\nHere Katya wondered if she can specify the length of some side of right triangle and find any Pythagorean triple corresponding to such length? Note that the side which length is specified can be a cathetus as well as hypotenuse.\n\nKatya had no problems with completing this task. Will you do the same?\n\n\n-----Input-----\n\nThe only line of the input contains single integer n (1 ≤ n ≤ 10^9) — the length of some side of a right triangle.\n\n\n-----Output-----\n\nPrint two integers m and k (1 ≤ m, k ≤ 10^18), such that n, m and k form a Pythagorean triple, in the only line.\n\nIn case if there is no any Pythagorean triple containing integer n, print  - 1 in the only line. If there are many answers, print any of them.\n\n\n-----Examples-----\nInput\n3\n\nOutput\n4 5\nInput\n6\n\nOutput\n8 10\nInput\n1\n\nOutput\n-1\nInput\n17\n\nOutput\n144 145\nInput\n67\n\nOutput\n2244 2245\n\n\n-----Note-----[Image]\n\nIllustration for the first sample.",
        "generated_code": "n = int(input())\n\nif n == 1 or n == 2:\n    print(-1)\nelse:\n    if n % 2 == 1:\n        m = (n * n - 1) // 2\n        k = (n * n + 1) // 2\n    else:\n        m = (n * n // 4) - 1\n        k = (n * n // 4) + 1\n    print(m, k)\n",
        "counter_example": {
            "input": "1000000000\n",
            "expected": "1250000000 750000000",
            "got": "249999999999999999 250000000000000001"
        }
    },
    {
        "task_id": "0246",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Ivan likes to learn different things about numbers, but he is especially interested in really big numbers. Ivan thinks that a positive integer number x is really big if the difference between x and the sum of its digits (in decimal representation) is not less than s. To prove that these numbers may have different special properties, he wants to know how rare (or not rare) they are — in fact, he needs to calculate the quantity of really big numbers that are not greater than n.\n\nIvan tried to do the calculations himself, but soon realized that it's too difficult for him. So he asked you to help him in calculations.\n\n\n-----Input-----\n\nThe first (and the only) line contains two integers n and s (1 ≤ n, s ≤ 10^18).\n\n\n-----Output-----\n\nPrint one integer — the quantity of really big numbers that are not greater than n.\n\n\n-----Examples-----\nInput\n12 1\n\nOutput\n3\n\nInput\n25 20\n\nOutput\n0\n\nInput\n10 9\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example numbers 10, 11 and 12 are really big.\n\nIn the second example there are no really big numbers that are not greater than 25 (in fact, the first really big number is 30: 30 - 3 ≥ 20).\n\nIn the third example 10 is the only really big number (10 - 1 ≥ 9).",
        "generated_code": "def count_really_big_numbers(n, s):\n    count = 0\n    for x in range(1, n + 1):\n        digit_sum = sum(int(digit) for digit in str(x))\n        if x - digit_sum >= s:\n            count += 1\n    return count\n\nn, s = map(int, input().split())\nprint(count_really_big_numbers(n, s))\n",
        "counter_example": {
            "input": "1000000000000000000 1000000000000000000\n",
            "expected": "0\n",
            "got": "TimeoutError: Execution exceeded time limit"
        }
    },
    {
        "task_id": "0246",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Ivan likes to learn different things about numbers, but he is especially interested in really big numbers. Ivan thinks that a positive integer number x is really big if the difference between x and the sum of its digits (in decimal representation) is not less than s. To prove that these numbers may have different special properties, he wants to know how rare (or not rare) they are — in fact, he needs to calculate the quantity of really big numbers that are not greater than n.\n\nIvan tried to do the calculations himself, but soon realized that it's too difficult for him. So he asked you to help him in calculations.\n\n\n-----Input-----\n\nThe first (and the only) line contains two integers n and s (1 ≤ n, s ≤ 10^18).\n\n\n-----Output-----\n\nPrint one integer — the quantity of really big numbers that are not greater than n.\n\n\n-----Examples-----\nInput\n12 1\n\nOutput\n3\n\nInput\n25 20\n\nOutput\n0\n\nInput\n10 9\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example numbers 10, 11 and 12 are really big.\n\nIn the second example there are no really big numbers that are not greater than 25 (in fact, the first really big number is 30: 30 - 3 ≥ 20).\n\nIn the third example 10 is the only really big number (10 - 1 ≥ 9).",
        "generated_code": "def sum_of_digits(x):\n    return sum(int(digit) for digit in str(x))\n\ndef count_really_big_numbers(n, s):\n    left, right = s, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid - sum_of_digits(mid) >= s:\n            right = mid - 1\n        else:\n            left = mid + 1\n    if left > n:\n        return 0\n    return n - left + 1\n\nn, s = map(int, input().split())\nprint(count_really_big_numbers(n, s))\n",
        "counter_example": null
    },
    {
        "task_id": "0270",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "There is a cave consisting of N rooms and M one-directional passages. The rooms are numbered 1 through N.\nTakahashi is now in Room 1, and Room N has the exit. The i-th passage connects Room s_i and Room t_i (s_i < t_i) and can only be traversed in the direction from Room s_i to Room t_i. It is known that, for each room except Room N, there is at least one passage going from that room.\nTakahashi will escape from the cave. Each time he reaches a room (assume that he has reached Room 1 at the beginning), he will choose a passage uniformly at random from the ones going from that room and take that passage.\nAoki, a friend of Takahashi's, can block one of the passages (or do nothing) before Takahashi leaves Room 1. However, it is not allowed to block a passage so that Takahashi is potentially unable to reach Room N.\nLet E be the expected number of passages Takahashi takes before he reaches Room N. Find the value of E when Aoki makes a choice that minimizes E.\n\n-----Constraints-----\n - 2 \\leq N \\leq 600\n - N-1 \\leq M \\leq \\frac{N(N-1)}{2}\n - s_i < t_i\n - If i != j, (s_i, t_i) \\neq (s_j, t_j). (Added 21:23 JST)\n - For every v = 1, 2, ..., N-1, there exists i such that v = s_i.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\ns_1 t_1\n:\ns_M t_M\n\n-----Output-----\nPrint the value of E when Aoki makes a choice that minimizes E.\nYour output will be judged as correct when the absolute or relative error from the judge's output is at most 10^{-6}.\n\n-----Sample Input-----\n4 6\n1 4\n2 3\n1 3\n1 2\n3 4\n2 4\n\n-----Sample Output-----\n1.5000000000\n\nIf Aoki blocks the passage from Room 1 to Room 2, Takahashi will go along the path 1 → 3 → 4 with probability \\frac{1}{2} and 1 → 4 with probability \\frac{1}{2}. E = 1.5 here, and this is the minimum possible value of E.",
        "generated_code": "from collections import defaultdict, deque\n\nN, M = map(int, input().split())\ngraph = defaultdict(list)\nfor _ in range(M):\n    u, v = map(int, input().split())\n    graph[u].append(v)\n\ndp = [0] * (N + 1)\ndp[N] = 1\n\nq = deque([N])\nwhile q:\n    v = q.popleft()\n    for u in graph:\n        if v in graph[u]:\n            dp[u] += dp[v] / len(graph[u])\n            q.append(u)\n\nprint(dp[1])\n",
        "counter_example": {
            "input": "4 6\n1 4\n2 3\n1 3\n1 2\n3 4\n2 4\n",
            "expected": "1.5000000000\n",
            "got": "1.1666666666666665"
        }
    },
    {
        "task_id": "0270",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "There is a cave consisting of N rooms and M one-directional passages. The rooms are numbered 1 through N.\nTakahashi is now in Room 1, and Room N has the exit. The i-th passage connects Room s_i and Room t_i (s_i < t_i) and can only be traversed in the direction from Room s_i to Room t_i. It is known that, for each room except Room N, there is at least one passage going from that room.\nTakahashi will escape from the cave. Each time he reaches a room (assume that he has reached Room 1 at the beginning), he will choose a passage uniformly at random from the ones going from that room and take that passage.\nAoki, a friend of Takahashi's, can block one of the passages (or do nothing) before Takahashi leaves Room 1. However, it is not allowed to block a passage so that Takahashi is potentially unable to reach Room N.\nLet E be the expected number of passages Takahashi takes before he reaches Room N. Find the value of E when Aoki makes a choice that minimizes E.\n\n-----Constraints-----\n - 2 \\leq N \\leq 600\n - N-1 \\leq M \\leq \\frac{N(N-1)}{2}\n - s_i < t_i\n - If i != j, (s_i, t_i) \\neq (s_j, t_j). (Added 21:23 JST)\n - For every v = 1, 2, ..., N-1, there exists i such that v = s_i.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\ns_1 t_1\n:\ns_M t_M\n\n-----Output-----\nPrint the value of E when Aoki makes a choice that minimizes E.\nYour output will be judged as correct when the absolute or relative error from the judge's output is at most 10^{-6}.\n\n-----Sample Input-----\n4 6\n1 4\n2 3\n1 3\n1 2\n3 4\n2 4\n\n-----Sample Output-----\n1.5000000000\n\nIf Aoki blocks the passage from Room 1 to Room 2, Takahashi will go along the path 1 → 3 → 4 with probability \\frac{1}{2} and 1 → 4 with probability \\frac{1}{2}. E = 1.5 here, and this is the minimum possible value of E.",
        "generated_code": "import sys\nfrom collections import defaultdict, deque\nimport heapq\n\ndef solve():\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    M = int(data[1])\n    \n    edges = defaultdict(list)\n    \n    index = 2\n    for _ in range(M):\n        s = int(data[index])\n        t = int(data[index + 1])\n        edges[s].append(t)\n        index += 2\n    \n    def calculate_expected_value():\n        expected = [float('inf')] * (N + 1)\n        expected[N] = 0\n        indegree = [0] * (N + 1)\n        for u in edges:\n            for v in edges[u]:\n                indegree[v] += 1\n        \n        queue = deque()\n        for i in range(1, N + 1):\n            if indegree[i] == 0:\n                queue.append(i)\n        \n        while queue:\n            u = queue.popleft()\n            if u == N:\n                continue\n            if len(edges[u]) == 0:\n                continue\n            total_expectation = 0\n            for v in edges[u]:\n                total_expectation += expected[v]\n            expected[u] = 1 + total_expectation / len(edges[u])\n            for v in edges[u]:\n                indegree[v] -= 1\n                if indegree[v] == 0:\n                    queue.append(v)\n        \n        return expected\n    \n    initial_expected = calculate_expected_value()\n    min_expected = initial_expected[1]\n    \n    for v in edges[1]:\n        edges[1].remove(v)\n        updated_expected = calculate_expected_value()\n        min_expected = min(min_expected, updated_expected[1])\n        edges[1].append(v)\n    \n    print(\"{:.10f}\".format(min_expected))\n\nif __name__ == \"__main__\":\n    solve()\n",
        "counter_example": {
            "input": "4 6\n1 4\n2 3\n1 3\n1 2\n3 4\n2 4\n",
            "expected": "1.5000000000\n",
            "got": "inf"
        }
    },
    {
        "task_id": "0297",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Vasya has got three integers $n$, $m$ and $k$. He'd like to find three integer points $(x_1, y_1)$, $(x_2, y_2)$, $(x_3, y_3)$, such that $0 \\le x_1, x_2, x_3 \\le n$, $0 \\le y_1, y_2, y_3 \\le m$ and the area of the triangle formed by these points is equal to $\\frac{nm}{k}$.\n\nHelp Vasya! Find such points (if it's possible). If there are multiple solutions, print any of them.\n\n\n-----Input-----\n\nThe single line contains three integers $n$, $m$, $k$ ($1\\le n, m \\le 10^9$, $2 \\le k \\le 10^9$).\n\n\n-----Output-----\n\nIf there are no such points, print \"NO\".\n\nOtherwise print \"YES\" in the first line. The next three lines should contain integers $x_i, y_i$ — coordinates of the points, one point per line. If there are multiple solutions, print any of them.\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Examples-----\nInput\n4 3 3\n\nOutput\nYES\n1 0\n2 3\n4 1\n\nInput\n4 4 7\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example area of the triangle should be equal to $\\frac{nm}{k} = 4$. The triangle mentioned in the output is pictured below:  [Image] \n\nIn the second example there is no triangle with area $\\frac{nm}{k} = \\frac{16}{7}$.",
        "generated_code": "n, m, k = map(int, input().split())\n\nif (n * m) % k != 0:\n    print(\"NO\")\nelse:\n    area = n * m // k\n    x1, y1 = 0, 0\n    x2, y2 = 0, area\n    x3, y3 = area, 0\n    print(\"YES\")\n    print(x1, y1)\n    print(x2, y2)\n    print(x3, y3)\n",
        "counter_example": {
            "input": "4 3 3\n",
            "expected": "YES\n0 0\n0 2\n4 0\n",
            "got": "YES\n0 0\n0 4\n4 0"
        }
    },
    {
        "task_id": "0297",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Vasya has got three integers $n$, $m$ and $k$. He'd like to find three integer points $(x_1, y_1)$, $(x_2, y_2)$, $(x_3, y_3)$, such that $0 \\le x_1, x_2, x_3 \\le n$, $0 \\le y_1, y_2, y_3 \\le m$ and the area of the triangle formed by these points is equal to $\\frac{nm}{k}$.\n\nHelp Vasya! Find such points (if it's possible). If there are multiple solutions, print any of them.\n\n\n-----Input-----\n\nThe single line contains three integers $n$, $m$, $k$ ($1\\le n, m \\le 10^9$, $2 \\le k \\le 10^9$).\n\n\n-----Output-----\n\nIf there are no such points, print \"NO\".\n\nOtherwise print \"YES\" in the first line. The next three lines should contain integers $x_i, y_i$ — coordinates of the points, one point per line. If there are multiple solutions, print any of them.\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Examples-----\nInput\n4 3 3\n\nOutput\nYES\n1 0\n2 3\n4 1\n\nInput\n4 4 7\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example area of the triangle should be equal to $\\frac{nm}{k} = 4$. The triangle mentioned in the output is pictured below:  [Image] \n\nIn the second example there is no triangle with area $\\frac{nm}{k} = \\frac{16}{7}$.",
        "generated_code": "import sys\nimport math\n\n# Read input values\ninput = sys.stdin.read\nn, m, k = map(int, input().strip().split())\n\n# Calculate the area we need to match\nrequired_area = (n * m) / k\n\n# There must be an integer solution, so if required_area is not an integer, it's not possible\nif required_area != int(required_area):\n    print(\"NO\")\nelse:\n    # Try to find a solution\n    found = False\n    for x1 in range(n + 1):\n        for y1 in range(m + 1):\n            for x2 in range(n + 1):\n                for y2 in range(m + 1):\n                    # Calculate the area of the triangle (0,0), (x1,y1), (x2,y2)\n                    area = abs(x1 * y2 - x2 * y1) / 2\n                    if area == required_area:\n                        print(\"YES\")\n                        print(\"0 0\")\n                        print(f\"{x1} {y1}\")\n                        print(f\"{x2} {y2}\")\n                        found = True\n                        break\n                if found:\n                    break\n            if found:\n                break\n        if found:\n            break\n    if not found:\n        print(\"NO\")\n",
        "counter_example": {
            "input": "3 4 12\n",
            "expected": "YES\n0 0\n0 2\n1 0\n",
            "got": "YES\n0 0\n0 1\n2 0"
        }
    },
    {
        "task_id": "0147",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "R3D3 spent some time on an internship in MDCS. After earning enough money, he decided to go on a holiday somewhere far, far away. He enjoyed suntanning, drinking alcohol-free cocktails and going to concerts of popular local bands. While listening to \"The White Buttons\" and their hit song \"Dacan the Baker\", he met another robot for whom he was sure is the love of his life. Well, his summer, at least. Anyway, R3D3 was too shy to approach his potential soulmate, so he decided to write her a love letter. However, he stumbled upon a problem. Due to a terrorist threat, the Intergalactic Space Police was monitoring all letters sent in the area. Thus, R3D3 decided to invent his own alphabet, for which he was sure his love would be able to decipher.\n\nThere are n letters in R3D3’s alphabet, and he wants to represent each letter as a sequence of '0' and '1', so that no letter’s sequence is a prefix of another letter's sequence. Since the Intergalactic Space Communications Service has lately introduced a tax for invented alphabets, R3D3 must pay a certain amount of money for each bit in his alphabet’s code (check the sample test for clarifications). He is too lovestruck to think clearly, so he asked you for help.\n\nGiven the costs c_0 and c_1 for each '0' and '1' in R3D3’s alphabet, respectively, you should come up with a coding for the alphabet (with properties as above) with minimum total cost.\n\n\n-----Input-----\n\nThe first line of input contains three integers n (2 ≤ n ≤ 10^8), c_0 and c_1 (0 ≤ c_0, c_1 ≤ 10^8) — the number of letters in the alphabet, and costs of '0' and '1', respectively. \n\n\n-----Output-----\n\nOutput a single integer — minimum possible total a cost of the whole alphabet.\n\n\n-----Example-----\nInput\n4 1 2\n\nOutput\n12\n\n\n\n-----Note-----\n\nThere are 4 letters in the alphabet. The optimal encoding is \"00\", \"01\", \"10\", \"11\". There are 4 zeroes and 4 ones used, so the total cost is 4·1 + 4·2 = 12.",
        "generated_code": "n, c0, c1 = map(int, input().split())\nans = 0\ni = 0\nwhile (1 << i) < n:\n    ans += (1 << i) * min(c0, c1)\n    i += 1\nif (1 << i) > n:\n    ans += (n - (1 << (i - 1))) * min(c0, c1)\nprint(ans)\n",
        "counter_example": {
            "input": "4 1 2\n",
            "expected": "12\n",
            "got": "3"
        }
    },
    {
        "task_id": "0147",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "R3D3 spent some time on an internship in MDCS. After earning enough money, he decided to go on a holiday somewhere far, far away. He enjoyed suntanning, drinking alcohol-free cocktails and going to concerts of popular local bands. While listening to \"The White Buttons\" and their hit song \"Dacan the Baker\", he met another robot for whom he was sure is the love of his life. Well, his summer, at least. Anyway, R3D3 was too shy to approach his potential soulmate, so he decided to write her a love letter. However, he stumbled upon a problem. Due to a terrorist threat, the Intergalactic Space Police was monitoring all letters sent in the area. Thus, R3D3 decided to invent his own alphabet, for which he was sure his love would be able to decipher.\n\nThere are n letters in R3D3’s alphabet, and he wants to represent each letter as a sequence of '0' and '1', so that no letter’s sequence is a prefix of another letter's sequence. Since the Intergalactic Space Communications Service has lately introduced a tax for invented alphabets, R3D3 must pay a certain amount of money for each bit in his alphabet’s code (check the sample test for clarifications). He is too lovestruck to think clearly, so he asked you for help.\n\nGiven the costs c_0 and c_1 for each '0' and '1' in R3D3’s alphabet, respectively, you should come up with a coding for the alphabet (with properties as above) with minimum total cost.\n\n\n-----Input-----\n\nThe first line of input contains three integers n (2 ≤ n ≤ 10^8), c_0 and c_1 (0 ≤ c_0, c_1 ≤ 10^8) — the number of letters in the alphabet, and costs of '0' and '1', respectively. \n\n\n-----Output-----\n\nOutput a single integer — minimum possible total a cost of the whole alphabet.\n\n\n-----Example-----\nInput\n4 1 2\n\nOutput\n12\n\n\n\n-----Note-----\n\nThere are 4 letters in the alphabet. The optimal encoding is \"00\", \"01\", \"10\", \"11\". There are 4 zeroes and 4 ones used, so the total cost is 4·1 + 4·2 = 12.",
        "generated_code": "0 -> 00\n1 -> 01\n2 -> 10\n3 -> 11\n",
        "counter_example": {
            "input": "4 1 2\n",
            "expected": "12\n",
            "got": "File \"<string>\", line 2\n    1 -> 01\n         ^\nSyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers"
        }
    }
]