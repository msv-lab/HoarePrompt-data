[
    {
        "task_id": "0195",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Each student eagerly awaits the day he would pass the exams successfully. Thus, Vasya was ready to celebrate, but, alas, he didn't pass it. However, many of Vasya's fellow students from the same group were more successful and celebrated after the exam.\n\nSome of them celebrated in the BugDonalds restaurant, some of them — in the BeaverKing restaurant, the most successful ones were fast enough to celebrate in both of restaurants. Students which didn't pass the exam didn't celebrate in any of those restaurants and elected to stay home to prepare for their reexamination. However, this quickly bored Vasya and he started checking celebration photos on the Kilogramm. He found out that, in total, BugDonalds was visited by $A$ students, BeaverKing — by $B$ students and $C$ students visited both restaurants. Vasya also knows that there are $N$ students in his group.\n\nBased on this info, Vasya wants to determine either if his data contradicts itself or, if it doesn't, how many students in his group didn't pass the exam. Can you help him so he won't waste his valuable preparation time?\n\n\n-----Input-----\n\nThe first line contains four integers — $A$, $B$, $C$ and $N$ ($0 \\leq A, B, C, N \\leq 100$).\n\n\n-----Output-----\n\nIf a distribution of $N$ students exists in which $A$ students visited BugDonalds, $B$ — BeaverKing, $C$ — both of the restaurants and at least one student is left home (it is known that Vasya didn't pass the exam and stayed at home), output one integer — amount of students (including Vasya) who did not pass the exam. \n\nIf such a distribution does not exist and Vasya made a mistake while determining the numbers $A$, $B$, $C$ or $N$ (as in samples 2 and 3), output $-1$.\n\n\n-----Examples-----\nInput\n10 10 5 20\n\nOutput\n5\nInput\n2 2 0 4\n\nOutput\n-1\nInput\n2 2 2 1\n\nOutput\n-1\n\n\n-----Note-----\n\nThe first sample describes following situation: $5$ only visited BugDonalds, $5$ students only visited BeaverKing, $5$ visited both of them and $5$ students (including Vasya) didn't pass the exam.\n\nIn the second sample $2$ students only visited BugDonalds and $2$ only visited BeaverKing, but that means all $4$ students in group passed the exam which contradicts the fact that Vasya didn't pass meaning that this situation is impossible.\n\nThe third sample describes a situation where $2$ students visited BugDonalds but the group has only $1$ which makes it clearly impossible.",
        "generated_code": "A, B, C, N = map(int, input().split())\ntotal_visited = A + B - C\nif total_visited > N or C > A or C > B:\n    print(-1)\nelse:\n    print(N - total_visited)\n",
        "counter_example": {
            "input": "2 2 0 4\n",
            "expected": "-1",
            "got": "0"
        }
    },
    {
        "task_id": "0195",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Each student eagerly awaits the day he would pass the exams successfully. Thus, Vasya was ready to celebrate, but, alas, he didn't pass it. However, many of Vasya's fellow students from the same group were more successful and celebrated after the exam.\n\nSome of them celebrated in the BugDonalds restaurant, some of them — in the BeaverKing restaurant, the most successful ones were fast enough to celebrate in both of restaurants. Students which didn't pass the exam didn't celebrate in any of those restaurants and elected to stay home to prepare for their reexamination. However, this quickly bored Vasya and he started checking celebration photos on the Kilogramm. He found out that, in total, BugDonalds was visited by $A$ students, BeaverKing — by $B$ students and $C$ students visited both restaurants. Vasya also knows that there are $N$ students in his group.\n\nBased on this info, Vasya wants to determine either if his data contradicts itself or, if it doesn't, how many students in his group didn't pass the exam. Can you help him so he won't waste his valuable preparation time?\n\n\n-----Input-----\n\nThe first line contains four integers — $A$, $B$, $C$ and $N$ ($0 \\leq A, B, C, N \\leq 100$).\n\n\n-----Output-----\n\nIf a distribution of $N$ students exists in which $A$ students visited BugDonalds, $B$ — BeaverKing, $C$ — both of the restaurants and at least one student is left home (it is known that Vasya didn't pass the exam and stayed at home), output one integer — amount of students (including Vasya) who did not pass the exam. \n\nIf such a distribution does not exist and Vasya made a mistake while determining the numbers $A$, $B$, $C$ or $N$ (as in samples 2 and 3), output $-1$.\n\n\n-----Examples-----\nInput\n10 10 5 20\n\nOutput\n5\nInput\n2 2 0 4\n\nOutput\n-1\nInput\n2 2 2 1\n\nOutput\n-1\n\n\n-----Note-----\n\nThe first sample describes following situation: $5$ only visited BugDonalds, $5$ students only visited BeaverKing, $5$ visited both of them and $5$ students (including Vasya) didn't pass the exam.\n\nIn the second sample $2$ students only visited BugDonalds and $2$ only visited BeaverKing, but that means all $4$ students in group passed the exam which contradicts the fact that Vasya didn't pass meaning that this situation is impossible.\n\nThe third sample describes a situation where $2$ students visited BugDonalds but the group has only $1$ which makes it clearly impossible.",
        "generated_code": "# Read input values\nA, B, C, N = map(int, input().split())\n\n# Calculate the number of students who only visited BugDonalds and BeaverKing\nonly_bugdonalds = A - C\nonly_beaverking = B - C\nboth = C\n\n# Check for invalid conditions\nif only_bugdonalds < 0 or only_beaverking < 0 or both < 0:\n    print(-1)\nelif only_bugdonalds + only_beaverking + both >= N:\n    print(-1)\nelse:\n    # Calculate the number of students who didn't pass the exam\n    failed_students = N - (only_bugdonalds + only_beaverking + both)\n    if failed_students > 0:\n        print(failed_students)\n    else:\n        print(-1)\n",
        "counter_example": null
    },
    {
        "task_id": "0109",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "While Grisha was celebrating New Year with Ded Moroz, Misha gifted Sasha a small rectangular pond of size n × m, divided into cells of size 1 × 1, inhabited by tiny evil fishes (no more than one fish per cell, otherwise they'll strife!).\n\nThe gift bundle also includes a square scoop of size r × r, designed for fishing. If the lower-left corner of the scoop-net is located at cell (x, y), all fishes inside the square (x, y)...(x + r - 1, y + r - 1) get caught. Note that the scoop-net should lie completely inside the pond when used.\n\nUnfortunately, Sasha is not that skilled in fishing and hence throws the scoop randomly. In order to not frustrate Sasha, Misha decided to release k fishes into the empty pond in such a way that the expected value of the number of caught fishes is as high as possible. Help Misha! In other words, put k fishes in the pond into distinct cells in such a way that when the scoop-net is placed into a random position among (n - r + 1)·(m - r + 1) possible positions, the average number of caught fishes is as high as possible.\n\n\n-----Input-----\n\nThe only line contains four integers n, m, r, k (1 ≤ n, m ≤ 10^5, 1 ≤ r ≤ min(n, m), 1 ≤ k ≤ min(n·m, 10^5)).\n\n\n-----Output-----\n\nPrint a single number — the maximum possible expected number of caught fishes.\n\nYou answer is considered correct, is its absolute or relative error does not exceed 10^{ - 9}. Namely, let your answer be a, and the jury's answer be b. Your answer is considered correct, if $\\frac{|a - b|}{\\operatorname{max}(1,|b|)} \\leq 10^{-9}$.\n\n\n-----Examples-----\nInput\n3 3 2 3\n\nOutput\n2.0000000000\n\nInput\n12 17 9 40\n\nOutput\n32.8333333333\n\n\n\n-----Note-----\n\nIn the first example you can put the fishes in cells (2, 1), (2, 2), (2, 3). In this case, for any of four possible positions of the scoop-net (highlighted with light green), the number of fishes inside is equal to two, and so is the expected value. [Image]",
        "generated_code": "n, m, r, k = map(int, input().split())\nans = min(k, (n - r + 1) * (m - r + 1))\nprint(ans / ((n - r + 1) * (m - r + 1)))\n",
        "counter_example": {
            "input": "3 3 2 3\n",
            "expected": "2.0000000000\n",
            "got": "0.75"
        }
    },
    {
        "task_id": "0109",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "While Grisha was celebrating New Year with Ded Moroz, Misha gifted Sasha a small rectangular pond of size n × m, divided into cells of size 1 × 1, inhabited by tiny evil fishes (no more than one fish per cell, otherwise they'll strife!).\n\nThe gift bundle also includes a square scoop of size r × r, designed for fishing. If the lower-left corner of the scoop-net is located at cell (x, y), all fishes inside the square (x, y)...(x + r - 1, y + r - 1) get caught. Note that the scoop-net should lie completely inside the pond when used.\n\nUnfortunately, Sasha is not that skilled in fishing and hence throws the scoop randomly. In order to not frustrate Sasha, Misha decided to release k fishes into the empty pond in such a way that the expected value of the number of caught fishes is as high as possible. Help Misha! In other words, put k fishes in the pond into distinct cells in such a way that when the scoop-net is placed into a random position among (n - r + 1)·(m - r + 1) possible positions, the average number of caught fishes is as high as possible.\n\n\n-----Input-----\n\nThe only line contains four integers n, m, r, k (1 ≤ n, m ≤ 10^5, 1 ≤ r ≤ min(n, m), 1 ≤ k ≤ min(n·m, 10^5)).\n\n\n-----Output-----\n\nPrint a single number — the maximum possible expected number of caught fishes.\n\nYou answer is considered correct, is its absolute or relative error does not exceed 10^{ - 9}. Namely, let your answer be a, and the jury's answer be b. Your answer is considered correct, if $\\frac{|a - b|}{\\operatorname{max}(1,|b|)} \\leq 10^{-9}$.\n\n\n-----Examples-----\nInput\n3 3 2 3\n\nOutput\n2.0000000000\n\nInput\n12 17 9 40\n\nOutput\n32.8333333333\n\n\n\n-----Note-----\n\nIn the first example you can put the fishes in cells (2, 1), (2, 2), (2, 3). In this case, for any of four possible positions of the scoop-net (highlighted with light green), the number of fishes inside is equal to two, and so is the expected value. [Image]",
        "generated_code": "import heapq\n\ndef max_expected_fishes(n, m, r, k):\n    # Calculate the number of positions each cell can be covered by the scoop-net\n    def coverage(x, y):\n        return (min(x + 1, n - r + 1) - max(x - r + 1 + 1, 0)) * (min(y + 1, m - r + 1) - max(y - r + 1 + 1, 0))\n\n    # Use a max-heap to place fishes in the most frequently covered cells first\n    heap = []\n    for x in range(n):\n        for y in range(m):\n            heapq.heappush(heap, (-coverage(x, y), x, y))\n    \n    total_coverage = 0\n    for _ in range(k):\n        cov, x, y = heapq.heappop(heap)\n        total_coverage -= cov  # cov is negative, so we subtract to add the positive value\n\n    # Calculate the maximum expected number of caught fishes\n    total_positions = (n - r + 1) * (m - r + 1)\n    return total_coverage / total_positions\n\n# Read input\nimport sys\ninput = sys.stdin.read\nn, m, r, k = map(int, input().split())\n\n# Print the result\nprint(f\"{max_expected_fishes(n, m, r, k):.10f}\")\n",
        "counter_example": {
            "input": "3 3 2 3\n",
            "expected": "2.0000000000\n",
            "got": "0.7500000000"
        }
    },
    {
        "task_id": "0285",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "The teacher gave Anton a large geometry homework, but he didn't do it (as usual) as he participated in a regular round on Codeforces. In the task he was given a set of n lines defined by the equations y = k_{i}·x + b_{i}. It was necessary to determine whether there is at least one point of intersection of two of these lines, that lays strictly inside the strip between x_1 < x_2. In other words, is it true that there are 1 ≤ i < j ≤ n and x', y', such that:   y' = k_{i} * x' + b_{i}, that is, point (x', y') belongs to the line number i;  y' = k_{j} * x' + b_{j}, that is, point (x', y') belongs to the line number j;  x_1 < x' < x_2, that is, point (x', y') lies inside the strip bounded by x_1 < x_2. \n\nYou can't leave Anton in trouble, can you? Write a program that solves the given task.\n\n\n-----Input-----\n\nThe first line of the input contains an integer n (2 ≤ n ≤ 100 000) — the number of lines in the task given to Anton. The second line contains integers x_1 and x_2 ( - 1 000 000 ≤ x_1 < x_2 ≤ 1 000 000) defining the strip inside which you need to find a point of intersection of at least two lines.\n\nThe following n lines contain integers k_{i}, b_{i} ( - 1 000 000 ≤ k_{i}, b_{i} ≤ 1 000 000) — the descriptions of the lines. It is guaranteed that all lines are pairwise distinct, that is, for any two i ≠ j it is true that either k_{i} ≠ k_{j}, or b_{i} ≠ b_{j}.\n\n\n-----Output-----\n\nPrint \"Yes\" (without quotes), if there is at least one intersection of two distinct lines, located strictly inside the strip. Otherwise print \"No\" (without quotes).\n\n\n-----Examples-----\nInput\n4\n1 2\n1 2\n1 0\n0 1\n0 2\n\nOutput\nNO\nInput\n2\n1 3\n1 0\n-1 3\n\nOutput\nYES\nInput\n2\n1 3\n1 0\n0 2\n\nOutput\nYES\nInput\n2\n1 3\n1 0\n0 3\n\nOutput\nNO\n\n\n-----Note-----\n\nIn the first sample there are intersections located on the border of the strip, but there are no intersections located strictly inside it. [Image]",
        "generated_code": "n = int(input())\nx1, x2 = map(int, input().split())\nlines = []\nfor _ in range(n):\n    k, b = map(int, input().split())\n    lines.append((k, b))\n\ndef intersect(line1, line2, x1, x2):\n    k1, b1 = line1\n    k2, b2 = line2\n    if k1 == k2:\n        return False\n    x = (b2 - b1) / (k1 - k2)\n    if x1 < x < x2:\n        return True\n    return False\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        if intersect(lines[i], lines[j], x1, x2):\n            print(\"YES\")\n            exit()\nprint(\"NO\")\n",
        "counter_example": null
    },
    {
        "task_id": "0285",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "The teacher gave Anton a large geometry homework, but he didn't do it (as usual) as he participated in a regular round on Codeforces. In the task he was given a set of n lines defined by the equations y = k_{i}·x + b_{i}. It was necessary to determine whether there is at least one point of intersection of two of these lines, that lays strictly inside the strip between x_1 < x_2. In other words, is it true that there are 1 ≤ i < j ≤ n and x', y', such that:   y' = k_{i} * x' + b_{i}, that is, point (x', y') belongs to the line number i;  y' = k_{j} * x' + b_{j}, that is, point (x', y') belongs to the line number j;  x_1 < x' < x_2, that is, point (x', y') lies inside the strip bounded by x_1 < x_2. \n\nYou can't leave Anton in trouble, can you? Write a program that solves the given task.\n\n\n-----Input-----\n\nThe first line of the input contains an integer n (2 ≤ n ≤ 100 000) — the number of lines in the task given to Anton. The second line contains integers x_1 and x_2 ( - 1 000 000 ≤ x_1 < x_2 ≤ 1 000 000) defining the strip inside which you need to find a point of intersection of at least two lines.\n\nThe following n lines contain integers k_{i}, b_{i} ( - 1 000 000 ≤ k_{i}, b_{i} ≤ 1 000 000) — the descriptions of the lines. It is guaranteed that all lines are pairwise distinct, that is, for any two i ≠ j it is true that either k_{i} ≠ k_{j}, or b_{i} ≠ b_{j}.\n\n\n-----Output-----\n\nPrint \"Yes\" (without quotes), if there is at least one intersection of two distinct lines, located strictly inside the strip. Otherwise print \"No\" (without quotes).\n\n\n-----Examples-----\nInput\n4\n1 2\n1 2\n1 0\n0 1\n0 2\n\nOutput\nNO\nInput\n2\n1 3\n1 0\n-1 3\n\nOutput\nYES\nInput\n2\n1 3\n1 0\n0 2\n\nOutput\nYES\nInput\n2\n1 3\n1 0\n0 3\n\nOutput\nNO\n\n\n-----Note-----\n\nIn the first sample there are intersections located on the border of the strip, but there are no intersections located strictly inside it. [Image]",
        "generated_code": "n = int(input())\nx1, x2 = map(int, input().split())\n\nlines = []\nfor _ in range(n):\n    k, b = map(int, input().split())\n    lines.append((k, b))\n\n# Calculate the y-values at x1 and x2 for each line\ny_values_x1 = []\ny_values_x2 = []\nfor k, b in lines:\n    y_values_x1.append(k * x1 + b)\n    y_values_x2.append(k * x2 + b)\n\n# Pair the y-values with their corresponding slopes\npaired_y_values_x1 = list(zip(y_values_x1, lines))\npaired_y_values_x2 = list(zip(y_values_x2, lines))\n\n# Sort the pairs by y-values at x1 and x2\npaired_y_values_x1.sort()\npaired_y_values_x2.sort()\n\n# Check if the order changes between the left and right endpoints\nfor i in range(n - 1):\n    if paired_y_values_x1[i][1] != paired_y_values_x2[i][1]:\n        print(\"YES\")\n        break\nelse:\n    print(\"NO\")\n",
        "counter_example": {
            "input": "4\n1 2\n1 2\n1 0\n0 1\n0 2\n",
            "expected": "NO",
            "got": "YES"
        }
    },
    {
        "task_id": "0243",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Chouti was tired of the tedious homework, so he opened up an old programming problem he created years ago.\n\nYou are given a connected undirected graph with $n$ vertices and $m$ weighted edges. There are $k$ special vertices: $x_1, x_2, \\ldots, x_k$.\n\nLet's define the cost of the path as the maximum weight of the edges in it. And the distance between two vertexes as the minimum cost of the paths connecting them.\n\nFor each special vertex, find another special vertex which is farthest from it (in terms of the previous paragraph, i.e. the corresponding distance is maximum possible) and output the distance between them.\n\nThe original constraints are really small so he thought the problem was boring. Now, he raises the constraints and hopes you can solve it for him.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $m$ and $k$ ($2 \\leq k \\leq n \\leq 10^5$, $n-1 \\leq m \\leq 10^5$) — the number of vertices, the number of edges and the number of special vertices.\n\nThe second line contains $k$ distinct integers $x_1, x_2, \\ldots, x_k$ ($1 \\leq x_i \\leq n$).\n\nEach of the following $m$ lines contains three integers $u$, $v$ and $w$ ($1 \\leq u,v \\leq n, 1 \\leq w \\leq 10^9$), denoting there is an edge between $u$ and $v$ of weight $w$. The given graph is undirected, so an edge $(u, v)$ can be used in the both directions.\n\nThe graph may have multiple edges and self-loops.\n\nIt is guaranteed, that the graph is connected.\n\n\n-----Output-----\n\nThe first and only line should contain $k$ integers. The $i$-th integer is the distance between $x_i$ and the farthest special vertex from it.\n\n\n-----Examples-----\nInput\n2 3 2\n2 1\n1 2 3\n1 2 2\n2 2 1\n\nOutput\n2 2 \n\nInput\n4 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3\n\nOutput\n3 3 3 \n\n\n\n-----Note-----\n\nIn the first example, the distance between vertex $1$ and $2$ equals to $2$ because one can walk through the edge of weight $2$ connecting them. So the distance to the farthest node for both $1$ and $2$ equals to $2$.\n\nIn the second example, one can find that distance between $1$ and $2$, distance between $1$ and $3$ are both $3$ and the distance between $2$ and $3$ is $2$.\n\nThe graph may have multiple edges between and self-loops, as in the first example.",
        "generated_code": "import heapq\n\nn, m, k = map(int, input().split())\nspecial = list(map(int, input().split()))\ngraph = [[] for _ in range(n + 1)]\nfor _ in range(m):\n    u, v, w = map(int, input().split())\n    graph[u].append((v, w))\n    graph[v].append((u, w))\n\ndef dijkstra(start):\n    dist = [float('inf')] * (n + 1)\n    dist[start] = 0\n    pq = [(0, start)]\n    while pq:\n        d, u = heapq.heappop(pq)\n        if d > dist[u]:\n            continue\n        for v, w in graph[u]:\n            if max(d, w) < dist[v]:\n                dist[v] = max(d, w)\n                heapq.heappush(pq, (dist[v], v))\n    return dist\n\nans = []\nfor x in special:\n    dist = dijkstra(x)\n    mx = 0\n    for y in special:\n        if x != y:\n            mx = max(mx, dist[y])\n    ans.append(mx)\n\nprint(*ans)\n",
        "counter_example": null
    },
    {
        "task_id": "0243",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Chouti was tired of the tedious homework, so he opened up an old programming problem he created years ago.\n\nYou are given a connected undirected graph with $n$ vertices and $m$ weighted edges. There are $k$ special vertices: $x_1, x_2, \\ldots, x_k$.\n\nLet's define the cost of the path as the maximum weight of the edges in it. And the distance between two vertexes as the minimum cost of the paths connecting them.\n\nFor each special vertex, find another special vertex which is farthest from it (in terms of the previous paragraph, i.e. the corresponding distance is maximum possible) and output the distance between them.\n\nThe original constraints are really small so he thought the problem was boring. Now, he raises the constraints and hopes you can solve it for him.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $m$ and $k$ ($2 \\leq k \\leq n \\leq 10^5$, $n-1 \\leq m \\leq 10^5$) — the number of vertices, the number of edges and the number of special vertices.\n\nThe second line contains $k$ distinct integers $x_1, x_2, \\ldots, x_k$ ($1 \\leq x_i \\leq n$).\n\nEach of the following $m$ lines contains three integers $u$, $v$ and $w$ ($1 \\leq u,v \\leq n, 1 \\leq w \\leq 10^9$), denoting there is an edge between $u$ and $v$ of weight $w$. The given graph is undirected, so an edge $(u, v)$ can be used in the both directions.\n\nThe graph may have multiple edges and self-loops.\n\nIt is guaranteed, that the graph is connected.\n\n\n-----Output-----\n\nThe first and only line should contain $k$ integers. The $i$-th integer is the distance between $x_i$ and the farthest special vertex from it.\n\n\n-----Examples-----\nInput\n2 3 2\n2 1\n1 2 3\n1 2 2\n2 2 1\n\nOutput\n2 2 \n\nInput\n4 5 3\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 4\n1 3 3\n\nOutput\n3 3 3 \n\n\n\n-----Note-----\n\nIn the first example, the distance between vertex $1$ and $2$ equals to $2$ because one can walk through the edge of weight $2$ connecting them. So the distance to the farthest node for both $1$ and $2$ equals to $2$.\n\nIn the second example, one can find that distance between $1$ and $2$, distance between $1$ and $3$ are both $3$ and the distance between $2$ and $3$ is $2$.\n\nThe graph may have multiple edges between and self-loops, as in the first example.",
        "generated_code": "import heapq\nimport sys\ninput = sys.stdin.read\n\ndef dijkstra(n, graph, start):\n    dist = [float('inf')] * (n + 1)\n    dist[start] = 0\n    heap = [(0, start)]\n    \n    while heap:\n        max_cost, u = heapq.heappop(heap)\n        if max_cost > dist[u]:\n            continue\n        for v, weight in graph[u]:\n            max_w = max(max_cost, weight)\n            if max_w < dist[v]:\n                dist[v] = max_w\n                heapq.heappush(heap, (max_w, v))\n    \n    return dist\n\ndef main():\n    data = input().split()\n    idx = 0\n    \n    n = int(data[idx])\n    idx += 1\n    m = int(data[idx])\n    idx += 1\n    k = int(data[idx])\n    idx += 1\n    \n    special_vertices = []\n    for _ in range(k):\n        special_vertices.append(int(data[idx]))\n        idx += 1\n    \n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u = int(data[idx])\n        idx += 1\n        v = int(data[idx])\n        idx += 1\n        w = int(data[idx])\n        idx += 1\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    \n    result = []\n    for s_vertex in special_vertices:\n        dist = dijkstra(n, graph, s_vertex)\n        max_dist = 0\n        for t_vertex in special_vertices:\n            if s_vertex != t_vertex:\n                max_dist = max(max_dist, dist[t_vertex])\n        result.append(max_dist)\n    \n    print(\" \".join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n",
        "counter_example": null
    },
    {
        "task_id": "0216",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "You are given a sequence a consisting of n integers. You may partition this sequence into two sequences b and c in such a way that every element belongs exactly to one of these sequences. \n\nLet B be the sum of elements belonging to b, and C be the sum of elements belonging to c (if some of these sequences is empty, then its sum is 0). What is the maximum possible value of B - C?\n\n\n-----Input-----\n\nThe first line contains one integer n (1 ≤ n ≤ 100) — the number of elements in a.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} ( - 100 ≤ a_{i} ≤ 100) — the elements of sequence a.\n\n\n-----Output-----\n\nPrint the maximum possible value of B - C, where B is the sum of elements of sequence b, and C is the sum of elements of sequence c.\n\n\n-----Examples-----\nInput\n3\n1 -2 0\n\nOutput\n3\n\nInput\n6\n16 23 16 15 42 8\n\nOutput\n120\n\n\n\n-----Note-----\n\nIn the first example we may choose b = {1, 0}, c = { - 2}. Then B = 1, C =  - 2, B - C = 3.\n\nIn the second example we choose b = {16, 23, 16, 15, 42, 8}, c = {} (an empty sequence). Then B = 120, C = 0, B - C = 120.",
        "generated_code": "n = int(input())\na = list(map(int, input().split()))\na.sort(reverse=True)\nb, c = 0, 0\nfor i in range(n):\n    if i % 2 == 0:\n        b += a[i]\n    else:\n        c += a[i]\nprint(b - c)\n",
        "counter_example": {
            "input": "3\n1 -2 0\n",
            "expected": "3\n",
            "got": "-1"
        }
    },
    {
        "task_id": "0216",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "You are given a sequence a consisting of n integers. You may partition this sequence into two sequences b and c in such a way that every element belongs exactly to one of these sequences. \n\nLet B be the sum of elements belonging to b, and C be the sum of elements belonging to c (if some of these sequences is empty, then its sum is 0). What is the maximum possible value of B - C?\n\n\n-----Input-----\n\nThe first line contains one integer n (1 ≤ n ≤ 100) — the number of elements in a.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} ( - 100 ≤ a_{i} ≤ 100) — the elements of sequence a.\n\n\n-----Output-----\n\nPrint the maximum possible value of B - C, where B is the sum of elements of sequence b, and C is the sum of elements of sequence c.\n\n\n-----Examples-----\nInput\n3\n1 -2 0\n\nOutput\n3\n\nInput\n6\n16 23 16 15 42 8\n\nOutput\n120\n\n\n\n-----Note-----\n\nIn the first example we may choose b = {1, 0}, c = { - 2}. Then B = 1, C =  - 2, B - C = 3.\n\nIn the second example we choose b = {16, 23, 16, 15, 42, 8}, c = {} (an empty sequence). Then B = 120, C = 0, B - C = 120.",
        "generated_code": "# Read the input values\nn = int(input())\na = list(map(int, input().split()))\n\n# Calculate the maximum possible value of B - C\n# To maximize B - C, we should include all positive numbers in B and all negative numbers in C\nB = sum(x for x in a if x > 0)\nC = sum(x for x in a if x < 0)\n\n# The maximum value of B - C\nresult = B - C\n\n# Print the result\nprint(result)\n",
        "counter_example": null
    }
]