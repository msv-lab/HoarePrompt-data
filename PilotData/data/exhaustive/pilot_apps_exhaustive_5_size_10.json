[
    {
        "task_id": "0229",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Today, hedgehog Filya went to school for the very first time! Teacher gave him a homework which Filya was unable to complete without your help.\n\nFilya is given an array of non-negative integers a_1, a_2, ..., a_{n}. First, he pick an integer x and then he adds x to some elements of the array (no more than once), subtract x from some other elements (also, no more than once) and do no change other elements. He wants all elements of the array to be equal.\n\nNow he wonders if it's possible to pick such integer x and change some elements of the array using this x in order to make all elements equal.\n\n\n-----Input-----\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 100 000) — the number of integers in the Filya's array. The second line contains n integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} ≤ 10^9) — elements of the array.\n\n\n-----Output-----\n\nIf it's impossible to make all elements of the array equal using the process given in the problem statement, then print \"NO\" (without quotes) in the only line of the output. Otherwise print \"YES\" (without quotes).\n\n\n-----Examples-----\nInput\n5\n1 3 3 2 1\n\nOutput\nYES\n\nInput\n5\n1 2 3 4 5\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first sample Filya should select x = 1, then add it to the first and the last elements of the array and subtract from the second and the third elements.",
        "generated_code": "n = int(input())\na = list(map(int, input().split()))\na.sort()\nmid = a[n // 2]\nres = 0\nfor x in a:\n    res += abs(x - mid)\nif res % 2 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
        "counter_example": {
            "input": "5\n1 2 3 4 5\n",
            "expected": "NO\n",
            "got": "YES"
        }
    },
    {
        "task_id": "0229",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Today, hedgehog Filya went to school for the very first time! Teacher gave him a homework which Filya was unable to complete without your help.\n\nFilya is given an array of non-negative integers a_1, a_2, ..., a_{n}. First, he pick an integer x and then he adds x to some elements of the array (no more than once), subtract x from some other elements (also, no more than once) and do no change other elements. He wants all elements of the array to be equal.\n\nNow he wonders if it's possible to pick such integer x and change some elements of the array using this x in order to make all elements equal.\n\n\n-----Input-----\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 100 000) — the number of integers in the Filya's array. The second line contains n integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} ≤ 10^9) — elements of the array.\n\n\n-----Output-----\n\nIf it's impossible to make all elements of the array equal using the process given in the problem statement, then print \"NO\" (without quotes) in the only line of the output. Otherwise print \"YES\" (without quotes).\n\n\n-----Examples-----\nInput\n5\n1 3 3 2 1\n\nOutput\nYES\n\nInput\n5\n1 2 3 4 5\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first sample Filya should select x = 1, then add it to the first and the last elements of the array and subtract from the second and the third elements.",
        "generated_code": "def can_make_equal(arr):\n    # Get unique elements\n    unique_elements = list(set(arr))\n    \n    # If there's only 1 unique element, it's already all equal\n    if len(unique_elements) == 1:\n        return \"YES\"\n    \n    # If there are more than 3 unique elements, it's impossible\n    if len(unique_elements) > 3:\n        return \"NO\"\n    \n    # If there are exactly 3 unique elements\n    if len(unique_elements) == 3:\n        unique_elements.sort()\n        # Check if the middle element is the average of the other two\n        if unique_elements[1] - unique_elements[0] == unique_elements[2] - unique_elements[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    # If there are exactly 2 unique elements, it's always possible\n    return \"YES\"\n\n# Read input from standard input\nimport sys\ninput = sys.stdin.read\n\ndata = input().split()\nn = int(data[0])\narray = list(map(int, data[1:n+1]))\n\nprint(can_make_equal(array))\n",
        "counter_example": null
    },
    {
        "task_id": "0036",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \n\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\n\n\n-----Input-----\n\nThe only line of the input contains integer n (0 ≤ n ≤ 10^18) — the number of Ayrat's moves.\n\n\n-----Output-----\n\nPrint two integers x and y — current coordinates of Ayrat coordinates.\n\n\n-----Examples-----\nInput\n3\n\nOutput\n-2 0\n\nInput\n7\n\nOutput\n3 2",
        "generated_code": "n = int(input())\nif n == 0:\n    print(0, 0)\nelse:\n    m = 1\n    while True:\n        if (m * (m - 1)) // 2 >= n:\n            break\n        m += 1\n    x, y = 0, 0\n    if m % 2 == 1:\n        dx, dy = 1, 0\n    else:\n        dx, dy = 0, -1\n    for _ in range((m - 1) * (m - 2) // 2, (m - 1) * (m - 2) // 2 + n - 1):\n        x += dx\n        y += dy\n        if _ % (m - 1) == 0:\n            if m % 2 == 1:\n                dx, dy = -dy, dx\n            else:\n                dx, dy = dy, -dx\n    print(x, y)\n",
        "counter_example": {
            "input": "3\n",
            "expected": "-2 0\n",
            "got": "2 0"
        }
    },
    {
        "task_id": "0036",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \n\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\n\n\n-----Input-----\n\nThe only line of the input contains integer n (0 ≤ n ≤ 10^18) — the number of Ayrat's moves.\n\n\n-----Output-----\n\nPrint two integers x and y — current coordinates of Ayrat coordinates.\n\n\n-----Examples-----\nInput\n3\n\nOutput\n-2 0\n\nInput\n7\n\nOutput\n3 2",
        "generated_code": "def find_coordinates(n):\n    # Directions in hexagonal grid\n    directions = [(1, 0), (0, 1), (-1, 1), (-1, 0), (0, -1), (1, -1)]\n    \n    x, y = 0, 0  # Starting position\n    steps = 1    # Initial number of steps to take in a given direction\n    direction_index = 0  # Start with the first direction\n    \n    while n > 0:\n        for _ in range(2):  # Each direction length is repeated twice before increasing the steps\n            if n >= steps:\n                dx, dy = directions[direction_index]\n                x += dx * steps\n                y += dy * steps\n                n -= steps\n                direction_index = (direction_index + 1) % 6\n            else:\n                dx, dy = directions[direction_index]\n                x += dx * n\n                y += dy * n\n                return x, y\n        steps += 1  # Increase the number of steps after completing two directions\n    \n    return x, y\n\n# Read input\nn = int(input().strip())\n\n# Get the coordinates after n moves\nx, y = find_coordinates(n)\n\n# Print the result\nprint(x, y)\n",
        "counter_example": {
            "input": "3\n",
            "expected": "-2 0\n",
            "got": "0 2"
        }
    },
    {
        "task_id": "0054",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Vanya has a scales for weighing loads and weights of masses w^0, w^1, w^2, ..., w^100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.\n\n\n-----Input-----\n\nThe first line contains two integers w, m (2 ≤ w ≤ 10^9, 1 ≤ m ≤ 10^9) — the number defining the masses of the weights and the mass of the item.\n\n\n-----Output-----\n\nPrint word 'YES' if the item can be weighted and 'NO' if it cannot.\n\n\n-----Examples-----\nInput\n3 7\n\nOutput\nYES\n\nInput\n100 99\n\nOutput\nYES\n\nInput\n100 50\n\nOutput\nNO\n\n\n\n-----Note-----\n\nNote to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.\n\nNote to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.\n\nNote to the third sample test. It is impossible to measure the weight of the item in the manner described in the input.",
        "generated_code": "w, m = map(int, input().split())\nif m % w == 0:\n    print('NO')\nelse:\n    print('YES')\n",
        "counter_example": {
            "input": "100 50\n",
            "expected": "NO\n",
            "got": "YES"
        }
    },
    {
        "task_id": "0054",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Vanya has a scales for weighing loads and weights of masses w^0, w^1, w^2, ..., w^100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.\n\n\n-----Input-----\n\nThe first line contains two integers w, m (2 ≤ w ≤ 10^9, 1 ≤ m ≤ 10^9) — the number defining the masses of the weights and the mass of the item.\n\n\n-----Output-----\n\nPrint word 'YES' if the item can be weighted and 'NO' if it cannot.\n\n\n-----Examples-----\nInput\n3 7\n\nOutput\nYES\n\nInput\n100 99\n\nOutput\nYES\n\nInput\n100 50\n\nOutput\nNO\n\n\n\n-----Note-----\n\nNote to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.\n\nNote to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.\n\nNote to the third sample test. It is impossible to measure the weight of the item in the manner described in the input.",
        "generated_code": "def can_balance(w, m):\n    while m != 0:\n        if m % w <= 1:\n            m //= w\n        elif m % w == w - 1:\n            m = (m // w) + 1\n        else:\n            return \"NO\"\n    return \"YES\"\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    w = int(data[0])\n    m = int(data[1])\n    print(can_balance(w, m))\n",
        "counter_example": null
    },
    {
        "task_id": "0158",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Berland annual chess tournament is coming!\n\nOrganizers have gathered 2·n chess players who should be divided into two teams with n people each. The first team is sponsored by BerOil and the second team is sponsored by BerMobile. Obviously, organizers should guarantee the win for the team of BerOil.\n\nThus, organizers should divide all 2·n players into two teams with n people each in such a way that the first team always wins.\n\nEvery chess player has its rating r_{i}. It is known that chess player with the greater rating always wins the player with the lower rating. If their ratings are equal then any of the players can win.\n\nAfter teams assignment there will come a drawing to form n pairs of opponents: in each pair there is a player from the first team and a player from the second team. Every chess player should be in exactly one pair. Every pair plays once. The drawing is totally random.\n\nIs it possible to divide all 2·n players into two teams with n people each so that the player from the first team in every pair wins regardless of the results of the drawing?\n\n\n-----Input-----\n\nThe first line contains one integer n (1 ≤ n ≤ 100).\n\nThe second line contains 2·n integers a_1, a_2, ... a_2n (1 ≤ a_{i} ≤ 1000).\n\n\n-----Output-----\n\nIf it's possible to divide all 2·n players into two teams with n people each so that the player from the first team in every pair wins regardless of the results of the drawing, then print \"YES\". Otherwise print \"NO\".\n\n\n-----Examples-----\nInput\n2\n1 3 2 4\n\nOutput\nYES\n\nInput\n1\n3 3\n\nOutput\nNO",
        "generated_code": "n = int(input())\nratings = list(map(int, input().split()))\nratings.sort(reverse=True)\ncan_win = True\nfor i in range(n):\n    if ratings[i] <= ratings[n+i]:\n        can_win = False\n        break\nprint(\"YES\" if can_win else \"NO\")\n",
        "counter_example": {
            "input": "5\n1 1 1 1 2 2 3 3 3 3\n",
            "expected": "NO\n",
            "got": "YES"
        }
    },
    {
        "task_id": "0158",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Berland annual chess tournament is coming!\n\nOrganizers have gathered 2·n chess players who should be divided into two teams with n people each. The first team is sponsored by BerOil and the second team is sponsored by BerMobile. Obviously, organizers should guarantee the win for the team of BerOil.\n\nThus, organizers should divide all 2·n players into two teams with n people each in such a way that the first team always wins.\n\nEvery chess player has its rating r_{i}. It is known that chess player with the greater rating always wins the player with the lower rating. If their ratings are equal then any of the players can win.\n\nAfter teams assignment there will come a drawing to form n pairs of opponents: in each pair there is a player from the first team and a player from the second team. Every chess player should be in exactly one pair. Every pair plays once. The drawing is totally random.\n\nIs it possible to divide all 2·n players into two teams with n people each so that the player from the first team in every pair wins regardless of the results of the drawing?\n\n\n-----Input-----\n\nThe first line contains one integer n (1 ≤ n ≤ 100).\n\nThe second line contains 2·n integers a_1, a_2, ... a_2n (1 ≤ a_{i} ≤ 1000).\n\n\n-----Output-----\n\nIf it's possible to divide all 2·n players into two teams with n people each so that the player from the first team in every pair wins regardless of the results of the drawing, then print \"YES\". Otherwise print \"NO\".\n\n\n-----Examples-----\nInput\n2\n1 3 2 4\n\nOutput\nYES\n\nInput\n1\n3 3\n\nOutput\nNO",
        "generated_code": "# Read input\nn = int(input())\nratings = list(map(int, input().split()))\n\n# Sort the ratings\nratings.sort()\n\n# Split the sorted ratings into two teams\nteam1 = ratings[:n]\nteam2 = ratings[n:]\n\n# Check if every player in team1 has a higher rating than every player in team2\npossible = all(team1[i] < team2[i] for i in range(n))\n\n# Output the result\nif possible:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n",
        "counter_example": {
            "input": "5\n1 1 1 1 2 2 3 3 3 3\n",
            "expected": "NO\n",
            "got": "YES"
        }
    },
    {
        "task_id": "0033",
        "dataset": "apps",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "You are given two arithmetic progressions: a_1k + b_1 and a_2l + b_2. Find the number of integers x such that L ≤ x ≤ R and x = a_1k' + b_1 = a_2l' + b_2, for some integers k', l' ≥ 0.\n\n\n-----Input-----\n\nThe only line contains six integers a_1, b_1, a_2, b_2, L, R (0 < a_1, a_2 ≤ 2·10^9,  - 2·10^9 ≤ b_1, b_2, L, R ≤ 2·10^9, L ≤ R).\n\n\n-----Output-----\n\nPrint the desired number of integers x.\n\n\n-----Examples-----\nInput\n2 0 3 3 5 21\n\nOutput\n3\n\nInput\n2 4 3 0 6 17\n\nOutput\n2",
        "generated_code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\na1, b1, a2, b2, L, R = map(int, input().split())\ngcd_val = gcd(a1, a2)\nlcm_val = a1 * a2 // gcd_val\nstart = max((L - b1) // a1, (L - b2) // a2)\nend = min((R - b1) // a1, (R - b2) // a2)\ncount = 0\nfor k in range(start, end + 1):\n    if (a1 * k + b1 - b2) % a2 == 0 and L <= a1 * k + b1 <= R:\n        count += 1\nprint(count)\n",
        "counter_example": {
            "input": "2 0 3 3 5 21\n",
            "expected": "3\n",
            "got": "2"
        }
    },
    {
        "task_id": "0033",
        "dataset": "apps",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "You are given two arithmetic progressions: a_1k + b_1 and a_2l + b_2. Find the number of integers x such that L ≤ x ≤ R and x = a_1k' + b_1 = a_2l' + b_2, for some integers k', l' ≥ 0.\n\n\n-----Input-----\n\nThe only line contains six integers a_1, b_1, a_2, b_2, L, R (0 < a_1, a_2 ≤ 2·10^9,  - 2·10^9 ≤ b_1, b_2, L, R ≤ 2·10^9, L ≤ R).\n\n\n-----Output-----\n\nPrint the desired number of integers x.\n\n\n-----Examples-----\nInput\n2 0 3 3 5 21\n\nOutput\n3\n\nInput\n2 4 3 0 6 17\n\nOutput\n2",
        "generated_code": "def gcd_extended(a, b):\n    if a == 0:\n        return b, 0, 1\n    gcd, x1, y1 = gcd_extended(b % a, a)\n    x = y1 - (b // a) * x1\n    y = x1\n    return gcd, x, y\n\ndef find_integer_solutions(a1, b1, a2, b2, L, R):\n    A = a1\n    B = -a2\n    C = b2 - b1\n\n    gcd, x0, y0 = gcd_extended(abs(A), abs(B))\n    \n    if C % gcd != 0:\n        return -1\n    \n    x0 *= C // gcd\n    y0 *= C // gcd\n    \n    if A < 0:\n        x0 = -x0\n    if B < 0:\n        y0 = -y0\n    \n    a1_div_gcd = a1 // gcd\n    a2_div_gcd = a2 // gcd\n    \n    def adjust_solution(x, y, a1_div_gcd, a2_div_gcd, sign_a1, sign_a2):\n        if sign_a1 > 0:\n            k = (L - (b1 + a1 * x)) // (a1 * a1_div_gcd)\n            x += k * a2_div_gcd\n            y -= k * a1_div_gcd\n        else:\n            k = (R - (b1 + a1 * x)) // (a1 * a1_div_gcd)\n            x += k * a2_div_gcd\n            y -= k * a1_div_gcd\n        \n        if b1 + a1 * x < L:\n            x += a2_div_gcd\n            y -= a1_div_gcd\n        if b1 + a1 * x > R:\n            x -= a2_div_gcd\n            y += a1_div_gcd\n        \n        return x, y\n    \n    x0, y0 = adjust_solution(x0, y0, a1_div_gcd, a2_div_gcd, 1, -1)\n    \n    count = 0\n    while True:\n        val = a1 * x0 + b1\n        if val > R:\n            break\n        if L <= val <= R:\n            count += 1\n        x0 += a2_div_gcd\n        y0 -= a1_div_gcd\n    \n    return count\n\n# Input\na1, b1, a2, b2, L, R = map(int, input().split())\n\n# Output\nprint(find_integer_solutions(a1, b1, a2, b2, L, R))\n",
        "counter_example": {
            "input": "2 0 4 2 -39 -37\n",
            "expected": "0\n",
            "got": "1"
        }
    }
]