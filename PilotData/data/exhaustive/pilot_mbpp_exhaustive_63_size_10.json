[
    {
        "task_id": "Mbpp/251",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
        "generated_code": "def insert_element(input_list, element):\n    return [element] + [element] + [x for x in input_list for _ in range(2)]\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    "Red",
                    "Green",
                    "Black"
                ],
                "c"
            ],
            "expected": [
                "c",
                "Red",
                "c",
                "Green",
                "c",
                "Black"
            ],
            "got": [
                "c",
                "c",
                "Red",
                "Red",
                "Green",
                "Green",
                "Black",
                "Black"
            ]
        }
    },
    {
        "task_id": "Mbpp/251",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.",
        "generated_code": "def insert_element(lst, elem):\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    result.append(elem)  # Append the element at the end as per the problem statement\n    return result\n\n# Test cases\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']\nassert insert_element(['python', 'java'], 'program') == ['program', 'python', 'program', 'java']\nassert insert_element(['happy', 'sad'], 'laugh') == ['laugh', 'happy', 'laugh', 'sad']\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    "Red",
                    "Green",
                    "Black"
                ],
                "c"
            ],
            "expected": [
                "c",
                "Red",
                "c",
                "Green",
                "c",
                "Black"
            ],
            "got": null
        }
    },
    {
        "task_id": "Mbpp/596",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the size in bytes of the given tuple.",
        "generated_code": "import sys\n\ndef tuple_size(tup):\n    return sys.getsizeof(tup)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/596",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the size in bytes of the given tuple.",
        "generated_code": "import sys\n\ndef tuple_size(tup):\n    return sys.getsizeof(tup)\n\n# Test cases to verify the solution\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/124",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to get the angle of a complex number.",
        "generated_code": "import math\nimport cmath\n\ndef angle_complex(real, imag):\n    complex_num = complex(real, imag)\n    return cmath.phase(complex_num)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                "0",
                "1j"
            ],
            "expected": null,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/124",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to get the angle of a complex number.",
        "generated_code": "import cmath\n\ndef angle_complex(real, imag):\n    # Create the complex number\n    complex_number = complex(real, imag)\n    # Return the phase (angle) of the complex number\n    return cmath.phase(complex_number)\n\n# Test cases\nimport math\n\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\nassert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)\nassert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                "0",
                "1j"
            ],
            "expected": null,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/737",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "generated_code": "import re\ndef check_str(s):\n  return bool(re.match(r'^[aeiouAEIOU]', s))\n",
        "counter_example": "(non-serializable) {'test_type': 'base', 'inputs': ['annie'], 'expected': <re.Match object; span=(0, 5), match='annie'>, 'got': True}"
    },
    {
        "task_id": "Mbpp/737",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to check whether the given string is starting with a vowel or not using regex.",
        "generated_code": "import re\n\ndef check_str(s):\n    # Define the regular expression pattern to check if the string starts with a vowel\n    pattern = r'^[aeiouAEIOU]'\n    # Use re.match to check if the string matches the pattern\n    return re.match(pattern, s) is not None\n\n# Tests\nassert check_str(\"annie\")\nassert not check_str(\"dawood\")\nassert check_str(\"Else\")\n",
        "counter_example": "(non-serializable) {'test_type': 'base', 'inputs': ['annie'], 'expected': <re.Match object; span=(0, 5), match='annie'>, 'got': True}"
    },
    {
        "task_id": "Mbpp/287",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "generated_code": "def square_Sum(n: int) -> int:\n    return sum(i**2 for i in range(2, 2*n + 1, 2))\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                1000000
            ],
            "expected": 1.333335333334e+18,
            "got": 1333335333334000000
        }
    },
    {
        "task_id": "Mbpp/287",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.",
        "generated_code": "def square_Sum(n):\n    return sum((2 * i) ** 2 for i in range(1, n + 1))\n\n# Test cases\nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                1000000
            ],
            "expected": 1.333335333334e+18,
            "got": 1333335333334000000
        }
    }
]