[
    {
        "task_id": "Mbpp/58",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to check whether the given two integers have opposite sign or not.",
        "generated_code": "def opposite_Signs(a, b):\n    return (a > 0 and b < 0) or (a < 0 and b > 0)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/58",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to check whether the given two integers have opposite sign or not.",
        "generated_code": "def opposite_Signs(a, b):\n    return (a * b) < 0\n\n# Tests\nassert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False\nassert opposite_Signs(-2,2) == True\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/455",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to check whether the given month number contains 31 days or not.",
        "generated_code": "def check_monthnumb_number(n: int) -> bool:\n    month_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return n in month_with_31_days\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/455",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to check whether the given month number contains 31 days or not.",
        "generated_code": "def check_monthnumb_number(month):\n    # List of months with 31 days\n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    return month in months_with_31_days\n\n# Test cases\nassert check_monthnumb_number(5) == True\nassert check_monthnumb_number(2) == False\nassert check_monthnumb_number(6) == False\nassert check_monthnumb_number(1) == True\nassert check_monthnumb_number(12) == True\nassert check_monthnumb_number(11) == False\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/308",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
        "generated_code": "import heapq as hq\nimport itertools\n\ndef large_product(list1, list2, n):\n    products = [x * y for x, y in itertools.product(list1, list2)]\n    largest_products = hq.nlargest(n, products)\n    return largest_products\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/308",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.",
        "generated_code": "def large_product(list1, list2, n):\n    products = [a * b for a in list1 for b in list2]\n    products.sort(reverse=True)\n    return products[:n]\n\n# Test cases to validate the solution\nassert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4) == [60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5) == [60, 54, 50, 48, 45]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/585",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the n most expensive items in a given dataset.",
        "generated_code": "import heapq\n\ndef expensive_items(dataset, n):\n    return heapq.nlargest(n, dataset, key=lambda x: x['price'])\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/585",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the n most expensive items in a given dataset.",
        "generated_code": "import heapq as hq\n\ndef expensive_items(items, n):\n    # Use heapq.nlargest to get the n items with the highest 'price'\n    return hq.nlargest(n, items, key=lambda x: x['price'])\n\n# Test cases to validate the solution\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1) == [{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2) == [{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1) == [{'name': 'Item-2', 'price': 555.22}]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/555",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "generated_code": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/555",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.",
        "generated_code": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_cubes_n = sum_n ** 2\n    \n    # Calculate the difference\n    return sum_cubes_n - sum_n\n\n# Tests\nassert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6\n",
        "counter_example": null
    }
]