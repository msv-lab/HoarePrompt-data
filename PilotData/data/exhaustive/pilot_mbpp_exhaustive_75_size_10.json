[
    {
        "task_id": "Mbpp/273",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "generated_code": "def substract_elements(tup1, tup2):\n    return tuple(a - b for a, b in zip(tup1, tup2))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/273",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.",
        "generated_code": "def substract_elements(tup1, tup2):\n    return tuple(a - b for a, b in zip(tup1, tup2))\n\n# Test cases\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/572",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to remove duplicate numbers from a given number of lists.",
        "generated_code": "def two_unique_nums(nums):\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    unique_nums = [num for num, count in count_dict.items() if count == 1]\n    return unique_nums\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/572",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to remove duplicate numbers from a given number of lists.",
        "generated_code": "from collections import Counter\n\ndef two_unique_nums(lst):\n    # Count the occurrences of each number in the list\n    count = Counter(lst)\n    \n    # Filter out the numbers that occur more than once\n    result = [num for num in lst if count[num] == 1]\n    \n    return result\n\n# Testing the function with the provided test cases\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/612",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
        "generated_code": "def merge(list_of_lists):\n    return [list(element[0] for element in list_of_lists), list(element[1] for element in list_of_lists)]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/612",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.",
        "generated_code": "def merge(list_of_lists):\n    first_elements = [sublist[0] for sublist in list_of_lists]\n    second_elements = [sublist[1] for sublist in list_of_lists]\n    return [first_elements, second_elements]\n\n# Test cases\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([[[1], [2]], [[3], [4]], [[5], [6]], [[7], [8]]]) == [[[1], [3], [5], [7]], [[2], [4], [6], [8]]]\n\nprint(\"All test cases passed!\")\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/97",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
        "generated_code": "def frequency_lists(lists):\n    freq_dict = {}\n    for sublist in lists:\n        for elem in sublist:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/97",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.",
        "generated_code": "from collections import defaultdict\n\ndef frequency_lists(list_of_lists):\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list_of_lists for item in sublist]\n    \n    # Use defaultdict to count the frequency of each element\n    frequency_dict = defaultdict(int)\n    for item in flattened_list:\n        frequency_dict[item] += 1\n    \n    return dict(frequency_dict)\n\n# Test cases\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]]) == {20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1}\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/92",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to check whether the given number is undulating or not.",
        "generated_code": "def is_undulating(n):\n    n = str(n)\n    if len(n) < 2:\n        return False\n    increasing = False\n    for i in range(1, len(n)):\n        if n[i] == n[i-1]:\n            return False\n        if n[i] > n[i-1]:\n            if not increasing:\n                increasing = True\n            else:\n                return False\n        else:\n            if increasing:\n                increasing = False\n            else:\n                return False\n    return True\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                2121212121212121
            ],
            "expected": true,
            "got": false
        }
    },
    {
        "task_id": "Mbpp/92",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to check whether the given number is undulating or not.",
        "generated_code": "def is_undulating(n):\n    s = str(n)\n    if len(s) < 3:\n        return False\n    first_digit = s[0]\n    second_digit = s[1]\n    if first_digit == second_digit:\n        return False\n    \n    for i in range(2, len(s)):\n        if i % 2 == 0 and s[i] != first_digit:\n            return False\n        if i % 2 == 1 and s[i] != second_digit:\n            return False\n            \n    return True\n\n# Test cases\nassert is_undulating(1212121) == True\nassert is_undulating(1991) == False\nassert is_undulating(121) == True\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                82
            ],
            "expected": true,
            "got": false
        }
    }
]