[
    {
        "task_id": "Mbpp/759",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "generated_code": "import re\ndef is_decimal(s: str) -> bool:\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.fullmatch(pattern, s))\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "123"
            ],
            "expected": true,
            "got": false
        }
    },
    {
        "task_id": "Mbpp/759",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to check whether a given string is a decimal number with a precision of 2.",
        "generated_code": "import re\n\ndef is_decimal(s: str) -> bool:\n    # Regex pattern to match a number with exactly two decimal places\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, s))\n\n# Testing the provided test cases\nassert is_decimal('123.11') == True\nassert is_decimal('e666.86') == False\nassert is_decimal('3.124587') == False\nassert is_decimal('1.11') == True\nassert is_decimal('1.1.11') == False\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "123"
            ],
            "expected": true,
            "got": false
        }
    },
    {
        "task_id": "Mbpp/238",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to count the number of non-empty substrings of a given string.",
        "generated_code": "def number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/238",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to count the number of non-empty substrings of a given string.",
        "generated_code": "def number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2\n\n# Test cases\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/808",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to check if the given tuples contain the k or not.",
        "generated_code": "def check_K(tuple_k, k):\n    return k in tuple_k\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/808",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to check if the given tuples contain the k or not.",
        "generated_code": "def check_K(tup, k):\n    return k in tup\n\n# Test cases\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/282",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to subtract two lists element-wise.",
        "generated_code": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/282",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to subtract two lists element-wise.",
        "generated_code": "def sub_list(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]\n\n# Testing the provided test cases\nassert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]\nassert sub_list([1, 2], [3, 4]) == [-2, -2]\nassert sub_list([90, 120], [50, 70]) == [40, 50]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/569",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to sort each sublist of strings in a given list of lists.",
        "generated_code": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/569",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to sort each sublist of strings in a given list of lists.",
        "generated_code": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]\n\n# Test cases\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]) == [['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'], ['f','e']]) == [['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n",
        "counter_example": null
    }
]