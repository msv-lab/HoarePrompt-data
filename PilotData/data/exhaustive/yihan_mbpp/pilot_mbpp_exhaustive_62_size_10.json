[
    {
        "task_id": "Mbpp/587",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to convert a list to a tuple.",
        "generated_code": "def list_tuple(lst):\n    return tuple(lst)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/587",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to convert a list to a tuple.",
        "generated_code": "def list_tuple(lst):\n    return tuple(lst)\n\n# Provided test cases\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7]) == (2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58, 44, 56]) == (58, 44, 56)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/271",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "generated_code": "def even_Power_Sum(n: int) -> int:\n    return sum(i**5 for i in range(2, 2*n + 1, 2))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/271",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.",
        "generated_code": "def even_Power_Sum(n):\n    return sum((2 * i) ** 5 for i in range(1, n + 1))\n\n# Test cases\nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/439",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to join a list of multiple integers into a single integer.",
        "generated_code": "def multiple_to_single(integers):\n    return int(''.join(map(str, integers)))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/439",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to join a list of multiple integers into a single integer.",
        "generated_code": "def multiple_to_single(lst):\n    # Convert each integer in the list to a string and join them\n    result_str = ''.join(map(str, lst))\n    # Convert the concatenated string back to an integer\n    result_int = int(result_str)\n    return result_int\n\n# Test cases\nassert multiple_to_single([11, 33, 50]) == 113350\nassert multiple_to_single([-1, 2, 3, 4, 5, 6]) == -123456\nassert multiple_to_single([10, 15, 20, 25]) == 10152025\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/558",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to find the sum of the per-digit difference between two integers.",
        "generated_code": "def digit_distance_nums(num1, num2):\n    str_num1, str_num2 = str(num1), str(str(num2))\n    max_len = max(len(str_num1), len(str_num2))\n    str_num1, str_num2 = str_num1.zfill(max_len), str_num2.zfill(max_len)\n    return sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str_num1, str_num2))\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                12345,
                9
            ],
            "expected": 8,
            "got": 14
        }
    },
    {
        "task_id": "Mbpp/558",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to find the sum of the per-digit difference between two integers.",
        "generated_code": "def digit_distance_nums(num1, num2):\n    # Convert numbers to strings\n    str1, str2 = str(num1), str(num2)\n    \n    # Pad the shorter string with leading zeros\n    max_len = max(len(str1), len(str2))\n    str1, str2 = str1.zfill(max_len), str2.zfill(max_len)\n    \n    # Calculate the sum of absolute differences of corresponding digits\n    total_diff = sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str1, str2))\n    \n    return total_diff\n\n# Provided test cases\nassert digit_distance_nums(1, 2) == 1\nassert digit_distance_nums(23, 56) == 6\nassert digit_distance_nums(123, 256) == 7\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                12345,
                9
            ],
            "expected": 8,
            "got": 14
        }
    },
    {
        "task_id": "Mbpp/460",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to get the first element of each sublist.",
        "generated_code": "def Extract(lst):\n    return [sublist[0] for sublist in lst]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/460",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to get the first element of each sublist.",
        "generated_code": "def Extract(lst):\n    return [sublist[0] for sublist in lst]\n\n# Test cases to validate the solution\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]\n",
        "counter_example": null
    }
]