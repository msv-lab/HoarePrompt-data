[
    {
        "task_id": "Mbpp/95",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the length of the smallest list in a list of lists.",
        "generated_code": "def Find_Min_Length(list_of_lists):\n    return min(len(sublist) for sublist in list_of_lists)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/95",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the length of the smallest list in a list of lists.",
        "generated_code": "def Find_Min_Length(list_of_lists):\n    # Initialize the minimum length to a very large number\n    min_length = float('inf')\n    \n    # Iterate over each sublist in the list of lists\n    for sublist in list_of_lists:\n        # Update the minimum length if the current sublist is shorter\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    return min_length\n\n# Test cases\nassert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/580",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to remove uneven elements in the nested mixed tuple.",
        "generated_code": "def extract_even(tup):\n    return tuple(i if isinstance(i, tuple) else i for i in tup if isinstance(i, int) and i % 2 == 0 or (isinstance(i, tuple) and all(j % 2 == 0 for j in i)))\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    4,
                    5,
                    [
                        7,
                        6,
                        [
                            2,
                            4
                        ]
                    ],
                    6,
                    8
                ]
            ],
            "expected": null,
            "got": [
                4,
                6,
                8
            ]
        }
    },
    {
        "task_id": "Mbpp/580",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to remove uneven elements in the nested mixed tuple.",
        "generated_code": "def extract_even(data):\n    if isinstance(data, int):  # If the element is an integer\n        return data if data % 2 == 0 else None  # Return the element if it's even, otherwise None\n    elif isinstance(data, tuple):  # If the element is a tuple\n        result = tuple(filter(None, (extract_even(item) for item in data)))  # Recursively process each item in the tuple\n        return result if result else None  # Return the processed tuple if it's not empty, otherwise None\n    return None  # For any other type, return None (though this shouldn't happen in the given problem context)\n\n# Testing the function\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    4,
                    5,
                    [
                        7,
                        6,
                        [
                            2,
                            4
                        ]
                    ],
                    6,
                    8
                ]
            ],
            "expected": null,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/598",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to check whether the given number is armstrong or not.",
        "generated_code": "def armstrong_number(n: int) -> bool:\n    num_str = str(n)\n    num_len = len(num_str)\n    sum_of_digits = sum(int(digit) ** num_len for digit in num_str)\n    return sum_of_digits == n\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/598",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to check whether the given number is armstrong or not.",
        "generated_code": "def armstrong_number(n):\n    # Convert the number to string to easily iterate through its digits\n    num_str = str(n)\n    # Calculate the number of digits\n    num_len = len(num_str)\n    # Calculate the sum of the digits each raised to the power of the number of digits\n    armstrong_sum = sum(int(digit) ** num_len for digit in num_str)\n    # Compare the sum to the original number\n    return armstrong_sum == n\n\n# Tests\nassert armstrong_number(153) == True\nassert armstrong_number(259) == False\nassert armstrong_number(4458) == False\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/576",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to check whether a list is sublist of another or not.",
        "generated_code": "def is_Sub_Array(list1, list2):\n    len_list1 = len(list1)\n    len_list2 = len(list2)\n    for i in range(len_list1):\n        if list1[i:i+len_list2] == list2:\n            return True\n    return False\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [],
                []
            ],
            "expected": true,
            "got": false
        }
    },
    {
        "task_id": "Mbpp/576",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to check whether a list is sublist of another or not.",
        "generated_code": "def is_Sub_Array(main_list, sub_list):\n    \"\"\"\n    Check if sub_list is a sublist of main_list.\n\n    :param main_list: List of integers\n    :param sub_list: List of integers to check as sublist\n    :return: Boolean indicating if sub_list is a sublist of main_list\n    \"\"\"\n    if not sub_list:  # An empty list is always a sublist\n        return True\n    \n    len_main = len(main_list)\n    len_sub = len(sub_list)\n    \n    # Iterate through the main list to see if we can find the sub_list\n    for i in range(len_main - len_sub + 1):\n        if main_list[i:i+len_sub] == sub_list:\n            return True\n    \n    return False\n\n# Test cases\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\nassert is_Sub_Array([1,2,1],[1,2,1]) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0]) == False\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    3,
                    5
                ]
            ],
            "expected": true,
            "got": false
        }
    },
    {
        "task_id": "Mbpp/565",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to split a string into characters.",
        "generated_code": "def split(s: str) -> list:\n    return list(s)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/565",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to split a string into characters.",
        "generated_code": "def split(s):\n    return list(s)\n\n# Tests\nassert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']\n",
        "counter_example": null
    }
]