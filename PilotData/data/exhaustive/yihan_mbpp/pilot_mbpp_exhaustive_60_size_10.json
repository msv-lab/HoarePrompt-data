[
    {
        "task_id": "Mbpp/224",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
        "generated_code": "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/224",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to count the number of set bits (binary digits with value 1) in a given number.",
        "generated_code": "def count_Set_Bits(n):\n    return bin(n).count('1')\n\n# Test cases\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/421",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to concatenate each element of tuple by the delimiter.",
        "generated_code": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(map(str, tup))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/421",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to concatenate each element of tuple by the delimiter.",
        "generated_code": "def concatenate_tuple(input_tuple):\n    return '-'.join(map(str, input_tuple))\n\n# Test cases\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\")) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\")) == 'ZEN-is-4-OP'\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/140",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to flatten the list of lists into a single set of numbers.",
        "generated_code": "def extract_singly(tuples_list):\n    return set(num for tup in tuples_list for num in tup)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/140",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to flatten the list of lists into a single set of numbers.",
        "generated_code": "def extract_singly(list_of_lists):\n    # Use a set comprehension to flatten the list of lists into a single set\n    return {element for sublist in list_of_lists for element in sublist}\n\n# Test cases to verify the implementation\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == set([3, 4, 5, 7, 1])\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == set([1, 2, 3, 4, 7, 8])\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == set([7, 8, 9, 10, 11, 12])\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/397",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the median of three numbers.",
        "generated_code": "def median_numbers(a, b, c):\n    return float(sorted([a, b, c])[1])\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/397",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the median of three numbers.",
        "generated_code": "def median_numbers(a, b, c):\n    # Create a list of the three numbers\n    nums = [a, b, c]\n    # Sort the list\n    nums.sort()\n    # Return the middle number as the median\n    return float(nums[1])\n\n# Test cases to verify the implementation\nassert median_numbers(25, 55, 65) == 55.0\nassert median_numbers(20, 10, 30) == 20.0\nassert median_numbers(15, 45, 75) == 45.0\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/611",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.",
        "generated_code": "def max_of_nth(matrix, n):\n    return max(row[n-1] for row in matrix)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    [
                        5,
                        6,
                        7
                    ],
                    [
                        1,
                        3,
                        5
                    ],
                    [
                        8,
                        9,
                        19
                    ]
                ],
                2
            ],
            "expected": 19,
            "got": 9
        }
    },
    {
        "task_id": "Mbpp/611",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function which given a matrix represented as a list of lists returns the max of the n'th column.",
        "generated_code": "def max_of_nth(matrix, n):\n    # Extract the nth column (0-indexed)\n    nth_column = [row[n] for row in matrix]\n    # Return the maximum value from the nth column\n    return max(nth_column)\n\n# Test cases\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\nassert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11\n",
        "counter_example": null
    }
]