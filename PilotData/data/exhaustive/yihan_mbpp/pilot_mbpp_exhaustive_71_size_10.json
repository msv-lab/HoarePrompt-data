[
    {
        "task_id": "Mbpp/720",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to add a dictionary to the tuple. The output should be a tuple.",
        "generated_code": "def add_dict_to_tuple(tup, dictionary):\n    return tup + (dictionary,)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    4,
                    5,
                    6
                ],
                {
                    "MSAM": 1,
                    "is": 2,
                    "best": 3
                }
            ],
            "expected": null,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/720",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to add a dictionary to the tuple. The output should be a tuple.",
        "generated_code": "def add_dict_to_tuple(input_tuple, input_dict):\n    return input_tuple + (input_dict,)\n\n# Test cases\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    4,
                    5,
                    6
                ],
                {
                    "MSAM": 1,
                    "is": 2,
                    "best": 3
                }
            ],
            "expected": null,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/476",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "generated_code": "def big_sum(arr):\n    return max(arr) + min(arr)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/476",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "generated_code": "def big_sum(arr):\n    if not arr:\n        return 0\n    smallest = min(arr)\n    largest = max(arr)\n    return smallest + largest\n\n# Test cases\nassert big_sum([1, 2, 3]) == 4\nassert big_sum([-1, 2, 3, 4]) == 3\nassert big_sum([2, 3, 6]) == 8\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/608",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to find nth bell number.",
        "generated_code": "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n)] for _ in range(n)]\n    bell[0][0] = 1\n    for i in range(1, n):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n-1][n-1]\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                false
            ],
            "expected": 1,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/608",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find nth bell number.",
        "generated_code": "def bell_Number(n):\n    # Create a table to store Bell numbers\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    \n    # Base case: The 0th Bell number is 1\n    bell[0][0] = 1\n    \n    # Fill the Bell table\n    for i in range(1, n+1):\n        # Explicitly put the Bell number of previous row at the first position of current row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the entries in the current row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    # The nth Bell number is the first entry in the nth row\n    return bell[n][0]\n\n# Test cases\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/606",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to convert degrees to radians.",
        "generated_code": "import math\ndef radian_degree(n):\n    return n * math.pi / 180\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/606",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to convert degrees to radians.",
        "generated_code": "import math\n\ndef radian_degree(degrees):\n    return degrees * (math.pi / 180)\n\n# Test cases\nassert radian_degree(90) == 1.5707963267948966\nassert radian_degree(60) == 1.0471975511965976\nassert radian_degree(120) == 2.0943951023931953\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                -92
            ],
            "expected": -1.605702911834783,
            "got": -1.6057029118347832
        }
    },
    {
        "task_id": "Mbpp/807",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the first odd number in a given list of numbers.",
        "generated_code": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/807",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the first odd number in a given list of numbers.",
        "generated_code": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None  # In case there is no odd number in the list\n\n# Test cases\nassert first_odd([1, 3, 5]) == 1\nassert first_odd([2, 4, 1, 3]) == 1\nassert first_odd([8, 9, 1]) == 9\n",
        "counter_example": null
    }
]