[
    {
        "task_id": "Mbpp/389",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the n'th lucas number.",
        "generated_code": "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/389",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the n'th lucas number.",
        "generated_code": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n# Test cases\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/252",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to convert complex numbers to polar coordinates.",
        "generated_code": "import cmath\ndef convert(c):\n    return (abs(c), cmath.phase(c))\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "(1+2j)"
            ],
            "expected": null,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/252",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to convert complex numbers to polar coordinates.",
        "generated_code": "import cmath\n\ndef convert(num):\n    return cmath.polar(complex(num))\n\n# Test cases\nassert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0, 0.0)\nassert convert(5) == (5.0, 0.0)\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "(1+2j)"
            ],
            "expected": null,
            "got": [
                2.23606797749979,
                1.1071487177940904
            ]
        }
    },
    {
        "task_id": "Mbpp/139",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the circumference of a circle.",
        "generated_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/139",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the circumference of a circle.",
        "generated_code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\n# Test cases\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\nassert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)\nassert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/310",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to convert a given string to a tuple of characters.",
        "generated_code": "def string_to_tuple(s: str) -> tuple:\n    return tuple(s)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                "python 3.0"
            ],
            "expected": [
                "p",
                "y",
                "t",
                "h",
                "o",
                "n",
                "3",
                ".",
                "0"
            ],
            "got": [
                "p",
                "y",
                "t",
                "h",
                "o",
                "n",
                " ",
                "3",
                ".",
                "0"
            ]
        }
    },
    {
        "task_id": "Mbpp/310",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to convert a given string to a tuple of characters.",
        "generated_code": "def string_to_tuple(s: str) -> tuple:\n    return tuple(s)\n\n# Tests\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\") == ('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\") == ('1', '5', '.', '1', '0')\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                "python 3.0"
            ],
            "expected": [
                "p",
                "y",
                "t",
                "h",
                "o",
                "n",
                "3",
                ".",
                "0"
            ],
            "got": null
        }
    },
    {
        "task_id": "Mbpp/62",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find smallest number in a list.",
        "generated_code": "def smallest_num(nums):\n    return min(nums)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/62",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find smallest number in a list.",
        "generated_code": "def smallest_num(lst):\n    return min(lst)\n\n# Tests\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45\n",
        "counter_example": null
    }
]