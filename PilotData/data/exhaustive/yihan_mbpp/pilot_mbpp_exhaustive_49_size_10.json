[
    {
        "task_id": "Mbpp/75",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "generated_code": "def find_tuples(tuples_list, k):\n    return [t for t in tuples_list if all(i % k == 0 for i in t)]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/75",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "generated_code": "def find_tuples(tuples_list, k):\n    result = []\n    for tup in tuples_list:\n        if all(element % k == 0 for element in tup):\n            result.append(tup)\n    return result\n\n# Test cases\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/104",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to sort each sublist of strings in a given list of lists.",
        "generated_code": "def sort_sublists(list_of_lists):\n    return [sorted(sublist, key=str.lower) for sublist in list_of_lists]\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    [
                        "IODiWvh",
                        "e",
                        "f",
                        "dog",
                        "r",
                        "cat",
                        "a"
                    ],
                    [
                        "cat",
                        "dog",
                        "elephant"
                    ],
                    [
                        "giraffe"
                    ],
                    [
                        "zebra",
                        "lion",
                        "tiger"
                    ]
                ]
            ],
            "expected": [
                [
                    "IODiWvh",
                    "a",
                    "cat",
                    "dog",
                    "e",
                    "f",
                    "r"
                ],
                [
                    "cat",
                    "dog",
                    "elephant"
                ],
                [
                    "giraffe"
                ],
                [
                    "lion",
                    "tiger",
                    "zebra"
                ]
            ],
            "got": [
                [
                    "a",
                    "cat",
                    "dog",
                    "e",
                    "f",
                    "IODiWvh",
                    "r"
                ],
                [
                    "cat",
                    "dog",
                    "elephant"
                ],
                [
                    "giraffe"
                ],
                [
                    "lion",
                    "tiger",
                    "zebra"
                ]
            ]
        }
    },
    {
        "task_id": "Mbpp/104",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to sort each sublist of strings in a given list of lists.",
        "generated_code": "def sort_sublists(list_of_lists):\n    return [sorted(sublist) for sublist in list_of_lists]\n\n# Tests\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/82",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the volume of a sphere.",
        "generated_code": "import math\n\ndef volume_sphere(radius: float) -> float:\n    \"\"\"\n    This function calculates the volume of a sphere given its radius.\n\n    Args:\n        radius (float): The radius of the sphere.\n\n    Returns:\n        float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * (radius ** 3)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/82",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the volume of a sphere.",
        "generated_code": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)\n\n# Test cases\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\nassert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)\nassert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/775",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to check whether every odd index contains odd numbers of a given list.",
        "generated_code": "def odd_position(lst):\n    return all(lst[i] % 2 != 0 for i in range(1, len(lst), 2))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/775",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to check whether every odd index contains odd numbers of a given list.",
        "generated_code": "def odd_position(lst):\n    # Iterate through the list, checking only elements at odd indices\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n\n# Testing the function with the provided test cases\nassert odd_position([2, 1, 4, 3, 6, 7, 6, 3]) == True\nassert odd_position([4, 1, 2]) == True\nassert odd_position([1, 2, 3]) == False\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/456",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to reverse each string in a given list of string values.",
        "generated_code": "def reverse_string_list(strings):\n    return [s[::-1] for s in strings]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/456",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to reverse each string in a given list of string values.",
        "generated_code": "def reverse_string_list(strings):\n    return [s[::-1] for s in strings]\n\n# Test cases to validate the solution\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john', 'amal', 'joel', 'george']) == ['nhoj', 'lama', 'leoj', 'egroeg']\nassert reverse_string_list(['jack', 'john', 'mary']) == ['kcaj', 'nhoj', 'yram']\n",
        "counter_example": null
    }
]