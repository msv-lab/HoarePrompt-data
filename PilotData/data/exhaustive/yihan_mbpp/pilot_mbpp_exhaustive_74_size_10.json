[
    {
        "task_id": "Mbpp/88",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
        "generated_code": "def freq_count(lst):\n    return {i: lst.count(i) for i in set(lst)}\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/88",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to get the frequency of all the elements in a list, returned as a dictionary.",
        "generated_code": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict\n\n# Test cases to validate the solution\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30]) == {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\nassert freq_count([1,2,3,4,3,2,4,1,3,1,4]) == {1: 3, 2: 2, 3: 3, 4: 3}\nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5]) == {10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2}\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/788",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to create a new tuple from the given string and list.",
        "generated_code": "def new_tuple(lst, str):\n    return tuple(lst + [str])\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/788",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to create a new tuple from the given string and list.",
        "generated_code": "def new_tuple(input_list, input_string):\n    return tuple(input_list) + (input_string,)\n\n# Test cases\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/459",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to remove uppercase substrings from a given string.",
        "generated_code": "def remove_uppercase(s: str) -> str:\n    result = \"\"\n    temp = \"\"\n    for char in s:\n        if char.isupper():\n            if temp:\n                result += temp\n                temp = \"\"\n        else:\n            temp += char\n    if temp:\n        result += temp\n    return result\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "ThiS%^%!s&a(mY)TesTStR%i*ng"
            ],
            "expected": "hisamesting",
            "got": "hi%^%!s&a(m)est%i*ng"
        }
    },
    {
        "task_id": "Mbpp/459",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to remove uppercase substrings from a given string.",
        "generated_code": "def remove_uppercase(s):\n    # Using list comprehension to filter out uppercase characters\n    result = ''.join([char for char in s if not char.isupper()])\n    return result\n\n# Test cases\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "ThiS%^%!s&a(mY)TesTStR%i*ng"
            ],
            "expected": "hisamesting",
            "got": "hi%^%!s&a(m)est%i*ng"
        }
    },
    {
        "task_id": "Mbpp/426",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to filter odd numbers.",
        "generated_code": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/426",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to filter odd numbers.",
        "generated_code": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\n\n# Test cases\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\nassert filter_oddnumbers([10, 20, 45, 67, 84, 93]) == [45, 67, 93]\nassert filter_oddnumbers([5, 7, 9, 8, 6, 4, 3]) == [5, 7, 9, 3]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/437",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to remove odd characters in a string.",
        "generated_code": "def remove_odd(s: str) -> str:\n    return s[1::2]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/437",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to remove odd characters in a string.",
        "generated_code": "def remove_odd(s):\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])\n\n# Testing the function with the provided test cases\nassert remove_odd(\"python\") == \"yhn\"\nassert remove_odd(\"program\") == \"rga\"\nassert remove_odd(\"language\") == \"agae\"\n",
        "counter_example": null
    }
]