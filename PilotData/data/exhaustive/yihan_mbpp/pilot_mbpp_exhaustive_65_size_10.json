[
    {
        "task_id": "Mbpp/131",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
        "generated_code": "def reverse_vowels(s: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left, right = left + 1, right - 1\n    return \"\".join(s)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/131",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to reverse only the vowels of a given string (where y is not a vowel).",
        "generated_code": "def reverse_vowels(s: str) -> str:\n    vowels = \"AEIOUaeiou\"\n    s_list = list(s)\n    vowel_indices = [i for i, char in enumerate(s) if char in vowels]\n    vowel_chars = [s_list[i] for i in vowel_indices]\n\n    for i in vowel_indices:\n        s_list[i] = vowel_chars.pop()\n\n    return ''.join(s_list)\n\n# Tests\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/141",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to sort a list of elements.",
        "generated_code": "def pancake_sort(lst):\n    return sorted(lst)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/141",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to sort a list of elements.",
        "generated_code": "def pancake_sort(arr):\n    def flip(end):\n        start = 0\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n    \n    def find_max_index(n):\n        max_index = 0\n        for i in range(1, n):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n    \n    n = len(arr)\n    for curr_size in range(n, 1, -1):\n        max_index = find_max_index(curr_size)\n        if max_index != curr_size - 1:\n            flip(max_index)\n            flip(curr_size - 1)\n    \n    return arr\n\n# Test cases\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/312",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the volume of a cone.",
        "generated_code": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/312",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the volume of a cone.",
        "generated_code": "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * (radius ** 2) * height\n\n# Tests\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10, 15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19, 17), 6426.651371693521, rel_tol=0.001)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/57",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the largest number that can be formed with the given list of digits.",
        "generated_code": "def find_Max_Num(digits):\n    digits.sort(reverse=True)\n    max_num = int(''.join(map(str, digits)))\n    return max_num\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/57",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the largest number that can be formed with the given list of digits.",
        "generated_code": "def find_Max_Num(digits):\n    # Convert each digit to a string\n    str_digits = map(str, digits)\n    # Sort the digits in descending order\n    sorted_digits = sorted(str_digits, reverse=True)\n    # Join the sorted digits to form the largest number\n    largest_num_str = ''.join(sorted_digits)\n    # Convert the resulting string back to an integer\n    return int(largest_num_str)\n\n# Test cases\nassert find_Max_Num([1,2,3]) == 321\nassert find_Max_Num([4,5,6,1]) == 6541\nassert find_Max_Num([1,2,3,9]) == 9321\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/9",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "generated_code": "def find_Rotations(s: str) -> int:\n    for i in range(1, len(s)):\n        if s[i:] + s[:i] == s:\n            return i\n    return len(s)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/9",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.",
        "generated_code": "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n\n\n# Test cases\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3\n",
        "counter_example": null
    }
]