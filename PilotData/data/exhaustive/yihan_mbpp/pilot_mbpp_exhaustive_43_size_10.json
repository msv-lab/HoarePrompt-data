[
    {
        "task_id": "Mbpp/162",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "generated_code": "def sum_series(n: int) -> int:\n    return sum(n - 2*i for i in range(n // 2 + 1))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/162",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).",
        "generated_code": "def sum_series(n):\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        term = n - 2 * i\n        if term > 0:\n            total_sum += term\n    return total_sum\n\n# Test cases to validate the solution\nassert sum_series(0) == 0\nassert sum_series(6) == 12\nassert sum_series(10) == 30\nassert sum_series(9) == 25\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/109",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "generated_code": "def odd_Equivalent(s, n):\n    s = s * (n // len(s) + 1)\n    count = 0\n    for i in range(n):\n        temp = s[i:i+len(s)]\n        count += temp.count('1') % 2\n    return count\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                "011001",
                6
            ],
            "expected": 3,
            "got": 1
        }
    },
    {
        "task_id": "Mbpp/109",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.",
        "generated_code": "def odd_Equivalent(binary_str, num_rotations):\n    count = 0\n    for _ in range(num_rotations):\n        # Rotate the string by moving the last character to the front\n        binary_str = binary_str[-1] + binary_str[:-1]\n        # Convert the rotated binary string to an integer\n        integer_value = int(binary_str, 2)\n        # Check if the integer is odd\n        if integer_value % 2 == 1:\n            count += 1\n    return count\n\n# Testing the function with the provided test cases\nassert odd_Equivalent(\"011001\", 6) == 3\nassert odd_Equivalent(\"11011\", 5) == 4\nassert odd_Equivalent(\"1010\", 4) == 2\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "10000100110011",
                5
            ],
            "expected": 1,
            "got": 3
        }
    },
    {
        "task_id": "Mbpp/620",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.",
        "generated_code": "def largest_subset(nums):\n    nums.sort()\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    3,
                    3,
                    4,
                    7,
                    8,
                    9,
                    11,
                    12,
                    13,
                    13,
                    16
                ]
            ],
            "expected": 4,
            "got": 3
        }
    },
    {
        "task_id": "Mbpp/620",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.",
        "generated_code": "def largest_subset(nums):\n    if not nums:\n        return 0\n\n    nums.sort()\n    dp = [1] * len(nums)\n    \n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Testing the function with the provided test cases\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4\nassert largest_subset([10, 5, 3, 15, 20]) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17]) == 4\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    3,
                    3,
                    4,
                    7,
                    8,
                    9,
                    11,
                    12,
                    13,
                    13,
                    16
                ]
            ],
            "expected": 4,
            "got": 3
        }
    },
    {
        "task_id": "Mbpp/414",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
        "generated_code": "def overlapping(seq1, seq2):\n    return any(i in seq2 for i in seq1) or any(i in seq1 for i in seq2)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/414",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to check whether any value in a sequence exists in a sequence or not.",
        "generated_code": "def overlapping(seq1, seq2):\n    return bool(set(seq1) & set(seq2))\n\n# Test cases\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/465",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to drop empty items from a given dictionary.",
        "generated_code": "def drop_empty(d: dict) -> dict:\n    return {k: v for k, v in d.items() if v is not None}\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/465",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to drop empty items from a given dictionary.",
        "generated_code": "def drop_empty(d):\n    return {k: v for k, v in d.items() if v is not None}\n\n# Test cases\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None}) == {'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3': None}) == {'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3': None}) == {'c2': 'Green'}\n",
        "counter_example": null
    }
]