[
    {
        "task_id": "Mbpp/120",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
        "generated_code": "def max_product_tuple(tuples_list):\n    return max(abs(a * b) for a, b in tuples_list)\n",
        "counter_example": {
            "test_type": "assertion",
            "error": "name 'math' is not defined"
        }
    },
    {
        "task_id": "Mbpp/120",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.",
        "generated_code": "def max_product_tuple(lst):\n    max_product = 0\n    for a, b in lst:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product\n\n# Test cases\nimport math\nassert math.isclose(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]), 36, rel_tol=0.001)\nassert math.isclose(max_product_tuple([(10,20), (15,2), (5,10)] ), 200, rel_tol=0.001)\nassert math.isclose(max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] ), 484, rel_tol=0.001)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/292",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
        "generated_code": "def find(dividend, divisor):\n    return dividend // divisor\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/292",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find quotient of two numbers (rounded down to the nearest integer).",
        "generated_code": "def find(a, b):\n    return a // b\n\n# Test cases\nassert find(10, 3) == 3\nassert find(4, 2) == 2\nassert find(20, 5) == 4\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/733",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "generated_code": "def find_first_occurrence(sorted_array, target):\n    left, right = 0, len(sorted_array) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_array[mid] < target:\n            left = mid + 1\n        elif sorted_array[mid] > target:\n            right = mid - 1\n        else:\n            if mid == 0 or sorted_array[mid - 1] != target:\n                return mid\n            right = mid - 1\n    return -1\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/733",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
        "generated_code": "def find_first_occurrence(arr, target):\n    low, high = 0, len(arr) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            result = mid\n            high = mid - 1  # Look on the left side of mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result\n\n# Test cases\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([1, 2, 4, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/615",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.",
        "generated_code": "def average_tuple(tuples):\n    return [sum(t) / len(t) for t in tuples]\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    [
                        10,
                        10,
                        10,
                        12
                    ],
                    [
                        30,
                        45,
                        56,
                        45
                    ],
                    [
                        81,
                        80,
                        39,
                        32
                    ],
                    [
                        1,
                        2,
                        3,
                        4
                    ]
                ]
            ],
            "expected": [
                30.5,
                34.25,
                27.0,
                23.25
            ],
            "got": [
                10.5,
                44.0,
                58.0,
                2.5
            ]
        }
    },
    {
        "task_id": "Mbpp/615",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.",
        "generated_code": "def average_tuple(tuples_of_tuples):\n    averages = []\n    for t in tuples_of_tuples:\n        avg = sum(t) / len(t)\n        averages.append(avg)\n    return averages\n\n# Test cases\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [10.5, 44.0, 58.0, 2.5]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))) == [-1.0, 23.666666666666668, -6.0, -1.6666666666666667]\nassert average_tuple(((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40))) == [105.0, 440.0, 580.0, 25.0]\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    [
                        10,
                        10,
                        10,
                        12
                    ],
                    [
                        30,
                        45,
                        56,
                        45
                    ],
                    [
                        81,
                        80,
                        39,
                        32
                    ],
                    [
                        1,
                        2,
                        3,
                        4
                    ]
                ]
            ],
            "expected": [
                30.5,
                34.25,
                27.0,
                23.25
            ],
            "got": [
                10.5,
                44.0,
                58.0,
                2.5
            ]
        }
    },
    {
        "task_id": "Mbpp/792",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to count the number of lists in a given number of lists.",
        "generated_code": "def count_list(lists):\n    return len(lists)\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    2,
                    3,
                    [
                        4,
                        [
                            5,
                            [
                                6,
                                [
                                    7,
                                    [
                                        8,
                                        9
                                    ]
                                ]
                            ]
                        ]
                    ]
                ]
            ],
            "expected": 1,
            "got": 3
        }
    },
    {
        "task_id": "Mbpp/792",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to count the number of lists in a given number of lists.",
        "generated_code": "def count_list(lists):\n    return len(lists)\n\n# Test cases\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    2,
                    3,
                    [
                        4,
                        [
                            5,
                            [
                                6,
                                [
                                    7,
                                    [
                                        8,
                                        9
                                    ]
                                ]
                            ]
                        ]
                    ]
                ]
            ],
            "expected": 1,
            "got": 3
        }
    }
]