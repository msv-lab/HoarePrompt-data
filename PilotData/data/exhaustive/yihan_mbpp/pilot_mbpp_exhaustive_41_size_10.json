[
    {
        "task_id": "Mbpp/477",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to convert the given string to lower case.",
        "generated_code": "def is_lower(s):\n    return s.lower()\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/477",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to convert the given string to lower case.",
        "generated_code": "def is_lower(s):\n    return s.lower()\n\n# Test cases\nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/723",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.",
        "generated_code": "def count_same_pair(list1, list2):\n    return sum(1 for i, j in zip(list1, list2) if i == j)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/723",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.",
        "generated_code": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n\n# Test cases\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) == 4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2]) == 1\nassert count_same_pair([0, 1, 1, 2], [0, 1, 2, 2]) == 3\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/637",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to check whether the given amount has no profit and no loss",
        "generated_code": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/637",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to check whether the given amount has no profit and no loss",
        "generated_code": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price\n\n# Tests\nassert noprofit_noloss(1500, 1200) == False\nassert noprofit_noloss(100, 100) == True\nassert noprofit_noloss(2000, 5000) == False\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/454",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function that matches a word containing 'z'.",
        "generated_code": "import re\ndef text_match_wordz(text: str) -> bool:\n  pattern = r'\\b\\w*z\\b'\n  if re.search(pattern, text, re.I):\n    return True\n  else:\n    return False\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "1234z5678"
            ],
            "expected": true,
            "got": false
        }
    },
    {
        "task_id": "Mbpp/454",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function that matches a word containing 'z'.",
        "generated_code": "import re\n\ndef text_match_wordz(text):\n    # Use regular expression to search for a word containing 'z'\n    # \\b asserts a position at a word boundary\n    # \\w* matches zero or more word characters\n    # z matches the character 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))\n\n# Tests\nassert text_match_wordz(\"pythonz.\") == True\nassert text_match_wordz(\"xyz.\") == True\nassert text_match_wordz(\"  lang  .\") == False\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/593",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to remove leading zeroes from an ip address.",
        "generated_code": "def removezero_ip(ip: str) -> tuple:\n    ip_parts = ip.split('.')\n    ip_parts = [part.lstrip('0') or '0' for part in ip_parts]\n    return tuple('.'.join(ip_parts),)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                "216.08.094.196"
            ],
            "expected": "216.8.94.196",
            "got": [
                "2",
                "1",
                "6",
                ".",
                "8",
                ".",
                "9",
                "4",
                ".",
                "1",
                "9",
                "6"
            ]
        }
    },
    {
        "task_id": "Mbpp/593",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to remove leading zeroes from an ip address.",
        "generated_code": "def removezero_ip(ip: str) -> str:\n    # Split the IP address into its components\n    parts = ip.split('.')\n    # Strip leading zeroes from each part\n    parts = [str(int(part)) for part in parts]\n    # Join the parts back together with dots\n    return '.'.join(parts)\n\n# Test cases\nassert removezero_ip(\"216.08.094.196\") == '216.8.94.196'\nassert removezero_ip(\"12.01.024\") == '12.1.24'\nassert removezero_ip(\"216.08.094.0196\") == '216.8.94.196'\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "0.0.0.0"
            ],
            "expected": "0...",
            "got": "0.0.0.0"
        }
    }
]