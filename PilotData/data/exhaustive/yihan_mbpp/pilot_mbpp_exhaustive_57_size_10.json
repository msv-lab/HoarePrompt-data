[
    {
        "task_id": "Mbpp/166",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "generated_code": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/166",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function that counts the number of pairs of integers in a list that xor to an even number.",
        "generated_code": "def find_even_pair(lst):\n    even_count = sum(1 for x in lst if x % 2 == 0)\n    odd_count = len(lst) - even_count  # total count minus even count gives odd count\n\n    # Calculate the number of pairs that XOR to an even number\n    even_pairs = even_count * (even_count - 1) // 2\n    odd_pairs = odd_count * (odd_count - 1) // 2\n    \n    return even_pairs + odd_pairs\n\n# Test cases\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\nassert find_even_pair([1, 2, 3]) == 1\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/413",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to extract the nth element from a given list of tuples.",
        "generated_code": "def extract_nth_element(list_of_tuples, n):\n    return [tup[n] for tup in list_of_tuples]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/413",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to extract the nth element from a given list of tuples.",
        "generated_code": "def extract_nth_element(tuples_list, n):\n    return [t[n] for t in tuples_list]\n\n# Test cases\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2) == [99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1) == [98, 97, 91, 94]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/478",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to remove lowercase substrings from a given string.",
        "generated_code": "def remove_lowercase(s: str) -> str:\n    return ''.join(c for c in s if c.isupper())\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/478",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to remove lowercase substrings from a given string.",
        "generated_code": "def remove_lowercase(s: str) -> str:\n    return ''.join([char for char in s if char.isupper()])\n\n# Testing the function\nassert remove_lowercase(\"PYTHon\") == 'PYTH'\nassert remove_lowercase(\"FInD\") == 'FID'\nassert remove_lowercase(\"STRinG\") == 'STRG'\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/168",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to count the number of occurrences of a number in a given list.",
        "generated_code": "def frequency(lst, num):\n    return lst.count(num)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/168",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to count the number of occurrences of a number in a given list.",
        "generated_code": "def frequency(lst, num):\n    return lst.count(num)\n\n# Test cases\nassert frequency([1,2,3], 4) == 0\nassert frequency([1,2,2,3,3,3,4], 3) == 3\nassert frequency([0,1,2,3,1,2], 1) == 2\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/65",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to flatten a list and sum all of its elements.",
        "generated_code": "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if type(element) == list:\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/65",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to flatten a list and sum all of its elements.",
        "generated_code": "def recursive_list_sum(lst):\n    total = 0\n    for elem in lst:\n        if isinstance(elem, list):\n            total += recursive_list_sum(elem)\n        else:\n            total += elem\n    return total\n\n# Test cases\nassert recursive_list_sum(([1, 2, [3,4],[5,6]])) == 21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]])) == 106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]])) == 210\n",
        "counter_example": null
    }
]