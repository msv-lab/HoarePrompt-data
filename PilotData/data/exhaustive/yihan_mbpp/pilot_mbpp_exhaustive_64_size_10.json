[
    {
        "task_id": "Mbpp/130",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the item with maximum frequency in a given list.",
        "generated_code": "def max_occurrences(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return max(freq, key=freq.get)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/130",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the item with maximum frequency in a given list.",
        "generated_code": "from collections import Counter\n\ndef max_occurrences(lst):\n    if not lst:\n        return None\n    frequency = Counter(lst)\n    max_count = max(frequency.values())\n    for item, count in frequency.items():\n        if count == max_count:\n            return item\n\n# Provided test cases\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == 2\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18]) == 8\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10]) == 20\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/98",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "generated_code": "def multiply_num(nums):\n    product = 1\n    for num in nums:\n        product *= num\n    return product / len(nums)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/98",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "generated_code": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result\n\n# Test cases\nimport math\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num((-10, -20, -30)), -2000.0, rel_tol=0.001)\nassert math.isclose(multiply_num((19, 15, 18)), 1710.0, rel_tol=0.001)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/284",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "generated_code": "def check_element(lst, elem):\n    return all(i == elem for i in lst)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/284",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
        "generated_code": "def check_element(lst, element):\n    for item in lst:\n        if item != element:\n            return False\n    return True\n\n# Test cases\nassert check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue') == False\nassert check_element([1, 2, 3, 4], 7) == False\nassert check_element([\"green\", \"green\", \"green\", \"green\"], 'green') == True\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/232",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
        "generated_code": "def larg_nnum(nums, n):\n    return sorted(set(nums), reverse=True)[:n]\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    4,
                    5,
                    3,
                    8,
                    5,
                    2,
                    6,
                    4
                ],
                4
            ],
            "expected": [
                8,
                6,
                5,
                5
            ],
            "got": [
                8,
                6,
                5,
                4
            ]
        }
    },
    {
        "task_id": "Mbpp/232",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.",
        "generated_code": "import heapq as hq\n\ndef larg_nnum(nums: list, n: int) -> list:\n    return hq.nlargest(n, nums)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/59",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the nth octagonal number.",
        "generated_code": "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/59",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the nth octagonal number.",
        "generated_code": "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)\n\n# Test cases to validate the solution\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645\n",
        "counter_example": null
    }
]