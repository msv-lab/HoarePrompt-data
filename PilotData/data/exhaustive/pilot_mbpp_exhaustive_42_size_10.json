[
    {
        "task_id": "Mbpp/123",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "generated_code": "def amicable_numbers_sum(n):\n    def sum_of_divisors(num):\n        return sum(i for i in range(1, num) if num % i == 0)\n\n    amicable_nums = []\n    for num in range(1, n + 1):\n        sum_div_num = sum_of_divisors(num)\n        if num != sum_div_num and num == sum_of_divisors(sum_div_num):\n            amicable_nums.append(num)\n\n    return sum(amicable_nums)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/123",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "generated_code": "def sum_of_divisors(n):\n    total = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef amicable_numbers_sum(limit):\n    amicable_set = set()\n    for num in range(2, limit + 1):\n        if num not in amicable_set:\n            sum_div = sum_of_divisors(num)\n            if sum_div != num and sum_div <= limit:\n                if sum_of_divisors(sum_div) == num:\n                    amicable_set.add(num)\n                    amicable_set.add(sum_div)\n    return sum(amicable_set)\n\n# Test cases\nassert amicable_numbers_sum(999) == 504\nassert amicable_numbers_sum(9999) == 31626\nassert amicable_numbers_sum(99) == 0\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/622",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the median of two sorted lists of same size.",
        "generated_code": "def get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    middle_index = n\n    if n % 2 == 0:\n        median = (merged_list[middle_index - 1] + merged_list[middle_index]) / 2\n    else:\n        median = merged_list[middle_index]\n    return median\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    1,
                    12,
                    15,
                    26,
                    38
                ],
                [
                    2,
                    13,
                    17,
                    30,
                    45
                ],
                5
            ],
            "expected": 16.0,
            "got": 17
        }
    },
    {
        "task_id": "Mbpp/622",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to find the median of two sorted lists of same size.",
        "generated_code": "def get_median(list1, list2, n):\n    # Merge the two sorted lists\n    merged_list = sorted(list1 + list2)\n    \n    # Calculate the median\n    mid = len(merged_list) // 2\n    \n    if len(merged_list) % 2 == 0:\n        # Even number of elements\n        median = (merged_list[mid - 1] + merged_list[mid]) / 2\n    else:\n        # Odd number of elements (although this case won't happen given the problem constraints)\n        median = merged_list[mid]\n    \n    return median\n\n# Test cases\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    3,
                    6,
                    14,
                    23
                ],
                [
                    2,
                    18,
                    27,
                    39,
                    49,
                    55
                ],
                4
            ],
            "expected": 16.0,
            "got": 20.5
        }
    },
    {
        "task_id": "Mbpp/96",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the number of divisors of a given integer.",
        "generated_code": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/96",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the number of divisors of a given integer.",
        "generated_code": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Test cases\nassert divisor(15) == 4  # Divisors: 1, 3, 5, 15\nassert divisor(12) == 6  # Divisors: 1, 2, 3, 4, 6, 12\nassert divisor(9) == 3   # Divisors: 1, 3, 9\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/803",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to check whether the given number is a perfect square or not.",
        "generated_code": "import math\n\ndef is_perfect_square(n: int) -> bool:\n    root = math.sqrt(n)\n    return int(root + 0.5) ** 2 == n\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                -9
            ],
            "expected": false,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/803",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to check whether the given number is a perfect square or not.",
        "generated_code": "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt_n = int(math.isqrt(n))\n    return sqrt_n * sqrt_n == n\n\n# Testing the function with the provided assertions\nassert not is_perfect_square(10)\nassert is_perfect_square(36)\nassert not is_perfect_square(14)\nassert is_perfect_square(14*14)\nassert not is_perfect_square(125)\nassert is_perfect_square(125*125)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/242",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to count the total number of characters in a string.",
        "generated_code": "def count_charac(s: str) -> int:\n    return len(s)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/242",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to count the total number of characters in a string.",
        "generated_code": "def count_charac(s: str) -> int:\n    return len(s)\n\n# Tests\nassert count_charac(\"python programming\") == 18\nassert count_charac(\"language\") == 8\nassert count_charac(\"words\") == 5\n",
        "counter_example": null
    }
]