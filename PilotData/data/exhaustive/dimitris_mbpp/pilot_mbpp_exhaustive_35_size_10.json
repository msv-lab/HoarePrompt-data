[
    {
        "task_id": "Mbpp/279",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the nth decagonal number.",
        "generated_code": "def is_num_decagonal(n: int) -> int:\n    return n * (3 * n - 1)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                3
            ],
            "expected": 27,
            "got": 24
        }
    },
    {
        "task_id": "Mbpp/279",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the nth decagonal number.",
        "generated_code": "def is_num_decagonal(n):\n    return 4 * n * n - 3 * n\n\n# Tests\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/142",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to count number items that are identical in the same position of three given lists.",
        "generated_code": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5
                ],
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                ]
            ],
            "expected": 5,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/142",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to count number items that are identical in the same position of three given lists.",
        "generated_code": "def count_samepair(list1, list2, list3):\n    count = 0\n    for x, y, z in zip(list1, list2, list3):\n        if x == y == z:\n            count += 1\n    return count\n\n# Test cases\nassert count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]) == 3\nassert count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]) == 4\nassert count_samepair([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]) == 5\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/233",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the lateral surface area of a cylinder.",
        "generated_code": "import math\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                10,
                5
            ],
            "expected": 314.1592653589793,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/233",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the lateral surface area of a cylinder.",
        "generated_code": "import math\n\ndef lateralsuface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n\n# Test cases\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/427",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "generated_code": "def change_date_format(date_str: str) -> str:\n    year, month, day = date_str.split('-')\n    return f'{day}-{month}-{year}'\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "2021-1-026"
            ],
            "expected": "02-1-20216",
            "got": "026-1-2021"
        }
    },
    {
        "task_id": "Mbpp/427",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
        "generated_code": "def change_date_format(date_str):\n    year, month, day = date_str.split('-')\n    return f\"{day}-{month}-{year}\"\n\n# Test cases\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "2021-1-026"
            ],
            "expected": "02-1-20216",
            "got": "026-1-2021"
        }
    },
    {
        "task_id": "Mbpp/12",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "generated_code": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/12",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "generated_code": "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)\n\n# Test cases\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]]) == [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]]) == [[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n",
        "counter_example": null
    }
]