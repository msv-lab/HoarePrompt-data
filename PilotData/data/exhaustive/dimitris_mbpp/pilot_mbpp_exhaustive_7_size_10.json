[
    {
        "task_id": "Mbpp/272",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
        "generated_code": "def rear_extract(tup_list):\n    return [tup[-1] for tup in tup_list]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/272",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.",
        "generated_code": "def rear_extract(tuples_list):\n    return [tup[-1] for tup in tuples_list]\n\n# Testing the function with provided test cases\nassert rear_extract([(1, 'Rash', 21)]) == [21]\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n\nprint(\"All test cases passed!\")\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/782",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the sum of all odd length subarrays.",
        "generated_code": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for length in range(1, n + 1, 2):\n        for i in range(n - length + 1):\n            total_sum += sum(arr[i:i + length])\n    return total_sum\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/782",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the sum of all odd length subarrays.",
        "generated_code": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    \n    for start in range(n):\n        for length in range(1, n-start+1, 2):  # Only odd lengths\n            subarray = arr[start:start+length]\n            total_sum += sum(subarray)\n    \n    return total_sum\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/749",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to sort a given list of strings of numbers numerically.",
        "generated_code": "def sort_numeric_strings(lst):\n    return sorted(lst, key=int)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    "4",
                    "12",
                    "45",
                    "7",
                    "0",
                    "100",
                    "200",
                    "-12",
                    "-500"
                ]
            ],
            "expected": [
                -500,
                -12,
                0,
                4,
                7,
                12,
                45,
                100,
                200
            ],
            "got": [
                "-500",
                "-12",
                "0",
                "4",
                "7",
                "12",
                "45",
                "100",
                "200"
            ]
        }
    },
    {
        "task_id": "Mbpp/749",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to sort a given list of strings of numbers numerically.",
        "generated_code": "def sort_numeric_strings(lst):\n    # Convert the list of strings to a list of integers\n    numeric_list = [int(x) for x in lst]\n    # Sort the list of integers\n    sorted_list = sorted(numeric_list)\n    return sorted_list\n\n# Test cases\nassert sort_numeric_strings(['4','12','45','7','0','100','200','-12','-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2']) == [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1','3','13','15','17','5','7','9','1','11']) == [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/89",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the closest smaller number than n.",
        "generated_code": "def closest_num(n: int) -> int:\n    return n - 1\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/89",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the closest smaller number than n.",
        "generated_code": "def closest_num(n):\n    return n - 1\n\n# Test cases\nassert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/742",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to caluclate the area of a tetrahedron.",
        "generated_code": "import math\ndef area_tetrahedron(side_length):\n    return math.sqrt(3) * (side_length ** 2)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/742",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to caluclate the area of a tetrahedron.",
        "generated_code": "import math\n\ndef area_tetrahedron(edge_length):\n    return math.sqrt(3) * edge_length ** 2\n\n# Tests\nassert math.isclose(area_tetrahedron(3), 15.588457268119894, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(20), 692.8203230275509, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(10), 173.20508075688772, rel_tol=0.001)\n",
        "counter_example": null
    }
]