[
    {
        "task_id": "Mbpp/264",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to calculate a dog's age in dog's years.",
        "generated_code": "def dog_age(human_age: int) -> int:\n    if human_age < 2:\n        return human_age * 10.5\n    elif human_age == 2:\n        return 21\n    else:\n        return 21 + (human_age - 2) * 4\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/264",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to calculate a dog's age in dog's years.",
        "generated_code": "def dog_age(human_years):\n    if human_years <= 2:\n        return human_years * 10.5\n    else:\n        return 21 + (human_years - 2) * 4\n\n# Testing the function with given test cases\nassert dog_age(12) == 61\nassert dog_age(15) == 73\nassert dog_age(24) == 109\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/445",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "generated_code": "def index_multiplication(tup1, tup2):\n    return tuple((a*b, c*d) for (a, c), (b, d) in zip(tup1, tup2))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/445",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "generated_code": "def index_multiplication(tup1, tup2):\n    return tuple((a * c, b * d) for (a, b), (c, d) in zip(tup1, tup2))\n\n# Test cases\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/602",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the first repeated character in a given string.",
        "generated_code": "def first_repeated_char(s: str) -> str:\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/602",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the first repeated character in a given string.",
        "generated_code": "def first_repeated_char(s):\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n\n# Provided test cases\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == None\nassert first_repeated_char(\"123123\") == \"1\"\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/278",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
        "generated_code": "def count_first_elements(tup):\n    for elem in tup:\n        if isinstance(elem, tuple):\n            return tup.index(elem)\n    return len(tup)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    1,
                    5,
                    7,
                    [
                        4,
                        6
                    ],
                    10
                ]
            ],
            "expected": 4,
            "got": 5
        }
    },
    {
        "task_id": "Mbpp/278",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to find the number of elements that occurs before the tuple element in the given tuple.",
        "generated_code": "def count_first_elements(tup):\n    count = 0\n    for elem in tup:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count\n\n# Test cases\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3\nassert count_first_elements((2, 9, (5, 7), 11)) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8)) == 4\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    1,
                    5,
                    7,
                    [
                        4,
                        6
                    ],
                    10
                ]
            ],
            "expected": 4,
            "got": 5
        }
    },
    {
        "task_id": "Mbpp/111",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the common elements in given nested lists.",
        "generated_code": "def common_in_nested_lists(nested_lists):\n    sets = [set(lst) for lst in nested_lists]\n    common_elements = set.intersection(*sets)\n    return list(common_elements)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/111",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the common elements in given nested lists.",
        "generated_code": "def common_in_nested_lists(nested_lists):\n    # Convert the first list to a set\n    common_elements = set(nested_lists[0])\n    \n    # Iterate through the remaining lists and intersect with the current set of common elements\n    for lst in nested_lists[1:]:\n        common_elements &= set(lst)\n    \n    # Return the common elements as a list\n    return list(common_elements)\n\n# Test cases\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])\nassert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])) == set([5, 23])\nassert set(common_in_nested_lists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]])) == set([4])\n",
        "counter_example": null
    }
]