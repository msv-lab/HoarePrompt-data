[
    {
        "task_id": "Mbpp/805",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
        "generated_code": "def max_sum_list(list_of_lists):\n    return max(list_of_lists, key=sum)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/805",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function that returns the list in a list of lists whose sum of elements is the highest.",
        "generated_code": "def max_sum_list(list_of_lists):\n    # Initialize variables to track the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_list = []\n    \n    # Iterate through each sublist\n    for sublist in list_of_lists:\n        # Calculate the sum of the current sublist\n        current_sum = sum(sublist)\n        \n        # If the current sum is greater than the maximum sum found so far\n        if current_sum > max_sum:\n            # Update the maximum sum and the corresponding list\n            max_sum = current_sum\n            max_list = sublist\n    \n    # Return the list with the highest sum\n    return max_list\n\n# Tests\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]\nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]]) == [12, 11, 10]\nassert max_sum_list([[2,3,1]]) == [2, 3, 1]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/235",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to set all even bits of a given number.",
        "generated_code": "def even_bit_set_number(n: int) -> int:\n    \"\"\"\n    This function sets all even bits of a given number.\n    \n    Parameters:\n    n (int): The input number.\n    \n    Returns:\n    int: The number with all even bits set.\n    \"\"\"\n    \n    # Create a mask to set all even bits\n    mask = 0b10101010  # This is the binary representation of the mask\n    \n    # Use bitwise OR operation to set all even bits of the input number\n    result = n | mask\n    \n    return result\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                10
            ],
            "expected": 10,
            "got": 170
        }
    },
    {
        "task_id": "Mbpp/235",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to set all even bits of a given number.",
        "generated_code": "def even_bit_set_number(n):\n    # Iterate through the bits and set the even bits\n    even_pos = 0\n    while (1 << even_pos) <= n:\n        n |= (1 << even_pos)\n        even_pos += 2\n    return n\n\n# Tests\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                10
            ],
            "expected": 10,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/745",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.",
        "generated_code": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num) if digit != '0'):\n            result.append(num)\n    return result\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                1,
                22
            ],
            "expected": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                11,
                12,
                15,
                22
            ],
            "got": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                15,
                20,
                22
            ]
        }
    },
    {
        "task_id": "Mbpp/745",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.",
        "generated_code": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    \n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    \n    return result\n\n# Test cases\nassert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20, 25) == [22, 24]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/305",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to return two words from a list of words starting with letter 'p'.",
        "generated_code": "def start_withp(lst):\n    p_words = [word for sentence in lst for word in sentence.split() if word.startswith('p')]\n    return tuple(p_words[:2])\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    "Python PHP",
                    "Java JavaScript",
                    "c c++"
                ]
            ],
            "expected": [
                "Python",
                "PHP"
            ],
            "got": []
        }
    },
    {
        "task_id": "Mbpp/305",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to return two words from a list of words starting with letter 'p'.",
        "generated_code": "def start_withp(words_list):\n    result = []\n    for phrase in words_list:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n            if len(result) == 2:\n                return tuple(result)\n    return tuple(result)\n\n# Test cases\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"]) == ('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"]) == ('Pqrst','Pqr')\n\nprint(\"All tests passed!\")\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                []
            ],
            "expected": null,
            "got": []
        }
    },
    {
        "task_id": "Mbpp/285",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "generated_code": "import re\ndef text_match_two_three(s):\n    pattern = r\"a(b{2,3})\"\n    return bool(re.search(pattern, s))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/285",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.",
        "generated_code": "import re\n\ndef text_match_two_three(text):\n    # Define the regular expression pattern\n    pattern = r'a(b{2,3})'\n    # Search the pattern in the given text\n    match = re.search(pattern, text)\n    # Return True if the pattern is found, otherwise False\n    return bool(match)\n\n# Test cases\nassert text_match_two_three(\"ac\") == False\nassert text_match_two_three(\"dc\") == False\nassert text_match_two_three(\"abbbba\") == True\n",
        "counter_example": null
    }
]