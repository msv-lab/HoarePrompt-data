[
    {
        "task_id": "Mbpp/90",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the length of the longest word.",
        "generated_code": "def len_log(lst):\n  return max(len(word) for word in lst)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/90",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the length of the longest word.",
        "generated_code": "def len_log(words):\n    return max(len(word) for word in words)\n\n# Test cases\nassert len_log([\"python\", \"PHP\", \"bigdata\"]) == 7\nassert len_log([\"a\", \"ab\", \"abc\"]) == 3\nassert len_log([\"small\", \"big\", \"tall\"]) == 5\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/415",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to find a pair with highest product from a given array of integers.",
        "generated_code": "def max_Product(nums):\n    if len(nums) < 2:\n        return None\n    max_num1 = max(nums)\n    nums.remove(max_num1)\n    max_num2 = max(nums)\n    return (max_num1, max_num2)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    1,
                    2,
                    3,
                    4,
                    7,
                    0,
                    4
                ]
            ],
            "expected": [
                7,
                8
            ],
            "got": [
                8,
                7
            ]
        }
    },
    {
        "task_id": "Mbpp/415",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to find a pair with highest product from a given array of integers.",
        "generated_code": "def max_Product(arr):\n    if len(arr) < 2:\n        raise ValueError(\"Array must have at least two integers\")\n    \n    arr.sort()\n    \n    # Product of the two largest numbers\n    max1 = arr[-1]\n    max2 = arr[-2]\n    \n    # Product of the two smallest numbers (in case of negative numbers)\n    min1 = arr[0]\n    min2 = arr[1]\n    \n    if max1 * max2 > min1 * min2:\n        return (max2, max1)\n    else:\n        return (min1, min2)\n\n# Tests\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    1,
                    2,
                    3,
                    4,
                    7,
                    0,
                    8,
                    4
                ]
            ],
            "expected": [
                7,
                8
            ],
            "got": null
        }
    },
    {
        "task_id": "Mbpp/160",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
        "generated_code": "import math\n\ndef find_solution(a, b, n):\n    def extended_gcd(a, b):\n        if a == 0:\n            return b, 0, 1\n        else:\n            gcd, x, y = extended_gcd(b % a, a)\n            return gcd, y - (b // a) * x, x\n\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return x, y\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                2,
                3,
                7
            ],
            "expected": [
                2,
                1
            ],
            "got": [
                -7,
                7
            ]
        }
    },
    {
        "task_id": "Mbpp/160",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.",
        "generated_code": "def find_solution(a, b, n):\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            return (x, y)\n    return None\n\n# Testing the function with the provided test cases\nassert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(4, 2, 7) == None\nassert find_solution(1, 13, 17) == (4, 1)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/753",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find minimum k records from tuple list.  - in this case a verbatim copy of test cases",
        "generated_code": "def min_k(records, k):\n    return sorted(records, key=lambda x: x[1])[:k]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/753",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find minimum k records from tuple list.  - in this case a verbatim copy of test cases",
        "generated_code": "def min_k(records, k):\n    # Sort the records based on the second element of each tuple\n    sorted_records = sorted(records, key=lambda x: x[1])\n    # Return the first k elements from the sorted list\n    return sorted_records[:k]\n\n# Test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/448",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to calculate the sum of perrin numbers.",
        "generated_code": "def cal_sum(n: int) -> int:\n    if n <= 2:\n        return n\n    a, b, c = 0, 0, 2\n    total = 2\n    for _ in range(2, n):\n        a, b, c = b, c, a + b\n        total += c\n    return total\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                9
            ],
            "expected": 49,
            "got": 22
        }
    },
    {
        "task_id": "Mbpp/448",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to calculate the sum of perrin numbers.",
        "generated_code": "def cal_sum(n):\n    if n < 0:\n        return 0\n    \n    perrin = [3, 0, 2]\n    \n    for i in range(3, n+1):\n        perrin.append(perrin[i-2] + perrin[i-3])\n        \n    return sum(perrin)\n\n# Test cases\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                -5
            ],
            "expected": 5,
            "got": 0
        }
    }
]