[
    {
        "task_id": "Mbpp/93",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to calculate the value of 'a' to the power 'b'.",
        "generated_code": "def power(a, b):\n    return a ** b\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/93",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to calculate the value of 'a' to the power 'b'.",
        "generated_code": "def power(a, b):\n    return a ** b\n\n# Test cases\nassert power(3, 4) == 81\nassert power(2, 3) == 8\nassert power(5, 5) == 3125\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/440",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the first adverb and their positions in a given sentence.",
        "generated_code": "import nltk\nnltk.download('averaged_perceptron_tagger')\n\ndef find_adverb_position(sentence: str) -> tuple:\n    tokens = nltk.word_tokenize(sentence)\n    pos_tags = nltk.pos_tag(tokens)\n    for i, (word, pos) in enumerate(pos_tags):\n        if pos == 'RB':\n            start = sentence.find(word)\n            end = start + len(word)\n            return start, end, word\n    return None\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                "clearly!! we can see the sky"
            ],
            "expected": [
                0,
                7,
                "clearly"
            ],
            "got": null
        }
    },
    {
        "task_id": "Mbpp/440",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to find the first adverb and their positions in a given sentence.",
        "generated_code": "def find_adverb_position(sentence):\n    words = sentence.split()\n    for word in words:\n        if word.endswith(\"ly\"):\n            start = sentence.find(word)\n            end = start + len(word) - 1\n            return (start, end, word)\n    return None  # If no adverb is found, return None\n\n# Test cases\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly!!')\nassert find_adverb_position(\"seriously!! there are many roses\") == (0, 9, 'seriously!!')\nassert find_adverb_position(\"unfortunately!! sita is going to home\") == (0, 13, 'unfortunately!!')\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                "clearly!! we can see the sky"
            ],
            "expected": [
                0,
                7,
                "clearly"
            ],
            "got": null
        }
    },
    {
        "task_id": "Mbpp/261",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "generated_code": "def division_elements(tup1, tup2):\n    return tuple(a // b for a, b in zip(tup1, tup2))\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    5,
                    2,
                    3,
                    3
                ],
                [
                    5,
                    2,
                    3,
                    4
                ]
            ],
            "expected": [
                1.0,
                1.0,
                1.0,
                0.75
            ],
            "got": [
                1,
                1,
                1,
                0
            ]
        }
    },
    {
        "task_id": "Mbpp/261",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.",
        "generated_code": "def division_elements(tup1, tup2):\n    # Perform element-wise division\n    result = tuple(a // b for a, b in zip(tup1, tup2))\n    return result\n\n# Test cases\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    5,
                    2,
                    3,
                    3
                ],
                [
                    5,
                    2,
                    3,
                    4
                ]
            ],
            "expected": [
                1.0,
                1.0,
                1.0,
                0.75
            ],
            "got": [
                1,
                1,
                1,
                0
            ]
        }
    },
    {
        "task_id": "Mbpp/281",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to check if the elements of a given list are unique or not.",
        "generated_code": "def all_unique(input_list):\n    return len(input_list) == len(set(input_list))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/281",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to check if the elements of a given list are unique or not.",
        "generated_code": "def all_unique(lst):\n    return len(lst) == len(set(lst))\n\n# Test cases\nassert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/643",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "generated_code": "def text_match_wordz_middle(s):\n    s = s.strip()\n    if s.startswith('z') or s.endswith('z'):\n        return False\n    return 'z' in s\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "zzzxyabczzz"
            ],
            "expected": true,
            "got": false
        }
    },
    {
        "task_id": "Mbpp/643",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function that checks if a strings contains 'z', except at the start and end of the word.",
        "generated_code": "def text_match_wordz_middle(s):\n    # Check if 'z' is in the string and not at the start or end\n    if 'z' in s[1:-1]:\n        return True\n    return False\n\n# Test cases\nassert text_match_wordz_middle(\"pythonzabc.\") == True\nassert text_match_wordz_middle(\"zxyabc.\") == False\nassert text_match_wordz_middle(\"  lang  .\") == False\n",
        "counter_example": null
    }
]