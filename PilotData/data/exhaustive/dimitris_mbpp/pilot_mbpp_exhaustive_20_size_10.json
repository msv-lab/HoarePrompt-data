[
    {
        "task_id": "Mbpp/172",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to count the number of occurence of the string 'std' in a given string.",
        "generated_code": "def count_occurance(s: str) -> int:\n    return s.count('std')\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/172",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to count the number of occurence of the string 'std' in a given string.",
        "generated_code": "def count_occurance(s: str) -> int:\n    return s.count('std')\n\n# Test cases to validate the solution\nassert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2\nassert count_occurance(\"stds\") == 1\nassert count_occurance(\"\") == 0\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/739",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to find the index of smallest triangular number with n digits.",
        "generated_code": "def find_Index(n):\n    i = 1\n    while True:\n        tri_num = i * (i + 1) // 2\n        if len(str(tri_num)) == n:\n            return i\n        i += 1\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                100
            ],
            "expected": 44721359549995794750898931231328928455603737591808,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/739",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to find the index of smallest triangular number with n digits.",
        "generated_code": "def find_Index(n):\n    k = 1\n    while True:\n        triangular_number = k * (k + 1) // 2\n        if len(str(triangular_number)) == n:\n            return k\n        k += 1\n\n# Test cases\nassert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                100
            ],
            "expected": 44721359549995794750898931231328928455603737591808,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/430",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the directrix of a parabola.",
        "generated_code": "def parabola_directrix(a, b, c):\n    return c - (b ** 2) / (4 * a)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                5,
                3,
                2
            ],
            "expected": -198,
            "got": 1.55
        }
    },
    {
        "task_id": "Mbpp/430",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to find the directrix of a parabola.",
        "generated_code": "def parabola_directrix(a, b, c):\n    directrix = c - (b**2 / (4 * a)) - (1 / (4 * a))\n    return int(directrix)\n\n# Test cases\nassert parabola_directrix(5, 3, 2) == -198\nassert parabola_directrix(9, 8, 4) == -2336\nassert parabola_directrix(2, 4, 6) == -130\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                5,
                3,
                2
            ],
            "expected": -198,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/800",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to remove all whitespaces from a string.",
        "generated_code": "def remove_all_spaces(s: str) -> str:\n    return s.replace(\" \", \"\")\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/800",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to remove all whitespaces from a string.",
        "generated_code": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")\n\n# Test cases\nassert remove_all_spaces('python  program') == 'pythonprogram'\nassert remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'\nassert remove_all_spaces('python                     program') == 'pythonprogram'\nassert remove_all_spaces('   python                     program') == 'pythonprogram'\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/418",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the element of a list having maximum length.",
        "generated_code": "def Find_Max(lists):\n    return max(lists, key=len)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/418",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the element of a list having maximum length.",
        "generated_code": "def Find_Max(lst):\n    if not lst:\n        return []\n    return max(lst, key=len)\n\n# Test cases\nassert Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']]) == ['A', 'B', 'C']\nassert Find_Max([[1], [1, 2], [1, 2, 3]]) == [1, 2, 3]\nassert Find_Max([[1, 1], [1, 2, 3], [1, 5, 6, 1]]) == [1, 5, 6, 1]\n",
        "counter_example": null
    }
]