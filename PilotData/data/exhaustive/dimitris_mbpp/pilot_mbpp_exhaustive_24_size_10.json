[
    {
        "task_id": "Mbpp/623",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to compute the n-th power of each number in a list.",
        "generated_code": "def nth_nums(nums, n):\n    return [num ** n for num in nums]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/623",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to compute the n-th power of each number in a list.",
        "generated_code": "def nth_nums(numbers, power):\n    return [num ** power for num in numbers]\n\n# Test cases to validate the solution\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10, 20, 30], 3) == [1000, 8000, 27000]\nassert nth_nums([12, 15], 5) == [248832, 759375]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/116",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to convert a given tuple of positive integers into a single integer.",
        "generated_code": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/116",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to convert a given tuple of positive integers into a single integer.",
        "generated_code": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))\n\n# Tests\nassert tuple_to_int((1,2,3)) == 123\nassert tuple_to_int((4,5,6)) == 456\nassert tuple_to_int((5,6,7)) == 567\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/735",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to toggle bits of the number except the first and the last bit.",
        "generated_code": "def toggle_middle_bits(n: int) -> int:\n    \"\"\"\n    This function toggles the bits of the number except the first and the last bit.\n\n    Args:\n    n (int): The input number.\n\n    Returns:\n    int: The number with middle bits toggled.\n    \"\"\"\n    \n    # Convert the number to binary and remove the '0b' prefix\n    bin_n = bin(n)[2:]\n    \n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Add the first bit as it is\n    result += bin_n[0]\n    \n    # Toggle the middle bits\n    for bit in bin_n[1:-1]:\n        if bit == '0':\n            result += '1'\n        else:\n            result += '0'\n    \n    # Add the last bit as it is\n    result += bin_n[-1]\n    \n    # Convert the result back to integer and return\n    return int(result, 2)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/735",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to toggle bits of the number except the first and the last bit.",
        "generated_code": "def toggle_middle_bits(num):\n    # Convert the number to its binary representation as a string\n    bin_str = bin(num)[2:]\n    \n    # If the number has less than 3 bits, there are no middle bits to toggle\n    if len(bin_str) <= 2:\n        return num\n    \n    # Extract the first and last bits\n    first_bit = bin_str[0]\n    last_bit = bin_str[-1]\n    \n    # Toggle the middle bits\n    middle_bits = ''.join('1' if bit == '0' else '0' for bit in bin_str[1:-1])\n    \n    # Combine the first bit, toggled middle bits, and last bit\n    toggled_bin_str = first_bit + middle_bits + last_bit\n    \n    # Convert the binary string back to an integer\n    return int(toggled_bin_str, 2)\n\n# Test cases\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13\nassert toggle_middle_bits(0b1000001) == 0b1111111\nassert toggle_middle_bits(0b1001101) == 0b1110011\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                true
            ],
            "expected": 3,
            "got": true
        }
    },
    {
        "task_id": "Mbpp/590",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to convert polar coordinates to rectangular coordinates.",
        "generated_code": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(math.radians(theta))\n    y = r * math.sin(math.radians(theta))\n    complex_num = cmath.rect(r, math.radians(theta))\n    return ((x, y), complex_num)\n",
        "counter_example": "(non-serializable) {'test_type': 'base', 'inputs': [3, 4], 'expected': ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j)), 'got': ((2.9926921507794724, 0.2092694212323759), (2.9926921507794724+0.2092694212323759j))}"
    },
    {
        "task_id": "Mbpp/590",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to convert polar coordinates to rectangular coordinates.",
        "generated_code": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    # Convert polar to rectangular coordinates (Cartesian)\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    rect_coords = (x, y)\n    \n    # Convert polar to complex form\n    complex_coord = cmath.rect(r, theta)\n    \n    return (rect_coords, complex_coord)\n\n# Test cases\nassert polar_rect(3, 4) == ((-2.040410426703386, -2.270407485923784), (-2.040410426703386 - 2.270407485923784j))\nassert polar_rect(4, 7) == ((3.3070366009540713, -2.6274877036563123), (3.3070366009540713 - 2.6274877036563123j))\nassert polar_rect(15, 17) == ((13.74978939308599, 7.275184502974975), (13.74978939308599 + 7.275184502974975j))\n\n",
        "counter_example": "(non-serializable) {'test_type': 'base', 'inputs': [3, 4], 'expected': ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j)), 'got': None}"
    },
    {
        "task_id": "Mbpp/433",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "generated_code": "def check_greater(arr, num):\n    return all(i < num for i in arr)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/433",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "generated_code": "def check_greater(arr, num):\n    for element in arr:\n        if element >= num:\n            return False\n    return True\n\n# Tests\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([2, 3, 4, 5, 6], 8) == True\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == True\n",
        "counter_example": null
    }
]