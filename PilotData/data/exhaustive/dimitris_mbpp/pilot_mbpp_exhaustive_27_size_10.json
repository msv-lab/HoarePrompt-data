[
    {
        "task_id": "Mbpp/129",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to calculate whether the matrix is a magic square.",
        "generated_code": "def magic_square_test(matrix):\n    n = len(matrix)\n    expected_sum = n * (n**2 + 1) // 2\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != expected_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != expected_sum:\n            return False\n    \n    # Check diagonals\n    if sum(matrix[i][i] for i in range(n)) != expected_sum:\n        return False\n    if sum(matrix[i][n-i-1] for i in range(n)) != expected_sum:\n        return False\n    \n    return True\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    [
                        7,
                        7
                    ],
                    [
                        7,
                        7
                    ]
                ]
            ],
            "expected": true,
            "got": false
        }
    },
    {
        "task_id": "Mbpp/129",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to calculate whether the matrix is a magic square.",
        "generated_code": "def magic_square_test(matrix):\n    n = len(matrix)\n    if n == 0:\n        return False\n\n    # Calculate the sum of the first row to use as the target sum\n    target_sum = sum(matrix[0])\n\n    # Check the sum of each row\n    for row in matrix:\n        if sum(row) != target_sum:\n            return False\n\n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != target_sum:\n            return False\n\n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n)) != target_sum:\n        return False\n\n    # Check the sum of the anti-diagonal\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != target_sum:\n        return False\n    \n    return True\n\n# Tests\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]]) == False\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/631",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "generated_code": "def replace_spaces(s: str) -> str:\n    return s.replace(' ', '_').replace('_', ' ' if '_' in s else '')\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                "Jumanji The Jungle"
            ],
            "expected": "Jumanji_The_Jungle",
            "got": "JumanjiTheJungle"
        }
    },
    {
        "task_id": "Mbpp/631",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to replace whitespaces with an underscore and vice versa in a given string.",
        "generated_code": "def replace_spaces(s: str) -> str:\n    return ''.join('_' if char == ' ' else ' ' if char == '_' else char for char in s)\n\n# Test cases\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The_Avengers') == 'The Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/770",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
        "generated_code": "def odd_num_sum(n: int) -> int:\n    return sum(i**4 for i in range(1, 2*n + 1, 2))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/770",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
        "generated_code": "def odd_num_sum(n: int) -> int:\n    # Generate the first n odd natural numbers\n    odd_numbers = [i for i in range(1, 2*n, 2)]\n    \n    # Compute the fourth power of each odd number and sum them up\n    result = sum([num**4 for num in odd_numbers])\n    \n    return result\n\n# Test cases\nassert odd_num_sum(2) == 82\nassert odd_num_sum(3) == 707\nassert odd_num_sum(4) == 3108\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/244",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to find the next perfect square greater than a given number.",
        "generated_code": "def next_Perfect_Square(n: int) -> int:\n    root = int(n ** 0.5) + 1\n    return root ** 2\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                -5
            ],
            "expected": 0,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/244",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to find the next perfect square greater than a given number.",
        "generated_code": "import math\n\ndef next_Perfect_Square(n):\n    next_root = math.ceil(math.sqrt(n))\n    return next_root ** 2\n\n# Testing the function with the provided test cases\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                35
            ],
            "expected": 36,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/784",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the product of first even and odd number of a given list.",
        "generated_code": "def mul_even_odd(nums):\n    even_num = next((num for num in nums if num % 2 == 0), None)\n    odd_num = next((num for num in nums if num % 2 != 0), None)\n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        return None\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/784",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the product of first even and odd number of a given list.",
        "generated_code": "def mul_even_odd(lst):\n    first_odd = None\n    first_even = None\n    \n    for num in lst:\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is not None and first_even is not None:\n            break\n    \n    return first_odd * first_even\n\n# Test cases\nassert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\nassert mul_even_odd([1, 5, 7, 9, 10]) == 10\n",
        "counter_example": null
    }
]