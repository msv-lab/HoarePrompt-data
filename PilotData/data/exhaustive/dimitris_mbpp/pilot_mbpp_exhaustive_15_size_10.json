[
    {
        "task_id": "Mbpp/607",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "generated_code": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/607",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.",
        "generated_code": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None  # Returns None if no match is found\n\n# Test cases\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/556",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to count the number of pairs whose xor value is odd.",
        "generated_code": "def find_Odd_Pair(nums, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (nums[i] ^ nums[j]) % 2 != 0:\n                count += 1\n    return count\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/556",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to count the number of pairs whose xor value is odd.",
        "generated_code": "def find_Odd_Pair(arr, n):\n    odd_count = sum(1 for x in arr if x % 2 != 0)\n    even_count = n - odd_count\n    return odd_count * even_count\n\n# Test cases\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                1
            ],
            "expected": 0,
            "got": -20
        }
    },
    {
        "task_id": "Mbpp/801",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to count the number of equal numbers from three given integers.",
        "generated_code": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/801",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to count the number of equal numbers from three given integers.",
        "generated_code": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0\n\n# Tests\nassert test_three_equal(1, 1, 1) == 3\nassert test_three_equal(-1, -2, -3) == 0\nassert test_three_equal(1, 2, 2) == 2\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/428",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to sort the given array by using shell sort.",
        "generated_code": "def shell_sort(arr):\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/428",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to sort the given array by using shell sort.",
        "generated_code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2  # Initialize the gap size\n\n    # Start with a big gap, then reduce the gap\n    while gap > 0:\n        for i in range(gap, n):\n            # Perform a gapped insertion sort for this gap size\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        \n        gap //= 2  # Reduce the gap for the next element\n\n    return arr\n\n# Test cases to validate the solution\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/633",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the sum of xor of all pairs of numbers in the given list.",
        "generated_code": "def pair_xor_Sum(nums, n):\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total += nums[i] ^ nums[j]\n    return total\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/633",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the sum of xor of all pairs of numbers in the given list.",
        "generated_code": "def pair_xor_Sum(nums, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += nums[i] ^ nums[j]\n    return xor_sum\n\n# Test cases\nassert pair_xor_Sum([5, 9, 7, 6], 4) == 47\nassert pair_xor_Sum([7, 3, 5], 3) == 12\nassert pair_xor_Sum([7, 3], 2) == 4\n",
        "counter_example": null
    }
]