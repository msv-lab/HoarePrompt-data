[
    {
        "task_id": "Mbpp/562",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the length of the longest sublists.",
        "generated_code": "def Find_Max_Length(lists):\n    return max(len(sublist) for sublist in lists)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/562",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the length of the longest sublists.",
        "generated_code": "def Find_Max_Length(list_of_lists):\n    max_length = 0\n    for sublist in list_of_lists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\n# Test cases\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/268",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the n'th star number.",
        "generated_code": "def find_star_num(n: int) -> int:\n    return n*(6*n-7)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                3
            ],
            "expected": 37,
            "got": 33
        }
    },
    {
        "task_id": "Mbpp/268",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the n'th star number.",
        "generated_code": "def find_star_num(n):\n    return 6 * n * (n - 1) + 1\n\n# Test cases\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/750",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to add the given tuple to the given list.",
        "generated_code": "def add_tuple(lst, tup):\n    return lst + list(tup)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/750",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to add the given tuple to the given list.",
        "generated_code": "def add_tuple(lst, tpl):\n    return lst + list(tpl)\n\n# Test cases\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/721",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "generated_code": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[-1][-1] / n\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        6,
                        5,
                        4
                    ],
                    [
                        7,
                        3,
                        9
                    ]
                ]
            ],
            "expected": 5.2,
            "got": 8.666666666666666
        }
    },
    {
        "task_id": "Mbpp/721",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.",
        "generated_code": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    \n    # Create a dp table to store the maximum sum to reach each cell\n    dp = [[0] * N for _ in range(N)]\n    \n    # Initialize the top-left cell\n    dp[0][0] = matrix[0][0]\n    \n    # Fill in the first row (can only come from the left)\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    \n    # Fill in the first column (can only come from above)\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    \n    # Fill in the rest of the dp table\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    \n    # The maximum sum to reach the bottom-right cell\n    max_sum = dp[N-1][N-1]\n    \n    # The number of cells in the path is always 2N - 1\n    num_cells = 2 * N - 1\n    \n    # Return the average\n    return max_sum / num_cells\n\n# Test cases\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\nassert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/794",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "generated_code": "import re\ndef text_starta_endb(s):\n    pattern = r'^a.*b$'\n    if re.match(pattern, s):\n        return True\n    else:\n        return False\n",
        "counter_example": "(non-serializable) {'test_type': 'base', 'inputs': ['aabbbb'], 'expected': <re.Match object; span=(0, 6), match='aabbbb'>, 'got': True}"
    },
    {
        "task_id": "Mbpp/794",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
        "generated_code": "import re\n\ndef text_starta_endb(s: str) -> bool:\n    # Define the regex pattern to match the specified condition\n    pattern = r'^a.*b$'\n    # Use re.match to check if the entire string matches the pattern\n    return bool(re.match(pattern, s))\n\n# Testing provided assertions\nassert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"aabAbbbc\")\nassert not text_starta_endb(\"accddbbjjj\")\n",
        "counter_example": "(non-serializable) {'test_type': 'base', 'inputs': ['aabbbb'], 'expected': <re.Match object; span=(0, 6), match='aabbbb'>, 'got': True}"
    }
]