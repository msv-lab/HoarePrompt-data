[
    {
        "task_id": "Mbpp/791",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to remove tuples from the given tuple.",
        "generated_code": "def remove_nested(t):\n    return tuple(i for i in t if not isinstance(i, tuple))\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/791",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to remove tuples from the given tuple.",
        "generated_code": "def remove_nested(input_tuple):\n    return tuple(item for item in input_tuple if not isinstance(item, tuple))\n\n# Test cases\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\nassert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/731",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "generated_code": "import math\n\ndef lateralsurface_cone(r, h):\n    return math.pi * r * math.sqrt(r**2 + h**2)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/731",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the lateral surface area of a cone given radius r and the height h.",
        "generated_code": "import math\n\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n\n# Test cases\nassert lateralsurface_cone(5, 12) == 204.20352248333654\nassert lateralsurface_cone(10, 15) == 566.3586699569488\nassert lateralsurface_cone(19, 17) == 1521.8090132193388\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/301",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the depth of a dictionary.",
        "generated_code": "def dict_depth(d, level=1):\n    if not isinstance(d, dict):\n        return level\n    if not d:\n        return level\n    return max(dict_depth(v, level + 1) for k, v in d.items())\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                {
                    "a": 1,
                    "b": {
                        "c": "python"
                    }
                }
            ],
            "expected": 2,
            "got": 3
        }
    },
    {
        "task_id": "Mbpp/301",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to find the depth of a dictionary.",
        "generated_code": "def dict_depth(d):\n    if not isinstance(d, dict) or not d:\n        return 1\n    else:\n        return 1 + max(dict_depth(value) for value in d.values())\n\n# Test cases\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}}) == 4\nassert dict_depth({'a':1, 'b': {'c':'python'}}) == 2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}}) == 3\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                {
                    "a": 1,
                    "b": {
                        "c": {
                            "d": {}
                        }
                    }
                }
            ],
            "expected": 4,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/290",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the list of maximum length in a list of lists.",
        "generated_code": "def max_length(lst):\n    max_len = max(len(sublist) for sublist in lst)\n    max_lists = [sublist for sublist in lst if len(sublist) == max_len]\n    if len(max_lists) > 1:\n        return max_len, max_lists\n    else:\n        return max_len, max_lists[0]\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    [
                        1,
                        3,
                        5,
                        7,
                        9,
                        11
                    ],
                    [
                        2,
                        4,
                        6
                    ],
                    [
                        10,
                        12,
                        14,
                        16,
                        18,
                        20
                    ],
                    [
                        13,
                        15,
                        17,
                        19,
                        21
                    ]
                ]
            ],
            "expected": [
                6,
                [
                    1,
                    3,
                    5,
                    7,
                    9,
                    11
                ]
            ],
            "got": [
                6,
                [
                    [
                        1,
                        3,
                        5,
                        7,
                        9,
                        11
                    ],
                    [
                        10,
                        12,
                        14,
                        16,
                        18,
                        20
                    ]
                ]
            ]
        }
    },
    {
        "task_id": "Mbpp/290",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the list of maximum length in a list of lists.",
        "generated_code": "def max_length(list_of_lists):\n    max_len = 0\n    max_list = []\n    \n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n            \n    return (max_len, max_list)\n\n# Test cases\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15])\nassert max_length([[5], [15, 20, 25]]) == (3, [15, 20, 25])\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/457",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the sublist having minimum length.",
        "generated_code": "def Find_Min(lst):\n    return min(lst, key=len)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/457",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the sublist having minimum length.",
        "generated_code": "def Find_Min(sublists):\n    return min(sublists, key=len)\n\n# Test cases\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']\n",
        "counter_example": null
    }
]