[
    {
        "task_id": "Mbpp/748",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to put spaces between words starting with capital letters in a given string.",
        "generated_code": "def capital_words_spaces(s: str) -> str:\n    result = \"\"\n    for char in s:\n        if char.isupper() and result:\n            result += \" \" + char\n        else:\n            result += char\n    return result\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "MyNameIsAIAndIAmHereToHelpYou"
            ],
            "expected": "My Name Is AI And IAm Here To Help You",
            "got": "My Name Is A I And I Am Here To Help You"
        }
    },
    {
        "task_id": "Mbpp/748",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to put spaces between words starting with capital letters in a given string.",
        "generated_code": "def capital_words_spaces(s):\n    result = []\n    for i, char in enumerate(s):\n        if char.isupper() and i != 0:\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)\n\n# Test cases\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                "MyNameIsAIAndIAmHereToHelpYou"
            ],
            "expected": "My Name Is AI And IAm Here To Help You",
            "got": "My Name Is A I And I Am Here To Help You"
        }
    },
    {
        "task_id": "Mbpp/250",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "generated_code": "def count_X(tup, elem):\n    return tup.count(elem)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/250",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.",
        "generated_code": "def count_X(tup, element):\n    return tup.count(element)\n\n# Tests\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/119",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to find the element that appears only once in a sorted array.",
        "generated_code": "def search(nums):\n    for i in range(0, len(nums), 2):\n        if i == len(nums) - 1 or nums[i] != nums[i + 1]:\n            return nums[i]\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                []
            ],
            "expected": 0,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/119",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to find the element that appears only once in a sorted array.",
        "generated_code": "def search(arr):\n    if not arr:\n        return None  # If the array is empty, return None\n    \n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Check if the mid is even or odd\n        if mid % 2 == 1:\n            mid -= 1\n        \n        # Compare mid with the next element\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    \n    return arr[left]\n\n# Test cases\nassert search([1,1,2,2,3]) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8]) == 8\nassert search([1,2,2,3,3,4,4]) == 1\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                []
            ],
            "expected": 0,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/450",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to extract specified size of strings from a given list of string values.",
        "generated_code": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/450",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to extract specified size of strings from a given list of string values.",
        "generated_code": "def extract_string(strings, size):\n    return [string for string in strings if len(string) == size]\n\n# Tests\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8) == ['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6) == ['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9) == ['exercises']\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/296",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to count inversions in an array.",
        "generated_code": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/296",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to count inversions in an array.",
        "generated_code": "def merge_and_count(arr, temp_arr, left, mid, right):\n    i = left    # Starting index for left subarray\n    j = mid + 1 # Starting index for right subarray\n    k = left    # Starting index to be sorted\n    inv_count = 0\n\n    # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            i += 1\n        else:\n            # There are mid - i inversions, because all the remaining elements in the left subarray\n            # (arr[i], arr[i+1], ..., arr[mid]) are greater than arr[j]\n            temp_arr[k] = arr[j]\n            inv_count += (mid-i + 1)\n            j += 1\n        k += 1\n\n    # Copy the remaining elements of left subarray, if any\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements of right subarray, if any\n    while j <= right:\n        temp_arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Copy the sorted subarray into Original array\n    for i in range(left, right + 1):\n        arr[i] = temp_arr[i]\n        \n    return inv_count\n\ndef merge_sort_and_count(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right)//2\n\n        inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n    return inv_count\n\ndef get_Inv_Count(arr):\n    n = len(arr)\n    temp_arr = [0]*n\n    return merge_sort_and_count(arr, temp_arr, 0, n-1)\n\n# Test cases\nassert get_Inv_Count([1,20,6,4,5]) == 5\nassert get_Inv_Count([1,2,1]) == 1\nassert get_Inv_Count([1,2,5,6,1]) == 3\n",
        "counter_example": null
    }
]