[
    {
        "task_id": "Mbpp/765",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "generated_code": "def is_polite(n):\n    def is_odious(num):\n        count = 0\n        i = 0\n        while count < num:\n            if (i & (i >> 1)) == 0:\n                count += 1\n            i += 1\n        return i - 1\n\n    return is_odious(n)\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                7
            ],
            "expected": 11,
            "got": 9
        }
    },
    {
        "task_id": "Mbpp/765",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/",
        "generated_code": "def is_polite(n):\n    count = 0\n    number = 1\n    while count < n:\n        if (number & (number - 1)) != 0:  # Check if number is not a power of 2\n            count += 1\n        number += 1\n    return number - 1\n\n# Testing the function\nassert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                1000000000
            ],
            "expected": 1000000030,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/227",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find minimum of three numbers.",
        "generated_code": "def min_of_three(a, b, c):\n    return min(a, b, c)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/227",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find minimum of three numbers.",
        "generated_code": "def min_of_three(a, b, c):\n    return min(a, b, c)\n\n# Test cases\nassert min_of_three(10, 20, 0) == 0\nassert min_of_three(19, 15, 18) == 15\nassert min_of_three(-10, -20, -30) == -30\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/619",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to move all the numbers to the end of the given string.",
        "generated_code": "def move_num(s: str) -> str:\n    chars = []\n    nums = []\n    for char in s:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return ''.join(chars) + ''.join(nums)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/619",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to move all the numbers to the end of the given string.",
        "generated_code": "def move_num(s: str) -> str:\n    # Lists to hold alphabetic and numeric characters separately\n    alpha_part = []\n    num_part = []\n    \n    # Traverse each character in the string\n    for char in s:\n        if char.isdigit():\n            num_part.append(char)\n        else:\n            alpha_part.append(char)\n    \n    # Join the alphabetic characters and numeric characters into a single string\n    result = ''.join(alpha_part) + ''.join(num_part)\n    \n    return result\n\n# Test cases\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/722",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "generated_code": "def filter_data(student_data, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in student_data.items() if height >= min_height and weight >= min_weight}\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                {
                    "Cierra Vega": [
                        6.2,
                        70
                    ],
                    "Alden Cantrell": [
                        5.9,
                        65
                    ],
                    "Kierra Gentry": [
                        6.0,
                        68
                    ],
                    "Pierre Cox": [
                        5.8,
                        66
                    ]
                },
                6.0,
                70
            ],
            "expected": {
                "Cierra Vega": [
                    6.2,
                    70
                ]
            },
            "got": {
                "Cierra Vega": [
                    6.2,
                    70
                ]
            }
        }
    },
    {
        "task_id": "Mbpp/722",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.",
        "generated_code": "def filter_data(student_dict, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in student_dict.items() if height >= min_height and weight >= min_weight}\n\n# Test cases\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70) == {'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67) == {'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64) == {'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                {
                    "Cierra Vega": [
                        6.2,
                        70
                    ],
                    "Alden Cantrell": [
                        5.9,
                        65
                    ],
                    "Kierra Gentry": [
                        6.0,
                        68
                    ],
                    "Pierre Cox": [
                        5.8,
                        66
                    ]
                },
                6.0,
                70
            ],
            "expected": {
                "Cierra Vega": [
                    6.2,
                    70
                ]
            },
            "got": {
                "Cierra Vega": [
                    6.2,
                    70
                ]
            }
        }
    },
    {
        "task_id": "Mbpp/265",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "generated_code": "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/265",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.",
        "generated_code": "def list_split(lst, n):\n    result = [[] for _ in range(n)]\n    for i, element in enumerate(lst):\n        result[i % n].append(element)\n    return result\n\n# Test cases\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\nassert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\nassert list_split(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2) == [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n",
        "counter_example": null
    }
]