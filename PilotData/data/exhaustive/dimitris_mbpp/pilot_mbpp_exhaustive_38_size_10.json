[
    {
        "task_id": "Mbpp/578",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to interleave 3 lists of the same length into a single flat list.",
        "generated_code": "def interleave_lists(list1, list2, list3):\n    return [item for triplet in zip(list1, list2, list3) for item in triplet]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/578",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to interleave 3 lists of the same length into a single flat list.",
        "generated_code": "def interleave_lists(list1, list2, list3):\n    interleaved = [val for triple in zip(list1, list2, list3) for val in triple]\n    return interleaved\n\n# Test cases\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10]) == [10, 15, 5, 20, 2, 10]\nassert interleave_lists([11,44], [10,15], [20,5]) == [11, 10, 20, 44, 15, 5]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/752",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the nth jacobsthal number.  0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...",
        "generated_code": "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                5
            ],
            "expected": 11,
            "got": 29
        }
    },
    {
        "task_id": "Mbpp/752",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the nth jacobsthal number.  0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...",
        "generated_code": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, b + 2 * a\n        return b\n\n# Test cases\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5\nassert jacobsthal_num(13) == 2731\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/769",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to get the difference between two lists.",
        "generated_code": "def Diff(list1, list2):\n    return sorted(list(set(list1) ^ set(list2)))\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    10,
                    15,
                    20,
                    25,
                    30,
                    35,
                    40
                ],
                [
                    25,
                    40,
                    35
                ]
            ],
            "expected": [
                10,
                20,
                30,
                15
            ],
            "got": [
                10,
                15,
                20,
                30
            ]
        }
    },
    {
        "task_id": "Mbpp/769",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to get the difference between two lists.",
        "generated_code": "def Diff(list1, list2):\n    # Convert lists to sets and find their symmetric difference\n    set1 = set(list1)\n    set2 = set(list2)\n    diff_elements = set1.symmetric_difference(set2)\n    \n    # Convert the set back to a list and sort it to ensure the order matches the expected results\n    result_list = list(diff_elements)\n    result_list.sort(key=lambda x: (list1 + list2).index(x))\n    \n    return result_list\n\n# Test cases\nassert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]\nassert Diff([1,2,3,4,5], [6,7,1]) == [2,3,4,5,6,7]\nassert Diff([1,2,3], [6,7,1]) == [2,3,6,7]\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    10,
                    15,
                    20,
                    25,
                    30,
                    35,
                    40
                ],
                [
                    25,
                    40,
                    35
                ]
            ],
            "expected": [
                10,
                20,
                30,
                15
            ],
            "got": null
        }
    },
    {
        "task_id": "Mbpp/99",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "generated_code": "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                -5
            ],
            "expected": "-101",
            "got": "b101"
        }
    },
    {
        "task_id": "Mbpp/99",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.",
        "generated_code": "def decimal_to_binary(n):\n    return bin(n)[2:]\n\n# Test cases\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111'\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                -5
            ],
            "expected": "-101",
            "got": "b101"
        }
    },
    {
        "task_id": "Mbpp/425",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to count the number of sublists containing a particular element.",
        "generated_code": "def count_element_in_list(lst, elem):\n    return sum(1 for sublst in lst if elem in sublst)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/425",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to count the number of sublists containing a particular element.",
        "generated_code": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Test cases\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'A') == 3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'E') == 1\n",
        "counter_example": null
    }
]