[
    {
        "task_id": "Mbpp/61",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
        "generated_code": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/61",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to count the number of substrings with the sum of digits equal to their length.",
        "generated_code": "def count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += int(s[j])\n            if current_sum == (j - i + 1):\n                count += 1\n                \n    return count\n\n# Testing the function with the provided test cases\nassert count_Substrings('112112') == 6\nassert count_Substrings('111') == 6\nassert count_Substrings('1101112') == 12\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/118",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to convert a string to a list of strings split on the space character.",
        "generated_code": "def string_to_list(s):\n  return s.split()\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                ""
            ],
            "expected": [
                ""
            ],
            "got": []
        }
    },
    {
        "task_id": "Mbpp/118",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to convert a string to a list of strings split on the space character.",
        "generated_code": "def string_to_list(s: str) -> list:\n    return s.split()\n\n# Test cases\nassert string_to_list(\"python programming\") == ['python', 'programming']\nassert string_to_list(\"lists tuples strings\") == ['lists', 'tuples', 'strings']\nassert string_to_list(\"write a program\") == ['write', 'a', 'program']\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                ""
            ],
            "expected": [
                ""
            ],
            "got": []
        }
    },
    {
        "task_id": "Mbpp/14",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to find the volume of a triangular prism.",
        "generated_code": "def find_Volume(base, height, length):\n    return 0.5 * base * height * length\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                123456789,
                987654321,
                12345
            ],
            "expected": 7.526291655427412e+20,
            "got": 7.526291655427411e+20
        }
    },
    {
        "task_id": "Mbpp/14",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to find the volume of a triangular prism.",
        "generated_code": "def find_Volume(base, height, length):\n    base_area = 0.5 * base * height\n    volume = base_area * length\n    return volume\n\n# Tests\nassert find_Volume(10, 8, 6) == 240\nassert find_Volume(3, 2, 2) == 6\nassert find_Volume(1, 2, 1) == 1\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                123456789,
                987654321,
                12345
            ],
            "expected": 7.526291655427412e+20,
            "got": 7.526291655427411e+20
        }
    },
    {
        "task_id": "Mbpp/564",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "generated_code": "def count_Pairs(nums, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] != nums[j]:\n                count += 1\n    return count\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/564",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.",
        "generated_code": "def count_Pairs(lst, n):\n    # Initialize the count\n    count = 0\n    \n    # Iterate through the list using two pointers to form pairs\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    \n    return count\n\n# Test cases to validate the solution\nassert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/589",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find perfect squares between two given numbers.",
        "generated_code": "def perfect_squares(start, end):\n    return [i**2 for i in range(1, int(end**0.5)+1) if start <= i**2 <= end]\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                -10,
                -1
            ],
            "expected": [],
            "got": null
        }
    },
    {
        "task_id": "Mbpp/589",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to find perfect squares between two given numbers.",
        "generated_code": "import math\n\ndef perfect_squares(start, end):\n    result = []\n    # Start with the smallest integer whose square is >= start\n    current = math.ceil(math.sqrt(start))\n    # Continue until the square of current exceeds end\n    while current * current <= end:\n        result.append(current * current)\n        current += 1\n    return result\n\n# Test cases\nassert perfect_squares(1, 30) == [1, 4, 9, 16, 25]\nassert perfect_squares(50, 100) == [64, 81, 100]\nassert perfect_squares(100, 200) == [100, 121, 144, 169, 196]\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                -10,
                -1
            ],
            "expected": [],
            "got": null
        }
    }
]