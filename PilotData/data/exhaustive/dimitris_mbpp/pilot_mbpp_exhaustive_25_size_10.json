[
    {
        "task_id": "Mbpp/138",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "generated_code": "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    binary = bin(n)[2:]\n    return binary.count('1') > 1\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                7
            ],
            "expected": false,
            "got": true
        }
    },
    {
        "task_id": "Mbpp/138",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "generated_code": "def is_Sum_Of_Powers_Of_Two(n):\n    # Convert the number to binary and check if all digits are either 0 or 1\n    # bin(n) gives the binary representation in '0b...' format, so we strip off the '0b'.\n    binary_representation = bin(n)[2:]\n    \n    # Check if all characters in the binary representation are '0' or '1'\n    for digit in binary_representation:\n        if digit != '0' and digit != '1':\n            return False\n    return True\n\n# Test cases\nassert is_Sum_Of_Powers_Of_Two(10) == True  # 10 = 2^1 + 2^3\nassert is_Sum_Of_Powers_Of_Two(7) == False  # 7 = 2^0 + 2^1 + 2^2 (but all powers used are non-zero)\nassert is_Sum_Of_Powers_Of_Two(14) == True  # 14 = 2^1 + 2^2 + 2^3\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                10
            ],
            "expected": true,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/762",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "generated_code": "def check_monthnumber_number(month_number: int) -> bool:\n    thirty_days_months = [4, 6, 9, 11]\n    return month_number in thirty_days_months\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/762",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.",
        "generated_code": "def check_monthnumber_number(month: int) -> bool:\n    # Define the set of months that have 30 days\n    months_with_30_days = {4, 6, 9, 11}\n    # Check if the given month is in the set\n    return month in months_with_30_days\n\n# Test cases to validate the solution\nassert check_monthnumber_number(6) == True\nassert check_monthnumber_number(2) == False\nassert check_monthnumber_number(12) == False\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/294",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a function to find the maximum value in a given heterogeneous list.",
        "generated_code": "def max_val(hetero_list):\n    return max([i for i in hetero_list if isinstance(i, (int, float))])\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    "3.14",
                    false,
                    7.5
                ]
            ],
            "expected": false,
            "got": 7.5
        }
    },
    {
        "task_id": "Mbpp/294",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to find the maximum value in a given heterogeneous list.",
        "generated_code": "def max_val(lst):\n    # Filter only numeric values from the list\n    numeric_values = [x for x in lst if isinstance(x, (int, float))]\n    # Return the maximum value among the numeric values\n    return max(numeric_values)\n\n# Test cases\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5\nassert max_val(['Python', 15, 20, 25]) == 25\nassert max_val(['Python', 30, 20, 40, 50, 'version']) == 50\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    "3.14",
                    false,
                    7.5
                ]
            ],
            "expected": false,
            "got": 7.5
        }
    },
    {
        "task_id": "Mbpp/435",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to find the last digit of a given number.",
        "generated_code": "def last_Digit(n: int) -> int:\n    return n % 10\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                -987
            ],
            "expected": 7,
            "got": 3
        }
    },
    {
        "task_id": "Mbpp/435",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to find the last digit of a given number.",
        "generated_code": "def last_Digit(n):\n    return n % 10\n\n# Test cases\nassert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                -987
            ],
            "expected": 7,
            "got": 3
        }
    },
    {
        "task_id": "Mbpp/311",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": false,
        "description": "Write a python function to set the left most unset bit.",
        "generated_code": "def set_left_most_unset_bit(n: int) -> int:\n    binary = bin(n)[2:]\n    for i in range(len(binary)):\n        if binary[i] == '0':\n            return n | (1 << (len(binary) - 1 - i))\n    return n\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                0
            ],
            "expected": 0,
            "got": 1
        }
    },
    {
        "task_id": "Mbpp/311",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function to set the left most unset bit.",
        "generated_code": "def set_left_most_unset_bit(n):\n    # If all bits are set, return n as it is\n    if n & (n + 1) == 0:\n        return n\n    \n    # Find the first unset bit from the left and set it\n    position = 1\n    while n & position:\n        position <<= 1\n    \n    # Set the found position bit to 1\n    return n | position\n\n# Test cases\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                10
            ],
            "expected": 14,
            "got": null
        }
    }
]