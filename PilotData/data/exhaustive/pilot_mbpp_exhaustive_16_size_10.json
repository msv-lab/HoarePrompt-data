[
    {
        "task_id": "Mbpp/479",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the first digit of a given number.",
        "generated_code": "def first_Digit(n: int) -> int:\n    return int(str(n)[0])\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/479",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the first digit of a given number.",
        "generated_code": "def first_Digit(number):\n    while number >= 10:\n        number //= 10\n    return number\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/740",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.",
        "generated_code": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i+1] for i in range(0, len(tup), 2)}\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/740",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.",
        "generated_code": "def tuple_to_dict(tup):\n    # Initialize an empty dictionary\n    result = {}\n    \n    # Iterate through the tuple in steps of 2\n    for i in range(0, len(tup), 2):\n        # Add the adjacent elements to the dictionary\n        result[tup[i]] = tup[i + 1]\n    \n    return result\n\n# Test cases to validate the solution\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/100",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "generated_code": "def next_smallest_palindrome(n):\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/100",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the next smallest palindrome of a specified integer, returned as an integer.",
        "generated_code": "def next_smallest_palindrome(num: int) -> int:\n    def is_palindrome(n: int) -> bool:\n        return str(n) == str(n)[::-1]\n    \n    num += 1  # Start checking from the next number\n    while not is_palindrome(num):\n        num += 1\n    return num\n\n# Test cases\nassert next_smallest_palindrome(99) == 101\nassert next_smallest_palindrome(1221) == 1331\nassert next_smallest_palindrome(120) == 121\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/772",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to remove all the words with k length in the given string.",
        "generated_code": "def remove_length(s: str, k: int) -> str:\n    words = s.split()\n    new_words = [word for word in words if len(word) != k]\n    return ' '.join(new_words)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/772",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to remove all the words with k length in the given string.",
        "generated_code": "def remove_length(s: str, k: int) -> str:\n    # Split the string into words\n    words = s.split()\n    \n    # Filter out words of length k\n    filtered_words = [word for word in words if len(word) != k]\n    \n    # Join the filtered words back into a string\n    result = ' '.join(filtered_words)\n    \n    return result\n\n# Tests\nassert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/223",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "generated_code": "def is_majority(arr, n, elem):\n    return arr.count(elem) > n / 2\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/223",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)",
        "generated_code": "def is_majority(arr, n, x):\n    # Helper function to find the first occurrence of x in arr\n    def first_occurrence(arr, n, x):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n    \n    # Helper function to find the last occurrence of x in arr\n    def last_occurrence(arr, n, x):\n        low, high = 0, n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == n - 1 or x < arr[mid + 1]) and arr[mid] == x:\n                return mid\n            elif x < arr[mid]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        return -1\n    \n    # Find the first and last occurrence of x\n    first = first_occurrence(arr, n, x)\n    if first == -1:\n        return False  # x is not present in the array\n    \n    last = last_occurrence(arr, n, x)\n    \n    # Calculate the count of x in the array\n    count = last - first + 1\n    \n    # Check if count is greater than n / 2\n    return count > n // 2\n\n# Test cases\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [],
                1,
                0
            ],
            "expected": false,
            "got": null
        }
    }
]