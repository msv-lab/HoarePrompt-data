[
    {
        "task_id": "Mbpp/755",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the second smallest number in a list.",
        "generated_code": "def second_smallest(nums):\n    unique_nums = list(set(nums))\n    unique_nums.sort()\n    if len(unique_nums) < 2:\n        return None\n    return unique_nums[1]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/755",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the second smallest number in a list.",
        "generated_code": "def second_smallest(nums):\n    unique_nums = sorted(set(nums))\n    return unique_nums[1] if len(unique_nums) > 1 else None\n\n# Test cases\nassert second_smallest([1, 2, -8, -2, 0, -2]) == -2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2]) == -0.5\nassert second_smallest([2,2]) == None\nassert second_smallest([2,2,2]) == None\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/624",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to convert a given string to uppercase.",
        "generated_code": "def is_upper(s: str) -> str:\n    return s.upper()\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/624",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to convert a given string to uppercase.",
        "generated_code": "def is_upper(s):\n    return s.upper()\n\n# Tests to validate the solution\nassert is_upper(\"person\") == \"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/610",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.",
        "generated_code": "def remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/610",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.",
        "generated_code": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]\n\n# Test cases\nassert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4) == [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5) == [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]\n",
        "counter_example": {
            "test_type": "base",
            "input": [
                [
                    1,
                    1,
                    2,
                    3,
                    4,
                    4,
                    5,
                    1
                ],
                3
            ],
            "expected": [
                1,
                1,
                3,
                4,
                4,
                5,
                1
            ],
            "got": null
        }
    },
    {
        "task_id": "Mbpp/71",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to sort a list of elements.",
        "generated_code": "def comb_sort(my_list):\n    def swap(i, j):\n        my_list[i], my_list[j] = my_list[j], my_list[i]\n\n    gap = len(my_list)\n    shrink = 1.3\n\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(my_list):\n            if my_list[i] > my_list[i + gap]:\n                swap(i, i + gap)\n                sorted = False\n            i += 1\n\n    return my_list\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/71",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to sort a list of elements.",
        "generated_code": "def comb_sort(arr):\n    def get_next_gap(gap):\n        # Shrink gap by Shrink factor\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n    \n    n = len(arr)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n\n    return arr\n\n# Test cases\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/237",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
        "generated_code": "def check_occurences(tuples_list):\n    occurrences = {}\n    for tup in tuples_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurrences:\n            occurrences[sorted_tup] += 1\n        else:\n            occurrences[sorted_tup] = 1\n    return occurrences\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/237",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.",
        "generated_code": "def check_occurences(tuples_list):\n    counts = {}\n    for tup in tuples_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in counts:\n            counts[sorted_tup] += 1\n        else:\n            counts[sorted_tup] = 1\n    return counts\n\n# Test cases\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n",
        "counter_example": null
    }
]