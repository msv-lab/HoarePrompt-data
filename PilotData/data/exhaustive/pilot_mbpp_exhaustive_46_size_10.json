[
    {
        "task_id": "Mbpp/773",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
        "generated_code": "def occurance_substring(s, sub):\n    idx = s.find(sub)\n    if idx != -1:\n        return (sub, idx, idx + len(sub))\n    else:\n        return None\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/773",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.",
        "generated_code": "def occurance_substring(main_string, sub_string):\n    start_pos = main_string.find(sub_string)\n    if start_pos == -1:\n        return None\n    end_pos = start_pos + len(sub_string)\n    return (sub_string, start_pos, end_pos)\n\n# Test cases\nassert occurance_substring('python programming, python language', 'python') == ('python', 0, 6)\nassert occurance_substring('python programming,programming language', 'programming') == ('programming', 7, 18)\nassert occurance_substring('python programming,programming language', 'language') == ('language', 31, 39)\nassert occurance_substring('c++ programming, c++ language', 'python') == None\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/583",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function which returns nth catalan number.",
        "generated_code": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    catalan = [0 for _ in range(n + 1)]\n    catalan[0] = catalan[1] = 1\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/583",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a function which returns nth catalan number.",
        "generated_code": "import math\n\ndef catalan_number(n):\n    return math.comb(2 * n, n) // (n + 1)\n\n# Tests\nassert catalan_number(10) == 16796\nassert catalan_number(9) == 4862\nassert catalan_number(7) == 429\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/757",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a function to count the pairs of reverse strings in the given string list.",
        "generated_code": "def count_reverse_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j][::-1]:\n                count += 1\n    return count\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/757",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": false,
        "description": "Write a function to count the pairs of reverse strings in the given string list.",
        "generated_code": "def count_reverse_pairs(string_list):\n    count = 0\n    seen = set()\n    \n    for s in string_list:\n        reverse_s = s[::-1]\n        if reverse_s in string_list and reverse_s not in seen and s not in seen:\n            count += 1\n            seen.add(s)\n            seen.add(reverse_s)\n    \n    return count\n\n# Tests\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                [
                    "app",
                    "123",
                    "ad3",
                    "apple",
                    "elppa",
                    "xyx",
                    "bat",
                    "tab",
                    "tacocat",
                    "racecar",
                    "abc",
                    "zyx",
                    "def",
                    "fed"
                ]
            ],
            "expected": 3,
            "got": 6
        }
    },
    {
        "task_id": "Mbpp/309",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to find the maximum of two numbers.",
        "generated_code": "def maximum(a, b):\n    return max(a, b)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/309",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to find the maximum of two numbers.",
        "generated_code": "def maximum(a, b):\n    return a if a > b else b\n\n# Test cases to verify the implementation\nassert maximum(5, 10) == 10\nassert maximum(-1, -2) == -1\nassert maximum(9, 7) == 9\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/105",
        "dataset": "mbpp",
        "model": "llama3-70b-8192",
        "correct": true,
        "description": "Write a python function to count true booleans in the given list.",
        "generated_code": "def count(bool_list):\n    return sum(1 for elem in bool_list if elem)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/105",
        "dataset": "mbpp",
        "model": "gpt-4o-2024-05-13",
        "correct": true,
        "description": "Write a python function to count true booleans in the given list.",
        "generated_code": "def count(bool_list):\n    return sum(bool_list)\n\n# Test cases\nassert count([True, False, True]) == 2\nassert count([False, False]) == 0\nassert count([True, True, True]) == 3\n",
        "counter_example": null
    }
]