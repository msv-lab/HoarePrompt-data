[
    {
        "task_id": "Mbpp/256",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": true,
        "description": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "generated_code": "def count_Primes_nums(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/256",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": true,
        "description": "Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.",
        "generated_code": "def count_Primes_nums(n):\n    if n <= 2:\n        return 0\n    \n    # Initialize a list to keep track of prime status for each number up to n-1\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers\n    \n    # Sieve of Eratosthenes\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    \n    # Count primes less than n\n    return sum(is_prime)\n\n# Test cases\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/637",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": true,
        "description": "Write a function to check whether the given amount has no profit and no loss",
        "generated_code": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/637",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": true,
        "description": "Write a function to check whether the given amount has no profit and no loss",
        "generated_code": "def noprofit_noloss(cost_price, selling_price):\n    return cost_price == selling_price\n\n# Tests\nassert noprofit_noloss(1500, 1200) == False\nassert noprofit_noloss(100, 100) == True\nassert noprofit_noloss(2000, 5000) == False\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/750",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": true,
        "description": "Write a function to add the given tuple to the given list.",
        "generated_code": "def add_tuple(lst, tup):\n    return lst + list(tup)\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/750",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": true,
        "description": "Write a function to add the given tuple to the given list.",
        "generated_code": "def add_tuple(lst, tpl):\n    return lst + list(tpl)\n\n# Test cases\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/577",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": false,
        "description": "Write a python function to find the last digit in factorial of a given number.",
        "generated_code": "def last_Digit_Factorial(n: int) -> int:\n    if n < 2:\n        return n\n    elif n == 2 or n == 3:\n        return n\n    elif n == 4:\n        return 4\n    else:\n        return 0\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                0
            ],
            "expected": 1,
            "got": 0
        }
    },
    {
        "task_id": "Mbpp/577",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": false,
        "description": "Write a python function to find the last digit in factorial of a given number.",
        "generated_code": "def last_Digit_Factorial(n):\n    if n >= 5:\n        return 0\n    else:\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n        return factorial % 10\n\n# Testing the function\nassert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0\n",
        "counter_example": {
            "test_type": "plus",
            "input": [
                2.5
            ],
            "expected": 0,
            "got": null
        }
    },
    {
        "task_id": "Mbpp/276",
        "dataset": "mbpp",
        "model": "llama3-70b",
        "correct": true,
        "description": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
        "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * (radius ** 2) * height\n",
        "counter_example": null
    },
    {
        "task_id": "Mbpp/276",
        "dataset": "mbpp",
        "model": "gpt-4o",
        "correct": true,
        "description": "Write a function that takes in the radius and height of a cylinder and returns the the volume.",
        "generated_code": "import math\n\ndef volume_cylinder(radius, height):\n    # Calculate the volume using the formula for the volume of a cylinder\n    volume = math.pi * (radius ** 2) * height\n    return volume\n\n# Tests to validate the function\nassert math.isclose(volume_cylinder(10, 5), 1570.7500000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4, 5), 251.32000000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4, 10), 502.64000000000004, rel_tol=0.001)\n",
        "counter_example": null
    }
]