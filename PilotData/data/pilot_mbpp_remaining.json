[
{
    "description": "Write a function to filter odd numbers.",
    "task_name": "Mbpp/426",
    "dataset": "mbppplus",
    "model": "llama3point1-70b",
    "generated_code": "def filter_oddnumbers(nums):\n  return [num for num in nums if num % 2 != 0]\n",
    "correct": true,
    "task_id": "184",
    "depth": 0
},
{
    "description": "Write a function to filter odd numbers.",
    "task_name": "Mbpp/426",
    "dataset": "mbppplus",
    "model": "gpt-4o",
    "generated_code": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\n\n# Test cases\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\nassert filter_oddnumbers([10, 20, 45, 67, 84, 93]) == [45, 67, 93]\nassert filter_oddnumbers([5, 7, 9, 8, 6, 4, 3]) == [5, 7, 9, 3]\n",
    "correct": true,
    "task_id": "184",
    "depth": 0
},
{
    "description": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
    "task_name": "Mbpp/260",
    "dataset": "mbppplus",
    "model": "llama3point1-70b",
    "generated_code": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"Find the nth Newman-Shanks-Williams prime number.\"\"\"\n    if n == 1:\n        return 7  # The first NSW prime is 7\n    \n    # Initialize the count of NSW primes and the current number\n    count = 1\n    num = 7\n    \n    while True:\n        # Check if the current number is a prime number\n        if is_prime(num):\n            # Check if the current prime number is congruent to 1 or 5 modulo 6\n            if num % 6 in [1, 5]:\n                # Increment the count of NSW primes\n                count += 1\n                \n                # If we have found the nth NSW prime, return it\n                if count == n:\n                    return num\n        \n        # Move on to the next number\n        num += 1\n",
    "correct": false,
    "task_id": "121",
    "depth": 1
},
{
    "description": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
    "task_name": "Mbpp/260",
    "dataset": "mbppplus",
    "model": "gpt-4o",
    "generated_code": "def newman_prime(n):\n    if n == 0 or n == 1:\n        return 1\n    \n    S0, S1 = 1, 1\n    for i in range(2, n+1):\n        S_next = 2 * S1 + S0\n        S0, S1 = S1, S_next\n    return S1\n\n# Test cases\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41\n",
    "correct": true,
    "task_id": "121",
    "depth": 1
},
{
    "description": "Write a python function to find smallest number in a list.",
    "task_name": "Mbpp/62",
    "dataset": "mbppplus",
    "model": "llama3point1-70b",
    "generated_code": "def smallest_num(nums):\n    return min(nums)\n",
    "correct": true,
    "task_id": "21",
    "depth": 0
},
{
    "description": "Write a python function to find smallest number in a list.",
    "task_name": "Mbpp/62",
    "dataset": "mbppplus",
    "model": "gpt-4o",
    "generated_code": "def smallest_num(lst):\n    return min(lst)\n\n# Tests\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45\n",
    "correct": true,
    "task_id": "21",
    "depth": 0
},
{
    "description": "Write a python function to find whether the parity of a given number is odd.",
    "task_name": "Mbpp/406",
    "dataset": "mbppplus",
    "model": "llama3point1-70b",
    "generated_code": "def find_Parity(n):\n    return n % 2 != 0\n",
    "correct": true,
    "task_id": "171",
    "depth": 0
},
{
    "description": "Write a python function to find whether the parity of a given number is odd.",
    "task_name": "Mbpp/406",
    "dataset": "mbppplus",
    "model": "gpt-4o",
    "generated_code": "def find_Parity(n):\n    return n % 2 != 0\n\n# Test cases\nassert find_Parity(12) == False\nassert find_Parity(7) == True\nassert find_Parity(10) == False\n",
    "correct": true,
    "task_id": "171",
    "depth": 0
},
{
    "description": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
    "task_name": "Mbpp/733",
    "dataset": "mbppplus",
    "model": "llama3point1-70b",
    "generated_code": "def find_first_occurrence(arr, num):\n    for i, x in enumerate(arr):\n        if x == num:\n            return i\n    return -1  # return -1 if num is not found in the array\n",
    "correct": true,
    "task_id": "302",
    "depth": 1
},
{
    "description": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
    "task_name": "Mbpp/733",
    "dataset": "mbppplus",
    "model": "gpt-4o",
    "generated_code": "def find_first_occurrence(arr, target):\n    low, high = 0, len(arr) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            result = mid\n            high = mid - 1  # Look on the left side of mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result\n\n# Test cases\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([1, 2, 4, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n",
    "correct": true,
    "task_id": "302",
    "depth": 1
},
{
    "description": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
    "task_name": "Mbpp/240",
    "dataset": "mbppplus",
    "model": "llama3point1-70b",
    "generated_code": "def replace_list(list1, list2):\n    if list1:\n        list1[-1:] = list2\n    else:\n        list1 = list2\n    return list1\n",
    "correct": true,
    "task_id": "109",
    "depth": 0
},
{
    "description": "Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.",
    "task_name": "Mbpp/240",
    "dataset": "mbppplus",
    "model": "gpt-4o",
    "generated_code": "def replace_list(list1, list2):\n    return list1[:-1] + list2\n\n# Test cases\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1, 2, 3, 4, 5],[5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert replace_list([\"red\", \"blue\", \"green\"],[\"yellow\"]) == [\"red\", \"blue\", \"yellow\"]\n",
    "correct": true,
    "task_id": "109",
    "depth": 0
},
{
    "description": "Write a python function to check whether the two numbers differ at one bit position only or not.",
    "task_name": "Mbpp/6",
    "dataset": "mbppplus",
    "model": "llama3point1-70b",
    "generated_code": "def differ_At_One_Bit_Pos(num1, num2):\n    return bin(num1 ^ num2).count('1') == 1\n",
    "correct": false,
    "task_id": "4",
    "depth": 0
},
{
    "description": "Write a python function to check whether the two numbers differ at one bit position only or not.",
    "task_name": "Mbpp/6",
    "dataset": "mbppplus",
    "model": "gpt-4o",
    "generated_code": "def differ_At_One_Bit_Pos(a, b):\n    xor_result = a ^ b\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0\n\n# Tests\nassert differ_At_One_Bit_Pos(13, 9) == True\nassert differ_At_One_Bit_Pos(15, 8) == False\nassert differ_At_One_Bit_Pos(2, 4) == False\nassert differ_At_One_Bit_Pos(2, 3) == True\nassert differ_At_One_Bit_Pos(5, 1) == True\nassert differ_At_One_Bit_Pos(1, 5) == True\n",
    "correct": true,
    "task_id": "4",
    "depth": 0
},
{
    "description": "Write a python function to find the last position of an element in a sorted array.",
    "task_name": "Mbpp/793",
    "dataset": "mbppplus",
    "model": "llama3point1-70b",
    "generated_code": "def last(arr, target):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == target:\n            return i\n    return -1\n",
    "correct": false,
    "task_id": "350",
    "depth": 1
},
{
    "description": "Write a python function to find the last position of an element in a sorted array.",
    "task_name": "Mbpp/793",
    "dataset": "mbppplus",
    "model": "gpt-4o",
    "generated_code": "def last(arr, x):\n    # Iterate through the array from the end to the start\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == x:\n            return i\n    # If the element is not found, return -1 (not specified in tests but good practice)\n    return -1\n\n# Tests\nassert last([1,2,3],1) == 0\nassert last([1,1,1,2,3,4],1) == 2\nassert last([2,2,3,3,6,8,9],3) == 3\n",
    "correct": false,
    "task_id": "350",
    "depth": 1
},
{
    "description": "Write a function to convert rectangular coordinates to polar coordinates.",
    "task_name": "Mbpp/590",
    "dataset": "mbppplus",
    "model": "llama3point1-70b",
    "generated_code": "import math\n\ndef polar_rect(x, y):\n    r = math.hypot(x, y)\n    phi = math.atan2(y, x)\n    return (r, phi)\n",
    "correct": true,
    "task_id": "251",
    "depth": 0
},
{
    "description": "Write a function to convert rectangular coordinates to polar coordinates.",
    "task_name": "Mbpp/590",
    "dataset": "mbppplus",
    "model": "gpt-4o",
    "generated_code": "import math\n\ndef polar_rect(x, y):\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y, x)\n    return (r, theta)\n\n# Test cases\nassert polar_rect(3, 4) == (5.0, 0.9272952180016122)\nassert polar_rect(4, 7) == (8.06225774829855, 1.0516502125483738)\nassert polar_rect(15, 17) == (22.67156809750927, 0.8478169733934057)\n",
    "correct": true,
    "task_id": "251",
    "depth": 0
},
{
    "description": "Write a function to get the sum of the digits of a non-negative integer.",
    "task_name": "Mbpp/566",
    "dataset": "mbppplus",
    "model": "llama3point1-70b",
    "generated_code": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))\n",
    "correct": true,
    "task_id": "235",
    "depth": 0
},
{
    "description": "Write a function to get the sum of the digits of a non-negative integer.",
    "task_name": "Mbpp/566",
    "dataset": "mbppplus",
    "model": "gpt-4o",
    "generated_code": "def sum_digits(n: int) -> int:\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n\n# Testing the function with the provided test cases\nassert sum_digits(345) == 12\nassert sum_digits(12) == 3\nassert sum_digits(97) == 16\n",
    "correct": true,
    "task_id": "235",
    "depth": 1
},
{
    "description": "Write a function to remove all whitespaces from a string.",
    "task_name": "Mbpp/800",
    "dataset": "mbppplus",
    "model": "llama3point1-70b",
    "generated_code": "def remove_all_spaces(input_str):\n    return input_str.replace(\" \", \"\")\n",
    "correct": true,
    "task_id": "356",
    "depth": 0
},
{
    "description": "Write a function to remove all whitespaces from a string.",
    "task_name": "Mbpp/800",
    "dataset": "mbppplus",
    "model": "gpt-4o",
    "generated_code": "def remove_all_spaces(s):\n    return s.replace(\" \", \"\")\n\n# Test cases\nassert remove_all_spaces('python  program') == 'pythonprogram'\nassert remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'\nassert remove_all_spaces('python                     program') == 'pythonprogram'\nassert remove_all_spaces('   python                     program') == 'pythonprogram'\n",
    "correct": true,
    "task_id": "356",
    "depth": 0
},
{
    "description": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
    "task_name": "Mbpp/284",
    "dataset": "mbppplus",
    "model": "llama3point1-70b",
    "generated_code": "def check_element(lst, element):\n    return all(item == element for item in lst)\n",
    "correct": true,
    "task_id": "142",
    "depth": 0
},
{
    "description": "Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.",
    "task_name": "Mbpp/284",
    "dataset": "mbppplus",
    "model": "gpt-4o",
    "generated_code": "def check_element(lst, element):\n    for item in lst:\n        if item != element:\n            return False\n    return True\n\n# Test cases\nassert check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue') == False\nassert check_element([1, 2, 3, 4], 7) == False\nassert check_element([\"green\", \"green\", \"green\", \"green\"], 'green') == True\n",
    "correct": true,
    "task_id": "142",
    "depth": 1
},
{
    "description": "Write a function to add the given tuple to the given list.",
    "task_name": "Mbpp/750",
    "dataset": "mbppplus",
    "model": "llama3point1-70b",
    "generated_code": "def add_tuple(input_list, input_tuple):\n  return input_list + list(input_tuple)\n",
    "correct": true,
    "task_id": "315",
    "depth": 0
},
{
    "description": "Write a function to add the given tuple to the given list.",
    "task_name": "Mbpp/750",
    "dataset": "mbppplus",
    "model": "gpt-4o",
    "generated_code": "def add_tuple(lst, tpl):\n    return lst + list(tpl)\n\n# Test cases\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n",
    "correct": true,
    "task_id": "315",
    "depth": 0
},
{
    "description": "Write a function to convert a snake case string to camel case string.",
    "task_name": "Mbpp/102",
    "dataset": "mbppplus",
    "model": "llama3point1-70b",
    "generated_code": "def snake_to_camel(snake_case_str):\n    words = snake_case_str.split('_')\n    camel_case_str = ''.join(word.capitalize() for word in words)\n    return camel_case_str\n",
    "correct": false,
    "task_id": "55",
    "depth": 0
},
{
    "description": "Write a function to convert a snake case string to camel case string.",
    "task_name": "Mbpp/102",
    "dataset": "mbppplus",
    "model": "gpt-4o",
    "generated_code": "def snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return ''.join(x.capitalize() for x in components)\n\n# Tests\nassert snake_to_camel('python_program') == 'PythonProgram'\nassert snake_to_camel('python_language') == 'PythonLanguage'\nassert snake_to_camel('programming_language') == 'ProgrammingLanguage'\n",
    "correct": false,
    "task_id": "55",
    "depth": 0
},
{
    "description": "Write a function to find the area of a rectangle.",
    "task_name": "Mbpp/458",
    "dataset": "mbppplus",
    "model": "llama3point1-70b",
    "generated_code": "def rectangle_area(length, width):\n    return length * width\n",
    "correct": true,
    "task_id": "207",
    "depth": 0
},
{
    "description": "Write a function to find the area of a rectangle.",
    "task_name": "Mbpp/458",
    "dataset": "mbppplus",
    "model": "gpt-4o",
    "generated_code": "def rectangle_area(length, width):\n    return length * width\n\n# Test the function with the provided assertions\nassert rectangle_area(10, 20) == 200\nassert rectangle_area(10, 5) == 50\nassert rectangle_area(4, 2) == 8\n",
    "correct": true,
    "task_id": "207",
    "depth": 0
}
]