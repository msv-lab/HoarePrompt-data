#State of the program right berfore the function call: a and b are positive integers such that 1 ≤ a < b ≤ 10^9.
def func():
    n, big = map(int, raw_input().split())
    total = [str(big)]
    temp = big
    while big > n:
        if big % 2 == 0:
            big = big / 2
            total.append(str(big))
        else:
            temp = (big - 1) // 10
            if temp * 10 + 1 == big:
                total.append(str(temp))
                big = temp
            else:
                break
        
    #State of the program after the loop has been executed: `a` and `b` are positive integers such that 1 ≤ a < b ≤ 10^9, `n` and `big` are input integers. After the loop, `big` is less than or equal to `n`, `total` is a list containing the string representations of the original `big` and all subsequent values of `big` generated by the loop operations. `temp` remains equal to the original value of `big` throughout the loop.
    if (total[-1] == str(n)) :
        sys.stdout.write('YES\n%d\n' % len(total) + ' '.join(total[::-1]) + '\n')
    else :
        sys.stdout.write('NO\n')
    #State of the program after the if-else block has been executed: *`a` and `b` are positive integers such that 1 ≤ a < b ≤ 10^9, `n` and `big` are input integers. After the loop, `big` is less than or equal to `n`, `total` is a list containing the string representations of the original `big` and all subsequent values of `big` generated by the loop operations. `temp` remains equal to the original value of `big` throughout the loop. If the last element of `total` is the string representation of `n`, then the last element of `total` is the string representation of `n`. Otherwise, the last element of `total` is not equal to the string representation of `n`.
#Overall this is what the function does:The function `func` reads two integers `n` and `big` from the standard input, where `1 ≤ n < big ≤ 10^9`. It then generates a sequence of numbers starting from `big` and repeatedly divides `big` by 2 if it is even, or subtracts 1 and divides by 10 if it is odd, until `big` becomes less than or equal to `n`. The function collects these numbers in a list `total` as their string representations. After the loop, if the last number in the sequence is equal to `n`, it prints "YES" followed by the length of the sequence and the sequence itself in reverse order. Otherwise, it prints "NO". The function does not return any value; it only performs I/O operations. The variables `a` and `b` mentioned in the annotations do not appear in the function, and the function does not compute the greatest common divisor (GCD).

