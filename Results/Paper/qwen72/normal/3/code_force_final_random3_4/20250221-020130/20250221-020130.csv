1949_D,1949_D_Lucina_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are designing a new video game. It has n scenarios, which the player may
play in any order, but each scenario must be played exactly once. When a
player switches from a scenario to another scenario, the game shows a
specially crafted transition video to make it all feel part of one big story.
This video is specific to a pair of scenarios, but not to their order, in
other words, the video playing when switching from scenario a to scenario b is
the same as the video playing when switching from scenario b to scenario a .
Therefore, you need to create \frac{n(n-1)}{2} different transition videos,
one for each possible pair of different scenarios.

Each transition video can be either funny or scary. It is boring to see too
many funny videos or too many scary videos in a row. Therefore, your goal is
to create the videos in such a way that no matter in which order does the
player approach the scenarios, they will never see more than \lceil
\frac{3n}{4} \rceil transition videos of the same type in a row.

You have already come up with ideas for at most \lfloor \frac{n}{2} \rfloor of
the transition videos, and therefore already know if those will be funny or
scary. Now you need to choose funny or scary for all other transition videos
in such a way that the above requirement is satisfied.

Input

The first line contains a single integer n (2 \le n \le 24 ) — the number of
scenarios in the game.

The next n lines describe the partial transition video plan. Each of those
lines contains n characters. The j -th character of the i -th line corresponds
to the transition video between the i -th and the j -th scenarios. It will be
F if the corresponding transition video will be funny, S if the corresponding
transition video will be scary, ? if the corresponding transition video is
still undecided, or . if i=j .

It is guaranteed that the i -th character of the j -th line and the j -th
character of the i -th line will be the same for all i and j . It is
guaranteed that at most \lfloor \frac{n}{2} \rfloor (n divided by 2, rounded
down) transition videos will already be decided, in other words, that at most
2\lfloor \frac{n}{2} \rfloor characters in the input will be F or S.

Output

Print n lines describing the full transition video plan in the same format as
the input. Each of those lines must contain n characters. The j -th character
of the i -th line must be F if the corresponding transition video is funny, S
if the corresponding transition video is scary, or . if i=j .

Each ? character from the input must be replaced with either F or S, and all
other characters from the input must remain unchanged. It must still hold that
the i -th character of the j -th line and the j -th character of the i -th
line are the same for all i and j .

For each permutation of the n scenarios, it must hold that the transition
videos corresponding to playing the scenarios in this order do not have more
than \lceil \frac{3n}{4} \rceil (3n divided by 4, rounded up) videos of the
same type consecutively.

If there are multiple solutions, print any of them. It can be proven that for
all inputs satisfying the constraints of this problem a solution always
exists.

Examples

Input

    5
    
    .?F??
    
    ?.???
    
    F?.S?
    
    ??S.?
    
    ????.

Output

    .FFFF
    F.FFF
    FF.SF
    FFS.F
    FFFF.

Input

    12
    
    .???????????
    
    ?.??????????
    
    ??.?????????
    
    ???.????????
    
    ????.???????
    
    ?????.??????
    
    ??????.?????
    
    ???????.????
    
    ????????.???
    
    ?????????.??
    
    ??????????.?
    
    ???????????.

Output

    .SSSFFSSSSFS
    S.SFFSFSFFFS
    SS.SFFFSSSFS
    SFS.FFSSSSFS
    FFFF.FFFFFSF
    FSFFF.SFFSFF
    SFFSFS.SSSFS
    SSSSFFS.SSFS
    SFSSFFSS.SFS
    SFSSFSSSS.FS
    FFFFSFFFFF.F
    SSSSFFSSSSF.
    
Note

In the first sample: We are allowed \lceil \frac{3\cdot 5}{4} \rceil=4
transition videos of the same type in a row, but for any permutation of the 5
scenarios the player will see only 4 transition videos in total, therefore we
can choose funny or scary freely. We must still respect the already chosen
types.

In the second sample: One of the 479001600 possible permutations of scenarios
is 1, 7, 4, 12, 9, 8, 2, 6, 10, 3, 11, 5. The player will get the following
sequence of transition videos for this permutation: SSSSSSSSSFS. Even though
this sequence has 10 scary transition videos in total, it has only 9 scary
transition videos in a row, which is the maximum allowed amount (\lceil
\frac{3\cdot 12}{4} \rceil=9 ).","n = int(input())
a = [0]*(n+1)
b = [0]*(n+1)
xx = [""""]
for i in range(1,n+1):
    x = input()
    for j in range(1,n+1):
        if x[j-1] == ""F"":
            a[i] += 1
            a[j] += 1
        elif x[j-1] == ""S"":
            b[i] += 1
            b[j] += 1
    xx.append(x)
 
sa = []
sb = []
for i in range(1,n+1):
    if a[i] > 0 and b[i] == 0:
        sa.append(i)
    if b[i] > 0 and a[i] == 0:
        sb.append(i)
if len(sa) >= len(sb):
    t = len(sa)
    for i in range(1,n+1):
        if a[i] == 0 and b[i] == 0:
            sa.append(i)
    for i in range(1,n+1):
        nx = """"
        for j in range(1,n+1):
            if xx[i][j-1] != ""?"":
                nx += xx[i][j-1]
            elif i in sa[:n//4-1] or j in sa[:n//4-1]:
                nx += ""F""
            else:
                nx += ""S""
        print(nx)
else:
    for i in range(1,n+1):
        if a[i] == 0 and b[i] == 0:
            sb.append(i)
    for i in range(1,n+1):
        nx = """"
        for j in range(1,n+1):
            if xx[i][j-1] != ""?"":
                nx += xx[i][j-1]
            elif i in sb[:n//4-1] or j in sb[:n//4-1]:
                nx += ""S""
            else:
                nx += ""F""
        print(nx)",4,True,False,False,False,False,False,False,False,False,False,False,False,False,False
1941_F,1941_F_rajesh_sv_100%,codeforces2024,human,qwen2p5-72b-instruct,"Rudolf has prepared a set of n problems with complexities a_1 < a_2 < a_3 <
\dots < a_n . He is not entirely satisfied with the balance, so he wants to
add at most one problem to fix it.

For this, Rudolf came up with m models of problems and k functions. The
complexity of the i -th model is d_i , and the complexity of the j -th
function is f_j . To create a problem, he selects values i and j (1 \le i \le
m , 1 \le j \le k ) and by combining the i -th model with the j -th function,
he obtains a new problem with complexity d_i + f_j (a new element is inserted
into the array a ).

To determine the imbalance of the set, Rudolf sorts the complexities of the
problems in ascending order and finds the largest value of a_i - a_{i - 1} (i
> 1 ).

What is the minimum value of imbalance that Rudolf can achieve by adding at
most one problem, created according to the described rules?

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of testcases.

The first line of each test case contains three integers n , m , and k (2 \le
n \le 10^5 , 1 \le m, k \le 2 \cdot 10^5 ) — the number of prepared problems,
the number of models, and the number of functions, respectively.

The second line of each test case contains n integers a_1, a_2, a_3, \dots a_n
(1 \le a_i \le 2 \cdot 10^9 , a_i < a_{i+1} ) — the complexities of the
prepared problems.

The third line of each test case contains m integers d_1, d_2, d_3, \dots d_m
(1 \le d_i \le 10^9 ) — the complexities of the models.

The fourth line of each test case contains k integers f_1, f_2, f_3, \dots f_k
(1 \le f_i \le 10^9 ) — the complexities of the functions.

It is guaranteed that the sum of n over all testcases does not exceed 10^5 .

It is guaranteed that the sum of m over all testcases does not exceed 2 \cdot
10^5 .

It is guaranteed that the sum of k over all testcases does not exceed 2 \cdot
10^5 .

Output

For each testcase, output a single number — the minimum imbalance that Rudolf
can achieve.

Example

Input

    7
    
    5 5 5
    
    5 10 15 20 26
    
    11 14 16 13 8
    
    16 4 5 3 1
    
    7 6 5
    
    1 4 7 10 18 21 22
    
    2 3 5 7 4 2
    
    6 8 9 3 2
    
    7 6 5
    
    1 4 7 10 18 21 22
    
    2 3 5 7 4 2
    
    6 8 13 3 2
    
    5 6 3
    
    2 10 13 20 25
    
    11 6 10 16 14 5
    
    6 17 15
    
    4 2 2
    
    11 12 14 15
    
    19 14
    
    10 6
    
    8 4 2
    
    3 10 16 18 21 22 29 30
    
    9 13 16 15
    
    4 2
    
    2 4 7
    
    4 21
    
    4 15 14 5
    
    20 1 15 1 12 5 11

Output

    5
    4
    5
    8
    2
    7
    11","from collections import *
from math import *
from heapq import *
from bisect import *
 
import sys
from os import path
 
class FenwickTree:
    def __init__(self, x):
        bit = self.bit = list(x)
        size = self.size = len(bit)
        for i in range(size):
            j = i | (i + 1)
            if j < size:
                bit[j] += bit[i]
 
    def update(self, idx, x):
        """"""updates bit[idx] += x""""""
        while idx < self.size:
            self.bit[idx] += x
            idx |= idx + 1
 
    def __call__(self, end):
        """"""calc sum(bit[:end])""""""
        x = 0
        while end:
            x += self.bit[end - 1]
            end &= end - 1
        return x
 
    def find_kth(self, k):
        """"""Find largest idx such that sum(bit[:idx]) <= k""""""
        idx = -1
        for d in reversed(range(self.size.bit_length())):
            right_idx = idx + (1 << d)
            if right_idx < self.size and self.bit[right_idx] <= k:
                idx = right_idx
                k -= self.bit[idx]
        return idx + 1, k
 
 
class SortedList:
    block_size = 700
 
    def __init__(self, iterable=()):
        self.macro = []
        self.micros = [[]]
        self.micro_size = [0]
        self.fenwick = FenwickTree([0])
        self.size = 0
        for item in iterable:
            self.insert(item)
 
    def insert(self, x):
        i = bisect_left(self.macro, x)
        j = bisect_right(self.micros[i], x)
        self.micros[i].insert(j, x)
        self.size += 1
        self.micro_size[i] += 1
        self.fenwick.update(i, 1)
        if len(self.micros[i]) >= self.block_size:
            self.micros[i:i + 1] = self.micros[i][:self.block_size >> 1], self.micros[i][self.block_size >> 1:]
            self.micro_size[i:i + 1] = self.block_size >> 1, self.block_size >> 1
            self.fenwick = FenwickTree(self.micro_size)
            self.macro.insert(i, self.micros[i + 1][0])
 
    def pop(self, k=-1):
        i, j = self._find_kth(k)
        self.size -= 1
        self.micro_size[i] -= 1
        self.fenwick.update(i, -1)
        return self.micros[i].pop(j)
 
    def __getitem__(self, k):
        i, j = self._find_kth(k)
        return self.micros[i][j]
 
    def count(self, x):
        return self.bisect_right(x) - self.bisect_left(x)
 
    def __contains__(self, x):
        return self.count(x) > 0
 
    def bisect_left(self, x):
        i = bisect_left(self.macro, x)
        return self.fenwick(i) + bisect_left(self.micros[i], x)
 
    def bisect_right(self, x):
        i = bisect_right(self.macro, x)
        return self.fenwick(i) + bisect_right(self.micros[i], x)
 
    def _find_kth(self, k):
        return self.fenwick.find_kth(k + self.size if k < 0 else k)
 
    def __len__(self):
        return self.size
 
    def __iter__(self):
        return (x for micro in self.micros for x in micro)
 
    def __repr__(self):
        return str(list(self))
 
def cache(func):
    d = {}
    def wrapper(*args):
        if args not in d:
            d[args] = func(*args)
        return d[args]
    return wrapper
 
def input():
    return sys.stdin.readline().strip()
 
def input_int():
    return int(input())
 
def input_list(delimiter=' '):
    return list(map(int,input().split(delimiter)))
 
def input_string():
    return input()
 
def solve():
    n, m, k = input_list()
    A = input_list()
    D = sorted(set(input_list()))
    F = input_list()
    
    max_diff, next_max_diff, index = -inf, -inf, None
    for i in range(1, n):
        diff = A[i] - A[i-1]
        if diff > max_diff:
            next_max_diff = max_diff
            max_diff = diff
            index = i
        elif diff > next_max_diff:
            next_max_diff = diff
    left, right = A[index-1], A[index]
    ans = max_diff
    for f in F:
        l = bisect_right(D, left - f)
        h = bisect_left(D, right - f) - 1
        while l < h:
            mid = l + (h - l) // 2
            mid_sum, mid_next_sum = D[mid] + f, D[mid+1] + f
            # print(f, l, h, mid, mid_sum, mid_next_sum)
            if mid_sum - left < right - mid_next_sum:
                l = mid + 1
            else:
                h = mid
        if l == h:
            ans = min(ans, max(D[l] + f - left, right - D[l] - f))
    
    print(max(ans, next_max_diff))
 
def main():
    testcases = input_int()
    # testcases = 1
    for _ in range(testcases):
        solve()
 
if __name__ == ""__main__"":
    if(path.exists('input.txt')): 
        sys.stdin = open(""input.txt"",""r"")
        sys.stdout = open(""output.txt"",""w"")
    main()",4,True,False,False,True,False,True,True,True,False,True,False,True,True,True
1968_E,1968_E_Leifu_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an integer n . You choose n cells (x_1,y_1),
(x_2,y_2),\dots,(x_n,y_n) in the grid n\times n where 1\le x_i\le n and 1\le
y_i\le n .

Let \mathcal{H} be the set of distinct Manhattan distances between any pair of
cells. Your task is to maximize the size of \mathcal{H} . Examples of sets and
their construction are given in the notes.

If there exists more than one solution, you are allowed to output any.

Manhattan distance between cells (x_1,y_1) and (x_2,y_2) equals
|x_1-x_2|+|y_1-y_2| .

Input

The first line contains a single integer t (1\le t\le 50 ) — the number of
test cases.

Each of the following t lines contains a single integer n (2\le n\le 10^3 ).

Output

For each test case, output n points which maximize the size of \mathcal{H} .
It is not necessary to output an empty line at the end of the answer for each
test case.

Example

Input

    5
    
    2
    
    3
    
    4
    
    5
    
    6

Output

    1 1
    1 2
    
    2 1
    2 3
    3 1
    
    1 1
    1 3
    4 3
    4 4
    
    1 1
    1 3
    1 4
    2 1
    5 5
    
    1 4
    1 5
    1 6
    5 2
    5 5
    6 1
    
Note

In the first testcase we have n=2 . One of the possible arrangements is:

![](https://espresso.codeforces.com/4d7adaa08c9ee5ebf2a0caba13185ac968d6bcd9.png)
The arrangement with cells located in (1,1) and (1,2) . In this case
\mathcal{H}=\\{|1-1|+|1-1|,|1-1|+|2-2|,|1-1|+|1-2|\\}=\\{0,0,1\\}=\\{0,1\\} .
Hence, the size of \mathcal{H} is 2 . It can be shown that it is the greatest
possible answer.

In the second testcase we have n=3 . The optimal arrangement is:

![](https://espresso.codeforces.com/52d127e3dbe0141bb58dbdf4158586772a208758.png)
The arrangement with cells located in (2,1) , (2,3) and (3,1) .

\mathcal{H}
=\\{|2-2|+|1-1|,|2-2|+|3-3|,|3-3|+|1-1|,|2-2|+|1-3|,|2-3|+|1-1|,|2-3|+|3-1|\\}
=\\{0,0,0,2,1,3\\} =\\{0,1,2,3\\} .

For n=4 a possible arrangement is:

![](https://espresso.codeforces.com/575a6758d1f67174ceb877b32a1e89770cd2281a.png)

For n=5 a possible arrangement is:

![](https://espresso.codeforces.com/b790401b426625982c00d04cff13aceec53918b4.png)

For n=6 a possible arrangement is:

![](https://espresso.codeforces.com/d0f498905660a67115d9f58c6cbc1439ba6e509c.png)","t = int(input())
 
for i in range(t):
    n = int(input())
    print(""1 1"")
    print(""1 2"")
    if n == 3:
        print(""2 3"")
    else:
        print(""2 4"")
        for j in range(4, n+1):
            print(str(j) + "" "" + str(j))",4,False,False,False,False,False,False,False,False,False,False,False,False,False,True
1945_A,1945_A_Guzal_12.50%,codeforces2024,human,qwen2p5-72b-instruct,"The organizing committee plans to take the participants of the Olympiad on a
hike after the tour. Currently, the number of tents needed to be taken is
being calculated. It is known that each tent can accommodate up to 3 people.

Among the participants, there are a introverts, b extroverts, and c
universals:

  * Each introvert wants to live in a tent alone. Thus, a tent with an introvert must contain exactly one person — only the introvert himself. 
  * Each extrovert wants to live in a tent with two others. Thus, the tent with an extrovert must contain exactly three people. 
  * Each universal is fine with any option (living alone, with one other person, or with two others). 

The organizing committee respects the wishes of each participant very much, so
they want to fulfill all of them.

Tell us the minimum number of tents needed to be taken so that all
participants can be accommodated according to their preferences. If it is
impossible to accommodate the participants in a way that fulfills all the
wishes, output -1 .

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. This is followed by
the descriptions of the test cases.

Each test case is described by a single line containing three integers a , b ,
c (0 \le a, b, c \le 10^9 ) — the number of introverts, extroverts, and
universals, respectively.

Output

For each test case, output a single integer — the minimum number of tents, or
-1 if it is impossible to accommodate the participants.

Example

Input

    10
    
    1 2 3
    
    1 4 1
    
    1 4 2
    
    1 1 1
    
    1 3 2
    
    19 7 18
    
    0 0 0
    
    7 0 0
    
    0 24 0
    
    1000000000 1000000000 1000000000

Output

    3
    -1
    3
    -1
    3
    28
    0
    7
    8
    1666666667
    
Note

In the first test case, 1 tent will be given to the introverts, 1 tent will be
shared by two extroverts and one universal, and the last tent will be shared
by two universals. In total, 3 tents are needed.

In the second test case, three extroverts will take 1 tent, and 1 tent will be
taken by an introvert. Then, one extrovert and one universal will be left.
This extrovert will not be able to live with two others.","n=int(input())
for i in range(n):
    a, b, c = map(int, input().split())
    k=0
    if (b%3!=0 and c<3) and (b+c)%3!=0: print(-1)
    else:
        k+=a+(b+c)//3
        if (b+c)%3!=0: k+=1
        print(k)",4,False,False,False,False,False,False,True,True,True,True,False,False,False,False
1929_A,1929_A_joshlfrog_66.67%,codeforces2024,human,qwen2p5-72b-instruct,"Sasha decided to give his girlfriend an array a_1, a_2, \ldots, a_n . He found
out that his girlfriend evaluates the beauty of the array as the sum of the
values (a_i - a_{i - 1}) for all integers i from 2 to n .

Help Sasha and tell him the maximum beauty of the array a that he can obtain,
if he can rearrange its elements in any way.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 500 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (2 \leq n \leq
100 ) — the length of the array a .

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\leq a_i \leq 10^9 ) — the elements of the array a .

Output

For each test case, output a single integer — the maximum beauty of the array
a that can be obtained.

Example

Input

    5
    
    3
    
    2 1 3
    
    3
    
    69 69 69
    
    5
    
    100 54 80 43 90
    
    4
    
    3 4 3 3
    
    2
    
    2 1

Output

    2
    0
    57
    1
    1
    
Note

In the first test case, the elements of the array a can be rearranged to make
a = [1, 2, 3] . Then its beauty will be equal to (a_2 - a_1) + (a_3 - a_2) =
(2 - 1) + (3 - 2) = 2 .

In the second test case, there is no need to rearrange the elements of the
array a . Then its beauty will be equal to 0 .","t = int(input())
for e in range(t):
    l = int(input())
    nums = [int(x) for x in input().split()]
    x=0
    y=100000000
    for i in range(l):
        if nums[i]>x:
            x = nums[i]
        if nums[i]<y:
            y = nums[i]
    print(x-y)",4,False,False,False,True,False,False,False,False,False,False,False,False,True,True
1945_C,1945_C_KDKJ_100%,codeforces2024,human,qwen2p5-72b-instruct,"In the village of Letovo, there are n houses. The villagers decided to build a
big road that will divide the village into left and right sides. Each resident
wants to live on either the right or the left side of the street, which is
described as a sequence a_1, a_2, \dots, a_n , where a_j = 0 if the resident
of the j -th house wants to live on the left side of the street; otherwise,
a_j = 1 .

The road will pass between two houses. The houses to the left of it will be
declared the left-side, and the houses to the right will be declared the
right-side. More formally, let the road pass between houses i and i+1 . Then
the houses at positions between 1 and i will be on the left side of the
street, and at positions between i+1 and n will be on the right side. The road
also may pass before the first and after the last house; in this case, the
entire village is declared to be either the right or left side, respectively.

To make the design fair, it was decided to lay the road so that at least half
of the residents on each side of the village are satisfied with the choice.
That is, among x residents on one side, at least \lceil\frac{x}{2}\rceil
should want to live on that side, where \lceil x \rceil denotes rounding up a
real number x .

![](https://espresso.codeforces.com/75baa17903d65a630fb0d3334683e857d5fdc345.png)
To the left of the road, there will be i houses, among the corresponding a_j
there must be at least \lceil\frac{i}{2}\rceil zeros. To the right of the
road, there will be n-i houses, among the corresponding a_j there must be at
least \lceil\frac{n-i}{2}\rceil ones.

Determine after which house i the road should be laid in order to satisfy the
described condition and be as close to the middle of the village as possible.
Formally, among all suitable positions i , minimize \left|\frac{n}{2} -
i\right| .

If there are multiple suitable positions i with the minimum \left|\frac{n}{2}
- i\right| , output the smaller one.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 2\cdot 10^4 ). The description of the test cases
follows.

The first line of each test case contains a single integer n (3 \le n \le
3\cdot 10^5 ). The next line of each test case contains a string a of length n
, consisting only of 0 and 1 .

It is guaranteed that the sum of n over all test cases does not exceed 3\cdot
10^5 .

Output

For each test case, output a single number i — the position of the house after
which the road should be laid (if it should be laid before the first house,
output 0 ). We can show that the answer always exists.

Example

Input

    7
    
    3
    
    101
    
    6
    
    010111
    
    6
    
    011001
    
    3
    
    000
    
    3
    
    110
    
    3
    
    001
    
    4
    
    1100

Output

    2
    3
    2
    3
    0
    1
    0
    
Note

Let's consider the first example of input data.

If we lay the road after the first house, there will be one house a_1 = 1 on
the left side of the street, the resident of which would like to live on the
right side of the street. Then 0 out of 1 residents on the even side will be
satisfied with the choice, which means that the road cannot be laid after
house 1 .

If we lay the road after the second house, 1 out of 2 residents on the left
side (with preferences a_1 = 1 , a_2 = 0 ) and 1 out of 1 resident on the
right side (with preference a_3 = 1 ) will be satisfied with the choice. More
than half of the residents on each side are satisfied with the choice, which
means that the road can be laid after house 2 . We can show that this is the
optimal answer.","from heapq import heappush, heappop, heapify
from collections import defaultdict, deque,Counter
from math import ceil, floor, sqrt, factorial,gcd,cos,sin,pi
from itertools import permutations, combinations,product
from bisect import bisect_left, bisect_right
from copy import deepcopy
from fractions import Fraction
import sys
#from functools import cache,lru_cache #@lru_cache(maxsize=None)
# sys.setrecursionlimit(10**6)
# input = sys.stdin.readline
vector1 = [[0, -1], [1, 0], [0, 1], [-1, 0]]
vector2 = [[0, 1], [1, 0], [-1, 0], [0, -1],
           [1,-1], [-1, 1], [1, 1], [-1, -1]]
 
 
 
def solve():
    
    n = int(input())
    a = input()
    S = [[0,0]]
    for s in a:
        x, y = S[-1]
        if s == ""0"":
            x += 1
        else:
            y += 1
        S.append([x,y])
    ans = -1
    for i in range(n+1):
        left = S[i][0]
        lsum = i
        right = S[-1][1] - S[i][1]
        rsum = n - i
        #print(left,right)
        if left*2 < lsum or right*2 < rsum:
            continue
        elif abs(n/2 - i) < abs(n/2 - ans):
                ans = i
        
    print(ans)
    #print(S)
 
    
def main():
    for _ in range(int(input())):
        solve()
    
    
    
    
 
if __name__ == '__main__':
    main()",4,True,False,True,True,True,True,True,True,True,True,False,True,True,True
1968_D,1968_D_proguy20211510_100%,codeforces2024,human,qwen2p5-72b-instruct,"Bodya and Sasha found a permutation p_1,\dots,p_n and an array a_1,\dots,a_n .
They decided to play a well-known ""Permutation game"".

A permutation of length n is an array consisting of n distinct integers from 1
to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

Both of them chose a starting position in the permutation.

The game lasts k turns. The players make moves simultaneously. On each turn,
two things happen to each player:

  * If the current position of the player is x , his score increases by a_x . 
  * Then the player either stays at his current position x or moves from x to p_x . 

The winner of the game is the player with the higher score after exactly k
turns.

Knowing Bodya's starting position P_B and Sasha's starting position P_S ,
determine who wins the game if both players are trying to win.

Input

The first line contains a single integer t (1\le t\le 10^4 ) — the number of
testcases.

The first line of each testcase contains integers n , k , P_B , P_S (1\le
P_B,P_S\le n\le 2\cdot 10^5 , 1\le k\le 10^9 ) — length of the permutation,
duration of the game, starting positions respectively.

The next line contains n integers p_1,\dots,p_n (1 \le p_i \le n ) — elements
of the permutation p .

The next line contains n integers a_1,\dots,a_n (1\le a_i\le 10^9 ) — elements
of array a .

It is guaranteed that the sum of values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each testcase output:

  * ""Bodya"" if Bodya wins the game. 
  * ""Sasha"" if Sasha wins the game. 
  * ""Draw"" if the players have the same score. 

Example

Input

    10
    
    4 2 3 2
    
    4 1 2 3
    
    7 2 5 6
    
    10 8 2 10
    
    3 1 4 5 2 7 8 10 6 9
    
    5 10 5 1 3 7 10 15 4 3
    
    2 1000000000 1 2
    
    1 2
    
    4 4
    
    8 10 4 1
    
    5 1 4 3 2 8 6 7
    
    1 1 2 1 2 100 101 102
    
    5 1 2 5
    
    1 2 4 5 3
    
    4 6 9 4 2
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    6 9 5 4
    
    6 1 3 5 2 4
    
    6 9 8 9 5 10
    
    4 8 4 2
    
    2 3 4 1
    
    5 2 8 7
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    2 1000000000 1 2
    
    1 2
    
    1000000000 2

Output

    Bodya
    Sasha
    Draw
    Draw
    Bodya
    Sasha
    Sasha
    Sasha
    Sasha
    Bodya
    
Note

Below you can find the explanation for the first testcase, where the game
consists of k=2 turns.

Turn| Bodya's position| Bodya's score| Bodya's move| Sasha's position| Sasha's
score| Sasha's move  
---|---|---|---|---|---|---  
first| 3 | 0 + a_3 = 0 + 5 = 5 | stays on the same position| 2 | 0 + a_2 = 0 + 2 = 2 | moves to p_2=1   
second| 3 | 5 + a_3 = 5 + 5 = 10 | stays on the same position| 1 | 2 + a_1 = 2 + 7 = 9 | stays on the same position  
final results| 3 | 10 | | 1 | 9 |   
  
As we may see, Bodya's score is greater, so he wins the game. It can be shown
that Bodya always can win this game.","YES, NO = ""YES"", ""NO""
MOD = 10 ** 9 + 7 
alpha = 'abcdefghijklmnopqrstuvwxyz'
 
for _ in range(int(input())):
    n, k, pb, ps = input().split()
    n, k, pb, ps = int(n), int(k), int(pb), int(ps)
    p = list(map(int, input().split()))
    a = list(map(int, input().split()))
    
    pathb, paths = [], []
    vis = [0] * n
    
    vis[pb - 1] = 1
    while True:
        pathb.append(a[pb - 1])
        pb = p[pb - 1]
        if vis[pb - 1] == 1:
            break
    
    vis = [0] * n
    
    vis[ps - 1] = 1
    while True:
        paths.append(a[ps - 1])
        ps = p[ps - 1]
        if vis[ps - 1] == 1:
            break
    resb, ress = 0, 0
    preb, pres = 0, 0
    for i in range(len(pathb)):
        if k < i + 1:
            break
        curr = preb + pathb[i] * (k - i)
        preb += pathb[i]
        resb = max(resb, curr)
    
    for i in range(len(paths)):
        if k < i + 1:
            break
        curr = pres + paths[i] * (k - i)
        pres += paths[i]
        ress = max(ress, curr)
 
    if resb > ress:
        print(""Bodya"")
    elif ress > resb:
        print(""Sasha"")
    else:
        print(""Draw"")",4,True,False,False,False,False,True,True,True,False,False,False,False,False,False
1929_C,1929_C_avaniagr_100%,codeforces2024,human,qwen2p5-72b-instruct,"Sasha decided to give his girlfriend the best handbag, but unfortunately for
Sasha, it is very expensive. Therefore, Sasha wants to earn it. After looking
at earning tips on the internet, he decided to go to the casino.

Sasha knows that the casino operates under the following rules. If Sasha
places a bet of y coins (where y is a positive integer), then in case of
winning, he will receive y \cdot k coins (i.e., his number of coins will
increase by y \cdot (k - 1) ). And in case of losing, he will lose the entire
bet amount (i.e., his number of coins will decrease by y ).

Note that the bet amount must always be a positive (> 0 ) integer and cannot
exceed Sasha's current number of coins.

Sasha also knows that there is a promotion at the casino: he cannot lose more
than x times in a row.

Initially, Sasha has a coins. He wonders whether he can place bets such that
he is guaranteed to win any number of coins. In other words, is it true that
for any integer n , Sasha can make bets so that for any outcome that does not
contradict the rules described above, at some moment of time he will have at
least n coins.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 1000 ) — the number of test cases. The description of
the test cases follows.

The single line of each test case contains three integers k, x and a (2 \leq k
\leq 30 , 1 \leq x \leq 100 , 1 \leq a \leq 10^9 ) — the number of times the
bet is increased in case of a win, the maximum number of consecutive losses,
and the initial number of coins Sasha has.

Output

For each test case, output ""YES"" (without quotes) if Sasha can achieve it and
""NO"" (without quotes) otherwise.

You can output ""YES"" and ""NO"" in any case (for example, the strings ""yEs"",
""yes"" and ""Yes"" will be recognized as a positive answer).

Example

Input

    9
    
    2 1 7
    
    2 1 1
    
    2 3 15
    
    3 3 6
    
    4 4 5
    
    5 4 7
    
    4 88 1000000000
    
    25 69 231
    
    13 97 18806

Output

    YES
    NO
    YES
    NO
    NO
    YES
    NO
    NO
    NO
    
Note

In the first test case, Sasha can proceed as follows:

  * If Sasha places a bet for the first time or if he won the previous bet, then he places 1 coin.
  * If Sasha lost the previous bet, then he places 2 coins.

Note that Sasha cannot lose more than once in a row.

It can be proven that with this strategy, Sasha can obtain as many coins as he
wants.

In the second test case, Sasha can only place 1 coin for the first time. But
in case of a loss, he will not be able to place any more bets, so he will not
be able to guarantee having as many coins as he wants.","for s in [*open(0)][1:]:
    k,x,a=map(int,s.split())
    if x<k-1:
        if a>=(x+1):
            print('YES')
        else:
            print('NO')
    elif x==k-1:
       
        if a>=x+2:
            print('YES')
        else:
            print('NO')
    else:
        z = k-2
        for i in range(x-k+3):
            z += (z//(k-1) + 1)
        if a>=z:
            print('YES')
        else:
            print('NO')",4,True,False,False,False,False,False,True,True,False,False,False,False,False,False
1955_F,1955_F_Baby_Bird_100%,codeforces2024,human,qwen2p5-72b-instruct,"Alice and Bob gathered in the evening to play an exciting game on a sequence
of n integers, each integer of the sequence doesn't exceed 4 . The rules of
the game are too complex to describe, so let's just describe the winning
condition — Alice wins if the [bitwise XOR](http://tiny.cc/xor_wiki_eng) of
all the numbers in the sequence is non-zero; otherwise, Bob wins.

The guys invited Eve to act as a judge. Initially, Alice and Bob play with n
numbers. After one game, Eve removes one of the numbers from the sequence,
then Alice and Bob play with n-1 numbers. Eve removes one number again, after
which Alice and Bob play with n - 2 numbers. This continues until the sequence
of numbers is empty.

Eve seems to think that in such a game, Alice almost always wins, so she wants
Bob to win as many times as possible. Determine the maximum number of times
Bob can win against Alice if Eve removes the numbers optimally.

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first and only line of each test case contains four integers p_i (0 \le
p_i \le 200 ) — the number of ones, twos, threes, and fours in the sequence at
the beginning of the game.

Output

For each test case, print the maximum number of times Bob will win in a
separate line, if Eve removes the numbers optimally.

Example

Input

    5
    
    1 1 1 0
    
    1 0 1 2
    
    2 2 2 0
    
    3 3 2 0
    
    0 9 9 9

Output

    1
    1
    3
    3
    12
    
Note

In the first example, Bob wins when Eve has not removed any numbers yet.

In the second example, Bob wins if Eve removes one one and one three.","print('\n'.join([str(sum(3*(x // 2) + (x % 2)*(i < 3) for (i, x) in enumerate(map(int, input().split()))) // 3) for _ in range(int(input()))]))",4,True,False,True,True,True,True,True,True,False,False,False,True,True,True
1965_A,1965_A_ool_100%,codeforces2024,human,qwen2p5-72b-instruct,"Alice and Bob are playing a game on n piles of stones. On each player's turn,
they select a positive integer k that is at most the size of the smallest
nonempty pile and remove k stones from each nonempty pile at once. The first
player who is unable to make a move (because all piles are empty) loses.

Given that Alice goes first, who will win the game if both players play
optimally?

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le
2\cdot 10^5 ) — the number of piles in the game.

The next line of each test case contains n integers a_1, a_2, \ldots a_n (1
\le a_i \le 10^9 ), where a_i is the initial number of stones in the i -th
pile.

It is guaranteed that the sum of n over all test cases does not exceed 2\cdot
10^5 .

Output

For each test case, print a single line with the name of the winner, assuming
both players play optimally. If Alice wins, print ""Alice"", otherwise print
""Bob"" (without quotes).

Example

Input

    7
    
    5
    
    3 3 3 3 3
    
    2
    
    1 7
    
    7
    
    1 3 9 7 4 2 100
    
    3
    
    1 2 3
    
    6
    
    2 1 3 4 2 4
    
    8
    
    5 7 2 9 6 3 3 2
    
    1
    
    1000000000

Output

    Alice
    Bob
    Alice
    Alice
    Bob
    Alice
    Alice
    
Note

In the first test case, Alice can win by choosing k=3 on her first turn, which
will empty all of the piles at once.

In the second test case, Alice must choose k=1 on her first turn since there
is a pile of size 1 , so Bob can win on the next turn by choosing k=6 .","import heapq
import sys
 
input = sys.stdin.readline
 
def solve(arr):
    A = False
 
    set_ = list(set(arr))
    set_.sort()
    if set_[0] != 1:
        return 'Alice'
    not_c = True
    for i in range(1, len(set_)):
        if set_[i] - set_[i-1] > 1:
            not_c = False
            break
        A = not A
    if not_c:
        A = not A
 
    return 'Alice' if A else 'Bob'
 
 
t = int(input())
c = 1
while t > 0:
    n = list(map(int, input().rstrip().split()))
 
    arr = list(map(int, input().rstrip().split()))
    r = solve(arr)
    print(r)
    t -= 1",4,True,False,False,True,False,True,True,True,False,False,True,True,True,True
1957_A,1957_A_RedRiml_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given n sticks of lengths a_1, a_2, \ldots, a_n . Find the maximum
number of regular (equal-sided) polygons you can construct simultaneously,
such that:

  * Each side of a polygon is formed by exactly one stick. 
  * No stick is used in more than 1 polygon. 

Note: Sticks cannot be broken.

Input

The first line contains a single integer t (1 \leq t \leq 100 ) — the number
of test cases.

The first line of each test case contains a single integer n (1 \leq n \leq
100 ) — the number of sticks available.

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\leq a_i \leq 100 ) — the stick lengths.

Output

For each test case, output a single integer on a new line — the maximum number
of regular (equal-sided) polygons you can make simultaneously from the sticks
available.

Example

Input

    4
    
    1
    
    1
    
    2
    
    1 1
    
    6
    
    2 2 3 3 3 3
    
    9
    
    4 2 2 2 2 4 2 4 4

Output

    0
    0
    1
    2
    
Note

In the first test case, we only have one stick, hence we can't form any
polygon.

In the second test case, the two sticks aren't enough to form a polygon
either.

In the third test case, we can use the 4 sticks of length 3 to create a
square.

In the fourth test case, we can make a pentagon with side length 2 , and a
square of side length 4 .","w = int(input())
for _ in range(w):
    ln = int(input())
    palka = list(map(int, input().split()))
    pl = []
    d = {}
    for i in palka:
        if d.get(i) == None:
            d[i] = 1
        else:
            d[i] += 1
        if i not in pl:
            pl.append(i)
    shapes = 0
    for j in pl:
        if d[j] >= 3:
            shapes += d[j] // 3
    print(shapes)",4,True,False,False,False,False,False,False,False,False,False,False,False,False,False
1956_D,1956_D_2200033007_KLU_100%,codeforces2024,human,qwen2p5-72b-instruct,"Nene gave you an array of integers a_1, a_2, \ldots, a_n of length n .

You can perform the following operation no more than 5\cdot 10^5 times
(possibly zero):

  * Choose two integers l and r such that 1 \le l \le r \le n , compute x as \operatorname{MEX}(\\{a_l, a_{l+1}, \ldots, a_r\\}) , and simultaneously set a_l:=x, a_{l+1}:=x, \ldots, a_r:=x . 

Here, \operatorname{MEX} of a set of integers \\{c_1, c_2, \ldots, c_k\\} is
defined as the smallest non-negative integer m which does not occur in the set
c .

Your goal is to maximize the sum of the elements of the array a . Find the
maximum sum and construct a sequence of operations that achieves this sum.
Note that you don't need to minimize the number of operations in this
sequence, you only should use no more than 5\cdot 10^5 operations in your
solution.

Input

The first line contains an integer n (1 \le n \le 18 ) — the length of the
array a .

The second line contains n integers a_1,a_2,\ldots,a_n (0\leq a_i \leq 10^7 )
— the array a .

Output

In the first line, output two integers s and m (0\le m\le 5\cdot 10^5 ) — the
maximum sum of elements of the array a and the number of operations in your
solution.

In the i -th of the following m lines, output two integers l and r (1 \le l
\le r \le n ), representing the parameters of the i -th operation.

It can be shown that the maximum sum of elements of the array a can always be
obtained in no more than 5 \cdot 10^5 operations.

Examples

Input

    2
    
    0 1

Output

    4 1
    1 2
    
Input

    3
    
    1 3 9

Output

    13 0
    
Input

    4
    
    1 100 2 1

Output

    105 2
    3 3
    3 4
    
Input

    1
    
    0

Output

    1 1
    1 1
    
Note

In the first example, after the operation with l=1 and r=2 the array a becomes
equal to [2,2] . It can be shown that it is impossible to achieve a larger sum
of the elements of a , so the answer is 4 .

In the second example, the initial sum of elements is 13 which can be shown to
be the largest.

In the third example, the array a changes as follows:

  * after the first operation (l=3 , r=3 ), the array a becomes equal to [1,100,0,1] ; 
  * after the second operation (l=3 , r=4 ), the array a becomes equal to [1,100,2,2] . 

It can be shown that it is impossible to achieve a larger sum of the elements
of a , so the answer is 105 .","#from functools import cache
from typing import List, Tuple
 
n = int(input())
arr = list(map(int, input().split()))
 
 
res_dict = {}
def get_max_possible_value(start_index: int, end_index: int) -> int:
    key = (start_index, end_index)
    if key in res_dict:
        return res_dict[key]
    if start_index == end_index:
        res_dict[key] = max(1, arr[start_index])
        return max(1, arr[start_index])
    res = (end_index - start_index + 1) ** 2
    for i in range(start_index + 1, end_index):
        new_res = get_max_possible_value(start_index, i - 1) + get_max_possible_value(i + 1, end_index) + arr[i]
        res = max(res, new_res)
    res = max(res, arr[start_index] + get_max_possible_value(start_index + 1, end_index))
    res = max(res, arr[end_index] + get_max_possible_value(start_index, end_index - 1))
    res_dict[key] = res
    return res
 
 
def get_changes(start_index: int, end_index: int) -> List[Tuple[int, int]]:
    max_value = get_max_possible_value(start_index, end_index)
    length = end_index - start_index + 1
    if length == 1:
        if arr[start_index] > 0:
            return []
        return [(start_index, start_index)]
    if max_value == length ** 2:
        res = []
 
        def make_stairs(i:int) -> None:
            is_already_stairs = True
            for j in range(i + 1):
                if arr[start_index + j] != j:
                    is_already_stairs = False
            if is_already_stairs:
                return
            if i == 0:
                res.append((start_index, start_index))
                arr[start_index] = 1
                return
            if arr[start_index + i] == i:
                make_stairs(i - 1)
            else:
                make_stairs(i - 1)
                res.append((start_index, start_index + i))
                for j in range(start_index, start_index + i + 1):
                    arr[j] = i
                make_stairs(i - 1)
        make_stairs(length - 1)
        res.append((start_index, end_index))
        return res
 
    else:
        for i in range(start_index + 1, end_index):
            temp_res = get_max_possible_value(start_index, i - 1) + get_max_possible_value(i + 1, end_index) + arr[i]
            if temp_res == max_value:
                return get_changes(start_index, i - 1) + get_changes(i + 1, end_index)
        if arr[start_index] + get_max_possible_value(start_index + 1, end_index) == max_value:
            return get_changes(start_index + 1, end_index)
        elif arr[end_index] + get_max_possible_value(start_index, end_index - 1) == max_value:
            return get_changes(start_index, end_index - 1)
 
 
 
res = get_max_possible_value(0, n - 1)
changes = get_changes(0, n - 1)
print(res, len(changes))
for a, b in changes:
    print(a + 1, b + 1)",4,True,False,False,False,False,True,False,False,False,False,False,False,False,False
1950_A,1950_A_pigiswinia_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given three digits a , b , and c . Determine whether they form a
stair, a peak, or neither.

  * A stair satisfies the condition a<b<c . 
  * A peak satisfies the condition a<b>c . 

Input

The first line contains a single integer t (1 \leq t \leq 1000 ) — the number
of test cases.

The only line of each test case contains three digits a , b , c (0 \leq a , b
, c \leq 9 ).

Output

For each test case, output ""STAIR"" if the digits form a stair, ""PEAK"" if the
digits form a peak, and ""NONE"" otherwise (output the strings without quotes).

Example

Input

    7
    
    1 2 3
    
    3 2 1
    
    1 5 3
    
    3 4 1
    
    0 0 0
    
    4 1 7
    
    4 5 7

Output

    STAIR
    NONE
    PEAK
    PEAK
    NONE
    NONE
    STAIR","t = int(input())
for i in range(t):
    a,b,c = map(int,input().split())
    if a<b<c:
        print(""STAIRS"")
    elif a<b>c:
        print(""PEAK"")
    else:
        print(""NONE"")",4,False,False,False,False,False,False,False,False,True,False,False,False,False,False
1936_A,1936_A_shade34_5.88%,codeforces2024,human,qwen2p5-72b-instruct,"This is an interactive problem.

There is a secret sequence p_0, p_1, \ldots, p_{n-1} , which is a permutation
of \\{0,1,\ldots,n-1\\} .

You need to find any two indices i and j such that p_i \oplus p_j is
maximized, where \oplus denotes the [bitwise XOR
operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).

To do this, you can ask queries. Each query has the following form: you pick arbitrary indices a , b , c , and d (0 \le a,b,c,d < n ). Next, the jury calculates x = (p_a \mid p_b) and y = (p_c \mid p_d) , where | denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR). Finally, you receive the result of comparison between x and y . In other words, you are told if x < y , x > y , or x = y .

Please find any two indices i and j (0 \le i,j < n ) such that p_i \oplus p_j
is maximum among all such pairs, using at most 3n queries. If there are
multiple pairs of indices satisfying the condition, you may output any one of
them.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 10^3 ). The description of the test cases follows.

Interaction

The first line of each test case contains one integer n (2 \le n \le 10^4 ).
At this moment, the permutation p_0, p_1, \ldots, p_{n-1} is chosen. The
interactor in this task is not adaptive. In other words, the sequence p is
fixed in every test case and does not change during the interaction.

To ask a query, you need to pick four indices a , b , c , and d (0 \le a,b,c,d
< n ) and print the line of the following form:

  * ""? a b c d"" 

After that, you receive:

  * ""<"" if (p_a \mid p_b) < (p_c \mid p_d) ; 
  * ""="" if (p_a \mid p_b) = (p_c \mid p_d) ; 
  * "">"" if (p_a \mid p_b) > (p_c \mid p_d) . 

You can make at most 3n queries of this form.

Next, if your program has found a pair of indices i and j (0 \le i, j < n )
such that p_i \oplus p_j is maximized, print the line of the following form:

  * ""! i j"" 

Note that this line is not considered a query and is not taken into account
when counting the number of queries asked.

After this, proceed to the next test case.

If you make more than 3n queries during an interaction, your program must
terminate immediately, and you will receive the Wrong Answer verdict.
Otherwise, you can get an arbitrary verdict because your solution will
continue to read from a closed stream.

After printing a query or the answer for a test case, do not forget to output
the end of line and flush the output. Otherwise, you will get the verdict
Idleness Limit Exceeded. To do this, use:

  * fflush(stdout) or cout.flush() in C++; 
  * System.out.flush() in Java; 
  * flush(output) in Pascal; 
  * stdout.flush() in Python; 
  * see the documentation for other languages. 

It is guaranteed that the sum of n over all test cases does not exceed 10^4 .

Hacks

To hack, follow the test format below.

The first line contains the number of test cases t (1 \le t \le 10^3 ). The
description of the test cases follows.

The first line of each test case contains one integer n (2 \le n \le 10^4 ).

The second line of each test case contains n integers p_0,p_1,\ldots,p_{n-1} ,
which represent a permutation of integers from 0 to n - 1 .

The sum of n over all test cases should not exceed 10^4 .

Example

Input

    2
    4
    
    <
    
    =
    
    >
    
    2
    
Output

    ? 0 2 3 1
    
    ? 1 1 2 3
    
    ? 1 2 0 3
    
    ! 3 2
    
    ! 0 1
    
Note

In the first test case, the hidden permutation is p=[0,3,1,2] .

For the query ""? 0 2 3 1"", the jury return ""<"" because (p_0 \mid p_2) = (0
\mid 1) =1 < (p_3 \mid p_1) = (2 \mid 3) = 3 .

For the query ""? 1 1 2 3"", the jury return ""="" because (p_1 \mid p_1) = (3\mid
3)= 3 = (p_2 \mid p_3) = (1 \mid 2)=3 .

For the query ""? 1 2 0 3"", the jury return "">"" because (p_1 \mid p_2) = (3
\mid 1) = 3 > (p_0 \mid p_3) = (0\mid 2)=2 .

The answer i = 3 and j = 2 is valid: (p_3 \oplus p_2) = (2 \oplus 1) = 3 is
indeed equal to the maximum possible value of p_i \oplus p_j . Another valid
answer would be i=0 and j=1 . As the number of queries does not exceed 3n=12 ,
the answer is considered correct.

In the second test case, n = 2 , so p is either [0, 1] or [1, 0] . In any
case, p_0 \oplus p_1 = 1 is maximum possible.","import sys
 
for _ in range(int(input())):
    n = int(input())
    #a, b = map(int, input().split())
    #a = list(map(int, input().split()))
    #s = str(input())
    mak = 0
    for i in range(1, n):
        print(""?"", mak, mak, i, i)
        sys.stdout.flush()
        if str(input()) == ""<"":
            mak = i
    mak2 = mak
    pans = []
    for i in range(n):
        print(""?"", mak, mak2, i, mak2)
        sys.stdout.flush()
        s = str(input())
        if s == ""<"":
            mak = i
            pans = [i]
        elif s == ""="":
            pans.append(i)
    mak = 0
    for i in range(1, len(pans)):
        print(""?"", pans[mak], pans[mak], pans[i], pans[i])
        sys.stdout.flush()
        if str(input()) == "">"":
            mak = i
    print(""!"", mak2, mak)
    sys.stdout.flush()",4,False,False,False,True,True,True,True,True,False,False,False,False,False,False
1970_C2,1970_C2_Ehijoe_21.43%,codeforces2024,human,qwen2p5-72b-instruct,"This is the medium version of the problem. The difference in this version is
that t=1 and we work on trees.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. The game consists of t rounds, each of which starts with a stone on
exactly one node, which is considered as activated. A move consists of picking
an inactive neighbor of the node with a stone on it and moving the stone there
(thus activating this neighbor). Ron makes the first move, after which he
alternates with Hermione until no valid move is available. The player that
cannot make a move loses the round. If both players play optimally, who wins
each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Example

Input

    5 1
    
    1 2
    
    1 3
    
    3 4
    
    3 5
    
    1

Output

    Ron","from functools import reduce
import math
from collections import deque, defaultdict
 
 
def dfs(nodes, start, parent=None):
	if len(nodes[start]) == 1 and nodes[start][0] == parent:
		return [0]
	distances = []
	for node in nodes[start]:
		if node != parent:
			distances.extend([1 + dist for dist in dfs(nodes, node, start)])
	return distances
 
 
def testcase():
	n, t = map(int, input().split())
	edges = []
	empty = True
	nodes = defaultdict(list)
	for i in range(n - 1):
		u, v = map(int, input().split())
		nodes[u].append(v)
		nodes[v].append(u)
	
	leaves = deque()
	for key in nodes:
		if len(nodes[key]) == 1:
			leaves.append(key)
	
	start = int(input())
	moves = dfs(nodes, start)
	
	if any([move % 2 == 1 for move in moves]):
		print(""Ron"")
	else:
		print(""Hermione"")
 
 
t = 1 # int(input())
 
for i in range(t):
	testcase()",4,False,False,False,True,True,True,True,True,False,False,False,True,True,True
1968_A,1968_A_klu_30309_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an integer x . Your task is to find any integer y (1\le y<x)
such that \gcd(x,y)+y is maximum possible.

Note that if there is more than one y which satisfies the statement, you are
allowed to find any.

\gcd(a,b) is the Greatest Common Divisor of a and b . For example, \gcd(6,4)=2
.

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

Each of the following t lines contains a single integer x (2 \le x \le 1000 ).

Output

For each test case, output any y (1 \le y < x ), which satisfies the
statement.

Example

Input

    7
    
    10
    
    7
    
    21
    
    100
    
    2
    
    1000
    
    6

Output

    5
    6
    18
    98
    1
    750
    3","import math
 
def maximize_gcd_plus_y(t, test_cases):
    results = []
    for x in test_cases:
        max_sum = 0
        best_y = 1
        for y in range(x - 1, 0, -1):
            gcd_val = math.gcd(x, y)
            current_sum = gcd_val + y
            if current_sum > max_sum:
                max_sum = current_sum
                best_y = y
                break
        results.append(best_y)
    return results
 
# Read input
t = int(input())
test_cases = [int(input()) for _ in range(t)]
 
# Get results
results = maximize_gcd_plus_y(t, test_cases)
 
# Output results
for result in results:
    print(result)",4,True,False,False,False,False,False,False,False,False,False,False,False,False,False
1921_D,1921_D_Sibtain_1_0.85%,codeforces2024,human,qwen2p5-72b-instruct,"Petya has an array a_i of n integers. His brother Vasya became envious and
decided to make his own array of n integers.

To do this, he found m integers b_i (m\ge n ), and now he wants to choose some
n integers of them and arrange them in a certain order to obtain an array c_i
of length n .

To avoid being similar to his brother, Vasya wants to make his array as
different as possible from Petya's array. Specifically, he wants the total
difference D = \sum_{i=1}^{n} |a_i - c_i| to be as large as possible.

Help Vasya find the maximum difference D he can obtain.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 100 ) — the number of test cases. This is followed by a
description of the test cases.

The first line of each test case contains two integers n and m (1\le n\le m\le
2 \cdot 10^5 ).

The second line of each test case contains n integers a_i (1\le a_i\le 10^9 ).
The third line of each test case contains m integers b_i (1\le b_i\le 10^9 ).

It is guaranteed that in a test, the sum of m over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer — the maximum total difference D
that can be obtained.

Example

Input

    9
    
    4 6
    
    6 1 2 4
    
    3 5 1 7 2 3
    
    3 4
    
    1 1 1
    
    1 1 1 1
    
    5 5
    
    1 2 3 4 5
    
    1 2 3 4 5
    
    2 6
    
    5 8
    
    8 7 5 8 2 10
    
    2 2
    
    4 1
    
    9 6
    
    4 6
    
    8 10 6 4
    
    3 10 6 1 8 9
    
    3 5
    
    6 5 2
    
    1 7 9 7 2
    
    5 5
    
    9 10 6 3 7
    
    5 9 2 3 9
    
    1 6
    
    3
    
    2 7 10 1 1 5

Output

    16
    0
    12
    11
    10
    23
    15
    25
    7
    
Note

In the first example, Vasya can, for example, create the array (1, 5, 7, 2) .
Then the total difference will be D = |6-1|+|1-5|+|2-7|+|4-2| = 5+4+5+2 = 16 .

In the second example, all the integers available to Vasya are equal to 1, so
he can only create the array (1, 1, 1) , for which the difference D = 0 .

In the third example, Vasya can, for example, create the array (5, 4, 3, 2, 1)
. Then the total difference will be D = |1-5|+|2-4|+|3-3|+|4-2|+|5-1| =
4+2+0+2+4 = 12 .","for _ in range(int(input())):
    n, m = map(int, input().split())
    a = list(map(int, input().split()))
    c = list(map(int, input().split()))
 
    if len(set(a)) == 1 and len(set(c)) == 1 and a[0] == c[0]:
        print(0)
        continue
    a.sort()
    c.sort(reverse=True)
    if len(a) == 1:
        print(max(abs(a[0]-max(c)), abs(a[0]-min(c))))
        continue
    i, ans = 0, 0
    while i < len(a)//2:
        ans += abs(a[i]-c[i])
        i += 1
    j = (len(c)-len(a))+i
    while i < len(a):
        ans += max(abs(a[i]-c[i]), abs(a[i]-c[j]))
        i += 1
        j += 1
    print(ans)",4,False,False,False,True,False,True,False,True,True,True,True,False,False,False
1948_A,1948_A_MOTEST_50.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an integer n .

Your task is to build a string of uppercase Latin letters. There must be
exactly n special characters in this string. Let's call a character special if
it is equal to exactly one of its neighbors.

For example, there are 6 special characters in the AAABAACC string (at
positions: 1 , 3 , 5 , 6 , 7 and 8 ).

Print any suitable string or report that there is no such string.

Input

The first line contains a single integer t (1 \le t \le 50 ) — the number of
test cases.

The only line of each test case contains a single integer n (1 \le n \le 50 ).

Output

For each test case, print the answer as follows:

  * if there is no suitable string, print one line containing the string NO; 
  * otherwise, print two lines. The first line should contain the string YES; on the second line print a string of length at most 200  — the answer itself (it can be shown that if some answers exist, then there is an answer of length at most 200 ). If there are several solutions, print any of them. 

Example

Input

    3
    
    6
    
    1
    
    2

Output

    YES
    AAABAACC
    NO
    YES
    MM","import os
import string
os.system('cls')
s = string.ascii_uppercase
t = int(input())
for i in range(t):
    n = int(input())
    if n == 1:
        print('NO')
    else:
        ans = """"
        x = 0
        if n % 2 == 0:
            for j in range(n//2):
                ans += (s[x]*2)
                x+=1
        else:
            ans , x = ""AAA"" , 1
            for j in range((n//2) - 1):
                ans += (s[x]*2)
                x+=1
        print(""YES"")
        print(ans)",4,False,False,False,True,True,True,True,True,False,True,True,True,True,True
1977_B,1977_B_coder_ISM_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given a positive integer x . Find any array of integers a_0, a_1,
\ldots, a_{n-1} for which the following holds:

  * 1 \le n \le 32 , 
  * a_i is 1 , 0 , or -1 for all 0 \le i \le n - 1 , 
  * x = \displaystyle{\sum_{i=0}^{n - 1}{a_i \cdot 2^i}} , 
  * There does not exist an index 0 \le i \le n - 2 such that both a_{i} \neq 0 and a_{i + 1} \neq 0 . 

It can be proven that under the constraints of the problem, a valid array
always exists.

Input

Each test contains multiple test cases. The first line of input contains a
single integer t (1 \le t \le 10^4 ) — the number of test cases. The
description of the test cases follows.

The only line of each test case contains a single positive integer x (1 \le x
< 2^{30} ).

Output

For each test case, output two lines.

On the first line, output an integer n (1 \le n \le 32 ) — the length of the
array a_0, a_1, \ldots, a_{n-1} .

On the second line, output the array a_0, a_1, \ldots, a_{n-1} .

If there are multiple valid arrays, you can output any of them.

Example

Input

    7
    
    1
    
    14
    
    24
    
    15
    
    27
    
    11
    
    19

Output

    1
    1
    5
    0 -1 0 0 1
    6
    0 0 0 -1 0 1
    5
    -1 0 0 0 1
    6
    -1 0 -1 0 0 1
    5
    -1 0 -1 0 1
    5
    -1 0 1 0 1

Note

In the first test case, one valid array is [1] , since (1) \cdot 2^0 = 1 .

In the second test case, one possible valid array is [0,-1,0,0,1] , since (0)
\cdot 2^0 + (-1) \cdot 2^1 + (0) \cdot 2^2 + (0) \cdot 2^3 + (1) \cdot 2^4 =
-2 + 16 = 14 .","t=int(input())
for nalla in range(t):
    x=int(input())
    s=[]
    length=30
    for i in range(30):
        if(x & pow(2,i)):
            s.append('1')
        else:
            s.append('0')
    print(*s)
    flag=0
    for i in range(0,29):
        if(flag and s[i]=='0'):
            s[i]='1'
            flag=0
        if(flag==0 and s[i]==s[i+1] and s[i]=='1'):
            s[i]='-1'
            flag=1
        elif(flag==1):
            s[i]='0'
        else:
            pass
    if(flag and s[29]=='0'):
        s[29]='1'
    elif(flag):
        s[29]='0'
        s.append('1')
        length+=1
    for i in range(1, length):
        if (s[i] == '-1') & (s[i-1] == '1'):
            s[i] = '0'
            s[i-1]= '-1'
    print(length)
    print(*s)
    # print(*ans)",4,False,False,False,False,False,False,True,False,False,False,False,False,False,False
