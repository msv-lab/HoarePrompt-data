task_id,unique_id,model_created,dataset,model_run,code,fail_reason,type_of_run
1937_B,1937_B_VvvVvVnan_100%,human,codeforces2024,qwen2p5-coder-32b-instruct,"#Rudolf and 121
'''
t=int(input())
fin=['NO']*t
for i in range(t):
    n=int(input())
    a=[int(i) for i in input().split()]
    l=len(a)-1
    r=0
    flag=True
    while r<=l and flag:
        if a[r]!=0:
            a[r+1]=a[r+1]-2*a[r]
            a[r+2]=a[r+2]-a[r]
            a[r]=0
            if a[r+1]<0 or a[r+2]<0:
                flag=False
        if a[l]!=0:
            a[l-1]=a[l-1]-2*a[l]
            a[l-2]=a[l-2]-a[l]
            a[l]=0
            if a[l-1]<0 or a[l-2]<0:
                flag = False
        r=r+1
        l=l-1
    if flag==True:
        fin[i]='YES'
for i in range(t):
    print(fin[i])
'''
#Binary Path
def solve():
    global ans,count
    ans=[]
    ans=s1+list(s2[n-1])
    #print(ans)
    point=n-1
    for i in range(n):
        if s1[i]=='1' and s2[i-1]=='0' and i-1>=0:
            ans=s1[0:i]
            #print(ans)
            ans=ans+s2[i-1:n]
            #print(ans)
            point=i-1
            break
    count=1
    for i in range(point,0,-1):
        #print(i)
        if s1[i]!=s2[i-1]:
            break
        count=count+1
 
 
t=int(input())
cnt=[]
fin=[]
for i in range(t):
    n=int(input())
    s1=list(input())
    s2=list(input())
    solve()
    cnt.append(count)
    fin.append(ans)
for i in range(t):
    print(''.join(fin[i]))
    print(cnt[i])
'''
t=int(input())
for i in range(t):
    n=int(input())
    a=[[0]*n for j in range(2)]
    a[0]=[int(j) for j in list(input())]
    a[1]=[int(j) for j in list(input())]
    dp=[[0]*n for j in range(2)]
    for j in range(n):
        if j==0:
            dp[0][j]=a[0][j]
            dp[1][j]=dp[0][j]+a[1][j]
        else:
            dp[0][j]=dp[0][j-1]+a[0][j]
            dp[1][j]=min(dp[0][j],dp[1][j-1])+a[1][j]
    print(dp[1][n-1])
'''","Error: unsupported statement type: <ast.Global object at 0x70868777e860> global ans, count
",hoareprompt
1968_A,1968_A_kl80036_100%,human,codeforces2024,qwen2p5-coder-32b-instruct,"for i in range(int(input())):
    x=int(input())
    y=x-1
    print(y)",Error: failed to parse entailment checking response,hoareprompt
1955_A,1955_A_abood718_0.00%,human,codeforces2024,qwen2p5-coder-32b-instruct,"for i in range(int(input())):
    A, B, C = map(int,input().split())
    if (B *2) < C:
        print(A*B)
    else:
        if A % 2 == 0:
            print(int((A * C)/2))
        else:
            X = A // 2
            print(X)
            print((X * C) + B)",Error: failed to parse entailment checking response,hoareprompt
1979_C,1979_C_akashtiwari0704_100%,human,codeforces2024,qwen2p5-coder-32b-instruct,"from math import gcd
t = int(input())
for T in range(t):
	#x, y, k = map(int, input().split())
	def lcm(l):
	    g=1
	    for i in range(len(l)):
	        g=g*l[i]//gcd(g,l[i])
	    return g
	bets=int(input())
	a = [int(x) for x in input().split()]
	prod=lcm(a)
	
	sumo=0
	for i in range(bets):
	    a[i]=(prod//a[i])
	    sumo+=int(a[i])
	
	if sumo>=prod:
	    print(-1)
	else:
	    ans=""""
	    for i in range(bets):
	        ans+=str(a[i])+"" ""
	    print(ans)",Error: pop from empty list,hoareprompt
1945_F,1945_F_Sandeep_P_4.55%,human,codeforces2024,qwen2p5-coder-32b-instruct,"import sys
 
class SortedList:
    def __init__(self, iterable=[], _load=200):
        """"""Initialize sorted list instance.""""""
        values = sorted(iterable)
        self._len = _len = len(values)
        self._load = _load
        self._lists = _lists = [values[i:i + _load] for i in range(0, _len, _load)]
        self._list_lens = [len(_list) for _list in _lists]
        self._mins = [_list[0] for _list in _lists]
        self._fen_tree = []
        self._rebuild = True
 
    def _fen_build(self):
        """"""Build a fenwick tree instance.""""""
        self._fen_tree[:] = self._list_lens
        _fen_tree = self._fen_tree
        for i in range(len(_fen_tree)):
            if i | i + 1 < len(_fen_tree):
                _fen_tree[i | i + 1] += _fen_tree[i]
        self._rebuild = False
 
    def _fen_update(self, index, value):
        """"""Update `fen_tree[index] += value`.""""""
        if not self._rebuild:
            _fen_tree = self._fen_tree
            while index < len(_fen_tree):
                _fen_tree[index] += value
                index |= index + 1
 
    def _fen_query(self, end):
        """"""Return `sum(_fen_tree[:end])`.""""""
        if self._rebuild:
            self._fen_build()
 
        _fen_tree = self._fen_tree
        x = 0
        while end:
            x += _fen_tree[end - 1]
            end &= end - 1
        return x
 
    def _fen_findkth(self, k):
        """"""Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).""""""
        _list_lens = self._list_lens
        if k < _list_lens[0]:
            return 0, k
        if k >= self._len - _list_lens[-1]:
            return len(_list_lens) - 1, k + _list_lens[-1] - self._len
        if self._rebuild:
            self._fen_build()
 
        _fen_tree = self._fen_tree
        idx = -1
        for d in reversed(range(len(_fen_tree).bit_length())):
            right_idx = idx + (1 << d)
            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:
                idx = right_idx
                k -= _fen_tree[idx]
        return idx + 1, k
 
    def _delete(self, pos, idx):
        """"""Delete value at the given `(pos, idx)`.""""""
        _lists = self._lists
        _mins = self._mins
        _list_lens = self._list_lens
 
        self._len -= 1
        self._fen_update(pos, -1)
        del _lists[pos][idx]
        _list_lens[pos] -= 1
 
        if _list_lens[pos]:
            _mins[pos] = _lists[pos][0]
        else:
            del _lists[pos]
            del _list_lens[pos]
            del _mins[pos]
            self._rebuild = True
 
    def _loc_left(self, value):
        """"""Return an index pair that corresponds to the first position of `value` in the sorted list.""""""
        if not self._len:
            return 0, 0
 
        _lists = self._lists
        _mins = self._mins
 
        lo, pos = -1, len(_lists) - 1
        while lo + 1 < pos:
            mi = (lo + pos) >> 1
            if value <= _mins[mi]:
                pos = mi
            else:
                lo = mi
 
        if pos and value <= _lists[pos - 1][-1]:
            pos -= 1
 
        _list = _lists[pos]
        lo, idx = -1, len(_list)
        while lo + 1 < idx:
            mi = (lo + idx) >> 1
            if value <= _list[mi]:
                idx = mi
            else:
                lo = mi
 
        return pos, idx
 
    def _loc_right(self, value):
        """"""Return an index pair that corresponds to the last position of `value` in the sorted list.""""""
        if not self._len:
            return 0, 0
 
        _lists = self._lists
        _mins = self._mins
 
        pos, hi = 0, len(_lists)
        while pos + 1 < hi:
            mi = (pos + hi) >> 1
            if value < _mins[mi]:
                hi = mi
            else:
                pos = mi
 
        _list = _lists[pos]
        lo, idx = -1, len(_list)
        while lo + 1 < idx:
            mi = (lo + idx) >> 1
            if value < _list[mi]:
                idx = mi
            else:
                lo = mi
 
        return pos, idx
 
    def add(self, value):
        """"""Add `value` to sorted list.""""""
        _load = self._load
        _lists = self._lists
        _mins = self._mins
        _list_lens = self._list_lens
 
        self._len += 1
        if _lists:
            pos, idx = self._loc_right(value)
            self._fen_update(pos, 1)
            _list = _lists[pos]
            _list.insert(idx, value)
            _list_lens[pos] += 1
            _mins[pos] = _list[0]
            if _load + _load < len(_list):
                _lists.insert(pos + 1, _list[_load:])
                _list_lens.insert(pos + 1, len(_list) - _load)
                _mins.insert(pos + 1, _list[_load])
                _list_lens[pos] = _load
                del _list[_load:]
                self._rebuild = True
        else:
            _lists.append([value])
            _mins.append(value)
            _list_lens.append(1)
            self._rebuild = True
 
    def discard(self, value):
        """"""Remove `value` from sorted list if it is a member.""""""
        _lists = self._lists
        if _lists:
            pos, idx = self._loc_right(value)
            if idx and _lists[pos][idx - 1] == value:
                self._delete(pos, idx - 1)
 
    def remove(self, value):
        """"""Remove `value` from sorted list; `value` must be a member.""""""
        _len = self._len
        self.discard(value)
        if _len == self._len:
            raise ValueError('{0!r} not in list'.format(value))
 
    def pop(self, index=-1):
        """"""Remove and return value at `index` in sorted list.""""""
        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)
        value = self._lists[pos][idx]
        self._delete(pos, idx)
        return value
 
    def bisect_left(self, value):
        """"""Return the first index to insert `value` in the sorted list.""""""
        pos, idx = self._loc_left(value)
        return self._fen_query(pos) + idx
 
    def bisect_right(self, value):
        """"""Return the last index to insert `value` in the sorted list.""""""
        pos, idx = self._loc_right(value)
        return self._fen_query(pos) + idx
 
    def count(self, value):
        """"""Return number of occurrences of `value` in the sorted list.""""""
        return self.bisect_right(value) - self.bisect_left(value)
 
    def __len__(self):
        """"""Return the size of the sorted list.""""""
        return self._len
 
    def __getitem__(self, index):
        """"""Lookup value at `index` in sorted list.""""""
        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)
        return self._lists[pos][idx]
 
    def __delitem__(self, index):
        """"""Remove value at `index` from sorted list.""""""
        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)
        self._delete(pos, idx)
 
    def __contains__(self, value):
        """"""Return true if `value` is an element of the sorted list.""""""
        _lists = self._lists
        if _lists:
            pos, idx = self._loc_left(value)
            return idx < len(_lists[pos]) and _lists[pos][idx] == value
        return False
 
    def __iter__(self):
        """"""Return an iterator over the sorted list.""""""
        return (value for _list in self._lists for value in _list)
 
    def __reversed__(self):
        """"""Return a reverse iterator over the sorted list.""""""
        return (value for _list in reversed(self._lists) for value in reversed(_list))
 
    def __repr__(self):
        """"""Return string representation of sorted list.""""""
        return 'SortedList({0})'.format(list(self))
 
input = sys.stdin.readline
 
def inp():
    return int(input())
 
def inlt(input=input):
    return list(map(int, input().split()))
 
def inpstr():
    return input().strip()
 
t = inp()
 
def solve(n, v, p):
    maxi = 0
    count = 0
 
    mapper = [None]+v
 
    cur = float(""inf"")
    lst = SortedList()
    for i in range(n - 1, -1, -1):
        items_picked = i + 1
 
        rem = n - i
 
        cur = min(cur, mapper[p[i]])
        
 
        lst.add(mapper[p[i]])
 
        if items_picked <= rem:
            cand = items_picked * lst[-items_picked]
 
            if cand > maxi:
                maxi = cand
                count = items_picked
            
            elif cand == maxi:
                count = items_picked, count
    print(maxi, count)
 
 
    
 
for _ in range(t):
    n = inp()
 
    v = inlt()
    p = inlt()
    solve(n, v, p)",Error: failed to parse entailment checking response,hoareprompt
1945_E,1945_E_sterlin_0.00%,human,codeforces2024,qwen2p5-coder-32b-instruct,"# sterlin
import sys
input = lambda: sys.stdin.readline().rstrip()
 
def ii():
    return int(input())
 
def mi():
    return map(int, input().split())
 
def li():
    return list(map(int, input().split()))
 
def si():
    return input()
 
def lsi():
    return input().split()
 
 
 
t = ii()
for _ in range(t):
    n, x = mi()
    p = li()
 
    num_indx = {num: indx + 1 for indx, num in enumerate(p)}
    seen = [0]*n
    left = 0
    right = n
    
 
    while left + 1 < right:
        mid = left + (right - left)//2
 
        seen[p[mid] - 1] = 1
        if p[mid] <= x:
            left = mid
        
        else:
            right = mid
    
 
    if p[left] == x:
        print(0)
    
    elif not seen[x - 1]:
        print(1)
        print(left + 1, num_indx[x])
    
    else:
 
        temp = sorted([indx + 1 for indx, vis in enumerate(seen) if not vis])
        print(2)
        print(num_indx[temp[0]], num_indx[x])
        print(num_indx[temp[0]], left + 1)",Error: failed to parse entailment checking response,hoareprompt
