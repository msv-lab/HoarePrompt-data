#State of the program right berfore the function call: t is an integer such that 1 ≤ t ≤ 2⋅10^4, n is an integer such that 1 ≤ n ≤ 2⋅10^5, x is an integer such that 1 ≤ x ≤ n, and p is a list of n integers representing a permutation of size n.
def func_1():
    return map(int, input().split())
    #The program returns a map object that contains integers split from the input string.
#Overall this is what the function does:The function reads a line of space-separated integers from the standard input, converts each integer to a string, and returns a map object containing these integers.

#State of the program right berfore the function call: t is an integer such that 1 ≤ t ≤ 2⋅10^4, each test case consists of n and x where 1 ≤ x ≤ n ≤ 2⋅10^5, and p is a list of integers representing a permutation of length n.
def func_2():
    return list(func_1())
    #The program returns a list generated by func_1(), which is not defined in the given information.
#Overall this is what the function does:The function does not accept any parameters and returns a list generated by `func_1()`. The nature of the operations performed by `func_1()` are not specified in the given information.

#State of the program right berfore the function call: n is a positive integer representing the length of the permutation, k is an integer such that 1 ≤ k ≤ n, and arr is a list of n distinct integers from 1 to n representing the permutation.
def func_3():
    n, k = func_1()
    arr = func_2()
    pos = -1
    for i in range(n):
        if arr[i] == k:
            pos = i
        
    #State: Output State: After the loop executes all its iterations, `n` must be greater than 0, `arr` is a list of integers, `i` is equal to `n`, `k` is an integer, and `pos` is set to the index `i` where `arr[i]` equals `k` if such an index exists; otherwise, `pos` remains unchanged.
    #
    #This means that after the loop has completed all its iterations (i.e., `i` ranges from 0 to `n-1`), `pos` will hold the index of the first occurrence of `k` in `arr` if `k` is found in `arr`, or it will remain `-1` if `k` is not found in `arr`.
    low, high = 0, n - 1
    st = set()
    while low + 1 < high:
        mid = (low + high) // 2
        
        st.add(mid)
        
        if arr[mid] > k:
            high = mid
        else:
            low = mid
        
    #State: Output State: The loop continues to execute until `low + 1` is no longer less than `high`. At this point, the final values of `low`, `high`, and `mid` will depend on the distribution of `k` within the sorted list `arr`. The set `st` will contain all the unique values of `mid` that were computed during each iteration of the loop. 
    #
    #The exact values of `low`, `high`, and `mid` cannot be determined without knowing the specific values of `arr` and `k`, but they will be such that `low + 1` is not less than `high`. The set `st` will include all the midpoints calculated during the iterations, which are the points where the binary search process narrowed down the range.
    if (arr[low] == k) :
        print(0)
        #This is printed: 0
    else :
        print(1)
        #This is printed: 1
        print(low + 1, pos + 1)
        #This is printed: low + 1, pos + 1 (where low + 1 is the value of high and pos is the position related to low or high)
    #State: The loop continues to execute until `low + 1` is no longer less than `high`. At this point, the final values of `low`, `high`, and `mid` will depend on the distribution of `k` within the sorted list `arr`. The set `st` will contain all the unique values of `mid` that were computed during each iteration of the loop. Whether `arr[low]` is equal to `k` or not, the set `st` includes all the midpoints calculated during the iterations, which are the points where the binary search process narrowed down the range.
#Overall this is what the function does:The function accepts a positive integer `n`, an integer `k` such that 1 ≤ k ≤ n, and a list `arr` of `n` distinct integers from 1 to n. It performs a binary search on the sorted list `arr` to find the position of `k`. If `k` is found in `arr`, it prints 0. Otherwise, it prints 1 followed by the positions of `low` and `pos` in the list. The function returns nothing.

