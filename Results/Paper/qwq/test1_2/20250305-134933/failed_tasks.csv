task_id,model_created,dataset,model_run,code,fail_reason,type_of_run
1970_F2,human,codeforces2024,qwq-32b-preview,"""""""
https://codeforces.com/problemset/problem/1970/F2
F2. Playing Quidditch (Medium)
""""""
 
n, m = [int(x) for x in input().split()]
players = dict()
goals = {""B"": [], ""R"": []}
mouvements = {""L"": (-1, 0), ""R"": (1, 0), ""U"": (0, -1), ""D"": (0, 1)}
middle = ((m + 1) // 2, (n + 1) // 2)
quidditch = [middle, """"]
pointsb, pointsr = 0, 0
 
for y in range(n):
    s = input().split()
    for x in range(m):
        if s[x] == "".."":
            continue
        elif s[x] == "".Q"":
            quidditch[0] = (x, y)
        elif s[x] == ""RG"":
            goals[""R""].append((x, y))
        elif s[x] == ""BG"":
            goals[""B""].append((x, y))
        else:
            players[s[x]] = (x, y)
 
 
def add(a, b):
    x, y = a
    dx, dy = b
    return x + dx, y + dy
 
 
moves = int(input())
for i in range(moves):
    mo = input().split()
    if mo[0] == "".Q"":
        quidditch[0] = add(quidditch[0], mouvements[mo[1]])
    elif mo[1] in ""ULDR"":
        players[mo[0]] = add(players[mo[0]], mouvements[mo[1]])
        if "".B"" in players:
            elimines = []
            for k, v in players.items():
                if k != "".B"" and v == players["".B""]:
                    elimines.append(k)
            elimines.sort()
            for c in elimines:
                print(i, c, ""ELIMINATED"")
                if quidditch[1] == c:
                    quidditch = [players[c], """"]
                del players[c]
    elif mo[1] == ""C"":
        quidditch[1] == mo[0]
    elif mo[1] == ""T"":
        quidditch[1] = """"
        if players[mo[0]] in goals[""R""]:
            pointsb += 1
            print(i, ""BLUE GOAL"")
            if mo[0][0] == ""R"":
                quidditch[0] = middle
            else:
                quidditch[0] = players[mo[0]]
        if players[mo[0]] in goals[""B""]:
            pointsr += 1
            print(i, ""RED GOAL"")
            if mo[0][0] == ""B"":
                quidditch[0] = middle
            else:
                quidditch[0] = players[mo[0]]
print(""FINAL SCORE:"", pointsr, pointsb)",Error: 'str' object has no attribute 'trim',hoareprompt
1937_A,human,codeforces2024,qwq-32b-preview,"from math import log2
n_cases = int(input())
 
for i in range(n_cases):
    n = int(input())
    if n == 1:
        print(1)
    else:
        power = 1
        n = log2(n)
        while power < n:
            power += 1
        
        if power == n:
            print(2 ** power)
        else:
            power -= 1
            print(2 ** power)",Error: 'str' object has no attribute 'trim',hoareprompt
1942_B,human,codeforces2024,qwq-32b-preview,"def what_the_mex():
    n = int(input())
    arr = list(map(int , input().split()))
    mex = []
    minn = 0
    used = {}
    for i in range(n):
        if arr[i] > 0:
            mex.append(minn)
            used[minn] = True
            while minn in used:
                minn += 1
        else:
            mex.append(abs(arr[i] - minn))
            used[abs(arr[i] - minn)] = True   
    for itm in mex:
        print(itm , end = ' ')
    print()
    
for _ in range(int(input())):
    what_the_mex()",Error: 'str' object has no attribute 'trim',hoareprompt
1944_C,human,codeforces2024,qwq-32b-preview,"""""""
t = int(input())
for _ in range(t):
    n = int(input())
    arr = list(map(int,input().split()))
 
 
# Read tree as graph
def build_tree(n,arr):
    tree = {(i+1):[] for i in range(n)}
    for (i,j) in arr:
        tree[i].append(j)
        tree[j].append(i)
    return tree
 
# Generic BS
def bs(arr,x):
    n = len(arr)
    l, r = 0, n - 1
    if x < arr[0]: return -1
    if x > arr[-1]: return n+1
 
    while l + 1 != r:
        mid = (l + r) // 2
        if x <= arr[mid]:
            r = mid
        else:
            l = mid
    return (l,r)
 
# Kadanes
def kadane(arr):
    n = len(arr)
    pre = 0
    maxi = 0
    for i in range(n):
        pre = max(pre+arr[i],arr[i])
        maxi = max(maxi,pre)
    #print('max',maxi)
    return maxi
 
# dfs
def dfs(root,par,tree):
    c = 1
    for v in tree[root]:
        if v!=par:
            c+=dfs(v,root,tree,x)
    return c
""""""
import math as m
import collections as c
big = 1000000007
 
def pro(arr):
    nums = c.Counter(arr)
    start = 0
    vis = set()
    while nums.get(start,0):
        vis.add(start)
        nums[start]-=1
 
        #bob
        if nums.get(start+1,0):
            nums[start+1]-=1
            start+=1
        else:
            print(start+1)
            return
    print(start)
t = int(input())
for _ in range(t):
    n = int(input())
    #n,k = list(map(int,input().split()))
    # for _ in range(n-1):
    #     arr.append(list(map(int,input().split())))
    #arr = list(map(str,list(input())))
    arr = list(map(int,input().split()))
    pro(arr)",Error: 'str' object has no attribute 'trim',hoareprompt
1928_A,human,codeforces2024,qwq-32b-preview,"t = int(input())  # Número de casos de prueba
 
for _ in range(t):
    a, b = map(int, input().split())  # Leer las dimensiones del rectángulo
    
    # Si cualquiera de las dimensiones es par
    if a % 2 == 0 or b % 2 == 0:
        # Hacer un corte en la dimensión par
        if a % 2 == 0:  # Dividir a en dos partes si es par
            a1, a2 = a // 2, a // 2
            if a1 != b:  # Verificar que no se forme un cuadrado al dividir
                print(""Yes"")
                continue
        
        if b % 2 == 0:  # Dividir b en dos partes si es par
            b1, b2 = b // 2, b // 2
            if b1 != a:  # Verificar que no se forme un cuadrado al dividir
                print(""Yes"")
                continue
 
        # Si no se puede formar un nuevo rectángulo
        print(""No"")
    else:
        # Si ambos lados son impares, no se puede formar otro rectángulo
        print(""No"")",Error: 'str' object has no attribute 'trim',hoareprompt
1937_B,human,codeforces2024,qwq-32b-preview,"#Rudolf and 121
'''
t=int(input())
fin=['NO']*t
for i in range(t):
    n=int(input())
    a=[int(i) for i in input().split()]
    l=len(a)-1
    r=0
    flag=True
    while r<=l and flag:
        if a[r]!=0:
            a[r+1]=a[r+1]-2*a[r]
            a[r+2]=a[r+2]-a[r]
            a[r]=0
            if a[r+1]<0 or a[r+2]<0:
                flag=False
        if a[l]!=0:
            a[l-1]=a[l-1]-2*a[l]
            a[l-2]=a[l-2]-a[l]
            a[l]=0
            if a[l-1]<0 or a[l-2]<0:
                flag = False
        r=r+1
        l=l-1
    if flag==True:
        fin[i]='YES'
for i in range(t):
    print(fin[i])
'''
#Binary Path
def solve():
    global ans,count
    ans=[]
    ans=s1+list(s2[n-1])
    #print(ans)
    point=n-1
    for i in range(n):
        if s1[i]=='1' and s2[i-1]=='0' and i-1>=0:
            ans=s1[0:i]
            #print(ans)
            ans=ans+s2[i-1:n]
            #print(ans)
            point=i-1
            break
    count=1
    for i in range(point,-1,-1):
        #print(i)
        if s1[i]!=s2[i-1]:
            break
        count=count+1
 
 
t=int(input())
cnt=[]
fin=[]
for i in range(t):
    n=int(input())
    s1=list(input())
    s2=list(input())
    solve()
    cnt.append(count)
    fin.append(ans)
for i in range(t):
    print(''.join(fin[i]))
    print(cnt[i])
'''
t=int(input())
for i in range(t):
    n=int(input())
    a=[[0]*n for j in range(2)]
    a[0]=[int(j) for j in list(input())]
    a[1]=[int(j) for j in list(input())]
    dp=[[0]*n for j in range(2)]
    for j in range(n):
        if j==0:
            dp[0][j]=a[0][j]
            dp[1][j]=dp[0][j]+a[1][j]
        else:
            dp[0][j]=dp[0][j-1]+a[0][j]
            dp[1][j]=min(dp[0][j],dp[1][j-1])+a[1][j]
    print(dp[1][n-1])
'''",Error: 'str' object has no attribute 'trim',hoareprompt
1974_B,human,codeforces2024,qwq-32b-preview,"def decode_string(encoded):
    # Get unique characters and sort them to form 'r'
    r = ''.join(sorted(set(encoded)))
    # Create the mapping dictionary
    mapping = {r[i]: r[-(i+1)] for i in range(len(r))}
    # Decode the string using the mapping
    return ''.join(mapping[char] for char in encoded)
 
# Reading input
import sys
input = sys.stdin.read
data = input().split()
 
index = 0
t = int(data[index])
index += 1
results = []
 
for _ in range(t):
    n = int(data[index])
    index += 1
    b = data[index]
    index += 1
    results.append(decode_string(b))
 
# Output the results
print('\n'.join(results))",Error: 'str' object has no attribute 'trim',hoareprompt
1928_A,human,codeforces2024,qwq-32b-preview,"for i in range(int(input())):
    a, b, = [int(i) for i in input().split()]
    if(a%2==0 and b%2==0):
      print('yes')
    elif(a-b==-a,a) or (b-a==-b,b):
      print('no') 
    elif((a-b)%2>0 or (a-b)%2<0):
      print('yes')
    else:
      print('no')",Error: 'str' object has no attribute 'trim',hoareprompt
1945_F,human,codeforces2024,qwq-32b-preview,"import math
from bisect import bisect_left, bisect_right
from typing import Generic, Iterable, Iterator, List, Tuple, TypeVar, Optional
T = TypeVar('T')
 
class SortedMultiset(Generic[T]):
    BUCKET_RATIO = 16
    SPLIT_RATIO = 24
    
    def __init__(self, a: Iterable[T] = []) -> None:
        ""Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)""
        a = list(a)
        n = self.size = len(a)
        if any(a[i] > a[i + 1] for i in range(n - 1)):
            a.sort()
        num_bucket = int(math.ceil(math.sqrt(n / self.BUCKET_RATIO)))
        self.a = [a[n * i // num_bucket : n * (i + 1) // num_bucket] for i in range(num_bucket)]
 
    def __iter__(self) -> Iterator[T]:
        for i in self.a:
            for j in i: yield j
 
    def __reversed__(self) -> Iterator[T]:
        for i in reversed(self.a):
            for j in reversed(i): yield j
    
    def __eq__(self, other) -> bool:
        return list(self) == list(other)
    
    def __len__(self) -> int:
        return self.size
    
    def __repr__(self) -> str:
        return ""SortedMultiset"" + str(self.a)
    
    def __str__(self) -> str:
        s = str(list(self))
        return ""{"" + s[1 : len(s) - 1] + ""}""
 
    def _position(self, x: T) -> Tuple[List[T], int, int]:
        ""return the bucket, index of the bucket and position in which x should be. self must not be empty.""
        for i, a in enumerate(self.a):
            if x <= a[-1]: break
        return (a, i, bisect_left(a, x))
 
    def __contains__(self, x: T) -> bool:
        if self.size == 0: return False
        a, _, i = self._position(x)
        return i != len(a) and a[i] == x
 
    def count(self, x: T) -> int:
        ""Count the number of x.""
        return self.index_right(x) - self.index(x)
 
    def add(self, x: T) -> None:
        ""Add an element. / O(√N)""
        if self.size == 0:
            self.a = [[x]]
            self.size = 1
            return
        a, b, i = self._position(x)
        a.insert(i, x)
        self.size += 1
        if len(a) > len(self.a) * self.SPLIT_RATIO:
            mid = len(a) >> 1
            self.a[b:b+1] = [a[:mid], a[mid:]]
    
    def _pop(self, a: List[T], b: int, i: int) -> T:
        ans = a.pop(i)
        self.size -= 1
        if not a: del self.a[b]
        return ans
 
    def discard(self, x: T) -> bool:
        ""Remove an element and return True if removed. / O(√N)""
        if self.size == 0: return False
        a, b, i = self._position(x)
        if i == len(a) or a[i] != x: return False
        self._pop(a, b, i)
        return True
 
    def lt(self, x: T) -> Optional[T]:
        ""Find the largest element < x, or None if it doesn't exist.""
        for a in reversed(self.a):
            if a[0] < x:
                return a[bisect_left(a, x) - 1]
 
    def le(self, x: T) -> Optional[T]:
        ""Find the largest element <= x, or None if it doesn't exist.""
        for a in reversed(self.a):
            if a[0] <= x:
                return a[bisect_right(a, x) - 1]
 
    def gt(self, x: T) -> Optional[T]:
        ""Find the smallest element > x, or None if it doesn't exist.""
        for a in self.a:
            if a[-1] > x:
                return a[bisect_right(a, x)]
 
    def ge(self, x: T) -> Optional[T]:
        ""Find the smallest element >= x, or None if it doesn't exist.""
        for a in self.a:
            if a[-1] >= x:
                return a[bisect_left(a, x)]
    
    def __getitem__(self, i: int) -> T:
        ""Return the i-th element.""
        if i < 0:
            for a in reversed(self.a):
                i += len(a)
                if i >= 0: return a[i]
        else:
            for a in self.a:
                if i < len(a): return a[i]
                i -= len(a)
        raise IndexError
    
    def pop(self, i: int = -1) -> T:
        ""Pop and return the i-th element.""
        if i < 0:
            for b, a in enumerate(reversed(self.a)):
                i += len(a)
                if i >= 0: return self._pop(a, ~b, i)
        else:
            for b, a in enumerate(self.a):
                if i < len(a): return self._pop(a, b, i)
                i -= len(a)
        raise IndexError
 
    def index(self, x: T) -> int:
        ""Count the number of elements < x.""
        ans = 0
        for a in self.a:
            if a[-1] >= x:
                return ans + bisect_left(a, x)
            ans += len(a)
        return ans
 
    def index_right(self, x: T) -> int:
        ""Count the number of elements <= x.""
        ans = 0
        for a in self.a:
            if a[-1] > x:
                return ans + bisect_right(a, x)
            ans += len(a)
        return ans
 
 
 
t = int(input())
for _ in range(t):
    n = int(input())
    v = list(map(int,input().split()))
    p = list(map(int,input().split()))
    a = []
    for i in range(n):
        a.append(v[p[i]-1])
    r = SortedMultiset(a)
    ans = -1
    idx = 1
    for i in range(1,n):
        if r.__len__()<i:
            break 
        x = i*r[-i]  
        if x >ans:
            ans = x
            idx = i 
        r.discard(a[i-1]) 
    print(ans,idx)",Error: 'str' object has no attribute 'trim',hoareprompt
1937_C,human,codeforces2024,qwq-32b-preview,"for _ in range(int(input())):
    n = int(input())
 
    #Find first item
    k = 1
    for i in range(2, n):
        print('?', 0, k, 0, i, flush=True)
        res = input()
        if res == '<':
            k = i
 
    #Find second item    
    best = 0
    for i in range(1, n):
        print('?', k, best, k, i, flush=True)
        res = input()
        if res == '<':
            best = i
 
    print('!', k, best, flush = True)",Error: 'str' object has no attribute 'trim',hoareprompt
1955_F,human,codeforces2024,qwq-32b-preview,"for _ in range(int(input())):
    p = list(map(lambda x: int(x) - int(x) % 2, input().split()))
    print((sum(list(map(lambda x: x % 2 > 0, p[:3]))) == 3) + sum(p) // 2)",Error: 'str' object has no attribute 'trim',hoareprompt
1954_C,human,codeforces2024,qwq-32b-preview,"for _ in range(int(input())):
    a = list(map(int,list(input())))
    b = list(map(int,list(input())))
    new = [None]*len(a)
    new2 = [None]*len(a)
    i = 0
    while i<len(a) and a[i] == b[i]:
        new[i] = max(a[i],b[i])
        new2[i] = min(a[i],b[i])
        i += 1
    if i!=len(a):
        new[i] = max(a[i],b[i])
        new2[i] = min(a[i],b[i])
        i += 1
        while i<len(a):
            new[i] = min(a[i],b[i])
            new2[i] = max(a[i],b[i])
            i+=1
    print("""".join(str(x) for x in new))
    print("""".join(str(x) for x in new2))",Error: 'str' object has no attribute 'trim',hoareprompt
1965_B,human,codeforces2024,qwq-32b-preview,"# import random
# import itertools
# from sys import stdin, stdout
# import operator
# import collections
import bisect
import collections
import heapq
import math
import sys
from sys import maxsize
# from decimal import Decimal
 
#sys.setrecursionlimit(10**6)
 
p2D = lambda x: print(*x, sep=""\n"")
def II(): return int(sys.stdin.buffer.readline())
def MI(): return map(int, sys.stdin.buffer.readline().split())
def LI(): return list(map(int, sys.stdin.buffer.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def BI(): return sys.stdin.buffer.readline().rstrip()
def SI(): return sys.stdin.buffer.readline().rstrip().decode()
def li(): return [int(i) for i in input().split()]
def lli(rows): return [li() for _ in range(rows)]
def si(): return input()
def ii(): return int(input())
def ins(): return input().split()
 
 
# mod = 998244353
# fval = [1]
# for i in range(1,1002):
#     x = (fval[-1]*i)%mod
#     fval.append(x)
# #
# ifac = [1]*(1002)
# ifac[1001] = pow(fval[1001], -1, mod)
# for i in range(1001-1, 1, -1): ifac[i] = ifac[i+1]*(i+1)%mod
# print(fval)
# print(ifac)
# _________________ For taking Input from the Text Files __________________
# import os.path
#
# if (os.path.exists('input.txt')):
#     sys.stdin = open(""input.txt"", ""r"")
#     sys.stdout = open(""output.txt"", ""w"")
#     sys.stderr = open(""error.txt"", ""w"")
 
def drank(d, processing, da, rank):
    tmp = 10 ** 9
    if len(d[da]) == 1:
        return 1
    for di in d[da]:
        if processing[di - 1] == 0:
            processing[di - 1] = 1
            tmp = min(tmp, drank(d, processing, di, rank))
            processing[di - 1] = 0
    rank[da - 1] = tmp + 1
    return tmp + 1
 
# def primeFactors(n, d):
#     if (n % 2 == 0):
#         d[2] = 0
#     while n % 2 == 0:
#         d[2] += 1
#         n = n // 2
#     for i in range(3, int(math.sqrt(n)) + 1, 2):
#         if (n % i == 0):
#             d[i] = 0
#         while n % i == 0:
#             d[i] += 1
#             n = n // i
#     if n > 2:
#         d[n] = 1
# def powerofadivisor(n,div):
#     x = 0
#     while n%div == 0:
#         n//=div
#         x+=1
#     return x
 
#import heapq as hq
#import math
 
def gcd(a,b):
    if b==0:
        x = 1
        y = 0
        return x, y, a
    x, y, g = gcd(b, a%b)
    return y, x- (a//b)*y, g
 
# mod = 998244353
#
# is_prime = [True]*(10**7+5)
# primes = []
# def primeseive(n):
#     is_prime[0] = is_prime[1] = False
#     for i in range(4,n+1,2): is_prime[i] = False
#     i = 3
#     while i*i<=n:
#         if is_prime[i] == True:
#             for j in range(i*i,n+1,i):
#                 is_prime[j] = False
#         i+=2
    # for i in range(n):
    #     if is_prime[i]: primes.append(i)
import heapq
 
def solve():
    n, k = li()
    b = bin(n)[2:]
    l = len(b)
    if k == 1:
        if n == 2: return ""1\n2""
        ans = [2, 3]
        for i in range(2,l):
            ans.append(2**i)
    else:
        bk = bin(k)[2:]
        ans = []
        lk = len(bk)
        for i in range(lk-1):
            ans.append(2**i)
        ans.append(k-1-sum(ans))
        ans.append(k+1)
        ans.append(2*k+1)
        for i in range(lk, l):
            ans.append(2**i)
    return str(len(ans))+""\n""+' '.join(map(str, ans))
 
 
 
 
def main():
    # primeseive(10**7+2)
    # print(is_prime)
    for _ in range(ii()):
        sys.stdout.write(str(solve()) + ""\n"")
        #solve()
        # si()
        #print(""? {} {}"".format(low, mid), flush=True)
        # print(solve(), flush=True)
    # print(solve())
 
    #     z += str(ans) + '\n'
    # print(len(ans), ' '.join(map(str, ans)), sep='\n')
    # stdout.write(z)
 
 
# for interactive problems
# print(""? {} {}"".format(l,m), flush=True)
# or print this after each print statement
# sys.stdout.flush()
 
 
if __name__ == ""__main__"":
    main()",Error: 'str' object has no attribute 'trim',hoareprompt
1932_B,human,codeforces2024,qwq-32b-preview,"t = int(input())
 
for _ in range(t):
    n = int(input())
    a = list(map(int, input().split()))
    year = 0
    for ai in a:
        year += (year % ai) or ai
    print(year)",Error: 'str' object has no attribute 'trim',hoareprompt
1951_B,human,codeforces2024,qwq-32b-preview,"def mwins(a):
    x=a[k]
 
    ind=[]
    c=0
    for i in range(n):
        if a[i]>x:
            ind.append(i)
            c+=1
        if c==2:break
    if k==14:print(ind)
    if ind==[]:return n-1
    if len(ind)==1:
        if ind[0]==0:
            return k-1
        if ind[0]>k:return ind[0]-1
        return max(k-ind[0],ind[0]-1)
    if ind[0]==0: return min(ind[1]-1,k-1)
    if k>ind[1]: return max(ind[0]-1,ind[1]-ind[0])
    return max(ind[0]-1,k-ind[0])
    
 
 
 
for _ in range(int(input())):
    n,k=list(map(int,input().split()))
    l=list(map(int,input().split()))
    k-=1
    print(mwins(l))",Error: 'str' object has no attribute 'trim',hoareprompt
1922_C,human,codeforces2024,qwq-32b-preview,"from collections import defaultdict
for i in range(int(input())):
    n=int(input())
    l=list(map(int,input().split()))
    d1=defaultdict(int)
    d2=defaultdict(int)
    d1[2]=1
    for i in range(1,n-1):
        if (l[i+1]-l[i])<(l[i]-l[i-1]) :
            d1[i+2]=1+d1[i+1]
        else:
            d1[i+2]=(l[i+1]-l[i])+d1[i+1]
    d2[n-1]=1
    for i in range(n-2,0,-1):
        if (l[i]-l[i-1])<(l[i+1]-l[i]) :
            d2[i]=1+d2[i+1]
        else:
            d2[i]=(l[i]-l[i-1])+d2[i+1]
    #print(d1,d2)
    m=int(input())
    for j in range(m):
        x,y=(map(int,input().split()))
        if y>x:
            print(d1[y]-d1[x])
        else:
            print(d2[y]-d2[x])",Error: 'str' object has no attribute 'trim',hoareprompt
1932_C,human,codeforces2024,qwq-32b-preview,"def solve(n, m, a, s):
	b = []
	l = 0
	r = n - 1
	for i in range(n):
		if s[i] == 'L':
			b.append(a[l])
			l += 1
		else:
			b.append(a[r])
			r -= 1
	ans = []
	p = 1
	for v in reversed(b):
		p = (p * v)%m
		ans.append(p)
	return reversed(ans)
 
for _ in range(int(input())):
	n, m = map(int, input().split())
	a = list(map(int, input().split()))
	s = input()
	print(*solve(n, m, a, s))",Error: 'str' object has no attribute 'trim',hoareprompt
1945_B,human,codeforces2024,qwq-32b-preview,"t=int(input())
for i in range(t):
  a,b,m=map(int,input().split())
  mn=min(a,b)+m
  if m%a==0 and m%b==0 and a!=1 and b!=1:
    print((mn)//a+(mn)//b+1)
  else:
    print((mn)//a+(mn)//b)",Error: 'str' object has no attribute 'trim',hoareprompt
1930_A,human,codeforces2024,qwq-32b-preview,"for _ in range(int(input())):
	n = int(input())
	l = sorted(list(map(int, input().split())))
	score = 0
	for i in range(0,2*n,2):
		score+=l[i]
 
	print(score)",Error: 'str' object has no attribute 'trim',hoareprompt
1965_B,human,codeforces2024,qwq-32b-preview,"# import random
# import itertools
# from sys import stdin, stdout
# import operator
# import collections
import bisect
import collections
import heapq
import math
import sys
from sys import maxsize
# from decimal import Decimal
 
#sys.setrecursionlimit(10**6)
 
p2D = lambda x: print(*x, sep=""\n"")
def II(): return int(sys.stdin.buffer.readline())
def MI(): return map(int, sys.stdin.buffer.readline().split())
def LI(): return list(map(int, sys.stdin.buffer.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def BI(): return sys.stdin.buffer.readline().rstrip()
def SI(): return sys.stdin.buffer.readline().rstrip().decode()
def li(): return [int(i) for i in input().split()]
def lli(rows): return [li() for _ in range(rows)]
def si(): return input()
def ii(): return int(input())
def ins(): return input().split()
 
 
# mod = 998244353
# fval = [1]
# for i in range(1,1002):
#     x = (fval[-1]*i)%mod
#     fval.append(x)
# #
# ifac = [1]*(1002)
# ifac[1001] = pow(fval[1001], -1, mod)
# for i in range(1001-1, 1, -1): ifac[i] = ifac[i+1]*(i+1)%mod
# print(fval)
# print(ifac)
# _________________ For taking Input from the Text Files __________________
# import os.path
#
# if (os.path.exists('input.txt')):
#     sys.stdin = open(""input.txt"", ""r"")
#     sys.stdout = open(""output.txt"", ""w"")
#     sys.stderr = open(""error.txt"", ""w"")
 
def drank(d, processing, da, rank):
    tmp = 10 ** 9
    if len(d[da]) == 1:
        return 1
    for di in d[da]:
        if processing[di - 1] == 0:
            processing[di - 1] = 1
            tmp = min(tmp, drank(d, processing, di, rank))
            processing[di - 1] = 0
    rank[da - 1] = tmp + 1
    return tmp + 1
 
# def primeFactors(n, d):
#     if (n % 2 == 0):
#         d[2] = 0
#     while n % 2 == 0:
#         d[2] += 1
#         n = n // 2
#     for i in range(3, int(math.sqrt(n)) + 1, 2):
#         if (n % i == 0):
#             d[i] = 0
#         while n % i == 0:
#             d[i] += 1
#             n = n // i
#     if n > 2:
#         d[n] = 1
# def powerofadivisor(n,div):
#     x = 0
#     while n%div == 0:
#         n//=div
#         x+=1
#     return x
 
#import heapq as hq
#import math
 
def gcd(a,b):
    if b==0:
        x = 1
        y = 0
        return x, y, a
    x, y, g = gcd(b, a%b)
    return y, x- (a//b)*y, g
 
# mod = 998244353
#
# is_prime = [True]*(10**7+5)
# primes = []
# def primeseive(n):
#     is_prime[0] = is_prime[1] = False
#     for i in range(4,n+1,2): is_prime[i] = False
#     i = 3
#     while i*i<=n:
#         if is_prime[i] == True:
#             for j in range(i*i,n+1,i):
#                 is_prime[j] = False
#         i+=2
    # for i in range(n):
    #     if is_prime[i]: primes.append(i)
import heapq
 
def solve():
    n, k = li()
    b = bin(n)[2:]
    l = len(b)
    if k == 1:
        if n == 2: return ""1\n2""
        ans = [2, 3]
        for i in range(2,l):
            ans.append(2**i)
    else:
        bk = bin(k)[2:]
        ans = []
        lk = len(bk)
        for i in range(lk-1):
            ans.append(2**i)
        ans.append(k-1-sum(ans))
        ans.append(k+1)
        ans.append(2*k+1)
        for i in range(lk, l):
            ans.append(2**i)
    return ' '.join(map(str, ans))
 
 
 
 
def main():
    # primeseive(10**7+2)
    # print(is_prime)
    for _ in range(ii()):
        sys.stdout.write(str(solve()) + ""\n"")
        #solve()
        # si()
        #print(""? {} {}"".format(low, mid), flush=True)
        # print(solve(), flush=True)
    # print(solve())
 
    #     z += str(ans) + '\n'
    # print(len(ans), ' '.join(map(str, ans)), sep='\n')
    # stdout.write(z)
 
 
# for interactive problems
# print(""? {} {}"".format(l,m), flush=True)
# or print this after each print statement
# sys.stdout.flush()
 
 
if __name__ == ""__main__"":
    main()",Error: 'str' object has no attribute 'trim',hoareprompt
