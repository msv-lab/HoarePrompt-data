Task ID,Dataset,model_created,model_run,description,Code,Test Result,Correctness,Post,original correctness,naive correctness,annotated correctness,annotated correctness simple,naive no fsl correctness,Correctness no fsl,simple verify,complex verify,default verify,simple verify no fsl,complex verify no fsl,default verify no fsl,data file
62,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"After seeing the ""ALL YOUR BASE ARE BELONG TO US"" meme for the first time, numbers X and Y realised that they have different bases, which complicated their relations.

You're given a number X represented in base b_{x} and a number Y represented in base b_{y}. Compare those two numbers.


-----Input-----

The first line of the input contains two space-separated integers n and b_{x} (1 ≤ n ≤ 10, 2 ≤ b_{x} ≤ 40), where n is the number of digits in the b_{x}-based representation of X. 

The second line contains n space-separated integers x_1, x_2, ..., x_{n} (0 ≤ x_{i} < b_{x}) — the digits of X. They are given in the order from the most significant digit to the least significant one.

The following two lines describe Y in the same way: the third line contains two space-separated integers m and b_{y} (1 ≤ m ≤ 10, 2 ≤ b_{y} ≤ 40, b_{x} ≠ b_{y}), where m is the number of digits in the b_{y}-based representation of Y, and the fourth line contains m space-separated integers y_1, y_2, ..., y_{m} (0 ≤ y_{i} < b_{y}) — the digits of Y.

There will be no leading zeroes. Both X and Y will be positive. All digits of both numbers are given in the standard decimal numeral system.


-----Output-----

Output a single character (quotes for clarity):   '<' if X < Y  '>' if X > Y  '=' if X = Y 


-----Examples-----
Input
6 2
1 0 1 1 1 1
2 10
4 7

Output
=

Input
3 3
1 0 2
2 5
2 4

Output
<

Input
7 16
15 15 4 0 0 7 10
7 9
4 8 0 3 1 5 0

Output
>



-----Note-----

In the first sample, X = 101111_2 = 47_10 = Y.

In the second sample, X = 102_3 = 21_5 and Y = 24_5 = 112_3, thus X < Y.

In the third sample, $X = FF 4007 A_{16}$ and Y = 4803150_9. We may notice that X starts with much larger digits and b_{x} is much larger than b_{y}, so X is clearly larger than Y.","def base_converter(digits, base):
    result = 0
    for digit in digits:
        result = result * base + digit
    return result

n, bx = map(int, input().split())
x_digits = list(map(int, input().split()))
m, by = map(int, input().split())
y_digits = list(map(int, input().split()))

x = base_converter(x_digits, bx)
y = base_converter(y_digits, by)

if x < y:
    print('<')
elif x > y:
    print('>')
else:
    print('=')
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
62,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"After seeing the ""ALL YOUR BASE ARE BELONG TO US"" meme for the first time, numbers X and Y realised that they have different bases, which complicated their relations.

You're given a number X represented in base b_{x} and a number Y represented in base b_{y}. Compare those two numbers.


-----Input-----

The first line of the input contains two space-separated integers n and b_{x} (1 ≤ n ≤ 10, 2 ≤ b_{x} ≤ 40), where n is the number of digits in the b_{x}-based representation of X. 

The second line contains n space-separated integers x_1, x_2, ..., x_{n} (0 ≤ x_{i} < b_{x}) — the digits of X. They are given in the order from the most significant digit to the least significant one.

The following two lines describe Y in the same way: the third line contains two space-separated integers m and b_{y} (1 ≤ m ≤ 10, 2 ≤ b_{y} ≤ 40, b_{x} ≠ b_{y}), where m is the number of digits in the b_{y}-based representation of Y, and the fourth line contains m space-separated integers y_1, y_2, ..., y_{m} (0 ≤ y_{i} < b_{y}) — the digits of Y.

There will be no leading zeroes. Both X and Y will be positive. All digits of both numbers are given in the standard decimal numeral system.


-----Output-----

Output a single character (quotes for clarity):   '<' if X < Y  '>' if X > Y  '=' if X = Y 


-----Examples-----
Input
6 2
1 0 1 1 1 1
2 10
4 7

Output
=

Input
3 3
1 0 2
2 5
2 4

Output
<

Input
7 16
15 15 4 0 0 7 10
7 9
4 8 0 3 1 5 0

Output
>



-----Note-----

In the first sample, X = 101111_2 = 47_10 = Y.

In the second sample, X = 102_3 = 21_5 and Y = 24_5 = 112_3, thus X < Y.

In the third sample, $X = FF 4007 A_{16}$ and Y = 4803150_9. We may notice that X starts with much larger digits and b_{x} is much larger than b_{y}, so X is clearly larger than Y.","def convert_to_decimal(digits, base):
    decimal_value = 0
    for digit in digits:
        decimal_value = decimal_value * base + digit
    return decimal_value

# Read input
n, base_x = map(int, input().split())
digits_x = list(map(int, input().split()))
m, base_y = map(int, input().split())
digits_y = list(map(int, input().split()))

# Convert both numbers to decimal
decimal_x = convert_to_decimal(digits_x, base_x)
decimal_y = convert_to_decimal(digits_y, base_y)

# Compare and print result
if decimal_x < decimal_y:
    print('<')
elif decimal_x > decimal_y:
    print('>')
else:
    print('=')
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
121,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"The process of mammoth's genome decoding in Berland comes to its end!

One of the few remaining tasks is to restore unrecognized nucleotides in a found chain s. Each nucleotide is coded with a capital letter of English alphabet: 'A', 'C', 'G' or 'T'. Unrecognized nucleotides are coded by a question mark '?'. Thus, s is a string consisting of letters 'A', 'C', 'G', 'T' and characters '?'.

It is known that the number of nucleotides of each of the four types in the decoded genome of mammoth in Berland should be equal.

Your task is to decode the genome and replace each unrecognized nucleotide with one of the four types so that the number of nucleotides of each of the four types becomes equal.


-----Input-----

The first line contains the integer n (4 ≤ n ≤ 255) — the length of the genome.

The second line contains the string s of length n — the coded genome. It consists of characters 'A', 'C', 'G', 'T' and '?'.


-----Output-----

If it is possible to decode the genome, print it. If there are multiple answer, print any of them. If it is not possible, print three equals signs in a row: ""==="" (without quotes).


-----Examples-----
Input
8
AG?C??CT

Output
AGACGTCT

Input
4
AGCT

Output
AGCT

Input
6
????G?

Output
===

Input
4
AA??

Output
===



-----Note-----

In the first example you can replace the first question mark with the letter 'A', the second question mark with the letter 'G', the third question mark with the letter 'T', then each nucleotide in the genome would be presented twice.

In the second example the genome is already decoded correctly and each nucleotide is exactly once in it.

In the third and the fourth examples it is impossible to decode the genom.","n = int(input())
s = input()
count = {'A': 0, 'C': 0, 'G': 0, 'T': 0}
for c in s:
    if c != '?':
        count[c] += 1

avg = n // 4
for c in 'ACGT':
    count[c] = avg - count[c]

res = ''
for c in s:
    if c == '?':
        for nc in 'ACGT':
            if count[nc] > 0:
                res += nc
                count[nc] -= 1
                break
    else:
        res += c

if any(count.values()):
    print('===')
else:
    print(res)
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
121,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"The process of mammoth's genome decoding in Berland comes to its end!

One of the few remaining tasks is to restore unrecognized nucleotides in a found chain s. Each nucleotide is coded with a capital letter of English alphabet: 'A', 'C', 'G' or 'T'. Unrecognized nucleotides are coded by a question mark '?'. Thus, s is a string consisting of letters 'A', 'C', 'G', 'T' and characters '?'.

It is known that the number of nucleotides of each of the four types in the decoded genome of mammoth in Berland should be equal.

Your task is to decode the genome and replace each unrecognized nucleotide with one of the four types so that the number of nucleotides of each of the four types becomes equal.


-----Input-----

The first line contains the integer n (4 ≤ n ≤ 255) — the length of the genome.

The second line contains the string s of length n — the coded genome. It consists of characters 'A', 'C', 'G', 'T' and '?'.


-----Output-----

If it is possible to decode the genome, print it. If there are multiple answer, print any of them. If it is not possible, print three equals signs in a row: ""==="" (without quotes).


-----Examples-----
Input
8
AG?C??CT

Output
AGACGTCT

Input
4
AGCT

Output
AGCT

Input
6
????G?

Output
===

Input
4
AA??

Output
===



-----Note-----

In the first example you can replace the first question mark with the letter 'A', the second question mark with the letter 'G', the third question mark with the letter 'T', then each nucleotide in the genome would be presented twice.

In the second example the genome is already decoded correctly and each nucleotide is exactly once in it.

In the third and the fourth examples it is impossible to decode the genom.","def decode_genome():
    import sys
    input = sys.stdin.read
    data = input().split()

    n = int(data[0])
    s = data[1]

    if n % 4 != 0:
        print(""==="")
        return

    target_count = n // 4
    counts = {'A': 0, 'C': 0, 'G': 0, 'T': 0}

    for char in s:
        if char in counts:
            counts[char] += 1

    for char in counts:
        if counts[char] > target_count:
            print(""==="")
            return

    result = list(s)

    for i in range(n):
        if result[i] == '?':
            for char in counts:
                if counts[char] < target_count:
                    result[i] = char
                    counts[char] += 1
                    break

    print("""".join(result))

decode_genome()
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
130,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"Ivan is collecting coins. There are only $N$ different collectible coins, Ivan has $K$ of them. He will be celebrating his birthday soon, so all his $M$ freinds decided to gift him coins. They all agreed to three terms:  Everyone must gift as many coins as others. All coins given to Ivan must be different. Not less than $L$ coins from gifts altogether, must be new in Ivan's collection.

But his friends don't know which coins have Ivan already got in his collection. They don't want to spend money so they want to buy minimum quantity of coins, that satisfy all terms, irrespective of the Ivan's collection. Help them to find this minimum number of coins or define it's not possible to meet all the terms.


-----Input-----

The only line of input contains 4 integers $N$, $M$, $K$, $L$ ($1 \le K \le N \le 10^{18}$; $1 \le M, \,\, L \le 10^{18}$) — quantity of different coins, number of Ivan's friends, size of Ivan's collection and quantity of coins, that must be new in Ivan's collection.


-----Output-----

Print one number — minimal number of coins one friend can gift to satisfy all the conditions. If it is impossible to satisfy all three conditions print ""-1"" (without quotes).


-----Examples-----
Input
20 15 2 3

Output
1
Input
10 11 2 4

Output
-1


-----Note-----

In the first test, one coin from each friend is enough, as he will be presented with 15 different coins and 13 of them will definitely be new.

In the second test, Ivan has 11 friends, but there are only 10 different coins. So all friends can't present him different coins.","N, M, K, L = map(int, input().split())

if M >= N - K + 1 and M >= L:
    print(1)
else:
    print(-1)
",,True,post,False,False,True,True,False,False,True,True,True,True,False,False,selected_pilot_75_apps.json
130,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Ivan is collecting coins. There are only $N$ different collectible coins, Ivan has $K$ of them. He will be celebrating his birthday soon, so all his $M$ freinds decided to gift him coins. They all agreed to three terms:  Everyone must gift as many coins as others. All coins given to Ivan must be different. Not less than $L$ coins from gifts altogether, must be new in Ivan's collection.

But his friends don't know which coins have Ivan already got in his collection. They don't want to spend money so they want to buy minimum quantity of coins, that satisfy all terms, irrespective of the Ivan's collection. Help them to find this minimum number of coins or define it's not possible to meet all the terms.


-----Input-----

The only line of input contains 4 integers $N$, $M$, $K$, $L$ ($1 \le K \le N \le 10^{18}$; $1 \le M, \,\, L \le 10^{18}$) — quantity of different coins, number of Ivan's friends, size of Ivan's collection and quantity of coins, that must be new in Ivan's collection.


-----Output-----

Print one number — minimal number of coins one friend can gift to satisfy all the conditions. If it is impossible to satisfy all three conditions print ""-1"" (without quotes).


-----Examples-----
Input
20 15 2 3

Output
1
Input
10 11 2 4

Output
-1


-----Note-----

In the first test, one coin from each friend is enough, as he will be presented with 15 different coins and 13 of them will definitely be new.

In the second test, Ivan has 11 friends, but there are only 10 different coins. So all friends can't present him different coins.","# Read input
import sys
input = sys.stdin.read
N, M, K, L = map(int, input().split())

# Determine the minimum number of coins each friend should gift
# Total coins needed: L
# Each friend gifts x coins: M * x

# We need M * x >= L, therefore x >= L / M
# We also need M * x <= N - K to ensure all gifted coins are unique

# Calculate the minimum x
min_x = (L + M - 1) // M  # This ensures we round up the division

# Check if min_x satisfies the conditions
if M * min_x <= N - K:
    print(min_x)
else:
    print(-1)
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
200,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"The Fair Nut likes kvass very much. On his birthday parents presented him $n$ kegs of kvass. There are $v_i$ liters of kvass in the $i$-th keg. Each keg has a lever. You can pour your glass by exactly $1$ liter pulling this lever. The Fair Nut likes this drink very much, so he wants to pour his glass by $s$ liters of kvass. But he wants to do it, so kvass level in the least keg is as much as possible.

Help him find out how much kvass can be in the least keg or define it's not possible to pour his glass by $s$ liters of kvass.


-----Input-----

The first line contains two integers $n$ and $s$ ($1 \le n \le 10^3$, $1 \le s \le 10^{12}$) — the number of kegs and glass volume.

The second line contains $n$ integers $v_1, v_2, \ldots, v_n$ ($1 \le v_i \le 10^9$) — the volume of $i$-th keg.


-----Output-----

If the Fair Nut cannot pour his glass by $s$ liters of kvass, print $-1$. Otherwise, print a single integer — how much kvass in the least keg can be.


-----Examples-----
Input
3 3
4 3 5

Output
3

Input
3 4
5 3 4

Output
2

Input
3 7
1 2 3

Output
-1



-----Note-----

In the first example, the answer is $3$, the Fair Nut can take $1$ liter from the first keg and $2$ liters from the third keg. There are $3$ liters of kvass in each keg.

In the second example, the answer is $2$, the Fair Nut can take $3$ liters from the first keg and $1$ liter from the second keg.

In the third example, the Fair Nut can't pour his cup by $7$ liters, so the answer is $-1$.","n, s = map(int, input().split())
v = list(map(int, input().split()))

v.sort()

low, high = 0, min(v)

while low < high:
    mid = (low + high + 1) // 2
    total = sum(min(mid, x) for x in v)
    if total < s:
        low = mid
    else:
        high = mid - 1

if sum(min(low, x) for x in v) != s:
    print(-1)
else:
    print(low)
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
200,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"The Fair Nut likes kvass very much. On his birthday parents presented him $n$ kegs of kvass. There are $v_i$ liters of kvass in the $i$-th keg. Each keg has a lever. You can pour your glass by exactly $1$ liter pulling this lever. The Fair Nut likes this drink very much, so he wants to pour his glass by $s$ liters of kvass. But he wants to do it, so kvass level in the least keg is as much as possible.

Help him find out how much kvass can be in the least keg or define it's not possible to pour his glass by $s$ liters of kvass.


-----Input-----

The first line contains two integers $n$ and $s$ ($1 \le n \le 10^3$, $1 \le s \le 10^{12}$) — the number of kegs and glass volume.

The second line contains $n$ integers $v_1, v_2, \ldots, v_n$ ($1 \le v_i \le 10^9$) — the volume of $i$-th keg.


-----Output-----

If the Fair Nut cannot pour his glass by $s$ liters of kvass, print $-1$. Otherwise, print a single integer — how much kvass in the least keg can be.


-----Examples-----
Input
3 3
4 3 5

Output
3

Input
3 4
5 3 4

Output
2

Input
3 7
1 2 3

Output
-1



-----Note-----

In the first example, the answer is $3$, the Fair Nut can take $1$ liter from the first keg and $2$ liters from the third keg. There are $3$ liters of kvass in each keg.

In the second example, the answer is $2$, the Fair Nut can take $3$ liters from the first keg and $1$ liter from the second keg.

In the third example, the Fair Nut can't pour his cup by $7$ liters, so the answer is $-1$.","# Read input values
n, s = map(int, input().split())
volumes = list(map(int, input().split()))

# Sort the volumes
volumes.sort()

# Calculate the total volume of all kegs
total_volume = sum(volumes)

# Check if we have enough kvass to pour s liters
if total_volume < s:
    print(-1)
else:
    # Calculate the maximum possible volume in the least filled keg
    min_keg_volume = volumes[0]
    remaining_kvass = s

    # Distribute remaining kvass to make each keg as even as possible
    for i in range(n):
        if volumes[i] <= min_keg_volume:
            continue
        else:
            possible_to_take = min(volumes[i] - min_keg_volume, remaining_kvass)
            remaining_kvass -= possible_to_take
        
        if remaining_kvass == 0:
            break
    
    # Calculate the final volume in the least filled keg
    if remaining_kvass > 0:
        min_keg_volume -= (remaining_kvass + n - 1) // n
    
    print(min_keg_volume)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
17,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"A string is called bracket sequence if it does not contain any characters other than ""("" and "")"". A bracket sequence is called regular if it it is possible to obtain correct arithmetic expression by inserting characters ""+"" and ""1"" into this sequence. For example, """", ""(())"" and ""()()"" are regular bracket sequences; ""))"" and "")(("" are bracket sequences (but not regular ones), and ""(a)"" and ""(1)+(1)"" are not bracket sequences at all.

You have a number of strings; each string is a bracket sequence of length $2$. So, overall you have $cnt_1$ strings ""(("", $cnt_2$ strings ""()"", $cnt_3$ strings "")("" and $cnt_4$ strings ""))"". You want to write all these strings in some order, one after another; after that, you will get a long bracket sequence of length $2(cnt_1 + cnt_2 + cnt_3 + cnt_4)$. You wonder: is it possible to choose some order of the strings you have such that you will get a regular bracket sequence? Note that you may not remove any characters or strings, and you may not add anything either.


-----Input-----

The input consists of four lines, $i$-th of them contains one integer $cnt_i$ ($0 \le cnt_i \le 10^9$).


-----Output-----

Print one integer: $1$ if it is possible to form a regular bracket sequence by choosing the correct order of the given strings, $0$ otherwise.


-----Examples-----
Input
3
1
4
3

Output
1

Input
0
0
0
0

Output
1

Input
1
2
3
4

Output
0



-----Note-----

In the first example it is possible to construct a string ""(())()(()((()()()())))"", which is a regular bracket sequence.

In the second example it is possible to construct a string """", which is a regular bracket sequence.","cnt1, cnt2, cnt3, cnt4 = map(int, [input() for _ in range(4)])

if cnt3 > cnt1:
    print(0)
else:
    print(1)
",,False,post,False,False,True,False,False,False,False,False,False,True,True,True,selected_pilot_75_apps.json
17,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"A string is called bracket sequence if it does not contain any characters other than ""("" and "")"". A bracket sequence is called regular if it it is possible to obtain correct arithmetic expression by inserting characters ""+"" and ""1"" into this sequence. For example, """", ""(())"" and ""()()"" are regular bracket sequences; ""))"" and "")(("" are bracket sequences (but not regular ones), and ""(a)"" and ""(1)+(1)"" are not bracket sequences at all.

You have a number of strings; each string is a bracket sequence of length $2$. So, overall you have $cnt_1$ strings ""(("", $cnt_2$ strings ""()"", $cnt_3$ strings "")("" and $cnt_4$ strings ""))"". You want to write all these strings in some order, one after another; after that, you will get a long bracket sequence of length $2(cnt_1 + cnt_2 + cnt_3 + cnt_4)$. You wonder: is it possible to choose some order of the strings you have such that you will get a regular bracket sequence? Note that you may not remove any characters or strings, and you may not add anything either.


-----Input-----

The input consists of four lines, $i$-th of them contains one integer $cnt_i$ ($0 \le cnt_i \le 10^9$).


-----Output-----

Print one integer: $1$ if it is possible to form a regular bracket sequence by choosing the correct order of the given strings, $0$ otherwise.


-----Examples-----
Input
3
1
4
3

Output
1

Input
0
0
0
0

Output
1

Input
1
2
3
4

Output
0



-----Note-----

In the first example it is possible to construct a string ""(())()(()((()()()())))"", which is a regular bracket sequence.

In the second example it is possible to construct a string """", which is a regular bracket sequence.","cnt1 = int(input())
cnt2 = int(input())
cnt3 = int(input())
cnt4 = int(input())

# To form a regular bracket sequence:
# 1. The total number of opening brackets must equal the total number of closing brackets.
# 2. At any point in the sequence, the number of closing brackets should not exceed the number of opening brackets.

# Total opening brackets = cnt1 + cnt2
# Total closing brackets = cnt3 + cnt4

# For the sequence to be regular:
# cnt1 + cnt2 must equal cnt3 + cnt4
# Also, we need cnt2 >= cnt3 to ensure that the closing brackets never exceed the opening brackets at any point

if cnt1 + cnt2 == cnt3 + cnt4 and cnt2 >= cnt3:
    print(1)
else:
    print(0)
",,True,post,False,True,True,True,True,True,True,True,True,True,True,False,selected_pilot_75_apps.json
27,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"Wet Shark asked Rat Kwesh to generate three positive real numbers x, y and z, from 0.1 to 200.0, inclusive. Wet Krash wants to impress Wet Shark, so all generated numbers will have exactly one digit after the decimal point.

Wet Shark knows Rat Kwesh will want a lot of cheese. So he will give the Rat an opportunity to earn a lot of cheese. He will hand the three numbers x, y and z to Rat Kwesh, and Rat Kwesh will pick one of the these twelve options:  a_1 = x^{y}^{z};  a_2 = x^{z}^{y};  a_3 = (x^{y})^{z};  a_4 = (x^{z})^{y};  a_5 = y^{x}^{z};  a_6 = y^{z}^{x};  a_7 = (y^{x})^{z};  a_8 = (y^{z})^{x};  a_9 = z^{x}^{y};  a_10 = z^{y}^{x};  a_11 = (z^{x})^{y};  a_12 = (z^{y})^{x}. 

Let m be the maximum of all the a_{i}, and c be the smallest index (from 1 to 12) such that a_{c} = m. Rat's goal is to find that c, and he asks you to help him. Rat Kwesh wants to see how much cheese he gets, so he you will have to print the expression corresponding to that a_{c}.

 


-----Input-----

The only line of the input contains three space-separated real numbers x, y and z (0.1 ≤ x, y, z ≤ 200.0). Each of x, y and z is given with exactly one digit after the decimal point.


-----Output-----

Find the maximum value of expression among x^{y}^{z}, x^{z}^{y}, (x^{y})^{z}, (x^{z})^{y}, y^{x}^{z}, y^{z}^{x}, (y^{x})^{z}, (y^{z})^{x}, z^{x}^{y}, z^{y}^{x}, (z^{x})^{y}, (z^{y})^{x} and print the corresponding expression. If there are many maximums, print the one that comes first in the list. 

x^{y}^{z} should be outputted as x^y^z (without brackets), and (x^{y})^{z} should be outputted as (x^y)^z (quotes for clarity). 


-----Examples-----
Input
1.1 3.4 2.5

Output
z^y^x

Input
2.0 2.0 2.0

Output
x^y^z

Input
1.9 1.8 1.7

Output
(x^y)^z","x, y, z = map(float, input().split())

a1 = x ** (y ** z)
a2 = x ** (z ** y)
a3 = (x ** y) ** z
a4 = (x ** z) ** y
a5 = y ** (x ** z)
a6 = y ** (z ** x)
a7 = (y ** x) ** z
a8 = (y ** z) ** x
a9 = z ** (x ** y)
a10 = z ** (y ** x)
a11 = (z ** x) ** y
a12 = (z ** y) ** x

a = [a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12]
b = ['x^y^z', 'x^z^y', '(x^y)^z', '(x^z)^y', 'y^x^z', 'y^z^x', '(y^x)^z', '(y^z)^x', 'z^x^y', 'z^y^x', '(z^x)^y', '(z^y)^x']

print(b[a.index(max(a))])",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
27,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Wet Shark asked Rat Kwesh to generate three positive real numbers x, y and z, from 0.1 to 200.0, inclusive. Wet Krash wants to impress Wet Shark, so all generated numbers will have exactly one digit after the decimal point.

Wet Shark knows Rat Kwesh will want a lot of cheese. So he will give the Rat an opportunity to earn a lot of cheese. He will hand the three numbers x, y and z to Rat Kwesh, and Rat Kwesh will pick one of the these twelve options:  a_1 = x^{y}^{z};  a_2 = x^{z}^{y};  a_3 = (x^{y})^{z};  a_4 = (x^{z})^{y};  a_5 = y^{x}^{z};  a_6 = y^{z}^{x};  a_7 = (y^{x})^{z};  a_8 = (y^{z})^{x};  a_9 = z^{x}^{y};  a_10 = z^{y}^{x};  a_11 = (z^{x})^{y};  a_12 = (z^{y})^{x}. 

Let m be the maximum of all the a_{i}, and c be the smallest index (from 1 to 12) such that a_{c} = m. Rat's goal is to find that c, and he asks you to help him. Rat Kwesh wants to see how much cheese he gets, so he you will have to print the expression corresponding to that a_{c}.

 


-----Input-----

The only line of the input contains three space-separated real numbers x, y and z (0.1 ≤ x, y, z ≤ 200.0). Each of x, y and z is given with exactly one digit after the decimal point.


-----Output-----

Find the maximum value of expression among x^{y}^{z}, x^{z}^{y}, (x^{y})^{z}, (x^{z})^{y}, y^{x}^{z}, y^{z}^{x}, (y^{x})^{z}, (y^{z})^{x}, z^{x}^{y}, z^{y}^{x}, (z^{x})^{y}, (z^{y})^{x} and print the corresponding expression. If there are many maximums, print the one that comes first in the list. 

x^{y}^{z} should be outputted as x^y^z (without brackets), and (x^{y})^{z} should be outputted as (x^y)^z (quotes for clarity). 


-----Examples-----
Input
1.1 3.4 2.5

Output
z^y^x

Input
2.0 2.0 2.0

Output
x^y^z

Input
1.9 1.8 1.7

Output
(x^y)^z","import math

def main():
    import sys
    input = sys.stdin.read
    x, y, z = map(float, input().split())

    expressions = [
        (x**(y**z), ""x^y^z""),
        (x**(z**y), ""x^z^y""),
        ((x**y)**z, ""(x^y)^z""),
        ((x**z)**y, ""(x^z)^y""),
        (y**(x**z), ""y^x^z""),
        (y**(z**x), ""y^z^x""),
        ((y**x)**z, ""(y^x)^z""),
        ((y**z)**x, ""(y^z)^x""),
        (z**(x**y), ""z^x^y""),
        (z**(y**x), ""z^y^x""),
        ((z**x)**y, ""(z^x)^y""),
        ((z**y)**x, ""(z^y)^x"")
    ]

    max_value, max_expr = max(expressions, key=lambda pair: pair[0])
    print(max_expr)

if __name__ == ""__main__"":
    main()
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
71,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"Polycarp is crazy about round numbers. He especially likes the numbers divisible by 10^{k}.

In the given number of n Polycarp wants to remove the least number of digits to get a number that is divisible by 10^{k}. For example, if k = 3, in the number 30020 it is enough to delete a single digit (2). In this case, the result is 3000 that is divisible by 10^3 = 1000.

Write a program that prints the minimum number of digits to be deleted from the given integer number n, so that the result is divisible by 10^{k}. The result should not start with the unnecessary leading zero (i.e., zero can start only the number 0, which is required to be written as exactly one digit).

It is guaranteed that the answer exists.


-----Input-----

The only line of the input contains two integer numbers n and k (0 ≤ n ≤ 2 000 000 000, 1 ≤ k ≤ 9).

It is guaranteed that the answer exists. All numbers in the input are written in traditional notation of integers, that is, without any extra leading zeros.


-----Output-----

Print w — the required minimal number of digits to erase. After removing the appropriate w digits from the number n, the result should have a value that is divisible by 10^{k}. The result can start with digit 0 in the single case (the result is zero and written by exactly the only digit 0).


-----Examples-----
Input
30020 3

Output
1

Input
100 9

Output
2

Input
10203049 2

Output
3



-----Note-----

In the example 2 you can remove two digits: 1 and any 0. The result is number 0 which is divisible by any number.","n, k = map(int, input().split())
w = 0
while n % (10 ** k) != 0:
    w += 1
    n //= 10
print(w)
",,False,post,False,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_apps.json
71,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Polycarp is crazy about round numbers. He especially likes the numbers divisible by 10^{k}.

In the given number of n Polycarp wants to remove the least number of digits to get a number that is divisible by 10^{k}. For example, if k = 3, in the number 30020 it is enough to delete a single digit (2). In this case, the result is 3000 that is divisible by 10^3 = 1000.

Write a program that prints the minimum number of digits to be deleted from the given integer number n, so that the result is divisible by 10^{k}. The result should not start with the unnecessary leading zero (i.e., zero can start only the number 0, which is required to be written as exactly one digit).

It is guaranteed that the answer exists.


-----Input-----

The only line of the input contains two integer numbers n and k (0 ≤ n ≤ 2 000 000 000, 1 ≤ k ≤ 9).

It is guaranteed that the answer exists. All numbers in the input are written in traditional notation of integers, that is, without any extra leading zeros.


-----Output-----

Print w — the required minimal number of digits to erase. After removing the appropriate w digits from the number n, the result should have a value that is divisible by 10^{k}. The result can start with digit 0 in the single case (the result is zero and written by exactly the only digit 0).


-----Examples-----
Input
30020 3

Output
1

Input
100 9

Output
2

Input
10203049 2

Output
3



-----Note-----

In the example 2 you can remove two digits: 1 and any 0. The result is number 0 which is divisible by any number.","n, k = map(str, input().split())
k = int(k)

count_zeros = 0
to_remove = 0

# Iterate from the end of the number to the beginning
for digit in reversed(n):
    if digit == '0':
        count_zeros += 1
    else:
        to_remove += 1
    # If we have enough zeros, we can stop
    if count_zeros == k:
        break

# If we have enough zeros, print the number of digits removed
if count_zeros == k:
    print(to_remove)
else:
    # If not enough zeros, we need to remove all digits except one
    print(len(n) - 1)
",,False,post,True,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_apps.json
190,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"Salem gave you $n$ sticks with integer positive lengths $a_1, a_2, \ldots, a_n$.

For every stick, you can change its length to any other positive integer length (that is, either shrink or stretch it). The cost of changing the stick's length from $a$ to $b$ is $|a - b|$, where $|x|$ means the absolute value of $x$.

A stick length $a_i$ is called almost good for some integer $t$ if $|a_i - t| \le 1$.

Salem asks you to change the lengths of some sticks (possibly all or none), such that all sticks' lengths are almost good for some positive integer $t$ and the total cost of changing is minimum possible. The value of $t$ is not fixed in advance and you can choose it as any positive integer. 

As an answer, print the value of $t$ and the minimum cost. If there are multiple optimal choices for $t$, print any of them.


-----Input-----

The first line contains a single integer $n$ ($1 \le n \le 1000$) — the number of sticks.

The second line contains $n$ integers $a_i$ ($1 \le a_i \le 100$) — the lengths of the sticks.


-----Output-----

Print the value of $t$ and the minimum possible cost. If there are multiple optimal choices for $t$, print any of them.


-----Examples-----
Input
3
10 1 4

Output
3 7

Input
5
1 1 2 2 3

Output
2 0



-----Note-----

In the first example, we can change $1$ into $2$ and $10$ into $4$ with cost $|1 - 2| + |10 - 4| = 1 + 6 = 7$ and the resulting lengths $[2, 4, 4]$ are almost good for $t = 3$.

In the second example, the sticks lengths are already almost good for $t = 2$, so we don't have to do anything.","n = int(input())
sticks = list(map(int, input().split()))

sticks.sort()

mid = sticks[n // 2]

cost = sum(abs(x - mid) for x in sticks)
t = mid

min_cost = cost
min_t = t

for i in range(mid - 1, 0, -1):
    cost = sum(min(abs(x - i), abs(x - (i + 1))) for x in sticks)
    if cost < min_cost:
        min_cost = cost
        min_t = i

for i in range(mid + 1, 101):
    cost = sum(min(abs(x - i), abs(x - (i - 1))) for x in sticks)
    if cost < min_cost:
        min_cost = cost
        min_t = i

print(min_t, min_cost)
",,False,post,False,True,True,True,False,False,True,True,True,False,False,True,selected_pilot_75_apps.json
190,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Salem gave you $n$ sticks with integer positive lengths $a_1, a_2, \ldots, a_n$.

For every stick, you can change its length to any other positive integer length (that is, either shrink or stretch it). The cost of changing the stick's length from $a$ to $b$ is $|a - b|$, where $|x|$ means the absolute value of $x$.

A stick length $a_i$ is called almost good for some integer $t$ if $|a_i - t| \le 1$.

Salem asks you to change the lengths of some sticks (possibly all or none), such that all sticks' lengths are almost good for some positive integer $t$ and the total cost of changing is minimum possible. The value of $t$ is not fixed in advance and you can choose it as any positive integer. 

As an answer, print the value of $t$ and the minimum cost. If there are multiple optimal choices for $t$, print any of them.


-----Input-----

The first line contains a single integer $n$ ($1 \le n \le 1000$) — the number of sticks.

The second line contains $n$ integers $a_i$ ($1 \le a_i \le 100$) — the lengths of the sticks.


-----Output-----

Print the value of $t$ and the minimum possible cost. If there are multiple optimal choices for $t$, print any of them.


-----Examples-----
Input
3
10 1 4

Output
3 7

Input
5
1 1 2 2 3

Output
2 0



-----Note-----

In the first example, we can change $1$ into $2$ and $10$ into $4$ with cost $|1 - 2| + |10 - 4| = 1 + 6 = 7$ and the resulting lengths $[2, 4, 4]$ are almost good for $t = 3$.

In the second example, the sticks lengths are already almost good for $t = 2$, so we don't have to do anything.","n = int(input())
a = list(map(int, input().split()))

min_cost = float('inf')
best_t = -1

# Try every possible t from 1 to 100
for t in range(1, 101):
    current_cost = 0
    for length in a:
        if length < t - 1:
            current_cost += (t - 1) - length
        elif length > t + 1:
            current_cost += length - (t + 1)
    
    if current_cost < min_cost:
        min_cost = current_cost
        best_t = t

print(best_t, min_cost)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
285,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"Kolya is developing an economy simulator game. His most favourite part of the development process is in-game testing. Once he was entertained by the testing so much, that he found out his game-coin score become equal to 0.

Kolya remembers that at the beginning of the game his game-coin score was equal to n and that he have bought only some houses (for 1 234 567 game-coins each), cars (for 123 456 game-coins each) and computers (for 1 234 game-coins each).

Kolya is now interested, whether he could have spent all of his initial n game-coins buying only houses, cars and computers or there is a bug in the game. Formally, is there a triple of non-negative integers a, b and c such that a × 1 234 567 + b × 123 456 + c × 1 234 = n?

Please help Kolya answer this question.


-----Input-----

The first line of the input contains a single integer n (1 ≤ n ≤ 10^9) — Kolya's initial game-coin score.


-----Output-----

Print ""YES"" (without quotes) if it's possible that Kolya spent all of his initial n coins buying only houses, cars and computers. Otherwise print ""NO"" (without quotes).


-----Examples-----
Input
1359257

Output
YES
Input
17851817

Output
NO


-----Note-----

In the first sample, one of the possible solutions is to buy one house, one car and one computer, spending 1 234 567 + 123 456 + 1234 = 1 359 257 game-coins in total.","n = int(input())
for a in range(n // 1234567 + 1):
    for b in range((n - a * 1234567) // 123456 + 1):
        c = (n - a * 1234567 - b * 123456) // 1234
        if a * 1234567 + b * 123456 + c * 1234 == n:
            print(""YES"")
            exit()
print(""NO"")
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
285,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Kolya is developing an economy simulator game. His most favourite part of the development process is in-game testing. Once he was entertained by the testing so much, that he found out his game-coin score become equal to 0.

Kolya remembers that at the beginning of the game his game-coin score was equal to n and that he have bought only some houses (for 1 234 567 game-coins each), cars (for 123 456 game-coins each) and computers (for 1 234 game-coins each).

Kolya is now interested, whether he could have spent all of his initial n game-coins buying only houses, cars and computers or there is a bug in the game. Formally, is there a triple of non-negative integers a, b and c such that a × 1 234 567 + b × 123 456 + c × 1 234 = n?

Please help Kolya answer this question.


-----Input-----

The first line of the input contains a single integer n (1 ≤ n ≤ 10^9) — Kolya's initial game-coin score.


-----Output-----

Print ""YES"" (without quotes) if it's possible that Kolya spent all of his initial n coins buying only houses, cars and computers. Otherwise print ""NO"" (without quotes).


-----Examples-----
Input
1359257

Output
YES
Input
17851817

Output
NO


-----Note-----

In the first sample, one of the possible solutions is to buy one house, one car and one computer, spending 1 234 567 + 123 456 + 1234 = 1 359 257 game-coins in total.","def can_spend_all_coins(n):
    # Define the cost of houses, cars, and computers
    house_cost = 1234567
    car_cost = 123456
    computer_cost = 1234
    
    # Iterate over the possible number of houses
    for a in range(n // house_cost + 1):
        remaining_after_houses = n - a * house_cost
        # Iterate over the possible number of cars
        for b in range(remaining_after_houses // car_cost + 1):
            remaining_after_cars = remaining_after_houses - b * car_cost
            # Check if the remaining coins can be exactly spent on computers
            if remaining_after_cars % computer_cost == 0:
                return ""YES""
    
    return ""NO""

# Read input
n = int(input().strip())

# Get the result
result = can_spend_all_coins(n)

# Print the result
print(result)
",,True,post,True,True,True,True,True,True,True,True,True,True,False,True,selected_pilot_75_apps.json
224,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"Let's define a function $f(p)$ on a permutation $p$ as follows. Let $g_i$ be the greatest common divisor (GCD) of elements $p_1$, $p_2$, ..., $p_i$ (in other words, it is the GCD of the prefix of length $i$). Then $f(p)$ is the number of distinct elements among $g_1$, $g_2$, ..., $g_n$.

Let $f_{max}(n)$ be the maximum value of $f(p)$ among all permutations $p$ of integers $1$, $2$, ..., $n$.

Given an integers $n$, count the number of permutations $p$ of integers $1$, $2$, ..., $n$, such that $f(p)$ is equal to $f_{max}(n)$. Since the answer may be large, print the remainder of its division by $1000\,000\,007 = 10^9 + 7$.


-----Input-----

The only line contains the integer $n$ ($2 \le n \le 10^6$) — the length of the permutations.


-----Output-----

The only line should contain your answer modulo $10^9+7$.


-----Examples-----
Input
2

Output
1
Input
3

Output
4
Input
6

Output
120


-----Note-----

Consider the second example: these are the permutations of length $3$:  $[1,2,3]$, $f(p)=1$.  $[1,3,2]$, $f(p)=1$.  $[2,1,3]$, $f(p)=2$.  $[2,3,1]$, $f(p)=2$.  $[3,1,2]$, $f(p)=2$.  $[3,2,1]$, $f(p)=2$. 

The maximum value $f_{max}(3) = 2$, and there are $4$ permutations $p$ such that $f(p)=2$.","def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def f_max(n):
    res = 0
    for i in range(1, n+1):
        res = max(res, gcd(res, i))
    return res

def count_permutations(n, f_max_n):
    MOD = 10**9 + 7
    dp = [0]*(f_max_n+1)
    dp[0] = 1
    for i in range(1, n+1):
        for j in range(f_max_n, 0, -1):
            dp[j] += dp[j-1]
            dp[j] %= MOD
    return dp[f_max_n]

n = int(input())
f_max_n = f_max(n)
print(count_permutations(n, f_max_n))
",,False,post,False,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_apps.json
224,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Let's define a function $f(p)$ on a permutation $p$ as follows. Let $g_i$ be the greatest common divisor (GCD) of elements $p_1$, $p_2$, ..., $p_i$ (in other words, it is the GCD of the prefix of length $i$). Then $f(p)$ is the number of distinct elements among $g_1$, $g_2$, ..., $g_n$.

Let $f_{max}(n)$ be the maximum value of $f(p)$ among all permutations $p$ of integers $1$, $2$, ..., $n$.

Given an integers $n$, count the number of permutations $p$ of integers $1$, $2$, ..., $n$, such that $f(p)$ is equal to $f_{max}(n)$. Since the answer may be large, print the remainder of its division by $1000\,000\,007 = 10^9 + 7$.


-----Input-----

The only line contains the integer $n$ ($2 \le n \le 10^6$) — the length of the permutations.


-----Output-----

The only line should contain your answer modulo $10^9+7$.


-----Examples-----
Input
2

Output
1
Input
3

Output
4
Input
6

Output
120


-----Note-----

Consider the second example: these are the permutations of length $3$:  $[1,2,3]$, $f(p)=1$.  $[1,3,2]$, $f(p)=1$.  $[2,1,3]$, $f(p)=2$.  $[2,3,1]$, $f(p)=2$.  $[3,1,2]$, $f(p)=2$.  $[3,2,1]$, $f(p)=2$. 

The maximum value $f_{max}(3) = 2$, and there are $4$ permutations $p$ such that $f(p)=2$.","MOD = 10**9 + 7

def factorial_mod(n, mod):
    result = 1
    for i in range(2, n+1):
        result = (result * i) % mod
    return result

# Read input
n = int(input())

# Compute the result
if n == 2:
    result = 1
else:
    result = factorial_mod(n-1, MOD)

# Print the result
print(result)
",,False,post,False,False,True,True,False,False,False,False,True,False,False,False,selected_pilot_75_apps.json
1,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"An accordion is a string (yes, in the real world accordions are musical instruments, but let's forget about it for a while) which can be represented as a concatenation of: an opening bracket (ASCII code $091$), a colon (ASCII code $058$), some (possibly zero) vertical line characters (ASCII code $124$), another colon, and a closing bracket (ASCII code $093$). The length of the accordion is the number of characters in it.

For example, [::], [:||:] and [:|||:] are accordions having length $4$, $6$ and $7$. (:|:), {:||:}, [:], ]:||:[ are not accordions. 

You are given a string $s$. You want to transform it into an accordion by removing some (possibly zero) characters from it. Note that you may not insert new characters or reorder existing ones. Is it possible to obtain an accordion by removing characters from $s$, and if so, what is the maximum possible length of the result?


-----Input-----

The only line contains one string $s$ ($1 \le |s| \le 500000$). It consists of lowercase Latin letters and characters [, ], : and |.


-----Output-----

If it is not possible to obtain an accordion by removing some characters from $s$, print $-1$. Otherwise print maximum possible length of the resulting accordion.


-----Examples-----
Input
|[a:b:|]

Output
4

Input
|]:[|:]

Output
-1","s = input()
n = len(s)
ind = -1
f = False
for i in range(n):
    if s[i] == '[':
        f = True
    elif s[i] == ':':
        if f:
            ind = i
            break
bind = -1
f = False
for i in range(n-1,-1,-1):
    if s[i] == ']':
        f = True
    elif s[i] == ':':
        if f:
            bind = i
            break
if ind == -1 or bind == -1:
    print(-1)
elif ind >= bind:
    print(-1)
else:
    ans = 4
    for i in range(ind+1,bind):
        if s[i] == '|':
            ans += 1
    print(ans)
",,False,post,True,False,False,True,False,True,False,False,False,False,False,False,selected_pilot_75_apps.json
1,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"An accordion is a string (yes, in the real world accordions are musical instruments, but let's forget about it for a while) which can be represented as a concatenation of: an opening bracket (ASCII code $091$), a colon (ASCII code $058$), some (possibly zero) vertical line characters (ASCII code $124$), another colon, and a closing bracket (ASCII code $093$). The length of the accordion is the number of characters in it.

For example, [::], [:||:] and [:|||:] are accordions having length $4$, $6$ and $7$. (:|:), {:||:}, [:], ]:||:[ are not accordions. 

You are given a string $s$. You want to transform it into an accordion by removing some (possibly zero) characters from it. Note that you may not insert new characters or reorder existing ones. Is it possible to obtain an accordion by removing characters from $s$, and if so, what is the maximum possible length of the result?


-----Input-----

The only line contains one string $s$ ($1 \le |s| \le 500000$). It consists of lowercase Latin letters and characters [, ], : and |.


-----Output-----

If it is not possible to obtain an accordion by removing some characters from $s$, print $-1$. Otherwise print maximum possible length of the resulting accordion.


-----Examples-----
Input
|[a:b:|]

Output
4

Input
|]:[|:]

Output
-1","s = input()
n = len(s)

# Find the first '['
ind = -1
for i in range(n):
    if s[i] == '[':
        ind = i
        break

# Find the last ']'
bind = -1
for i in range(n-1, -1, -1):
    if s[i] == ']':
        bind = i
        break

# Make sure we have a valid '[' and ']' and they are in correct order
if ind == -1 or bind == -1 or ind >= bind:
    print(-1)
else:
    # Find the first ':' after the first '['
    start_colon = -1
    for i in range(ind + 1, bind):
        if s[i] == ':':
            start_colon = i
            break
    
    # Find the last ':' before the last ']'
    end_colon = -1
    for i in range(bind - 1, ind, -1):
        if s[i] == ':':
            end_colon = i
            break
    
    # Make sure we have a valid ':' pair and they are in correct order
    if start_colon == -1 or end_colon == -1 or start_colon >= end_colon:
        print(-1)
    else:
        # Count '|' characters between the first ':' and the last ':'
        pipe_count = 0
        for i in range(start_colon + 1, end_colon):
            if s[i] == '|':
                pipe_count += 1
        
        # The length of the accordion is 4 (for '[::]') plus the number of '|' characters
        result = 4 + pipe_count
        print(result)
",,False,post,True,True,False,True,False,False,True,True,True,False,True,True,selected_pilot_75_apps.json
132,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"There is a beautiful garden of stones in Innopolis.

Its most beautiful place is the $n$ piles with stones numbered from $1$ to $n$.

EJOI participants have visited this place twice. 

When they first visited it, the number of stones in piles was $x_1, x_2, \ldots, x_n$, correspondingly. One of the participants wrote down this sequence in a notebook. 

They visited it again the following day, and the number of stones in piles was equal to $y_1, y_2, \ldots, y_n$. One of the participants also wrote it down in a notebook.

It is well known that every member of the EJOI jury during the night either sits in the room $108$ or comes to the place with stones. Each jury member who comes there either takes one stone for himself or moves one stone from one pile to another. We can assume that there is an unlimited number of jury members. No one except the jury goes to the place with stones at night.

Participants want to know whether their notes can be correct or they are sure to have made a mistake.


-----Input-----

The first line of the input file contains a single integer $n$, the number of piles with stones in the garden ($1 \leq n \leq 50$).

The second line contains $n$ integers separated by spaces $x_1, x_2, \ldots, x_n$, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the first time ($0 \leq x_i \leq 1000$).

The third line contains $n$ integers separated by spaces $y_1, y_2, \ldots, y_n$, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the second time ($0 \leq y_i \leq 1000$).


-----Output-----

If the records can be consistent output ""Yes"", otherwise output ""No"" (quotes for clarity).


-----Examples-----
Input
5
1 2 3 4 5
2 1 4 3 5

Output
Yes

Input
5
1 1 1 1 1
1 0 1 0 1

Output
Yes

Input
3
2 3 9
1 7 9

Output
No



-----Note-----

In the first example, the following could have happened during the night: one of the jury members moved one stone from the second pile to the first pile, and the other jury member moved one stone from the fourth pile to the third pile.

In the second example, the jury took stones from the second and fourth piles.

It can be proved that it is impossible for the jury members to move and took stones to convert the first array into the second array.","n = int(input())
x = list(map(int, input().split()))
y = list(map(int, input().split()))

if sum(x) != sum(y):
    print(""No"")
else:
    x.sort()
    y.sort()
    if x == y:
        print(""Yes"")
    else:
        print(""No"")
",,False,post,False,False,False,True,False,False,False,False,False,False,False,True,selected_pilot_75_apps.json
132,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"There is a beautiful garden of stones in Innopolis.

Its most beautiful place is the $n$ piles with stones numbered from $1$ to $n$.

EJOI participants have visited this place twice. 

When they first visited it, the number of stones in piles was $x_1, x_2, \ldots, x_n$, correspondingly. One of the participants wrote down this sequence in a notebook. 

They visited it again the following day, and the number of stones in piles was equal to $y_1, y_2, \ldots, y_n$. One of the participants also wrote it down in a notebook.

It is well known that every member of the EJOI jury during the night either sits in the room $108$ or comes to the place with stones. Each jury member who comes there either takes one stone for himself or moves one stone from one pile to another. We can assume that there is an unlimited number of jury members. No one except the jury goes to the place with stones at night.

Participants want to know whether their notes can be correct or they are sure to have made a mistake.


-----Input-----

The first line of the input file contains a single integer $n$, the number of piles with stones in the garden ($1 \leq n \leq 50$).

The second line contains $n$ integers separated by spaces $x_1, x_2, \ldots, x_n$, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the first time ($0 \leq x_i \leq 1000$).

The third line contains $n$ integers separated by spaces $y_1, y_2, \ldots, y_n$, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the second time ($0 \leq y_i \leq 1000$).


-----Output-----

If the records can be consistent output ""Yes"", otherwise output ""No"" (quotes for clarity).


-----Examples-----
Input
5
1 2 3 4 5
2 1 4 3 5

Output
Yes

Input
5
1 1 1 1 1
1 0 1 0 1

Output
Yes

Input
3
2 3 9
1 7 9

Output
No



-----Note-----

In the first example, the following could have happened during the night: one of the jury members moved one stone from the second pile to the first pile, and the other jury member moved one stone from the fourth pile to the third pile.

In the second example, the jury took stones from the second and fourth piles.

It can be proved that it is impossible for the jury members to move and took stones to convert the first array into the second array.","n = int(input())
x = list(map(int, input().split()))
y = list(map(int, input().split()))

total_x = sum(x)
total_y = sum(y)

# Check if the total number of stones has decreased or remained the same
if total_y > total_x:
    print(""No"")
else:
    print(""Yes"")
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
217,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"You are given a sequence a consisting of n integers. You may partition this sequence into two sequences b and c in such a way that every element belongs exactly to one of these sequences. 

Let B be the sum of elements belonging to b, and C be the sum of elements belonging to c (if some of these sequences is empty, then its sum is 0). What is the maximum possible value of B - C?


-----Input-----

The first line contains one integer n (1 ≤ n ≤ 100) — the number of elements in a.

The second line contains n integers a_1, a_2, ..., a_{n} ( - 100 ≤ a_{i} ≤ 100) — the elements of sequence a.


-----Output-----

Print the maximum possible value of B - C, where B is the sum of elements of sequence b, and C is the sum of elements of sequence c.


-----Examples-----
Input
3
1 -2 0

Output
3

Input
6
16 23 16 15 42 8

Output
120



-----Note-----

In the first example we may choose b = {1, 0}, c = { - 2}. Then B = 1, C =  - 2, B - C = 3.

In the second example we choose b = {16, 23, 16, 15, 42, 8}, c = {} (an empty sequence). Then B = 120, C = 0, B - C = 120.","n = int(input())
a = list(map(int, input().split()))
a.sort(reverse=True)
b, c = 0, 0
for i in range(n):
    if i % 2 == 0:
        b += a[i]
    else:
        c += a[i]
print(b - c)
",,False,post,False,True,False,False,False,False,True,True,False,False,False,False,selected_pilot_75_apps.json
217,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"You are given a sequence a consisting of n integers. You may partition this sequence into two sequences b and c in such a way that every element belongs exactly to one of these sequences. 

Let B be the sum of elements belonging to b, and C be the sum of elements belonging to c (if some of these sequences is empty, then its sum is 0). What is the maximum possible value of B - C?


-----Input-----

The first line contains one integer n (1 ≤ n ≤ 100) — the number of elements in a.

The second line contains n integers a_1, a_2, ..., a_{n} ( - 100 ≤ a_{i} ≤ 100) — the elements of sequence a.


-----Output-----

Print the maximum possible value of B - C, where B is the sum of elements of sequence b, and C is the sum of elements of sequence c.


-----Examples-----
Input
3
1 -2 0

Output
3

Input
6
16 23 16 15 42 8

Output
120



-----Note-----

In the first example we may choose b = {1, 0}, c = { - 2}. Then B = 1, C =  - 2, B - C = 3.

In the second example we choose b = {16, 23, 16, 15, 42, 8}, c = {} (an empty sequence). Then B = 120, C = 0, B - C = 120.","# Read the input values
n = int(input())
a = list(map(int, input().split()))

# Calculate the maximum possible value of B - C
# To maximize B - C, we should include all positive numbers in B and all negative numbers in C
B = sum(x for x in a if x > 0)
C = sum(x for x in a if x < 0)

# The maximum value of B - C
result = B - C

# Print the result
print(result)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
296,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"You are given a positive integer $n$.

Find a sequence of fractions $\frac{a_i}{b_i}$, $i = 1 \ldots k$ (where $a_i$ and $b_i$ are positive integers) for some $k$ such that:

$$ \begin{cases} \text{$b_i$ divides $n$, $1 < b_i < n$ for $i = 1 \ldots k$} \\ \text{$1 \le a_i < b_i$ for $i = 1 \ldots k$} \\ \text{$\sum\limits_{i=1}^k \frac{a_i}{b_i} = 1 - \frac{1}{n}$} \end{cases} $$


-----Input-----

The input consists of a single integer $n$ ($2 \le n \le 10^9$).


-----Output-----

In the first line print ""YES"" if there exists such a sequence of fractions or ""NO"" otherwise.

If there exists such a sequence, next lines should contain a description of the sequence in the following format.

The second line should contain integer $k$ ($1 \le k \le 100\,000$) — the number of elements in the sequence. It is guaranteed that if such a sequence exists, then there exists a sequence of length at most $100\,000$.

Next $k$ lines should contain fractions of the sequence with two integers $a_i$ and $b_i$ on each line.


-----Examples-----
Input
2

Output
NO

Input
6

Output
YES
2
1 2
1 3



-----Note-----

In the second example there is a sequence $\frac{1}{2}, \frac{1}{3}$ such that $\frac{1}{2} + \frac{1}{3} = 1 - \frac{1}{6}$.","n = int(input())
if n == 2:
    print(""NO"")
else:
    print(""YES"")
    k = 2
    print(k)
    print(""1"", n // 2)
    print(""1"", n)
",,False,post,False,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_apps.json
296,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"You are given a positive integer $n$.

Find a sequence of fractions $\frac{a_i}{b_i}$, $i = 1 \ldots k$ (where $a_i$ and $b_i$ are positive integers) for some $k$ such that:

$$ \begin{cases} \text{$b_i$ divides $n$, $1 < b_i < n$ for $i = 1 \ldots k$} \\ \text{$1 \le a_i < b_i$ for $i = 1 \ldots k$} \\ \text{$\sum\limits_{i=1}^k \frac{a_i}{b_i} = 1 - \frac{1}{n}$} \end{cases} $$


-----Input-----

The input consists of a single integer $n$ ($2 \le n \le 10^9$).


-----Output-----

In the first line print ""YES"" if there exists such a sequence of fractions or ""NO"" otherwise.

If there exists such a sequence, next lines should contain a description of the sequence in the following format.

The second line should contain integer $k$ ($1 \le k \le 100\,000$) — the number of elements in the sequence. It is guaranteed that if such a sequence exists, then there exists a sequence of length at most $100\,000$.

Next $k$ lines should contain fractions of the sequence with two integers $a_i$ and $b_i$ on each line.


-----Examples-----
Input
2

Output
NO

Input
6

Output
YES
2
1 2
1 3



-----Note-----

In the second example there is a sequence $\frac{1}{2}, \frac{1}{3}$ such that $\frac{1}{2} + \frac{1}{3} = 1 - \frac{1}{6}$.","import math

def find_sequence(n):
    if n <= 2:
        return ""NO""
    
    divisors = []
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            divisors.append(i)
            if i != n // i:
                divisors.append(n // i)
    
    if not divisors:
        return ""NO""
    
    k = len(divisors)
    fractions = [(1, d) for d in divisors]
    
    return f""YES\n{k}\n"" + ""\n"".join(f""{a} {b}"" for a, b in fractions)

# Reading input
n = int(input().strip())
result = find_sequence(n)
print(result)
",,False,post,False,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_apps.json
41,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"Is it rated?

Here it is. The Ultimate Question of Competitive Programming, Codeforces, and Everything. And you are here to answer it.

Another Codeforces round has been conducted. No two participants have the same number of points. For each participant, from the top to the bottom of the standings, their rating before and after the round is known.

It's known that if at least one participant's rating has changed, then the round was rated for sure.

It's also known that if the round was rated and a participant with lower rating took a better place in the standings than a participant with higher rating, then at least one round participant's rating has changed.

In this problem, you should not make any other assumptions about the rating system.

Determine if the current round is rated, unrated, or it's impossible to determine whether it is rated of not.


-----Input-----

The first line contains a single integer n (2 ≤ n ≤ 1000) — the number of round participants.

Each of the next n lines contains two integers a_{i} and b_{i} (1 ≤ a_{i}, b_{i} ≤ 4126) — the rating of the i-th participant before and after the round, respectively. The participants are listed in order from the top to the bottom of the standings.


-----Output-----

If the round is rated for sure, print ""rated"". If the round is unrated for sure, print ""unrated"". If it's impossible to determine whether the round is rated or not, print ""maybe"".


-----Examples-----
Input
6
3060 3060
2194 2194
2876 2903
2624 2624
3007 2991
2884 2884

Output
rated

Input
4
1500 1500
1300 1300
1200 1200
1400 1400

Output
unrated

Input
5
3123 3123
2777 2777
2246 2246
2246 2246
1699 1699

Output
maybe



-----Note-----

In the first example, the ratings of the participants in the third and fifth places have changed, therefore, the round was rated.

In the second example, no one's rating has changed, but the participant in the second place has lower rating than the participant in the fourth place. Therefore, if the round was rated, someone's rating would've changed for sure.

In the third example, no one's rating has changed, and the participants took places in non-increasing order of their rating. Therefore, it's impossible to determine whether the round is rated or not.","n = int(input())
ratings_before = []
ratings_after = []
for _ in range(n):
    a, b = map(int, input().split())
    ratings_before.append(a)
    ratings_after.append(b)

rated = False
unrated = True
maybe = True

for i in range(n):
    for j in range(i+1, n):
        if ratings_before[i] < ratings_before[j] and ratings_after[i] > ratings_after[j]:
            unrated = False
            break
    if not unrated:
        break

for i in range(n):
    if ratings_before[i] != ratings_after[i]:
        rated = True
        break

if rated:
    print(""rated"")
elif unrated:
    print(""unrated"")
else:
    print(""maybe"")
",,True,post,False,True,True,False,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
41,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Is it rated?

Here it is. The Ultimate Question of Competitive Programming, Codeforces, and Everything. And you are here to answer it.

Another Codeforces round has been conducted. No two participants have the same number of points. For each participant, from the top to the bottom of the standings, their rating before and after the round is known.

It's known that if at least one participant's rating has changed, then the round was rated for sure.

It's also known that if the round was rated and a participant with lower rating took a better place in the standings than a participant with higher rating, then at least one round participant's rating has changed.

In this problem, you should not make any other assumptions about the rating system.

Determine if the current round is rated, unrated, or it's impossible to determine whether it is rated of not.


-----Input-----

The first line contains a single integer n (2 ≤ n ≤ 1000) — the number of round participants.

Each of the next n lines contains two integers a_{i} and b_{i} (1 ≤ a_{i}, b_{i} ≤ 4126) — the rating of the i-th participant before and after the round, respectively. The participants are listed in order from the top to the bottom of the standings.


-----Output-----

If the round is rated for sure, print ""rated"". If the round is unrated for sure, print ""unrated"". If it's impossible to determine whether the round is rated or not, print ""maybe"".


-----Examples-----
Input
6
3060 3060
2194 2194
2876 2903
2624 2624
3007 2991
2884 2884

Output
rated

Input
4
1500 1500
1300 1300
1200 1200
1400 1400

Output
unrated

Input
5
3123 3123
2777 2777
2246 2246
2246 2246
1699 1699

Output
maybe



-----Note-----

In the first example, the ratings of the participants in the third and fifth places have changed, therefore, the round was rated.

In the second example, no one's rating has changed, but the participant in the second place has lower rating than the participant in the fourth place. Therefore, if the round was rated, someone's rating would've changed for sure.

In the third example, no one's rating has changed, and the participants took places in non-increasing order of their rating. Therefore, it's impossible to determine whether the round is rated or not.","# Read the number of participants
n = int(input())

# Initialize a list to store the ratings before and after the round
ratings = []

# Flag to determine if the round is rated
is_rated = False

# Flag to determine if the round is unrated
is_unrated = False

# Read the ratings before and after the round for each participant
for _ in range(n):
    a, b = map(int, input().split())
    ratings.append((a, b))
    if a != b:
        is_rated = True

# If the round is not rated, check for unrated condition
if not is_rated:
    for i in range(1, n):
        if ratings[i-1][0] < ratings[i][0]:
            is_unrated = True
            break

# Determine the output based on the flags
if is_rated:
    print(""rated"")
elif is_unrated:
    print(""unrated"")
else:
    print(""maybe"")
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
255,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"You are given a string $s$ of length $n$ consisting of lowercase Latin letters. You may apply some operations to this string: in one operation you can delete some contiguous substring of this string, if all letters in the substring you delete are equal. For example, after deleting substring bbbb from string abbbbaccdd we get the string aaccdd.

Calculate the minimum number of operations to delete the whole string $s$.


-----Input-----

The first line contains one integer $n$ ($1 \le n \le 500$) — the length of string $s$.

The second line contains the string $s$ ($|s| = n$) consisting of lowercase Latin letters.


-----Output-----

Output a single integer — the minimal number of operation to delete string $s$.


-----Examples-----
Input
5
abaca

Output
3
Input
8
abcddcba

Output
4","n = int(input())
s = input()
ans = 1
for i in range(1, n):
    if s[i] != s[i-1]:
        ans += 1
print(ans)
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
255,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"You are given a string $s$ of length $n$ consisting of lowercase Latin letters. You may apply some operations to this string: in one operation you can delete some contiguous substring of this string, if all letters in the substring you delete are equal. For example, after deleting substring bbbb from string abbbbaccdd we get the string aaccdd.

Calculate the minimum number of operations to delete the whole string $s$.


-----Input-----

The first line contains one integer $n$ ($1 \le n \le 500$) — the length of string $s$.

The second line contains the string $s$ ($|s| = n$) consisting of lowercase Latin letters.


-----Output-----

Output a single integer — the minimal number of operation to delete string $s$.


-----Examples-----
Input
5
abaca

Output
3
Input
8
abcddcba

Output
4","n = int(input())
s = input()

# Initialize a counter for the operations
operations = 1

# Iterate through the string, and count the number of changes in character
for i in range(1, n):
    if s[i] != s[i - 1]:
        operations += 1

print(operations)
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
188,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"Petya and Vasya decided to play a game. They have n cards (n is an even number). A single integer is written on each card.

Before the game Petya will choose an integer and after that Vasya will choose another integer (different from the number that Petya chose). During the game each player takes all the cards with number he chose. For example, if Petya chose number 5 before the game he will take all cards on which 5 is written and if Vasya chose number 10 before the game he will take all cards on which 10 is written.

The game is considered fair if Petya and Vasya can take all n cards, and the number of cards each player gets is the same.

Determine whether Petya and Vasya can choose integer numbers before the game so that the game is fair. 


-----Input-----

The first line contains a single integer n (2 ≤ n ≤ 100) — number of cards. It is guaranteed that n is an even number.

The following n lines contain a sequence of integers a_1, a_2, ..., a_{n} (one integer per line, 1 ≤ a_{i} ≤ 100) — numbers written on the n cards.


-----Output-----

If it is impossible for Petya and Vasya to choose numbers in such a way that the game will be fair, print ""NO"" (without quotes) in the first line. In this case you should not print anything more.

In the other case print ""YES"" (without quotes) in the first line. In the second line print two distinct integers — number that Petya should choose and the number that Vasya should choose to make the game fair. If there are several solutions, print any of them.


-----Examples-----
Input
4
11
27
27
11

Output
YES
11 27

Input
2
6
6

Output
NO

Input
6
10
20
30
20
10
20

Output
NO

Input
6
1
1
2
2
3
3

Output
NO



-----Note-----

In the first example the game will be fair if, for example, Petya chooses number 11, and Vasya chooses number 27. Then the will take all cards — Petya will take cards 1 and 4, and Vasya will take cards 2 and 3. Thus, each of them will take exactly two cards.

In the second example fair game is impossible because the numbers written on the cards are equal, but the numbers that Petya and Vasya should choose should be distinct.

In the third example it is impossible to take all cards. Petya and Vasya can take at most five cards — for example, Petya can choose number 10 and Vasya can choose number 20. But for the game to be fair it is necessary to take 6 cards.","n = int(input())
a = []
for i in range(n):
    a.append(int(input()))
d = {}
for i in a:
    if i in d:
        d[i] += 1
    else:
        d[i] = 1
c = 0
a1, a2 = -1, -1
for i in d:
    if d[i] == n//2:
        if c == 0:
            a1 = i
            c += 1
        else:
            a2 = i
            break
if a1 != -1 and a2 != -1:
    print(""YES"")
    print(a1, a2)
else:
    print(""NO"")",,True,post,True,False,True,True,True,True,False,False,True,True,True,True,selected_pilot_75_apps.json
188,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Petya and Vasya decided to play a game. They have n cards (n is an even number). A single integer is written on each card.

Before the game Petya will choose an integer and after that Vasya will choose another integer (different from the number that Petya chose). During the game each player takes all the cards with number he chose. For example, if Petya chose number 5 before the game he will take all cards on which 5 is written and if Vasya chose number 10 before the game he will take all cards on which 10 is written.

The game is considered fair if Petya and Vasya can take all n cards, and the number of cards each player gets is the same.

Determine whether Petya and Vasya can choose integer numbers before the game so that the game is fair. 


-----Input-----

The first line contains a single integer n (2 ≤ n ≤ 100) — number of cards. It is guaranteed that n is an even number.

The following n lines contain a sequence of integers a_1, a_2, ..., a_{n} (one integer per line, 1 ≤ a_{i} ≤ 100) — numbers written on the n cards.


-----Output-----

If it is impossible for Petya and Vasya to choose numbers in such a way that the game will be fair, print ""NO"" (without quotes) in the first line. In this case you should not print anything more.

In the other case print ""YES"" (without quotes) in the first line. In the second line print two distinct integers — number that Petya should choose and the number that Vasya should choose to make the game fair. If there are several solutions, print any of them.


-----Examples-----
Input
4
11
27
27
11

Output
YES
11 27

Input
2
6
6

Output
NO

Input
6
10
20
30
20
10
20

Output
NO

Input
6
1
1
2
2
3
3

Output
NO



-----Note-----

In the first example the game will be fair if, for example, Petya chooses number 11, and Vasya chooses number 27. Then the will take all cards — Petya will take cards 1 and 4, and Vasya will take cards 2 and 3. Thus, each of them will take exactly two cards.

In the second example fair game is impossible because the numbers written on the cards are equal, but the numbers that Petya and Vasya should choose should be distinct.

In the third example it is impossible to take all cards. Petya and Vasya can take at most five cards — for example, Petya can choose number 10 and Vasya can choose number 20. But for the game to be fair it is necessary to take 6 cards.","n = int(input())
cards = [int(input()) for _ in range(n)]

from collections import Counter

# Count the frequency of each number on the cards
count = Counter(cards)

# Find all unique numbers and sort them by their frequency
unique_numbers = sorted(count.keys(), key=lambda x: count[x])

# Check if we can find two distinct numbers such that each appears n/2 times
if len(unique_numbers) < 2:
    print(""NO"")
else:
    # Check if the two most frequent numbers each appear exactly n/2 times
    if count[unique_numbers[-1]] == n // 2 and count[unique_numbers[-2]] == n // 2:
        print(""YES"")
        print(unique_numbers[-1], unique_numbers[-2])
    else:
        print(""NO"")
",,False,post,True,False,True,True,False,False,False,False,False,False,False,False,selected_pilot_75_apps.json
216,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"Polycarp loves lowercase letters and dislikes uppercase ones. Once he got a string s consisting only of lowercase and uppercase Latin letters.

Let A be a set of positions in the string. Let's call it pretty if following conditions are met:  letters on positions from A in the string are all distinct and lowercase;  there are no uppercase letters in the string which are situated between positions from A (i.e. there is no such j that s[j] is an uppercase letter, and a_1 < j < a_2 for some a_1 and a_2 from A). 

Write a program that will determine the maximum number of elements in a pretty set of positions.


-----Input-----

The first line contains a single integer n (1 ≤ n ≤ 200) — length of string s.

The second line contains a string s consisting of lowercase and uppercase Latin letters.


-----Output-----

Print maximum number of elements in pretty set of positions for string s.


-----Examples-----
Input
11
aaaaBaabAbA

Output
2

Input
12
zACaAbbaazzC

Output
3

Input
3
ABC

Output
0



-----Note-----

In the first example the desired positions might be 6 and 8 or 7 and 8. Positions 6 and 7 contain letters 'a', position 8 contains letter 'b'. The pair of positions 1 and 8 is not suitable because there is an uppercase letter 'B' between these position.

In the second example desired positions can be 7, 8 and 11. There are other ways to choose pretty set consisting of three elements.

In the third example the given string s does not contain any lowercase letters, so the answer is 0.","n = int(input())
s = input()
lowercase = [i for i, c in enumerate(s) if c.islower()]
print(len(lowercase))
",,False,post,False,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_apps.json
216,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Polycarp loves lowercase letters and dislikes uppercase ones. Once he got a string s consisting only of lowercase and uppercase Latin letters.

Let A be a set of positions in the string. Let's call it pretty if following conditions are met:  letters on positions from A in the string are all distinct and lowercase;  there are no uppercase letters in the string which are situated between positions from A (i.e. there is no such j that s[j] is an uppercase letter, and a_1 < j < a_2 for some a_1 and a_2 from A). 

Write a program that will determine the maximum number of elements in a pretty set of positions.


-----Input-----

The first line contains a single integer n (1 ≤ n ≤ 200) — length of string s.

The second line contains a string s consisting of lowercase and uppercase Latin letters.


-----Output-----

Print maximum number of elements in pretty set of positions for string s.


-----Examples-----
Input
11
aaaaBaabAbA

Output
2

Input
12
zACaAbbaazzC

Output
3

Input
3
ABC

Output
0



-----Note-----

In the first example the desired positions might be 6 and 8 or 7 and 8. Positions 6 and 7 contain letters 'a', position 8 contains letter 'b'. The pair of positions 1 and 8 is not suitable because there is an uppercase letter 'B' between these position.

In the second example desired positions can be 7, 8 and 11. There are other ways to choose pretty set consisting of three elements.

In the third example the given string s does not contain any lowercase letters, so the answer is 0.","n = int(input())
s = input()

max_count = 0
current_set = set()
current_count = 0

for char in s:
    if char.islower():
        if char not in current_set:
            current_set.add(char)
            current_count += 1
    else:
        max_count = max(max_count, current_count)
        current_set.clear()
        current_count = 0

# Check the count after the last segment
max_count = max(max_count, current_count)

print(max_count)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
167,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"There is a matrix A of size x × y filled with integers. For every $i \in [ 1 . . x ]$, $j \in [ 1 . . y ]$ A_{i}, j = y(i - 1) + j. Obviously, every integer from [1..xy] occurs exactly once in this matrix. 

You have traversed some path in this matrix. Your path can be described as a sequence of visited cells a_1, a_2, ..., a_{n} denoting that you started in the cell containing the number a_1, then moved to the cell with the number a_2, and so on.

From the cell located in i-th line and j-th column (we denote this cell as (i, j)) you can move into one of the following cells: (i + 1, j) — only if i < x;  (i, j + 1) — only if j < y;  (i - 1, j) — only if i > 1;  (i, j - 1) — only if j > 1.

Notice that making a move requires you to go to an adjacent cell. It is not allowed to stay in the same cell. You don't know x and y exactly, but you have to find any possible values for these numbers such that you could start in the cell containing the integer a_1, then move to the cell containing a_2 (in one step), then move to the cell containing a_3 (also in one step) and so on. Can you choose x and y so that they don't contradict with your sequence of moves?


-----Input-----

The first line contains one integer number n (1 ≤ n ≤ 200000) — the number of cells you visited on your path (if some cell is visited twice, then it's listed twice).

The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — the integers in the cells on your path.


-----Output-----

If all possible values of x and y such that 1 ≤ x, y ≤ 10^9 contradict with the information about your path, print NO.

Otherwise, print YES in the first line, and in the second line print the values x and y such that your path was possible with such number of lines and columns in the matrix. Remember that they must be positive integers not exceeding 10^9.


-----Examples-----
Input
8
1 2 3 6 9 8 5 2

Output
YES
3 3

Input
6
1 2 1 2 5 3

Output
NO

Input
2
1 10

Output
YES
4 9



-----Note-----

The matrix and the path on it in the first test looks like this: [Image] 

Also there exist multiple correct answers for both the first and the third examples.","n = int(input())
a = list(map(int, input().split()))
dx = [0, 1, 0, -1]
dy = [1, 0, -1, 0]

def check(x, y):
    px, py = 0, 0
    for v in a:
        nx, ny = (v - 1) // y, (v - 1) % y
        if abs(nx - px) + abs(ny - py) != 1:
            return False
        px, py = nx, ny
    return True

for x in range(1, 1000001):
    for y in range(1, 1000001):
        if x * y > max(a):
            break
        if all(1 <= v <= x * y for v in a) and check(x, y):
            print(""YES"")
            print(x, y)
            exit()
print(""NO"")
",,False,post,False,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_apps.json
35,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"It's New Year's Eve soon, so Ivan decided it's high time he started setting the table. Ivan has bought two cakes and cut them into pieces: the first cake has been cut into a pieces, and the second one — into b pieces.

Ivan knows that there will be n people at the celebration (including himself), so Ivan has set n plates for the cakes. Now he is thinking about how to distribute the cakes between the plates. Ivan wants to do it in such a way that all following conditions are met:  Each piece of each cake is put on some plate;  Each plate contains at least one piece of cake;  No plate contains pieces of both cakes. 

To make his guests happy, Ivan wants to distribute the cakes in such a way that the minimum number of pieces on the plate is maximized. Formally, Ivan wants to know the maximum possible number x such that he can distribute the cakes according to the aforementioned conditions, and each plate will contain at least x pieces of cake.

Help Ivan to calculate this number x!


-----Input-----

The first line contains three integers n, a and b (1 ≤ a, b ≤ 100, 2 ≤ n ≤ a + b) — the number of plates, the number of pieces of the first cake, and the number of pieces of the second cake, respectively.


-----Output-----

Print the maximum possible number x such that Ivan can distribute the cake in such a way that each plate will contain at least x pieces of cake.


-----Examples-----
Input
5 2 3

Output
1

Input
4 7 10

Output
3



-----Note-----

In the first example there is only one way to distribute cakes to plates, all of them will have 1 cake on it.

In the second example you can have two plates with 3 and 4 pieces of the first cake and two plates both with 5 pieces of the second cake. Minimal number of pieces is 3.","n, a, b = map(int, input().split())
x = min(n, a, b)
while True:
    if a >= x and b >= x and (a - x) + (b - x) >= x:
        break
    x -= 1
print(x)
",,True,post,False,False,False,False,False,True,True,True,True,True,True,True,selected_pilot_75_apps.json
35,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"It's New Year's Eve soon, so Ivan decided it's high time he started setting the table. Ivan has bought two cakes and cut them into pieces: the first cake has been cut into a pieces, and the second one — into b pieces.

Ivan knows that there will be n people at the celebration (including himself), so Ivan has set n plates for the cakes. Now he is thinking about how to distribute the cakes between the plates. Ivan wants to do it in such a way that all following conditions are met:  Each piece of each cake is put on some plate;  Each plate contains at least one piece of cake;  No plate contains pieces of both cakes. 

To make his guests happy, Ivan wants to distribute the cakes in such a way that the minimum number of pieces on the plate is maximized. Formally, Ivan wants to know the maximum possible number x such that he can distribute the cakes according to the aforementioned conditions, and each plate will contain at least x pieces of cake.

Help Ivan to calculate this number x!


-----Input-----

The first line contains three integers n, a and b (1 ≤ a, b ≤ 100, 2 ≤ n ≤ a + b) — the number of plates, the number of pieces of the first cake, and the number of pieces of the second cake, respectively.


-----Output-----

Print the maximum possible number x such that Ivan can distribute the cake in such a way that each plate will contain at least x pieces of cake.


-----Examples-----
Input
5 2 3

Output
1

Input
4 7 10

Output
3



-----Note-----

In the first example there is only one way to distribute cakes to plates, all of them will have 1 cake on it.

In the second example you can have two plates with 3 and 4 pieces of the first cake and two plates both with 5 pieces of the second cake. Minimal number of pieces is 3.","def max_min_pieces(n, a, b):
    low, high = 1, min(a, b) + 1

    def can_distribute(x):
        return (a // x) + (b // x) >= n

    while low < high:
        mid = (low + high) // 2
        if can_distribute(mid):
            low = mid + 1
        else:
            high = mid
    
    return low - 1

# Read input values
n, a, b = map(int, input().split())

# Compute and print the result
print(max_min_pieces(n, a, b))
",,False,post,True,False,False,True,False,False,False,False,False,True,False,False,selected_pilot_75_apps.json
254,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"Mishka is decorating the Christmas tree. He has got three garlands, and all of them will be put on the tree. After that Mishka will switch these garlands on.

When a garland is switched on, it periodically changes its state — sometimes it is lit, sometimes not. Formally, if i-th garland is switched on during x-th second, then it is lit only during seconds x, x + k_{i}, x + 2k_{i}, x + 3k_{i} and so on.

Mishka wants to switch on the garlands in such a way that during each second after switching the garlands on there would be at least one lit garland. Formally, Mishka wants to choose three integers x_1, x_2 and x_3 (not necessarily distinct) so that he will switch on the first garland during x_1-th second, the second one — during x_2-th second, and the third one — during x_3-th second, respectively, and during each second starting from max(x_1, x_2, x_3) at least one garland will be lit.

Help Mishka by telling him if it is possible to do this!


-----Input-----

The first line contains three integers k_1, k_2 and k_3 (1 ≤ k_{i} ≤ 1500) — time intervals of the garlands.


-----Output-----

If Mishka can choose moments of time to switch on the garlands in such a way that each second after switching the garlands on at least one garland will be lit, print YES.

Otherwise, print NO.


-----Examples-----
Input
2 2 3

Output
YES

Input
4 2 3

Output
NO



-----Note-----

In the first example Mishka can choose x_1 = 1, x_2 = 2, x_3 = 1. The first garland will be lit during seconds 1, 3, 5, 7, ..., the second — 2, 4, 6, 8, ..., which already cover all the seconds after the 2-nd one. It doesn't even matter what x_3 is chosen. Our choice will lead third to be lit during seconds 1, 4, 7, 10, ..., though.

In the second example there is no way to choose such moments of time, there always be some seconds when no garland is lit.","k1, k2, k3 = map(int, input().split())

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

lcm = k1 * k2 * k3 // (gcd(k1, k2) * gcd(k2, k3) * gcd(k1, k3))

if lcm % k1 == 0 and lcm % k2 == 0 and lcm % k3 == 0:
    print(""YES"")
else:
    print(""NO"")
",,False,post,False,False,False,False,False,False,True,False,False,False,False,False,selected_pilot_75_apps.json
254,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Mishka is decorating the Christmas tree. He has got three garlands, and all of them will be put on the tree. After that Mishka will switch these garlands on.

When a garland is switched on, it periodically changes its state — sometimes it is lit, sometimes not. Formally, if i-th garland is switched on during x-th second, then it is lit only during seconds x, x + k_{i}, x + 2k_{i}, x + 3k_{i} and so on.

Mishka wants to switch on the garlands in such a way that during each second after switching the garlands on there would be at least one lit garland. Formally, Mishka wants to choose three integers x_1, x_2 and x_3 (not necessarily distinct) so that he will switch on the first garland during x_1-th second, the second one — during x_2-th second, and the third one — during x_3-th second, respectively, and during each second starting from max(x_1, x_2, x_3) at least one garland will be lit.

Help Mishka by telling him if it is possible to do this!


-----Input-----

The first line contains three integers k_1, k_2 and k_3 (1 ≤ k_{i} ≤ 1500) — time intervals of the garlands.


-----Output-----

If Mishka can choose moments of time to switch on the garlands in such a way that each second after switching the garlands on at least one garland will be lit, print YES.

Otherwise, print NO.


-----Examples-----
Input
2 2 3

Output
YES

Input
4 2 3

Output
NO



-----Note-----

In the first example Mishka can choose x_1 = 1, x_2 = 2, x_3 = 1. The first garland will be lit during seconds 1, 3, 5, 7, ..., the second — 2, 4, 6, 8, ..., which already cover all the seconds after the 2-nd one. It doesn't even matter what x_3 is chosen. Our choice will lead third to be lit during seconds 1, 4, 7, 10, ..., though.

In the second example there is no way to choose such moments of time, there always be some seconds when no garland is lit.","import math

# Read input
k1, k2, k3 = map(int, input().split())

# Calculate the GCD of the three intervals
gcd_k1_k2 = math.gcd(k1, k2)
gcd_all = math.gcd(gcd_k1_k2, k3)

# If the GCD is 1, it is possible to cover every second
if gcd_all == 1:
    print(""YES"")
else:
    print(""NO"")
",,False,post,False,False,False,False,False,False,False,False,False,False,False,True,selected_pilot_75_apps.json
140,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"You are given a directed graph consisting of n vertices and m edges (each edge is directed, so it can be traversed in only one direction). You are allowed to remove at most one edge from it.

Can you make this graph acyclic by removing at most one edge from it? A directed graph is called acyclic iff it doesn't contain any cycle (a non-empty path that starts and ends in the same vertex).


-----Input-----

The first line contains two integers n and m (2 ≤ n ≤ 500, 1 ≤ m ≤ min(n(n - 1), 100000)) — the number of vertices and the number of edges, respectively.

Then m lines follow. Each line contains two integers u and v denoting a directed edge going from vertex u to vertex v (1 ≤ u, v ≤ n, u ≠ v). Each ordered pair (u, v) is listed at most once (there is at most one directed edge from u to v).


-----Output-----

If it is possible to make this graph acyclic by removing at most one edge, print YES. Otherwise, print NO.


-----Examples-----
Input
3 4
1 2
2 3
3 2
3 1

Output
YES

Input
5 6
1 2
2 3
3 2
3 1
2 1
4 5

Output
NO



-----Note-----

In the first example you can remove edge $2 \rightarrow 3$, and the graph becomes acyclic.

In the second example you have to remove at least two edges (for example, $2 \rightarrow 1$ and $2 \rightarrow 3$) in order to make the graph acyclic.","def dfs(node, graph, visited, rec_stack):
    visited[node] = True
    rec_stack[node] = True

    for neighbor in graph[node]:
        if not visited[neighbor]:
            if dfs(neighbor, graph, visited, rec_stack):
                return True
        elif rec_stack[neighbor]:
            return True

    rec_stack[node] = False
    return False

n, m = map(int, input().split())
graph = [[] for _ in range(n + 1)]

for _ in range(m):
    u, v = map(int, input().split())
    graph[u].append(v)

visited = [False] * (n + 1)
rec_stack = [False] * (n + 1)
has_cycle = False

for node in range(1, n + 1):
    if not visited[node]:
        if dfs(node, graph, visited, rec_stack):
            has_cycle = True
            break

if has_cycle:
    print(""NO"")
else:
    print(""YES"")
",,False,post,False,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_apps.json
140,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"You are given a directed graph consisting of n vertices and m edges (each edge is directed, so it can be traversed in only one direction). You are allowed to remove at most one edge from it.

Can you make this graph acyclic by removing at most one edge from it? A directed graph is called acyclic iff it doesn't contain any cycle (a non-empty path that starts and ends in the same vertex).


-----Input-----

The first line contains two integers n and m (2 ≤ n ≤ 500, 1 ≤ m ≤ min(n(n - 1), 100000)) — the number of vertices and the number of edges, respectively.

Then m lines follow. Each line contains two integers u and v denoting a directed edge going from vertex u to vertex v (1 ≤ u, v ≤ n, u ≠ v). Each ordered pair (u, v) is listed at most once (there is at most one directed edge from u to v).


-----Output-----

If it is possible to make this graph acyclic by removing at most one edge, print YES. Otherwise, print NO.


-----Examples-----
Input
3 4
1 2
2 3
3 2
3 1

Output
YES

Input
5 6
1 2
2 3
3 2
3 1
2 1
4 5

Output
NO



-----Note-----

In the first example you can remove edge $2 \rightarrow 3$, and the graph becomes acyclic.

In the second example you have to remove at least two edges (for example, $2 \rightarrow 1$ and $2 \rightarrow 3$) in order to make the graph acyclic.","def can_make_acyclic(n, m, edges):
    from collections import defaultdict, deque
    
    def has_cycle(graph):
        in_degree = {i: 0 for i in range(1, n + 1)}
        for u in graph:
            for v in graph[u]:
                in_degree[v] += 1
        
        queue = deque([node for node in in_degree if in_degree[node] == 0])
        count = 0
        
        while queue:
            node = queue.popleft()
            count += 1
            for neighbor in graph[node]:
                in_degree[neighbor] -= 1
                if in_degree[neighbor] == 0:
                    queue.append(neighbor)
        
        return count != n
    
    graph = defaultdict(list)
    for u, v in edges:
        graph[u].append(v)
    
    if not has_cycle(graph):
        return 'YES'
    
    for u, v in edges:
        graph[u].remove(v)
        if not has_cycle(graph):
            return 'YES'
        graph[u].append(v)
    
    return 'NO'


# Reading input
import sys
input = sys.stdin.read
data = input().split()

n = int(data[0])
m = int(data[1])
edges = [(int(data[i]), int(data[i+1])) for i in range(2, len(data), 2)]

# Solve the problem
result = can_make_acyclic(n, m, edges)
print(result)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
40,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"A string is a palindrome if it reads the same from the left to the right and from the right to the left. For example, the strings ""kek"", ""abacaba"", ""r"" and ""papicipap"" are palindromes, while the strings ""abb"" and ""iq"" are not.

A substring $s[l \ldots r]$ ($1 \leq l \leq r \leq |s|$) of a string $s = s_{1}s_{2} \ldots s_{|s|}$ is the string $s_{l}s_{l + 1} \ldots s_{r}$.

Anna does not like palindromes, so she makes her friends call her Ann. She also changes all the words she reads in a similar way. Namely, each word $s$ is changed into its longest substring that is not a palindrome. If all the substrings of $s$ are palindromes, she skips the word at all.

Some time ago Ann read the word $s$. What is the word she changed it into?


-----Input-----

The first line contains a non-empty string $s$ with length at most $50$ characters, containing lowercase English letters only.


-----Output-----

If there is such a substring in $s$ that is not a palindrome, print the maximum length of such a substring. Otherwise print $0$.

Note that there can be multiple longest substrings that are not palindromes, but their length is unique.


-----Examples-----
Input
mew

Output
3

Input
wuffuw

Output
5

Input
qqqqqqqq

Output
0



-----Note-----

""mew"" is not a palindrome, so the longest substring of it that is not a palindrome, is the string ""mew"" itself. Thus, the answer for the first example is $3$.

The string ""uffuw"" is one of the longest non-palindrome substrings (of length $5$) of the string ""wuffuw"", so the answer for the second example is $5$.

All substrings of the string ""qqqqqqqq"" consist of equal characters so they are palindromes. This way, there are no non-palindrome substrings. Thus, the answer for the third example is $0$.","s = input()
n = len(s)
max_len = 0
for i in range(n):
    for j in range(i + 1, n + 1):
        substr = s[i:j]
        if substr != substr[::-1]:
            max_len = max(max_len, len(substr))
print(max_len if max_len > 0 else 0)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
40,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"A string is a palindrome if it reads the same from the left to the right and from the right to the left. For example, the strings ""kek"", ""abacaba"", ""r"" and ""papicipap"" are palindromes, while the strings ""abb"" and ""iq"" are not.

A substring $s[l \ldots r]$ ($1 \leq l \leq r \leq |s|$) of a string $s = s_{1}s_{2} \ldots s_{|s|}$ is the string $s_{l}s_{l + 1} \ldots s_{r}$.

Anna does not like palindromes, so she makes her friends call her Ann. She also changes all the words she reads in a similar way. Namely, each word $s$ is changed into its longest substring that is not a palindrome. If all the substrings of $s$ are palindromes, she skips the word at all.

Some time ago Ann read the word $s$. What is the word she changed it into?


-----Input-----

The first line contains a non-empty string $s$ with length at most $50$ characters, containing lowercase English letters only.


-----Output-----

If there is such a substring in $s$ that is not a palindrome, print the maximum length of such a substring. Otherwise print $0$.

Note that there can be multiple longest substrings that are not palindromes, but their length is unique.


-----Examples-----
Input
mew

Output
3

Input
wuffuw

Output
5

Input
qqqqqqqq

Output
0



-----Note-----

""mew"" is not a palindrome, so the longest substring of it that is not a palindrome, is the string ""mew"" itself. Thus, the answer for the first example is $3$.

The string ""uffuw"" is one of the longest non-palindrome substrings (of length $5$) of the string ""wuffuw"", so the answer for the second example is $5$.

All substrings of the string ""qqqqqqqq"" consist of equal characters so they are palindromes. This way, there are no non-palindrome substrings. Thus, the answer for the third example is $0$.","def is_palindrome(s):
    return s == s[::-1]

s = input().strip()

if len(s) <= 1:
    print(0)
else:
    if not is_palindrome(s):
        print(len(s))
    else:
        if not is_palindrome(s[1:]):
            print(len(s) - 1)
        elif not is_palindrome(s[:-1]):
            print(len(s) - 1)
        else:
            print(0)
",,True,post,True,False,True,True,False,False,False,False,False,False,False,False,selected_pilot_75_apps.json
68,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"Nauuo is a girl who loves writing comments.

One day, she posted a comment on Codeforces, wondering whether she would get upvotes or downvotes.

It's known that there were $x$ persons who would upvote, $y$ persons who would downvote, and there were also another $z$ persons who would vote, but you don't know whether they would upvote or downvote. Note that each of the $x+y+z$ people would vote exactly one time.

There are three different results: if there are more people upvote than downvote, the result will be ""+""; if there are more people downvote than upvote, the result will be ""-""; otherwise the result will be ""0"".

Because of the $z$ unknown persons, the result may be uncertain (i.e. there are more than one possible results). More formally, the result is uncertain if and only if there exist two different situations of how the $z$ persons vote, that the results are different in the two situations.

Tell Nauuo the result or report that the result is uncertain.


-----Input-----

The only line contains three integers $x$, $y$, $z$ ($0\le x,y,z\le100$), corresponding to the number of persons who would upvote, downvote or unknown.


-----Output-----

If there is only one possible result, print the result : ""+"", ""-"" or ""0"".

Otherwise, print ""?"" to report that the result is uncertain.


-----Examples-----
Input
3 7 0

Output
-
Input
2 0 1

Output
+
Input
1 1 0

Output
0
Input
0 0 1

Output
?


-----Note-----

In the first example, Nauuo would definitely get three upvotes and seven downvotes, so the only possible result is ""-"".

In the second example, no matter the person unknown downvotes or upvotes, Nauuo would get more upvotes than downvotes. So the only possible result is ""+"".

In the third example, Nauuo would definitely get one upvote and one downvote, so the only possible result is ""0"".

In the fourth example, if the only one person upvoted, the result would be ""+"", otherwise, the result would be ""-"". There are two possible results, so the result is uncertain.","x, y, z = map(int, input().split())
if x > y + z:
    print(""+"")
elif x < y:
    print(""-"")
elif x == y:
    if z == 0:
        print(""0"")
    else:
        print(""?"")
else:
    print(""?"")
",,False,post,False,True,False,False,True,False,True,True,True,True,True,True,selected_pilot_75_apps.json
68,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Nauuo is a girl who loves writing comments.

One day, she posted a comment on Codeforces, wondering whether she would get upvotes or downvotes.

It's known that there were $x$ persons who would upvote, $y$ persons who would downvote, and there were also another $z$ persons who would vote, but you don't know whether they would upvote or downvote. Note that each of the $x+y+z$ people would vote exactly one time.

There are three different results: if there are more people upvote than downvote, the result will be ""+""; if there are more people downvote than upvote, the result will be ""-""; otherwise the result will be ""0"".

Because of the $z$ unknown persons, the result may be uncertain (i.e. there are more than one possible results). More formally, the result is uncertain if and only if there exist two different situations of how the $z$ persons vote, that the results are different in the two situations.

Tell Nauuo the result or report that the result is uncertain.


-----Input-----

The only line contains three integers $x$, $y$, $z$ ($0\le x,y,z\le100$), corresponding to the number of persons who would upvote, downvote or unknown.


-----Output-----

If there is only one possible result, print the result : ""+"", ""-"" or ""0"".

Otherwise, print ""?"" to report that the result is uncertain.


-----Examples-----
Input
3 7 0

Output
-
Input
2 0 1

Output
+
Input
1 1 0

Output
0
Input
0 0 1

Output
?


-----Note-----

In the first example, Nauuo would definitely get three upvotes and seven downvotes, so the only possible result is ""-"".

In the second example, no matter the person unknown downvotes or upvotes, Nauuo would get more upvotes than downvotes. So the only possible result is ""+"".

In the third example, Nauuo would definitely get one upvote and one downvote, so the only possible result is ""0"".

In the fourth example, if the only one person upvoted, the result would be ""+"", otherwise, the result would be ""-"". There are two possible results, so the result is uncertain.","x, y, z = map(int, input().split())

# Calculate the minimum and maximum possible upvotes
min_upvotes = x
max_upvotes = x + z

# Calculate the minimum and maximum possible downvotes
min_downvotes = y
max_downvotes = y + z

if max_upvotes < min_downvotes:
    print(""-"")
elif max_downvotes < min_upvotes:
    print(""+"")
else:
    print(""?"")
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
2,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"Anton has the integer x. He is interested what positive integer, which doesn't exceed x, has the maximum sum of digits.

Your task is to help Anton and to find the integer that interests him. If there are several such integers, determine the biggest of them. 


-----Input-----

The first line contains the positive integer x (1 ≤ x ≤ 10^18) — the integer which Anton has. 


-----Output-----

Print the positive integer which doesn't exceed x and has the maximum sum of digits. If there are several such integers, print the biggest of them. Printed integer must not contain leading zeros.


-----Examples-----
Input
100

Output
99

Input
48

Output
48

Input
521

Output
499","x = int(input())

max_sum = 0
max_num = 0

for i in range(1, x + 1):
    digit_sum = sum(int(digit) for digit in str(i))
    if digit_sum > max_sum:
        max_sum = digit_sum
        max_num = i

print(max_num)
",,False,post,False,False,False,True,False,False,False,False,False,False,False,False,selected_pilot_75_apps.json
2,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Anton has the integer x. He is interested what positive integer, which doesn't exceed x, has the maximum sum of digits.

Your task is to help Anton and to find the integer that interests him. If there are several such integers, determine the biggest of them. 


-----Input-----

The first line contains the positive integer x (1 ≤ x ≤ 10^18) — the integer which Anton has. 


-----Output-----

Print the positive integer which doesn't exceed x and has the maximum sum of digits. If there are several such integers, print the biggest of them. Printed integer must not contain leading zeros.


-----Examples-----
Input
100

Output
99

Input
48

Output
48

Input
521

Output
499","def sum_of_digits(n):
    return sum(int(digit) for digit in str(n))

x = int(input().strip())

# Convert x to a string to manipulate digits
x_str = str(x)
n = len(x_str)

# Generate a candidate number by replacing the last non-zero digit with zero and all following digits with 9
if x_str[0] != '1':
    candidate = int(x_str[0]) - 1
    candidate = str(candidate) + '9' * (n - 1)
else:
    candidate = '9' * (n - 1)
candidate = int(candidate)

# Compare sum of digits of x and candidate
sum_x = sum_of_digits(x)
sum_candidate = sum_of_digits(candidate)

if sum_candidate > sum_x:
    print(candidate)
else:
    print(x)
",,False,post,False,False,True,False,False,False,False,False,True,False,False,False,selected_pilot_75_apps.json
211,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"One spring day on his way to university Lesha found an array A. Lesha likes to split arrays into several parts. This time Lesha decided to split the array A into several, possibly one, new arrays so that the sum of elements in each of the new arrays is not zero. One more condition is that if we place the new arrays one after another they will form the old array A.

Lesha is tired now so he asked you to split the array. Help Lesha!


-----Input-----

The first line contains single integer n (1 ≤ n ≤ 100) — the number of elements in the array A.

The next line contains n integers a_1, a_2, ..., a_{n} ( - 10^3 ≤ a_{i} ≤ 10^3) — the elements of the array A.


-----Output-----

If it is not possible to split the array A and satisfy all the constraints, print single line containing ""NO"" (without quotes).

Otherwise in the first line print ""YES"" (without quotes). In the next line print single integer k — the number of new arrays. In each of the next k lines print two integers l_{i} and r_{i} which denote the subarray A[l_{i}... r_{i}] of the initial array A being the i-th new array. Integers l_{i}, r_{i} should satisfy the following conditions:  l_1 = 1  r_{k} = n  r_{i} + 1 = l_{i} + 1 for each 1 ≤ i < k. 

If there are multiple answers, print any of them.


-----Examples-----
Input
3
1 2 -3

Output
YES
2
1 2
3 3

Input
8
9 -12 3 4 -4 -10 7 3

Output
YES
2
1 2
3 8

Input
1
0

Output
NO

Input
4
1 2 3 -5

Output
YES
4
1 1
2 2
3 3
4 4","n = int(input())
a = list(map(int, input().split()))
prefix_sum = [0] * (n + 1)
for i in range(n):
    prefix_sum[i + 1] = prefix_sum[i] + a[i]

if prefix_sum[n] == 0:
    print(""NO"")
else:
    print(""YES"")
    k = 1
    l = 1
    for r in range(1, n + 1):
        if prefix_sum[r] != 0 and prefix_sum[r] != prefix_sum[n]:
            print(k, l, r)
            k += 1
            l = r
    print(k, l, n)
",,False,post,False,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_apps.json
211,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"One spring day on his way to university Lesha found an array A. Lesha likes to split arrays into several parts. This time Lesha decided to split the array A into several, possibly one, new arrays so that the sum of elements in each of the new arrays is not zero. One more condition is that if we place the new arrays one after another they will form the old array A.

Lesha is tired now so he asked you to split the array. Help Lesha!


-----Input-----

The first line contains single integer n (1 ≤ n ≤ 100) — the number of elements in the array A.

The next line contains n integers a_1, a_2, ..., a_{n} ( - 10^3 ≤ a_{i} ≤ 10^3) — the elements of the array A.


-----Output-----

If it is not possible to split the array A and satisfy all the constraints, print single line containing ""NO"" (without quotes).

Otherwise in the first line print ""YES"" (without quotes). In the next line print single integer k — the number of new arrays. In each of the next k lines print two integers l_{i} and r_{i} which denote the subarray A[l_{i}... r_{i}] of the initial array A being the i-th new array. Integers l_{i}, r_{i} should satisfy the following conditions:  l_1 = 1  r_{k} = n  r_{i} + 1 = l_{i} + 1 for each 1 ≤ i < k. 

If there are multiple answers, print any of them.


-----Examples-----
Input
3
1 2 -3

Output
YES
2
1 2
3 3

Input
8
9 -12 3 4 -4 -10 7 3

Output
YES
2
1 2
3 8

Input
1
0

Output
NO

Input
4
1 2 3 -5

Output
YES
4
1 1
2 2
3 3
4 4","n = int(input())
A = list(map(int, input().split()))

# Check if the entire array sums to zero
total_sum = sum(A)

if total_sum != 0:
    print(""YES"")
    print(""1"")
    print(""1"", n)
else:
    # Check if there is any non-zero element in the array
    for i in range(n):
        if A[i] != 0:
            print(""YES"")
            print(""2"")
            print(""1"", i + 1)
            print(i + 2, n)
            break
    else:
        print(""NO"")
",,False,post,False,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_apps.json
164,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"On the way to Rio de Janeiro Ostap kills time playing with a grasshopper he took with him in a special box. Ostap builds a line of length n such that some cells of this line are empty and some contain obstacles. Then, he places his grasshopper to one of the empty cells and a small insect in another empty cell. The grasshopper wants to eat the insect.

Ostap knows that grasshopper is able to jump to any empty cell that is exactly k cells away from the current (to the left or to the right). Note that it doesn't matter whether intermediate cells are empty or not as the grasshopper makes a jump over them. For example, if k = 1 the grasshopper can jump to a neighboring cell only, and if k = 2 the grasshopper can jump over a single cell.

Your goal is to determine whether there is a sequence of jumps such that grasshopper will get from his initial position to the cell with an insect.


-----Input-----

The first line of the input contains two integers n and k (2 ≤ n ≤ 100, 1 ≤ k ≤ n - 1) — the number of cells in the line and the length of one grasshopper's jump.

The second line contains a string of length n consisting of characters '.', '#', 'G' and 'T'. Character '.' means that the corresponding cell is empty, character '#' means that the corresponding cell contains an obstacle and grasshopper can't jump there. Character 'G' means that the grasshopper starts at this position and, finally, 'T' means that the target insect is located at this cell. It's guaranteed that characters 'G' and 'T' appear in this line exactly once.


-----Output-----

If there exists a sequence of jumps (each jump of length k), such that the grasshopper can get from his initial position to the cell with the insect, print ""YES"" (without quotes) in the only line of the input. Otherwise, print ""NO"" (without quotes).


-----Examples-----
Input
5 2
#G#T#

Output
YES

Input
6 1
T....G

Output
YES

Input
7 3
T..#..G

Output
NO

Input
6 2
..GT..

Output
NO



-----Note-----

In the first sample, the grasshopper can make one jump to the right in order to get from cell 2 to cell 4.

In the second sample, the grasshopper is only able to jump to neighboring cells but the way to the insect is free — he can get there by jumping left 5 times.

In the third sample, the grasshopper can't make a single jump.

In the fourth sample, the grasshopper can only jump to the cells with odd indices, thus he won't be able to reach the insect.","n, k = map(int, input().split())
s = input()
g, t = -1, -1
for i in range(n):
    if s[i] == 'G':
        g = i
    elif s[i] == 'T':
        t = i
if g == -1 or t == -1:
    print(""NO"")
else:
    if abs(t - g) % k == 0 and all(s[(g + i * k) % n] != '#' for i in range(abs(t - g) // k + 1)):
        print(""YES"")
    else:
        print(""NO"")
",,False,post,False,False,False,False,False,False,False,False,True,False,False,True,selected_pilot_75_apps.json
164,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"On the way to Rio de Janeiro Ostap kills time playing with a grasshopper he took with him in a special box. Ostap builds a line of length n such that some cells of this line are empty and some contain obstacles. Then, he places his grasshopper to one of the empty cells and a small insect in another empty cell. The grasshopper wants to eat the insect.

Ostap knows that grasshopper is able to jump to any empty cell that is exactly k cells away from the current (to the left or to the right). Note that it doesn't matter whether intermediate cells are empty or not as the grasshopper makes a jump over them. For example, if k = 1 the grasshopper can jump to a neighboring cell only, and if k = 2 the grasshopper can jump over a single cell.

Your goal is to determine whether there is a sequence of jumps such that grasshopper will get from his initial position to the cell with an insect.


-----Input-----

The first line of the input contains two integers n and k (2 ≤ n ≤ 100, 1 ≤ k ≤ n - 1) — the number of cells in the line and the length of one grasshopper's jump.

The second line contains a string of length n consisting of characters '.', '#', 'G' and 'T'. Character '.' means that the corresponding cell is empty, character '#' means that the corresponding cell contains an obstacle and grasshopper can't jump there. Character 'G' means that the grasshopper starts at this position and, finally, 'T' means that the target insect is located at this cell. It's guaranteed that characters 'G' and 'T' appear in this line exactly once.


-----Output-----

If there exists a sequence of jumps (each jump of length k), such that the grasshopper can get from his initial position to the cell with the insect, print ""YES"" (without quotes) in the only line of the input. Otherwise, print ""NO"" (without quotes).


-----Examples-----
Input
5 2
#G#T#

Output
YES

Input
6 1
T....G

Output
YES

Input
7 3
T..#..G

Output
NO

Input
6 2
..GT..

Output
NO



-----Note-----

In the first sample, the grasshopper can make one jump to the right in order to get from cell 2 to cell 4.

In the second sample, the grasshopper is only able to jump to neighboring cells but the way to the insect is free — he can get there by jumping left 5 times.

In the third sample, the grasshopper can't make a single jump.

In the fourth sample, the grasshopper can only jump to the cells with odd indices, thus he won't be able to reach the insect.","# Read input values
n, k = map(int, input().split())
line = input()

# Find positions of 'G' and 'T'
G_pos = line.index('G')
T_pos = line.index('T')

# Ensure G_pos is less than T_pos for consistency
if G_pos > T_pos:
    G_pos, T_pos = T_pos, G_pos

# Check every k-th position from G_pos to T_pos
reachable = False
for pos in range(G_pos, T_pos + 1, k):
    if line[pos] == '#':
        break
    if pos == T_pos:
        reachable = True
        break

# Output the result
if reachable:
    print(""YES"")
else:
    print(""NO"")
",,False,post,True,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_apps.json
102,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"Vasya has n burles. One bottle of Ber-Cola costs a burles and one Bars bar costs b burles. He can buy any non-negative integer number of bottles of Ber-Cola and any non-negative integer number of Bars bars.

Find out if it's possible to buy some amount of bottles of Ber-Cola and Bars bars and spend exactly n burles.

In other words, you should find two non-negative integers x and y such that Vasya can buy x bottles of Ber-Cola and y Bars bars and x·a + y·b = n or tell that it's impossible.


-----Input-----

First line contains single integer n (1 ≤ n ≤ 10 000 000) — amount of money, that Vasya has.

Second line contains single integer a (1 ≤ a ≤ 10 000 000) — cost of one bottle of Ber-Cola.

Third line contains single integer b (1 ≤ b ≤ 10 000 000) — cost of one Bars bar.


-----Output-----

If Vasya can't buy Bars and Ber-Cola in such a way to spend exactly n burles print «NO» (without quotes).

Otherwise in first line print «YES» (without quotes). In second line print two non-negative integers x and y — number of bottles of Ber-Cola and number of Bars bars Vasya should buy in order to spend exactly n burles, i.e. x·a + y·b = n. If there are multiple answers print any of them.

Any of numbers x and y can be equal 0.


-----Examples-----
Input
7
2
3

Output
YES
2 1

Input
100
25
10

Output
YES
0 10

Input
15
4
8

Output
NO

Input
9960594
2551
2557

Output
YES
1951 1949



-----Note-----

In first example Vasya can buy two bottles of Ber-Cola and one Bars bar. He will spend exactly 2·2 + 1·3 = 7 burles.

In second example Vasya can spend exactly n burles multiple ways:   buy two bottles of Ber-Cola and five Bars bars;  buy four bottles of Ber-Cola and don't buy Bars bars;  don't buy Ber-Cola and buy 10 Bars bars. 

In third example it's impossible to but Ber-Cola and Bars bars in order to spend exactly n burles.","n = int(input())
a = int(input())
b = int(input())

for x in range(n // a + 1):
    y = (n - x * a) // b
    if x * a + y * b == n:
        print('YES')
        print(x, y)
        exit()

print('NO')
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
102,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Vasya has n burles. One bottle of Ber-Cola costs a burles and one Bars bar costs b burles. He can buy any non-negative integer number of bottles of Ber-Cola and any non-negative integer number of Bars bars.

Find out if it's possible to buy some amount of bottles of Ber-Cola and Bars bars and spend exactly n burles.

In other words, you should find two non-negative integers x and y such that Vasya can buy x bottles of Ber-Cola and y Bars bars and x·a + y·b = n or tell that it's impossible.


-----Input-----

First line contains single integer n (1 ≤ n ≤ 10 000 000) — amount of money, that Vasya has.

Second line contains single integer a (1 ≤ a ≤ 10 000 000) — cost of one bottle of Ber-Cola.

Third line contains single integer b (1 ≤ b ≤ 10 000 000) — cost of one Bars bar.


-----Output-----

If Vasya can't buy Bars and Ber-Cola in such a way to spend exactly n burles print «NO» (without quotes).

Otherwise in first line print «YES» (without quotes). In second line print two non-negative integers x and y — number of bottles of Ber-Cola and number of Bars bars Vasya should buy in order to spend exactly n burles, i.e. x·a + y·b = n. If there are multiple answers print any of them.

Any of numbers x and y can be equal 0.


-----Examples-----
Input
7
2
3

Output
YES
2 1

Input
100
25
10

Output
YES
0 10

Input
15
4
8

Output
NO

Input
9960594
2551
2557

Output
YES
1951 1949



-----Note-----

In first example Vasya can buy two bottles of Ber-Cola and one Bars bar. He will spend exactly 2·2 + 1·3 = 7 burles.

In second example Vasya can spend exactly n burles multiple ways:   buy two bottles of Ber-Cola and five Bars bars;  buy four bottles of Ber-Cola and don't buy Bars bars;  don't buy Ber-Cola and buy 10 Bars bars. 

In third example it's impossible to but Ber-Cola and Bars bars in order to spend exactly n burles.","def main():
    # Read input
    n = int(input())
    a = int(input())
    b = int(input())

    # Iterate over possible values of x from 0 to n//a
    for x in range(n // a + 1):
        # Check if the remaining amount can be exactly divided by b
        if (n - x * a) % b == 0:
            y = (n - x * a) // b
            # Print YES and the values of x and y
            print(""YES"")
            print(x, y)
            return
    
    # If no valid (x, y) pair is found, print NO
    print(""NO"")

if __name__ == ""__main__"":
    main()
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
243,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"Mr. Santa asks all the great programmers of the world to solve a trivial problem. He gives them an integer m and asks for the number of positive integers n, such that the factorial of n ends with exactly m zeroes. Are you among those great programmers who can solve this problem?


-----Input-----

The only line of input contains an integer m (1 ≤ m ≤ 100 000) — the required number of trailing zeroes in factorial.


-----Output-----

First print k — the number of values of n such that the factorial of n ends with m zeroes. Then print these k integers in increasing order.


-----Examples-----
Input
1

Output
5
5 6 7 8 9 
Input
5

Output
0


-----Note-----

The factorial of n is equal to the product of all integers from 1 to n inclusive, that is n! = 1·2·3·...·n.

In the first sample, 5! = 120, 6! = 720, 7! = 5040, 8! = 40320 and 9! = 362880.","m = int(input())
count = 0
n = 1
while True:
    if n // 5 ** count >= m:
        break
    count += 1
n = 1
ans = []
while True:
    if n // 5 ** count < m:
        break
    ans.append(n)
    n += 1
print(len(ans))
print(' '.join(map(str, ans)))
",,False,post,False,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_apps.json
243,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Mr. Santa asks all the great programmers of the world to solve a trivial problem. He gives them an integer m and asks for the number of positive integers n, such that the factorial of n ends with exactly m zeroes. Are you among those great programmers who can solve this problem?


-----Input-----

The only line of input contains an integer m (1 ≤ m ≤ 100 000) — the required number of trailing zeroes in factorial.


-----Output-----

First print k — the number of values of n such that the factorial of n ends with m zeroes. Then print these k integers in increasing order.


-----Examples-----
Input
1

Output
5
5 6 7 8 9 
Input
5

Output
0


-----Note-----

The factorial of n is equal to the product of all integers from 1 to n inclusive, that is n! = 1·2·3·...·n.

In the first sample, 5! = 120, 6! = 720, 7! = 5040, 8! = 40320 and 9! = 362880.","def count_trailing_zeroes(n):
    """""" Return the number of trailing zeroes in n! """"""
    count = 0
    power_of_5 = 5
    while n >= power_of_5:
        count += n // power_of_5
        power_of_5 *= 5
    return count

def find_numbers_with_trailing_zeroes(m):
    """""" Find all numbers n such that n! ends with exactly m trailing zeroes """"""
    low, high = 0, 5 * (m + 1)
    result = []

    while low <= high:
        mid = (low + high) // 2
        zeroes = count_trailing_zeroes(mid)
        if zeroes < m:
            low = mid + 1
        elif zeroes > m:
            high = mid - 1
        else:
            result = []
            left = mid
            while count_trailing_zeroes(left) == m:
                left -= 1
            right = mid + 1
            while count_trailing_zeroes(right) == m:
                right += 1
            result = list(range(left + 1, right))
            break

    return result

# Read input
m = int(input())

# Find result
result = find_numbers_with_trailing_zeroes(m)

# Output result
if result:
    print(len(result))
    print(' '.join(map(str, result)))
else:
    print(0)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
284,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"PolandBall is a young, clever Ball. He is interested in prime numbers. He has stated a following hypothesis: ""There exists such a positive integer n that for each positive integer m number n·m + 1 is a prime number"".

Unfortunately, PolandBall is not experienced yet and doesn't know that his hypothesis is incorrect. Could you prove it wrong? Write a program that finds a counterexample for any n.


-----Input-----

The only number in the input is n (1 ≤ n ≤ 1000) — number from the PolandBall's hypothesis. 


-----Output-----

Output such m that n·m + 1 is not a prime number. Your answer will be considered correct if you output any suitable m such that 1 ≤ m ≤ 10^3. It is guaranteed the the answer exists.


-----Examples-----
Input
3

Output
1
Input
4

Output
2


-----Note-----

A prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.

For the first sample testcase, 3·1 + 1 = 4. We can output 1.

In the second sample testcase, 4·1 + 1 = 5. We cannot output 1 because 5 is prime. However, m = 2 is okay since 4·2 + 1 = 9, which is not a prime number.","def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

n = int(input())
for m in range(1, 1001):
    if not is_prime(n * m + 1):
        print(m)
        break
",,True,post,True,True,True,True,False,True,True,True,True,False,True,True,selected_pilot_75_apps.json
284,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"PolandBall is a young, clever Ball. He is interested in prime numbers. He has stated a following hypothesis: ""There exists such a positive integer n that for each positive integer m number n·m + 1 is a prime number"".

Unfortunately, PolandBall is not experienced yet and doesn't know that his hypothesis is incorrect. Could you prove it wrong? Write a program that finds a counterexample for any n.


-----Input-----

The only number in the input is n (1 ≤ n ≤ 1000) — number from the PolandBall's hypothesis. 


-----Output-----

Output such m that n·m + 1 is not a prime number. Your answer will be considered correct if you output any suitable m such that 1 ≤ m ≤ 10^3. It is guaranteed the the answer exists.


-----Examples-----
Input
3

Output
1
Input
4

Output
2


-----Note-----

A prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.

For the first sample testcase, 3·1 + 1 = 4. We can output 1.

In the second sample testcase, 4·1 + 1 = 5. We cannot output 1 because 5 is prime. However, m = 2 is okay since 4·2 + 1 = 9, which is not a prime number.","def is_prime(x):
    if x <= 1:
        return False
    if x <= 3:
        return True
    if x % 2 == 0 or x % 3 == 0:
        return False
    i = 5
    while i * i <= x:
        if x % i == 0 or x % (i + 2) == 0:
            return False
        i += 6
    return True

n = int(input())

for m in range(1, 1001):
    if not is_prime(n * m + 1):
        print(m)
        break
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
156,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"You might have heard about the next game in Lara Croft series coming out this year. You also might have watched its trailer. Though you definitely missed the main idea about its plot, so let me lift the veil of secrecy.

Lara is going to explore yet another dangerous dungeon. Game designers decided to use good old 2D environment. The dungeon can be represented as a rectangle matrix of n rows and m columns. Cell (x, y) is the cell in the x-th row in the y-th column. Lara can move between the neighbouring by side cells in all four directions.

Moreover, she has even chosen the path for herself to avoid all the traps. She enters the dungeon in cell (1, 1), that is top left corner of the matrix. Then she goes down all the way to cell (n, 1) — the bottom left corner. Then she starts moving in the snake fashion — all the way to the right, one cell up, then to the left to the cell in 2-nd column, one cell up. She moves until she runs out of non-visited cells. n and m given are such that she always end up in cell (1, 2).

Lara has already moved to a neighbouring cell k times. Can you determine her current position?


-----Input-----

The only line contains three integers n, m and k (2 ≤ n, m ≤ 10^9, n is always even, 0 ≤ k < n·m). Note that k doesn't fit into 32-bit integer type!


-----Output-----

Print the cell (the row and the column where the cell is situated) where Lara ends up after she moves k times.


-----Examples-----
Input
4 3 0

Output
1 1

Input
4 3 11

Output
1 2

Input
4 3 7

Output
3 2



-----Note-----

Here is her path on matrix 4 by 3: [Image]","n, m, k = map(int, input().split())
k %= (n * 2 - 2)
if k < n - 1:
    print(k + 1, 1)
elif k < n * 2 - 2:
    print(n - (k - n + 1) % (n - 1) - 1, (k - n + 1) // (n - 1) + 1)
else:
    print(1, 2)
",,True,post,False,True,False,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
156,apps,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"You might have heard about the next game in Lara Croft series coming out this year. You also might have watched its trailer. Though you definitely missed the main idea about its plot, so let me lift the veil of secrecy.

Lara is going to explore yet another dangerous dungeon. Game designers decided to use good old 2D environment. The dungeon can be represented as a rectangle matrix of n rows and m columns. Cell (x, y) is the cell in the x-th row in the y-th column. Lara can move between the neighbouring by side cells in all four directions.

Moreover, she has even chosen the path for herself to avoid all the traps. She enters the dungeon in cell (1, 1), that is top left corner of the matrix. Then she goes down all the way to cell (n, 1) — the bottom left corner. Then she starts moving in the snake fashion — all the way to the right, one cell up, then to the left to the cell in 2-nd column, one cell up. She moves until she runs out of non-visited cells. n and m given are such that she always end up in cell (1, 2).

Lara has already moved to a neighbouring cell k times. Can you determine her current position?


-----Input-----

The only line contains three integers n, m and k (2 ≤ n, m ≤ 10^9, n is always even, 0 ≤ k < n·m). Note that k doesn't fit into 32-bit integer type!


-----Output-----

Print the cell (the row and the column where the cell is situated) where Lara ends up after she moves k times.


-----Examples-----
Input
4 3 0

Output
1 1

Input
4 3 11

Output
1 2

Input
4 3 7

Output
3 2



-----Note-----

Here is her path on matrix 4 by 3: [Image]","def find_lara_position(n, m, k):
    if k < n - 1:
        # Still in the initial descent down the first column
        print(k + 1, 1)
    else:
        # Adjust k by removing the initial descent
        k -= (n - 1)
        # Determine which full zigzag row Lara is in
        full_rows = k // (m - 1)
        # Determine the remaining steps after full zigzag rows
        remaining_steps = k % (m - 1)
        
        if full_rows % 2 == 0:
            # If on an even full row, moving rightward
            row = n - full_rows
            col = 2 + remaining_steps
        else:
            # If on an odd full row, moving leftward
            row = n - full_rows
            col = m - remaining_steps
        
        print(row, col)

# Read input
import sys
input = sys.stdin.read
data = input().strip().split()
n, m, k = int(data[0]), int(data[1]), int(data[2])

# Find Lara's position
find_lara_position(n, m, k)
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_apps.json
10,apps,llama3-70b,meta-llama/Llama-3.3-70B-Instruct,"Yet another round on DecoForces is coming! Grandpa Maks wanted to participate in it but someone has stolen his precious sofa! And how can one perform well with such a major loss?

Fortunately, the thief had left a note for Grandpa Maks. This note got Maks to the sofa storehouse. Still he had no idea which sofa belongs to him as they all looked the same!

The storehouse is represented as matrix n × m. Every sofa takes two neighbouring by some side cells. No cell is covered by more than one sofa. There can be empty cells.

Sofa A is standing to the left of sofa B if there exist two such cells a and b that x_{a} < x_{b}, a is covered by A and b is covered by B. Sofa A is standing to the top of sofa B if there exist two such cells a and b that y_{a} < y_{b}, a is covered by A and b is covered by B. Right and bottom conditions are declared the same way. 

Note that in all conditions A ≠ B. Also some sofa A can be both to the top of another sofa B and to the bottom of it. The same is for left and right conditions.

The note also stated that there are cnt_{l} sofas to the left of Grandpa Maks's sofa, cnt_{r} — to the right, cnt_{t} — to the top and cnt_{b} — to the bottom.

Grandpa Maks asks you to help him to identify his sofa. It is guaranteed that there is no more than one sofa of given conditions.

Output the number of Grandpa Maks's sofa. If there is no such sofa that all the conditions are met for it then output -1.


-----Input-----

The first line contains one integer number d (1 ≤ d ≤ 10^5) — the number of sofas in the storehouse.

The second line contains two integer numbers n, m (1 ≤ n, m ≤ 10^5) — the size of the storehouse.

Next d lines contains four integer numbers x_1, y_1, x_2, y_2 (1 ≤ x_1, x_2 ≤ n, 1 ≤ y_1, y_2 ≤ m) — coordinates of the i-th sofa. It is guaranteed that cells (x_1, y_1) and (x_2, y_2) have common side, (x_1, y_1)  ≠  (x_2, y_2) and no cell is covered by more than one sofa.

The last line contains four integer numbers cnt_{l}, cnt_{r}, cnt_{t}, cnt_{b} (0 ≤ cnt_{l}, cnt_{r}, cnt_{t}, cnt_{b} ≤ d - 1).


-----Output-----

Print the number of the sofa for which all the conditions are met. Sofas are numbered 1 through d as given in input. If there is no such sofa then print -1.


-----Examples-----
Input
2
3 2
3 1 3 2
1 2 2 2
1 0 0 1

Output
1

Input
3
10 10
1 2 1 1
5 5 6 5
6 4 5 4
2 1 2 0

Output
2

Input
2
2 2
2 1 1 1
1 2 2 2
1 0 0 0

Output
-1



-----Note-----

Let's consider the second example.   The first sofa has 0 to its left, 2 sofas to its right ((1, 1) is to the left of both (5, 5) and (5, 4)), 0 to its top and 2 to its bottom (both 2nd and 3rd sofas are below).  The second sofa has cnt_{l} = 2, cnt_{r} = 1, cnt_{t} = 2 and cnt_{b} = 0.  The third sofa has cnt_{l} = 2, cnt_{r} = 1, cnt_{t} = 1 and cnt_{b} = 1. 

So the second one corresponds to the given conditions.

In the third example   The first sofa has cnt_{l} = 1, cnt_{r} = 1, cnt_{t} = 0 and cnt_{b} = 1.  The second sofa has cnt_{l} = 1, cnt_{r} = 1, cnt_{t} = 1 and cnt_{b} = 0. 

And there is no sofa with the set (1, 0, 0, 0) so the answer is -1.","d = int(input())
n, m = map(int, input().split())
sofas = []
for _ in range(d):
    x1, y1, x2, y2 = map(int, input().split())
    sofas.append(((x1, y1), (x2, y2)))
cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())

def count_sofas(sofa, sofas):
    left, right, top, bottom = 0, 0, 0, 0
    for s in sofas:
        if s != sofa:
            if sofa[0][0] < s[0][0] and sofa[0][1] == s[0][1]:
                left += 1
            if sofa[0][0] > s[0][0] and sofa[0][1] == s[0][1]:
                right += 1
            if sofa[0][1] < s[0][1] and sofa[0][0] == s[0][0]:
                top += 1
            if sofa[0][1] > s[0][1] and sofa[0][0] == s[0][0]:
                bottom += 1
    return left, right, top, bottom

for i, sofa in enumerate(sofas):
    left, right, top, bottom = count_sofas(sofa, sofas)
    if (left, right, top, bottom) == (cnt_l, cnt_r, cnt_t, cnt_b):
        print(i + 1)
        break
else:
    print(-1)
",,False,post,False,False,False,False,False,False,False,False,False,False,True,True,selected_pilot_75_apps.json
