Task ID,Dataset,model_created,model_run,description,Code,Test Result,Correctness,Post,original correctness,naive correctness,annotated correctness,annotated correctness simple,naive no fsl correctness,Correctness no fsl,simple verify,complex verify,default verify,simple verify no fsl,complex verify no fsl,default verify no fsl,data file,unique_id,consistency
276,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the median of two sorted lists of same size.,"def get_median(list1, list2, size):
    merged_list = sorted(list1 + list2)
    middle_index = size - 1
    if size % 2 == 0:
        median = (merged_list[middle_index] + merged_list[middle_index + 1]) / 2
    else:
        median = merged_list[middle_index]
    return median
",,False,post,False,False,False,True,False,False,False,False,False,True,True,False,selected_pilot_75_mbpp.json,276_llama3point1-70b,0.6666666666666666
222,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to remove lowercase substrings from a given string.,"def remove_lowercase(s):
    result = ''
    for char in s:
        if char.isupper():
            result += char
    return result
",,False,post,True,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,222_llama3point1-70b,0.8333333333333334
222,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to remove lowercase substrings from a given string.,"def remove_lowercase(s: str) -> str:
    return ''.join([char for char in s if char.isupper()])

# Testing the function
assert remove_lowercase(""PYTHon"") == 'PYTH'
assert remove_lowercase(""FInD"") == 'FID'
assert remove_lowercase(""STRinG"") == 'STRG'
",,False,post,True,False,False,True,False,True,True,True,True,False,False,False,selected_pilot_75_mbpp.json,222_gpt-4o,0.8333333333333334
309,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to check whether all the characters are same or not.,"def all_Characters_Same(s):
    return len(set(s)) == 1
",,False,post,False,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,309_llama3point1-70b,0.8333333333333334
209,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to get the first element of each sublist.,"def Extract(sublists):
    return [sublist[0] for sublist in sublists]
",,False,post,True,True,False,True,False,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,209_llama3point1-70b,0.5
335,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.,"def occurance_substring(string, substring):
    start = string.find(substring)
    if start == -1:
        return None
    end = start + len(substring)
    return (substring, start, end - 1)
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,335_llama3point1-70b,0.6666666666666666
325,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.,"def check_monthnumber_number(month: int) -> bool:
    # Define the set of months that have 30 days
    months_with_30_days = {4, 6, 9, 11}
    # Check if the given month is in the set
    return month in months_with_30_days

# Test cases to validate the solution
assert check_monthnumber_number(6) == True
assert check_monthnumber_number(2) == False
assert check_monthnumber_number(12) == False
",,False,post,True,True,False,True,True,False,True,True,False,True,True,True,selected_pilot_75_mbpp.json,325_gpt-4o,0.8333333333333334
45,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to check whether the given number is undulating or not.,"def is_undulating(n):
    n = str(n)
    undulating = True
    for i in range(1, len(n) - 1):
        if (n[i-1] < n[i] and n[i] < n[i+1]) or (n[i-1] > n[i] and n[i] > n[i+1]):
            pass
        else:
            undulating = False
            break
    return undulating
",,True,post,False,True,False,True,True,True,True,False,False,True,True,True,selected_pilot_75_mbpp.json,45_llama3point1-70b,0.5
83,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to sort a list of elements.,"def pancake_sort(arr):
    n = len(arr)
    for size in range(n, 0, -1):
        max_index = arr.index(max(arr[:size]))
        if max_index != size-1:
            if max_index != 0:
                arr[:max_index+1] = arr[:max_index+1][::-1]
            arr[:size] = arr[:size][::-1]
    return arr
",,False,post,True,False,False,False,False,False,False,True,True,False,True,True,selected_pilot_75_mbpp.json,83_llama3point1-70b,0.5
51,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to multiply all the numbers in a list and divide with the length of the list.,"def multiply_num(numbers):
    product = 1
    for num in numbers:
        product *= num
    return product / len(numbers)
",,True,post,True,False,False,True,False,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,51_llama3point1-70b,0.8333333333333334
275,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.,"def largest_subset(nums):
    if not nums:
        return 0

    nums.sort()
    dp = [1] * len(nums)

    for i in range(1, len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)
",,True,post,True,True,False,False,False,True,False,False,False,True,True,True,selected_pilot_75_mbpp.json,275_llama3point1-70b,0.6666666666666666
356,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to remove all whitespaces from a string.,"def remove_all_spaces(s):
    return s.replace("" "", """")

# Test cases
assert remove_all_spaces('python  program') == 'pythonprogram'
assert remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'
assert remove_all_spaces('python                     program') == 'pythonprogram'
assert remove_all_spaces('   python                     program') == 'pythonprogram'
",,True,post,True,True,True,True,True,True,True,True,True,True,False,True,selected_pilot_75_mbpp.json,356_gpt-4o,0.8333333333333334
315,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to add the given tuple to the given list.,"def add_tuple(input_list, input_tuple):
  return input_list + list(input_tuple)
",,True,post,True,False,False,False,False,False,True,True,True,False,False,True,selected_pilot_75_mbpp.json,315_llama3point1-70b,0.8333333333333334
276,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the median of two sorted lists of same size.,"def get_median(list1, list2, size):
    merged_list = sorted(list1 + list2)
    middle_index = size - 1
    if size % 2 == 0:
        median = (merged_list[middle_index] + merged_list[middle_index + 1]) / 2
    else:
        median = merged_list[middle_index]
    return median
",,True,post,False,False,False,False,False,True,False,False,False,False,False,False,selected_pilot_75_mbpp.json,276_llama3point1-70b,0.6666666666666666
222,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to remove lowercase substrings from a given string.,"def remove_lowercase(s):
    result = ''
    for char in s:
        if char.isupper():
            result += char
    return result
",,False,post,True,True,True,True,False,False,True,True,True,False,False,False,selected_pilot_75_mbpp.json,222_llama3point1-70b,0.8333333333333334
222,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to remove lowercase substrings from a given string.,"def remove_lowercase(s: str) -> str:
    return ''.join([char for char in s if char.isupper()])

# Testing the function
assert remove_lowercase(""PYTHon"") == 'PYTH'
assert remove_lowercase(""FInD"") == 'FID'
assert remove_lowercase(""STRinG"") == 'STRG'
",,True,post,True,False,False,True,True,False,True,False,False,True,False,True,selected_pilot_75_mbpp.json,222_gpt-4o,0.8333333333333334
309,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to check whether all the characters are same or not.,"def all_Characters_Same(s):
    return len(set(s)) == 1
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,309_llama3point1-70b,0.8333333333333334
209,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to get the first element of each sublist.,"def Extract(sublists):
    return [sublist[0] for sublist in sublists]
",,False,post,True,False,True,True,False,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,209_llama3point1-70b,0.5
335,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.,"def occurance_substring(string, substring):
    start = string.find(substring)
    if start == -1:
        return None
    end = start + len(substring)
    return (substring, start, end - 1)
",,True,post,False,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,335_llama3point1-70b,0.6666666666666666
325,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.,"def check_monthnumber_number(month: int) -> bool:
    # Define the set of months that have 30 days
    months_with_30_days = {4, 6, 9, 11}
    # Check if the given month is in the set
    return month in months_with_30_days

# Test cases to validate the solution
assert check_monthnumber_number(6) == True
assert check_monthnumber_number(2) == False
assert check_monthnumber_number(12) == False
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,325_gpt-4o,0.8333333333333334
45,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to check whether the given number is undulating or not.,"def is_undulating(n):
    n = str(n)
    undulating = True
    for i in range(1, len(n) - 1):
        if (n[i-1] < n[i] and n[i] < n[i+1]) or (n[i-1] > n[i] and n[i] > n[i+1]):
            pass
        else:
            undulating = False
            break
    return undulating
",,True,post,False,True,False,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,45_llama3point1-70b,0.5
83,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to sort a list of elements.,"def pancake_sort(arr):
    n = len(arr)
    for size in range(n, 0, -1):
        max_index = arr.index(max(arr[:size]))
        if max_index != size-1:
            if max_index != 0:
                arr[:max_index+1] = arr[:max_index+1][::-1]
            arr[:size] = arr[:size][::-1]
    return arr
",,False,post,True,False,False,False,False,False,False,False,True,False,False,False,selected_pilot_75_mbpp.json,83_llama3point1-70b,0.5
51,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to multiply all the numbers in a list and divide with the length of the list.,"def multiply_num(numbers):
    product = 1
    for num in numbers:
        product *= num
    return product / len(numbers)
",,False,post,True,False,True,True,False,False,True,True,True,True,True,False,selected_pilot_75_mbpp.json,51_llama3point1-70b,0.8333333333333334
275,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.,"def largest_subset(nums):
    if not nums:
        return 0

    nums.sort()
    dp = [1] * len(nums)

    for i in range(1, len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)
",,True,post,True,True,False,True,True,False,True,True,False,True,True,True,selected_pilot_75_mbpp.json,275_llama3point1-70b,0.6666666666666666
356,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to remove all whitespaces from a string.,"def remove_all_spaces(s):
    return s.replace("" "", """")

# Test cases
assert remove_all_spaces('python  program') == 'pythonprogram'
assert remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'
assert remove_all_spaces('python                     program') == 'pythonprogram'
assert remove_all_spaces('   python                     program') == 'pythonprogram'
",,False,post,True,True,False,True,True,False,True,False,False,True,False,False,selected_pilot_75_mbpp.json,356_gpt-4o,0.8333333333333334
315,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to add the given tuple to the given list.,"def add_tuple(input_list, input_tuple):
  return input_list + list(input_tuple)
",,True,post,True,False,True,False,False,True,False,False,False,False,False,False,selected_pilot_75_mbpp.json,315_llama3point1-70b,0.8333333333333334
276,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the median of two sorted lists of same size.,"def get_median(list1, list2, size):
    merged_list = sorted(list1 + list2)
    middle_index = size - 1
    if size % 2 == 0:
        median = (merged_list[middle_index] + merged_list[middle_index + 1]) / 2
    else:
        median = merged_list[middle_index]
    return median
",,True,post,False,False,False,False,False,False,True,True,False,True,False,False,selected_pilot_75_mbpp.json,276_llama3point1-70b,0.6666666666666666
222,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to remove lowercase substrings from a given string.,"def remove_lowercase(s):
    result = ''
    for char in s:
        if char.isupper():
            result += char
    return result
",,True,post,True,False,False,False,True,False,False,False,False,True,True,False,selected_pilot_75_mbpp.json,222_llama3point1-70b,0.8333333333333334
222,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to remove lowercase substrings from a given string.,"def remove_lowercase(s: str) -> str:
    return ''.join([char for char in s if char.isupper()])

# Testing the function
assert remove_lowercase(""PYTHon"") == 'PYTH'
assert remove_lowercase(""FInD"") == 'FID'
assert remove_lowercase(""STRinG"") == 'STRG'
",,False,post,True,False,False,True,True,True,False,False,False,True,False,False,selected_pilot_75_mbpp.json,222_gpt-4o,0.8333333333333334
276,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the median of two sorted lists of same size.,"def get_median(list1, list2, size):
    merged_list = sorted(list1 + list2)
    middle_index = size - 1
    if size % 2 == 0:
        median = (merged_list[middle_index] + merged_list[middle_index + 1]) / 2
    else:
        median = merged_list[middle_index]
    return median
",,True,post,False,True,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,276_llama3point1-70b,0.6666666666666666
222,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to remove lowercase substrings from a given string.,"def remove_lowercase(s):
    result = ''
    for char in s:
        if char.isupper():
            result += char
    return result
",,False,post,True,True,True,False,False,False,True,True,True,False,False,False,selected_pilot_75_mbpp.json,222_llama3point1-70b,0.8333333333333334
222,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to remove lowercase substrings from a given string.,"def remove_lowercase(s: str) -> str:
    return ''.join([char for char in s if char.isupper()])

# Testing the function
assert remove_lowercase(""PYTHon"") == 'PYTH'
assert remove_lowercase(""FInD"") == 'FID'
assert remove_lowercase(""STRinG"") == 'STRG'
",,False,post,True,False,False,True,False,True,True,False,True,True,True,True,selected_pilot_75_mbpp.json,222_gpt-4o,0.8333333333333334
309,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to check whether all the characters are same or not.,"def all_Characters_Same(s):
    return len(set(s)) == 1
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,309_llama3point1-70b,0.8333333333333334
209,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to get the first element of each sublist.,"def Extract(sublists):
    return [sublist[0] for sublist in sublists]
",,False,post,True,True,True,True,False,False,True,True,True,True,True,False,selected_pilot_75_mbpp.json,209_llama3point1-70b,0.5
335,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.,"def occurance_substring(string, substring):
    start = string.find(substring)
    if start == -1:
        return None
    end = start + len(substring)
    return (substring, start, end - 1)
",,True,post,False,True,True,True,False,False,True,True,True,False,False,False,selected_pilot_75_mbpp.json,335_llama3point1-70b,0.6666666666666666
325,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.,"def check_monthnumber_number(month: int) -> bool:
    # Define the set of months that have 30 days
    months_with_30_days = {4, 6, 9, 11}
    # Check if the given month is in the set
    return month in months_with_30_days

# Test cases to validate the solution
assert check_monthnumber_number(6) == True
assert check_monthnumber_number(2) == False
assert check_monthnumber_number(12) == False
",,False,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,325_gpt-4o,0.8333333333333334
45,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to check whether the given number is undulating or not.,"def is_undulating(n):
    n = str(n)
    undulating = True
    for i in range(1, len(n) - 1):
        if (n[i-1] < n[i] and n[i] < n[i+1]) or (n[i-1] > n[i] and n[i] > n[i+1]):
            pass
        else:
            undulating = False
            break
    return undulating
",,True,post,False,False,True,True,False,True,False,False,False,False,False,False,selected_pilot_75_mbpp.json,45_llama3point1-70b,0.5
83,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to sort a list of elements.,"def pancake_sort(arr):
    n = len(arr)
    for size in range(n, 0, -1):
        max_index = arr.index(max(arr[:size]))
        if max_index != size-1:
            if max_index != 0:
                arr[:max_index+1] = arr[:max_index+1][::-1]
            arr[:size] = arr[:size][::-1]
    return arr
",,True,post,True,True,True,True,False,False,True,True,True,False,True,True,selected_pilot_75_mbpp.json,83_llama3point1-70b,0.5
51,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to multiply all the numbers in a list and divide with the length of the list.,"def multiply_num(numbers):
    product = 1
    for num in numbers:
        product *= num
    return product / len(numbers)
",,False,post,True,False,True,True,False,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,51_llama3point1-70b,0.8333333333333334
275,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.,"def largest_subset(nums):
    if not nums:
        return 0

    nums.sort()
    dp = [1] * len(nums)

    for i in range(1, len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)
",,True,post,True,True,False,True,True,True,False,False,True,True,True,True,selected_pilot_75_mbpp.json,275_llama3point1-70b,0.6666666666666666
356,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to remove all whitespaces from a string.,"def remove_all_spaces(s):
    return s.replace("" "", """")

# Test cases
assert remove_all_spaces('python  program') == 'pythonprogram'
assert remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'
assert remove_all_spaces('python                     program') == 'pythonprogram'
assert remove_all_spaces('   python                     program') == 'pythonprogram'
",,True,post,True,True,True,True,True,True,False,True,True,True,True,True,selected_pilot_75_mbpp.json,356_gpt-4o,0.8333333333333334
315,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to add the given tuple to the given list.,"def add_tuple(input_list, input_tuple):
  return input_list + list(input_tuple)
",,True,post,True,False,True,False,False,True,False,False,False,True,False,True,selected_pilot_75_mbpp.json,315_llama3point1-70b,0.8333333333333334
