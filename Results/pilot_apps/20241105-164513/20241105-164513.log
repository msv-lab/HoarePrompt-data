DEBUG - Start Task 0232
DEBUG - Dataset: apps
DEBUG - model_created: llama3-70b
DEBUG - model_run: gpt-3.5-turbo-0125
DEBUG - description: There is unrest in the Galactic Senate. Several thousand solar systems have declared their intentions to leave the Republic. Master Heidi needs to select the Jedi Knights who will go on peacekeeping missions throughout the galaxy. It is well-known that the success of any peacekeeping mission depends on the colors of the lightsabers of the Jedi who will go on that mission. 

Heidi has n Jedi Knights standing in front of her, each one with a lightsaber of one of m possible colors. She knows that for the mission to be the most effective, she needs to select some contiguous interval of knights such that there are exactly k_1 knights with lightsabers of the first color, k_2 knights with lightsabers of the second color, ..., k_{m} knights with lightsabers of the m-th color. Help her find out if this is possible.


-----Input-----

The first line of the input contains n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ n). The second line contains n integers in the range {1, 2, ..., m} representing colors of the lightsabers of the subsequent Jedi Knights. The third line contains m integers k_1, k_2, ..., k_{m} (with $1 \leq \sum_{i = 1}^{m} k_{i} \leq n$) – the desired counts of lightsabers of each color from 1 to m.


-----Output-----

Output YES if an interval with prescribed color counts exists, or output NO if there is none.


-----Example-----
Input
5 2
1 1 2 2 1
1 2

Output
YES
DEBUG - Postcondition: The loop calculates the count of each unique color in the `colors` list and updates the `window_counts` dictionary accordingly. If all counts in `window_counts` match the corresponding counts in `counts`, `found` is set to True and the loop is terminated. The variables `n` remains greater than 0, `i` remains less than `n`, `color_counts` dictionary contains the count of each unique color in the `colors` list. If the loop does not execute due to `n` being less than or equal to 0, the values of the variables remain the same as in the initial state where `color_counts` is an empty dictionary and `found` is False. After the if statement executes, the loop is terminated and `found` is set to True. All other variables retain their initial values. The output of the program is either 'YES' or 'NO' depending on the value of `found`.
DEBUG - Correctness: False
DEBUG - Start Task 0232
DEBUG - Dataset: apps
DEBUG - model_created: gpt-4o
DEBUG - model_run: gpt-3.5-turbo-0125
DEBUG - description: There is unrest in the Galactic Senate. Several thousand solar systems have declared their intentions to leave the Republic. Master Heidi needs to select the Jedi Knights who will go on peacekeeping missions throughout the galaxy. It is well-known that the success of any peacekeeping mission depends on the colors of the lightsabers of the Jedi who will go on that mission. 

Heidi has n Jedi Knights standing in front of her, each one with a lightsaber of one of m possible colors. She knows that for the mission to be the most effective, she needs to select some contiguous interval of knights such that there are exactly k_1 knights with lightsabers of the first color, k_2 knights with lightsabers of the second color, ..., k_{m} knights with lightsabers of the m-th color. Help her find out if this is possible.


-----Input-----

The first line of the input contains n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ n). The second line contains n integers in the range {1, 2, ..., m} representing colors of the lightsabers of the subsequent Jedi Knights. The third line contains m integers k_1, k_2, ..., k_{m} (with $1 \leq \sum_{i = 1}^{m} k_{i} \leq n$) – the desired counts of lightsabers of each color from 1 to m.


-----Output-----

Output YES if an interval with prescribed color counts exists, or output NO if there is none.


-----Example-----
Input
5 2
1 1 2 2 1
1 2

Output
YES
DEBUG - Postcondition: unknown
DEBUG - Correctness: True
DEBUG - Start Task 0022
DEBUG - Dataset: apps
DEBUG - model_created: llama3-70b
DEBUG - model_run: gpt-3.5-turbo-0125
DEBUG - description: Let's call a string "s-palindrome" if it is symmetric about the middle of the string. For example, the string "oHo" is "s-palindrome", but the string "aa" is not. The string "aa" is not "s-palindrome", because the second half of it is not a mirror reflection of the first half.

 [Image] English alphabet 

You are given a string s. Check if the string is "s-palindrome".


-----Input-----

The only line contains the string s (1 ≤ |s| ≤ 1000) which consists of only English letters.


-----Output-----

Print "TAK" if the string s is "s-palindrome" and "NIE" otherwise.


-----Examples-----
Input
oXoxoXo

Output
TAK

Input
bod

Output
TAK

Input
ER

Output
NIE
DEBUG - Postcondition: `s` is a string of length between 1 and 1000, `n` is an integer between 1 and 1000, `is_spalindrome` is True
DEBUG - Correctness: True
DEBUG - Start Task 0022
DEBUG - Dataset: apps
DEBUG - model_created: gpt-4o
DEBUG - model_run: gpt-3.5-turbo-0125
DEBUG - description: Let's call a string "s-palindrome" if it is symmetric about the middle of the string. For example, the string "oHo" is "s-palindrome", but the string "aa" is not. The string "aa" is not "s-palindrome", because the second half of it is not a mirror reflection of the first half.

 [Image] English alphabet 

You are given a string s. Check if the string is "s-palindrome".


-----Input-----

The only line contains the string s (1 ≤ |s| ≤ 1000) which consists of only English letters.


-----Output-----

Print "TAK" if the string s is "s-palindrome" and "NIE" otherwise.


-----Examples-----
Input
oXoxoXo

Output
TAK

Input
bod

Output
TAK

Input
ER

Output
NIE
DEBUG - Postcondition: *`s` is a string. If the length of `s` is even, the function `func` checks if all pairs of characters at symmetric positions are equal. If all pairs are equal, the program prints 'TAK'. If the pairs are not equal, the program prints 'NIE'. If the length of `s` is odd, the program always prints 'NIE'.
DEBUG - Correctness: False
DEBUG - Start Task 0067
DEBUG - Dataset: apps
DEBUG - model_created: llama3-70b
DEBUG - model_run: gpt-3.5-turbo-0125
DEBUG - description: Nauuo is a girl who loves writing comments.

One day, she posted a comment on Codeforces, wondering whether she would get upvotes or downvotes.

It's known that there were $x$ persons who would upvote, $y$ persons who would downvote, and there were also another $z$ persons who would vote, but you don't know whether they would upvote or downvote. Note that each of the $x+y+z$ people would vote exactly one time.

There are three different results: if there are more people upvote than downvote, the result will be "+"; if there are more people downvote than upvote, the result will be "-"; otherwise the result will be "0".

Because of the $z$ unknown persons, the result may be uncertain (i.e. there are more than one possible results). More formally, the result is uncertain if and only if there exist two different situations of how the $z$ persons vote, that the results are different in the two situations.

Tell Nauuo the result or report that the result is uncertain.


-----Input-----

The only line contains three integers $x$, $y$, $z$ ($0\le x,y,z\le100$), corresponding to the number of persons who would upvote, downvote or unknown.


-----Output-----

If there is only one possible result, print the result : "+", "-" or "0".

Otherwise, print "?" to report that the result is uncertain.


-----Examples-----
Input
3 7 0

Output
-
Input
2 0 1

Output
+
Input
1 1 0

Output
0
Input
0 0 1

Output
?


-----Note-----

In the first example, Nauuo would definitely get three upvotes and seven downvotes, so the only possible result is "-".

In the second example, no matter the person unknown downvotes or upvotes, Nauuo would get more upvotes than downvotes. So the only possible result is "+".

In the third example, Nauuo would definitely get one upvote and one downvote, so the only possible result is "0".

In the fourth example, if the only one person upvoted, the result would be "+", otherwise, the result would be "-". There are two possible results, so the result is uncertain.
DEBUG - Postcondition: *`x, y, z` are non-negative integers such that 0 <= x, y, z <= 100. If x > y + z, the program prints '+'. If x < y, the program prints '-'. If x equals y and z is 0, the program prints '0'. If x equals y and z is not 0, the program prints '?'. If none of the above conditions hold, the program prints '?'.
DEBUG - Correctness: True
DEBUG - Start Task 0067
DEBUG - Dataset: apps
DEBUG - model_created: gpt-4o
DEBUG - model_run: gpt-3.5-turbo-0125
DEBUG - description: Nauuo is a girl who loves writing comments.

One day, she posted a comment on Codeforces, wondering whether she would get upvotes or downvotes.

It's known that there were $x$ persons who would upvote, $y$ persons who would downvote, and there were also another $z$ persons who would vote, but you don't know whether they would upvote or downvote. Note that each of the $x+y+z$ people would vote exactly one time.

There are three different results: if there are more people upvote than downvote, the result will be "+"; if there are more people downvote than upvote, the result will be "-"; otherwise the result will be "0".

Because of the $z$ unknown persons, the result may be uncertain (i.e. there are more than one possible results). More formally, the result is uncertain if and only if there exist two different situations of how the $z$ persons vote, that the results are different in the two situations.

Tell Nauuo the result or report that the result is uncertain.


-----Input-----

The only line contains three integers $x$, $y$, $z$ ($0\le x,y,z\le100$), corresponding to the number of persons who would upvote, downvote or unknown.


-----Output-----

If there is only one possible result, print the result : "+", "-" or "0".

Otherwise, print "?" to report that the result is uncertain.


-----Examples-----
Input
3 7 0

Output
-
Input
2 0 1

Output
+
Input
1 1 0

Output
0
Input
0 0 1

Output
?


-----Note-----

In the first example, Nauuo would definitely get three upvotes and seven downvotes, so the only possible result is "-".

In the second example, no matter the person unknown downvotes or upvotes, Nauuo would get more upvotes than downvotes. So the only possible result is "+".

In the third example, Nauuo would definitely get one upvote and one downvote, so the only possible result is "0".

In the fourth example, if the only one person upvoted, the result would be "+", otherwise, the result would be "-". There are two possible results, so the result is uncertain.
DEBUG - Postcondition: *`x`, `y`, and `z` are non-negative integers such that 0 <= x, y, z <= 100; `min_upvotes` is a non-negative integer between 0 and 100; `max_upvotes` is a non-negative integer between 0 and 200; `min_downvotes` is assigned the value of `y`; `max_downvotes` is assigned the value of `y + z`. If `max_upvotes` is less than `min_downvotes`, the program prints '-'. If `max_downvotes` is less than `min_upvotes`, the program prints '+'. Otherwise, the program prints '?'.
DEBUG - Correctness: False
DEBUG - Start Task 0240
DEBUG - Dataset: apps
DEBUG - model_created: llama3-70b
DEBUG - model_run: gpt-3.5-turbo-0125
DEBUG - description: Vasya decided to pass a very large integer n to Kate. First, he wrote that number as a string, then he appended to the right integer k — the number of digits in n. 

Magically, all the numbers were shuffled in arbitrary order while this note was passed to Kate. The only thing that Vasya remembers, is a non-empty substring of n (a substring of n is a sequence of consecutive digits of the number n).

Vasya knows that there may be more than one way to restore the number n. Your task is to find the smallest possible initial integer n. Note that decimal representation of number n contained no leading zeroes, except the case the integer n was equal to zero itself (in this case a single digit 0 was used).


-----Input-----

The first line of the input contains the string received by Kate. The number of digits in this string does not exceed 1 000 000.

The second line contains the substring of n which Vasya remembers. This string can contain leading zeroes. 

It is guaranteed that the input data is correct, and the answer always exists.


-----Output-----

Print the smalles integer n which Vasya could pass to Kate.


-----Examples-----
Input
003512
021

Output
30021

Input
199966633300
63

Output
3036366999
DEBUG - Postcondition: The function returns a new string `n` containing characters present in both `s` and `t`, or 0 if `t` is empty.
DEBUG - Correctness: True
DEBUG - Start Task 0240
DEBUG - Dataset: apps
DEBUG - model_created: gpt-4o
DEBUG - model_run: gpt-3.5-turbo-0125
DEBUG - description: Vasya decided to pass a very large integer n to Kate. First, he wrote that number as a string, then he appended to the right integer k — the number of digits in n. 

Magically, all the numbers were shuffled in arbitrary order while this note was passed to Kate. The only thing that Vasya remembers, is a non-empty substring of n (a substring of n is a sequence of consecutive digits of the number n).

Vasya knows that there may be more than one way to restore the number n. Your task is to find the smallest possible initial integer n. Note that decimal representation of number n contained no leading zeroes, except the case the integer n was equal to zero itself (in this case a single digit 0 was used).


-----Input-----

The first line of the input contains the string received by Kate. The number of digits in this string does not exceed 1 000 000.

The second line contains the substring of n which Vasya remembers. This string can contain leading zeroes. 

It is guaranteed that the input data is correct, and the answer always exists.


-----Output-----

Print the smalles integer n which Vasya could pass to Kate.


-----Examples-----
Input
003512
021

Output
30021

Input
199966633300
63

Output
3036366999
DEBUG - Postcondition: *The function `func` accepts two string parameters `s` and `sub`. It calculates the frequency of characters in both strings using Counter. Then, it subtracts the frequency of characters in `sub` from `s`. If 'sub_counter' is empty, 's_counter' remains unchanged. The function then generates a list of possible numbers based on the remaining characters in `s`. It finds the smallest number from the list of possible numbers and returns it.
DEBUG - Correctness: True
DEBUG - Start Task 0271
DEBUG - Dataset: apps
DEBUG - model_created: llama3-70b
DEBUG - model_run: gpt-3.5-turbo-0125
DEBUG - description: Vasya has a non-negative integer n. He wants to round it to nearest integer, which ends up with 0. If n already ends up with 0, Vasya considers it already rounded.

For example, if n = 4722 answer is 4720. If n = 5 Vasya can round it to 0 or to 10. Both ways are correct.

For given n find out to which integer will Vasya round it.


-----Input-----

The first line contains single integer n (0 ≤ n ≤ 10^9) — number that Vasya has.


-----Output-----

Print result of rounding n. Pay attention that in some cases answer isn't unique. In that case print any correct answer.


-----Examples-----
Input
5

Output
0

Input
113

Output
110

Input
1000000000

Output
1000000000

Input
5432359

Output
5432360



-----Note-----

In the first example n = 5. Nearest integers, that ends up with zero are 0 and 10. Any of these answers is correct, so you can print 0 or 10.
DEBUG - Postcondition: *n is a non-negative integer such that 0 ≤ n ≤ 10^9. If n % 10 is 0, the value of n is printed. If n % 10 is less than or equal to 5, the output is equal to n minus the remainder of n divided by 10. If n % 10 is greater than 5, the output is between n + 10 and n + 19.
DEBUG - Correctness: True
DEBUG - Start Task 0271
DEBUG - Dataset: apps
DEBUG - model_created: gpt-4o
DEBUG - model_run: gpt-3.5-turbo-0125
DEBUG - description: Vasya has a non-negative integer n. He wants to round it to nearest integer, which ends up with 0. If n already ends up with 0, Vasya considers it already rounded.

For example, if n = 4722 answer is 4720. If n = 5 Vasya can round it to 0 or to 10. Both ways are correct.

For given n find out to which integer will Vasya round it.


-----Input-----

The first line contains single integer n (0 ≤ n ≤ 10^9) — number that Vasya has.


-----Output-----

Print result of rounding n. Pay attention that in some cases answer isn't unique. In that case print any correct answer.


-----Examples-----
Input
5

Output
0

Input
113

Output
110

Input
1000000000

Output
1000000000

Input
5432359

Output
5432360



-----Note-----

In the first example n = 5. Nearest integers, that ends up with zero are 0 and 10. Any of these answers is correct, so you can print 0 or 10.
DEBUG - Postcondition: `n` is a non-negative integer such that 0 ≤ n ≤ 10^9, `remainder` is the remainder of `n` divided by 10, and `result` is calculated based on the value of `remainder`
DEBUG - Correctness: True
