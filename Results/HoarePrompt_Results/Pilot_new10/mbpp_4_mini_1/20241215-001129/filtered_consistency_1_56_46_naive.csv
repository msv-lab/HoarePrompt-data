Task ID,Dataset,model_created,model_run,description,Code,Test Result,Correctness,Post,original correctness,naive correctness,annotated correctness,annotated correctness simple,naive no fsl correctness,Correctness no fsl,data file,simple verify,complex verify,default verify,simple verify no fsl,complex verify no fsl,default verify no fsl,unique_id,consistency
179,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n):
    even_numbers = [2 * i for i in range(1, n + 1)]
    cube_sum = sum(x ** 3 for x in even_numbers)
    return cube_sum

# Tests
assert cube_Sum(2) == 72
assert cube_Sum(3) == 288
assert cube_Sum(4) == 800
",,True,post,True,False,True,True,False,True,selected_pilot_75_mbpp.json,False,True,True,True,True,True,179_gpt-4o,0.5
146,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the list of maximum length in a list of lists.,"def max_length(list_of_lists):
    max_len = 0
    max_list = []
    
    for lst in list_of_lists:
        if len(lst) > max_len:
            max_len = len(lst)
            max_list = lst
            
    return (max_len, max_list)

# Test cases
assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])
assert max_length([[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15])
assert max_length([[5], [15, 20, 25]]) == (3, [15, 20, 25])
",,False,post,True,False,True,False,True,False,selected_pilot_75_mbpp.json,False,False,False,True,True,True,146_gpt-4o,0.5
307,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to find the index of smallest triangular number with n digits.,"def find_Index(n):
    import math
    idx = 1
    while True:
        triangular_num = (idx * (idx + 1)) // 2
        if len(str(triangular_num)) >= n:
            return idx
        idx += 1
",,True,post,False,True,True,True,True,True,selected_pilot_75_mbpp.json,True,True,False,True,True,True,307_llama3point1-70b,0.5
307,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the index of smallest triangular number with n digits.,"def find_Index(n):
    k = 1
    while True:
        triangular_number = k * (k + 1) // 2
        if len(str(triangular_number)) == n:
            return k
        k += 1

# Test cases
assert find_Index(2) == 4
assert find_Index(3) == 14
assert find_Index(4) == 45
",,True,post,False,True,True,True,False,True,selected_pilot_75_mbpp.json,True,True,True,True,True,False,307_gpt-4o,0.5
297,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,"Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.","def multiply_elements(t):
    return tuple(t[i] * t[i+1] for i in range(len(t) - 1))

# Test cases
assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)
assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)
assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)
assert multiply_elements((12,)) == ()
",,False,post,True,False,True,True,False,False,selected_pilot_75_mbpp.json,True,True,True,True,False,True,297_gpt-4o,0.5
216,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to check whether the given list contains consecutive numbers or not.,"def check_Consecutive(lst):
    lst.sort()
    return all(lst[i] - lst[i-1] == 1 for i in range(1, len(lst))) and len(lst) == len(set(lst))
",,False,post,True,False,True,False,False,False,selected_pilot_75_mbpp.json,True,True,True,False,True,False,216_llama3point1-70b,0.5
336,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to check whether every odd index contains odd numbers of a given list.,"def odd_position(lst):
    for i in range(len(lst)):
        if i % 2 != 0 and lst[i] % 2 == 0:
            return False
    return True
",,True,post,True,True,False,False,True,True,selected_pilot_75_mbpp.json,False,False,True,True,True,True,336_llama3point1-70b,0.5
326,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the minimum difference between any two elements in a given array.,"def find_min_diff(arr, n):
    if n < 2:
        return 0  # If array has less than 2 elements, no valid difference can be found
    
    arr = sorted(arr)
    min_diff = float('inf')
    
    for i in range(n - 1):
        diff = arr[i+1] - arr[i]
        if diff < min_diff:
            min_diff = diff
            
    return min_diff

# Testing the function based on the provided assertions
assert find_min_diff((1,5,3,19,18,25),6) == 1
assert find_min_diff((4,3,2,6),4) == 1
assert find_min_diff((30,5,20,9),4) == 4
",,False,post,True,False,False,True,True,False,selected_pilot_75_mbpp.json,False,True,True,True,True,True,326_gpt-4o,0.5
21,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find smallest number in a list.,"def smallest_num(lst):
    return min(lst)

# Tests
assert smallest_num([10, 20, 1, 45, 99]) == 1
assert smallest_num([1, 2, 3]) == 1
assert smallest_num([45, 46, 50, 60]) == 45
",,False,post,True,True,False,True,True,False,selected_pilot_75_mbpp.json,True,False,False,True,False,False,21_gpt-4o,0.5
302,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the index of the first occurrence of a given number in a sorted array.,"def find_first_occurrence(arr, num):
    for i, x in enumerate(arr):
        if x == num:
            return i
    return -1  # return -1 if num is not found in the array
",,True,post,True,True,True,False,False,True,selected_pilot_75_mbpp.json,True,True,True,True,True,True,302_llama3point1-70b,0.5
