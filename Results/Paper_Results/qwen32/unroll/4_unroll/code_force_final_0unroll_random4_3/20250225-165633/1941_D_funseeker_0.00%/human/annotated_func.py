#State of the program right berfore the function call: No variables are present in the function signature, thus no specific precondition can be derived from the given function signature alone.
def func_1():
    return sys.stdin.readline().strip()
    #The program returns the input string provided by the user, with leading and trailing whitespace removed.
#Overall this is what the function does:The function reads a line of input from the standard input, removes any leading and trailing whitespace from it, and returns the resulting string.

#State of the program right berfore the function call: This function does not have any parameters, so there are no variables or relationships to describe.
def func_2():
    return int(func_1())
    #The program returns the integer value returned by `func_1()`
#Overall this is what the function does:The function `func_2` does not accept any parameters and returns the integer value returned by `func_1()`.

#State of the program right berfore the function call: This function does not have any parameters in its signature, so there are no variables or relationships to describe.
def func_3():
    return list(map(int, func_1().split()))
    #The program returns a list of integers, where each integer is derived from converting the substrings of the string returned by `func_1()` after splitting it by whitespace.
#Overall this is what the function does:The function `func_3` does not accept any parameters. It returns a list of integers, where each integer is obtained by converting the substrings of the string returned by `func_1()`, which are split by whitespace.

#State of the program right berfore the function call: n is an integer greater than 1, m is a non-negative integer, and x is an integer such that 1 <= x <= n. ans is a set initialized with the value x. r is an integer such that 1 <= r <= n - 1, and c is a character that can be '0', '1', or '?'.
def func_4():
    n, m, x = func_3()
    ans = {x}
    for _ in range(m):
        r, c = func_1().split()
        
        r = int(r)
        
        temp = set()
        
        for q in ans:
            if c == '0' or c == '?':
                temp.add((q + r) % n)
            if c == '1' or c == '?':
                temp.add((q - r) % n)
        
        ans = temp
        
    #State: `n`, `m`, and `x` remain unchanged. `ans` is a set of values generated by the loop operations. `r` and `c` are the values from the last iteration of the loop.
    if (0 in ans) :
        ans.discard(0)
        ans.add(n)
    #State: `n`, `m`, and `x` remain unchanged. `ans` is a set of values generated by the loop operations. If `0` is in `ans`, `ans` now includes `n` and excludes `0`. `r` and `c` are the values from the last iteration of the loop.
    print(len(ans))
    #This is printed: len(ans) (where ans is the set of values generated by the loop operations with the condition that if 0 was in ans, it is replaced by n)
    print(*ans)
    #This is printed: the elements of the set `ans` after the loop operations and the condition (if 0 was in `ans`, it is removed and `n` is added)
#Overall this is what the function does:The function generates a set of integers based on initial conditions and a series of operations. It starts with a set containing a single integer `x`. For each of `m` iterations, it modifies the set by adding or subtracting a value `r` (modulo `n`), depending on the character `c` which can be '0', '1', or '?'. If the resulting set contains `0`, it replaces `0` with `n`. The function then prints the size of the final set and its elements.

