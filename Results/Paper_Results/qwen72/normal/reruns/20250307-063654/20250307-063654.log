DEBUG - Start Task 1945_D_vjudge.10_0.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: The guys lined up in a queue of n people, starting with person number i = 1 ,
to ask Serafim the Owl about the meaning of life. Unfortunately, Kirill was
very busy writing the legend for this problem, so he arrived a little later
and stood at the end of the line after the n -th person. Kirill is completely
dissatisfied with this situation, so he decided to bribe some people ahead of
him.

For the i -th person in the queue, Kirill knows two values: a_i and b_i . If
at the moment Kirill is standing at position i , then he can choose any
position j such that j < i and exchange places with the person at position j .
In this case, Kirill will have to pay him a_j coins. And for each k such that
j < k < i , Kirill will have to pay b_k coins to the person at position k .
Kirill can perform this action any number of times.

Kirill is thrifty, so he wants to spend as few coins as possible, but he
doesn't want to wait too long, so Kirill believes he should be among the first
m people in line.

Help Kirill determine the minimum number of coins he will have to spend in
order to not wait too long.

Input

Each test consists of several sets of input data. The first line contains a
single integer t (1 \le t \le 10^4 ) — the number of test cases. Then follows
the description of the test case.

The first line of each test case contains two integers n and m (1 \le m \le n
\le 200\,000 ) — the number of people in the queue besides Kirill and the
maximum allowable final position of Kirill, respectively.

The second line contains n integers a_1, a_2, \dots, a_n separated by spaces
(1 \le a_i \le 10^9 ).

The third line contains n integers b_1, b_2, \dots, b_n separated by spaces (1
\le b_i \le 10^9 ).

It is guaranteed that the sum of the values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer — the minimum number of coins
Kirill needs to spend.

Example

Input

    4
    
    4 2
    
    7 3 6 9
    
    4 3 8 5
    
    6 2
    
    6 9 7 1 8 3
    
    5 8 8 1 4 1
    
    7 7
    
    7 2 9 2 6 5 9
    
    9 1 10 7 1 4 9
    
    2 1
    
    2 3
    
    1 1

Output

    14
    22
    9
    3
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1926_C_vjudge.2_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Please note that the time limit for this problem is only 0.5 seconds per test.

Vladislav wrote the integers from 1 to n , inclusive, on the board. Then he
replaced each integer with the sum of its digits.

What is the sum of the numbers on the board now?

For example, if n=12 then initially the numbers on the board are:

Then after the replacement, the numbers become:

The sum of these numbers is 1+2+3+4+5+6+7+8+9+1+2+3=51 . Thus, for n=12 the
answer is 51 .

Input

The first line contains an integer t (1 \leq t \leq 10^4 ) — the number of
test cases.

The only line of each test case contains a single integer n (1 \leq n \leq 2
\cdot 10^5 ) — the largest number Vladislav writes.

Output

For each test case, output a single integer — the sum of the numbers at the
end of the process.

Example

Input

    7
    
    12
    
    1
    
    2
    
    3
    
    1434
    
    2024
    
    200000

Output

    51
    1
    3
    6
    18465
    28170
    4600002
DEBUG - Correctness: {'naive': True, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': True, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': True, 'default_verify': True, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1926_E_Joyboy1730_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Vladislav has n cards numbered 1, 2, \dots, n . He wants to lay them down in a
row as follows:

  * First, he lays down all the odd-numbered cards from smallest to largest. 
  * Next, he lays down all cards that are twice an odd number from smallest to largest (i.e. 2 multiplied by an odd number). 
  * Next, he lays down all cards that are 3 times an odd number from smallest to largest (i.e. 3 multiplied by an odd number). 
  * Next, he lays down all cards that are 4 times an odd number from smallest to largest (i.e. 4 multiplied by an odd number). 
  * And so on, until all cards are laid down. 

What is the k -th card he lays down in this process? Once Vladislav puts a
card down, he cannot use that card again.

Input

The first line contains an integer t (1 \leq t \leq 5 \cdot 10^4 ) — the
number of test cases.

The only line of each test case contains two integers n and k (1 \leq k \leq n
\leq 10^9 ) — the number of cards Vlad has, and the position of the card you
need to output.

Output

For each test case, output a single integer — the k -th card Vladislav lays
down.

Example

Input

    11
    
    7 1
    
    7 2
    
    7 3
    
    7 4
    
    7 5
    
    7 6
    
    7 7
    
    1 1
    
    34 14
    
    84 19
    
    1000000000 1000000000

Output

    1
    3
    5
    7
    2
    6
    4
    1
    27
    37
    536870912
    
Note

In the first seven test cases, n=7 . Vladislav lays down the cards as follows:

  * First — all the odd-numbered cards in the order 1 , 3 , 5 , 7 . 
  * Next — all cards that are twice an odd number in the order 2 , 6 . 
  * Next, there are no remaining cards that are 3 times an odd number. (Vladislav has only one of each card.) 
  * Next — all cards that are 4 times an odd number, and there is only one such card: 4 . 
  * There are no more cards left, so Vladislav stops. 

Thus the order of cards is 1 , 3 , 5 , 7 , 2 , 6 , 4 .
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': True, 'default_verify': 'Nan', 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1966_C_kapilshhh_0.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Alice and Bob are playing a game on n piles of stones. On each player's turn,
they select a positive integer k that is at most the size of the smallest
nonempty pile and remove k stones from each nonempty pile at once. The first
player who is unable to make a move (because all piles are empty) loses.

Given that Alice goes first, who will win the game if both players play
optimally?

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le
2\cdot 10^5 ) — the number of piles in the game.

The next line of each test case contains n integers a_1, a_2, \ldots a_n (1
\le a_i \le 10^9 ), where a_i is the initial number of stones in the i -th
pile.

It is guaranteed that the sum of n over all test cases does not exceed 2\cdot
10^5 .

Output

For each test case, print a single line with the name of the winner, assuming
both players play optimally. If Alice wins, print "Alice", otherwise print
"Bob" (without quotes).

Example

Input

    7
    
    5
    
    3 3 3 3 3
    
    2
    
    1 7
    
    7
    
    1 3 9 7 4 2 100
    
    3
    
    1 2 3
    
    6
    
    2 1 3 4 2 4
    
    8
    
    5 7 2 9 6 3 3 2
    
    1
    
    1000000000

Output

    Alice
    Bob
    Alice
    Alice
    Bob
    Alice
    Alice
    
Note

In the first test case, Alice can win by choosing k=3 on her first turn, which
will empty all of the piles at once.

In the second test case, Alice must choose k=1 on her first turn since there
is a pile of size 1 , so Bob can win on the next turn by choosing k=6 .
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1966_C_kapilshhh_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Alice and Bob are playing a game on n piles of stones. On each player's turn,
they select a positive integer k that is at most the size of the smallest
nonempty pile and remove k stones from each nonempty pile at once. The first
player who is unable to make a move (because all piles are empty) loses.

Given that Alice goes first, who will win the game if both players play
optimally?

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le
2\cdot 10^5 ) — the number of piles in the game.

The next line of each test case contains n integers a_1, a_2, \ldots a_n (1
\le a_i \le 10^9 ), where a_i is the initial number of stones in the i -th
pile.

It is guaranteed that the sum of n over all test cases does not exceed 2\cdot
10^5 .

Output

For each test case, print a single line with the name of the winner, assuming
both players play optimally. If Alice wins, print "Alice", otherwise print
"Bob" (without quotes).

Example

Input

    7
    
    5
    
    3 3 3 3 3
    
    2
    
    1 7
    
    7
    
    1 3 9 7 4 2 100
    
    3
    
    1 2 3
    
    6
    
    2 1 3 4 2 4
    
    8
    
    5 7 2 9 6 3 3 2
    
    1
    
    1000000000

Output

    Alice
    Bob
    Alice
    Alice
    Bob
    Alice
    Alice
    
Note

In the first test case, Alice can win by choosing k=3 on her first turn, which
will empty all of the piles at once.

In the second test case, Alice must choose k=1 on her first turn since there
is a pile of size 1 , so Bob can win on the next turn by choosing k=6 .
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': False, 'simple_verify': True, 'complex_verify': True, 'default_verify': True, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1946_C_naowalr_100%
ERROR - Error: unsupported statement type: <ast.Global object at 0x7b0a53c0cbb0> global numCuts

DEBUG - Start Task 1946_C_naowalr_100%
ERROR - Error: unsupported statement type: <ast.Global object at 0x7b0a53c0d210> global numCuts

DEBUG - Start Task 1946_C_naowalr_100%
ERROR - Error: unsupported statement type: <ast.Global object at 0x7b0a53c0de40> global numCuts

DEBUG - Start Task 1978_C_Listar_4.35%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Let's call the Manhattan value of a permutation^{\dagger} p the value of the
expression |p_1 - 1| + |p_2 - 2| + \ldots + |p_n - n| .

For example, for the permutation [1, 2, 3] , the Manhattan value is |1 - 1| +
|2 - 2| + |3 - 3| = 0 , and for the permutation [3, 1, 2] , the Manhattan
value is |3 - 1| + |1 - 2| + |2 - 3| = 2 + 1 + 1 = 4 .

You are given integers n and k . Find a permutation p of length n such that
its Manhattan value is equal to k , or determine that no such permutation
exists.

^{\dagger} A permutation of length n is an array consisting of n distinct
integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a
permutation, but [1,2,2] is not a permutation (2 appears twice in the array),
and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 10^{4} ) — the number of test cases. The description
of the test cases follows.

The only line of each test case contains two integers n and k (1 \le n \le 2
\cdot 10^{5}, 0 \le k \le 10^{12} ) — the length of the permutation and the
required Manhattan value.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^{5} .

Output

For each test case, if there is no suitable permutation, output "No".
Otherwise, in the first line, output "Yes", and in the second line, output n
distinct integers p_1, p_2, \ldots, p_n (1 \le p_i \le n ) — a suitable
permutation.

If there are multiple solutions, output any of them.

You can output the answer in any case (for example, the strings "yEs", "yes",
"Yes", and "YES" will be recognized as a positive answer).

Example

Input

    8
    
    3 4
    
    4 5
    
    7 0
    
    1 1000000000000
    
    8 14
    
    112 777
    
    5 12
    
    5 2

Output

    Yes
    3 1 2
    No
    Yes
    1 2 3 4 5 6 7
    No
    Yes
    8 2 3 4 5 6 1 7
    No
    Yes
    5 4 3 1 2
    Yes
    2 1 3 4 5
    
Note

In the first test case, the permutation [3, 1, 2] is suitable, its Manhattan
value is |3 - 1| + |1 - 2| + |2 - 3| = 2 + 1 + 1 = 4 .

In the second test case, it can be proven that there is no permutation of
length 4 with a Manhattan value of 5 .

In the third test case, the permutation [1,2,3,4,5,6,7] is suitable, its
Manhattan value is |1-1|+|2-2|+|3-3|+|4-4|+|5-5|+|6-6|+|7-7|=0 .
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': False, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': True}
DEBUG - Start Task 1926_D_ayushdreams147_100%
ERROR - Error: unsupported statement type: <ast.Delete object at 0x7b0a53b11990> del count[num]

DEBUG - Start Task 1926_D_ayushdreams147_100%
ERROR - Error: unsupported statement type: <ast.Delete object at 0x7b0a53b36da0> del count[num]

DEBUG - Start Task 1926_D_ayushdreams147_100%
ERROR - Error: unsupported statement type: <ast.Delete object at 0x7b0a5398e6b0> del count[num]

DEBUG - Start Task 1937_B_VvvVvVnan_0.00%
ERROR - Error: unsupported statement type: <ast.Global object at 0x7b0a53c41990> global ans, count

DEBUG - Start Task 1937_B_VvvVvVnan_0.00%
ERROR - Error: unsupported statement type: <ast.Global object at 0x7b0a53b3d210> global ans, count

DEBUG - Start Task 1937_B_VvvVvVnan_0.00%
ERROR - Error: unsupported statement type: <ast.Global object at 0x7b0a53aa6c20> global ans, count

DEBUG - Start Task 1945_F_dhru72_4.55%
ERROR - Error: unsupported statement type: <ast.ClassDef object at 0x7b0a539db460> class SortedMultiset(Generic[T]):
    BUCKET_RATIO = 16
    SPLIT_RATIO = 24

    def __init__(self, a: Iterable[T]=[]) ->None:
        """Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)"""
        a = list(a)
        n = self.size = len(a)
        if any(a[i] > a[i + 1] for i in range(n - 1)):
            a.sort()
        num_bucket = int(math.ceil(math.sqrt(n / self.BUCKET_RATIO)))
        self.a = [a[n * i // num_bucket:n * (i + 1) // num_bucket] for i in
            range(num_bucket)]

    def __iter__(self) ->Iterator[T]:
        for i in self.a:
            for j in i:
                yield j

    def __reversed__(self) ->Iterator[T]:
        for i in reversed(self.a):
            for j in reversed(i):
                yield j

    def __eq__(self, other) ->bool:
        return list(self) == list(other)

    def __len__(self) ->int:
        return self.size

    def __repr__(self) ->str:
        return 'SortedMultiset' + str(self.a)

    def __str__(self) ->str:
        s = str(list(self))
        return '{' + s[1:len(s) - 1] + '}'

    def _position(self, x: T) ->Tuple[List[T], int, int]:
        """return the bucket, index of the bucket and position in which x should be. self must not be empty."""
        for i, a in enumerate(self.a):
            if x <= a[-1]:
                break
        return a, i, bisect_left(a, x)

    def __contains__(self, x: T) ->bool:
        if self.size == 0:
            return False
        a, _, i = self._position(x)
        return i != len(a) and a[i] == x

    def count(self, x: T) ->int:
        """Count the number of x."""
        return self.index_right(x) - self.index(x)

    def add(self, x: T) ->None:
        """Add an element. / O(√N)"""
        if self.size == 0:
            self.a = [[x]]
            self.size = 1
            return
        a, b, i = self._position(x)
        a.insert(i, x)
        self.size += 1
        if len(a) > len(self.a) * self.SPLIT_RATIO:
            mid = len(a) >> 1
            self.a[b:b + 1] = [a[:mid], a[mid:]]

    def _pop(self, a: List[T], b: int, i: int) ->T:
        ans = a.pop(i)
        self.size -= 1
        if not a:
            del self.a[b]
        return ans

    def discard(self, x: T) ->bool:
        """Remove an element and return True if removed. / O(√N)"""
        if self.size == 0:
            return False
        a, b, i = self._position(x)
        if i == len(a) or a[i] != x:
            return False
        self._pop(a, b, i)
        return True

    def lt(self, x: T) ->Optional[T]:
        """Find the largest element < x, or None if it doesn't exist."""
        for a in reversed(self.a):
            if a[0] < x:
                return a[bisect_left(a, x) - 1]

    def le(self, x: T) ->Optional[T]:
        """Find the largest element <= x, or None if it doesn't exist."""
        for a in reversed(self.a):
            if a[0] <= x:
                return a[bisect_right(a, x) - 1]

    def gt(self, x: T) ->Optional[T]:
        """Find the smallest element > x, or None if it doesn't exist."""
        for a in self.a:
            if a[-1] > x:
                return a[bisect_right(a, x)]

    def ge(self, x: T) ->Optional[T]:
        """Find the smallest element >= x, or None if it doesn't exist."""
        for a in self.a:
            if a[-1] >= x:
                return a[bisect_left(a, x)]

    def __getitem__(self, i: int) ->T:
        """Return the i-th element."""
        if i < 0:
            for a in reversed(self.a):
                i += len(a)
                if i >= 0:
                    return a[i]
        else:
            for a in self.a:
                if i < len(a):
                    return a[i]
                i -= len(a)
        raise IndexError

    def pop(self, i: int=-1) ->T:
        """Pop and return the i-th element."""
        if i < 0:
            for b, a in enumerate(reversed(self.a)):
                i += len(a)
                if i >= 0:
                    return self._pop(a, ~b, i)
        else:
            for b, a in enumerate(self.a):
                if i < len(a):
                    return self._pop(a, b, i)
                i -= len(a)
        raise IndexError

    def index(self, x: T) ->int:
        """Count the number of elements < x."""
        ans = 0
        for a in self.a:
            if a[-1] >= x:
                return ans + bisect_left(a, x)
            ans += len(a)
        return ans

    def index_right(self, x: T) ->int:
        """Count the number of elements <= x."""
        ans = 0
        for a in self.a:
            if a[-1] > x:
                return ans + bisect_right(a, x)
            ans += len(a)
        return ans

DEBUG - Start Task 1945_F_dhru72_4.55%
ERROR - Error: unsupported statement type: <ast.ClassDef object at 0x7b0a53ae15d0> class SortedMultiset(Generic[T]):
    BUCKET_RATIO = 16
    SPLIT_RATIO = 24

    def __init__(self, a: Iterable[T]=[]) ->None:
        """Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)"""
        a = list(a)
        n = self.size = len(a)
        if any(a[i] > a[i + 1] for i in range(n - 1)):
            a.sort()
        num_bucket = int(math.ceil(math.sqrt(n / self.BUCKET_RATIO)))
        self.a = [a[n * i // num_bucket:n * (i + 1) // num_bucket] for i in
            range(num_bucket)]

    def __iter__(self) ->Iterator[T]:
        for i in self.a:
            for j in i:
                yield j

    def __reversed__(self) ->Iterator[T]:
        for i in reversed(self.a):
            for j in reversed(i):
                yield j

    def __eq__(self, other) ->bool:
        return list(self) == list(other)

    def __len__(self) ->int:
        return self.size

    def __repr__(self) ->str:
        return 'SortedMultiset' + str(self.a)

    def __str__(self) ->str:
        s = str(list(self))
        return '{' + s[1:len(s) - 1] + '}'

    def _position(self, x: T) ->Tuple[List[T], int, int]:
        """return the bucket, index of the bucket and position in which x should be. self must not be empty."""
        for i, a in enumerate(self.a):
            if x <= a[-1]:
                break
        return a, i, bisect_left(a, x)

    def __contains__(self, x: T) ->bool:
        if self.size == 0:
            return False
        a, _, i = self._position(x)
        return i != len(a) and a[i] == x

    def count(self, x: T) ->int:
        """Count the number of x."""
        return self.index_right(x) - self.index(x)

    def add(self, x: T) ->None:
        """Add an element. / O(√N)"""
        if self.size == 0:
            self.a = [[x]]
            self.size = 1
            return
        a, b, i = self._position(x)
        a.insert(i, x)
        self.size += 1
        if len(a) > len(self.a) * self.SPLIT_RATIO:
            mid = len(a) >> 1
            self.a[b:b + 1] = [a[:mid], a[mid:]]

    def _pop(self, a: List[T], b: int, i: int) ->T:
        ans = a.pop(i)
        self.size -= 1
        if not a:
            del self.a[b]
        return ans

    def discard(self, x: T) ->bool:
        """Remove an element and return True if removed. / O(√N)"""
        if self.size == 0:
            return False
        a, b, i = self._position(x)
        if i == len(a) or a[i] != x:
            return False
        self._pop(a, b, i)
        return True

    def lt(self, x: T) ->Optional[T]:
        """Find the largest element < x, or None if it doesn't exist."""
        for a in reversed(self.a):
            if a[0] < x:
                return a[bisect_left(a, x) - 1]

    def le(self, x: T) ->Optional[T]:
        """Find the largest element <= x, or None if it doesn't exist."""
        for a in reversed(self.a):
            if a[0] <= x:
                return a[bisect_right(a, x) - 1]

    def gt(self, x: T) ->Optional[T]:
        """Find the smallest element > x, or None if it doesn't exist."""
        for a in self.a:
            if a[-1] > x:
                return a[bisect_right(a, x)]

    def ge(self, x: T) ->Optional[T]:
        """Find the smallest element >= x, or None if it doesn't exist."""
        for a in self.a:
            if a[-1] >= x:
                return a[bisect_left(a, x)]

    def __getitem__(self, i: int) ->T:
        """Return the i-th element."""
        if i < 0:
            for a in reversed(self.a):
                i += len(a)
                if i >= 0:
                    return a[i]
        else:
            for a in self.a:
                if i < len(a):
                    return a[i]
                i -= len(a)
        raise IndexError

    def pop(self, i: int=-1) ->T:
        """Pop and return the i-th element."""
        if i < 0:
            for b, a in enumerate(reversed(self.a)):
                i += len(a)
                if i >= 0:
                    return self._pop(a, ~b, i)
        else:
            for b, a in enumerate(self.a):
                if i < len(a):
                    return self._pop(a, b, i)
                i -= len(a)
        raise IndexError

    def index(self, x: T) ->int:
        """Count the number of elements < x."""
        ans = 0
        for a in self.a:
            if a[-1] >= x:
                return ans + bisect_left(a, x)
            ans += len(a)
        return ans

    def index_right(self, x: T) ->int:
        """Count the number of elements <= x."""
        ans = 0
        for a in self.a:
            if a[-1] > x:
                return ans + bisect_right(a, x)
            ans += len(a)
        return ans

DEBUG - Start Task 1945_F_dhru72_4.55%
ERROR - Error: unsupported statement type: <ast.ClassDef object at 0x7b0a539b5810> class SortedMultiset(Generic[T]):
    BUCKET_RATIO = 16
    SPLIT_RATIO = 24

    def __init__(self, a: Iterable[T]=[]) ->None:
        """Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)"""
        a = list(a)
        n = self.size = len(a)
        if any(a[i] > a[i + 1] for i in range(n - 1)):
            a.sort()
        num_bucket = int(math.ceil(math.sqrt(n / self.BUCKET_RATIO)))
        self.a = [a[n * i // num_bucket:n * (i + 1) // num_bucket] for i in
            range(num_bucket)]

    def __iter__(self) ->Iterator[T]:
        for i in self.a:
            for j in i:
                yield j

    def __reversed__(self) ->Iterator[T]:
        for i in reversed(self.a):
            for j in reversed(i):
                yield j

    def __eq__(self, other) ->bool:
        return list(self) == list(other)

    def __len__(self) ->int:
        return self.size

    def __repr__(self) ->str:
        return 'SortedMultiset' + str(self.a)

    def __str__(self) ->str:
        s = str(list(self))
        return '{' + s[1:len(s) - 1] + '}'

    def _position(self, x: T) ->Tuple[List[T], int, int]:
        """return the bucket, index of the bucket and position in which x should be. self must not be empty."""
        for i, a in enumerate(self.a):
            if x <= a[-1]:
                break
        return a, i, bisect_left(a, x)

    def __contains__(self, x: T) ->bool:
        if self.size == 0:
            return False
        a, _, i = self._position(x)
        return i != len(a) and a[i] == x

    def count(self, x: T) ->int:
        """Count the number of x."""
        return self.index_right(x) - self.index(x)

    def add(self, x: T) ->None:
        """Add an element. / O(√N)"""
        if self.size == 0:
            self.a = [[x]]
            self.size = 1
            return
        a, b, i = self._position(x)
        a.insert(i, x)
        self.size += 1
        if len(a) > len(self.a) * self.SPLIT_RATIO:
            mid = len(a) >> 1
            self.a[b:b + 1] = [a[:mid], a[mid:]]

    def _pop(self, a: List[T], b: int, i: int) ->T:
        ans = a.pop(i)
        self.size -= 1
        if not a:
            del self.a[b]
        return ans

    def discard(self, x: T) ->bool:
        """Remove an element and return True if removed. / O(√N)"""
        if self.size == 0:
            return False
        a, b, i = self._position(x)
        if i == len(a) or a[i] != x:
            return False
        self._pop(a, b, i)
        return True

    def lt(self, x: T) ->Optional[T]:
        """Find the largest element < x, or None if it doesn't exist."""
        for a in reversed(self.a):
            if a[0] < x:
                return a[bisect_left(a, x) - 1]

    def le(self, x: T) ->Optional[T]:
        """Find the largest element <= x, or None if it doesn't exist."""
        for a in reversed(self.a):
            if a[0] <= x:
                return a[bisect_right(a, x) - 1]

    def gt(self, x: T) ->Optional[T]:
        """Find the smallest element > x, or None if it doesn't exist."""
        for a in self.a:
            if a[-1] > x:
                return a[bisect_right(a, x)]

    def ge(self, x: T) ->Optional[T]:
        """Find the smallest element >= x, or None if it doesn't exist."""
        for a in self.a:
            if a[-1] >= x:
                return a[bisect_left(a, x)]

    def __getitem__(self, i: int) ->T:
        """Return the i-th element."""
        if i < 0:
            for a in reversed(self.a):
                i += len(a)
                if i >= 0:
                    return a[i]
        else:
            for a in self.a:
                if i < len(a):
                    return a[i]
                i -= len(a)
        raise IndexError

    def pop(self, i: int=-1) ->T:
        """Pop and return the i-th element."""
        if i < 0:
            for b, a in enumerate(reversed(self.a)):
                i += len(a)
                if i >= 0:
                    return self._pop(a, ~b, i)
        else:
            for b, a in enumerate(self.a):
                if i < len(a):
                    return self._pop(a, b, i)
                i -= len(a)
        raise IndexError

    def index(self, x: T) ->int:
        """Count the number of elements < x."""
        ans = 0
        for a in self.a:
            if a[-1] >= x:
                return ans + bisect_left(a, x)
            ans += len(a)
        return ans

    def index_right(self, x: T) ->int:
        """Count the number of elements <= x."""
        ans = 0
        for a in self.a:
            if a[-1] > x:
                return ans + bisect_right(a, x)
            ans += len(a)
        return ans

DEBUG - Start Task 1937_C_moonsong98_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: This is an interactive problem.

There is a secret sequence p_0, p_1, \ldots, p_{n-1} , which is a permutation
of \\{0,1,\ldots,n-1\\} .

You need to find any two indices i and j such that p_i \oplus p_j is
maximized, where \oplus denotes the [bitwise XOR
operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).

To do this, you can ask queries. Each query has the following form: you pick arbitrary indices a , b , c , and d (0 \le a,b,c,d < n ). Next, the jury calculates x = (p_a \mid p_b) and y = (p_c \mid p_d) , where | denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR). Finally, you receive the result of comparison between x and y . In other words, you are told if x < y , x > y , or x = y .

Please find any two indices i and j (0 \le i,j < n ) such that p_i \oplus p_j
is maximum among all such pairs, using at most 3n queries. If there are
multiple pairs of indices satisfying the condition, you may output any one of
them.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 10^3 ). The description of the test cases follows.

Interaction

The first line of each test case contains one integer n (2 \le n \le 10^4 ).
At this moment, the permutation p_0, p_1, \ldots, p_{n-1} is chosen. The
interactor in this task is not adaptive. In other words, the sequence p is
fixed in every test case and does not change during the interaction.

To ask a query, you need to pick four indices a , b , c , and d (0 \le a,b,c,d
< n ) and print the line of the following form:

  * "? a b c d" 

After that, you receive:

  * "<" if (p_a \mid p_b) < (p_c \mid p_d) ; 
  * "=" if (p_a \mid p_b) = (p_c \mid p_d) ; 
  * ">" if (p_a \mid p_b) > (p_c \mid p_d) . 

You can make at most 3n queries of this form.

Next, if your program has found a pair of indices i and j (0 \le i, j < n )
such that p_i \oplus p_j is maximized, print the line of the following form:

  * "! i j" 

Note that this line is not considered a query and is not taken into account
when counting the number of queries asked.

After this, proceed to the next test case.

If you make more than 3n queries during an interaction, your program must
terminate immediately, and you will receive the Wrong Answer verdict.
Otherwise, you can get an arbitrary verdict because your solution will
continue to read from a closed stream.

After printing a query or the answer for a test case, do not forget to output
the end of line and flush the output. Otherwise, you will get the verdict
Idleness Limit Exceeded. To do this, use:

  * fflush(stdout) or cout.flush() in C++; 
  * System.out.flush() in Java; 
  * flush(output) in Pascal; 
  * stdout.flush() in Python; 
  * see the documentation for other languages. 

It is guaranteed that the sum of n over all test cases does not exceed 10^4 .

Hacks

To hack, follow the test format below.

The first line contains the number of test cases t (1 \le t \le 10^3 ). The
description of the test cases follows.

The first line of each test case contains one integer n (2 \le n \le 10^4 ).

The second line of each test case contains n integers p_0,p_1,\ldots,p_{n-1} ,
which represent a permutation of integers from 0 to n - 1 .

The sum of n over all test cases should not exceed 10^4 .

Example

Input

    2
    4
    
    <
    
    =
    
    >
    
    2
    
Output

    ? 0 2 3 1
    
    ? 1 1 2 3
    
    ? 1 2 0 3
    
    ! 3 2
    
    ! 0 1
    
Note

In the first test case, the hidden permutation is p=[0,3,1,2] .

For the query "? 0 2 3 1", the jury return "<" because (p_0 \mid p_2) = (0
\mid 1) =1 < (p_3 \mid p_1) = (2 \mid 3) = 3 .

For the query "? 1 1 2 3", the jury return "=" because (p_1 \mid p_1) = (3\mid
3)= 3 = (p_2 \mid p_3) = (1 \mid 2)=3 .

For the query "? 1 2 0 3", the jury return ">" because (p_1 \mid p_2) = (3
\mid 1) = 3 > (p_0 \mid p_3) = (0\mid 2)=2 .

The answer i = 3 and j = 2 is valid: (p_3 \oplus p_2) = (2 \oplus 1) = 3 is
indeed equal to the maximum possible value of p_i \oplus p_j . Another valid
answer would be i=0 and j=1 . As the number of queries does not exceed 3n=12 ,
the answer is considered correct.

In the second test case, n = 2 , so p is either [0, 1] or [1, 0] . In any
case, p_0 \oplus p_1 = 1 is maximum possible.
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': True}
DEBUG - Start Task 1949_D_Lucina_24.69%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: You are designing a new video game. It has n scenarios, which the player may
play in any order, but each scenario must be played exactly once. When a
player switches from a scenario to another scenario, the game shows a
specially crafted transition video to make it all feel part of one big story.
This video is specific to a pair of scenarios, but not to their order, in
other words, the video playing when switching from scenario a to scenario b is
the same as the video playing when switching from scenario b to scenario a .
Therefore, you need to create \frac{n(n-1)}{2} different transition videos,
one for each possible pair of different scenarios.

Each transition video can be either funny or scary. It is boring to see too
many funny videos or too many scary videos in a row. Therefore, your goal is
to create the videos in such a way that no matter in which order does the
player approach the scenarios, they will never see more than \lceil
\frac{3n}{4} \rceil transition videos of the same type in a row.

You have already come up with ideas for at most \lfloor \frac{n}{2} \rfloor of
the transition videos, and therefore already know if those will be funny or
scary. Now you need to choose funny or scary for all other transition videos
in such a way that the above requirement is satisfied.

Input

The first line contains a single integer n (2 \le n \le 24 ) — the number of
scenarios in the game.

The next n lines describe the partial transition video plan. Each of those
lines contains n characters. The j -th character of the i -th line corresponds
to the transition video between the i -th and the j -th scenarios. It will be
F if the corresponding transition video will be funny, S if the corresponding
transition video will be scary, ? if the corresponding transition video is
still undecided, or . if i=j .

It is guaranteed that the i -th character of the j -th line and the j -th
character of the i -th line will be the same for all i and j . It is
guaranteed that at most \lfloor \frac{n}{2} \rfloor (n divided by 2, rounded
down) transition videos will already be decided, in other words, that at most
2\lfloor \frac{n}{2} \rfloor characters in the input will be F or S.

Output

Print n lines describing the full transition video plan in the same format as
the input. Each of those lines must contain n characters. The j -th character
of the i -th line must be F if the corresponding transition video is funny, S
if the corresponding transition video is scary, or . if i=j .

Each ? character from the input must be replaced with either F or S, and all
other characters from the input must remain unchanged. It must still hold that
the i -th character of the j -th line and the j -th character of the i -th
line are the same for all i and j .

For each permutation of the n scenarios, it must hold that the transition
videos corresponding to playing the scenarios in this order do not have more
than \lceil \frac{3n}{4} \rceil (3n divided by 4, rounded up) videos of the
same type consecutively.

If there are multiple solutions, print any of them. It can be proven that for
all inputs satisfying the constraints of this problem a solution always
exists.

Examples

Input

    5
    
    .?F??
    
    ?.???
    
    F?.S?
    
    ??S.?
    
    ????.

Output

    .FFFF
    F.FFF
    FF.SF
    FFS.F
    FFFF.

Input

    12
    
    .???????????
    
    ?.??????????
    
    ??.?????????
    
    ???.????????
    
    ????.???????
    
    ?????.??????
    
    ??????.?????
    
    ???????.????
    
    ????????.???
    
    ?????????.??
    
    ??????????.?
    
    ???????????.

Output

    .SSSFFSSSSFS
    S.SFFSFSFFFS
    SS.SFFFSSSFS
    SFS.FFSSSSFS
    FFFF.FFFFFSF
    FSFFF.SFFSFF
    SFFSFS.SSSFS
    SSSSFFS.SSFS
    SFSSFFSS.SFS
    SFSSFSSSS.FS
    FFFFSFFFFF.F
    SSSSFFSSSSF.
    
Note

In the first sample: We are allowed \lceil \frac{3\cdot 5}{4} \rceil=4
transition videos of the same type in a row, but for any permutation of the 5
scenarios the player will see only 4 transition videos in total, therefore we
can choose funny or scary freely. We must still respect the already chosen
types.

In the second sample: One of the 479001600 possible permutations of scenarios
is 1, 7, 4, 12, 9, 8, 2, 6, 10, 3, 11, 5. The player will get the following
sequence of transition videos for this permutation: SSSSSSSSSFS. Even though
this sequence has 10 scary transition videos in total, it has only 9 scary
transition videos in a row, which is the maximum allowed amount (\lceil
\frac{3\cdot 12}{4} \rceil=9 ).
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': True, 'complex': False, 'default': False, 'default_no_fsl': True, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1949_I_Kengreville_100%
ERROR - Error: unsupported statement type: <ast.Nonlocal object at 0x7b0a5397c7f0> nonlocal tot, bipartite

DEBUG - Start Task 1949_I_Kengreville_100%
ERROR - Error: unsupported statement type: <ast.Nonlocal object at 0x7b0a53bbbd30> nonlocal tot, bipartite

DEBUG - Start Task 1949_I_Kengreville_100%
ERROR - Error: unsupported statement type: <ast.Nonlocal object at 0x7b0a53c00bb0> nonlocal tot, bipartite

DEBUG - Start Task 1943_C_vas0x59_2.08%
ERROR - Error: unsupported statement type: <ast.Nonlocal object at 0x7b0a53c03fa0> nonlocal n

DEBUG - Start Task 1943_C_vas0x59_2.08%
ERROR - Error: unsupported statement type: <ast.Nonlocal object at 0x7b0a53aaee00> nonlocal n

DEBUG - Start Task 1943_C_vas0x59_2.08%
ERROR - Error: unsupported statement type: <ast.Nonlocal object at 0x7b0a53a8d840> nonlocal n

DEBUG - Start Task 1968_A_ScorpioDaggar_100%
ERROR - Error: unsupported statement type: <ast.AnnAssign object at 0x7b0a53ac0d60> n: int = int(input(''))

DEBUG - Start Task 1968_A_ScorpioDaggar_100%
ERROR - Error: unsupported statement type: <ast.AnnAssign object at 0x7b0a53b12d40> n: int = int(input(''))

DEBUG - Start Task 1968_A_ScorpioDaggar_100%
ERROR - Error: unsupported statement type: <ast.AnnAssign object at 0x7b0a53c31360> n: int = int(input(''))

DEBUG - Start Task 1949_K_artystkaProgramistka_2.56%
ERROR - Error: unsupported statement type: <ast.Nonlocal object at 0x7b0a53b13190> nonlocal sum_a, sum_b, sum_c

DEBUG - Start Task 1949_K_artystkaProgramistka_2.56%
ERROR - Error: unsupported statement type: <ast.Nonlocal object at 0x7b0a53b129e0> nonlocal sum_a, sum_b, sum_c

DEBUG - Start Task 1949_K_artystkaProgramistka_2.56%
ERROR - Error: unsupported statement type: <ast.Nonlocal object at 0x7b0a53ae14b0> nonlocal sum_a, sum_b, sum_c

DEBUG - Start Task 1945_F_Sandeep_P_100%
ERROR - Error: invalid syntax (<unknown>, line 5)
DEBUG - Start Task 1945_F_Sandeep_P_100%
ERROR - Error: invalid syntax (<unknown>, line 5)
DEBUG - Start Task 1945_F_Sandeep_P_100%
ERROR - Error: invalid syntax (<unknown>, line 5)
DEBUG - Start Task 1972_B_chri217._100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: There are n coins on the table forming a circle, and each coin is either
facing up or facing down. Alice and Bob take turns to play the following game,
and Alice goes first.

In each operation, the player chooses a facing-up coin, removes the coin, and
flips the two coins that are adjacent to it. If (before the operation) there
are only two coins left, then one will be removed and the other won't be
flipped (as it would be flipped twice). If (before the operation) there is
only one coin left, no coins will be flipped. If (before the operation) there
are no facing-up coins, the player loses.

Decide who will win the game if they both play optimally. It can be proved
that the game will end in a finite number of operations, and one of them will
win.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 100 ). The description of the test cases follows.

The first line of each test case contains only one positive integer n (1 \leq
n \leq 100 ), representing the number of the coins.

A string s of length n follows on the second line of each test case,
containing only "U" and "D", representing that each coin is facing up or
facing down.

Output

For each test case, print "YES" if Alice will win the game, and "NO"
otherwise.

You can output the answer in any case (upper or lower). For example, the
strings "yEs", "yes", "Yes", and "YES" will be recognized as positive
responses.

Example

Input

    3
    
    5
    
    UUDUD
    
    5
    
    UDDUD
    
    2
    
    UU

Output

    YES
    NO
    NO
    
Note

In the first test case, the game may go as follows.

  * Alice chooses the first coin and s becomes "DDUU". 
  * Bob chooses the last coin and s becomes "UDD". 
  * Alice chooses the first coin and s becomes "UU". 
  * Bob chooses the first coin and s becomes "U". 
  * Alice chooses the only coin and s becomes empty. 
  * Bob can't choose any coin now, and he loses the game. 

It can be proved that Bob will always lose if they both play optimally.
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': False, 'simple_verify': True, 'complex_verify': True, 'default_verify': True, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': False}
DEBUG - Start Task 1967_A_yogurtraj_3.23%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: You have some cards. An integer between 1 and n is written on each card:
specifically, for each i from 1 to n , you have a_i cards which have the
number i written on them.

There is also a shop which contains unlimited cards of each type. You have k
coins, so you can buy k new cards in total, and the cards you buy can contain
any integer between 1 and n .

After buying the new cards, you rearrange all your cards in a line. The score
of a rearrangement is the number of (contiguous) subarrays of length n which
are a permutation of [1, 2, \ldots, n] . What's the maximum score you can get?

Input

Each test contains multiple test cases. The first line contains the number of
test cases t\ (1\le t\le 100) . The description of the test cases follows.

The first line of each test case contains two integers n , k (1\le n \le 2
\cdot 10^5 , 0\le k \le 10^{12} ) — the number of distinct types of cards and
the number of coins.

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\le a_i \le 10^{12} ) — the number of cards of type i you have at the
beginning.

It is guaranteed that the sum of n over all test cases does not exceed 5 \cdot
10^5 .

Output

For each test case, output a single line containing an integer: the maximum
score you can get.

Example

Input

    8
    
    1 10
    
    1
    
    2 4
    
    8 4
    
    3 4
    
    6 1 8
    
    3 9
    
    7 6 2
    
    5 3
    
    6 6 7 4 6
    
    9 7
    
    7 6 1 7 6 2 4 3 3
    
    10 10
    
    1 3 1 2 1 9 3 5 7 5
    
    9 8
    
    5 8 7 5 1 3 2 9 8

Output

    11
    15
    15
    22
    28
    32
    28
    36
    
Note

In the first test case, the final (and only) array we can get is [1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1] (including 11 single 1 s), which contains 11 subarrays
consisting of a permutation of [1] .

In the second test case, we can buy 0 cards of type 1 and 4 cards of type 2 ,
and then we rearrange the cards as following: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2] . There are 8 subarrays equal to [1, 2] and 7 subarrays
equal to [2, 1] , which make a total of 15 subarrays which are a permutation
of [1, 2] . It can also be proved that this is the maximum score we can get.

In the third test case, one of the possible optimal rearrangements is [3, 3,
1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 3] .
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': True, 'default_verify': True, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1937_D_r-tron18_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: There is a one-dimensional grid of length n . The i -th cell of the grid
contains a character s_i , which is either '<' or '>'.

When a pinball is placed on one of the cells, it moves according to the
following rules:

  * If the pinball is on the i -th cell and s_i is '<', the pinball moves one cell to the left in the next second. If s_i is '>', it moves one cell to the right. 
  * After the pinball has moved, the character s_i is inverted (i. e. if s_i used to be '<', it becomes '>', and vice versa). 
  * The pinball stops moving when it leaves the grid: either from the left border or from the right one. 

You need to answer n independent queries. In the i -th query, a pinball will
be placed on the i -th cell. Note that we always place a pinball on the
initial grid.

For each query, calculate how many seconds it takes the pinball to leave the
grid. It can be shown that the pinball will always leave the grid within a
finite number of steps.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 10^5 ). The description of the test cases follows.

The first line of each test case contains an integer n (1 \le n \le 5 \cdot
10^5 ).

The second line of each test case contains a string s_1s_2 \ldots s_{n} of
length n consisting of characters '<' and '>'.

It is guaranteed that the sum of n over all test cases does not exceed 5 \cdot
10^5 .

Output

For each test case, for each i (1 \le i \le n ) output the answer if a pinball
is initially placed on the i -th cell.

Example

Input

    3
    
    3
    
    ><<
    
    4
    
    <<<<
    
    6
    
    <><<<>

Output

    3 6 5 
    1 2 3 4 
    1 4 7 10 8 1 
    
Note

In the first test case, the movement of the pinball for i=1 is shown in the
following pictures. It takes the pinball 3 seconds to leave the grid.

![](https://espresso.codeforces.com/775b656d27e63ce8901e1ef80487972d536b4a54.png)

The movement of the pinball for i=2 is shown in the following pictures. It
takes the pinball 6 seconds to leave the grid.

![](https://espresso.codeforces.com/515bd5576868cf33d4190893928faa21e69dd5c7.png)
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1946_C_naowalr_0.00%
ERROR - Error: unsupported statement type: <ast.Global object at 0x7b0a53c1a500> global numCuts

DEBUG - Start Task 1946_C_naowalr_0.00%
ERROR - Error: unsupported statement type: <ast.Global object at 0x7b0a53ac26b0> global numCuts

DEBUG - Start Task 1946_C_naowalr_0.00%
ERROR - Error: unsupported statement type: <ast.Global object at 0x7b0a53b4ef20> global numCuts

DEBUG - Start Task 1926_D_231414_0.00%
ERROR - Error: unsupported statement type: <ast.Delete object at 0x7b0a53c19090> del dic[s]

DEBUG - Start Task 1926_D_231414_0.00%
ERROR - Error: unsupported statement type: <ast.Delete object at 0x7b0a53b4caf0> del dic[s]

DEBUG - Start Task 1926_D_231414_0.00%
ERROR - Error: unsupported statement type: <ast.Delete object at 0x7b0a53bb85b0> del dic[s]

DEBUG - Start Task 1945_F_dhru72_100%
ERROR - Error: unsupported statement type: <ast.ClassDef object at 0x7b0a53d11ea0> class SortedMultiset(Generic[T]):
    BUCKET_RATIO = 16
    SPLIT_RATIO = 24

    def __init__(self, a: Iterable[T]=[]) ->None:
        """Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)"""
        a = list(a)
        n = self.size = len(a)
        if any(a[i] > a[i + 1] for i in range(n - 1)):
            a.sort()
        num_bucket = int(math.ceil(math.sqrt(n / self.BUCKET_RATIO)))
        self.a = [a[n * i // num_bucket:n * (i + 1) // num_bucket] for i in
            range(num_bucket)]

    def __iter__(self) ->Iterator[T]:
        for i in self.a:
            for j in i:
                yield j

    def __reversed__(self) ->Iterator[T]:
        for i in reversed(self.a):
            for j in reversed(i):
                yield j

    def __eq__(self, other) ->bool:
        return list(self) == list(other)

    def __len__(self) ->int:
        return self.size

    def __repr__(self) ->str:
        return 'SortedMultiset' + str(self.a)

    def __str__(self) ->str:
        s = str(list(self))
        return '{' + s[1:len(s) - 1] + '}'

    def _position(self, x: T) ->Tuple[List[T], int, int]:
        """return the bucket, index of the bucket and position in which x should be. self must not be empty."""
        for i, a in enumerate(self.a):
            if x <= a[-1]:
                break
        return a, i, bisect_left(a, x)

    def __contains__(self, x: T) ->bool:
        if self.size == 0:
            return False
        a, _, i = self._position(x)
        return i != len(a) and a[i] == x

    def count(self, x: T) ->int:
        """Count the number of x."""
        return self.index_right(x) - self.index(x)

    def add(self, x: T) ->None:
        """Add an element. / O(√N)"""
        if self.size == 0:
            self.a = [[x]]
            self.size = 1
            return
        a, b, i = self._position(x)
        a.insert(i, x)
        self.size += 1
        if len(a) > len(self.a) * self.SPLIT_RATIO:
            mid = len(a) >> 1
            self.a[b:b + 1] = [a[:mid], a[mid:]]

    def _pop(self, a: List[T], b: int, i: int) ->T:
        ans = a.pop(i)
        self.size -= 1
        if not a:
            del self.a[b]
        return ans

    def discard(self, x: T) ->bool:
        """Remove an element and return True if removed. / O(√N)"""
        if self.size == 0:
            return False
        a, b, i = self._position(x)
        if i == len(a) or a[i] != x:
            return False
        self._pop(a, b, i)
        return True

    def lt(self, x: T) ->Optional[T]:
        """Find the largest element < x, or None if it doesn't exist."""
        for a in reversed(self.a):
            if a[0] < x:
                return a[bisect_left(a, x) - 1]

    def le(self, x: T) ->Optional[T]:
        """Find the largest element <= x, or None if it doesn't exist."""
        for a in reversed(self.a):
            if a[0] <= x:
                return a[bisect_right(a, x) - 1]

    def gt(self, x: T) ->Optional[T]:
        """Find the smallest element > x, or None if it doesn't exist."""
        for a in self.a:
            if a[-1] > x:
                return a[bisect_right(a, x)]

    def ge(self, x: T) ->Optional[T]:
        """Find the smallest element >= x, or None if it doesn't exist."""
        for a in self.a:
            if a[-1] >= x:
                return a[bisect_left(a, x)]

    def __getitem__(self, i: int) ->T:
        """Return the i-th element."""
        if i < 0:
            for a in reversed(self.a):
                i += len(a)
                if i >= 0:
                    return a[i]
        else:
            for a in self.a:
                if i < len(a):
                    return a[i]
                i -= len(a)
        raise IndexError

    def pop(self, i: int=-1) ->T:
        """Pop and return the i-th element."""
        if i < 0:
            for b, a in enumerate(reversed(self.a)):
                i += len(a)
                if i >= 0:
                    return self._pop(a, ~b, i)
        else:
            for b, a in enumerate(self.a):
                if i < len(a):
                    return self._pop(a, b, i)
                i -= len(a)
        raise IndexError

    def index(self, x: T) ->int:
        """Count the number of elements < x."""
        ans = 0
        for a in self.a:
            if a[-1] >= x:
                return ans + bisect_left(a, x)
            ans += len(a)
        return ans

    def index_right(self, x: T) ->int:
        """Count the number of elements <= x."""
        ans = 0
        for a in self.a:
            if a[-1] > x:
                return ans + bisect_right(a, x)
            ans += len(a)
        return ans

DEBUG - Start Task 1945_F_dhru72_100%
ERROR - Error: unsupported statement type: <ast.ClassDef object at 0x7b0a53a34a00> class SortedMultiset(Generic[T]):
    BUCKET_RATIO = 16
    SPLIT_RATIO = 24

    def __init__(self, a: Iterable[T]=[]) ->None:
        """Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)"""
        a = list(a)
        n = self.size = len(a)
        if any(a[i] > a[i + 1] for i in range(n - 1)):
            a.sort()
        num_bucket = int(math.ceil(math.sqrt(n / self.BUCKET_RATIO)))
        self.a = [a[n * i // num_bucket:n * (i + 1) // num_bucket] for i in
            range(num_bucket)]

    def __iter__(self) ->Iterator[T]:
        for i in self.a:
            for j in i:
                yield j

    def __reversed__(self) ->Iterator[T]:
        for i in reversed(self.a):
            for j in reversed(i):
                yield j

    def __eq__(self, other) ->bool:
        return list(self) == list(other)

    def __len__(self) ->int:
        return self.size

    def __repr__(self) ->str:
        return 'SortedMultiset' + str(self.a)

    def __str__(self) ->str:
        s = str(list(self))
        return '{' + s[1:len(s) - 1] + '}'

    def _position(self, x: T) ->Tuple[List[T], int, int]:
        """return the bucket, index of the bucket and position in which x should be. self must not be empty."""
        for i, a in enumerate(self.a):
            if x <= a[-1]:
                break
        return a, i, bisect_left(a, x)

    def __contains__(self, x: T) ->bool:
        if self.size == 0:
            return False
        a, _, i = self._position(x)
        return i != len(a) and a[i] == x

    def count(self, x: T) ->int:
        """Count the number of x."""
        return self.index_right(x) - self.index(x)

    def add(self, x: T) ->None:
        """Add an element. / O(√N)"""
        if self.size == 0:
            self.a = [[x]]
            self.size = 1
            return
        a, b, i = self._position(x)
        a.insert(i, x)
        self.size += 1
        if len(a) > len(self.a) * self.SPLIT_RATIO:
            mid = len(a) >> 1
            self.a[b:b + 1] = [a[:mid], a[mid:]]

    def _pop(self, a: List[T], b: int, i: int) ->T:
        ans = a.pop(i)
        self.size -= 1
        if not a:
            del self.a[b]
        return ans

    def discard(self, x: T) ->bool:
        """Remove an element and return True if removed. / O(√N)"""
        if self.size == 0:
            return False
        a, b, i = self._position(x)
        if i == len(a) or a[i] != x:
            return False
        self._pop(a, b, i)
        return True

    def lt(self, x: T) ->Optional[T]:
        """Find the largest element < x, or None if it doesn't exist."""
        for a in reversed(self.a):
            if a[0] < x:
                return a[bisect_left(a, x) - 1]

    def le(self, x: T) ->Optional[T]:
        """Find the largest element <= x, or None if it doesn't exist."""
        for a in reversed(self.a):
            if a[0] <= x:
                return a[bisect_right(a, x) - 1]

    def gt(self, x: T) ->Optional[T]:
        """Find the smallest element > x, or None if it doesn't exist."""
        for a in self.a:
            if a[-1] > x:
                return a[bisect_right(a, x)]

    def ge(self, x: T) ->Optional[T]:
        """Find the smallest element >= x, or None if it doesn't exist."""
        for a in self.a:
            if a[-1] >= x:
                return a[bisect_left(a, x)]

    def __getitem__(self, i: int) ->T:
        """Return the i-th element."""
        if i < 0:
            for a in reversed(self.a):
                i += len(a)
                if i >= 0:
                    return a[i]
        else:
            for a in self.a:
                if i < len(a):
                    return a[i]
                i -= len(a)
        raise IndexError

    def pop(self, i: int=-1) ->T:
        """Pop and return the i-th element."""
        if i < 0:
            for b, a in enumerate(reversed(self.a)):
                i += len(a)
                if i >= 0:
                    return self._pop(a, ~b, i)
        else:
            for b, a in enumerate(self.a):
                if i < len(a):
                    return self._pop(a, b, i)
                i -= len(a)
        raise IndexError

    def index(self, x: T) ->int:
        """Count the number of elements < x."""
        ans = 0
        for a in self.a:
            if a[-1] >= x:
                return ans + bisect_left(a, x)
            ans += len(a)
        return ans

    def index_right(self, x: T) ->int:
        """Count the number of elements <= x."""
        ans = 0
        for a in self.a:
            if a[-1] > x:
                return ans + bisect_right(a, x)
            ans += len(a)
        return ans

DEBUG - Start Task 1945_F_dhru72_100%
ERROR - Error: unsupported statement type: <ast.ClassDef object at 0x7b0a53aa7640> class SortedMultiset(Generic[T]):
    BUCKET_RATIO = 16
    SPLIT_RATIO = 24

    def __init__(self, a: Iterable[T]=[]) ->None:
        """Make a new SortedMultiset from iterable. / O(N) if sorted / O(N log N)"""
        a = list(a)
        n = self.size = len(a)
        if any(a[i] > a[i + 1] for i in range(n - 1)):
            a.sort()
        num_bucket = int(math.ceil(math.sqrt(n / self.BUCKET_RATIO)))
        self.a = [a[n * i // num_bucket:n * (i + 1) // num_bucket] for i in
            range(num_bucket)]

    def __iter__(self) ->Iterator[T]:
        for i in self.a:
            for j in i:
                yield j

    def __reversed__(self) ->Iterator[T]:
        for i in reversed(self.a):
            for j in reversed(i):
                yield j

    def __eq__(self, other) ->bool:
        return list(self) == list(other)

    def __len__(self) ->int:
        return self.size

    def __repr__(self) ->str:
        return 'SortedMultiset' + str(self.a)

    def __str__(self) ->str:
        s = str(list(self))
        return '{' + s[1:len(s) - 1] + '}'

    def _position(self, x: T) ->Tuple[List[T], int, int]:
        """return the bucket, index of the bucket and position in which x should be. self must not be empty."""
        for i, a in enumerate(self.a):
            if x <= a[-1]:
                break
        return a, i, bisect_left(a, x)

    def __contains__(self, x: T) ->bool:
        if self.size == 0:
            return False
        a, _, i = self._position(x)
        return i != len(a) and a[i] == x

    def count(self, x: T) ->int:
        """Count the number of x."""
        return self.index_right(x) - self.index(x)

    def add(self, x: T) ->None:
        """Add an element. / O(√N)"""
        if self.size == 0:
            self.a = [[x]]
            self.size = 1
            return
        a, b, i = self._position(x)
        a.insert(i, x)
        self.size += 1
        if len(a) > len(self.a) * self.SPLIT_RATIO:
            mid = len(a) >> 1
            self.a[b:b + 1] = [a[:mid], a[mid:]]

    def _pop(self, a: List[T], b: int, i: int) ->T:
        ans = a.pop(i)
        self.size -= 1
        if not a:
            del self.a[b]
        return ans

    def discard(self, x: T) ->bool:
        """Remove an element and return True if removed. / O(√N)"""
        if self.size == 0:
            return False
        a, b, i = self._position(x)
        if i == len(a) or a[i] != x:
            return False
        self._pop(a, b, i)
        return True

    def lt(self, x: T) ->Optional[T]:
        """Find the largest element < x, or None if it doesn't exist."""
        for a in reversed(self.a):
            if a[0] < x:
                return a[bisect_left(a, x) - 1]

    def le(self, x: T) ->Optional[T]:
        """Find the largest element <= x, or None if it doesn't exist."""
        for a in reversed(self.a):
            if a[0] <= x:
                return a[bisect_right(a, x) - 1]

    def gt(self, x: T) ->Optional[T]:
        """Find the smallest element > x, or None if it doesn't exist."""
        for a in self.a:
            if a[-1] > x:
                return a[bisect_right(a, x)]

    def ge(self, x: T) ->Optional[T]:
        """Find the smallest element >= x, or None if it doesn't exist."""
        for a in self.a:
            if a[-1] >= x:
                return a[bisect_left(a, x)]

    def __getitem__(self, i: int) ->T:
        """Return the i-th element."""
        if i < 0:
            for a in reversed(self.a):
                i += len(a)
                if i >= 0:
                    return a[i]
        else:
            for a in self.a:
                if i < len(a):
                    return a[i]
                i -= len(a)
        raise IndexError

    def pop(self, i: int=-1) ->T:
        """Pop and return the i-th element."""
        if i < 0:
            for b, a in enumerate(reversed(self.a)):
                i += len(a)
                if i >= 0:
                    return self._pop(a, ~b, i)
        else:
            for b, a in enumerate(self.a):
                if i < len(a):
                    return self._pop(a, b, i)
                i -= len(a)
        raise IndexError

    def index(self, x: T) ->int:
        """Count the number of elements < x."""
        ans = 0
        for a in self.a:
            if a[-1] >= x:
                return ans + bisect_left(a, x)
            ans += len(a)
        return ans

    def index_right(self, x: T) ->int:
        """Count the number of elements <= x."""
        ans = 0
        for a in self.a:
            if a[-1] > x:
                return ans + bisect_right(a, x)
            ans += len(a)
        return ans

DEBUG - Start Task 1919_C_shagor1_6.25%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: You are given an array a of size n . You will do the following process to
calculate your penalty:

  1. Split array a into two (possibly empty) subsequences^\dagger s and t such that every element of a is either in s or t^\ddagger . 
  2. For an array b of size m , define the penalty p(b) of an array b as the number of indices i between 1 and m - 1 where b_i < b_{i + 1} . 
  3. The total penalty you will receive is p(s) + p(t) . 

If you perform the above process optimally, find the minimum possible penalty
you will receive.

^\dagger A sequence x is a subsequence of a sequence y if x can be obtained
from y by the deletion of several (possibly, zero or all) elements.

^\ddagger Some valid ways to split array a=[3,1,4,1,5] into (s,t) are
([3,4,1,5],[1]) , ([1,1],[3,4,5]) and ([\,],[3,1,4,1,5]) while some invalid
ways to split a are ([3,4,5],[1]) , ([3,1,4,1],[1,5]) and ([1,3,4],[5,1]) .

Input

Each test contains multiple test cases. The first line contains a single
integer t (1 \leq t \leq 10^4 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (1\le n\le 2\cdot
10^5 ) — the size of the array a .

The second line contains n integers a_1, a_2, \ldots, a_n (1 \le a_i \le n ) —
the elements of the array a .

It is guaranteed that the sum of n over all test cases does not exceed 2\cdot
10^5 .

Output

For each test case, output a single integer representing the minimum possible
penalty you will receive.

Example

Input

    5
    
    5
    
    1 2 3 4 5
    
    8
    
    8 2 3 1 1 7 4 3
    
    5
    
    3 3 3 3 3
    
    1
    
    1
    
    2
    
    2 1

Output

    3
    1
    0
    0
    0
    
Note

In the first test case, a possible way to split a is s=[2,4,5] and t=[1,3] .
The penalty is p(s)+p(t)=2 + 1 =3 .

In the second test case, a possible way to split a is s=[8,3,1] and
t=[2,1,7,4,3] . The penalty is p(s)+p(t)=0 + 1 =1 .

In the third test case, a possible way to split a is s=[\,] and t=[3,3,3,3,3]
. The penalty is p(s)+p(t)=0 + 0 =0 .
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': True}
DEBUG - Start Task 1968_E_TripleM5da_100%
ERROR - Error: failed to parse entailment checking response
DEBUG - Start Task 1927_F_Algeot_0.00%
ERROR - Error: unsupported statement type: <ast.ClassDef object at 0x7b0a53d13a90> class UnionFind:

    def __init__(self, N):
        self.p = [-1] * N

    def find(self, x):
        y = self.p[x]
        while y >= 0:
            x = y
            y = self.p[y]
        return x

    def unite(self, x, y):
        x, y = self.find(x), self.find(y)
        if x == y:
            return
        if -self.p[x] < -self.p[y]:
            x, y = y, x
        self.p[x] += self.p[y]
        self.p[y] = x

DEBUG - Start Task 1927_F_Algeot_0.00%
ERROR - Error: unsupported statement type: <ast.ClassDef object at 0x7b0a53aa7e20> class UnionFind:

    def __init__(self, N):
        self.p = [-1] * N

    def find(self, x):
        y = self.p[x]
        while y >= 0:
            x = y
            y = self.p[y]
        return x

    def unite(self, x, y):
        x, y = self.find(x), self.find(y)
        if x == y:
            return
        if -self.p[x] < -self.p[y]:
            x, y = y, x
        self.p[x] += self.p[y]
        self.p[y] = x

DEBUG - Start Task 1927_F_Algeot_0.00%
ERROR - Error: unsupported statement type: <ast.ClassDef object at 0x7b0a53a34cd0> class UnionFind:

    def __init__(self, N):
        self.p = [-1] * N

    def find(self, x):
        y = self.p[x]
        while y >= 0:
            x = y
            y = self.p[y]
        return x

    def unite(self, x, y):
        x, y = self.find(x), self.find(y)
        if x == y:
            return
        if -self.p[x] < -self.p[y]:
            x, y = y, x
        self.p[x] += self.p[y]
        self.p[y] = x

DEBUG - Start Task 1927_D_dhruvdd8888_1.64%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: You are given an array a of n integers, and q queries.

Each query is represented by two integers l and r (1 \le l \le r \le n ). Your
task is to find, for each query, two indices i and j (or determine that they
do not exist) such that:

  * l \le i \le r ; 
  * l \le j \le r ; 
  * a_i \ne a_j . 

In other words, for each query, you need to find a pair of different elements
among a_l, a_{l+1}, \dots, a_r , or report that such a pair does not exist.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The descriptions of the test cases follow.

The first line of each test case contains a single integer n (2 \le n \le 2
\cdot 10^5 ) — the length of the array a .

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^6 ) — the elements of the array a .

The third line of each test case contains a single integer q (1 \le q \le 2
\cdot 10^5 ) — the number of queries.

The next q lines contain two integers each, l and r (1 \le l < r \le n ) — the
boundaries of the query.

It is guaranteed that the sum of the values of n across all test cases does
not exceed 2 \cdot 10^5 . Similarly, it is guaranteed that the sum of the
values of q across all test cases does not exceed 2 \cdot 10^5 .

Output

For each query, output two integers separated by space: i and j (l \le i, j
\le r ), for which a_i \ne a_j . If such a pair does not exist, output i=-1
and j=-1 .

You may separate the outputs for the test cases with empty lines. This is not
a mandatory requirement.

Example

Input

    5
    
    5
    
    1 1 2 1 1
    
    3
    
    1 5
    
    1 2
    
    1 3
    
    6
    
    30 20 20 10 10 20
    
    5
    
    1 2
    
    2 3
    
    2 4
    
    2 6
    
    3 5
    
    4
    
    5 2 3 4
    
    4
    
    1 2
    
    1 4
    
    2 3
    
    2 4
    
    5
    
    1 4 3 2 4
    
    5
    
    1 5
    
    2 4
    
    3 4
    
    3 5
    
    4 5
    
    5
    
    2 3 1 4 2
    
    7
    
    1 2
    
    1 4
    
    1 5
    
    2 4
    
    2 5
    
    3 5
    
    4 5

Output

    2 3
    -1 -1
    1 3
    
    2 1
    -1 -1
    4 2
    4 6
    5 3
    
    1 2
    1 2
    2 3
    3 2
    
    1 3
    2 4
    3 4
    5 3
    5 4
    
    1 2
    4 2
    1 3
    2 3
    3 2
    5 4
    5 4
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': True, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1932_A_verabuylova_0.00%
ERROR - Error: unsupported statement type: <ast.ClassDef object at 0x7b0a53d137c0> class Solution:

    def Coins(self, n: int, s: str) ->int:
        if n == 0:
            return 0
        dp = [0] * n
        if s[0] == '@':
            dp[0] = 1
        if n > 1 and s[1] != '*':
            dp[1] = dp[0] + (1 if s[1] == '@' else 0)
        for i in range(2, n):
            if s[i] != '*':
                dp[i] = max(dp[i - 1], dp[i - 2])
                if s[i] == '@':
                    dp[i] += 1
        return dp[-1]

DEBUG - Start Task 1932_A_verabuylova_0.00%
ERROR - Error: unsupported statement type: <ast.ClassDef object at 0x7b0a53c26bf0> class Solution:

    def Coins(self, n: int, s: str) ->int:
        if n == 0:
            return 0
        dp = [0] * n
        if s[0] == '@':
            dp[0] = 1
        if n > 1 and s[1] != '*':
            dp[1] = dp[0] + (1 if s[1] == '@' else 0)
        for i in range(2, n):
            if s[i] != '*':
                dp[i] = max(dp[i - 1], dp[i - 2])
                if s[i] == '@':
                    dp[i] += 1
        return dp[-1]

DEBUG - Start Task 1932_A_verabuylova_0.00%
ERROR - Error: unsupported statement type: <ast.ClassDef object at 0x7b0a53aa5fc0> class Solution:

    def Coins(self, n: int, s: str) ->int:
        if n == 0:
            return 0
        dp = [0] * n
        if s[0] == '@':
            dp[0] = 1
        if n > 1 and s[1] != '*':
            dp[1] = dp[0] + (1 if s[1] == '@' else 0)
        for i in range(2, n):
            if s[i] != '*':
                dp[i] = max(dp[i - 1], dp[i - 2])
                if s[i] == '@':
                    dp[i] += 1
        return dp[-1]

DEBUG - Start Task 1968_E_Leifu_0.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: You are given an integer n . You choose n cells (x_1,y_1),
(x_2,y_2),\dots,(x_n,y_n) in the grid n\times n where 1\le x_i\le n and 1\le
y_i\le n .

Let \mathcal{H} be the set of distinct Manhattan distances between any pair of
cells. Your task is to maximize the size of \mathcal{H} . Examples of sets and
their construction are given in the notes.

If there exists more than one solution, you are allowed to output any.

Manhattan distance between cells (x_1,y_1) and (x_2,y_2) equals
|x_1-x_2|+|y_1-y_2| .

Input

The first line contains a single integer t (1\le t\le 50 ) — the number of
test cases.

Each of the following t lines contains a single integer n (2\le n\le 10^3 ).

Output

For each test case, output n points which maximize the size of \mathcal{H} .
It is not necessary to output an empty line at the end of the answer for each
test case.

Example

Input

    5
    
    2
    
    3
    
    4
    
    5
    
    6

Output

    1 1
    1 2
    
    2 1
    2 3
    3 1
    
    1 1
    1 3
    4 3
    4 4
    
    1 1
    1 3
    1 4
    2 1
    5 5
    
    1 4
    1 5
    1 6
    5 2
    5 5
    6 1
    
Note

In the first testcase we have n=2 . One of the possible arrangements is:

![](https://espresso.codeforces.com/4d7adaa08c9ee5ebf2a0caba13185ac968d6bcd9.png)
The arrangement with cells located in (1,1) and (1,2) . In this case
\mathcal{H}=\\{|1-1|+|1-1|,|1-1|+|2-2|,|1-1|+|1-2|\\}=\\{0,0,1\\}=\\{0,1\\} .
Hence, the size of \mathcal{H} is 2 . It can be shown that it is the greatest
possible answer.

In the second testcase we have n=3 . The optimal arrangement is:

![](https://espresso.codeforces.com/52d127e3dbe0141bb58dbdf4158586772a208758.png)
The arrangement with cells located in (2,1) , (2,3) and (3,1) .

\mathcal{H}
=\\{|2-2|+|1-1|,|2-2|+|3-3|,|3-3|+|1-1|,|2-2|+|1-3|,|2-3|+|1-1|,|2-3|+|3-1|\\}
=\\{0,0,0,2,1,3\\} =\\{0,1,2,3\\} .

For n=4 a possible arrangement is:

![](https://espresso.codeforces.com/575a6758d1f67174ceb877b32a1e89770cd2281a.png)

For n=5 a possible arrangement is:

![](https://espresso.codeforces.com/b790401b426625982c00d04cff13aceec53918b4.png)

For n=6 a possible arrangement is:

![](https://espresso.codeforces.com/d0f498905660a67115d9f58c6cbc1439ba6e509c.png)
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1936_A_shade34_5.88%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: This is an interactive problem.

There is a secret sequence p_0, p_1, \ldots, p_{n-1} , which is a permutation
of \\{0,1,\ldots,n-1\\} .

You need to find any two indices i and j such that p_i \oplus p_j is
maximized, where \oplus denotes the [bitwise XOR
operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).

To do this, you can ask queries. Each query has the following form: you pick arbitrary indices a , b , c , and d (0 \le a,b,c,d < n ). Next, the jury calculates x = (p_a \mid p_b) and y = (p_c \mid p_d) , where | denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR). Finally, you receive the result of comparison between x and y . In other words, you are told if x < y , x > y , or x = y .

Please find any two indices i and j (0 \le i,j < n ) such that p_i \oplus p_j
is maximum among all such pairs, using at most 3n queries. If there are
multiple pairs of indices satisfying the condition, you may output any one of
them.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 10^3 ). The description of the test cases follows.

Interaction

The first line of each test case contains one integer n (2 \le n \le 10^4 ).
At this moment, the permutation p_0, p_1, \ldots, p_{n-1} is chosen. The
interactor in this task is not adaptive. In other words, the sequence p is
fixed in every test case and does not change during the interaction.

To ask a query, you need to pick four indices a , b , c , and d (0 \le a,b,c,d
< n ) and print the line of the following form:

  * "? a b c d" 

After that, you receive:

  * "<" if (p_a \mid p_b) < (p_c \mid p_d) ; 
  * "=" if (p_a \mid p_b) = (p_c \mid p_d) ; 
  * ">" if (p_a \mid p_b) > (p_c \mid p_d) . 

You can make at most 3n queries of this form.

Next, if your program has found a pair of indices i and j (0 \le i, j < n )
such that p_i \oplus p_j is maximized, print the line of the following form:

  * "! i j" 

Note that this line is not considered a query and is not taken into account
when counting the number of queries asked.

After this, proceed to the next test case.

If you make more than 3n queries during an interaction, your program must
terminate immediately, and you will receive the Wrong Answer verdict.
Otherwise, you can get an arbitrary verdict because your solution will
continue to read from a closed stream.

After printing a query or the answer for a test case, do not forget to output
the end of line and flush the output. Otherwise, you will get the verdict
Idleness Limit Exceeded. To do this, use:

  * fflush(stdout) or cout.flush() in C++; 
  * System.out.flush() in Java; 
  * flush(output) in Pascal; 
  * stdout.flush() in Python; 
  * see the documentation for other languages. 

It is guaranteed that the sum of n over all test cases does not exceed 10^4 .

Hacks

To hack, follow the test format below.

The first line contains the number of test cases t (1 \le t \le 10^3 ). The
description of the test cases follows.

The first line of each test case contains one integer n (2 \le n \le 10^4 ).

The second line of each test case contains n integers p_0,p_1,\ldots,p_{n-1} ,
which represent a permutation of integers from 0 to n - 1 .

The sum of n over all test cases should not exceed 10^4 .

Example

Input

    2
    4
    
    <
    
    =
    
    >
    
    2
    
Output

    ? 0 2 3 1
    
    ? 1 1 2 3
    
    ? 1 2 0 3
    
    ! 3 2
    
    ! 0 1
    
Note

In the first test case, the hidden permutation is p=[0,3,1,2] .

For the query "? 0 2 3 1", the jury return "<" because (p_0 \mid p_2) = (0
\mid 1) =1 < (p_3 \mid p_1) = (2 \mid 3) = 3 .

For the query "? 1 1 2 3", the jury return "=" because (p_1 \mid p_1) = (3\mid
3)= 3 = (p_2 \mid p_3) = (1 \mid 2)=3 .

For the query "? 1 2 0 3", the jury return ">" because (p_1 \mid p_2) = (3
\mid 1) = 3 > (p_0 \mid p_3) = (0\mid 2)=2 .

The answer i = 3 and j = 2 is valid: (p_3 \oplus p_2) = (2 \oplus 1) = 3 is
indeed equal to the maximum possible value of p_i \oplus p_j . Another valid
answer would be i=0 and j=1 . As the number of queries does not exceed 3n=12 ,
the answer is considered correct.

In the second test case, n = 2 , so p is either [0, 1] or [1, 0] . In any
case, p_0 \oplus p_1 = 1 is maximum possible.
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1948_A_MOTEST_50.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: You are given an integer n .

Your task is to build a string of uppercase Latin letters. There must be
exactly n special characters in this string. Let's call a character special if
it is equal to exactly one of its neighbors.

For example, there are 6 special characters in the AAABAACC string (at
positions: 1 , 3 , 5 , 6 , 7 and 8 ).

Print any suitable string or report that there is no such string.

Input

The first line contains a single integer t (1 \le t \le 50 ) — the number of
test cases.

The only line of each test case contains a single integer n (1 \le n \le 50 ).

Output

For each test case, print the answer as follows:

  * if there is no suitable string, print one line containing the string NO; 
  * otherwise, print two lines. The first line should contain the string YES; on the second line print a string of length at most 200  — the answer itself (it can be shown that if some answers exist, then there is an answer of length at most 200 ). If there are several solutions, print any of them. 

Example

Input

    3
    
    6
    
    1
    
    2

Output

    YES
    AAABAACC
    NO
    YES
    MM
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': True, 'default_verify': True, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1977_B_coder_ISM_0.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: You are given a positive integer x . Find any array of integers a_0, a_1,
\ldots, a_{n-1} for which the following holds:

  * 1 \le n \le 32 , 
  * a_i is 1 , 0 , or -1 for all 0 \le i \le n - 1 , 
  * x = \displaystyle{\sum_{i=0}^{n - 1}{a_i \cdot 2^i}} , 
  * There does not exist an index 0 \le i \le n - 2 such that both a_{i} \neq 0 and a_{i + 1} \neq 0 . 

It can be proven that under the constraints of the problem, a valid array
always exists.

Input

Each test contains multiple test cases. The first line of input contains a
single integer t (1 \le t \le 10^4 ) — the number of test cases. The
description of the test cases follows.

The only line of each test case contains a single positive integer x (1 \le x
< 2^{30} ).

Output

For each test case, output two lines.

On the first line, output an integer n (1 \le n \le 32 ) — the length of the
array a_0, a_1, \ldots, a_{n-1} .

On the second line, output the array a_0, a_1, \ldots, a_{n-1} .

If there are multiple valid arrays, you can output any of them.

Example

Input

    7
    
    1
    
    14
    
    24
    
    15
    
    27
    
    11
    
    19

Output

    1
    1
    5
    0 -1 0 0 1
    6
    0 0 0 -1 0 1
    5
    -1 0 0 0 1
    6
    -1 0 -1 0 0 1
    5
    -1 0 -1 0 1
    5
    -1 0 1 0 1

Note

In the first test case, one valid array is [1] , since (1) \cdot 2^0 = 1 .

In the second test case, one possible valid array is [0,-1,0,0,1] , since (0)
\cdot 2^0 + (-1) \cdot 2^1 + (0) \cdot 2^2 + (0) \cdot 2^3 + (1) \cdot 2^4 =
-2 + 16 = 14 .
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1932_B_fpeng2002_0.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: The Chaya tribe believes that there are n signs of the apocalypse. Over time,
it has been found out that the i -th sign occurs every a_i years (in years a_i
, 2 \cdot a_i , 3 \cdot a_i , \dots ).

According to the legends, for the apocalypse to happen, the signs must occur
sequentially. That is, first they wait for the first sign to occur, then
strictly after it, the second sign will occur, and so on. That is, if the i
-th sign occurred in the year x , the tribe starts waiting for the occurrence
of the (i+1) -th sign, starting from the year x+1 .

In which year will the n -th sign occur and the apocalypse will happen?

Input

The first line of the input contains a single integer t (1 \le t \le 1000 ) —
the number of test cases. Then follow the descriptions of the test cases.

The first line of each test case contains a single integer n (1 \le n \le 100
) — the number of signs.

The second line of each test case contains n integers a_1, a_2, a_3, \dots,
a_n (1 \le a_i \le 10^6 ) — the periodicities of the signs.

Output

For each test case, output a single integer — the year in which all n signs
will occur.

Example

Input

    4
    
    6
    
    3 2 4 5 9 18
    
    5
    
    1 2 3 4 5
    
    5
    
    1 1 1 1 1
    
    6
    
    50 30 711 200 503 1006

Output

    36
    5
    5
    2012
    
Note

In the first set of input data of the example:

  * The tribe will wait for the first sign in the 3 -rd year; 
  * the tribe will wait for the second sign in the 4 -th year (since year 2 have already passed); 
  * the tribe will wait for the third sign in the 8 -th year (since the second sign has already occurred in the 4 -th year); 
  * the tribe will wait for the fourth sign in the 10 -th year (since year 5 have already passed); 
  * the tribe will wait for the fifth sign in the 18 -th year (since year 9 have already passed); 
  * the tribe will wait for the sixth sign in the 36 -th year (since the fifth sign has already occurred in the 18 -th year).
DEBUG - Correctness: {'naive': True, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': True, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': True, 'default_verify': True, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1951_B_meet732_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: [The HU - Shireg Shireg](https://youtu.be/SNCx4n2m5_o)

ඞ

There are n cows participating in a coding tournament. Cow i has a Cowdeforces
rating of a_i (all distinct), and is initially in position i . The tournament
consists of n-1 matches as follows:

  * The first match is between the cow in position 1 and the cow in position 2 . 
  * Subsequently, each match i is between the cow in position i+1 and the winner of match i-1 . 
  * In each match, the cow with the higher Cowdeforces rating wins and proceeds to the next match. 

You are the owner of cow k . For you, winning the tournament is not important;
rather, you want your cow to win in as many matches as possible. As an
acquaintance of the tournament organizers, you can ask them to swap the
position of your cow with another cow only once, or you can choose to do
nothing.

Find the maximum number of wins your cow can achieve.

Input

Each test contains multiple test cases. The first line contains an integer t
(1 \le t \le 10^4 ) — the number of test cases. The description of the test
cases follows.

The first line of each test case contains two integers n and k (2 \le n \le
10^5, 1 \le k \le n ) — the number of cows and your cow's index.

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\le a_i \le 10^9 ) — the Cowdeforces rating of the cows. It is guaranteed that
a_i 's are pairwise different.

It is guaranteed that the sum of n over all test cases does not exceed 10^5 .

Output

For each test case, print one integer: the maximum number of wins cow k can
achieve if you choose to swap (or do nothing) optimally.

Example

Input

    3
    
    6 1
    
    12 10 14 11 8 3
    
    6 5
    
    7 2 727 10 12 13
    
    2 2
    
    1000000000 1

Output

    1
    2
    0
    
Note

In the first test case, it is optimal to do nothing. Let a' be the Cowdeforces
rating of the cows in the original order (with your cow's rating bolded), then

  * Initially, a' = [\mathbf{12}, 10, 14, 11, 8, 3] . 
  * Your cow plays against the cow with Cowdeforces rating 10 and wins. a' = [\mathbf{12}, 14, 11, 8, 3] . 
  * Your cow plays against the cow with Cowdeforces rating 14 and loses. 

In total, your cow wins 1 match.

In the second test case, it is optimal to swap your cow to position 3 . Then,
let a' be the Cowdeforces rating of the cows in the order after the swap.

  * Initially, a' = [7, 2, \mathbf{12}, 10, 727, 13] . 
  * The cow with Cowdeforces rating 7 plays against the cow with Cowdeforces rating 2 and wins. a' = [7, \mathbf{12}, 10, 727, 13] . 
  * The cow with Cowdeforces rating 7 plays against your cow, and your cow wins. a' = [\mathbf{12}, 10, 727, 13] . 
  * Your cow plays against the cow with Cowdeforces rating 10 and wins. a' = [\mathbf{12}, 727, 13] . 
  * Your cow plays against the cow with Cowdeforces rating 727 and loses. 

In total, your cow wins 2 matches.
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1946_E_freeskyljy_0.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Some permutation of length n is guessed.

You are given the indices of its prefix maximums and suffix maximums.

Recall that a permutation of length k is an array of size k such that each
integer from 1 to k occurs exactly once.

Prefix maximums are the elements that are the maximum on the prefix ending at
that element. More formally, the element a_i is a prefix maximum if a_i > a_j
for every j < i .

Similarly, suffix maximums are defined, the element a_i is a suffix maximum if
a_i > a_j for every j > i .

You need to output the number of different permutations that could have been
guessed.

As this number can be very large, output the answer modulo 10^9 + 7 .

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. Then follows the
description of the test cases.

The first line of each test case contains three integers n, m_1 and m_2 (1 \le
m_1, m_2 \le n \le 2 \cdot 10^5 ) — the length of the permutation, the number
of prefix maximums, and the number of suffix maximums, respectively.

The second line of each test case contains m_1 integers p_1 < p_2 < \ldots <
p_{m_1} (1 \le p_i \le n ) — the indices of the prefix maximums in increasing
order.

The third line of each test case contains m_2 integers s_1 < s_2 < \ldots <
s_{m_2} (1 \le s_i \le n ) — the indices of the suffix maximums in increasing
order.

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer on a separate line — the number of
suitable permutations modulo 10^9 + 7 .

Example

Input

    6
    
    1 1 1
    
    1
    
    1
    
    4 2 3
    
    1 2
    
    2 3 4
    
    3 3 1
    
    1 2 3
    
    3
    
    5 3 4
    
    1 2 3
    
    2 3 4 5
    
    20 5 4
    
    1 2 3 4 12
    
    12 13 18 20
    
    6 2 3
    
    1 3
    
    3 4 6

Output

    1
    3
    1
    0
    317580808
    10
    
Note

The following permutations are suitable for the second set of input data:

  * [1, 4, 3, 2] 
  * [2, 4, 3, 1] 
  * [3, 4, 2, 1] 

The following permutations are suitable for the sixth set of input data:

  * [2, 1, 6, 5, 3, 4] 
  * [3, 1, 6, 5, 2, 4] 
  * [3, 2, 6, 5, 1, 4] 
  * [4, 1, 6, 5, 2, 3] 
  * [4, 2, 6, 5, 1, 3] 
  * [4, 3, 6, 5, 1, 2] 
  * [5, 1, 6, 4, 2, 3] 
  * [5, 2, 6, 4, 1, 3] 
  * [5, 3, 6, 4, 1, 2] 
  * [5, 4, 6, 3, 1, 2]
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1970_C1_amen_meb_47.06%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either "Ron" or "Hermione".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1921_A_KartheKeyan_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: A square of positive (strictly greater than 0 ) area is located on the
coordinate plane, with sides parallel to the coordinate axes. You are given
the coordinates of its corners, in random order. Your task is to find the area
of the square.

Input

Each test consists of several testcases. The first line contains one integer t
(1 \le t \le 100 ) — the number of testcases. The following is a description
of the testcases.

Each testcase contains four lines, each line contains two integers x_i, y_i
(-1000\le x_i, y_i\le 1000 ), coordinates of the corners of the square.

It is guaranteed that there is a square with sides parallel to the coordinate
axes, with positive (strictly greater than 0 ) area, with corners in given
points.

Output

For each test case, print a single integer, the area of the square.

Example

Input

    3
    
    1 2
    
    4 5
    
    1 5
    
    4 2
    
    -1 1
    
    1 -1
    
    1 1
    
    -1 -1
    
    45 11
    
    45 39
    
    17 11
    
    17 39

Output

    9
    4
    784
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1955_C_Luv985_3.33%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: n ships set out to explore the depths of the ocean. The ships are numbered
from 1 to n and follow each other in ascending order; the i -th ship has a
durability of a_i .

The Kraken attacked the ships k times in a specific order. First, it attacks
the first of the ships, then the last, then the first again, and so on.

Each attack by the Kraken reduces the durability of the ship by 1 . When the
durability of the ship drops to 0 , it sinks and is no longer subjected to
attacks (thus the ship ceases to be the first or last, and the Kraken only
attacks the ships that have not yet sunk). If all the ships have sunk, the
Kraken has nothing to attack and it swims away.

For example, if n=4 , k=5 , and a=[1, 2, 4, 3] , the following will happen:

  1. The Kraken attacks the first ship, its durability becomes zero and now a = [2, 4, 3] ; 
  2. The Kraken attacks the last ship, now a = [2, 4, 2] ; 
  3. The Kraken attacks the first ship, now a = [1, 4, 2] ; 
  4. The Kraken attacks the last ship, now a = [1, 4, 1] ; 
  5. The Kraken attacks the first ship, its durability becomes zero and now a = [4, 1] . 

How many ships were sunk after the Kraken's attack?

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains two integers n and k (1 \le n \le 2
\cdot 10^5 , 1 \le k \le 10^{15} ) — the number of ships and how many times
the Kraken will attack the ships.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^9 ) — the durability of the ships.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output the number of ships sunk by the Kraken on a
separate line.

Example

Input

    6
    
    4 5
    
    1 2 4 3
    
    4 6
    
    1 2 4 3
    
    5 20
    
    2 7 1 8 2
    
    2 2
    
    3 2
    
    2 15
    
    1 5
    
    2 7
    
    5 2

Output

    2
    3
    5
    0
    2
    2
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': False, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': True}
DEBUG - Start Task 1945_E_hjacobs3_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': False, 'complex': True, 'default': False, 'default_no_fsl': False, 'simple_verify': True, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1920_B_Dehong2019_0.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Alice and Bob are playing a game. They have an array a_1, a_2,\ldots,a_n . The
game consists of two steps:

  * First, Alice will remove at most k elements from the array. 
  * Second, Bob will multiply at most x elements of the array by -1 . 

Alice wants to maximize the sum of elements of the array while Bob wants to
minimize it. Find the sum of elements of the array after the game if both
players play optimally.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 10^4 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains three integers n , k , and x (1 \leq
n \leq 2 \cdot 10^5 , 1 \leq x,k \leq n ) — the number of elements in the
array, the limit on the number of elements of the array that Alice can remove,
and the limit on the number of elements of the array that Bob can multiply -1
to.

The second line of each test case contains n integers a_1, a_2,\ldots, a_n (1
\leq a_i \leq 1000 ) — the elements of the array.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output a single integer — the sum of elements of the array
after the game if both players play optimally.

Example

Input

    8
    
    1 1 1
    
    1
    
    4 1 1
    
    3 1 2 4
    
    6 6 3
    
    1 4 3 2 5 6
    
    6 6 1
    
    3 7 3 3 32 15
    
    8 5 3
    
    5 5 3 3 3 2 9 9
    
    10 6 4
    
    1 8 2 9 3 3 4 5 3 200
    
    2 2 1
    
    4 3
    
    2 1 2
    
    1 3

Output

    0
    2
    0
    3
    -5
    -9
    0
    -1
    
Note

In the first test case, it is optimal for Alice to remove the only element of
the array. Then, the sum of elements of the array is 0 after the game is over.

In the second test case, it is optimal for Alice to not remove any elements.
Bob will then multiply 4 by -1 . So the final sum of elements of the array is
3+1+2-4=2 .

In the fifth test case, it is optimal for Alice to remove 9, 9 . Bob will then
multiply 5, 5, 3 by -1 . So the final sum of elements of the array is
-5-5-3+3+3+2=-5 .
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1957_C_hx199411_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: You are given an n \times n chessboard where you and the computer take turns
alternatingly to place white rooks & black rooks on the board respectively.
While placing rooks, you have to ensure that no two rooks attack each other.
Two rooks attack each other if they share the same row or column regardless of
color.

A valid move is placing a rook on a position (r , c ) such that it doesn't
attack any other rook.

You start first, and when you make a valid move in your turn, placing a white
rook at position (r , c ), the computer will mirror you and place a black rook
at position (c , r ) in its turn. If r = c , then the computer can't mirror
your move, and skips its turn.

You have already played k moves with the computer (the computer tries to
mirror these moves too), and you must continue playing the game until there
are no valid moves remaining. How many different final configurations are
possible when you continue the game after the k moves? It is guaranteed that
the k moves and the implied computer moves are valid. Since the answer may be
large, print it modulo 10^9+7 .

Two configurations are considered different if there exists a coordinate (r ,
c ) which has a rook in one configuration, but not in the other or the color
of the rook on the coordinate is different.

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case contains two integers n and k (1 \leq n \leq
3 \cdot 10^5 , 0 \leq k \leq n ) — the size of the chessboard and the number
of moves you have already played respectively.

Each of the next k lines of the test case contains two integers r_i and c_i ,
denoting the i -th move you made.

It is guaranteed that the k moves and the implied computer moves are valid.

It is guaranteed that the sum of n over all test cases does not exceed 3 \cdot
10^5 .

Output

For each test case, output a single integer on a new line — the total number
of possible final configurations modulo 10^9+7 .

Example

Input

    3
    
    4 1
    
    1 2
    
    8 1
    
    7 6
    
    1000 4
    
    4 4
    
    952 343
    
    222 333
    
    90 91

Output

    3
    331
    671968183
    
Note

In the first test case, we have a 4 \times 4 grid and you've already played 1
move. After you and the computer play a turn, we have a white rook at (1 , 2
), and a black rook at (2 , 1 ). There are three possible configurations from
this state —

  1. You place a white rook at (3 , 4 ) and the computer places a black rook at (4 , 3 ) as a response. 
  2. You place a white rook at (4 , 3 ) and the computer places a black rook at (3 , 4 ) as a response. 
  3. You place a white rook at (3 , 3 ) and then at (4 , 4 ), or the other way around. They both result in the same configuration. 

![](https://espresso.codeforces.com/e7812b315860201676eb89d5690dd84b3eb85862.png)
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': True, 'default_verify': True, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1921_B_AmirSol_7.69%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: In order to test the hypothesis about the cats, the scientists must arrange
the cats in the boxes in a specific way. Of course, they would like to test
the hypothesis and publish a sensational article as quickly as possible,
because they are too engrossed in the next hypothesis about the phone's
battery charge.

Scientists have n boxes in which cats may or may not sit. Let the current
state of the boxes be denoted by the sequence b_1, \dots, b_n : b_i = 1 if
there is a cat in box number i , and b_i = 0 otherwise.

Fortunately, the unlimited production of cats has already been established, so
in one day, the scientists can perform one of the following operations:

  * Take a new cat and place it in a box (for some i such that b_i = 0 , assign b_i = 1 ). 
  * Remove a cat from a box and send it into retirement (for some i such that b_i = 1 , assign b_i = 0 ). 
  * Move a cat from one box to another (for some i, j such that b_i = 1, b_j = 0 , assign b_i = 0, b_j = 1 ). 

It has also been found that some boxes were immediately filled with cats.
Therefore, the scientists know the initial position of the cats in the boxes
s_1, \dots, s_n and the desired position f_1, \dots, f_n .

Due to the large amount of paperwork, the scientists do not have time to solve
this problem. Help them for the sake of science and indicate the minimum
number of days required to test the hypothesis.

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. This is followed by
descriptions of the test cases.

Each test case consists of three lines.

The first line of each test case contains a single integer n (1 \le n \le 10^5
) — the number of boxes.

The second line of each test case contains a string s of n characters, where
the i -th character is '1' if there is a cat in the i -th box and '0'
otherwise.

The third line of each test case contains a string f of n characters, where
the i -th character is '1' if there should be a cat in the i -th box and '0'
otherwise.

It is guaranteed that in a test the sum of n over all test cases does not
exceed 10^5 .

Output

For each test case, output a single integer on a separate line — the minimum
number of operations required to obtain the desired position from the initial
position. It can be shown that a solution always exists.

Example

Input

    6
    
    5
    
    10010
    
    00001
    
    1
    
    1
    
    1
    
    3
    
    000
    
    111
    
    4
    
    0101
    
    1010
    
    3
    
    100
    
    101
    
    8
    
    10011001
    
    11111110

Output

    2
    0
    3
    2
    1
    4
    
Note

In the first test case, you can first move the cat from the first box to the
fifth, and then remove the cat from the fourth box.

In the second test case, there is nothing to do — the only cat is already
sitting in the correct box.

In the third test case of input data, it takes three days to place a cat in
each box.
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': False, 'default': False, 'default_no_fsl': True, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1968_F_NoInternetName_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Let us call an array x_1,\dots,x_m interesting if it is possible to divide the
array into k>1 parts so that [bitwise XOR](http://tiny.cc/xor_wiki_eng) of
values from each part are equal.

More formally, you must split array x into k consecutive segments, each
element of x must belong to exactly 1 segment. Let y_1,\dots,y_k be the XOR of
elements from each part respectively. Then y_1=y_2=\dots=y_k must be
fulfilled.

For example, if x = [1, 1, 2, 3, 0] , you can split it as follows:
[\color{blue}1], [\color{green}1], [\color{red}2, \color{red}3, \color{red}0]
. Indeed \color{blue}1=\color{green}1=\color{red}2 \oplus \color{red}3\oplus
\color{red}0 .

You are given an array a_1,\dots,a_n . Your task is to answer q queries:

  * For fixed l , r , determine whether the subarray a_l,a_{l+1},\dots,a_r is interesting. 

Input

The first line contains a single integer t (1\le t\le 10^4 ) — the number of
test cases.

The first line of each test case contains two integers n and q (2 \le n \le 2
\cdot 10^5 , 1 \le q \le 2 \cdot 10^5 ) — the number of elements in the array
and the number of queries respectively.

The next line contains n integers a_1,\dots,a_n (0 \le a_i < 2^{30} ) —
elements of the array.

Each of the next q lines contains two integers l and r (1 \le l < r \le n )
describing the query.

It is guaranteed that the sum of n over all testcases does not exceed 2 \cdot
10^5 .

It is guaranteed that the sum of q over all testcases does not exceed 2 \cdot
10^5 .

Output

For each query, output "YES" if the subarray is interesting and "NO"
otherwise.

You can output "Yes" and "No" in any case (for example, the strings "yES",
"yes", and "Yes" will be recognized as correct answers).

Example

Input

    4
    
    5 5
    
    1 1 2 3 0
    
    1 5
    
    2 4
    
    3 5
    
    1 3
    
    3 4
    
    5 5
    
    1 2 3 4 5
    
    1 5
    
    2 4
    
    3 5
    
    1 3
    
    2 3
    
    7 4
    
    12 9 10 9 10 11 9
    
    1 5
    
    1 7
    
    2 6
    
    2 7
    
    11 4
    
    0 0 1 0 0 1 0 1 1 0 1
    
    1 2
    
    2 5
    
    6 9
    
    7 11

Output

    YES
    YES
    NO
    NO
    NO
    
    YES
    NO
    NO
    YES
    NO
    
    NO
    NO
    NO
    NO
    
    YES
    NO
    YES
    YES
    
Note

Explanation for the first test case:

The first query is described in the statement.

In the second query, we should divide [1,2,3] . A possible division is
[1,2],[3] , since 1\oplus 2=3 .

It can be shown that for queries 3,4,5 , the subarrays are not interesting.
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': True, 'default_verify': True, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1943_C_vas0x59_100%
ERROR - Error: unsupported statement type: <ast.Nonlocal object at 0x7b0a53b04310> nonlocal n

DEBUG - Start Task 1943_C_vas0x59_100%
ERROR - Error: unsupported statement type: <ast.Nonlocal object at 0x7b0a53874730> nonlocal n

DEBUG - Start Task 1943_C_vas0x59_100%
ERROR - Error: unsupported statement type: <ast.Nonlocal object at 0x7b0a53874160> nonlocal n

DEBUG - Start Task 1970_C1_PitchBlease_0.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either "Ron" or "Hermione".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': False, 'complex_verify': True, 'default_verify': False, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1921_D_ms_22_0.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Petya has an array a_i of n integers. His brother Vasya became envious and
decided to make his own array of n integers.

To do this, he found m integers b_i (m\ge n ), and now he wants to choose some
n integers of them and arrange them in a certain order to obtain an array c_i
of length n .

To avoid being similar to his brother, Vasya wants to make his array as
different as possible from Petya's array. Specifically, he wants the total
difference D = \sum_{i=1}^{n} |a_i - c_i| to be as large as possible.

Help Vasya find the maximum difference D he can obtain.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 100 ) — the number of test cases. This is followed by a
description of the test cases.

The first line of each test case contains two integers n and m (1\le n\le m\le
2 \cdot 10^5 ).

The second line of each test case contains n integers a_i (1\le a_i\le 10^9 ).
The third line of each test case contains m integers b_i (1\le b_i\le 10^9 ).

It is guaranteed that in a test, the sum of m over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer — the maximum total difference D
that can be obtained.

Example

Input

    9
    
    4 6
    
    6 1 2 4
    
    3 5 1 7 2 3
    
    3 4
    
    1 1 1
    
    1 1 1 1
    
    5 5
    
    1 2 3 4 5
    
    1 2 3 4 5
    
    2 6
    
    5 8
    
    8 7 5 8 2 10
    
    2 2
    
    4 1
    
    9 6
    
    4 6
    
    8 10 6 4
    
    3 10 6 1 8 9
    
    3 5
    
    6 5 2
    
    1 7 9 7 2
    
    5 5
    
    9 10 6 3 7
    
    5 9 2 3 9
    
    1 6
    
    3
    
    2 7 10 1 1 5

Output

    16
    0
    12
    11
    10
    23
    15
    25
    7
    
Note

In the first example, Vasya can, for example, create the array (1, 5, 7, 2) .
Then the total difference will be D = |6-1|+|1-5|+|2-7|+|4-2| = 5+4+5+2 = 16 .

In the second example, all the integers available to Vasya are equal to 1, so
he can only create the array (1, 1, 1) , for which the difference D = 0 .

In the third example, Vasya can, for example, create the array (5, 4, 3, 2, 1)
. Then the total difference will be D = |1-5|+|2-4|+|3-3|+|4-2|+|5-1| =
4+2+0+2+4 = 12 .
DEBUG - Correctness: {'naive': True, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': True, 'default_verify': True, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1972_D1_NS3081992_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': False, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': True}
DEBUG - Start Task 1926_D_231414_100%
ERROR - Error: unsupported statement type: <ast.Delete object at 0x7b0a53ac2260> del dic[i]

DEBUG - Start Task 1926_D_231414_100%
ERROR - Error: unsupported statement type: <ast.Delete object at 0x7b0a539e22f0> del dic[i]

DEBUG - Start Task 1923_A_Athena___0.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: There is a ribbon divided into n cells, numbered from 1 to n from left to
right. Each cell either contains a chip or is free.

You can perform the following operation any number of times (possibly zero):
choose a chip and move it to the closest free cell to the left. You can choose
any chip that you want, provided that there is at least one free cell to the
left of it. When you move the chip, the cell where it was before the operation
becomes free.

Your goal is to move the chips in such a way that they form a single block,
without any free cells between them. What is the minimum number of operations
you have to perform?

Input

The first line contains one integer t (1 \le t \le 1000 ) — the number of test
cases.

Each test case consists of two lines:

  * the first line contains one integer n (2 \le n \le 50 ) — the number of cells; 
  * the second line contains n integers a_1, a_2, \dots, a_n (0 \le a_i \le 1 ); a_i = 0 means that the i -th cell is free; a_i = 1 means that the i -th cell contains a chip. 

Additional constraint on the input: in each test case, at least one cell
contains a chip.

Output

For each test case, print one integer — the minimum number of operations you
have to perform so that all chips form a single block without any free cells
between them.

Example

Input

    5
    
    8
    
    0 1 1 1 0 1 1 0
    
    6
    
    0 1 0 0 0 0
    
    6
    
    1 1 1 1 1 1
    
    5
    
    1 0 1 0 1
    
    9
    
    0 1 1 0 0 0 1 1 0

Output

    1
    0
    0
    2
    3
    
Note

In the first example, you can perform the operation on the chip in the 7 -th
cell. The closest free cell to the left is the 5 -th cell, so it moves there.
After that, all chips form a single block.

In the second example, all chips are already in a single block. Same for the
third example.
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1942_C1_gentleman_007_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: [Proof Geometric Construction Can Solve All Love Affairs -
manbo-p](https://soundcloud.com/alice-law-314125270/manbo-p-proof-geometric-
construction-can-solve-all-love-affairs)

⠀

This is the easy version of the problem. The only difference between the two
versions is the constraint on y . In this version y = 0 . You can make hacks
only if both versions are solved.

Bessie has received a birthday cake from her best friend Elsie, and it came in
the form of a regular polygon with n sides. The vertices of the cake are
numbered from 1 to n clockwise. You and Bessie are going to choose some of
those vertices to cut non-intersecting diagonals into the cake. In other
words, the endpoints of the diagonals must be part of the chosen vertices.

Bessie would only like to give out pieces of cake which result in a triangle
to keep consistency. The size of the pieces doesn't matter, and the whole cake
does not have to be separated into all triangles (other shapes are allowed in
the cake, but those will not be counted).

Bessie has already chosen x of those vertices that can be used to form
diagonals. She wants you to choose no more than y other vertices such that the
number of triangular pieces of cake she can give out is maximized.

What is the maximum number of triangular pieces of cake Bessie can give out?

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case consists of three integers, n , x , and y (4
\leq n \leq 10^9 , 2 \leq x \leq \min(n, 2 \cdot 10^5) , y = 0 ) — the number
of sides of the polygon, number of vertices Bessie has chosen, and the maximum
number of other vertices you can choose.

The second line consists of x distinct integers from 1 to n , representing the
vertices Bessie has chosen.

It is guaranteed the sum of x over all test cases does not exceed 2 \cdot 10^5
.

Output

For each test case, output a single integer: the maximum number of non-
intersecting triangular pieces of cake she can give out.

Example

Input

    3
    
    8 4 0
    
    1 6 2 5
    
    8 8 0
    
    1 3 2 5 4 6 7 8
    
    4 2 0
    
    1 3

Output

    2
    6
    2
    
Note

In test cases 1 , 2 and 3 , you can get 2 , 6 and 2 non-intersecting
triangular pieces of cake, respectively. A possible construction is shown in
the following pictures:

The green dots represent vertices that can be used, the blue lines represent
diagonals that are drawn, and the red numbers represent triangles that are
counted.

![](https://espresso.codeforces.com/80282d636b83d4002ec89755d465b4adb37b9cfb.png)
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': True, 'default_verify': False, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': False}
DEBUG - Start Task 1946_C__Safar_100%
ERROR - Error: unsupported statement type: <ast.Delete object at 0x7b0a53b20cd0> del d[x]

DEBUG - Start Task 1946_C__Safar_100%
ERROR - Error: unsupported statement type: <ast.Delete object at 0x7b0a53ae3850> del d[x]

DEBUG - Start Task 1946_C__Safar_100%
ERROR - Error: unsupported statement type: <ast.Delete object at 0x7b0a53a7b3a0> del d[x]

DEBUG - Start Task 1922_E_lucky__389_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': True, 'simple_verify': False, 'complex_verify': False, 'default_verify': True, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': False}
DEBUG - Start Task 1945_E_u-day_0.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': True, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1930_A_ns2020_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: There are 2n positive integers written on a whiteboard. Being bored, you
decided to play a one-player game with the numbers on the whiteboard.

You start with a score of 0 . You will increase your score by performing the
following move exactly n times:

  * Choose two integers x and y that are written on the whiteboard. 
  * Add \min(x,y) to your score. 
  * Erase x and y from the whiteboard. 

Note that after performing the move n times, there will be no more integers
written on the whiteboard.

Find the maximum final score you can achieve if you optimally perform the n
moves.

Input

Each test contains multiple test cases. The first line contains a single
integer t (1 \leq t \leq 5000 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (1 \leq n \leq 50
) — the number of integers written on the whiteboard is 2n .

The second line of each test case contains 2n integers a_1,a_2,\ldots,a_{2n}
(1 \leq a_i \leq 10^7 ) — the numbers written on the whiteboard.

Output

For each test case, output the maximum final score that you can achieve.

Example

Input

    3
    
    1
    
    2 3
    
    2
    
    1 1 2 1
    
    3
    
    1 1 1 1 1 1

Output

    2
    2
    3
    
Note

In the first test case, you can only make one move. You select x=2 and y=3 ,
and your score will be \min(x,y)=2 .

In the second test case, the following is a sequence of moves that achieves a
final score of 2 :

  * In the first move, select x=1 and y=1 . Then, add \min(x,y)=1 to the score. After erasing x and y , the integers left on the whiteboard are 1 and 2 . 
  * In the second move, select x=1 and y=2 . Then, add \min(x,y)=1 to the score. After removing x and y , no more integers will be left on the whiteboard. 

It can be proved that it is not possible to get a score greater than 2 .

In the third test case, you will perform the move thrice, adding 1 to the
score each time.
DEBUG - Correctness: {'naive': True, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': True, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': True, 'default_verify': True, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1922_E_Hassn_Hamada_25.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': True, 'default_verify': False, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': True}
DEBUG - Start Task 1922_E_Hassn_Hamada_25.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1965_B_just_average_ok_0.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: You are given two integers n and k . Find a sequence a of non-negative
integers of size at most 25 such that the following conditions hold.

  * There is no subsequence of a with a sum of k . 
  * For all 1 \le v \le n where v \ne k , there is a subsequence of a with a sum of v . 

A sequence b is a subsequence of a if b can be obtained from a by the deletion
of several (possibly, zero or all) elements, without changing the order of the
remaining elements. For example, [5, 2, 3] is a subsequence of [1, 5, 7, 8, 2,
4, 3] .

It can be shown that under the given constraints, a solution always exists.

Input

The first line of the input contains a single integer t (1 \le t \le 1000 ) —
the number of test cases. The description of the test cases follows.

Each test case consists of a single line containing two integers n and k (2
\le n \le 10^6 , 1 \le k \le n ) — the parameters described above.

It is guaranteed that the sum of n over all test cases does not exceed 10^7 .

Output

The first line of output for each test case should contain a single integer m
(1 \le m \le 25 ) — the size of your chosen sequence.

The second line of output for each test case should contain m integers a_i (0
\le a_i \le 10^9 ) — the elements of your chosen sequence.

If there are multiple solutions, print any.

Example

Input

    5
    
    2 2
    
    6 1
    
    8 8
    
    9 3
    
    10 7

Output

    1
    1
    5
    2 3 4 5 6
    7
    1 1 1 1 1 1 1
    4
    7 1 4 1
    4
    1 2 8 3
    
Note

In the first example, we just need a subsequence that adds up to 1 , but not
one that adds up to 2 . So the array a=[1] suffices.

In the second example, all elements are greater than k=1 , so no subsequence
adds up to 1 . Every other integer between 1 and n is present in the array, so
there is a subsequence of size 1 adding up to each of those numbers.
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1955_D_Greninja_007_0.00%
ERROR - Error: unsupported statement type: <ast.Delete object at 0x7b0a53a22410> del window_freq[a[i]]

DEBUG - Start Task 1968_C_aminesager_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: You are given an array x_2,x_3,\dots,x_n . Your task is to find any array
a_1,\dots,a_n , where:

  * 1\le a_i\le 10^9 for all 1\le i\le n . 
  * x_i=a_i \bmod a_{i-1} for all 2\le i\le n . 

Here c\bmod d denotes the remainder of the division of the integer c by the
integer d . For example 5 \bmod 2 = 1 , 72 \bmod 3 = 0 , 143 \bmod 14 = 3 .

Note that if there is more than one a which satisfies the statement, you are
allowed to find any.

Input

The first line contains a single integer t (1\le t\le 10^4) — the number of
test cases.

The first line of each test case contains a single integer n (2\le n\le 500) —
the number of elements in a .

The second line of each test case contains n-1 integers x_2,\dots,x_n (1\le
x_i\le 500) — the elements of x .

It is guaranteed that the sum of values n over all test cases does not exceed
2 \cdot 10^5 .

Output

For each test case output any a_1,\dots,a_n (1 \le a_i \le 10^9 ) which
satisfies the statement.

Example

Input

    5
    
    4
    
    2 4 1
    
    3
    
    1 1
    
    6
    
    4 2 5 1 2
    
    2
    
    500
    
    3
    
    1 5

Output

    3 5 4 9
    2 5 11
    5 14 16 5 11 24
    501 500
    2 7 5

Note

In the first test case a=[3,5,4,9] satisfies the conditions, because:

  * a_2\bmod a_1=5\bmod 3=2=x_2 ; 
  * a_3\bmod a_2=4\bmod 5=4=x_3 ; 
  * a_4\bmod a_3=9\bmod 4=1=x_4 ;
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1968_C_aminesager_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: You are given an array x_2,x_3,\dots,x_n . Your task is to find any array
a_1,\dots,a_n , where:

  * 1\le a_i\le 10^9 for all 1\le i\le n . 
  * x_i=a_i \bmod a_{i-1} for all 2\le i\le n . 

Here c\bmod d denotes the remainder of the division of the integer c by the
integer d . For example 5 \bmod 2 = 1 , 72 \bmod 3 = 0 , 143 \bmod 14 = 3 .

Note that if there is more than one a which satisfies the statement, you are
allowed to find any.

Input

The first line contains a single integer t (1\le t\le 10^4) — the number of
test cases.

The first line of each test case contains a single integer n (2\le n\le 500) —
the number of elements in a .

The second line of each test case contains n-1 integers x_2,\dots,x_n (1\le
x_i\le 500) — the elements of x .

It is guaranteed that the sum of values n over all test cases does not exceed
2 \cdot 10^5 .

Output

For each test case output any a_1,\dots,a_n (1 \le a_i \le 10^9 ) which
satisfies the statement.

Example

Input

    5
    
    4
    
    2 4 1
    
    3
    
    1 1
    
    6
    
    4 2 5 1 2
    
    2
    
    500
    
    3
    
    1 5

Output

    3 5 4 9
    2 5 11
    5 14 16 5 11 24
    501 500
    2 7 5

Note

In the first test case a=[3,5,4,9] satisfies the conditions, because:

  * a_2\bmod a_1=5\bmod 3=2=x_2 ; 
  * a_3\bmod a_2=4\bmod 5=4=x_3 ; 
  * a_4\bmod a_3=9\bmod 4=1=x_4 ;
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': False, 'simple_verify': True, 'complex_verify': True, 'default_verify': True, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1921_A_KartheKeyan_0.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: A square of positive (strictly greater than 0 ) area is located on the
coordinate plane, with sides parallel to the coordinate axes. You are given
the coordinates of its corners, in random order. Your task is to find the area
of the square.

Input

Each test consists of several testcases. The first line contains one integer t
(1 \le t \le 100 ) — the number of testcases. The following is a description
of the testcases.

Each testcase contains four lines, each line contains two integers x_i, y_i
(-1000\le x_i, y_i\le 1000 ), coordinates of the corners of the square.

It is guaranteed that there is a square with sides parallel to the coordinate
axes, with positive (strictly greater than 0 ) area, with corners in given
points.

Output

For each test case, print a single integer, the area of the square.

Example

Input

    3
    
    1 2
    
    4 5
    
    1 5
    
    4 2
    
    -1 1
    
    1 -1
    
    1 1
    
    -1 -1
    
    45 11
    
    45 39
    
    17 11
    
    17 39

Output

    9
    4
    784
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1921_A_KartheKeyan_0.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: A square of positive (strictly greater than 0 ) area is located on the
coordinate plane, with sides parallel to the coordinate axes. You are given
the coordinates of its corners, in random order. Your task is to find the area
of the square.

Input

Each test consists of several testcases. The first line contains one integer t
(1 \le t \le 100 ) — the number of testcases. The following is a description
of the testcases.

Each testcase contains four lines, each line contains two integers x_i, y_i
(-1000\le x_i, y_i\le 1000 ), coordinates of the corners of the square.

It is guaranteed that there is a square with sides parallel to the coordinate
axes, with positive (strictly greater than 0 ) area, with corners in given
points.

Output

For each test case, print a single integer, the area of the square.

Example

Input

    3
    
    1 2
    
    4 5
    
    1 5
    
    4 2
    
    -1 1
    
    1 -1
    
    1 1
    
    -1 -1
    
    45 11
    
    45 39
    
    17 11
    
    17 39

Output

    9
    4
    784
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1921_D_Sibtain_1_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Petya has an array a_i of n integers. His brother Vasya became envious and
decided to make his own array of n integers.

To do this, he found m integers b_i (m\ge n ), and now he wants to choose some
n integers of them and arrange them in a certain order to obtain an array c_i
of length n .

To avoid being similar to his brother, Vasya wants to make his array as
different as possible from Petya's array. Specifically, he wants the total
difference D = \sum_{i=1}^{n} |a_i - c_i| to be as large as possible.

Help Vasya find the maximum difference D he can obtain.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 100 ) — the number of test cases. This is followed by a
description of the test cases.

The first line of each test case contains two integers n and m (1\le n\le m\le
2 \cdot 10^5 ).

The second line of each test case contains n integers a_i (1\le a_i\le 10^9 ).
The third line of each test case contains m integers b_i (1\le b_i\le 10^9 ).

It is guaranteed that in a test, the sum of m over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer — the maximum total difference D
that can be obtained.

Example

Input

    9
    
    4 6
    
    6 1 2 4
    
    3 5 1 7 2 3
    
    3 4
    
    1 1 1
    
    1 1 1 1
    
    5 5
    
    1 2 3 4 5
    
    1 2 3 4 5
    
    2 6
    
    5 8
    
    8 7 5 8 2 10
    
    2 2
    
    4 1
    
    9 6
    
    4 6
    
    8 10 6 4
    
    3 10 6 1 8 9
    
    3 5
    
    6 5 2
    
    1 7 9 7 2
    
    5 5
    
    9 10 6 3 7
    
    5 9 2 3 9
    
    1 6
    
    3
    
    2 7 10 1 1 5

Output

    16
    0
    12
    11
    10
    23
    15
    25
    7
    
Note

In the first example, Vasya can, for example, create the array (1, 5, 7, 2) .
Then the total difference will be D = |6-1|+|1-5|+|2-7|+|4-2| = 5+4+5+2 = 16 .

In the second example, all the integers available to Vasya are equal to 1, so
he can only create the array (1, 1, 1) , for which the difference D = 0 .

In the third example, Vasya can, for example, create the array (5, 4, 3, 2, 1)
. Then the total difference will be D = |1-5|+|2-4|+|3-3|+|4-2|+|5-1| =
4+2+0+2+4 = 12 .
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': True, 'complex_verify': True, 'default_verify': True, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1932_A_verabuylova_100%
ERROR - Error: unsupported statement type: <ast.ClassDef object at 0x7b0a53d30460> class Solution:

    def Coins(self, n: int, s: str) ->int:
        res = 0
        i = 0
        while i < n:
            if s[i] == '@':
                res += 1
            if i + 1 < n and s[i + 1] != '*':
                i += 1
            elif i + 2 < n and s[i + 2] != '*':
                i += 2
            else:
                break
        return res

DEBUG - Start Task 1932_A_verabuylova_100%
ERROR - Error: unsupported statement type: <ast.ClassDef object at 0x7b0a53b6dae0> class Solution:

    def Coins(self, n: int, s: str) ->int:
        res = 0
        i = 0
        while i < n:
            if s[i] == '@':
                res += 1
            if i + 1 < n and s[i + 1] != '*':
                i += 1
            elif i + 2 < n and s[i + 2] != '*':
                i += 2
            else:
                break
        return res

DEBUG - Start Task 1932_A_verabuylova_100%
ERROR - Error: unsupported statement type: <ast.ClassDef object at 0x7b0a53ac0520> class Solution:

    def Coins(self, n: int, s: str) ->int:
        res = 0
        i = 0
        while i < n:
            if s[i] == '@':
                res += 1
            if i + 1 < n and s[i + 1] != '*':
                i += 1
            elif i + 2 < n and s[i + 2] != '*':
                i += 2
            else:
                break
        return res

DEBUG - Start Task 1931_C_tah23seen_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: You have an array a of n integers.

You can no more than once apply the following operation: select three integers
i , j , x (1 \le i \le j \le n ) and assign all elements of the array with
indexes from i to j the value x . The price of this operation depends on the
selected indices and is equal to (j - i + 1) burles.

For example, the array is equal to [1, 2, 3, 4, 5, 1] . If we choose i = 2, j
= 4, x = 8 , then after applying this operation, the array will be equal to
[1, 8, 8, 8, 5, 1] .

What is the least amount of burles you need to spend to make all the elements
of the array equal?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
input test cases. The descriptions of the test cases follow.

The first line of the description of each test case contains a single integer
n (1 \le n \le 2 \cdot 10 ^ 5 ) — the size of the array.

The second line of the description of each test case contains n integers a_1,
a_2, \dots, a_n (1 \le a_i \le n ) — array elements.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output one integer — the minimum number of burles that
will have to be spent to make all the elements of the array equal. It can be
shown that this can always be done.

Example

Input

    8
    
    6
    
    1 2 3 4 5 1
    
    7
    
    1 1 1 1 1 1 1
    
    8
    
    8 8 8 1 2 8 8 8
    
    1
    
    1
    
    2
    
    1 2
    
    3
    
    1 2 3
    
    7
    
    4 3 2 7 1 1 3
    
    9
    
    9 9 2 9 2 5 5 5 3

Output

    4
    0
    2
    0
    1
    2
    6
    7
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': False}
DEBUG - Start Task 1931_C_tah23seen_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: You have an array a of n integers.

You can no more than once apply the following operation: select three integers
i , j , x (1 \le i \le j \le n ) and assign all elements of the array with
indexes from i to j the value x . The price of this operation depends on the
selected indices and is equal to (j - i + 1) burles.

For example, the array is equal to [1, 2, 3, 4, 5, 1] . If we choose i = 2, j
= 4, x = 8 , then after applying this operation, the array will be equal to
[1, 8, 8, 8, 5, 1] .

What is the least amount of burles you need to spend to make all the elements
of the array equal?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
input test cases. The descriptions of the test cases follow.

The first line of the description of each test case contains a single integer
n (1 \le n \le 2 \cdot 10 ^ 5 ) — the size of the array.

The second line of the description of each test case contains n integers a_1,
a_2, \dots, a_n (1 \le a_i \le n ) — array elements.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output one integer — the minimum number of burles that
will have to be spent to make all the elements of the array equal. It can be
shown that this can always be done.

Example

Input

    8
    
    6
    
    1 2 3 4 5 1
    
    7
    
    1 1 1 1 1 1 1
    
    8
    
    8 8 8 1 2 8 8 8
    
    1
    
    1
    
    2
    
    1 2
    
    3
    
    1 2 3
    
    7
    
    4 3 2 7 1 1 3
    
    9
    
    9 9 2 9 2 5 5 5 3

Output

    4
    0
    2
    0
    1
    2
    6
    7
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': False}
DEBUG - Start Task 1972_D1_Calto_37.50%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1972_D1_Calto_37.50%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1930_A_Aadyant_05_33.33%
ERROR - Error: unsupported statement type: <ast.Delete object at 0x7b0a53c00460> del list1[:]

DEBUG - Start Task 1945_E_u-day_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': True}
DEBUG - Start Task 1945_E_u-day_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': True}
DEBUG - Start Task 1945_C_aditya.ad.agrawal_50.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: In the village of Letovo, there are n houses. The villagers decided to build a
big road that will divide the village into left and right sides. Each resident
wants to live on either the right or the left side of the street, which is
described as a sequence a_1, a_2, \dots, a_n , where a_j = 0 if the resident
of the j -th house wants to live on the left side of the street; otherwise,
a_j = 1 .

The road will pass between two houses. The houses to the left of it will be
declared the left-side, and the houses to the right will be declared the
right-side. More formally, let the road pass between houses i and i+1 . Then
the houses at positions between 1 and i will be on the left side of the
street, and at positions between i+1 and n will be on the right side. The road
also may pass before the first and after the last house; in this case, the
entire village is declared to be either the right or left side, respectively.

To make the design fair, it was decided to lay the road so that at least half
of the residents on each side of the village are satisfied with the choice.
That is, among x residents on one side, at least \lceil\frac{x}{2}\rceil
should want to live on that side, where \lceil x \rceil denotes rounding up a
real number x .

![](https://espresso.codeforces.com/75baa17903d65a630fb0d3334683e857d5fdc345.png)
To the left of the road, there will be i houses, among the corresponding a_j
there must be at least \lceil\frac{i}{2}\rceil zeros. To the right of the
road, there will be n-i houses, among the corresponding a_j there must be at
least \lceil\frac{n-i}{2}\rceil ones.

Determine after which house i the road should be laid in order to satisfy the
described condition and be as close to the middle of the village as possible.
Formally, among all suitable positions i , minimize \left|\frac{n}{2} -
i\right| .

If there are multiple suitable positions i with the minimum \left|\frac{n}{2}
- i\right| , output the smaller one.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 2\cdot 10^4 ). The description of the test cases
follows.

The first line of each test case contains a single integer n (3 \le n \le
3\cdot 10^5 ). The next line of each test case contains a string a of length n
, consisting only of 0 and 1 .

It is guaranteed that the sum of n over all test cases does not exceed 3\cdot
10^5 .

Output

For each test case, output a single number i — the position of the house after
which the road should be laid (if it should be laid before the first house,
output 0 ). We can show that the answer always exists.

Example

Input

    7
    
    3
    
    101
    
    6
    
    010111
    
    6
    
    011001
    
    3
    
    000
    
    3
    
    110
    
    3
    
    001
    
    4
    
    1100

Output

    2
    3
    2
    3
    0
    1
    0
    
Note

Let's consider the first example of input data.

If we lay the road after the first house, there will be one house a_1 = 1 on
the left side of the street, the resident of which would like to live on the
right side of the street. Then 0 out of 1 residents on the even side will be
satisfied with the choice, which means that the road cannot be laid after
house 1 .

If we lay the road after the second house, 1 out of 2 residents on the left
side (with preferences a_1 = 1 , a_2 = 0 ) and 1 out of 1 resident on the
right side (with preference a_3 = 1 ) will be satisfied with the choice. More
than half of the residents on each side are satisfied with the choice, which
means that the road can be laid after house 2 . We can show that this is the
optimal answer.
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': True, 'simple': True, 'complex': False, 'default': False, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': False, 'default_verify': True, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1945_C_aditya.ad.agrawal_50.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: In the village of Letovo, there are n houses. The villagers decided to build a
big road that will divide the village into left and right sides. Each resident
wants to live on either the right or the left side of the street, which is
described as a sequence a_1, a_2, \dots, a_n , where a_j = 0 if the resident
of the j -th house wants to live on the left side of the street; otherwise,
a_j = 1 .

The road will pass between two houses. The houses to the left of it will be
declared the left-side, and the houses to the right will be declared the
right-side. More formally, let the road pass between houses i and i+1 . Then
the houses at positions between 1 and i will be on the left side of the
street, and at positions between i+1 and n will be on the right side. The road
also may pass before the first and after the last house; in this case, the
entire village is declared to be either the right or left side, respectively.

To make the design fair, it was decided to lay the road so that at least half
of the residents on each side of the village are satisfied with the choice.
That is, among x residents on one side, at least \lceil\frac{x}{2}\rceil
should want to live on that side, where \lceil x \rceil denotes rounding up a
real number x .

![](https://espresso.codeforces.com/75baa17903d65a630fb0d3334683e857d5fdc345.png)
To the left of the road, there will be i houses, among the corresponding a_j
there must be at least \lceil\frac{i}{2}\rceil zeros. To the right of the
road, there will be n-i houses, among the corresponding a_j there must be at
least \lceil\frac{n-i}{2}\rceil ones.

Determine after which house i the road should be laid in order to satisfy the
described condition and be as close to the middle of the village as possible.
Formally, among all suitable positions i , minimize \left|\frac{n}{2} -
i\right| .

If there are multiple suitable positions i with the minimum \left|\frac{n}{2}
- i\right| , output the smaller one.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 2\cdot 10^4 ). The description of the test cases
follows.

The first line of each test case contains a single integer n (3 \le n \le
3\cdot 10^5 ). The next line of each test case contains a string a of length n
, consisting only of 0 and 1 .

It is guaranteed that the sum of n over all test cases does not exceed 3\cdot
10^5 .

Output

For each test case, output a single number i — the position of the house after
which the road should be laid (if it should be laid before the first house,
output 0 ). We can show that the answer always exists.

Example

Input

    7
    
    3
    
    101
    
    6
    
    010111
    
    6
    
    011001
    
    3
    
    000
    
    3
    
    110
    
    3
    
    001
    
    4
    
    1100

Output

    2
    3
    2
    3
    0
    1
    0
    
Note

Let's consider the first example of input data.

If we lay the road after the first house, there will be one house a_1 = 1 on
the left side of the street, the resident of which would like to live on the
right side of the street. Then 0 out of 1 residents on the even side will be
satisfied with the choice, which means that the road cannot be laid after
house 1 .

If we lay the road after the second house, 1 out of 2 residents on the left
side (with preferences a_1 = 1 , a_2 = 0 ) and 1 out of 1 resident on the
right side (with preference a_3 = 1 ) will be satisfied with the choice. More
than half of the residents on each side are satisfied with the choice, which
means that the road can be laid after house 2 . We can show that this is the
optimal answer.
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1932_B_fpeng2002_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: The Chaya tribe believes that there are n signs of the apocalypse. Over time,
it has been found out that the i -th sign occurs every a_i years (in years a_i
, 2 \cdot a_i , 3 \cdot a_i , \dots ).

According to the legends, for the apocalypse to happen, the signs must occur
sequentially. That is, first they wait for the first sign to occur, then
strictly after it, the second sign will occur, and so on. That is, if the i
-th sign occurred in the year x , the tribe starts waiting for the occurrence
of the (i+1) -th sign, starting from the year x+1 .

In which year will the n -th sign occur and the apocalypse will happen?

Input

The first line of the input contains a single integer t (1 \le t \le 1000 ) —
the number of test cases. Then follow the descriptions of the test cases.

The first line of each test case contains a single integer n (1 \le n \le 100
) — the number of signs.

The second line of each test case contains n integers a_1, a_2, a_3, \dots,
a_n (1 \le a_i \le 10^6 ) — the periodicities of the signs.

Output

For each test case, output a single integer — the year in which all n signs
will occur.

Example

Input

    4
    
    6
    
    3 2 4 5 9 18
    
    5
    
    1 2 3 4 5
    
    5
    
    1 1 1 1 1
    
    6
    
    50 30 711 200 503 1006

Output

    36
    5
    5
    2012
    
Note

In the first set of input data of the example:

  * The tribe will wait for the first sign in the 3 -rd year; 
  * the tribe will wait for the second sign in the 4 -th year (since year 2 have already passed); 
  * the tribe will wait for the third sign in the 8 -th year (since the second sign has already occurred in the 4 -th year); 
  * the tribe will wait for the fourth sign in the 10 -th year (since year 5 have already passed); 
  * the tribe will wait for the fifth sign in the 18 -th year (since year 9 have already passed); 
  * the tribe will wait for the sixth sign in the 36 -th year (since the fifth sign has already occurred in the 18 -th year).
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1932_B_fpeng2002_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: The Chaya tribe believes that there are n signs of the apocalypse. Over time,
it has been found out that the i -th sign occurs every a_i years (in years a_i
, 2 \cdot a_i , 3 \cdot a_i , \dots ).

According to the legends, for the apocalypse to happen, the signs must occur
sequentially. That is, first they wait for the first sign to occur, then
strictly after it, the second sign will occur, and so on. That is, if the i
-th sign occurred in the year x , the tribe starts waiting for the occurrence
of the (i+1) -th sign, starting from the year x+1 .

In which year will the n -th sign occur and the apocalypse will happen?

Input

The first line of the input contains a single integer t (1 \le t \le 1000 ) —
the number of test cases. Then follow the descriptions of the test cases.

The first line of each test case contains a single integer n (1 \le n \le 100
) — the number of signs.

The second line of each test case contains n integers a_1, a_2, a_3, \dots,
a_n (1 \le a_i \le 10^6 ) — the periodicities of the signs.

Output

For each test case, output a single integer — the year in which all n signs
will occur.

Example

Input

    4
    
    6
    
    3 2 4 5 9 18
    
    5
    
    1 2 3 4 5
    
    5
    
    1 1 1 1 1
    
    6
    
    50 30 711 200 503 1006

Output

    36
    5
    5
    2012
    
Note

In the first set of input data of the example:

  * The tribe will wait for the first sign in the 3 -rd year; 
  * the tribe will wait for the second sign in the 4 -th year (since year 2 have already passed); 
  * the tribe will wait for the third sign in the 8 -th year (since the second sign has already occurred in the 4 -th year); 
  * the tribe will wait for the fourth sign in the 10 -th year (since year 5 have already passed); 
  * the tribe will wait for the fifth sign in the 18 -th year (since year 9 have already passed); 
  * the tribe will wait for the sixth sign in the 36 -th year (since the fifth sign has already occurred in the 18 -th year).
DEBUG - Correctness: {'naive': True, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': True, 'default_verify': True, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1980_B_prosenjit_mondol_0.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Dmitry has n cubes, numbered from left to right from 1 to n . The cube with
index f is his favorite.

Dmitry threw all the cubes on the table, and the i -th cube showed the value
a_i (1 \le a_i \le 100 ). After that, he arranged the cubes in non-increasing
order of their values, from largest to smallest. If two cubes show the same
value, they can go in any order.

After sorting, Dmitry removed the first k cubes. Then he became interested in
whether he removed his favorite cube (note that its position could have
changed after sorting).

For example, if n=5 , f=2 , a = [4, \color{green}3, 3, 2, 3] (the favorite
cube is highlighted in green), and k = 2 , the following could have happened:

  * After sorting a=[4, \color{green}3, 3, 3, 2] , since the favorite cube ended up in the second position, it will be removed. 
  * After sorting a=[4, 3, \color{green}3, 3, 2] , since the favorite cube ended up in the third position, it will not be removed. 

Input

The first line contains an integer t (1 \le t \le 1000 ) — the number of test
cases. Then follow the descriptions of the test cases.

The first line of each test case description contains three integers n , f ,
and k (1 \le f, k \le n \le 100 ) — the number of cubes, the index of Dmitry's
favorite cube, and the number of removed cubes, respectively.

The second line of each test case description contains n integers a_i (1 \le
a_i \le 100 ) — the values shown on the cubes.

Output

For each test case, output one line — "YES" if the cube will be removed in all
cases, "NO" if it will not be removed in any case, "MAYBE" if it may be either
removed or left.

You can output the answer in any case. For example, the strings "YES", "nO",
"mAyBe" will be accepted as answers.

Example

Input

    12
    
    5 2 2
    
    4 3 3 2 3
    
    5 5 3
    
    4 2 1 3 5
    
    5 5 2
    
    5 2 4 1 3
    
    5 5 5
    
    1 2 5 4 3
    
    5 5 4
    
    3 1 2 4 5
    
    5 5 5
    
    4 3 2 1 5
    
    6 5 3
    
    1 2 3 1 2 3
    
    10 1 1
    
    1 1 1 1 1 1 1 1 1 1
    
    1 1 1
    
    42
    
    5 2 3
    
    2 2 1 1 2
    
    2 1 1
    
    2 1
    
    5 3 1
    
    3 3 2 3 2

Output

    MAYBE
    YES
    NO
    YES
    YES
    YES
    MAYBE
    MAYBE
    YES
    YES
    YES
    NO
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': False}
DEBUG - Start Task 1976_A_c1581._0.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Monocarp is working on his new site, and the current challenge is to make the
users pick strong passwords.

Monocarp decided that strong passwords should satisfy the following
conditions:

  * password should consist only of lowercase Latin letters and digits; 
  * there should be no digit that comes after a letter (so, after each letter, there is either another letter or the string ends); 
  * all digits should be sorted in the non-decreasing order; 
  * all letters should be sorted in the non-decreasing order. 

Note that it's allowed for the password to have only letters or only digits.

Monocarp managed to implement the first condition, but he struggles with the
remaining ones. Can you help him to verify the passwords?

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
testcases.

The first line of each testcase contains a single integer n (1 \le n \le 20 )
— the length of the password.

The second line contains a string, consisting of exactly n characters. Each
character is either a lowercase Latin letter or a digit.

Output

For each testcase, print "YES" if the given password is strong and "NO"
otherwise.

Example

Input

    5
    
    4
    
    12ac
    
    5
    
    123wa
    
    9
    
    allllmost
    
    5
    
    ac123
    
    6
    
    011679

Output

    YES
    NO
    YES
    NO
    YES
    
Note

In the second testcase, the letters are not sorted in the non-decreasing
order.

In the fourth testcase, there is a digit that comes after a letter — digit '1'
after a letter 'c'.
DEBUG - Correctness: {'naive': True, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': True, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': True, 'default_verify': True, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1923_C_harshkankhar1_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: An array a of length m is considered good if there exists an integer array b
of length m such that the following conditions hold:

  1. \sum\limits_{i=1}^{m} a_i = \sum\limits_{i=1}^{m} b_i ; 
  2. a_i \neq b_i for every index i from 1 to m ; 
  3. b_i > 0 for every index i from 1 to m . 

You are given an array c of length n . Each element of this array is greater
than 0 .

You have to answer q queries. During the i -th query, you have to determine
whether the subarray c_{l_{i}}, c_{l_{i}+1}, \dots, c_{r_{i}} is good.

Input

The first line contains one integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains two integers n and q (1 \le n, q \le
3 \cdot 10^5 ) — the length of the array c and the number of queries.

The second line of each test case contains n integers c_1, c_2, \dots, c_n (1
\le c_i \le 10^9 ).

Then q lines follow. The i -th of them contains two integers l_i and r_i (1
\le l_i \le r_i \le n ) — the borders of the i -th subarray.

Additional constraints on the input: the sum of n over all test cases does not
exceed 3 \cdot 10^5 ; the sum of q over all test cases does not exceed 3 \cdot
10^5 .

Output

For each query, print YES if the subarray is good. Otherwise, print NO.

You can output each letter of the answer in any case (upper or lower). For
example, the strings yEs, yes, Yes, and YES will all be recognized as positive
responses.

Example

Input

    1
    
    5 4
    
    1 2 1 4 5
    
    1 5
    
    4 4
    
    3 4
    
    1 3

Output

    YES
    NO
    YES
    NO
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': True, 'default_verify': True, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1931_B_Lentreo_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: There are n containers of water lined up, numbered from left to right from 1
to n . Each container can hold any amount of water; initially, the i -th
container contains a_i units of water. The sum of a_i is divisible by n .

You can apply the following operation any (possibly zero) number of times:
pour any amount of water from the i -th container to the j -th container,
where i must be less than j (i.e. i<j ). Any index can be chosen as i or j any
number of times.

Determine whether it is possible to make the amount of water in all containers
the same using this operation.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. Then the descriptions of the test cases follow.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ) — the number of containers with water.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (0
\le a_i \le 10^9 ) — the amounts of water in the containers. It is guaranteed
that the sum of a_i in each test case does not exceed 2 \cdot 10^9 . Also, the
sum of a_i is divisible by n .

It is guaranteed that the sum of n over all test cases in the input does not
exceed 2 \cdot 10^5 .

Output

Output t lines, each of which is the answer to the corresponding test case. As
the answer, output "YES" if it is possible to make the amount of water in all
containers the same using the described operation. Otherwise, output "NO".

You can output each letter in any case (lowercase or uppercase). For example,
the strings "yEs", "yes", "Yes", and "YES" will be accepted as a positive
answer.

Example

Input

    6
    
    1
    
    43
    
    2
    
    1 3
    
    5
    
    4 5 2 1 3
    
    3
    
    1 2 3
    
    7
    
    4 5 5 0 6 4 4
    
    7
    
    6 5 5 1 3 4 4

Output

    YES
    NO
    YES
    NO
    NO
    YES
    
Note

In the third test case of the example (a=[4, 5, 2, 1, 3] ), you can proceed as
follows:

  * pour 1 unit of water from the first vessel to the fourth, then a=[3, 5, 2, 2, 3] ; 
  * pour 1 unit of water from the second vessel to the third, then a=[3, 4, 3, 2, 3] ; 
  * pour 1 unit of water from the second vessel to the fourth, then a=[3, 3, 3, 3, 3] .
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': True, 'default_verify': True, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1925_A_CodeBlazer19_16.67%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: You are given two positive integers n and k .

Your task is to find a string s such that all possible strings of length n
that can be formed using the first k lowercase English alphabets occur as a
subsequence of s .

If there are multiple answers, print the one with the smallest length. If
there are still multiple answers, you may print any of them.

Note: A string a is called a subsequence of another string b if a can be
obtained by deleting some (possibly zero) characters from b without changing
the order of the remaining characters.

Input

The first line of input contains a single integer t (1\leq t\leq 676 )
denoting the number of test cases.

Each test case consists of a single line of input containing two integers n
(1\leq n\leq 26 ) and k (1\leq k\leq 26 ).

Output

For each test case, print a single line containing a single string s which
satisfies the above property. If there are multiple answers, print the one
with the smallest length. If there are still multiple answers, you may print
any of them.

Example

Input

    4
    
    1 2
    
    2 1
    
    2 2
    
    2 3

Output

    ab
    aa
    baab
    abcbac
    
Note

For the first test case, there are two strings of length 1 which can be formed
using the first 2 lowercase English alphabets, and they are present in s as a
subsequence as follows:

  * \texttt{a}: {\color{red}{\texttt{a}}}\texttt{b} 
  * \texttt{b}: \texttt{a}{\color{red}{\texttt{b}}} 

For the second test case, there is only one string of length 2 which can be
formed using the first lowercase English alphabet, and it is present in s as a
subsequence as follows:

  * \texttt{aa}: {\color{red}{\texttt{aa}}} 

For the third test case, there are 4 strings of length 2 which can be formed
using the first 2 lowercase English alphabets, and they are present in s as a
subsequence as follows:

  * \texttt{aa}: \texttt{b}{\color{red}{\texttt{aa}}}\texttt{b} 
  * \texttt{ab}: \texttt{ba}{\color{red}{\texttt{ab}}} 
  * \texttt{ba}: {\color{red}{\texttt{ba}}}\texttt{ab} 
  * \texttt{bb}: {\color{red}{\texttt{b}}}\texttt{aa}{\color{red}{\texttt{b}}} 

For the fourth test case, there are 9 strings of length 2 which can be formed
using the first 3 lowercase English alphabets, and they are present in s as a
subsequence as follows:

  * \texttt{aa}: {\color{red}{\texttt{a}}}\texttt{bcb}{\color{red}{\texttt{a}}}\texttt{c} 
  * \texttt{ab}: {\color{red}{\texttt{ab}}}\texttt{cbac} 
  * \texttt{ac}: \texttt{abcb}{\color{red}{\texttt{ac}}} 
  * \texttt{ba}: \texttt{abc}{\color{red}{\texttt{ba}}}\texttt{c} 
  * \texttt{bb}: \texttt{a}{\color{red}{\texttt{b}}}\texttt{c}{\color{red}{\texttt{b}}}\texttt{ac} 
  * \texttt{bc}: \texttt{a}{\color{red}{\texttt{bc}}}\texttt{bac} 
  * \texttt{ca}: \texttt{ab}{\color{red}{\texttt{c}}}\texttt{b}{\color{red}{\texttt{a}}}\texttt{c} 
  * \texttt{cb}: \texttt{ab}{\color{red}{\texttt{cb}}}\texttt{ac} 
  * \texttt{cc}: \texttt{ab}{\color{red}{\texttt{c}}}\texttt{ba}{\color{red}{\texttt{c}}}
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': False, 'complex': False, 'default': False, 'default_no_fsl': False, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1969_B_tah23seen_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Let's define a cyclic shift of some string s as a transformation from s_1 s_2
\dots s_{n-1} s_{n} into s_{n} s_1 s_2 \dots s_{n-1} . In other words, you
take one last character s_n and place it before the first character while
moving all other characters to the right.

You are given a binary string s (a string consisting of only 0-s and/or 1-s).

In one operation, you can choose any substring s_l s_{l+1} \dots s_r (1 \le l
< r \le |s| ) and cyclically shift it. The cost of such operation is equal to
r - l + 1 (or the length of the chosen substring).

You can perform the given operation any number of times. What is the minimum
total cost to make s sorted in non-descending order?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first and only line of each test case contains a binary string s (2 \le
|s| \le 2 \cdot 10^5 ; s_i \in {0, 1}) — the string you need to sort.

Additional constraint on the input: the sum of lengths of strings over all
test cases doesn't exceed 2 \cdot 10^5 .

Output

For each test case, print the single integer — the minimum total cost to make
string sorted using operation above any number of times.

Example

Input

    5
    
    10
    
    0000
    
    11000
    
    101011
    
    01101001

Output

    2
    0
    9
    5
    11
    
Note

In the first test case, you can choose the whole string and perform a cyclic
shift: 10 \rightarrow 01. The length of the substring is 2 , so the cost is 2
.

In the second test case, the string is already sorted, so you don't need to
perform any operations.

In the third test case, one of the optimal strategies is the next:

  1. choose substring [1, 3] : 11000 \rightarrow 01100; 
  2. choose substring [2, 4] : 01100 \rightarrow 00110; 
  3. choose substring [3, 5] : 00110 \rightarrow 00011. 

The total cost is 3 + 3 + 3 = 9 .
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': False, 'simple': False, 'complex': True, 'default': False, 'default_no_fsl': False, 'simple_verify': True, 'complex_verify': True, 'default_verify': False, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': False}
DEBUG - Start Task 1951_D_yassineabdedayem_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: [Nightwish feat. Jonsu - Erämaan Viimeinen](https://youtu.be/QYlFn5q_UQk)

ඞ

Alice has n coins and wants to shop at Bob's jewelry store. Today, although
Bob has not set up the store yet, Bob wants to make sure Alice will buy
exactly k jewels. To set up the store, Bob can erect at most 60 stalls (each
containing an unlimited amount of jewels) and set the price per jewel for each
stall to be an integer number of coins between 1 and 10^{18} .

Fortunately, Bob knows that Alice buys greedily: and she will go to stall 1 ,
buy as many jewels as possible, then go to stall 2 , buy as many jewels as
possible, and so on until the last stall. Knowing this, Bob can choose the
number of stalls to set up, as well as set the price for each stall so that
Alice buys exactly k jewels. Help Bob fulfill the task, or determine if it is
impossible to do so.

Note that Alice does not need to spend all her coins.

Input

Each test contains multiple test cases. The first line contains an integer t
(1 \le t \le 1000 ) — the number of test cases. The description of the test
cases follows.

Each test case contains two positive integers n and k (1 \le n, k \le 10^{18}
) — the number of coins Alice has and the number of jewels Bob wants Alice to
have bought at the end.

Output

For each test case, print on one line "YES" if Bob can erect at most 60 stalls
and set the prices for the stalls such that Alice buys exactly k jewels, or
"NO" if it is impossible to do so.

If the answer is "YES", on the second line, print an integer s (1 \le s \le 60
) — the number of stalls to be set up by Bob. On the third line, print s
positive integers p_1, p_2, \ldots, p_s (1 \le p_i \le 10^{18}) that represent
such a satisfactory pricing p , where p_i is the price per jewel for stall i .
If there are multiple such p 's, print any of them.

Example

Input

    3
    
    7 3
    
    6 4
    
    255 8

Output

    YES
    10
    2 3 4 5 6 7 8 9 10 11
    NO
    YES
    8
    128 64 32 16 8 4 2 1
    
Note

In the first test case, at the first stall, Alice buys 3 jewels and is left
with 1 coin. This is not enough to buy any jewels for any of the remaining
stalls, so Alice buys exactly 3 jewels at the end.

In the third test case,

  * At the first stall, Alice buys 1 jewel and is left with 127 coins. 
  * At the second stall, Alice buys 1 jewel and is left with 63 coins. 
  * At the third stall, Alice buys 1 jewel and is left with 31 coins. 
  * At the fourth stall, Alice buys 1 jewel and is left with 15 coins. 
  * At the fifth stall, Alice buys 1 jewel and is left with 7 coins. 
  * At the sixth stall, Alice buys 1 jewel and is left with 3 coins. 
  * At the seventh stall, Alice buys 1 jewel and is left with 1 coin. 
  * At the eighth stall, Alice buys 1 jewel and is left with 0 coins. 

Therefore, Alice buys exactly 8 jewels in total.
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': False, 'complex_verify': False, 'default_verify': False, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': True}
DEBUG - Start Task 1937_B_VvvVvVnan_100%
ERROR - Error: unsupported statement type: <ast.Global object at 0x7b0a53a231f0> global ans, count

DEBUG - Start Task 1937_B_VvvVvVnan_100%
ERROR - Error: unsupported statement type: <ast.Global object at 0x7b0a53ac1990> global ans, count

DEBUG - Start Task 1937_B_VvvVvVnan_100%
ERROR - Error: unsupported statement type: <ast.Global object at 0x7b0a53c31ae0> global ans, count

DEBUG - Start Task 1945_A_josie.elliston_100%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: The organizing committee plans to take the participants of the Olympiad on a
hike after the tour. Currently, the number of tents needed to be taken is
being calculated. It is known that each tent can accommodate up to 3 people.

Among the participants, there are a introverts, b extroverts, and c
universals:

  * Each introvert wants to live in a tent alone. Thus, a tent with an introvert must contain exactly one person — only the introvert himself. 
  * Each extrovert wants to live in a tent with two others. Thus, the tent with an extrovert must contain exactly three people. 
  * Each universal is fine with any option (living alone, with one other person, or with two others). 

The organizing committee respects the wishes of each participant very much, so
they want to fulfill all of them.

Tell us the minimum number of tents needed to be taken so that all
participants can be accommodated according to their preferences. If it is
impossible to accommodate the participants in a way that fulfills all the
wishes, output -1 .

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. This is followed by
the descriptions of the test cases.

Each test case is described by a single line containing three integers a , b ,
c (0 \le a, b, c \le 10^9 ) — the number of introverts, extroverts, and
universals, respectively.

Output

For each test case, output a single integer — the minimum number of tents, or
-1 if it is impossible to accommodate the participants.

Example

Input

    10
    
    1 2 3
    
    1 4 1
    
    1 4 2
    
    1 1 1
    
    1 3 2
    
    19 7 18
    
    0 0 0
    
    7 0 0
    
    0 24 0
    
    1000000000 1000000000 1000000000

Output

    3
    -1
    3
    -1
    3
    28
    0
    7
    8
    1666666667
    
Note

In the first test case, 1 tent will be given to the introverts, 1 tent will be
shared by two extroverts and one universal, and the last tent will be shared
by two universals. In total, 3 tents are needed.

In the second test case, three extroverts will take 1 tent, and 1 tent will be
taken by an introvert. Then, one extrovert and one universal will be left.
This extrovert will not be able to live with two others.
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': True, 'vanilla_no_cot': True, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': True, 'simple_verify': True, 'complex_verify': False, 'default_verify': True, 'simple_no_fsl_verify': True, 'complex_no_fsl_verify': True, 'default_no_fsl_verify': False}
DEBUG - Start Task 1974_A_chiwuu_0.00%
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwen2p5-72b-instruct
DEBUG - description: Little Rosie has a phone with a desktop (or launcher, as it is also called).
The desktop can consist of several screens. Each screen is represented as a
grid of size 5 \times 3 , i.e., five rows and three columns.

There are x applications with an icon size of 1 \times 1 cells; such an icon
occupies only one cell of the screen. There are also y applications with an
icon size of 2 \times 2 cells; such an icon occupies a square of 4 cells on
the screen. Each cell of each screen can be occupied by no more than one icon.

Rosie wants to place the application icons on the minimum number of screens.
Help her find the minimum number of screens needed.

Input

The first line of the input contains t (1 \leq t \leq 10^4 ) — the number of
test cases.

The first and only line of each test case contains two integers x and y (0
\leq x, y \leq 99 ) — the number of applications with a 1 \times 1 icon and
the number of applications with a 2 \times 2 icon, respectively.

Output

For each test case, output the minimal number of required screens on a
separate line.

Example

Input

    11
    
    1 1
    
    7 2
    
    12 4
    
    0 3
    
    1 0
    
    8 1
    
    0 0
    
    2 0
    
    15 0
    
    8 2
    
    0 9

Output

    1
    1
    2
    2
    1
    1
    0
    1
    1
    2
    5
    
Note

The solution for the first test case can look as follows:

![](https://espresso.codeforces.com/f9882979f0d9b5c31c5260fd626217227c2f05de.png)
Blue squares represent empty spaces for icons, green squares represent 1
\times 1 icons, red squares represent 2 \times 2 icons

The solution for the third test case can look as follows:

![](https://espresso.codeforces.com/0e737a290e056a29f38918bf06c13be790307a8d.png)
DEBUG - Correctness: {'naive': False, 'naive_no_fsl': False, 'vanilla_no_cot': False, 'simple': True, 'complex': True, 'default': False, 'default_no_fsl': False, 'simple_verify': True, 'complex_verify': True, 'default_verify': True, 'simple_no_fsl_verify': False, 'complex_no_fsl_verify': False, 'default_no_fsl_verify': False}
DEBUG - Start Task 1979_C_akashtiwari0704_100%
ERROR - Error: pop from empty list
DEBUG - Start Task 1979_C_akashtiwari0704_100%
ERROR - Error: pop from empty list
DEBUG - Start Task 1979_C_akashtiwari0704_100%
ERROR - Error: pop from empty list
