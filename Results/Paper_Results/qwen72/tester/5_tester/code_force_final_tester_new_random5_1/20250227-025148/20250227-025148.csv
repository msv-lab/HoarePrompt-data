Task ID,unique_id,Dataset,model_created,model_run,description,Code,run_number,original correctness,tester
1922_E,1922_E_Hassn_Hamada_25.00%,codeforces2024,human,qwen2p5-72b-instruct,"Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1","import sys
from typing import Any, List
 
# Open input and output files
stdin = sys.stdin
stdout = sys.stdout
 
# sys.stdin = open('_input.txt', 'r')
# sys.stdout = open('_output.txt', 'w')
 
 
def generate_sequence(number: int, sequence: List[int]) -> int:
    """"""
    Generates a sequence of numbers based on the input number.
 
    Args:
        number (int): The input number to generate sequence for
        sequence (List[int]): The output sequence 
 
    Returns: 
        int: The size of generated sequence
    """"""
    assert number >= 0
    if number == 0:
        return 0
 
    size = 1
    while (1 << (size + 1)) - 1 <= number:
        size += 1
 
    for i in range(size):
        sequence.append(i)
 
    result = generate_sequence(number - (1 << size) + 1, sequence)
 
    for i in range(size):
        assert -len(sequence) <= -result - i - 1 <= -1
        sequence[-result - i - 1] += result
 
    return size + result
 
 
# Input processing
test_cases = int(input())
 
for _ in range(test_cases):
    n = int(input())
    result = list()
    size = generate_sequence(n - 1, result)
    print(len(result))
    print("" "".join(map(str, result)))",1,False,False
1929_A,1929_A_cuiwenqian370_100%,codeforces2024,human,qwen2p5-72b-instruct,"Sasha decided to give his girlfriend an array a_1, a_2, \ldots, a_n . He found
out that his girlfriend evaluates the beauty of the array as the sum of the
values (a_i - a_{i - 1}) for all integers i from 2 to n .

Help Sasha and tell him the maximum beauty of the array a that he can obtain,
if he can rearrange its elements in any way.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 500 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (2 \leq n \leq
100 ) — the length of the array a .

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\leq a_i \leq 10^9 ) — the elements of the array a .

Output

For each test case, output a single integer — the maximum beauty of the array
a that can be obtained.

Example

Input

    5
    
    3
    
    2 1 3
    
    3
    
    69 69 69
    
    5
    
    100 54 80 43 90
    
    4
    
    3 4 3 3
    
    2
    
    2 1

Output

    2
    0
    57
    1
    1
    
Note

In the first test case, the elements of the array a can be rearranged to make
a = [1, 2, 3] . Then its beauty will be equal to (a_2 - a_1) + (a_3 - a_2) =
(2 - 1) + (3 - 2) = 2 .

In the second test case, there is no need to rearrange the elements of the
array a . Then its beauty will be equal to 0 .","def max_beauty(array):
    # Sort the array to maximize the absolute differences between consecutive elements
    array.sort()
    # Calculate the maximum beauty by summing the differences between consecutive sorted elements
    beauty = 0
    for i in range(1, len(array)):
        beauty += abs(array[i] - array[i-1])
    return beauty
 
def main():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    t = int(data[0])  # Number of test cases
    index = 1
    results = []
    
    for _ in range(t):
        n = int(data[index])  # Length of the array
        index += 1
        array = list(map(int, data[index:index+n]))
        index += n
        
        # Calculate the maximum beauty for this array
        result = max_beauty(array)
        results.append(result)
    
    for result in results:
        print(result)
 
if __name__ == ""__main__"":
    main()",1,True,False
1922_C,1922_C_Talharashid_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"There are n cities located on the number line, the i -th city is in the point
a_i . The coordinates of the cities are given in ascending order, so a_1 < a_2
< \dots < a_n .

The distance between two cities x and y is equal to |a_x - a_y| .

For each city i , let's define the closest city j as the city such that the
distance between i and j is not greater than the distance between i and each
other city k . For example, if the cities are located in points [0, 8, 12, 15,
20] , then:

  * the closest city to the city 1 is the city 2 ; 
  * the closest city to the city 2 is the city 3 ; 
  * the closest city to the city 3 is the city 4 ; 
  * the closest city to the city 4 is the city 3 ; 
  * the closest city to the city 5 is the city 4 . 

The cities are located in such a way that for every city, the closest city is
unique. For example, it is impossible for the cities to be situated in points
[1, 2, 3] , since this would mean that the city 2 has two closest cities (1
and 3 , both having distance 1 ).

You can travel between cities. Suppose you are currently in the city x . Then
you can perform one of the following actions:

  * travel to any other city y , paying |a_x - a_y| coins; 
  * travel to the city which is the closest to x , paying 1 coin. 

You are given m queries. In each query, you will be given two cities, and you
have to calculate the minimum number of coins you have to spend to travel from
one city to the other city.

Input

The first line contains one integer t (1 \le t \le 10^4 ) — the number of test
cases.

Each test case is given in the following format:

  * the first line contains one integer n (2 \le n \le 10^5 ); 
  * the second line contains n integers a_1, a_2, \dots, a_n (0 \le a_1 < a_2 < \dots < a_n \le 10^9 ); 
  * the third line contains one integer m (1 \le m \le 10^5 ); 
  * then m lines follow; the i -th of them contains two integers x_i and y_i (1 \le x_i, y_i \le n ; x_i \ne y_i ), denoting that in the i -th query, you have to calculate the minimum number of coins you have to spend to travel from the city x_i to the city y_i . 

Additional constraints on the input:

  * in every test case, for each city, the closest city is determined uniquely; 
  * the sum of n over all test cases does not exceed 10^5 ; 
  * the sum of m over all test cases does not exceed 10^5 . 

Output

For each query, print one integer — the minimum number of coins you have to
spend.

Example

Input

    1
    
    5
    
    0 8 12 15 20
    
    5
    
    1 4
    
    1 5
    
    3 4
    
    3 2
    
    5 1

Output

    3
    8
    1
    4
    14
    
Note

Let's consider the first two queries in the example from the statement:

  * in the first query, you are initially in the city 1 . You can travel to the closest city (which is the city 2 ), paying 1 coin. Then you travel to the closest city (which is the city 3 ) again, paying 1 coin. Then you travel to the closest city (which is the city 4 ) again, paying 1 coin. In total, you spend 3 coins to get from the city 1 to the city 4 ; 
  * in the second query, you can use the same way to get from the city 1 to the city 4 , and then spend 5 coins to travel from the city 4 to the city 5 .","from collections import defaultdict
t=int(input())
for i in range(t):
    d1=defaultdict(int)
    d2=defaultdict(int)
    n=int(input())
    lst=list(map(int,input().split()))
    start=0;end=len(lst)-1;inc=1;s=0
    while start!=end:
        mini=11111111
        if (start+1)<len(lst):
            mini=min(abs(lst[start]-lst[start+1]),mini)
        if (start-1)>-1:
            mini=min(abs(lst[start]-lst[start-1]),mini)
        if mini==abs(lst[start]-lst[start+inc]):
            s+=1
        else:
            s+=abs(lst[start]-lst[start+inc])
        start+=inc
        d1[start]=s
    start=len(lst)-1;end=0;inc=-1;s=0
    while start!=end:
        mini=11111111
        if (start+1)<len(lst):
            mini=min(abs(lst[start]-lst[start+1]),mini)
        if (start-1)>-1:
            mini=min(abs(lst[start]-lst[start-1]),mini)
        if mini==abs(lst[start]-lst[start+inc]):
            s+=1
        else:
            s+=abs(lst[start]-lst[start+inc])
        start+=inc
        d2[start]=s
    m=int(input())
    for i in range(m):
        start,end=map(int,input().split())
        start-=1;
        end-=1
        s=0
        if start<end:
            s1=abs(d1[end]-d1[start])
            s2=abs(d2[start]-d2[end])
        else:
            s1=abs(d2[end]-d2[start])
            s2=abs(d1[start]-d1[end])
        print(min(s1,s2))",1,False,False
1942_B,1942_B____a_s_1_2____100%,codeforces2024,human,qwen2p5-72b-instruct,"[MOOO! - Doja Cat](https://soundcloud.com/amalaofficial/mooo)

⠀

Farmer John has a permutation p_1, p_2, \ldots, p_n , where every integer from
0 to n-1 occurs exactly once. He gives Bessie an array a of length n and
challenges her to construct p based on a .

The array a is constructed so that a_i = \texttt{MEX}(p_1, p_2, \ldots, p_i) -
p_i , where the \texttt{MEX} of an array is the minimum non-negative integer
that does not appear in that array. For example, \texttt{MEX}(1, 2, 3) = 0 and
\texttt{MEX}(3, 1, 0) = 2 .

Help Bessie construct any valid permutation p that satisfies a . The input is
given in such a way that at least one valid p exists. If there are multiple
possible p , it is enough to print one of them.

Input

The first line contains t (1 \leq t \leq 10^4 ) — the number of test cases.

The first line of each test case contains an integer n (1 \leq n \leq 2 \cdot
10^5 ) — the lengths of p and a .

The second line of each test case contains n integers a_1, a_2, \ldots, a_n
(-n \leq a_i \leq n ) — the elements of array a .

It is guaranteed that there is at least one valid p for the given data.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output n integers on a new line, the elements of p .

If there are multiple solutions, print any of them.

Example

Input

    3
    
    5
    
    1 1 -2 1 2
    
    5
    
    1 1 1 1 1
    
    3
    
    -2 1 2

Output

    0 1 4 2 3 
    0 1 2 3 4 
    2 0 1 
    
Note

In the first case, p = [0, 1, 4, 2, 3] is one possible output.

a will then be calculated as a_1 = \texttt{MEX}(0) - 0 = 1 , a_2 =
\texttt{MEX}(0, 1) - 1 = 1 , a_3 = \texttt{MEX}(0, 1, 4) - 4 = -2 , a_4 =
\texttt{MEX}(0, 1, 4, 2) - 2 = 1 , a_5 = \texttt{MEX}(0, 1, 4, 2, 3) - 3 = 2 .

So, as required, a will be [1, 1, -2, 1, 2] .","t = int(input())  
 
for _ in range(t):
    n = int(input())
    a = list(map(int, input().split()))  
 
    p = [-1]*n
    mex = n
    for i in range(n-1, -1, -1):
        p[i] = mex - a[i]
        mex = min(mex, p[i])
 
    print(*p)",1,True,False
1977_A,1977_A_dimkinmile_20.00%,codeforces2024,human,qwen2p5-72b-instruct,"The little boy Nikita was given some cubes as a present. He decided to build a
tower out of them.

Initially, the tower doesn't have any cubes. In one move, Nikita either puts
exactly 1 cube on top of the tower or removes exactly 1 cube from the top of
the tower. Is it possible that after n moves, the resulting tower has exactly
m cubes?

Input

Each test contains multiple test cases. The first line of input contains a
single integer t (1 \le t \le 100 ) — the number of test cases. The
description of the test cases follows.

The only line of each test case contains two integers n and m (1 \le n, m \le
100 ).

Output

For each test case, output ""Yes"" (without quotes) if Nikita can obtain a tower
with m cubes, and ""No"" (without quotes) otherwise.

You can output each letter in any case (lowercase or uppercase). For example,
the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be accepted as a positive
answer.

Example

Input

    3
    
    3 3
    
    2 4
    
    5 3

Output

    Yes
    No
    Yes
    
Note

In the first test case, Nikita can put 1 cube on top of the tower 3 times in a
row, so the answer is ""Yes"".

In the second test case, Nikita can only end up with either a tower with no
blocks or a tower with 2 blocks, so the answer is ""No"".","def makaroni():
    n,m=map(int, input().split())
    if n>=m:
        print('Yes')
    else:
        print('No')
kreker=int(input())
for i in range(kreker):
    makaroni()",1,False,True
1927_F,1927_F_tesfaymebre_2.70%,codeforces2024,human,qwen2p5-72b-instruct,"Given an undirected weighted graph with n vertices and m edges. There is at
most one edge between each pair of vertices in the graph, and the graph does
not contain loops (edges from a vertex to itself). The graph is not
necessarily connected.

A cycle in the graph is called simple if it doesn't pass through the same
vertex twice and doesn't contain the same edge twice.

Find any simple cycle in this graph in which the weight of the lightest edge
is minimal.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. Then follow the descriptions of the test cases.

The first line of each test case contains two integers n and m (3 \le n \le m
\le \min(\frac{n\cdot(n - 1)}{2}, 2 \cdot 10^5) ) — the size of the graph and
the number of edges.

The next m lines of the test case contain three integers u , v , and w (1 \le
u, v \le n , u \ne v , 1 \le w \le 10^6 ) — vertices u and v are connected by
an edge of weight w .

It is guaranteed that there is at most one edge between each pair of vertices.
Note that under the given constraints, there is always at least one simple
cycle in the graph.

It is guaranteed that the sum of the values of m for all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a pair of numbers b and k , where:

  * b — the minimum weight of the edge in the found cycle, 
  * k — the number of vertices in the found cycle. 

On the next line, output k numbers from 1 to n — the vertices of the cycle in
traversal order.

Note that the answer always exists, as under the given constraints, there is
always at least one simple cycle in the graph.

Example

Input

    5
    
    6 6
    
    1 2 1
    
    2 3 1
    
    3 1 1
    
    4 5 1
    
    5 6 1
    
    6 4 1
    
    6 6
    
    1 2 10
    
    2 3 8
    
    3 1 5
    
    4 5 100
    
    5 6 40
    
    6 4 3
    
    6 15
    
    1 2 4
    
    5 2 8
    
    6 1 7
    
    6 3 10
    
    6 5 1
    
    3 2 8
    
    4 3 4
    
    5 3 6
    
    2 6 6
    
    5 4 5
    
    4 1 3
    
    6 4 5
    
    4 2 1
    
    3 1 7
    
    1 5 5
    
    4 6
    
    2 3 2
    
    1 3 10
    
    1 4 1
    
    3 4 7
    
    2 4 5
    
    1 2 2
    
    4 5
    
    2 1 10
    
    3 1 3
    
    4 2 6
    
    1 4 7
    
    2 3 3

Output

    1 3
    1 2 3 
    3 3
    6 4 5 
    1 5
    4 2 1 6 3 
    1 4
    1 4 3 2 
    3 3
    2 3 1","from collections import defaultdict
import sys
import threading
 
class DSU:
    def __init__(self, n):
        self.parent = [i for i in range(n)]
        self.size = [1] * n
        self.min_edge = [float('inf')] * n
 
    def find(self, x):
        while self.parent[x] != x:
            self.parent[x] = self.parent[self.parent[x]]
            x = self.parent[x]
 
        return x
 
    def union(self, a, b, w):
        parent_a = self.find(a)
        parent_b = self.find(b)
 
        self.min_edge[parent_a] = min(self.min_edge[parent_a], w)
        self.min_edge[parent_b] = min(self.min_edge[parent_b], w)
 
        if parent_a != parent_b:
            if self.size[parent_a] < self.size[parent_b]:
                parent_a, parent_b = parent_b, parent_a
 
            self.size[parent_a] += self.size[parent_b]
            self.min_edge[parent_a] = min(self.min_edge[parent_a],self.min_edge[parent_b])
            self.parent[parent_b] = parent_a
 
        return
    
def int_input():
    return int(sys.stdin.readline().strip())
 
def string():
    return sys.stdin.readline().strip()
 
def map_int():
    return map(int, sys.stdin.readline().strip().split())
 
def list_int_input():
    return list(map(int, sys.stdin.readline().strip().split()))
 
def list_string_input():
    return list(sys.stdin.readline().strip().split())
 
def solve():
    n,m = map_int()
    graph = defaultdict(list)
    edges = []
 
    for i in range(m):
        u,v,w = map_int()
        graph[u].append(v)
        graph[v].append(u)
 
        edges.append((w,u,v))
 
 
    edges.sort(reverse=True)
 
    
    dsu = DSU(n+1)
    _min_edge = float('inf')
    node_u = -1
    node_v = -1
 
    for w,u,v in edges:
        parent_u = dsu.find(u)
        parent_v = dsu.find(v)
        if parent_u == parent_v:
            dsu.union(u,v,w)
            if dsu.min_edge[parent_u] < _min_edge:
                _min_edge = dsu.min_edge[parent_u]
                node_u = u
                node_v = v
        else:
            dsu.union(u,v,w)
 
    colors = [0] * (n+1)
    def dfs(curr, parent, path):
        if colors[curr] == 1:
            return path
        
        colors[curr] = 1
        path.append(curr)
 
        for nei in graph[curr]:
            if colors[nei] != 2 and nei != parent:
                res = dfs(nei, curr, path)
                set_res = set(res)
                if res and node_v in set_res:
                    return res
 
        colors[curr] = 2     
        return []
    
    res = dfs(node_u,-1,[])
    print(_min_edge,len(res))
    print(*res)
 
def main():
    test_cases = int_input()
    for _ in range(test_cases):
        solve()
 
if __name__ == '__main__':
    sys.setrecursionlimit(1 << 30)
    threading.stack_size(1 << 27)
 
    main_thread = threading.Thread(target=main)
    main_thread.start()
    main_thread.join()",1,False,False
1945_C,1945_C_sahiltomar100303_8.33%,codeforces2024,human,qwen2p5-72b-instruct,"In the village of Letovo, there are n houses. The villagers decided to build a
big road that will divide the village into left and right sides. Each resident
wants to live on either the right or the left side of the street, which is
described as a sequence a_1, a_2, \dots, a_n , where a_j = 0 if the resident
of the j -th house wants to live on the left side of the street; otherwise,
a_j = 1 .

The road will pass between two houses. The houses to the left of it will be
declared the left-side, and the houses to the right will be declared the
right-side. More formally, let the road pass between houses i and i+1 . Then
the houses at positions between 1 and i will be on the left side of the
street, and at positions between i+1 and n will be on the right side. The road
also may pass before the first and after the last house; in this case, the
entire village is declared to be either the right or left side, respectively.

To make the design fair, it was decided to lay the road so that at least half
of the residents on each side of the village are satisfied with the choice.
That is, among x residents on one side, at least \lceil\frac{x}{2}\rceil
should want to live on that side, where \lceil x \rceil denotes rounding up a
real number x .

![](https://espresso.codeforces.com/75baa17903d65a630fb0d3334683e857d5fdc345.png)
To the left of the road, there will be i houses, among the corresponding a_j
there must be at least \lceil\frac{i}{2}\rceil zeros. To the right of the
road, there will be n-i houses, among the corresponding a_j there must be at
least \lceil\frac{n-i}{2}\rceil ones.

Determine after which house i the road should be laid in order to satisfy the
described condition and be as close to the middle of the village as possible.
Formally, among all suitable positions i , minimize \left|\frac{n}{2} -
i\right| .

If there are multiple suitable positions i with the minimum \left|\frac{n}{2}
- i\right| , output the smaller one.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 2\cdot 10^4 ). The description of the test cases
follows.

The first line of each test case contains a single integer n (3 \le n \le
3\cdot 10^5 ). The next line of each test case contains a string a of length n
, consisting only of 0 and 1 .

It is guaranteed that the sum of n over all test cases does not exceed 3\cdot
10^5 .

Output

For each test case, output a single number i — the position of the house after
which the road should be laid (if it should be laid before the first house,
output 0 ). We can show that the answer always exists.

Example

Input

    7
    
    3
    
    101
    
    6
    
    010111
    
    6
    
    011001
    
    3
    
    000
    
    3
    
    110
    
    3
    
    001
    
    4
    
    1100

Output

    2
    3
    2
    3
    0
    1
    0
    
Note

Let's consider the first example of input data.

If we lay the road after the first house, there will be one house a_1 = 1 on
the left side of the street, the resident of which would like to live on the
right side of the street. Then 0 out of 1 residents on the even side will be
satisfied with the choice, which means that the road cannot be laid after
house 1 .

If we lay the road after the second house, 1 out of 2 residents on the left
side (with preferences a_1 = 1 , a_2 = 0 ) and 1 out of 1 resident on the
right side (with preference a_3 = 1 ) will be satisfied with the choice. More
than half of the residents on each side are satisfied with the choice, which
means that the road can be laid after house 2 . We can show that this is the
optimal answer.","t = int(input())
for _ in range(t):
    n = int(input())
    s = input()
 
    mid = n // 2
    leftZero = 0
    rightZero = 0
    leftOne = 0
    rightOne = 0
    tleftZero = 0
    trightZero = 0
    tleftOne = 0
    trightOne = 0
 
    for i in range(mid):
        if s[i] == '0':
            leftZero += 1
            tleftZero += 1
        else:
            leftOne += 1
            tleftOne += 1
 
    for i in range(mid, n):
        if s[i] == '0':
            rightZero += 1
            trightZero += 1
        else:
            rightOne += 1
            trightOne += 1
 
    left = mid
    leftMove = 0
    while left > 0 and (leftZero < (left+1)//2 or rightOne < (n-left+1)//2):
        if s[left-1] == '0':
            leftZero -= 1
            rightZero += 1
        else:
            leftOne -= 1
            rightOne += 1
        left -= 1
 
    right = mid
    while right < n and (tleftZero < (right+1)//2 or trightOne < (n-right+1)//2):
        if s[right] == '0':
            tleftZero += 1
            trightZero -= 1
        else:
            tleftOne += 1
            trightOne -= 1
        right += 1
 
    if left == 0:
        if right != n:
            print(right)
        else:
            if rightOne >= (n+1)//2:
                print(left)
            else:
                print(right)
    elif right == n:
        if tleftZero >= (n+1)//2:
            print(right)
        else:
            print(left)
    else:
        if abs((n+1)//2-left) <= abs((n+1)//2-right):
            print(left)
        else:
            print(right)",1,False,False
1945_E,1945_E_sterlin_100%,codeforces2024,human,qwen2p5-72b-instruct,"Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3","# sterlin
import sys
input = lambda: sys.stdin.readline().rstrip()
 
def ii():
    return int(input())
 
def mi():
    return map(int, input().split())
 
def li():
    return list(map(int, input().split()))
 
def si():
    return input()
 
def lsi():
    return input().split()
 
 
 
t = ii()
for _ in range(t):
    n, x = mi()
    p = li()
 
    num_indx = {num: indx + 1 for indx, num in enumerate(p)}
    seen = [0]*n
    left = 0
    right = n
    
 
    while left + 1 < right:
        mid = left + (right - left)//2
 
        seen[p[mid] - 1] = 1
        if p[mid] <= x:
            left = mid
        
        else:
            right = mid
    
 
    if p[left] == x:
        print(0)
    
    elif not seen[x - 1]:
        print(1)
        print(left + 1, num_indx[x])
    else:
        seen[p[left] - 1] = 0
        temp = sorted([indx + 1 for indx, vis in enumerate(seen) if not vis])
        print(2)
        print(num_indx[temp[0]], num_indx[x])
        print(num_indx[temp[0]], left + 1)",1,True,False
1922_B,1922_B_petras741_40.00%,codeforces2024,human,qwen2p5-72b-instruct,"You have n sticks, numbered from 1 to n . The length of the i -th stick is
2^{a_i} .

You want to choose exactly 3 sticks out of the given n sticks, and form a non-
degenerate triangle out of them, using the sticks as the sides of the
triangle. A triangle is called non-degenerate if its area is strictly greater
than 0 .

You have to calculate the number of ways to choose exactly 3 sticks so that a
triangle can be formed out of them. Note that the order of choosing sticks
does not matter (for example, choosing the 1 -st, 2 -nd and 4 -th stick is the
same as choosing the 2 -nd, 4 -th and 1 -st stick).

Input

The first line contains one integer t (1 \le t \le 10^4 ) — the number of test
cases.

Each test case consists of two lines:

  * the first line contains one integer n (1 \le n \le 3 \cdot 10^5 ); 
  * the second line contains n integers a_1, a_2, \dots, a_n (0 \le a_i \le n ). 

Additional constraint on the input: the sum of n over all test cases does not
exceed 3 \cdot 10^5 .

Output

For each test case, print one integer — the number of ways to choose exactly 3
sticks so that a triangle can be formed out of them.

Example

Input

    4
    
    7
    
    1 1 1 1 1 1 1
    
    4
    
    3 2 1 3
    
    3
    
    1 2 3
    
    1
    
    1

Output

    35
    2
    0
    0
    
Note

In the first test case of the example, any three sticks out of the given 7 can
be chosen.

In the second test case of the example, you can choose the 1 -st, 2 -nd and 4
-th stick, or the 1 -st, 3 -rd and 4 -th stick.

In the third test case of the example, you cannot form a triangle out of the
given sticks with lengths 2 , 4 and 8 .","t=int(input())
buffer=[]
for i in range(t):
    n=int(input())
    w=[int(k) for k in input().split()]
    if n>=3:
        q={}
        # zeta=[0 for j in range(n+1)]
        # #print(type(q))
        # for j in range(n):
        #     if zeta[w[j]]==1:
        #         q[w[j]]+=1
        #     else:
        #         q[w[j]]=1
        #     zeta[w[j]]=1
        #     if w[0]==262144 and j==150901:
        #         print(len(q.keys()))
        #         break
        # if w[0]==262144:
        #     print(n) #(eta_ln)
        #     break
        q=[0 for j in range(n+1)]
        for j in range(n):
            q[w[j]]+=1
        eta=[]
        for j in range(n+1):
            if q[j]>0:
                eta.append(j)
        # epsilon=set()
        # q=[0 for j in range(300000)]
        # for j in range(n):
        #     q[w[j]]+=1
        #     epsilon.add(w[j])
        eta_ln=len(eta)
        rho=q[eta[0]]
        if eta_ln==1:
            print(n*(n-1)*(n-2)//6)
        else:
            res=q[eta[0]]*(q[eta[0]]-1)*(q[eta[0]]-2)//6
            for j in range(1, eta_ln):
                res+=q[eta[j]]*(q[eta[j]]-1)*(q[eta[j]]-2)//6
                res+=q[eta[j]]*(q[eta[j]]-1)//2*rho
                rho+=q[eta[j]]
                if j>1000:
                    break
            print(res)
    else:
        print(0)",1,False,False
1978_B,1978_B_K-Marjona_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Bob decided to open a bakery. On the opening day, he baked n buns that he can
sell. The usual price of a bun is a coins, but to attract customers, Bob
organized the following promotion:

  * Bob chooses some integer k (0 \le k \le \min(n, b) ).
  * Bob sells the first k buns at a modified price. In this case, the price of the i -th (1 \le i \le k ) sold bun is (b - i + 1) coins.
  * The remaining (n - k) buns are sold at a coins each.

Note that k can be equal to 0 . In this case, Bob will sell all the buns at a
coins each.

Help Bob determine the maximum profit he can obtain by selling all n buns.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. The description of
the test cases follows.

The only line of each test case contains three integers n , a , and b (1 \le
n, a, b \le 10^9 ) — the number of buns, the usual price of a bun, and the
price of the first bun to be sold at a modified price.

Output

For each test case, output a single integer — the maximum profit that Bob can
obtain.

Example

Input

    7
    
    4 4 5
    
    5 5 9
    
    10 10 5
    
    5 5 11
    
    1000000000 1000000000 1000000000
    
    1000000000 1000000000 1
    
    1000 1 1000

Output

    17
    35
    100
    45
    1000000000000000000
    1000000000000000000
    500500
    
Note

In the first test case, it is optimal for Bob to choose k = 1 . Then he will
sell one bun for 5 coins, and three buns at the usual price for 4 coins each.
Then the profit will be 5 + 4 + 4 + 4 = 17 coins.

In the second test case, it is optimal for Bob to choose k = 5 . Then he will
sell all the buns at the modified price and obtain a profit of 9 + 8 + 7 + 6 +
5 = 35 coins.

In the third test case, it is optimal for Bob to choose k = 0 . Then he will
sell all the buns at the usual price and obtain a profit of 10 \cdot 10 = 100
coins.","for _ in range(int(input())):
    n,a,b=map(int,input().split())
    k=min(n,b-a)
    if(b<=a):
        print(a*n)
    else:
        print((b+(b-k+1))//2*k+(n-k)*a)",1,False,False
1931_F,1931_F_HClO_3.12%,codeforces2024,human,qwen2p5-72b-instruct,"There are n people in the programming contest chat. Chat participants are
ordered by activity, but each person sees himself at the top of the list.

For example, there are 4 participants in the chat, and their order is [2, 3,
1, 4] . Then

  * 1 -st user sees the order [1, 2, 3, 4] . 
  * 2 -nd user sees the order [2, 3, 1, 4] . 
  * 3 -rd user sees the order [3, 2, 1, 4] . 
  * 4 -th user sees the order [4, 2, 3, 1] . 

k people posted screenshots in the chat, which show the order of participants
shown to this user. The screenshots were taken within a short period of time,
and the order of participants has not changed.

Your task is to determine whether there is a certain order that all
screenshots correspond to.

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
input test cases. The descriptions of test cases follow.

The first line of the description of each test case contains two integers n
and k (1 \le k \le n \le 2 \cdot 10^5, n \cdot k \le 2 \cdot 10^5 ) — the
number of chat participants and the number of participants who posted
screenshots.

The following k lines contain descriptions of screenshots posted by the
participants.

The i -th row contains n integers a_{ij} each (1 \le a_{ij} \le n , all a_{ij}
are different) — the order of participants shown to the participant a_{i0} ,
where a_{i0} — the author of the screenshot. You can show that in the
screenshot description it will always be at the top of the list.

It is guaranteed that the sum of n \cdot k for all test cases does not exceed
2 \cdot 10^5 . It is also guaranteed that all the authors of the screenshots
are different.

Output

Output t lines, each of which is the answer to the corresponding test case. As
an answer, output ""YES"" if there exists at least one order of participants,
under which all k screenshots could have been obtained. Otherwise, output
""NO"".

You can output the answer in any case (upper or lower). For example, the
strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive
responses.

Example

Input

    10
    
    5 1
    
    1 2 3 4 5
    
    4 4
    
    1 2 3 4
    
    2 3 1 4
    
    3 2 1 4
    
    4 2 3 1
    
    6 2
    
    1 3 5 2 4 6
    
    6 3 5 2 1 4
    
    3 3
    
    1 2 3
    
    2 3 1
    
    3 2 1
    
    10 2
    
    1 2 3 4 5 6 7 8 9 10
    
    10 9 8 7 6 5 4 3 2 1
    
    1 1
    
    1
    
    5 2
    
    1 2 3 5 4
    
    2 1 3 5 4
    
    3 3
    
    3 1 2
    
    2 3 1
    
    1 3 2
    
    5 4
    
    3 5 1 4 2
    
    2 5 1 4 3
    
    1 5 4 3 2
    
    5 1 4 3 2
    
    3 3
    
    1 3 2
    
    2 1 3
    
    3 2 1

Output

    YES
    YES
    YES
    YES
    NO
    YES
    YES
    YES
    YES
    NO","from heapq import *
 
t = int(input())
 
 
for _ in range(t):
    n, m = map(int, input().split())
    if m == 1:
        input()
        print(""yes"")
        continue
    a1, *l1 = map(int, input().split())
    a2, *l2 = map(int, input().split())
    l11 = [i for i in l1 if i != a2]
    l22 = [i for i in l2 if i != a1]
    if l11 != l22:
        for _ in range(m - 2):
            input()
        print(""no"")
        continue
    idx1 = idx2 = -1
    p1 = p2 = 0
    for i in range(n - 1):
        if i + max(p1, p2) == n - 1:
            break
        if l1[i + p1] != l2[i + p2]:
            if l1[i + p1] == a2 and l2[i + p2] == a1:
                idx1 = idx2 = i
                break
            else:
                if l1[i + p1] == a2:
                    idx1 = i
                    p1 = 1
                else:
                    idx2 = i
                    p2 = 1
                if idx1 >= 0 and idx2 >= 0:
                    break
    val = []
    if idx1 < idx2:
        l2.insert(idx1, a2)
        l = l2
    elif idx1 > idx2:
        l1.insert(idx2, a1)
        l = l1
    else:
        if m == 2:
            print(""yes"")
            continue
        a3, *l3 = map(int, input().split())
        if l3.index(a1) < l3.index(a2):
            l1.insert(idx2, a1)
            l = l1
        else:
            l2.insert(idx1, a2)
            l = l2
        val.append((a3, l3))
        m -= 1
    for _ in range(m - 2):
        a3, *l3 = map(int, input().split())
        val.append((a3, l3))
    for a3, l3 in val:
        if l3 != [i for i in l if i != a3]:
            print(""no"")
            break
    else:
        print(""yes"")",1,False,False
1965_B,1965_B_just_average_ok_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given two integers n and k . Find a sequence a of non-negative
integers of size at most 25 such that the following conditions hold.

  * There is no subsequence of a with a sum of k . 
  * For all 1 \le v \le n where v \ne k , there is a subsequence of a with a sum of v . 

A sequence b is a subsequence of a if b can be obtained from a by the deletion
of several (possibly, zero or all) elements, without changing the order of the
remaining elements. For example, [5, 2, 3] is a subsequence of [1, 5, 7, 8, 2,
4, 3] .

It can be shown that under the given constraints, a solution always exists.

Input

The first line of the input contains a single integer t (1 \le t \le 1000 ) —
the number of test cases. The description of the test cases follows.

Each test case consists of a single line containing two integers n and k (2
\le n \le 10^6 , 1 \le k \le n ) — the parameters described above.

It is guaranteed that the sum of n over all test cases does not exceed 10^7 .

Output

The first line of output for each test case should contain a single integer m
(1 \le m \le 25 ) — the size of your chosen sequence.

The second line of output for each test case should contain m integers a_i (0
\le a_i \le 10^9 ) — the elements of your chosen sequence.

If there are multiple solutions, print any.

Example

Input

    5
    
    2 2
    
    6 1
    
    8 8
    
    9 3
    
    10 7

Output

    1
    1
    5
    2 3 4 5 6
    7
    1 1 1 1 1 1 1
    4
    7 1 4 1
    4
    1 2 8 3
    
Note

In the first example, we just need a subsequence that adds up to 1 , but not
one that adds up to 2 . So the array a=[1] suffices.

In the second example, all elements are greater than k=1 , so no subsequence
adds up to 1 . Every other integer between 1 and n is present in the array, so
there is a subsequence of size 1 adding up to each of those numbers.","for _ in range(int(input())):
    n, k = map(int, input().split())
    
    nums = [(1<<i) for i in range(24)]
    idx = 0
    while k >= (1 << idx): idx+=1
    idx -= 1
    nums.append(k-nums[idx])
    nums.append(k+1)
    nums.append(k+nums[idx]+1)
    nums.remove(1 << idx)
    print(len(nums))
    print(*nums)",1,False,False
1977_A,1977_A_VSS201445_HashirWaqar_100%,codeforces2024,human,qwen2p5-72b-instruct,"The little boy Nikita was given some cubes as a present. He decided to build a
tower out of them.

Initially, the tower doesn't have any cubes. In one move, Nikita either puts
exactly 1 cube on top of the tower or removes exactly 1 cube from the top of
the tower. Is it possible that after n moves, the resulting tower has exactly
m cubes?

Input

Each test contains multiple test cases. The first line of input contains a
single integer t (1 \le t \le 100 ) — the number of test cases. The
description of the test cases follows.

The only line of each test case contains two integers n and m (1 \le n, m \le
100 ).

Output

For each test case, output ""Yes"" (without quotes) if Nikita can obtain a tower
with m cubes, and ""No"" (without quotes) otherwise.

You can output each letter in any case (lowercase or uppercase). For example,
the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be accepted as a positive
answer.

Example

Input

    3
    
    3 3
    
    2 4
    
    5 3

Output

    Yes
    No
    Yes
    
Note

In the first test case, Nikita can put 1 cube on top of the tower 3 times in a
row, so the answer is ""Yes"".

In the second test case, Nikita can only end up with either a tower with no
blocks or a tower with 2 blocks, so the answer is ""No"".","for _ in range(int(input())):
    n,m=map(int,input().split())
    if n>=m and (n-m)%2==0:print('YES')
    else:print('NO')",1,True,False
1929_A,1929_A_mina330_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Sasha decided to give his girlfriend an array a_1, a_2, \ldots, a_n . He found
out that his girlfriend evaluates the beauty of the array as the sum of the
values (a_i - a_{i - 1}) for all integers i from 2 to n .

Help Sasha and tell him the maximum beauty of the array a that he can obtain,
if he can rearrange its elements in any way.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 500 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (2 \leq n \leq
100 ) — the length of the array a .

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\leq a_i \leq 10^9 ) — the elements of the array a .

Output

For each test case, output a single integer — the maximum beauty of the array
a that can be obtained.

Example

Input

    5
    
    3
    
    2 1 3
    
    3
    
    69 69 69
    
    5
    
    100 54 80 43 90
    
    4
    
    3 4 3 3
    
    2
    
    2 1

Output

    2
    0
    57
    1
    1
    
Note

In the first test case, the elements of the array a can be rearranged to make
a = [1, 2, 3] . Then its beauty will be equal to (a_2 - a_1) + (a_3 - a_2) =
(2 - 1) + (3 - 2) = 2 .

In the second test case, there is no need to rearrange the elements of the
array a . Then its beauty will be equal to 0 .","ntest=int(input())
for itest in range(0,ntest,1):
    n=int(input())
    a=list(map(int,input().split()))
    a.sort()
    kq=0
    for i in range(0,len(a)//2,1):
        kq=kq+a[len(a)-i-1]-a[i]
    print(kq)",1,False,False
1979_C,1979_C_cr0n_8.33%,codeforces2024,human,qwen2p5-72b-instruct,"You have been offered to play a game. In this game, there are n possible
outcomes, and for each of them, you must bet a certain integer amount of
coins. In the event that the i -th outcome turns out to be winning, you will
receive back the amount of coins equal to your bet on that outcome, multiplied
by k_i . Note that exactly one of the n outcomes will be winning.

Your task is to determine how to distribute the coins in such a way that you
will come out ahead in the event of any winning outcome. More formally, the
total amount of coins you bet on all outcomes must be strictly less than the
number of coins received back for each possible winning outcome.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le 50 )
— the number of outcomes.

The second line of each test case contains n integers k_1,k_2,\ldots,k_n (2
\le k_i \le 20 ) — the multiplier for the amount of coins if the i -th outcome
turns out to be winning.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output -1 if there is no way to distribute the coins as
required. Otherwise, output n integers x_1, x_2,\ldots, x_n (1 \le x_i \le
10^{9} ) — your bets on the outcomes.

It can be shown that if a solution exists, there is always a solution that
satisfies these constraints.

If there are multiple suitable solutions, output any of them.

Example

Input

    6
    
    3
    
    3 2 7
    
    2
    
    3 3
    
    5
    
    5 5 5 5 5
    
    6
    
    7 9 3 17 9 13
    
    3
    
    6 3 2
    
    5
    
    9 4 6 8 3

Output

    27 41 12 
    1 1 
    -1
    1989 1547 4641 819 1547 1071 
    -1
    8 18 12 9 24
    
Note

In the first test case, the coins can be distributed as follows: 27 coins on
the first outcome, 41 coins on the second outcome, 12 coins on the third
outcome. Then the total amount of coins bet on all outcomes is 27 + 41 + 12 =
80 coins. If the first outcome turns out to be winning, you will receive back
3 \cdot 27 = 81 coins, if the second outcome turns out to be winning, you will
receive back 2 \cdot 41 = 82 coins, if the third outcome turns out to be
winning, you will receive back 7 \cdot 12 = 84 coins. All these values are
strictly greater than 80 .

In the second test case, one way is to bet one coin on each of the outcomes.","def solve():
    N = int(input().strip())
    vals = [int(r) for r in input().strip().split()]
    prod = 1
    for r in vals:
        prod *= r
    vprod = [prod//r for r in vals]
    den = prod - sum(vprod)
    if den <= 0:
        print(-1)
        return
    
    print("" "".join([str(x) for x in vprod]))
 
cases = int(input())
for n in range(cases):
    solve()",1,False,False
1926_C,1926_C_vjudge.10_100%,codeforces2024,human,qwen2p5-72b-instruct,"Please note that the time limit for this problem is only 0.5 seconds per test.

Vladislav wrote the integers from 1 to n , inclusive, on the board. Then he
replaced each integer with the sum of its digits.

What is the sum of the numbers on the board now?

For example, if n=12 then initially the numbers on the board are:

Then after the replacement, the numbers become:

The sum of these numbers is 1+2+3+4+5+6+7+8+9+1+2+3=51 . Thus, for n=12 the
answer is 51 .

Input

The first line contains an integer t (1 \leq t \leq 10^4 ) — the number of
test cases.

The only line of each test case contains a single integer n (1 \leq n \leq 2
\cdot 10^5 ) — the largest number Vladislav writes.

Output

For each test case, output a single integer — the sum of the numbers at the
end of the process.

Example

Input

    7
    
    12
    
    1
    
    2
    
    3
    
    1434
    
    2024
    
    200000

Output

    51
    1
    3
    6
    18465
    28170
    4600002","def main():
 
    inf = 2 * (10 ** 5) + 1
 
    t = int(input())
 
    values = [0] * inf
 
    for i in range(1, inf):
        sum_value_digits = 0
        for x in str(i):
            sum_value_digits += int(x)
        values[i] = values[i - 1] + sum_value_digits
 
    for _ in range(t):
        value = int(input())
        print(values[value])
 
 
main()",1,True,False
1970_F1,1970_F1_fcmb57_100%,codeforces2024,human,qwen2p5-72b-instruct,"This afternoon, you decided to enjoy the first days of Spring by taking a walk
outside. As you come near the Quidditch field, you hear screams. Once again,
there is a conflict about the score: the two teams are convinced that they won
the game! To prevent this problem from happening one more time, you decide to
get involved in the refereeing of the matches.

Now, you will stay in the stadium to watch the game and count the score. At
the end of the game, you will decide the winner.

Today, two teams are competing: the red Gryffindor (R) and the blue Ravenclaw
(B) team. Each team is composed of P players (1 \leq P \leq 10 ).

The field is a rectangle of N lines and M columns (3 \leq N, M \leq 99 , N and
M are odd). All the positions are integers, and several entities are allowed
to be at the same position in the field. At the beginning of the game, the
field contains goals for the two teams (each team can own between one and five
goals), the players, and exactly one Quaffle. Other types of balls will be
available in the harder versions of the problem.

A game is composed of T steps (0 \leq T \leq 10000 ). At each step, one entity
on the field (a player or a ball) performs one action. All entities can move.
A player can also catch a ball or throw the Quaffle that it is carrying. To
catch a ball, a player must be located on the same cell as it. The Quaffle
does not perform any action while it is being carried; it only follows the
movements of the player. If a player carrying the Quaffle decides to throw it,
the Quaffle is simply put at the current position of the player.

To win a point, a player must leave the Quaffle at a goal of the other team.
When it does, the team of the player wins one point, and the Quaffle instantly
moves to the middle of the field (the cell at the (M+1)/2 -th column of the
(N+1)/2 -th line of the field, starting from 1). There is no goal in the
middle of the field. If a player puts the ball in its own goal, the other team
wins the point.

Input

On the first line, the integers N and M .

The description of the field follows: N lines of M pairs of characters
separated by spaces. Each pair of characters represents a position on the
field. It can be either:

  * .. to represent an empty cell 
  * R0, ..., R9, B0, ..., B9 to represent a player. The first character is the team of the player, and the second is the number of the player in the team. Each pair of characters is unique, but it is not guaranteed that all the pairs appear in the grid. 
  * RG or BG to represent a goal. The blue team tries to put the ball in a red goal (RG) while the red team tries to put the ball in a blue goal (BG). 
  * .Q to represent the Quaffle, which is the ball that the players use to score goals. 

The next line contains T , the number of steps that compose the game. T lines
follow, each describing one action. It contains several pieces of information
separated by a space. First, a pair of characters representing the entity that
must perform the action. Second, the description of the action:

  * U, D, L, R indicate that the entity moves on the grid. It can move to the top of the grid (U), to the bottom (D), to the left (L), or to the right (R). Each entity moves by only one cell at a time. 
  * C indicates that the player catches the ball (only a player can catch a ball). Then, there is a space followed by a pair of characters: the description of the ball caught by the player. This information is needed since in the next versions of the problem, several balls may be in the same cell. 
  * T indicates that the player throws the Quaffle that it is carrying. 

All the actions performed by the entities are guaranteed to be valid: the
players stay in the field, don't catch a ball if they are not in the same
cell, don't release the Quaffle if they are not carrying it, ...

Output

You must output the description of the main events of the game, one event per
line. More precisely:

  * Each time a team scores, you must print t RED GOAL or t BLUE GOAL, depending on the team who scored, where t is the current time (the position of the action in the list of actions, starting from 0). In the case where a player scores in the wrong goal (a red player scores in the red goal, or a blue player scores in the blue goal), you must print the name of the team who wins one point, that is, the other team. 

The events must be printed in ascending order of t.

At the end of the game, you must print the final score as: FINAL SCORE: r b,
where r is the score of the red team and b is the score of the blue team.

Examples

Input

    5 5
    
    .. R1 .. B1 ..
    
    RG .. .. .. BG
    
    RG R0 .Q B0 BG
    
    RG .. .. .. BG
    
    .. R2 .. B2 ..
    
    13
    
    B2 U
    
    B2 U
    
    B2 L
    
    B2 C .Q
    
    B2 L
    
    B2 L
    
    B2 T
    
    R0 R
    
    R0 C .Q
    
    R0 D
    
    R0 R
    
    R0 R
    
    R0 T

Output

    6 BLUE GOAL
    12 RED GOAL
    FINAL SCORE: 1 1
    
Input

    3 5
    
    .. .. R0 .. ..
    
    RG .. .Q .. BG
    
    .. .. B0 .. ..
    
    12
    
    R0 D
    
    R0 C .Q
    
    R0 R
    
    R0 T
    
    R0 D
    
    B0 R
    
    B0 U
    
    B0 C .Q
    
    B0 L
    
    B0 L
    
    B0 L
    
    B0 T

Output

    11 BLUE GOAL
    FINAL SCORE: 0 1
    
Input

    3 5
    
    .. .. R0 .. ..
    
    RG .. .Q .. BG
    
    .. .. B0 .. ..
    
    5
    
    R0 D
    
    R0 C .Q
    
    R0 L
    
    R0 L
    
    R0 T

Output

    4 BLUE GOAL
    FINAL SCORE: 0 1
    
Note

In the first example, a blue player goes to the middle of the grid, at the
position of the Quaffle. He takes it, goes to the goal of the red team, and
lets the ball there. He scores! The ball gets back to the middle of the field,
a red player takes it and scores too.

In the second example, the red player takes the Quaffle, move it and throw it.
The blue player catches the ball, goes to the red goal and scores.

In the third example, the red player takes the ball and scores in the goal of
their own team: the blue team wins a point.","""""""
https://codeforces.com/problemset/problem/1970/F1
F1. Playing Quidditch (Easy)
""""""
 
n, m = [int(x) for x in input().split()]
players = dict()
goals = {""B"": [], ""R"": []}
mouvements = {""L"": (-1, 0), ""R"": (1, 0), ""U"": (0, -1), ""D"": (0, 1)}
pointsb, pointsr = 0, 0
 
for y in range(n):
    s = input().split()
    for x in range(m):
        if s[x] == "".."" or s[x] == "".Q"":
            continue
        elif s[x] == ""RG"":
            goals[""R""].append((x, y))
        elif s[x] == ""BG"":
            goals[""B""].append((x, y))
        else:
            players[s[x]] = (x, y)
 
 
def add(a, b):
    x, y = a
    dx, dy = b
    return x + dx, y + dy
 
 
moves = int(input())
for i in range(moves):
    mo = input().split()
    if mo[1] in ""ULDR"":
        players[mo[0]] = add(players[mo[0]], mouvements[mo[1]])
    elif mo[1] == ""T"":
        if players[mo[0]] in goals[""R""]:
            pointsb += 1
            print(i, ""BLUE GOAL"")
        if players[mo[0]] in goals[""B""]:
            pointsr += 1
            print(i, ""RED GOAL"")
 
 
print(""FINAL SCORE:"", pointsr, pointsb)",1,True,False
1948_B,1948_B_bkifhr8_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an integer array a of length n .

You can perform the following operation any number of times (possibly zero):
take any element of the array a , which is at least 10 , delete it, and
instead insert the digits that element consisted of in the same position, in
order they appear in that element.

For example:

  * if we apply this operation to the 3 -rd element of the array [12, 3, 45, 67] , then the array becomes [12, 3, 4, 5, 67] . 
  * if we apply this operation to the 2 -nd element of the array [2, 10] , then the array becomes [2, 1, 0] . 

Your task is to determine whether it is possible to make a sorted in non-
descending order using the aforementioned operation any number of times
(possibly zero). In other words, you have to determine if it is possible to
transform the array a in such a way that a_1 \le a_2 \le \dots \le a_k , where
k is the current length of the array a .

Input

The first line contains a single integer t (1 \le t \le 10^3 ) — the number of
test cases.

Each test case consists of two lines:

  * the first line contains a single integer n (2 \le n \le 50 ). 
  * the second line contains n integers a_1, a_2, \dots, a_n (0 \le a_i \le 99 ). 

Output

For each test case, print YES if it is possible to make a sorted in non-
decreasing order using the aforementioned operation; otherwise, print NO.

You can print each letter in any case. For example, yes, Yes, YeS will all be
recognized as a positive answer.

Example

Input

    3
    
    4
    
    12 3 45 67
    
    3
    
    12 28 5
    
    2
    
    0 0

Output

    YES
    NO
    YES
    
Note

In the first example, you can split the first element, then the array becomes
[1, 2, 3, 45, 67] .

In the second example, there is no way to get a sorted array.

In the third example, the array is already sorted.","n = int(input())
 
for _ in range(n):
    m = int(input())
    arr = [int(i) for i in input().split()]
    ans = True
    for i in range(m-1, 0, -1):
        if arr[i] < arr[i-1]:
            nums = [int(i) for i in str(arr[i-1])] + [arr[i]]
            if nums != sorted(nums):
                ans = False;break;
            arr[i-1] = nums[0]
    print([""NO"",""YES""][ans])
#23MCA051",1,True,True
1951_A,1951_A_mdjaasir_33.33%,codeforces2024,human,qwen2p5-72b-instruct,"import os def generate_files_for_html_in_range(start, end): # 获取当前目录下的所有子文件夹
current_dir = os.getcwd() subfolders = [f.path for f in
os.scandir(current_dir) if f.is_dir()] for folder in subfolders: #
检查文件夹名称是否在指定范围内 folder_name = os.path.basename(folder) if
folder_name.isdigit() and start <= int(folder_name) <= end: #
获取子文件夹中的所有.html文件 html_files = [f for f in os.listdir(folder) if
f.endswith('.html')] print(f""Folder '{folder}' contains {len(html_files)} HTML
files."") # 为每个.html文件生成对应的文件 for html_file in html_files: base_name =
os.path.splitext(html_file)[0] ac_file = os.path.join(folder,
f""{base_name}-ac.py"") wa_file = os.path.join(folder, f""{base_name}-wa.py"") #
创建文件 open(ac_file, 'w').close() open(wa_file, 'w').close() print(f""Generated
files: {ac_file}, {wa_file}"") if __name__ == ""__main__"": # 指定目录范围 start_range
= 1951 end_range = 1980 generate_files_for_html_in_range(start_range,
end_range)","t=int(input())
 
for i in range(t):
    n=int(input())
    a=input()
    count=a.count('1')
 
    if count==0:
        print(""YES"")
 
    elif count>2 and count%2==0:
        print(""YES"")
 
    elif count==2:
        if a.index('1') and a[a.index('1')+1]!='1':
            print(""YES"")
        
        else:
            print(""NO"")
    else:
        print(""NO"")",1,False,False
1921_A,1921_A_Ermaamre_100%,codeforces2024,human,qwen2p5-72b-instruct,"A square of positive (strictly greater than 0 ) area is located on the
coordinate plane, with sides parallel to the coordinate axes. You are given
the coordinates of its corners, in random order. Your task is to find the area
of the square.

Input

Each test consists of several testcases. The first line contains one integer t
(1 \le t \le 100 ) — the number of testcases. The following is a description
of the testcases.

Each testcase contains four lines, each line contains two integers x_i, y_i
(-1000\le x_i, y_i\le 1000 ), coordinates of the corners of the square.

It is guaranteed that there is a square with sides parallel to the coordinate
axes, with positive (strictly greater than 0 ) area, with corners in given
points.

Output

For each test case, print a single integer, the area of the square.

Example

Input

    3
    
    1 2
    
    4 5
    
    1 5
    
    4 2
    
    -1 1
    
    1 -1
    
    1 1
    
    -1 -1
    
    45 11
    
    45 39
    
    17 11
    
    17 39

Output

    9
    4
    784","t = int(input())
for _ in range(t):
    a = [[int(x) for x in input().split()] for i in range(4)]
    x = [p[0] for p in a]
    dx = max(x) - min(x)
    print(dx * dx)",1,True,False
1955_D,1955_D_Greninja_007_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Maxim has an array a of n integers and an array b of m integers (m \le n ).

Maxim considers an array c of length m to be good if the elements of array c
can be rearranged in such a way that at least k of them match the elements of
array b .

For example, if b = [1, 2, 3, 4] and k = 3 , then the arrays [4, 1, 2, 3] and
[2, 3, 4, 5] are good (they can be reordered as follows: [1, 2, 3, 4] and [5,
2, 3, 4] ), while the arrays [3, 4, 5, 6] and [3, 4, 3, 4] are not good.

Maxim wants to choose every subsegment of array a of length m as the elements
of array c . Help Maxim count how many selected arrays will be good.

In other words, find the number of positions 1 \le l \le n - m + 1 such that
the elements a_l, a_{l+1}, \dots, a_{l + m - 1} form a good array.

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains three integers n , m , and k (1 \le
k \le m \le n \le 2 \cdot 10^5 ) — the number of elements in arrays a and b ,
the required number of matching elements.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^6 ) — the elements of array a . Elements of the array a are not
necessarily unique.

The third line of each test case contains m integers b_1, b_2, \dots, b_m (1
\le b_i \le 10^6 ) — the elements of array b . Elements of the array b are not
necessarily unique.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 . Similarly, it is guaranteed that the sum of m over all test cases does
not exceed 2 \cdot 10^5 .

Output

For each test case, output the number of good subsegments of array a on a
separate line.

Example

Input

    5
    
    7 4 2
    
    4 1 2 3 4 5 6
    
    1 2 3 4
    
    7 4 3
    
    4 1 2 3 4 5 6
    
    1 2 3 4
    
    7 4 4
    
    4 1 2 3 4 5 6
    
    1 2 3 4
    
    11 5 3
    
    9 9 2 2 10 9 7 6 3 6 3
    
    6 9 7 8 10
    
    4 1 1
    
    4 1 5 6
    
    6

Output

    4
    3
    2
    4
    1
    
Note

In the first example, all subsegments are good.

In the second example, good subsegments start at positions 1 , 2 , and 3 .

In the third example, good subsegments start at positions 1 and 2 .","from collections import Counter
 
def count_good_subarrays(a, b, k,n,m):
 
    good_subarrays = 0
    b_freq = Counter(b)
    window_freq = Counter(a[:m])
    matches = sum(min(window_freq[x], b_freq[x]) for x in window_freq if x in b_freq)
 
    for i in range(n - m):
        if matches >= k:
            good_subarrays += 1
        # Element exiting the window
        if a[i] in b_freq:
            matches -= min(window_freq[a[i]], b_freq[a[i]])
        window_freq[a[i]] -= 1
        if window_freq[a[i]] == 0:
            del window_freq[a[i]]
        # Element entering the window
        if a[i + m] in b_freq:
            matches += min(window_freq[a[i + m]] + 1, b_freq[a[i + m]])
        window_freq[a[i + m]] += 1
 
    # Check the last window
    if matches >= k:
        good_subarrays += 1
 
    return good_subarrays
 
for _ in range(int(input())):
    n,m,k = map(int,input().split("" ""))
    a = list(map(int,input().split("" "")))
    b = list(map(int,input().split("" "")))
    print(count_good_subarrays(a, b, k,n,m))",1,False,False
1944_A,1944_A_michi330_100%,codeforces2024,human,qwen2p5-72b-instruct,"There are n islands, numbered 1, 2, \ldots, n . Initially, every pair of
islands is connected by a bridge. Hence, there are a total of \frac{n (n -
1)}{2} bridges.

Everule lives on island 1 and enjoys visiting the other islands using bridges.
Dominater has the power to destroy at most k bridges to minimize the number of
islands that Everule can reach using (possibly multiple) bridges.

Find the minimum number of islands (including island 1 ) that Everule can
visit if Dominater destroys bridges optimally.

Input

Each test contains multiple test cases. The first line contains a single
integer t (1 \leq t \leq 10^3 ) — the number of test cases. The description of
the test cases follows.

The first and only line of each test case contains two integers n and k (1 \le
n \le 100 , 0 \le k \le \frac{n \cdot (n - 1)}{2} ).

Output

For each test case, output the minimum number of islands that Everule can
visit if Dominater destroys bridges optimally.

Example

Input

    6
    
    2 0
    
    2 1
    
    4 1
    
    5 10
    
    5 3
    
    4 4

Output

    2
    1
    4
    1
    5
    1
    
Note

In the first test case, since no bridges can be destroyed, all the islands
will be reachable.

In the second test case, you can destroy the bridge between islands 1 and 2 .
Everule will not be able to visit island 2 but can still visit island 1 .
Therefore, the total number of islands that Everule can visit is 1 .

In the third test case, Everule always has a way of reaching all islands
despite what Dominater does. For example, if Dominater destroyed the bridge
between islands 1 and 2 , Everule can still visit island 2 by traveling by 1
\to 3 \to 2 as the bridges between 1 and 3 , and between 3 and 2 are not
destroyed.

In the fourth test case, you can destroy all bridges since k = \frac{n \cdot
(n - 1)}{2} . Everule will be only able to visit 1 island (island 1 ).","t=int(input())
import math
for i in range(0,t,1):
    n,k=map(int,input().split())
    if k>=n-1:
        print(1)
    else:
        print(n)",1,True,False
1922_B,1922_B_ABHAY_DAGAR_IIITD_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You have n sticks, numbered from 1 to n . The length of the i -th stick is
2^{a_i} .

You want to choose exactly 3 sticks out of the given n sticks, and form a non-
degenerate triangle out of them, using the sticks as the sides of the
triangle. A triangle is called non-degenerate if its area is strictly greater
than 0 .

You have to calculate the number of ways to choose exactly 3 sticks so that a
triangle can be formed out of them. Note that the order of choosing sticks
does not matter (for example, choosing the 1 -st, 2 -nd and 4 -th stick is the
same as choosing the 2 -nd, 4 -th and 1 -st stick).

Input

The first line contains one integer t (1 \le t \le 10^4 ) — the number of test
cases.

Each test case consists of two lines:

  * the first line contains one integer n (1 \le n \le 3 \cdot 10^5 ); 
  * the second line contains n integers a_1, a_2, \dots, a_n (0 \le a_i \le n ). 

Additional constraint on the input: the sum of n over all test cases does not
exceed 3 \cdot 10^5 .

Output

For each test case, print one integer — the number of ways to choose exactly 3
sticks so that a triangle can be formed out of them.

Example

Input

    4
    
    7
    
    1 1 1 1 1 1 1
    
    4
    
    3 2 1 3
    
    3
    
    1 2 3
    
    1
    
    1

Output

    35
    2
    0
    0
    
Note

In the first test case of the example, any three sticks out of the given 7 can
be chosen.

In the second test case of the example, you can choose the 1 -st, 2 -nd and 4
-th stick, or the 1 -st, 3 -rd and 4 -th stick.

In the third test case of the example, you cannot form a triangle out of the
given sticks with lengths 2 , 4 and 8 .","def cnt_cmbnts(test_cases):
    results = []
    
    for _ in range(test_cases):
        n = int(input())
        num_list = list(map(int, input().split()))
        
        num_of_lens = {}
        for x in num_list:
            if x in num_of_lens:
                num_of_lens[x] += 1
            else:
                num_of_lens[x] = 1
 
        res = 0
        total_count = 0
        for cnt in num_of_lens.values():
            if cnt >= 3:
                res += cnt * (cnt - 1) * (cnt - 2) // 6
            if cnt >= 2:
                res += cnt * (cnt - 1) // 2 * total_count
            total_count += cnt
        
        results.append(res)
    
    for result in results:
        print(result)
 
 
t = int(input())
cnt_cmbnts(t)",1,False,False
1956_D,1956_D_2200033007_KLU_4.76%,codeforces2024,human,qwen2p5-72b-instruct,"Nene gave you an array of integers a_1, a_2, \ldots, a_n of length n .

You can perform the following operation no more than 5\cdot 10^5 times
(possibly zero):

  * Choose two integers l and r such that 1 \le l \le r \le n , compute x as \operatorname{MEX}(\\{a_l, a_{l+1}, \ldots, a_r\\}) , and simultaneously set a_l:=x, a_{l+1}:=x, \ldots, a_r:=x . 

Here, \operatorname{MEX} of a set of integers \\{c_1, c_2, \ldots, c_k\\} is
defined as the smallest non-negative integer m which does not occur in the set
c .

Your goal is to maximize the sum of the elements of the array a . Find the
maximum sum and construct a sequence of operations that achieves this sum.
Note that you don't need to minimize the number of operations in this
sequence, you only should use no more than 5\cdot 10^5 operations in your
solution.

Input

The first line contains an integer n (1 \le n \le 18 ) — the length of the
array a .

The second line contains n integers a_1,a_2,\ldots,a_n (0\leq a_i \leq 10^7 )
— the array a .

Output

In the first line, output two integers s and m (0\le m\le 5\cdot 10^5 ) — the
maximum sum of elements of the array a and the number of operations in your
solution.

In the i -th of the following m lines, output two integers l and r (1 \le l
\le r \le n ), representing the parameters of the i -th operation.

It can be shown that the maximum sum of elements of the array a can always be
obtained in no more than 5 \cdot 10^5 operations.

Examples

Input

    2
    
    0 1

Output

    4 1
    1 2
    
Input

    3
    
    1 3 9

Output

    13 0
    
Input

    4
    
    1 100 2 1

Output

    105 2
    3 3
    3 4
    
Input

    1
    
    0

Output

    1 1
    1 1
    
Note

In the first example, after the operation with l=1 and r=2 the array a becomes
equal to [2,2] . It can be shown that it is impossible to achieve a larger sum
of the elements of a , so the answer is 4 .

In the second example, the initial sum of elements is 13 which can be shown to
be the largest.

In the third example, the array a changes as follows:

  * after the first operation (l=3 , r=3 ), the array a becomes equal to [1,100,0,1] ; 
  * after the second operation (l=3 , r=4 ), the array a becomes equal to [1,100,2,2] . 

It can be shown that it is impossible to achieve a larger sum of the elements
of a , so the answer is 105 .","def zad(c):
  m=0
  if(c==2):
    print(f""4 1"")
    print(f""1 2"")
  else:
    print(f""13 0"")
  return 
 
a=[]
n=int(input()) 
sa=input()
na=sa.split()
for ai in na:
  a.append(ai)
 
zad(len(a))",1,False,False
1968_C,1968_C_Sinerat_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array x_2,x_3,\dots,x_n . Your task is to find any array
a_1,\dots,a_n , where:

  * 1\le a_i\le 10^9 for all 1\le i\le n . 
  * x_i=a_i \bmod a_{i-1} for all 2\le i\le n . 

Here c\bmod d denotes the remainder of the division of the integer c by the
integer d . For example 5 \bmod 2 = 1 , 72 \bmod 3 = 0 , 143 \bmod 14 = 3 .

Note that if there is more than one a which satisfies the statement, you are
allowed to find any.

Input

The first line contains a single integer t (1\le t\le 10^4) — the number of
test cases.

The first line of each test case contains a single integer n (2\le n\le 500) —
the number of elements in a .

The second line of each test case contains n-1 integers x_2,\dots,x_n (1\le
x_i\le 500) — the elements of x .

It is guaranteed that the sum of values n over all test cases does not exceed
2 \cdot 10^5 .

Output

For each test case output any a_1,\dots,a_n (1 \le a_i \le 10^9 ) which
satisfies the statement.

Example

Input

    5
    
    4
    
    2 4 1
    
    3
    
    1 1
    
    6
    
    4 2 5 1 2
    
    2
    
    500
    
    3
    
    1 5

Output

    3 5 4 9
    2 5 11
    5 14 16 5 11 24
    501 500
    2 7 5

Note

In the first test case a=[3,5,4,9] satisfies the conditions, because:

  * a_2\bmod a_1=5\bmod 3=2=x_2 ; 
  * a_3\bmod a_2=4\bmod 5=4=x_3 ; 
  * a_4\bmod a_3=9\bmod 4=1=x_4 ;","for _ in range(int(input())):
    n = int(input())
    x = list(map(int, input().split()))
    a = [0]*n
    a[0] = 500
    for i in range(1, n):
        a[i] = a[i-1] + x[i-1]
    print(*a)",1,False,False
1969_B,1969_B_yousufali_8_100%,codeforces2024,human,qwen2p5-72b-instruct,"Let's define a cyclic shift of some string s as a transformation from s_1 s_2
\dots s_{n-1} s_{n} into s_{n} s_1 s_2 \dots s_{n-1} . In other words, you
take one last character s_n and place it before the first character while
moving all other characters to the right.

You are given a binary string s (a string consisting of only 0-s and/or 1-s).

In one operation, you can choose any substring s_l s_{l+1} \dots s_r (1 \le l
< r \le |s| ) and cyclically shift it. The cost of such operation is equal to
r - l + 1 (or the length of the chosen substring).

You can perform the given operation any number of times. What is the minimum
total cost to make s sorted in non-descending order?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first and only line of each test case contains a binary string s (2 \le
|s| \le 2 \cdot 10^5 ; s_i \in {0, 1}) — the string you need to sort.

Additional constraint on the input: the sum of lengths of strings over all
test cases doesn't exceed 2 \cdot 10^5 .

Output

For each test case, print the single integer — the minimum total cost to make
string sorted using operation above any number of times.

Example

Input

    5
    
    10
    
    0000
    
    11000
    
    101011
    
    01101001

Output

    2
    0
    9
    5
    11
    
Note

In the first test case, you can choose the whole string and perform a cyclic
shift: 10 \rightarrow 01. The length of the substring is 2 , so the cost is 2
.

In the second test case, the string is already sorted, so you don't need to
perform any operations.

In the third test case, one of the optimal strategies is the next:

  1. choose substring [1, 3] : 11000 \rightarrow 01100; 
  2. choose substring [2, 4] : 01100 \rightarrow 00110; 
  3. choose substring [3, 5] : 00110 \rightarrow 00011. 

The total cost is 3 + 3 + 3 = 9 .","def solve():
    s = input()
    n = 0
    ans = 0
    
    for i in range(len(s)):
        if s[i] == '1':
            n+=1
        if s[i] == '0' and n!=0:
            ans += n+1
    
    print(ans)
 
def main():
    t = int(input())
    for _ in range(t):
        solve()
 
if __name__ == ""__main__"":
    main()",1,True,False
1945_B,1945_B_sunny_4_100%,codeforces2024,human,qwen2p5-72b-instruct,"One of the days of the hike coincided with a holiday, so in the evening at the
camp, it was decided to arrange a festive fireworks display. For this purpose,
the organizers of the hike bought two installations for launching fireworks
and a huge number of shells for launching.

Both installations are turned on simultaneously. The first installation
launches fireworks every a minutes (i.e., after a, 2 \cdot a, 3 \cdot a, \dots
minutes after launch). The second installation launches fireworks every b
minutes (i.e., after b, 2 \cdot b, 3 \cdot b, \dots minutes after launch).

Each firework is visible in the sky for m + 1 minutes after launch, i.e., if a
firework was launched after x minutes after the installations were turned on,
it will be visible every minute from x to x + m , inclusive. If one firework
was launched m minutes after another, both fireworks will be visible for one
minute.

What is the maximum number of fireworks that could be seen in the sky at the
same time?

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. Then follow the
descriptions of the test cases.

The first and only line of each test case contains integers a , b , m (1 \le
a, b, m \le 10^{18} ) — the frequency of launching for the first installation,
the second installation, and the time the firework is visible in the sky.

Output

For each set of input data, output a single number — the maximum number of
fireworks that can be seen simultaneously.

Example

Input

    6
    
    6 7 4
    
    3 4 10
    
    7 8 56
    
    5 6 78123459896
    
    1 1 1
    
    1 1 1000000000000000000

Output

    2
    7
    17
    28645268630
    4
    2000000000000000002
    
Note

In the first set of input data, the fireworks are visible in the sky for 5
minutes. Since the first installation launches fireworks every 6 minutes, and
the second one every 7 minutes, two fireworks launched from the same
installation will not be visible in the sky at the same time. At the same
time, after 7 minutes from the start of the holiday, one firework from the
first and one from the second camp will be visible. Thus, it is possible to
see no more than 2 fireworks simultaneously.

In the third set of input data, 17 fireworks will be visible after 112
minutes:

  * 9 fireworks launched from the first installation at times [56, 63, 70, 77, 84, 91, 98, 105, 112 ]; 
  * 8 fireworks launched from the second installation at times [56, 64, 72, 80, 88, 96, 104, 112 ].","'''t=int(input())
for _ in range(t):
    a,b,m=map(int,input().split())
    A=int(m/a)+1
    B=int(m/b)+1
    print(A+B)'''
t = int(input())
for qi in range(t):
    a, b, m = [int(x) for x in  input().split()]
    ans = m // a + m // b + 2
    print(ans)",1,True,False
1930_A,1930_A_Aadyant_05_100%,codeforces2024,human,qwen2p5-72b-instruct,"There are 2n positive integers written on a whiteboard. Being bored, you
decided to play a one-player game with the numbers on the whiteboard.

You start with a score of 0 . You will increase your score by performing the
following move exactly n times:

  * Choose two integers x and y that are written on the whiteboard. 
  * Add \min(x,y) to your score. 
  * Erase x and y from the whiteboard. 

Note that after performing the move n times, there will be no more integers
written on the whiteboard.

Find the maximum final score you can achieve if you optimally perform the n
moves.

Input

Each test contains multiple test cases. The first line contains a single
integer t (1 \leq t \leq 5000 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (1 \leq n \leq 50
) — the number of integers written on the whiteboard is 2n .

The second line of each test case contains 2n integers a_1,a_2,\ldots,a_{2n}
(1 \leq a_i \leq 10^7 ) — the numbers written on the whiteboard.

Output

For each test case, output the maximum final score that you can achieve.

Example

Input

    3
    
    1
    
    2 3
    
    2
    
    1 1 2 1
    
    3
    
    1 1 1 1 1 1

Output

    2
    2
    3
    
Note

In the first test case, you can only make one move. You select x=2 and y=3 ,
and your score will be \min(x,y)=2 .

In the second test case, the following is a sequence of moves that achieves a
final score of 2 :

  * In the first move, select x=1 and y=1 . Then, add \min(x,y)=1 to the score. After erasing x and y , the integers left on the whiteboard are 1 and 2 . 
  * In the second move, select x=1 and y=2 . Then, add \min(x,y)=1 to the score. After removing x and y , no more integers will be left on the whiteboard. 

It can be proved that it is not possible to get a score greater than 2 .

In the third test case, you will perform the move thrice, adding 1 to the
score each time.","n=input()
final=[]
for num in range(int(n)):
    s=0
    list2=[]
    a=input()
    list1=[]
    b=input()
    list1=b.split()
    for str in list1:
        list2.append(int(str))
 
    list2.sort()
    for i in range(0,len(list2),2):
        s=s+int(list2[i])
 
 
    final.append(s)
 
for fin in final:
    print(fin)",1,True,False
1922_E,1922_E_pranprocodes_100%,codeforces2024,human,qwen2p5-72b-instruct,"Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1","for i in range(int(input())):
    x=int(input())
    max=100000000
    min=-100000000
    ans=[]
    t=0
    while x!=1:
        if x%2==0:
            ans.append(max)
            max-=1
            x=x//2
        else:
            ans.append(min)
            min+=1
            x-=1
        t+=1
    ans.reverse()    
    print(t)
    print(*ans)",1,True,False
1968_C,1968_C_aminesager_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array x_2,x_3,\dots,x_n . Your task is to find any array
a_1,\dots,a_n , where:

  * 1\le a_i\le 10^9 for all 1\le i\le n . 
  * x_i=a_i \bmod a_{i-1} for all 2\le i\le n . 

Here c\bmod d denotes the remainder of the division of the integer c by the
integer d . For example 5 \bmod 2 = 1 , 72 \bmod 3 = 0 , 143 \bmod 14 = 3 .

Note that if there is more than one a which satisfies the statement, you are
allowed to find any.

Input

The first line contains a single integer t (1\le t\le 10^4) — the number of
test cases.

The first line of each test case contains a single integer n (2\le n\le 500) —
the number of elements in a .

The second line of each test case contains n-1 integers x_2,\dots,x_n (1\le
x_i\le 500) — the elements of x .

It is guaranteed that the sum of values n over all test cases does not exceed
2 \cdot 10^5 .

Output

For each test case output any a_1,\dots,a_n (1 \le a_i \le 10^9 ) which
satisfies the statement.

Example

Input

    5
    
    4
    
    2 4 1
    
    3
    
    1 1
    
    6
    
    4 2 5 1 2
    
    2
    
    500
    
    3
    
    1 5

Output

    3 5 4 9
    2 5 11
    5 14 16 5 11 24
    501 500
    2 7 5

Note

In the first test case a=[3,5,4,9] satisfies the conditions, because:

  * a_2\bmod a_1=5\bmod 3=2=x_2 ; 
  * a_3\bmod a_2=4\bmod 5=4=x_3 ; 
  * a_4\bmod a_3=9\bmod 4=1=x_4 ;","t= int(input())
while(t):
    t=t-1
 
    n = int(input())
    line = input("""")
    T = list(map(int, line.split()))
        
 
    a=[1000]
    for i in range(1,n):
        a.append(a[i-1]+T[i-1])
    
    result = ' '.join(map(str, a))
    print(result)",1,True,False
1968_A,1968_A_klu_30309_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an integer x . Your task is to find any integer y (1\le y<x)
such that \gcd(x,y)+y is maximum possible.

Note that if there is more than one y which satisfies the statement, you are
allowed to find any.

\gcd(a,b) is the Greatest Common Divisor of a and b . For example, \gcd(6,4)=2
.

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

Each of the following t lines contains a single integer x (2 \le x \le 1000 ).

Output

For each test case, output any y (1 \le y < x ), which satisfies the
statement.

Example

Input

    7
    
    10
    
    7
    
    21
    
    100
    
    2
    
    1000
    
    6

Output

    5
    6
    18
    98
    1
    750
    3","def maximize_gcd_plus_y(x):
  """"""Finds the y that maximizes gcd(x, y) + y.
 
  Args:
    x: The given integer.
 
  Returns:
    The optimal y.
  """"""
 
  max_val = 1
  for y in range(x - 1, 1, -1):
    if x % y == 0:
      if 2 * y >= x:
        return y
      max_val = y
  return max_val
 
if __name__ == ""__main__"":
  t = int(input())
 
  for _ in range(t):
    x = int(input())
    y = maximize_gcd_plus_y(x)
    print(y)",1,False,False
1932_B,1932_B_cuiwenqian370_100%,codeforces2024,human,qwen2p5-72b-instruct,"The Chaya tribe believes that there are n signs of the apocalypse. Over time,
it has been found out that the i -th sign occurs every a_i years (in years a_i
, 2 \cdot a_i , 3 \cdot a_i , \dots ).

According to the legends, for the apocalypse to happen, the signs must occur
sequentially. That is, first they wait for the first sign to occur, then
strictly after it, the second sign will occur, and so on. That is, if the i
-th sign occurred in the year x , the tribe starts waiting for the occurrence
of the (i+1) -th sign, starting from the year x+1 .

In which year will the n -th sign occur and the apocalypse will happen?

Input

The first line of the input contains a single integer t (1 \le t \le 1000 ) —
the number of test cases. Then follow the descriptions of the test cases.

The first line of each test case contains a single integer n (1 \le n \le 100
) — the number of signs.

The second line of each test case contains n integers a_1, a_2, a_3, \dots,
a_n (1 \le a_i \le 10^6 ) — the periodicities of the signs.

Output

For each test case, output a single integer — the year in which all n signs
will occur.

Example

Input

    4
    
    6
    
    3 2 4 5 9 18
    
    5
    
    1 2 3 4 5
    
    5
    
    1 1 1 1 1
    
    6
    
    50 30 711 200 503 1006

Output

    36
    5
    5
    2012
    
Note

In the first set of input data of the example:

  * The tribe will wait for the first sign in the 3 -rd year; 
  * the tribe will wait for the second sign in the 4 -th year (since year 2 have already passed); 
  * the tribe will wait for the third sign in the 8 -th year (since the second sign has already occurred in the 4 -th year); 
  * the tribe will wait for the fourth sign in the 10 -th year (since year 5 have already passed); 
  * the tribe will wait for the fifth sign in the 18 -th year (since year 9 have already passed); 
  * the tribe will wait for the sixth sign in the 36 -th year (since the fifth sign has already occurred in the 18 -th year).","def main():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    index = 0
    T = int(data[index])
    index += 1
    results = []
    
    for _ in range(T):
        n = int(data[index])
        index += 1
        a = list(map(int, data[index:index+n]))
        index += n
        
        # Start with the first sign
        last_year = a[0]
        
        # Process each subsequent sign
        for i in range(1, n):
            # Calculate the next possible year for the current sign
            # It must be greater than last_year
            next_year = ((last_year + 1 + a[i] - 1) // a[i]) * a[i]
            last_year = next_year
        
        # The year the last sign occurs is the answer for this test case
        results.append(str(last_year))
    
    # Output all results
    sys.stdout.write(""\n"".join(results) + ""\n"")
 
if __name__ == ""__main__"":
    main()",1,True,False
