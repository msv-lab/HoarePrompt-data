#State of the program right berfore the function call: None, as the function `func_1` does not take any parameters.
def func_1():
    return map(int, input().split())
    #The program returns an iterator that converts the input string, split by spaces, into a sequence of integers.
#Overall this is what the function does:The function `func_1` does not accept any parameters. It reads a line of input from the user, splits the input string by spaces, and returns an iterator that converts each split substring into an integer. The final state of the program after the function concludes is that it has an iterator over the sequence of integers derived from the input string.

#State of the program right berfore the function call: None of the variables in the function signature are used, as the function `func_2` does not take any parameters.
def func_2():
    return list(func_1())
    #The program returns a list generated by calling the function `func_1()`. Since `func_1()` is not defined in the initial state, the specific contents of the list cannot be determined.
#Overall this is what the function does:The function `func_2` does not accept any parameters and returns a list generated by calling the function `func_1()`. The specific contents of the list depend on the implementation of `func_1()`, which is not provided.

#State of the program right berfore the function call: n is a positive integer representing the length of the permutation, k is an integer such that 1 <= k <= n representing the number to be found, arr is a list of integers representing a permutation of size n, and pos is an integer that will store the index of k in arr if found.
def func_3():
    n, k = func_1()
    arr = func_2()
    pos = -1
    for i in range(n):
        if arr[i] == k:
            pos = i
        
    #State: Output State: `n` and `k` remain unchanged, `arr` remains unchanged, `pos` is the index of the first occurrence of `k` in `arr` if `k` is found, otherwise `pos` remains -1.
    low, high = 0, n
    st = set()
    while low + 1 < high:
        mid = (low + high) // 2
        
        st.add(mid)
        
        if arr[mid] > k:
            high = mid
        else:
            low = mid
        
    #State: `n` and `k` remain unchanged, `arr` remains unchanged, `pos` remains -1 if `k` is not found, otherwise it is the index of the first occurrence of `k` in `arr`, `low` is the highest index such that `arr[low] <= k`, `high` is the lowest index such that `arr[high] > k`, `st` contains all the indices that were checked during the loop.
    if (arr[low] == k) :
        print(0)
        #This is printed: 0
    else :
        print(1)
        #This is printed: 1
        print(low + 1, pos + 1)
        #This is printed: low + 1, pos + 1 (where `low` is the highest index such that `arr[low] <= k` and `pos` is the index of the first occurrence of `k` in `arr` if `k` is found, otherwise -1)
    #State: *`n` and `k` remain unchanged, `arr` remains unchanged, `pos` is the index of the first occurrence of `k` in `arr` if `arr[low] == k`, otherwise `pos` remains -1 if `k` is not found, `low` is the highest index such that `arr[low] <= k`, `high` is the lowest index such that `arr[high] > k`, and `st` contains all the indices that were checked during the loop.
#Overall this is what the function does:The function `func_3` does not accept any parameters and does not return any values. It retrieves `n` and `k` from `func_1`, and `arr` from `func_2`. It then searches for the integer `k` in the list `arr` (a permutation of integers of length `n`). If `k` is found in `arr`, `pos` is set to the index of the first occurrence of `k`. If `k` is not found, `pos` remains -1. The function also performs a binary search to find the highest index `low` such that `arr[low] <= k` and the lowest index `high` such that `arr[high] > k`. It prints 0 if `k` is found at `arr[low]`, and 1 followed by `low + 1` and `pos + 1` if `k` is not found at `arr[low]`. The final state of the program is that `n`, `k`, and `arr` remain unchanged, `pos` is the index of the first occurrence of `k` in `arr` if `k` is found, otherwise -1, `low` is the highest index such that `arr[low] <= k`, `high` is the lowest index such that `arr[high] > k`, and `st` contains all the indices that were checked during the binary search loop.

