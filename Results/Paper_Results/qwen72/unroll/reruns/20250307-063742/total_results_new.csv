Task ID,unique_id,Dataset,model_created,model_run,description,Code,run_number,original correctness,summary fsl,naive correctness fsl,vanilla,vanilla_no_cot,simple tree,complex tree,summary,simple verify fsl,complex verify fsl,summary verify fsl,simple verify,complex verify,summary verify,consistency,consistency_mine,consistency_old
1921_C,1921_C_Pardhiv_123_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Stepan is a very busy person. Today he needs to send n messages at moments
m_1, m_2, \dots m_n (m_i < m_{i + 1} ). Unfortunately, by the moment 0 , his
phone only has f units of charge left. At the moment 0 , the phone is turned
on.

The phone loses a units of charge for each unit of time it is on. Also, at any
moment, Stepan can turn off the phone and turn it on later. This action
consumes b units of energy each time. Consider turning on and off to be
instantaneous, so you can turn it on at moment x and send a message at the
same moment, and vice versa, send a message at moment x and turn off the phone
at the same moment.

If at any point the charge level drops to 0 (becomes \le 0 ), it is impossible
to send a message at that moment.

Since all messages are very important to Stepan, he wants to know if he can
send all the messages without the possibility of charging the phone.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. This is followed by the descriptions of the test
cases.

The first line of each test case contains four integers n , f , a , and b (1
\le n \le 2 \cdot 10^5 , 1 \le f, a, b \le 10^9 ) — the number of messages,
the initial phone's charge, the charge consumption per unit of time, and the
consumption when turned off and on sequentially.

The second line of each test case contains n integers m_1, m_2, \dots, m_n (1
\le m_i \le 10^9 , m_i < m_{i + 1} ) — the moments at which messages need to
be sent.

It is guaranteed that in a test the sum of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output ""YES"" if Stepan can send all the messages, and ""NO""
otherwise.

You can output each letter in any case (lowercase or uppercase). For example,
the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be accepted as a positive
answer.

Example

Input

    6
    
    1 3 1 5
    
    3
    
    7 21 1 3
    
    4 6 10 13 17 20 26
    
    5 10 1 2
    
    1 2 3 4 5
    
    1 1000000000 1000000000 1000000000
    
    1000000000
    
    3 11 9 6
    
    6 8 10
    
    12 621526648 2585904 3566299
    
    51789 61859 71998 73401 247675 298086 606959 663464 735972 806043 806459 919683

Output

    NO
    YES
    YES
    NO
    NO
    YES
    
Note

In the first test case of the example, at moment 0 , the phone's charge is 3 .
When sending a message at moment 3 without turning it off, (3 - 0) \cdot 1 = 3
units of charge will be spent. In this case, the charge will drop to 0 and
Stepan will not be able to send the message. When turning off and on, the
phone's charge will decrease by 5 , so it will not be possible to send the
message in this way.

In the third test case of the example, at moment 0 , the phone's charge is 10
. The phone loses 1 unit of charge per unit of time, and when turned off and
on, it loses 2 units of charge. To send all messages, the following actions
can be taken:

  * Turn off the phone at moment 0 and turn it on at moment 1 , after which 10 - 2 = 8 units of charge will remain; 
  * send a message at moment 1 ; 
  * send a message at moment 2 , after which 8 - (2 - 1) \cdot 1 = 7 units of charge will remain; 
  * Turn off the phone at moment 2 and turn it on at moment 3 , after which 7 - 2 = 5 units of charge will remain; 
  * send a message at moment 3 ; 
  * Turn off the phone at moment 3 and turn it on at moment 4 , after which 5 - 2 = 3 units of charge will remain; 
  * send a message at moment 4 ; 
  * Turn off the phone at moment 4 and turn it on at moment 5 , after which 3 - 2 = 1 unit of charge will remain; 
  * send a message at moment 5 . 

The last (sixth) test set of the example may fail if there is an integer
overflow in your solution.","t=int(input(""""))
while(t>0):
    n,f,a,b=map(int,input("""").split("" ""))
    ls=list(map(int,input("""").split("" "")))
    for i in range(1,len(ls)):
        f=f-min(a*(ls[i]-ls[i-1]),b)
    if(f>0):
        print(""YES"")
    else:
        print(""NO"")
    t-=1",1,False,False,False,True,True,True,True,True,False,False,False,True,False,True,1.0,1.0,1.0
1921_C,1921_C_Pardhiv_123_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Stepan is a very busy person. Today he needs to send n messages at moments
m_1, m_2, \dots m_n (m_i < m_{i + 1} ). Unfortunately, by the moment 0 , his
phone only has f units of charge left. At the moment 0 , the phone is turned
on.

The phone loses a units of charge for each unit of time it is on. Also, at any
moment, Stepan can turn off the phone and turn it on later. This action
consumes b units of energy each time. Consider turning on and off to be
instantaneous, so you can turn it on at moment x and send a message at the
same moment, and vice versa, send a message at moment x and turn off the phone
at the same moment.

If at any point the charge level drops to 0 (becomes \le 0 ), it is impossible
to send a message at that moment.

Since all messages are very important to Stepan, he wants to know if he can
send all the messages without the possibility of charging the phone.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. This is followed by the descriptions of the test
cases.

The first line of each test case contains four integers n , f , a , and b (1
\le n \le 2 \cdot 10^5 , 1 \le f, a, b \le 10^9 ) — the number of messages,
the initial phone's charge, the charge consumption per unit of time, and the
consumption when turned off and on sequentially.

The second line of each test case contains n integers m_1, m_2, \dots, m_n (1
\le m_i \le 10^9 , m_i < m_{i + 1} ) — the moments at which messages need to
be sent.

It is guaranteed that in a test the sum of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output ""YES"" if Stepan can send all the messages, and ""NO""
otherwise.

You can output each letter in any case (lowercase or uppercase). For example,
the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be accepted as a positive
answer.

Example

Input

    6
    
    1 3 1 5
    
    3
    
    7 21 1 3
    
    4 6 10 13 17 20 26
    
    5 10 1 2
    
    1 2 3 4 5
    
    1 1000000000 1000000000 1000000000
    
    1000000000
    
    3 11 9 6
    
    6 8 10
    
    12 621526648 2585904 3566299
    
    51789 61859 71998 73401 247675 298086 606959 663464 735972 806043 806459 919683

Output

    NO
    YES
    YES
    NO
    NO
    YES
    
Note

In the first test case of the example, at moment 0 , the phone's charge is 3 .
When sending a message at moment 3 without turning it off, (3 - 0) \cdot 1 = 3
units of charge will be spent. In this case, the charge will drop to 0 and
Stepan will not be able to send the message. When turning off and on, the
phone's charge will decrease by 5 , so it will not be possible to send the
message in this way.

In the third test case of the example, at moment 0 , the phone's charge is 10
. The phone loses 1 unit of charge per unit of time, and when turned off and
on, it loses 2 units of charge. To send all messages, the following actions
can be taken:

  * Turn off the phone at moment 0 and turn it on at moment 1 , after which 10 - 2 = 8 units of charge will remain; 
  * send a message at moment 1 ; 
  * send a message at moment 2 , after which 8 - (2 - 1) \cdot 1 = 7 units of charge will remain; 
  * Turn off the phone at moment 2 and turn it on at moment 3 , after which 7 - 2 = 5 units of charge will remain; 
  * send a message at moment 3 ; 
  * Turn off the phone at moment 3 and turn it on at moment 4 , after which 5 - 2 = 3 units of charge will remain; 
  * send a message at moment 4 ; 
  * Turn off the phone at moment 4 and turn it on at moment 5 , after which 3 - 2 = 1 unit of charge will remain; 
  * send a message at moment 5 . 

The last (sixth) test set of the example may fail if there is an integer
overflow in your solution.","t=int(input(""""))
while(t>0):
    n,f,a,b=map(int,input("""").split("" ""))
    ls=list(map(int,input("""").split("" "")))
    for i in range(1,len(ls)):
        f=f-min(a*(ls[i]-ls[i-1]),b)
    if(f>0):
        print(""YES"")
    else:
        print(""NO"")
    t-=1",1,False,False,False,True,True,True,False,False,False,False,False,True,True,False,1.0,1.0,1.0
1942_C2,1942_C2_Campass_100%,codeforces2024,human,qwen2p5-72b-instruct,"[Proof Geometric Construction Can Solve All Love Affairs -
manbo-p](https://soundcloud.com/alice-law-314125270/manbo-p-proof-geometric-
construction-can-solve-all-love-affairs)

⠀

This is the hard version of the problem. The only difference between the two
versions is the constraint on y . In this version 0 \leq y \leq n - x . You
can make hacks only if both versions are solved.

Bessie has received a birthday cake from her best friend Elsie, and it came in
the form of a regular polygon with n sides. The vertices of the cake are
numbered from 1 to n clockwise. You and Bessie are going to choose some of
those vertices to cut non-intersecting diagonals into the cake. In other
words, the endpoints of the diagonals must be part of the chosen vertices.

Bessie would only like to give out pieces of cake which result in a triangle
to keep consistency. The size of the pieces doesn't matter, and the whole cake
does not have to be separated into all triangles (other shapes are allowed in
the cake, but those will not be counted).

Bessie has already chosen x of those vertices that can be used to form
diagonals. She wants you to choose no more than y other vertices such that the
number of triangular pieces of cake she can give out is maximized.

What is the maximum number of triangular pieces of cake Bessie can give out?

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case consists of three integers, n , x , and y (4
\leq n \leq 10^9 , 2 \leq x \leq \min(n, 2 \cdot 10^5) , 0 \leq y \leq n - x )
— the number of sides of the polygon, number of vertices Bessie has chosen,
and the maximum number of other vertices you can choose.

The second line consists of x distinct integers from 1 to n , representing the
vertices Bessie has chosen.

It is guaranteed the sum of x over all test cases does not exceed 2 \cdot 10^5
.

Output

For each test case, output a single integer: the maximum number of non-
intersecting triangular pieces of cake she can give out.

Example

Input

    3
    
    8 4 2
    
    1 6 2 5
    
    7 3 1
    
    6 4 3
    
    4 2 2
    
    1 3

Output

    6
    5
    2
    
Note

In test cases 1 , 2 and 3 , you can get 6 , 5 and 2 non-intersecting
triangular pieces of cake, respectively. A possible construction is shown in
the following pictures:

The green dots represent vertices that Bessie chose, the yellow dots represent
vertices that you chose, the blue lines represent diagonals that are drawn,
and the red numbers represent triangles that are counted.

![](https://espresso.codeforces.com/13b28beb7f5f0d100798f357f58c804c5314c869.png)","R = lambda: map(int, input().split())
t,=R()
while t:
    t -= 1
    n,x,y= R()
    sx=0;
    l = list(R())
    l.sort()
    l.append(n+l[0])
    val=[]
    for i in range(1,x+1):
        c=l[i]-l[i-1]-1
        val.append(c)
    val.sort(key= lambda x:(1-x&1,x))
    for i in val:
        c=i//2
        if y<c :
            sx+=y*2 
            break
        sx+=i
        y-=c
    
    cons=x+sx-2
    # cons=min(n-2,cons)
    print(cons)  # 使用 print 函数打印列表元素，而不是调用 P 函数",1,True,False,False,True,False,True,False,False,False,False,False,True,True,True,1.0,0.9812152826368603,1.0
1942_C2,1942_C2_Campass_100%,codeforces2024,human,qwen2p5-72b-instruct,"[Proof Geometric Construction Can Solve All Love Affairs -
manbo-p](https://soundcloud.com/alice-law-314125270/manbo-p-proof-geometric-
construction-can-solve-all-love-affairs)

⠀

This is the hard version of the problem. The only difference between the two
versions is the constraint on y . In this version 0 \leq y \leq n - x . You
can make hacks only if both versions are solved.

Bessie has received a birthday cake from her best friend Elsie, and it came in
the form of a regular polygon with n sides. The vertices of the cake are
numbered from 1 to n clockwise. You and Bessie are going to choose some of
those vertices to cut non-intersecting diagonals into the cake. In other
words, the endpoints of the diagonals must be part of the chosen vertices.

Bessie would only like to give out pieces of cake which result in a triangle
to keep consistency. The size of the pieces doesn't matter, and the whole cake
does not have to be separated into all triangles (other shapes are allowed in
the cake, but those will not be counted).

Bessie has already chosen x of those vertices that can be used to form
diagonals. She wants you to choose no more than y other vertices such that the
number of triangular pieces of cake she can give out is maximized.

What is the maximum number of triangular pieces of cake Bessie can give out?

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case consists of three integers, n , x , and y (4
\leq n \leq 10^9 , 2 \leq x \leq \min(n, 2 \cdot 10^5) , 0 \leq y \leq n - x )
— the number of sides of the polygon, number of vertices Bessie has chosen,
and the maximum number of other vertices you can choose.

The second line consists of x distinct integers from 1 to n , representing the
vertices Bessie has chosen.

It is guaranteed the sum of x over all test cases does not exceed 2 \cdot 10^5
.

Output

For each test case, output a single integer: the maximum number of non-
intersecting triangular pieces of cake she can give out.

Example

Input

    3
    
    8 4 2
    
    1 6 2 5
    
    7 3 1
    
    6 4 3
    
    4 2 2
    
    1 3

Output

    6
    5
    2
    
Note

In test cases 1 , 2 and 3 , you can get 6 , 5 and 2 non-intersecting
triangular pieces of cake, respectively. A possible construction is shown in
the following pictures:

The green dots represent vertices that Bessie chose, the yellow dots represent
vertices that you chose, the blue lines represent diagonals that are drawn,
and the red numbers represent triangles that are counted.

![](https://espresso.codeforces.com/13b28beb7f5f0d100798f357f58c804c5314c869.png)","R = lambda: map(int, input().split())
t,=R()
while t:
    t -= 1
    n,x,y= R()
    sx=0;
    l = list(R())
    l.sort()
    l.append(n+l[0])
    val=[]
    for i in range(1,x+1):
        c=l[i]-l[i-1]-1
        val.append(c)
    val.sort(key= lambda x:(1-x&1,x))
    for i in val:
        c=i//2
        if y<c :
            sx+=y*2 
            break
        sx+=i
        y-=c
    
    cons=x+sx-2
    # cons=min(n-2,cons)
    print(cons)  # 使用 print 函数打印列表元素，而不是调用 P 函数",1,True,False,False,True,False,True,True,False,False,False,False,True,True,False,1.0,0.9812152826368603,1.0
1942_C2,1942_C2_Campass_100%,codeforces2024,human,qwen2p5-72b-instruct,"[Proof Geometric Construction Can Solve All Love Affairs -
manbo-p](https://soundcloud.com/alice-law-314125270/manbo-p-proof-geometric-
construction-can-solve-all-love-affairs)

⠀

This is the hard version of the problem. The only difference between the two
versions is the constraint on y . In this version 0 \leq y \leq n - x . You
can make hacks only if both versions are solved.

Bessie has received a birthday cake from her best friend Elsie, and it came in
the form of a regular polygon with n sides. The vertices of the cake are
numbered from 1 to n clockwise. You and Bessie are going to choose some of
those vertices to cut non-intersecting diagonals into the cake. In other
words, the endpoints of the diagonals must be part of the chosen vertices.

Bessie would only like to give out pieces of cake which result in a triangle
to keep consistency. The size of the pieces doesn't matter, and the whole cake
does not have to be separated into all triangles (other shapes are allowed in
the cake, but those will not be counted).

Bessie has already chosen x of those vertices that can be used to form
diagonals. She wants you to choose no more than y other vertices such that the
number of triangular pieces of cake she can give out is maximized.

What is the maximum number of triangular pieces of cake Bessie can give out?

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case consists of three integers, n , x , and y (4
\leq n \leq 10^9 , 2 \leq x \leq \min(n, 2 \cdot 10^5) , 0 \leq y \leq n - x )
— the number of sides of the polygon, number of vertices Bessie has chosen,
and the maximum number of other vertices you can choose.

The second line consists of x distinct integers from 1 to n , representing the
vertices Bessie has chosen.

It is guaranteed the sum of x over all test cases does not exceed 2 \cdot 10^5
.

Output

For each test case, output a single integer: the maximum number of non-
intersecting triangular pieces of cake she can give out.

Example

Input

    3
    
    8 4 2
    
    1 6 2 5
    
    7 3 1
    
    6 4 3
    
    4 2 2
    
    1 3

Output

    6
    5
    2
    
Note

In test cases 1 , 2 and 3 , you can get 6 , 5 and 2 non-intersecting
triangular pieces of cake, respectively. A possible construction is shown in
the following pictures:

The green dots represent vertices that Bessie chose, the yellow dots represent
vertices that you chose, the blue lines represent diagonals that are drawn,
and the red numbers represent triangles that are counted.

![](https://espresso.codeforces.com/13b28beb7f5f0d100798f357f58c804c5314c869.png)","R = lambda: map(int, input().split())
t,=R()
while t:
    t -= 1
    n,x,y= R()
    sx=0;
    l = list(R())
    l.sort()
    l.append(n+l[0])
    val=[]
    for i in range(1,x+1):
        c=l[i]-l[i-1]-1
        val.append(c)
    val.sort(key= lambda x:(1-x&1,x))
    for i in val:
        c=i//2
        if y<c :
            sx+=y*2 
            break
        sx+=i
        y-=c
    
    cons=x+sx-2
    # cons=min(n-2,cons)
    print(cons)  # 使用 print 函数打印列表元素，而不是调用 P 函数",1,True,False,False,True,False,True,True,True,True,False,False,True,True,False,1.0,0.9812152826368603,1.0
1972_D2,1972_D2_light616_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * b \cdot \gcd(a,b) is a multiple of a+b . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    0
    1
    1
    6
    423
    5933961
    
Note

In the first test case, no pair satisfies the conditions.

In the fourth test case, (2,2),(3,6),(4,4),(6,3),(6,6),(8,8) satisfy the
conditions.","import math
 
def fun():
    x = 1
    cnt = 0
    n, m = map(int, input().split())
    while x * x <= n:
        y = 1
        while (x + y) * x <= n and (x + y) * y <= m:
            if math.gcd(x, y) == 1:
                cnt += min(n / ((x + y) * x), m // ((x + y) * y))
            y += 1
        x += 1
    print(cnt)
 
def main():
    t = int(input())
    for _ in range(t):
        fun()
if __name__ == ""__main__"":
    main()",1,False,False,False,True,False,True,True,False,False,False,False,False,False,True,1.0,1.0,1.0
1972_D2,1972_D2_light616_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * b \cdot \gcd(a,b) is a multiple of a+b . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    0
    1
    1
    6
    423
    5933961
    
Note

In the first test case, no pair satisfies the conditions.

In the fourth test case, (2,2),(3,6),(4,4),(6,3),(6,6),(8,8) satisfy the
conditions.","import math
 
def fun():
    x = 1
    cnt = 0
    n, m = map(int, input().split())
    while x * x <= n:
        y = 1
        while (x + y) * x <= n and (x + y) * y <= m:
            if math.gcd(x, y) == 1:
                cnt += min(n / ((x + y) * x), m // ((x + y) * y))
            y += 1
        x += 1
    print(cnt)
 
def main():
    t = int(input())
    for _ in range(t):
        fun()
if __name__ == ""__main__"":
    main()",1,False,False,False,True,False,True,False,True,False,False,False,True,False,False,1.0,1.0,1.0
1972_D2,1972_D2_light616_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * b \cdot \gcd(a,b) is a multiple of a+b . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    0
    1
    1
    6
    423
    5933961
    
Note

In the first test case, no pair satisfies the conditions.

In the fourth test case, (2,2),(3,6),(4,4),(6,3),(6,6),(8,8) satisfy the
conditions.","import math
 
def fun():
    x = 1
    cnt = 0
    n, m = map(int, input().split())
    while x * x <= n:
        y = 1
        while (x + y) * x <= n and (x + y) * y <= m:
            if math.gcd(x, y) == 1:
                cnt += min(n / ((x + y) * x), m // ((x + y) * y))
            y += 1
        x += 1
    print(cnt)
 
def main():
    t = int(input())
    for _ in range(t):
        fun()
if __name__ == ""__main__"":
    main()",1,False,False,False,False,False,True,True,True,False,False,False,False,False,False,1.0,1.0,1.0
1966_C,1966_C_kapilshhh_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Alice and Bob are playing a game on n piles of stones. On each player's turn,
they select a positive integer k that is at most the size of the smallest
nonempty pile and remove k stones from each nonempty pile at once. The first
player who is unable to make a move (because all piles are empty) loses.

Given that Alice goes first, who will win the game if both players play
optimally?

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le
2\cdot 10^5 ) — the number of piles in the game.

The next line of each test case contains n integers a_1, a_2, \ldots a_n (1
\le a_i \le 10^9 ), where a_i is the initial number of stones in the i -th
pile.

It is guaranteed that the sum of n over all test cases does not exceed 2\cdot
10^5 .

Output

For each test case, print a single line with the name of the winner, assuming
both players play optimally. If Alice wins, print ""Alice"", otherwise print
""Bob"" (without quotes).

Example

Input

    7
    
    5
    
    3 3 3 3 3
    
    2
    
    1 7
    
    7
    
    1 3 9 7 4 2 100
    
    3
    
    1 2 3
    
    6
    
    2 1 3 4 2 4
    
    8
    
    5 7 2 9 6 3 3 2
    
    1
    
    1000000000

Output

    Alice
    Bob
    Alice
    Alice
    Bob
    Alice
    Alice
    
Note

In the first test case, Alice can win by choosing k=3 on her first turn, which
will empty all of the piles at once.

In the second test case, Alice must choose k=1 on her first turn since there
is a pile of size 1 , so Bob can win on the next turn by choosing k=6 .","tc = int(input())
 
while tc > 0:
    n = int(input())
    arr = sorted(list(set([int(x) for x in input().split(' ')])), reverse=True) + [0]
    dp = True
    n = len(arr) - 1
    for i in range(1, len(arr)):
        dp = (arr[i] - (arr[i+1] if i < n else 0) > 1) or (not dp)
    print('Alice' if dp else 'Alice')
    tc -= 1",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1966_C,1966_C_kapilshhh_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Alice and Bob are playing a game on n piles of stones. On each player's turn,
they select a positive integer k that is at most the size of the smallest
nonempty pile and remove k stones from each nonempty pile at once. The first
player who is unable to make a move (because all piles are empty) loses.

Given that Alice goes first, who will win the game if both players play
optimally?

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le
2\cdot 10^5 ) — the number of piles in the game.

The next line of each test case contains n integers a_1, a_2, \ldots a_n (1
\le a_i \le 10^9 ), where a_i is the initial number of stones in the i -th
pile.

It is guaranteed that the sum of n over all test cases does not exceed 2\cdot
10^5 .

Output

For each test case, print a single line with the name of the winner, assuming
both players play optimally. If Alice wins, print ""Alice"", otherwise print
""Bob"" (without quotes).

Example

Input

    7
    
    5
    
    3 3 3 3 3
    
    2
    
    1 7
    
    7
    
    1 3 9 7 4 2 100
    
    3
    
    1 2 3
    
    6
    
    2 1 3 4 2 4
    
    8
    
    5 7 2 9 6 3 3 2
    
    1
    
    1000000000

Output

    Alice
    Bob
    Alice
    Alice
    Bob
    Alice
    Alice
    
Note

In the first test case, Alice can win by choosing k=3 on her first turn, which
will empty all of the piles at once.

In the second test case, Alice must choose k=1 on her first turn since there
is a pile of size 1 , so Bob can win on the next turn by choosing k=6 .","tc = int(input())
 
while tc > 0:
    n = int(input())
    arr = sorted(list(set([int(x) for x in input().split(' ')])), reverse=True) + [0]
    dp = True
    n = len(arr) - 1
    for i in range(1, len(arr)):
        dp = (arr[i] - (arr[i+1] if i < n else 0) > 1) or (not dp)
    print('Alice' if dp else 'Alice')
    tc -= 1",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1966_C,1966_C_kapilshhh_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Alice and Bob are playing a game on n piles of stones. On each player's turn,
they select a positive integer k that is at most the size of the smallest
nonempty pile and remove k stones from each nonempty pile at once. The first
player who is unable to make a move (because all piles are empty) loses.

Given that Alice goes first, who will win the game if both players play
optimally?

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le
2\cdot 10^5 ) — the number of piles in the game.

The next line of each test case contains n integers a_1, a_2, \ldots a_n (1
\le a_i \le 10^9 ), where a_i is the initial number of stones in the i -th
pile.

It is guaranteed that the sum of n over all test cases does not exceed 2\cdot
10^5 .

Output

For each test case, print a single line with the name of the winner, assuming
both players play optimally. If Alice wins, print ""Alice"", otherwise print
""Bob"" (without quotes).

Example

Input

    7
    
    5
    
    3 3 3 3 3
    
    2
    
    1 7
    
    7
    
    1 3 9 7 4 2 100
    
    3
    
    1 2 3
    
    6
    
    2 1 3 4 2 4
    
    8
    
    5 7 2 9 6 3 3 2
    
    1
    
    1000000000

Output

    Alice
    Bob
    Alice
    Alice
    Bob
    Alice
    Alice
    
Note

In the first test case, Alice can win by choosing k=3 on her first turn, which
will empty all of the piles at once.

In the second test case, Alice must choose k=1 on her first turn since there
is a pile of size 1 , so Bob can win on the next turn by choosing k=6 .","tc = int(input())
 
while tc > 0:
    n = int(input())
    arr = sorted(list(set([int(x) for x in input().split(' ')])), reverse=True) + [0]
    dp = True
    n = len(arr) - 1
    for i in range(1, len(arr)):
        dp = (arr[i] - (arr[i+1] if i < n else 0) > 1) or (not dp)
    print('Alice' if dp else 'Alice')
    tc -= 1",1,False,False,False,False,False,False,False,False,False,False,False,True,False,False,1.0,1.0,1.0
1966_C,1966_C_kapilshhh_100%,codeforces2024,human,qwen2p5-72b-instruct,"Alice and Bob are playing a game on n piles of stones. On each player's turn,
they select a positive integer k that is at most the size of the smallest
nonempty pile and remove k stones from each nonempty pile at once. The first
player who is unable to make a move (because all piles are empty) loses.

Given that Alice goes first, who will win the game if both players play
optimally?

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le
2\cdot 10^5 ) — the number of piles in the game.

The next line of each test case contains n integers a_1, a_2, \ldots a_n (1
\le a_i \le 10^9 ), where a_i is the initial number of stones in the i -th
pile.

It is guaranteed that the sum of n over all test cases does not exceed 2\cdot
10^5 .

Output

For each test case, print a single line with the name of the winner, assuming
both players play optimally. If Alice wins, print ""Alice"", otherwise print
""Bob"" (without quotes).

Example

Input

    7
    
    5
    
    3 3 3 3 3
    
    2
    
    1 7
    
    7
    
    1 3 9 7 4 2 100
    
    3
    
    1 2 3
    
    6
    
    2 1 3 4 2 4
    
    8
    
    5 7 2 9 6 3 3 2
    
    1
    
    1000000000

Output

    Alice
    Bob
    Alice
    Alice
    Bob
    Alice
    Alice
    
Note

In the first test case, Alice can win by choosing k=3 on her first turn, which
will empty all of the piles at once.

In the second test case, Alice must choose k=1 on her first turn since there
is a pile of size 1 , so Bob can win on the next turn by choosing k=6 .","tc = int(input())
 
while tc > 0:
    n = int(input())
    arr = sorted(list(set([int(x) for x in input().split(' ')])), reverse=True) + [0]
    dp = True
    n = len(arr) - 1
    for i in range(1, n):
        dp = (arr[i] - arr[i+1] > 1) or not dp
    print('Alice' if dp else 'Bob')
    tc -= 1",1,True,False,False,True,True,True,True,True,False,False,False,True,True,True,0.7324511351716554,0.2553859836054619,0.75
1966_C,1966_C_kapilshhh_100%,codeforces2024,human,qwen2p5-72b-instruct,"Alice and Bob are playing a game on n piles of stones. On each player's turn,
they select a positive integer k that is at most the size of the smallest
nonempty pile and remove k stones from each nonempty pile at once. The first
player who is unable to make a move (because all piles are empty) loses.

Given that Alice goes first, who will win the game if both players play
optimally?

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le
2\cdot 10^5 ) — the number of piles in the game.

The next line of each test case contains n integers a_1, a_2, \ldots a_n (1
\le a_i \le 10^9 ), where a_i is the initial number of stones in the i -th
pile.

It is guaranteed that the sum of n over all test cases does not exceed 2\cdot
10^5 .

Output

For each test case, print a single line with the name of the winner, assuming
both players play optimally. If Alice wins, print ""Alice"", otherwise print
""Bob"" (without quotes).

Example

Input

    7
    
    5
    
    3 3 3 3 3
    
    2
    
    1 7
    
    7
    
    1 3 9 7 4 2 100
    
    3
    
    1 2 3
    
    6
    
    2 1 3 4 2 4
    
    8
    
    5 7 2 9 6 3 3 2
    
    1
    
    1000000000

Output

    Alice
    Bob
    Alice
    Alice
    Bob
    Alice
    Alice
    
Note

In the first test case, Alice can win by choosing k=3 on her first turn, which
will empty all of the piles at once.

In the second test case, Alice must choose k=1 on her first turn since there
is a pile of size 1 , so Bob can win on the next turn by choosing k=6 .","tc = int(input())
 
while tc > 0:
    n = int(input())
    arr = sorted(list(set([int(x) for x in input().split(' ')])), reverse=True) + [0]
    dp = True
    n = len(arr) - 1
    for i in range(1, n):
        dp = (arr[i] - arr[i+1] > 1) or not dp
    print('Alice' if dp else 'Bob')
    tc -= 1",1,True,False,False,True,True,True,True,True,True,True,True,True,False,True,0.7324511351716554,0.2553859836054619,0.75
1966_C,1966_C_kapilshhh_100%,codeforces2024,human,qwen2p5-72b-instruct,"Alice and Bob are playing a game on n piles of stones. On each player's turn,
they select a positive integer k that is at most the size of the smallest
nonempty pile and remove k stones from each nonempty pile at once. The first
player who is unable to make a move (because all piles are empty) loses.

Given that Alice goes first, who will win the game if both players play
optimally?

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le
2\cdot 10^5 ) — the number of piles in the game.

The next line of each test case contains n integers a_1, a_2, \ldots a_n (1
\le a_i \le 10^9 ), where a_i is the initial number of stones in the i -th
pile.

It is guaranteed that the sum of n over all test cases does not exceed 2\cdot
10^5 .

Output

For each test case, print a single line with the name of the winner, assuming
both players play optimally. If Alice wins, print ""Alice"", otherwise print
""Bob"" (without quotes).

Example

Input

    7
    
    5
    
    3 3 3 3 3
    
    2
    
    1 7
    
    7
    
    1 3 9 7 4 2 100
    
    3
    
    1 2 3
    
    6
    
    2 1 3 4 2 4
    
    8
    
    5 7 2 9 6 3 3 2
    
    1
    
    1000000000

Output

    Alice
    Bob
    Alice
    Alice
    Bob
    Alice
    Alice
    
Note

In the first test case, Alice can win by choosing k=3 on her first turn, which
will empty all of the piles at once.

In the second test case, Alice must choose k=1 on her first turn since there
is a pile of size 1 , so Bob can win on the next turn by choosing k=6 .","tc = int(input())
 
while tc > 0:
    n = int(input())
    arr = sorted(list(set([int(x) for x in input().split(' ')])), reverse=True) + [0]
    dp = True
    n = len(arr) - 1
    for i in range(1, n):
        dp = (arr[i] - arr[i+1] > 1) or not dp
    print('Alice' if dp else 'Bob')
    tc -= 1",1,True,False,False,True,True,True,True,True,True,True,True,True,True,True,0.7324511351716554,0.2553859836054619,0.75
1921_C,1921_C_Pardhiv_123_100%,codeforces2024,human,qwen2p5-72b-instruct,"Stepan is a very busy person. Today he needs to send n messages at moments
m_1, m_2, \dots m_n (m_i < m_{i + 1} ). Unfortunately, by the moment 0 , his
phone only has f units of charge left. At the moment 0 , the phone is turned
on.

The phone loses a units of charge for each unit of time it is on. Also, at any
moment, Stepan can turn off the phone and turn it on later. This action
consumes b units of energy each time. Consider turning on and off to be
instantaneous, so you can turn it on at moment x and send a message at the
same moment, and vice versa, send a message at moment x and turn off the phone
at the same moment.

If at any point the charge level drops to 0 (becomes \le 0 ), it is impossible
to send a message at that moment.

Since all messages are very important to Stepan, he wants to know if he can
send all the messages without the possibility of charging the phone.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. This is followed by the descriptions of the test
cases.

The first line of each test case contains four integers n , f , a , and b (1
\le n \le 2 \cdot 10^5 , 1 \le f, a, b \le 10^9 ) — the number of messages,
the initial phone's charge, the charge consumption per unit of time, and the
consumption when turned off and on sequentially.

The second line of each test case contains n integers m_1, m_2, \dots, m_n (1
\le m_i \le 10^9 , m_i < m_{i + 1} ) — the moments at which messages need to
be sent.

It is guaranteed that in a test the sum of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output ""YES"" if Stepan can send all the messages, and ""NO""
otherwise.

You can output each letter in any case (lowercase or uppercase). For example,
the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be accepted as a positive
answer.

Example

Input

    6
    
    1 3 1 5
    
    3
    
    7 21 1 3
    
    4 6 10 13 17 20 26
    
    5 10 1 2
    
    1 2 3 4 5
    
    1 1000000000 1000000000 1000000000
    
    1000000000
    
    3 11 9 6
    
    6 8 10
    
    12 621526648 2585904 3566299
    
    51789 61859 71998 73401 247675 298086 606959 663464 735972 806043 806459 919683

Output

    NO
    YES
    YES
    NO
    NO
    YES
    
Note

In the first test case of the example, at moment 0 , the phone's charge is 3 .
When sending a message at moment 3 without turning it off, (3 - 0) \cdot 1 = 3
units of charge will be spent. In this case, the charge will drop to 0 and
Stepan will not be able to send the message. When turning off and on, the
phone's charge will decrease by 5 , so it will not be possible to send the
message in this way.

In the third test case of the example, at moment 0 , the phone's charge is 10
. The phone loses 1 unit of charge per unit of time, and when turned off and
on, it loses 2 units of charge. To send all messages, the following actions
can be taken:

  * Turn off the phone at moment 0 and turn it on at moment 1 , after which 10 - 2 = 8 units of charge will remain; 
  * send a message at moment 1 ; 
  * send a message at moment 2 , after which 8 - (2 - 1) \cdot 1 = 7 units of charge will remain; 
  * Turn off the phone at moment 2 and turn it on at moment 3 , after which 7 - 2 = 5 units of charge will remain; 
  * send a message at moment 3 ; 
  * Turn off the phone at moment 3 and turn it on at moment 4 , after which 5 - 2 = 3 units of charge will remain; 
  * send a message at moment 4 ; 
  * Turn off the phone at moment 4 and turn it on at moment 5 , after which 3 - 2 = 1 unit of charge will remain; 
  * send a message at moment 5 . 

The last (sixth) test set of the example may fail if there is an integer
overflow in your solution.","t=int(input(""""))
while(t>0):
    n,f,a,b=map(int,input("""").split("" ""))
    ls=[0]+list(map(int,input("""").split("" "")))
    for i in range(1,n+1):
        f=f-min(a*(ls[i]-ls[i-1]),b)
    if(f>0):
        print(""YES"")
    else:
        print(""NO"")
    t-=1",1,True,False,False,True,True,True,True,True,False,False,False,True,True,True,0.7967034931565101,0.33788583169121406,0.6666666666666666
1921_C,1921_C_Pardhiv_123_100%,codeforces2024,human,qwen2p5-72b-instruct,"Stepan is a very busy person. Today he needs to send n messages at moments
m_1, m_2, \dots m_n (m_i < m_{i + 1} ). Unfortunately, by the moment 0 , his
phone only has f units of charge left. At the moment 0 , the phone is turned
on.

The phone loses a units of charge for each unit of time it is on. Also, at any
moment, Stepan can turn off the phone and turn it on later. This action
consumes b units of energy each time. Consider turning on and off to be
instantaneous, so you can turn it on at moment x and send a message at the
same moment, and vice versa, send a message at moment x and turn off the phone
at the same moment.

If at any point the charge level drops to 0 (becomes \le 0 ), it is impossible
to send a message at that moment.

Since all messages are very important to Stepan, he wants to know if he can
send all the messages without the possibility of charging the phone.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. This is followed by the descriptions of the test
cases.

The first line of each test case contains four integers n , f , a , and b (1
\le n \le 2 \cdot 10^5 , 1 \le f, a, b \le 10^9 ) — the number of messages,
the initial phone's charge, the charge consumption per unit of time, and the
consumption when turned off and on sequentially.

The second line of each test case contains n integers m_1, m_2, \dots, m_n (1
\le m_i \le 10^9 , m_i < m_{i + 1} ) — the moments at which messages need to
be sent.

It is guaranteed that in a test the sum of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output ""YES"" if Stepan can send all the messages, and ""NO""
otherwise.

You can output each letter in any case (lowercase or uppercase). For example,
the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be accepted as a positive
answer.

Example

Input

    6
    
    1 3 1 5
    
    3
    
    7 21 1 3
    
    4 6 10 13 17 20 26
    
    5 10 1 2
    
    1 2 3 4 5
    
    1 1000000000 1000000000 1000000000
    
    1000000000
    
    3 11 9 6
    
    6 8 10
    
    12 621526648 2585904 3566299
    
    51789 61859 71998 73401 247675 298086 606959 663464 735972 806043 806459 919683

Output

    NO
    YES
    YES
    NO
    NO
    YES
    
Note

In the first test case of the example, at moment 0 , the phone's charge is 3 .
When sending a message at moment 3 without turning it off, (3 - 0) \cdot 1 = 3
units of charge will be spent. In this case, the charge will drop to 0 and
Stepan will not be able to send the message. When turning off and on, the
phone's charge will decrease by 5 , so it will not be possible to send the
message in this way.

In the third test case of the example, at moment 0 , the phone's charge is 10
. The phone loses 1 unit of charge per unit of time, and when turned off and
on, it loses 2 units of charge. To send all messages, the following actions
can be taken:

  * Turn off the phone at moment 0 and turn it on at moment 1 , after which 10 - 2 = 8 units of charge will remain; 
  * send a message at moment 1 ; 
  * send a message at moment 2 , after which 8 - (2 - 1) \cdot 1 = 7 units of charge will remain; 
  * Turn off the phone at moment 2 and turn it on at moment 3 , after which 7 - 2 = 5 units of charge will remain; 
  * send a message at moment 3 ; 
  * Turn off the phone at moment 3 and turn it on at moment 4 , after which 5 - 2 = 3 units of charge will remain; 
  * send a message at moment 4 ; 
  * Turn off the phone at moment 4 and turn it on at moment 5 , after which 3 - 2 = 1 unit of charge will remain; 
  * send a message at moment 5 . 

The last (sixth) test set of the example may fail if there is an integer
overflow in your solution.","t=int(input(""""))
while(t>0):
    n,f,a,b=map(int,input("""").split("" ""))
    ls=[0]+list(map(int,input("""").split("" "")))
    for i in range(1,n+1):
        f=f-min(a*(ls[i]-ls[i-1]),b)
    if(f>0):
        print(""YES"")
    else:
        print(""NO"")
    t-=1",1,True,False,False,True,True,True,True,True,True,True,False,True,True,True,0.7967034931565101,0.33788583169121406,0.6666666666666666
1921_C,1921_C_Pardhiv_123_100%,codeforces2024,human,qwen2p5-72b-instruct,"Stepan is a very busy person. Today he needs to send n messages at moments
m_1, m_2, \dots m_n (m_i < m_{i + 1} ). Unfortunately, by the moment 0 , his
phone only has f units of charge left. At the moment 0 , the phone is turned
on.

The phone loses a units of charge for each unit of time it is on. Also, at any
moment, Stepan can turn off the phone and turn it on later. This action
consumes b units of energy each time. Consider turning on and off to be
instantaneous, so you can turn it on at moment x and send a message at the
same moment, and vice versa, send a message at moment x and turn off the phone
at the same moment.

If at any point the charge level drops to 0 (becomes \le 0 ), it is impossible
to send a message at that moment.

Since all messages are very important to Stepan, he wants to know if he can
send all the messages without the possibility of charging the phone.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. This is followed by the descriptions of the test
cases.

The first line of each test case contains four integers n , f , a , and b (1
\le n \le 2 \cdot 10^5 , 1 \le f, a, b \le 10^9 ) — the number of messages,
the initial phone's charge, the charge consumption per unit of time, and the
consumption when turned off and on sequentially.

The second line of each test case contains n integers m_1, m_2, \dots, m_n (1
\le m_i \le 10^9 , m_i < m_{i + 1} ) — the moments at which messages need to
be sent.

It is guaranteed that in a test the sum of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output ""YES"" if Stepan can send all the messages, and ""NO""
otherwise.

You can output each letter in any case (lowercase or uppercase). For example,
the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be accepted as a positive
answer.

Example

Input

    6
    
    1 3 1 5
    
    3
    
    7 21 1 3
    
    4 6 10 13 17 20 26
    
    5 10 1 2
    
    1 2 3 4 5
    
    1 1000000000 1000000000 1000000000
    
    1000000000
    
    3 11 9 6
    
    6 8 10
    
    12 621526648 2585904 3566299
    
    51789 61859 71998 73401 247675 298086 606959 663464 735972 806043 806459 919683

Output

    NO
    YES
    YES
    NO
    NO
    YES
    
Note

In the first test case of the example, at moment 0 , the phone's charge is 3 .
When sending a message at moment 3 without turning it off, (3 - 0) \cdot 1 = 3
units of charge will be spent. In this case, the charge will drop to 0 and
Stepan will not be able to send the message. When turning off and on, the
phone's charge will decrease by 5 , so it will not be possible to send the
message in this way.

In the third test case of the example, at moment 0 , the phone's charge is 10
. The phone loses 1 unit of charge per unit of time, and when turned off and
on, it loses 2 units of charge. To send all messages, the following actions
can be taken:

  * Turn off the phone at moment 0 and turn it on at moment 1 , after which 10 - 2 = 8 units of charge will remain; 
  * send a message at moment 1 ; 
  * send a message at moment 2 , after which 8 - (2 - 1) \cdot 1 = 7 units of charge will remain; 
  * Turn off the phone at moment 2 and turn it on at moment 3 , after which 7 - 2 = 5 units of charge will remain; 
  * send a message at moment 3 ; 
  * Turn off the phone at moment 3 and turn it on at moment 4 , after which 5 - 2 = 3 units of charge will remain; 
  * send a message at moment 4 ; 
  * Turn off the phone at moment 4 and turn it on at moment 5 , after which 3 - 2 = 1 unit of charge will remain; 
  * send a message at moment 5 . 

The last (sixth) test set of the example may fail if there is an integer
overflow in your solution.","t=int(input(""""))
while(t>0):
    n,f,a,b=map(int,input("""").split("" ""))
    ls=[0]+list(map(int,input("""").split("" "")))
    for i in range(1,n+1):
        f=f-min(a*(ls[i]-ls[i-1]),b)
    if(f>0):
        print(""YES"")
    else:
        print(""NO"")
    t-=1",1,True,False,False,True,True,True,True,True,False,False,False,True,True,True,0.7967034931565101,0.33788583169121406,0.6666666666666666
1942_C2,1942_C2_Campass_6.67%,codeforces2024,human,qwen2p5-72b-instruct,"[Proof Geometric Construction Can Solve All Love Affairs -
manbo-p](https://soundcloud.com/alice-law-314125270/manbo-p-proof-geometric-
construction-can-solve-all-love-affairs)

⠀

This is the hard version of the problem. The only difference between the two
versions is the constraint on y . In this version 0 \leq y \leq n - x . You
can make hacks only if both versions are solved.

Bessie has received a birthday cake from her best friend Elsie, and it came in
the form of a regular polygon with n sides. The vertices of the cake are
numbered from 1 to n clockwise. You and Bessie are going to choose some of
those vertices to cut non-intersecting diagonals into the cake. In other
words, the endpoints of the diagonals must be part of the chosen vertices.

Bessie would only like to give out pieces of cake which result in a triangle
to keep consistency. The size of the pieces doesn't matter, and the whole cake
does not have to be separated into all triangles (other shapes are allowed in
the cake, but those will not be counted).

Bessie has already chosen x of those vertices that can be used to form
diagonals. She wants you to choose no more than y other vertices such that the
number of triangular pieces of cake she can give out is maximized.

What is the maximum number of triangular pieces of cake Bessie can give out?

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case consists of three integers, n , x , and y (4
\leq n \leq 10^9 , 2 \leq x \leq \min(n, 2 \cdot 10^5) , 0 \leq y \leq n - x )
— the number of sides of the polygon, number of vertices Bessie has chosen,
and the maximum number of other vertices you can choose.

The second line consists of x distinct integers from 1 to n , representing the
vertices Bessie has chosen.

It is guaranteed the sum of x over all test cases does not exceed 2 \cdot 10^5
.

Output

For each test case, output a single integer: the maximum number of non-
intersecting triangular pieces of cake she can give out.

Example

Input

    3
    
    8 4 2
    
    1 6 2 5
    
    7 3 1
    
    6 4 3
    
    4 2 2
    
    1 3

Output

    6
    5
    2
    
Note

In test cases 1 , 2 and 3 , you can get 6 , 5 and 2 non-intersecting
triangular pieces of cake, respectively. A possible construction is shown in
the following pictures:

The green dots represent vertices that Bessie chose, the yellow dots represent
vertices that you chose, the blue lines represent diagonals that are drawn,
and the red numbers represent triangles that are counted.

![](https://espresso.codeforces.com/13b28beb7f5f0d100798f357f58c804c5314c869.png)","R = lambda: map(int, input().split())
t,=R()
while t:
    t -= 1
    n,x,y= R()
    sx=0;
    l = list(R())
    l.sort()
    l.append(n+l[0])
    val=[]
    for i in range(1,x+1):
        c=l[i]-l[i-1]-1
        if c==1: sx+=1
        val.append(c)
    val.sort(key= lambda x:(1-x&1,x))
    for i in val:
        c=i//2
        if y<c :
            sx+=y*2 
            break
        sx+=i
        y-=c
    
    cons=x+sx-2
    cons=min(n-2,cons)
    print(cons)  # 使用 print 函数打印列表元素，而不是调用 P 函数",1,False,False,False,True,False,True,True,True,True,False,False,True,True,True,0.5260587368554075,0.024145370660688354,0.6666666666666666
1942_C2,1942_C2_Campass_6.67%,codeforces2024,human,qwen2p5-72b-instruct,"[Proof Geometric Construction Can Solve All Love Affairs -
manbo-p](https://soundcloud.com/alice-law-314125270/manbo-p-proof-geometric-
construction-can-solve-all-love-affairs)

⠀

This is the hard version of the problem. The only difference between the two
versions is the constraint on y . In this version 0 \leq y \leq n - x . You
can make hacks only if both versions are solved.

Bessie has received a birthday cake from her best friend Elsie, and it came in
the form of a regular polygon with n sides. The vertices of the cake are
numbered from 1 to n clockwise. You and Bessie are going to choose some of
those vertices to cut non-intersecting diagonals into the cake. In other
words, the endpoints of the diagonals must be part of the chosen vertices.

Bessie would only like to give out pieces of cake which result in a triangle
to keep consistency. The size of the pieces doesn't matter, and the whole cake
does not have to be separated into all triangles (other shapes are allowed in
the cake, but those will not be counted).

Bessie has already chosen x of those vertices that can be used to form
diagonals. She wants you to choose no more than y other vertices such that the
number of triangular pieces of cake she can give out is maximized.

What is the maximum number of triangular pieces of cake Bessie can give out?

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case consists of three integers, n , x , and y (4
\leq n \leq 10^9 , 2 \leq x \leq \min(n, 2 \cdot 10^5) , 0 \leq y \leq n - x )
— the number of sides of the polygon, number of vertices Bessie has chosen,
and the maximum number of other vertices you can choose.

The second line consists of x distinct integers from 1 to n , representing the
vertices Bessie has chosen.

It is guaranteed the sum of x over all test cases does not exceed 2 \cdot 10^5
.

Output

For each test case, output a single integer: the maximum number of non-
intersecting triangular pieces of cake she can give out.

Example

Input

    3
    
    8 4 2
    
    1 6 2 5
    
    7 3 1
    
    6 4 3
    
    4 2 2
    
    1 3

Output

    6
    5
    2
    
Note

In test cases 1 , 2 and 3 , you can get 6 , 5 and 2 non-intersecting
triangular pieces of cake, respectively. A possible construction is shown in
the following pictures:

The green dots represent vertices that Bessie chose, the yellow dots represent
vertices that you chose, the blue lines represent diagonals that are drawn,
and the red numbers represent triangles that are counted.

![](https://espresso.codeforces.com/13b28beb7f5f0d100798f357f58c804c5314c869.png)","R = lambda: map(int, input().split())
t,=R()
while t:
    t -= 1
    n,x,y= R()
    sx=0;
    l = list(R())
    l.sort()
    l.append(n+l[0])
    val=[]
    for i in range(1,x+1):
        c=l[i]-l[i-1]-1
        if c==1: sx+=1
        val.append(c)
    val.sort(key= lambda x:(1-x&1,x))
    for i in val:
        c=i//2
        if y<c :
            sx+=y*2 
            break
        sx+=i
        y-=c
    
    cons=x+sx-2
    cons=min(n-2,cons)
    print(cons)  # 使用 print 函数打印列表元素，而不是调用 P 函数",1,False,False,False,True,False,True,True,False,False,True,False,True,True,True,0.5260587368554075,0.024145370660688354,0.6666666666666666
1942_C2,1942_C2_Campass_6.67%,codeforces2024,human,qwen2p5-72b-instruct,"[Proof Geometric Construction Can Solve All Love Affairs -
manbo-p](https://soundcloud.com/alice-law-314125270/manbo-p-proof-geometric-
construction-can-solve-all-love-affairs)

⠀

This is the hard version of the problem. The only difference between the two
versions is the constraint on y . In this version 0 \leq y \leq n - x . You
can make hacks only if both versions are solved.

Bessie has received a birthday cake from her best friend Elsie, and it came in
the form of a regular polygon with n sides. The vertices of the cake are
numbered from 1 to n clockwise. You and Bessie are going to choose some of
those vertices to cut non-intersecting diagonals into the cake. In other
words, the endpoints of the diagonals must be part of the chosen vertices.

Bessie would only like to give out pieces of cake which result in a triangle
to keep consistency. The size of the pieces doesn't matter, and the whole cake
does not have to be separated into all triangles (other shapes are allowed in
the cake, but those will not be counted).

Bessie has already chosen x of those vertices that can be used to form
diagonals. She wants you to choose no more than y other vertices such that the
number of triangular pieces of cake she can give out is maximized.

What is the maximum number of triangular pieces of cake Bessie can give out?

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case consists of three integers, n , x , and y (4
\leq n \leq 10^9 , 2 \leq x \leq \min(n, 2 \cdot 10^5) , 0 \leq y \leq n - x )
— the number of sides of the polygon, number of vertices Bessie has chosen,
and the maximum number of other vertices you can choose.

The second line consists of x distinct integers from 1 to n , representing the
vertices Bessie has chosen.

It is guaranteed the sum of x over all test cases does not exceed 2 \cdot 10^5
.

Output

For each test case, output a single integer: the maximum number of non-
intersecting triangular pieces of cake she can give out.

Example

Input

    3
    
    8 4 2
    
    1 6 2 5
    
    7 3 1
    
    6 4 3
    
    4 2 2
    
    1 3

Output

    6
    5
    2
    
Note

In test cases 1 , 2 and 3 , you can get 6 , 5 and 2 non-intersecting
triangular pieces of cake, respectively. A possible construction is shown in
the following pictures:

The green dots represent vertices that Bessie chose, the yellow dots represent
vertices that you chose, the blue lines represent diagonals that are drawn,
and the red numbers represent triangles that are counted.

![](https://espresso.codeforces.com/13b28beb7f5f0d100798f357f58c804c5314c869.png)","R = lambda: map(int, input().split())
t,=R()
while t:
    t -= 1
    n,x,y= R()
    sx=0;
    l = list(R())
    l.sort()
    l.append(n+l[0])
    val=[]
    for i in range(1,x+1):
        c=l[i]-l[i-1]-1
        if c==1: sx+=1
        val.append(c)
    val.sort(key= lambda x:(1-x&1,x))
    for i in val:
        c=i//2
        if y<c :
            sx+=y*2 
            break
        sx+=i
        y-=c
    
    cons=x+sx-2
    cons=min(n-2,cons)
    print(cons)  # 使用 print 函数打印列表元素，而不是调用 P 函数",1,False,False,False,True,False,True,True,True,False,False,False,True,False,True,0.5260587368554075,0.024145370660688354,0.6666666666666666
1970_C1,1970_C1_PitchBlease_100%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","from collections import deque, defaultdict
 
def find_winner(n, edges, start):
    # Build the tree using an adjacency list
    tree = defaultdict(list)
    for u, v in edges:
        tree[u].append(v)
        tree[v].append(u)
    
    # Find the leaves
    leaves = [node for node in tree if len(tree[node]) == 1]
    
    # Function to find the distance from the start node to a target node using BFS
    def bfs(start, target):
        queue = deque([(start, 0)])  # (current_node, current_distance)
        visited = set([start])
        
        while queue:
            current, dist = queue.popleft()
            if current == target:
                return dist
            
            for neighbor in tree[current]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append((neighbor, dist + 1))
        
        return -1  # Should never reach here if the tree is valid and connected
    
    # Compute the distances from the start node to both leaves
    dist1 = bfs(start, leaves[0])
    dist2 = bfs(start, leaves[1])
    
    # Determine the winner based on the distances
    # If any distance is odd, Ron wins since he starts first
    if dist1 % 2 == 1 or dist2 % 2 == 1:
        return ""Ron""
    else:
        return ""Hermione""
 
# Read input
n, t = map(int, input().split())
edges = [tuple(map(int, input().split())) for _ in range(n-1)]
starts = list(map(int, input().split()))
 
# There is only one game (t=1), so we handle just one starting position
start = starts[0]
print(find_winner(n, edges, start))",1,True,False,False,True,True,True,True,True,False,False,False,True,True,True,1.0,1.0,1.0
1970_C1,1970_C1_PitchBlease_100%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","from collections import deque, defaultdict
 
def find_winner(n, edges, start):
    # Build the tree using an adjacency list
    tree = defaultdict(list)
    for u, v in edges:
        tree[u].append(v)
        tree[v].append(u)
    
    # Find the leaves
    leaves = [node for node in tree if len(tree[node]) == 1]
    
    # Function to find the distance from the start node to a target node using BFS
    def bfs(start, target):
        queue = deque([(start, 0)])  # (current_node, current_distance)
        visited = set([start])
        
        while queue:
            current, dist = queue.popleft()
            if current == target:
                return dist
            
            for neighbor in tree[current]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append((neighbor, dist + 1))
        
        return -1  # Should never reach here if the tree is valid and connected
    
    # Compute the distances from the start node to both leaves
    dist1 = bfs(start, leaves[0])
    dist2 = bfs(start, leaves[1])
    
    # Determine the winner based on the distances
    # If any distance is odd, Ron wins since he starts first
    if dist1 % 2 == 1 or dist2 % 2 == 1:
        return ""Ron""
    else:
        return ""Hermione""
 
# Read input
n, t = map(int, input().split())
edges = [tuple(map(int, input().split())) for _ in range(n-1)]
starts = list(map(int, input().split()))
 
# There is only one game (t=1), so we handle just one starting position
start = starts[0]
print(find_winner(n, edges, start))",1,True,False,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1970_C1,1970_C1_PitchBlease_100%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","from collections import deque, defaultdict
 
def find_winner(n, edges, start):
    # Build the tree using an adjacency list
    tree = defaultdict(list)
    for u, v in edges:
        tree[u].append(v)
        tree[v].append(u)
    
    # Find the leaves
    leaves = [node for node in tree if len(tree[node]) == 1]
    
    # Function to find the distance from the start node to a target node using BFS
    def bfs(start, target):
        queue = deque([(start, 0)])  # (current_node, current_distance)
        visited = set([start])
        
        while queue:
            current, dist = queue.popleft()
            if current == target:
                return dist
            
            for neighbor in tree[current]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append((neighbor, dist + 1))
        
        return -1  # Should never reach here if the tree is valid and connected
    
    # Compute the distances from the start node to both leaves
    dist1 = bfs(start, leaves[0])
    dist2 = bfs(start, leaves[1])
    
    # Determine the winner based on the distances
    # If any distance is odd, Ron wins since he starts first
    if dist1 % 2 == 1 or dist2 % 2 == 1:
        return ""Ron""
    else:
        return ""Hermione""
 
# Read input
n, t = map(int, input().split())
edges = [tuple(map(int, input().split())) for _ in range(n-1)]
starts = list(map(int, input().split()))
 
# There is only one game (t=1), so we handle just one starting position
start = starts[0]
print(find_winner(n, edges, start))",1,True,False,False,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1920_A,1920_A_phong.than.kiem.771_18.18%,codeforces2024,human,qwen2p5-72b-instruct,"Alex is solving a problem. He has n constraints on what the integer k can be.
There are three types of constraints:

  1. k must be greater than or equal to some integer x ; 
  2. k must be less than or equal to some integer x ; 
  3. k must be not equal to some integer x . 

Help Alex find the number of integers k that satisfy all n constraints. It is
guaranteed that the answer is finite (there exists at least one constraint of
type 1 and at least one constraint of type 2 ). Also, it is guaranteed that no
two constraints are the exact same.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 500 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (2 \leq n \leq
100 ) — the number of constraints.

The following n lines describe the constraints. Each line contains two
integers a and x (a \in \\{1,2,3\\}, \, 1 \leq x \leq 10^9 ). a denotes the
type of constraint. If a=1 , k must be greater than or equal to x . If a=2 , k
must be less than or equal to x . If a=3 , k must be not equal to x .

It is guaranteed that there is a finite amount of integers satisfying all n
constraints (there exists at least one constraint of type 1 and at least one
constraint of type 2 ). It is also guaranteed that no two constraints are the
exact same (in other words, all pairs (a, x) are distinct).

Output

For each test case, output a single integer — the number of integers k that
satisfy all n constraints.

Example

Input

    6
    
    4
    
    1 3
    
    2 10
    
    3 1
    
    3 5
    
    2
    
    1 5
    
    2 4
    
    10
    
    3 6
    
    3 7
    
    1 2
    
    1 7
    
    3 100
    
    3 44
    
    2 100
    
    2 98
    
    1 3
    
    3 99
    
    6
    
    1 5
    
    2 10
    
    1 9
    
    2 2
    
    3 2
    
    3 9
    
    5
    
    1 1
    
    2 2
    
    3 1
    
    3 2
    
    3 3
    
    6
    
    1 10000
    
    2 900000000
    
    3 500000000
    
    1 100000000
    
    3 10000
    
    3 900000001

Output

    7
    0
    90
    0
    0
    800000000
    
Note

In the first test case, k \geq 3 and k \leq 10 . Furthermore, k \neq 1 and k
\neq 5 . The possible integers k that satisfy the constraints are
3,4,6,7,8,9,10 . So the answer is 7 .

In the second test case, k \ge 5 and k \le 4 , which is impossible. So the
answer is 0 .","import math
import re
 
def input_n(isOne=False):
    if not isOne: return int(input())
    else: return 1
def input_list(space=True, to_int = True):
    line = input()
    if space:
        items = line.split()
    else:
        items = list(line)
 
    if to_int:
        return [int(i) for i in items]
    else:
        return items
 
def list_to_string(arr, sym):
    string = """"
    for i in arr:
        string += str(i) + sym
    return string
 
 
def find_all_indices_string(string, substring):
    indices = []
    index = string.find(substring)
    while index != -1:
        indices.append(index)
        index = string.find(substring, index + 1)
    return indices
 
def find_all_indices_arr(arr, element):
    return [index for index, value in enumerate(arr) if value == element]
 
def find_arr_in_arr(arr, index, value):
    for subArray in arr:
        if subArray[index]==value:
            return subArray
    return None
 
 
def solve():
    n = int(input())
    start = -1
    end = 1e9
    num = []
    for i in range(n):
        t,v = tuple(map(int, input().split()))
        if t ==1:
            if start < v: start = v
        if t == 2:
            if end > v: end =v
        if t ==3: num.append(v)
    count_num = 0
    for i in num:
        if i < start or i > end: continue
        else: count_num+=1
    if start > end: return 0
    return end - start + 1 - count_num if end - start + 1 >= count_num else 0
        
    
    
n = input_n()
ans = []
alphabet = ""abcdefghijklmnopqrstuvwxyz""
 
for i in range(n):
    ans.append(solve())
for i in ans:
    print(i)",1,False,True,False,True,True,True,True,True,False,False,False,True,True,True,1.0,1.0,1.0
1920_A,1920_A_phong.than.kiem.771_18.18%,codeforces2024,human,qwen2p5-72b-instruct,"Alex is solving a problem. He has n constraints on what the integer k can be.
There are three types of constraints:

  1. k must be greater than or equal to some integer x ; 
  2. k must be less than or equal to some integer x ; 
  3. k must be not equal to some integer x . 

Help Alex find the number of integers k that satisfy all n constraints. It is
guaranteed that the answer is finite (there exists at least one constraint of
type 1 and at least one constraint of type 2 ). Also, it is guaranteed that no
two constraints are the exact same.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 500 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (2 \leq n \leq
100 ) — the number of constraints.

The following n lines describe the constraints. Each line contains two
integers a and x (a \in \\{1,2,3\\}, \, 1 \leq x \leq 10^9 ). a denotes the
type of constraint. If a=1 , k must be greater than or equal to x . If a=2 , k
must be less than or equal to x . If a=3 , k must be not equal to x .

It is guaranteed that there is a finite amount of integers satisfying all n
constraints (there exists at least one constraint of type 1 and at least one
constraint of type 2 ). It is also guaranteed that no two constraints are the
exact same (in other words, all pairs (a, x) are distinct).

Output

For each test case, output a single integer — the number of integers k that
satisfy all n constraints.

Example

Input

    6
    
    4
    
    1 3
    
    2 10
    
    3 1
    
    3 5
    
    2
    
    1 5
    
    2 4
    
    10
    
    3 6
    
    3 7
    
    1 2
    
    1 7
    
    3 100
    
    3 44
    
    2 100
    
    2 98
    
    1 3
    
    3 99
    
    6
    
    1 5
    
    2 10
    
    1 9
    
    2 2
    
    3 2
    
    3 9
    
    5
    
    1 1
    
    2 2
    
    3 1
    
    3 2
    
    3 3
    
    6
    
    1 10000
    
    2 900000000
    
    3 500000000
    
    1 100000000
    
    3 10000
    
    3 900000001

Output

    7
    0
    90
    0
    0
    800000000
    
Note

In the first test case, k \geq 3 and k \leq 10 . Furthermore, k \neq 1 and k
\neq 5 . The possible integers k that satisfy the constraints are
3,4,6,7,8,9,10 . So the answer is 7 .

In the second test case, k \ge 5 and k \le 4 , which is impossible. So the
answer is 0 .","import math
import re
 
def input_n(isOne=False):
    if not isOne: return int(input())
    else: return 1
def input_list(space=True, to_int = True):
    line = input()
    if space:
        items = line.split()
    else:
        items = list(line)
 
    if to_int:
        return [int(i) for i in items]
    else:
        return items
 
def list_to_string(arr, sym):
    string = """"
    for i in arr:
        string += str(i) + sym
    return string
 
 
def find_all_indices_string(string, substring):
    indices = []
    index = string.find(substring)
    while index != -1:
        indices.append(index)
        index = string.find(substring, index + 1)
    return indices
 
def find_all_indices_arr(arr, element):
    return [index for index, value in enumerate(arr) if value == element]
 
def find_arr_in_arr(arr, index, value):
    for subArray in arr:
        if subArray[index]==value:
            return subArray
    return None
 
 
def solve():
    n = int(input())
    start = -1
    end = 1e9
    num = []
    for i in range(n):
        t,v = tuple(map(int, input().split()))
        if t ==1:
            if start < v: start = v
        if t == 2:
            if end > v: end =v
        if t ==3: num.append(v)
    count_num = 0
    for i in num:
        if i < start or i > end: continue
        else: count_num+=1
    if start > end: return 0
    return end - start + 1 - count_num if end - start + 1 >= count_num else 0
        
    
    
n = input_n()
ans = []
alphabet = ""abcdefghijklmnopqrstuvwxyz""
 
for i in range(n):
    ans.append(solve())
for i in ans:
    print(i)",1,False,False,False,True,True,False,False,True,False,False,True,True,True,True,1.0,1.0,1.0
1920_A,1920_A_phong.than.kiem.771_18.18%,codeforces2024,human,qwen2p5-72b-instruct,"Alex is solving a problem. He has n constraints on what the integer k can be.
There are three types of constraints:

  1. k must be greater than or equal to some integer x ; 
  2. k must be less than or equal to some integer x ; 
  3. k must be not equal to some integer x . 

Help Alex find the number of integers k that satisfy all n constraints. It is
guaranteed that the answer is finite (there exists at least one constraint of
type 1 and at least one constraint of type 2 ). Also, it is guaranteed that no
two constraints are the exact same.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 500 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (2 \leq n \leq
100 ) — the number of constraints.

The following n lines describe the constraints. Each line contains two
integers a and x (a \in \\{1,2,3\\}, \, 1 \leq x \leq 10^9 ). a denotes the
type of constraint. If a=1 , k must be greater than or equal to x . If a=2 , k
must be less than or equal to x . If a=3 , k must be not equal to x .

It is guaranteed that there is a finite amount of integers satisfying all n
constraints (there exists at least one constraint of type 1 and at least one
constraint of type 2 ). It is also guaranteed that no two constraints are the
exact same (in other words, all pairs (a, x) are distinct).

Output

For each test case, output a single integer — the number of integers k that
satisfy all n constraints.

Example

Input

    6
    
    4
    
    1 3
    
    2 10
    
    3 1
    
    3 5
    
    2
    
    1 5
    
    2 4
    
    10
    
    3 6
    
    3 7
    
    1 2
    
    1 7
    
    3 100
    
    3 44
    
    2 100
    
    2 98
    
    1 3
    
    3 99
    
    6
    
    1 5
    
    2 10
    
    1 9
    
    2 2
    
    3 2
    
    3 9
    
    5
    
    1 1
    
    2 2
    
    3 1
    
    3 2
    
    3 3
    
    6
    
    1 10000
    
    2 900000000
    
    3 500000000
    
    1 100000000
    
    3 10000
    
    3 900000001

Output

    7
    0
    90
    0
    0
    800000000
    
Note

In the first test case, k \geq 3 and k \leq 10 . Furthermore, k \neq 1 and k
\neq 5 . The possible integers k that satisfy the constraints are
3,4,6,7,8,9,10 . So the answer is 7 .

In the second test case, k \ge 5 and k \le 4 , which is impossible. So the
answer is 0 .","import math
import re
 
def input_n(isOne=False):
    if not isOne: return int(input())
    else: return 1
def input_list(space=True, to_int = True):
    line = input()
    if space:
        items = line.split()
    else:
        items = list(line)
 
    if to_int:
        return [int(i) for i in items]
    else:
        return items
 
def list_to_string(arr, sym):
    string = """"
    for i in arr:
        string += str(i) + sym
    return string
 
 
def find_all_indices_string(string, substring):
    indices = []
    index = string.find(substring)
    while index != -1:
        indices.append(index)
        index = string.find(substring, index + 1)
    return indices
 
def find_all_indices_arr(arr, element):
    return [index for index, value in enumerate(arr) if value == element]
 
def find_arr_in_arr(arr, index, value):
    for subArray in arr:
        if subArray[index]==value:
            return subArray
    return None
 
 
def solve():
    n = int(input())
    start = -1
    end = 1e9
    num = []
    for i in range(n):
        t,v = tuple(map(int, input().split()))
        if t ==1:
            if start < v: start = v
        if t == 2:
            if end > v: end =v
        if t ==3: num.append(v)
    count_num = 0
    for i in num:
        if i < start or i > end: continue
        else: count_num+=1
    if start > end: return 0
    return end - start + 1 - count_num if end - start + 1 >= count_num else 0
        
    
    
n = input_n()
ans = []
alphabet = ""abcdefghijklmnopqrstuvwxyz""
 
for i in range(n):
    ans.append(solve())
for i in ans:
    print(i)",1,False,False,False,True,True,True,True,True,False,False,True,True,True,True,1.0,1.0,1.0
1944_C,1944_C_jgsr031200_5.00%,codeforces2024,human,qwen2p5-72b-instruct,"Alice and Bob play yet another game on an array a of size n . Alice starts
with an empty array c . Both players take turns playing, with Alice starting
first.

On Alice's turn, she picks one element from a , appends that element to c ,
and then deletes it from a .

On Bob's turn, he picks one element from a , and then deletes it from a .

The game ends when the array a is empty. Game's score is defined to be the
MEX^\dagger of c . Alice wants to maximize the score while Bob wants to
minimize it. Find game's final score if both players play optimally.

^\dagger The \operatorname{MEX} (minimum excludant) of an array of integers is
defined as the smallest non-negative integer which does not occur in the
array. For example:

  * The MEX of [2,2,1] is 0 , because 0 does not belong to the array. 
  * The MEX of [3,1,0,1] is 2 , because 0 and 1 belong to the array, but 2 does not. 
  * The MEX of [0,3,1,2] is 4 , because 0 , 1 , 2 and 3 belong to the array, but 4 does not. 

Input

Each test contains multiple test cases. The first line contains a single
integer t (1 \leq t \leq 2 \cdot 10^4 ) — the number of test cases. The
description of the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ).

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (0
\le a_i < n ).

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, find game's score if both players play optimally.

Example

Input

    3
    
    4
    
    0 0 1 1
    
    4
    
    0 1 2 3
    
    2
    
    1 1

Output

    2
    1
    0
    
Note

In the first test case, a possible game with a score of 2 is as follows:

  1. Alice chooses the element 1 . After this move, a=[0,0,1] and c=[1] . 
  2. Bob chooses the element 0 . After this move, a=[0,1] and c=[1] . 
  3. Alice chooses the element 0 . After this move, a=[1] and c=[1,0] . 
  4. Bob chooses the element 1 . After this move, a=[\,] and c=[1,0] . 

At the end, c=[1,0] , which has a MEX of 2 . Note that this is an example game
and does not necessarily represent the optimal strategy for both players.","""""""
t = int(input())
for _ in range(t):
    n = int(input())
    arr = list(map(int,input().split()))
 
 
# Read tree as graph
def build_tree(n,arr):
    tree = {(i+1):[] for i in range(n)}
    for (i,j) in arr:
        tree[i].append(j)
        tree[j].append(i)
    return tree
 
# Generic BS
def bs(arr,x):
    n = len(arr)
    l, r = 0, n - 1
    if x < arr[0]: return -1
    if x > arr[-1]: return n+1
 
    while l + 1 != r:
        mid = (l + r) // 2
        if x <= arr[mid]:
            r = mid
        else:
            l = mid
    return (l,r)
 
# Kadanes
def kadane(arr):
    n = len(arr)
    pre = 0
    maxi = 0
    for i in range(n):
        pre = max(pre+arr[i],arr[i])
        maxi = max(maxi,pre)
    #print('max',maxi)
    return maxi
 
# dfs
def dfs(root,par,tree):
    c = 1
    for v in tree[root]:
        if v!=par:
            c+=dfs(v,root,tree,x)
    return c
""""""
import math as m
import collections as c
big = 1000000007
 
def pro(arr):
    nums = c.Counter(arr)
    start = 0
    vis = set()
    while nums.get(start,0):
        vis.add(start)
        nums[start]-=1
 
        #bob
        if nums.get(start+1,0):
            nums[start+1]-=1
            start+=1
        else:
            print(start+1)
            return
    print(start)
t = int(input())
for _ in range(t):
    n = int(input())
    #n,k = list(map(int,input().split()))
    # for _ in range(n-1):
    #     arr.append(list(map(int,input().split())))
    #arr = list(map(str,list(input())))
    arr = list(map(int,input().split()))
    pro(arr)",1,False,False,False,True,False,True,True,True,False,False,False,True,True,True,1.0,1.0,1.0
1944_C,1944_C_jgsr031200_5.00%,codeforces2024,human,qwen2p5-72b-instruct,"Alice and Bob play yet another game on an array a of size n . Alice starts
with an empty array c . Both players take turns playing, with Alice starting
first.

On Alice's turn, she picks one element from a , appends that element to c ,
and then deletes it from a .

On Bob's turn, he picks one element from a , and then deletes it from a .

The game ends when the array a is empty. Game's score is defined to be the
MEX^\dagger of c . Alice wants to maximize the score while Bob wants to
minimize it. Find game's final score if both players play optimally.

^\dagger The \operatorname{MEX} (minimum excludant) of an array of integers is
defined as the smallest non-negative integer which does not occur in the
array. For example:

  * The MEX of [2,2,1] is 0 , because 0 does not belong to the array. 
  * The MEX of [3,1,0,1] is 2 , because 0 and 1 belong to the array, but 2 does not. 
  * The MEX of [0,3,1,2] is 4 , because 0 , 1 , 2 and 3 belong to the array, but 4 does not. 

Input

Each test contains multiple test cases. The first line contains a single
integer t (1 \leq t \leq 2 \cdot 10^4 ) — the number of test cases. The
description of the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ).

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (0
\le a_i < n ).

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, find game's score if both players play optimally.

Example

Input

    3
    
    4
    
    0 0 1 1
    
    4
    
    0 1 2 3
    
    2
    
    1 1

Output

    2
    1
    0
    
Note

In the first test case, a possible game with a score of 2 is as follows:

  1. Alice chooses the element 1 . After this move, a=[0,0,1] and c=[1] . 
  2. Bob chooses the element 0 . After this move, a=[0,1] and c=[1] . 
  3. Alice chooses the element 0 . After this move, a=[1] and c=[1,0] . 
  4. Bob chooses the element 1 . After this move, a=[\,] and c=[1,0] . 

At the end, c=[1,0] , which has a MEX of 2 . Note that this is an example game
and does not necessarily represent the optimal strategy for both players.","""""""
t = int(input())
for _ in range(t):
    n = int(input())
    arr = list(map(int,input().split()))
 
 
# Read tree as graph
def build_tree(n,arr):
    tree = {(i+1):[] for i in range(n)}
    for (i,j) in arr:
        tree[i].append(j)
        tree[j].append(i)
    return tree
 
# Generic BS
def bs(arr,x):
    n = len(arr)
    l, r = 0, n - 1
    if x < arr[0]: return -1
    if x > arr[-1]: return n+1
 
    while l + 1 != r:
        mid = (l + r) // 2
        if x <= arr[mid]:
            r = mid
        else:
            l = mid
    return (l,r)
 
# Kadanes
def kadane(arr):
    n = len(arr)
    pre = 0
    maxi = 0
    for i in range(n):
        pre = max(pre+arr[i],arr[i])
        maxi = max(maxi,pre)
    #print('max',maxi)
    return maxi
 
# dfs
def dfs(root,par,tree):
    c = 1
    for v in tree[root]:
        if v!=par:
            c+=dfs(v,root,tree,x)
    return c
""""""
import math as m
import collections as c
big = 1000000007
 
def pro(arr):
    nums = c.Counter(arr)
    start = 0
    vis = set()
    while nums.get(start,0):
        vis.add(start)
        nums[start]-=1
 
        #bob
        if nums.get(start+1,0):
            nums[start+1]-=1
            start+=1
        else:
            print(start+1)
            return
    print(start)
t = int(input())
for _ in range(t):
    n = int(input())
    #n,k = list(map(int,input().split()))
    # for _ in range(n-1):
    #     arr.append(list(map(int,input().split())))
    #arr = list(map(str,list(input())))
    arr = list(map(int,input().split()))
    pro(arr)",1,False,False,False,True,False,True,True,True,False,False,False,True,True,True,1.0,1.0,1.0
1944_C,1944_C_jgsr031200_5.00%,codeforces2024,human,qwen2p5-72b-instruct,"Alice and Bob play yet another game on an array a of size n . Alice starts
with an empty array c . Both players take turns playing, with Alice starting
first.

On Alice's turn, she picks one element from a , appends that element to c ,
and then deletes it from a .

On Bob's turn, he picks one element from a , and then deletes it from a .

The game ends when the array a is empty. Game's score is defined to be the
MEX^\dagger of c . Alice wants to maximize the score while Bob wants to
minimize it. Find game's final score if both players play optimally.

^\dagger The \operatorname{MEX} (minimum excludant) of an array of integers is
defined as the smallest non-negative integer which does not occur in the
array. For example:

  * The MEX of [2,2,1] is 0 , because 0 does not belong to the array. 
  * The MEX of [3,1,0,1] is 2 , because 0 and 1 belong to the array, but 2 does not. 
  * The MEX of [0,3,1,2] is 4 , because 0 , 1 , 2 and 3 belong to the array, but 4 does not. 

Input

Each test contains multiple test cases. The first line contains a single
integer t (1 \leq t \leq 2 \cdot 10^4 ) — the number of test cases. The
description of the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ).

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (0
\le a_i < n ).

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, find game's score if both players play optimally.

Example

Input

    3
    
    4
    
    0 0 1 1
    
    4
    
    0 1 2 3
    
    2
    
    1 1

Output

    2
    1
    0
    
Note

In the first test case, a possible game with a score of 2 is as follows:

  1. Alice chooses the element 1 . After this move, a=[0,0,1] and c=[1] . 
  2. Bob chooses the element 0 . After this move, a=[0,1] and c=[1] . 
  3. Alice chooses the element 0 . After this move, a=[1] and c=[1,0] . 
  4. Bob chooses the element 1 . After this move, a=[\,] and c=[1,0] . 

At the end, c=[1,0] , which has a MEX of 2 . Note that this is an example game
and does not necessarily represent the optimal strategy for both players.","""""""
t = int(input())
for _ in range(t):
    n = int(input())
    arr = list(map(int,input().split()))
 
 
# Read tree as graph
def build_tree(n,arr):
    tree = {(i+1):[] for i in range(n)}
    for (i,j) in arr:
        tree[i].append(j)
        tree[j].append(i)
    return tree
 
# Generic BS
def bs(arr,x):
    n = len(arr)
    l, r = 0, n - 1
    if x < arr[0]: return -1
    if x > arr[-1]: return n+1
 
    while l + 1 != r:
        mid = (l + r) // 2
        if x <= arr[mid]:
            r = mid
        else:
            l = mid
    return (l,r)
 
# Kadanes
def kadane(arr):
    n = len(arr)
    pre = 0
    maxi = 0
    for i in range(n):
        pre = max(pre+arr[i],arr[i])
        maxi = max(maxi,pre)
    #print('max',maxi)
    return maxi
 
# dfs
def dfs(root,par,tree):
    c = 1
    for v in tree[root]:
        if v!=par:
            c+=dfs(v,root,tree,x)
    return c
""""""
import math as m
import collections as c
big = 1000000007
 
def pro(arr):
    nums = c.Counter(arr)
    start = 0
    vis = set()
    while nums.get(start,0):
        vis.add(start)
        nums[start]-=1
 
        #bob
        if nums.get(start+1,0):
            nums[start+1]-=1
            start+=1
        else:
            print(start+1)
            return
    print(start)
t = int(input())
for _ in range(t):
    n = int(input())
    #n,k = list(map(int,input().split()))
    # for _ in range(n-1):
    #     arr.append(list(map(int,input().split())))
    #arr = list(map(str,list(input())))
    arr = list(map(int,input().split()))
    pro(arr)",1,False,False,False,True,False,True,False,False,False,False,False,True,True,True,1.0,1.0,1.0
1970_C1,1970_C1_Sara_Elgazaly_100%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","from collections import defaultdict
x, y = map(int, input().split())
lst = defaultdict(list)
rev = defaultdict(list)
for _ in range(x-1):
    a,b = map(int, input().split())
    lst[a].append(b)
    rev[b].append(a)
z = int(input())
tmp = z
one = True
while lst[tmp] != []:
    one = not one
    tmp = lst[tmp].pop()
 
two = True
tmp = z
while rev[tmp] != []:
    two = not two
    tmp = rev[tmp].pop()
 
print('Hermione'if two and one else 'Ron')",1,True,False,False,False,False,False,True,False,False,False,False,False,False,False,1.0,1.0,1.0
1970_C1,1970_C1_Sara_Elgazaly_100%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","from collections import defaultdict
x, y = map(int, input().split())
lst = defaultdict(list)
rev = defaultdict(list)
for _ in range(x-1):
    a,b = map(int, input().split())
    lst[a].append(b)
    rev[b].append(a)
z = int(input())
tmp = z
one = True
while lst[tmp] != []:
    one = not one
    tmp = lst[tmp].pop()
 
two = True
tmp = z
while rev[tmp] != []:
    two = not two
    tmp = rev[tmp].pop()
 
print('Hermione'if two and one else 'Ron')",1,True,False,False,False,False,True,True,False,False,False,False,False,False,False,1.0,1.0,1.0
1970_C1,1970_C1_Sara_Elgazaly_100%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","from collections import defaultdict
x, y = map(int, input().split())
lst = defaultdict(list)
rev = defaultdict(list)
for _ in range(x-1):
    a,b = map(int, input().split())
    lst[a].append(b)
    rev[b].append(a)
z = int(input())
tmp = z
one = True
while lst[tmp] != []:
    one = not one
    tmp = lst[tmp].pop()
 
two = True
tmp = z
while rev[tmp] != []:
    two = not two
    tmp = rev[tmp].pop()
 
print('Hermione'if two and one else 'Ron')",1,True,False,False,True,False,True,True,True,True,True,False,True,True,True,1.0,1.0,1.0
1972_D1,1972_D1_NS3081992_50.00%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.","# import random
# import itertools
# from sys import stdin, stdout
# import operator
# import collections
import bisect
import collections
import heapq
import math
import sys
from sys import maxsize
# from decimal import Decimal
 
#sys.setrecursionlimit(10**6)
 
p2D = lambda x: print(*x, sep=""\n"")
def II(): return int(sys.stdin.buffer.readline())
def MI(): return map(int, sys.stdin.buffer.readline().split())
def LI(): return list(map(int, sys.stdin.buffer.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def BI(): return sys.stdin.buffer.readline().rstrip()
def SI(): return sys.stdin.buffer.readline().rstrip().decode()
def li(): return [int(i) for i in input().split()]
def lli(rows): return [li() for _ in range(rows)]
def si(): return input()
def ii(): return int(input())
def ins(): return input().split()
 
 
# mod = 998244353
# fval = [1]
# for i in range(1,1002):
#     x = (fval[-1]*i)%mod
#     fval.append(x)
# #
# ifac = [1]*(1002)
# ifac[1001] = pow(fval[1001], -1, mod)
# for i in range(1001-1, 1, -1): ifac[i] = ifac[i+1]*(i+1)%mod
# print(fval)
# print(ifac)
# _________________ For taking Input from the Text Files __________________
# import os.path
#
# if (os.path.exists('input.txt')):
#     sys.stdin = open(""input.txt"", ""r"")
#     sys.stdout = open(""output.txt"", ""w"")
#     sys.stderr = open(""error.txt"", ""w"")
 
def drank(d, processing, da, rank):
    tmp = 10 ** 9
    if len(d[da]) == 1:
        return 1
    for di in d[da]:
        if processing[di - 1] == 0:
            processing[di - 1] = 1
            tmp = min(tmp, drank(d, processing, di, rank))
            processing[di - 1] = 0
    rank[da - 1] = tmp + 1
    return tmp + 1
 
# def primeFactors(n, d):
#     if (n % 2 == 0):
#         d[2] = 0
#     while n % 2 == 0:
#         d[2] += 1
#         n = n // 2
#     for i in range(3, int(math.sqrt(n)) + 1, 2):
#         if (n % i == 0):
#             d[i] = 0
#         while n % i == 0:
#             d[i] += 1
#             n = n // i
#     if n > 2:
#         d[n] = 1
# def powerofadivisor(n,div):
#     x = 0
#     while n%div == 0:
#         n//=div
#         x+=1
#     return x
 
#import heapq as hq
#import math
 
def gcd(a,b):
    if b==0:
        x = 1
        y = 0
        return x, y, a
    x, y, g = gcd(b, a%b)
    return y, x- (a//b)*y, g
 
# mod = 998244353
#
# is_prime = [True]*(10**7+5)
# primes = []
# def primeseive(n):
#     is_prime[0] = is_prime[1] = False
#     for i in range(4,n+1,2): is_prime[i] = False
#     i = 3
#     while i*i<=n:
#         if is_prime[i] == True:
#             for j in range(i*i,n+1,i):
#                 is_prime[j] = False
#         i+=2
    # for i in range(n):
    #     if is_prime[i]: primes.append(i)
 
def check(a, n, m, k):
    for i in range(n):
        if a[i]<m:
            k-= (m - a[i])
    if k>=0: return 1
    return -1
 
def solve():
    n, m = li()
    i = 1
    ans = 0
    while i*i<=(n+i):
        ans+= (n+i)//(i*i)
        i+=1
    return ans-1
 
    # a = li()
    # mini = min(a)
    # maxi = max(a)
    # x = maxi - mini
    # if x==0: return 0
    # p = math.floor(math.log2(x))+1
    # ans = ''
    # while x!=1:
    #     d = (x+1)//2 + mini
    #     maxi =
    #     ans += str((x+1)//2+mini)
    #     maxi =
    # return str(p)+ '\n' + ans
 
 
def main():
    # primeseive(10**7+2)
    # print(is_prime)
    for _ in range(ii()):
        sys.stdout.write(str(solve()) + ""\n"")
        #solve()
        # si()
        #print(""? {} {}"".format(low, mid), flush=True)
        # print(solve(), flush=True)
    # print(solve())
 
    #     z += str(ans) + '\n'
    # print(len(ans), ' '.join(map(str, ans)), sep='\n')
    # stdout.write(z)
 
 
# for interactive problems
# print(""? {} {}"".format(l,m), flush=True)
# or print this after each print statement
# sys.stdout.flush()
 
 
if __name__ == ""__main__"":
    main()",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1972_D1,1972_D1_NS3081992_50.00%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.","# import random
# import itertools
# from sys import stdin, stdout
# import operator
# import collections
import bisect
import collections
import heapq
import math
import sys
from sys import maxsize
# from decimal import Decimal
 
#sys.setrecursionlimit(10**6)
 
p2D = lambda x: print(*x, sep=""\n"")
def II(): return int(sys.stdin.buffer.readline())
def MI(): return map(int, sys.stdin.buffer.readline().split())
def LI(): return list(map(int, sys.stdin.buffer.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def BI(): return sys.stdin.buffer.readline().rstrip()
def SI(): return sys.stdin.buffer.readline().rstrip().decode()
def li(): return [int(i) for i in input().split()]
def lli(rows): return [li() for _ in range(rows)]
def si(): return input()
def ii(): return int(input())
def ins(): return input().split()
 
 
# mod = 998244353
# fval = [1]
# for i in range(1,1002):
#     x = (fval[-1]*i)%mod
#     fval.append(x)
# #
# ifac = [1]*(1002)
# ifac[1001] = pow(fval[1001], -1, mod)
# for i in range(1001-1, 1, -1): ifac[i] = ifac[i+1]*(i+1)%mod
# print(fval)
# print(ifac)
# _________________ For taking Input from the Text Files __________________
# import os.path
#
# if (os.path.exists('input.txt')):
#     sys.stdin = open(""input.txt"", ""r"")
#     sys.stdout = open(""output.txt"", ""w"")
#     sys.stderr = open(""error.txt"", ""w"")
 
def drank(d, processing, da, rank):
    tmp = 10 ** 9
    if len(d[da]) == 1:
        return 1
    for di in d[da]:
        if processing[di - 1] == 0:
            processing[di - 1] = 1
            tmp = min(tmp, drank(d, processing, di, rank))
            processing[di - 1] = 0
    rank[da - 1] = tmp + 1
    return tmp + 1
 
# def primeFactors(n, d):
#     if (n % 2 == 0):
#         d[2] = 0
#     while n % 2 == 0:
#         d[2] += 1
#         n = n // 2
#     for i in range(3, int(math.sqrt(n)) + 1, 2):
#         if (n % i == 0):
#             d[i] = 0
#         while n % i == 0:
#             d[i] += 1
#             n = n // i
#     if n > 2:
#         d[n] = 1
# def powerofadivisor(n,div):
#     x = 0
#     while n%div == 0:
#         n//=div
#         x+=1
#     return x
 
#import heapq as hq
#import math
 
def gcd(a,b):
    if b==0:
        x = 1
        y = 0
        return x, y, a
    x, y, g = gcd(b, a%b)
    return y, x- (a//b)*y, g
 
# mod = 998244353
#
# is_prime = [True]*(10**7+5)
# primes = []
# def primeseive(n):
#     is_prime[0] = is_prime[1] = False
#     for i in range(4,n+1,2): is_prime[i] = False
#     i = 3
#     while i*i<=n:
#         if is_prime[i] == True:
#             for j in range(i*i,n+1,i):
#                 is_prime[j] = False
#         i+=2
    # for i in range(n):
    #     if is_prime[i]: primes.append(i)
 
def check(a, n, m, k):
    for i in range(n):
        if a[i]<m:
            k-= (m - a[i])
    if k>=0: return 1
    return -1
 
def solve():
    n, m = li()
    i = 1
    ans = 0
    while i*i<=(n+i):
        ans+= (n+i)//(i*i)
        i+=1
    return ans-1
 
    # a = li()
    # mini = min(a)
    # maxi = max(a)
    # x = maxi - mini
    # if x==0: return 0
    # p = math.floor(math.log2(x))+1
    # ans = ''
    # while x!=1:
    #     d = (x+1)//2 + mini
    #     maxi =
    #     ans += str((x+1)//2+mini)
    #     maxi =
    # return str(p)+ '\n' + ans
 
 
def main():
    # primeseive(10**7+2)
    # print(is_prime)
    for _ in range(ii()):
        sys.stdout.write(str(solve()) + ""\n"")
        #solve()
        # si()
        #print(""? {} {}"".format(low, mid), flush=True)
        # print(solve(), flush=True)
    # print(solve())
 
    #     z += str(ans) + '\n'
    # print(len(ans), ' '.join(map(str, ans)), sep='\n')
    # stdout.write(z)
 
 
# for interactive problems
# print(""? {} {}"".format(l,m), flush=True)
# or print this after each print statement
# sys.stdout.flush()
 
 
if __name__ == ""__main__"":
    main()",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1972_D1,1972_D1_NS3081992_50.00%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.","# import random
# import itertools
# from sys import stdin, stdout
# import operator
# import collections
import bisect
import collections
import heapq
import math
import sys
from sys import maxsize
# from decimal import Decimal
 
#sys.setrecursionlimit(10**6)
 
p2D = lambda x: print(*x, sep=""\n"")
def II(): return int(sys.stdin.buffer.readline())
def MI(): return map(int, sys.stdin.buffer.readline().split())
def LI(): return list(map(int, sys.stdin.buffer.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def BI(): return sys.stdin.buffer.readline().rstrip()
def SI(): return sys.stdin.buffer.readline().rstrip().decode()
def li(): return [int(i) for i in input().split()]
def lli(rows): return [li() for _ in range(rows)]
def si(): return input()
def ii(): return int(input())
def ins(): return input().split()
 
 
# mod = 998244353
# fval = [1]
# for i in range(1,1002):
#     x = (fval[-1]*i)%mod
#     fval.append(x)
# #
# ifac = [1]*(1002)
# ifac[1001] = pow(fval[1001], -1, mod)
# for i in range(1001-1, 1, -1): ifac[i] = ifac[i+1]*(i+1)%mod
# print(fval)
# print(ifac)
# _________________ For taking Input from the Text Files __________________
# import os.path
#
# if (os.path.exists('input.txt')):
#     sys.stdin = open(""input.txt"", ""r"")
#     sys.stdout = open(""output.txt"", ""w"")
#     sys.stderr = open(""error.txt"", ""w"")
 
def drank(d, processing, da, rank):
    tmp = 10 ** 9
    if len(d[da]) == 1:
        return 1
    for di in d[da]:
        if processing[di - 1] == 0:
            processing[di - 1] = 1
            tmp = min(tmp, drank(d, processing, di, rank))
            processing[di - 1] = 0
    rank[da - 1] = tmp + 1
    return tmp + 1
 
# def primeFactors(n, d):
#     if (n % 2 == 0):
#         d[2] = 0
#     while n % 2 == 0:
#         d[2] += 1
#         n = n // 2
#     for i in range(3, int(math.sqrt(n)) + 1, 2):
#         if (n % i == 0):
#             d[i] = 0
#         while n % i == 0:
#             d[i] += 1
#             n = n // i
#     if n > 2:
#         d[n] = 1
# def powerofadivisor(n,div):
#     x = 0
#     while n%div == 0:
#         n//=div
#         x+=1
#     return x
 
#import heapq as hq
#import math
 
def gcd(a,b):
    if b==0:
        x = 1
        y = 0
        return x, y, a
    x, y, g = gcd(b, a%b)
    return y, x- (a//b)*y, g
 
# mod = 998244353
#
# is_prime = [True]*(10**7+5)
# primes = []
# def primeseive(n):
#     is_prime[0] = is_prime[1] = False
#     for i in range(4,n+1,2): is_prime[i] = False
#     i = 3
#     while i*i<=n:
#         if is_prime[i] == True:
#             for j in range(i*i,n+1,i):
#                 is_prime[j] = False
#         i+=2
    # for i in range(n):
    #     if is_prime[i]: primes.append(i)
 
def check(a, n, m, k):
    for i in range(n):
        if a[i]<m:
            k-= (m - a[i])
    if k>=0: return 1
    return -1
 
def solve():
    n, m = li()
    i = 1
    ans = 0
    while i*i<=(n+i):
        ans+= (n+i)//(i*i)
        i+=1
    return ans-1
 
    # a = li()
    # mini = min(a)
    # maxi = max(a)
    # x = maxi - mini
    # if x==0: return 0
    # p = math.floor(math.log2(x))+1
    # ans = ''
    # while x!=1:
    #     d = (x+1)//2 + mini
    #     maxi =
    #     ans += str((x+1)//2+mini)
    #     maxi =
    # return str(p)+ '\n' + ans
 
 
def main():
    # primeseive(10**7+2)
    # print(is_prime)
    for _ in range(ii()):
        sys.stdout.write(str(solve()) + ""\n"")
        #solve()
        # si()
        #print(""? {} {}"".format(low, mid), flush=True)
        # print(solve(), flush=True)
    # print(solve())
 
    #     z += str(ans) + '\n'
    # print(len(ans), ' '.join(map(str, ans)), sep='\n')
    # stdout.write(z)
 
 
# for interactive problems
# print(""? {} {}"".format(l,m), flush=True)
# or print this after each print statement
# sys.stdout.flush()
 
 
if __name__ == ""__main__"":
    main()",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1923_B,1923_B_shefalimittal6_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are playing a computer game. The current level of this game can be modeled
as a straight line. Your character is in point 0 of this line. There are n
monsters trying to kill your character; the i -th monster has health equal to
a_i and is initially in the point x_i .

Every second, the following happens:

  * first, you fire up to k bullets at monsters. Each bullet targets exactly one monster and decreases its health by 1 . For each bullet, you choose its target arbitrary (for example, you can fire all bullets at one monster, fire all bullets at different monsters, or choose any other combination). Any monster can be targeted by a bullet, regardless of its position and any other factors; 
  * then, all alive monsters with health 0 or less die; 
  * then, all alive monsters move 1 point closer to you (monsters to the left of you increase their coordinates by 1 , monsters to the right of you decrease their coordinates by 1 ). If any monster reaches your character (moves to the point 0 ), you lose. 

Can you survive and kill all n monsters without letting any of them reach your
character?

Input

The first line of the input contains one integer t (1 \le t \le 3 \cdot 10^4 )
— the number of test cases.

Each test case consists of three lines:

  * the first line contains two integers n and k (1 \le n \le 3 \cdot 10^5 ; 1 \le k \le 2 \cdot 10^9 ); 
  * the second line contains n integers a_1, a_2, \dots, a_n (1 \le a_i \le 10^9 ); 
  * the third line contains n integers x_1, x_2, \dots, x_n (-n \le x_1 < x_2 < x_3 < \dots < x_n \le n ; x_i \ne 0 ). 

Additional constraint on the input: the sum of n over all test cases does not
exceed 3 \cdot 10^5 .

Output

For each test case, print YES if you can kill all n monsters before they reach
your character, or NO otherwise.

You can output each letter of the answer in any case (upper or lower). For
example, the strings yEs, yes, Yes, and YES will all be recognized as positive
responses.

Example

Input

    5
    
    3 2
    
    1 2 3
    
    -1 2 3
    
    2 1
    
    1 1
    
    -1 1
    
    4 10
    
    3 4 2 5
    
    -3 -2 1 3
    
    5 3
    
    2 1 3 2 5
    
    -3 -2 3 4 5
    
    2 1
    
    1 2
    
    1 2

Output

    YES
    NO
    YES
    YES
    NO
    
Note

In the first example, you can act as follows:

  * during the 1 -st second, fire 1 bullet at the 1 -st monster and 1 bullet at the 3 -rd monster. Then the 1 -st monster dies, the 2 -nd and the 3 -rd monster move closer; 
  * during the 2 -nd second, fire 2 bullets at the 2 -nd monster. Then the 2 -nd monster dies, the 3 -rd monster moves closer; 
  * during the 3 -rd second, fire 2 bullets at the 3 -rd monster. Then the 3 -rd monster dies. 

In the second example, you can fire only 1 bullet, so you can kill only one of
the two monsters during the 1 -st second. Then, the remaining monster moves
closer and kills your character.","def solve(a, x, k):
    n = len(a)
    sorted_indices = sorted(range(n), key=lambda i: abs(x[i]))
 
    distance = 0
    pos = 0
    while pos != len(sorted_indices):
        if abs(x[sorted_indices[pos]]) == distance:
            return False
 
        rest = k
        while rest != 0 and pos != len(sorted_indices):
            delta = min(rest, a[sorted_indices[pos]])
            rest -= delta
            a[sorted_indices[pos]] -= delta
            if a[sorted_indices[pos]] == 0:
                pos += 1
 
        distance += 1
 
    return True
 
def main():
    t = int(input())
    for _ in range(t):
        n, k = map(int, input().split())
        a = list(map(int, input().split()))
        x = list(map(int, input().split()))
 
        print(""YES"" if solve(a, x, k) else ""NO"")
 
if __name__ == ""__main__"":
    main()",1,True,False,True,True,True,True,True,True,True,True,False,True,True,True,1.0,1.0,1.0
1923_B,1923_B_shefalimittal6_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are playing a computer game. The current level of this game can be modeled
as a straight line. Your character is in point 0 of this line. There are n
monsters trying to kill your character; the i -th monster has health equal to
a_i and is initially in the point x_i .

Every second, the following happens:

  * first, you fire up to k bullets at monsters. Each bullet targets exactly one monster and decreases its health by 1 . For each bullet, you choose its target arbitrary (for example, you can fire all bullets at one monster, fire all bullets at different monsters, or choose any other combination). Any monster can be targeted by a bullet, regardless of its position and any other factors; 
  * then, all alive monsters with health 0 or less die; 
  * then, all alive monsters move 1 point closer to you (monsters to the left of you increase their coordinates by 1 , monsters to the right of you decrease their coordinates by 1 ). If any monster reaches your character (moves to the point 0 ), you lose. 

Can you survive and kill all n monsters without letting any of them reach your
character?

Input

The first line of the input contains one integer t (1 \le t \le 3 \cdot 10^4 )
— the number of test cases.

Each test case consists of three lines:

  * the first line contains two integers n and k (1 \le n \le 3 \cdot 10^5 ; 1 \le k \le 2 \cdot 10^9 ); 
  * the second line contains n integers a_1, a_2, \dots, a_n (1 \le a_i \le 10^9 ); 
  * the third line contains n integers x_1, x_2, \dots, x_n (-n \le x_1 < x_2 < x_3 < \dots < x_n \le n ; x_i \ne 0 ). 

Additional constraint on the input: the sum of n over all test cases does not
exceed 3 \cdot 10^5 .

Output

For each test case, print YES if you can kill all n monsters before they reach
your character, or NO otherwise.

You can output each letter of the answer in any case (upper or lower). For
example, the strings yEs, yes, Yes, and YES will all be recognized as positive
responses.

Example

Input

    5
    
    3 2
    
    1 2 3
    
    -1 2 3
    
    2 1
    
    1 1
    
    -1 1
    
    4 10
    
    3 4 2 5
    
    -3 -2 1 3
    
    5 3
    
    2 1 3 2 5
    
    -3 -2 3 4 5
    
    2 1
    
    1 2
    
    1 2

Output

    YES
    NO
    YES
    YES
    NO
    
Note

In the first example, you can act as follows:

  * during the 1 -st second, fire 1 bullet at the 1 -st monster and 1 bullet at the 3 -rd monster. Then the 1 -st monster dies, the 2 -nd and the 3 -rd monster move closer; 
  * during the 2 -nd second, fire 2 bullets at the 2 -nd monster. Then the 2 -nd monster dies, the 3 -rd monster moves closer; 
  * during the 3 -rd second, fire 2 bullets at the 3 -rd monster. Then the 3 -rd monster dies. 

In the second example, you can fire only 1 bullet, so you can kill only one of
the two monsters during the 1 -st second. Then, the remaining monster moves
closer and kills your character.","def solve(a, x, k):
    n = len(a)
    sorted_indices = sorted(range(n), key=lambda i: abs(x[i]))
 
    distance = 0
    pos = 0
    while pos != len(sorted_indices):
        if abs(x[sorted_indices[pos]]) == distance:
            return False
 
        rest = k
        while rest != 0 and pos != len(sorted_indices):
            delta = min(rest, a[sorted_indices[pos]])
            rest -= delta
            a[sorted_indices[pos]] -= delta
            if a[sorted_indices[pos]] == 0:
                pos += 1
 
        distance += 1
 
    return True
 
def main():
    t = int(input())
    for _ in range(t):
        n, k = map(int, input().split())
        a = list(map(int, input().split()))
        x = list(map(int, input().split()))
 
        print(""YES"" if solve(a, x, k) else ""NO"")
 
if __name__ == ""__main__"":
    main()",1,True,False,True,True,True,True,True,True,True,True,False,True,True,True,1.0,1.0,1.0
1926_C,1926_C_vjudge2_100%,codeforces2024,human,qwen2p5-72b-instruct,"Please note that the time limit for this problem is only 0.5 seconds per test.

Vladislav wrote the integers from 1 to n , inclusive, on the board. Then he
replaced each integer with the sum of its digits.

What is the sum of the numbers on the board now?

For example, if n=12 then initially the numbers on the board are:

Then after the replacement, the numbers become:

The sum of these numbers is 1+2+3+4+5+6+7+8+9+1+2+3=51 . Thus, for n=12 the
answer is 51 .

Input

The first line contains an integer t (1 \leq t \leq 10^4 ) — the number of
test cases.

The only line of each test case contains a single integer n (1 \leq n \leq 2
\cdot 10^5 ) — the largest number Vladislav writes.

Output

For each test case, output a single integer — the sum of the numbers at the
end of the process.

Example

Input

    7
    
    12
    
    1
    
    2
    
    3
    
    1434
    
    2024
    
    200000

Output

    51
    1
    3
    6
    18465
    28170
    4600002","def convertNumber(num):
    a =0
    while num!=0:
        a = a+num%10
        num=int(num/10)
    return a
 
A=[]
sum =0
for i in range(1,200001):
    a=convertNumber(i)
    sum=sum+a
    A.append(sum)
 
 
for t in range(int(input())):
    n= int(input())
    print(A[n-1])",1,True,True,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1926_C,1926_C_vjudge2_100%,codeforces2024,human,qwen2p5-72b-instruct,"Please note that the time limit for this problem is only 0.5 seconds per test.

Vladislav wrote the integers from 1 to n , inclusive, on the board. Then he
replaced each integer with the sum of its digits.

What is the sum of the numbers on the board now?

For example, if n=12 then initially the numbers on the board are:

Then after the replacement, the numbers become:

The sum of these numbers is 1+2+3+4+5+6+7+8+9+1+2+3=51 . Thus, for n=12 the
answer is 51 .

Input

The first line contains an integer t (1 \leq t \leq 10^4 ) — the number of
test cases.

The only line of each test case contains a single integer n (1 \leq n \leq 2
\cdot 10^5 ) — the largest number Vladislav writes.

Output

For each test case, output a single integer — the sum of the numbers at the
end of the process.

Example

Input

    7
    
    12
    
    1
    
    2
    
    3
    
    1434
    
    2024
    
    200000

Output

    51
    1
    3
    6
    18465
    28170
    4600002","def convertNumber(num):
    a =0
    while num!=0:
        a = a+num%10
        num=int(num/10)
    return a
 
A=[]
sum =0
for i in range(1,200001):
    a=convertNumber(i)
    sum=sum+a
    A.append(sum)
 
 
for t in range(int(input())):
    n= int(input())
    print(A[n-1])",1,True,True,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1922_C,1922_C_Omar_jaki_100%,codeforces2024,human,qwen2p5-72b-instruct,"There are n cities located on the number line, the i -th city is in the point
a_i . The coordinates of the cities are given in ascending order, so a_1 < a_2
< \dots < a_n .

The distance between two cities x and y is equal to |a_x - a_y| .

For each city i , let's define the closest city j as the city such that the
distance between i and j is not greater than the distance between i and each
other city k . For example, if the cities are located in points [0, 8, 12, 15,
20] , then:

  * the closest city to the city 1 is the city 2 ; 
  * the closest city to the city 2 is the city 3 ; 
  * the closest city to the city 3 is the city 4 ; 
  * the closest city to the city 4 is the city 3 ; 
  * the closest city to the city 5 is the city 4 . 

The cities are located in such a way that for every city, the closest city is
unique. For example, it is impossible for the cities to be situated in points
[1, 2, 3] , since this would mean that the city 2 has two closest cities (1
and 3 , both having distance 1 ).

You can travel between cities. Suppose you are currently in the city x . Then
you can perform one of the following actions:

  * travel to any other city y , paying |a_x - a_y| coins; 
  * travel to the city which is the closest to x , paying 1 coin. 

You are given m queries. In each query, you will be given two cities, and you
have to calculate the minimum number of coins you have to spend to travel from
one city to the other city.

Input

The first line contains one integer t (1 \le t \le 10^4 ) — the number of test
cases.

Each test case is given in the following format:

  * the first line contains one integer n (2 \le n \le 10^5 ); 
  * the second line contains n integers a_1, a_2, \dots, a_n (0 \le a_1 < a_2 < \dots < a_n \le 10^9 ); 
  * the third line contains one integer m (1 \le m \le 10^5 ); 
  * then m lines follow; the i -th of them contains two integers x_i and y_i (1 \le x_i, y_i \le n ; x_i \ne y_i ), denoting that in the i -th query, you have to calculate the minimum number of coins you have to spend to travel from the city x_i to the city y_i . 

Additional constraints on the input:

  * in every test case, for each city, the closest city is determined uniquely; 
  * the sum of n over all test cases does not exceed 10^5 ; 
  * the sum of m over all test cases does not exceed 10^5 . 

Output

For each query, print one integer — the minimum number of coins you have to
spend.

Example

Input

    1
    
    5
    
    0 8 12 15 20
    
    5
    
    1 4
    
    1 5
    
    3 4
    
    3 2
    
    5 1

Output

    3
    8
    1
    4
    14
    
Note

Let's consider the first two queries in the example from the statement:

  * in the first query, you are initially in the city 1 . You can travel to the closest city (which is the city 2 ), paying 1 coin. Then you travel to the closest city (which is the city 3 ) again, paying 1 coin. Then you travel to the closest city (which is the city 4 ) again, paying 1 coin. In total, you spend 3 coins to get from the city 1 to the city 4 ; 
  * in the second query, you can use the same way to get from the city 1 to the city 4 , and then spend 5 coins to travel from the city 4 to the city 5 .","r=lambda : map(int,input().split())
t,=r()
while t:
    t-=1
    r()
    a=-1e9,*r(),2e9
    b=[0,0]
    # print(a)
    for w,x,y,z in zip(a,a[1:],a[2:],a[3:]):
        v=y-x
        b+=b[-2]+v**(v>(x-w)),b[-1]+v**(v>(z-y))
    # print(b,""B"")
    u,=r()
    while u:
        u-=1
        c,d=r()
        # print(c,d)
        if c<d:
            print(b[(d-1)*2]-b[(c-1)*2])
        else:
            print(b[(c*2)-1]-b[(d*2)-1])",1,True,False,False,True,False,True,True,True,True,False,True,False,True,False,1.0,1.0,1.0
1922_C,1922_C_Omar_jaki_100%,codeforces2024,human,qwen2p5-72b-instruct,"There are n cities located on the number line, the i -th city is in the point
a_i . The coordinates of the cities are given in ascending order, so a_1 < a_2
< \dots < a_n .

The distance between two cities x and y is equal to |a_x - a_y| .

For each city i , let's define the closest city j as the city such that the
distance between i and j is not greater than the distance between i and each
other city k . For example, if the cities are located in points [0, 8, 12, 15,
20] , then:

  * the closest city to the city 1 is the city 2 ; 
  * the closest city to the city 2 is the city 3 ; 
  * the closest city to the city 3 is the city 4 ; 
  * the closest city to the city 4 is the city 3 ; 
  * the closest city to the city 5 is the city 4 . 

The cities are located in such a way that for every city, the closest city is
unique. For example, it is impossible for the cities to be situated in points
[1, 2, 3] , since this would mean that the city 2 has two closest cities (1
and 3 , both having distance 1 ).

You can travel between cities. Suppose you are currently in the city x . Then
you can perform one of the following actions:

  * travel to any other city y , paying |a_x - a_y| coins; 
  * travel to the city which is the closest to x , paying 1 coin. 

You are given m queries. In each query, you will be given two cities, and you
have to calculate the minimum number of coins you have to spend to travel from
one city to the other city.

Input

The first line contains one integer t (1 \le t \le 10^4 ) — the number of test
cases.

Each test case is given in the following format:

  * the first line contains one integer n (2 \le n \le 10^5 ); 
  * the second line contains n integers a_1, a_2, \dots, a_n (0 \le a_1 < a_2 < \dots < a_n \le 10^9 ); 
  * the third line contains one integer m (1 \le m \le 10^5 ); 
  * then m lines follow; the i -th of them contains two integers x_i and y_i (1 \le x_i, y_i \le n ; x_i \ne y_i ), denoting that in the i -th query, you have to calculate the minimum number of coins you have to spend to travel from the city x_i to the city y_i . 

Additional constraints on the input:

  * in every test case, for each city, the closest city is determined uniquely; 
  * the sum of n over all test cases does not exceed 10^5 ; 
  * the sum of m over all test cases does not exceed 10^5 . 

Output

For each query, print one integer — the minimum number of coins you have to
spend.

Example

Input

    1
    
    5
    
    0 8 12 15 20
    
    5
    
    1 4
    
    1 5
    
    3 4
    
    3 2
    
    5 1

Output

    3
    8
    1
    4
    14
    
Note

Let's consider the first two queries in the example from the statement:

  * in the first query, you are initially in the city 1 . You can travel to the closest city (which is the city 2 ), paying 1 coin. Then you travel to the closest city (which is the city 3 ) again, paying 1 coin. Then you travel to the closest city (which is the city 4 ) again, paying 1 coin. In total, you spend 3 coins to get from the city 1 to the city 4 ; 
  * in the second query, you can use the same way to get from the city 1 to the city 4 , and then spend 5 coins to travel from the city 4 to the city 5 .","r=lambda : map(int,input().split())
t,=r()
while t:
    t-=1
    r()
    a=-1e9,*r(),2e9
    b=[0,0]
    # print(a)
    for w,x,y,z in zip(a,a[1:],a[2:],a[3:]):
        v=y-x
        b+=b[-2]+v**(v>(x-w)),b[-1]+v**(v>(z-y))
    # print(b,""B"")
    u,=r()
    while u:
        u-=1
        c,d=r()
        # print(c,d)
        if c<d:
            print(b[(d-1)*2]-b[(c-1)*2])
        else:
            print(b[(c*2)-1]-b[(d*2)-1])",1,True,False,False,False,False,True,True,True,False,True,True,False,False,False,1.0,1.0,1.0
1922_C,1922_C_Omar_jaki_100%,codeforces2024,human,qwen2p5-72b-instruct,"There are n cities located on the number line, the i -th city is in the point
a_i . The coordinates of the cities are given in ascending order, so a_1 < a_2
< \dots < a_n .

The distance between two cities x and y is equal to |a_x - a_y| .

For each city i , let's define the closest city j as the city such that the
distance between i and j is not greater than the distance between i and each
other city k . For example, if the cities are located in points [0, 8, 12, 15,
20] , then:

  * the closest city to the city 1 is the city 2 ; 
  * the closest city to the city 2 is the city 3 ; 
  * the closest city to the city 3 is the city 4 ; 
  * the closest city to the city 4 is the city 3 ; 
  * the closest city to the city 5 is the city 4 . 

The cities are located in such a way that for every city, the closest city is
unique. For example, it is impossible for the cities to be situated in points
[1, 2, 3] , since this would mean that the city 2 has two closest cities (1
and 3 , both having distance 1 ).

You can travel between cities. Suppose you are currently in the city x . Then
you can perform one of the following actions:

  * travel to any other city y , paying |a_x - a_y| coins; 
  * travel to the city which is the closest to x , paying 1 coin. 

You are given m queries. In each query, you will be given two cities, and you
have to calculate the minimum number of coins you have to spend to travel from
one city to the other city.

Input

The first line contains one integer t (1 \le t \le 10^4 ) — the number of test
cases.

Each test case is given in the following format:

  * the first line contains one integer n (2 \le n \le 10^5 ); 
  * the second line contains n integers a_1, a_2, \dots, a_n (0 \le a_1 < a_2 < \dots < a_n \le 10^9 ); 
  * the third line contains one integer m (1 \le m \le 10^5 ); 
  * then m lines follow; the i -th of them contains two integers x_i and y_i (1 \le x_i, y_i \le n ; x_i \ne y_i ), denoting that in the i -th query, you have to calculate the minimum number of coins you have to spend to travel from the city x_i to the city y_i . 

Additional constraints on the input:

  * in every test case, for each city, the closest city is determined uniquely; 
  * the sum of n over all test cases does not exceed 10^5 ; 
  * the sum of m over all test cases does not exceed 10^5 . 

Output

For each query, print one integer — the minimum number of coins you have to
spend.

Example

Input

    1
    
    5
    
    0 8 12 15 20
    
    5
    
    1 4
    
    1 5
    
    3 4
    
    3 2
    
    5 1

Output

    3
    8
    1
    4
    14
    
Note

Let's consider the first two queries in the example from the statement:

  * in the first query, you are initially in the city 1 . You can travel to the closest city (which is the city 2 ), paying 1 coin. Then you travel to the closest city (which is the city 3 ) again, paying 1 coin. Then you travel to the closest city (which is the city 4 ) again, paying 1 coin. In total, you spend 3 coins to get from the city 1 to the city 4 ; 
  * in the second query, you can use the same way to get from the city 1 to the city 4 , and then spend 5 coins to travel from the city 4 to the city 5 .","r=lambda : map(int,input().split())
t,=r()
while t:
    t-=1
    r()
    a=-1e9,*r(),2e9
    b=[0,0]
    # print(a)
    for w,x,y,z in zip(a,a[1:],a[2:],a[3:]):
        v=y-x
        b+=b[-2]+v**(v>(x-w)),b[-1]+v**(v>(z-y))
    # print(b,""B"")
    u,=r()
    while u:
        u-=1
        c,d=r()
        # print(c,d)
        if c<d:
            print(b[(d-1)*2]-b[(c-1)*2])
        else:
            print(b[(c*2)-1]-b[(d*2)-1])",1,True,False,False,True,True,True,False,True,False,False,False,True,False,True,1.0,1.0,1.0
1927_E,1927_E_matheusFranco_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given two integers n and k (k \le n ), where k is even.

A permutation of length n is an array consisting of n distinct integers from 1
to n in any order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is
not a permutation (as 2 appears twice in the array) and [0,1,2] is also not a
permutation (as n=3 , but 3 is not present in the array).

Your task is to construct a k -level permutation of length n .

A permutation is called k -level if, among all the sums of continuous segments
of length k (of which there are exactly n - k + 1 ), any two sums differ by no
more than 1 .

More formally, to determine if the permutation p is k -level, first construct
an array s of length n - k + 1 , where s_i=\sum_{j=i}^{i+k-1} p_j , i.e., the
i -th element is equal to the sum of p_i, p_{i+1}, \dots, p_{i+k-1} .

A permutation is called k -level if \max(s) - \min(s) \le 1 .

Find any k -level permutation of length n .

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. This is followed by the description of the test
cases.

The first and only line of each test case contains two integers n and k (2 \le
k \le n \le 2 \cdot 10^5 , k is even), where n is the length of the desired
permutation.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output any k -level permutation of length n .

It is guaranteed that such a permutation always exists given the constraints.

Example

Input

    5
    
    2 2
    
    3 2
    
    10 4
    
    13 4
    
    7 4

Output

    2 1
    1 3 2
    1 8 4 10 2 7 5 9 3 6
    4 10 1 13 5 9 2 12 6 8 3 11 7
    1 6 3 7 2 5 4
    
Note

In the second test case of the example:

  * p_1 + p_2 = 3 + 1 = 4 ; 
  * p_2 + p_3 = 1 + 2 = 3 . 

The maximum among the sums is 4 , and the minimum is 3 .","# https://codeforces.com/problemset/problem/1927/E
 
 
def case():
    n,k = map(int,input().split("" ""))
 
    permutation = [0] * n
 
    idx = 0
    idx_v = 1
 
    curr_v = 1
    for i in range(k):
        multiples_of_k_plus_i = i
        while multiples_of_k_plus_i < len(permutation):
            permutation[multiples_of_k_plus_i] = curr_v
            curr_v += 1
            multiples_of_k_plus_i += k
 
    result = "" "".join([str(v) for v in permutation])
    print(result)
 
 
def main():
    t = int(input())
    while t > 0:
        case()
        t -= 1
 
if __name__ == ""__main__"":
    main()",1,False,False,False,True,True,False,True,True,False,False,False,True,True,True,0.7856614795568755,0.3090875273725005,0.6666666666666666
1927_E,1927_E_matheusFranco_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given two integers n and k (k \le n ), where k is even.

A permutation of length n is an array consisting of n distinct integers from 1
to n in any order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is
not a permutation (as 2 appears twice in the array) and [0,1,2] is also not a
permutation (as n=3 , but 3 is not present in the array).

Your task is to construct a k -level permutation of length n .

A permutation is called k -level if, among all the sums of continuous segments
of length k (of which there are exactly n - k + 1 ), any two sums differ by no
more than 1 .

More formally, to determine if the permutation p is k -level, first construct
an array s of length n - k + 1 , where s_i=\sum_{j=i}^{i+k-1} p_j , i.e., the
i -th element is equal to the sum of p_i, p_{i+1}, \dots, p_{i+k-1} .

A permutation is called k -level if \max(s) - \min(s) \le 1 .

Find any k -level permutation of length n .

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. This is followed by the description of the test
cases.

The first and only line of each test case contains two integers n and k (2 \le
k \le n \le 2 \cdot 10^5 , k is even), where n is the length of the desired
permutation.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output any k -level permutation of length n .

It is guaranteed that such a permutation always exists given the constraints.

Example

Input

    5
    
    2 2
    
    3 2
    
    10 4
    
    13 4
    
    7 4

Output

    2 1
    1 3 2
    1 8 4 10 2 7 5 9 3 6
    4 10 1 13 5 9 2 12 6 8 3 11 7
    1 6 3 7 2 5 4
    
Note

In the second test case of the example:

  * p_1 + p_2 = 3 + 1 = 4 ; 
  * p_2 + p_3 = 1 + 2 = 3 . 

The maximum among the sums is 4 , and the minimum is 3 .","# https://codeforces.com/problemset/problem/1927/E
 
 
def case():
    n,k = map(int,input().split("" ""))
 
    permutation = [0] * n
 
    idx = 0
    idx_v = 1
 
    curr_v = 1
    for i in range(k):
        multiples_of_k_plus_i = i
        while multiples_of_k_plus_i < len(permutation):
            permutation[multiples_of_k_plus_i] = curr_v
            curr_v += 1
            multiples_of_k_plus_i += k
 
    result = "" "".join([str(v) for v in permutation])
    print(result)
 
 
def main():
    t = int(input())
    while t > 0:
        case()
        t -= 1
 
if __name__ == ""__main__"":
    main()",1,False,False,False,True,False,True,True,True,False,False,False,True,True,True,0.7856614795568755,0.3090875273725005,0.6666666666666666
1927_E,1927_E_matheusFranco_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given two integers n and k (k \le n ), where k is even.

A permutation of length n is an array consisting of n distinct integers from 1
to n in any order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is
not a permutation (as 2 appears twice in the array) and [0,1,2] is also not a
permutation (as n=3 , but 3 is not present in the array).

Your task is to construct a k -level permutation of length n .

A permutation is called k -level if, among all the sums of continuous segments
of length k (of which there are exactly n - k + 1 ), any two sums differ by no
more than 1 .

More formally, to determine if the permutation p is k -level, first construct
an array s of length n - k + 1 , where s_i=\sum_{j=i}^{i+k-1} p_j , i.e., the
i -th element is equal to the sum of p_i, p_{i+1}, \dots, p_{i+k-1} .

A permutation is called k -level if \max(s) - \min(s) \le 1 .

Find any k -level permutation of length n .

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. This is followed by the description of the test
cases.

The first and only line of each test case contains two integers n and k (2 \le
k \le n \le 2 \cdot 10^5 , k is even), where n is the length of the desired
permutation.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output any k -level permutation of length n .

It is guaranteed that such a permutation always exists given the constraints.

Example

Input

    5
    
    2 2
    
    3 2
    
    10 4
    
    13 4
    
    7 4

Output

    2 1
    1 3 2
    1 8 4 10 2 7 5 9 3 6
    4 10 1 13 5 9 2 12 6 8 3 11 7
    1 6 3 7 2 5 4
    
Note

In the second test case of the example:

  * p_1 + p_2 = 3 + 1 = 4 ; 
  * p_2 + p_3 = 1 + 2 = 3 . 

The maximum among the sums is 4 , and the minimum is 3 .","# https://codeforces.com/problemset/problem/1927/E
 
 
def case():
    n,k = map(int,input().split("" ""))
 
    permutation = [0] * n
 
    idx = 0
    idx_v = 1
 
    curr_v = 1
    for i in range(k):
        multiples_of_k_plus_i = i
        while multiples_of_k_plus_i < len(permutation):
            permutation[multiples_of_k_plus_i] = curr_v
            curr_v += 1
            multiples_of_k_plus_i += k
 
    result = "" "".join([str(v) for v in permutation])
    print(result)
 
 
def main():
    t = int(input())
    while t > 0:
        case()
        t -= 1
 
if __name__ == ""__main__"":
    main()",1,False,False,False,True,False,False,False,False,False,False,False,True,False,True,0.7856614795568755,0.3090875273725005,0.6666666666666666
1955_C,1955_C_joker_Pham_100%,codeforces2024,human,qwen2p5-72b-instruct,"n ships set out to explore the depths of the ocean. The ships are numbered
from 1 to n and follow each other in ascending order; the i -th ship has a
durability of a_i .

The Kraken attacked the ships k times in a specific order. First, it attacks
the first of the ships, then the last, then the first again, and so on.

Each attack by the Kraken reduces the durability of the ship by 1 . When the
durability of the ship drops to 0 , it sinks and is no longer subjected to
attacks (thus the ship ceases to be the first or last, and the Kraken only
attacks the ships that have not yet sunk). If all the ships have sunk, the
Kraken has nothing to attack and it swims away.

For example, if n=4 , k=5 , and a=[1, 2, 4, 3] , the following will happen:

  1. The Kraken attacks the first ship, its durability becomes zero and now a = [2, 4, 3] ; 
  2. The Kraken attacks the last ship, now a = [2, 4, 2] ; 
  3. The Kraken attacks the first ship, now a = [1, 4, 2] ; 
  4. The Kraken attacks the last ship, now a = [1, 4, 1] ; 
  5. The Kraken attacks the first ship, its durability becomes zero and now a = [4, 1] . 

How many ships were sunk after the Kraken's attack?

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains two integers n and k (1 \le n \le 2
\cdot 10^5 , 1 \le k \le 10^{15} ) — the number of ships and how many times
the Kraken will attack the ships.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^9 ) — the durability of the ships.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output the number of ships sunk by the Kraken on a
separate line.

Example

Input

    6
    
    4 5
    
    1 2 4 3
    
    4 6
    
    1 2 4 3
    
    5 20
    
    2 7 1 8 2
    
    2 2
    
    3 2
    
    2 15
    
    1 5
    
    2 7
    
    5 2

Output

    2
    3
    5
    0
    2
    2","def solve(n, k, a):
    l, r = 0, n - 1
    sunks = 0
    while l <= r:
        if k == 0:
            break
        if l == r:
            if k >= a[r]:
                sunks += 1
                break
            break
            
        if a[l] <= a[r]:
            if k >= a[l] * 2:
                k -= a[l] * 2
                a[r] -= a[l]
                if a[r] == 0:
                    sunks += 1
                    r -= 1
                sunks += 1
                l += 1
                continue
            else:
                if a[l] * 2 - 1 == k:
                    sunks += 1
                    break
                else:
                    break
                
        if k == 0:
            break
                
        if a[r] < a[l]:
            if k >= a[r] * 2:
                k -= a[r] * 2
                a[l] -= a[r]
                if a[l] == 0:
                    sunks += 1
                    l += 1
                sunks += 1
                r -= 1
                continue
            else:
                if a[r] * 2 == k:
                    sunks += 1
                    break
                else:
                    break
            
        
    return sunks
    
# Read input
t = int(input())  # Number of test cases
for _ in range(t):
    n, k = map(int, input().split())
    a = map(int, input().split())
    print(solve(n, k, list(a)))",1,True,False,False,True,False,False,True,False,True,False,True,True,True,True,1.0,0.942571444079393,1.0
1955_C,1955_C_joker_Pham_100%,codeforces2024,human,qwen2p5-72b-instruct,"n ships set out to explore the depths of the ocean. The ships are numbered
from 1 to n and follow each other in ascending order; the i -th ship has a
durability of a_i .

The Kraken attacked the ships k times in a specific order. First, it attacks
the first of the ships, then the last, then the first again, and so on.

Each attack by the Kraken reduces the durability of the ship by 1 . When the
durability of the ship drops to 0 , it sinks and is no longer subjected to
attacks (thus the ship ceases to be the first or last, and the Kraken only
attacks the ships that have not yet sunk). If all the ships have sunk, the
Kraken has nothing to attack and it swims away.

For example, if n=4 , k=5 , and a=[1, 2, 4, 3] , the following will happen:

  1. The Kraken attacks the first ship, its durability becomes zero and now a = [2, 4, 3] ; 
  2. The Kraken attacks the last ship, now a = [2, 4, 2] ; 
  3. The Kraken attacks the first ship, now a = [1, 4, 2] ; 
  4. The Kraken attacks the last ship, now a = [1, 4, 1] ; 
  5. The Kraken attacks the first ship, its durability becomes zero and now a = [4, 1] . 

How many ships were sunk after the Kraken's attack?

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains two integers n and k (1 \le n \le 2
\cdot 10^5 , 1 \le k \le 10^{15} ) — the number of ships and how many times
the Kraken will attack the ships.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^9 ) — the durability of the ships.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output the number of ships sunk by the Kraken on a
separate line.

Example

Input

    6
    
    4 5
    
    1 2 4 3
    
    4 6
    
    1 2 4 3
    
    5 20
    
    2 7 1 8 2
    
    2 2
    
    3 2
    
    2 15
    
    1 5
    
    2 7
    
    5 2

Output

    2
    3
    5
    0
    2
    2","def solve(n, k, a):
    l, r = 0, n - 1
    sunks = 0
    while l <= r:
        if k == 0:
            break
        if l == r:
            if k >= a[r]:
                sunks += 1
                break
            break
            
        if a[l] <= a[r]:
            if k >= a[l] * 2:
                k -= a[l] * 2
                a[r] -= a[l]
                if a[r] == 0:
                    sunks += 1
                    r -= 1
                sunks += 1
                l += 1
                continue
            else:
                if a[l] * 2 - 1 == k:
                    sunks += 1
                    break
                else:
                    break
                
        if k == 0:
            break
                
        if a[r] < a[l]:
            if k >= a[r] * 2:
                k -= a[r] * 2
                a[l] -= a[r]
                if a[l] == 0:
                    sunks += 1
                    l += 1
                sunks += 1
                r -= 1
                continue
            else:
                if a[r] * 2 == k:
                    sunks += 1
                    break
                else:
                    break
            
        
    return sunks
    
# Read input
t = int(input())  # Number of test cases
for _ in range(t):
    n, k = map(int, input().split())
    a = map(int, input().split())
    print(solve(n, k, list(a)))",1,True,False,False,False,False,False,True,False,False,False,False,True,False,False,1.0,0.942571444079393,1.0
1955_C,1955_C_joker_Pham_100%,codeforces2024,human,qwen2p5-72b-instruct,"n ships set out to explore the depths of the ocean. The ships are numbered
from 1 to n and follow each other in ascending order; the i -th ship has a
durability of a_i .

The Kraken attacked the ships k times in a specific order. First, it attacks
the first of the ships, then the last, then the first again, and so on.

Each attack by the Kraken reduces the durability of the ship by 1 . When the
durability of the ship drops to 0 , it sinks and is no longer subjected to
attacks (thus the ship ceases to be the first or last, and the Kraken only
attacks the ships that have not yet sunk). If all the ships have sunk, the
Kraken has nothing to attack and it swims away.

For example, if n=4 , k=5 , and a=[1, 2, 4, 3] , the following will happen:

  1. The Kraken attacks the first ship, its durability becomes zero and now a = [2, 4, 3] ; 
  2. The Kraken attacks the last ship, now a = [2, 4, 2] ; 
  3. The Kraken attacks the first ship, now a = [1, 4, 2] ; 
  4. The Kraken attacks the last ship, now a = [1, 4, 1] ; 
  5. The Kraken attacks the first ship, its durability becomes zero and now a = [4, 1] . 

How many ships were sunk after the Kraken's attack?

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains two integers n and k (1 \le n \le 2
\cdot 10^5 , 1 \le k \le 10^{15} ) — the number of ships and how many times
the Kraken will attack the ships.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^9 ) — the durability of the ships.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output the number of ships sunk by the Kraken on a
separate line.

Example

Input

    6
    
    4 5
    
    1 2 4 3
    
    4 6
    
    1 2 4 3
    
    5 20
    
    2 7 1 8 2
    
    2 2
    
    3 2
    
    2 15
    
    1 5
    
    2 7
    
    5 2

Output

    2
    3
    5
    0
    2
    2","def solve(n, k, a):
    l, r = 0, n - 1
    sunks = 0
    while l <= r:
        if k == 0:
            break
        if l == r:
            if k >= a[r]:
                sunks += 1
                break
            break
            
        if a[l] <= a[r]:
            if k >= a[l] * 2:
                k -= a[l] * 2
                a[r] -= a[l]
                if a[r] == 0:
                    sunks += 1
                    r -= 1
                sunks += 1
                l += 1
                continue
            else:
                if a[l] * 2 - 1 == k:
                    sunks += 1
                    break
                else:
                    break
                
        if k == 0:
            break
                
        if a[r] < a[l]:
            if k >= a[r] * 2:
                k -= a[r] * 2
                a[l] -= a[r]
                if a[l] == 0:
                    sunks += 1
                    l += 1
                sunks += 1
                r -= 1
                continue
            else:
                if a[r] * 2 == k:
                    sunks += 1
                    break
                else:
                    break
            
        
    return sunks
    
# Read input
t = int(input())  # Number of test cases
for _ in range(t):
    n, k = map(int, input().split())
    a = map(int, input().split())
    print(solve(n, k, list(a)))",1,True,False,False,True,False,False,True,False,False,False,False,False,True,False,1.0,0.942571444079393,1.0
1972_D2,1972_D2_light616_100%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * b \cdot \gcd(a,b) is a multiple of a+b . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    0
    1
    1
    6
    423
    5933961
    
Note

In the first test case, no pair satisfies the conditions.

In the fourth test case, (2,2),(3,6),(4,4),(6,3),(6,6),(8,8) satisfy the
conditions.","import math
 
def fun():
    x = 1
    cnt = 0
    n, m = map(int, input().split())
    while x * x <= n:
        y = 1
        while (x + y) * x <= n and (x + y) * y <= m:
            if math.gcd(x, y) == 1:
                cnt += min(n // ((x + y) * x), m // ((x + y) * y))
            y += 1
        x += 1
    print(cnt)
 
def main():
    t = int(input())
    for _ in range(t):
        fun()
if __name__ == ""__main__"":
    main()",1,True,False,False,True,True,True,True,True,False,False,False,True,True,True,1.0,1.0,1.0
1972_D2,1972_D2_light616_100%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * b \cdot \gcd(a,b) is a multiple of a+b . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    0
    1
    1
    6
    423
    5933961
    
Note

In the first test case, no pair satisfies the conditions.

In the fourth test case, (2,2),(3,6),(4,4),(6,3),(6,6),(8,8) satisfy the
conditions.","import math
 
def fun():
    x = 1
    cnt = 0
    n, m = map(int, input().split())
    while x * x <= n:
        y = 1
        while (x + y) * x <= n and (x + y) * y <= m:
            if math.gcd(x, y) == 1:
                cnt += min(n // ((x + y) * x), m // ((x + y) * y))
            y += 1
        x += 1
    print(cnt)
 
def main():
    t = int(input())
    for _ in range(t):
        fun()
if __name__ == ""__main__"":
    main()",1,True,False,False,True,True,True,False,False,False,False,False,True,False,True,1.0,1.0,1.0
1972_D2,1972_D2_light616_100%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * b \cdot \gcd(a,b) is a multiple of a+b . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    0
    1
    1
    6
    423
    5933961
    
Note

In the first test case, no pair satisfies the conditions.

In the fourth test case, (2,2),(3,6),(4,4),(6,3),(6,6),(8,8) satisfy the
conditions.","import math
 
def fun():
    x = 1
    cnt = 0
    n, m = map(int, input().split())
    while x * x <= n:
        y = 1
        while (x + y) * x <= n and (x + y) * y <= m:
            if math.gcd(x, y) == 1:
                cnt += min(n // ((x + y) * x), m // ((x + y) * y))
            y += 1
        x += 1
    print(cnt)
 
def main():
    t = int(input())
    for _ in range(t):
        fun()
if __name__ == ""__main__"":
    main()",1,True,False,False,True,True,True,True,True,True,True,False,True,True,True,1.0,1.0,1.0
1950_A,1950_A_graidy_011888_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given three digits a , b , and c . Determine whether they form a
stair, a peak, or neither.

  * A stair satisfies the condition a<b<c . 
  * A peak satisfies the condition a<b>c . 

Input

The first line contains a single integer t (1 \leq t \leq 1000 ) — the number
of test cases.

The only line of each test case contains three digits a , b , c (0 \leq a , b
, c \leq 9 ).

Output

For each test case, output ""STAIR"" if the digits form a stair, ""PEAK"" if the
digits form a peak, and ""NONE"" otherwise (output the strings without quotes).

Example

Input

    7
    
    1 2 3
    
    3 2 1
    
    1 5 3
    
    3 4 1
    
    0 0 0
    
    4 1 7
    
    4 5 7

Output

    STAIR
    NONE
    PEAK
    PEAK
    NONE
    NONE
    STAIR","from random import randint
 
i = 1
while i <= 1000:
    x = randint(1, 9)
    y = randint(1, 9)
    z = randint(1, 9)
    res = """"
    
    if x < y:
        if y > z:
            res = ""peak""
        elif y < z:
            res = ""stair""
        else:
            res = ""none""
    else:
        res = ""none""
        
    print(x, y, z, sep="" "")
    print(res)
    
    i += 1",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1950_A,1950_A_graidy_011888_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given three digits a , b , and c . Determine whether they form a
stair, a peak, or neither.

  * A stair satisfies the condition a<b<c . 
  * A peak satisfies the condition a<b>c . 

Input

The first line contains a single integer t (1 \leq t \leq 1000 ) — the number
of test cases.

The only line of each test case contains three digits a , b , c (0 \leq a , b
, c \leq 9 ).

Output

For each test case, output ""STAIR"" if the digits form a stair, ""PEAK"" if the
digits form a peak, and ""NONE"" otherwise (output the strings without quotes).

Example

Input

    7
    
    1 2 3
    
    3 2 1
    
    1 5 3
    
    3 4 1
    
    0 0 0
    
    4 1 7
    
    4 5 7

Output

    STAIR
    NONE
    PEAK
    PEAK
    NONE
    NONE
    STAIR","from random import randint
 
i = 1
while i <= 1000:
    x = randint(1, 9)
    y = randint(1, 9)
    z = randint(1, 9)
    res = """"
    
    if x < y:
        if y > z:
            res = ""peak""
        elif y < z:
            res = ""stair""
        else:
            res = ""none""
    else:
        res = ""none""
        
    print(x, y, z, sep="" "")
    print(res)
    
    i += 1",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1950_A,1950_A_graidy_011888_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given three digits a , b , and c . Determine whether they form a
stair, a peak, or neither.

  * A stair satisfies the condition a<b<c . 
  * A peak satisfies the condition a<b>c . 

Input

The first line contains a single integer t (1 \leq t \leq 1000 ) — the number
of test cases.

The only line of each test case contains three digits a , b , c (0 \leq a , b
, c \leq 9 ).

Output

For each test case, output ""STAIR"" if the digits form a stair, ""PEAK"" if the
digits form a peak, and ""NONE"" otherwise (output the strings without quotes).

Example

Input

    7
    
    1 2 3
    
    3 2 1
    
    1 5 3
    
    3 4 1
    
    0 0 0
    
    4 1 7
    
    4 5 7

Output

    STAIR
    NONE
    PEAK
    PEAK
    NONE
    NONE
    STAIR","from random import randint
 
i = 1
while i <= 1000:
    x = randint(1, 9)
    y = randint(1, 9)
    z = randint(1, 9)
    res = """"
    
    if x < y:
        if y > z:
            res = ""peak""
        elif y < z:
            res = ""stair""
        else:
            res = ""none""
    else:
        res = ""none""
        
    print(x, y, z, sep="" "")
    print(res)
    
    i += 1",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1941_C,1941_C_heisenberg441_6.25%,codeforces2024,human,qwen2p5-72b-instruct,"Rudolf has a string s of length n . Rudolf considers the string s to be ugly
if it contains the substring^\dagger ""pie"" or the substring ""map"", otherwise
the string s will be considered beautiful.

For example, ""ppiee"", ""mmap"", ""dfpiefghmap"" are ugly strings, while ""mathp"",
""ppiiee"" are beautiful strings.

Rudolf wants to shorten the string s by removing some characters to make it
beautiful.

The main character doesn't like to strain, so he asks you to make the string
beautiful by removing the minimum number of characters. He can remove
characters from any positions in the string (not just from the beginning or
end of the string).

^\dagger String a is a substring of b if there exists a consecutive segment of
characters in string b equal to a .

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases. The descriptions of the test cases follow.

The first line of each test case contains a single integer n (1 \le n \le 10^6
) — the length of the string s .

The next line of each test case contains the string s of length n . The string
s consists of lowercase Latin letters.

The sum of n over all test cases does not exceed 10^6 .

Output

For each test case, output a single integer — the minimum number of characters
that need to be deleted to make the string s beautiful. If the string is
initially beautiful, then output 0 .

Example

Input

    6
    
    9
    
    mmapnapie
    
    9
    
    azabazapi
    
    8
    
    mappppie
    
    18
    
    mapmapmapmapmapmap
    
    1
    
    p
    
    11
    
    pppiepieeee

Output

    2
    0
    2
    6
    0
    2
    
Note

In the first test case, for example, you can delete the 4 th and 9 th
characters to make the string beautiful.

In the second test case, the string is already beautiful.","def solve(s):
    if s=='mapie':
        return 1
    ans=0
    while s.find('map')!=-1:
        s=s[:s.find('map')]+s[s.find('map')+2:]
        ans+=1
    while s.find('pie')!=-1:
        s=s[:s.find('pie')]+s[s.find('pie')+2:]
        ans+=1
    return ans
 
t=int(input())
for i in range(t):
    n=int(input())
    s=input()
    print(solve(s))",1,False,False,False,False,False,True,False,True,False,False,False,False,False,False,1.0,1.0,1.0
1941_C,1941_C_heisenberg441_6.25%,codeforces2024,human,qwen2p5-72b-instruct,"Rudolf has a string s of length n . Rudolf considers the string s to be ugly
if it contains the substring^\dagger ""pie"" or the substring ""map"", otherwise
the string s will be considered beautiful.

For example, ""ppiee"", ""mmap"", ""dfpiefghmap"" are ugly strings, while ""mathp"",
""ppiiee"" are beautiful strings.

Rudolf wants to shorten the string s by removing some characters to make it
beautiful.

The main character doesn't like to strain, so he asks you to make the string
beautiful by removing the minimum number of characters. He can remove
characters from any positions in the string (not just from the beginning or
end of the string).

^\dagger String a is a substring of b if there exists a consecutive segment of
characters in string b equal to a .

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases. The descriptions of the test cases follow.

The first line of each test case contains a single integer n (1 \le n \le 10^6
) — the length of the string s .

The next line of each test case contains the string s of length n . The string
s consists of lowercase Latin letters.

The sum of n over all test cases does not exceed 10^6 .

Output

For each test case, output a single integer — the minimum number of characters
that need to be deleted to make the string s beautiful. If the string is
initially beautiful, then output 0 .

Example

Input

    6
    
    9
    
    mmapnapie
    
    9
    
    azabazapi
    
    8
    
    mappppie
    
    18
    
    mapmapmapmapmapmap
    
    1
    
    p
    
    11
    
    pppiepieeee

Output

    2
    0
    2
    6
    0
    2
    
Note

In the first test case, for example, you can delete the 4 th and 9 th
characters to make the string beautiful.

In the second test case, the string is already beautiful.","def solve(s):
    if s=='mapie':
        return 1
    ans=0
    while s.find('map')!=-1:
        s=s[:s.find('map')]+s[s.find('map')+2:]
        ans+=1
    while s.find('pie')!=-1:
        s=s[:s.find('pie')]+s[s.find('pie')+2:]
        ans+=1
    return ans
 
t=int(input())
for i in range(t):
    n=int(input())
    s=input()
    print(solve(s))",1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1941_C,1941_C_heisenberg441_6.25%,codeforces2024,human,qwen2p5-72b-instruct,"Rudolf has a string s of length n . Rudolf considers the string s to be ugly
if it contains the substring^\dagger ""pie"" or the substring ""map"", otherwise
the string s will be considered beautiful.

For example, ""ppiee"", ""mmap"", ""dfpiefghmap"" are ugly strings, while ""mathp"",
""ppiiee"" are beautiful strings.

Rudolf wants to shorten the string s by removing some characters to make it
beautiful.

The main character doesn't like to strain, so he asks you to make the string
beautiful by removing the minimum number of characters. He can remove
characters from any positions in the string (not just from the beginning or
end of the string).

^\dagger String a is a substring of b if there exists a consecutive segment of
characters in string b equal to a .

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases. The descriptions of the test cases follow.

The first line of each test case contains a single integer n (1 \le n \le 10^6
) — the length of the string s .

The next line of each test case contains the string s of length n . The string
s consists of lowercase Latin letters.

The sum of n over all test cases does not exceed 10^6 .

Output

For each test case, output a single integer — the minimum number of characters
that need to be deleted to make the string s beautiful. If the string is
initially beautiful, then output 0 .

Example

Input

    6
    
    9
    
    mmapnapie
    
    9
    
    azabazapi
    
    8
    
    mappppie
    
    18
    
    mapmapmapmapmapmap
    
    1
    
    p
    
    11
    
    pppiepieeee

Output

    2
    0
    2
    6
    0
    2
    
Note

In the first test case, for example, you can delete the 4 th and 9 th
characters to make the string beautiful.

In the second test case, the string is already beautiful.","def solve(s):
    if s=='mapie':
        return 1
    ans=0
    while s.find('map')!=-1:
        s=s[:s.find('map')]+s[s.find('map')+2:]
        ans+=1
    while s.find('pie')!=-1:
        s=s[:s.find('pie')]+s[s.find('pie')+2:]
        ans+=1
    return ans
 
t=int(input())
for i in range(t):
    n=int(input())
    s=input()
    print(solve(s))",1,False,False,False,False,False,True,True,False,False,False,False,False,False,False,1.0,1.0,1.0
1957_C,1957_C_hx199411_2.78%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an n \times n chessboard where you and the computer take turns
alternatingly to place white rooks & black rooks on the board respectively.
While placing rooks, you have to ensure that no two rooks attack each other.
Two rooks attack each other if they share the same row or column regardless of
color.

A valid move is placing a rook on a position (r , c ) such that it doesn't
attack any other rook.

You start first, and when you make a valid move in your turn, placing a white
rook at position (r , c ), the computer will mirror you and place a black rook
at position (c , r ) in its turn. If r = c , then the computer can't mirror
your move, and skips its turn.

You have already played k moves with the computer (the computer tries to
mirror these moves too), and you must continue playing the game until there
are no valid moves remaining. How many different final configurations are
possible when you continue the game after the k moves? It is guaranteed that
the k moves and the implied computer moves are valid. Since the answer may be
large, print it modulo 10^9+7 .

Two configurations are considered different if there exists a coordinate (r ,
c ) which has a rook in one configuration, but not in the other or the color
of the rook on the coordinate is different.

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case contains two integers n and k (1 \leq n \leq
3 \cdot 10^5 , 0 \leq k \leq n ) — the size of the chessboard and the number
of moves you have already played respectively.

Each of the next k lines of the test case contains two integers r_i and c_i ,
denoting the i -th move you made.

It is guaranteed that the k moves and the implied computer moves are valid.

It is guaranteed that the sum of n over all test cases does not exceed 3 \cdot
10^5 .

Output

For each test case, output a single integer on a new line — the total number
of possible final configurations modulo 10^9+7 .

Example

Input

    3
    
    4 1
    
    1 2
    
    8 1
    
    7 6
    
    1000 4
    
    4 4
    
    952 343
    
    222 333
    
    90 91

Output

    3
    331
    671968183
    
Note

In the first test case, we have a 4 \times 4 grid and you've already played 1
move. After you and the computer play a turn, we have a white rook at (1 , 2
), and a black rook at (2 , 1 ). There are three possible configurations from
this state —

  1. You place a white rook at (3 , 4 ) and the computer places a black rook at (4 , 3 ) as a response. 
  2. You place a white rook at (4 , 3 ) and the computer places a black rook at (3 , 4 ) as a response. 
  3. You place a white rook at (3 , 3 ) and then at (4 , 4 ), or the other way around. They both result in the same configuration. 

![](https://espresso.codeforces.com/e7812b315860201676eb89d5690dd84b3eb85862.png)","t = int(input())
while t:
    t -= 1
    n,k = list(map(int,input().split(' ')))
    num = 0
    for i in range(k):
        c,r = list(map(int,input().split(' ')))
        if c == r:
            num += 1
        else:
            num += 2
    m = n - num
    if m == 0:
        print(0)
    elif m == 1:
        print(1)
    else:
        dp = [0 for i in range(m+1)]
        dp[1] = 1
        dp[2] = 3
        for i in range(3,m+1):
            dp[i] = (dp[i-1] + (i-1)*dp[i-2]*2)%(10**9+7)
        print(dp[m])",1,False,False,False,True,True,True,True,True,False,True,True,True,True,True,0.7433089548186087,0.3209398334641705,0.5833333333333334
1957_C,1957_C_hx199411_2.78%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an n \times n chessboard where you and the computer take turns
alternatingly to place white rooks & black rooks on the board respectively.
While placing rooks, you have to ensure that no two rooks attack each other.
Two rooks attack each other if they share the same row or column regardless of
color.

A valid move is placing a rook on a position (r , c ) such that it doesn't
attack any other rook.

You start first, and when you make a valid move in your turn, placing a white
rook at position (r , c ), the computer will mirror you and place a black rook
at position (c , r ) in its turn. If r = c , then the computer can't mirror
your move, and skips its turn.

You have already played k moves with the computer (the computer tries to
mirror these moves too), and you must continue playing the game until there
are no valid moves remaining. How many different final configurations are
possible when you continue the game after the k moves? It is guaranteed that
the k moves and the implied computer moves are valid. Since the answer may be
large, print it modulo 10^9+7 .

Two configurations are considered different if there exists a coordinate (r ,
c ) which has a rook in one configuration, but not in the other or the color
of the rook on the coordinate is different.

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case contains two integers n and k (1 \leq n \leq
3 \cdot 10^5 , 0 \leq k \leq n ) — the size of the chessboard and the number
of moves you have already played respectively.

Each of the next k lines of the test case contains two integers r_i and c_i ,
denoting the i -th move you made.

It is guaranteed that the k moves and the implied computer moves are valid.

It is guaranteed that the sum of n over all test cases does not exceed 3 \cdot
10^5 .

Output

For each test case, output a single integer on a new line — the total number
of possible final configurations modulo 10^9+7 .

Example

Input

    3
    
    4 1
    
    1 2
    
    8 1
    
    7 6
    
    1000 4
    
    4 4
    
    952 343
    
    222 333
    
    90 91

Output

    3
    331
    671968183
    
Note

In the first test case, we have a 4 \times 4 grid and you've already played 1
move. After you and the computer play a turn, we have a white rook at (1 , 2
), and a black rook at (2 , 1 ). There are three possible configurations from
this state —

  1. You place a white rook at (3 , 4 ) and the computer places a black rook at (4 , 3 ) as a response. 
  2. You place a white rook at (4 , 3 ) and the computer places a black rook at (3 , 4 ) as a response. 
  3. You place a white rook at (3 , 3 ) and then at (4 , 4 ), or the other way around. They both result in the same configuration. 

![](https://espresso.codeforces.com/e7812b315860201676eb89d5690dd84b3eb85862.png)","t = int(input())
while t:
    t -= 1
    n,k = list(map(int,input().split(' ')))
    num = 0
    for i in range(k):
        c,r = list(map(int,input().split(' ')))
        if c == r:
            num += 1
        else:
            num += 2
    m = n - num
    if m == 0:
        print(0)
    elif m == 1:
        print(1)
    else:
        dp = [0 for i in range(m+1)]
        dp[1] = 1
        dp[2] = 3
        for i in range(3,m+1):
            dp[i] = (dp[i-1] + (i-1)*dp[i-2]*2)%(10**9+7)
        print(dp[m])",1,False,False,False,True,True,True,True,True,False,False,False,True,True,True,0.7433089548186087,0.3209398334641705,0.5833333333333334
1957_C,1957_C_hx199411_2.78%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an n \times n chessboard where you and the computer take turns
alternatingly to place white rooks & black rooks on the board respectively.
While placing rooks, you have to ensure that no two rooks attack each other.
Two rooks attack each other if they share the same row or column regardless of
color.

A valid move is placing a rook on a position (r , c ) such that it doesn't
attack any other rook.

You start first, and when you make a valid move in your turn, placing a white
rook at position (r , c ), the computer will mirror you and place a black rook
at position (c , r ) in its turn. If r = c , then the computer can't mirror
your move, and skips its turn.

You have already played k moves with the computer (the computer tries to
mirror these moves too), and you must continue playing the game until there
are no valid moves remaining. How many different final configurations are
possible when you continue the game after the k moves? It is guaranteed that
the k moves and the implied computer moves are valid. Since the answer may be
large, print it modulo 10^9+7 .

Two configurations are considered different if there exists a coordinate (r ,
c ) which has a rook in one configuration, but not in the other or the color
of the rook on the coordinate is different.

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case contains two integers n and k (1 \leq n \leq
3 \cdot 10^5 , 0 \leq k \leq n ) — the size of the chessboard and the number
of moves you have already played respectively.

Each of the next k lines of the test case contains two integers r_i and c_i ,
denoting the i -th move you made.

It is guaranteed that the k moves and the implied computer moves are valid.

It is guaranteed that the sum of n over all test cases does not exceed 3 \cdot
10^5 .

Output

For each test case, output a single integer on a new line — the total number
of possible final configurations modulo 10^9+7 .

Example

Input

    3
    
    4 1
    
    1 2
    
    8 1
    
    7 6
    
    1000 4
    
    4 4
    
    952 343
    
    222 333
    
    90 91

Output

    3
    331
    671968183
    
Note

In the first test case, we have a 4 \times 4 grid and you've already played 1
move. After you and the computer play a turn, we have a white rook at (1 , 2
), and a black rook at (2 , 1 ). There are three possible configurations from
this state —

  1. You place a white rook at (3 , 4 ) and the computer places a black rook at (4 , 3 ) as a response. 
  2. You place a white rook at (4 , 3 ) and the computer places a black rook at (3 , 4 ) as a response. 
  3. You place a white rook at (3 , 3 ) and then at (4 , 4 ), or the other way around. They both result in the same configuration. 

![](https://espresso.codeforces.com/e7812b315860201676eb89d5690dd84b3eb85862.png)","t = int(input())
while t:
    t -= 1
    n,k = list(map(int,input().split(' ')))
    num = 0
    for i in range(k):
        c,r = list(map(int,input().split(' ')))
        if c == r:
            num += 1
        else:
            num += 2
    m = n - num
    if m == 0:
        print(0)
    elif m == 1:
        print(1)
    else:
        dp = [0 for i in range(m+1)]
        dp[1] = 1
        dp[2] = 3
        for i in range(3,m+1):
            dp[i] = (dp[i-1] + (i-1)*dp[i-2]*2)%(10**9+7)
        print(dp[m])",1,False,False,False,True,True,True,True,True,True,True,True,True,True,True,0.7433089548186087,0.3209398334641705,0.5833333333333334
1922_C,1922_C_Omar_jaki_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"There are n cities located on the number line, the i -th city is in the point
a_i . The coordinates of the cities are given in ascending order, so a_1 < a_2
< \dots < a_n .

The distance between two cities x and y is equal to |a_x - a_y| .

For each city i , let's define the closest city j as the city such that the
distance between i and j is not greater than the distance between i and each
other city k . For example, if the cities are located in points [0, 8, 12, 15,
20] , then:

  * the closest city to the city 1 is the city 2 ; 
  * the closest city to the city 2 is the city 3 ; 
  * the closest city to the city 3 is the city 4 ; 
  * the closest city to the city 4 is the city 3 ; 
  * the closest city to the city 5 is the city 4 . 

The cities are located in such a way that for every city, the closest city is
unique. For example, it is impossible for the cities to be situated in points
[1, 2, 3] , since this would mean that the city 2 has two closest cities (1
and 3 , both having distance 1 ).

You can travel between cities. Suppose you are currently in the city x . Then
you can perform one of the following actions:

  * travel to any other city y , paying |a_x - a_y| coins; 
  * travel to the city which is the closest to x , paying 1 coin. 

You are given m queries. In each query, you will be given two cities, and you
have to calculate the minimum number of coins you have to spend to travel from
one city to the other city.

Input

The first line contains one integer t (1 \le t \le 10^4 ) — the number of test
cases.

Each test case is given in the following format:

  * the first line contains one integer n (2 \le n \le 10^5 ); 
  * the second line contains n integers a_1, a_2, \dots, a_n (0 \le a_1 < a_2 < \dots < a_n \le 10^9 ); 
  * the third line contains one integer m (1 \le m \le 10^5 ); 
  * then m lines follow; the i -th of them contains two integers x_i and y_i (1 \le x_i, y_i \le n ; x_i \ne y_i ), denoting that in the i -th query, you have to calculate the minimum number of coins you have to spend to travel from the city x_i to the city y_i . 

Additional constraints on the input:

  * in every test case, for each city, the closest city is determined uniquely; 
  * the sum of n over all test cases does not exceed 10^5 ; 
  * the sum of m over all test cases does not exceed 10^5 . 

Output

For each query, print one integer — the minimum number of coins you have to
spend.

Example

Input

    1
    
    5
    
    0 8 12 15 20
    
    5
    
    1 4
    
    1 5
    
    3 4
    
    3 2
    
    5 1

Output

    3
    8
    1
    4
    14
    
Note

Let's consider the first two queries in the example from the statement:

  * in the first query, you are initially in the city 1 . You can travel to the closest city (which is the city 2 ), paying 1 coin. Then you travel to the closest city (which is the city 3 ) again, paying 1 coin. Then you travel to the closest city (which is the city 4 ) again, paying 1 coin. In total, you spend 3 coins to get from the city 1 to the city 4 ; 
  * in the second query, you can use the same way to get from the city 1 to the city 4 , and then spend 5 coins to travel from the city 4 to the city 5 .","r=lambda : map(int,input().split())
t,=r()
while t:
    t-=1
    r()
    a=-1e9,*r(),2e9
    b=[0,0]
    # print(a)
    for w,x,y,z in zip(a,a[1:],a[2:],a[3:]):
        v=y-x
        b+=b[-2]+v**(v>(x-w)),b[-1]+v**(v>(z-y))
    print(b,""B"")
    u,=r()
    while u:
        u-=1
        c,d=r()
        # print(c,d)
        if c<d:
            print(b[(d-1)*2]-b[(c-1)*2])
        else:
            print(b[(c*2)-1]-b[(d*2)-1])",1,False,False,False,True,False,True,False,False,False,False,False,True,True,True,1.0,1.0,1.0
1922_C,1922_C_Omar_jaki_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"There are n cities located on the number line, the i -th city is in the point
a_i . The coordinates of the cities are given in ascending order, so a_1 < a_2
< \dots < a_n .

The distance between two cities x and y is equal to |a_x - a_y| .

For each city i , let's define the closest city j as the city such that the
distance between i and j is not greater than the distance between i and each
other city k . For example, if the cities are located in points [0, 8, 12, 15,
20] , then:

  * the closest city to the city 1 is the city 2 ; 
  * the closest city to the city 2 is the city 3 ; 
  * the closest city to the city 3 is the city 4 ; 
  * the closest city to the city 4 is the city 3 ; 
  * the closest city to the city 5 is the city 4 . 

The cities are located in such a way that for every city, the closest city is
unique. For example, it is impossible for the cities to be situated in points
[1, 2, 3] , since this would mean that the city 2 has two closest cities (1
and 3 , both having distance 1 ).

You can travel between cities. Suppose you are currently in the city x . Then
you can perform one of the following actions:

  * travel to any other city y , paying |a_x - a_y| coins; 
  * travel to the city which is the closest to x , paying 1 coin. 

You are given m queries. In each query, you will be given two cities, and you
have to calculate the minimum number of coins you have to spend to travel from
one city to the other city.

Input

The first line contains one integer t (1 \le t \le 10^4 ) — the number of test
cases.

Each test case is given in the following format:

  * the first line contains one integer n (2 \le n \le 10^5 ); 
  * the second line contains n integers a_1, a_2, \dots, a_n (0 \le a_1 < a_2 < \dots < a_n \le 10^9 ); 
  * the third line contains one integer m (1 \le m \le 10^5 ); 
  * then m lines follow; the i -th of them contains two integers x_i and y_i (1 \le x_i, y_i \le n ; x_i \ne y_i ), denoting that in the i -th query, you have to calculate the minimum number of coins you have to spend to travel from the city x_i to the city y_i . 

Additional constraints on the input:

  * in every test case, for each city, the closest city is determined uniquely; 
  * the sum of n over all test cases does not exceed 10^5 ; 
  * the sum of m over all test cases does not exceed 10^5 . 

Output

For each query, print one integer — the minimum number of coins you have to
spend.

Example

Input

    1
    
    5
    
    0 8 12 15 20
    
    5
    
    1 4
    
    1 5
    
    3 4
    
    3 2
    
    5 1

Output

    3
    8
    1
    4
    14
    
Note

Let's consider the first two queries in the example from the statement:

  * in the first query, you are initially in the city 1 . You can travel to the closest city (which is the city 2 ), paying 1 coin. Then you travel to the closest city (which is the city 3 ) again, paying 1 coin. Then you travel to the closest city (which is the city 4 ) again, paying 1 coin. In total, you spend 3 coins to get from the city 1 to the city 4 ; 
  * in the second query, you can use the same way to get from the city 1 to the city 4 , and then spend 5 coins to travel from the city 4 to the city 5 .","r=lambda : map(int,input().split())
t,=r()
while t:
    t-=1
    r()
    a=-1e9,*r(),2e9
    b=[0,0]
    # print(a)
    for w,x,y,z in zip(a,a[1:],a[2:],a[3:]):
        v=y-x
        b+=b[-2]+v**(v>(x-w)),b[-1]+v**(v>(z-y))
    print(b,""B"")
    u,=r()
    while u:
        u-=1
        c,d=r()
        # print(c,d)
        if c<d:
            print(b[(d-1)*2]-b[(c-1)*2])
        else:
            print(b[(c*2)-1]-b[(d*2)-1])",1,False,False,False,True,False,False,True,True,False,False,False,True,True,True,1.0,1.0,1.0
1922_C,1922_C_Omar_jaki_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"There are n cities located on the number line, the i -th city is in the point
a_i . The coordinates of the cities are given in ascending order, so a_1 < a_2
< \dots < a_n .

The distance between two cities x and y is equal to |a_x - a_y| .

For each city i , let's define the closest city j as the city such that the
distance between i and j is not greater than the distance between i and each
other city k . For example, if the cities are located in points [0, 8, 12, 15,
20] , then:

  * the closest city to the city 1 is the city 2 ; 
  * the closest city to the city 2 is the city 3 ; 
  * the closest city to the city 3 is the city 4 ; 
  * the closest city to the city 4 is the city 3 ; 
  * the closest city to the city 5 is the city 4 . 

The cities are located in such a way that for every city, the closest city is
unique. For example, it is impossible for the cities to be situated in points
[1, 2, 3] , since this would mean that the city 2 has two closest cities (1
and 3 , both having distance 1 ).

You can travel between cities. Suppose you are currently in the city x . Then
you can perform one of the following actions:

  * travel to any other city y , paying |a_x - a_y| coins; 
  * travel to the city which is the closest to x , paying 1 coin. 

You are given m queries. In each query, you will be given two cities, and you
have to calculate the minimum number of coins you have to spend to travel from
one city to the other city.

Input

The first line contains one integer t (1 \le t \le 10^4 ) — the number of test
cases.

Each test case is given in the following format:

  * the first line contains one integer n (2 \le n \le 10^5 ); 
  * the second line contains n integers a_1, a_2, \dots, a_n (0 \le a_1 < a_2 < \dots < a_n \le 10^9 ); 
  * the third line contains one integer m (1 \le m \le 10^5 ); 
  * then m lines follow; the i -th of them contains two integers x_i and y_i (1 \le x_i, y_i \le n ; x_i \ne y_i ), denoting that in the i -th query, you have to calculate the minimum number of coins you have to spend to travel from the city x_i to the city y_i . 

Additional constraints on the input:

  * in every test case, for each city, the closest city is determined uniquely; 
  * the sum of n over all test cases does not exceed 10^5 ; 
  * the sum of m over all test cases does not exceed 10^5 . 

Output

For each query, print one integer — the minimum number of coins you have to
spend.

Example

Input

    1
    
    5
    
    0 8 12 15 20
    
    5
    
    1 4
    
    1 5
    
    3 4
    
    3 2
    
    5 1

Output

    3
    8
    1
    4
    14
    
Note

Let's consider the first two queries in the example from the statement:

  * in the first query, you are initially in the city 1 . You can travel to the closest city (which is the city 2 ), paying 1 coin. Then you travel to the closest city (which is the city 3 ) again, paying 1 coin. Then you travel to the closest city (which is the city 4 ) again, paying 1 coin. In total, you spend 3 coins to get from the city 1 to the city 4 ; 
  * in the second query, you can use the same way to get from the city 1 to the city 4 , and then spend 5 coins to travel from the city 4 to the city 5 .","r=lambda : map(int,input().split())
t,=r()
while t:
    t-=1
    r()
    a=-1e9,*r(),2e9
    b=[0,0]
    # print(a)
    for w,x,y,z in zip(a,a[1:],a[2:],a[3:]):
        v=y-x
        b+=b[-2]+v**(v>(x-w)),b[-1]+v**(v>(z-y))
    print(b,""B"")
    u,=r()
    while u:
        u-=1
        c,d=r()
        # print(c,d)
        if c<d:
            print(b[(d-1)*2]-b[(c-1)*2])
        else:
            print(b[(c*2)-1]-b[(d*2)-1])",1,False,False,False,False,False,True,False,True,True,False,False,True,True,False,1.0,1.0,1.0
1930_A,1930_A_Artem_Pugash_33.33%,codeforces2024,human,qwen2p5-72b-instruct,"There are 2n positive integers written on a whiteboard. Being bored, you
decided to play a one-player game with the numbers on the whiteboard.

You start with a score of 0 . You will increase your score by performing the
following move exactly n times:

  * Choose two integers x and y that are written on the whiteboard. 
  * Add \min(x,y) to your score. 
  * Erase x and y from the whiteboard. 

Note that after performing the move n times, there will be no more integers
written on the whiteboard.

Find the maximum final score you can achieve if you optimally perform the n
moves.

Input

Each test contains multiple test cases. The first line contains a single
integer t (1 \leq t \leq 5000 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (1 \leq n \leq 50
) — the number of integers written on the whiteboard is 2n .

The second line of each test case contains 2n integers a_1,a_2,\ldots,a_{2n}
(1 \leq a_i \leq 10^7 ) — the numbers written on the whiteboard.

Output

For each test case, output the maximum final score that you can achieve.

Example

Input

    3
    
    1
    
    2 3
    
    2
    
    1 1 2 1
    
    3
    
    1 1 1 1 1 1

Output

    2
    2
    3
    
Note

In the first test case, you can only make one move. You select x=2 and y=3 ,
and your score will be \min(x,y)=2 .

In the second test case, the following is a sequence of moves that achieves a
final score of 2 :

  * In the first move, select x=1 and y=1 . Then, add \min(x,y)=1 to the score. After erasing x and y , the integers left on the whiteboard are 1 and 2 . 
  * In the second move, select x=1 and y=2 . Then, add \min(x,y)=1 to the score. After removing x and y , no more integers will be left on the whiteboard. 

It can be proved that it is not possible to get a score greater than 2 .

In the third test case, you will perform the move thrice, adding 1 to the
score each time.","numCases= int(input())
for i in range(numCases):
    numInteger = int(input()) 
    numbers = input().split()
    numbers.sort(reverse=False)
    suma = 0 
    while numbers != []:
        a= int(numbers.pop(0))
        b= int(numbers.pop(0))
        suma += min(a,b)
    print(suma)",1,False,False,False,True,False,False,True,True,False,False,False,True,True,False,1.0,1.0,1.0
1965_D,1965_D_2200033007_KLU_100%,codeforces2024,human,qwen2p5-72b-instruct,"There is a hidden array a of n positive integers. You know that a is a
palindrome, or in other words, for all 1 \le i \le n , a_i = a_{n + 1 - i} .
You are given the sums of all but one of its distinct subarrays, in arbitrary
order. The subarray whose sum is not given can be any of the \frac{n(n+1)}{2}
distinct subarrays of a .

Recover any possible palindrome a . The input is chosen such that there is
always at least one array a that satisfies the conditions.

An array b is a subarray of a if b can be obtained from a by the deletion of
several (possibly, zero or all) elements from the beginning and several
(possibly, zero or all) elements from the end.

Input

The first line of the input contains a single integer t (1 \le t \le 200 ) —
the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer n (3 \le n \le 1000
) — the size of the array a .

The next line of each test case contains \frac{n(n+1)}{2} - 1 integers s_i
(1\leq s_i \leq 10^9 ) — all but one of the subarray sums of a .

It is guaranteed that the sum of n over all test cases does not exceed 1000 .

Additional constraint on the input: There is always at least one valid
solution.

Hacks are disabled for this problem.

Output

For each test case, print one line containing n positive integers a_1, a_2,
\cdots a_n — any valid array a . Note that a must be a palindrome.

If there are multiple solutions, print any.

Example

Input

    7
    
    3
    
    1 2 3 4 1
    
    4
    
    18 2 11 9 7 11 7 2 9
    
    4
    
    5 10 5 16 3 3 13 8 8
    
    4
    
    8 10 4 6 4 20 14 14 6
    
    5
    
    1 2 3 4 5 4 3 2 1 1 2 3 2 1
    
    5
    
    1 1 2 2 2 3 3 3 3 4 5 5 6 8
    
    3
    
    500000000 1000000000 500000000 500000000 1000000000

Output

    1 2 1 
    7 2 2 7 
    3 5 5 3 
    6 4 4 6 
    1 1 1 1 1 
    2 1 2 1 2 
    500000000 500000000 500000000 
    
Note

For the first example case, the subarrays of a = [1, 2, 1] are:

  * [1] with sum 1 , 
  * [2] with sum 2 , 
  * [1] with sum 1 , 
  * [1, 2] with sum 3 , 
  * [2, 1] with sum 3 , 
  * [1, 2, 1] with sum 4 . 

So the full list of subarray sums is 1, 1, 2, 3, 3, 4 , and the sum that is
missing from the input list is 3 .

For the second example case, the missing subarray sum is 4 , for the subarray
[2, 2] .

For the third example case, the missing subarray sum is 13 , because there are
two subarrays with sum 13 ([3, 5, 5] and [5, 5, 3] ) but 13 only occurs once
in the input.","def getSubarraySums(a):
 
    cts = []
    for i in range(len(a)):
        sm = 0
        for j in range(i, len(a)):
            sm = sm + a[j]
            cts.append(sm)
 
    cts.sort()
    return cts
 
def getOddOccurringElements(cts):
 
    odds = []
 
    for ct in cts:
        if len(odds) > 0 and ct == odds[-1]:
            odds.pop()
        else:
            odds.append(ct)
    return odds
 
def getPalindrome(odds, n):
 
    a = [0] * n
    prev = 0
    idx = (n - 1) // 2
    
    for x in odds:
        if idx == n - 1 - idx:
            a[idx] = x
        else:
            a[idx] = (x - prev) // 2
            a[n - 1 - idx] = (x - prev) // 2
        prev = x
        idx = idx - 1
    
    return a
 
def getLargestExcluded(bigList, smallList):
 
    while len(smallList) > 0 and bigList[-1] == smallList[-1]:
        bigList.pop()
        smallList.pop()
    return bigList[-1]
 
t = int(input())
 
for tc in range(t):
 
    n = int(input())
    
    subarraySums = list(map(int, input().split()))
    subarraySums.sort()
    odds = getOddOccurringElements(subarraySums)
    
    missingSum = -1
    
    if len(odds) > (n + 1) // 2:
    
        oddvals = []
        evenvals = []
        for x in odds:
            if x % 2 == 1:
                oddvals.append(x)
            else:
                evenvals.append(x)
 
        if len(evenvals) > 0 and len(oddvals) > 0:
 
            missingSum = evenvals[0] if len(evenvals) == 1 else oddvals[0]
 
        else:
 
            b = getPalindrome(odds, n + 2)
            bSums = getSubarraySums(b)
            y = bSums[-1]
            x = getLargestExcluded(bSums, subarraySums)
            missingSum = 2 * x - y
    
    else:
        
        b = getPalindrome(odds, n - 2)
        bSums = getSubarraySums(b)
        y = bSums[-1]
        x = getLargestExcluded(subarraySums, bSums)
        missingSum = 2 * x - y
 
    odds.append(missingSum)
    odds.sort()
    odds = getOddOccurringElements(odds)
    
    ans = getPalindrome(odds, n)
    print(*ans)",1,True,False,False,True,True,True,True,True,False,False,False,True,True,True,0.9715476345025723,0.7513876344419281,0.9166666666666666
1965_D,1965_D_2200033007_KLU_100%,codeforces2024,human,qwen2p5-72b-instruct,"There is a hidden array a of n positive integers. You know that a is a
palindrome, or in other words, for all 1 \le i \le n , a_i = a_{n + 1 - i} .
You are given the sums of all but one of its distinct subarrays, in arbitrary
order. The subarray whose sum is not given can be any of the \frac{n(n+1)}{2}
distinct subarrays of a .

Recover any possible palindrome a . The input is chosen such that there is
always at least one array a that satisfies the conditions.

An array b is a subarray of a if b can be obtained from a by the deletion of
several (possibly, zero or all) elements from the beginning and several
(possibly, zero or all) elements from the end.

Input

The first line of the input contains a single integer t (1 \le t \le 200 ) —
the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer n (3 \le n \le 1000
) — the size of the array a .

The next line of each test case contains \frac{n(n+1)}{2} - 1 integers s_i
(1\leq s_i \leq 10^9 ) — all but one of the subarray sums of a .

It is guaranteed that the sum of n over all test cases does not exceed 1000 .

Additional constraint on the input: There is always at least one valid
solution.

Hacks are disabled for this problem.

Output

For each test case, print one line containing n positive integers a_1, a_2,
\cdots a_n — any valid array a . Note that a must be a palindrome.

If there are multiple solutions, print any.

Example

Input

    7
    
    3
    
    1 2 3 4 1
    
    4
    
    18 2 11 9 7 11 7 2 9
    
    4
    
    5 10 5 16 3 3 13 8 8
    
    4
    
    8 10 4 6 4 20 14 14 6
    
    5
    
    1 2 3 4 5 4 3 2 1 1 2 3 2 1
    
    5
    
    1 1 2 2 2 3 3 3 3 4 5 5 6 8
    
    3
    
    500000000 1000000000 500000000 500000000 1000000000

Output

    1 2 1 
    7 2 2 7 
    3 5 5 3 
    6 4 4 6 
    1 1 1 1 1 
    2 1 2 1 2 
    500000000 500000000 500000000 
    
Note

For the first example case, the subarrays of a = [1, 2, 1] are:

  * [1] with sum 1 , 
  * [2] with sum 2 , 
  * [1] with sum 1 , 
  * [1, 2] with sum 3 , 
  * [2, 1] with sum 3 , 
  * [1, 2, 1] with sum 4 . 

So the full list of subarray sums is 1, 1, 2, 3, 3, 4 , and the sum that is
missing from the input list is 3 .

For the second example case, the missing subarray sum is 4 , for the subarray
[2, 2] .

For the third example case, the missing subarray sum is 13 , because there are
two subarrays with sum 13 ([3, 5, 5] and [5, 5, 3] ) but 13 only occurs once
in the input.","def getSubarraySums(a):
 
    cts = []
    for i in range(len(a)):
        sm = 0
        for j in range(i, len(a)):
            sm = sm + a[j]
            cts.append(sm)
 
    cts.sort()
    return cts
 
def getOddOccurringElements(cts):
 
    odds = []
 
    for ct in cts:
        if len(odds) > 0 and ct == odds[-1]:
            odds.pop()
        else:
            odds.append(ct)
    return odds
 
def getPalindrome(odds, n):
 
    a = [0] * n
    prev = 0
    idx = (n - 1) // 2
    
    for x in odds:
        if idx == n - 1 - idx:
            a[idx] = x
        else:
            a[idx] = (x - prev) // 2
            a[n - 1 - idx] = (x - prev) // 2
        prev = x
        idx = idx - 1
    
    return a
 
def getLargestExcluded(bigList, smallList):
 
    while len(smallList) > 0 and bigList[-1] == smallList[-1]:
        bigList.pop()
        smallList.pop()
    return bigList[-1]
 
t = int(input())
 
for tc in range(t):
 
    n = int(input())
    
    subarraySums = list(map(int, input().split()))
    subarraySums.sort()
    odds = getOddOccurringElements(subarraySums)
    
    missingSum = -1
    
    if len(odds) > (n + 1) // 2:
    
        oddvals = []
        evenvals = []
        for x in odds:
            if x % 2 == 1:
                oddvals.append(x)
            else:
                evenvals.append(x)
 
        if len(evenvals) > 0 and len(oddvals) > 0:
 
            missingSum = evenvals[0] if len(evenvals) == 1 else oddvals[0]
 
        else:
 
            b = getPalindrome(odds, n + 2)
            bSums = getSubarraySums(b)
            y = bSums[-1]
            x = getLargestExcluded(bSums, subarraySums)
            missingSum = 2 * x - y
    
    else:
        
        b = getPalindrome(odds, n - 2)
        bSums = getSubarraySums(b)
        y = bSums[-1]
        x = getLargestExcluded(subarraySums, bSums)
        missingSum = 2 * x - y
 
    odds.append(missingSum)
    odds.sort()
    odds = getOddOccurringElements(odds)
    
    ans = getPalindrome(odds, n)
    print(*ans)",1,True,False,False,True,False,True,True,True,True,True,False,False,True,True,0.9715476345025723,0.7513876344419281,0.9166666666666666
1965_D,1965_D_2200033007_KLU_100%,codeforces2024,human,qwen2p5-72b-instruct,"There is a hidden array a of n positive integers. You know that a is a
palindrome, or in other words, for all 1 \le i \le n , a_i = a_{n + 1 - i} .
You are given the sums of all but one of its distinct subarrays, in arbitrary
order. The subarray whose sum is not given can be any of the \frac{n(n+1)}{2}
distinct subarrays of a .

Recover any possible palindrome a . The input is chosen such that there is
always at least one array a that satisfies the conditions.

An array b is a subarray of a if b can be obtained from a by the deletion of
several (possibly, zero or all) elements from the beginning and several
(possibly, zero or all) elements from the end.

Input

The first line of the input contains a single integer t (1 \le t \le 200 ) —
the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer n (3 \le n \le 1000
) — the size of the array a .

The next line of each test case contains \frac{n(n+1)}{2} - 1 integers s_i
(1\leq s_i \leq 10^9 ) — all but one of the subarray sums of a .

It is guaranteed that the sum of n over all test cases does not exceed 1000 .

Additional constraint on the input: There is always at least one valid
solution.

Hacks are disabled for this problem.

Output

For each test case, print one line containing n positive integers a_1, a_2,
\cdots a_n — any valid array a . Note that a must be a palindrome.

If there are multiple solutions, print any.

Example

Input

    7
    
    3
    
    1 2 3 4 1
    
    4
    
    18 2 11 9 7 11 7 2 9
    
    4
    
    5 10 5 16 3 3 13 8 8
    
    4
    
    8 10 4 6 4 20 14 14 6
    
    5
    
    1 2 3 4 5 4 3 2 1 1 2 3 2 1
    
    5
    
    1 1 2 2 2 3 3 3 3 4 5 5 6 8
    
    3
    
    500000000 1000000000 500000000 500000000 1000000000

Output

    1 2 1 
    7 2 2 7 
    3 5 5 3 
    6 4 4 6 
    1 1 1 1 1 
    2 1 2 1 2 
    500000000 500000000 500000000 
    
Note

For the first example case, the subarrays of a = [1, 2, 1] are:

  * [1] with sum 1 , 
  * [2] with sum 2 , 
  * [1] with sum 1 , 
  * [1, 2] with sum 3 , 
  * [2, 1] with sum 3 , 
  * [1, 2, 1] with sum 4 . 

So the full list of subarray sums is 1, 1, 2, 3, 3, 4 , and the sum that is
missing from the input list is 3 .

For the second example case, the missing subarray sum is 4 , for the subarray
[2, 2] .

For the third example case, the missing subarray sum is 13 , because there are
two subarrays with sum 13 ([3, 5, 5] and [5, 5, 3] ) but 13 only occurs once
in the input.","def getSubarraySums(a):
 
    cts = []
    for i in range(len(a)):
        sm = 0
        for j in range(i, len(a)):
            sm = sm + a[j]
            cts.append(sm)
 
    cts.sort()
    return cts
 
def getOddOccurringElements(cts):
 
    odds = []
 
    for ct in cts:
        if len(odds) > 0 and ct == odds[-1]:
            odds.pop()
        else:
            odds.append(ct)
    return odds
 
def getPalindrome(odds, n):
 
    a = [0] * n
    prev = 0
    idx = (n - 1) // 2
    
    for x in odds:
        if idx == n - 1 - idx:
            a[idx] = x
        else:
            a[idx] = (x - prev) // 2
            a[n - 1 - idx] = (x - prev) // 2
        prev = x
        idx = idx - 1
    
    return a
 
def getLargestExcluded(bigList, smallList):
 
    while len(smallList) > 0 and bigList[-1] == smallList[-1]:
        bigList.pop()
        smallList.pop()
    return bigList[-1]
 
t = int(input())
 
for tc in range(t):
 
    n = int(input())
    
    subarraySums = list(map(int, input().split()))
    subarraySums.sort()
    odds = getOddOccurringElements(subarraySums)
    
    missingSum = -1
    
    if len(odds) > (n + 1) // 2:
    
        oddvals = []
        evenvals = []
        for x in odds:
            if x % 2 == 1:
                oddvals.append(x)
            else:
                evenvals.append(x)
 
        if len(evenvals) > 0 and len(oddvals) > 0:
 
            missingSum = evenvals[0] if len(evenvals) == 1 else oddvals[0]
 
        else:
 
            b = getPalindrome(odds, n + 2)
            bSums = getSubarraySums(b)
            y = bSums[-1]
            x = getLargestExcluded(bSums, subarraySums)
            missingSum = 2 * x - y
    
    else:
        
        b = getPalindrome(odds, n - 2)
        bSums = getSubarraySums(b)
        y = bSums[-1]
        x = getLargestExcluded(subarraySums, bSums)
        missingSum = 2 * x - y
 
    odds.append(missingSum)
    odds.sort()
    odds = getOddOccurringElements(odds)
    
    ans = getPalindrome(odds, n)
    print(*ans)",1,True,False,False,True,True,True,True,True,True,True,True,True,True,True,0.9715476345025723,0.7513876344419281,0.9166666666666666
1969_B,1969_B_tah23seen_6.67%,codeforces2024,human,qwen2p5-72b-instruct,"Let's define a cyclic shift of some string s as a transformation from s_1 s_2
\dots s_{n-1} s_{n} into s_{n} s_1 s_2 \dots s_{n-1} . In other words, you
take one last character s_n and place it before the first character while
moving all other characters to the right.

You are given a binary string s (a string consisting of only 0-s and/or 1-s).

In one operation, you can choose any substring s_l s_{l+1} \dots s_r (1 \le l
< r \le |s| ) and cyclically shift it. The cost of such operation is equal to
r - l + 1 (or the length of the chosen substring).

You can perform the given operation any number of times. What is the minimum
total cost to make s sorted in non-descending order?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first and only line of each test case contains a binary string s (2 \le
|s| \le 2 \cdot 10^5 ; s_i \in {0, 1}) — the string you need to sort.

Additional constraint on the input: the sum of lengths of strings over all
test cases doesn't exceed 2 \cdot 10^5 .

Output

For each test case, print the single integer — the minimum total cost to make
string sorted using operation above any number of times.

Example

Input

    5
    
    10
    
    0000
    
    11000
    
    101011
    
    01101001

Output

    2
    0
    9
    5
    11
    
Note

In the first test case, you can choose the whole string and perform a cyclic
shift: 10 \rightarrow 01. The length of the substring is 2 , so the cost is 2
.

In the second test case, the string is already sorted, so you don't need to
perform any operations.

In the third test case, one of the optimal strategies is the next:

  1. choose substring [1, 3] : 11000 \rightarrow 01100; 
  2. choose substring [2, 4] : 01100 \rightarrow 00110; 
  3. choose substring [3, 5] : 00110 \rightarrow 00011. 

The total cost is 3 + 3 + 3 = 9 .","def solve(sChar):
  s=[]
  for i in sChar:
    s.append(i)
 
  left=0
  cost=0
  right=1
  while left<=right and right<len(s) and left<len(s):
    if s[right]=='0' and s[left]=='1':
      s[right],s[left]=s[left],s[right]
      cost+=(right-left)+1
    while right<len(s) and s[right]!='0':
      right+=1
    while left<len(s) and  s[left]!='1':
      left+=1
  return cost
 
t=int(input())
while t:
  s=input()
  print(solve(s))
  t=t-1",1,False,False,False,True,False,True,False,False,False,False,False,True,True,True,1.0,1.0,1.0
1969_B,1969_B_tah23seen_6.67%,codeforces2024,human,qwen2p5-72b-instruct,"Let's define a cyclic shift of some string s as a transformation from s_1 s_2
\dots s_{n-1} s_{n} into s_{n} s_1 s_2 \dots s_{n-1} . In other words, you
take one last character s_n and place it before the first character while
moving all other characters to the right.

You are given a binary string s (a string consisting of only 0-s and/or 1-s).

In one operation, you can choose any substring s_l s_{l+1} \dots s_r (1 \le l
< r \le |s| ) and cyclically shift it. The cost of such operation is equal to
r - l + 1 (or the length of the chosen substring).

You can perform the given operation any number of times. What is the minimum
total cost to make s sorted in non-descending order?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first and only line of each test case contains a binary string s (2 \le
|s| \le 2 \cdot 10^5 ; s_i \in {0, 1}) — the string you need to sort.

Additional constraint on the input: the sum of lengths of strings over all
test cases doesn't exceed 2 \cdot 10^5 .

Output

For each test case, print the single integer — the minimum total cost to make
string sorted using operation above any number of times.

Example

Input

    5
    
    10
    
    0000
    
    11000
    
    101011
    
    01101001

Output

    2
    0
    9
    5
    11
    
Note

In the first test case, you can choose the whole string and perform a cyclic
shift: 10 \rightarrow 01. The length of the substring is 2 , so the cost is 2
.

In the second test case, the string is already sorted, so you don't need to
perform any operations.

In the third test case, one of the optimal strategies is the next:

  1. choose substring [1, 3] : 11000 \rightarrow 01100; 
  2. choose substring [2, 4] : 01100 \rightarrow 00110; 
  3. choose substring [3, 5] : 00110 \rightarrow 00011. 

The total cost is 3 + 3 + 3 = 9 .","def solve(sChar):
  s=[]
  for i in sChar:
    s.append(i)
 
  left=0
  cost=0
  right=1
  while left<=right and right<len(s) and left<len(s):
    if s[right]=='0' and s[left]=='1':
      s[right],s[left]=s[left],s[right]
      cost+=(right-left)+1
    while right<len(s) and s[right]!='0':
      right+=1
    while left<len(s) and  s[left]!='1':
      left+=1
  return cost
 
t=int(input())
while t:
  s=input()
  print(solve(s))
  t=t-1",1,False,False,False,True,False,False,False,False,False,False,False,True,False,False,1.0,1.0,1.0
1969_B,1969_B_tah23seen_6.67%,codeforces2024,human,qwen2p5-72b-instruct,"Let's define a cyclic shift of some string s as a transformation from s_1 s_2
\dots s_{n-1} s_{n} into s_{n} s_1 s_2 \dots s_{n-1} . In other words, you
take one last character s_n and place it before the first character while
moving all other characters to the right.

You are given a binary string s (a string consisting of only 0-s and/or 1-s).

In one operation, you can choose any substring s_l s_{l+1} \dots s_r (1 \le l
< r \le |s| ) and cyclically shift it. The cost of such operation is equal to
r - l + 1 (or the length of the chosen substring).

You can perform the given operation any number of times. What is the minimum
total cost to make s sorted in non-descending order?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first and only line of each test case contains a binary string s (2 \le
|s| \le 2 \cdot 10^5 ; s_i \in {0, 1}) — the string you need to sort.

Additional constraint on the input: the sum of lengths of strings over all
test cases doesn't exceed 2 \cdot 10^5 .

Output

For each test case, print the single integer — the minimum total cost to make
string sorted using operation above any number of times.

Example

Input

    5
    
    10
    
    0000
    
    11000
    
    101011
    
    01101001

Output

    2
    0
    9
    5
    11
    
Note

In the first test case, you can choose the whole string and perform a cyclic
shift: 10 \rightarrow 01. The length of the substring is 2 , so the cost is 2
.

In the second test case, the string is already sorted, so you don't need to
perform any operations.

In the third test case, one of the optimal strategies is the next:

  1. choose substring [1, 3] : 11000 \rightarrow 01100; 
  2. choose substring [2, 4] : 01100 \rightarrow 00110; 
  3. choose substring [3, 5] : 00110 \rightarrow 00011. 

The total cost is 3 + 3 + 3 = 9 .","def solve(sChar):
  s=[]
  for i in sChar:
    s.append(i)
 
  left=0
  cost=0
  right=1
  while left<=right and right<len(s) and left<len(s):
    if s[right]=='0' and s[left]=='1':
      s[right],s[left]=s[left],s[right]
      cost+=(right-left)+1
    while right<len(s) and s[right]!='0':
      right+=1
    while left<len(s) and  s[left]!='1':
      left+=1
  return cost
 
t=int(input())
while t:
  s=input()
  print(solve(s))
  t=t-1",1,False,False,False,True,False,True,False,False,False,False,False,True,True,True,1.0,1.0,1.0
1928_C,1928_C_DevK01_100%,codeforces2024,human,qwen2p5-72b-instruct,"In a well-known school, a physical education lesson took place. As usual,
everyone was lined up and asked to settle in ""the first–k -th"" position.

As is known, settling in ""the first–k -th"" position occurs as follows: the
first k people have numbers 1, 2, 3, \ldots, k , the next k - 2 people have
numbers k - 1, k - 2, \ldots, 2 , the next k people have numbers 1, 2, 3,
\ldots, k , and so on. Thus, the settling repeats every 2k - 2 positions.
Examples of settling are given in the ""Note"" section.

The boy Vasya constantly forgets everything. For example, he forgot the number
k described above. But he remembers the position he occupied in the line, as
well as the number he received during the settling. Help Vasya understand how
many natural numbers k fit under the given constraints.

Note that the settling exists if and only if k > 1 . In particular, this means
that the settling does not exist for k = 1 .

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 100 ) — the number of test cases. This is followed by
the description of the test cases.

The only line of each test case contains two integers n and x (1 \le x < n \le
10^9 ) — Vasya's position in the line and the number Vasya received during the
settling.

Output

For each test case, output a single integer — the number of different k that
fit under the given constraints.

It can be proven that under the given constraints, the answer is finite.

Example

Input

    5
    
    10 2
    
    3 1
    
    76 4
    
    100 99
    
    1000000000 500000000

Output

    4
    1
    9
    0
    1
    
Note

In the first test case, k equals 2, 3, 5, 6 are suitable.

An example of settling for these k :

k / №| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10   
---|---|---|---|---|---|---|---|---|---|---  
2 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2   
3 | 1 | 2 | 3 | 2 | 1 | 2 | 3 | 2 | 1 | 2   
5 | 1 | 2 | 3 | 4 | 5 | 4 | 3 | 2 | 1 | 2   
6 | 1 | 2 | 3 | 4 | 5 | 6 | 5 | 4 | 3 | 2   
  
In the second test case, k = 2 is suitable.","import math
def factors(q,x):
    M=[]
    w=math.sqrt(q)
    if w==w//1 and w>=x-1:
        M+=[w]
    i=1
    while i<w:
        if q%i==0:
            if i>=x-1:
                M+=[i]
            if (q//i)>=x-1:
                M+=[q//i]
        i+=1
    return M
 
t=int(input())
for _ in range(t):
    L=list(map(int, input().split()))
    n=L[0]
    x=L[1]
    ans=0
    y=(n+x)
    if y%2!=0:
        print(0)
        continue
    else:
        L1=factors((y-2)//2,x)
        if n>=3*x-2:
            L1+=factors((n-x)//2,x)
        L1=list(set(L1))
        print(len(L1))
        continue",1,True,False,False,True,False,True,True,True,True,False,True,True,True,False,0.9802420441794518,0.8804437489253759,0.9166666666666666
1928_C,1928_C_DevK01_100%,codeforces2024,human,qwen2p5-72b-instruct,"In a well-known school, a physical education lesson took place. As usual,
everyone was lined up and asked to settle in ""the first–k -th"" position.

As is known, settling in ""the first–k -th"" position occurs as follows: the
first k people have numbers 1, 2, 3, \ldots, k , the next k - 2 people have
numbers k - 1, k - 2, \ldots, 2 , the next k people have numbers 1, 2, 3,
\ldots, k , and so on. Thus, the settling repeats every 2k - 2 positions.
Examples of settling are given in the ""Note"" section.

The boy Vasya constantly forgets everything. For example, he forgot the number
k described above. But he remembers the position he occupied in the line, as
well as the number he received during the settling. Help Vasya understand how
many natural numbers k fit under the given constraints.

Note that the settling exists if and only if k > 1 . In particular, this means
that the settling does not exist for k = 1 .

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 100 ) — the number of test cases. This is followed by
the description of the test cases.

The only line of each test case contains two integers n and x (1 \le x < n \le
10^9 ) — Vasya's position in the line and the number Vasya received during the
settling.

Output

For each test case, output a single integer — the number of different k that
fit under the given constraints.

It can be proven that under the given constraints, the answer is finite.

Example

Input

    5
    
    10 2
    
    3 1
    
    76 4
    
    100 99
    
    1000000000 500000000

Output

    4
    1
    9
    0
    1
    
Note

In the first test case, k equals 2, 3, 5, 6 are suitable.

An example of settling for these k :

k / №| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10   
---|---|---|---|---|---|---|---|---|---|---  
2 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2   
3 | 1 | 2 | 3 | 2 | 1 | 2 | 3 | 2 | 1 | 2   
5 | 1 | 2 | 3 | 4 | 5 | 4 | 3 | 2 | 1 | 2   
6 | 1 | 2 | 3 | 4 | 5 | 6 | 5 | 4 | 3 | 2   
  
In the second test case, k = 2 is suitable.","import math
def factors(q,x):
    M=[]
    w=math.sqrt(q)
    if w==w//1 and w>=x-1:
        M+=[w]
    i=1
    while i<w:
        if q%i==0:
            if i>=x-1:
                M+=[i]
            if (q//i)>=x-1:
                M+=[q//i]
        i+=1
    return M
 
t=int(input())
for _ in range(t):
    L=list(map(int, input().split()))
    n=L[0]
    x=L[1]
    ans=0
    y=(n+x)
    if y%2!=0:
        print(0)
        continue
    else:
        L1=factors((y-2)//2,x)
        if n>=3*x-2:
            L1+=factors((n-x)//2,x)
        L1=list(set(L1))
        print(len(L1))
        continue",1,True,False,False,True,True,True,True,True,False,False,False,True,True,True,0.9802420441794518,0.8804437489253759,0.9166666666666666
1928_C,1928_C_DevK01_100%,codeforces2024,human,qwen2p5-72b-instruct,"In a well-known school, a physical education lesson took place. As usual,
everyone was lined up and asked to settle in ""the first–k -th"" position.

As is known, settling in ""the first–k -th"" position occurs as follows: the
first k people have numbers 1, 2, 3, \ldots, k , the next k - 2 people have
numbers k - 1, k - 2, \ldots, 2 , the next k people have numbers 1, 2, 3,
\ldots, k , and so on. Thus, the settling repeats every 2k - 2 positions.
Examples of settling are given in the ""Note"" section.

The boy Vasya constantly forgets everything. For example, he forgot the number
k described above. But he remembers the position he occupied in the line, as
well as the number he received during the settling. Help Vasya understand how
many natural numbers k fit under the given constraints.

Note that the settling exists if and only if k > 1 . In particular, this means
that the settling does not exist for k = 1 .

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 100 ) — the number of test cases. This is followed by
the description of the test cases.

The only line of each test case contains two integers n and x (1 \le x < n \le
10^9 ) — Vasya's position in the line and the number Vasya received during the
settling.

Output

For each test case, output a single integer — the number of different k that
fit under the given constraints.

It can be proven that under the given constraints, the answer is finite.

Example

Input

    5
    
    10 2
    
    3 1
    
    76 4
    
    100 99
    
    1000000000 500000000

Output

    4
    1
    9
    0
    1
    
Note

In the first test case, k equals 2, 3, 5, 6 are suitable.

An example of settling for these k :

k / №| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10   
---|---|---|---|---|---|---|---|---|---|---  
2 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2   
3 | 1 | 2 | 3 | 2 | 1 | 2 | 3 | 2 | 1 | 2   
5 | 1 | 2 | 3 | 4 | 5 | 4 | 3 | 2 | 1 | 2   
6 | 1 | 2 | 3 | 4 | 5 | 6 | 5 | 4 | 3 | 2   
  
In the second test case, k = 2 is suitable.","import math
def factors(q,x):
    M=[]
    w=math.sqrt(q)
    if w==w//1 and w>=x-1:
        M+=[w]
    i=1
    while i<w:
        if q%i==0:
            if i>=x-1:
                M+=[i]
            if (q//i)>=x-1:
                M+=[q//i]
        i+=1
    return M
 
t=int(input())
for _ in range(t):
    L=list(map(int, input().split()))
    n=L[0]
    x=L[1]
    ans=0
    y=(n+x)
    if y%2!=0:
        print(0)
        continue
    else:
        L1=factors((y-2)//2,x)
        if n>=3*x-2:
            L1+=factors((n-x)//2,x)
        L1=list(set(L1))
        print(len(L1))
        continue",1,True,False,False,True,True,True,True,True,True,True,False,True,True,True,0.9802420441794518,0.8804437489253759,0.9166666666666666
1978_B,1978_B_Rho_Ruler_100%,codeforces2024,human,qwen2p5-72b-instruct,"Bob decided to open a bakery. On the opening day, he baked n buns that he can
sell. The usual price of a bun is a coins, but to attract customers, Bob
organized the following promotion:

  * Bob chooses some integer k (0 \le k \le \min(n, b) ).
  * Bob sells the first k buns at a modified price. In this case, the price of the i -th (1 \le i \le k ) sold bun is (b - i + 1) coins.
  * The remaining (n - k) buns are sold at a coins each.

Note that k can be equal to 0 . In this case, Bob will sell all the buns at a
coins each.

Help Bob determine the maximum profit he can obtain by selling all n buns.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. The description of
the test cases follows.

The only line of each test case contains three integers n , a , and b (1 \le
n, a, b \le 10^9 ) — the number of buns, the usual price of a bun, and the
price of the first bun to be sold at a modified price.

Output

For each test case, output a single integer — the maximum profit that Bob can
obtain.

Example

Input

    7
    
    4 4 5
    
    5 5 9
    
    10 10 5
    
    5 5 11
    
    1000000000 1000000000 1000000000
    
    1000000000 1000000000 1
    
    1000 1 1000

Output

    17
    35
    100
    45
    1000000000000000000
    1000000000000000000
    500500
    
Note

In the first test case, it is optimal for Bob to choose k = 1 . Then he will
sell one bun for 5 coins, and three buns at the usual price for 4 coins each.
Then the profit will be 5 + 4 + 4 + 4 = 17 coins.

In the second test case, it is optimal for Bob to choose k = 5 . Then he will
sell all the buns at the modified price and obtain a profit of 9 + 8 + 7 + 6 +
5 = 35 coins.

In the third test case, it is optimal for Bob to choose k = 0 . Then he will
sell all the buns at the usual price and obtain a profit of 10 \cdot 10 = 100
coins.","def calculate_profit(k, n, a, b):
    return k * b - (k * (k - 1)) // 2 + (n - k) * a
 
def max_profit(n, a, b):
    low, high = 0, min(n, b)
    max_profit = 0
 
    while low <= high:
        mid = (low + high) // 2
        profit_mid = calculate_profit(mid, n, a, b)
        profit_next = calculate_profit(mid + 1, n, a, b)
 
        max_profit = max(max_profit, profit_mid)
 
        if profit_next > profit_mid:
            low = mid + 1
        else:
            high = mid - 1
 
    return max_profit
 
if __name__ == ""__main__"":
    t = int(input())
    for _ in range(t):
        n, a, b = map(int, input().split())
        print(max_profit(n, a, b))",1,True,True,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1978_B,1978_B_Rho_Ruler_100%,codeforces2024,human,qwen2p5-72b-instruct,"Bob decided to open a bakery. On the opening day, he baked n buns that he can
sell. The usual price of a bun is a coins, but to attract customers, Bob
organized the following promotion:

  * Bob chooses some integer k (0 \le k \le \min(n, b) ).
  * Bob sells the first k buns at a modified price. In this case, the price of the i -th (1 \le i \le k ) sold bun is (b - i + 1) coins.
  * The remaining (n - k) buns are sold at a coins each.

Note that k can be equal to 0 . In this case, Bob will sell all the buns at a
coins each.

Help Bob determine the maximum profit he can obtain by selling all n buns.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. The description of
the test cases follows.

The only line of each test case contains three integers n , a , and b (1 \le
n, a, b \le 10^9 ) — the number of buns, the usual price of a bun, and the
price of the first bun to be sold at a modified price.

Output

For each test case, output a single integer — the maximum profit that Bob can
obtain.

Example

Input

    7
    
    4 4 5
    
    5 5 9
    
    10 10 5
    
    5 5 11
    
    1000000000 1000000000 1000000000
    
    1000000000 1000000000 1
    
    1000 1 1000

Output

    17
    35
    100
    45
    1000000000000000000
    1000000000000000000
    500500
    
Note

In the first test case, it is optimal for Bob to choose k = 1 . Then he will
sell one bun for 5 coins, and three buns at the usual price for 4 coins each.
Then the profit will be 5 + 4 + 4 + 4 = 17 coins.

In the second test case, it is optimal for Bob to choose k = 5 . Then he will
sell all the buns at the modified price and obtain a profit of 9 + 8 + 7 + 6 +
5 = 35 coins.

In the third test case, it is optimal for Bob to choose k = 0 . Then he will
sell all the buns at the usual price and obtain a profit of 10 \cdot 10 = 100
coins.","def calculate_profit(k, n, a, b):
    return k * b - (k * (k - 1)) // 2 + (n - k) * a
 
def max_profit(n, a, b):
    low, high = 0, min(n, b)
    max_profit = 0
 
    while low <= high:
        mid = (low + high) // 2
        profit_mid = calculate_profit(mid, n, a, b)
        profit_next = calculate_profit(mid + 1, n, a, b)
 
        max_profit = max(max_profit, profit_mid)
 
        if profit_next > profit_mid:
            low = mid + 1
        else:
            high = mid - 1
 
    return max_profit
 
if __name__ == ""__main__"":
    t = int(input())
    for _ in range(t):
        n, a, b = map(int, input().split())
        print(max_profit(n, a, b))",1,True,True,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1978_B,1978_B_Rho_Ruler_100%,codeforces2024,human,qwen2p5-72b-instruct,"Bob decided to open a bakery. On the opening day, he baked n buns that he can
sell. The usual price of a bun is a coins, but to attract customers, Bob
organized the following promotion:

  * Bob chooses some integer k (0 \le k \le \min(n, b) ).
  * Bob sells the first k buns at a modified price. In this case, the price of the i -th (1 \le i \le k ) sold bun is (b - i + 1) coins.
  * The remaining (n - k) buns are sold at a coins each.

Note that k can be equal to 0 . In this case, Bob will sell all the buns at a
coins each.

Help Bob determine the maximum profit he can obtain by selling all n buns.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. The description of
the test cases follows.

The only line of each test case contains three integers n , a , and b (1 \le
n, a, b \le 10^9 ) — the number of buns, the usual price of a bun, and the
price of the first bun to be sold at a modified price.

Output

For each test case, output a single integer — the maximum profit that Bob can
obtain.

Example

Input

    7
    
    4 4 5
    
    5 5 9
    
    10 10 5
    
    5 5 11
    
    1000000000 1000000000 1000000000
    
    1000000000 1000000000 1
    
    1000 1 1000

Output

    17
    35
    100
    45
    1000000000000000000
    1000000000000000000
    500500
    
Note

In the first test case, it is optimal for Bob to choose k = 1 . Then he will
sell one bun for 5 coins, and three buns at the usual price for 4 coins each.
Then the profit will be 5 + 4 + 4 + 4 = 17 coins.

In the second test case, it is optimal for Bob to choose k = 5 . Then he will
sell all the buns at the modified price and obtain a profit of 9 + 8 + 7 + 6 +
5 = 35 coins.

In the third test case, it is optimal for Bob to choose k = 0 . Then he will
sell all the buns at the usual price and obtain a profit of 10 \cdot 10 = 100
coins.","def calculate_profit(k, n, a, b):
    return k * b - (k * (k - 1)) // 2 + (n - k) * a
 
def max_profit(n, a, b):
    low, high = 0, min(n, b)
    max_profit = 0
 
    while low <= high:
        mid = (low + high) // 2
        profit_mid = calculate_profit(mid, n, a, b)
        profit_next = calculate_profit(mid + 1, n, a, b)
 
        max_profit = max(max_profit, profit_mid)
 
        if profit_next > profit_mid:
            low = mid + 1
        else:
            high = mid - 1
 
    return max_profit
 
if __name__ == ""__main__"":
    t = int(input())
    for _ in range(t):
        n, a, b = map(int, input().split())
        print(max_profit(n, a, b))",1,True,True,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1968_C,1968_C_aminesager_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array x_2,x_3,\dots,x_n . Your task is to find any array
a_1,\dots,a_n , where:

  * 1\le a_i\le 10^9 for all 1\le i\le n . 
  * x_i=a_i \bmod a_{i-1} for all 2\le i\le n . 

Here c\bmod d denotes the remainder of the division of the integer c by the
integer d . For example 5 \bmod 2 = 1 , 72 \bmod 3 = 0 , 143 \bmod 14 = 3 .

Note that if there is more than one a which satisfies the statement, you are
allowed to find any.

Input

The first line contains a single integer t (1\le t\le 10^4) — the number of
test cases.

The first line of each test case contains a single integer n (2\le n\le 500) —
the number of elements in a .

The second line of each test case contains n-1 integers x_2,\dots,x_n (1\le
x_i\le 500) — the elements of x .

It is guaranteed that the sum of values n over all test cases does not exceed
2 \cdot 10^5 .

Output

For each test case output any a_1,\dots,a_n (1 \le a_i \le 10^9 ) which
satisfies the statement.

Example

Input

    5
    
    4
    
    2 4 1
    
    3
    
    1 1
    
    6
    
    4 2 5 1 2
    
    2
    
    500
    
    3
    
    1 5

Output

    3 5 4 9
    2 5 11
    5 14 16 5 11 24
    501 500
    2 7 5

Note

In the first test case a=[3,5,4,9] satisfies the conditions, because:

  * a_2\bmod a_1=5\bmod 3=2=x_2 ; 
  * a_3\bmod a_2=4\bmod 5=4=x_3 ; 
  * a_4\bmod a_3=9\bmod 4=1=x_4 ;","t= int(input())
while(t):
    t=t-1
 
    n = int(input())
    line = input("""")
    T = list(map(int, line.split()))
        
 
    a=[1000]
    for i in range(1,n):
        a.append(a[i-1]-T[i-1])
    
    a=a[::-1]
    result = ' '.join(map(str, a))
    print(result)",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1968_C,1968_C_aminesager_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array x_2,x_3,\dots,x_n . Your task is to find any array
a_1,\dots,a_n , where:

  * 1\le a_i\le 10^9 for all 1\le i\le n . 
  * x_i=a_i \bmod a_{i-1} for all 2\le i\le n . 

Here c\bmod d denotes the remainder of the division of the integer c by the
integer d . For example 5 \bmod 2 = 1 , 72 \bmod 3 = 0 , 143 \bmod 14 = 3 .

Note that if there is more than one a which satisfies the statement, you are
allowed to find any.

Input

The first line contains a single integer t (1\le t\le 10^4) — the number of
test cases.

The first line of each test case contains a single integer n (2\le n\le 500) —
the number of elements in a .

The second line of each test case contains n-1 integers x_2,\dots,x_n (1\le
x_i\le 500) — the elements of x .

It is guaranteed that the sum of values n over all test cases does not exceed
2 \cdot 10^5 .

Output

For each test case output any a_1,\dots,a_n (1 \le a_i \le 10^9 ) which
satisfies the statement.

Example

Input

    5
    
    4
    
    2 4 1
    
    3
    
    1 1
    
    6
    
    4 2 5 1 2
    
    2
    
    500
    
    3
    
    1 5

Output

    3 5 4 9
    2 5 11
    5 14 16 5 11 24
    501 500
    2 7 5

Note

In the first test case a=[3,5,4,9] satisfies the conditions, because:

  * a_2\bmod a_1=5\bmod 3=2=x_2 ; 
  * a_3\bmod a_2=4\bmod 5=4=x_3 ; 
  * a_4\bmod a_3=9\bmod 4=1=x_4 ;","t= int(input())
while(t):
    t=t-1
 
    n = int(input())
    line = input("""")
    T = list(map(int, line.split()))
        
 
    a=[1000]
    for i in range(1,n):
        a.append(a[i-1]-T[i-1])
    
    a=a[::-1]
    result = ' '.join(map(str, a))
    print(result)",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1968_C,1968_C_aminesager_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array x_2,x_3,\dots,x_n . Your task is to find any array
a_1,\dots,a_n , where:

  * 1\le a_i\le 10^9 for all 1\le i\le n . 
  * x_i=a_i \bmod a_{i-1} for all 2\le i\le n . 

Here c\bmod d denotes the remainder of the division of the integer c by the
integer d . For example 5 \bmod 2 = 1 , 72 \bmod 3 = 0 , 143 \bmod 14 = 3 .

Note that if there is more than one a which satisfies the statement, you are
allowed to find any.

Input

The first line contains a single integer t (1\le t\le 10^4) — the number of
test cases.

The first line of each test case contains a single integer n (2\le n\le 500) —
the number of elements in a .

The second line of each test case contains n-1 integers x_2,\dots,x_n (1\le
x_i\le 500) — the elements of x .

It is guaranteed that the sum of values n over all test cases does not exceed
2 \cdot 10^5 .

Output

For each test case output any a_1,\dots,a_n (1 \le a_i \le 10^9 ) which
satisfies the statement.

Example

Input

    5
    
    4
    
    2 4 1
    
    3
    
    1 1
    
    6
    
    4 2 5 1 2
    
    2
    
    500
    
    3
    
    1 5

Output

    3 5 4 9
    2 5 11
    5 14 16 5 11 24
    501 500
    2 7 5

Note

In the first test case a=[3,5,4,9] satisfies the conditions, because:

  * a_2\bmod a_1=5\bmod 3=2=x_2 ; 
  * a_3\bmod a_2=4\bmod 5=4=x_3 ; 
  * a_4\bmod a_3=9\bmod 4=1=x_4 ;","t= int(input())
while(t):
    t=t-1
 
    n = int(input())
    line = input("""")
    T = list(map(int, line.split()))
        
 
    a=[1000]
    for i in range(1,n):
        a.append(a[i-1]-T[i-1])
    
    a=a[::-1]
    result = ' '.join(map(str, a))
    print(result)",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1972_D1,1972_D1_Calto_100%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.","import math
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a
 
def count_ordered_pairs(n, m):
    cnt = -1
    
    for i in range(1, m+1):
        x = n - ((i * i) - i)
        y = i * i
        cnt = cnt + math.ceil((x/y)) + (x % y == 0)
 
    return cnt
 
t = int(input())
for _ in range(t):
    n, m = map(int, input().split())
    result = count_ordered_pairs(n, m)
    print(result)",1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1972_D1,1972_D1_Calto_100%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.","import math
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a
 
def count_ordered_pairs(n, m):
    cnt = -1
    
    for i in range(1, m+1):
        x = n - ((i * i) - i)
        y = i * i
        cnt = cnt + math.ceil((x/y)) + (x % y == 0)
 
    return cnt
 
t = int(input())
for _ in range(t):
    n, m = map(int, input().split())
    result = count_ordered_pairs(n, m)
    print(result)",1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1972_D1,1972_D1_Calto_100%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.","import math
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a
 
def count_ordered_pairs(n, m):
    cnt = -1
    
    for i in range(1, m+1):
        x = n - ((i * i) - i)
        y = i * i
        cnt = cnt + math.ceil((x/y)) + (x % y == 0)
 
    return cnt
 
t = int(input())
for _ in range(t):
    n, m = map(int, input().split())
    result = count_ordered_pairs(n, m)
    print(result)",1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1932_D,1932_D_Juun_100%,codeforces2024,human,qwen2p5-72b-instruct,"Two players are playing an online card game. The game is played using a
32-card deck. Each card has a suit and a rank. There are four suits: clubs,
diamonds, hearts, and spades. We will encode them with characters 'C', 'D',
'H', and 'S', respectively. And there are 8 ranks, in increasing order: '2',
'3', '4', '5', '6', '7', '8', '9'.

Each card is denoted by two letters: its rank and its suit. For example, the 8
of Hearts is denoted as 8H.

At the beginning of the game, one suit is chosen as the trump suit.

In each round, players make moves like this: the first player places one of
his cards on the table, and the second player must beat this card with one of
their cards. After that, both cards are moved to the discard pile.

A card can beat another card if both cards have the same suit and the first
card has a higher rank than the second. For example, 8S can beat 4S.
Additionally, a trump card can beat any non-trump card, regardless of the rank
of the cards, for example, if the trump suit is clubs ('C'), then 3C can beat
9D. Note that trump cards can be beaten only by the trump cards of higher
rank.

There were n rounds played in the game, so the discard pile now contains 2n
cards. You want to reconstruct the rounds played in the game, but the cards in
the discard pile are shuffled. Find any possible sequence of n rounds that
might have been played in the game.

Input

The first line contains integer t (1 \le t \le 100 ) — the number of test
cases. Then t test cases follow.

The first line of a test case contains the integer number n (1\le n\le 16 ).

The second line of a test case contains one character, the trump suit. It is
one of ""CDHS"".

The third line of a test case contains the description of 2n cards. Each card
is described by a two-character string, the first character is the rank of the
card, which is one of ""23456789"", and the second one is the suit of the card,
which is one of ""CDHS"". All cards are different.

Output

For each test case print the answer to it:

  * Print n lines. In each line, print the description of two cards, in the same format as in the input: the first card that was played by the first player, and then the card that was used by the second player to beat it.
  * If there is no solution, print a single line ""IMPOSSIBLE"".

If there are multiple solutions, print any of them.

Example

Input

    8
    
    3
    
    S
    
    3C 9S 4C 6D 3S 7S
    
    2
    
    C
    
    3S 5D 9S 6H
    
    1
    
    H
    
    6C 5D
    
    1
    
    S
    
    7S 3S
    
    1
    
    H
    
    9S 9H
    
    1
    
    S
    
    9S 9H
    
    1
    
    C
    
    9D 8H
    
    2
    
    C
    
    9C 9S 6H 8C

Output

    3C 4C
    6D 9S
    3S 7S
    IMPOSSIBLE
    IMPOSSIBLE
    3S 7S
    9S 9H
    9H 9S
    IMPOSSIBLE
    6H 9C
    9S 8C","# https://codeforces.com/problemset/problem/1932/D
 
def solve():
    input()
    trump = input()
    trumps = []
    answers = []
    suits = {'C':None , 'D': None, 'H': None, 'S':None}
    for card in input().split():
        rank, suit = card
        if suit == trump:
            trumps.append(rank)
        else:
            if suits[suit] is not None:
                answers.append("" "".join([x + suit for x in sorted([suits[suit] , rank])]))
                suits[suit] = None
            else:
                suits[suit] = rank
 
    for suit, rank in suits.items():
        if rank is None:
            continue
        if trumps != []:
            answers.append(f""{rank}{suit} {trumps.pop()}{trump}"")
        else:
            print(""IMPOSSIBLE"")
            return
    trumps = sorted(trumps, reverse=True)
    while trumps != []:
        print(f""{trumps.pop()}{trump} {trumps.pop()}{trump}"")
    for answer in answers:
        print(answer)
 
 
for _ in range(int(input())):
    solve()",1,True,False,False,True,False,False,False,False,False,False,False,True,True,True,1.0,1.0,1.0
1932_D,1932_D_Juun_100%,codeforces2024,human,qwen2p5-72b-instruct,"Two players are playing an online card game. The game is played using a
32-card deck. Each card has a suit and a rank. There are four suits: clubs,
diamonds, hearts, and spades. We will encode them with characters 'C', 'D',
'H', and 'S', respectively. And there are 8 ranks, in increasing order: '2',
'3', '4', '5', '6', '7', '8', '9'.

Each card is denoted by two letters: its rank and its suit. For example, the 8
of Hearts is denoted as 8H.

At the beginning of the game, one suit is chosen as the trump suit.

In each round, players make moves like this: the first player places one of
his cards on the table, and the second player must beat this card with one of
their cards. After that, both cards are moved to the discard pile.

A card can beat another card if both cards have the same suit and the first
card has a higher rank than the second. For example, 8S can beat 4S.
Additionally, a trump card can beat any non-trump card, regardless of the rank
of the cards, for example, if the trump suit is clubs ('C'), then 3C can beat
9D. Note that trump cards can be beaten only by the trump cards of higher
rank.

There were n rounds played in the game, so the discard pile now contains 2n
cards. You want to reconstruct the rounds played in the game, but the cards in
the discard pile are shuffled. Find any possible sequence of n rounds that
might have been played in the game.

Input

The first line contains integer t (1 \le t \le 100 ) — the number of test
cases. Then t test cases follow.

The first line of a test case contains the integer number n (1\le n\le 16 ).

The second line of a test case contains one character, the trump suit. It is
one of ""CDHS"".

The third line of a test case contains the description of 2n cards. Each card
is described by a two-character string, the first character is the rank of the
card, which is one of ""23456789"", and the second one is the suit of the card,
which is one of ""CDHS"". All cards are different.

Output

For each test case print the answer to it:

  * Print n lines. In each line, print the description of two cards, in the same format as in the input: the first card that was played by the first player, and then the card that was used by the second player to beat it.
  * If there is no solution, print a single line ""IMPOSSIBLE"".

If there are multiple solutions, print any of them.

Example

Input

    8
    
    3
    
    S
    
    3C 9S 4C 6D 3S 7S
    
    2
    
    C
    
    3S 5D 9S 6H
    
    1
    
    H
    
    6C 5D
    
    1
    
    S
    
    7S 3S
    
    1
    
    H
    
    9S 9H
    
    1
    
    S
    
    9S 9H
    
    1
    
    C
    
    9D 8H
    
    2
    
    C
    
    9C 9S 6H 8C

Output

    3C 4C
    6D 9S
    3S 7S
    IMPOSSIBLE
    IMPOSSIBLE
    3S 7S
    9S 9H
    9H 9S
    IMPOSSIBLE
    6H 9C
    9S 8C","# https://codeforces.com/problemset/problem/1932/D
 
def solve():
    input()
    trump = input()
    trumps = []
    answers = []
    suits = {'C':None , 'D': None, 'H': None, 'S':None}
    for card in input().split():
        rank, suit = card
        if suit == trump:
            trumps.append(rank)
        else:
            if suits[suit] is not None:
                answers.append("" "".join([x + suit for x in sorted([suits[suit] , rank])]))
                suits[suit] = None
            else:
                suits[suit] = rank
 
    for suit, rank in suits.items():
        if rank is None:
            continue
        if trumps != []:
            answers.append(f""{rank}{suit} {trumps.pop()}{trump}"")
        else:
            print(""IMPOSSIBLE"")
            return
    trumps = sorted(trumps, reverse=True)
    while trumps != []:
        print(f""{trumps.pop()}{trump} {trumps.pop()}{trump}"")
    for answer in answers:
        print(answer)
 
 
for _ in range(int(input())):
    solve()",1,True,False,False,False,False,False,False,True,False,False,False,False,False,False,1.0,1.0,1.0
1932_D,1932_D_Juun_100%,codeforces2024,human,qwen2p5-72b-instruct,"Two players are playing an online card game. The game is played using a
32-card deck. Each card has a suit and a rank. There are four suits: clubs,
diamonds, hearts, and spades. We will encode them with characters 'C', 'D',
'H', and 'S', respectively. And there are 8 ranks, in increasing order: '2',
'3', '4', '5', '6', '7', '8', '9'.

Each card is denoted by two letters: its rank and its suit. For example, the 8
of Hearts is denoted as 8H.

At the beginning of the game, one suit is chosen as the trump suit.

In each round, players make moves like this: the first player places one of
his cards on the table, and the second player must beat this card with one of
their cards. After that, both cards are moved to the discard pile.

A card can beat another card if both cards have the same suit and the first
card has a higher rank than the second. For example, 8S can beat 4S.
Additionally, a trump card can beat any non-trump card, regardless of the rank
of the cards, for example, if the trump suit is clubs ('C'), then 3C can beat
9D. Note that trump cards can be beaten only by the trump cards of higher
rank.

There were n rounds played in the game, so the discard pile now contains 2n
cards. You want to reconstruct the rounds played in the game, but the cards in
the discard pile are shuffled. Find any possible sequence of n rounds that
might have been played in the game.

Input

The first line contains integer t (1 \le t \le 100 ) — the number of test
cases. Then t test cases follow.

The first line of a test case contains the integer number n (1\le n\le 16 ).

The second line of a test case contains one character, the trump suit. It is
one of ""CDHS"".

The third line of a test case contains the description of 2n cards. Each card
is described by a two-character string, the first character is the rank of the
card, which is one of ""23456789"", and the second one is the suit of the card,
which is one of ""CDHS"". All cards are different.

Output

For each test case print the answer to it:

  * Print n lines. In each line, print the description of two cards, in the same format as in the input: the first card that was played by the first player, and then the card that was used by the second player to beat it.
  * If there is no solution, print a single line ""IMPOSSIBLE"".

If there are multiple solutions, print any of them.

Example

Input

    8
    
    3
    
    S
    
    3C 9S 4C 6D 3S 7S
    
    2
    
    C
    
    3S 5D 9S 6H
    
    1
    
    H
    
    6C 5D
    
    1
    
    S
    
    7S 3S
    
    1
    
    H
    
    9S 9H
    
    1
    
    S
    
    9S 9H
    
    1
    
    C
    
    9D 8H
    
    2
    
    C
    
    9C 9S 6H 8C

Output

    3C 4C
    6D 9S
    3S 7S
    IMPOSSIBLE
    IMPOSSIBLE
    3S 7S
    9S 9H
    9H 9S
    IMPOSSIBLE
    6H 9C
    9S 8C","# https://codeforces.com/problemset/problem/1932/D
 
def solve():
    input()
    trump = input()
    trumps = []
    answers = []
    suits = {'C':None , 'D': None, 'H': None, 'S':None}
    for card in input().split():
        rank, suit = card
        if suit == trump:
            trumps.append(rank)
        else:
            if suits[suit] is not None:
                answers.append("" "".join([x + suit for x in sorted([suits[suit] , rank])]))
                suits[suit] = None
            else:
                suits[suit] = rank
 
    for suit, rank in suits.items():
        if rank is None:
            continue
        if trumps != []:
            answers.append(f""{rank}{suit} {trumps.pop()}{trump}"")
        else:
            print(""IMPOSSIBLE"")
            return
    trumps = sorted(trumps, reverse=True)
    while trumps != []:
        print(f""{trumps.pop()}{trump} {trumps.pop()}{trump}"")
    for answer in answers:
        print(answer)
 
 
for _ in range(int(input())):
    solve()",1,True,False,False,True,False,False,False,False,False,True,False,True,True,True,1.0,1.0,1.0
1948_C,1948_C___ZED___4.35%,codeforces2024,human,qwen2p5-72b-instruct,"There is a grid, consisting of 2 rows and n columns. The rows are numbered
from 1 to 2 from top to bottom. The columns are numbered from 1 to n from left
to right. Each cell of the grid contains an arrow pointing either to the left
or to the right. No arrow points outside the grid.

There is a robot that starts in a cell (1, 1) . Every second, the following
two actions happen one after another:

  1. Firstly, the robot moves left, right, down or up (it can't try to go outside the grid, and can't skip a move); 
  2. then it moves along the arrow that is placed in the current cell (the cell it ends up after its move). 

Your task is to determine whether the robot can reach the cell (2, n) .

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first line of each test case contains a single integer (2 \le n \le 2
\cdot 10^5 ).

The second line contains a string consisting of exactly n characters < and/or
> — the first row of the grid.

The third line contains a string consisting of exactly n characters < and/or >
— the second row of the grid.

Additional constraints on the input:

  * n is even; 
  * there are no arrows pointing outside the grid; 
  * the sum of n over all test cases doesn't exceed 2 \cdot 10^5 . 

Output

For each test case, print YES if the robot can reach the cell (2, n) ;
otherwise, print NO.

You can print each letter in any case. For example, yes, Yes, YeS will all be
recognized as positive answer.

Example

Input

    4
    
    4
    
    >><<
    
    >>><
    
    2
    
    ><
    
    ><
    
    4
    
    >>><
    
    >><<
    
    6
    
    >><<><
    
    ><>>><

Output

    YES
    YES
    NO
    YES
    
Note

In the first example, one of the possible paths looks as follows: (1, 1)
\rightarrow (1, 2) \rightarrow (1, 3) \rightarrow (2, 3) \rightarrow (2, 4) .

In the second example, one of the possible paths looks as follows: (1, 1)
\rightarrow (2, 1) \rightarrow (2, 2) .

In the third example, there is no way to reach the cell (2, 4) .

In the fourth example, one of the possible paths looks as follows: (1, 1)
\rightarrow (2, 1) \rightarrow (2, 2) \rightarrow (1, 2) \rightarrow (1, 3)
\rightarrow (2, 3) \rightarrow (2, 4) \rightarrow (2, 5) \rightarrow (2, 6) .","for i in range(int(input())):
    n=int(input())
    a=input()
    b=input()
    if b[-2]!="">"":
        print(""NO"")
    elif n==1:
        print(""YES"")
    else:
        no_path=True
        for k in range(0,n,2):
            
            if b[k]!="">"":
                no_path=False
        if not no_path:
            no_path=True
            for k in range(1,n-1,2):
                print(k)
                if a[k]!="">"":
                    no_path=False
        if no_path:
            print(""YES"")
        else:
            print(""NO"")",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1932_D,1932_D_Juun_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Two players are playing an online card game. The game is played using a
32-card deck. Each card has a suit and a rank. There are four suits: clubs,
diamonds, hearts, and spades. We will encode them with characters 'C', 'D',
'H', and 'S', respectively. And there are 8 ranks, in increasing order: '2',
'3', '4', '5', '6', '7', '8', '9'.

Each card is denoted by two letters: its rank and its suit. For example, the 8
of Hearts is denoted as 8H.

At the beginning of the game, one suit is chosen as the trump suit.

In each round, players make moves like this: the first player places one of
his cards on the table, and the second player must beat this card with one of
their cards. After that, both cards are moved to the discard pile.

A card can beat another card if both cards have the same suit and the first
card has a higher rank than the second. For example, 8S can beat 4S.
Additionally, a trump card can beat any non-trump card, regardless of the rank
of the cards, for example, if the trump suit is clubs ('C'), then 3C can beat
9D. Note that trump cards can be beaten only by the trump cards of higher
rank.

There were n rounds played in the game, so the discard pile now contains 2n
cards. You want to reconstruct the rounds played in the game, but the cards in
the discard pile are shuffled. Find any possible sequence of n rounds that
might have been played in the game.

Input

The first line contains integer t (1 \le t \le 100 ) — the number of test
cases. Then t test cases follow.

The first line of a test case contains the integer number n (1\le n\le 16 ).

The second line of a test case contains one character, the trump suit. It is
one of ""CDHS"".

The third line of a test case contains the description of 2n cards. Each card
is described by a two-character string, the first character is the rank of the
card, which is one of ""23456789"", and the second one is the suit of the card,
which is one of ""CDHS"". All cards are different.

Output

For each test case print the answer to it:

  * Print n lines. In each line, print the description of two cards, in the same format as in the input: the first card that was played by the first player, and then the card that was used by the second player to beat it.
  * If there is no solution, print a single line ""IMPOSSIBLE"".

If there are multiple solutions, print any of them.

Example

Input

    8
    
    3
    
    S
    
    3C 9S 4C 6D 3S 7S
    
    2
    
    C
    
    3S 5D 9S 6H
    
    1
    
    H
    
    6C 5D
    
    1
    
    S
    
    7S 3S
    
    1
    
    H
    
    9S 9H
    
    1
    
    S
    
    9S 9H
    
    1
    
    C
    
    9D 8H
    
    2
    
    C
    
    9C 9S 6H 8C

Output

    3C 4C
    6D 9S
    3S 7S
    IMPOSSIBLE
    IMPOSSIBLE
    3S 7S
    9S 9H
    9H 9S
    IMPOSSIBLE
    6H 9C
    9S 8C","# https://codeforces.com/problemset/problem/1932/D
 
def solve():
    input()
    trump = input()
    trumps = []
    answers = []
    suits = {'C':None , 'D': None, 'H': None, 'S':None}
    for card in input().split():
        rank, suit = card
        if suit == trump:
            trumps.append(rank)
        else:
            if suits[suit] is not None:
                answers.append("" "".join([x + suit for x in sorted([suits[suit] , rank])]))
                suits[suit] = None
            else:
                suits[suit] = rank
 
    for suit, rank in suits.items():
        if rank is None:
            continue
        if trumps != []:
            answers.append(f""{rank}{suit} {trumps.pop()}{trump}"")
        else:
            print(""IMPOSSIBLE"")
            return
    trumps = sorted(trumps)
    while trumps != []:
        print(f""{trumps.pop()}{trump} {trumps.pop()}{trump}"")
    for answer in answers:
        print(answer)
 
 
for _ in range(int(input())):
    solve()",1,False,False,False,True,False,True,False,False,False,False,False,True,True,True,1.0,1.0,1.0
1932_D,1932_D_Juun_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Two players are playing an online card game. The game is played using a
32-card deck. Each card has a suit and a rank. There are four suits: clubs,
diamonds, hearts, and spades. We will encode them with characters 'C', 'D',
'H', and 'S', respectively. And there are 8 ranks, in increasing order: '2',
'3', '4', '5', '6', '7', '8', '9'.

Each card is denoted by two letters: its rank and its suit. For example, the 8
of Hearts is denoted as 8H.

At the beginning of the game, one suit is chosen as the trump suit.

In each round, players make moves like this: the first player places one of
his cards on the table, and the second player must beat this card with one of
their cards. After that, both cards are moved to the discard pile.

A card can beat another card if both cards have the same suit and the first
card has a higher rank than the second. For example, 8S can beat 4S.
Additionally, a trump card can beat any non-trump card, regardless of the rank
of the cards, for example, if the trump suit is clubs ('C'), then 3C can beat
9D. Note that trump cards can be beaten only by the trump cards of higher
rank.

There were n rounds played in the game, so the discard pile now contains 2n
cards. You want to reconstruct the rounds played in the game, but the cards in
the discard pile are shuffled. Find any possible sequence of n rounds that
might have been played in the game.

Input

The first line contains integer t (1 \le t \le 100 ) — the number of test
cases. Then t test cases follow.

The first line of a test case contains the integer number n (1\le n\le 16 ).

The second line of a test case contains one character, the trump suit. It is
one of ""CDHS"".

The third line of a test case contains the description of 2n cards. Each card
is described by a two-character string, the first character is the rank of the
card, which is one of ""23456789"", and the second one is the suit of the card,
which is one of ""CDHS"". All cards are different.

Output

For each test case print the answer to it:

  * Print n lines. In each line, print the description of two cards, in the same format as in the input: the first card that was played by the first player, and then the card that was used by the second player to beat it.
  * If there is no solution, print a single line ""IMPOSSIBLE"".

If there are multiple solutions, print any of them.

Example

Input

    8
    
    3
    
    S
    
    3C 9S 4C 6D 3S 7S
    
    2
    
    C
    
    3S 5D 9S 6H
    
    1
    
    H
    
    6C 5D
    
    1
    
    S
    
    7S 3S
    
    1
    
    H
    
    9S 9H
    
    1
    
    S
    
    9S 9H
    
    1
    
    C
    
    9D 8H
    
    2
    
    C
    
    9C 9S 6H 8C

Output

    3C 4C
    6D 9S
    3S 7S
    IMPOSSIBLE
    IMPOSSIBLE
    3S 7S
    9S 9H
    9H 9S
    IMPOSSIBLE
    6H 9C
    9S 8C","# https://codeforces.com/problemset/problem/1932/D
 
def solve():
    input()
    trump = input()
    trumps = []
    answers = []
    suits = {'C':None , 'D': None, 'H': None, 'S':None}
    for card in input().split():
        rank, suit = card
        if suit == trump:
            trumps.append(rank)
        else:
            if suits[suit] is not None:
                answers.append("" "".join([x + suit for x in sorted([suits[suit] , rank])]))
                suits[suit] = None
            else:
                suits[suit] = rank
 
    for suit, rank in suits.items():
        if rank is None:
            continue
        if trumps != []:
            answers.append(f""{rank}{suit} {trumps.pop()}{trump}"")
        else:
            print(""IMPOSSIBLE"")
            return
    trumps = sorted(trumps)
    while trumps != []:
        print(f""{trumps.pop()}{trump} {trumps.pop()}{trump}"")
    for answer in answers:
        print(answer)
 
 
for _ in range(int(input())):
    solve()",1,False,False,False,False,False,False,False,True,False,False,True,False,False,False,1.0,1.0,1.0
1932_D,1932_D_Juun_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Two players are playing an online card game. The game is played using a
32-card deck. Each card has a suit and a rank. There are four suits: clubs,
diamonds, hearts, and spades. We will encode them with characters 'C', 'D',
'H', and 'S', respectively. And there are 8 ranks, in increasing order: '2',
'3', '4', '5', '6', '7', '8', '9'.

Each card is denoted by two letters: its rank and its suit. For example, the 8
of Hearts is denoted as 8H.

At the beginning of the game, one suit is chosen as the trump suit.

In each round, players make moves like this: the first player places one of
his cards on the table, and the second player must beat this card with one of
their cards. After that, both cards are moved to the discard pile.

A card can beat another card if both cards have the same suit and the first
card has a higher rank than the second. For example, 8S can beat 4S.
Additionally, a trump card can beat any non-trump card, regardless of the rank
of the cards, for example, if the trump suit is clubs ('C'), then 3C can beat
9D. Note that trump cards can be beaten only by the trump cards of higher
rank.

There were n rounds played in the game, so the discard pile now contains 2n
cards. You want to reconstruct the rounds played in the game, but the cards in
the discard pile are shuffled. Find any possible sequence of n rounds that
might have been played in the game.

Input

The first line contains integer t (1 \le t \le 100 ) — the number of test
cases. Then t test cases follow.

The first line of a test case contains the integer number n (1\le n\le 16 ).

The second line of a test case contains one character, the trump suit. It is
one of ""CDHS"".

The third line of a test case contains the description of 2n cards. Each card
is described by a two-character string, the first character is the rank of the
card, which is one of ""23456789"", and the second one is the suit of the card,
which is one of ""CDHS"". All cards are different.

Output

For each test case print the answer to it:

  * Print n lines. In each line, print the description of two cards, in the same format as in the input: the first card that was played by the first player, and then the card that was used by the second player to beat it.
  * If there is no solution, print a single line ""IMPOSSIBLE"".

If there are multiple solutions, print any of them.

Example

Input

    8
    
    3
    
    S
    
    3C 9S 4C 6D 3S 7S
    
    2
    
    C
    
    3S 5D 9S 6H
    
    1
    
    H
    
    6C 5D
    
    1
    
    S
    
    7S 3S
    
    1
    
    H
    
    9S 9H
    
    1
    
    S
    
    9S 9H
    
    1
    
    C
    
    9D 8H
    
    2
    
    C
    
    9C 9S 6H 8C

Output

    3C 4C
    6D 9S
    3S 7S
    IMPOSSIBLE
    IMPOSSIBLE
    3S 7S
    9S 9H
    9H 9S
    IMPOSSIBLE
    6H 9C
    9S 8C","# https://codeforces.com/problemset/problem/1932/D
 
def solve():
    input()
    trump = input()
    trumps = []
    answers = []
    suits = {'C':None , 'D': None, 'H': None, 'S':None}
    for card in input().split():
        rank, suit = card
        if suit == trump:
            trumps.append(rank)
        else:
            if suits[suit] is not None:
                answers.append("" "".join([x + suit for x in sorted([suits[suit] , rank])]))
                suits[suit] = None
            else:
                suits[suit] = rank
 
    for suit, rank in suits.items():
        if rank is None:
            continue
        if trumps != []:
            answers.append(f""{rank}{suit} {trumps.pop()}{trump}"")
        else:
            print(""IMPOSSIBLE"")
            return
    trumps = sorted(trumps)
    while trumps != []:
        print(f""{trumps.pop()}{trump} {trumps.pop()}{trump}"")
    for answer in answers:
        print(answer)
 
 
for _ in range(int(input())):
    solve()",1,False,False,False,False,False,False,False,True,False,True,True,False,False,True,1.0,1.0,1.0
1942_C1,1942_C1_subham_3009_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"[Proof Geometric Construction Can Solve All Love Affairs -
manbo-p](https://soundcloud.com/alice-law-314125270/manbo-p-proof-geometric-
construction-can-solve-all-love-affairs)

⠀

This is the easy version of the problem. The only difference between the two
versions is the constraint on y . In this version y = 0 . You can make hacks
only if both versions are solved.

Bessie has received a birthday cake from her best friend Elsie, and it came in
the form of a regular polygon with n sides. The vertices of the cake are
numbered from 1 to n clockwise. You and Bessie are going to choose some of
those vertices to cut non-intersecting diagonals into the cake. In other
words, the endpoints of the diagonals must be part of the chosen vertices.

Bessie would only like to give out pieces of cake which result in a triangle
to keep consistency. The size of the pieces doesn't matter, and the whole cake
does not have to be separated into all triangles (other shapes are allowed in
the cake, but those will not be counted).

Bessie has already chosen x of those vertices that can be used to form
diagonals. She wants you to choose no more than y other vertices such that the
number of triangular pieces of cake she can give out is maximized.

What is the maximum number of triangular pieces of cake Bessie can give out?

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case consists of three integers, n , x , and y (4
\leq n \leq 10^9 , 2 \leq x \leq \min(n, 2 \cdot 10^5) , y = 0 ) — the number
of sides of the polygon, number of vertices Bessie has chosen, and the maximum
number of other vertices you can choose.

The second line consists of x distinct integers from 1 to n , representing the
vertices Bessie has chosen.

It is guaranteed the sum of x over all test cases does not exceed 2 \cdot 10^5
.

Output

For each test case, output a single integer: the maximum number of non-
intersecting triangular pieces of cake she can give out.

Example

Input

    3
    
    8 4 0
    
    1 6 2 5
    
    8 8 0
    
    1 3 2 5 4 6 7 8
    
    4 2 0
    
    1 3

Output

    2
    6
    2
    
Note

In test cases 1 , 2 and 3 , you can get 2 , 6 and 2 non-intersecting
triangular pieces of cake, respectively. A possible construction is shown in
the following pictures:

The green dots represent vertices that can be used, the blue lines represent
diagonals that are drawn, and the red numbers represent triangles that are
counted.

![](https://espresso.codeforces.com/80282d636b83d4002ec89755d465b4adb37b9cfb.png)","if __name__ == ""__main__"":
    t=int(input())
    while(t>0):
        t-=1
        [n,x,y]=map(int,input().split())
        arr=input().split()
        arr=[int(arr[i]) for i in range(x)]
        print(x-2)",1,False,False,False,True,True,False,True,True,False,False,False,True,True,True,1.0,1.0,1.0
1942_C1,1942_C1_subham_3009_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"[Proof Geometric Construction Can Solve All Love Affairs -
manbo-p](https://soundcloud.com/alice-law-314125270/manbo-p-proof-geometric-
construction-can-solve-all-love-affairs)

⠀

This is the easy version of the problem. The only difference between the two
versions is the constraint on y . In this version y = 0 . You can make hacks
only if both versions are solved.

Bessie has received a birthday cake from her best friend Elsie, and it came in
the form of a regular polygon with n sides. The vertices of the cake are
numbered from 1 to n clockwise. You and Bessie are going to choose some of
those vertices to cut non-intersecting diagonals into the cake. In other
words, the endpoints of the diagonals must be part of the chosen vertices.

Bessie would only like to give out pieces of cake which result in a triangle
to keep consistency. The size of the pieces doesn't matter, and the whole cake
does not have to be separated into all triangles (other shapes are allowed in
the cake, but those will not be counted).

Bessie has already chosen x of those vertices that can be used to form
diagonals. She wants you to choose no more than y other vertices such that the
number of triangular pieces of cake she can give out is maximized.

What is the maximum number of triangular pieces of cake Bessie can give out?

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case consists of three integers, n , x , and y (4
\leq n \leq 10^9 , 2 \leq x \leq \min(n, 2 \cdot 10^5) , y = 0 ) — the number
of sides of the polygon, number of vertices Bessie has chosen, and the maximum
number of other vertices you can choose.

The second line consists of x distinct integers from 1 to n , representing the
vertices Bessie has chosen.

It is guaranteed the sum of x over all test cases does not exceed 2 \cdot 10^5
.

Output

For each test case, output a single integer: the maximum number of non-
intersecting triangular pieces of cake she can give out.

Example

Input

    3
    
    8 4 0
    
    1 6 2 5
    
    8 8 0
    
    1 3 2 5 4 6 7 8
    
    4 2 0
    
    1 3

Output

    2
    6
    2
    
Note

In test cases 1 , 2 and 3 , you can get 2 , 6 and 2 non-intersecting
triangular pieces of cake, respectively. A possible construction is shown in
the following pictures:

The green dots represent vertices that can be used, the blue lines represent
diagonals that are drawn, and the red numbers represent triangles that are
counted.

![](https://espresso.codeforces.com/80282d636b83d4002ec89755d465b4adb37b9cfb.png)","if __name__ == ""__main__"":
    t=int(input())
    while(t>0):
        t-=1
        [n,x,y]=map(int,input().split())
        arr=input().split()
        arr=[int(arr[i]) for i in range(x)]
        print(x-2)",1,False,False,False,True,False,True,True,True,False,False,False,True,True,True,1.0,1.0,1.0
1942_C1,1942_C1_subham_3009_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"[Proof Geometric Construction Can Solve All Love Affairs -
manbo-p](https://soundcloud.com/alice-law-314125270/manbo-p-proof-geometric-
construction-can-solve-all-love-affairs)

⠀

This is the easy version of the problem. The only difference between the two
versions is the constraint on y . In this version y = 0 . You can make hacks
only if both versions are solved.

Bessie has received a birthday cake from her best friend Elsie, and it came in
the form of a regular polygon with n sides. The vertices of the cake are
numbered from 1 to n clockwise. You and Bessie are going to choose some of
those vertices to cut non-intersecting diagonals into the cake. In other
words, the endpoints of the diagonals must be part of the chosen vertices.

Bessie would only like to give out pieces of cake which result in a triangle
to keep consistency. The size of the pieces doesn't matter, and the whole cake
does not have to be separated into all triangles (other shapes are allowed in
the cake, but those will not be counted).

Bessie has already chosen x of those vertices that can be used to form
diagonals. She wants you to choose no more than y other vertices such that the
number of triangular pieces of cake she can give out is maximized.

What is the maximum number of triangular pieces of cake Bessie can give out?

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case consists of three integers, n , x , and y (4
\leq n \leq 10^9 , 2 \leq x \leq \min(n, 2 \cdot 10^5) , y = 0 ) — the number
of sides of the polygon, number of vertices Bessie has chosen, and the maximum
number of other vertices you can choose.

The second line consists of x distinct integers from 1 to n , representing the
vertices Bessie has chosen.

It is guaranteed the sum of x over all test cases does not exceed 2 \cdot 10^5
.

Output

For each test case, output a single integer: the maximum number of non-
intersecting triangular pieces of cake she can give out.

Example

Input

    3
    
    8 4 0
    
    1 6 2 5
    
    8 8 0
    
    1 3 2 5 4 6 7 8
    
    4 2 0
    
    1 3

Output

    2
    6
    2
    
Note

In test cases 1 , 2 and 3 , you can get 2 , 6 and 2 non-intersecting
triangular pieces of cake, respectively. A possible construction is shown in
the following pictures:

The green dots represent vertices that can be used, the blue lines represent
diagonals that are drawn, and the red numbers represent triangles that are
counted.

![](https://espresso.codeforces.com/80282d636b83d4002ec89755d465b4adb37b9cfb.png)","if __name__ == ""__main__"":
    t=int(input())
    while(t>0):
        t-=1
        [n,x,y]=map(int,input().split())
        arr=input().split()
        arr=[int(arr[i]) for i in range(x)]
        print(x-2)",1,False,False,False,True,True,False,True,True,False,False,False,True,True,True,1.0,1.0,1.0
1928_C,1928_C_Redpanda_x_100%,codeforces2024,human,qwen2p5-72b-instruct,"In a well-known school, a physical education lesson took place. As usual,
everyone was lined up and asked to settle in ""the first–k -th"" position.

As is known, settling in ""the first–k -th"" position occurs as follows: the
first k people have numbers 1, 2, 3, \ldots, k , the next k - 2 people have
numbers k - 1, k - 2, \ldots, 2 , the next k people have numbers 1, 2, 3,
\ldots, k , and so on. Thus, the settling repeats every 2k - 2 positions.
Examples of settling are given in the ""Note"" section.

The boy Vasya constantly forgets everything. For example, he forgot the number
k described above. But he remembers the position he occupied in the line, as
well as the number he received during the settling. Help Vasya understand how
many natural numbers k fit under the given constraints.

Note that the settling exists if and only if k > 1 . In particular, this means
that the settling does not exist for k = 1 .

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 100 ) — the number of test cases. This is followed by
the description of the test cases.

The only line of each test case contains two integers n and x (1 \le x < n \le
10^9 ) — Vasya's position in the line and the number Vasya received during the
settling.

Output

For each test case, output a single integer — the number of different k that
fit under the given constraints.

It can be proven that under the given constraints, the answer is finite.

Example

Input

    5
    
    10 2
    
    3 1
    
    76 4
    
    100 99
    
    1000000000 500000000

Output

    4
    1
    9
    0
    1
    
Note

In the first test case, k equals 2, 3, 5, 6 are suitable.

An example of settling for these k :

k / №| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10   
---|---|---|---|---|---|---|---|---|---|---  
2 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2   
3 | 1 | 2 | 3 | 2 | 1 | 2 | 3 | 2 | 1 | 2   
5 | 1 | 2 | 3 | 4 | 5 | 4 | 3 | 2 | 1 | 2   
6 | 1 | 2 | 3 | 4 | 5 | 6 | 5 | 4 | 3 | 2   
  
In the second test case, k = 2 is suitable.","def divisors(n):
    # get factors and their counts
    factors = {}
    nn = n
    i = 2
    while i*i <= nn:
        while nn % i == 0:
            factors[i] = factors.get(i, 0) + 1
            nn //= i
        i += 1
    if nn > 1:
        factors[nn] = factors.get(nn, 0) + 1
 
    primes = list(factors.keys())
 
    # generates factors from primes[k:] subset
    def generate(k):
        if k == len(primes):
            yield 1
        else:
            rest = generate(k+1)
            prime = primes[k]
            for factor in rest:
                prime_to_i = 1
                # prime_to_i iterates prime**i values, i being all possible exponents
                for _ in range(factors[prime] + 1):
                    yield factor * prime_to_i
                    prime_to_i *= prime
 
    # in python3, `yield from generate(0)` would also work
    for factor in generate(0):
        yield factor
 
for _  in range(int(input())):
    # n = int(input())
    n, x = map(int, input().split())
    # arr = list(map(int, input().split()))
 
    ans = 1
 
    h = n-x
    ans = set(k for k in divisors(h) if not k%2 and k/2+1 >= x) # divisors of h >=  max(x, 2)
 
    # print(list(divisors(h)))
 
    ans2 = set()
    if x!=1:
        h = n + x-2
        ans2 = set(k for k in divisors(h) if not k%2 and k/2+1 >= x)
 
    # for f in sorted(ans):
    #     print(f//2+1, end='\t')
    # print()
 
    # print(sorted(ans))
    # print(sorted(ans2))
    ans = ans.union(ans2)
    print(len(ans))
    # print()",1,True,False,False,False,False,True,True,True,False,False,False,False,False,False,1.0,1.0,1.0
1928_C,1928_C_Redpanda_x_100%,codeforces2024,human,qwen2p5-72b-instruct,"In a well-known school, a physical education lesson took place. As usual,
everyone was lined up and asked to settle in ""the first–k -th"" position.

As is known, settling in ""the first–k -th"" position occurs as follows: the
first k people have numbers 1, 2, 3, \ldots, k , the next k - 2 people have
numbers k - 1, k - 2, \ldots, 2 , the next k people have numbers 1, 2, 3,
\ldots, k , and so on. Thus, the settling repeats every 2k - 2 positions.
Examples of settling are given in the ""Note"" section.

The boy Vasya constantly forgets everything. For example, he forgot the number
k described above. But he remembers the position he occupied in the line, as
well as the number he received during the settling. Help Vasya understand how
many natural numbers k fit under the given constraints.

Note that the settling exists if and only if k > 1 . In particular, this means
that the settling does not exist for k = 1 .

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 100 ) — the number of test cases. This is followed by
the description of the test cases.

The only line of each test case contains two integers n and x (1 \le x < n \le
10^9 ) — Vasya's position in the line and the number Vasya received during the
settling.

Output

For each test case, output a single integer — the number of different k that
fit under the given constraints.

It can be proven that under the given constraints, the answer is finite.

Example

Input

    5
    
    10 2
    
    3 1
    
    76 4
    
    100 99
    
    1000000000 500000000

Output

    4
    1
    9
    0
    1
    
Note

In the first test case, k equals 2, 3, 5, 6 are suitable.

An example of settling for these k :

k / №| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10   
---|---|---|---|---|---|---|---|---|---|---  
2 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2   
3 | 1 | 2 | 3 | 2 | 1 | 2 | 3 | 2 | 1 | 2   
5 | 1 | 2 | 3 | 4 | 5 | 4 | 3 | 2 | 1 | 2   
6 | 1 | 2 | 3 | 4 | 5 | 6 | 5 | 4 | 3 | 2   
  
In the second test case, k = 2 is suitable.","def divisors(n):
    # get factors and their counts
    factors = {}
    nn = n
    i = 2
    while i*i <= nn:
        while nn % i == 0:
            factors[i] = factors.get(i, 0) + 1
            nn //= i
        i += 1
    if nn > 1:
        factors[nn] = factors.get(nn, 0) + 1
 
    primes = list(factors.keys())
 
    # generates factors from primes[k:] subset
    def generate(k):
        if k == len(primes):
            yield 1
        else:
            rest = generate(k+1)
            prime = primes[k]
            for factor in rest:
                prime_to_i = 1
                # prime_to_i iterates prime**i values, i being all possible exponents
                for _ in range(factors[prime] + 1):
                    yield factor * prime_to_i
                    prime_to_i *= prime
 
    # in python3, `yield from generate(0)` would also work
    for factor in generate(0):
        yield factor
 
for _  in range(int(input())):
    # n = int(input())
    n, x = map(int, input().split())
    # arr = list(map(int, input().split()))
 
    ans = 1
 
    h = n-x
    ans = set(k for k in divisors(h) if not k%2 and k/2+1 >= x) # divisors of h >=  max(x, 2)
 
    # print(list(divisors(h)))
 
    ans2 = set()
    if x!=1:
        h = n + x-2
        ans2 = set(k for k in divisors(h) if not k%2 and k/2+1 >= x)
 
    # for f in sorted(ans):
    #     print(f//2+1, end='\t')
    # print()
 
    # print(sorted(ans))
    # print(sorted(ans2))
    ans = ans.union(ans2)
    print(len(ans))
    # print()",1,True,False,False,True,False,True,True,True,False,False,False,False,False,True,1.0,1.0,1.0
1928_C,1928_C_Redpanda_x_100%,codeforces2024,human,qwen2p5-72b-instruct,"In a well-known school, a physical education lesson took place. As usual,
everyone was lined up and asked to settle in ""the first–k -th"" position.

As is known, settling in ""the first–k -th"" position occurs as follows: the
first k people have numbers 1, 2, 3, \ldots, k , the next k - 2 people have
numbers k - 1, k - 2, \ldots, 2 , the next k people have numbers 1, 2, 3,
\ldots, k , and so on. Thus, the settling repeats every 2k - 2 positions.
Examples of settling are given in the ""Note"" section.

The boy Vasya constantly forgets everything. For example, he forgot the number
k described above. But he remembers the position he occupied in the line, as
well as the number he received during the settling. Help Vasya understand how
many natural numbers k fit under the given constraints.

Note that the settling exists if and only if k > 1 . In particular, this means
that the settling does not exist for k = 1 .

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 100 ) — the number of test cases. This is followed by
the description of the test cases.

The only line of each test case contains two integers n and x (1 \le x < n \le
10^9 ) — Vasya's position in the line and the number Vasya received during the
settling.

Output

For each test case, output a single integer — the number of different k that
fit under the given constraints.

It can be proven that under the given constraints, the answer is finite.

Example

Input

    5
    
    10 2
    
    3 1
    
    76 4
    
    100 99
    
    1000000000 500000000

Output

    4
    1
    9
    0
    1
    
Note

In the first test case, k equals 2, 3, 5, 6 are suitable.

An example of settling for these k :

k / №| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10   
---|---|---|---|---|---|---|---|---|---|---  
2 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2   
3 | 1 | 2 | 3 | 2 | 1 | 2 | 3 | 2 | 1 | 2   
5 | 1 | 2 | 3 | 4 | 5 | 4 | 3 | 2 | 1 | 2   
6 | 1 | 2 | 3 | 4 | 5 | 6 | 5 | 4 | 3 | 2   
  
In the second test case, k = 2 is suitable.","def divisors(n):
    # get factors and their counts
    factors = {}
    nn = n
    i = 2
    while i*i <= nn:
        while nn % i == 0:
            factors[i] = factors.get(i, 0) + 1
            nn //= i
        i += 1
    if nn > 1:
        factors[nn] = factors.get(nn, 0) + 1
 
    primes = list(factors.keys())
 
    # generates factors from primes[k:] subset
    def generate(k):
        if k == len(primes):
            yield 1
        else:
            rest = generate(k+1)
            prime = primes[k]
            for factor in rest:
                prime_to_i = 1
                # prime_to_i iterates prime**i values, i being all possible exponents
                for _ in range(factors[prime] + 1):
                    yield factor * prime_to_i
                    prime_to_i *= prime
 
    # in python3, `yield from generate(0)` would also work
    for factor in generate(0):
        yield factor
 
for _  in range(int(input())):
    # n = int(input())
    n, x = map(int, input().split())
    # arr = list(map(int, input().split()))
 
    ans = 1
 
    h = n-x
    ans = set(k for k in divisors(h) if not k%2 and k/2+1 >= x) # divisors of h >=  max(x, 2)
 
    # print(list(divisors(h)))
 
    ans2 = set()
    if x!=1:
        h = n + x-2
        ans2 = set(k for k in divisors(h) if not k%2 and k/2+1 >= x)
 
    # for f in sorted(ans):
    #     print(f//2+1, end='\t')
    # print()
 
    # print(sorted(ans))
    # print(sorted(ans2))
    ans = ans.union(ans2)
    print(len(ans))
    # print()",1,True,False,False,False,False,True,True,True,False,False,False,True,True,False,1.0,1.0,1.0
1951_A,1951_A_dhamer69_100%,codeforces2024,human,qwen2p5-72b-instruct,"import os def generate_files_for_html_in_range(start, end): # 获取当前目录下的所有子文件夹
current_dir = os.getcwd() subfolders = [f.path for f in
os.scandir(current_dir) if f.is_dir()] for folder in subfolders: #
检查文件夹名称是否在指定范围内 folder_name = os.path.basename(folder) if
folder_name.isdigit() and start <= int(folder_name) <= end: #
获取子文件夹中的所有.html文件 html_files = [f for f in os.listdir(folder) if
f.endswith('.html')] print(f""Folder '{folder}' contains {len(html_files)} HTML
files."") # 为每个.html文件生成对应的文件 for html_file in html_files: base_name =
os.path.splitext(html_file)[0] ac_file = os.path.join(folder,
f""{base_name}-ac.py"") wa_file = os.path.join(folder, f""{base_name}-wa.py"") #
创建文件 open(ac_file, 'w').close() open(wa_file, 'w').close() print(f""Generated
files: {ac_file}, {wa_file}"") if __name__ == ""__main__"": # 指定目录范围 start_range
= 1951 end_range = 1980 generate_files_for_html_in_range(start_range,
end_range)","t=int(input())
while(t>0):
    n=int(input())
    s=input()
    if n==2:
        if s==""00"":
            print(""YES"")
        else:
            print(""NO"")
    else:
        count_1=s.count(""1"")
        if count_1%2!=0:
            print(""NO"")
        else:
            if s.count(""11"")==1 and count_1==2:
                print(""NO"")
            else:
                print(""YES"")
    t-=1",1,True,False,False,False,False,True,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1951_A,1951_A_dhamer69_100%,codeforces2024,human,qwen2p5-72b-instruct,"import os def generate_files_for_html_in_range(start, end): # 获取当前目录下的所有子文件夹
current_dir = os.getcwd() subfolders = [f.path for f in
os.scandir(current_dir) if f.is_dir()] for folder in subfolders: #
检查文件夹名称是否在指定范围内 folder_name = os.path.basename(folder) if
folder_name.isdigit() and start <= int(folder_name) <= end: #
获取子文件夹中的所有.html文件 html_files = [f for f in os.listdir(folder) if
f.endswith('.html')] print(f""Folder '{folder}' contains {len(html_files)} HTML
files."") # 为每个.html文件生成对应的文件 for html_file in html_files: base_name =
os.path.splitext(html_file)[0] ac_file = os.path.join(folder,
f""{base_name}-ac.py"") wa_file = os.path.join(folder, f""{base_name}-wa.py"") #
创建文件 open(ac_file, 'w').close() open(wa_file, 'w').close() print(f""Generated
files: {ac_file}, {wa_file}"") if __name__ == ""__main__"": # 指定目录范围 start_range
= 1951 end_range = 1980 generate_files_for_html_in_range(start_range,
end_range)","t=int(input())
while(t>0):
    n=int(input())
    s=input()
    if n==2:
        if s==""00"":
            print(""YES"")
        else:
            print(""NO"")
    else:
        count_1=s.count(""1"")
        if count_1%2!=0:
            print(""NO"")
        else:
            if s.count(""11"")==1 and count_1==2:
                print(""NO"")
            else:
                print(""YES"")
    t-=1",1,True,False,False,False,False,True,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1951_A,1951_A_dhamer69_100%,codeforces2024,human,qwen2p5-72b-instruct,"import os def generate_files_for_html_in_range(start, end): # 获取当前目录下的所有子文件夹
current_dir = os.getcwd() subfolders = [f.path for f in
os.scandir(current_dir) if f.is_dir()] for folder in subfolders: #
检查文件夹名称是否在指定范围内 folder_name = os.path.basename(folder) if
folder_name.isdigit() and start <= int(folder_name) <= end: #
获取子文件夹中的所有.html文件 html_files = [f for f in os.listdir(folder) if
f.endswith('.html')] print(f""Folder '{folder}' contains {len(html_files)} HTML
files."") # 为每个.html文件生成对应的文件 for html_file in html_files: base_name =
os.path.splitext(html_file)[0] ac_file = os.path.join(folder,
f""{base_name}-ac.py"") wa_file = os.path.join(folder, f""{base_name}-wa.py"") #
创建文件 open(ac_file, 'w').close() open(wa_file, 'w').close() print(f""Generated
files: {ac_file}, {wa_file}"") if __name__ == ""__main__"": # 指定目录范围 start_range
= 1951 end_range = 1980 generate_files_for_html_in_range(start_range,
end_range)","t=int(input())
while(t>0):
    n=int(input())
    s=input()
    if n==2:
        if s==""00"":
            print(""YES"")
        else:
            print(""NO"")
    else:
        count_1=s.count(""1"")
        if count_1%2!=0:
            print(""NO"")
        else:
            if s.count(""11"")==1 and count_1==2:
                print(""NO"")
            else:
                print(""YES"")
    t-=1",1,True,False,False,False,True,True,False,True,False,False,False,False,False,False,1.0,1.0,1.0
1970_C1,1970_C1_Ehijoe_100%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","from functools import reduce
import math
from collections import deque, defaultdict
 
 
def testcase():
	n, t = map(int, input().split())
	edges = []
	empty = True
	nodes = defaultdict(list)
	for i in range(n - 1):
		u, v = map(int, input().split())
		nodes[u].append(v)
		nodes[v].append(u)
	
	ends = []
	for key in nodes:
		if len(nodes[key]) == 1:
			ends.append(key)
	
	s, e = list(ends)
	tree = [s]
	prev = s
	curr = nodes[s][0]
	while curr != e:
		tree.append(curr)
		if nodes[curr][0] == prev:
			prev = curr
			curr = nodes[curr][1]
		else:
			prev = curr
			curr = nodes[curr][0]
	tree.append(e)
 
	start = int(input())
	idx = tree.index(start)
	moves = [idx, n - idx - 1]
	if any([move % 2 == 1 for move in moves]):
		print(""Ron"")
	else:
		print(""Hermione"")
 
 
t = 1 # int(input())
 
for i in range(t):
	testcase()",1,True,False,False,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1970_C1,1970_C1_Ehijoe_100%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","from functools import reduce
import math
from collections import deque, defaultdict
 
 
def testcase():
	n, t = map(int, input().split())
	edges = []
	empty = True
	nodes = defaultdict(list)
	for i in range(n - 1):
		u, v = map(int, input().split())
		nodes[u].append(v)
		nodes[v].append(u)
	
	ends = []
	for key in nodes:
		if len(nodes[key]) == 1:
			ends.append(key)
	
	s, e = list(ends)
	tree = [s]
	prev = s
	curr = nodes[s][0]
	while curr != e:
		tree.append(curr)
		if nodes[curr][0] == prev:
			prev = curr
			curr = nodes[curr][1]
		else:
			prev = curr
			curr = nodes[curr][0]
	tree.append(e)
 
	start = int(input())
	idx = tree.index(start)
	moves = [idx, n - idx - 1]
	if any([move % 2 == 1 for move in moves]):
		print(""Ron"")
	else:
		print(""Hermione"")
 
 
t = 1 # int(input())
 
for i in range(t):
	testcase()",1,True,True,False,True,True,False,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1970_C1,1970_C1_Ehijoe_100%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","from functools import reduce
import math
from collections import deque, defaultdict
 
 
def testcase():
	n, t = map(int, input().split())
	edges = []
	empty = True
	nodes = defaultdict(list)
	for i in range(n - 1):
		u, v = map(int, input().split())
		nodes[u].append(v)
		nodes[v].append(u)
	
	ends = []
	for key in nodes:
		if len(nodes[key]) == 1:
			ends.append(key)
	
	s, e = list(ends)
	tree = [s]
	prev = s
	curr = nodes[s][0]
	while curr != e:
		tree.append(curr)
		if nodes[curr][0] == prev:
			prev = curr
			curr = nodes[curr][1]
		else:
			prev = curr
			curr = nodes[curr][0]
	tree.append(e)
 
	start = int(input())
	idx = tree.index(start)
	moves = [idx, n - idx - 1]
	if any([move % 2 == 1 for move in moves]):
		print(""Ron"")
	else:
		print(""Hermione"")
 
 
t = 1 # int(input())
 
for i in range(t):
	testcase()",1,True,False,False,True,True,True,True,True,True,False,True,True,True,True,1.0,1.0,1.0
1946_A,1946_A_amulya5283_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array a of n integers.

The median of an array q_1, q_2, \ldots, q_k is the number p_{\lceil
\frac{k}{2} \rceil} , where p is the array q sorted in non-decreasing order.
For example, the median of the array [9, 5, 1, 2, 6] is 5 , as in the sorted
array [1, 2, 5, 6, 9] , the number at index \lceil \frac{5}{2} \rceil = 3 is 5
, and the median of the array [9, 2, 8, 3] is 3 , as in the sorted array [2,
3, 8, 9] , the number at index \lceil \frac{4}{2} \rceil = 2 is 3 .

You are allowed to choose an integer i (1 \le i \le n ) and increase a_i by 1
in one operation.

Your task is to find the minimum number of operations required to increase the
median of the array.

Note that the array a may not necessarily contain distinct numbers.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. Then follows the
description of the test cases.

The first line of each test case contains a single integer n (1 \le n \le 10^5
) — the length of the array a .

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\le a_i \le 10^9 ) — the array a .

It is guaranteed that the sum of the values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer — the minimum number of operations
required to increase the median of the array.

Example

Input

    8
    
    3
    
    2 2 8
    
    4
    
    7 3 3 1
    
    1
    
    1000000000
    
    5
    
    5 5 5 4 5
    
    6
    
    2 1 2 3 1 4
    
    2
    
    1 2
    
    2
    
    1 1
    
    4
    
    5 5 5 5

Output

    1
    2
    1
    3
    2
    1
    2
    3
    
Note

In the first test case, you can apply one operation to the first number and
obtain the array [3, 2, 8] , the median of this array is 3 , as it is the
number at index \lceil \frac{3}{2} \rceil = 2 in the non-decreasing sorted
array [2, 3, 8] . The median of the original array [2, 2, 8] is 2 , as it is
the number at index \lceil \frac{3}{2} \rceil = 2 in the non-decreasing sorted
array [2, 2, 8] . Thus, the median increased (3 > 2 ) in just one operation.

In the fourth test case, you can apply one operation to each of the numbers at
indices 1, 2, 3 and obtain the array [6, 6, 6, 4, 5] , the median of this
array is 6 , as it is the number at index \lceil \frac{5}{2} \rceil = 3 in the
non-decreasing sorted array [4, 5, 6, 6, 6] . The median of the original array
[5, 5, 5, 4, 5] is 5 , as it is the number at index \lceil \frac{5}{2} \rceil
= 2 in the non-decreasing sorted array [4, 5, 5, 5, 5] . Thus, the median
increased (6 > 5 ) in three operations. It can be shown that this is the
minimum possible number of operations.

In the fifth test case, you can apply one operation to each of the numbers at
indices 1, 3 and obtain the array [3, 1, 3, 3, 1, 4] , the median of this
array is 3 , as it is the number at index \lceil \frac{6}{2} \rceil = 3 in the
non-decreasing sorted array [1, 1, 3, 3, 3, 4] . The median of the original
array [2, 1, 2, 3, 1, 4] is 2 , as it is the number at index \lceil
\frac{6}{2} \rceil = 3 in the non-decreasing sorted array [1, 1, 2, 2, 3, 4] .
Thus, the median increased (3 > 2 ) in two operations. It can be shown that
this is the minimum possible number of operations.","t=int(input())
 
while t>0:
    t-=1
    n=int(input())
    a=list(map(int,input().split()))
    a.sort()
    if n==1:
        print(1)
    else:
        res=0
        mdx=(n)//2 +n%2-1
        for i in range(mdx,n):
            if a[mdx]==a[i]:
                res+=1
        print(res)",1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1946_A,1946_A_amulya5283_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array a of n integers.

The median of an array q_1, q_2, \ldots, q_k is the number p_{\lceil
\frac{k}{2} \rceil} , where p is the array q sorted in non-decreasing order.
For example, the median of the array [9, 5, 1, 2, 6] is 5 , as in the sorted
array [1, 2, 5, 6, 9] , the number at index \lceil \frac{5}{2} \rceil = 3 is 5
, and the median of the array [9, 2, 8, 3] is 3 , as in the sorted array [2,
3, 8, 9] , the number at index \lceil \frac{4}{2} \rceil = 2 is 3 .

You are allowed to choose an integer i (1 \le i \le n ) and increase a_i by 1
in one operation.

Your task is to find the minimum number of operations required to increase the
median of the array.

Note that the array a may not necessarily contain distinct numbers.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. Then follows the
description of the test cases.

The first line of each test case contains a single integer n (1 \le n \le 10^5
) — the length of the array a .

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\le a_i \le 10^9 ) — the array a .

It is guaranteed that the sum of the values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer — the minimum number of operations
required to increase the median of the array.

Example

Input

    8
    
    3
    
    2 2 8
    
    4
    
    7 3 3 1
    
    1
    
    1000000000
    
    5
    
    5 5 5 4 5
    
    6
    
    2 1 2 3 1 4
    
    2
    
    1 2
    
    2
    
    1 1
    
    4
    
    5 5 5 5

Output

    1
    2
    1
    3
    2
    1
    2
    3
    
Note

In the first test case, you can apply one operation to the first number and
obtain the array [3, 2, 8] , the median of this array is 3 , as it is the
number at index \lceil \frac{3}{2} \rceil = 2 in the non-decreasing sorted
array [2, 3, 8] . The median of the original array [2, 2, 8] is 2 , as it is
the number at index \lceil \frac{3}{2} \rceil = 2 in the non-decreasing sorted
array [2, 2, 8] . Thus, the median increased (3 > 2 ) in just one operation.

In the fourth test case, you can apply one operation to each of the numbers at
indices 1, 2, 3 and obtain the array [6, 6, 6, 4, 5] , the median of this
array is 6 , as it is the number at index \lceil \frac{5}{2} \rceil = 3 in the
non-decreasing sorted array [4, 5, 6, 6, 6] . The median of the original array
[5, 5, 5, 4, 5] is 5 , as it is the number at index \lceil \frac{5}{2} \rceil
= 2 in the non-decreasing sorted array [4, 5, 5, 5, 5] . Thus, the median
increased (6 > 5 ) in three operations. It can be shown that this is the
minimum possible number of operations.

In the fifth test case, you can apply one operation to each of the numbers at
indices 1, 3 and obtain the array [3, 1, 3, 3, 1, 4] , the median of this
array is 3 , as it is the number at index \lceil \frac{6}{2} \rceil = 3 in the
non-decreasing sorted array [1, 1, 3, 3, 3, 4] . The median of the original
array [2, 1, 2, 3, 1, 4] is 2 , as it is the number at index \lceil
\frac{6}{2} \rceil = 3 in the non-decreasing sorted array [1, 1, 2, 2, 3, 4] .
Thus, the median increased (3 > 2 ) in two operations. It can be shown that
this is the minimum possible number of operations.","t=int(input())
 
while t>0:
    t-=1
    n=int(input())
    a=list(map(int,input().split()))
    a.sort()
    if n==1:
        print(1)
    else:
        res=0
        mdx=(n)//2 +n%2-1
        for i in range(mdx,n):
            if a[mdx]==a[i]:
                res+=1
        print(res)",1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1946_A,1946_A_amulya5283_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array a of n integers.

The median of an array q_1, q_2, \ldots, q_k is the number p_{\lceil
\frac{k}{2} \rceil} , where p is the array q sorted in non-decreasing order.
For example, the median of the array [9, 5, 1, 2, 6] is 5 , as in the sorted
array [1, 2, 5, 6, 9] , the number at index \lceil \frac{5}{2} \rceil = 3 is 5
, and the median of the array [9, 2, 8, 3] is 3 , as in the sorted array [2,
3, 8, 9] , the number at index \lceil \frac{4}{2} \rceil = 2 is 3 .

You are allowed to choose an integer i (1 \le i \le n ) and increase a_i by 1
in one operation.

Your task is to find the minimum number of operations required to increase the
median of the array.

Note that the array a may not necessarily contain distinct numbers.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. Then follows the
description of the test cases.

The first line of each test case contains a single integer n (1 \le n \le 10^5
) — the length of the array a .

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\le a_i \le 10^9 ) — the array a .

It is guaranteed that the sum of the values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer — the minimum number of operations
required to increase the median of the array.

Example

Input

    8
    
    3
    
    2 2 8
    
    4
    
    7 3 3 1
    
    1
    
    1000000000
    
    5
    
    5 5 5 4 5
    
    6
    
    2 1 2 3 1 4
    
    2
    
    1 2
    
    2
    
    1 1
    
    4
    
    5 5 5 5

Output

    1
    2
    1
    3
    2
    1
    2
    3
    
Note

In the first test case, you can apply one operation to the first number and
obtain the array [3, 2, 8] , the median of this array is 3 , as it is the
number at index \lceil \frac{3}{2} \rceil = 2 in the non-decreasing sorted
array [2, 3, 8] . The median of the original array [2, 2, 8] is 2 , as it is
the number at index \lceil \frac{3}{2} \rceil = 2 in the non-decreasing sorted
array [2, 2, 8] . Thus, the median increased (3 > 2 ) in just one operation.

In the fourth test case, you can apply one operation to each of the numbers at
indices 1, 2, 3 and obtain the array [6, 6, 6, 4, 5] , the median of this
array is 6 , as it is the number at index \lceil \frac{5}{2} \rceil = 3 in the
non-decreasing sorted array [4, 5, 6, 6, 6] . The median of the original array
[5, 5, 5, 4, 5] is 5 , as it is the number at index \lceil \frac{5}{2} \rceil
= 2 in the non-decreasing sorted array [4, 5, 5, 5, 5] . Thus, the median
increased (6 > 5 ) in three operations. It can be shown that this is the
minimum possible number of operations.

In the fifth test case, you can apply one operation to each of the numbers at
indices 1, 3 and obtain the array [3, 1, 3, 3, 1, 4] , the median of this
array is 3 , as it is the number at index \lceil \frac{6}{2} \rceil = 3 in the
non-decreasing sorted array [1, 1, 3, 3, 3, 4] . The median of the original
array [2, 1, 2, 3, 1, 4] is 2 , as it is the number at index \lceil
\frac{6}{2} \rceil = 3 in the non-decreasing sorted array [1, 1, 2, 2, 3, 4] .
Thus, the median increased (3 > 2 ) in two operations. It can be shown that
this is the minimum possible number of operations.","t=int(input())
 
while t>0:
    t-=1
    n=int(input())
    a=list(map(int,input().split()))
    a.sort()
    if n==1:
        print(1)
    else:
        res=0
        mdx=(n)//2 +n%2-1
        for i in range(mdx,n):
            if a[mdx]==a[i]:
                res+=1
        print(res)",1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1966_C,1966_C_vedang_iitb_2.27%,codeforces2024,human,qwen2p5-72b-instruct,"Alice and Bob are playing a game on n piles of stones. On each player's turn,
they select a positive integer k that is at most the size of the smallest
nonempty pile and remove k stones from each nonempty pile at once. The first
player who is unable to make a move (because all piles are empty) loses.

Given that Alice goes first, who will win the game if both players play
optimally?

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le
2\cdot 10^5 ) — the number of piles in the game.

The next line of each test case contains n integers a_1, a_2, \ldots a_n (1
\le a_i \le 10^9 ), where a_i is the initial number of stones in the i -th
pile.

It is guaranteed that the sum of n over all test cases does not exceed 2\cdot
10^5 .

Output

For each test case, print a single line with the name of the winner, assuming
both players play optimally. If Alice wins, print ""Alice"", otherwise print
""Bob"" (without quotes).

Example

Input

    7
    
    5
    
    3 3 3 3 3
    
    2
    
    1 7
    
    7
    
    1 3 9 7 4 2 100
    
    3
    
    1 2 3
    
    6
    
    2 1 3 4 2 4
    
    8
    
    5 7 2 9 6 3 3 2
    
    1
    
    1000000000

Output

    Alice
    Bob
    Alice
    Alice
    Bob
    Alice
    Alice
    
Note

In the first test case, Alice can win by choosing k=3 on her first turn, which
will empty all of the piles at once.

In the second test case, Alice must choose k=1 on her first turn since there
is a pile of size 1 , so Bob can win on the next turn by choosing k=6 .","def modifyArr(a):
    a_new = sorted(list(set(a)))
    a_temp = a_new.copy()
 
    for i in range(1,len(a_new)):
        a_new[i] = a_new[i] - a_temp[i-1]
    
    return a_new
 
def findWinner(a,n):
    if n==1:
        return 1
    elif n==2:
        if a[0]%2==0:
            return 1
        else:
            return 2
    else:
        winNext = findWinner(a[1:],n-1)
        if winNext==2 or (winNext==1 and a[0]!=1):
            return 1
        else:
            return 2            
 
t = int(input())
 
for _ in range(t):
    n = int(input())
 
    a = [int(x) for x in input().split()]
 
    a = modifyArr(a)
    n = len(a)
    #print(a)
 
    if findWinner(a,n)==1:
        print(""Alice"")
    else:
        print(""Bob"")",1,False,False,False,True,False,True,True,True,True,True,False,True,True,True,0.6632194919908184,0.1711985605126319,0.6666666666666666
1968_E,1968_E_Leifu_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an integer n . You choose n cells (x_1,y_1),
(x_2,y_2),\dots,(x_n,y_n) in the grid n\times n where 1\le x_i\le n and 1\le
y_i\le n .

Let \mathcal{H} be the set of distinct Manhattan distances between any pair of
cells. Your task is to maximize the size of \mathcal{H} . Examples of sets and
their construction are given in the notes.

If there exists more than one solution, you are allowed to output any.

Manhattan distance between cells (x_1,y_1) and (x_2,y_2) equals
|x_1-x_2|+|y_1-y_2| .

Input

The first line contains a single integer t (1\le t\le 50 ) — the number of
test cases.

Each of the following t lines contains a single integer n (2\le n\le 10^3 ).

Output

For each test case, output n points which maximize the size of \mathcal{H} .
It is not necessary to output an empty line at the end of the answer for each
test case.

Example

Input

    5
    
    2
    
    3
    
    4
    
    5
    
    6

Output

    1 1
    1 2
    
    2 1
    2 3
    3 1
    
    1 1
    1 3
    4 3
    4 4
    
    1 1
    1 3
    1 4
    2 1
    5 5
    
    1 4
    1 5
    1 6
    5 2
    5 5
    6 1
    
Note

In the first testcase we have n=2 . One of the possible arrangements is:

![](https://espresso.codeforces.com/4d7adaa08c9ee5ebf2a0caba13185ac968d6bcd9.png)
The arrangement with cells located in (1,1) and (1,2) . In this case
\mathcal{H}=\\{|1-1|+|1-1|,|1-1|+|2-2|,|1-1|+|1-2|\\}=\\{0,0,1\\}=\\{0,1\\} .
Hence, the size of \mathcal{H} is 2 . It can be shown that it is the greatest
possible answer.

In the second testcase we have n=3 . The optimal arrangement is:

![](https://espresso.codeforces.com/52d127e3dbe0141bb58dbdf4158586772a208758.png)
The arrangement with cells located in (2,1) , (2,3) and (3,1) .

\mathcal{H}
=\\{|2-2|+|1-1|,|2-2|+|3-3|,|3-3|+|1-1|,|2-2|+|1-3|,|2-3|+|1-1|,|2-3|+|3-1|\\}
=\\{0,0,0,2,1,3\\} =\\{0,1,2,3\\} .

For n=4 a possible arrangement is:

![](https://espresso.codeforces.com/575a6758d1f67174ceb877b32a1e89770cd2281a.png)

For n=5 a possible arrangement is:

![](https://espresso.codeforces.com/b790401b426625982c00d04cff13aceec53918b4.png)

For n=6 a possible arrangement is:

![](https://espresso.codeforces.com/d0f498905660a67115d9f58c6cbc1439ba6e509c.png)","t = int(input())
 
for i in range(t):
    n = int(input())
    print(""1 1"")
    print(""1 2"")
    if n == 3:
        print(""2 3"")
    else:
        print(""2 4"")
        for j in range(4, n+1):
            print(str(j) + "" "" + str(j))",1,False,False,False,True,False,True,False,True,False,False,False,True,True,True,1.0,1.0,1.0
1929_A,1929_A_cuiwenqian370_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Sasha decided to give his girlfriend an array a_1, a_2, \ldots, a_n . He found
out that his girlfriend evaluates the beauty of the array as the sum of the
values (a_i - a_{i - 1}) for all integers i from 2 to n .

Help Sasha and tell him the maximum beauty of the array a that he can obtain,
if he can rearrange its elements in any way.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 500 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (2 \leq n \leq
100 ) — the length of the array a .

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\leq a_i \leq 10^9 ) — the elements of the array a .

Output

For each test case, output a single integer — the maximum beauty of the array
a that can be obtained.

Example

Input

    5
    
    3
    
    2 1 3
    
    3
    
    69 69 69
    
    5
    
    100 54 80 43 90
    
    4
    
    3 4 3 3
    
    2
    
    2 1

Output

    2
    0
    57
    1
    1
    
Note

In the first test case, the elements of the array a can be rearranged to make
a = [1, 2, 3] . Then its beauty will be equal to (a_2 - a_1) + (a_3 - a_2) =
(2 - 1) + (3 - 2) = 2 .

In the second test case, there is no need to rearrange the elements of the
array a . Then its beauty will be equal to 0 .","def max_beauty_of_array(n, arr):
    arr.sort()
    # Create a new array with largest and smallest elements alternating
    new_arr = []
    left = 0
    right = n - 1
    while left <= right:
        if left == right:
            new_arr.append(arr[left])
        else:
            new_arr.append(arr[right])
            new_arr.append(arr[left])
        left += 1
        right -= 1
    
    # Calculate the sum of absolute differences
    max_beauty = 0
    for i in range(1, n):
        max_beauty += abs(new_arr[i] - new_arr[i - 1])
    
    return max_beauty
 
# Read number of test cases
t = int(input())
results = []
for _ in range(t):
    n = int(input())
    arr = list(map(int, input().split()))
    result = max_beauty_of_array(n, arr)
    results.append(result)
 
for result in results:
    print(result)",1,False,False,False,False,False,False,False,False,True,True,True,False,False,False,1.0,1.0,1.0
1929_A,1929_A_cuiwenqian370_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Sasha decided to give his girlfriend an array a_1, a_2, \ldots, a_n . He found
out that his girlfriend evaluates the beauty of the array as the sum of the
values (a_i - a_{i - 1}) for all integers i from 2 to n .

Help Sasha and tell him the maximum beauty of the array a that he can obtain,
if he can rearrange its elements in any way.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 500 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (2 \leq n \leq
100 ) — the length of the array a .

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\leq a_i \leq 10^9 ) — the elements of the array a .

Output

For each test case, output a single integer — the maximum beauty of the array
a that can be obtained.

Example

Input

    5
    
    3
    
    2 1 3
    
    3
    
    69 69 69
    
    5
    
    100 54 80 43 90
    
    4
    
    3 4 3 3
    
    2
    
    2 1

Output

    2
    0
    57
    1
    1
    
Note

In the first test case, the elements of the array a can be rearranged to make
a = [1, 2, 3] . Then its beauty will be equal to (a_2 - a_1) + (a_3 - a_2) =
(2 - 1) + (3 - 2) = 2 .

In the second test case, there is no need to rearrange the elements of the
array a . Then its beauty will be equal to 0 .","def max_beauty_of_array(n, arr):
    arr.sort()
    # Create a new array with largest and smallest elements alternating
    new_arr = []
    left = 0
    right = n - 1
    while left <= right:
        if left == right:
            new_arr.append(arr[left])
        else:
            new_arr.append(arr[right])
            new_arr.append(arr[left])
        left += 1
        right -= 1
    
    # Calculate the sum of absolute differences
    max_beauty = 0
    for i in range(1, n):
        max_beauty += abs(new_arr[i] - new_arr[i - 1])
    
    return max_beauty
 
# Read number of test cases
t = int(input())
results = []
for _ in range(t):
    n = int(input())
    arr = list(map(int, input().split()))
    result = max_beauty_of_array(n, arr)
    results.append(result)
 
for result in results:
    print(result)",1,False,False,False,True,False,True,False,False,False,False,False,False,False,True,1.0,1.0,1.0
1929_A,1929_A_cuiwenqian370_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Sasha decided to give his girlfriend an array a_1, a_2, \ldots, a_n . He found
out that his girlfriend evaluates the beauty of the array as the sum of the
values (a_i - a_{i - 1}) for all integers i from 2 to n .

Help Sasha and tell him the maximum beauty of the array a that he can obtain,
if he can rearrange its elements in any way.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 500 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (2 \leq n \leq
100 ) — the length of the array a .

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\leq a_i \leq 10^9 ) — the elements of the array a .

Output

For each test case, output a single integer — the maximum beauty of the array
a that can be obtained.

Example

Input

    5
    
    3
    
    2 1 3
    
    3
    
    69 69 69
    
    5
    
    100 54 80 43 90
    
    4
    
    3 4 3 3
    
    2
    
    2 1

Output

    2
    0
    57
    1
    1
    
Note

In the first test case, the elements of the array a can be rearranged to make
a = [1, 2, 3] . Then its beauty will be equal to (a_2 - a_1) + (a_3 - a_2) =
(2 - 1) + (3 - 2) = 2 .

In the second test case, there is no need to rearrange the elements of the
array a . Then its beauty will be equal to 0 .","def max_beauty_of_array(n, arr):
    arr.sort()
    # Create a new array with largest and smallest elements alternating
    new_arr = []
    left = 0
    right = n - 1
    while left <= right:
        if left == right:
            new_arr.append(arr[left])
        else:
            new_arr.append(arr[right])
            new_arr.append(arr[left])
        left += 1
        right -= 1
    
    # Calculate the sum of absolute differences
    max_beauty = 0
    for i in range(1, n):
        max_beauty += abs(new_arr[i] - new_arr[i - 1])
    
    return max_beauty
 
# Read number of test cases
t = int(input())
results = []
for _ in range(t):
    n = int(input())
    arr = list(map(int, input().split()))
    result = max_beauty_of_array(n, arr)
    results.append(result)
 
for result in results:
    print(result)",1,False,False,False,True,False,False,False,False,False,True,True,True,True,True,1.0,1.0,1.0
1968_C,1968_C_tah23seen_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array x_2,x_3,\dots,x_n . Your task is to find any array
a_1,\dots,a_n , where:

  * 1\le a_i\le 10^9 for all 1\le i\le n . 
  * x_i=a_i \bmod a_{i-1} for all 2\le i\le n . 

Here c\bmod d denotes the remainder of the division of the integer c by the
integer d . For example 5 \bmod 2 = 1 , 72 \bmod 3 = 0 , 143 \bmod 14 = 3 .

Note that if there is more than one a which satisfies the statement, you are
allowed to find any.

Input

The first line contains a single integer t (1\le t\le 10^4) — the number of
test cases.

The first line of each test case contains a single integer n (2\le n\le 500) —
the number of elements in a .

The second line of each test case contains n-1 integers x_2,\dots,x_n (1\le
x_i\le 500) — the elements of x .

It is guaranteed that the sum of values n over all test cases does not exceed
2 \cdot 10^5 .

Output

For each test case output any a_1,\dots,a_n (1 \le a_i \le 10^9 ) which
satisfies the statement.

Example

Input

    5
    
    4
    
    2 4 1
    
    3
    
    1 1
    
    6
    
    4 2 5 1 2
    
    2
    
    500
    
    3
    
    1 5

Output

    3 5 4 9
    2 5 11
    5 14 16 5 11 24
    501 500
    2 7 5

Note

In the first test case a=[3,5,4,9] satisfies the conditions, because:

  * a_2\bmod a_1=5\bmod 3=2=x_2 ; 
  * a_3\bmod a_2=4\bmod 5=4=x_3 ; 
  * a_4\bmod a_3=9\bmod 4=1=x_4 ;","def solve(arr,n):
  ans=[10**9]*n
  i=n-2
  while i>=0:
    ans[i]=ans[i+1]-arr[i]
    i-=1
  return ans
 
 
t=int(input())
while t:
  n=int(input())
  arr=[int(x) for x in input().split(' ')]
  ans=solve(arr,n)
  for i in ans:
    print(i,end=' ')
  print()
  t-=1",1,True,False,False,True,False,False,False,False,False,False,True,False,False,False,1.0,1.0,1.0
1968_C,1968_C_tah23seen_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array x_2,x_3,\dots,x_n . Your task is to find any array
a_1,\dots,a_n , where:

  * 1\le a_i\le 10^9 for all 1\le i\le n . 
  * x_i=a_i \bmod a_{i-1} for all 2\le i\le n . 

Here c\bmod d denotes the remainder of the division of the integer c by the
integer d . For example 5 \bmod 2 = 1 , 72 \bmod 3 = 0 , 143 \bmod 14 = 3 .

Note that if there is more than one a which satisfies the statement, you are
allowed to find any.

Input

The first line contains a single integer t (1\le t\le 10^4) — the number of
test cases.

The first line of each test case contains a single integer n (2\le n\le 500) —
the number of elements in a .

The second line of each test case contains n-1 integers x_2,\dots,x_n (1\le
x_i\le 500) — the elements of x .

It is guaranteed that the sum of values n over all test cases does not exceed
2 \cdot 10^5 .

Output

For each test case output any a_1,\dots,a_n (1 \le a_i \le 10^9 ) which
satisfies the statement.

Example

Input

    5
    
    4
    
    2 4 1
    
    3
    
    1 1
    
    6
    
    4 2 5 1 2
    
    2
    
    500
    
    3
    
    1 5

Output

    3 5 4 9
    2 5 11
    5 14 16 5 11 24
    501 500
    2 7 5

Note

In the first test case a=[3,5,4,9] satisfies the conditions, because:

  * a_2\bmod a_1=5\bmod 3=2=x_2 ; 
  * a_3\bmod a_2=4\bmod 5=4=x_3 ; 
  * a_4\bmod a_3=9\bmod 4=1=x_4 ;","def solve(arr,n):
  ans=[10**9]*n
  i=n-2
  while i>=0:
    ans[i]=ans[i+1]-arr[i]
    i-=1
  return ans
 
 
t=int(input())
while t:
  n=int(input())
  arr=[int(x) for x in input().split(' ')]
  ans=solve(arr,n)
  for i in ans:
    print(i,end=' ')
  print()
  t-=1",1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1968_C,1968_C_tah23seen_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array x_2,x_3,\dots,x_n . Your task is to find any array
a_1,\dots,a_n , where:

  * 1\le a_i\le 10^9 for all 1\le i\le n . 
  * x_i=a_i \bmod a_{i-1} for all 2\le i\le n . 

Here c\bmod d denotes the remainder of the division of the integer c by the
integer d . For example 5 \bmod 2 = 1 , 72 \bmod 3 = 0 , 143 \bmod 14 = 3 .

Note that if there is more than one a which satisfies the statement, you are
allowed to find any.

Input

The first line contains a single integer t (1\le t\le 10^4) — the number of
test cases.

The first line of each test case contains a single integer n (2\le n\le 500) —
the number of elements in a .

The second line of each test case contains n-1 integers x_2,\dots,x_n (1\le
x_i\le 500) — the elements of x .

It is guaranteed that the sum of values n over all test cases does not exceed
2 \cdot 10^5 .

Output

For each test case output any a_1,\dots,a_n (1 \le a_i \le 10^9 ) which
satisfies the statement.

Example

Input

    5
    
    4
    
    2 4 1
    
    3
    
    1 1
    
    6
    
    4 2 5 1 2
    
    2
    
    500
    
    3
    
    1 5

Output

    3 5 4 9
    2 5 11
    5 14 16 5 11 24
    501 500
    2 7 5

Note

In the first test case a=[3,5,4,9] satisfies the conditions, because:

  * a_2\bmod a_1=5\bmod 3=2=x_2 ; 
  * a_3\bmod a_2=4\bmod 5=4=x_3 ; 
  * a_4\bmod a_3=9\bmod 4=1=x_4 ;","def solve(arr,n):
  ans=[10**9]*n
  i=n-2
  while i>=0:
    ans[i]=ans[i+1]-arr[i]
    i-=1
  return ans
 
 
t=int(input())
while t:
  n=int(input())
  arr=[int(x) for x in input().split(' ')]
  ans=solve(arr,n)
  for i in ans:
    print(i,end=' ')
  print()
  t-=1",1,True,False,False,True,False,False,False,False,True,False,False,True,False,False,1.0,1.0,1.0
1956_A,1956_A_Sniperlyfe_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Nene invented a new game based on an increasing sequence of integers a_1, a_2,
\ldots, a_k .

In this game, initially n players are lined up in a row. In each of the rounds
of this game, the following happens:

  * Nene finds the a_1 -th, a_2 -th, \ldots , a_k -th players in a row. They are kicked out of the game simultaneously. If the i -th player in a row should be kicked out, but there are fewer than i players in a row, they are skipped. 

Once no one is kicked out of the game in some round, all the players that are
still in the game are declared as winners.

For example, consider the game with a=[3, 5] and n=5 players. Let the players
be named player A, player B, \ldots , player E in the order they are lined up
initially. Then,

  * Before the first round, players are lined up as ABCDE. Nene finds the 3 -rd and the 5 -th players in a row. These are players C and E. They are kicked out in the first round. 
  * Now players are lined up as ABD. Nene finds the 3 -rd and the 5 -th players in a row. The 3 -rd player is player D and there is no 5 -th player in a row. Thus, only player D is kicked out in the second round. 
  * In the third round, no one is kicked out of the game, so the game ends after this round. 
  * Players A and B are declared as the winners. 

Nene has not yet decided how many people would join the game initially. Nene
gave you q integers n_1, n_2, \ldots, n_q and you should answer the following
question for each 1 \le i \le q independently:

  * How many people would be declared as winners if there are n_i players in the game initially? 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 250 ). The description of test cases follows.

The first line case contains two integers k and q (1 \le k, q \le 100 ) — the
length of the sequence a and the number of values n_i you should solve this
problem for.

The second line contains k integers a_1,a_2,\ldots,a_k (1\leq
a_1<a_2<\ldots<a_k\leq 100 ) — the sequence a .

The third line contains q integers n_1,n_2,\ldots,n_q (1\leq n_i \leq 100 ).

Output

For each test case, output q integers: the i -th (1\le i \le q ) of them
should be the number of players declared as winners if initially n_i players
join the game.

Example

Input

    6
    
    2 1
    
    3 5
    
    5
    
    5 3
    
    2 4 6 7 9
    
    1 3 5
    
    5 4
    
    3 4 5 6 7
    
    1 2 3 4
    
    2 3
    
    69 96
    
    1 10 100
    
    1 1
    
    100
    
    50
    
    3 3
    
    10 20 30
    
    1 10 100

Output

    2 
    1 1 1 
    1 2 2 2 
    1 10 68 
    50 
    1 9 9 
    
Note

The first test case was explained in the statement.

In the second test case, when n=1 , the only player stays in the game in the
first round. After that, the game ends and the only player is declared as a
winner.","def rem_p(n, p):
    while n >= min(p):
        n -= sum(1 for x in p if x<= n)
    return n
    
def solve():
    t = int(input())
    for _ in range(t):
        k, q = map(int, input().split())
        p = list(map(int, input().split()))
        qs = list(map(int, input().split()))
        
        res = []
        for n in qs:
            res.append(rem_p(n, p))
            print(' '.join(map(str, res)))
            
solve()",1,False,False,False,False,False,False,False,True,False,False,False,False,False,False,1.0,1.0,1.0
1956_A,1956_A_Sniperlyfe_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Nene invented a new game based on an increasing sequence of integers a_1, a_2,
\ldots, a_k .

In this game, initially n players are lined up in a row. In each of the rounds
of this game, the following happens:

  * Nene finds the a_1 -th, a_2 -th, \ldots , a_k -th players in a row. They are kicked out of the game simultaneously. If the i -th player in a row should be kicked out, but there are fewer than i players in a row, they are skipped. 

Once no one is kicked out of the game in some round, all the players that are
still in the game are declared as winners.

For example, consider the game with a=[3, 5] and n=5 players. Let the players
be named player A, player B, \ldots , player E in the order they are lined up
initially. Then,

  * Before the first round, players are lined up as ABCDE. Nene finds the 3 -rd and the 5 -th players in a row. These are players C and E. They are kicked out in the first round. 
  * Now players are lined up as ABD. Nene finds the 3 -rd and the 5 -th players in a row. The 3 -rd player is player D and there is no 5 -th player in a row. Thus, only player D is kicked out in the second round. 
  * In the third round, no one is kicked out of the game, so the game ends after this round. 
  * Players A and B are declared as the winners. 

Nene has not yet decided how many people would join the game initially. Nene
gave you q integers n_1, n_2, \ldots, n_q and you should answer the following
question for each 1 \le i \le q independently:

  * How many people would be declared as winners if there are n_i players in the game initially? 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 250 ). The description of test cases follows.

The first line case contains two integers k and q (1 \le k, q \le 100 ) — the
length of the sequence a and the number of values n_i you should solve this
problem for.

The second line contains k integers a_1,a_2,\ldots,a_k (1\leq
a_1<a_2<\ldots<a_k\leq 100 ) — the sequence a .

The third line contains q integers n_1,n_2,\ldots,n_q (1\leq n_i \leq 100 ).

Output

For each test case, output q integers: the i -th (1\le i \le q ) of them
should be the number of players declared as winners if initially n_i players
join the game.

Example

Input

    6
    
    2 1
    
    3 5
    
    5
    
    5 3
    
    2 4 6 7 9
    
    1 3 5
    
    5 4
    
    3 4 5 6 7
    
    1 2 3 4
    
    2 3
    
    69 96
    
    1 10 100
    
    1 1
    
    100
    
    50
    
    3 3
    
    10 20 30
    
    1 10 100

Output

    2 
    1 1 1 
    1 2 2 2 
    1 10 68 
    50 
    1 9 9 
    
Note

The first test case was explained in the statement.

In the second test case, when n=1 , the only player stays in the game in the
first round. After that, the game ends and the only player is declared as a
winner.","def rem_p(n, p):
    while n >= min(p):
        n -= sum(1 for x in p if x<= n)
    return n
    
def solve():
    t = int(input())
    for _ in range(t):
        k, q = map(int, input().split())
        p = list(map(int, input().split()))
        qs = list(map(int, input().split()))
        
        res = []
        for n in qs:
            res.append(rem_p(n, p))
            print(' '.join(map(str, res)))
            
solve()",1,False,False,False,False,False,False,False,True,False,False,False,False,False,False,1.0,1.0,1.0
1956_A,1956_A_Sniperlyfe_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Nene invented a new game based on an increasing sequence of integers a_1, a_2,
\ldots, a_k .

In this game, initially n players are lined up in a row. In each of the rounds
of this game, the following happens:

  * Nene finds the a_1 -th, a_2 -th, \ldots , a_k -th players in a row. They are kicked out of the game simultaneously. If the i -th player in a row should be kicked out, but there are fewer than i players in a row, they are skipped. 

Once no one is kicked out of the game in some round, all the players that are
still in the game are declared as winners.

For example, consider the game with a=[3, 5] and n=5 players. Let the players
be named player A, player B, \ldots , player E in the order they are lined up
initially. Then,

  * Before the first round, players are lined up as ABCDE. Nene finds the 3 -rd and the 5 -th players in a row. These are players C and E. They are kicked out in the first round. 
  * Now players are lined up as ABD. Nene finds the 3 -rd and the 5 -th players in a row. The 3 -rd player is player D and there is no 5 -th player in a row. Thus, only player D is kicked out in the second round. 
  * In the third round, no one is kicked out of the game, so the game ends after this round. 
  * Players A and B are declared as the winners. 

Nene has not yet decided how many people would join the game initially. Nene
gave you q integers n_1, n_2, \ldots, n_q and you should answer the following
question for each 1 \le i \le q independently:

  * How many people would be declared as winners if there are n_i players in the game initially? 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 250 ). The description of test cases follows.

The first line case contains two integers k and q (1 \le k, q \le 100 ) — the
length of the sequence a and the number of values n_i you should solve this
problem for.

The second line contains k integers a_1,a_2,\ldots,a_k (1\leq
a_1<a_2<\ldots<a_k\leq 100 ) — the sequence a .

The third line contains q integers n_1,n_2,\ldots,n_q (1\leq n_i \leq 100 ).

Output

For each test case, output q integers: the i -th (1\le i \le q ) of them
should be the number of players declared as winners if initially n_i players
join the game.

Example

Input

    6
    
    2 1
    
    3 5
    
    5
    
    5 3
    
    2 4 6 7 9
    
    1 3 5
    
    5 4
    
    3 4 5 6 7
    
    1 2 3 4
    
    2 3
    
    69 96
    
    1 10 100
    
    1 1
    
    100
    
    50
    
    3 3
    
    10 20 30
    
    1 10 100

Output

    2 
    1 1 1 
    1 2 2 2 
    1 10 68 
    50 
    1 9 9 
    
Note

The first test case was explained in the statement.

In the second test case, when n=1 , the only player stays in the game in the
first round. After that, the game ends and the only player is declared as a
winner.","def rem_p(n, p):
    while n >= min(p):
        n -= sum(1 for x in p if x<= n)
    return n
    
def solve():
    t = int(input())
    for _ in range(t):
        k, q = map(int, input().split())
        p = list(map(int, input().split()))
        qs = list(map(int, input().split()))
        
        res = []
        for n in qs:
            res.append(rem_p(n, p))
            print(' '.join(map(str, res)))
            
solve()",1,False,False,False,True,False,False,False,False,False,False,False,True,True,True,1.0,1.0,1.0
1932_B,1932_B_fpeng2002_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"The Chaya tribe believes that there are n signs of the apocalypse. Over time,
it has been found out that the i -th sign occurs every a_i years (in years a_i
, 2 \cdot a_i , 3 \cdot a_i , \dots ).

According to the legends, for the apocalypse to happen, the signs must occur
sequentially. That is, first they wait for the first sign to occur, then
strictly after it, the second sign will occur, and so on. That is, if the i
-th sign occurred in the year x , the tribe starts waiting for the occurrence
of the (i+1) -th sign, starting from the year x+1 .

In which year will the n -th sign occur and the apocalypse will happen?

Input

The first line of the input contains a single integer t (1 \le t \le 1000 ) —
the number of test cases. Then follow the descriptions of the test cases.

The first line of each test case contains a single integer n (1 \le n \le 100
) — the number of signs.

The second line of each test case contains n integers a_1, a_2, a_3, \dots,
a_n (1 \le a_i \le 10^6 ) — the periodicities of the signs.

Output

For each test case, output a single integer — the year in which all n signs
will occur.

Example

Input

    4
    
    6
    
    3 2 4 5 9 18
    
    5
    
    1 2 3 4 5
    
    5
    
    1 1 1 1 1
    
    6
    
    50 30 711 200 503 1006

Output

    36
    5
    5
    2012
    
Note

In the first set of input data of the example:

  * The tribe will wait for the first sign in the 3 -rd year; 
  * the tribe will wait for the second sign in the 4 -th year (since year 2 have already passed); 
  * the tribe will wait for the third sign in the 8 -th year (since the second sign has already occurred in the 4 -th year); 
  * the tribe will wait for the fourth sign in the 10 -th year (since year 5 have already passed); 
  * the tribe will wait for the fifth sign in the 18 -th year (since year 9 have already passed); 
  * the tribe will wait for the sixth sign in the 36 -th year (since the fifth sign has already occurred in the 18 -th year).","num_tests = int(input())
 
while num_tests > 0:
    num_tests -= 1
 
    n = int(input())
    nums = [int(x) for x in input().split("" "")] 
 
    start_year = 0
    for x in range(0, len(nums)):
        start_year = ((start_year+1)//nums[x] + 1)*(nums[x])
    print(start_year)",1,False,True,True,True,True,True,True,True,True,False,True,False,True,True,1.0,1.0,1.0
1932_B,1932_B_fpeng2002_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"The Chaya tribe believes that there are n signs of the apocalypse. Over time,
it has been found out that the i -th sign occurs every a_i years (in years a_i
, 2 \cdot a_i , 3 \cdot a_i , \dots ).

According to the legends, for the apocalypse to happen, the signs must occur
sequentially. That is, first they wait for the first sign to occur, then
strictly after it, the second sign will occur, and so on. That is, if the i
-th sign occurred in the year x , the tribe starts waiting for the occurrence
of the (i+1) -th sign, starting from the year x+1 .

In which year will the n -th sign occur and the apocalypse will happen?

Input

The first line of the input contains a single integer t (1 \le t \le 1000 ) —
the number of test cases. Then follow the descriptions of the test cases.

The first line of each test case contains a single integer n (1 \le n \le 100
) — the number of signs.

The second line of each test case contains n integers a_1, a_2, a_3, \dots,
a_n (1 \le a_i \le 10^6 ) — the periodicities of the signs.

Output

For each test case, output a single integer — the year in which all n signs
will occur.

Example

Input

    4
    
    6
    
    3 2 4 5 9 18
    
    5
    
    1 2 3 4 5
    
    5
    
    1 1 1 1 1
    
    6
    
    50 30 711 200 503 1006

Output

    36
    5
    5
    2012
    
Note

In the first set of input data of the example:

  * The tribe will wait for the first sign in the 3 -rd year; 
  * the tribe will wait for the second sign in the 4 -th year (since year 2 have already passed); 
  * the tribe will wait for the third sign in the 8 -th year (since the second sign has already occurred in the 4 -th year); 
  * the tribe will wait for the fourth sign in the 10 -th year (since year 5 have already passed); 
  * the tribe will wait for the fifth sign in the 18 -th year (since year 9 have already passed); 
  * the tribe will wait for the sixth sign in the 36 -th year (since the fifth sign has already occurred in the 18 -th year).","num_tests = int(input())
 
while num_tests > 0:
    num_tests -= 1
 
    n = int(input())
    nums = [int(x) for x in input().split("" "")] 
 
    start_year = 0
    for x in range(0, len(nums)):
        start_year = ((start_year+1)//nums[x] + 1)*(nums[x])
    print(start_year)",1,False,True,True,False,True,True,True,True,True,True,True,False,False,False,1.0,1.0,1.0
1932_B,1932_B_fpeng2002_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"The Chaya tribe believes that there are n signs of the apocalypse. Over time,
it has been found out that the i -th sign occurs every a_i years (in years a_i
, 2 \cdot a_i , 3 \cdot a_i , \dots ).

According to the legends, for the apocalypse to happen, the signs must occur
sequentially. That is, first they wait for the first sign to occur, then
strictly after it, the second sign will occur, and so on. That is, if the i
-th sign occurred in the year x , the tribe starts waiting for the occurrence
of the (i+1) -th sign, starting from the year x+1 .

In which year will the n -th sign occur and the apocalypse will happen?

Input

The first line of the input contains a single integer t (1 \le t \le 1000 ) —
the number of test cases. Then follow the descriptions of the test cases.

The first line of each test case contains a single integer n (1 \le n \le 100
) — the number of signs.

The second line of each test case contains n integers a_1, a_2, a_3, \dots,
a_n (1 \le a_i \le 10^6 ) — the periodicities of the signs.

Output

For each test case, output a single integer — the year in which all n signs
will occur.

Example

Input

    4
    
    6
    
    3 2 4 5 9 18
    
    5
    
    1 2 3 4 5
    
    5
    
    1 1 1 1 1
    
    6
    
    50 30 711 200 503 1006

Output

    36
    5
    5
    2012
    
Note

In the first set of input data of the example:

  * The tribe will wait for the first sign in the 3 -rd year; 
  * the tribe will wait for the second sign in the 4 -th year (since year 2 have already passed); 
  * the tribe will wait for the third sign in the 8 -th year (since the second sign has already occurred in the 4 -th year); 
  * the tribe will wait for the fourth sign in the 10 -th year (since year 5 have already passed); 
  * the tribe will wait for the fifth sign in the 18 -th year (since year 9 have already passed); 
  * the tribe will wait for the sixth sign in the 36 -th year (since the fifth sign has already occurred in the 18 -th year).","num_tests = int(input())
 
while num_tests > 0:
    num_tests -= 1
 
    n = int(input())
    nums = [int(x) for x in input().split("" "")] 
 
    start_year = 0
    for x in range(0, len(nums)):
        start_year = ((start_year+1)//nums[x] + 1)*(nums[x])
    print(start_year)",1,False,True,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1946_E,1946_E_freeskyljy_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Some permutation of length n is guessed.

You are given the indices of its prefix maximums and suffix maximums.

Recall that a permutation of length k is an array of size k such that each
integer from 1 to k occurs exactly once.

Prefix maximums are the elements that are the maximum on the prefix ending at
that element. More formally, the element a_i is a prefix maximum if a_i > a_j
for every j < i .

Similarly, suffix maximums are defined, the element a_i is a suffix maximum if
a_i > a_j for every j > i .

You need to output the number of different permutations that could have been
guessed.

As this number can be very large, output the answer modulo 10^9 + 7 .

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. Then follows the
description of the test cases.

The first line of each test case contains three integers n, m_1 and m_2 (1 \le
m_1, m_2 \le n \le 2 \cdot 10^5 ) — the length of the permutation, the number
of prefix maximums, and the number of suffix maximums, respectively.

The second line of each test case contains m_1 integers p_1 < p_2 < \ldots <
p_{m_1} (1 \le p_i \le n ) — the indices of the prefix maximums in increasing
order.

The third line of each test case contains m_2 integers s_1 < s_2 < \ldots <
s_{m_2} (1 \le s_i \le n ) — the indices of the suffix maximums in increasing
order.

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer on a separate line — the number of
suitable permutations modulo 10^9 + 7 .

Example

Input

    6
    
    1 1 1
    
    1
    
    1
    
    4 2 3
    
    1 2
    
    2 3 4
    
    3 3 1
    
    1 2 3
    
    3
    
    5 3 4
    
    1 2 3
    
    2 3 4 5
    
    20 5 4
    
    1 2 3 4 12
    
    12 13 18 20
    
    6 2 3
    
    1 3
    
    3 4 6

Output

    1
    3
    1
    0
    317580808
    10
    
Note

The following permutations are suitable for the second set of input data:

  * [1, 4, 3, 2] 
  * [2, 4, 3, 1] 
  * [3, 4, 2, 1] 

The following permutations are suitable for the sixth set of input data:

  * [2, 1, 6, 5, 3, 4] 
  * [3, 1, 6, 5, 2, 4] 
  * [3, 2, 6, 5, 1, 4] 
  * [4, 1, 6, 5, 2, 3] 
  * [4, 2, 6, 5, 1, 3] 
  * [4, 3, 6, 5, 1, 2] 
  * [5, 1, 6, 4, 2, 3] 
  * [5, 2, 6, 4, 1, 3] 
  * [5, 3, 6, 4, 1, 2] 
  * [5, 4, 6, 3, 1, 2]","import sys
import math
input = sys.stdin.readline
MOD = int(1e9+7)
 
def solve():
    N, M1, M2 = map(int, input().split())
    L = list(map(int, input().split()))
    R = list(map(int, input().split()))
    # if N == 1:
    #     return 1
    if L[-1] != R[0]:
        return 0
    if L[0] != 1 or R[0] != N:
        return 0
    if M1 > 1 and M2 > 1 and L[-2] == R[1]:
        return 0
    ans = math.comb(N-1, L[-1]-1)
    # left
    cur = M1 - 2
    if M1 > 1:
        nums_left = L[-1] - 2
        i = L[-1] - 1
        while i > 1:
            if i == L[cur]:
                cur -= 1
            else:
                ans = (ans*nums_left)%MOD
            nums_left -= 1
            i -= 1
    # right
    nums_left = N - R[0] - 1
    if M2 > 1:
        cur = 1
        i = R[0] + 1
        while i < N:
            if i == R[cur]:
                cur += 1
            else:
                ans = (ans*nums_left)%MOD
            nums_left -= 1
            i += 1
    return ans
 
for _ in range(int(input())):
    print(solve())",1,False,False,False,True,False,True,True,True,False,False,False,True,True,True,1.0,1.0,1.0
1946_E,1946_E_freeskyljy_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Some permutation of length n is guessed.

You are given the indices of its prefix maximums and suffix maximums.

Recall that a permutation of length k is an array of size k such that each
integer from 1 to k occurs exactly once.

Prefix maximums are the elements that are the maximum on the prefix ending at
that element. More formally, the element a_i is a prefix maximum if a_i > a_j
for every j < i .

Similarly, suffix maximums are defined, the element a_i is a suffix maximum if
a_i > a_j for every j > i .

You need to output the number of different permutations that could have been
guessed.

As this number can be very large, output the answer modulo 10^9 + 7 .

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. Then follows the
description of the test cases.

The first line of each test case contains three integers n, m_1 and m_2 (1 \le
m_1, m_2 \le n \le 2 \cdot 10^5 ) — the length of the permutation, the number
of prefix maximums, and the number of suffix maximums, respectively.

The second line of each test case contains m_1 integers p_1 < p_2 < \ldots <
p_{m_1} (1 \le p_i \le n ) — the indices of the prefix maximums in increasing
order.

The third line of each test case contains m_2 integers s_1 < s_2 < \ldots <
s_{m_2} (1 \le s_i \le n ) — the indices of the suffix maximums in increasing
order.

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer on a separate line — the number of
suitable permutations modulo 10^9 + 7 .

Example

Input

    6
    
    1 1 1
    
    1
    
    1
    
    4 2 3
    
    1 2
    
    2 3 4
    
    3 3 1
    
    1 2 3
    
    3
    
    5 3 4
    
    1 2 3
    
    2 3 4 5
    
    20 5 4
    
    1 2 3 4 12
    
    12 13 18 20
    
    6 2 3
    
    1 3
    
    3 4 6

Output

    1
    3
    1
    0
    317580808
    10
    
Note

The following permutations are suitable for the second set of input data:

  * [1, 4, 3, 2] 
  * [2, 4, 3, 1] 
  * [3, 4, 2, 1] 

The following permutations are suitable for the sixth set of input data:

  * [2, 1, 6, 5, 3, 4] 
  * [3, 1, 6, 5, 2, 4] 
  * [3, 2, 6, 5, 1, 4] 
  * [4, 1, 6, 5, 2, 3] 
  * [4, 2, 6, 5, 1, 3] 
  * [4, 3, 6, 5, 1, 2] 
  * [5, 1, 6, 4, 2, 3] 
  * [5, 2, 6, 4, 1, 3] 
  * [5, 3, 6, 4, 1, 2] 
  * [5, 4, 6, 3, 1, 2]","import sys
import math
input = sys.stdin.readline
MOD = int(1e9+7)
 
def solve():
    N, M1, M2 = map(int, input().split())
    L = list(map(int, input().split()))
    R = list(map(int, input().split()))
    # if N == 1:
    #     return 1
    if L[-1] != R[0]:
        return 0
    if L[0] != 1 or R[0] != N:
        return 0
    if M1 > 1 and M2 > 1 and L[-2] == R[1]:
        return 0
    ans = math.comb(N-1, L[-1]-1)
    # left
    cur = M1 - 2
    if M1 > 1:
        nums_left = L[-1] - 2
        i = L[-1] - 1
        while i > 1:
            if i == L[cur]:
                cur -= 1
            else:
                ans = (ans*nums_left)%MOD
            nums_left -= 1
            i -= 1
    # right
    nums_left = N - R[0] - 1
    if M2 > 1:
        cur = 1
        i = R[0] + 1
        while i < N:
            if i == R[cur]:
                cur += 1
            else:
                ans = (ans*nums_left)%MOD
            nums_left -= 1
            i += 1
    return ans
 
for _ in range(int(input())):
    print(solve())",1,False,False,False,True,False,True,False,True,True,True,False,True,True,True,1.0,1.0,1.0
1946_E,1946_E_freeskyljy_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Some permutation of length n is guessed.

You are given the indices of its prefix maximums and suffix maximums.

Recall that a permutation of length k is an array of size k such that each
integer from 1 to k occurs exactly once.

Prefix maximums are the elements that are the maximum on the prefix ending at
that element. More formally, the element a_i is a prefix maximum if a_i > a_j
for every j < i .

Similarly, suffix maximums are defined, the element a_i is a suffix maximum if
a_i > a_j for every j > i .

You need to output the number of different permutations that could have been
guessed.

As this number can be very large, output the answer modulo 10^9 + 7 .

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. Then follows the
description of the test cases.

The first line of each test case contains three integers n, m_1 and m_2 (1 \le
m_1, m_2 \le n \le 2 \cdot 10^5 ) — the length of the permutation, the number
of prefix maximums, and the number of suffix maximums, respectively.

The second line of each test case contains m_1 integers p_1 < p_2 < \ldots <
p_{m_1} (1 \le p_i \le n ) — the indices of the prefix maximums in increasing
order.

The third line of each test case contains m_2 integers s_1 < s_2 < \ldots <
s_{m_2} (1 \le s_i \le n ) — the indices of the suffix maximums in increasing
order.

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer on a separate line — the number of
suitable permutations modulo 10^9 + 7 .

Example

Input

    6
    
    1 1 1
    
    1
    
    1
    
    4 2 3
    
    1 2
    
    2 3 4
    
    3 3 1
    
    1 2 3
    
    3
    
    5 3 4
    
    1 2 3
    
    2 3 4 5
    
    20 5 4
    
    1 2 3 4 12
    
    12 13 18 20
    
    6 2 3
    
    1 3
    
    3 4 6

Output

    1
    3
    1
    0
    317580808
    10
    
Note

The following permutations are suitable for the second set of input data:

  * [1, 4, 3, 2] 
  * [2, 4, 3, 1] 
  * [3, 4, 2, 1] 

The following permutations are suitable for the sixth set of input data:

  * [2, 1, 6, 5, 3, 4] 
  * [3, 1, 6, 5, 2, 4] 
  * [3, 2, 6, 5, 1, 4] 
  * [4, 1, 6, 5, 2, 3] 
  * [4, 2, 6, 5, 1, 3] 
  * [4, 3, 6, 5, 1, 2] 
  * [5, 1, 6, 4, 2, 3] 
  * [5, 2, 6, 4, 1, 3] 
  * [5, 3, 6, 4, 1, 2] 
  * [5, 4, 6, 3, 1, 2]","import sys
import math
input = sys.stdin.readline
MOD = int(1e9+7)
 
def solve():
    N, M1, M2 = map(int, input().split())
    L = list(map(int, input().split()))
    R = list(map(int, input().split()))
    # if N == 1:
    #     return 1
    if L[-1] != R[0]:
        return 0
    if L[0] != 1 or R[0] != N:
        return 0
    if M1 > 1 and M2 > 1 and L[-2] == R[1]:
        return 0
    ans = math.comb(N-1, L[-1]-1)
    # left
    cur = M1 - 2
    if M1 > 1:
        nums_left = L[-1] - 2
        i = L[-1] - 1
        while i > 1:
            if i == L[cur]:
                cur -= 1
            else:
                ans = (ans*nums_left)%MOD
            nums_left -= 1
            i -= 1
    # right
    nums_left = N - R[0] - 1
    if M2 > 1:
        cur = 1
        i = R[0] + 1
        while i < N:
            if i == R[cur]:
                cur += 1
            else:
                ans = (ans*nums_left)%MOD
            nums_left -= 1
            i += 1
    return ans
 
for _ in range(int(input())):
    print(solve())",1,False,False,False,True,False,True,True,False,False,False,False,True,True,True,1.0,1.0,1.0
1970_C1,1970_C1_amen_meb_47.06%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","def accept_numbers():
    numbers = []
 
    while True:
        nums = input().split()
        if len(nums) != 2:
            break
            
        num1 = int(nums[0])
        num2 = int(nums[1])
 
        numbers.append([num1, num2])
    return numbers
 
result = accept_numbers()
Ron_co=0
Hib_co=0
for sublist in result:
    num_1 = sublist[0]
    num_2 = sublist[1]
    if num_1 > num_2:
        Ron_co+=1
    elif num_1 == num_2:
        continue
    else:
        Hib_co+=1
 
if Ron_co>Hib_co:
    print(""Ron"")
else:
    print(""Hermione"")",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1970_C1,1970_C1_amen_meb_47.06%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","def accept_numbers():
    numbers = []
 
    while True:
        nums = input().split()
        if len(nums) != 2:
            break
            
        num1 = int(nums[0])
        num2 = int(nums[1])
 
        numbers.append([num1, num2])
    return numbers
 
result = accept_numbers()
Ron_co=0
Hib_co=0
for sublist in result:
    num_1 = sublist[0]
    num_2 = sublist[1]
    if num_1 > num_2:
        Ron_co+=1
    elif num_1 == num_2:
        continue
    else:
        Hib_co+=1
 
if Ron_co>Hib_co:
    print(""Ron"")
else:
    print(""Hermione"")",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1970_C1,1970_C1_amen_meb_47.06%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","def accept_numbers():
    numbers = []
 
    while True:
        nums = input().split()
        if len(nums) != 2:
            break
            
        num1 = int(nums[0])
        num2 = int(nums[1])
 
        numbers.append([num1, num2])
    return numbers
 
result = accept_numbers()
Ron_co=0
Hib_co=0
for sublist in result:
    num_1 = sublist[0]
    num_2 = sublist[1]
    if num_1 > num_2:
        Ron_co+=1
    elif num_1 == num_2:
        continue
    else:
        Hib_co+=1
 
if Ron_co>Hib_co:
    print(""Ron"")
else:
    print(""Hermione"")",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1921_A,1921_A_KartheKeyan_100%,codeforces2024,human,qwen2p5-72b-instruct,"A square of positive (strictly greater than 0 ) area is located on the
coordinate plane, with sides parallel to the coordinate axes. You are given
the coordinates of its corners, in random order. Your task is to find the area
of the square.

Input

Each test consists of several testcases. The first line contains one integer t
(1 \le t \le 100 ) — the number of testcases. The following is a description
of the testcases.

Each testcase contains four lines, each line contains two integers x_i, y_i
(-1000\le x_i, y_i\le 1000 ), coordinates of the corners of the square.

It is guaranteed that there is a square with sides parallel to the coordinate
axes, with positive (strictly greater than 0 ) area, with corners in given
points.

Output

For each test case, print a single integer, the area of the square.

Example

Input

    3
    
    1 2
    
    4 5
    
    1 5
    
    4 2
    
    -1 1
    
    1 -1
    
    1 1
    
    -1 -1
    
    45 11
    
    45 39
    
    17 11
    
    17 39

Output

    9
    4
    784","""""""
n = int(input())
 
while n :
    
    l = int(input())
    s = 0
    s += (l//4)+(l-(4*(l//4)))//2
    print(s)
    n-=1
 
        
""""""
import math
n = int(input())
while n:
 
    coord = []
    res = 0
    for i in range(4):
        (x,y) = map(int,input().split())
        coord.append((x,y))
    coord = sorted(coord)
    p1 = ((coord[1][0] - coord[0][0])**2) + ((coord[1][1] - coord[0][1])**2)
    p2 = ((coord[3][0] - coord[2][0])**2) + ((coord[3][1] - coord[2][1])**2) 
    res = math.sqrt(p1)* math.sqrt(p2)
    print(round(res))
 
    n-=1",1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1921_A,1921_A_KartheKeyan_100%,codeforces2024,human,qwen2p5-72b-instruct,"A square of positive (strictly greater than 0 ) area is located on the
coordinate plane, with sides parallel to the coordinate axes. You are given
the coordinates of its corners, in random order. Your task is to find the area
of the square.

Input

Each test consists of several testcases. The first line contains one integer t
(1 \le t \le 100 ) — the number of testcases. The following is a description
of the testcases.

Each testcase contains four lines, each line contains two integers x_i, y_i
(-1000\le x_i, y_i\le 1000 ), coordinates of the corners of the square.

It is guaranteed that there is a square with sides parallel to the coordinate
axes, with positive (strictly greater than 0 ) area, with corners in given
points.

Output

For each test case, print a single integer, the area of the square.

Example

Input

    3
    
    1 2
    
    4 5
    
    1 5
    
    4 2
    
    -1 1
    
    1 -1
    
    1 1
    
    -1 -1
    
    45 11
    
    45 39
    
    17 11
    
    17 39

Output

    9
    4
    784","""""""
n = int(input())
 
while n :
    
    l = int(input())
    s = 0
    s += (l//4)+(l-(4*(l//4)))//2
    print(s)
    n-=1
 
        
""""""
import math
n = int(input())
while n:
 
    coord = []
    res = 0
    for i in range(4):
        (x,y) = map(int,input().split())
        coord.append((x,y))
    coord = sorted(coord)
    p1 = ((coord[1][0] - coord[0][0])**2) + ((coord[1][1] - coord[0][1])**2)
    p2 = ((coord[3][0] - coord[2][0])**2) + ((coord[3][1] - coord[2][1])**2) 
    res = math.sqrt(p1)* math.sqrt(p2)
    print(round(res))
 
    n-=1",1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1921_A,1921_A_KartheKeyan_100%,codeforces2024,human,qwen2p5-72b-instruct,"A square of positive (strictly greater than 0 ) area is located on the
coordinate plane, with sides parallel to the coordinate axes. You are given
the coordinates of its corners, in random order. Your task is to find the area
of the square.

Input

Each test consists of several testcases. The first line contains one integer t
(1 \le t \le 100 ) — the number of testcases. The following is a description
of the testcases.

Each testcase contains four lines, each line contains two integers x_i, y_i
(-1000\le x_i, y_i\le 1000 ), coordinates of the corners of the square.

It is guaranteed that there is a square with sides parallel to the coordinate
axes, with positive (strictly greater than 0 ) area, with corners in given
points.

Output

For each test case, print a single integer, the area of the square.

Example

Input

    3
    
    1 2
    
    4 5
    
    1 5
    
    4 2
    
    -1 1
    
    1 -1
    
    1 1
    
    -1 -1
    
    45 11
    
    45 39
    
    17 11
    
    17 39

Output

    9
    4
    784","""""""
n = int(input())
 
while n :
    
    l = int(input())
    s = 0
    s += (l//4)+(l-(4*(l//4)))//2
    print(s)
    n-=1
 
        
""""""
import math
n = int(input())
while n:
 
    coord = []
    res = 0
    for i in range(4):
        (x,y) = map(int,input().split())
        coord.append((x,y))
    coord = sorted(coord)
    p1 = ((coord[1][0] - coord[0][0])**2) + ((coord[1][1] - coord[0][1])**2)
    p2 = ((coord[3][0] - coord[2][0])**2) + ((coord[3][1] - coord[2][1])**2) 
    res = math.sqrt(p1)* math.sqrt(p2)
    print(round(res))
 
    n-=1",1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1955_C,1955_C_Luv985_3.33%,codeforces2024,human,qwen2p5-72b-instruct,"n ships set out to explore the depths of the ocean. The ships are numbered
from 1 to n and follow each other in ascending order; the i -th ship has a
durability of a_i .

The Kraken attacked the ships k times in a specific order. First, it attacks
the first of the ships, then the last, then the first again, and so on.

Each attack by the Kraken reduces the durability of the ship by 1 . When the
durability of the ship drops to 0 , it sinks and is no longer subjected to
attacks (thus the ship ceases to be the first or last, and the Kraken only
attacks the ships that have not yet sunk). If all the ships have sunk, the
Kraken has nothing to attack and it swims away.

For example, if n=4 , k=5 , and a=[1, 2, 4, 3] , the following will happen:

  1. The Kraken attacks the first ship, its durability becomes zero and now a = [2, 4, 3] ; 
  2. The Kraken attacks the last ship, now a = [2, 4, 2] ; 
  3. The Kraken attacks the first ship, now a = [1, 4, 2] ; 
  4. The Kraken attacks the last ship, now a = [1, 4, 1] ; 
  5. The Kraken attacks the first ship, its durability becomes zero and now a = [4, 1] . 

How many ships were sunk after the Kraken's attack?

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains two integers n and k (1 \le n \le 2
\cdot 10^5 , 1 \le k \le 10^{15} ) — the number of ships and how many times
the Kraken will attack the ships.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^9 ) — the durability of the ships.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output the number of ships sunk by the Kraken on a
separate line.

Example

Input

    6
    
    4 5
    
    1 2 4 3
    
    4 6
    
    1 2 4 3
    
    5 20
    
    2 7 1 8 2
    
    2 2
    
    3 2
    
    2 15
    
    1 5
    
    2 7
    
    5 2

Output

    2
    3
    5
    0
    2
    2","# -*- coding: utf-8 -*-
""""""
    @Time : 2024/8/26 17:59
    @Author : Zhiliang.L
    @Email : 2410103062@mails.edu.cn
    @File : 1955-C.py
""""""
T = int(input())
while T:
    T -= 1
    n, k = input().split()
    n = int(n)
    k = int(k)
    a = input().split()
    a = list(map(lambda x: int(x), a))
    l = 0
    r = n - 1
    ans = 0
    while l < r and k > 0:
        mi = min(a[l], a[r])
        if mi * 2 <= k:
            a[l] -= mi
            a[r] -= mi
            k -= (mi * 2)
            if a[l] == 0:
                ans += 1
                l += 1
            if a[r] == 0:
                ans += 1
                r -= 1
        else:
            t = k % 2
            if mi - t - k // 2 == 0:
                ans += 1
            break
    if l == r:
        ans += (k >= a[l])
    print(ans)",1,False,False,False,True,True,True,True,True,False,False,True,False,False,True,1.0,1.0,1.0
1955_C,1955_C_Luv985_3.33%,codeforces2024,human,qwen2p5-72b-instruct,"n ships set out to explore the depths of the ocean. The ships are numbered
from 1 to n and follow each other in ascending order; the i -th ship has a
durability of a_i .

The Kraken attacked the ships k times in a specific order. First, it attacks
the first of the ships, then the last, then the first again, and so on.

Each attack by the Kraken reduces the durability of the ship by 1 . When the
durability of the ship drops to 0 , it sinks and is no longer subjected to
attacks (thus the ship ceases to be the first or last, and the Kraken only
attacks the ships that have not yet sunk). If all the ships have sunk, the
Kraken has nothing to attack and it swims away.

For example, if n=4 , k=5 , and a=[1, 2, 4, 3] , the following will happen:

  1. The Kraken attacks the first ship, its durability becomes zero and now a = [2, 4, 3] ; 
  2. The Kraken attacks the last ship, now a = [2, 4, 2] ; 
  3. The Kraken attacks the first ship, now a = [1, 4, 2] ; 
  4. The Kraken attacks the last ship, now a = [1, 4, 1] ; 
  5. The Kraken attacks the first ship, its durability becomes zero and now a = [4, 1] . 

How many ships were sunk after the Kraken's attack?

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains two integers n and k (1 \le n \le 2
\cdot 10^5 , 1 \le k \le 10^{15} ) — the number of ships and how many times
the Kraken will attack the ships.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^9 ) — the durability of the ships.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output the number of ships sunk by the Kraken on a
separate line.

Example

Input

    6
    
    4 5
    
    1 2 4 3
    
    4 6
    
    1 2 4 3
    
    5 20
    
    2 7 1 8 2
    
    2 2
    
    3 2
    
    2 15
    
    1 5
    
    2 7
    
    5 2

Output

    2
    3
    5
    0
    2
    2","# -*- coding: utf-8 -*-
""""""
    @Time : 2024/8/26 17:59
    @Author : Zhiliang.L
    @Email : 2410103062@mails.edu.cn
    @File : 1955-C.py
""""""
T = int(input())
while T:
    T -= 1
    n, k = input().split()
    n = int(n)
    k = int(k)
    a = input().split()
    a = list(map(lambda x: int(x), a))
    l = 0
    r = n - 1
    ans = 0
    while l < r and k > 0:
        mi = min(a[l], a[r])
        if mi * 2 <= k:
            a[l] -= mi
            a[r] -= mi
            k -= (mi * 2)
            if a[l] == 0:
                ans += 1
                l += 1
            if a[r] == 0:
                ans += 1
                r -= 1
        else:
            t = k % 2
            if mi - t - k // 2 == 0:
                ans += 1
            break
    if l == r:
        ans += (k >= a[l])
    print(ans)",1,False,False,False,True,True,True,True,True,True,True,True,True,False,False,1.0,1.0,1.0
1955_C,1955_C_Luv985_3.33%,codeforces2024,human,qwen2p5-72b-instruct,"n ships set out to explore the depths of the ocean. The ships are numbered
from 1 to n and follow each other in ascending order; the i -th ship has a
durability of a_i .

The Kraken attacked the ships k times in a specific order. First, it attacks
the first of the ships, then the last, then the first again, and so on.

Each attack by the Kraken reduces the durability of the ship by 1 . When the
durability of the ship drops to 0 , it sinks and is no longer subjected to
attacks (thus the ship ceases to be the first or last, and the Kraken only
attacks the ships that have not yet sunk). If all the ships have sunk, the
Kraken has nothing to attack and it swims away.

For example, if n=4 , k=5 , and a=[1, 2, 4, 3] , the following will happen:

  1. The Kraken attacks the first ship, its durability becomes zero and now a = [2, 4, 3] ; 
  2. The Kraken attacks the last ship, now a = [2, 4, 2] ; 
  3. The Kraken attacks the first ship, now a = [1, 4, 2] ; 
  4. The Kraken attacks the last ship, now a = [1, 4, 1] ; 
  5. The Kraken attacks the first ship, its durability becomes zero and now a = [4, 1] . 

How many ships were sunk after the Kraken's attack?

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains two integers n and k (1 \le n \le 2
\cdot 10^5 , 1 \le k \le 10^{15} ) — the number of ships and how many times
the Kraken will attack the ships.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^9 ) — the durability of the ships.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output the number of ships sunk by the Kraken on a
separate line.

Example

Input

    6
    
    4 5
    
    1 2 4 3
    
    4 6
    
    1 2 4 3
    
    5 20
    
    2 7 1 8 2
    
    2 2
    
    3 2
    
    2 15
    
    1 5
    
    2 7
    
    5 2

Output

    2
    3
    5
    0
    2
    2","# -*- coding: utf-8 -*-
""""""
    @Time : 2024/8/26 17:59
    @Author : Zhiliang.L
    @Email : 2410103062@mails.edu.cn
    @File : 1955-C.py
""""""
T = int(input())
while T:
    T -= 1
    n, k = input().split()
    n = int(n)
    k = int(k)
    a = input().split()
    a = list(map(lambda x: int(x), a))
    l = 0
    r = n - 1
    ans = 0
    while l < r and k > 0:
        mi = min(a[l], a[r])
        if mi * 2 <= k:
            a[l] -= mi
            a[r] -= mi
            k -= (mi * 2)
            if a[l] == 0:
                ans += 1
                l += 1
            if a[r] == 0:
                ans += 1
                r -= 1
        else:
            t = k % 2
            if mi - t - k // 2 == 0:
                ans += 1
            break
    if l == r:
        ans += (k >= a[l])
    print(ans)",1,False,False,False,True,True,True,False,True,False,False,False,True,False,False,1.0,1.0,1.0
1945_E,1945_E_hjacobs3_100%,codeforces2024,human,qwen2p5-72b-instruct,"Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3","# AUTHOR @perf3ct aka @hjacobs3
# ez ez ez
 
 
def solve(array, find):
    # print('target', find)
    n = len(array)
    # new_array = [i for i in range(1, n + 1)]
    # print(array)
    l, r = 0, n 
    while r - l > 1:
        # pr('dog')
        mid = (l + r) // 2
        if array[mid] <= find:
            l = mid
        else:
            r = mid
 
    # print('value at l', l, array[l])
    # print('target pos', array.index(find))
    if l != array.index(find):
        print(1)
        return [str(l+1), str(array.index(find)+1)]
    else:
        print(0)
 
 
# Read the number of test cases
t = int(input())
 
# Process each test case
while t > 0:
    # Read input for the test case, for example, an integer
    n, x = map(int, input().split("" ""))
 
    array = [int(v) for v in input().split("" "")]
    
    # Process the test case
    
    # Example: Print the read integer
    res = solve(array, x)
    if res:
        print("" "".join(res))
    
    # Move to the next test case
    t -= 1",1,True,False,False,True,False,True,True,False,False,False,False,False,False,True,1.0,1.0,1.0
1945_E,1945_E_hjacobs3_100%,codeforces2024,human,qwen2p5-72b-instruct,"Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3","# AUTHOR @perf3ct aka @hjacobs3
# ez ez ez
 
 
def solve(array, find):
    # print('target', find)
    n = len(array)
    # new_array = [i for i in range(1, n + 1)]
    # print(array)
    l, r = 0, n 
    while r - l > 1:
        # pr('dog')
        mid = (l + r) // 2
        if array[mid] <= find:
            l = mid
        else:
            r = mid
 
    # print('value at l', l, array[l])
    # print('target pos', array.index(find))
    if l != array.index(find):
        print(1)
        return [str(l+1), str(array.index(find)+1)]
    else:
        print(0)
 
 
# Read the number of test cases
t = int(input())
 
# Process each test case
while t > 0:
    # Read input for the test case, for example, an integer
    n, x = map(int, input().split("" ""))
 
    array = [int(v) for v in input().split("" "")]
    
    # Process the test case
    
    # Example: Print the read integer
    res = solve(array, x)
    if res:
        print("" "".join(res))
    
    # Move to the next test case
    t -= 1",1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1945_E,1945_E_hjacobs3_100%,codeforces2024,human,qwen2p5-72b-instruct,"Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3","# AUTHOR @perf3ct aka @hjacobs3
# ez ez ez
 
 
def solve(array, find):
    # print('target', find)
    n = len(array)
    # new_array = [i for i in range(1, n + 1)]
    # print(array)
    l, r = 0, n 
    while r - l > 1:
        # pr('dog')
        mid = (l + r) // 2
        if array[mid] <= find:
            l = mid
        else:
            r = mid
 
    # print('value at l', l, array[l])
    # print('target pos', array.index(find))
    if l != array.index(find):
        print(1)
        return [str(l+1), str(array.index(find)+1)]
    else:
        print(0)
 
 
# Read the number of test cases
t = int(input())
 
# Process each test case
while t > 0:
    # Read input for the test case, for example, an integer
    n, x = map(int, input().split("" ""))
 
    array = [int(v) for v in input().split("" "")]
    
    # Process the test case
    
    # Example: Print the read integer
    res = solve(array, x)
    if res:
        print("" "".join(res))
    
    # Move to the next test case
    t -= 1",1,True,False,False,False,False,True,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1957_C,1957_C_hx199411_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an n \times n chessboard where you and the computer take turns
alternatingly to place white rooks & black rooks on the board respectively.
While placing rooks, you have to ensure that no two rooks attack each other.
Two rooks attack each other if they share the same row or column regardless of
color.

A valid move is placing a rook on a position (r , c ) such that it doesn't
attack any other rook.

You start first, and when you make a valid move in your turn, placing a white
rook at position (r , c ), the computer will mirror you and place a black rook
at position (c , r ) in its turn. If r = c , then the computer can't mirror
your move, and skips its turn.

You have already played k moves with the computer (the computer tries to
mirror these moves too), and you must continue playing the game until there
are no valid moves remaining. How many different final configurations are
possible when you continue the game after the k moves? It is guaranteed that
the k moves and the implied computer moves are valid. Since the answer may be
large, print it modulo 10^9+7 .

Two configurations are considered different if there exists a coordinate (r ,
c ) which has a rook in one configuration, but not in the other or the color
of the rook on the coordinate is different.

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case contains two integers n and k (1 \leq n \leq
3 \cdot 10^5 , 0 \leq k \leq n ) — the size of the chessboard and the number
of moves you have already played respectively.

Each of the next k lines of the test case contains two integers r_i and c_i ,
denoting the i -th move you made.

It is guaranteed that the k moves and the implied computer moves are valid.

It is guaranteed that the sum of n over all test cases does not exceed 3 \cdot
10^5 .

Output

For each test case, output a single integer on a new line — the total number
of possible final configurations modulo 10^9+7 .

Example

Input

    3
    
    4 1
    
    1 2
    
    8 1
    
    7 6
    
    1000 4
    
    4 4
    
    952 343
    
    222 333
    
    90 91

Output

    3
    331
    671968183
    
Note

In the first test case, we have a 4 \times 4 grid and you've already played 1
move. After you and the computer play a turn, we have a white rook at (1 , 2
), and a black rook at (2 , 1 ). There are three possible configurations from
this state —

  1. You place a white rook at (3 , 4 ) and the computer places a black rook at (4 , 3 ) as a response. 
  2. You place a white rook at (4 , 3 ) and the computer places a black rook at (3 , 4 ) as a response. 
  3. You place a white rook at (3 , 3 ) and then at (4 , 4 ), or the other way around. They both result in the same configuration. 

![](https://espresso.codeforces.com/e7812b315860201676eb89d5690dd84b3eb85862.png)","t = int(input())
while t:
    t -= 1
    n,k = list(map(int,input().split(' ')))
    num = 0
    for i in range(k):
        c,r = list(map(int,input().split(' ')))
        if c == r:
            num += 1
        else:
            num += 2
    m = n - num
    if m == 0:
        print(1)
    elif m == 1:
        print(1)
    else:
        dp = [0 for i in range(m+1)]
        dp[1] = 1
        dp[2] = 3
        for i in range(3,m+1):
            dp[i] = (dp[i-1] + (i-1)*dp[i-2]*2)%(10**9+7)
        print(dp[m])",1,True,False,False,True,True,True,True,True,False,False,True,True,True,True,0.40849978776192514,-0.09525744994067215,0.5
1957_C,1957_C_hx199411_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an n \times n chessboard where you and the computer take turns
alternatingly to place white rooks & black rooks on the board respectively.
While placing rooks, you have to ensure that no two rooks attack each other.
Two rooks attack each other if they share the same row or column regardless of
color.

A valid move is placing a rook on a position (r , c ) such that it doesn't
attack any other rook.

You start first, and when you make a valid move in your turn, placing a white
rook at position (r , c ), the computer will mirror you and place a black rook
at position (c , r ) in its turn. If r = c , then the computer can't mirror
your move, and skips its turn.

You have already played k moves with the computer (the computer tries to
mirror these moves too), and you must continue playing the game until there
are no valid moves remaining. How many different final configurations are
possible when you continue the game after the k moves? It is guaranteed that
the k moves and the implied computer moves are valid. Since the answer may be
large, print it modulo 10^9+7 .

Two configurations are considered different if there exists a coordinate (r ,
c ) which has a rook in one configuration, but not in the other or the color
of the rook on the coordinate is different.

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case contains two integers n and k (1 \leq n \leq
3 \cdot 10^5 , 0 \leq k \leq n ) — the size of the chessboard and the number
of moves you have already played respectively.

Each of the next k lines of the test case contains two integers r_i and c_i ,
denoting the i -th move you made.

It is guaranteed that the k moves and the implied computer moves are valid.

It is guaranteed that the sum of n over all test cases does not exceed 3 \cdot
10^5 .

Output

For each test case, output a single integer on a new line — the total number
of possible final configurations modulo 10^9+7 .

Example

Input

    3
    
    4 1
    
    1 2
    
    8 1
    
    7 6
    
    1000 4
    
    4 4
    
    952 343
    
    222 333
    
    90 91

Output

    3
    331
    671968183
    
Note

In the first test case, we have a 4 \times 4 grid and you've already played 1
move. After you and the computer play a turn, we have a white rook at (1 , 2
), and a black rook at (2 , 1 ). There are three possible configurations from
this state —

  1. You place a white rook at (3 , 4 ) and the computer places a black rook at (4 , 3 ) as a response. 
  2. You place a white rook at (4 , 3 ) and the computer places a black rook at (3 , 4 ) as a response. 
  3. You place a white rook at (3 , 3 ) and then at (4 , 4 ), or the other way around. They both result in the same configuration. 

![](https://espresso.codeforces.com/e7812b315860201676eb89d5690dd84b3eb85862.png)","t = int(input())
while t:
    t -= 1
    n,k = list(map(int,input().split(' ')))
    num = 0
    for i in range(k):
        c,r = list(map(int,input().split(' ')))
        if c == r:
            num += 1
        else:
            num += 2
    m = n - num
    if m == 0:
        print(1)
    elif m == 1:
        print(1)
    else:
        dp = [0 for i in range(m+1)]
        dp[1] = 1
        dp[2] = 3
        for i in range(3,m+1):
            dp[i] = (dp[i-1] + (i-1)*dp[i-2]*2)%(10**9+7)
        print(dp[m])",1,True,False,False,True,True,True,True,True,False,False,True,True,True,True,0.40849978776192514,-0.09525744994067215,0.5
1957_C,1957_C_hx199411_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an n \times n chessboard where you and the computer take turns
alternatingly to place white rooks & black rooks on the board respectively.
While placing rooks, you have to ensure that no two rooks attack each other.
Two rooks attack each other if they share the same row or column regardless of
color.

A valid move is placing a rook on a position (r , c ) such that it doesn't
attack any other rook.

You start first, and when you make a valid move in your turn, placing a white
rook at position (r , c ), the computer will mirror you and place a black rook
at position (c , r ) in its turn. If r = c , then the computer can't mirror
your move, and skips its turn.

You have already played k moves with the computer (the computer tries to
mirror these moves too), and you must continue playing the game until there
are no valid moves remaining. How many different final configurations are
possible when you continue the game after the k moves? It is guaranteed that
the k moves and the implied computer moves are valid. Since the answer may be
large, print it modulo 10^9+7 .

Two configurations are considered different if there exists a coordinate (r ,
c ) which has a rook in one configuration, but not in the other or the color
of the rook on the coordinate is different.

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case contains two integers n and k (1 \leq n \leq
3 \cdot 10^5 , 0 \leq k \leq n ) — the size of the chessboard and the number
of moves you have already played respectively.

Each of the next k lines of the test case contains two integers r_i and c_i ,
denoting the i -th move you made.

It is guaranteed that the k moves and the implied computer moves are valid.

It is guaranteed that the sum of n over all test cases does not exceed 3 \cdot
10^5 .

Output

For each test case, output a single integer on a new line — the total number
of possible final configurations modulo 10^9+7 .

Example

Input

    3
    
    4 1
    
    1 2
    
    8 1
    
    7 6
    
    1000 4
    
    4 4
    
    952 343
    
    222 333
    
    90 91

Output

    3
    331
    671968183
    
Note

In the first test case, we have a 4 \times 4 grid and you've already played 1
move. After you and the computer play a turn, we have a white rook at (1 , 2
), and a black rook at (2 , 1 ). There are three possible configurations from
this state —

  1. You place a white rook at (3 , 4 ) and the computer places a black rook at (4 , 3 ) as a response. 
  2. You place a white rook at (4 , 3 ) and the computer places a black rook at (3 , 4 ) as a response. 
  3. You place a white rook at (3 , 3 ) and then at (4 , 4 ), or the other way around. They both result in the same configuration. 

![](https://espresso.codeforces.com/e7812b315860201676eb89d5690dd84b3eb85862.png)","t = int(input())
while t:
    t -= 1
    n,k = list(map(int,input().split(' ')))
    num = 0
    for i in range(k):
        c,r = list(map(int,input().split(' ')))
        if c == r:
            num += 1
        else:
            num += 2
    m = n - num
    if m == 0:
        print(1)
    elif m == 1:
        print(1)
    else:
        dp = [0 for i in range(m+1)]
        dp[1] = 1
        dp[2] = 3
        for i in range(3,m+1):
            dp[i] = (dp[i-1] + (i-1)*dp[i-2]*2)%(10**9+7)
        print(dp[m])",1,True,False,False,True,True,True,True,True,True,True,True,True,True,True,0.40849978776192514,-0.09525744994067215,0.5
1921_B,1921_B_AmirSol_7.69%,codeforces2024,human,qwen2p5-72b-instruct,"In order to test the hypothesis about the cats, the scientists must arrange
the cats in the boxes in a specific way. Of course, they would like to test
the hypothesis and publish a sensational article as quickly as possible,
because they are too engrossed in the next hypothesis about the phone's
battery charge.

Scientists have n boxes in which cats may or may not sit. Let the current
state of the boxes be denoted by the sequence b_1, \dots, b_n : b_i = 1 if
there is a cat in box number i , and b_i = 0 otherwise.

Fortunately, the unlimited production of cats has already been established, so
in one day, the scientists can perform one of the following operations:

  * Take a new cat and place it in a box (for some i such that b_i = 0 , assign b_i = 1 ). 
  * Remove a cat from a box and send it into retirement (for some i such that b_i = 1 , assign b_i = 0 ). 
  * Move a cat from one box to another (for some i, j such that b_i = 1, b_j = 0 , assign b_i = 0, b_j = 1 ). 

It has also been found that some boxes were immediately filled with cats.
Therefore, the scientists know the initial position of the cats in the boxes
s_1, \dots, s_n and the desired position f_1, \dots, f_n .

Due to the large amount of paperwork, the scientists do not have time to solve
this problem. Help them for the sake of science and indicate the minimum
number of days required to test the hypothesis.

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. This is followed by
descriptions of the test cases.

Each test case consists of three lines.

The first line of each test case contains a single integer n (1 \le n \le 10^5
) — the number of boxes.

The second line of each test case contains a string s of n characters, where
the i -th character is '1' if there is a cat in the i -th box and '0'
otherwise.

The third line of each test case contains a string f of n characters, where
the i -th character is '1' if there should be a cat in the i -th box and '0'
otherwise.

It is guaranteed that in a test the sum of n over all test cases does not
exceed 10^5 .

Output

For each test case, output a single integer on a separate line — the minimum
number of operations required to obtain the desired position from the initial
position. It can be shown that a solution always exists.

Example

Input

    6
    
    5
    
    10010
    
    00001
    
    1
    
    1
    
    1
    
    3
    
    000
    
    111
    
    4
    
    0101
    
    1010
    
    3
    
    100
    
    101
    
    8
    
    10011001
    
    11111110

Output

    2
    0
    3
    2
    1
    4
    
Note

In the first test case, you can first move the cat from the first box to the
fifth, and then remove the cat from the fourth box.

In the second test case, there is nothing to do — the only cat is already
sitting in the correct box.

In the third test case of input data, it takes three days to place a cat in
each box.","def solution(n: int, s1: str, s2: str) -> int:
    counter = 0
    i = 0
    while i < n:
        if s1[i] != s2[i]:
            if i < n - 1 and s1[i + 1] != s2[i + 1] and s1[i] != s1[i + 1]:
                counter += 1
                i += 2
            else:
                counter += 1
                i += 1
        else:
            i += 1
    return counter
 
# Input and output handling
t = int(input())
for _ in range(t):
    n = int(input())
    s1 = input()
    s2 = input()
    print(solution(n, s1, s2))",1,False,False,False,True,True,False,True,True,False,False,False,True,True,True,0.6997874324774109,0.20896872931554,0.6666666666666666
1921_B,1921_B_AmirSol_7.69%,codeforces2024,human,qwen2p5-72b-instruct,"In order to test the hypothesis about the cats, the scientists must arrange
the cats in the boxes in a specific way. Of course, they would like to test
the hypothesis and publish a sensational article as quickly as possible,
because they are too engrossed in the next hypothesis about the phone's
battery charge.

Scientists have n boxes in which cats may or may not sit. Let the current
state of the boxes be denoted by the sequence b_1, \dots, b_n : b_i = 1 if
there is a cat in box number i , and b_i = 0 otherwise.

Fortunately, the unlimited production of cats has already been established, so
in one day, the scientists can perform one of the following operations:

  * Take a new cat and place it in a box (for some i such that b_i = 0 , assign b_i = 1 ). 
  * Remove a cat from a box and send it into retirement (for some i such that b_i = 1 , assign b_i = 0 ). 
  * Move a cat from one box to another (for some i, j such that b_i = 1, b_j = 0 , assign b_i = 0, b_j = 1 ). 

It has also been found that some boxes were immediately filled with cats.
Therefore, the scientists know the initial position of the cats in the boxes
s_1, \dots, s_n and the desired position f_1, \dots, f_n .

Due to the large amount of paperwork, the scientists do not have time to solve
this problem. Help them for the sake of science and indicate the minimum
number of days required to test the hypothesis.

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. This is followed by
descriptions of the test cases.

Each test case consists of three lines.

The first line of each test case contains a single integer n (1 \le n \le 10^5
) — the number of boxes.

The second line of each test case contains a string s of n characters, where
the i -th character is '1' if there is a cat in the i -th box and '0'
otherwise.

The third line of each test case contains a string f of n characters, where
the i -th character is '1' if there should be a cat in the i -th box and '0'
otherwise.

It is guaranteed that in a test the sum of n over all test cases does not
exceed 10^5 .

Output

For each test case, output a single integer on a separate line — the minimum
number of operations required to obtain the desired position from the initial
position. It can be shown that a solution always exists.

Example

Input

    6
    
    5
    
    10010
    
    00001
    
    1
    
    1
    
    1
    
    3
    
    000
    
    111
    
    4
    
    0101
    
    1010
    
    3
    
    100
    
    101
    
    8
    
    10011001
    
    11111110

Output

    2
    0
    3
    2
    1
    4
    
Note

In the first test case, you can first move the cat from the first box to the
fifth, and then remove the cat from the fourth box.

In the second test case, there is nothing to do — the only cat is already
sitting in the correct box.

In the third test case of input data, it takes three days to place a cat in
each box.","def solution(n: int, s1: str, s2: str) -> int:
    counter = 0
    i = 0
    while i < n:
        if s1[i] != s2[i]:
            if i < n - 1 and s1[i + 1] != s2[i + 1] and s1[i] != s1[i + 1]:
                counter += 1
                i += 2
            else:
                counter += 1
                i += 1
        else:
            i += 1
    return counter
 
# Input and output handling
t = int(input())
for _ in range(t):
    n = int(input())
    s1 = input()
    s2 = input()
    print(solution(n, s1, s2))",1,False,False,False,True,True,True,True,False,False,False,False,True,True,True,0.6997874324774109,0.20896872931554,0.6666666666666666
1921_B,1921_B_AmirSol_7.69%,codeforces2024,human,qwen2p5-72b-instruct,"In order to test the hypothesis about the cats, the scientists must arrange
the cats in the boxes in a specific way. Of course, they would like to test
the hypothesis and publish a sensational article as quickly as possible,
because they are too engrossed in the next hypothesis about the phone's
battery charge.

Scientists have n boxes in which cats may or may not sit. Let the current
state of the boxes be denoted by the sequence b_1, \dots, b_n : b_i = 1 if
there is a cat in box number i , and b_i = 0 otherwise.

Fortunately, the unlimited production of cats has already been established, so
in one day, the scientists can perform one of the following operations:

  * Take a new cat and place it in a box (for some i such that b_i = 0 , assign b_i = 1 ). 
  * Remove a cat from a box and send it into retirement (for some i such that b_i = 1 , assign b_i = 0 ). 
  * Move a cat from one box to another (for some i, j such that b_i = 1, b_j = 0 , assign b_i = 0, b_j = 1 ). 

It has also been found that some boxes were immediately filled with cats.
Therefore, the scientists know the initial position of the cats in the boxes
s_1, \dots, s_n and the desired position f_1, \dots, f_n .

Due to the large amount of paperwork, the scientists do not have time to solve
this problem. Help them for the sake of science and indicate the minimum
number of days required to test the hypothesis.

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. This is followed by
descriptions of the test cases.

Each test case consists of three lines.

The first line of each test case contains a single integer n (1 \le n \le 10^5
) — the number of boxes.

The second line of each test case contains a string s of n characters, where
the i -th character is '1' if there is a cat in the i -th box and '0'
otherwise.

The third line of each test case contains a string f of n characters, where
the i -th character is '1' if there should be a cat in the i -th box and '0'
otherwise.

It is guaranteed that in a test the sum of n over all test cases does not
exceed 10^5 .

Output

For each test case, output a single integer on a separate line — the minimum
number of operations required to obtain the desired position from the initial
position. It can be shown that a solution always exists.

Example

Input

    6
    
    5
    
    10010
    
    00001
    
    1
    
    1
    
    1
    
    3
    
    000
    
    111
    
    4
    
    0101
    
    1010
    
    3
    
    100
    
    101
    
    8
    
    10011001
    
    11111110

Output

    2
    0
    3
    2
    1
    4
    
Note

In the first test case, you can first move the cat from the first box to the
fifth, and then remove the cat from the fourth box.

In the second test case, there is nothing to do — the only cat is already
sitting in the correct box.

In the third test case of input data, it takes three days to place a cat in
each box.","def solution(n: int, s1: str, s2: str) -> int:
    counter = 0
    i = 0
    while i < n:
        if s1[i] != s2[i]:
            if i < n - 1 and s1[i + 1] != s2[i + 1] and s1[i] != s1[i + 1]:
                counter += 1
                i += 2
            else:
                counter += 1
                i += 1
        else:
            i += 1
    return counter
 
# Input and output handling
t = int(input())
for _ in range(t):
    n = int(input())
    s1 = input()
    s2 = input()
    print(solution(n, s1, s2))",1,False,False,False,True,True,True,False,True,False,False,False,False,True,True,0.6997874324774109,0.20896872931554,0.6666666666666666
1968_F,1968_F_NoInternetName_100%,codeforces2024,human,qwen2p5-72b-instruct,"Let us call an array x_1,\dots,x_m interesting if it is possible to divide the
array into k>1 parts so that [bitwise XOR](http://tiny.cc/xor_wiki_eng) of
values from each part are equal.

More formally, you must split array x into k consecutive segments, each
element of x must belong to exactly 1 segment. Let y_1,\dots,y_k be the XOR of
elements from each part respectively. Then y_1=y_2=\dots=y_k must be
fulfilled.

For example, if x = [1, 1, 2, 3, 0] , you can split it as follows:
[\color{blue}1], [\color{green}1], [\color{red}2, \color{red}3, \color{red}0]
. Indeed \color{blue}1=\color{green}1=\color{red}2 \oplus \color{red}3\oplus
\color{red}0 .

You are given an array a_1,\dots,a_n . Your task is to answer q queries:

  * For fixed l , r , determine whether the subarray a_l,a_{l+1},\dots,a_r is interesting. 

Input

The first line contains a single integer t (1\le t\le 10^4 ) — the number of
test cases.

The first line of each test case contains two integers n and q (2 \le n \le 2
\cdot 10^5 , 1 \le q \le 2 \cdot 10^5 ) — the number of elements in the array
and the number of queries respectively.

The next line contains n integers a_1,\dots,a_n (0 \le a_i < 2^{30} ) —
elements of the array.

Each of the next q lines contains two integers l and r (1 \le l < r \le n )
describing the query.

It is guaranteed that the sum of n over all testcases does not exceed 2 \cdot
10^5 .

It is guaranteed that the sum of q over all testcases does not exceed 2 \cdot
10^5 .

Output

For each query, output ""YES"" if the subarray is interesting and ""NO""
otherwise.

You can output ""Yes"" and ""No"" in any case (for example, the strings ""yES"",
""yes"", and ""Yes"" will be recognized as correct answers).

Example

Input

    4
    
    5 5
    
    1 1 2 3 0
    
    1 5
    
    2 4
    
    3 5
    
    1 3
    
    3 4
    
    5 5
    
    1 2 3 4 5
    
    1 5
    
    2 4
    
    3 5
    
    1 3
    
    2 3
    
    7 4
    
    12 9 10 9 10 11 9
    
    1 5
    
    1 7
    
    2 6
    
    2 7
    
    11 4
    
    0 0 1 0 0 1 0 1 1 0 1
    
    1 2
    
    2 5
    
    6 9
    
    7 11

Output

    YES
    YES
    NO
    NO
    NO
    
    YES
    NO
    NO
    YES
    NO
    
    NO
    NO
    NO
    NO
    
    YES
    NO
    YES
    YES
    
Note

Explanation for the first test case:

The first query is described in the statement.

In the second query, we should divide [1,2,3] . A possible division is
[1,2],[3] , since 1\oplus 2=3 .

It can be shown that for queries 3,4,5 , the subarrays are not interesting.","from collections import defaultdict
 
 
def read(cast):
    return map(cast, input().split())
 
 
def bin_search(arr, predicate):
    l, r = 0, len(arr)
 
    while l + 1 < r:
        mid = (l + r) // 2
        if predicate(arr[mid]):
            l = mid
        else:
            r = mid
 
    if predicate(arr[l]):
        return l
    return None
 
 
def upper_bound(arr, predicate):
    return bin_search(arr, predicate)
 
 
def lower_bound(arr, predicate):
    result = bin_search(arr, predicate)
    if result is not None:
        return result + 1
    return None
 
 
def main():
    n, q = read(int)
 
    a = list(read(int))
    x = [0]
    inds = defaultdict(list)
    inds[0].append(0)
    for i in a:
        x.append(x[-1] ^ i)
        inds[x[-1]].append(len(x) - 1)
 
    for i in range(q):
        l, r = read(int)
 
        if x[l - 1] == x[r]:
            print('Yes')
            continue
 
        lower = inds[x[r]][lower_bound(inds[x[r]], lambda arg: arg < l) or 0]
        upper = inds[x[l - 1]][upper_bound(inds[x[l - 1]], lambda arg: arg <= r)]
 
        if upper > lower:
            print('Yes')
        else:
            print('No')
 
 
if __name__ == '__main__':
    # t = 1
    t, = read(int)
    for _ in range(t):
        main()",1,True,False,False,True,True,True,True,True,True,False,True,True,True,True,0.9137071974363752,0.5100758392676379,0.8333333333333334
1968_F,1968_F_NoInternetName_100%,codeforces2024,human,qwen2p5-72b-instruct,"Let us call an array x_1,\dots,x_m interesting if it is possible to divide the
array into k>1 parts so that [bitwise XOR](http://tiny.cc/xor_wiki_eng) of
values from each part are equal.

More formally, you must split array x into k consecutive segments, each
element of x must belong to exactly 1 segment. Let y_1,\dots,y_k be the XOR of
elements from each part respectively. Then y_1=y_2=\dots=y_k must be
fulfilled.

For example, if x = [1, 1, 2, 3, 0] , you can split it as follows:
[\color{blue}1], [\color{green}1], [\color{red}2, \color{red}3, \color{red}0]
. Indeed \color{blue}1=\color{green}1=\color{red}2 \oplus \color{red}3\oplus
\color{red}0 .

You are given an array a_1,\dots,a_n . Your task is to answer q queries:

  * For fixed l , r , determine whether the subarray a_l,a_{l+1},\dots,a_r is interesting. 

Input

The first line contains a single integer t (1\le t\le 10^4 ) — the number of
test cases.

The first line of each test case contains two integers n and q (2 \le n \le 2
\cdot 10^5 , 1 \le q \le 2 \cdot 10^5 ) — the number of elements in the array
and the number of queries respectively.

The next line contains n integers a_1,\dots,a_n (0 \le a_i < 2^{30} ) —
elements of the array.

Each of the next q lines contains two integers l and r (1 \le l < r \le n )
describing the query.

It is guaranteed that the sum of n over all testcases does not exceed 2 \cdot
10^5 .

It is guaranteed that the sum of q over all testcases does not exceed 2 \cdot
10^5 .

Output

For each query, output ""YES"" if the subarray is interesting and ""NO""
otherwise.

You can output ""Yes"" and ""No"" in any case (for example, the strings ""yES"",
""yes"", and ""Yes"" will be recognized as correct answers).

Example

Input

    4
    
    5 5
    
    1 1 2 3 0
    
    1 5
    
    2 4
    
    3 5
    
    1 3
    
    3 4
    
    5 5
    
    1 2 3 4 5
    
    1 5
    
    2 4
    
    3 5
    
    1 3
    
    2 3
    
    7 4
    
    12 9 10 9 10 11 9
    
    1 5
    
    1 7
    
    2 6
    
    2 7
    
    11 4
    
    0 0 1 0 0 1 0 1 1 0 1
    
    1 2
    
    2 5
    
    6 9
    
    7 11

Output

    YES
    YES
    NO
    NO
    NO
    
    YES
    NO
    NO
    YES
    NO
    
    NO
    NO
    NO
    NO
    
    YES
    NO
    YES
    YES
    
Note

Explanation for the first test case:

The first query is described in the statement.

In the second query, we should divide [1,2,3] . A possible division is
[1,2],[3] , since 1\oplus 2=3 .

It can be shown that for queries 3,4,5 , the subarrays are not interesting.","from collections import defaultdict
 
 
def read(cast):
    return map(cast, input().split())
 
 
def bin_search(arr, predicate):
    l, r = 0, len(arr)
 
    while l + 1 < r:
        mid = (l + r) // 2
        if predicate(arr[mid]):
            l = mid
        else:
            r = mid
 
    if predicate(arr[l]):
        return l
    return None
 
 
def upper_bound(arr, predicate):
    return bin_search(arr, predicate)
 
 
def lower_bound(arr, predicate):
    result = bin_search(arr, predicate)
    if result is not None:
        return result + 1
    return None
 
 
def main():
    n, q = read(int)
 
    a = list(read(int))
    x = [0]
    inds = defaultdict(list)
    inds[0].append(0)
    for i in a:
        x.append(x[-1] ^ i)
        inds[x[-1]].append(len(x) - 1)
 
    for i in range(q):
        l, r = read(int)
 
        if x[l - 1] == x[r]:
            print('Yes')
            continue
 
        lower = inds[x[r]][lower_bound(inds[x[r]], lambda arg: arg < l) or 0]
        upper = inds[x[l - 1]][upper_bound(inds[x[l - 1]], lambda arg: arg <= r)]
 
        if upper > lower:
            print('Yes')
        else:
            print('No')
 
 
if __name__ == '__main__':
    # t = 1
    t, = read(int)
    for _ in range(t):
        main()",1,True,False,False,True,True,True,True,True,True,False,False,True,True,True,0.9137071974363752,0.5100758392676379,0.8333333333333334
1968_F,1968_F_NoInternetName_100%,codeforces2024,human,qwen2p5-72b-instruct,"Let us call an array x_1,\dots,x_m interesting if it is possible to divide the
array into k>1 parts so that [bitwise XOR](http://tiny.cc/xor_wiki_eng) of
values from each part are equal.

More formally, you must split array x into k consecutive segments, each
element of x must belong to exactly 1 segment. Let y_1,\dots,y_k be the XOR of
elements from each part respectively. Then y_1=y_2=\dots=y_k must be
fulfilled.

For example, if x = [1, 1, 2, 3, 0] , you can split it as follows:
[\color{blue}1], [\color{green}1], [\color{red}2, \color{red}3, \color{red}0]
. Indeed \color{blue}1=\color{green}1=\color{red}2 \oplus \color{red}3\oplus
\color{red}0 .

You are given an array a_1,\dots,a_n . Your task is to answer q queries:

  * For fixed l , r , determine whether the subarray a_l,a_{l+1},\dots,a_r is interesting. 

Input

The first line contains a single integer t (1\le t\le 10^4 ) — the number of
test cases.

The first line of each test case contains two integers n and q (2 \le n \le 2
\cdot 10^5 , 1 \le q \le 2 \cdot 10^5 ) — the number of elements in the array
and the number of queries respectively.

The next line contains n integers a_1,\dots,a_n (0 \le a_i < 2^{30} ) —
elements of the array.

Each of the next q lines contains two integers l and r (1 \le l < r \le n )
describing the query.

It is guaranteed that the sum of n over all testcases does not exceed 2 \cdot
10^5 .

It is guaranteed that the sum of q over all testcases does not exceed 2 \cdot
10^5 .

Output

For each query, output ""YES"" if the subarray is interesting and ""NO""
otherwise.

You can output ""Yes"" and ""No"" in any case (for example, the strings ""yES"",
""yes"", and ""Yes"" will be recognized as correct answers).

Example

Input

    4
    
    5 5
    
    1 1 2 3 0
    
    1 5
    
    2 4
    
    3 5
    
    1 3
    
    3 4
    
    5 5
    
    1 2 3 4 5
    
    1 5
    
    2 4
    
    3 5
    
    1 3
    
    2 3
    
    7 4
    
    12 9 10 9 10 11 9
    
    1 5
    
    1 7
    
    2 6
    
    2 7
    
    11 4
    
    0 0 1 0 0 1 0 1 1 0 1
    
    1 2
    
    2 5
    
    6 9
    
    7 11

Output

    YES
    YES
    NO
    NO
    NO
    
    YES
    NO
    NO
    YES
    NO
    
    NO
    NO
    NO
    NO
    
    YES
    NO
    YES
    YES
    
Note

Explanation for the first test case:

The first query is described in the statement.

In the second query, we should divide [1,2,3] . A possible division is
[1,2],[3] , since 1\oplus 2=3 .

It can be shown that for queries 3,4,5 , the subarrays are not interesting.","from collections import defaultdict
 
 
def read(cast):
    return map(cast, input().split())
 
 
def bin_search(arr, predicate):
    l, r = 0, len(arr)
 
    while l + 1 < r:
        mid = (l + r) // 2
        if predicate(arr[mid]):
            l = mid
        else:
            r = mid
 
    if predicate(arr[l]):
        return l
    return None
 
 
def upper_bound(arr, predicate):
    return bin_search(arr, predicate)
 
 
def lower_bound(arr, predicate):
    result = bin_search(arr, predicate)
    if result is not None:
        return result + 1
    return None
 
 
def main():
    n, q = read(int)
 
    a = list(read(int))
    x = [0]
    inds = defaultdict(list)
    inds[0].append(0)
    for i in a:
        x.append(x[-1] ^ i)
        inds[x[-1]].append(len(x) - 1)
 
    for i in range(q):
        l, r = read(int)
 
        if x[l - 1] == x[r]:
            print('Yes')
            continue
 
        lower = inds[x[r]][lower_bound(inds[x[r]], lambda arg: arg < l) or 0]
        upper = inds[x[l - 1]][upper_bound(inds[x[l - 1]], lambda arg: arg <= r)]
 
        if upper > lower:
            print('Yes')
        else:
            print('No')
 
 
if __name__ == '__main__':
    # t = 1
    t, = read(int)
    for _ in range(t):
        main()",1,True,False,False,True,True,True,True,True,True,False,False,True,True,True,0.9137071974363752,0.5100758392676379,0.8333333333333334
1921_E,1921_E_amanchandra_9_100%,codeforces2024,human,qwen2p5-72b-instruct,"Alice and Bob are playing a game on a checkered board. The board has h rows,
numbered from top to bottom, and w columns, numbered from left to right. Both
players have a chip each. Initially, Alice's chip is located at the cell with
coordinates (x_a, y_a) (row x_a , column y_a ), and Bob's chip is located at
(x_b, y_b) . It is guaranteed that the initial positions of the chips do not
coincide. Players take turns making moves, with Alice starting.

On her turn, Alice can move her chip one cell down or one cell down-right or
down-left (diagonally). Bob, on the other hand, moves his chip one cell up,
up-right, or up-left. It is not allowed to make moves that go beyond the board
boundaries.

More formally, if at the beginning of Alice's turn she is in the cell with
coordinates (x_a, y_a) , then she can move her chip to one of the cells (x_a +
1, y_a) , (x_a + 1, y_a - 1) , or (x_a + 1, y_a + 1) . Bob, on his turn, from
the cell (x_b, y_b) can move to (x_b - 1, y_b) , (x_b - 1, y_b - 1) , or (x_b
- 1, y_b + 1) . The new chip coordinates (x', y') must satisfy the conditions
1 \le x' \le h and 1 \le y' \le w .

![](https://espresso.codeforces.com/d2faa6ca73d70e765c2cc6ef0834e24c2e4a5528.png)
Example game state. Alice plays with the white chip, Bob with the black one.
Arrows indicate possible moves.

A player immediately wins if they place their chip in a cell occupied by the
other player's chip. If either player cannot make a move (Alice—if she is in
the last row, i.e. x_a = h , Bob—if he is in the first row, i.e. x_b = 1 ),
the game immediately ends in a draw.

What will be the outcome of the game if both opponents play optimally?

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. This is followed by
the description of the test cases.

Each test case consists of a single line containing six integers h , w , x_a ,
y_a , x_b , y_b (1 \le x_a, x_b \le h \le 10^6 , 1 \le y_a, y_b \le w \le 10^9
) — the dimensions of the board and the initial positions of Alice's and Bob's
chips. It is guaranteed that either x_a \ne x_b or y_a \ne y_b .

It is guaranteed that the sum of h over all test cases does not exceed 10^6 .

Output

For each test case, output ""Alice"" if Alice wins, ""Bob"" if Bob wins, and
""Draw"" if neither player can secure a victory. You can output each letter in
any case (lowercase or uppercase). For example, the strings ""bOb"", ""bob"",
""Bob"", and ""BOB"" will be accepted as Bob's victory.

Example

Input

    12
    
    6 5 2 2 5 3
    
    4 1 2 1 4 1
    
    1 4 1 3 1 1
    
    5 5 1 4 5 2
    
    4 4 1 1 4 4
    
    10 10 1 6 10 8
    
    10 10 2 6 10 7
    
    10 10 9 1 8 1
    
    10 10 8 1 10 2
    
    10 10 1 1 2 1
    
    10 10 1 3 4 1
    
    10 10 3 1 1 1

Output

    Alice
    Bob
    Draw
    Draw
    Draw
    Alice
    Draw
    Draw
    Bob
    Alice
    Alice
    Draw","t = int(input())
for _ in range(t):
    r,w,a,b,c,d = list(map(int,input().split()))
    if a>c:
        print(""Draw"")
    else:
        x = abs(a-c) // 2
        if abs(a-c)%2:
            l = max(1,d-x)
            r = min(w,d+x)
            print(*(['Draw'],['Alice'])[abs(l-b)<=x+1 and abs(r-b)<=x+1])
        else:
            l = max(1,b-x)
            r = min(w,b+x)
            print(*(['Draw'],['Bob'])[abs(l-d)<=x and abs(r-d)<=x])
 
 
# for i in range(int(input())):
#     h,w,xa,ya,xb,yb= map(int,input().split())
    
#     if xa>xb: print('Draw')
#     else:
#         x=abs(xa-xb)//2
#         if abs(xa-xb)%2:
#             l=max(1,yb-x)
#             r=min(w,yb+x)
#             # print('###',l,r,x,abs(xa-xb),abs(l-ya),abs(r-ya))
#             print(*(['Draw'],['Alice'])[abs(l-ya)<=x+1 and abs(r-ya)<=x+1])
#         else:
#             l=max(1,ya-x)
#             r=min(w,yb+x)
#             # print('@@@',l,r,x,abs(xa-xb),abs(l-yb),abs(r-yb))
#             print(*(['Draw'],['Bob'])[abs(l-yb)<=x and abs(r-yb)<=x])",1,True,False,False,True,False,True,True,False,False,True,False,False,True,True,1.0,1.0,1.0
1970_C1,1970_C1_PitchBlease_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","from collections import deque, defaultdict
 
def find_winner(n, edges, start):
    # Build the tree using an adjacency list
    tree = defaultdict(list)
    for u, v in edges:
        tree[u].append(v)
        tree[v].append(u)
    
    # Find the leaves
    leaves = [node for node in tree if len(tree[node]) == 1]
    
    # Function to find the distance from the start node to a target node using BFS
    def bfs(start, target):
        queue = deque([(start, 0)])  # (current_node, current_distance)
        visited = set([start])
        
        while queue:
            current, dist = queue.popleft()
            if current == target:
                return dist
            
            for neighbor in tree[current]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append((neighbor, dist + 1))
        
        return -1  # Should never reach here if the tree is valid and connected
    
    # Compute the distances from the start node to both leaves
    dist1 = bfs(start, leaves[0])
    dist2 = bfs(start, leaves[1])
    
    # Determine the winner based on the distances
    if dist1 % 2 == 0 or dist2 % 2 == 0:
        return ""Ron""
    else:
        return ""Hermione""
 
# Read input
n, t = map(int, input().split())
edges = [tuple(map(int, input().split())) for _ in range(n-1)]
starts = list(map(int, input().split()))
 
# There is only one game (t=1), so we handle just one starting position
start = starts[0]
print(find_winner(n, edges, start))",1,False,False,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1970_C1,1970_C1_PitchBlease_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","from collections import deque, defaultdict
 
def find_winner(n, edges, start):
    # Build the tree using an adjacency list
    tree = defaultdict(list)
    for u, v in edges:
        tree[u].append(v)
        tree[v].append(u)
    
    # Find the leaves
    leaves = [node for node in tree if len(tree[node]) == 1]
    
    # Function to find the distance from the start node to a target node using BFS
    def bfs(start, target):
        queue = deque([(start, 0)])  # (current_node, current_distance)
        visited = set([start])
        
        while queue:
            current, dist = queue.popleft()
            if current == target:
                return dist
            
            for neighbor in tree[current]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append((neighbor, dist + 1))
        
        return -1  # Should never reach here if the tree is valid and connected
    
    # Compute the distances from the start node to both leaves
    dist1 = bfs(start, leaves[0])
    dist2 = bfs(start, leaves[1])
    
    # Determine the winner based on the distances
    if dist1 % 2 == 0 or dist2 % 2 == 0:
        return ""Ron""
    else:
        return ""Hermione""
 
# Read input
n, t = map(int, input().split())
edges = [tuple(map(int, input().split())) for _ in range(n-1)]
starts = list(map(int, input().split()))
 
# There is only one game (t=1), so we handle just one starting position
start = starts[0]
print(find_winner(n, edges, start))",1,False,False,False,True,True,True,True,True,False,False,False,True,True,True,1.0,1.0,1.0
1970_C1,1970_C1_PitchBlease_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","from collections import deque, defaultdict
 
def find_winner(n, edges, start):
    # Build the tree using an adjacency list
    tree = defaultdict(list)
    for u, v in edges:
        tree[u].append(v)
        tree[v].append(u)
    
    # Find the leaves
    leaves = [node for node in tree if len(tree[node]) == 1]
    
    # Function to find the distance from the start node to a target node using BFS
    def bfs(start, target):
        queue = deque([(start, 0)])  # (current_node, current_distance)
        visited = set([start])
        
        while queue:
            current, dist = queue.popleft()
            if current == target:
                return dist
            
            for neighbor in tree[current]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append((neighbor, dist + 1))
        
        return -1  # Should never reach here if the tree is valid and connected
    
    # Compute the distances from the start node to both leaves
    dist1 = bfs(start, leaves[0])
    dist2 = bfs(start, leaves[1])
    
    # Determine the winner based on the distances
    if dist1 % 2 == 0 or dist2 % 2 == 0:
        return ""Ron""
    else:
        return ""Hermione""
 
# Read input
n, t = map(int, input().split())
edges = [tuple(map(int, input().split())) for _ in range(n-1)]
starts = list(map(int, input().split()))
 
# There is only one game (t=1), so we handle just one starting position
start = starts[0]
print(find_winner(n, edges, start))",1,False,False,False,True,True,True,True,True,False,False,True,True,True,True,1.0,1.0,1.0
1921_D,1921_D_ms_22_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Petya has an array a_i of n integers. His brother Vasya became envious and
decided to make his own array of n integers.

To do this, he found m integers b_i (m\ge n ), and now he wants to choose some
n integers of them and arrange them in a certain order to obtain an array c_i
of length n .

To avoid being similar to his brother, Vasya wants to make his array as
different as possible from Petya's array. Specifically, he wants the total
difference D = \sum_{i=1}^{n} |a_i - c_i| to be as large as possible.

Help Vasya find the maximum difference D he can obtain.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 100 ) — the number of test cases. This is followed by a
description of the test cases.

The first line of each test case contains two integers n and m (1\le n\le m\le
2 \cdot 10^5 ).

The second line of each test case contains n integers a_i (1\le a_i\le 10^9 ).
The third line of each test case contains m integers b_i (1\le b_i\le 10^9 ).

It is guaranteed that in a test, the sum of m over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer — the maximum total difference D
that can be obtained.

Example

Input

    9
    
    4 6
    
    6 1 2 4
    
    3 5 1 7 2 3
    
    3 4
    
    1 1 1
    
    1 1 1 1
    
    5 5
    
    1 2 3 4 5
    
    1 2 3 4 5
    
    2 6
    
    5 8
    
    8 7 5 8 2 10
    
    2 2
    
    4 1
    
    9 6
    
    4 6
    
    8 10 6 4
    
    3 10 6 1 8 9
    
    3 5
    
    6 5 2
    
    1 7 9 7 2
    
    5 5
    
    9 10 6 3 7
    
    5 9 2 3 9
    
    1 6
    
    3
    
    2 7 10 1 1 5

Output

    16
    0
    12
    11
    10
    23
    15
    25
    7
    
Note

In the first example, Vasya can, for example, create the array (1, 5, 7, 2) .
Then the total difference will be D = |6-1|+|1-5|+|2-7|+|4-2| = 5+4+5+2 = 16 .

In the second example, all the integers available to Vasya are equal to 1, so
he can only create the array (1, 1, 1) , for which the difference D = 0 .

In the third example, Vasya can, for example, create the array (5, 4, 3, 2, 1)
. Then the total difference will be D = |1-5|+|2-4|+|3-3|+|4-2|+|5-1| =
4+2+0+2+4 = 12 .","import math
import heapq
 
if __name__ == ""__main__"":
    t  = int(input())
    while t > 0:
        t -= 1
        
        n, m = map(int, input().split())
        a = list(map(int, input().split()))
        b = list(map(int, input().split()))
        
        b.sort()
        
        max_heap = []
        
        tp1 = 0
        tp2 = m-1
        
        ans = 0
        
        for i in a : 
            diff1 = abs(i - b[0])
            diff2 = abs(i - b[m-1])
            if diff1 > diff2:
                heapq.heappush(max_heap, (-diff1, i, 0))
            else:
                heapq.heappush(max_heap, (-diff2, i , m-1))
        
        while max_heap:
            item = heapq.heappop(max_heap)
            if item[2] < tp1 or item[2] > tp2:
                diff1 = abs(item[1] - b[tp1])
                diff2 = abs(item[1] - b[tp2])
                if diff1 > diff2:
                    tp1 += 1
                    ans += diff1
                    #heapq.heappush(max_heap, (-diff1, item[1], tp1))
                else:
                    tp2 -= 1
                    ans += diff2
                    #heapq.heappush(max_heap, (-diff2, item[1] , tp2))
            
            else:
                ans += (-item[0])
                if item[2] == tp1:
                    tp1 += 1
                else:
                    tp2 -= 1
                    
        print(ans)",1,False,False,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1921_D,1921_D_ms_22_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Petya has an array a_i of n integers. His brother Vasya became envious and
decided to make his own array of n integers.

To do this, he found m integers b_i (m\ge n ), and now he wants to choose some
n integers of them and arrange them in a certain order to obtain an array c_i
of length n .

To avoid being similar to his brother, Vasya wants to make his array as
different as possible from Petya's array. Specifically, he wants the total
difference D = \sum_{i=1}^{n} |a_i - c_i| to be as large as possible.

Help Vasya find the maximum difference D he can obtain.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 100 ) — the number of test cases. This is followed by a
description of the test cases.

The first line of each test case contains two integers n and m (1\le n\le m\le
2 \cdot 10^5 ).

The second line of each test case contains n integers a_i (1\le a_i\le 10^9 ).
The third line of each test case contains m integers b_i (1\le b_i\le 10^9 ).

It is guaranteed that in a test, the sum of m over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer — the maximum total difference D
that can be obtained.

Example

Input

    9
    
    4 6
    
    6 1 2 4
    
    3 5 1 7 2 3
    
    3 4
    
    1 1 1
    
    1 1 1 1
    
    5 5
    
    1 2 3 4 5
    
    1 2 3 4 5
    
    2 6
    
    5 8
    
    8 7 5 8 2 10
    
    2 2
    
    4 1
    
    9 6
    
    4 6
    
    8 10 6 4
    
    3 10 6 1 8 9
    
    3 5
    
    6 5 2
    
    1 7 9 7 2
    
    5 5
    
    9 10 6 3 7
    
    5 9 2 3 9
    
    1 6
    
    3
    
    2 7 10 1 1 5

Output

    16
    0
    12
    11
    10
    23
    15
    25
    7
    
Note

In the first example, Vasya can, for example, create the array (1, 5, 7, 2) .
Then the total difference will be D = |6-1|+|1-5|+|2-7|+|4-2| = 5+4+5+2 = 16 .

In the second example, all the integers available to Vasya are equal to 1, so
he can only create the array (1, 1, 1) , for which the difference D = 0 .

In the third example, Vasya can, for example, create the array (5, 4, 3, 2, 1)
. Then the total difference will be D = |1-5|+|2-4|+|3-3|+|4-2|+|5-1| =
4+2+0+2+4 = 12 .","import math
import heapq
 
if __name__ == ""__main__"":
    t  = int(input())
    while t > 0:
        t -= 1
        
        n, m = map(int, input().split())
        a = list(map(int, input().split()))
        b = list(map(int, input().split()))
        
        b.sort()
        
        max_heap = []
        
        tp1 = 0
        tp2 = m-1
        
        ans = 0
        
        for i in a : 
            diff1 = abs(i - b[0])
            diff2 = abs(i - b[m-1])
            if diff1 > diff2:
                heapq.heappush(max_heap, (-diff1, i, 0))
            else:
                heapq.heappush(max_heap, (-diff2, i , m-1))
        
        while max_heap:
            item = heapq.heappop(max_heap)
            if item[2] < tp1 or item[2] > tp2:
                diff1 = abs(item[1] - b[tp1])
                diff2 = abs(item[1] - b[tp2])
                if diff1 > diff2:
                    tp1 += 1
                    ans += diff1
                    #heapq.heappush(max_heap, (-diff1, item[1], tp1))
                else:
                    tp2 -= 1
                    ans += diff2
                    #heapq.heappush(max_heap, (-diff2, item[1] , tp2))
            
            else:
                ans += (-item[0])
                if item[2] == tp1:
                    tp1 += 1
                else:
                    tp2 -= 1
                    
        print(ans)",1,False,False,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1921_D,1921_D_ms_22_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Petya has an array a_i of n integers. His brother Vasya became envious and
decided to make his own array of n integers.

To do this, he found m integers b_i (m\ge n ), and now he wants to choose some
n integers of them and arrange them in a certain order to obtain an array c_i
of length n .

To avoid being similar to his brother, Vasya wants to make his array as
different as possible from Petya's array. Specifically, he wants the total
difference D = \sum_{i=1}^{n} |a_i - c_i| to be as large as possible.

Help Vasya find the maximum difference D he can obtain.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 100 ) — the number of test cases. This is followed by a
description of the test cases.

The first line of each test case contains two integers n and m (1\le n\le m\le
2 \cdot 10^5 ).

The second line of each test case contains n integers a_i (1\le a_i\le 10^9 ).
The third line of each test case contains m integers b_i (1\le b_i\le 10^9 ).

It is guaranteed that in a test, the sum of m over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer — the maximum total difference D
that can be obtained.

Example

Input

    9
    
    4 6
    
    6 1 2 4
    
    3 5 1 7 2 3
    
    3 4
    
    1 1 1
    
    1 1 1 1
    
    5 5
    
    1 2 3 4 5
    
    1 2 3 4 5
    
    2 6
    
    5 8
    
    8 7 5 8 2 10
    
    2 2
    
    4 1
    
    9 6
    
    4 6
    
    8 10 6 4
    
    3 10 6 1 8 9
    
    3 5
    
    6 5 2
    
    1 7 9 7 2
    
    5 5
    
    9 10 6 3 7
    
    5 9 2 3 9
    
    1 6
    
    3
    
    2 7 10 1 1 5

Output

    16
    0
    12
    11
    10
    23
    15
    25
    7
    
Note

In the first example, Vasya can, for example, create the array (1, 5, 7, 2) .
Then the total difference will be D = |6-1|+|1-5|+|2-7|+|4-2| = 5+4+5+2 = 16 .

In the second example, all the integers available to Vasya are equal to 1, so
he can only create the array (1, 1, 1) , for which the difference D = 0 .

In the third example, Vasya can, for example, create the array (5, 4, 3, 2, 1)
. Then the total difference will be D = |1-5|+|2-4|+|3-3|+|4-2|+|5-1| =
4+2+0+2+4 = 12 .","import math
import heapq
 
if __name__ == ""__main__"":
    t  = int(input())
    while t > 0:
        t -= 1
        
        n, m = map(int, input().split())
        a = list(map(int, input().split()))
        b = list(map(int, input().split()))
        
        b.sort()
        
        max_heap = []
        
        tp1 = 0
        tp2 = m-1
        
        ans = 0
        
        for i in a : 
            diff1 = abs(i - b[0])
            diff2 = abs(i - b[m-1])
            if diff1 > diff2:
                heapq.heappush(max_heap, (-diff1, i, 0))
            else:
                heapq.heappush(max_heap, (-diff2, i , m-1))
        
        while max_heap:
            item = heapq.heappop(max_heap)
            if item[2] < tp1 or item[2] > tp2:
                diff1 = abs(item[1] - b[tp1])
                diff2 = abs(item[1] - b[tp2])
                if diff1 > diff2:
                    tp1 += 1
                    ans += diff1
                    #heapq.heappush(max_heap, (-diff1, item[1], tp1))
                else:
                    tp2 -= 1
                    ans += diff2
                    #heapq.heappush(max_heap, (-diff2, item[1] , tp2))
            
            else:
                ans += (-item[0])
                if item[2] == tp1:
                    tp1 += 1
                else:
                    tp2 -= 1
                    
        print(ans)",1,False,False,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1972_D1,1972_D1_NS3081992_100%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.","# import random
# import itertools
# from sys import stdin, stdout
# import operator
# import collections
import bisect
import collections
import heapq
import math
import sys
from sys import maxsize
# from decimal import Decimal
 
#sys.setrecursionlimit(10**6)
 
p2D = lambda x: print(*x, sep=""\n"")
def II(): return int(sys.stdin.buffer.readline())
def MI(): return map(int, sys.stdin.buffer.readline().split())
def LI(): return list(map(int, sys.stdin.buffer.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def BI(): return sys.stdin.buffer.readline().rstrip()
def SI(): return sys.stdin.buffer.readline().rstrip().decode()
def li(): return [int(i) for i in input().split()]
def lli(rows): return [li() for _ in range(rows)]
def si(): return input()
def ii(): return int(input())
def ins(): return input().split()
 
 
# mod = 998244353
# fval = [1]
# for i in range(1,1002):
#     x = (fval[-1]*i)%mod
#     fval.append(x)
# #
# ifac = [1]*(1002)
# ifac[1001] = pow(fval[1001], -1, mod)
# for i in range(1001-1, 1, -1): ifac[i] = ifac[i+1]*(i+1)%mod
# print(fval)
# print(ifac)
# _________________ For taking Input from the Text Files __________________
# import os.path
#
# if (os.path.exists('input.txt')):
#     sys.stdin = open(""input.txt"", ""r"")
#     sys.stdout = open(""output.txt"", ""w"")
#     sys.stderr = open(""error.txt"", ""w"")
 
def drank(d, processing, da, rank):
    tmp = 10 ** 9
    if len(d[da]) == 1:
        return 1
    for di in d[da]:
        if processing[di - 1] == 0:
            processing[di - 1] = 1
            tmp = min(tmp, drank(d, processing, di, rank))
            processing[di - 1] = 0
    rank[da - 1] = tmp + 1
    return tmp + 1
 
# def primeFactors(n, d):
#     if (n % 2 == 0):
#         d[2] = 0
#     while n % 2 == 0:
#         d[2] += 1
#         n = n // 2
#     for i in range(3, int(math.sqrt(n)) + 1, 2):
#         if (n % i == 0):
#             d[i] = 0
#         while n % i == 0:
#             d[i] += 1
#             n = n // i
#     if n > 2:
#         d[n] = 1
# def powerofadivisor(n,div):
#     x = 0
#     while n%div == 0:
#         n//=div
#         x+=1
#     return x
 
#import heapq as hq
#import math
 
def gcd(a,b):
    if b==0:
        x = 1
        y = 0
        return x, y, a
    x, y, g = gcd(b, a%b)
    return y, x- (a//b)*y, g
 
# mod = 998244353
#
# is_prime = [True]*(10**7+5)
# primes = []
# def primeseive(n):
#     is_prime[0] = is_prime[1] = False
#     for i in range(4,n+1,2): is_prime[i] = False
#     i = 3
#     while i*i<=n:
#         if is_prime[i] == True:
#             for j in range(i*i,n+1,i):
#                 is_prime[j] = False
#         i+=2
    # for i in range(n):
    #     if is_prime[i]: primes.append(i)
 
def check(a, n, m, k):
    for i in range(n):
        if a[i]<m:
            k-= (m - a[i])
    if k>=0: return 1
    return -1
 
def solve():
    n, m = li()
    i = 1
    ans = 0
    while i<=m and i*i<=(n+i):
        ans+= (n+i)//(i*i)
        i+=1
    return ans-1
 
    # a = li()
    # mini = min(a)
    # maxi = max(a)
    # x = maxi - mini
    # if x==0: return 0
    # p = math.floor(math.log2(x))+1
    # ans = ''
    # while x!=1:
    #     d = (x+1)//2 + mini
    #     maxi =
    #     ans += str((x+1)//2+mini)
    #     maxi =
    # return str(p)+ '\n' + ans
 
 
def main():
    # primeseive(10**7+2)
    # print(is_prime)
    for _ in range(ii()):
        sys.stdout.write(str(solve()) + ""\n"")
        #solve()
        # si()
        #print(""? {} {}"".format(low, mid), flush=True)
        # print(solve(), flush=True)
    # print(solve())
 
    #     z += str(ans) + '\n'
    # print(len(ans), ' '.join(map(str, ans)), sep='\n')
    # stdout.write(z)
 
 
# for interactive problems
# print(""? {} {}"".format(l,m), flush=True)
# or print this after each print statement
# sys.stdout.flush()
 
 
if __name__ == ""__main__"":
    main()",1,True,False,False,True,False,True,True,False,False,False,False,False,True,True,1.0,1.0,1.0
1972_D1,1972_D1_NS3081992_100%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.","# import random
# import itertools
# from sys import stdin, stdout
# import operator
# import collections
import bisect
import collections
import heapq
import math
import sys
from sys import maxsize
# from decimal import Decimal
 
#sys.setrecursionlimit(10**6)
 
p2D = lambda x: print(*x, sep=""\n"")
def II(): return int(sys.stdin.buffer.readline())
def MI(): return map(int, sys.stdin.buffer.readline().split())
def LI(): return list(map(int, sys.stdin.buffer.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def BI(): return sys.stdin.buffer.readline().rstrip()
def SI(): return sys.stdin.buffer.readline().rstrip().decode()
def li(): return [int(i) for i in input().split()]
def lli(rows): return [li() for _ in range(rows)]
def si(): return input()
def ii(): return int(input())
def ins(): return input().split()
 
 
# mod = 998244353
# fval = [1]
# for i in range(1,1002):
#     x = (fval[-1]*i)%mod
#     fval.append(x)
# #
# ifac = [1]*(1002)
# ifac[1001] = pow(fval[1001], -1, mod)
# for i in range(1001-1, 1, -1): ifac[i] = ifac[i+1]*(i+1)%mod
# print(fval)
# print(ifac)
# _________________ For taking Input from the Text Files __________________
# import os.path
#
# if (os.path.exists('input.txt')):
#     sys.stdin = open(""input.txt"", ""r"")
#     sys.stdout = open(""output.txt"", ""w"")
#     sys.stderr = open(""error.txt"", ""w"")
 
def drank(d, processing, da, rank):
    tmp = 10 ** 9
    if len(d[da]) == 1:
        return 1
    for di in d[da]:
        if processing[di - 1] == 0:
            processing[di - 1] = 1
            tmp = min(tmp, drank(d, processing, di, rank))
            processing[di - 1] = 0
    rank[da - 1] = tmp + 1
    return tmp + 1
 
# def primeFactors(n, d):
#     if (n % 2 == 0):
#         d[2] = 0
#     while n % 2 == 0:
#         d[2] += 1
#         n = n // 2
#     for i in range(3, int(math.sqrt(n)) + 1, 2):
#         if (n % i == 0):
#             d[i] = 0
#         while n % i == 0:
#             d[i] += 1
#             n = n // i
#     if n > 2:
#         d[n] = 1
# def powerofadivisor(n,div):
#     x = 0
#     while n%div == 0:
#         n//=div
#         x+=1
#     return x
 
#import heapq as hq
#import math
 
def gcd(a,b):
    if b==0:
        x = 1
        y = 0
        return x, y, a
    x, y, g = gcd(b, a%b)
    return y, x- (a//b)*y, g
 
# mod = 998244353
#
# is_prime = [True]*(10**7+5)
# primes = []
# def primeseive(n):
#     is_prime[0] = is_prime[1] = False
#     for i in range(4,n+1,2): is_prime[i] = False
#     i = 3
#     while i*i<=n:
#         if is_prime[i] == True:
#             for j in range(i*i,n+1,i):
#                 is_prime[j] = False
#         i+=2
    # for i in range(n):
    #     if is_prime[i]: primes.append(i)
 
def check(a, n, m, k):
    for i in range(n):
        if a[i]<m:
            k-= (m - a[i])
    if k>=0: return 1
    return -1
 
def solve():
    n, m = li()
    i = 1
    ans = 0
    while i<=m and i*i<=(n+i):
        ans+= (n+i)//(i*i)
        i+=1
    return ans-1
 
    # a = li()
    # mini = min(a)
    # maxi = max(a)
    # x = maxi - mini
    # if x==0: return 0
    # p = math.floor(math.log2(x))+1
    # ans = ''
    # while x!=1:
    #     d = (x+1)//2 + mini
    #     maxi =
    #     ans += str((x+1)//2+mini)
    #     maxi =
    # return str(p)+ '\n' + ans
 
 
def main():
    # primeseive(10**7+2)
    # print(is_prime)
    for _ in range(ii()):
        sys.stdout.write(str(solve()) + ""\n"")
        #solve()
        # si()
        #print(""? {} {}"".format(low, mid), flush=True)
        # print(solve(), flush=True)
    # print(solve())
 
    #     z += str(ans) + '\n'
    # print(len(ans), ' '.join(map(str, ans)), sep='\n')
    # stdout.write(z)
 
 
# for interactive problems
# print(""? {} {}"".format(l,m), flush=True)
# or print this after each print statement
# sys.stdout.flush()
 
 
if __name__ == ""__main__"":
    main()",1,True,False,False,True,False,True,False,True,False,False,False,False,False,False,1.0,1.0,1.0
1972_D1,1972_D1_NS3081992_100%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.","# import random
# import itertools
# from sys import stdin, stdout
# import operator
# import collections
import bisect
import collections
import heapq
import math
import sys
from sys import maxsize
# from decimal import Decimal
 
#sys.setrecursionlimit(10**6)
 
p2D = lambda x: print(*x, sep=""\n"")
def II(): return int(sys.stdin.buffer.readline())
def MI(): return map(int, sys.stdin.buffer.readline().split())
def LI(): return list(map(int, sys.stdin.buffer.readline().split()))
def LLI(rows_number): return [LI() for _ in range(rows_number)]
def BI(): return sys.stdin.buffer.readline().rstrip()
def SI(): return sys.stdin.buffer.readline().rstrip().decode()
def li(): return [int(i) for i in input().split()]
def lli(rows): return [li() for _ in range(rows)]
def si(): return input()
def ii(): return int(input())
def ins(): return input().split()
 
 
# mod = 998244353
# fval = [1]
# for i in range(1,1002):
#     x = (fval[-1]*i)%mod
#     fval.append(x)
# #
# ifac = [1]*(1002)
# ifac[1001] = pow(fval[1001], -1, mod)
# for i in range(1001-1, 1, -1): ifac[i] = ifac[i+1]*(i+1)%mod
# print(fval)
# print(ifac)
# _________________ For taking Input from the Text Files __________________
# import os.path
#
# if (os.path.exists('input.txt')):
#     sys.stdin = open(""input.txt"", ""r"")
#     sys.stdout = open(""output.txt"", ""w"")
#     sys.stderr = open(""error.txt"", ""w"")
 
def drank(d, processing, da, rank):
    tmp = 10 ** 9
    if len(d[da]) == 1:
        return 1
    for di in d[da]:
        if processing[di - 1] == 0:
            processing[di - 1] = 1
            tmp = min(tmp, drank(d, processing, di, rank))
            processing[di - 1] = 0
    rank[da - 1] = tmp + 1
    return tmp + 1
 
# def primeFactors(n, d):
#     if (n % 2 == 0):
#         d[2] = 0
#     while n % 2 == 0:
#         d[2] += 1
#         n = n // 2
#     for i in range(3, int(math.sqrt(n)) + 1, 2):
#         if (n % i == 0):
#             d[i] = 0
#         while n % i == 0:
#             d[i] += 1
#             n = n // i
#     if n > 2:
#         d[n] = 1
# def powerofadivisor(n,div):
#     x = 0
#     while n%div == 0:
#         n//=div
#         x+=1
#     return x
 
#import heapq as hq
#import math
 
def gcd(a,b):
    if b==0:
        x = 1
        y = 0
        return x, y, a
    x, y, g = gcd(b, a%b)
    return y, x- (a//b)*y, g
 
# mod = 998244353
#
# is_prime = [True]*(10**7+5)
# primes = []
# def primeseive(n):
#     is_prime[0] = is_prime[1] = False
#     for i in range(4,n+1,2): is_prime[i] = False
#     i = 3
#     while i*i<=n:
#         if is_prime[i] == True:
#             for j in range(i*i,n+1,i):
#                 is_prime[j] = False
#         i+=2
    # for i in range(n):
    #     if is_prime[i]: primes.append(i)
 
def check(a, n, m, k):
    for i in range(n):
        if a[i]<m:
            k-= (m - a[i])
    if k>=0: return 1
    return -1
 
def solve():
    n, m = li()
    i = 1
    ans = 0
    while i<=m and i*i<=(n+i):
        ans+= (n+i)//(i*i)
        i+=1
    return ans-1
 
    # a = li()
    # mini = min(a)
    # maxi = max(a)
    # x = maxi - mini
    # if x==0: return 0
    # p = math.floor(math.log2(x))+1
    # ans = ''
    # while x!=1:
    #     d = (x+1)//2 + mini
    #     maxi =
    #     ans += str((x+1)//2+mini)
    #     maxi =
    # return str(p)+ '\n' + ans
 
 
def main():
    # primeseive(10**7+2)
    # print(is_prime)
    for _ in range(ii()):
        sys.stdout.write(str(solve()) + ""\n"")
        #solve()
        # si()
        #print(""? {} {}"".format(low, mid), flush=True)
        # print(solve(), flush=True)
    # print(solve())
 
    #     z += str(ans) + '\n'
    # print(len(ans), ' '.join(map(str, ans)), sep='\n')
    # stdout.write(z)
 
 
# for interactive problems
# print(""? {} {}"".format(l,m), flush=True)
# or print this after each print statement
# sys.stdout.flush()
 
 
if __name__ == ""__main__"":
    main()",1,True,False,False,True,False,False,False,True,False,False,False,False,True,True,1.0,1.0,1.0
1942_C1,1942_C1_gentleman_007_100%,codeforces2024,human,qwen2p5-72b-instruct,"[Proof Geometric Construction Can Solve All Love Affairs -
manbo-p](https://soundcloud.com/alice-law-314125270/manbo-p-proof-geometric-
construction-can-solve-all-love-affairs)

⠀

This is the easy version of the problem. The only difference between the two
versions is the constraint on y . In this version y = 0 . You can make hacks
only if both versions are solved.

Bessie has received a birthday cake from her best friend Elsie, and it came in
the form of a regular polygon with n sides. The vertices of the cake are
numbered from 1 to n clockwise. You and Bessie are going to choose some of
those vertices to cut non-intersecting diagonals into the cake. In other
words, the endpoints of the diagonals must be part of the chosen vertices.

Bessie would only like to give out pieces of cake which result in a triangle
to keep consistency. The size of the pieces doesn't matter, and the whole cake
does not have to be separated into all triangles (other shapes are allowed in
the cake, but those will not be counted).

Bessie has already chosen x of those vertices that can be used to form
diagonals. She wants you to choose no more than y other vertices such that the
number of triangular pieces of cake she can give out is maximized.

What is the maximum number of triangular pieces of cake Bessie can give out?

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case consists of three integers, n , x , and y (4
\leq n \leq 10^9 , 2 \leq x \leq \min(n, 2 \cdot 10^5) , y = 0 ) — the number
of sides of the polygon, number of vertices Bessie has chosen, and the maximum
number of other vertices you can choose.

The second line consists of x distinct integers from 1 to n , representing the
vertices Bessie has chosen.

It is guaranteed the sum of x over all test cases does not exceed 2 \cdot 10^5
.

Output

For each test case, output a single integer: the maximum number of non-
intersecting triangular pieces of cake she can give out.

Example

Input

    3
    
    8 4 0
    
    1 6 2 5
    
    8 8 0
    
    1 3 2 5 4 6 7 8
    
    4 2 0
    
    1 3

Output

    2
    6
    2
    
Note

In test cases 1 , 2 and 3 , you can get 2 , 6 and 2 non-intersecting
triangular pieces of cake, respectively. A possible construction is shown in
the following pictures:

The green dots represent vertices that can be used, the blue lines represent
diagonals that are drawn, and the red numbers represent triangles that are
counted.

![](https://espresso.codeforces.com/80282d636b83d4002ec89755d465b4adb37b9cfb.png)","# @prefix sanku
# @description 
 
import sys
from math import gcd,ceil,log
from queue import PriorityQueue
from bisect import bisect_left
from collections import deque
 
############################################## Definitions #########################################################
 
mod = pow(10,9)+7
e = pow(10,-6)
input = lambda: sys.stdin.readline().rstrip(""\r\n"")
N = pow(10,6)
 
# sys.setrecursionlimit(10**6)
 
############################################## Input forms #########################################################
 
def imap(): # Multiple numbers input
    return map(int,input().split())
 
def ilist(): # List input 
    return list(map(int,input().split()))
 
# iniailize a 1D list of size n with value v
def ilistv(n,v):
    return [v for i in range(n)]
 
# iniailize a 2D list of size n*m with value v
def ilistv2(n,m,v):
    return [[v for i in range(m)]for i in range(n)]
 
 
def ilgraph(n,m): # Graph input as Adjacency List
 
    l = [[]for i in range(n+1)]
    for i in range(m):
        x,y = imap()
        l[x].append(y)
        l[y].append(x)
    return l
 
def iagraph(n,m): # Graph input as Adjacency Matrix
    l = [[0 for i in range(n+1)]for i in range(n+1)]
    for i in range(m):
        x,y = imap()
        l[x][y] = 1
        l[y][x] = 1
    return l
 
############################################## Data Structures #######################################################
 
class SegmentTree: # //O(logn) for operations and O(n) for building//
 
    def init(arr): # n shld be a power of 2...hence add extra zeros before itself if needed //O(n)//
        n = len(arr)
        tree = [0]*(2*n) 
        for i in range(n):
            tree[n+i] = arr[i] # The actual array is between indices n to 2*n-1 the first nodes store sums
 
        for i in range(n-1,-1,-1):
            tree[i] = tree[i<<1]+tree[(i<<1) | 1] # parent node value  = child node's sum i<<1 = 2*i, i<<1 |1 = 2*i+1
        return tree
        
    def add(tree,i,v): # Sets vertex i to value v (i shld be 0 based indexing) //O(logn)//
        i += len(tree)//2 # As the actual array is between n and 2*n-1, we add n to i (n = len(tree)//2)
        tree[i] = v
        while i>1:
            tree[i>>1] = tree[i]+tree[i^1] 
            i >>=1
            # Calculating the values of prev nodes. (eg if node 9 is changed 9>>1 = 4 takes values of node i(9) and node i^1(8))
 
    def range_sum(tree,l, r): # calculates the sum of values in the range [l,r-1] (l and r take 0 based indexing) //O(logn)//
        l += len(tree)//2
        r += len(tree)//2
        sum = 0
        while l<r: 
            if l&1:
                sum += tree[l] # If the index is odd, add its value to sum. if the index is even it means there would be a parent 
                l += 1         # of this with odd index
            if r&1:
                r -= 1
                sum += tree[r]
            l >>= 1
            r >>= 1
        return sum
 
############################################# Common functions #######################################################
 
def freq(l): # Returns count of a number in a list/string // O(nlog(n)) //
    d = {}
    for i in l:
        d[i] = d.get(i,0)+1
    return d
 
def prefix_sum_2d(l): #Returns the 2d prefix sum array of size (n+1)*(m+1) with 0 padded on first row and first col for easy calc.
    n = len(l)
    m = len(l[0])
    p = [[0 for i in range(m+1)] for j in range(n+1)]
 
    for i in range(1,n+1):
        for j in range(1,m+1):
            p[i][j] = p[i-1][j]+p[i][j-1]+l[i-1][j-1]-p[i-1][j-1]
    return p  
    
    # //O(nm)//
 
############################################### Number Theory #########################################################
 
def is_pow2(x): #Checks if a number is a power of 2 // O(1) //
    return max(1-(x&(x-1)),0)
 
def lgcd(l): # Returns gcd of a list // O(nlog(n)) //
    a = 0
    for i in l:
        a = gcd(a,i)
    return a
 
def SieveOfEratosthenes(num): # Returns an array with Prime numbers upto num // O(nlog(log(n))) //
    prime = [True for i in range(num+1)]
    Highest_Prime = [0 for i in range(num+1)] # Returns an array with the highest prime factor of each i between 0 and Num 
    Lowest_Prime = [0 for i in range(num+1)] # Returns an array with the lowest prime factor of each i between 0 and Num
    prime[0] = prime[1] = False
    p = 2
    while (p <= num):
        if (prime[p] == True):
            Lowest_Prime[p] = p
            Highest_Prime[p] = p
            for i in range(2*p, num+1, p):
                prime[i] = False
                Highest_Prime[i] = p
                if Lowest_Prime[i] == 0:
                    Lowest_Prime[i] = p
        p += 1
    # print(prime,'\n',Highest_Prime,'\n',Lowest_Prime)         #Checker
    # return Lowest_Prime #An array containing the lowest prime factors of all numbers till num
 
    # return Highest_Prime # An array containing the highest prime factors of all numbers till num
 
    # return prime # An array with boolean values indicating if the number is prime/not prime
    p = []
    for i in range(num+1):
        if prime[i]:
            p.append(i)
    return p # An array with just prime numbers till the given number
 
def PrimeFactors(num,Prime_array):# Returns a dictionary with prime factors mapped with their respective powers // O(nlogn) //
    
    # COmplexity is O(logn) for this code, but this requires that u have a Prime array which could be highest or lowest prime which can be calculated from the prev Sieve of Erastothenes) hence over complexity is O(nlogn)
    
    d = {}
    while num != 1: 
        x = Prime_array[num]
        d[x] = d.get(x,0)+1
        num//=x
    return d
 
def facotrization(n):  #returns a dict with prime factors and their powers for a given number in // O(sqrt(n)) // 
    #Use this approach if you don't have a prime array
    
    d = {}
    x = 2
    while x*x<=n:
        while n%x == 0:
            d[x] = d.get(x,0)+1
            n//=x
        x += 1
    if n>1:
        d[n] = d.get(n,0)+1
    return d
 
def ETF(d):
    #d is the dict contaiing prime factors
    s = 0
    for i in d:
        s += pow(i,d[i]-1)*(i-1)
    return s
 
################################################## Combinatorics ############################################################
 
def fact(n,mod):  #Returns the factorial of all numvers from 1 to  n % mod
    f = [1]
    for i in range(1,n+1):
        f.append((f[i-1]*i%mod)%mod)
    return f
 
def dearrange(n,mod): #Returns an array containing the dearragements of all numbers from 1 to n % mod
    if mod == -1:
        dearr = [1,0]
        for i in range(2,n+1):
            dearr.append((i-1)*(dearr[i-1]+dearr[i-2]))
    else:
        dearr = [1,0]
        for i in range(2,n+1):
            dearr.append(((i-1)%mod*(dearr[i-1]+dearr[i-2])%mod)%mod)
    return dearr
 
################################################ Binary Arithmetic ##########################################################
 
def bin_search(p,x): #Returns -1 if the element doesn't exist in the list and its index if it does. //O(logn)//
    i = bisect_left(p, x)
    if i != len(p) and p[i] == x:
        return i
    else:
        return -1
 
def bin_left(p,x): #Returns the index of max element less than x and -1 if all elements r greater than x // O(logn) //
    n = len(p)
    l,r = 0,n-1
    if p[0]>x:
        return -1
    while l<=r:
        mid = (l+r)//2
        if p[mid] <= x:
            if mid != n-1:
                if p[mid+1]>x:
                    break
                else:
                    l = mid+1
            else:
                mid = n-1
                break
        else:
            r = mid-1
    return mid
 
def bin_right(p,x): #Returns the index of min element greater than x and n if all elements r less than x // O(logn) //
    n = len(p)
    l,r = 0,n-1
    if p[-1]<x:
        return n
 
    while l<=r:
        mid = (l+r)//2
        if p[mid] >= x:
            if mid != 0:
                if p[mid-1]<x:
                    break
                else:
                    r = mid-1
            else:
                mid = 0
                break
        else:
            l = mid+1
    return mid
 
def bin_sqrt(x): # Returns floor of sqrt // O(logx) //
    if x == 0 or x == 1:
        return x
    l = 1
    r = x
    while l<=r:
        mid = (l+r)/2
        y = mid*mid
        if y>x:
            r = mid-1
        elif y == x:
            return mid
        else:
            if ((mid+1)*(mid+1))>x:
                return mid
            else:
                l = mid+1
    
def bin_exp(a,b,mod): #Returns (a^b) mod m where 0 <= a,b <= 10^18 // O(log(b)) //
    ans = 1
    a %= mod
    while b:
        if b&1:
            ans = (ans*a)% mod
        a = (a*a)%mod
        b >>= 1
    return ans
############################################################ DP #############################################################
 
def lcs(a, b): # Returns the longest common subsequence of two strings in //O(n^2)//
    dp = [[0]*(len(b)+1) for _ in range(len(a)+1)]
    for i in range(1,len(a)+1):
        for j in range(1,len(b)+1):
            if a[i-1] == b[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j],dp[i][j-1])
    i,j = len(a),len(b)
    l = []
    while i!=0 and j!=0:
        if dp[i][j] == dp[i][j-1]:
            j-=1
        elif dp[i][j] == dp[i-1][j]:
            i-=1
        else:
            i-=1
            j-=1
            l.append(a[i])
    s = ''.join(l)
    # return len(s) 
    return s[::-1]
 
def lis(arr): # Returns the length of longest increasing subsequence in an array of intigers/characters. // O(nlogn) //
    l = []
    for i in arr:
        pos = bisect_left(l,i)
        if pos == len(l): 
            l.append(i) # we can have a new, longer increasing subsequence!
        else:
            l[pos] = i # At least we can make the ending element smaller
    return len(l)
 
######################################################## Graph Algos ########################################################
 
graph = [] # Adjacenceny lists
vis = [] # Visited array
 
def dfs(ver): # Ver = vertex on which dfs is applied
    stack = []
    stack.append(ver)
    vis[ver] = 1
 
    while (len(stack)):
        ver = stack.pop()
        print(ver,end = ' ')
 
        for node in graph[ver]:
            if (not vis[node]):
                stack.append(node)
                vis[node] = 1
 
def bfs(ver): # Ver = vertex on which dfs is applied
    q = deque()
    q.append(ver)
    vis[ver] = 1
 
    while (len(q)):
        ver = q.popleft()
        print(ver,end = ' ')
 
        for node in graph[ver]:
            if (not vis[node]):
                q.append(node)
                vis[node] = 1
                
for _ in range(int(input())):
    n,x,y=map(int,input().split())
    ans=x-2
    arr=list(map(int,input().split()))
    arr.sort()
    for i in range(1,x):
        if(arr[i-1]+2==arr[i]):
            ans+=1
            # print(i)
    if(arr[x-1]==n-1 and arr[0]==1):
        ans+=1
    if(arr[x-1]==n and arr[0]==2):
        ans+=1
                
    print(ans)",1,True,False,False,False,False,True,True,True,False,False,False,True,True,False,1.0,1.0,1.0
1942_C1,1942_C1_gentleman_007_100%,codeforces2024,human,qwen2p5-72b-instruct,"[Proof Geometric Construction Can Solve All Love Affairs -
manbo-p](https://soundcloud.com/alice-law-314125270/manbo-p-proof-geometric-
construction-can-solve-all-love-affairs)

⠀

This is the easy version of the problem. The only difference between the two
versions is the constraint on y . In this version y = 0 . You can make hacks
only if both versions are solved.

Bessie has received a birthday cake from her best friend Elsie, and it came in
the form of a regular polygon with n sides. The vertices of the cake are
numbered from 1 to n clockwise. You and Bessie are going to choose some of
those vertices to cut non-intersecting diagonals into the cake. In other
words, the endpoints of the diagonals must be part of the chosen vertices.

Bessie would only like to give out pieces of cake which result in a triangle
to keep consistency. The size of the pieces doesn't matter, and the whole cake
does not have to be separated into all triangles (other shapes are allowed in
the cake, but those will not be counted).

Bessie has already chosen x of those vertices that can be used to form
diagonals. She wants you to choose no more than y other vertices such that the
number of triangular pieces of cake she can give out is maximized.

What is the maximum number of triangular pieces of cake Bessie can give out?

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case consists of three integers, n , x , and y (4
\leq n \leq 10^9 , 2 \leq x \leq \min(n, 2 \cdot 10^5) , y = 0 ) — the number
of sides of the polygon, number of vertices Bessie has chosen, and the maximum
number of other vertices you can choose.

The second line consists of x distinct integers from 1 to n , representing the
vertices Bessie has chosen.

It is guaranteed the sum of x over all test cases does not exceed 2 \cdot 10^5
.

Output

For each test case, output a single integer: the maximum number of non-
intersecting triangular pieces of cake she can give out.

Example

Input

    3
    
    8 4 0
    
    1 6 2 5
    
    8 8 0
    
    1 3 2 5 4 6 7 8
    
    4 2 0
    
    1 3

Output

    2
    6
    2
    
Note

In test cases 1 , 2 and 3 , you can get 2 , 6 and 2 non-intersecting
triangular pieces of cake, respectively. A possible construction is shown in
the following pictures:

The green dots represent vertices that can be used, the blue lines represent
diagonals that are drawn, and the red numbers represent triangles that are
counted.

![](https://espresso.codeforces.com/80282d636b83d4002ec89755d465b4adb37b9cfb.png)","# @prefix sanku
# @description 
 
import sys
from math import gcd,ceil,log
from queue import PriorityQueue
from bisect import bisect_left
from collections import deque
 
############################################## Definitions #########################################################
 
mod = pow(10,9)+7
e = pow(10,-6)
input = lambda: sys.stdin.readline().rstrip(""\r\n"")
N = pow(10,6)
 
# sys.setrecursionlimit(10**6)
 
############################################## Input forms #########################################################
 
def imap(): # Multiple numbers input
    return map(int,input().split())
 
def ilist(): # List input 
    return list(map(int,input().split()))
 
# iniailize a 1D list of size n with value v
def ilistv(n,v):
    return [v for i in range(n)]
 
# iniailize a 2D list of size n*m with value v
def ilistv2(n,m,v):
    return [[v for i in range(m)]for i in range(n)]
 
 
def ilgraph(n,m): # Graph input as Adjacency List
 
    l = [[]for i in range(n+1)]
    for i in range(m):
        x,y = imap()
        l[x].append(y)
        l[y].append(x)
    return l
 
def iagraph(n,m): # Graph input as Adjacency Matrix
    l = [[0 for i in range(n+1)]for i in range(n+1)]
    for i in range(m):
        x,y = imap()
        l[x][y] = 1
        l[y][x] = 1
    return l
 
############################################## Data Structures #######################################################
 
class SegmentTree: # //O(logn) for operations and O(n) for building//
 
    def init(arr): # n shld be a power of 2...hence add extra zeros before itself if needed //O(n)//
        n = len(arr)
        tree = [0]*(2*n) 
        for i in range(n):
            tree[n+i] = arr[i] # The actual array is between indices n to 2*n-1 the first nodes store sums
 
        for i in range(n-1,-1,-1):
            tree[i] = tree[i<<1]+tree[(i<<1) | 1] # parent node value  = child node's sum i<<1 = 2*i, i<<1 |1 = 2*i+1
        return tree
        
    def add(tree,i,v): # Sets vertex i to value v (i shld be 0 based indexing) //O(logn)//
        i += len(tree)//2 # As the actual array is between n and 2*n-1, we add n to i (n = len(tree)//2)
        tree[i] = v
        while i>1:
            tree[i>>1] = tree[i]+tree[i^1] 
            i >>=1
            # Calculating the values of prev nodes. (eg if node 9 is changed 9>>1 = 4 takes values of node i(9) and node i^1(8))
 
    def range_sum(tree,l, r): # calculates the sum of values in the range [l,r-1] (l and r take 0 based indexing) //O(logn)//
        l += len(tree)//2
        r += len(tree)//2
        sum = 0
        while l<r: 
            if l&1:
                sum += tree[l] # If the index is odd, add its value to sum. if the index is even it means there would be a parent 
                l += 1         # of this with odd index
            if r&1:
                r -= 1
                sum += tree[r]
            l >>= 1
            r >>= 1
        return sum
 
############################################# Common functions #######################################################
 
def freq(l): # Returns count of a number in a list/string // O(nlog(n)) //
    d = {}
    for i in l:
        d[i] = d.get(i,0)+1
    return d
 
def prefix_sum_2d(l): #Returns the 2d prefix sum array of size (n+1)*(m+1) with 0 padded on first row and first col for easy calc.
    n = len(l)
    m = len(l[0])
    p = [[0 for i in range(m+1)] for j in range(n+1)]
 
    for i in range(1,n+1):
        for j in range(1,m+1):
            p[i][j] = p[i-1][j]+p[i][j-1]+l[i-1][j-1]-p[i-1][j-1]
    return p  
    
    # //O(nm)//
 
############################################### Number Theory #########################################################
 
def is_pow2(x): #Checks if a number is a power of 2 // O(1) //
    return max(1-(x&(x-1)),0)
 
def lgcd(l): # Returns gcd of a list // O(nlog(n)) //
    a = 0
    for i in l:
        a = gcd(a,i)
    return a
 
def SieveOfEratosthenes(num): # Returns an array with Prime numbers upto num // O(nlog(log(n))) //
    prime = [True for i in range(num+1)]
    Highest_Prime = [0 for i in range(num+1)] # Returns an array with the highest prime factor of each i between 0 and Num 
    Lowest_Prime = [0 for i in range(num+1)] # Returns an array with the lowest prime factor of each i between 0 and Num
    prime[0] = prime[1] = False
    p = 2
    while (p <= num):
        if (prime[p] == True):
            Lowest_Prime[p] = p
            Highest_Prime[p] = p
            for i in range(2*p, num+1, p):
                prime[i] = False
                Highest_Prime[i] = p
                if Lowest_Prime[i] == 0:
                    Lowest_Prime[i] = p
        p += 1
    # print(prime,'\n',Highest_Prime,'\n',Lowest_Prime)         #Checker
    # return Lowest_Prime #An array containing the lowest prime factors of all numbers till num
 
    # return Highest_Prime # An array containing the highest prime factors of all numbers till num
 
    # return prime # An array with boolean values indicating if the number is prime/not prime
    p = []
    for i in range(num+1):
        if prime[i]:
            p.append(i)
    return p # An array with just prime numbers till the given number
 
def PrimeFactors(num,Prime_array):# Returns a dictionary with prime factors mapped with their respective powers // O(nlogn) //
    
    # COmplexity is O(logn) for this code, but this requires that u have a Prime array which could be highest or lowest prime which can be calculated from the prev Sieve of Erastothenes) hence over complexity is O(nlogn)
    
    d = {}
    while num != 1: 
        x = Prime_array[num]
        d[x] = d.get(x,0)+1
        num//=x
    return d
 
def facotrization(n):  #returns a dict with prime factors and their powers for a given number in // O(sqrt(n)) // 
    #Use this approach if you don't have a prime array
    
    d = {}
    x = 2
    while x*x<=n:
        while n%x == 0:
            d[x] = d.get(x,0)+1
            n//=x
        x += 1
    if n>1:
        d[n] = d.get(n,0)+1
    return d
 
def ETF(d):
    #d is the dict contaiing prime factors
    s = 0
    for i in d:
        s += pow(i,d[i]-1)*(i-1)
    return s
 
################################################## Combinatorics ############################################################
 
def fact(n,mod):  #Returns the factorial of all numvers from 1 to  n % mod
    f = [1]
    for i in range(1,n+1):
        f.append((f[i-1]*i%mod)%mod)
    return f
 
def dearrange(n,mod): #Returns an array containing the dearragements of all numbers from 1 to n % mod
    if mod == -1:
        dearr = [1,0]
        for i in range(2,n+1):
            dearr.append((i-1)*(dearr[i-1]+dearr[i-2]))
    else:
        dearr = [1,0]
        for i in range(2,n+1):
            dearr.append(((i-1)%mod*(dearr[i-1]+dearr[i-2])%mod)%mod)
    return dearr
 
################################################ Binary Arithmetic ##########################################################
 
def bin_search(p,x): #Returns -1 if the element doesn't exist in the list and its index if it does. //O(logn)//
    i = bisect_left(p, x)
    if i != len(p) and p[i] == x:
        return i
    else:
        return -1
 
def bin_left(p,x): #Returns the index of max element less than x and -1 if all elements r greater than x // O(logn) //
    n = len(p)
    l,r = 0,n-1
    if p[0]>x:
        return -1
    while l<=r:
        mid = (l+r)//2
        if p[mid] <= x:
            if mid != n-1:
                if p[mid+1]>x:
                    break
                else:
                    l = mid+1
            else:
                mid = n-1
                break
        else:
            r = mid-1
    return mid
 
def bin_right(p,x): #Returns the index of min element greater than x and n if all elements r less than x // O(logn) //
    n = len(p)
    l,r = 0,n-1
    if p[-1]<x:
        return n
 
    while l<=r:
        mid = (l+r)//2
        if p[mid] >= x:
            if mid != 0:
                if p[mid-1]<x:
                    break
                else:
                    r = mid-1
            else:
                mid = 0
                break
        else:
            l = mid+1
    return mid
 
def bin_sqrt(x): # Returns floor of sqrt // O(logx) //
    if x == 0 or x == 1:
        return x
    l = 1
    r = x
    while l<=r:
        mid = (l+r)/2
        y = mid*mid
        if y>x:
            r = mid-1
        elif y == x:
            return mid
        else:
            if ((mid+1)*(mid+1))>x:
                return mid
            else:
                l = mid+1
    
def bin_exp(a,b,mod): #Returns (a^b) mod m where 0 <= a,b <= 10^18 // O(log(b)) //
    ans = 1
    a %= mod
    while b:
        if b&1:
            ans = (ans*a)% mod
        a = (a*a)%mod
        b >>= 1
    return ans
############################################################ DP #############################################################
 
def lcs(a, b): # Returns the longest common subsequence of two strings in //O(n^2)//
    dp = [[0]*(len(b)+1) for _ in range(len(a)+1)]
    for i in range(1,len(a)+1):
        for j in range(1,len(b)+1):
            if a[i-1] == b[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j],dp[i][j-1])
    i,j = len(a),len(b)
    l = []
    while i!=0 and j!=0:
        if dp[i][j] == dp[i][j-1]:
            j-=1
        elif dp[i][j] == dp[i-1][j]:
            i-=1
        else:
            i-=1
            j-=1
            l.append(a[i])
    s = ''.join(l)
    # return len(s) 
    return s[::-1]
 
def lis(arr): # Returns the length of longest increasing subsequence in an array of intigers/characters. // O(nlogn) //
    l = []
    for i in arr:
        pos = bisect_left(l,i)
        if pos == len(l): 
            l.append(i) # we can have a new, longer increasing subsequence!
        else:
            l[pos] = i # At least we can make the ending element smaller
    return len(l)
 
######################################################## Graph Algos ########################################################
 
graph = [] # Adjacenceny lists
vis = [] # Visited array
 
def dfs(ver): # Ver = vertex on which dfs is applied
    stack = []
    stack.append(ver)
    vis[ver] = 1
 
    while (len(stack)):
        ver = stack.pop()
        print(ver,end = ' ')
 
        for node in graph[ver]:
            if (not vis[node]):
                stack.append(node)
                vis[node] = 1
 
def bfs(ver): # Ver = vertex on which dfs is applied
    q = deque()
    q.append(ver)
    vis[ver] = 1
 
    while (len(q)):
        ver = q.popleft()
        print(ver,end = ' ')
 
        for node in graph[ver]:
            if (not vis[node]):
                q.append(node)
                vis[node] = 1
                
for _ in range(int(input())):
    n,x,y=map(int,input().split())
    ans=x-2
    arr=list(map(int,input().split()))
    arr.sort()
    for i in range(1,x):
        if(arr[i-1]+2==arr[i]):
            ans+=1
            # print(i)
    if(arr[x-1]==n-1 and arr[0]==1):
        ans+=1
    if(arr[x-1]==n and arr[0]==2):
        ans+=1
                
    print(ans)",1,True,False,False,False,False,True,True,True,True,True,False,True,True,False,1.0,1.0,1.0
1942_C1,1942_C1_gentleman_007_100%,codeforces2024,human,qwen2p5-72b-instruct,"[Proof Geometric Construction Can Solve All Love Affairs -
manbo-p](https://soundcloud.com/alice-law-314125270/manbo-p-proof-geometric-
construction-can-solve-all-love-affairs)

⠀

This is the easy version of the problem. The only difference between the two
versions is the constraint on y . In this version y = 0 . You can make hacks
only if both versions are solved.

Bessie has received a birthday cake from her best friend Elsie, and it came in
the form of a regular polygon with n sides. The vertices of the cake are
numbered from 1 to n clockwise. You and Bessie are going to choose some of
those vertices to cut non-intersecting diagonals into the cake. In other
words, the endpoints of the diagonals must be part of the chosen vertices.

Bessie would only like to give out pieces of cake which result in a triangle
to keep consistency. The size of the pieces doesn't matter, and the whole cake
does not have to be separated into all triangles (other shapes are allowed in
the cake, but those will not be counted).

Bessie has already chosen x of those vertices that can be used to form
diagonals. She wants you to choose no more than y other vertices such that the
number of triangular pieces of cake she can give out is maximized.

What is the maximum number of triangular pieces of cake Bessie can give out?

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case consists of three integers, n , x , and y (4
\leq n \leq 10^9 , 2 \leq x \leq \min(n, 2 \cdot 10^5) , y = 0 ) — the number
of sides of the polygon, number of vertices Bessie has chosen, and the maximum
number of other vertices you can choose.

The second line consists of x distinct integers from 1 to n , representing the
vertices Bessie has chosen.

It is guaranteed the sum of x over all test cases does not exceed 2 \cdot 10^5
.

Output

For each test case, output a single integer: the maximum number of non-
intersecting triangular pieces of cake she can give out.

Example

Input

    3
    
    8 4 0
    
    1 6 2 5
    
    8 8 0
    
    1 3 2 5 4 6 7 8
    
    4 2 0
    
    1 3

Output

    2
    6
    2
    
Note

In test cases 1 , 2 and 3 , you can get 2 , 6 and 2 non-intersecting
triangular pieces of cake, respectively. A possible construction is shown in
the following pictures:

The green dots represent vertices that can be used, the blue lines represent
diagonals that are drawn, and the red numbers represent triangles that are
counted.

![](https://espresso.codeforces.com/80282d636b83d4002ec89755d465b4adb37b9cfb.png)","# @prefix sanku
# @description 
 
import sys
from math import gcd,ceil,log
from queue import PriorityQueue
from bisect import bisect_left
from collections import deque
 
############################################## Definitions #########################################################
 
mod = pow(10,9)+7
e = pow(10,-6)
input = lambda: sys.stdin.readline().rstrip(""\r\n"")
N = pow(10,6)
 
# sys.setrecursionlimit(10**6)
 
############################################## Input forms #########################################################
 
def imap(): # Multiple numbers input
    return map(int,input().split())
 
def ilist(): # List input 
    return list(map(int,input().split()))
 
# iniailize a 1D list of size n with value v
def ilistv(n,v):
    return [v for i in range(n)]
 
# iniailize a 2D list of size n*m with value v
def ilistv2(n,m,v):
    return [[v for i in range(m)]for i in range(n)]
 
 
def ilgraph(n,m): # Graph input as Adjacency List
 
    l = [[]for i in range(n+1)]
    for i in range(m):
        x,y = imap()
        l[x].append(y)
        l[y].append(x)
    return l
 
def iagraph(n,m): # Graph input as Adjacency Matrix
    l = [[0 for i in range(n+1)]for i in range(n+1)]
    for i in range(m):
        x,y = imap()
        l[x][y] = 1
        l[y][x] = 1
    return l
 
############################################## Data Structures #######################################################
 
class SegmentTree: # //O(logn) for operations and O(n) for building//
 
    def init(arr): # n shld be a power of 2...hence add extra zeros before itself if needed //O(n)//
        n = len(arr)
        tree = [0]*(2*n) 
        for i in range(n):
            tree[n+i] = arr[i] # The actual array is between indices n to 2*n-1 the first nodes store sums
 
        for i in range(n-1,-1,-1):
            tree[i] = tree[i<<1]+tree[(i<<1) | 1] # parent node value  = child node's sum i<<1 = 2*i, i<<1 |1 = 2*i+1
        return tree
        
    def add(tree,i,v): # Sets vertex i to value v (i shld be 0 based indexing) //O(logn)//
        i += len(tree)//2 # As the actual array is between n and 2*n-1, we add n to i (n = len(tree)//2)
        tree[i] = v
        while i>1:
            tree[i>>1] = tree[i]+tree[i^1] 
            i >>=1
            # Calculating the values of prev nodes. (eg if node 9 is changed 9>>1 = 4 takes values of node i(9) and node i^1(8))
 
    def range_sum(tree,l, r): # calculates the sum of values in the range [l,r-1] (l and r take 0 based indexing) //O(logn)//
        l += len(tree)//2
        r += len(tree)//2
        sum = 0
        while l<r: 
            if l&1:
                sum += tree[l] # If the index is odd, add its value to sum. if the index is even it means there would be a parent 
                l += 1         # of this with odd index
            if r&1:
                r -= 1
                sum += tree[r]
            l >>= 1
            r >>= 1
        return sum
 
############################################# Common functions #######################################################
 
def freq(l): # Returns count of a number in a list/string // O(nlog(n)) //
    d = {}
    for i in l:
        d[i] = d.get(i,0)+1
    return d
 
def prefix_sum_2d(l): #Returns the 2d prefix sum array of size (n+1)*(m+1) with 0 padded on first row and first col for easy calc.
    n = len(l)
    m = len(l[0])
    p = [[0 for i in range(m+1)] for j in range(n+1)]
 
    for i in range(1,n+1):
        for j in range(1,m+1):
            p[i][j] = p[i-1][j]+p[i][j-1]+l[i-1][j-1]-p[i-1][j-1]
    return p  
    
    # //O(nm)//
 
############################################### Number Theory #########################################################
 
def is_pow2(x): #Checks if a number is a power of 2 // O(1) //
    return max(1-(x&(x-1)),0)
 
def lgcd(l): # Returns gcd of a list // O(nlog(n)) //
    a = 0
    for i in l:
        a = gcd(a,i)
    return a
 
def SieveOfEratosthenes(num): # Returns an array with Prime numbers upto num // O(nlog(log(n))) //
    prime = [True for i in range(num+1)]
    Highest_Prime = [0 for i in range(num+1)] # Returns an array with the highest prime factor of each i between 0 and Num 
    Lowest_Prime = [0 for i in range(num+1)] # Returns an array with the lowest prime factor of each i between 0 and Num
    prime[0] = prime[1] = False
    p = 2
    while (p <= num):
        if (prime[p] == True):
            Lowest_Prime[p] = p
            Highest_Prime[p] = p
            for i in range(2*p, num+1, p):
                prime[i] = False
                Highest_Prime[i] = p
                if Lowest_Prime[i] == 0:
                    Lowest_Prime[i] = p
        p += 1
    # print(prime,'\n',Highest_Prime,'\n',Lowest_Prime)         #Checker
    # return Lowest_Prime #An array containing the lowest prime factors of all numbers till num
 
    # return Highest_Prime # An array containing the highest prime factors of all numbers till num
 
    # return prime # An array with boolean values indicating if the number is prime/not prime
    p = []
    for i in range(num+1):
        if prime[i]:
            p.append(i)
    return p # An array with just prime numbers till the given number
 
def PrimeFactors(num,Prime_array):# Returns a dictionary with prime factors mapped with their respective powers // O(nlogn) //
    
    # COmplexity is O(logn) for this code, but this requires that u have a Prime array which could be highest or lowest prime which can be calculated from the prev Sieve of Erastothenes) hence over complexity is O(nlogn)
    
    d = {}
    while num != 1: 
        x = Prime_array[num]
        d[x] = d.get(x,0)+1
        num//=x
    return d
 
def facotrization(n):  #returns a dict with prime factors and their powers for a given number in // O(sqrt(n)) // 
    #Use this approach if you don't have a prime array
    
    d = {}
    x = 2
    while x*x<=n:
        while n%x == 0:
            d[x] = d.get(x,0)+1
            n//=x
        x += 1
    if n>1:
        d[n] = d.get(n,0)+1
    return d
 
def ETF(d):
    #d is the dict contaiing prime factors
    s = 0
    for i in d:
        s += pow(i,d[i]-1)*(i-1)
    return s
 
################################################## Combinatorics ############################################################
 
def fact(n,mod):  #Returns the factorial of all numvers from 1 to  n % mod
    f = [1]
    for i in range(1,n+1):
        f.append((f[i-1]*i%mod)%mod)
    return f
 
def dearrange(n,mod): #Returns an array containing the dearragements of all numbers from 1 to n % mod
    if mod == -1:
        dearr = [1,0]
        for i in range(2,n+1):
            dearr.append((i-1)*(dearr[i-1]+dearr[i-2]))
    else:
        dearr = [1,0]
        for i in range(2,n+1):
            dearr.append(((i-1)%mod*(dearr[i-1]+dearr[i-2])%mod)%mod)
    return dearr
 
################################################ Binary Arithmetic ##########################################################
 
def bin_search(p,x): #Returns -1 if the element doesn't exist in the list and its index if it does. //O(logn)//
    i = bisect_left(p, x)
    if i != len(p) and p[i] == x:
        return i
    else:
        return -1
 
def bin_left(p,x): #Returns the index of max element less than x and -1 if all elements r greater than x // O(logn) //
    n = len(p)
    l,r = 0,n-1
    if p[0]>x:
        return -1
    while l<=r:
        mid = (l+r)//2
        if p[mid] <= x:
            if mid != n-1:
                if p[mid+1]>x:
                    break
                else:
                    l = mid+1
            else:
                mid = n-1
                break
        else:
            r = mid-1
    return mid
 
def bin_right(p,x): #Returns the index of min element greater than x and n if all elements r less than x // O(logn) //
    n = len(p)
    l,r = 0,n-1
    if p[-1]<x:
        return n
 
    while l<=r:
        mid = (l+r)//2
        if p[mid] >= x:
            if mid != 0:
                if p[mid-1]<x:
                    break
                else:
                    r = mid-1
            else:
                mid = 0
                break
        else:
            l = mid+1
    return mid
 
def bin_sqrt(x): # Returns floor of sqrt // O(logx) //
    if x == 0 or x == 1:
        return x
    l = 1
    r = x
    while l<=r:
        mid = (l+r)/2
        y = mid*mid
        if y>x:
            r = mid-1
        elif y == x:
            return mid
        else:
            if ((mid+1)*(mid+1))>x:
                return mid
            else:
                l = mid+1
    
def bin_exp(a,b,mod): #Returns (a^b) mod m where 0 <= a,b <= 10^18 // O(log(b)) //
    ans = 1
    a %= mod
    while b:
        if b&1:
            ans = (ans*a)% mod
        a = (a*a)%mod
        b >>= 1
    return ans
############################################################ DP #############################################################
 
def lcs(a, b): # Returns the longest common subsequence of two strings in //O(n^2)//
    dp = [[0]*(len(b)+1) for _ in range(len(a)+1)]
    for i in range(1,len(a)+1):
        for j in range(1,len(b)+1):
            if a[i-1] == b[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j],dp[i][j-1])
    i,j = len(a),len(b)
    l = []
    while i!=0 and j!=0:
        if dp[i][j] == dp[i][j-1]:
            j-=1
        elif dp[i][j] == dp[i-1][j]:
            i-=1
        else:
            i-=1
            j-=1
            l.append(a[i])
    s = ''.join(l)
    # return len(s) 
    return s[::-1]
 
def lis(arr): # Returns the length of longest increasing subsequence in an array of intigers/characters. // O(nlogn) //
    l = []
    for i in arr:
        pos = bisect_left(l,i)
        if pos == len(l): 
            l.append(i) # we can have a new, longer increasing subsequence!
        else:
            l[pos] = i # At least we can make the ending element smaller
    return len(l)
 
######################################################## Graph Algos ########################################################
 
graph = [] # Adjacenceny lists
vis = [] # Visited array
 
def dfs(ver): # Ver = vertex on which dfs is applied
    stack = []
    stack.append(ver)
    vis[ver] = 1
 
    while (len(stack)):
        ver = stack.pop()
        print(ver,end = ' ')
 
        for node in graph[ver]:
            if (not vis[node]):
                stack.append(node)
                vis[node] = 1
 
def bfs(ver): # Ver = vertex on which dfs is applied
    q = deque()
    q.append(ver)
    vis[ver] = 1
 
    while (len(q)):
        ver = q.popleft()
        print(ver,end = ' ')
 
        for node in graph[ver]:
            if (not vis[node]):
                q.append(node)
                vis[node] = 1
                
for _ in range(int(input())):
    n,x,y=map(int,input().split())
    ans=x-2
    arr=list(map(int,input().split()))
    arr.sort()
    for i in range(1,x):
        if(arr[i-1]+2==arr[i]):
            ans+=1
            # print(i)
    if(arr[x-1]==n-1 and arr[0]==1):
        ans+=1
    if(arr[x-1]==n and arr[0]==2):
        ans+=1
                
    print(ans)",1,True,False,False,False,False,True,True,True,True,True,False,True,True,False,1.0,1.0,1.0
1920_B,1920_B_Dehong2019_100%,codeforces2024,human,qwen2p5-72b-instruct,"Alice and Bob are playing a game. They have an array a_1, a_2,\ldots,a_n . The
game consists of two steps:

  * First, Alice will remove at most k elements from the array. 
  * Second, Bob will multiply at most x elements of the array by -1 . 

Alice wants to maximize the sum of elements of the array while Bob wants to
minimize it. Find the sum of elements of the array after the game if both
players play optimally.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 10^4 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains three integers n , k , and x (1 \leq
n \leq 2 \cdot 10^5 , 1 \leq x,k \leq n ) — the number of elements in the
array, the limit on the number of elements of the array that Alice can remove,
and the limit on the number of elements of the array that Bob can multiply -1
to.

The second line of each test case contains n integers a_1, a_2,\ldots, a_n (1
\leq a_i \leq 1000 ) — the elements of the array.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output a single integer — the sum of elements of the array
after the game if both players play optimally.

Example

Input

    8
    
    1 1 1
    
    1
    
    4 1 1
    
    3 1 2 4
    
    6 6 3
    
    1 4 3 2 5 6
    
    6 6 1
    
    3 7 3 3 32 15
    
    8 5 3
    
    5 5 3 3 3 2 9 9
    
    10 6 4
    
    1 8 2 9 3 3 4 5 3 200
    
    2 2 1
    
    4 3
    
    2 1 2
    
    1 3

Output

    0
    2
    0
    3
    -5
    -9
    0
    -1
    
Note

In the first test case, it is optimal for Alice to remove the only element of
the array. Then, the sum of elements of the array is 0 after the game is over.

In the second test case, it is optimal for Alice to not remove any elements.
Bob will then multiply 4 by -1 . So the final sum of elements of the array is
3+1+2-4=2 .

In the fifth test case, it is optimal for Alice to remove 9, 9 . Bob will then
multiply 5, 5, 3 by -1 . So the final sum of elements of the array is
-5-5-3+3+3+2=-5 .","# -*- coding: utf-8 -*-
""""""
Created on Fri Sep  6 21:42:15 2024
 
@author: dehon
""""""
 
t = int(input())
for _ in range(t):
    n,k,x = map(int, input().split())
    a = sorted(list(map(int, input().split())), reverse = True)
    ans1 = sum(a)
    for i in range(x):
        ans1 -= a[i] * 2
    ans2 = ans1
    for i in range(k):
        ans1 += a[i]
        if i + x < n:
            ans1 -= a[i+x] * 2
        ans2 = max(ans1, ans2)
    print(ans2)",1,True,False,False,True,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1946_C,1946_C__Safar_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given a tree with n vertices.

Your task is to find the maximum number x such that it is possible to remove
exactly k edges from this tree in such a way that the size of each remaining
connected component^{\dagger} is at least x .

^{\dagger} Two vertices v and u are in the same connected component if there
exists a sequence of numbers t_1, t_2, \ldots, t_k of arbitrary length k ,
such that t_1 = v , t_k = u , and for each i from 1 to k - 1 , vertices t_i
and t_{i+1} are connected by an edge.

Input

Each test consists of several sets of input data. The first line contains a
single integer t (1 \le t \le 10^4 ) — the number of sets of input data. This
is followed by a description of the sets of input data.

The first line of each set of input data contains two integers n and k (1 \le
k < n \le 10^5 ) — the number of vertices in the tree and the number of edges
to be removed.

Each of the next n - 1 lines of each set of input data contains two integers v
and u (1 \le v, u \le n ) — the next edge of the tree.

It is guaranteed that the sum of the values of n for all sets of input data
does not exceed 10^5 .

Output

For each set of input data, output a single line containing the maximum number
x such that it is possible to remove exactly k edges from the tree in such a
way that the size of each remaining connected component is at least x .

Example

Input

    6
    
    5 1
    
    1 2
    
    1 3
    
    3 4
    
    3 5
    
    2 1
    
    1 2
    
    6 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5 6
    
    3 1
    
    1 2
    
    1 3
    
    8 2
    
    1 2
    
    1 3
    
    2 4
    
    2 5
    
    3 6
    
    3 7
    
    3 8
    
    6 2
    
    1 2
    
    2 3
    
    1 4
    
    4 5
    
    5 6

Output

    2
    1
    3
    1
    1
    2
    
Note

The tree in the first set of input data:

![](https://espresso.codeforces.com/799bacd3be0dda357800fdfc3eadbf38ab259c51.png)

After removing the edge 1 — 3 , the tree will look as follows:

![](https://espresso.codeforces.com/a59ae10eeac1212e1e56fc7fe5f6a47764269104.png)

The tree has split into two connected components. The first component consists
of two vertices: 1 and 2 . The second connected component consists of three
vertices: 3, 4 and 5 . In both connected components, there are at least two
vertices. It can be shown that the answer 3 is not achievable, so the answer
is 2 .","# import resource, sys
# sys.setrecursionlimit(10**7)
# resource.setrlimit(resource.RLIMIT_STACK, (10**7,-1))
# import sys
# sys.setrecursionlimit(999999999)
def solve(n,k,edges):
    g=[[] for _ in range(n+1)]
    for a,b in edges:
        g[a].append(b)
        g[b].append(a)
    c=0
    def check(A):
        stack=[(1,1)]
        visited=set()
        d={1:1}
        r=0
        while True:
            x,p=stack[-1]
            if x not in visited:
                visited.add(x)
                d[x]=1
                for node in g[x]:
                    if node!=p:
                        stack.append((node,x))
            else:
                if(x==1):
                    break
                if(d[x]>=A):
                    r+=1
                else:
                    d[p]+=d[x]
                stack.pop()
                visited.remove(x)
                del d[x]
        # print(stack,d,r)
        if r>k or (d[1]>=A and r==k):
            return True
        return False
 
        # def dfs(x,y):
        #     c=1
        #     r=0
        #     for node in g[x]:
        #         if node==y:
        #             continue
        #         ans,rn=dfs(node,x)
        #         r+=rn
        #         if ans>=A:
        #             r+=1
        #         else:
        #             c+=ans
        #         # print(node,ans)
        #     return c,r
        
        # ans,r=dfs(1,1)
        # print(ans,r,x)
        # if r>k or (ans>=A and r==k):
        #     return True
        # return False
    # check(1)
    l=1
    r=(n//k)
    # print(l,r,n,k)
    while l<=r:
        mid=l+((r-l)//2)
        # print(mid,check(mid))
        if check(mid):
            l=mid+1
        else:
            r=mid-1
    # print(l,r)
    print(r)
 
q=[]
for i in range(int(input())):
    n,k=map(int,input().split(' '))
    edges=[]
    for _ in range(n-1):
        a,b=map(int,input().split(' '))
        edges.append((a,b))
    # if(i==325):
        # print(n,k,edges)
    solve(n,k,edges)
    # q.append((n,k,edges))
 
# print('ans:')
for n,k,edges in q:
    solve(n,k,edges)",1,True,False,False,False,False,False,False,True,False,True,False,False,False,False,1.0,1.0,1.0
1946_C,1946_C__Safar_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given a tree with n vertices.

Your task is to find the maximum number x such that it is possible to remove
exactly k edges from this tree in such a way that the size of each remaining
connected component^{\dagger} is at least x .

^{\dagger} Two vertices v and u are in the same connected component if there
exists a sequence of numbers t_1, t_2, \ldots, t_k of arbitrary length k ,
such that t_1 = v , t_k = u , and for each i from 1 to k - 1 , vertices t_i
and t_{i+1} are connected by an edge.

Input

Each test consists of several sets of input data. The first line contains a
single integer t (1 \le t \le 10^4 ) — the number of sets of input data. This
is followed by a description of the sets of input data.

The first line of each set of input data contains two integers n and k (1 \le
k < n \le 10^5 ) — the number of vertices in the tree and the number of edges
to be removed.

Each of the next n - 1 lines of each set of input data contains two integers v
and u (1 \le v, u \le n ) — the next edge of the tree.

It is guaranteed that the sum of the values of n for all sets of input data
does not exceed 10^5 .

Output

For each set of input data, output a single line containing the maximum number
x such that it is possible to remove exactly k edges from the tree in such a
way that the size of each remaining connected component is at least x .

Example

Input

    6
    
    5 1
    
    1 2
    
    1 3
    
    3 4
    
    3 5
    
    2 1
    
    1 2
    
    6 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5 6
    
    3 1
    
    1 2
    
    1 3
    
    8 2
    
    1 2
    
    1 3
    
    2 4
    
    2 5
    
    3 6
    
    3 7
    
    3 8
    
    6 2
    
    1 2
    
    2 3
    
    1 4
    
    4 5
    
    5 6

Output

    2
    1
    3
    1
    1
    2
    
Note

The tree in the first set of input data:

![](https://espresso.codeforces.com/799bacd3be0dda357800fdfc3eadbf38ab259c51.png)

After removing the edge 1 — 3 , the tree will look as follows:

![](https://espresso.codeforces.com/a59ae10eeac1212e1e56fc7fe5f6a47764269104.png)

The tree has split into two connected components. The first component consists
of two vertices: 1 and 2 . The second connected component consists of three
vertices: 3, 4 and 5 . In both connected components, there are at least two
vertices. It can be shown that the answer 3 is not achievable, so the answer
is 2 .","# import resource, sys
# sys.setrecursionlimit(10**7)
# resource.setrlimit(resource.RLIMIT_STACK, (10**7,-1))
# import sys
# sys.setrecursionlimit(999999999)
def solve(n,k,edges):
    g=[[] for _ in range(n+1)]
    for a,b in edges:
        g[a].append(b)
        g[b].append(a)
    c=0
    def check(A):
        stack=[(1,1)]
        visited=set()
        d={1:1}
        r=0
        while True:
            x,p=stack[-1]
            if x not in visited:
                visited.add(x)
                d[x]=1
                for node in g[x]:
                    if node!=p:
                        stack.append((node,x))
            else:
                if(x==1):
                    break
                if(d[x]>=A):
                    r+=1
                else:
                    d[p]+=d[x]
                stack.pop()
                visited.remove(x)
                del d[x]
        # print(stack,d,r)
        if r>k or (d[1]>=A and r==k):
            return True
        return False
 
        # def dfs(x,y):
        #     c=1
        #     r=0
        #     for node in g[x]:
        #         if node==y:
        #             continue
        #         ans,rn=dfs(node,x)
        #         r+=rn
        #         if ans>=A:
        #             r+=1
        #         else:
        #             c+=ans
        #         # print(node,ans)
        #     return c,r
        
        # ans,r=dfs(1,1)
        # print(ans,r,x)
        # if r>k or (ans>=A and r==k):
        #     return True
        # return False
    # check(1)
    l=1
    r=(n//k)
    # print(l,r,n,k)
    while l<=r:
        mid=l+((r-l)//2)
        # print(mid,check(mid))
        if check(mid):
            l=mid+1
        else:
            r=mid-1
    # print(l,r)
    print(r)
 
q=[]
for i in range(int(input())):
    n,k=map(int,input().split(' '))
    edges=[]
    for _ in range(n-1):
        a,b=map(int,input().split(' '))
        edges.append((a,b))
    # if(i==325):
        # print(n,k,edges)
    solve(n,k,edges)
    # q.append((n,k,edges))
 
# print('ans:')
for n,k,edges in q:
    solve(n,k,edges)",1,True,False,False,True,False,True,True,True,True,False,True,False,False,True,1.0,1.0,1.0
1946_C,1946_C__Safar_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given a tree with n vertices.

Your task is to find the maximum number x such that it is possible to remove
exactly k edges from this tree in such a way that the size of each remaining
connected component^{\dagger} is at least x .

^{\dagger} Two vertices v and u are in the same connected component if there
exists a sequence of numbers t_1, t_2, \ldots, t_k of arbitrary length k ,
such that t_1 = v , t_k = u , and for each i from 1 to k - 1 , vertices t_i
and t_{i+1} are connected by an edge.

Input

Each test consists of several sets of input data. The first line contains a
single integer t (1 \le t \le 10^4 ) — the number of sets of input data. This
is followed by a description of the sets of input data.

The first line of each set of input data contains two integers n and k (1 \le
k < n \le 10^5 ) — the number of vertices in the tree and the number of edges
to be removed.

Each of the next n - 1 lines of each set of input data contains two integers v
and u (1 \le v, u \le n ) — the next edge of the tree.

It is guaranteed that the sum of the values of n for all sets of input data
does not exceed 10^5 .

Output

For each set of input data, output a single line containing the maximum number
x such that it is possible to remove exactly k edges from the tree in such a
way that the size of each remaining connected component is at least x .

Example

Input

    6
    
    5 1
    
    1 2
    
    1 3
    
    3 4
    
    3 5
    
    2 1
    
    1 2
    
    6 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5 6
    
    3 1
    
    1 2
    
    1 3
    
    8 2
    
    1 2
    
    1 3
    
    2 4
    
    2 5
    
    3 6
    
    3 7
    
    3 8
    
    6 2
    
    1 2
    
    2 3
    
    1 4
    
    4 5
    
    5 6

Output

    2
    1
    3
    1
    1
    2
    
Note

The tree in the first set of input data:

![](https://espresso.codeforces.com/799bacd3be0dda357800fdfc3eadbf38ab259c51.png)

After removing the edge 1 — 3 , the tree will look as follows:

![](https://espresso.codeforces.com/a59ae10eeac1212e1e56fc7fe5f6a47764269104.png)

The tree has split into two connected components. The first component consists
of two vertices: 1 and 2 . The second connected component consists of three
vertices: 3, 4 and 5 . In both connected components, there are at least two
vertices. It can be shown that the answer 3 is not achievable, so the answer
is 2 .","# import resource, sys
# sys.setrecursionlimit(10**7)
# resource.setrlimit(resource.RLIMIT_STACK, (10**7,-1))
# import sys
# sys.setrecursionlimit(999999999)
def solve(n,k,edges):
    g=[[] for _ in range(n+1)]
    for a,b in edges:
        g[a].append(b)
        g[b].append(a)
    c=0
    def check(A):
        stack=[(1,1)]
        visited=set()
        d={1:1}
        r=0
        while True:
            x,p=stack[-1]
            if x not in visited:
                visited.add(x)
                d[x]=1
                for node in g[x]:
                    if node!=p:
                        stack.append((node,x))
            else:
                if(x==1):
                    break
                if(d[x]>=A):
                    r+=1
                else:
                    d[p]+=d[x]
                stack.pop()
                visited.remove(x)
                del d[x]
        # print(stack,d,r)
        if r>k or (d[1]>=A and r==k):
            return True
        return False
 
        # def dfs(x,y):
        #     c=1
        #     r=0
        #     for node in g[x]:
        #         if node==y:
        #             continue
        #         ans,rn=dfs(node,x)
        #         r+=rn
        #         if ans>=A:
        #             r+=1
        #         else:
        #             c+=ans
        #         # print(node,ans)
        #     return c,r
        
        # ans,r=dfs(1,1)
        # print(ans,r,x)
        # if r>k or (ans>=A and r==k):
        #     return True
        # return False
    # check(1)
    l=1
    r=(n//k)
    # print(l,r,n,k)
    while l<=r:
        mid=l+((r-l)//2)
        # print(mid,check(mid))
        if check(mid):
            l=mid+1
        else:
            r=mid-1
    # print(l,r)
    print(r)
 
q=[]
for i in range(int(input())):
    n,k=map(int,input().split(' '))
    edges=[]
    for _ in range(n-1):
        a,b=map(int,input().split(' '))
        edges.append((a,b))
    # if(i==325):
        # print(n,k,edges)
    solve(n,k,edges)
    # q.append((n,k,edges))
 
# print('ans:')
for n,k,edges in q:
    solve(n,k,edges)",1,True,False,False,False,False,True,True,True,True,True,True,False,False,True,1.0,1.0,1.0
1922_E,1922_E_lucky__389_100%,codeforces2024,human,qwen2p5-72b-instruct,"Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1","import math
 
MOD = 1000000007
 
def solve():
    x = int(input())
    subseq_lens = []
    mx = 0
    
    if x == 2:
        print(1)
        print(0)
        return
    
    while x != 0:
        i = 0
        while 2**i <= x:
            i += 1
        if i == 0:
            break
        else:
            subseq_lens.append(i - 1)
            x -= 2**(i - 1)
            mx = max(mx, i - 1)
    
    ansv = [i for i in range(mx)]
    
    for i in range(1, len(subseq_lens)):
        ansv.append(subseq_lens[i])
    
    print(len(ansv))
    
    for i in range(len(ansv)):
        print(ansv[i], end="" "")
    
    print()
 
if __name__ == ""__main__"":
    t = int(input())
    for _ in range(t):
        solve()",1,True,False,False,True,False,False,True,False,False,False,True,False,True,True,1.0,1.0,1.0
1922_E,1922_E_lucky__389_100%,codeforces2024,human,qwen2p5-72b-instruct,"Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1","import math
 
MOD = 1000000007
 
def solve():
    x = int(input())
    subseq_lens = []
    mx = 0
    
    if x == 2:
        print(1)
        print(0)
        return
    
    while x != 0:
        i = 0
        while 2**i <= x:
            i += 1
        if i == 0:
            break
        else:
            subseq_lens.append(i - 1)
            x -= 2**(i - 1)
            mx = max(mx, i - 1)
    
    ansv = [i for i in range(mx)]
    
    for i in range(1, len(subseq_lens)):
        ansv.append(subseq_lens[i])
    
    print(len(ansv))
    
    for i in range(len(ansv)):
        print(ansv[i], end="" "")
    
    print()
 
if __name__ == ""__main__"":
    t = int(input())
    for _ in range(t):
        solve()",1,True,False,False,False,False,False,False,False,False,False,False,False,True,False,1.0,1.0,1.0
1922_E,1922_E_lucky__389_100%,codeforces2024,human,qwen2p5-72b-instruct,"Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1","import math
 
MOD = 1000000007
 
def solve():
    x = int(input())
    subseq_lens = []
    mx = 0
    
    if x == 2:
        print(1)
        print(0)
        return
    
    while x != 0:
        i = 0
        while 2**i <= x:
            i += 1
        if i == 0:
            break
        else:
            subseq_lens.append(i - 1)
            x -= 2**(i - 1)
            mx = max(mx, i - 1)
    
    ansv = [i for i in range(mx)]
    
    for i in range(1, len(subseq_lens)):
        ansv.append(subseq_lens[i])
    
    print(len(ansv))
    
    for i in range(len(ansv)):
        print(ansv[i], end="" "")
    
    print()
 
if __name__ == ""__main__"":
    t = int(input())
    for _ in range(t):
        solve()",1,True,False,False,True,False,True,True,False,True,False,False,False,True,True,1.0,1.0,1.0
1945_E,1945_E_u-day_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3","def inp(): return map(int, input().split())
def linp(): return list(inp())
 
def solve():
  n, k = inp()
  arr = linp()
  
  pos = -1
  for i in range(n):
    if arr[i] == k:
      pos = i
  
  low, high = 0, n-1
  st = set()
  
  while low+1 < high:
    mid = (low + high)//2
    st.add(mid)
    
    if arr[mid] > k:
      high = mid
    else:
      low = mid
  
  if arr[low] == k:
    print(0)
  else:
    print(1)
    print(low+1, pos+1)
      
 
for _ in range(int(input())):
  solve()",1,False,False,False,True,False,True,False,False,False,False,False,False,True,True,1.0,1.0,1.0
1945_E,1945_E_u-day_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3","def inp(): return map(int, input().split())
def linp(): return list(inp())
 
def solve():
  n, k = inp()
  arr = linp()
  
  pos = -1
  for i in range(n):
    if arr[i] == k:
      pos = i
  
  low, high = 0, n-1
  st = set()
  
  while low+1 < high:
    mid = (low + high)//2
    st.add(mid)
    
    if arr[mid] > k:
      high = mid
    else:
      low = mid
  
  if arr[low] == k:
    print(0)
  else:
    print(1)
    print(low+1, pos+1)
      
 
for _ in range(int(input())):
  solve()",1,False,False,False,True,False,True,True,False,False,False,False,True,True,False,1.0,1.0,1.0
1945_E,1945_E_u-day_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3","def inp(): return map(int, input().split())
def linp(): return list(inp())
 
def solve():
  n, k = inp()
  arr = linp()
  
  pos = -1
  for i in range(n):
    if arr[i] == k:
      pos = i
  
  low, high = 0, n-1
  st = set()
  
  while low+1 < high:
    mid = (low + high)//2
    st.add(mid)
    
    if arr[mid] > k:
      high = mid
    else:
      low = mid
  
  if arr[low] == k:
    print(0)
  else:
    print(1)
    print(low+1, pos+1)
      
 
for _ in range(int(input())):
  solve()",1,False,False,False,True,False,False,False,False,False,False,False,True,False,False,1.0,1.0,1.0
1930_A,1930_A_ns2020_100%,codeforces2024,human,qwen2p5-72b-instruct,"There are 2n positive integers written on a whiteboard. Being bored, you
decided to play a one-player game with the numbers on the whiteboard.

You start with a score of 0 . You will increase your score by performing the
following move exactly n times:

  * Choose two integers x and y that are written on the whiteboard. 
  * Add \min(x,y) to your score. 
  * Erase x and y from the whiteboard. 

Note that after performing the move n times, there will be no more integers
written on the whiteboard.

Find the maximum final score you can achieve if you optimally perform the n
moves.

Input

Each test contains multiple test cases. The first line contains a single
integer t (1 \leq t \leq 5000 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (1 \leq n \leq 50
) — the number of integers written on the whiteboard is 2n .

The second line of each test case contains 2n integers a_1,a_2,\ldots,a_{2n}
(1 \leq a_i \leq 10^7 ) — the numbers written on the whiteboard.

Output

For each test case, output the maximum final score that you can achieve.

Example

Input

    3
    
    1
    
    2 3
    
    2
    
    1 1 2 1
    
    3
    
    1 1 1 1 1 1

Output

    2
    2
    3
    
Note

In the first test case, you can only make one move. You select x=2 and y=3 ,
and your score will be \min(x,y)=2 .

In the second test case, the following is a sequence of moves that achieves a
final score of 2 :

  * In the first move, select x=1 and y=1 . Then, add \min(x,y)=1 to the score. After erasing x and y , the integers left on the whiteboard are 1 and 2 . 
  * In the second move, select x=1 and y=2 . Then, add \min(x,y)=1 to the score. After removing x and y , no more integers will be left on the whiteboard. 

It can be proved that it is not possible to get a score greater than 2 .

In the third test case, you will perform the move thrice, adding 1 to the
score each time.","t = int(input())
while(t):
	n = int(input())
	A = list(map(int, input().split()))
	A.sort()
	print(sum(A[::2]))
	t = t - 1",1,True,True,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1930_A,1930_A_ns2020_100%,codeforces2024,human,qwen2p5-72b-instruct,"There are 2n positive integers written on a whiteboard. Being bored, you
decided to play a one-player game with the numbers on the whiteboard.

You start with a score of 0 . You will increase your score by performing the
following move exactly n times:

  * Choose two integers x and y that are written on the whiteboard. 
  * Add \min(x,y) to your score. 
  * Erase x and y from the whiteboard. 

Note that after performing the move n times, there will be no more integers
written on the whiteboard.

Find the maximum final score you can achieve if you optimally perform the n
moves.

Input

Each test contains multiple test cases. The first line contains a single
integer t (1 \leq t \leq 5000 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (1 \leq n \leq 50
) — the number of integers written on the whiteboard is 2n .

The second line of each test case contains 2n integers a_1,a_2,\ldots,a_{2n}
(1 \leq a_i \leq 10^7 ) — the numbers written on the whiteboard.

Output

For each test case, output the maximum final score that you can achieve.

Example

Input

    3
    
    1
    
    2 3
    
    2
    
    1 1 2 1
    
    3
    
    1 1 1 1 1 1

Output

    2
    2
    3
    
Note

In the first test case, you can only make one move. You select x=2 and y=3 ,
and your score will be \min(x,y)=2 .

In the second test case, the following is a sequence of moves that achieves a
final score of 2 :

  * In the first move, select x=1 and y=1 . Then, add \min(x,y)=1 to the score. After erasing x and y , the integers left on the whiteboard are 1 and 2 . 
  * In the second move, select x=1 and y=2 . Then, add \min(x,y)=1 to the score. After removing x and y , no more integers will be left on the whiteboard. 

It can be proved that it is not possible to get a score greater than 2 .

In the third test case, you will perform the move thrice, adding 1 to the
score each time.","t = int(input())
while(t):
	n = int(input())
	A = list(map(int, input().split()))
	A.sort()
	print(sum(A[::2]))
	t = t - 1",1,True,True,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1930_A,1930_A_ns2020_100%,codeforces2024,human,qwen2p5-72b-instruct,"There are 2n positive integers written on a whiteboard. Being bored, you
decided to play a one-player game with the numbers on the whiteboard.

You start with a score of 0 . You will increase your score by performing the
following move exactly n times:

  * Choose two integers x and y that are written on the whiteboard. 
  * Add \min(x,y) to your score. 
  * Erase x and y from the whiteboard. 

Note that after performing the move n times, there will be no more integers
written on the whiteboard.

Find the maximum final score you can achieve if you optimally perform the n
moves.

Input

Each test contains multiple test cases. The first line contains a single
integer t (1 \leq t \leq 5000 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (1 \leq n \leq 50
) — the number of integers written on the whiteboard is 2n .

The second line of each test case contains 2n integers a_1,a_2,\ldots,a_{2n}
(1 \leq a_i \leq 10^7 ) — the numbers written on the whiteboard.

Output

For each test case, output the maximum final score that you can achieve.

Example

Input

    3
    
    1
    
    2 3
    
    2
    
    1 1 2 1
    
    3
    
    1 1 1 1 1 1

Output

    2
    2
    3
    
Note

In the first test case, you can only make one move. You select x=2 and y=3 ,
and your score will be \min(x,y)=2 .

In the second test case, the following is a sequence of moves that achieves a
final score of 2 :

  * In the first move, select x=1 and y=1 . Then, add \min(x,y)=1 to the score. After erasing x and y , the integers left on the whiteboard are 1 and 2 . 
  * In the second move, select x=1 and y=2 . Then, add \min(x,y)=1 to the score. After removing x and y , no more integers will be left on the whiteboard. 

It can be proved that it is not possible to get a score greater than 2 .

In the third test case, you will perform the move thrice, adding 1 to the
score each time.","t = int(input())
while(t):
	n = int(input())
	A = list(map(int, input().split()))
	A.sort()
	print(sum(A[::2]))
	t = t - 1",1,True,True,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1922_E,1922_E_Hassn_Hamada_25.00%,codeforces2024,human,qwen2p5-72b-instruct,"Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1","import sys
from typing import Any, List
 
# Open input and output files
stdin = sys.stdin
stdout = sys.stdout
 
# sys.stdin = open('_input.txt', 'r')
# sys.stdout = open('_output.txt', 'w')
 
 
def generate_sequence(number: int, sequence: List[int]) -> int:
    """"""
    Generates a sequence of numbers based on the input number.
 
    Args:
        number (int): The input number to generate sequence for
        sequence (List[int]): The output sequence 
 
    Returns: 
        int: The size of generated sequence
    """"""
    assert number >= 0
    if number == 0:
        return 0
 
    size = 1
    while (1 << (size + 1)) - 1 <= number:
        size += 1
 
    for i in range(size):
        sequence.append(i)
 
    result = generate_sequence(number - (1 << size) + 1, sequence)
 
    for i in range(size):
        assert -len(sequence) <= -result - i - 1 <= -1
        sequence[-result - i - 1] += result
 
    return size + result
 
 
# Input processing
test_cases = int(input())
 
for _ in range(test_cases):
    n = int(input())
    result = list()
    size = generate_sequence(n - 1, result)
    print(len(result))
    print("" "".join(map(str, result)))",1,False,False,False,True,True,True,False,True,False,False,True,True,True,True,1.0,1.0,1.0
1922_E,1922_E_Hassn_Hamada_25.00%,codeforces2024,human,qwen2p5-72b-instruct,"Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1","import sys
from typing import Any, List
 
# Open input and output files
stdin = sys.stdin
stdout = sys.stdout
 
# sys.stdin = open('_input.txt', 'r')
# sys.stdout = open('_output.txt', 'w')
 
 
def generate_sequence(number: int, sequence: List[int]) -> int:
    """"""
    Generates a sequence of numbers based on the input number.
 
    Args:
        number (int): The input number to generate sequence for
        sequence (List[int]): The output sequence 
 
    Returns: 
        int: The size of generated sequence
    """"""
    assert number >= 0
    if number == 0:
        return 0
 
    size = 1
    while (1 << (size + 1)) - 1 <= number:
        size += 1
 
    for i in range(size):
        sequence.append(i)
 
    result = generate_sequence(number - (1 << size) + 1, sequence)
 
    for i in range(size):
        assert -len(sequence) <= -result - i - 1 <= -1
        sequence[-result - i - 1] += result
 
    return size + result
 
 
# Input processing
test_cases = int(input())
 
for _ in range(test_cases):
    n = int(input())
    result = list()
    size = generate_sequence(n - 1, result)
    print(len(result))
    print("" "".join(map(str, result)))",1,False,False,False,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1922_E,1922_E_Hassn_Hamada_25.00%,codeforces2024,human,qwen2p5-72b-instruct,"Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1","import sys
from typing import Any, List
 
# Open input and output files
stdin = sys.stdin
stdout = sys.stdout
 
# sys.stdin = open('_input.txt', 'r')
# sys.stdout = open('_output.txt', 'w')
 
 
def generate_sequence(number: int, sequence: List[int]) -> int:
    """"""
    Generates a sequence of numbers based on the input number.
 
    Args:
        number (int): The input number to generate sequence for
        sequence (List[int]): The output sequence 
 
    Returns: 
        int: The size of generated sequence
    """"""
    assert number >= 0
    if number == 0:
        return 0
 
    size = 1
    while (1 << (size + 1)) - 1 <= number:
        size += 1
 
    for i in range(size):
        sequence.append(i)
 
    result = generate_sequence(number - (1 << size) + 1, sequence)
 
    for i in range(size):
        assert -len(sequence) <= -result - i - 1 <= -1
        sequence[-result - i - 1] += result
 
    return size + result
 
 
# Input processing
test_cases = int(input())
 
for _ in range(test_cases):
    n = int(input())
    result = list()
    size = generate_sequence(n - 1, result)
    print(len(result))
    print("" "".join(map(str, result)))",1,False,False,False,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1968_C,1968_C_aminesager_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array x_2,x_3,\dots,x_n . Your task is to find any array
a_1,\dots,a_n , where:

  * 1\le a_i\le 10^9 for all 1\le i\le n . 
  * x_i=a_i \bmod a_{i-1} for all 2\le i\le n . 

Here c\bmod d denotes the remainder of the division of the integer c by the
integer d . For example 5 \bmod 2 = 1 , 72 \bmod 3 = 0 , 143 \bmod 14 = 3 .

Note that if there is more than one a which satisfies the statement, you are
allowed to find any.

Input

The first line contains a single integer t (1\le t\le 10^4) — the number of
test cases.

The first line of each test case contains a single integer n (2\le n\le 500) —
the number of elements in a .

The second line of each test case contains n-1 integers x_2,\dots,x_n (1\le
x_i\le 500) — the elements of x .

It is guaranteed that the sum of values n over all test cases does not exceed
2 \cdot 10^5 .

Output

For each test case output any a_1,\dots,a_n (1 \le a_i \le 10^9 ) which
satisfies the statement.

Example

Input

    5
    
    4
    
    2 4 1
    
    3
    
    1 1
    
    6
    
    4 2 5 1 2
    
    2
    
    500
    
    3
    
    1 5

Output

    3 5 4 9
    2 5 11
    5 14 16 5 11 24
    501 500
    2 7 5

Note

In the first test case a=[3,5,4,9] satisfies the conditions, because:

  * a_2\bmod a_1=5\bmod 3=2=x_2 ; 
  * a_3\bmod a_2=4\bmod 5=4=x_3 ; 
  * a_4\bmod a_3=9\bmod 4=1=x_4 ;","t= int(input())
while(t):
    t=t-1
 
    n = int(input())
    line = input("""")
    T = list(map(int, line.split()))
        
 
    a=[1000]
    for i in range(1,n):
        a.append(a[i-1]+T[i-1])
    
    result = ' '.join(map(str, a))
    print(result)",1,True,False,False,True,False,True,False,False,True,True,True,True,True,False,1.0,1.0,1.0
1968_C,1968_C_aminesager_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array x_2,x_3,\dots,x_n . Your task is to find any array
a_1,\dots,a_n , where:

  * 1\le a_i\le 10^9 for all 1\le i\le n . 
  * x_i=a_i \bmod a_{i-1} for all 2\le i\le n . 

Here c\bmod d denotes the remainder of the division of the integer c by the
integer d . For example 5 \bmod 2 = 1 , 72 \bmod 3 = 0 , 143 \bmod 14 = 3 .

Note that if there is more than one a which satisfies the statement, you are
allowed to find any.

Input

The first line contains a single integer t (1\le t\le 10^4) — the number of
test cases.

The first line of each test case contains a single integer n (2\le n\le 500) —
the number of elements in a .

The second line of each test case contains n-1 integers x_2,\dots,x_n (1\le
x_i\le 500) — the elements of x .

It is guaranteed that the sum of values n over all test cases does not exceed
2 \cdot 10^5 .

Output

For each test case output any a_1,\dots,a_n (1 \le a_i \le 10^9 ) which
satisfies the statement.

Example

Input

    5
    
    4
    
    2 4 1
    
    3
    
    1 1
    
    6
    
    4 2 5 1 2
    
    2
    
    500
    
    3
    
    1 5

Output

    3 5 4 9
    2 5 11
    5 14 16 5 11 24
    501 500
    2 7 5

Note

In the first test case a=[3,5,4,9] satisfies the conditions, because:

  * a_2\bmod a_1=5\bmod 3=2=x_2 ; 
  * a_3\bmod a_2=4\bmod 5=4=x_3 ; 
  * a_4\bmod a_3=9\bmod 4=1=x_4 ;","t= int(input())
while(t):
    t=t-1
 
    n = int(input())
    line = input("""")
    T = list(map(int, line.split()))
        
 
    a=[1000]
    for i in range(1,n):
        a.append(a[i-1]+T[i-1])
    
    result = ' '.join(map(str, a))
    print(result)",1,True,False,False,True,False,True,True,False,False,False,False,True,True,True,1.0,1.0,1.0
1968_C,1968_C_aminesager_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array x_2,x_3,\dots,x_n . Your task is to find any array
a_1,\dots,a_n , where:

  * 1\le a_i\le 10^9 for all 1\le i\le n . 
  * x_i=a_i \bmod a_{i-1} for all 2\le i\le n . 

Here c\bmod d denotes the remainder of the division of the integer c by the
integer d . For example 5 \bmod 2 = 1 , 72 \bmod 3 = 0 , 143 \bmod 14 = 3 .

Note that if there is more than one a which satisfies the statement, you are
allowed to find any.

Input

The first line contains a single integer t (1\le t\le 10^4) — the number of
test cases.

The first line of each test case contains a single integer n (2\le n\le 500) —
the number of elements in a .

The second line of each test case contains n-1 integers x_2,\dots,x_n (1\le
x_i\le 500) — the elements of x .

It is guaranteed that the sum of values n over all test cases does not exceed
2 \cdot 10^5 .

Output

For each test case output any a_1,\dots,a_n (1 \le a_i \le 10^9 ) which
satisfies the statement.

Example

Input

    5
    
    4
    
    2 4 1
    
    3
    
    1 1
    
    6
    
    4 2 5 1 2
    
    2
    
    500
    
    3
    
    1 5

Output

    3 5 4 9
    2 5 11
    5 14 16 5 11 24
    501 500
    2 7 5

Note

In the first test case a=[3,5,4,9] satisfies the conditions, because:

  * a_2\bmod a_1=5\bmod 3=2=x_2 ; 
  * a_3\bmod a_2=4\bmod 5=4=x_3 ; 
  * a_4\bmod a_3=9\bmod 4=1=x_4 ;","t= int(input())
while(t):
    t=t-1
 
    n = int(input())
    line = input("""")
    T = list(map(int, line.split()))
        
 
    a=[1000]
    for i in range(1,n):
        a.append(a[i-1]+T[i-1])
    
    result = ' '.join(map(str, a))
    print(result)",1,True,False,False,True,False,True,False,True,True,True,True,True,True,True,1.0,1.0,1.0
1921_A,1921_A_KartheKeyan_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"A square of positive (strictly greater than 0 ) area is located on the
coordinate plane, with sides parallel to the coordinate axes. You are given
the coordinates of its corners, in random order. Your task is to find the area
of the square.

Input

Each test consists of several testcases. The first line contains one integer t
(1 \le t \le 100 ) — the number of testcases. The following is a description
of the testcases.

Each testcase contains four lines, each line contains two integers x_i, y_i
(-1000\le x_i, y_i\le 1000 ), coordinates of the corners of the square.

It is guaranteed that there is a square with sides parallel to the coordinate
axes, with positive (strictly greater than 0 ) area, with corners in given
points.

Output

For each test case, print a single integer, the area of the square.

Example

Input

    3
    
    1 2
    
    4 5
    
    1 5
    
    4 2
    
    -1 1
    
    1 -1
    
    1 1
    
    -1 -1
    
    45 11
    
    45 39
    
    17 11
    
    17 39

Output

    9
    4
    784","""""""
n = int(input())
 
while n :
    
    l = int(input())
    s = 0
    s += (l//4)+(l-(4*(l//4)))//2
    print(s)
    n-=1
 
        
""""""
import math
n = int(input())
while n:
 
    coord = []
    res = 0
    for i in range(4):
        (x,y) = map(int,input().split())
        coord.append((x,y))
    coord = sorted(coord)
    p1 = ((coord[1][0] - coord[0][0])**2) + ((coord[1][1] - coord[0][1])**2)
    p2 = ((coord[3][0] - coord[2][0])**2) + ((coord[3][1] - coord[2][1])**2) 
    res = abs(math.sqrt(p1)* math.sqrt(p2))
    print(res)
 
    n-=1",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1921_A,1921_A_KartheKeyan_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"A square of positive (strictly greater than 0 ) area is located on the
coordinate plane, with sides parallel to the coordinate axes. You are given
the coordinates of its corners, in random order. Your task is to find the area
of the square.

Input

Each test consists of several testcases. The first line contains one integer t
(1 \le t \le 100 ) — the number of testcases. The following is a description
of the testcases.

Each testcase contains four lines, each line contains two integers x_i, y_i
(-1000\le x_i, y_i\le 1000 ), coordinates of the corners of the square.

It is guaranteed that there is a square with sides parallel to the coordinate
axes, with positive (strictly greater than 0 ) area, with corners in given
points.

Output

For each test case, print a single integer, the area of the square.

Example

Input

    3
    
    1 2
    
    4 5
    
    1 5
    
    4 2
    
    -1 1
    
    1 -1
    
    1 1
    
    -1 -1
    
    45 11
    
    45 39
    
    17 11
    
    17 39

Output

    9
    4
    784","""""""
n = int(input())
 
while n :
    
    l = int(input())
    s = 0
    s += (l//4)+(l-(4*(l//4)))//2
    print(s)
    n-=1
 
        
""""""
import math
n = int(input())
while n:
 
    coord = []
    res = 0
    for i in range(4):
        (x,y) = map(int,input().split())
        coord.append((x,y))
    coord = sorted(coord)
    p1 = ((coord[1][0] - coord[0][0])**2) + ((coord[1][1] - coord[0][1])**2)
    p2 = ((coord[3][0] - coord[2][0])**2) + ((coord[3][1] - coord[2][1])**2) 
    res = abs(math.sqrt(p1)* math.sqrt(p2))
    print(res)
 
    n-=1",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1921_A,1921_A_KartheKeyan_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"A square of positive (strictly greater than 0 ) area is located on the
coordinate plane, with sides parallel to the coordinate axes. You are given
the coordinates of its corners, in random order. Your task is to find the area
of the square.

Input

Each test consists of several testcases. The first line contains one integer t
(1 \le t \le 100 ) — the number of testcases. The following is a description
of the testcases.

Each testcase contains four lines, each line contains two integers x_i, y_i
(-1000\le x_i, y_i\le 1000 ), coordinates of the corners of the square.

It is guaranteed that there is a square with sides parallel to the coordinate
axes, with positive (strictly greater than 0 ) area, with corners in given
points.

Output

For each test case, print a single integer, the area of the square.

Example

Input

    3
    
    1 2
    
    4 5
    
    1 5
    
    4 2
    
    -1 1
    
    1 -1
    
    1 1
    
    -1 -1
    
    45 11
    
    45 39
    
    17 11
    
    17 39

Output

    9
    4
    784","""""""
n = int(input())
 
while n :
    
    l = int(input())
    s = 0
    s += (l//4)+(l-(4*(l//4)))//2
    print(s)
    n-=1
 
        
""""""
import math
n = int(input())
while n:
 
    coord = []
    res = 0
    for i in range(4):
        (x,y) = map(int,input().split())
        coord.append((x,y))
    coord = sorted(coord)
    p1 = ((coord[1][0] - coord[0][0])**2) + ((coord[1][1] - coord[0][1])**2)
    p2 = ((coord[3][0] - coord[2][0])**2) + ((coord[3][1] - coord[2][1])**2) 
    res = abs(math.sqrt(p1)* math.sqrt(p2))
    print(res)
 
    n-=1",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1980_B,1980_B_Flikman_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Dmitry has n cubes, numbered from left to right from 1 to n . The cube with
index f is his favorite.

Dmitry threw all the cubes on the table, and the i -th cube showed the value
a_i (1 \le a_i \le 100 ). After that, he arranged the cubes in non-increasing
order of their values, from largest to smallest. If two cubes show the same
value, they can go in any order.

After sorting, Dmitry removed the first k cubes. Then he became interested in
whether he removed his favorite cube (note that its position could have
changed after sorting).

For example, if n=5 , f=2 , a = [4, \color{green}3, 3, 2, 3] (the favorite
cube is highlighted in green), and k = 2 , the following could have happened:

  * After sorting a=[4, \color{green}3, 3, 3, 2] , since the favorite cube ended up in the second position, it will be removed. 
  * After sorting a=[4, 3, \color{green}3, 3, 2] , since the favorite cube ended up in the third position, it will not be removed. 

Input

The first line contains an integer t (1 \le t \le 1000 ) — the number of test
cases. Then follow the descriptions of the test cases.

The first line of each test case description contains three integers n , f ,
and k (1 \le f, k \le n \le 100 ) — the number of cubes, the index of Dmitry's
favorite cube, and the number of removed cubes, respectively.

The second line of each test case description contains n integers a_i (1 \le
a_i \le 100 ) — the values shown on the cubes.

Output

For each test case, output one line — ""YES"" if the cube will be removed in all
cases, ""NO"" if it will not be removed in any case, ""MAYBE"" if it may be either
removed or left.

You can output the answer in any case. For example, the strings ""YES"", ""nO"",
""mAyBe"" will be accepted as answers.

Example

Input

    12
    
    5 2 2
    
    4 3 3 2 3
    
    5 5 3
    
    4 2 1 3 5
    
    5 5 2
    
    5 2 4 1 3
    
    5 5 5
    
    1 2 5 4 3
    
    5 5 4
    
    3 1 2 4 5
    
    5 5 5
    
    4 3 2 1 5
    
    6 5 3
    
    1 2 3 1 2 3
    
    10 1 1
    
    1 1 1 1 1 1 1 1 1 1
    
    1 1 1
    
    42
    
    5 2 3
    
    2 2 1 1 2
    
    2 1 1
    
    2 1
    
    5 3 1
    
    3 3 2 3 2

Output

    MAYBE
    YES
    NO
    YES
    YES
    YES
    MAYBE
    MAYBE
    YES
    YES
    YES
    NO","t = int(input())
 
for _ in range(t):
    # Чтение входных данных
    n, f, k = map(int, input().split())
    a = list(map(int, input().split()))
 
    # Значение любимого кубика
    favorite_value = a[f - 1]
 
    # Подсчет количества кубиков с таким же значением
    same_value_count = 0
    for value in a:
        if value == favorite_value:
            same_value_count += 1
 
    # Подсчет количества кубиков, у которых значения больше любимого
    greater_count = 0
    for value in a:
        if value > favorite_value:
            greater_count += 1
 
    # Проверка условий удаления любимого кубика
    if greater_count >= k:
        print(""YES"")
    elif greater_count + same_value_count <= k:
        print(""NO"")
    else:
        print(""MAYBE"")",1,False,False,False,False,False,True,True,True,True,True,True,False,False,False,1.0,1.0,1.0
1931_C,1931_C_tah23seen_100%,codeforces2024,human,qwen2p5-72b-instruct,"You have an array a of n integers.

You can no more than once apply the following operation: select three integers
i , j , x (1 \le i \le j \le n ) and assign all elements of the array with
indexes from i to j the value x . The price of this operation depends on the
selected indices and is equal to (j - i + 1) burles.

For example, the array is equal to [1, 2, 3, 4, 5, 1] . If we choose i = 2, j
= 4, x = 8 , then after applying this operation, the array will be equal to
[1, 8, 8, 8, 5, 1] .

What is the least amount of burles you need to spend to make all the elements
of the array equal?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
input test cases. The descriptions of the test cases follow.

The first line of the description of each test case contains a single integer
n (1 \le n \le 2 \cdot 10 ^ 5 ) — the size of the array.

The second line of the description of each test case contains n integers a_1,
a_2, \dots, a_n (1 \le a_i \le n ) — array elements.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output one integer — the minimum number of burles that
will have to be spent to make all the elements of the array equal. It can be
shown that this can always be done.

Example

Input

    8
    
    6
    
    1 2 3 4 5 1
    
    7
    
    1 1 1 1 1 1 1
    
    8
    
    8 8 8 1 2 8 8 8
    
    1
    
    1
    
    2
    
    1 2
    
    3
    
    1 2 3
    
    7
    
    4 3 2 7 1 1 3
    
    9
    
    9 9 2 9 2 5 5 5 3

Output

    4
    0
    2
    0
    1
    2
    6
    7","def solve(arr):
  i=0
  n=len(arr)
  j=len(arr)-1
  while i<len(arr)-1 and arr[i]==arr[i+1] :
      i+=1
  while j>0 and arr[j]==arr[j-1] :
      j-=1
  if arr[0]==arr[-1]:
     return max(j-i-1,0)
  return max(min(n-i-1,j),0)
 
t=int(input())
while t:
  n=int(input())
  arr=[int(x) for x in input().split(' ')]
  print(solve(arr))
  t-=1",1,True,False,False,True,False,True,True,False,False,False,False,True,False,True,0.9799089242750156,0.844269706444436,0.9166666666666666
1931_C,1931_C_tah23seen_100%,codeforces2024,human,qwen2p5-72b-instruct,"You have an array a of n integers.

You can no more than once apply the following operation: select three integers
i , j , x (1 \le i \le j \le n ) and assign all elements of the array with
indexes from i to j the value x . The price of this operation depends on the
selected indices and is equal to (j - i + 1) burles.

For example, the array is equal to [1, 2, 3, 4, 5, 1] . If we choose i = 2, j
= 4, x = 8 , then after applying this operation, the array will be equal to
[1, 8, 8, 8, 5, 1] .

What is the least amount of burles you need to spend to make all the elements
of the array equal?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
input test cases. The descriptions of the test cases follow.

The first line of the description of each test case contains a single integer
n (1 \le n \le 2 \cdot 10 ^ 5 ) — the size of the array.

The second line of the description of each test case contains n integers a_1,
a_2, \dots, a_n (1 \le a_i \le n ) — array elements.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output one integer — the minimum number of burles that
will have to be spent to make all the elements of the array equal. It can be
shown that this can always be done.

Example

Input

    8
    
    6
    
    1 2 3 4 5 1
    
    7
    
    1 1 1 1 1 1 1
    
    8
    
    8 8 8 1 2 8 8 8
    
    1
    
    1
    
    2
    
    1 2
    
    3
    
    1 2 3
    
    7
    
    4 3 2 7 1 1 3
    
    9
    
    9 9 2 9 2 5 5 5 3

Output

    4
    0
    2
    0
    1
    2
    6
    7","def solve(arr):
  i=0
  n=len(arr)
  j=len(arr)-1
  while i<len(arr)-1 and arr[i]==arr[i+1] :
      i+=1
  while j>0 and arr[j]==arr[j-1] :
      j-=1
  if arr[0]==arr[-1]:
     return max(j-i-1,0)
  return max(min(n-i-1,j),0)
 
t=int(input())
while t:
  n=int(input())
  arr=[int(x) for x in input().split(' ')]
  print(solve(arr))
  t-=1",1,True,False,False,True,False,True,True,False,False,False,False,False,True,True,0.9799089242750156,0.844269706444436,0.9166666666666666
1931_C,1931_C_tah23seen_100%,codeforces2024,human,qwen2p5-72b-instruct,"You have an array a of n integers.

You can no more than once apply the following operation: select three integers
i , j , x (1 \le i \le j \le n ) and assign all elements of the array with
indexes from i to j the value x . The price of this operation depends on the
selected indices and is equal to (j - i + 1) burles.

For example, the array is equal to [1, 2, 3, 4, 5, 1] . If we choose i = 2, j
= 4, x = 8 , then after applying this operation, the array will be equal to
[1, 8, 8, 8, 5, 1] .

What is the least amount of burles you need to spend to make all the elements
of the array equal?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
input test cases. The descriptions of the test cases follow.

The first line of the description of each test case contains a single integer
n (1 \le n \le 2 \cdot 10 ^ 5 ) — the size of the array.

The second line of the description of each test case contains n integers a_1,
a_2, \dots, a_n (1 \le a_i \le n ) — array elements.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output one integer — the minimum number of burles that
will have to be spent to make all the elements of the array equal. It can be
shown that this can always be done.

Example

Input

    8
    
    6
    
    1 2 3 4 5 1
    
    7
    
    1 1 1 1 1 1 1
    
    8
    
    8 8 8 1 2 8 8 8
    
    1
    
    1
    
    2
    
    1 2
    
    3
    
    1 2 3
    
    7
    
    4 3 2 7 1 1 3
    
    9
    
    9 9 2 9 2 5 5 5 3

Output

    4
    0
    2
    0
    1
    2
    6
    7","def solve(arr):
  i=0
  n=len(arr)
  j=len(arr)-1
  while i<len(arr)-1 and arr[i]==arr[i+1] :
      i+=1
  while j>0 and arr[j]==arr[j-1] :
      j-=1
  if arr[0]==arr[-1]:
     return max(j-i-1,0)
  return max(min(n-i-1,j),0)
 
t=int(input())
while t:
  n=int(input())
  arr=[int(x) for x in input().split(' ')]
  print(solve(arr))
  t-=1",1,True,False,False,True,False,True,False,True,False,False,False,True,True,False,0.9799089242750156,0.844269706444436,0.9166666666666666
1972_D1,1972_D1_Calto_37.50%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.","import math
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a
 
def count_ordered_pairs(n, m):
    cnt = 0
    
    for i in range(1, m):
        x = n - (i * i - i)
        y = i * i
        cnt = cnt + (x//y) + (i > 1)
 
    if cnt == 0:
        return 1
    return cnt
 
t = int(input())
for _ in range(t):
    n, m = map(int, input().split())
    result = count_ordered_pairs(n, m)
    print(result)",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1972_D1,1972_D1_Calto_37.50%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.","import math
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a
 
def count_ordered_pairs(n, m):
    cnt = 0
    
    for i in range(1, m):
        x = n - (i * i - i)
        y = i * i
        cnt = cnt + (x//y) + (i > 1)
 
    if cnt == 0:
        return 1
    return cnt
 
t = int(input())
for _ in range(t):
    n, m = map(int, input().split())
    result = count_ordered_pairs(n, m)
    print(result)",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1972_D1,1972_D1_Calto_37.50%,codeforces2024,human,qwen2p5-72b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.","import math
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a
 
def count_ordered_pairs(n, m):
    cnt = 0
    
    for i in range(1, m):
        x = n - (i * i - i)
        y = i * i
        cnt = cnt + (x//y) + (i > 1)
 
    if cnt == 0:
        return 1
    return cnt
 
t = int(input())
for _ in range(t):
    n, m = map(int, input().split())
    result = count_ordered_pairs(n, m)
    print(result)",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1945_E,1945_E_u-day_100%,codeforces2024,human,qwen2p5-72b-instruct,"Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3","def inp(): return map(int, input().split())
def linp(): return list(inp())
 
def solve():
  n, k = inp()
  arr = linp()
  
  pos = -1
  for i in range(n):
    if arr[i] == k:
      pos = i
  
  low, high = 0, n
  st = set()
  
  while low+1 < high:
    mid = (low + high)//2
    st.add(mid)
    
    if arr[mid] > k:
      high = mid
    else:
      low = mid
  
  if arr[low] == k:
    print(0)
  else:
    print(1)
    print(low+1, pos+1)
      
 
for _ in range(int(input())):
  solve()",1,True,False,False,True,False,True,False,False,False,False,False,True,True,False,1.0,1.0,1.0
1945_E,1945_E_u-day_100%,codeforces2024,human,qwen2p5-72b-instruct,"Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3","def inp(): return map(int, input().split())
def linp(): return list(inp())
 
def solve():
  n, k = inp()
  arr = linp()
  
  pos = -1
  for i in range(n):
    if arr[i] == k:
      pos = i
  
  low, high = 0, n
  st = set()
  
  while low+1 < high:
    mid = (low + high)//2
    st.add(mid)
    
    if arr[mid] > k:
      high = mid
    else:
      low = mid
  
  if arr[low] == k:
    print(0)
  else:
    print(1)
    print(low+1, pos+1)
      
 
for _ in range(int(input())):
  solve()",1,True,False,False,False,False,False,False,True,False,False,False,True,True,False,1.0,1.0,1.0
1945_E,1945_E_u-day_100%,codeforces2024,human,qwen2p5-72b-instruct,"Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3","def inp(): return map(int, input().split())
def linp(): return list(inp())
 
def solve():
  n, k = inp()
  arr = linp()
  
  pos = -1
  for i in range(n):
    if arr[i] == k:
      pos = i
  
  low, high = 0, n
  st = set()
  
  while low+1 < high:
    mid = (low + high)//2
    st.add(mid)
    
    if arr[mid] > k:
      high = mid
    else:
      low = mid
  
  if arr[low] == k:
    print(0)
  else:
    print(1)
    print(low+1, pos+1)
      
 
for _ in range(int(input())):
  solve()",1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1979_C,1979_C_avngr___stark_100%,codeforces2024,human,qwen2p5-72b-instruct,"You have been offered to play a game. In this game, there are n possible
outcomes, and for each of them, you must bet a certain integer amount of
coins. In the event that the i -th outcome turns out to be winning, you will
receive back the amount of coins equal to your bet on that outcome, multiplied
by k_i . Note that exactly one of the n outcomes will be winning.

Your task is to determine how to distribute the coins in such a way that you
will come out ahead in the event of any winning outcome. More formally, the
total amount of coins you bet on all outcomes must be strictly less than the
number of coins received back for each possible winning outcome.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le 50 )
— the number of outcomes.

The second line of each test case contains n integers k_1,k_2,\ldots,k_n (2
\le k_i \le 20 ) — the multiplier for the amount of coins if the i -th outcome
turns out to be winning.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output -1 if there is no way to distribute the coins as
required. Otherwise, output n integers x_1, x_2,\ldots, x_n (1 \le x_i \le
10^{9} ) — your bets on the outcomes.

It can be shown that if a solution exists, there is always a solution that
satisfies these constraints.

If there are multiple suitable solutions, output any of them.

Example

Input

    6
    
    3
    
    3 2 7
    
    2
    
    3 3
    
    5
    
    5 5 5 5 5
    
    6
    
    7 9 3 17 9 13
    
    3
    
    6 3 2
    
    5
    
    9 4 6 8 3

Output

    27 41 12 
    1 1 
    -1
    1989 1547 4641 819 1547 1071 
    -1
    8 18 12 9 24
    
Note

In the first test case, the coins can be distributed as follows: 27 coins on
the first outcome, 41 coins on the second outcome, 12 coins on the third
outcome. Then the total amount of coins bet on all outcomes is 27 + 41 + 12 =
80 coins. If the first outcome turns out to be winning, you will receive back
3 \cdot 27 = 81 coins, if the second outcome turns out to be winning, you will
receive back 2 \cdot 41 = 82 coins, if the third outcome turns out to be
winning, you will receive back 7 \cdot 12 = 84 coins. All these values are
strictly greater than 80 .

In the second test case, one way is to bet one coin on each of the outcomes.","from math import gcd
 
def lcm(a, b):
    return abs(a * b) // gcd(a, b)
 
def calculate_lcm(numbers):
    result = numbers[0]
    for num in numbers[1:]:
        result = lcm(result, num)
    return result
 
t = int(input())
for _ in range(t):
    n=int(input())
    k=list(map(int, input().split()))
    m=calculate_lcm(k)
    c=[]
    for i in range(n):
        c.append(m//k[i])
    if sum(c)>=m:
        print(-1)
        continue
    for i in range(n):
        print(c[i], end=' ')
    print('\n', end='')",1,True,False,False,False,False,True,True,True,False,False,True,True,True,False,0.9498683768872834,0.718167828149503,0.8333333333333334
1945_C,1945_C_aditya.ad.agrawal_50.00%,codeforces2024,human,qwen2p5-72b-instruct,"In the village of Letovo, there are n houses. The villagers decided to build a
big road that will divide the village into left and right sides. Each resident
wants to live on either the right or the left side of the street, which is
described as a sequence a_1, a_2, \dots, a_n , where a_j = 0 if the resident
of the j -th house wants to live on the left side of the street; otherwise,
a_j = 1 .

The road will pass between two houses. The houses to the left of it will be
declared the left-side, and the houses to the right will be declared the
right-side. More formally, let the road pass between houses i and i+1 . Then
the houses at positions between 1 and i will be on the left side of the
street, and at positions between i+1 and n will be on the right side. The road
also may pass before the first and after the last house; in this case, the
entire village is declared to be either the right or left side, respectively.

To make the design fair, it was decided to lay the road so that at least half
of the residents on each side of the village are satisfied with the choice.
That is, among x residents on one side, at least \lceil\frac{x}{2}\rceil
should want to live on that side, where \lceil x \rceil denotes rounding up a
real number x .

![](https://espresso.codeforces.com/75baa17903d65a630fb0d3334683e857d5fdc345.png)
To the left of the road, there will be i houses, among the corresponding a_j
there must be at least \lceil\frac{i}{2}\rceil zeros. To the right of the
road, there will be n-i houses, among the corresponding a_j there must be at
least \lceil\frac{n-i}{2}\rceil ones.

Determine after which house i the road should be laid in order to satisfy the
described condition and be as close to the middle of the village as possible.
Formally, among all suitable positions i , minimize \left|\frac{n}{2} -
i\right| .

If there are multiple suitable positions i with the minimum \left|\frac{n}{2}
- i\right| , output the smaller one.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 2\cdot 10^4 ). The description of the test cases
follows.

The first line of each test case contains a single integer n (3 \le n \le
3\cdot 10^5 ). The next line of each test case contains a string a of length n
, consisting only of 0 and 1 .

It is guaranteed that the sum of n over all test cases does not exceed 3\cdot
10^5 .

Output

For each test case, output a single number i — the position of the house after
which the road should be laid (if it should be laid before the first house,
output 0 ). We can show that the answer always exists.

Example

Input

    7
    
    3
    
    101
    
    6
    
    010111
    
    6
    
    011001
    
    3
    
    000
    
    3
    
    110
    
    3
    
    001
    
    4
    
    1100

Output

    2
    3
    2
    3
    0
    1
    0
    
Note

Let's consider the first example of input data.

If we lay the road after the first house, there will be one house a_1 = 1 on
the left side of the street, the resident of which would like to live on the
right side of the street. Then 0 out of 1 residents on the even side will be
satisfied with the choice, which means that the road cannot be laid after
house 1 .

If we lay the road after the second house, 1 out of 2 residents on the left
side (with preferences a_1 = 1 , a_2 = 0 ) and 1 out of 1 resident on the
right side (with preference a_3 = 1 ) will be satisfied with the choice. More
than half of the residents on each side are satisfied with the choice, which
means that the road can be laid after house 2 . We can show that this is the
optimal answer.","import math
from decimal import Decimal
 
t = int(input()) 
while t:
    n=int(input())
    input_string = input()
    arr = [int(ch) for ch in input_string]
    z = arr.count(0)
    o = arr.count(1)
    z_r = z
    o_r = o
    z_l=0
    o_l=0
    dist,ans,pos=abs(n/2),0,0
    if o_r>=(z_r+o_r)/2:
        b_d=dist
    else:
        b_d=30001
    for i in arr:
        pos+=1
        if i==0:
            z_l+=1
            z_r-=1
        else:
            o_l+=1
            o_r-=1
        if o_r>=((z_r+o_r)/2) and z_l>=((z_l+o_l)/2) and b_d > abs(n/2-pos):
            ans=pos
            b_d = abs(n/2-pos)
    print(ans)
    t -= 1",1,False,False,False,True,True,False,False,True,False,False,False,True,True,False,1.0,1.0,1.0
1945_C,1945_C_aditya.ad.agrawal_50.00%,codeforces2024,human,qwen2p5-72b-instruct,"In the village of Letovo, there are n houses. The villagers decided to build a
big road that will divide the village into left and right sides. Each resident
wants to live on either the right or the left side of the street, which is
described as a sequence a_1, a_2, \dots, a_n , where a_j = 0 if the resident
of the j -th house wants to live on the left side of the street; otherwise,
a_j = 1 .

The road will pass between two houses. The houses to the left of it will be
declared the left-side, and the houses to the right will be declared the
right-side. More formally, let the road pass between houses i and i+1 . Then
the houses at positions between 1 and i will be on the left side of the
street, and at positions between i+1 and n will be on the right side. The road
also may pass before the first and after the last house; in this case, the
entire village is declared to be either the right or left side, respectively.

To make the design fair, it was decided to lay the road so that at least half
of the residents on each side of the village are satisfied with the choice.
That is, among x residents on one side, at least \lceil\frac{x}{2}\rceil
should want to live on that side, where \lceil x \rceil denotes rounding up a
real number x .

![](https://espresso.codeforces.com/75baa17903d65a630fb0d3334683e857d5fdc345.png)
To the left of the road, there will be i houses, among the corresponding a_j
there must be at least \lceil\frac{i}{2}\rceil zeros. To the right of the
road, there will be n-i houses, among the corresponding a_j there must be at
least \lceil\frac{n-i}{2}\rceil ones.

Determine after which house i the road should be laid in order to satisfy the
described condition and be as close to the middle of the village as possible.
Formally, among all suitable positions i , minimize \left|\frac{n}{2} -
i\right| .

If there are multiple suitable positions i with the minimum \left|\frac{n}{2}
- i\right| , output the smaller one.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 2\cdot 10^4 ). The description of the test cases
follows.

The first line of each test case contains a single integer n (3 \le n \le
3\cdot 10^5 ). The next line of each test case contains a string a of length n
, consisting only of 0 and 1 .

It is guaranteed that the sum of n over all test cases does not exceed 3\cdot
10^5 .

Output

For each test case, output a single number i — the position of the house after
which the road should be laid (if it should be laid before the first house,
output 0 ). We can show that the answer always exists.

Example

Input

    7
    
    3
    
    101
    
    6
    
    010111
    
    6
    
    011001
    
    3
    
    000
    
    3
    
    110
    
    3
    
    001
    
    4
    
    1100

Output

    2
    3
    2
    3
    0
    1
    0
    
Note

Let's consider the first example of input data.

If we lay the road after the first house, there will be one house a_1 = 1 on
the left side of the street, the resident of which would like to live on the
right side of the street. Then 0 out of 1 residents on the even side will be
satisfied with the choice, which means that the road cannot be laid after
house 1 .

If we lay the road after the second house, 1 out of 2 residents on the left
side (with preferences a_1 = 1 , a_2 = 0 ) and 1 out of 1 resident on the
right side (with preference a_3 = 1 ) will be satisfied with the choice. More
than half of the residents on each side are satisfied with the choice, which
means that the road can be laid after house 2 . We can show that this is the
optimal answer.","import math
from decimal import Decimal
 
t = int(input()) 
while t:
    n=int(input())
    input_string = input()
    arr = [int(ch) for ch in input_string]
    z = arr.count(0)
    o = arr.count(1)
    z_r = z
    o_r = o
    z_l=0
    o_l=0
    dist,ans,pos=abs(n/2),0,0
    if o_r>=(z_r+o_r)/2:
        b_d=dist
    else:
        b_d=30001
    for i in arr:
        pos+=1
        if i==0:
            z_l+=1
            z_r-=1
        else:
            o_l+=1
            o_r-=1
        if o_r>=((z_r+o_r)/2) and z_l>=((z_l+o_l)/2) and b_d > abs(n/2-pos):
            ans=pos
            b_d = abs(n/2-pos)
    print(ans)
    t -= 1",1,False,False,False,True,True,True,False,True,False,False,False,True,True,True,1.0,1.0,1.0
1945_C,1945_C_aditya.ad.agrawal_50.00%,codeforces2024,human,qwen2p5-72b-instruct,"In the village of Letovo, there are n houses. The villagers decided to build a
big road that will divide the village into left and right sides. Each resident
wants to live on either the right or the left side of the street, which is
described as a sequence a_1, a_2, \dots, a_n , where a_j = 0 if the resident
of the j -th house wants to live on the left side of the street; otherwise,
a_j = 1 .

The road will pass between two houses. The houses to the left of it will be
declared the left-side, and the houses to the right will be declared the
right-side. More formally, let the road pass between houses i and i+1 . Then
the houses at positions between 1 and i will be on the left side of the
street, and at positions between i+1 and n will be on the right side. The road
also may pass before the first and after the last house; in this case, the
entire village is declared to be either the right or left side, respectively.

To make the design fair, it was decided to lay the road so that at least half
of the residents on each side of the village are satisfied with the choice.
That is, among x residents on one side, at least \lceil\frac{x}{2}\rceil
should want to live on that side, where \lceil x \rceil denotes rounding up a
real number x .

![](https://espresso.codeforces.com/75baa17903d65a630fb0d3334683e857d5fdc345.png)
To the left of the road, there will be i houses, among the corresponding a_j
there must be at least \lceil\frac{i}{2}\rceil zeros. To the right of the
road, there will be n-i houses, among the corresponding a_j there must be at
least \lceil\frac{n-i}{2}\rceil ones.

Determine after which house i the road should be laid in order to satisfy the
described condition and be as close to the middle of the village as possible.
Formally, among all suitable positions i , minimize \left|\frac{n}{2} -
i\right| .

If there are multiple suitable positions i with the minimum \left|\frac{n}{2}
- i\right| , output the smaller one.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 2\cdot 10^4 ). The description of the test cases
follows.

The first line of each test case contains a single integer n (3 \le n \le
3\cdot 10^5 ). The next line of each test case contains a string a of length n
, consisting only of 0 and 1 .

It is guaranteed that the sum of n over all test cases does not exceed 3\cdot
10^5 .

Output

For each test case, output a single number i — the position of the house after
which the road should be laid (if it should be laid before the first house,
output 0 ). We can show that the answer always exists.

Example

Input

    7
    
    3
    
    101
    
    6
    
    010111
    
    6
    
    011001
    
    3
    
    000
    
    3
    
    110
    
    3
    
    001
    
    4
    
    1100

Output

    2
    3
    2
    3
    0
    1
    0
    
Note

Let's consider the first example of input data.

If we lay the road after the first house, there will be one house a_1 = 1 on
the left side of the street, the resident of which would like to live on the
right side of the street. Then 0 out of 1 residents on the even side will be
satisfied with the choice, which means that the road cannot be laid after
house 1 .

If we lay the road after the second house, 1 out of 2 residents on the left
side (with preferences a_1 = 1 , a_2 = 0 ) and 1 out of 1 resident on the
right side (with preference a_3 = 1 ) will be satisfied with the choice. More
than half of the residents on each side are satisfied with the choice, which
means that the road can be laid after house 2 . We can show that this is the
optimal answer.","import math
from decimal import Decimal
 
t = int(input()) 
while t:
    n=int(input())
    input_string = input()
    arr = [int(ch) for ch in input_string]
    z = arr.count(0)
    o = arr.count(1)
    z_r = z
    o_r = o
    z_l=0
    o_l=0
    dist,ans,pos=abs(n/2),0,0
    if o_r>=(z_r+o_r)/2:
        b_d=dist
    else:
        b_d=30001
    for i in arr:
        pos+=1
        if i==0:
            z_l+=1
            z_r-=1
        else:
            o_l+=1
            o_r-=1
        if o_r>=((z_r+o_r)/2) and z_l>=((z_l+o_l)/2) and b_d > abs(n/2-pos):
            ans=pos
            b_d = abs(n/2-pos)
    print(ans)
    t -= 1",1,False,False,False,True,True,False,True,True,False,False,False,False,True,True,1.0,1.0,1.0
1932_B,1932_B_fpeng2002_100%,codeforces2024,human,qwen2p5-72b-instruct,"The Chaya tribe believes that there are n signs of the apocalypse. Over time,
it has been found out that the i -th sign occurs every a_i years (in years a_i
, 2 \cdot a_i , 3 \cdot a_i , \dots ).

According to the legends, for the apocalypse to happen, the signs must occur
sequentially. That is, first they wait for the first sign to occur, then
strictly after it, the second sign will occur, and so on. That is, if the i
-th sign occurred in the year x , the tribe starts waiting for the occurrence
of the (i+1) -th sign, starting from the year x+1 .

In which year will the n -th sign occur and the apocalypse will happen?

Input

The first line of the input contains a single integer t (1 \le t \le 1000 ) —
the number of test cases. Then follow the descriptions of the test cases.

The first line of each test case contains a single integer n (1 \le n \le 100
) — the number of signs.

The second line of each test case contains n integers a_1, a_2, a_3, \dots,
a_n (1 \le a_i \le 10^6 ) — the periodicities of the signs.

Output

For each test case, output a single integer — the year in which all n signs
will occur.

Example

Input

    4
    
    6
    
    3 2 4 5 9 18
    
    5
    
    1 2 3 4 5
    
    5
    
    1 1 1 1 1
    
    6
    
    50 30 711 200 503 1006

Output

    36
    5
    5
    2012
    
Note

In the first set of input data of the example:

  * The tribe will wait for the first sign in the 3 -rd year; 
  * the tribe will wait for the second sign in the 4 -th year (since year 2 have already passed); 
  * the tribe will wait for the third sign in the 8 -th year (since the second sign has already occurred in the 4 -th year); 
  * the tribe will wait for the fourth sign in the 10 -th year (since year 5 have already passed); 
  * the tribe will wait for the fifth sign in the 18 -th year (since year 9 have already passed); 
  * the tribe will wait for the sixth sign in the 36 -th year (since the fifth sign has already occurred in the 18 -th year).","num_tests = int(input())
 
while num_tests > 0:
    num_tests -= 1
 
    n = int(input())
    nums = [int(x) for x in input().split("" "")] 
 
    start_year = 0
    for x in range(0, len(nums)):
        start_year = ((start_year)//nums[x] + 1)*(nums[x])
    print(start_year)",1,True,False,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1932_B,1932_B_fpeng2002_100%,codeforces2024,human,qwen2p5-72b-instruct,"The Chaya tribe believes that there are n signs of the apocalypse. Over time,
it has been found out that the i -th sign occurs every a_i years (in years a_i
, 2 \cdot a_i , 3 \cdot a_i , \dots ).

According to the legends, for the apocalypse to happen, the signs must occur
sequentially. That is, first they wait for the first sign to occur, then
strictly after it, the second sign will occur, and so on. That is, if the i
-th sign occurred in the year x , the tribe starts waiting for the occurrence
of the (i+1) -th sign, starting from the year x+1 .

In which year will the n -th sign occur and the apocalypse will happen?

Input

The first line of the input contains a single integer t (1 \le t \le 1000 ) —
the number of test cases. Then follow the descriptions of the test cases.

The first line of each test case contains a single integer n (1 \le n \le 100
) — the number of signs.

The second line of each test case contains n integers a_1, a_2, a_3, \dots,
a_n (1 \le a_i \le 10^6 ) — the periodicities of the signs.

Output

For each test case, output a single integer — the year in which all n signs
will occur.

Example

Input

    4
    
    6
    
    3 2 4 5 9 18
    
    5
    
    1 2 3 4 5
    
    5
    
    1 1 1 1 1
    
    6
    
    50 30 711 200 503 1006

Output

    36
    5
    5
    2012
    
Note

In the first set of input data of the example:

  * The tribe will wait for the first sign in the 3 -rd year; 
  * the tribe will wait for the second sign in the 4 -th year (since year 2 have already passed); 
  * the tribe will wait for the third sign in the 8 -th year (since the second sign has already occurred in the 4 -th year); 
  * the tribe will wait for the fourth sign in the 10 -th year (since year 5 have already passed); 
  * the tribe will wait for the fifth sign in the 18 -th year (since year 9 have already passed); 
  * the tribe will wait for the sixth sign in the 36 -th year (since the fifth sign has already occurred in the 18 -th year).","num_tests = int(input())
 
while num_tests > 0:
    num_tests -= 1
 
    n = int(input())
    nums = [int(x) for x in input().split("" "")] 
 
    start_year = 0
    for x in range(0, len(nums)):
        start_year = ((start_year)//nums[x] + 1)*(nums[x])
    print(start_year)",1,True,False,False,True,True,True,True,True,True,False,False,True,True,True,1.0,1.0,1.0
1932_B,1932_B_fpeng2002_100%,codeforces2024,human,qwen2p5-72b-instruct,"The Chaya tribe believes that there are n signs of the apocalypse. Over time,
it has been found out that the i -th sign occurs every a_i years (in years a_i
, 2 \cdot a_i , 3 \cdot a_i , \dots ).

According to the legends, for the apocalypse to happen, the signs must occur
sequentially. That is, first they wait for the first sign to occur, then
strictly after it, the second sign will occur, and so on. That is, if the i
-th sign occurred in the year x , the tribe starts waiting for the occurrence
of the (i+1) -th sign, starting from the year x+1 .

In which year will the n -th sign occur and the apocalypse will happen?

Input

The first line of the input contains a single integer t (1 \le t \le 1000 ) —
the number of test cases. Then follow the descriptions of the test cases.

The first line of each test case contains a single integer n (1 \le n \le 100
) — the number of signs.

The second line of each test case contains n integers a_1, a_2, a_3, \dots,
a_n (1 \le a_i \le 10^6 ) — the periodicities of the signs.

Output

For each test case, output a single integer — the year in which all n signs
will occur.

Example

Input

    4
    
    6
    
    3 2 4 5 9 18
    
    5
    
    1 2 3 4 5
    
    5
    
    1 1 1 1 1
    
    6
    
    50 30 711 200 503 1006

Output

    36
    5
    5
    2012
    
Note

In the first set of input data of the example:

  * The tribe will wait for the first sign in the 3 -rd year; 
  * the tribe will wait for the second sign in the 4 -th year (since year 2 have already passed); 
  * the tribe will wait for the third sign in the 8 -th year (since the second sign has already occurred in the 4 -th year); 
  * the tribe will wait for the fourth sign in the 10 -th year (since year 5 have already passed); 
  * the tribe will wait for the fifth sign in the 18 -th year (since year 9 have already passed); 
  * the tribe will wait for the sixth sign in the 36 -th year (since the fifth sign has already occurred in the 18 -th year).","num_tests = int(input())
 
while num_tests > 0:
    num_tests -= 1
 
    n = int(input())
    nums = [int(x) for x in input().split("" "")] 
 
    start_year = 0
    for x in range(0, len(nums)):
        start_year = ((start_year)//nums[x] + 1)*(nums[x])
    print(start_year)",1,True,False,False,True,True,True,True,True,False,False,False,True,True,True,1.0,1.0,1.0
1974_A,1974_A_Ridham__100%,codeforces2024,human,qwen2p5-72b-instruct,"Little Rosie has a phone with a desktop (or launcher, as it is also called).
The desktop can consist of several screens. Each screen is represented as a
grid of size 5 \times 3 , i.e., five rows and three columns.

There are x applications with an icon size of 1 \times 1 cells; such an icon
occupies only one cell of the screen. There are also y applications with an
icon size of 2 \times 2 cells; such an icon occupies a square of 4 cells on
the screen. Each cell of each screen can be occupied by no more than one icon.

Rosie wants to place the application icons on the minimum number of screens.
Help her find the minimum number of screens needed.

Input

The first line of the input contains t (1 \leq t \leq 10^4 ) — the number of
test cases.

The first and only line of each test case contains two integers x and y (0
\leq x, y \leq 99 ) — the number of applications with a 1 \times 1 icon and
the number of applications with a 2 \times 2 icon, respectively.

Output

For each test case, output the minimal number of required screens on a
separate line.

Example

Input

    11
    
    1 1
    
    7 2
    
    12 4
    
    0 3
    
    1 0
    
    8 1
    
    0 0
    
    2 0
    
    15 0
    
    8 2
    
    0 9

Output

    1
    1
    2
    2
    1
    1
    0
    1
    1
    2
    5
    
Note

The solution for the first test case can look as follows:

![](https://espresso.codeforces.com/f9882979f0d9b5c31c5260fd626217227c2f05de.png)
Blue squares represent empty spaces for icons, green squares represent 1
\times 1 icons, red squares represent 2 \times 2 icons

The solution for the third test case can look as follows:

![](https://espresso.codeforces.com/0e737a290e056a29f38918bf06c13be790307a8d.png)","n = int(input())
 
result = []
 
for _ in range(n):
    
    x , y = list(map(int , input().split()))
    
    space_x = x*1
    space_y = y*4
    total_space = space_y + space_x
    
    if (y % 2 == 0):
        screen_require_for_y = y // 2
    else:
        screen_require_for_y = (y // 2) + 1
        
    # print(screen_require_for_y)
    
    
    remaining_cells =( 15*screen_require_for_y) - space_y
    
    if (space_x <= remaining_cells):
        result.append(screen_require_for_y)
    else :
        extra_space = space_x - remaining_cells
        # if extra_space <= 15 :
        #     extra_screen = 1
        if extra_space % 15 == 0:
            extra_screen = extra_space // 15
        else :
           extra_screen = ( extra_space // 15 ) + 1
           
        result.append(extra_screen + screen_require_for_y)
    
 
print(""\n"".join(map(str,result)))",1,True,False,False,True,False,True,True,True,True,False,True,True,True,True,0.6193543023221867,0.1089695043870584,0.5833333333333334
1979_F,1979_F_Cryptic10_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"This is an interactive problem.

Kostyanych has chosen a complete undirected graph^{\dagger} with n vertices,
and then removed exactly (n - 2) edges from it. You can ask queries of the
following type:

  * ""? d "" — Kostyanych tells you the number of vertex v with a degree at least d . Among all possible such vertices, he selects the vertex with the minimum degree, and if there are several such vertices, he selects the one with the minimum number. He also tells you the number of another vertex in the graph, with which v is not connected by an edge (if none is found, then 0 is reported). Among all possible such vertices, he selects the one with the minimum number. Then he removes the vertex v and all edges coming out of it. If the required vertex v is not found, then ""0\ 0 "" is reported. 

Find a Hamiltonian path^{\ddagger} in the original graph in at most n queries.
It can be proven that under these constraints, a Hamiltonian path always
exists.

^{\dagger} A complete undirected graph is a graph in which there is exactly
one undirected edge between any pair of distinct vertices. Thus, a complete
undirected graph with n vertices contains \frac{n(n-1)}{2} edges.

^{\ddagger} A Hamiltonian path in a graph is a path that passes through each
vertex exactly once.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 1000 ) — the number of test cases. The description of
the test cases follows.

The only line of each test case contains a single integer n (2 \le n \le 10^5
) — the number of vertices in the graph.

It is guaranteed that the sum of n over all test cases does not exceed 10^5 .

Interaction

Interaction for each test case begins with reading the integer n .

Then you can make no more than n queries.

To make a query, output a line in the format ""? d "" (without quotes) (0 \le d
\le n - 1 ). After each query, read two integers — the answer to your query.

When you are ready to report the answer, output a line in the format ""! v_1\
v_2 \ldots v_n "" (without quotes) — the vertices in the order of their
occurrence in the Hamiltonian path. Outputting the answer does not count as
one of the n queries. After solving one test case, the program should
immediately move on to the next one. After solving all test cases, the program
should be terminated immediately.

If your program makes more than n queries for one test case or makes an
incorrect query, then the response to the query will be -1 , and after
receiving such a response, your program should immediately terminate to
receive the verdict Wrong answer. Otherwise, it may receive any other verdict.

After outputting a query, do not forget to output an end of line and flush the
output buffer. Otherwise, you will receive the verdict Idleness limit
exceeded. To do this, use:

  * fflush(stdout) or cout.flush() in C++; 
  * System.out.flush() in Java; 
  * flush(output) in Pascal; 
  * stdout.flush() in Python; 
  * see documentation for other languages. 

The interactor is non-adaptive. The graph does not change during the
interaction.

Hacks

To hack, use the following format:

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer n (2 \le n \le 10^5
) — the number of vertices in the graph.

Each of the following (n - 2) lines should contains two integers u and v (1
\le u, v \le n , u \ne v ) — ends of the edge that was removed from the graph.
Each edge must not occur more than once.

The sum of n over all test cases should not exceed 10^5 .

Example

Input

    3
    4
    
    0 0
    
    1 4
    
    2 3
    
    4
    
    1 0
    
    4 2
    
    2
    
    1 0
    
Output

    ? 3
    
    ? 2
    
    ? 1
    
    ! 4 3 1 2
    
    ? 3
    
    ? 0
    
    ! 4 1 2 3
    
    ? 0
    
    ! 2 1

Note

In the first test case, the original graph looks as follows:

![](https://espresso.codeforces.com/75d8c5328ccca8f82b69ba8300140bed4d40ce80.png)

Consider the queries:

  * There are no vertices with a degree of at least 3 in the graph, so ""0\ 0 "" is reported.
  * There are four vertices with a degree of at least 2 , and all of them have a degree of exactly 2 : 1 , 2 , 3 , 4 . Vertex 1 is reported, because it has the minimum number, and vertex 4 is reported, because it is the only one not connected to vertex 1 . After this, vertex 1 is removed from the graph.
  * There are three vertices with a degree of at least 1 , among them vertices 2 and 3 have a minimum degree of 1 (vertex 4 has a degree of 2 ). Vertex 2 is reported, because it has the minimum number, and vertex 3 is reported, because it is the only one not connected to vertex 2 . After this, vertex 2 is removed from the graph.

The path 4 - 3 - 1 - 2 is a Hamiltonian path.

In the second test case, the original graph looks as follows:

![](https://espresso.codeforces.com/44d26c229eaff752c0a00c7160792daef41c7502.png)

Consider the queries:

  * Vertex 1 has a degree of at least 3 , but it is connected to all vertices, so ""1\ 0 "" is reported. After this, vertex 1 is removed from the graph.
  * The remaining vertices 2 , 3 , and 4 have a degree of at least 0 , but among them vertex 4 has the minimum degree of 0 (vertices 2 and 3 have a degree of 1 ). Vertex 4 is not connected to both vertices 2 and 3 , so vertex 2 is reported (as it has the minimum number). After this, vertex 4 is removed from the graph.

The path 4 - 1 - 2 - 3 is a Hamiltonian path.

In the third test case, the graph consists of 2 vertices connected by an edge.","import sys
 
def query(d):
    print(f""? {d}"")
    sys.stdout.flush()
    v, u = map(int, input().split())
    return v, u
 
def solve(n):
    path = []
    remaining_vertices = set(range(1, n + 1))
    
    while remaining_vertices:
        for d in range(n - 1, -1, -1):
            v, u = query(d)
            if v == 0:
                continue
            if v in remaining_vertices:
                path.append(v)
                remaining_vertices.remove(v)
                break
    
    print(f""! {' '.join(map(str, path))}"")
    sys.stdout.flush()
 
t = int(input())
for _ in range(t):
    n = int(input())
    solve(n)",1,False,False,False,True,False,True,True,True,False,False,False,True,True,True,0.7415091230330192,0.27758503249367616,0.6666666666666666
1979_F,1979_F_Cryptic10_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"This is an interactive problem.

Kostyanych has chosen a complete undirected graph^{\dagger} with n vertices,
and then removed exactly (n - 2) edges from it. You can ask queries of the
following type:

  * ""? d "" — Kostyanych tells you the number of vertex v with a degree at least d . Among all possible such vertices, he selects the vertex with the minimum degree, and if there are several such vertices, he selects the one with the minimum number. He also tells you the number of another vertex in the graph, with which v is not connected by an edge (if none is found, then 0 is reported). Among all possible such vertices, he selects the one with the minimum number. Then he removes the vertex v and all edges coming out of it. If the required vertex v is not found, then ""0\ 0 "" is reported. 

Find a Hamiltonian path^{\ddagger} in the original graph in at most n queries.
It can be proven that under these constraints, a Hamiltonian path always
exists.

^{\dagger} A complete undirected graph is a graph in which there is exactly
one undirected edge between any pair of distinct vertices. Thus, a complete
undirected graph with n vertices contains \frac{n(n-1)}{2} edges.

^{\ddagger} A Hamiltonian path in a graph is a path that passes through each
vertex exactly once.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 1000 ) — the number of test cases. The description of
the test cases follows.

The only line of each test case contains a single integer n (2 \le n \le 10^5
) — the number of vertices in the graph.

It is guaranteed that the sum of n over all test cases does not exceed 10^5 .

Interaction

Interaction for each test case begins with reading the integer n .

Then you can make no more than n queries.

To make a query, output a line in the format ""? d "" (without quotes) (0 \le d
\le n - 1 ). After each query, read two integers — the answer to your query.

When you are ready to report the answer, output a line in the format ""! v_1\
v_2 \ldots v_n "" (without quotes) — the vertices in the order of their
occurrence in the Hamiltonian path. Outputting the answer does not count as
one of the n queries. After solving one test case, the program should
immediately move on to the next one. After solving all test cases, the program
should be terminated immediately.

If your program makes more than n queries for one test case or makes an
incorrect query, then the response to the query will be -1 , and after
receiving such a response, your program should immediately terminate to
receive the verdict Wrong answer. Otherwise, it may receive any other verdict.

After outputting a query, do not forget to output an end of line and flush the
output buffer. Otherwise, you will receive the verdict Idleness limit
exceeded. To do this, use:

  * fflush(stdout) or cout.flush() in C++; 
  * System.out.flush() in Java; 
  * flush(output) in Pascal; 
  * stdout.flush() in Python; 
  * see documentation for other languages. 

The interactor is non-adaptive. The graph does not change during the
interaction.

Hacks

To hack, use the following format:

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer n (2 \le n \le 10^5
) — the number of vertices in the graph.

Each of the following (n - 2) lines should contains two integers u and v (1
\le u, v \le n , u \ne v ) — ends of the edge that was removed from the graph.
Each edge must not occur more than once.

The sum of n over all test cases should not exceed 10^5 .

Example

Input

    3
    4
    
    0 0
    
    1 4
    
    2 3
    
    4
    
    1 0
    
    4 2
    
    2
    
    1 0
    
Output

    ? 3
    
    ? 2
    
    ? 1
    
    ! 4 3 1 2
    
    ? 3
    
    ? 0
    
    ! 4 1 2 3
    
    ? 0
    
    ! 2 1

Note

In the first test case, the original graph looks as follows:

![](https://espresso.codeforces.com/75d8c5328ccca8f82b69ba8300140bed4d40ce80.png)

Consider the queries:

  * There are no vertices with a degree of at least 3 in the graph, so ""0\ 0 "" is reported.
  * There are four vertices with a degree of at least 2 , and all of them have a degree of exactly 2 : 1 , 2 , 3 , 4 . Vertex 1 is reported, because it has the minimum number, and vertex 4 is reported, because it is the only one not connected to vertex 1 . After this, vertex 1 is removed from the graph.
  * There are three vertices with a degree of at least 1 , among them vertices 2 and 3 have a minimum degree of 1 (vertex 4 has a degree of 2 ). Vertex 2 is reported, because it has the minimum number, and vertex 3 is reported, because it is the only one not connected to vertex 2 . After this, vertex 2 is removed from the graph.

The path 4 - 3 - 1 - 2 is a Hamiltonian path.

In the second test case, the original graph looks as follows:

![](https://espresso.codeforces.com/44d26c229eaff752c0a00c7160792daef41c7502.png)

Consider the queries:

  * Vertex 1 has a degree of at least 3 , but it is connected to all vertices, so ""1\ 0 "" is reported. After this, vertex 1 is removed from the graph.
  * The remaining vertices 2 , 3 , and 4 have a degree of at least 0 , but among them vertex 4 has the minimum degree of 0 (vertices 2 and 3 have a degree of 1 ). Vertex 4 is not connected to both vertices 2 and 3 , so vertex 2 is reported (as it has the minimum number). After this, vertex 4 is removed from the graph.

The path 4 - 1 - 2 - 3 is a Hamiltonian path.

In the third test case, the graph consists of 2 vertices connected by an edge.","import sys
 
def query(d):
    print(f""? {d}"")
    sys.stdout.flush()
    v, u = map(int, input().split())
    return v, u
 
def solve(n):
    path = []
    remaining_vertices = set(range(1, n + 1))
    
    while remaining_vertices:
        for d in range(n - 1, -1, -1):
            v, u = query(d)
            if v == 0:
                continue
            if v in remaining_vertices:
                path.append(v)
                remaining_vertices.remove(v)
                break
    
    print(f""! {' '.join(map(str, path))}"")
    sys.stdout.flush()
 
t = int(input())
for _ in range(t):
    n = int(input())
    solve(n)",1,False,False,False,True,False,True,True,True,False,False,True,True,False,False,0.7415091230330192,0.27758503249367616,0.6666666666666666
1979_F,1979_F_Cryptic10_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"This is an interactive problem.

Kostyanych has chosen a complete undirected graph^{\dagger} with n vertices,
and then removed exactly (n - 2) edges from it. You can ask queries of the
following type:

  * ""? d "" — Kostyanych tells you the number of vertex v with a degree at least d . Among all possible such vertices, he selects the vertex with the minimum degree, and if there are several such vertices, he selects the one with the minimum number. He also tells you the number of another vertex in the graph, with which v is not connected by an edge (if none is found, then 0 is reported). Among all possible such vertices, he selects the one with the minimum number. Then he removes the vertex v and all edges coming out of it. If the required vertex v is not found, then ""0\ 0 "" is reported. 

Find a Hamiltonian path^{\ddagger} in the original graph in at most n queries.
It can be proven that under these constraints, a Hamiltonian path always
exists.

^{\dagger} A complete undirected graph is a graph in which there is exactly
one undirected edge between any pair of distinct vertices. Thus, a complete
undirected graph with n vertices contains \frac{n(n-1)}{2} edges.

^{\ddagger} A Hamiltonian path in a graph is a path that passes through each
vertex exactly once.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 1000 ) — the number of test cases. The description of
the test cases follows.

The only line of each test case contains a single integer n (2 \le n \le 10^5
) — the number of vertices in the graph.

It is guaranteed that the sum of n over all test cases does not exceed 10^5 .

Interaction

Interaction for each test case begins with reading the integer n .

Then you can make no more than n queries.

To make a query, output a line in the format ""? d "" (without quotes) (0 \le d
\le n - 1 ). After each query, read two integers — the answer to your query.

When you are ready to report the answer, output a line in the format ""! v_1\
v_2 \ldots v_n "" (without quotes) — the vertices in the order of their
occurrence in the Hamiltonian path. Outputting the answer does not count as
one of the n queries. After solving one test case, the program should
immediately move on to the next one. After solving all test cases, the program
should be terminated immediately.

If your program makes more than n queries for one test case or makes an
incorrect query, then the response to the query will be -1 , and after
receiving such a response, your program should immediately terminate to
receive the verdict Wrong answer. Otherwise, it may receive any other verdict.

After outputting a query, do not forget to output an end of line and flush the
output buffer. Otherwise, you will receive the verdict Idleness limit
exceeded. To do this, use:

  * fflush(stdout) or cout.flush() in C++; 
  * System.out.flush() in Java; 
  * flush(output) in Pascal; 
  * stdout.flush() in Python; 
  * see documentation for other languages. 

The interactor is non-adaptive. The graph does not change during the
interaction.

Hacks

To hack, use the following format:

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer n (2 \le n \le 10^5
) — the number of vertices in the graph.

Each of the following (n - 2) lines should contains two integers u and v (1
\le u, v \le n , u \ne v ) — ends of the edge that was removed from the graph.
Each edge must not occur more than once.

The sum of n over all test cases should not exceed 10^5 .

Example

Input

    3
    4
    
    0 0
    
    1 4
    
    2 3
    
    4
    
    1 0
    
    4 2
    
    2
    
    1 0
    
Output

    ? 3
    
    ? 2
    
    ? 1
    
    ! 4 3 1 2
    
    ? 3
    
    ? 0
    
    ! 4 1 2 3
    
    ? 0
    
    ! 2 1

Note

In the first test case, the original graph looks as follows:

![](https://espresso.codeforces.com/75d8c5328ccca8f82b69ba8300140bed4d40ce80.png)

Consider the queries:

  * There are no vertices with a degree of at least 3 in the graph, so ""0\ 0 "" is reported.
  * There are four vertices with a degree of at least 2 , and all of them have a degree of exactly 2 : 1 , 2 , 3 , 4 . Vertex 1 is reported, because it has the minimum number, and vertex 4 is reported, because it is the only one not connected to vertex 1 . After this, vertex 1 is removed from the graph.
  * There are three vertices with a degree of at least 1 , among them vertices 2 and 3 have a minimum degree of 1 (vertex 4 has a degree of 2 ). Vertex 2 is reported, because it has the minimum number, and vertex 3 is reported, because it is the only one not connected to vertex 2 . After this, vertex 2 is removed from the graph.

The path 4 - 3 - 1 - 2 is a Hamiltonian path.

In the second test case, the original graph looks as follows:

![](https://espresso.codeforces.com/44d26c229eaff752c0a00c7160792daef41c7502.png)

Consider the queries:

  * Vertex 1 has a degree of at least 3 , but it is connected to all vertices, so ""1\ 0 "" is reported. After this, vertex 1 is removed from the graph.
  * The remaining vertices 2 , 3 , and 4 have a degree of at least 0 , but among them vertex 4 has the minimum degree of 0 (vertices 2 and 3 have a degree of 1 ). Vertex 4 is not connected to both vertices 2 and 3 , so vertex 2 is reported (as it has the minimum number). After this, vertex 4 is removed from the graph.

The path 4 - 1 - 2 - 3 is a Hamiltonian path.

In the third test case, the graph consists of 2 vertices connected by an edge.","import sys
 
def query(d):
    print(f""? {d}"")
    sys.stdout.flush()
    v, u = map(int, input().split())
    return v, u
 
def solve(n):
    path = []
    remaining_vertices = set(range(1, n + 1))
    
    while remaining_vertices:
        for d in range(n - 1, -1, -1):
            v, u = query(d)
            if v == 0:
                continue
            if v in remaining_vertices:
                path.append(v)
                remaining_vertices.remove(v)
                break
    
    print(f""! {' '.join(map(str, path))}"")
    sys.stdout.flush()
 
t = int(input())
for _ in range(t):
    n = int(input())
    solve(n)",1,False,False,False,True,False,True,True,True,False,False,False,True,True,True,0.7415091230330192,0.27758503249367616,0.6666666666666666
1945_E,1945_E_hjacobs3_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3","# AUTHOR @perf3ct aka @hjacobs3
# ez ez ez
 
 
def solve(array, find):
    # print('target', find)
    n = len(array)
    # new_array = [i for i in range(1, n + 1)]
    # print(array)
    l, r = 0, n - 1
    while l <= r:
        # pr('dog')
        mid = (l + r) // 2
        if array[mid] >= find:
            r = mid - 1
        else:
            l = mid + 1
    if l != array.index(find):
        print(1)
        return [str(l+1), str(array.index(find)+1)]
    else:
        print(0)
 
 
# Read the number of test cases
t = int(input())
 
# Process each test case
while t > 0:
    # Read input for the test case, for example, an integer
    n, x = map(int, input().split("" ""))
 
    array = [int(v) for v in input().split("" "")]
    
    # Process the test case
    
    # Example: Print the read integer
    res = solve(array, x)
    if res:
        print("" "".join(res))
    
    # Move to the next test case
    t -= 1",1,False,False,False,False,False,False,True,False,False,False,False,False,False,False,1.0,1.0,1.0
1945_E,1945_E_hjacobs3_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3","# AUTHOR @perf3ct aka @hjacobs3
# ez ez ez
 
 
def solve(array, find):
    # print('target', find)
    n = len(array)
    # new_array = [i for i in range(1, n + 1)]
    # print(array)
    l, r = 0, n - 1
    while l <= r:
        # pr('dog')
        mid = (l + r) // 2
        if array[mid] >= find:
            r = mid - 1
        else:
            l = mid + 1
    if l != array.index(find):
        print(1)
        return [str(l+1), str(array.index(find)+1)]
    else:
        print(0)
 
 
# Read the number of test cases
t = int(input())
 
# Process each test case
while t > 0:
    # Read input for the test case, for example, an integer
    n, x = map(int, input().split("" ""))
 
    array = [int(v) for v in input().split("" "")]
    
    # Process the test case
    
    # Example: Print the read integer
    res = solve(array, x)
    if res:
        print("" "".join(res))
    
    # Move to the next test case
    t -= 1",1,False,False,False,True,False,False,False,False,False,False,False,False,False,True,1.0,1.0,1.0
1945_E,1945_E_hjacobs3_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3","# AUTHOR @perf3ct aka @hjacobs3
# ez ez ez
 
 
def solve(array, find):
    # print('target', find)
    n = len(array)
    # new_array = [i for i in range(1, n + 1)]
    # print(array)
    l, r = 0, n - 1
    while l <= r:
        # pr('dog')
        mid = (l + r) // 2
        if array[mid] >= find:
            r = mid - 1
        else:
            l = mid + 1
    if l != array.index(find):
        print(1)
        return [str(l+1), str(array.index(find)+1)]
    else:
        print(0)
 
 
# Read the number of test cases
t = int(input())
 
# Process each test case
while t > 0:
    # Read input for the test case, for example, an integer
    n, x = map(int, input().split("" ""))
 
    array = [int(v) for v in input().split("" "")]
    
    # Process the test case
    
    # Example: Print the read integer
    res = solve(array, x)
    if res:
        print("" "".join(res))
    
    # Move to the next test case
    t -= 1",1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1927_D,1927_D_Merazul_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array a of n integers, and q queries.

Each query is represented by two integers l and r (1 \le l \le r \le n ). Your
task is to find, for each query, two indices i and j (or determine that they
do not exist) such that:

  * l \le i \le r ; 
  * l \le j \le r ; 
  * a_i \ne a_j . 

In other words, for each query, you need to find a pair of different elements
among a_l, a_{l+1}, \dots, a_r , or report that such a pair does not exist.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The descriptions of the test cases follow.

The first line of each test case contains a single integer n (2 \le n \le 2
\cdot 10^5 ) — the length of the array a .

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^6 ) — the elements of the array a .

The third line of each test case contains a single integer q (1 \le q \le 2
\cdot 10^5 ) — the number of queries.

The next q lines contain two integers each, l and r (1 \le l < r \le n ) — the
boundaries of the query.

It is guaranteed that the sum of the values of n across all test cases does
not exceed 2 \cdot 10^5 . Similarly, it is guaranteed that the sum of the
values of q across all test cases does not exceed 2 \cdot 10^5 .

Output

For each query, output two integers separated by space: i and j (l \le i, j
\le r ), for which a_i \ne a_j . If such a pair does not exist, output i=-1
and j=-1 .

You may separate the outputs for the test cases with empty lines. This is not
a mandatory requirement.

Example

Input

    5
    
    5
    
    1 1 2 1 1
    
    3
    
    1 5
    
    1 2
    
    1 3
    
    6
    
    30 20 20 10 10 20
    
    5
    
    1 2
    
    2 3
    
    2 4
    
    2 6
    
    3 5
    
    4
    
    5 2 3 4
    
    4
    
    1 2
    
    1 4
    
    2 3
    
    2 4
    
    5
    
    1 4 3 2 4
    
    5
    
    1 5
    
    2 4
    
    3 4
    
    3 5
    
    4 5
    
    5
    
    2 3 1 4 2
    
    7
    
    1 2
    
    1 4
    
    1 5
    
    2 4
    
    2 5
    
    3 5
    
    4 5

Output

    2 3
    -1 -1
    1 3
    
    2 1
    -1 -1
    4 2
    4 6
    5 3
    
    1 2
    1 2
    2 3
    3 2
    
    1 3
    2 4
    3 4
    5 3
    5 4
    
    1 2
    4 2
    1 3
    2 3
    3 2
    5 4
    5 4","R=lambda:map(int,input().split())
t,=R()
while t:
 t-=1;*_,k=R();a={*R()};b={*R()};f=1;m=n=k//2
 for i in range(1,k+1):u=i in a;v=i in b;f&=u|v;m-=u&~v;n-=~u&v
 print('YNEOS'[f^1or m|n<0::2])",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1927_D,1927_D_Merazul_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array a of n integers, and q queries.

Each query is represented by two integers l and r (1 \le l \le r \le n ). Your
task is to find, for each query, two indices i and j (or determine that they
do not exist) such that:

  * l \le i \le r ; 
  * l \le j \le r ; 
  * a_i \ne a_j . 

In other words, for each query, you need to find a pair of different elements
among a_l, a_{l+1}, \dots, a_r , or report that such a pair does not exist.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The descriptions of the test cases follow.

The first line of each test case contains a single integer n (2 \le n \le 2
\cdot 10^5 ) — the length of the array a .

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^6 ) — the elements of the array a .

The third line of each test case contains a single integer q (1 \le q \le 2
\cdot 10^5 ) — the number of queries.

The next q lines contain two integers each, l and r (1 \le l < r \le n ) — the
boundaries of the query.

It is guaranteed that the sum of the values of n across all test cases does
not exceed 2 \cdot 10^5 . Similarly, it is guaranteed that the sum of the
values of q across all test cases does not exceed 2 \cdot 10^5 .

Output

For each query, output two integers separated by space: i and j (l \le i, j
\le r ), for which a_i \ne a_j . If such a pair does not exist, output i=-1
and j=-1 .

You may separate the outputs for the test cases with empty lines. This is not
a mandatory requirement.

Example

Input

    5
    
    5
    
    1 1 2 1 1
    
    3
    
    1 5
    
    1 2
    
    1 3
    
    6
    
    30 20 20 10 10 20
    
    5
    
    1 2
    
    2 3
    
    2 4
    
    2 6
    
    3 5
    
    4
    
    5 2 3 4
    
    4
    
    1 2
    
    1 4
    
    2 3
    
    2 4
    
    5
    
    1 4 3 2 4
    
    5
    
    1 5
    
    2 4
    
    3 4
    
    3 5
    
    4 5
    
    5
    
    2 3 1 4 2
    
    7
    
    1 2
    
    1 4
    
    1 5
    
    2 4
    
    2 5
    
    3 5
    
    4 5

Output

    2 3
    -1 -1
    1 3
    
    2 1
    -1 -1
    4 2
    4 6
    5 3
    
    1 2
    1 2
    2 3
    3 2
    
    1 3
    2 4
    3 4
    5 3
    5 4
    
    1 2
    4 2
    1 3
    2 3
    3 2
    5 4
    5 4","R=lambda:map(int,input().split())
t,=R()
while t:
 t-=1;*_,k=R();a={*R()};b={*R()};f=1;m=n=k//2
 for i in range(1,k+1):u=i in a;v=i in b;f&=u|v;m-=u&~v;n-=~u&v
 print('YNEOS'[f^1or m|n<0::2])",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1927_D,1927_D_Merazul_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array a of n integers, and q queries.

Each query is represented by two integers l and r (1 \le l \le r \le n ). Your
task is to find, for each query, two indices i and j (or determine that they
do not exist) such that:

  * l \le i \le r ; 
  * l \le j \le r ; 
  * a_i \ne a_j . 

In other words, for each query, you need to find a pair of different elements
among a_l, a_{l+1}, \dots, a_r , or report that such a pair does not exist.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The descriptions of the test cases follow.

The first line of each test case contains a single integer n (2 \le n \le 2
\cdot 10^5 ) — the length of the array a .

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^6 ) — the elements of the array a .

The third line of each test case contains a single integer q (1 \le q \le 2
\cdot 10^5 ) — the number of queries.

The next q lines contain two integers each, l and r (1 \le l < r \le n ) — the
boundaries of the query.

It is guaranteed that the sum of the values of n across all test cases does
not exceed 2 \cdot 10^5 . Similarly, it is guaranteed that the sum of the
values of q across all test cases does not exceed 2 \cdot 10^5 .

Output

For each query, output two integers separated by space: i and j (l \le i, j
\le r ), for which a_i \ne a_j . If such a pair does not exist, output i=-1
and j=-1 .

You may separate the outputs for the test cases with empty lines. This is not
a mandatory requirement.

Example

Input

    5
    
    5
    
    1 1 2 1 1
    
    3
    
    1 5
    
    1 2
    
    1 3
    
    6
    
    30 20 20 10 10 20
    
    5
    
    1 2
    
    2 3
    
    2 4
    
    2 6
    
    3 5
    
    4
    
    5 2 3 4
    
    4
    
    1 2
    
    1 4
    
    2 3
    
    2 4
    
    5
    
    1 4 3 2 4
    
    5
    
    1 5
    
    2 4
    
    3 4
    
    3 5
    
    4 5
    
    5
    
    2 3 1 4 2
    
    7
    
    1 2
    
    1 4
    
    1 5
    
    2 4
    
    2 5
    
    3 5
    
    4 5

Output

    2 3
    -1 -1
    1 3
    
    2 1
    -1 -1
    4 2
    4 6
    5 3
    
    1 2
    1 2
    2 3
    3 2
    
    1 3
    2 4
    3 4
    5 3
    5 4
    
    1 2
    4 2
    1 3
    2 3
    3 2
    5 4
    5 4","R=lambda:map(int,input().split())
t,=R()
while t:
 t-=1;*_,k=R();a={*R()};b={*R()};f=1;m=n=k//2
 for i in range(1,k+1):u=i in a;v=i in b;f&=u|v;m-=u&~v;n-=~u&v
 print('YNEOS'[f^1or m|n<0::2])",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1946_C,1946_C_arkadius_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given a tree with n vertices.

Your task is to find the maximum number x such that it is possible to remove
exactly k edges from this tree in such a way that the size of each remaining
connected component^{\dagger} is at least x .

^{\dagger} Two vertices v and u are in the same connected component if there
exists a sequence of numbers t_1, t_2, \ldots, t_k of arbitrary length k ,
such that t_1 = v , t_k = u , and for each i from 1 to k - 1 , vertices t_i
and t_{i+1} are connected by an edge.

Input

Each test consists of several sets of input data. The first line contains a
single integer t (1 \le t \le 10^4 ) — the number of sets of input data. This
is followed by a description of the sets of input data.

The first line of each set of input data contains two integers n and k (1 \le
k < n \le 10^5 ) — the number of vertices in the tree and the number of edges
to be removed.

Each of the next n - 1 lines of each set of input data contains two integers v
and u (1 \le v, u \le n ) — the next edge of the tree.

It is guaranteed that the sum of the values of n for all sets of input data
does not exceed 10^5 .

Output

For each set of input data, output a single line containing the maximum number
x such that it is possible to remove exactly k edges from the tree in such a
way that the size of each remaining connected component is at least x .

Example

Input

    6
    
    5 1
    
    1 2
    
    1 3
    
    3 4
    
    3 5
    
    2 1
    
    1 2
    
    6 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5 6
    
    3 1
    
    1 2
    
    1 3
    
    8 2
    
    1 2
    
    1 3
    
    2 4
    
    2 5
    
    3 6
    
    3 7
    
    3 8
    
    6 2
    
    1 2
    
    2 3
    
    1 4
    
    4 5
    
    5 6

Output

    2
    1
    3
    1
    1
    2
    
Note

The tree in the first set of input data:

![](https://espresso.codeforces.com/799bacd3be0dda357800fdfc3eadbf38ab259c51.png)

After removing the edge 1 — 3 , the tree will look as follows:

![](https://espresso.codeforces.com/a59ae10eeac1212e1e56fc7fe5f6a47764269104.png)

The tree has split into two connected components. The first component consists
of two vertices: 1 and 2 . The second connected component consists of three
vertices: 3, 4 and 5 . In both connected components, there are at least two
vertices. It can be shown that the answer 3 is not achievable, so the answer
is 2 .","import sys
 
class TreeNode:
 
    def __init__(self):
        self.edges = []
        self.children = []
        self.subtree_size = 1
        self.parent = None
        self.good_components = 0
        self.remaining_size = 1
    
    def __str__(self):
        return f""(edges: {self.edges}, children: {self.children}, subtree_size: {self.subtree_size}, parent: {self.parent})\n""
    
    def __repr__(self):
        return self.__str__()
 
class Tree:
 
    def __init__(self, n):
        self.vertices = [TreeNode() for _ in range(n)]
 
    def add_edge(self, u: int, v: int) -> None:
        self.vertices[u].edges.append(v)
        self.vertices[v].edges.append(u)
 
    def root_tree(self, v: int, root: int) -> None:
        self.vertices[v].parent = root
        for u in self.vertices[v].edges:
            if u != root:
                self.vertices[v].children.append(u)
                self.root_tree(u, v)
                self.vertices[v].subtree_size += self.vertices[u].subtree_size
    
    def root_tree_non_recursive(self, v: int, root: int) -> None:
        stack = [(v, root)]
        while stack:
            (v, root) = stack.pop()
            self.vertices[v].parent = root
            for u in self.vertices[v].edges:
                if u != root:
                    self.vertices[v].children.append(u)
                    stack.append((u, v))
                    self.vertices[v].subtree_size += self.vertices[u].subtree_size
 
    def __str__(self):
        return str(self.vertices)
 
def check_x_dfs(tree: Tree, s: int, x: int) -> (int, int):
    stack = [(s, False)]
    while stack:
        (v, postorder) = stack.pop()
        if not postorder:
            stack.append((v, True))
            for u in tree.vertices[v].children:
                stack.append((u, False))
        if postorder:         
            for u in tree.vertices[v].children:
                tree.vertices[v].good_components += tree.vertices[u].good_components
                if tree.vertices[u].remaining_size >= x:
                    tree.vertices[v].good_components += 1
                else:
                    tree.vertices[v].remaining_size += tree.vertices[u].remaining_size
    
    return (tree.vertices[s].good_components, tree.vertices[s].remaining_size)
 
def check_x_dfs_recursive(tree: Tree, v: int, x: int) -> (int, int):
    good_components = 0
    remaining_size = 1
 
    for u in tree.vertices[v].children:
        (good_components_subtree, remaining_size_subtree) = check_x_dfs_recursive(tree, u, x)
        good_components += good_components_subtree
        if remaining_size_subtree >= x:
            good_components += 1
        else:
            remaining_size += remaining_size_subtree
    
    return (good_components, remaining_size)
 
 
def check_x(tree: Tree, n: int, k: int, x: int) -> bool:
    (good_components, remaining_size) = check_x_dfs(tree, 0, x)
    if good_components > k:
        return True
    if good_components == k and remaining_size >= x:
        return True
    return False
 
def find_x(tree: Tree, n: int, k: int) -> int:
    beg = 1
    end = n
    while beg < end:
        mid = (beg + end + 1) // 2
        if check_x(tree, n, k, mid):
            beg = mid
        else:
            end = mid - 1
    return beg
 
def solve_case():
    [n, k] = map(int, input().split())
    tree = Tree(n)
    for i in range(1, n):
        [u, v] = map(int, input().split())
        tree.add_edge(u-1, v-1)
    tree.root_tree_non_recursive(0, -1)
    print(find_x(tree, n, k))
 
if __name__ == '__main__':
    sys.setrecursionlimit(int(1e5)*2)
    t = int(input())
    while t > 0:
        t -= 1
        solve_case()",1,False,False,False,True,False,True,True,True,False,True,True,True,True,True,1.0,1.0,1.0
1970_C1,1970_C1_Sara_Elgazaly_17.65%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","from collections import defaultdict
 
x, y = map(int, input().split())
lst = defaultdict(list)
for _ in range(x-1):
    a,b = map(int, input().split())
    lst[a].append(b)
    lst[b].append(a)
 
s = True
while lst[x] != []:
    while lst[x]:
        y = lst[x].pop()
        if lst[y] != []:
            x = y
            break
    s = not s
s = not s
 
print('Hermione'if s else 'Ron')",1,False,False,False,False,False,False,True,True,False,False,True,False,False,False,1.0,1.0,1.0
1970_C1,1970_C1_Sara_Elgazaly_17.65%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","from collections import defaultdict
 
x, y = map(int, input().split())
lst = defaultdict(list)
for _ in range(x-1):
    a,b = map(int, input().split())
    lst[a].append(b)
    lst[b].append(a)
 
s = True
while lst[x] != []:
    while lst[x]:
        y = lst[x].pop()
        if lst[y] != []:
            x = y
            break
    s = not s
s = not s
 
print('Hermione'if s else 'Ron')",1,False,False,False,False,False,False,False,False,False,False,True,False,False,False,1.0,1.0,1.0
1970_C1,1970_C1_Sara_Elgazaly_17.65%,codeforces2024,human,qwen2p5-72b-instruct,"This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione","from collections import defaultdict
 
x, y = map(int, input().split())
lst = defaultdict(list)
for _ in range(x-1):
    a,b = map(int, input().split())
    lst[a].append(b)
    lst[b].append(a)
 
s = True
while lst[x] != []:
    while lst[x]:
        y = lst[x].pop()
        if lst[y] != []:
            x = y
            break
    s = not s
s = not s
 
print('Hermione'if s else 'Ron')",1,False,False,False,False,False,True,True,True,False,False,False,False,False,False,1.0,1.0,1.0
1922_E,1922_E_lucky__389_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1","import math
 
MOD = 1000000007
 
def solve():
    x = int(input())
    x -= 1
    subseq_lens = []
    mx = 0
    
    while x != 0:
        i = 0
        while 2**(i+1) <= (x + 1):
            i += 1
        if i == 0:
            break
        else:
            subseq_lens.append(i)
            x -= (2**i - 1)
            mx = max(mx, i)
    
    ansv = [i for i in range(mx)]
    
    for i in range(1, len(subseq_lens)):
        ansv.append(subseq_lens[i])
    
    print(len(ansv))
    
    for i in range(len(ansv)):
        print(ansv[i], end="" "")
    
    print()
 
if __name__ == ""__main__"":
    t = int(input())
    for _ in range(t):
        solve()",1,False,False,False,True,False,True,False,False,False,False,False,False,True,True,1.0,1.0,1.0
1922_E,1922_E_lucky__389_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1","import math
 
MOD = 1000000007
 
def solve():
    x = int(input())
    x -= 1
    subseq_lens = []
    mx = 0
    
    while x != 0:
        i = 0
        while 2**(i+1) <= (x + 1):
            i += 1
        if i == 0:
            break
        else:
            subseq_lens.append(i)
            x -= (2**i - 1)
            mx = max(mx, i)
    
    ansv = [i for i in range(mx)]
    
    for i in range(1, len(subseq_lens)):
        ansv.append(subseq_lens[i])
    
    print(len(ansv))
    
    for i in range(len(ansv)):
        print(ansv[i], end="" "")
    
    print()
 
if __name__ == ""__main__"":
    t = int(input())
    for _ in range(t):
        solve()",1,False,False,False,True,False,False,False,False,True,False,False,True,True,True,1.0,1.0,1.0
1922_E,1922_E_lucky__389_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1","import math
 
MOD = 1000000007
 
def solve():
    x = int(input())
    x -= 1
    subseq_lens = []
    mx = 0
    
    while x != 0:
        i = 0
        while 2**(i+1) <= (x + 1):
            i += 1
        if i == 0:
            break
        else:
            subseq_lens.append(i)
            x -= (2**i - 1)
            mx = max(mx, i)
    
    ansv = [i for i in range(mx)]
    
    for i in range(1, len(subseq_lens)):
        ansv.append(subseq_lens[i])
    
    print(len(ansv))
    
    for i in range(len(ansv)):
        print(ansv[i], end="" "")
    
    print()
 
if __name__ == ""__main__"":
    t = int(input())
    for _ in range(t):
        solve()",1,False,False,False,False,False,True,True,False,True,True,False,False,False,False,1.0,1.0,1.0
1931_C,1931_C_tah23seen_11.11%,codeforces2024,human,qwen2p5-72b-instruct,"You have an array a of n integers.

You can no more than once apply the following operation: select three integers
i , j , x (1 \le i \le j \le n ) and assign all elements of the array with
indexes from i to j the value x . The price of this operation depends on the
selected indices and is equal to (j - i + 1) burles.

For example, the array is equal to [1, 2, 3, 4, 5, 1] . If we choose i = 2, j
= 4, x = 8 , then after applying this operation, the array will be equal to
[1, 8, 8, 8, 5, 1] .

What is the least amount of burles you need to spend to make all the elements
of the array equal?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
input test cases. The descriptions of the test cases follow.

The first line of the description of each test case contains a single integer
n (1 \le n \le 2 \cdot 10 ^ 5 ) — the size of the array.

The second line of the description of each test case contains n integers a_1,
a_2, \dots, a_n (1 \le a_i \le n ) — array elements.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output one integer — the minimum number of burles that
will have to be spent to make all the elements of the array equal. It can be
shown that this can always be done.

Example

Input

    8
    
    6
    
    1 2 3 4 5 1
    
    7
    
    1 1 1 1 1 1 1
    
    8
    
    8 8 8 1 2 8 8 8
    
    1
    
    1
    
    2
    
    1 2
    
    3
    
    1 2 3
    
    7
    
    4 3 2 7 1 1 3
    
    9
    
    9 9 2 9 2 5 5 5 3

Output

    4
    0
    2
    0
    1
    2
    6
    7","def solve(arr):
  i=0
  j=len(arr)-1
  while i<=j:
    if arr[i]==arr[j]:
      i+=1
      j-=1
    else:
      break
  
  if i>j:return 0
  while arr[i]==arr[i+1]:
    i+=1
  if j!=len(arr)-1:return j-i+1
  return j-i
 
t=int(input())
while t:
  n=int(input())
  arr=[int(x) for x in input().split(' ')]
  print(solve(arr))
  t-=1",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1931_C,1931_C_tah23seen_11.11%,codeforces2024,human,qwen2p5-72b-instruct,"You have an array a of n integers.

You can no more than once apply the following operation: select three integers
i , j , x (1 \le i \le j \le n ) and assign all elements of the array with
indexes from i to j the value x . The price of this operation depends on the
selected indices and is equal to (j - i + 1) burles.

For example, the array is equal to [1, 2, 3, 4, 5, 1] . If we choose i = 2, j
= 4, x = 8 , then after applying this operation, the array will be equal to
[1, 8, 8, 8, 5, 1] .

What is the least amount of burles you need to spend to make all the elements
of the array equal?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
input test cases. The descriptions of the test cases follow.

The first line of the description of each test case contains a single integer
n (1 \le n \le 2 \cdot 10 ^ 5 ) — the size of the array.

The second line of the description of each test case contains n integers a_1,
a_2, \dots, a_n (1 \le a_i \le n ) — array elements.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output one integer — the minimum number of burles that
will have to be spent to make all the elements of the array equal. It can be
shown that this can always be done.

Example

Input

    8
    
    6
    
    1 2 3 4 5 1
    
    7
    
    1 1 1 1 1 1 1
    
    8
    
    8 8 8 1 2 8 8 8
    
    1
    
    1
    
    2
    
    1 2
    
    3
    
    1 2 3
    
    7
    
    4 3 2 7 1 1 3
    
    9
    
    9 9 2 9 2 5 5 5 3

Output

    4
    0
    2
    0
    1
    2
    6
    7","def solve(arr):
  i=0
  j=len(arr)-1
  while i<=j:
    if arr[i]==arr[j]:
      i+=1
      j-=1
    else:
      break
  
  if i>j:return 0
  while arr[i]==arr[i+1]:
    i+=1
  if j!=len(arr)-1:return j-i+1
  return j-i
 
t=int(input())
while t:
  n=int(input())
  arr=[int(x) for x in input().split(' ')]
  print(solve(arr))
  t-=1",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1931_C,1931_C_tah23seen_11.11%,codeforces2024,human,qwen2p5-72b-instruct,"You have an array a of n integers.

You can no more than once apply the following operation: select three integers
i , j , x (1 \le i \le j \le n ) and assign all elements of the array with
indexes from i to j the value x . The price of this operation depends on the
selected indices and is equal to (j - i + 1) burles.

For example, the array is equal to [1, 2, 3, 4, 5, 1] . If we choose i = 2, j
= 4, x = 8 , then after applying this operation, the array will be equal to
[1, 8, 8, 8, 5, 1] .

What is the least amount of burles you need to spend to make all the elements
of the array equal?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
input test cases. The descriptions of the test cases follow.

The first line of the description of each test case contains a single integer
n (1 \le n \le 2 \cdot 10 ^ 5 ) — the size of the array.

The second line of the description of each test case contains n integers a_1,
a_2, \dots, a_n (1 \le a_i \le n ) — array elements.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output one integer — the minimum number of burles that
will have to be spent to make all the elements of the array equal. It can be
shown that this can always be done.

Example

Input

    8
    
    6
    
    1 2 3 4 5 1
    
    7
    
    1 1 1 1 1 1 1
    
    8
    
    8 8 8 1 2 8 8 8
    
    1
    
    1
    
    2
    
    1 2
    
    3
    
    1 2 3
    
    7
    
    4 3 2 7 1 1 3
    
    9
    
    9 9 2 9 2 5 5 5 3

Output

    4
    0
    2
    0
    1
    2
    6
    7","def solve(arr):
  i=0
  j=len(arr)-1
  while i<=j:
    if arr[i]==arr[j]:
      i+=1
      j-=1
    else:
      break
  
  if i>j:return 0
  while arr[i]==arr[i+1]:
    i+=1
  if j!=len(arr)-1:return j-i+1
  return j-i
 
t=int(input())
while t:
  n=int(input())
  arr=[int(x) for x in input().split(' ')]
  print(solve(arr))
  t-=1",1,False,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1968_D,1968_D_Mitttel_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Bodya and Sasha found a permutation p_1,\dots,p_n and an array a_1,\dots,a_n .
They decided to play a well-known ""Permutation game"".

A permutation of length n is an array consisting of n distinct integers from 1
to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

Both of them chose a starting position in the permutation.

The game lasts k turns. The players make moves simultaneously. On each turn,
two things happen to each player:

  * If the current position of the player is x , his score increases by a_x . 
  * Then the player either stays at his current position x or moves from x to p_x . 

The winner of the game is the player with the higher score after exactly k
turns.

Knowing Bodya's starting position P_B and Sasha's starting position P_S ,
determine who wins the game if both players are trying to win.

Input

The first line contains a single integer t (1\le t\le 10^4 ) — the number of
testcases.

The first line of each testcase contains integers n , k , P_B , P_S (1\le
P_B,P_S\le n\le 2\cdot 10^5 , 1\le k\le 10^9 ) — length of the permutation,
duration of the game, starting positions respectively.

The next line contains n integers p_1,\dots,p_n (1 \le p_i \le n ) — elements
of the permutation p .

The next line contains n integers a_1,\dots,a_n (1\le a_i\le 10^9 ) — elements
of array a .

It is guaranteed that the sum of values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each testcase output:

  * ""Bodya"" if Bodya wins the game. 
  * ""Sasha"" if Sasha wins the game. 
  * ""Draw"" if the players have the same score. 

Example

Input

    10
    
    4 2 3 2
    
    4 1 2 3
    
    7 2 5 6
    
    10 8 2 10
    
    3 1 4 5 2 7 8 10 6 9
    
    5 10 5 1 3 7 10 15 4 3
    
    2 1000000000 1 2
    
    1 2
    
    4 4
    
    8 10 4 1
    
    5 1 4 3 2 8 6 7
    
    1 1 2 1 2 100 101 102
    
    5 1 2 5
    
    1 2 4 5 3
    
    4 6 9 4 2
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    6 9 5 4
    
    6 1 3 5 2 4
    
    6 9 8 9 5 10
    
    4 8 4 2
    
    2 3 4 1
    
    5 2 8 7
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    2 1000000000 1 2
    
    1 2
    
    1000000000 2

Output

    Bodya
    Sasha
    Draw
    Draw
    Bodya
    Sasha
    Sasha
    Sasha
    Sasha
    Bodya
    
Note

Below you can find the explanation for the first testcase, where the game
consists of k=2 turns.

Turn| Bodya's position| Bodya's score| Bodya's move| Sasha's position| Sasha's
score| Sasha's move  
---|---|---|---|---|---|---  
first| 3 | 0 + a_3 = 0 + 5 = 5 | stays on the same position| 2 | 0 + a_2 = 0 + 2 = 2 | moves to p_2=1   
second| 3 | 5 + a_3 = 5 + 5 = 10 | stays on the same position| 1 | 2 + a_1 = 2 + 7 = 9 | stays on the same position  
final results| 3 | 10 | | 1 | 9 |   
  
As we may see, Bodya's score is greater, so he wins the game. It can be shown
that Bodya always can win this game.","def simulate_game(n, k, PB, PS, p, a):
    def calculate_score(start_pos):
        score = 0
        current_pos = start_pos
        steps = 0
        
        # To handle large k and cycles
        visited = {}
        cycle_start = -1
        while steps < k:
            if current_pos in visited:
                cycle_start = visited[current_pos]
                break
            visited[current_pos] = steps
            score += a[current_pos - 1]
            steps += 1
            if steps >= k:
                return score
            current_pos = p[current_pos - 1]
        
        # If a cycle is detected
        if cycle_start != -1:
            cycle_length = steps - cycle_start
            cycle_score = 0
            cycle_pos = current_pos
            for _ in range(cycle_length):
                cycle_score += a[cycle_pos - 1]
                cycle_pos = p[cycle_pos - 1]
 
            remaining_steps = k - steps
            full_cycles = remaining_steps // cycle_length
            remainder_steps = remaining_steps % cycle_length
 
            score += full_cycles * cycle_score
 
            for _ in range(remainder_steps):
                score += a[current_pos - 1]
                current_pos = p[current_pos - 1]
 
        return score
 
    bodya_score = calculate_score(PB)
    sasha_score = calculate_score(PS)
    
    if bodya_score > sasha_score:
        return ""Bodya""
    elif sasha_score > bodya_score:
        return ""Sasha""
    else:
        return ""Draw""
 
def main():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    index = 0
    t = int(data[index])
    index += 1
    
    results = []
    
    for _ in range(t):
        n = int(data[index])
        k = int(data[index + 1])
        PB = int(data[index + 2])
        PS = int(data[index + 3])
        index += 4
        
        p = list(map(int, data[index:index + n]))
        index += n
        
        a = list(map(int, data[index:index + n]))
        index += n
        
        result = simulate_game(n, k, PB, PS, p, a)
        results.append(result)
    
    for result in results:
        print(result)
 
if __name__ == ""__main__"":
    main()",1,False,False,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1968_D,1968_D_Mitttel_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Bodya and Sasha found a permutation p_1,\dots,p_n and an array a_1,\dots,a_n .
They decided to play a well-known ""Permutation game"".

A permutation of length n is an array consisting of n distinct integers from 1
to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

Both of them chose a starting position in the permutation.

The game lasts k turns. The players make moves simultaneously. On each turn,
two things happen to each player:

  * If the current position of the player is x , his score increases by a_x . 
  * Then the player either stays at his current position x or moves from x to p_x . 

The winner of the game is the player with the higher score after exactly k
turns.

Knowing Bodya's starting position P_B and Sasha's starting position P_S ,
determine who wins the game if both players are trying to win.

Input

The first line contains a single integer t (1\le t\le 10^4 ) — the number of
testcases.

The first line of each testcase contains integers n , k , P_B , P_S (1\le
P_B,P_S\le n\le 2\cdot 10^5 , 1\le k\le 10^9 ) — length of the permutation,
duration of the game, starting positions respectively.

The next line contains n integers p_1,\dots,p_n (1 \le p_i \le n ) — elements
of the permutation p .

The next line contains n integers a_1,\dots,a_n (1\le a_i\le 10^9 ) — elements
of array a .

It is guaranteed that the sum of values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each testcase output:

  * ""Bodya"" if Bodya wins the game. 
  * ""Sasha"" if Sasha wins the game. 
  * ""Draw"" if the players have the same score. 

Example

Input

    10
    
    4 2 3 2
    
    4 1 2 3
    
    7 2 5 6
    
    10 8 2 10
    
    3 1 4 5 2 7 8 10 6 9
    
    5 10 5 1 3 7 10 15 4 3
    
    2 1000000000 1 2
    
    1 2
    
    4 4
    
    8 10 4 1
    
    5 1 4 3 2 8 6 7
    
    1 1 2 1 2 100 101 102
    
    5 1 2 5
    
    1 2 4 5 3
    
    4 6 9 4 2
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    6 9 5 4
    
    6 1 3 5 2 4
    
    6 9 8 9 5 10
    
    4 8 4 2
    
    2 3 4 1
    
    5 2 8 7
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    2 1000000000 1 2
    
    1 2
    
    1000000000 2

Output

    Bodya
    Sasha
    Draw
    Draw
    Bodya
    Sasha
    Sasha
    Sasha
    Sasha
    Bodya
    
Note

Below you can find the explanation for the first testcase, where the game
consists of k=2 turns.

Turn| Bodya's position| Bodya's score| Bodya's move| Sasha's position| Sasha's
score| Sasha's move  
---|---|---|---|---|---|---  
first| 3 | 0 + a_3 = 0 + 5 = 5 | stays on the same position| 2 | 0 + a_2 = 0 + 2 = 2 | moves to p_2=1   
second| 3 | 5 + a_3 = 5 + 5 = 10 | stays on the same position| 1 | 2 + a_1 = 2 + 7 = 9 | stays on the same position  
final results| 3 | 10 | | 1 | 9 |   
  
As we may see, Bodya's score is greater, so he wins the game. It can be shown
that Bodya always can win this game.","def simulate_game(n, k, PB, PS, p, a):
    def calculate_score(start_pos):
        score = 0
        current_pos = start_pos
        steps = 0
        
        # To handle large k and cycles
        visited = {}
        cycle_start = -1
        while steps < k:
            if current_pos in visited:
                cycle_start = visited[current_pos]
                break
            visited[current_pos] = steps
            score += a[current_pos - 1]
            steps += 1
            if steps >= k:
                return score
            current_pos = p[current_pos - 1]
        
        # If a cycle is detected
        if cycle_start != -1:
            cycle_length = steps - cycle_start
            cycle_score = 0
            cycle_pos = current_pos
            for _ in range(cycle_length):
                cycle_score += a[cycle_pos - 1]
                cycle_pos = p[cycle_pos - 1]
 
            remaining_steps = k - steps
            full_cycles = remaining_steps // cycle_length
            remainder_steps = remaining_steps % cycle_length
 
            score += full_cycles * cycle_score
 
            for _ in range(remainder_steps):
                score += a[current_pos - 1]
                current_pos = p[current_pos - 1]
 
        return score
 
    bodya_score = calculate_score(PB)
    sasha_score = calculate_score(PS)
    
    if bodya_score > sasha_score:
        return ""Bodya""
    elif sasha_score > bodya_score:
        return ""Sasha""
    else:
        return ""Draw""
 
def main():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    index = 0
    t = int(data[index])
    index += 1
    
    results = []
    
    for _ in range(t):
        n = int(data[index])
        k = int(data[index + 1])
        PB = int(data[index + 2])
        PS = int(data[index + 3])
        index += 4
        
        p = list(map(int, data[index:index + n]))
        index += n
        
        a = list(map(int, data[index:index + n]))
        index += n
        
        result = simulate_game(n, k, PB, PS, p, a)
        results.append(result)
    
    for result in results:
        print(result)
 
if __name__ == ""__main__"":
    main()",1,False,False,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1968_D,1968_D_Mitttel_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"Bodya and Sasha found a permutation p_1,\dots,p_n and an array a_1,\dots,a_n .
They decided to play a well-known ""Permutation game"".

A permutation of length n is an array consisting of n distinct integers from 1
to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

Both of them chose a starting position in the permutation.

The game lasts k turns. The players make moves simultaneously. On each turn,
two things happen to each player:

  * If the current position of the player is x , his score increases by a_x . 
  * Then the player either stays at his current position x or moves from x to p_x . 

The winner of the game is the player with the higher score after exactly k
turns.

Knowing Bodya's starting position P_B and Sasha's starting position P_S ,
determine who wins the game if both players are trying to win.

Input

The first line contains a single integer t (1\le t\le 10^4 ) — the number of
testcases.

The first line of each testcase contains integers n , k , P_B , P_S (1\le
P_B,P_S\le n\le 2\cdot 10^5 , 1\le k\le 10^9 ) — length of the permutation,
duration of the game, starting positions respectively.

The next line contains n integers p_1,\dots,p_n (1 \le p_i \le n ) — elements
of the permutation p .

The next line contains n integers a_1,\dots,a_n (1\le a_i\le 10^9 ) — elements
of array a .

It is guaranteed that the sum of values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each testcase output:

  * ""Bodya"" if Bodya wins the game. 
  * ""Sasha"" if Sasha wins the game. 
  * ""Draw"" if the players have the same score. 

Example

Input

    10
    
    4 2 3 2
    
    4 1 2 3
    
    7 2 5 6
    
    10 8 2 10
    
    3 1 4 5 2 7 8 10 6 9
    
    5 10 5 1 3 7 10 15 4 3
    
    2 1000000000 1 2
    
    1 2
    
    4 4
    
    8 10 4 1
    
    5 1 4 3 2 8 6 7
    
    1 1 2 1 2 100 101 102
    
    5 1 2 5
    
    1 2 4 5 3
    
    4 6 9 4 2
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    6 9 5 4
    
    6 1 3 5 2 4
    
    6 9 8 9 5 10
    
    4 8 4 2
    
    2 3 4 1
    
    5 2 8 7
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    2 1000000000 1 2
    
    1 2
    
    1000000000 2

Output

    Bodya
    Sasha
    Draw
    Draw
    Bodya
    Sasha
    Sasha
    Sasha
    Sasha
    Bodya
    
Note

Below you can find the explanation for the first testcase, where the game
consists of k=2 turns.

Turn| Bodya's position| Bodya's score| Bodya's move| Sasha's position| Sasha's
score| Sasha's move  
---|---|---|---|---|---|---  
first| 3 | 0 + a_3 = 0 + 5 = 5 | stays on the same position| 2 | 0 + a_2 = 0 + 2 = 2 | moves to p_2=1   
second| 3 | 5 + a_3 = 5 + 5 = 10 | stays on the same position| 1 | 2 + a_1 = 2 + 7 = 9 | stays on the same position  
final results| 3 | 10 | | 1 | 9 |   
  
As we may see, Bodya's score is greater, so he wins the game. It can be shown
that Bodya always can win this game.","def simulate_game(n, k, PB, PS, p, a):
    def calculate_score(start_pos):
        score = 0
        current_pos = start_pos
        steps = 0
        
        # To handle large k and cycles
        visited = {}
        cycle_start = -1
        while steps < k:
            if current_pos in visited:
                cycle_start = visited[current_pos]
                break
            visited[current_pos] = steps
            score += a[current_pos - 1]
            steps += 1
            if steps >= k:
                return score
            current_pos = p[current_pos - 1]
        
        # If a cycle is detected
        if cycle_start != -1:
            cycle_length = steps - cycle_start
            cycle_score = 0
            cycle_pos = current_pos
            for _ in range(cycle_length):
                cycle_score += a[cycle_pos - 1]
                cycle_pos = p[cycle_pos - 1]
 
            remaining_steps = k - steps
            full_cycles = remaining_steps // cycle_length
            remainder_steps = remaining_steps % cycle_length
 
            score += full_cycles * cycle_score
 
            for _ in range(remainder_steps):
                score += a[current_pos - 1]
                current_pos = p[current_pos - 1]
 
        return score
 
    bodya_score = calculate_score(PB)
    sasha_score = calculate_score(PS)
    
    if bodya_score > sasha_score:
        return ""Bodya""
    elif sasha_score > bodya_score:
        return ""Sasha""
    else:
        return ""Draw""
 
def main():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    index = 0
    t = int(data[index])
    index += 1
    
    results = []
    
    for _ in range(t):
        n = int(data[index])
        k = int(data[index + 1])
        PB = int(data[index + 2])
        PS = int(data[index + 3])
        index += 4
        
        p = list(map(int, data[index:index + n]))
        index += n
        
        a = list(map(int, data[index:index + n]))
        index += n
        
        result = simulate_game(n, k, PB, PS, p, a)
        results.append(result)
    
    for result in results:
        print(result)
 
if __name__ == ""__main__"":
    main()",1,False,False,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1955_C,1955_C_Luv985_100%,codeforces2024,human,qwen2p5-72b-instruct,"n ships set out to explore the depths of the ocean. The ships are numbered
from 1 to n and follow each other in ascending order; the i -th ship has a
durability of a_i .

The Kraken attacked the ships k times in a specific order. First, it attacks
the first of the ships, then the last, then the first again, and so on.

Each attack by the Kraken reduces the durability of the ship by 1 . When the
durability of the ship drops to 0 , it sinks and is no longer subjected to
attacks (thus the ship ceases to be the first or last, and the Kraken only
attacks the ships that have not yet sunk). If all the ships have sunk, the
Kraken has nothing to attack and it swims away.

For example, if n=4 , k=5 , and a=[1, 2, 4, 3] , the following will happen:

  1. The Kraken attacks the first ship, its durability becomes zero and now a = [2, 4, 3] ; 
  2. The Kraken attacks the last ship, now a = [2, 4, 2] ; 
  3. The Kraken attacks the first ship, now a = [1, 4, 2] ; 
  4. The Kraken attacks the last ship, now a = [1, 4, 1] ; 
  5. The Kraken attacks the first ship, its durability becomes zero and now a = [4, 1] . 

How many ships were sunk after the Kraken's attack?

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains two integers n and k (1 \le n \le 2
\cdot 10^5 , 1 \le k \le 10^{15} ) — the number of ships and how many times
the Kraken will attack the ships.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^9 ) — the durability of the ships.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output the number of ships sunk by the Kraken on a
separate line.

Example

Input

    6
    
    4 5
    
    1 2 4 3
    
    4 6
    
    1 2 4 3
    
    5 20
    
    2 7 1 8 2
    
    2 2
    
    3 2
    
    2 15
    
    1 5
    
    2 7
    
    5 2

Output

    2
    3
    5
    0
    2
    2","# -*- coding: utf-8 -*-
""""""
    @Time : 2024/8/26 17:59
    @Author : Zhiliang.L
    @Email : 2410103062@mails.edu.cn
    @File : 1955-C.py
""""""
T = int(input())
while T:
    T -= 1
    n, k = input().split()
    n = int(n)
    k = int(k)
    a = input().split()
    a = list(map(lambda x: int(x), a))
    l = 0
    r = n - 1
    ans = 0
    while l < r and k > 0:
        mi = min(a[l], a[r])
        if mi * 2 <= k:
            a[l] -= mi
            a[r] -= mi
            k -= (mi * 2)
            if a[l] == 0:
                ans += 1
                l += 1
            if a[r] == 0:
                ans += 1
                r -= 1
        else:
            t = k % 2
            if a[l] - t - k // 2 == 0:
                ans += 1
            break
    if l == r:
        ans += (k >= a[l])
    print(ans)",1,True,False,False,True,True,False,True,True,False,False,False,True,True,False,1.0,1.0,1.0
1955_C,1955_C_Luv985_100%,codeforces2024,human,qwen2p5-72b-instruct,"n ships set out to explore the depths of the ocean. The ships are numbered
from 1 to n and follow each other in ascending order; the i -th ship has a
durability of a_i .

The Kraken attacked the ships k times in a specific order. First, it attacks
the first of the ships, then the last, then the first again, and so on.

Each attack by the Kraken reduces the durability of the ship by 1 . When the
durability of the ship drops to 0 , it sinks and is no longer subjected to
attacks (thus the ship ceases to be the first or last, and the Kraken only
attacks the ships that have not yet sunk). If all the ships have sunk, the
Kraken has nothing to attack and it swims away.

For example, if n=4 , k=5 , and a=[1, 2, 4, 3] , the following will happen:

  1. The Kraken attacks the first ship, its durability becomes zero and now a = [2, 4, 3] ; 
  2. The Kraken attacks the last ship, now a = [2, 4, 2] ; 
  3. The Kraken attacks the first ship, now a = [1, 4, 2] ; 
  4. The Kraken attacks the last ship, now a = [1, 4, 1] ; 
  5. The Kraken attacks the first ship, its durability becomes zero and now a = [4, 1] . 

How many ships were sunk after the Kraken's attack?

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains two integers n and k (1 \le n \le 2
\cdot 10^5 , 1 \le k \le 10^{15} ) — the number of ships and how many times
the Kraken will attack the ships.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^9 ) — the durability of the ships.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output the number of ships sunk by the Kraken on a
separate line.

Example

Input

    6
    
    4 5
    
    1 2 4 3
    
    4 6
    
    1 2 4 3
    
    5 20
    
    2 7 1 8 2
    
    2 2
    
    3 2
    
    2 15
    
    1 5
    
    2 7
    
    5 2

Output

    2
    3
    5
    0
    2
    2","# -*- coding: utf-8 -*-
""""""
    @Time : 2024/8/26 17:59
    @Author : Zhiliang.L
    @Email : 2410103062@mails.edu.cn
    @File : 1955-C.py
""""""
T = int(input())
while T:
    T -= 1
    n, k = input().split()
    n = int(n)
    k = int(k)
    a = input().split()
    a = list(map(lambda x: int(x), a))
    l = 0
    r = n - 1
    ans = 0
    while l < r and k > 0:
        mi = min(a[l], a[r])
        if mi * 2 <= k:
            a[l] -= mi
            a[r] -= mi
            k -= (mi * 2)
            if a[l] == 0:
                ans += 1
                l += 1
            if a[r] == 0:
                ans += 1
                r -= 1
        else:
            t = k % 2
            if a[l] - t - k // 2 == 0:
                ans += 1
            break
    if l == r:
        ans += (k >= a[l])
    print(ans)",1,True,False,False,True,True,False,False,True,False,False,False,True,True,True,1.0,1.0,1.0
1955_C,1955_C_Luv985_100%,codeforces2024,human,qwen2p5-72b-instruct,"n ships set out to explore the depths of the ocean. The ships are numbered
from 1 to n and follow each other in ascending order; the i -th ship has a
durability of a_i .

The Kraken attacked the ships k times in a specific order. First, it attacks
the first of the ships, then the last, then the first again, and so on.

Each attack by the Kraken reduces the durability of the ship by 1 . When the
durability of the ship drops to 0 , it sinks and is no longer subjected to
attacks (thus the ship ceases to be the first or last, and the Kraken only
attacks the ships that have not yet sunk). If all the ships have sunk, the
Kraken has nothing to attack and it swims away.

For example, if n=4 , k=5 , and a=[1, 2, 4, 3] , the following will happen:

  1. The Kraken attacks the first ship, its durability becomes zero and now a = [2, 4, 3] ; 
  2. The Kraken attacks the last ship, now a = [2, 4, 2] ; 
  3. The Kraken attacks the first ship, now a = [1, 4, 2] ; 
  4. The Kraken attacks the last ship, now a = [1, 4, 1] ; 
  5. The Kraken attacks the first ship, its durability becomes zero and now a = [4, 1] . 

How many ships were sunk after the Kraken's attack?

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains two integers n and k (1 \le n \le 2
\cdot 10^5 , 1 \le k \le 10^{15} ) — the number of ships and how many times
the Kraken will attack the ships.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^9 ) — the durability of the ships.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output the number of ships sunk by the Kraken on a
separate line.

Example

Input

    6
    
    4 5
    
    1 2 4 3
    
    4 6
    
    1 2 4 3
    
    5 20
    
    2 7 1 8 2
    
    2 2
    
    3 2
    
    2 15
    
    1 5
    
    2 7
    
    5 2

Output

    2
    3
    5
    0
    2
    2","# -*- coding: utf-8 -*-
""""""
    @Time : 2024/8/26 17:59
    @Author : Zhiliang.L
    @Email : 2410103062@mails.edu.cn
    @File : 1955-C.py
""""""
T = int(input())
while T:
    T -= 1
    n, k = input().split()
    n = int(n)
    k = int(k)
    a = input().split()
    a = list(map(lambda x: int(x), a))
    l = 0
    r = n - 1
    ans = 0
    while l < r and k > 0:
        mi = min(a[l], a[r])
        if mi * 2 <= k:
            a[l] -= mi
            a[r] -= mi
            k -= (mi * 2)
            if a[l] == 0:
                ans += 1
                l += 1
            if a[r] == 0:
                ans += 1
                r -= 1
        else:
            t = k % 2
            if a[l] - t - k // 2 == 0:
                ans += 1
            break
    if l == r:
        ans += (k >= a[l])
    print(ans)",1,True,False,False,True,True,True,False,True,True,True,False,True,True,True,1.0,1.0,1.0
1955_C,1955_C_joker_Pham_3.33%,codeforces2024,human,qwen2p5-72b-instruct,"n ships set out to explore the depths of the ocean. The ships are numbered
from 1 to n and follow each other in ascending order; the i -th ship has a
durability of a_i .

The Kraken attacked the ships k times in a specific order. First, it attacks
the first of the ships, then the last, then the first again, and so on.

Each attack by the Kraken reduces the durability of the ship by 1 . When the
durability of the ship drops to 0 , it sinks and is no longer subjected to
attacks (thus the ship ceases to be the first or last, and the Kraken only
attacks the ships that have not yet sunk). If all the ships have sunk, the
Kraken has nothing to attack and it swims away.

For example, if n=4 , k=5 , and a=[1, 2, 4, 3] , the following will happen:

  1. The Kraken attacks the first ship, its durability becomes zero and now a = [2, 4, 3] ; 
  2. The Kraken attacks the last ship, now a = [2, 4, 2] ; 
  3. The Kraken attacks the first ship, now a = [1, 4, 2] ; 
  4. The Kraken attacks the last ship, now a = [1, 4, 1] ; 
  5. The Kraken attacks the first ship, its durability becomes zero and now a = [4, 1] . 

How many ships were sunk after the Kraken's attack?

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains two integers n and k (1 \le n \le 2
\cdot 10^5 , 1 \le k \le 10^{15} ) — the number of ships and how many times
the Kraken will attack the ships.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^9 ) — the durability of the ships.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output the number of ships sunk by the Kraken on a
separate line.

Example

Input

    6
    
    4 5
    
    1 2 4 3
    
    4 6
    
    1 2 4 3
    
    5 20
    
    2 7 1 8 2
    
    2 2
    
    3 2
    
    2 15
    
    1 5
    
    2 7
    
    5 2

Output

    2
    3
    5
    0
    2
    2","def solve(n, k, a):
    l, r = 0, n - 1
    sunks = 0
    while l <= r:
        if k == 0:
            break
        if l == r:
            if k >= a[r]:
                sunks += 1
                break
            break
            
        if a[l] <= a[r]:
            if k >= a[l] * 2:
                k -= a[l] * 2
                a[r] -= a[l]
                if a[r] == 0:
                    sunks += 1
                    r -= 1
                sunks += 1
                l += 1
                continue
            else:
                if a[l] * 2 - 1 == k:
                    sunks += 1
                    break
                else:
                    break
                
        if k == 0:
            break
                
        if a[r] < a[l]:
            if k >= a[r] * 2:
                k -= a[r] * 2
                a[l] -= a[r]
                if a[l] == 0:
                    sunks += 1
                    l += 1
                sunks += 1
                r -= 1
                continue
            else:
                if a[r] * 2 - 1 == k:
                    sunks += 1
                    break
                else:
                    break
            
        
    return sunks
    
# Read input
t = int(input())  # Number of test cases
for _ in range(t):
    n, k = map(int, input().split())
    a = map(int, input().split())
    print(solve(n, k, list(a)))",1,False,False,False,True,False,True,False,False,False,False,False,True,False,False,0.9649303116363888,0.7703503976121363,0.9166666666666666
1955_C,1955_C_joker_Pham_3.33%,codeforces2024,human,qwen2p5-72b-instruct,"n ships set out to explore the depths of the ocean. The ships are numbered
from 1 to n and follow each other in ascending order; the i -th ship has a
durability of a_i .

The Kraken attacked the ships k times in a specific order. First, it attacks
the first of the ships, then the last, then the first again, and so on.

Each attack by the Kraken reduces the durability of the ship by 1 . When the
durability of the ship drops to 0 , it sinks and is no longer subjected to
attacks (thus the ship ceases to be the first or last, and the Kraken only
attacks the ships that have not yet sunk). If all the ships have sunk, the
Kraken has nothing to attack and it swims away.

For example, if n=4 , k=5 , and a=[1, 2, 4, 3] , the following will happen:

  1. The Kraken attacks the first ship, its durability becomes zero and now a = [2, 4, 3] ; 
  2. The Kraken attacks the last ship, now a = [2, 4, 2] ; 
  3. The Kraken attacks the first ship, now a = [1, 4, 2] ; 
  4. The Kraken attacks the last ship, now a = [1, 4, 1] ; 
  5. The Kraken attacks the first ship, its durability becomes zero and now a = [4, 1] . 

How many ships were sunk after the Kraken's attack?

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains two integers n and k (1 \le n \le 2
\cdot 10^5 , 1 \le k \le 10^{15} ) — the number of ships and how many times
the Kraken will attack the ships.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^9 ) — the durability of the ships.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output the number of ships sunk by the Kraken on a
separate line.

Example

Input

    6
    
    4 5
    
    1 2 4 3
    
    4 6
    
    1 2 4 3
    
    5 20
    
    2 7 1 8 2
    
    2 2
    
    3 2
    
    2 15
    
    1 5
    
    2 7
    
    5 2

Output

    2
    3
    5
    0
    2
    2","def solve(n, k, a):
    l, r = 0, n - 1
    sunks = 0
    while l <= r:
        if k == 0:
            break
        if l == r:
            if k >= a[r]:
                sunks += 1
                break
            break
            
        if a[l] <= a[r]:
            if k >= a[l] * 2:
                k -= a[l] * 2
                a[r] -= a[l]
                if a[r] == 0:
                    sunks += 1
                    r -= 1
                sunks += 1
                l += 1
                continue
            else:
                if a[l] * 2 - 1 == k:
                    sunks += 1
                    break
                else:
                    break
                
        if k == 0:
            break
                
        if a[r] < a[l]:
            if k >= a[r] * 2:
                k -= a[r] * 2
                a[l] -= a[r]
                if a[l] == 0:
                    sunks += 1
                    l += 1
                sunks += 1
                r -= 1
                continue
            else:
                if a[r] * 2 - 1 == k:
                    sunks += 1
                    break
                else:
                    break
            
        
    return sunks
    
# Read input
t = int(input())  # Number of test cases
for _ in range(t):
    n, k = map(int, input().split())
    a = map(int, input().split())
    print(solve(n, k, list(a)))",1,False,False,False,True,False,True,True,False,False,False,False,False,True,False,0.9649303116363888,0.7703503976121363,0.9166666666666666
1955_C,1955_C_joker_Pham_3.33%,codeforces2024,human,qwen2p5-72b-instruct,"n ships set out to explore the depths of the ocean. The ships are numbered
from 1 to n and follow each other in ascending order; the i -th ship has a
durability of a_i .

The Kraken attacked the ships k times in a specific order. First, it attacks
the first of the ships, then the last, then the first again, and so on.

Each attack by the Kraken reduces the durability of the ship by 1 . When the
durability of the ship drops to 0 , it sinks and is no longer subjected to
attacks (thus the ship ceases to be the first or last, and the Kraken only
attacks the ships that have not yet sunk). If all the ships have sunk, the
Kraken has nothing to attack and it swims away.

For example, if n=4 , k=5 , and a=[1, 2, 4, 3] , the following will happen:

  1. The Kraken attacks the first ship, its durability becomes zero and now a = [2, 4, 3] ; 
  2. The Kraken attacks the last ship, now a = [2, 4, 2] ; 
  3. The Kraken attacks the first ship, now a = [1, 4, 2] ; 
  4. The Kraken attacks the last ship, now a = [1, 4, 1] ; 
  5. The Kraken attacks the first ship, its durability becomes zero and now a = [4, 1] . 

How many ships were sunk after the Kraken's attack?

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains two integers n and k (1 \le n \le 2
\cdot 10^5 , 1 \le k \le 10^{15} ) — the number of ships and how many times
the Kraken will attack the ships.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^9 ) — the durability of the ships.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output the number of ships sunk by the Kraken on a
separate line.

Example

Input

    6
    
    4 5
    
    1 2 4 3
    
    4 6
    
    1 2 4 3
    
    5 20
    
    2 7 1 8 2
    
    2 2
    
    3 2
    
    2 15
    
    1 5
    
    2 7
    
    5 2

Output

    2
    3
    5
    0
    2
    2","def solve(n, k, a):
    l, r = 0, n - 1
    sunks = 0
    while l <= r:
        if k == 0:
            break
        if l == r:
            if k >= a[r]:
                sunks += 1
                break
            break
            
        if a[l] <= a[r]:
            if k >= a[l] * 2:
                k -= a[l] * 2
                a[r] -= a[l]
                if a[r] == 0:
                    sunks += 1
                    r -= 1
                sunks += 1
                l += 1
                continue
            else:
                if a[l] * 2 - 1 == k:
                    sunks += 1
                    break
                else:
                    break
                
        if k == 0:
            break
                
        if a[r] < a[l]:
            if k >= a[r] * 2:
                k -= a[r] * 2
                a[l] -= a[r]
                if a[l] == 0:
                    sunks += 1
                    l += 1
                sunks += 1
                r -= 1
                continue
            else:
                if a[r] * 2 - 1 == k:
                    sunks += 1
                    break
                else:
                    break
            
        
    return sunks
    
# Read input
t = int(input())  # Number of test cases
for _ in range(t):
    n, k = map(int, input().split())
    a = map(int, input().split())
    print(solve(n, k, list(a)))",1,False,False,False,True,False,False,False,True,False,False,False,True,True,True,0.9649303116363888,0.7703503976121363,0.9166666666666666
1968_D,1968_D_Mitttel_100%,codeforces2024,human,qwen2p5-72b-instruct,"Bodya and Sasha found a permutation p_1,\dots,p_n and an array a_1,\dots,a_n .
They decided to play a well-known ""Permutation game"".

A permutation of length n is an array consisting of n distinct integers from 1
to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

Both of them chose a starting position in the permutation.

The game lasts k turns. The players make moves simultaneously. On each turn,
two things happen to each player:

  * If the current position of the player is x , his score increases by a_x . 
  * Then the player either stays at his current position x or moves from x to p_x . 

The winner of the game is the player with the higher score after exactly k
turns.

Knowing Bodya's starting position P_B and Sasha's starting position P_S ,
determine who wins the game if both players are trying to win.

Input

The first line contains a single integer t (1\le t\le 10^4 ) — the number of
testcases.

The first line of each testcase contains integers n , k , P_B , P_S (1\le
P_B,P_S\le n\le 2\cdot 10^5 , 1\le k\le 10^9 ) — length of the permutation,
duration of the game, starting positions respectively.

The next line contains n integers p_1,\dots,p_n (1 \le p_i \le n ) — elements
of the permutation p .

The next line contains n integers a_1,\dots,a_n (1\le a_i\le 10^9 ) — elements
of array a .

It is guaranteed that the sum of values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each testcase output:

  * ""Bodya"" if Bodya wins the game. 
  * ""Sasha"" if Sasha wins the game. 
  * ""Draw"" if the players have the same score. 

Example

Input

    10
    
    4 2 3 2
    
    4 1 2 3
    
    7 2 5 6
    
    10 8 2 10
    
    3 1 4 5 2 7 8 10 6 9
    
    5 10 5 1 3 7 10 15 4 3
    
    2 1000000000 1 2
    
    1 2
    
    4 4
    
    8 10 4 1
    
    5 1 4 3 2 8 6 7
    
    1 1 2 1 2 100 101 102
    
    5 1 2 5
    
    1 2 4 5 3
    
    4 6 9 4 2
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    6 9 5 4
    
    6 1 3 5 2 4
    
    6 9 8 9 5 10
    
    4 8 4 2
    
    2 3 4 1
    
    5 2 8 7
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    2 1000000000 1 2
    
    1 2
    
    1000000000 2

Output

    Bodya
    Sasha
    Draw
    Draw
    Bodya
    Sasha
    Sasha
    Sasha
    Sasha
    Bodya
    
Note

Below you can find the explanation for the first testcase, where the game
consists of k=2 turns.

Turn| Bodya's position| Bodya's score| Bodya's move| Sasha's position| Sasha's
score| Sasha's move  
---|---|---|---|---|---|---  
first| 3 | 0 + a_3 = 0 + 5 = 5 | stays on the same position| 2 | 0 + a_2 = 0 + 2 = 2 | moves to p_2=1   
second| 3 | 5 + a_3 = 5 + 5 = 10 | stays on the same position| 1 | 2 + a_1 = 2 + 7 = 9 | stays on the same position  
final results| 3 | 10 | | 1 | 9 |   
  
As we may see, Bodya's score is greater, so he wins the game. It can be shown
that Bodya always can win this game.","def game(a, p, s, k):
  n = len(p)
  mx = 0
  cur = 0
  vis = [0 for _ in range(n)]
  while(not(vis[s]) and k > 0):
    vis[s] = 1 
    mx = max(mx, cur + k*a[s])
    cur += a[s]
    k-=1 
    s = p[s]
  return mx
 
 
 
 
 
for _ in range(int(input())):
  n, k, pb, ps = map(int, input().split())
  p = list(map(int, input().split()))
  a = list(map(int, input().split()))
  
  
  for i in range(n):
    p[i]-= 1 
    a[i]-= 1
  A = game(a, p, pb - 1, k)
  B = game(a, p, ps - 1, k)
  if A == B:
    print(""Draw"")
  elif A > B:
    print(""Bodya"")
  else:
    print(""Sasha"")",1,True,False,False,False,False,True,False,False,False,True,True,False,False,False,1.0,1.0,1.0
1968_D,1968_D_Mitttel_100%,codeforces2024,human,qwen2p5-72b-instruct,"Bodya and Sasha found a permutation p_1,\dots,p_n and an array a_1,\dots,a_n .
They decided to play a well-known ""Permutation game"".

A permutation of length n is an array consisting of n distinct integers from 1
to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

Both of them chose a starting position in the permutation.

The game lasts k turns. The players make moves simultaneously. On each turn,
two things happen to each player:

  * If the current position of the player is x , his score increases by a_x . 
  * Then the player either stays at his current position x or moves from x to p_x . 

The winner of the game is the player with the higher score after exactly k
turns.

Knowing Bodya's starting position P_B and Sasha's starting position P_S ,
determine who wins the game if both players are trying to win.

Input

The first line contains a single integer t (1\le t\le 10^4 ) — the number of
testcases.

The first line of each testcase contains integers n , k , P_B , P_S (1\le
P_B,P_S\le n\le 2\cdot 10^5 , 1\le k\le 10^9 ) — length of the permutation,
duration of the game, starting positions respectively.

The next line contains n integers p_1,\dots,p_n (1 \le p_i \le n ) — elements
of the permutation p .

The next line contains n integers a_1,\dots,a_n (1\le a_i\le 10^9 ) — elements
of array a .

It is guaranteed that the sum of values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each testcase output:

  * ""Bodya"" if Bodya wins the game. 
  * ""Sasha"" if Sasha wins the game. 
  * ""Draw"" if the players have the same score. 

Example

Input

    10
    
    4 2 3 2
    
    4 1 2 3
    
    7 2 5 6
    
    10 8 2 10
    
    3 1 4 5 2 7 8 10 6 9
    
    5 10 5 1 3 7 10 15 4 3
    
    2 1000000000 1 2
    
    1 2
    
    4 4
    
    8 10 4 1
    
    5 1 4 3 2 8 6 7
    
    1 1 2 1 2 100 101 102
    
    5 1 2 5
    
    1 2 4 5 3
    
    4 6 9 4 2
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    6 9 5 4
    
    6 1 3 5 2 4
    
    6 9 8 9 5 10
    
    4 8 4 2
    
    2 3 4 1
    
    5 2 8 7
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    2 1000000000 1 2
    
    1 2
    
    1000000000 2

Output

    Bodya
    Sasha
    Draw
    Draw
    Bodya
    Sasha
    Sasha
    Sasha
    Sasha
    Bodya
    
Note

Below you can find the explanation for the first testcase, where the game
consists of k=2 turns.

Turn| Bodya's position| Bodya's score| Bodya's move| Sasha's position| Sasha's
score| Sasha's move  
---|---|---|---|---|---|---  
first| 3 | 0 + a_3 = 0 + 5 = 5 | stays on the same position| 2 | 0 + a_2 = 0 + 2 = 2 | moves to p_2=1   
second| 3 | 5 + a_3 = 5 + 5 = 10 | stays on the same position| 1 | 2 + a_1 = 2 + 7 = 9 | stays on the same position  
final results| 3 | 10 | | 1 | 9 |   
  
As we may see, Bodya's score is greater, so he wins the game. It can be shown
that Bodya always can win this game.","def game(a, p, s, k):
  n = len(p)
  mx = 0
  cur = 0
  vis = [0 for _ in range(n)]
  while(not(vis[s]) and k > 0):
    vis[s] = 1 
    mx = max(mx, cur + k*a[s])
    cur += a[s]
    k-=1 
    s = p[s]
  return mx
 
 
 
 
 
for _ in range(int(input())):
  n, k, pb, ps = map(int, input().split())
  p = list(map(int, input().split()))
  a = list(map(int, input().split()))
  
  
  for i in range(n):
    p[i]-= 1 
    a[i]-= 1
  A = game(a, p, pb - 1, k)
  B = game(a, p, ps - 1, k)
  if A == B:
    print(""Draw"")
  elif A > B:
    print(""Bodya"")
  else:
    print(""Sasha"")",1,True,False,False,True,False,False,False,False,False,False,False,False,True,True,1.0,1.0,1.0
1968_D,1968_D_Mitttel_100%,codeforces2024,human,qwen2p5-72b-instruct,"Bodya and Sasha found a permutation p_1,\dots,p_n and an array a_1,\dots,a_n .
They decided to play a well-known ""Permutation game"".

A permutation of length n is an array consisting of n distinct integers from 1
to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

Both of them chose a starting position in the permutation.

The game lasts k turns. The players make moves simultaneously. On each turn,
two things happen to each player:

  * If the current position of the player is x , his score increases by a_x . 
  * Then the player either stays at his current position x or moves from x to p_x . 

The winner of the game is the player with the higher score after exactly k
turns.

Knowing Bodya's starting position P_B and Sasha's starting position P_S ,
determine who wins the game if both players are trying to win.

Input

The first line contains a single integer t (1\le t\le 10^4 ) — the number of
testcases.

The first line of each testcase contains integers n , k , P_B , P_S (1\le
P_B,P_S\le n\le 2\cdot 10^5 , 1\le k\le 10^9 ) — length of the permutation,
duration of the game, starting positions respectively.

The next line contains n integers p_1,\dots,p_n (1 \le p_i \le n ) — elements
of the permutation p .

The next line contains n integers a_1,\dots,a_n (1\le a_i\le 10^9 ) — elements
of array a .

It is guaranteed that the sum of values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each testcase output:

  * ""Bodya"" if Bodya wins the game. 
  * ""Sasha"" if Sasha wins the game. 
  * ""Draw"" if the players have the same score. 

Example

Input

    10
    
    4 2 3 2
    
    4 1 2 3
    
    7 2 5 6
    
    10 8 2 10
    
    3 1 4 5 2 7 8 10 6 9
    
    5 10 5 1 3 7 10 15 4 3
    
    2 1000000000 1 2
    
    1 2
    
    4 4
    
    8 10 4 1
    
    5 1 4 3 2 8 6 7
    
    1 1 2 1 2 100 101 102
    
    5 1 2 5
    
    1 2 4 5 3
    
    4 6 9 4 2
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    6 9 5 4
    
    6 1 3 5 2 4
    
    6 9 8 9 5 10
    
    4 8 4 2
    
    2 3 4 1
    
    5 2 8 7
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    2 1000000000 1 2
    
    1 2
    
    1000000000 2

Output

    Bodya
    Sasha
    Draw
    Draw
    Bodya
    Sasha
    Sasha
    Sasha
    Sasha
    Bodya
    
Note

Below you can find the explanation for the first testcase, where the game
consists of k=2 turns.

Turn| Bodya's position| Bodya's score| Bodya's move| Sasha's position| Sasha's
score| Sasha's move  
---|---|---|---|---|---|---  
first| 3 | 0 + a_3 = 0 + 5 = 5 | stays on the same position| 2 | 0 + a_2 = 0 + 2 = 2 | moves to p_2=1   
second| 3 | 5 + a_3 = 5 + 5 = 10 | stays on the same position| 1 | 2 + a_1 = 2 + 7 = 9 | stays on the same position  
final results| 3 | 10 | | 1 | 9 |   
  
As we may see, Bodya's score is greater, so he wins the game. It can be shown
that Bodya always can win this game.","def game(a, p, s, k):
  n = len(p)
  mx = 0
  cur = 0
  vis = [0 for _ in range(n)]
  while(not(vis[s]) and k > 0):
    vis[s] = 1 
    mx = max(mx, cur + k*a[s])
    cur += a[s]
    k-=1 
    s = p[s]
  return mx
 
 
 
 
 
for _ in range(int(input())):
  n, k, pb, ps = map(int, input().split())
  p = list(map(int, input().split()))
  a = list(map(int, input().split()))
  
  
  for i in range(n):
    p[i]-= 1 
    a[i]-= 1
  A = game(a, p, pb - 1, k)
  B = game(a, p, ps - 1, k)
  if A == B:
    print(""Draw"")
  elif A > B:
    print(""Bodya"")
  else:
    print(""Sasha"")",1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1946_B,1946_B_Timon_NEON_100%,codeforces2024,human,qwen2p5-72b-instruct,"You have an array a of n integers.

You perform exactly k operations on it. In one operation, you select any
contiguous subarray of the array a (possibly empty) and insert the sum of this
subarray anywhere in the array.

Your task is to find the maximum possible sum of the array after k such
operations.

As this number can be very large, output the answer modulo 10^9 + 7 .

Reminder: the remainder of a number x modulo p is the smallest non-negative y
such that there exists an integer q and x = p \cdot q + y .

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. Then follows the
description of the test cases.

The first line of each test case contains two integers n and k (1 \le n, k \le
2 \cdot 10^5 ) — the length of the array a and the number of operations,
respectively.

The second line of each test case contains n integers a_1, a_2, \ldots, a_n
(-10^9 \le a_i \le 10^9 ) — the array a itself.

It is guaranteed that the sum of the values of n and k for all test cases does
not exceed 2 \cdot 10^5 .

Output

For each test, output a single integer — the maximum sum of the array that can
be obtained after k operations modulo 10^9 + 7 .

Example

Input

    12
    
    2 2
    
    -4 -7
    
    3 3
    
    2 2 8
    
    1 7
    
    7
    
    5 1
    
    4 -2 8 -12 9
    
    7 4
    
    8 14 -9 6 0 -1 3
    
    7 100
    
    5 3 -8 12 -5 -9 3
    
    6 1000
    
    -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000
    
    2 1
    
    1000000000 8
    
    5 4
    
    0 0 0 0 0
    
    6 10
    
    48973 757292 58277 -38574 27475 999984
    
    7 1
    
    -1000 1000 -1000 1000 -1000 1000 -1000
    
    10 10050
    
    408293874 -3498597 7374783 295774930 -48574034 26623784 498754833 -294875830 283045804 85938045

Output

    999999996
    96
    896
    17
    351
    716455332
    42
    2
    0
    897909241
    0
    416571966
    
Note

In the first test case, it is advantageous to take an empty subarray of the
array twice and insert the sum of the empty subarray (zero) anywhere, then the
sum of the resulting array will be (-4) + (-7) + 0 + 0 = -11 , modulo 10^9 + 7
this is 999\,999\,996 .

In the second test case, it is advantageous to take the sum of the entire
array three times and place it anywhere in the array, then one of the possible
sequences of actions: [2, 2, 8 ] \rightarrow [2, 2, 8, 12 ] \rightarrow [2, 2,
8, 12, 24 ] \rightarrow [2, 2, 8, 12, 24, 48 ], the sum of the final array is
2 + 2 + 8 + 12 + 24 + 48 = 96 .

In the fourth test case, it is advantageous to take a subarray of the array
consisting of the first three numbers (i.e. consisting of the numbers 4, -2
and 8 ) and insert its sum at the beginning of the array, thereby obtaining
the array [10, 4, -2, 8, -12, 9 ], the sum of this array is 17 .

In the seventh test case, it will always be advantageous for us to take an
empty subarray of the array. In this case, the sum of the resulting array will
not differ from the sum of the original. The answer will be the sum of the
original array, taken modulo — 42 , because (-6 \cdot (10^9 + 7) + 42 =
-6\,000\,000\,000) .","from math import *
 
 
 
def mod(number):
    return number % 1000000007
 
def max_sum_segment(arr):
    new_segment = []
    max_segment = [0, 0]
    segments_variants = []
    max_sum = -1
    for i in range(len(arr)):
        #print(i)
        #print(new_segment)
        #print(max_segment)
        #print()
        if new_segment:
            if arr[i] < 0:
                if max_segment[0] > new_segment[0]:
                    segments_variants.append(max_segment + [i - 1])
                else:
                    segments_variants.append(new_segment + [i - 1])
                    max_segment = new_segment
                new_segment = []
                max_segment[0] += arr[i]
            else:
                max_segment[0] += arr[i]
                new_segment[0] += arr[i]
        else:
            if arr[i] >= 0:
                new_segment = [arr[i], i]
            max_segment[0] += arr[i]
    segments_variants.append(max_segment + [len(arr) - 1])
    segments_variants.append(new_segment + [len(arr) - 1])
    total_max_segment = [-1]
    #print(segments_variants)
    for segment in segments_variants:
        if total_max_segment[0] < segment[0] and len(segment) != 1:
            total_max_segment = segment
    return total_max_segment
 
def repeat(number, quantity):
    answer = 0
 
 
 
t = int(input())
 
for _ in range(t):
    n, k = map(int, input().split())
    a = list(map(int, input().split()))
 
    max_segment = max_sum_segment(a)
    #print(max_segment)
    if max_segment[0] == -1: max_segment[0] = 0
 
    answer = max_segment[0] * 2 ** k + sum(a) - max_segment[0]
    print(mod(answer))",1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1955_C,1955_C_dreamyc_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"n ships set out to explore the depths of the ocean. The ships are numbered
from 1 to n and follow each other in ascending order; the i -th ship has a
durability of a_i .

The Kraken attacked the ships k times in a specific order. First, it attacks
the first of the ships, then the last, then the first again, and so on.

Each attack by the Kraken reduces the durability of the ship by 1 . When the
durability of the ship drops to 0 , it sinks and is no longer subjected to
attacks (thus the ship ceases to be the first or last, and the Kraken only
attacks the ships that have not yet sunk). If all the ships have sunk, the
Kraken has nothing to attack and it swims away.

For example, if n=4 , k=5 , and a=[1, 2, 4, 3] , the following will happen:

  1. The Kraken attacks the first ship, its durability becomes zero and now a = [2, 4, 3] ; 
  2. The Kraken attacks the last ship, now a = [2, 4, 2] ; 
  3. The Kraken attacks the first ship, now a = [1, 4, 2] ; 
  4. The Kraken attacks the last ship, now a = [1, 4, 1] ; 
  5. The Kraken attacks the first ship, its durability becomes zero and now a = [4, 1] . 

How many ships were sunk after the Kraken's attack?

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains two integers n and k (1 \le n \le 2
\cdot 10^5 , 1 \le k \le 10^{15} ) — the number of ships and how many times
the Kraken will attack the ships.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^9 ) — the durability of the ships.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output the number of ships sunk by the Kraken on a
separate line.

Example

Input

    6
    
    4 5
    
    1 2 4 3
    
    4 6
    
    1 2 4 3
    
    5 20
    
    2 7 1 8 2
    
    2 2
    
    3 2
    
    2 15
    
    1 5
    
    2 7
    
    5 2

Output

    2
    3
    5
    0
    2
    2","from collections import deque
T = int(input())
 
def solve(n,k,nums):
    nums = deque(nums)
    ans = 0
    while k and len(nums) >= 2:
        a , b = nums.popleft()  , nums.pop()
        x = min(a,b)
        if k >= 2 * x:
            a -= x
            b -= x
            k -= 2 * x
        else:
            break
        if a > 0:
            nums.appendleft(a)
        else:
            ans += 1
        if b > 0:
            nums.append(b)
        else:
            ans += 1
    if k and len(nums) == 1 and k >= nums[0]:
        return ans + 1
    return ans
 
for _ in range(T):
    n, k = list(map(int, input().split(' ')))
    nums = list(map(int, input().split(' ')))
    ans = solve(n,k,nums)
    print(ans)",1,False,False,False,True,True,True,True,True,False,False,False,True,True,True,1.0,1.0,1.0
1955_C,1955_C_dreamyc_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"n ships set out to explore the depths of the ocean. The ships are numbered
from 1 to n and follow each other in ascending order; the i -th ship has a
durability of a_i .

The Kraken attacked the ships k times in a specific order. First, it attacks
the first of the ships, then the last, then the first again, and so on.

Each attack by the Kraken reduces the durability of the ship by 1 . When the
durability of the ship drops to 0 , it sinks and is no longer subjected to
attacks (thus the ship ceases to be the first or last, and the Kraken only
attacks the ships that have not yet sunk). If all the ships have sunk, the
Kraken has nothing to attack and it swims away.

For example, if n=4 , k=5 , and a=[1, 2, 4, 3] , the following will happen:

  1. The Kraken attacks the first ship, its durability becomes zero and now a = [2, 4, 3] ; 
  2. The Kraken attacks the last ship, now a = [2, 4, 2] ; 
  3. The Kraken attacks the first ship, now a = [1, 4, 2] ; 
  4. The Kraken attacks the last ship, now a = [1, 4, 1] ; 
  5. The Kraken attacks the first ship, its durability becomes zero and now a = [4, 1] . 

How many ships were sunk after the Kraken's attack?

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains two integers n and k (1 \le n \le 2
\cdot 10^5 , 1 \le k \le 10^{15} ) — the number of ships and how many times
the Kraken will attack the ships.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^9 ) — the durability of the ships.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output the number of ships sunk by the Kraken on a
separate line.

Example

Input

    6
    
    4 5
    
    1 2 4 3
    
    4 6
    
    1 2 4 3
    
    5 20
    
    2 7 1 8 2
    
    2 2
    
    3 2
    
    2 15
    
    1 5
    
    2 7
    
    5 2

Output

    2
    3
    5
    0
    2
    2","from collections import deque
T = int(input())
 
def solve(n,k,nums):
    nums = deque(nums)
    ans = 0
    while k and len(nums) >= 2:
        a , b = nums.popleft()  , nums.pop()
        x = min(a,b)
        if k >= 2 * x:
            a -= x
            b -= x
            k -= 2 * x
        else:
            break
        if a > 0:
            nums.appendleft(a)
        else:
            ans += 1
        if b > 0:
            nums.append(b)
        else:
            ans += 1
    if k and len(nums) == 1 and k >= nums[0]:
        return ans + 1
    return ans
 
for _ in range(T):
    n, k = list(map(int, input().split(' ')))
    nums = list(map(int, input().split(' ')))
    ans = solve(n,k,nums)
    print(ans)",1,False,False,False,True,True,True,True,True,False,False,False,True,True,True,1.0,1.0,1.0
1955_C,1955_C_dreamyc_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"n ships set out to explore the depths of the ocean. The ships are numbered
from 1 to n and follow each other in ascending order; the i -th ship has a
durability of a_i .

The Kraken attacked the ships k times in a specific order. First, it attacks
the first of the ships, then the last, then the first again, and so on.

Each attack by the Kraken reduces the durability of the ship by 1 . When the
durability of the ship drops to 0 , it sinks and is no longer subjected to
attacks (thus the ship ceases to be the first or last, and the Kraken only
attacks the ships that have not yet sunk). If all the ships have sunk, the
Kraken has nothing to attack and it swims away.

For example, if n=4 , k=5 , and a=[1, 2, 4, 3] , the following will happen:

  1. The Kraken attacks the first ship, its durability becomes zero and now a = [2, 4, 3] ; 
  2. The Kraken attacks the last ship, now a = [2, 4, 2] ; 
  3. The Kraken attacks the first ship, now a = [1, 4, 2] ; 
  4. The Kraken attacks the last ship, now a = [1, 4, 1] ; 
  5. The Kraken attacks the first ship, its durability becomes zero and now a = [4, 1] . 

How many ships were sunk after the Kraken's attack?

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains two integers n and k (1 \le n \le 2
\cdot 10^5 , 1 \le k \le 10^{15} ) — the number of ships and how many times
the Kraken will attack the ships.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^9 ) — the durability of the ships.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output the number of ships sunk by the Kraken on a
separate line.

Example

Input

    6
    
    4 5
    
    1 2 4 3
    
    4 6
    
    1 2 4 3
    
    5 20
    
    2 7 1 8 2
    
    2 2
    
    3 2
    
    2 15
    
    1 5
    
    2 7
    
    5 2

Output

    2
    3
    5
    0
    2
    2","from collections import deque
T = int(input())
 
def solve(n,k,nums):
    nums = deque(nums)
    ans = 0
    while k and len(nums) >= 2:
        a , b = nums.popleft()  , nums.pop()
        x = min(a,b)
        if k >= 2 * x:
            a -= x
            b -= x
            k -= 2 * x
        else:
            break
        if a > 0:
            nums.appendleft(a)
        else:
            ans += 1
        if b > 0:
            nums.append(b)
        else:
            ans += 1
    if k and len(nums) == 1 and k >= nums[0]:
        return ans + 1
    return ans
 
for _ in range(T):
    n, k = list(map(int, input().split(' ')))
    nums = list(map(int, input().split(' ')))
    ans = solve(n,k,nums)
    print(ans)",1,False,False,False,True,True,True,True,True,False,True,True,True,True,True,1.0,1.0,1.0
1951_C,1951_C_permaximum_100%,codeforces2024,human,qwen2p5-72b-instruct,"[Maître Gims - Est-ce que tu m'aimes ?](https://youtu.be/6TpyRE_juyA)

ඞ

As the CEO of a startup company, you want to reward each of your k employees
with a ticket to the upcoming concert. The tickets will be on sale for n days,
and by some time travelling, you have predicted that the price per ticket at
day i will be a_i . However, to prevent ticket hoarding, the concert
organizers have implemented the following measures:

  * A person may purchase no more than m tickets per day. 
  * If a person purchases x tickets on day i , all subsequent days (i.e. from day i+1 onwards) will have their prices per ticket increased by x . 

For example, if a = [1, 3, 8, 4, 5] and you purchase 2 tickets on day 1 , they
will cost 2 in total, and the prices from day 2 onwards will become [5, 10, 6,
7] . If you then purchase 3 more tickets on day 2 , they will cost in total an
additional 15 , and the prices from day 3 onwards will become [13, 9, 10] .

Find the minimum spending to purchase k tickets.

Input

Each test contains multiple test cases. The first line contains an integer t
(1 \le t \le 10^4 ) — the number of test cases. The description of the test
cases follows.

The first line of each test case contains three integers n , m , and k (1 \le
n \le 3 \cdot 10^5, 1 \le m \le 10^9, 1 \le k \le \min(nm, 10^9) ) — the
number of sale days, the maximum amount of ticket purchasable each day, and
the number of tickets to be bought at the end.

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\le a_i \le 10^9 ) — the price per ticket for each of the upcoming n days.

It is guaranteed that the sum of n over all test cases does not exceed 3 \cdot
10^5 .

Output

For each test case, print one integer: the minimum amount of money needed to
purchase exactly k tickets.

Example

Input

    4
    
    4 2 3
    
    8 6 4 2
    
    4 2 8
    
    8 6 4 2
    
    5 100 1
    
    10000 1 100 10 1000
    
    6 3 9
    
    5 5 5 5 5 5

Output

    10
    64
    1
    72
    
Note

In the first test case, one optimal way to buy 3 tickets is as follows:

  * Buy 0 tickets on the first day. The prices per ticket for the remaining days are [6, 4, 2] . 
  * Buy 0 tickets on the second day. The prices per ticket for the remaining days are [4, 2] . 
  * Buy 1 ticket on the third day with cost 4 . The price per ticket for the remaining day is [3] . 
  * Buy 2 tickets on the fourth day with cost 6 . 

In the second test case, there is only one way to buy 8 tickets:

  * Buy 2 tickets on the first day with cost 16 . The prices per ticket for the remaining days are [8, 6, 4] . 
  * Buy 2 tickets on the second day with cost 16 . The prices per ticket for the remaining days are [8, 6] . 
  * Buy 2 tickets on the third day with cost 16 . The price per ticket for the remaining day is [8] . 
  * Buy 2 tickets on the fourth day with cost 16 .","def min_cost_tickets(n, m, k, prices):
    # Create a priority queue to store the prices
    import heapq
    pq = [(price, i) for i, price in enumerate(prices)]
    heapq.heapify(pq)
    
    total_cost = 0
    tickets_bought = 0
    price_increase = 0
    
    while tickets_bought < k:
        # Get the cheapest ticket
        price, day = heapq.heappop(pq)
        price += price_increase
        
        # Calculate how many tickets we can buy on this day
        tickets_to_buy = min(m, k - tickets_bought)
        
        # Update total cost and tickets bought
        total_cost += price * tickets_to_buy
        tickets_bought += tickets_to_buy
        
        # Increase prices for subsequent days
        price_increase += tickets_to_buy
    
    return total_cost
 
# Read number of test cases
t = int(input())
 
for _ in range(t):
    # Read input for each test case
    n, m, k = map(int, input().split())
    prices = list(map(int, input().split()))
    
    # Calculate and print the result
    result = min_cost_tickets(n, m, k, prices)
    print(result)",1,True,False,True,True,True,True,True,True,False,False,True,True,True,True,1.0,1.0,1.0
1951_C,1951_C_permaximum_100%,codeforces2024,human,qwen2p5-72b-instruct,"[Maître Gims - Est-ce que tu m'aimes ?](https://youtu.be/6TpyRE_juyA)

ඞ

As the CEO of a startup company, you want to reward each of your k employees
with a ticket to the upcoming concert. The tickets will be on sale for n days,
and by some time travelling, you have predicted that the price per ticket at
day i will be a_i . However, to prevent ticket hoarding, the concert
organizers have implemented the following measures:

  * A person may purchase no more than m tickets per day. 
  * If a person purchases x tickets on day i , all subsequent days (i.e. from day i+1 onwards) will have their prices per ticket increased by x . 

For example, if a = [1, 3, 8, 4, 5] and you purchase 2 tickets on day 1 , they
will cost 2 in total, and the prices from day 2 onwards will become [5, 10, 6,
7] . If you then purchase 3 more tickets on day 2 , they will cost in total an
additional 15 , and the prices from day 3 onwards will become [13, 9, 10] .

Find the minimum spending to purchase k tickets.

Input

Each test contains multiple test cases. The first line contains an integer t
(1 \le t \le 10^4 ) — the number of test cases. The description of the test
cases follows.

The first line of each test case contains three integers n , m , and k (1 \le
n \le 3 \cdot 10^5, 1 \le m \le 10^9, 1 \le k \le \min(nm, 10^9) ) — the
number of sale days, the maximum amount of ticket purchasable each day, and
the number of tickets to be bought at the end.

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\le a_i \le 10^9 ) — the price per ticket for each of the upcoming n days.

It is guaranteed that the sum of n over all test cases does not exceed 3 \cdot
10^5 .

Output

For each test case, print one integer: the minimum amount of money needed to
purchase exactly k tickets.

Example

Input

    4
    
    4 2 3
    
    8 6 4 2
    
    4 2 8
    
    8 6 4 2
    
    5 100 1
    
    10000 1 100 10 1000
    
    6 3 9
    
    5 5 5 5 5 5

Output

    10
    64
    1
    72
    
Note

In the first test case, one optimal way to buy 3 tickets is as follows:

  * Buy 0 tickets on the first day. The prices per ticket for the remaining days are [6, 4, 2] . 
  * Buy 0 tickets on the second day. The prices per ticket for the remaining days are [4, 2] . 
  * Buy 1 ticket on the third day with cost 4 . The price per ticket for the remaining day is [3] . 
  * Buy 2 tickets on the fourth day with cost 6 . 

In the second test case, there is only one way to buy 8 tickets:

  * Buy 2 tickets on the first day with cost 16 . The prices per ticket for the remaining days are [8, 6, 4] . 
  * Buy 2 tickets on the second day with cost 16 . The prices per ticket for the remaining days are [8, 6] . 
  * Buy 2 tickets on the third day with cost 16 . The price per ticket for the remaining day is [8] . 
  * Buy 2 tickets on the fourth day with cost 16 .","def min_cost_tickets(n, m, k, prices):
    # Create a priority queue to store the prices
    import heapq
    pq = [(price, i) for i, price in enumerate(prices)]
    heapq.heapify(pq)
    
    total_cost = 0
    tickets_bought = 0
    price_increase = 0
    
    while tickets_bought < k:
        # Get the cheapest ticket
        price, day = heapq.heappop(pq)
        price += price_increase
        
        # Calculate how many tickets we can buy on this day
        tickets_to_buy = min(m, k - tickets_bought)
        
        # Update total cost and tickets bought
        total_cost += price * tickets_to_buy
        tickets_bought += tickets_to_buy
        
        # Increase prices for subsequent days
        price_increase += tickets_to_buy
    
    return total_cost
 
# Read number of test cases
t = int(input())
 
for _ in range(t):
    # Read input for each test case
    n, m, k = map(int, input().split())
    prices = list(map(int, input().split()))
    
    # Calculate and print the result
    result = min_cost_tickets(n, m, k, prices)
    print(result)",1,True,True,True,True,True,True,True,True,True,True,True,True,True,True,1.0,1.0,1.0
1951_C,1951_C_permaximum_100%,codeforces2024,human,qwen2p5-72b-instruct,"[Maître Gims - Est-ce que tu m'aimes ?](https://youtu.be/6TpyRE_juyA)

ඞ

As the CEO of a startup company, you want to reward each of your k employees
with a ticket to the upcoming concert. The tickets will be on sale for n days,
and by some time travelling, you have predicted that the price per ticket at
day i will be a_i . However, to prevent ticket hoarding, the concert
organizers have implemented the following measures:

  * A person may purchase no more than m tickets per day. 
  * If a person purchases x tickets on day i , all subsequent days (i.e. from day i+1 onwards) will have their prices per ticket increased by x . 

For example, if a = [1, 3, 8, 4, 5] and you purchase 2 tickets on day 1 , they
will cost 2 in total, and the prices from day 2 onwards will become [5, 10, 6,
7] . If you then purchase 3 more tickets on day 2 , they will cost in total an
additional 15 , and the prices from day 3 onwards will become [13, 9, 10] .

Find the minimum spending to purchase k tickets.

Input

Each test contains multiple test cases. The first line contains an integer t
(1 \le t \le 10^4 ) — the number of test cases. The description of the test
cases follows.

The first line of each test case contains three integers n , m , and k (1 \le
n \le 3 \cdot 10^5, 1 \le m \le 10^9, 1 \le k \le \min(nm, 10^9) ) — the
number of sale days, the maximum amount of ticket purchasable each day, and
the number of tickets to be bought at the end.

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\le a_i \le 10^9 ) — the price per ticket for each of the upcoming n days.

It is guaranteed that the sum of n over all test cases does not exceed 3 \cdot
10^5 .

Output

For each test case, print one integer: the minimum amount of money needed to
purchase exactly k tickets.

Example

Input

    4
    
    4 2 3
    
    8 6 4 2
    
    4 2 8
    
    8 6 4 2
    
    5 100 1
    
    10000 1 100 10 1000
    
    6 3 9
    
    5 5 5 5 5 5

Output

    10
    64
    1
    72
    
Note

In the first test case, one optimal way to buy 3 tickets is as follows:

  * Buy 0 tickets on the first day. The prices per ticket for the remaining days are [6, 4, 2] . 
  * Buy 0 tickets on the second day. The prices per ticket for the remaining days are [4, 2] . 
  * Buy 1 ticket on the third day with cost 4 . The price per ticket for the remaining day is [3] . 
  * Buy 2 tickets on the fourth day with cost 6 . 

In the second test case, there is only one way to buy 8 tickets:

  * Buy 2 tickets on the first day with cost 16 . The prices per ticket for the remaining days are [8, 6, 4] . 
  * Buy 2 tickets on the second day with cost 16 . The prices per ticket for the remaining days are [8, 6] . 
  * Buy 2 tickets on the third day with cost 16 . The price per ticket for the remaining day is [8] . 
  * Buy 2 tickets on the fourth day with cost 16 .","def min_cost_tickets(n, m, k, prices):
    # Create a priority queue to store the prices
    import heapq
    pq = [(price, i) for i, price in enumerate(prices)]
    heapq.heapify(pq)
    
    total_cost = 0
    tickets_bought = 0
    price_increase = 0
    
    while tickets_bought < k:
        # Get the cheapest ticket
        price, day = heapq.heappop(pq)
        price += price_increase
        
        # Calculate how many tickets we can buy on this day
        tickets_to_buy = min(m, k - tickets_bought)
        
        # Update total cost and tickets bought
        total_cost += price * tickets_to_buy
        tickets_bought += tickets_to_buy
        
        # Increase prices for subsequent days
        price_increase += tickets_to_buy
    
    return total_cost
 
# Read number of test cases
t = int(input())
 
for _ in range(t):
    # Read input for each test case
    n, m, k = map(int, input().split())
    prices = list(map(int, input().split()))
    
    # Calculate and print the result
    result = min_cost_tickets(n, m, k, prices)
    print(result)",1,True,True,True,True,True,True,False,False,True,False,False,True,True,True,1.0,1.0,1.0
1954_B,1954_B_turon00_100%,codeforces2024,human,qwen2p5-72b-instruct,"Let's call an array a beautiful if you can make all its elements the same by
using the following operation an arbitrary number of times (possibly, zero):

  * choose an index i (2 \le i \le |a| - 1 ) such that a_{i - 1} = a_{i + 1} , and replace a_i with a_{i - 1} . 

You are given a beautiful array a_1, a_2, \dots, a_n . What is the minimum
number of elements you have to remove from it in order for it to stop being
beautiful? Swapping elements is prohibited. If it is impossible to do so, then
output -1.

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first line of each test case contains a single integer n (1 \le n \le 3
\cdot 10^5 ).

The second line contains n integers a_1, a_2, \dots, a_n (1 \le a_i \le n ).

Additional constraints on the input:

  * in every test case, the given array a is beautiful; 
  * the sum of n over all test cases does not exceed 3 \cdot 10^5 . 

Output

For each test case, output a single integer — the minimum number of elements
you have to remove from the array a in order for it to stop being beautiful.
If it is impossible, then output -1.

Example

Input

    4
    
    3
    
    2 2 2
    
    5
    
    1 2 1 2 1
    
    1
    
    1
    
    7
    
    3 3 3 5 3 3 3

Output

    -1
    1
    -1
    3
    
Note

In the first testcase, it is impossible to modify the array in such a way that
it stops being beautiful. An array consisting of identical numbers will remain
beautiful no matter how many numbers we remove from it.

In the second testcase, you can remove the number at the index 5 , for
example.

The resulting array will be [1, 2, 1, 2] . Let's check if it is beautiful. Two
operations are available:

  * Choose i = 2 : the array becomes [1, 1, 1, 2] . No more operations can be applied to it, and the numbers are not all the same. 
  * Choose i = 3 instead: the array becomes [1, 2, 2, 2] . No more operations can be applied to it either, and the numbers are still not all the same. 

Thus, the array [1, 2, 1, 2] is not beautiful.

In the fourth testcase, you can remove the first three elements, for example.
The resulting array [5, 3, 3, 3] is not beautiful.","import math
import os
import random
import re
import sys
 
t = int(input())
for _ in range(t):
    n=int(input())
 
    a = list(map(int,input().strip().split()))
    tmp = a[0]
    cnt = 0
    ans = n
    for i in range(n):
        if a[i]==tmp:
            cnt+=1
        else:
            ans = min(ans,cnt)
            cnt = 0
 
    ans = min(ans,cnt)
    if n==1 or ans==n:
        print(-1)
    else:
        print(ans)",1,True,False,False,False,False,False,True,False,False,False,False,False,False,False,1.0,1.0,1.0
1968_E,1968_E_muzi123456_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an integer n . You choose n cells (x_1,y_1),
(x_2,y_2),\dots,(x_n,y_n) in the grid n\times n where 1\le x_i\le n and 1\le
y_i\le n .

Let \mathcal{H} be the set of distinct Manhattan distances between any pair of
cells. Your task is to maximize the size of \mathcal{H} . Examples of sets and
their construction are given in the notes.

If there exists more than one solution, you are allowed to output any.

Manhattan distance between cells (x_1,y_1) and (x_2,y_2) equals
|x_1-x_2|+|y_1-y_2| .

Input

The first line contains a single integer t (1\le t\le 50 ) — the number of
test cases.

Each of the following t lines contains a single integer n (2\le n\le 10^3 ).

Output

For each test case, output n points which maximize the size of \mathcal{H} .
It is not necessary to output an empty line at the end of the answer for each
test case.

Example

Input

    5
    
    2
    
    3
    
    4
    
    5
    
    6

Output

    1 1
    1 2
    
    2 1
    2 3
    3 1
    
    1 1
    1 3
    4 3
    4 4
    
    1 1
    1 3
    1 4
    2 1
    5 5
    
    1 4
    1 5
    1 6
    5 2
    5 5
    6 1
    
Note

In the first testcase we have n=2 . One of the possible arrangements is:

![](https://espresso.codeforces.com/4d7adaa08c9ee5ebf2a0caba13185ac968d6bcd9.png)
The arrangement with cells located in (1,1) and (1,2) . In this case
\mathcal{H}=\\{|1-1|+|1-1|,|1-1|+|2-2|,|1-1|+|1-2|\\}=\\{0,0,1\\}=\\{0,1\\} .
Hence, the size of \mathcal{H} is 2 . It can be shown that it is the greatest
possible answer.

In the second testcase we have n=3 . The optimal arrangement is:

![](https://espresso.codeforces.com/52d127e3dbe0141bb58dbdf4158586772a208758.png)
The arrangement with cells located in (2,1) , (2,3) and (3,1) .

\mathcal{H}
=\\{|2-2|+|1-1|,|2-2|+|3-3|,|3-3|+|1-1|,|2-2|+|1-3|,|2-3|+|1-1|,|2-3|+|3-1|\\}
=\\{0,0,0,2,1,3\\} =\\{0,1,2,3\\} .

For n=4 a possible arrangement is:

![](https://espresso.codeforces.com/575a6758d1f67174ceb877b32a1e89770cd2281a.png)

For n=5 a possible arrangement is:

![](https://espresso.codeforces.com/b790401b426625982c00d04cff13aceec53918b4.png)

For n=6 a possible arrangement is:

![](https://espresso.codeforces.com/d0f498905660a67115d9f58c6cbc1439ba6e509c.png)","t=int(input())
while t:
    t-=1
    n=int(input())
    for i in range(1,n+1):
        print(""1"",end=' ')
        print(i)
    print(' ')",1,False,False,False,True,False,True,True,False,False,False,False,True,False,True,1.0,1.0,1.0
1968_E,1968_E_muzi123456_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an integer n . You choose n cells (x_1,y_1),
(x_2,y_2),\dots,(x_n,y_n) in the grid n\times n where 1\le x_i\le n and 1\le
y_i\le n .

Let \mathcal{H} be the set of distinct Manhattan distances between any pair of
cells. Your task is to maximize the size of \mathcal{H} . Examples of sets and
their construction are given in the notes.

If there exists more than one solution, you are allowed to output any.

Manhattan distance between cells (x_1,y_1) and (x_2,y_2) equals
|x_1-x_2|+|y_1-y_2| .

Input

The first line contains a single integer t (1\le t\le 50 ) — the number of
test cases.

Each of the following t lines contains a single integer n (2\le n\le 10^3 ).

Output

For each test case, output n points which maximize the size of \mathcal{H} .
It is not necessary to output an empty line at the end of the answer for each
test case.

Example

Input

    5
    
    2
    
    3
    
    4
    
    5
    
    6

Output

    1 1
    1 2
    
    2 1
    2 3
    3 1
    
    1 1
    1 3
    4 3
    4 4
    
    1 1
    1 3
    1 4
    2 1
    5 5
    
    1 4
    1 5
    1 6
    5 2
    5 5
    6 1
    
Note

In the first testcase we have n=2 . One of the possible arrangements is:

![](https://espresso.codeforces.com/4d7adaa08c9ee5ebf2a0caba13185ac968d6bcd9.png)
The arrangement with cells located in (1,1) and (1,2) . In this case
\mathcal{H}=\\{|1-1|+|1-1|,|1-1|+|2-2|,|1-1|+|1-2|\\}=\\{0,0,1\\}=\\{0,1\\} .
Hence, the size of \mathcal{H} is 2 . It can be shown that it is the greatest
possible answer.

In the second testcase we have n=3 . The optimal arrangement is:

![](https://espresso.codeforces.com/52d127e3dbe0141bb58dbdf4158586772a208758.png)
The arrangement with cells located in (2,1) , (2,3) and (3,1) .

\mathcal{H}
=\\{|2-2|+|1-1|,|2-2|+|3-3|,|3-3|+|1-1|,|2-2|+|1-3|,|2-3|+|1-1|,|2-3|+|3-1|\\}
=\\{0,0,0,2,1,3\\} =\\{0,1,2,3\\} .

For n=4 a possible arrangement is:

![](https://espresso.codeforces.com/575a6758d1f67174ceb877b32a1e89770cd2281a.png)

For n=5 a possible arrangement is:

![](https://espresso.codeforces.com/b790401b426625982c00d04cff13aceec53918b4.png)

For n=6 a possible arrangement is:

![](https://espresso.codeforces.com/d0f498905660a67115d9f58c6cbc1439ba6e509c.png)","t=int(input())
while t:
    t-=1
    n=int(input())
    for i in range(1,n+1):
        print(""1"",end=' ')
        print(i)
    print(' ')",1,False,False,False,True,False,False,True,False,False,False,False,True,True,True,1.0,1.0,1.0
1968_E,1968_E_muzi123456_0.00%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an integer n . You choose n cells (x_1,y_1),
(x_2,y_2),\dots,(x_n,y_n) in the grid n\times n where 1\le x_i\le n and 1\le
y_i\le n .

Let \mathcal{H} be the set of distinct Manhattan distances between any pair of
cells. Your task is to maximize the size of \mathcal{H} . Examples of sets and
their construction are given in the notes.

If there exists more than one solution, you are allowed to output any.

Manhattan distance between cells (x_1,y_1) and (x_2,y_2) equals
|x_1-x_2|+|y_1-y_2| .

Input

The first line contains a single integer t (1\le t\le 50 ) — the number of
test cases.

Each of the following t lines contains a single integer n (2\le n\le 10^3 ).

Output

For each test case, output n points which maximize the size of \mathcal{H} .
It is not necessary to output an empty line at the end of the answer for each
test case.

Example

Input

    5
    
    2
    
    3
    
    4
    
    5
    
    6

Output

    1 1
    1 2
    
    2 1
    2 3
    3 1
    
    1 1
    1 3
    4 3
    4 4
    
    1 1
    1 3
    1 4
    2 1
    5 5
    
    1 4
    1 5
    1 6
    5 2
    5 5
    6 1
    
Note

In the first testcase we have n=2 . One of the possible arrangements is:

![](https://espresso.codeforces.com/4d7adaa08c9ee5ebf2a0caba13185ac968d6bcd9.png)
The arrangement with cells located in (1,1) and (1,2) . In this case
\mathcal{H}=\\{|1-1|+|1-1|,|1-1|+|2-2|,|1-1|+|1-2|\\}=\\{0,0,1\\}=\\{0,1\\} .
Hence, the size of \mathcal{H} is 2 . It can be shown that it is the greatest
possible answer.

In the second testcase we have n=3 . The optimal arrangement is:

![](https://espresso.codeforces.com/52d127e3dbe0141bb58dbdf4158586772a208758.png)
The arrangement with cells located in (2,1) , (2,3) and (3,1) .

\mathcal{H}
=\\{|2-2|+|1-1|,|2-2|+|3-3|,|3-3|+|1-1|,|2-2|+|1-3|,|2-3|+|1-1|,|2-3|+|3-1|\\}
=\\{0,0,0,2,1,3\\} =\\{0,1,2,3\\} .

For n=4 a possible arrangement is:

![](https://espresso.codeforces.com/575a6758d1f67174ceb877b32a1e89770cd2281a.png)

For n=5 a possible arrangement is:

![](https://espresso.codeforces.com/b790401b426625982c00d04cff13aceec53918b4.png)

For n=6 a possible arrangement is:

![](https://espresso.codeforces.com/d0f498905660a67115d9f58c6cbc1439ba6e509c.png)","t=int(input())
while t:
    t-=1
    n=int(input())
    for i in range(1,n+1):
        print(""1"",end=' ')
        print(i)
    print(' ')",1,False,False,False,False,False,True,True,False,False,False,False,False,False,False,1.0,1.0,1.0
1957_B,1957_B_Sukhbir_bachhal_100%,codeforces2024,human,qwen2p5-72b-instruct,"Given integers n and k , construct a sequence of n non-negative (i.e. \geq 0 )
integers a_1, a_2, \ldots, a_n such that

  1. \sum\limits_{i = 1}^n a_i = k 
  2. The number of 1 s in the binary representation of a_1 | a_2 | \ldots | a_n is maximized, where | denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR). 

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The only line of each test case contains two integers n and k (1 \leq n \leq 2
\cdot 10^5 , 1 \leq k \leq 10^9 ) — the number of non-negative integers to be
printed and the sum respectively.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output a sequence a_1, a_2, \ldots, a_n on a new line that
satisfies the conditions given above.

If there are multiple solutions, print any of them.

Example

Input

    4
    
    1 5
    
    2 3
    
    2 5
    
    6 51

Output

    5
    1 2
    5 0
    3 1 1 32 2 12

Note

In the first test case, we have to print exactly one integer, hence we can
only output 5 as the answer.

In the second test case, we output 1, 2 which sum up to 3 , and 1 | 2 = (11)_2 has two 1 s in its binary representation, which is the maximum we can achieve in these constraints.

In the fourth test case, we output 3, 1, 1, 32, 2, 12 which sum up to 51 , and 3 | 1 | 1 | 32 | 2 | 12 = (101\,111)_2 has five 1 s in its binary representation, which is the maximum we can achieve in these constraints.","t = int(input())
def highest_set_bit(n):
    if n == 0:
        return -1  # No bits are set in 0
    position = 0
    while n != 0:
        n >>= 1
        position += 1
    return position - 1
for _ in range(t):
    n,k = [int(x) for x in input().split()]
    arr = []
    if n>1:
        counter = highest_set_bit(k)
        arr.append(2**(counter)-1)
        arr.append(k-arr[-1])
        for _ in range(n-2):
            arr.append(0)
        print(*arr)
    else:
        print(k)",1,True,False,False,True,False,True,True,True,False,False,False,True,True,True,1.0,1.0,1.0
1957_B,1957_B_Sukhbir_bachhal_100%,codeforces2024,human,qwen2p5-72b-instruct,"Given integers n and k , construct a sequence of n non-negative (i.e. \geq 0 )
integers a_1, a_2, \ldots, a_n such that

  1. \sum\limits_{i = 1}^n a_i = k 
  2. The number of 1 s in the binary representation of a_1 | a_2 | \ldots | a_n is maximized, where | denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR). 

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The only line of each test case contains two integers n and k (1 \leq n \leq 2
\cdot 10^5 , 1 \leq k \leq 10^9 ) — the number of non-negative integers to be
printed and the sum respectively.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output a sequence a_1, a_2, \ldots, a_n on a new line that
satisfies the conditions given above.

If there are multiple solutions, print any of them.

Example

Input

    4
    
    1 5
    
    2 3
    
    2 5
    
    6 51

Output

    5
    1 2
    5 0
    3 1 1 32 2 12

Note

In the first test case, we have to print exactly one integer, hence we can
only output 5 as the answer.

In the second test case, we output 1, 2 which sum up to 3 , and 1 | 2 = (11)_2 has two 1 s in its binary representation, which is the maximum we can achieve in these constraints.

In the fourth test case, we output 3, 1, 1, 32, 2, 12 which sum up to 51 , and 3 | 1 | 1 | 32 | 2 | 12 = (101\,111)_2 has five 1 s in its binary representation, which is the maximum we can achieve in these constraints.","t = int(input())
def highest_set_bit(n):
    if n == 0:
        return -1  # No bits are set in 0
    position = 0
    while n != 0:
        n >>= 1
        position += 1
    return position - 1
for _ in range(t):
    n,k = [int(x) for x in input().split()]
    arr = []
    if n>1:
        counter = highest_set_bit(k)
        arr.append(2**(counter)-1)
        arr.append(k-arr[-1])
        for _ in range(n-2):
            arr.append(0)
        print(*arr)
    else:
        print(k)",1,True,False,False,True,False,True,True,True,False,True,False,True,True,False,1.0,1.0,1.0
1957_B,1957_B_Sukhbir_bachhal_100%,codeforces2024,human,qwen2p5-72b-instruct,"Given integers n and k , construct a sequence of n non-negative (i.e. \geq 0 )
integers a_1, a_2, \ldots, a_n such that

  1. \sum\limits_{i = 1}^n a_i = k 
  2. The number of 1 s in the binary representation of a_1 | a_2 | \ldots | a_n is maximized, where | denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR). 

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The only line of each test case contains two integers n and k (1 \leq n \leq 2
\cdot 10^5 , 1 \leq k \leq 10^9 ) — the number of non-negative integers to be
printed and the sum respectively.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output a sequence a_1, a_2, \ldots, a_n on a new line that
satisfies the conditions given above.

If there are multiple solutions, print any of them.

Example

Input

    4
    
    1 5
    
    2 3
    
    2 5
    
    6 51

Output

    5
    1 2
    5 0
    3 1 1 32 2 12

Note

In the first test case, we have to print exactly one integer, hence we can
only output 5 as the answer.

In the second test case, we output 1, 2 which sum up to 3 , and 1 | 2 = (11)_2 has two 1 s in its binary representation, which is the maximum we can achieve in these constraints.

In the fourth test case, we output 3, 1, 1, 32, 2, 12 which sum up to 51 , and 3 | 1 | 1 | 32 | 2 | 12 = (101\,111)_2 has five 1 s in its binary representation, which is the maximum we can achieve in these constraints.","t = int(input())
def highest_set_bit(n):
    if n == 0:
        return -1  # No bits are set in 0
    position = 0
    while n != 0:
        n >>= 1
        position += 1
    return position - 1
for _ in range(t):
    n,k = [int(x) for x in input().split()]
    arr = []
    if n>1:
        counter = highest_set_bit(k)
        arr.append(2**(counter)-1)
        arr.append(k-arr[-1])
        for _ in range(n-2):
            arr.append(0)
        print(*arr)
    else:
        print(k)",1,True,False,False,True,False,True,True,True,False,True,True,True,True,True,1.0,1.0,1.0
1932_C,1932_C_yogurtraj_100%,codeforces2024,human,qwen2p5-72b-instruct,"You are given an array a of length n , a positive integer m , and a string of
commands of length n . Each command is either the character 'L' or the
character 'R'.

Process all n commands in the order they are written in the string s .
Processing a command is done as follows:

  * First, output the remainder of the product of all elements of the array a when divided by m . 
  * Then, if the command is 'L', remove the leftmost element from the array a , if the command is 'R', remove the rightmost element from the array a . 

Note that after each move, the length of the array a decreases by 1 , and
after processing all commands, it will be empty.

Write a program that will process all commands in the order they are written
in the string s (from left to right).

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases in the input. Then descriptions of t test cases follow.

Each test case of the input is given by three lines.

The first line contains two integers n and m (1 \le n \le 2\cdot10^5, 1 \le m
\le 10^4 ) — the initial length of the array a and the value to take the
remainder by.

The second line contains n integers a_1, a_2, \dots, a_n (1 \le a_i \le 10^4 )
— the elements of the array a .

The third line contains a string s consisting of n characters 'L' and 'R'.

It is guaranteed that the sum of the values of n for all test cases in a test
does not exceed 2\cdot10^5 .

Output

For each test case, output n integers b_1, b_2, \dots, b_n , where b_i is the
remainder when dividing the product of all elements of the current state of
the array a by m at the beginning of the execution of the i -th command.

Example

Input

    4
    
    4 6
    
    3 1 4 2
    
    LRRL
    
    5 1
    
    1 1 1 1 1
    
    LLLLL
    
    6 8
    
    1 2 3 4 5 6
    
    RLLLRR
    
    1 10000
    
    10000
    
    R

Output

    0 2 4 1 
    0 0 0 0 0 
    0 0 0 4 4 4 
    0 
    
Note

In the first test case of the example:

  * 3 \cdot 1 \cdot 4 \cdot 2 \bmod 6 = 24 \bmod 6 = 0 ;
  * s_1 = \text{L} , so we remove the first element and get the array [1, 4, 2] ;
  * 1 \cdot 4 \cdot 2 \bmod 6 = 8 \bmod 6 = 2 ;
  * s_2 = \text{R} , so we remove the last element and get the array [1, 4] ;
  * 1 \cdot 4 \bmod 6 = 4 \bmod 6 = 4 ;
  * s_3 = \text{R} , so we remove the last element and get the array [1] ;
  * 1 \bmod 6 = 1 ;
  * s_4 = \text{L} , so we remove the first element and get an empty array.","for ii in range(int(input())):
  n,m = map(int,input().split())
  a = list(map(int,input().split()))
  t = input()
  l = t.count(""L"")
  k = 0
  q1 = 0
  q2 = 0
  if t[-1]==""L"":
    k = a[l-1]%m
    q1 = l-2
    q2 = l
  else:
    k = a[l]%m
    q1 = l-1
    q2 = l+1
  y = [0]*n
  y[-1] = k
  for i in range(n-2,-1,-1):
    if t[i]==""R"":
      k = (k*a[q2])%m
      q2+=1
    else:
      k = (k*a[q1])%m
      q1-=1
    y[i] = k
  
  print(*y)",1,True,False,False,False,False,False,False,False,False,False,False,False,False,False,1.0,1.0,1.0
1951_A,1951_A_dhamer69_33.33%,codeforces2024,human,qwen2p5-72b-instruct,"import os def generate_files_for_html_in_range(start, end): # 获取当前目录下的所有子文件夹
current_dir = os.getcwd() subfolders = [f.path for f in
os.scandir(current_dir) if f.is_dir()] for folder in subfolders: #
检查文件夹名称是否在指定范围内 folder_name = os.path.basename(folder) if
folder_name.isdigit() and start <= int(folder_name) <= end: #
获取子文件夹中的所有.html文件 html_files = [f for f in os.listdir(folder) if
f.endswith('.html')] print(f""Folder '{folder}' contains {len(html_files)} HTML
files."") # 为每个.html文件生成对应的文件 for html_file in html_files: base_name =
os.path.splitext(html_file)[0] ac_file = os.path.join(folder,
f""{base_name}-ac.py"") wa_file = os.path.join(folder, f""{base_name}-wa.py"") #
创建文件 open(ac_file, 'w').close() open(wa_file, 'w').close() print(f""Generated
files: {ac_file}, {wa_file}"") if __name__ == ""__main__"": # 指定目录范围 start_range
= 1951 end_range = 1980 generate_files_for_html_in_range(start_range,
end_range)","t=int(input())
while(t>0):
    n=int(input())
    s=input()
    if n==2:
        if s==""00"":
            print(""YES"")
        else:
            print(""NO"")
    else:
        count_1=s.count(""1"")
        if count_1%2!=0:
            print(""NO"")
        else:
            if s.count(""11"")==1:
                print(""NO"")
            else:
                print(""YES"")
    t-=1",1,False,False,False,False,False,True,False,True,False,False,False,False,False,False,1.0,1.0,1.0
1951_A,1951_A_dhamer69_33.33%,codeforces2024,human,qwen2p5-72b-instruct,"import os def generate_files_for_html_in_range(start, end): # 获取当前目录下的所有子文件夹
current_dir = os.getcwd() subfolders = [f.path for f in
os.scandir(current_dir) if f.is_dir()] for folder in subfolders: #
检查文件夹名称是否在指定范围内 folder_name = os.path.basename(folder) if
folder_name.isdigit() and start <= int(folder_name) <= end: #
获取子文件夹中的所有.html文件 html_files = [f for f in os.listdir(folder) if
f.endswith('.html')] print(f""Folder '{folder}' contains {len(html_files)} HTML
files."") # 为每个.html文件生成对应的文件 for html_file in html_files: base_name =
os.path.splitext(html_file)[0] ac_file = os.path.join(folder,
f""{base_name}-ac.py"") wa_file = os.path.join(folder, f""{base_name}-wa.py"") #
创建文件 open(ac_file, 'w').close() open(wa_file, 'w').close() print(f""Generated
files: {ac_file}, {wa_file}"") if __name__ == ""__main__"": # 指定目录范围 start_range
= 1951 end_range = 1980 generate_files_for_html_in_range(start_range,
end_range)","t=int(input())
while(t>0):
    n=int(input())
    s=input()
    if n==2:
        if s==""00"":
            print(""YES"")
        else:
            print(""NO"")
    else:
        count_1=s.count(""1"")
        if count_1%2!=0:
            print(""NO"")
        else:
            if s.count(""11"")==1:
                print(""NO"")
            else:
                print(""YES"")
    t-=1",1,False,False,False,True,False,True,True,False,False,False,False,True,False,False,1.0,1.0,1.0
1951_A,1951_A_dhamer69_33.33%,codeforces2024,human,qwen2p5-72b-instruct,"import os def generate_files_for_html_in_range(start, end): # 获取当前目录下的所有子文件夹
current_dir = os.getcwd() subfolders = [f.path for f in
os.scandir(current_dir) if f.is_dir()] for folder in subfolders: #
检查文件夹名称是否在指定范围内 folder_name = os.path.basename(folder) if
folder_name.isdigit() and start <= int(folder_name) <= end: #
获取子文件夹中的所有.html文件 html_files = [f for f in os.listdir(folder) if
f.endswith('.html')] print(f""Folder '{folder}' contains {len(html_files)} HTML
files."") # 为每个.html文件生成对应的文件 for html_file in html_files: base_name =
os.path.splitext(html_file)[0] ac_file = os.path.join(folder,
f""{base_name}-ac.py"") wa_file = os.path.join(folder, f""{base_name}-wa.py"") #
创建文件 open(ac_file, 'w').close() open(wa_file, 'w').close() print(f""Generated
files: {ac_file}, {wa_file}"") if __name__ == ""__main__"": # 指定目录范围 start_range
= 1951 end_range = 1980 generate_files_for_html_in_range(start_range,
end_range)","t=int(input())
while(t>0):
    n=int(input())
    s=input()
    if n==2:
        if s==""00"":
            print(""YES"")
        else:
            print(""NO"")
    else:
        count_1=s.count(""1"")
        if count_1%2!=0:
            print(""NO"")
        else:
            if s.count(""11"")==1:
                print(""NO"")
            else:
                print(""YES"")
    t-=1",1,False,False,False,False,False,True,False,False,False,False,False,False,False,False,1.0,1.0,1.0
