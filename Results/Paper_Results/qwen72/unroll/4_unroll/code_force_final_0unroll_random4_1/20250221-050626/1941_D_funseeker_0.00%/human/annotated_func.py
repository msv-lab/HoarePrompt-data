#State of the program right berfore the function call: None of the variables in the function signature are used, as the function does not take any parameters.
def func_1():
    return sys.stdin.readline().strip()
    #The program returns the first line of input from the user, with any trailing whitespace removed.
#Overall this is what the function does:The function `func_1` reads the first line of input from the user (via standard input) and returns it with any trailing whitespace removed. The function does not take any parameters and does not modify any external variables. After the function concludes, the program has the first line of user input available as a string with trailing whitespace stripped.

#State of the program right berfore the function call: None
def func_2():
    return int(func_1())
    #The program returns an integer value that is the result of calling the function `func_1()`.
#Overall this is what the function does:The function `func_2` does not accept any parameters and returns an integer value that is the result of calling the function `func_1()`. After the function concludes, the program state is unchanged except for the returned integer value.

#State of the program right berfore the function call: None of the variables in the function signature are used, as the function does not take any parameters.
def func_3():
    return list(map(int, func_1().split()))
    #The program returns a list of integers obtained by splitting the string returned by `func_1()` and converting each split part into an integer.
#Overall this is what the function does:The function `func_3` does not accept any parameters. It returns a list of integers derived from splitting the string returned by `func_1()` and converting each split part into an integer.

#State of the program right berfore the function call: n, m, and x are integers such that 2 <= n <= 1000, 1 <= m <= 1000, and 1 <= x <= n.
def func_4():
    n, m, x = func_3()
    ans = {x}
    for _ in range(m):
        r, c = func_1().split()
        
        r = int(r)
        
        temp = set()
        
        for q in ans:
            if c == '0' or c == '?':
                temp.add((q + r) % n)
            if c == '1' or c == '?':
                temp.add((q - r) % n)
        
        ans = temp
        
    #State: `n`, `m`, and `x` remain unchanged. `ans` is a set containing all possible values generated by the operations `(q + r) % n` and `(q - r) % n` for each `q` in the initial set and each `r` and `c` returned by `func_1()`, repeated `m` times.
    if (0 in ans) :
        ans.discard(0)
        ans.add(n)
    #State: *`n`, `m`, and `x` remain unchanged. `ans` is a set containing all possible values generated by the operations `(q + r) % n` and `(q - r) % n` for each `q` in the initial set and each `r` and `c` returned by `func_1()`, repeated `m` times. If `0` is in `ans`, then `0` is excluded from `ans` and `n` is added to `ans`. Otherwise, `ans` remains the same.
    print(len(ans))
    #This is printed: len(ans) (where ans is the set containing all unique values generated by the operations (q + r) % n and (q - r) % n for each q in the initial set and each r and c returned by func_1(), repeated m times, with 0 excluded and n added if 0 is present)
    print(*ans)
    #This is printed: [values in ans] (where ans is a set containing all possible values generated by the operations (q + r) % n and (q - r) % n for each q in the initial set and each r and c returned by func_1(), repeated m times, and if 0 is in ans, it is replaced by n)
#Overall this is what the function does:The function `func_4` accepts no parameters and returns no values. It operates on three integer variables `n`, `m`, and `x` (where 2 <= n <= 1000, 1 <= m <= 1000, and 1 <= x <= n) that are obtained from the function `func_3`. The function generates a set `ans` of all possible values derived from the operations `(q + r) % n` and `(q - r) % n` for each `q` in the initial set `{x}` and each `r` and `c` returned by `func_1()`, repeated `m` times. If `0` is present in `ans`, it is replaced by `n`. The function then prints the number of unique values in `ans` and the values themselves. The variables `n`, `m`, and `x` remain unchanged throughout the function's execution.

