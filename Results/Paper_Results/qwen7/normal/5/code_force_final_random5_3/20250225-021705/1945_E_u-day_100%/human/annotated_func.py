#State of the program right berfore the function call: t is an integer such that 1 ≤ t ≤ 2⋅10^4, n and x are integers such that 1 ≤ x ≤ n ≤ 2⋅10^5, and p is a list of n distinct integers from 1 to n.
def func_1():
    return map(int, input().split())
    #The program returns a map object containing integers split from user input.
#Overall this is what the function does:The function reads a line of space-separated integers from the user, converts them to integers, and returns a map object containing these integers.

#State of the program right berfore the function call: t is a positive integer representing the number of test cases, each test case consists of two integers n and x where 1 ≤ x ≤ n ≤ 2⋅10^5, and a permutation p of length n consisting of integers from 1 to n.
def func_2():
    return list(func_1())
    #The program returns a list generated by func_1(), but the specific content of this list cannot be determined without knowing the implementation of func_1().
#Overall this is what the function does:The function accepts no direct parameters and relies on the output of `func_1()`. It returns a list generated by `func_1()`. The specific content of this list is not determined by this function itself but rather by the implementation of `func_1()`.

#State of the program right berfore the function call: n is a positive integer representing the length of the permutation, k is an integer such that 1 ≤ k ≤ n, and arr is a list of n distinct integers from 1 to n representing the permutation.
def func_3():
    n, k = func_1()
    arr = func_2()
    pos = -1
    for i in range(n):
        if arr[i] == k:
            pos = i
        
    #State: Output State: `pos` is 2, `n` is greater than 0, `i` is equal to `n-1`.
    #
    #Explanation: The loop iterates from `i = 0` to `i = n-1`. After the loop has executed all its iterations, the final value of `i` will be `n-1`. Since the loop updates `pos` only when it finds an element in `arr` that equals `k`, and given that the loop has completed all iterations, `pos` will be set to the index where `k` was found, or remain 0 if `k` was not found in any of the elements of `arr`. In the provided output states, `pos` is incremented each time the condition `arr[i] == k` is met and the loop has not yet reached its last iteration. Therefore, after all iterations, `pos` will be the index of the last occurrence of `k` in `arr`, or 0 if `k` does not appear in `arr`. The variable `n` must remain greater than 0, and `i` will be `n-1` after the loop completes.
    low, high = 0, n
    st = set()
    while low + 1 < high:
        mid = (low + high) // 2
        
        st.add(mid)
        
        if arr[mid] > k:
            high = mid
        else:
            low = mid
        
    #State: `pos` is 2, `n` is greater than 0, `i` is equal to `n-1`, `low` and `high` are such that `low + 1 < high`, `mid` is added to set `st` multiple times, and `mid` is updated to `(low + high) // 2` in each iteration until the final search range cannot be further narrowed.
    if (arr[low] == k) :
        print(0)
        #This is printed: 0
    else :
        print(1)
        #This is printed: 1
        print(low + 1, pos + 1)
        #This is printed: 2 3
    #State: Postcondition: `pos` is 2, `n` is greater than 0, `i` is equal to `n-1`, `low` and `high` are such that `low + 1 < high`, `mid` is added to set `st` multiple times, and `mid` is updated to `(low + high) // 2` in each iteration until the final search range cannot be further narrowed. Additionally, `arr[low]` is either equal to `k` or not equal to `k`.
#Overall this is what the function does:The function accepts a positive integer `n` representing the length of the permutation, an integer `k` such that 1 ≤ k ≤ n, and a list `arr` of `n` distinct integers from 1 to n representing the permutation. It searches for the position of `k` in `arr` and performs a binary search to find the largest index less than `k` if `k` is not found. Finally, it prints either 0 or 1 based on whether `k` is found, and if 1 is printed, it also prints the indices of `k` and the largest index less than `k`.

