#State of the program right berfore the function call: t is a positive integer such that 1 ≤ t ≤ 5 ⋅ 10^4. For each test case, n and k are positive integers such that 1 ≤ k ≤ n ≤ 10^9.
def func():
    t = int(input())
    for _ in range(t):
        n, k = map(int, input().split())
        
        L = []
        
        while n:
            m = (n + 1) // 2
            n -= m
            L.append(m)
        
        tot = 0
        
        pow = 1
        
        for a in L:
            if tot < k and k <= tot + a:
                print(pow * (2 * (k - tot) - 1))
            tot += a
            pow *= 2
        
    #State: Output State: `a` is 1, `L` is [], `tot` is 31, `k` is 15, `pow` is 32, `m` is 1, `n` is 0.
    #
    #Explanation: After all iterations of the loop have finished, the list `L` will be empty because all elements have been processed. The variable `tot` will sum up all elements in `L` during the iterations, which results in 31 (1 + 1 + 2 + 4 + 8 + 16). The variable `k` remains 15 as it did not change throughout the loop. The variable `pow` doubles with each iteration, starting from 1, and after 5 iterations, `pow` is 32. The variables `m` and `n` are not affected by the loop and remain unchanged at 1 and 0 respectively.
#Overall this is what the function does:The function processes multiple test cases, each consisting of two positive integers \( n \) and \( k \), where \( 1 \leq k \leq n \leq 10^9 \). For each test case, it calculates a value based on the sequence generated by repeatedly dividing \( n \) by 2 and appending the result to a list until \( n \) becomes 0. It then determines and prints a specific value derived from the list and the given \( k \). The function does not return any value but outputs the calculated value for each test case.

