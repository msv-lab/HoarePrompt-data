#State of the program right berfore the function call: t is an integer such that 1 ≤ t ≤ 2⋅10^4. Each test case consists of two integers n and x such that 1 ≤ x ≤ n ≤ 2⋅10^5, and a list of integers p which is a permutation of size n.
def func_1():
    return map(int, input().split())
    #The program returns a map object containing integers parsed from user input. The input consists of two integers n and x followed by a list of n integers, where the list is a permutation of size n.
#Overall this is what the function does:The function processes user input consisting of two integers \( n \) and \( x \), followed by a list of \( n \) integers, where the list is a permutation of size \( n \). It returns a map object containing the integers parsed from the user input.

#State of the program right berfore the function call: t is an integer such that 1 ≤ t ≤ 2⋅10^4. Each test case consists of two integers n and x such that 1 ≤ x ≤ n ≤ 2⋅10^5, and a permutation p of length n consisting of distinct integers from 1 to n.
def func_2():
    return list(func_1())
    #The program returns a list generated by func_1(), but the specific content of the list depends on the implementation of func_1() which is not provided.
#Overall this is what the function does:The function accepts no parameters and returns a list generated by `func_1()`. The specific content of the list depends on the implementation of `func_1()`.

#State of the program right berfore the function call: n is a positive integer representing the length of the permutation, k is an integer such that 1 ≤ k ≤ n, and arr is a list of n distinct integers from 1 to n representing the permutation.
def func_3():
    n, k = func_1()
    arr = func_2()
    pos = -1
    for i in range(n):
        if arr[i] == k:
            pos = i
        
    #State: The final value of `i` is `n-1`, `n` is a positive integer, and `pos` is either the index where `arr[i] == k` was found or -1 if `k` is not in `arr`.
    low, high = 0, n - 1
    st = set()
    while low + 1 < high:
        mid = (low + high) // 2
        
        st.add(mid)
        
        if arr[mid] > k:
            high = mid
        else:
            low = mid
        
    #State: Output State: The loop terminates when `low + 1 >= high`. At this point, `low` will be equal to `high - 1`, and `st` will contain all the midpoints calculated during the iterations. The value of `mid` will be the last midpoint calculated before the loop condition was no longer satisfied. The values of `arr[mid]` will either be greater than `k` or less than or equal to `k`, depending on the position of `k` within the array `arr`.
    #
    #In more detail, the output state will be:
    #- `low` and `high` will be consecutive integers such that `low + 1 == high`.
    #- `st` will be a set containing all the unique midpoints calculated during the loop iterations.
    #- `mid` will be the last midpoint calculated, which is `(low + high) // 2`.
    #- `arr[mid]` will either be greater than `k` or less than or equal to `k`, depending on the binary search process.
    if (arr[low] == k) :
        print(0)
        #This is printed: 0
    else :
        print(1)
        #This is printed: 1
        print(low + 1, pos + 1)
        #This is printed: high, mid + 2
    #State: `low` and `high` are consecutive integers such that `low + 1 == high`. `st` is a set containing all the unique midpoints calculated during the loop iterations. `mid` is the last midpoint calculated, which is `(low + high) // 2`. `arr[mid]` is either equal to `k` or either greater than `k` or less than or equal to `k`, depending on the binary search process.
#Overall this is what the function does:The function takes three inputs: `n` (the length of the permutation), `k` (an integer between 1 and `n`), and `arr` (a list of `n` distinct integers from 1 to `n`). It performs a binary search on `arr` to find the position of `k`. If `k` is found, it prints `0`. If `k` is not found, it prints `1` followed by the indices `high` and `pos + 1`. The function returns nothing but prints the result based on the search outcome.

