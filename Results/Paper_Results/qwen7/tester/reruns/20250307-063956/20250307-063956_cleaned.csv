Task ID,unique_id,Dataset,model_created,model_run,description,Code,run_number,original correctness,tester
1924_A,1924_A_dhruvdd8888_100%,codeforces2024,human,qwen2.5-7b-instruct,"You are given two integers n and k along with a string s .

Your task is to check whether all possible strings of length n that can be
formed using the first k lowercase English alphabets occur as a subsequence of
s . If the answer is NO, you also need to print a string of length n that can
be formed using the first k lowercase English alphabets which does not occur
as a subsequence of s .

If there are multiple answers, you may print any of them.

Note: A string a is called a subsequence of another string b if a can be
obtained by deleting some (possibly zero) characters from b without changing
the order of the remaining characters.

Input

The first line of input contains a single integer t \, (1 \le t \le 10^5) ,
the number of test cases.

The first line of each test case contains 3 integers n \, (1 \le n \le 26), \:
k \, (1 \le k \le 26), \: m \, (1 \le m \le 1000) , where n and k are the same
as described in the input and m is the length of the string s .

The second line of each test case contains a single string s of length m ,
comprising only of the first k lowercase English alphabets.

It is guaranteed that the sum of m and the sum of n over all test cases does
not exceed 10^6 .

Output

For each test case, print YES if all possible strings of length n that can be
formed using the first k lowercase English alphabets occur as a subsequence of
s , else print NO.

If your answer is NO, print a string of length n that can be formed using the
first k lowercase English alphabets which does not occur as a subsequence of s
in the next line.

You may print each letter of YES or NO in any case (for example, YES, yES, YeS
will all be recognized as a positive answer).

Example

Input

    3
    
    2 2 4
    
    abba
    
    2 2 3
    
    abb
    
    3 3 10
    
    aabbccabab

Output

    YES
    NO
    aa
    NO
    ccc
    
Note

For the first test case, all possible strings (aa, ab, ba, bb) of length 2
that can be formed using the first 2 English alphabets occur as a subsequence
of abba.

For the second test case, the string aa is not a subsequence of abb.","from collections import *
from math import *
from heapq import *
import sys
from bisect import *
from random import randint
rrr = randint(8888,88888)
 
 
def sol():
    n,k,m = tuple(map(int,input().split()))
 
    s = input()
    us = set(chr(i+97) for i  in range(k))
    win = set()
    ans = []
    ps = 0
    for i in s:
        if i in us:
            win.add(i)
            if len(win) == k:
                ans.append(i)
                ps += 1
                win.clear()
    
    # print(ps)
    if ps >= n:return print(""YES"")
 
    print(""NO"")
 
    for i in us:
        if i not in win:
            return print("""".join(ans)+i + (""a"" * (n - len(ans) - 1)))
 
 
 
for _ in range(int(input())):
    sol()",1,True,False
1974_B,1974_B_vher1311._100%,codeforces2024,human,qwen2.5-7b-instruct,"Polycarp has a string s , which consists of lowercase Latin letters. He
encodes this string using the following algorithm:

  * first, he constructs a new auxiliary string r , which consists of all distinct letters of the string s , written in alphabetical order; 
  * then the encoding happens as follows: each character in the string s is replaced by its symmetric character from the string r (the first character of the string r will be replaced by the last, the second by the second from the end, and so on). 

For example, encoding the string s =""codeforces"" happens as follows:

  * the string r is obtained as ""cdefors""; 
  * the first character s_1 ='c' is replaced by 's'; 
  * the second character s_2 ='o' is replaced by 'e'; 
  * the third character s_3 ='d' is replaced by 'r'; 
  * ... 
  * the last character s_{10} ='s' is replaced by 'c'. 

![](https://espresso.codeforces.com/b6f889887677396af4d296900b8ca492324e83ef.png)
The string r and replacements for s =""codeforces"".

Thus, the result of encoding the string s =""codeforces"" is the string
""serofedsoc"".

Write a program that performs decoding — that is, restores the original string
s from the encoding result.

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ) — the length of the string b .

The second line of each test case contains a string b of length n , consisting
of lowercase Latin letters — the result of encoding the original string s .

It is guaranteed that the sum of the values of n over all test cases in the
test does not exceed 2 \cdot 10^5 .

Output

For each test case, output the string s from which the encoding result b was
obtained.

Example

Input

    5
    
    10
    
    serofedsoc
    
    3
    
    ttf
    
    9
    
    tlrhgmaoi
    
    1
    
    w
    
    15
    
    hnndledmnhlttin

Output

    codeforces
    fft
    algorithm
    w
    meetinthemiddle","def decode_string(encoded):
    # Get unique characters and sort them to form 'r'
    r = ''.join(sorted(set(encoded)))
    # Create the mapping dictionary
    mapping = {r[i]: r[-(i+1)] for i in range(len(r))}
    # Decode the string using the mapping
    return ''.join(mapping[char] for char in encoded)
 
# Reading input
import sys
input = sys.stdin.read
data = input().split()
 
index = 0
t = int(data[index])
index += 1
results = []
 
for _ in range(t):
    n = int(data[index])
    index += 1
    b = data[index]
    index += 1
    results.append(decode_string(b))
 
# Output the results
print('\n'.join(results))",1,True,False
1974_B,1974_B_vher1311._100%,codeforces2024,human,qwen2.5-7b-instruct,"Polycarp has a string s , which consists of lowercase Latin letters. He
encodes this string using the following algorithm:

  * first, he constructs a new auxiliary string r , which consists of all distinct letters of the string s , written in alphabetical order; 
  * then the encoding happens as follows: each character in the string s is replaced by its symmetric character from the string r (the first character of the string r will be replaced by the last, the second by the second from the end, and so on). 

For example, encoding the string s =""codeforces"" happens as follows:

  * the string r is obtained as ""cdefors""; 
  * the first character s_1 ='c' is replaced by 's'; 
  * the second character s_2 ='o' is replaced by 'e'; 
  * the third character s_3 ='d' is replaced by 'r'; 
  * ... 
  * the last character s_{10} ='s' is replaced by 'c'. 

![](https://espresso.codeforces.com/b6f889887677396af4d296900b8ca492324e83ef.png)
The string r and replacements for s =""codeforces"".

Thus, the result of encoding the string s =""codeforces"" is the string
""serofedsoc"".

Write a program that performs decoding — that is, restores the original string
s from the encoding result.

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ) — the length of the string b .

The second line of each test case contains a string b of length n , consisting
of lowercase Latin letters — the result of encoding the original string s .

It is guaranteed that the sum of the values of n over all test cases in the
test does not exceed 2 \cdot 10^5 .

Output

For each test case, output the string s from which the encoding result b was
obtained.

Example

Input

    5
    
    10
    
    serofedsoc
    
    3
    
    ttf
    
    9
    
    tlrhgmaoi
    
    1
    
    w
    
    15
    
    hnndledmnhlttin

Output

    codeforces
    fft
    algorithm
    w
    meetinthemiddle","def decode_string(encoded):
    # Get unique characters and sort them to form 'r'
    r = ''.join(sorted(set(encoded)))
    # Create the mapping dictionary
    mapping = {r[i]: r[-(i+1)] for i in range(len(r))}
    # Decode the string using the mapping
    return ''.join(mapping[char] for char in encoded)
 
# Reading input
import sys
input = sys.stdin.read
data = input().split()
 
index = 0
t = int(data[index])
index += 1
results = []
 
for _ in range(t):
    n = int(data[index])
    index += 1
    b = data[index]
    index += 1
    results.append(decode_string(b))
 
# Output the results
print('\n'.join(results))",1,True,False
1971_D,1971_D_M2024_100%,codeforces2024,human,qwen2.5-7b-instruct,"You are given a binary string^{\dagger} . Please find the minimum number of
pieces you need to cut it into, so that the resulting pieces can be rearranged
into a sorted binary string.

![](https://espresso.codeforces.com/76039f9769ba94c1817dbbc5e1fb1b5e4f60950f.png)

Note that:

  * each character must lie in exactly one of the pieces; 
  * the pieces must be contiguous substrings of the original string; 
  * you must use all the pieces in the rearrangement. 

^{\dagger} A binary string is a string consisting of characters \texttt{0} and
\texttt{1} . A sorted binary string is a binary string such that all
characters \texttt{0} come before all characters \texttt{1} .

Input

The first line contains a single integer t (1 \leq t \leq 500 ) — the number
of test cases.

The only line of each test case contains a single string s (1 \leq |s| \leq
500 ) consisting of characters \texttt{0} and \texttt{1} , where |s| denotes
the length of the string s .

Output

For each test case, output a single integer — the minimum number of pieces
needed to be able to rearrange the string into a sorted binary string.

Example

Input

    6
    
    11010
    
    00000000
    
    1
    
    10
    
    0001111
    
    0110

Output

    3
    1
    1
    2
    1
    2
    
Note

The first test case is pictured in the statement. It can be proven that you
can't use fewer than 3 pieces.

In the second and third test cases, the binary string is already sorted, so
only 1 piece is needed.

In the fourth test case, you need to make a single cut between the two
characters and rearrange them to make the string \texttt{01} .","t = int(input())
 
for _ in range(t):
    a = input()
    cut0 = 0
    cut1 = 0
    for i in range(len(a)-1):
        if a[i] == '1' and a[i+1] == '0':
            cut1 += 1
        if a[i] == '0' and a[i+1] == '1':
            cut0 += 1
    if cut0 == 0:
        print(cut1+1)
    else:
        print(cut0+cut1)
 
# 011 0 111 0 11
# 1 011",1,True,False
1974_B,1974_B_vher1311._0.00%,codeforces2024,human,qwen2.5-7b-instruct,"Polycarp has a string s , which consists of lowercase Latin letters. He
encodes this string using the following algorithm:

  * first, he constructs a new auxiliary string r , which consists of all distinct letters of the string s , written in alphabetical order; 
  * then the encoding happens as follows: each character in the string s is replaced by its symmetric character from the string r (the first character of the string r will be replaced by the last, the second by the second from the end, and so on). 

For example, encoding the string s =""codeforces"" happens as follows:

  * the string r is obtained as ""cdefors""; 
  * the first character s_1 ='c' is replaced by 's'; 
  * the second character s_2 ='o' is replaced by 'e'; 
  * the third character s_3 ='d' is replaced by 'r'; 
  * ... 
  * the last character s_{10} ='s' is replaced by 'c'. 

![](https://espresso.codeforces.com/b6f889887677396af4d296900b8ca492324e83ef.png)
The string r and replacements for s =""codeforces"".

Thus, the result of encoding the string s =""codeforces"" is the string
""serofedsoc"".

Write a program that performs decoding — that is, restores the original string
s from the encoding result.

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ) — the length of the string b .

The second line of each test case contains a string b of length n , consisting
of lowercase Latin letters — the result of encoding the original string s .

It is guaranteed that the sum of the values of n over all test cases in the
test does not exceed 2 \cdot 10^5 .

Output

For each test case, output the string s from which the encoding result b was
obtained.

Example

Input

    5
    
    10
    
    serofedsoc
    
    3
    
    ttf
    
    9
    
    tlrhgmaoi
    
    1
    
    w
    
    15
    
    hnndledmnhlttin

Output

    codeforces
    fft
    algorithm
    w
    meetinthemiddle","def symmetric_encode(s):
    # Create a list of unique characters from the input string
    unique_chars = sorted(list({char for char in s}))
    
    i, j = 0, len(unique_chars) - 1
    
    # Encode the input string
    for char in s:
        if char in unique_chars:
            # Replace the current character with its symmetric counterpart
            s = s.replace(char, unique_chars[j])
            j -= 1
        else:
            # Add the new character to the unique_chars list
            unique_chars.insert(i, char)
            
            # Update i and j
            i += 1
            j += 1
    
    return ''.join(unique_chars)
 
# Main function
if __name__ == ""__main__"":
    t = int(input())
    
    for _ in range(t):
        n = int(input())
        b = input()
        
        # Get the encoded string
        encoded_str = symmetric_encode(b)
        
        # Print the encoded string
        print(encoded_str)",1,False,False
1950_C,1950_C_imaginary_faye_50.00%,codeforces2024,human,qwen2.5-7b-instruct,"Given the time in 24-hour format, output the equivalent time in 12-hour
format.

  * [24-hour format](https://en.wikipedia.org/wiki/24-hour_clock#Description) divides the day into 24 hours from 00 to 23 , each of which has 60 minutes from 00 to 59 . 
  * [12-hour format](https://en.wikipedia.org/wiki/12-hour_clock#Description) divides the day into two halves: the first half is \mathrm{AM} , and the second half is \mathrm{PM} . In each half, the hours are numbered in the order 12, 01, 02, 03, \dots, 11 . Each hour has 60 minutes numbered from 00 to 59 . 

Input

The first line contains a single integer t (1 \leq t \leq 1440 ) — the number
of test cases.

The only line of each test case contains a string s of length 5 with format
hh:mm representing a valid time in the 24-hour format. hh represents the hour
from 00 to 23 , and mm represents the minute from 00 to 59 .

The input will always be a valid time in 24-hour format.

Output

For each test case, output two strings separated by a space (""hh:mm AM"" or
""hh:mm PM""), which are the 12-hour equivalent to the time provided in the test
case (without quotes).

You should output the time exactly as indicated; in particular, you should not
remove leading zeroes.

Example

Input

    11
    
    09:41
    
    18:06
    
    12:14
    
    00:59
    
    00:00
    
    14:34
    
    01:01
    
    19:07
    
    11:59
    
    12:00
    
    21:37

Output

    09:41 AM
    06:06 PM
    12:14 PM
    12:59 AM
    12:00 AM
    02:34 PM
    01:01 AM
    07:07 PM
    11:59 AM
    12:00 PM
    09:37 PM","def gb114():
    for t in range(int(input())):
        s = input()
        h = s[:2]
        if h == '00':
            print('12', end='')
        elif int(h) <= 12:
            print(h, end='')
        else:
            print('0{}'.format(int(h) - 12), end='')
        print(s[2:], ['AM', 'PM'][int(h) >= 12])
gb114()",1,False,False
1949_D,1949_D_Lucina_24.69%,codeforces2024,human,qwen2.5-7b-instruct,"You are designing a new video game. It has n scenarios, which the player may
play in any order, but each scenario must be played exactly once. When a
player switches from a scenario to another scenario, the game shows a
specially crafted transition video to make it all feel part of one big story.
This video is specific to a pair of scenarios, but not to their order, in
other words, the video playing when switching from scenario a to scenario b is
the same as the video playing when switching from scenario b to scenario a .
Therefore, you need to create \frac{n(n-1)}{2} different transition videos,
one for each possible pair of different scenarios.

Each transition video can be either funny or scary. It is boring to see too
many funny videos or too many scary videos in a row. Therefore, your goal is
to create the videos in such a way that no matter in which order does the
player approach the scenarios, they will never see more than \lceil
\frac{3n}{4} \rceil transition videos of the same type in a row.

You have already come up with ideas for at most \lfloor \frac{n}{2} \rfloor of
the transition videos, and therefore already know if those will be funny or
scary. Now you need to choose funny or scary for all other transition videos
in such a way that the above requirement is satisfied.

Input

The first line contains a single integer n (2 \le n \le 24 ) — the number of
scenarios in the game.

The next n lines describe the partial transition video plan. Each of those
lines contains n characters. The j -th character of the i -th line corresponds
to the transition video between the i -th and the j -th scenarios. It will be
F if the corresponding transition video will be funny, S if the corresponding
transition video will be scary, ? if the corresponding transition video is
still undecided, or . if i=j .

It is guaranteed that the i -th character of the j -th line and the j -th
character of the i -th line will be the same for all i and j . It is
guaranteed that at most \lfloor \frac{n}{2} \rfloor (n divided by 2, rounded
down) transition videos will already be decided, in other words, that at most
2\lfloor \frac{n}{2} \rfloor characters in the input will be F or S.

Output

Print n lines describing the full transition video plan in the same format as
the input. Each of those lines must contain n characters. The j -th character
of the i -th line must be F if the corresponding transition video is funny, S
if the corresponding transition video is scary, or . if i=j .

Each ? character from the input must be replaced with either F or S, and all
other characters from the input must remain unchanged. It must still hold that
the i -th character of the j -th line and the j -th character of the i -th
line are the same for all i and j .

For each permutation of the n scenarios, it must hold that the transition
videos corresponding to playing the scenarios in this order do not have more
than \lceil \frac{3n}{4} \rceil (3n divided by 4, rounded up) videos of the
same type consecutively.

If there are multiple solutions, print any of them. It can be proven that for
all inputs satisfying the constraints of this problem a solution always
exists.

Examples

Input

    5
    
    .?F??
    
    ?.???
    
    F?.S?
    
    ??S.?
    
    ????.

Output

    .FFFF
    F.FFF
    FF.SF
    FFS.F
    FFFF.

Input

    12
    
    .???????????
    
    ?.??????????
    
    ??.?????????
    
    ???.????????
    
    ????.???????
    
    ?????.??????
    
    ??????.?????
    
    ???????.????
    
    ????????.???
    
    ?????????.??
    
    ??????????.?
    
    ???????????.

Output

    .SSSFFSSSSFS
    S.SFFSFSFFFS
    SS.SFFFSSSFS
    SFS.FFSSSSFS
    FFFF.FFFFFSF
    FSFFF.SFFSFF
    SFFSFS.SSSFS
    SSSSFFS.SSFS
    SFSSFFSS.SFS
    SFSSFSSSS.FS
    FFFFSFFFFF.F
    SSSSFFSSSSF.
    
Note

In the first sample: We are allowed \lceil \frac{3\cdot 5}{4} \rceil=4
transition videos of the same type in a row, but for any permutation of the 5
scenarios the player will see only 4 transition videos in total, therefore we
can choose funny or scary freely. We must still respect the already chosen
types.

In the second sample: One of the 479001600 possible permutations of scenarios
is 1, 7, 4, 12, 9, 8, 2, 6, 10, 3, 11, 5. The player will get the following
sequence of transition videos for this permutation: SSSSSSSSSFS. Even though
this sequence has 10 scary transition videos in total, it has only 9 scary
transition videos in a row, which is the maximum allowed amount (\lceil
\frac{3\cdot 12}{4} \rceil=9 ).","n = int(input())
a = [0]*(n+1)
b = [0]*(n+1)
xx = [""""]
for i in range(1,n+1):
    x = input()
    for j in range(1,n+1):
        if x[j-1] == ""F"":
            a[i] += 1
            a[j] += 1
        elif x[j-1] == ""S"":
            b[i] += 1
            b[j] += 1
    xx.append(x)
 
sa = []
sb = []
for i in range(1,n+1):
    if a[i] > 0 and b[i] == 0:
        sa.append(i)
    if b[i] > 0 and a[i] == 0:
        sb.append(i)
if len(sa) >= len(sb):
    for i in range(1,n+1):
        if a[i] == 0 and b[i] == 0:
            sa.append(i)
    for i in range(1,n+1):
        nx = """"
        for j in range(1,n+1):
            if xx[i][j-1] != ""?"":
                nx += xx[i][j-1]
            elif i in sa[:n//4] or j in sa[:n//4]:
                nx += ""F""
            else:
                nx += ""S""
        print(nx)
else:
    for i in range(1,n+1):
        if a[i] == 0 and b[i] == 0:
            sb.append(i)
    for i in range(1,n+1):
        nx = """"
        for j in range(1,n+1):
            if xx[i][j-1] != ""?"":
                nx += xx[i][j-1]
            elif i in sb[:n//4] or j in sb[:n//4]:
                nx += ""S""
            else:
                nx += ""F""
        print(nx)",1,False,False
1955_A,1955_A_abood718_100%,codeforces2024,human,qwen2.5-7b-instruct,"The price of one yogurt at the ""Vosmiorochka"" store is a burles, but there is
a promotion where you can buy two yogurts for b burles.

Maxim needs to buy exactly n yogurts. When buying two yogurts, he can choose
to buy them at the regular price or at the promotion price.

What is the minimum amount of burles Maxim should spend to buy n yogurts?

Input

The first line contains a single integer t (1 \le t \le {10}^{4} ) — the
number of test cases.

The first and only line of each test case contains three integers n , a , and
b (1 \le n \le 100 , 1 \le a, b \le 30 ) — the number of yogurts Maxim wants
to buy, the price for one yogurt, and the price for two yogurts on promotion.

Output

For each test case, print in a separate line the minimum cost of buying n
yogurts at ""Vosmiorochka"".

Example

Input

    4
    
    2 5 9
    
    3 5 9
    
    3 5 11
    
    4 5 11

Output

    9
    14
    15
    20
    
Note

In the third test case of the example, it is more advantageous to buy three
yogurts for 15 burles than two for 11 and one for 5 .

In the fourth test case of the example, you need to buy four yogurts, each for
5 burles.","for i in range(int(input())):
    A, B, C = map(int,input().split())
    if (B *2) < C:
        print(A*B)
    else:
        if A % 2 == 0:
            print(int((A * C)/2))
        else:
            X = A // 2
            print((X * C) + B)",1,True,False
1949_K,1949_K_artystkaProgramistka_2.56%,codeforces2024,human,qwen2.5-7b-instruct,"You are given n positive integers x_1, x_2, \ldots, x_n and three positive
integers n_a, n_b, n_c satisfying n_a+n_b+n_c = n .

You want to split the n positive integers into three groups, so that:

  * The first group contains n_a numbers, the second group contains n_b numbers, the third group contains n_c numbers.
  * Let s_a be the sum of the numbers in the first group, s_b be the sum in the second group, and s_c be the sum in the third group. Then s_a, s_b, s_c are the sides of a triangle with positive area.

Determine if this is possible. If this is possible, find one way to do so.

Input

Each test contains multiple test cases. The first line contains an integer t
(1\le t\le 100\,000 ) — the number of test cases. The descriptions of the t
test cases follow.

The first line of each test case contains the integers n, n_a, n_b, n_c (3
\leq n \leq 200\,000, 1\leq n_a,n_b,n_c \leq n-2, n_a+n_b+n_c = n ) — the
number of integers to split into three groups, and the desired sizes of the
three groups.

The second line of each test case contains n integers x_1, x_2, \ldots, x_n (1
\leq x_i \leq 10^{9} ).

It is guaranteed that the sum of n over all test cases does not exceed
200\,000 .

Output

For each test case, print \texttt{YES} if it is possible to split the numbers
into three groups satisfying all the conditions. Otherwise, print \texttt{NO}
.

If such a split exists, then describe the three groups as follows.

On the next line, print n_a integers a_1, a_2, \ldots, a_{n_a} — the numbers
in the first group.

On the next line, print n_b integers b_1, b_2, \ldots, b_{n_b} — the numbers
in the second group.

On the next line, print n_c integers c_1, c_2, \ldots, c_{n_c} — the numbers
in the third group.

These n_a+n_b+n_c=n integers should be a permutation of x_1, x_2, \ldots, x_n
, and they should satisfy the conditions from the statement.

If there are multiple solutions, print any of them.

Example

Input

    4
    
    6 2 2 2
    
    1 1 1 1 1 1
    
    5 3 1 1
    
    1 1 1 1 1
    
    6 2 2 2
    
    1 1 1 1 1 3
    
    8 1 2 5
    
    16 1 1 1 1 1 1 12

Output

    YES
    1 1 
    1 1 
    1 1 
    NO
    NO
    YES
    16 
    12 1 
    1 1 1 1 1 
    
Note

In the first test case, we can put two 1 s into each group: the sum in each
group would be 2 , and there exists a triangle with positive area and sides 2
, 2 , 2 .

In the second and third test cases, it can be shown that there is no such way
to split numbers into groups.

In the fourth test case, we can put number 16 into the first group, with sum
16 , numbers 12 and 1 into the second group, with sum 13 , and the remaining
five 1 s into the third group, with sum 5 , as there exists a triangle with
positive area and sides 16, 13, 5 .","# You are given n positive integers x1,x2,…,xn and three positive integers na,nb,nc satisfying na+nb+nc=n
#
# .
#
# You want to split the n
#
# positive integers into three groups, so that:
#
#     The first group contains na
#
# numbers, the second group contains nb numbers, the third group contains nc
# numbers.
# Let sa
# be the sum of the numbers in the first group, sb be the sum in the second group, and sc be the sum in the third group. Then sa,sb,sc
#
#     are the sides of a triangle with positive area.
#
# Determine if this is possible. If this is possible, find one way to do so.
# Input
#
# Each test contains multiple test cases. The first line contains an integer t
# (1≤t≤100000) — the number of test cases. The descriptions of the t
#
# test cases follow.
#
# The first line of each test case contains the integers n,na,nb,nc
# (3≤n≤200000,1≤na,nb,nc≤n−2,na+nb+nc=n
#
# ) — the number of integers to split into three groups, and the desired sizes of the three groups.
#
# The second line of each test case contains n
# integers x1,x2,…,xn (1≤xi≤109
#
# ).
#
# It is guaranteed that the sum of n
# over all test cases does not exceed 200000
#
# .
# Output
#
# For each test case, print YES
# if it is possible to split the numbers into three groups satisfying all the conditions. Otherwise, print NO
#
# .
#
# If such a split exists, then describe the three groups as follows.
#
# On the next line, print na
# integers a1,a2,…,ana
#
#  — the numbers in the first group.
#
# On the next line, print nb
# integers b1,b2,…,bnb
#
#  — the numbers in the second group.
#
# On the next line, print nc
# integers c1,c2,…,cnc
#
#  — the numbers in the third group.
#
# These na+nb+nc=n
# integers should be a permutation of x1,x2,…,xn
#
# , and they should satisfy the conditions from the statement.
#
# If there are multiple solutions, print any of them.
def can_form_triangle(a, b, c):
    return a + b > c and a + c > b and b + c > a
 
def solve(n, na, nb, nc, numbers):
    # Sort the numbers in descending order for optimal distribution
    numbers.sort(reverse=True)
    # Prepare the groups and their sum trackers
    group_a, group_b, group_c = [], [], []
    sum_a, sum_b, sum_c = 0, 0, 0
 
    # Function to distribute a number to the group with the smallest sum or size constraint
    def distribute_number(num):
        nonlocal sum_a, sum_b, sum_c
        # Prioritize filling smaller groups to ensure size requirements are met
        if len(group_a) < na or (len(group_a) == na and sum_a <= min(sum_b, sum_c)):
            group_a.append(num)
            sum_a += num
        elif len(group_b) < nb or (len(group_b) == nb and sum_b <= min(sum_a, sum_c)):
            group_b.append(num)
            sum_b += num
        else:
            group_c.append(num)
            sum_c += num
 
    # Distribute numbers
    for num in numbers:
        distribute_number(num)
 
    # Check if the final groups form a valid triangle
    if can_form_triangle(sum_a, sum_b, sum_c):
        return ""YES"", group_a, group_b, group_c
    else:
        return ""NO""
 
 
t = int(input())
out = []
for _ in range(t):
    n, na, nb, nc = map(int, input().split())
    x = list(map(int, input().split()))
    result = solve(n, na, nb, nc, x)  # Get the result directly
    if result == ""NO"":
        out.append(""NO"")  # Append ""NO"" directly if not possible
    else:
        # If possible, append a structured result that includes ""YES"" and the groups
        out.append([""YES"", result[1], result[2], result[3]])  # Adjust according to your solve function's return structure
 
for result in out:
    if result == ""NO"":
        print(result)
    else:
        print(result[0])  # This prints ""YES""
        for group in result[1:]:  # Iterate through the groups for printing
            print("" "".join(map(str, group)))",1,False,False
1941_C,1941_C_hussamrasheed_50.00%,codeforces2024,human,qwen2.5-7b-instruct,"Rudolf has a string s of length n . Rudolf considers the string s to be ugly
if it contains the substring^\dagger ""pie"" or the substring ""map"", otherwise
the string s will be considered beautiful.

For example, ""ppiee"", ""mmap"", ""dfpiefghmap"" are ugly strings, while ""mathp"",
""ppiiee"" are beautiful strings.

Rudolf wants to shorten the string s by removing some characters to make it
beautiful.

The main character doesn't like to strain, so he asks you to make the string
beautiful by removing the minimum number of characters. He can remove
characters from any positions in the string (not just from the beginning or
end of the string).

^\dagger String a is a substring of b if there exists a consecutive segment of
characters in string b equal to a .

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases. The descriptions of the test cases follow.

The first line of each test case contains a single integer n (1 \le n \le 10^6
) — the length of the string s .

The next line of each test case contains the string s of length n . The string
s consists of lowercase Latin letters.

The sum of n over all test cases does not exceed 10^6 .

Output

For each test case, output a single integer — the minimum number of characters
that need to be deleted to make the string s beautiful. If the string is
initially beautiful, then output 0 .

Example

Input

    6
    
    9
    
    mmapnapie
    
    9
    
    azabazapi
    
    8
    
    mappppie
    
    18
    
    mapmapmapmapmapmap
    
    1
    
    p
    
    11
    
    pppiepieeee

Output

    2
    0
    2
    6
    0
    2
    
Note

In the first test case, for example, you can delete the 4 th and 9 th
characters to make the string beautiful.

In the second test case, the string is already beautiful.","t=int(input())
for i in range(t):
    n=int(input())
    s=input()
    m=s.count(""map"")
    s=s.replace(""map"","""")
    
    p=s.count(""pie"")
    print(m+p)",1,False,False
1972_D1,1972_D1_Pepe008_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.","import  math
T = int(input())
 
for t in range(T):
    info = input().split()
 
    a, b = int(info[0]), int(info[1])
 
    """"""for i in range(1,a+1):
        for j in range(4,b+1):
            if int((j+i)%(j*math.gcd(i,j))) == 0:
                print(i,j)""""""
 
    suma = 0
    for i in range(1,b+1):
        x = (a-(i*(i-1)))//(i**2) + 1
        if (a-(i*(i-1))) > 0:
            suma += x
            #if (a-(i*(i-1)))%(i**2) == 0:
            #    suma += 1
 
 
    print(suma-1)",1,False,False
1941_C,1941_C_heisenberg441_6.25%,codeforces2024,human,qwen2.5-7b-instruct,"Rudolf has a string s of length n . Rudolf considers the string s to be ugly
if it contains the substring^\dagger ""pie"" or the substring ""map"", otherwise
the string s will be considered beautiful.

For example, ""ppiee"", ""mmap"", ""dfpiefghmap"" are ugly strings, while ""mathp"",
""ppiiee"" are beautiful strings.

Rudolf wants to shorten the string s by removing some characters to make it
beautiful.

The main character doesn't like to strain, so he asks you to make the string
beautiful by removing the minimum number of characters. He can remove
characters from any positions in the string (not just from the beginning or
end of the string).

^\dagger String a is a substring of b if there exists a consecutive segment of
characters in string b equal to a .

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases. The descriptions of the test cases follow.

The first line of each test case contains a single integer n (1 \le n \le 10^6
) — the length of the string s .

The next line of each test case contains the string s of length n . The string
s consists of lowercase Latin letters.

The sum of n over all test cases does not exceed 10^6 .

Output

For each test case, output a single integer — the minimum number of characters
that need to be deleted to make the string s beautiful. If the string is
initially beautiful, then output 0 .

Example

Input

    6
    
    9
    
    mmapnapie
    
    9
    
    azabazapi
    
    8
    
    mappppie
    
    18
    
    mapmapmapmapmapmap
    
    1
    
    p
    
    11
    
    pppiepieeee

Output

    2
    0
    2
    6
    0
    2
    
Note

In the first test case, for example, you can delete the 4 th and 9 th
characters to make the string beautiful.

In the second test case, the string is already beautiful.","def solve(s):
    if s=='mapie':
        return 1
    ans=0
    while s.find('map')!=-1:
        s=s[:s.find('map')]+s[s.find('map')+2:]
        ans+=1
    while s.find('pie')!=-1:
        s=s[:s.find('pie')]+s[s.find('pie')+2:]
        ans+=1
    return ans
 
t=int(input())
for i in range(t):
    n=int(input())
    s=input()
    print(solve(s))",1,False,False
1950_B,1950_B_vingcssn_20.00%,codeforces2024,human,qwen2.5-7b-instruct,"You are given an integer n . Output a 2n \times 2n checkerboard made of 2
\times 2 squares alternating '\texttt{#} ' and '\texttt{.} ', with the top-
left cell being '\texttt{#} '.

![](https://espresso.codeforces.com/3db665ec1ddded3e1be3e030c4bc89a9f297439c.png)

The picture above shows the answers for n=1,2,3,4 .

Input

The first line contains an integer t (1 \leq t \leq 20 ) — the number of test
cases.

The only line of each test case contains a single integer n (1 \leq n \leq 20
) — it means you need to output a checkerboard of side length 2n .

Output

For each test case, output 2n lines, each containing 2n characters without
spaces — the checkerboard, as described in the statement. Do not output empty
lines between test cases.

Example

Input

    4
    
    1
    
    2
    
    3
    
    4

Output

    ##
    ##
    ##..
    ##..
    ..##
    ..##
    ##..##
    ##..##
    ..##..
    ..##..
    ##..##
    ##..##
    ##..##..
    ##..##..
    ..##..##
    ..##..##
    ##..##..
    ##..##..
    ..##..##
    ..##..##","casos = int(input())
 
for c in range (0, casos):
    n = int(input())
    if n == 1:
        print(""##"")
        print(""##"")
    elif n == 2:
        print(""##.."")
        print(""##.."")
        print(""..##"")
        print(""..##"")
    elif n == 3:
        print(""##..##"")
        print(""##..##"")
        print(""..##.."")
        print(""..##.."")
        print(""##..##"")
        print(""##..##"")
    elif n == 4:
        print(""##..##.."")
        print(""##..##.."")
        print(""..##..##"")
        print(""..##..##"")
        print(""##..##.."")
        print(""##..##.."")
        print(""..##..##"")
        print(""..##..##"")
    else:
        print(""No esta en el rango"")",1,False,False
1951_D,1951_D_yassineabdedayem_16.67%,codeforces2024,human,qwen2.5-7b-instruct,"[Nightwish feat. Jonsu - Erämaan Viimeinen](https://youtu.be/QYlFn5q_UQk)

ඞ

Alice has n coins and wants to shop at Bob's jewelry store. Today, although
Bob has not set up the store yet, Bob wants to make sure Alice will buy
exactly k jewels. To set up the store, Bob can erect at most 60 stalls (each
containing an unlimited amount of jewels) and set the price per jewel for each
stall to be an integer number of coins between 1 and 10^{18} .

Fortunately, Bob knows that Alice buys greedily: and she will go to stall 1 ,
buy as many jewels as possible, then go to stall 2 , buy as many jewels as
possible, and so on until the last stall. Knowing this, Bob can choose the
number of stalls to set up, as well as set the price for each stall so that
Alice buys exactly k jewels. Help Bob fulfill the task, or determine if it is
impossible to do so.

Note that Alice does not need to spend all her coins.

Input

Each test contains multiple test cases. The first line contains an integer t
(1 \le t \le 1000 ) — the number of test cases. The description of the test
cases follows.

Each test case contains two positive integers n and k (1 \le n, k \le 10^{18}
) — the number of coins Alice has and the number of jewels Bob wants Alice to
have bought at the end.

Output

For each test case, print on one line ""YES"" if Bob can erect at most 60 stalls
and set the prices for the stalls such that Alice buys exactly k jewels, or
""NO"" if it is impossible to do so.

If the answer is ""YES"", on the second line, print an integer s (1 \le s \le 60
) — the number of stalls to be set up by Bob. On the third line, print s
positive integers p_1, p_2, \ldots, p_s (1 \le p_i \le 10^{18}) that represent
such a satisfactory pricing p , where p_i is the price per jewel for stall i .
If there are multiple such p 's, print any of them.

Example

Input

    3
    
    7 3
    
    6 4
    
    255 8

Output

    YES
    10
    2 3 4 5 6 7 8 9 10 11
    NO
    YES
    8
    128 64 32 16 8 4 2 1
    
Note

In the first test case, at the first stall, Alice buys 3 jewels and is left
with 1 coin. This is not enough to buy any jewels for any of the remaining
stalls, so Alice buys exactly 3 jewels at the end.

In the third test case,

  * At the first stall, Alice buys 1 jewel and is left with 127 coins. 
  * At the second stall, Alice buys 1 jewel and is left with 63 coins. 
  * At the third stall, Alice buys 1 jewel and is left with 31 coins. 
  * At the fourth stall, Alice buys 1 jewel and is left with 15 coins. 
  * At the fifth stall, Alice buys 1 jewel and is left with 7 coins. 
  * At the sixth stall, Alice buys 1 jewel and is left with 3 coins. 
  * At the seventh stall, Alice buys 1 jewel and is left with 1 coin. 
  * At the eighth stall, Alice buys 1 jewel and is left with 0 coins. 

Therefore, Alice buys exactly 8 jewels in total.","from sys import stdin
t=int(input())
for _ in range(t):
    n,k=map(int,stdin.readline().split())
    rep=0
    number=0
    tab=[]
    while n!=0 and k>0 and rep<60 and n>=k:
        
        Min,Max=min(n//k,k),max(int(n/k),k)
        if Max==k and n*Min<=k:
            number=Min
            k=k-Max
        else:
            number=Max
            k=k-Min
        tab.append(str(number))
        n-=Min*Max
        rep+=1
    if k==0:
        print(""YES"")
        print(len(tab))
        for i in tab:
            print(i,end="" "")
    else:
        print(""NO"")",1,False,False
1945_B,1945_B_sunny_4_71.43%,codeforces2024,human,qwen2.5-7b-instruct,"One of the days of the hike coincided with a holiday, so in the evening at the
camp, it was decided to arrange a festive fireworks display. For this purpose,
the organizers of the hike bought two installations for launching fireworks
and a huge number of shells for launching.

Both installations are turned on simultaneously. The first installation
launches fireworks every a minutes (i.e., after a, 2 \cdot a, 3 \cdot a, \dots
minutes after launch). The second installation launches fireworks every b
minutes (i.e., after b, 2 \cdot b, 3 \cdot b, \dots minutes after launch).

Each firework is visible in the sky for m + 1 minutes after launch, i.e., if a
firework was launched after x minutes after the installations were turned on,
it will be visible every minute from x to x + m , inclusive. If one firework
was launched m minutes after another, both fireworks will be visible for one
minute.

What is the maximum number of fireworks that could be seen in the sky at the
same time?

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. Then follow the
descriptions of the test cases.

The first and only line of each test case contains integers a , b , m (1 \le
a, b, m \le 10^{18} ) — the frequency of launching for the first installation,
the second installation, and the time the firework is visible in the sky.

Output

For each set of input data, output a single number — the maximum number of
fireworks that can be seen simultaneously.

Example

Input

    6
    
    6 7 4
    
    3 4 10
    
    7 8 56
    
    5 6 78123459896
    
    1 1 1
    
    1 1 1000000000000000000

Output

    2
    7
    17
    28645268630
    4
    2000000000000000002
    
Note

In the first set of input data, the fireworks are visible in the sky for 5
minutes. Since the first installation launches fireworks every 6 minutes, and
the second one every 7 minutes, two fireworks launched from the same
installation will not be visible in the sky at the same time. At the same
time, after 7 minutes from the start of the holiday, one firework from the
first and one from the second camp will be visible. Thus, it is possible to
see no more than 2 fireworks simultaneously.

In the third set of input data, 17 fireworks will be visible after 112
minutes:

  * 9 fireworks launched from the first installation at times [56, 63, 70, 77, 84, 91, 98, 105, 112 ]; 
  * 8 fireworks launched from the second installation at times [56, 64, 72, 80, 88, 96, 104, 112 ].","t=int(input())
for _ in range(t):
    a,b,m=map(int,input().split())
    A=int(m/a)+1
    B=int(m/b)+1
    print(A+B)",1,False,False
1928_C,1928_C_Redpanda_x_100%,codeforces2024,human,qwen2.5-7b-instruct,"In a well-known school, a physical education lesson took place. As usual,
everyone was lined up and asked to settle in ""the first–k -th"" position.

As is known, settling in ""the first–k -th"" position occurs as follows: the
first k people have numbers 1, 2, 3, \ldots, k , the next k - 2 people have
numbers k - 1, k - 2, \ldots, 2 , the next k people have numbers 1, 2, 3,
\ldots, k , and so on. Thus, the settling repeats every 2k - 2 positions.
Examples of settling are given in the ""Note"" section.

The boy Vasya constantly forgets everything. For example, he forgot the number
k described above. But he remembers the position he occupied in the line, as
well as the number he received during the settling. Help Vasya understand how
many natural numbers k fit under the given constraints.

Note that the settling exists if and only if k > 1 . In particular, this means
that the settling does not exist for k = 1 .

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 100 ) — the number of test cases. This is followed by
the description of the test cases.

The only line of each test case contains two integers n and x (1 \le x < n \le
10^9 ) — Vasya's position in the line and the number Vasya received during the
settling.

Output

For each test case, output a single integer — the number of different k that
fit under the given constraints.

It can be proven that under the given constraints, the answer is finite.

Example

Input

    5
    
    10 2
    
    3 1
    
    76 4
    
    100 99
    
    1000000000 500000000

Output

    4
    1
    9
    0
    1
    
Note

In the first test case, k equals 2, 3, 5, 6 are suitable.

An example of settling for these k :

k / №| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10   
---|---|---|---|---|---|---|---|---|---|---  
2 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2   
3 | 1 | 2 | 3 | 2 | 1 | 2 | 3 | 2 | 1 | 2   
5 | 1 | 2 | 3 | 4 | 5 | 4 | 3 | 2 | 1 | 2   
6 | 1 | 2 | 3 | 4 | 5 | 6 | 5 | 4 | 3 | 2   
  
In the second test case, k = 2 is suitable.","def divisors(n):
    # get factors and their counts
    factors = {}
    nn = n
    i = 2
    while i*i <= nn:
        while nn % i == 0:
            factors[i] = factors.get(i, 0) + 1
            nn //= i
        i += 1
    if nn > 1:
        factors[nn] = factors.get(nn, 0) + 1
 
    primes = list(factors.keys())
 
    # generates factors from primes[k:] subset
    def generate(k):
        if k == len(primes):
            yield 1
        else:
            rest = generate(k+1)
            prime = primes[k]
            for factor in rest:
                prime_to_i = 1
                # prime_to_i iterates prime**i values, i being all possible exponents
                for _ in range(factors[prime] + 1):
                    yield factor * prime_to_i
                    prime_to_i *= prime
 
    # in python3, `yield from generate(0)` would also work
    for factor in generate(0):
        yield factor
 
for _  in range(int(input())):
    # n = int(input())
    n, x = map(int, input().split())
    # arr = list(map(int, input().split()))
 
    ans = 1
 
    h = n-x
    ans = set(k for k in divisors(h) if not k%2 and k/2+1 >= x) # divisors of h >=  max(x, 2)
 
    # print(list(divisors(h)))
 
    ans2 = set()
    if x!=1:
        h = n + x-2
        ans2 = set(k for k in divisors(h) if not k%2 and k/2+1 >= x)
 
    # for f in sorted(ans):
    #     print(f//2+1, end='\t')
    # print()
 
    # print(sorted(ans))
    # print(sorted(ans2))
    ans = ans.union(ans2)
    print(len(ans))
    # print()",1,True,False
1928_C,1928_C_Redpanda_x_100%,codeforces2024,human,qwen2.5-7b-instruct,"In a well-known school, a physical education lesson took place. As usual,
everyone was lined up and asked to settle in ""the first–k -th"" position.

As is known, settling in ""the first–k -th"" position occurs as follows: the
first k people have numbers 1, 2, 3, \ldots, k , the next k - 2 people have
numbers k - 1, k - 2, \ldots, 2 , the next k people have numbers 1, 2, 3,
\ldots, k , and so on. Thus, the settling repeats every 2k - 2 positions.
Examples of settling are given in the ""Note"" section.

The boy Vasya constantly forgets everything. For example, he forgot the number
k described above. But he remembers the position he occupied in the line, as
well as the number he received during the settling. Help Vasya understand how
many natural numbers k fit under the given constraints.

Note that the settling exists if and only if k > 1 . In particular, this means
that the settling does not exist for k = 1 .

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 100 ) — the number of test cases. This is followed by
the description of the test cases.

The only line of each test case contains two integers n and x (1 \le x < n \le
10^9 ) — Vasya's position in the line and the number Vasya received during the
settling.

Output

For each test case, output a single integer — the number of different k that
fit under the given constraints.

It can be proven that under the given constraints, the answer is finite.

Example

Input

    5
    
    10 2
    
    3 1
    
    76 4
    
    100 99
    
    1000000000 500000000

Output

    4
    1
    9
    0
    1
    
Note

In the first test case, k equals 2, 3, 5, 6 are suitable.

An example of settling for these k :

k / №| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10   
---|---|---|---|---|---|---|---|---|---|---  
2 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2 | 1 | 2   
3 | 1 | 2 | 3 | 2 | 1 | 2 | 3 | 2 | 1 | 2   
5 | 1 | 2 | 3 | 4 | 5 | 4 | 3 | 2 | 1 | 2   
6 | 1 | 2 | 3 | 4 | 5 | 6 | 5 | 4 | 3 | 2   
  
In the second test case, k = 2 is suitable.","def divisors(n):
    # get factors and their counts
    factors = {}
    nn = n
    i = 2
    while i*i <= nn:
        while nn % i == 0:
            factors[i] = factors.get(i, 0) + 1
            nn //= i
        i += 1
    if nn > 1:
        factors[nn] = factors.get(nn, 0) + 1
 
    primes = list(factors.keys())
 
    # generates factors from primes[k:] subset
    def generate(k):
        if k == len(primes):
            yield 1
        else:
            rest = generate(k+1)
            prime = primes[k]
            for factor in rest:
                prime_to_i = 1
                # prime_to_i iterates prime**i values, i being all possible exponents
                for _ in range(factors[prime] + 1):
                    yield factor * prime_to_i
                    prime_to_i *= prime
 
    # in python3, `yield from generate(0)` would also work
    for factor in generate(0):
        yield factor
 
for _  in range(int(input())):
    # n = int(input())
    n, x = map(int, input().split())
    # arr = list(map(int, input().split()))
 
    ans = 1
 
    h = n-x
    ans = set(k for k in divisors(h) if not k%2 and k/2+1 >= x) # divisors of h >=  max(x, 2)
 
    # print(list(divisors(h)))
 
    ans2 = set()
    if x!=1:
        h = n + x-2
        ans2 = set(k for k in divisors(h) if not k%2 and k/2+1 >= x)
 
    # for f in sorted(ans):
    #     print(f//2+1, end='\t')
    # print()
 
    # print(sorted(ans))
    # print(sorted(ans2))
    ans = ans.union(ans2)
    print(len(ans))
    # print()",1,True,False
1954_B,1954_B_Ahsan612_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"Let's call an array a beautiful if you can make all its elements the same by
using the following operation an arbitrary number of times (possibly, zero):

  * choose an index i (2 \le i \le |a| - 1 ) such that a_{i - 1} = a_{i + 1} , and replace a_i with a_{i - 1} . 

You are given a beautiful array a_1, a_2, \dots, a_n . What is the minimum
number of elements you have to remove from it in order for it to stop being
beautiful? Swapping elements is prohibited. If it is impossible to do so, then
output -1.

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first line of each test case contains a single integer n (1 \le n \le 3
\cdot 10^5 ).

The second line contains n integers a_1, a_2, \dots, a_n (1 \le a_i \le n ).

Additional constraints on the input:

  * in every test case, the given array a is beautiful; 
  * the sum of n over all test cases does not exceed 3 \cdot 10^5 . 

Output

For each test case, output a single integer — the minimum number of elements
you have to remove from the array a in order for it to stop being beautiful.
If it is impossible, then output -1.

Example

Input

    4
    
    3
    
    2 2 2
    
    5
    
    1 2 1 2 1
    
    1
    
    1
    
    7
    
    3 3 3 5 3 3 3

Output

    -1
    1
    -1
    3
    
Note

In the first testcase, it is impossible to modify the array in such a way that
it stops being beautiful. An array consisting of identical numbers will remain
beautiful no matter how many numbers we remove from it.

In the second testcase, you can remove the number at the index 5 , for
example.

The resulting array will be [1, 2, 1, 2] . Let's check if it is beautiful. Two
operations are available:

  * Choose i = 2 : the array becomes [1, 1, 1, 2] . No more operations can be applied to it, and the numbers are not all the same. 
  * Choose i = 3 instead: the array becomes [1, 2, 2, 2] . No more operations can be applied to it either, and the numbers are still not all the same. 

Thus, the array [1, 2, 1, 2] is not beautiful.

In the fourth testcase, you can remove the first three elements, for example.
The resulting array [5, 3, 3, 3] is not beautiful.","from math import inf
for _ in range(int(input())):
    n = int(input())
    ar = list(map(int,input().split()))
 
    same = 1
    num = ar[0]
    minn = inf
    i = 1
    while i<len(ar):
        if ar[i] == num:
            same +=1
        else:
            i+=1
            num = ar[i]
            minn = min(minn,same)
            same = 1
        i+=1
    minn = min(minn,same)
    if minn == inf:
        print(-1)
    else:
        print(minn)",1,False,False
1931_A,1931_A_faishal_052_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"Nikita had a word consisting of exactly 3 lowercase Latin letters. The letters
in the Latin alphabet are numbered from 1 to 26 , where the letter ""a"" has the
index 1 , and the letter ""z"" has the index 26 .

He encoded this word as the sum of the positions of all the characters in the
alphabet. For example, the word ""cat"" he would encode as the integer 3 + 1 +
20 = 24 , because the letter ""c"" has the index 3 in the alphabet, the letter
""a"" has the index 1 , and the letter ""t"" has the index 20 .

However, this encoding turned out to be ambiguous! For example, when encoding
the word ""ava"", the integer 1 + 22 + 1 = 24 is also obtained.

Determine the lexicographically smallest word of 3 letters that could have
been encoded.

A string a is lexicographically smaller than a string b if and only if one of
the following holds:

  * a is a prefix of b , but a \ne b ;
  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .

Input

The first line of the input contains a single integer t (1 \le t \le 100 ) —
the number of test cases in the test.

This is followed by the descriptions of the test cases.

The first and only line of each test case contains an integer n (3 \le n \le
78 ) — the encoded word.

Output

For each test case, output the lexicographically smallest three-letter word
that could have been encoded on a separate line.

Example

Input

    5
    
    24
    
    70
    
    3
    
    55
    
    48

Output

    aav
    rzz
    aaa
    czz
    auz","cases=int(input())
for i in range(cases):
    arr=[]
    lex=int(input())
    for j in range(2):
        if(lex<=26):
            arr.append(1)
            lex=lex-1
        elif(lex<52):
            arr.append(26)
            lex=lex-26
        else:
            arr.append(26)
            lex=lex-26    
    arr.append(lex)
    arr.sort()
    for k in range(3):
        print(chr(arr[k]+96), end='')",1,False,False
1929_C,1929_C_avaniagr_12.50%,codeforces2024,human,qwen2.5-7b-instruct,"Sasha decided to give his girlfriend the best handbag, but unfortunately for
Sasha, it is very expensive. Therefore, Sasha wants to earn it. After looking
at earning tips on the internet, he decided to go to the casino.

Sasha knows that the casino operates under the following rules. If Sasha
places a bet of y coins (where y is a positive integer), then in case of
winning, he will receive y \cdot k coins (i.e., his number of coins will
increase by y \cdot (k - 1) ). And in case of losing, he will lose the entire
bet amount (i.e., his number of coins will decrease by y ).

Note that the bet amount must always be a positive (> 0 ) integer and cannot
exceed Sasha's current number of coins.

Sasha also knows that there is a promotion at the casino: he cannot lose more
than x times in a row.

Initially, Sasha has a coins. He wonders whether he can place bets such that
he is guaranteed to win any number of coins. In other words, is it true that
for any integer n , Sasha can make bets so that for any outcome that does not
contradict the rules described above, at some moment of time he will have at
least n coins.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 1000 ) — the number of test cases. The description of
the test cases follows.

The single line of each test case contains three integers k, x and a (2 \leq k
\leq 30 , 1 \leq x \leq 100 , 1 \leq a \leq 10^9 ) — the number of times the
bet is increased in case of a win, the maximum number of consecutive losses,
and the initial number of coins Sasha has.

Output

For each test case, output ""YES"" (without quotes) if Sasha can achieve it and
""NO"" (without quotes) otherwise.

You can output ""YES"" and ""NO"" in any case (for example, the strings ""yEs"",
""yes"" and ""Yes"" will be recognized as a positive answer).

Example

Input

    9
    
    2 1 7
    
    2 1 1
    
    2 3 15
    
    3 3 6
    
    4 4 5
    
    5 4 7
    
    4 88 1000000000
    
    25 69 231
    
    13 97 18806

Output

    YES
    NO
    YES
    NO
    NO
    YES
    NO
    NO
    NO
    
Note

In the first test case, Sasha can proceed as follows:

  * If Sasha places a bet for the first time or if he won the previous bet, then he places 1 coin.
  * If Sasha lost the previous bet, then he places 2 coins.

Note that Sasha cannot lose more than once in a row.

It can be proven that with this strategy, Sasha can obtain as many coins as he
wants.

In the second test case, Sasha can only place 1 coin for the first time. But
in case of a loss, he will not be able to place any more bets, so he will not
be able to guarantee having as many coins as he wants.","t = int(input())
for _ in range(t):
    k,x,a = map(int,input().split())
# for s in [*open(0)][1:]:
#     k,x,a=map(int,s.split())
    if x<k-1:
        if a>=(x+1):
            print('YES')
        else:
            print('NO')
    elif x==k-1:
        if a>=x+3:
            print('YES')
        else:
            print('NO')
    else:
        # z = k-2
        # for i in range(x-k+3):
        #     z += (z//(k-1) + 1)
        # if a>=z:
        #     print('YES')
        # else:
        #     print('NO')
        z=0
        for i in range(x+1):
            z+=(z//(k-1) + 1)
        if a>=z:
            print(""YES"")
        else:
            print(""NO"")",1,False,False
1922_A,1922_A_Abdo.2911_100%,codeforces2024,human,qwen2.5-7b-instruct,"You are given an integer n and three strings a, b, c , each consisting of n
lowercase Latin letters.

Let a template be a string t consisting of n lowercase and/or uppercase Latin
letters. The string s matches the template t if the following conditions hold
for all i from 1 to n :

  * if the i -th letter of the template is lowercase, then s_i must be the same as t_i ; 
  * if the i -th letter of the template is uppercase, then s_i must be different from the lowercase version of t_i . For example, if there is a letter 'A' in the template, you cannot use the letter 'a' in the corresponding position of the string. 

Accordingly, the string doesn't match the template if the condition doesn't
hold for at least one i .

Determine whether there exists a template t such that the strings a and b
match it, while the string c does not.

Input

The first line contains an integer t (1 \le t \le 1000 ) — the number of test
cases.

The first line of each test case contains an integer n (1 \le n \le 20 ) — the
length of the given strings.

The next three lines contain the strings a, b and c . Each string consists of
exactly n lowercase Latin letters.

Output

For each testcase, print ""YES"" if there exists a template t such that the
strings a and b match it, while the string c does not. Otherwise, print ""NO"".

Example

Input

    4
    
    1
    
    a
    
    b
    
    c
    
    2
    
    aa
    
    bb
    
    aa
    
    10
    
    mathforces
    
    luckforces
    
    adhoccoder
    
    3
    
    acc
    
    abd
    
    abc

Output

    YES
    NO
    YES
    NO
    
Note

In the first test case, you can use the template ""C"". The first letter of
strings a and b differ from 'c', so they match the template. The first letter
of string c equals 'c', so it doesn't match.

In the third test case, you can use the template ""CODEforces"".","def solve():
    t = int(input())
    for _ in range(t):
        n = int(input())
        a = input().strip()
        b = input().strip()
        c = input().strip()
 
        possible = False
        
        for i in range(n):
            if a[i] == b[i]:
                if c[i] != a[i]:
                    possible = True
                    break
            else:
                if c[i] == a[i] or c[i] == b[i]:
                    continue
                else:
                    possible = True
                    break
        
        if possible:
            print(""YES"")
        else:
            print(""NO"")
 
solve()",1,True,False
1948_D,1948_D_jinyiqi_100%,codeforces2024,human,qwen2.5-7b-instruct,"You are given a string s , consisting of lowercase Latin letters and/or
question marks.

A tandem repeat is a string of an even length such that its first half is
equal to its second half.

A string a is a substring of a string b if a can be obtained from b by the
deletion of several (possibly, zero or all) characters from the beginning and
several (possibly, zero or all) characters from the end.

Your goal is to replace each question mark with some lowercase Latin letter in
such a way that the length of the longest substring that is a tandem repeat is
maximum possible.

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
testcases.

The only line of each testcase contains a string s (1 \le |s| \le 5000 ),
consisting only of lowercase Latin letters and/or question marks.

The total length of the strings over all testcases doesn't exceed 5000 .

Output

For each testcase, print a single integer — the maximum length of the longest
substring that is a tandem repeat after you replace each question mark in the
string with some lowercase Latin letter.

If it's impossible to make any tandem repeat substrings in the string, print 0
.

Example

Input

    4
    
    zaabaabz
    
    ?????
    
    code?????s
    
    codeforces

Output

    6
    4
    10
    0","t = int(input())
 
 
def solve():
    s = list(input())
    n = len(s)
    for j in range(n // 2, 0, -1):
        count = 0
        for k in range(0, n - j):
            if s[k] == '?' or s[k + j] == '?' or s[k] == s[k + j]:
                count += 1
            else:
                count = 0
            if count == j:
                print(count * 2)
                return
    print(0)
 
for i in range(t):
    
 
    solve()",1,True,False
1974_B,1974_B_171._0.00%,codeforces2024,human,qwen2.5-7b-instruct,"Polycarp has a string s , which consists of lowercase Latin letters. He
encodes this string using the following algorithm:

  * first, he constructs a new auxiliary string r , which consists of all distinct letters of the string s , written in alphabetical order; 
  * then the encoding happens as follows: each character in the string s is replaced by its symmetric character from the string r (the first character of the string r will be replaced by the last, the second by the second from the end, and so on). 

For example, encoding the string s =""codeforces"" happens as follows:

  * the string r is obtained as ""cdefors""; 
  * the first character s_1 ='c' is replaced by 's'; 
  * the second character s_2 ='o' is replaced by 'e'; 
  * the third character s_3 ='d' is replaced by 'r'; 
  * ... 
  * the last character s_{10} ='s' is replaced by 'c'. 

![](https://espresso.codeforces.com/b6f889887677396af4d296900b8ca492324e83ef.png)
The string r and replacements for s =""codeforces"".

Thus, the result of encoding the string s =""codeforces"" is the string
""serofedsoc"".

Write a program that performs decoding — that is, restores the original string
s from the encoding result.

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ) — the length of the string b .

The second line of each test case contains a string b of length n , consisting
of lowercase Latin letters — the result of encoding the original string s .

It is guaranteed that the sum of the values of n over all test cases in the
test does not exceed 2 \cdot 10^5 .

Output

For each test case, output the string s from which the encoding result b was
obtained.

Example

Input

    5
    
    10
    
    serofedsoc
    
    3
    
    ttf
    
    9
    
    tlrhgmaoi
    
    1
    
    w
    
    15
    
    hnndledmnhlttin

Output

    codeforces
    fft
    algorithm
    w
    meetinthemiddle","import sys
from typing import List
 
input = sys.stdin.readline
 
def decode(encoded: str) -> str:
    mapping = {}
    decoded = []
 
    for char in encoded:
        if char in mapping:
            decoded.append(mapping[char])
        else:
            # Find the next unused letter from 'a' to 'z'
            for c in range(ord('a'), ord('z') + 1):
                if chr(c) not in mapping.values():
                    mapping[chr(c)] = char
                    break
            decoded.append(chr(c))
 
    return """".join(decoded)
 
if __name__ == ""__main__"":
    num_cases = int(input().strip())
 
    for _ in range(num_cases):
        n = int(input().strip())
        encoded = input().strip()
        decoded = decode(encoded)
        print(decoded)",1,False,False
1974_B,1974_B_171._0.00%,codeforces2024,human,qwen2.5-7b-instruct,"Polycarp has a string s , which consists of lowercase Latin letters. He
encodes this string using the following algorithm:

  * first, he constructs a new auxiliary string r , which consists of all distinct letters of the string s , written in alphabetical order; 
  * then the encoding happens as follows: each character in the string s is replaced by its symmetric character from the string r (the first character of the string r will be replaced by the last, the second by the second from the end, and so on). 

For example, encoding the string s =""codeforces"" happens as follows:

  * the string r is obtained as ""cdefors""; 
  * the first character s_1 ='c' is replaced by 's'; 
  * the second character s_2 ='o' is replaced by 'e'; 
  * the third character s_3 ='d' is replaced by 'r'; 
  * ... 
  * the last character s_{10} ='s' is replaced by 'c'. 

![](https://espresso.codeforces.com/b6f889887677396af4d296900b8ca492324e83ef.png)
The string r and replacements for s =""codeforces"".

Thus, the result of encoding the string s =""codeforces"" is the string
""serofedsoc"".

Write a program that performs decoding — that is, restores the original string
s from the encoding result.

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ) — the length of the string b .

The second line of each test case contains a string b of length n , consisting
of lowercase Latin letters — the result of encoding the original string s .

It is guaranteed that the sum of the values of n over all test cases in the
test does not exceed 2 \cdot 10^5 .

Output

For each test case, output the string s from which the encoding result b was
obtained.

Example

Input

    5
    
    10
    
    serofedsoc
    
    3
    
    ttf
    
    9
    
    tlrhgmaoi
    
    1
    
    w
    
    15
    
    hnndledmnhlttin

Output

    codeforces
    fft
    algorithm
    w
    meetinthemiddle","import sys
from typing import List
 
input = sys.stdin.readline
 
def decode(encoded: str) -> str:
    mapping = {}
    decoded = []
 
    for char in encoded:
        if char in mapping:
            decoded.append(mapping[char])
        else:
            # Find the next unused letter from 'a' to 'z'
            for c in range(ord('a'), ord('z') + 1):
                if chr(c) not in mapping.values():
                    mapping[chr(c)] = char
                    break
            decoded.append(chr(c))
 
    return """".join(decoded)
 
if __name__ == ""__main__"":
    num_cases = int(input().strip())
 
    for _ in range(num_cases):
        n = int(input().strip())
        encoded = input().strip()
        decoded = decode(encoded)
        print(decoded)",1,False,False
1974_B,1974_B_171._0.00%,codeforces2024,human,qwen2.5-7b-instruct,"Polycarp has a string s , which consists of lowercase Latin letters. He
encodes this string using the following algorithm:

  * first, he constructs a new auxiliary string r , which consists of all distinct letters of the string s , written in alphabetical order; 
  * then the encoding happens as follows: each character in the string s is replaced by its symmetric character from the string r (the first character of the string r will be replaced by the last, the second by the second from the end, and so on). 

For example, encoding the string s =""codeforces"" happens as follows:

  * the string r is obtained as ""cdefors""; 
  * the first character s_1 ='c' is replaced by 's'; 
  * the second character s_2 ='o' is replaced by 'e'; 
  * the third character s_3 ='d' is replaced by 'r'; 
  * ... 
  * the last character s_{10} ='s' is replaced by 'c'. 

![](https://espresso.codeforces.com/b6f889887677396af4d296900b8ca492324e83ef.png)
The string r and replacements for s =""codeforces"".

Thus, the result of encoding the string s =""codeforces"" is the string
""serofedsoc"".

Write a program that performs decoding — that is, restores the original string
s from the encoding result.

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ) — the length of the string b .

The second line of each test case contains a string b of length n , consisting
of lowercase Latin letters — the result of encoding the original string s .

It is guaranteed that the sum of the values of n over all test cases in the
test does not exceed 2 \cdot 10^5 .

Output

For each test case, output the string s from which the encoding result b was
obtained.

Example

Input

    5
    
    10
    
    serofedsoc
    
    3
    
    ttf
    
    9
    
    tlrhgmaoi
    
    1
    
    w
    
    15
    
    hnndledmnhlttin

Output

    codeforces
    fft
    algorithm
    w
    meetinthemiddle","import sys
from typing import List
 
input = sys.stdin.readline
 
def decode(encoded: str) -> str:
    mapping = {}
    decoded = []
 
    for char in encoded:
        if char in mapping:
            decoded.append(mapping[char])
        else:
            # Find the next unused letter from 'a' to 'z'
            for c in range(ord('a'), ord('z') + 1):
                if chr(c) not in mapping.values():
                    mapping[chr(c)] = char
                    break
            decoded.append(chr(c))
 
    return """".join(decoded)
 
if __name__ == ""__main__"":
    num_cases = int(input().strip())
 
    for _ in range(num_cases):
        n = int(input().strip())
        encoded = input().strip()
        decoded = decode(encoded)
        print(decoded)",1,False,False
1937_A,1937_A_Morphy0123_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"You are given an array a_1, a_2, \ldots, a_n . Initially, a_i=i for each 1 \le
i \le n .

The operation \texttt{swap}(k) for an integer k \ge 2 is defined as follows:

  * Let d be the largest divisor^\dagger of k which is not equal to k itself. Then swap the elements a_d and a_k . 

Suppose you perform \texttt{swap}(i) for each i=2,3,\ldots, n in this exact
order. Find the position of 1 in the resulting array. In other words, find
such j that a_j = 1 after performing these operations.

^\dagger An integer x is a divisor of y if there exists an integer z such that
y = x \cdot z .

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 10^4 ). The description of the test cases follows.

The only line of each test case contains one integer n (1 \le n \le 10^9 ) —
the length of the array a .

Output

For each test case, output the position of 1 in the resulting array.

Example

Input

    4
    
    1
    
    4
    
    5
    
    120240229

Output

    1
    4
    4
    67108864
    
Note

In the first test case, the array is [1] and there are no operations
performed.

In the second test case, a changes as follows:

  * Initially, a is [1,2,3,4] . 
  * After performing \texttt{swap}(2) , a changes to [\underline{2},\underline{1},3,4] (the elements being swapped are underlined). 
  * After performing \texttt{swap}(3) , a changes to [\underline{3},1,\underline{2},4] . 
  * After performing \texttt{swap}(4) , a changes to [3,\underline{4},2,\underline{1}] . 

Finally, the element 1 lies on index 4 (that is, a_4 = 1 ). Thus, the answer
is 4 .","from math import log2
n_cases = int(input())
 
for i in range(n_cases):
    n = int(input())
    if n == 1:
        print(1)
    else:
        power = 1
        while power < log2(n):
            power += 1
        if power == n:
            print(2 ** power)
        else:
            power -= 1
            print(2 ** power)",1,False,False
1929_A,1929_A_joshlfrog_66.67%,codeforces2024,human,qwen2.5-7b-instruct,"Sasha decided to give his girlfriend an array a_1, a_2, \ldots, a_n . He found
out that his girlfriend evaluates the beauty of the array as the sum of the
values (a_i - a_{i - 1}) for all integers i from 2 to n .

Help Sasha and tell him the maximum beauty of the array a that he can obtain,
if he can rearrange its elements in any way.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 500 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (2 \leq n \leq
100 ) — the length of the array a .

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\leq a_i \leq 10^9 ) — the elements of the array a .

Output

For each test case, output a single integer — the maximum beauty of the array
a that can be obtained.

Example

Input

    5
    
    3
    
    2 1 3
    
    3
    
    69 69 69
    
    5
    
    100 54 80 43 90
    
    4
    
    3 4 3 3
    
    2
    
    2 1

Output

    2
    0
    57
    1
    1
    
Note

In the first test case, the elements of the array a can be rearranged to make
a = [1, 2, 3] . Then its beauty will be equal to (a_2 - a_1) + (a_3 - a_2) =
(2 - 1) + (3 - 2) = 2 .

In the second test case, there is no need to rearrange the elements of the
array a . Then its beauty will be equal to 0 .","t = int(input())
for e in range(t):
    l = int(input())
    nums = [int(x) for x in input().split()]
    x=0
    y=100000000
    for i in range(l):
        if nums[i]>x:
            x = nums[i]
        if nums[i]<y:
            y = nums[i]
    print(x-y)",1,False,False
1956_A,1956_A_Sniperlyfe_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"Nene invented a new game based on an increasing sequence of integers a_1, a_2,
\ldots, a_k .

In this game, initially n players are lined up in a row. In each of the rounds
of this game, the following happens:

  * Nene finds the a_1 -th, a_2 -th, \ldots , a_k -th players in a row. They are kicked out of the game simultaneously. If the i -th player in a row should be kicked out, but there are fewer than i players in a row, they are skipped. 

Once no one is kicked out of the game in some round, all the players that are
still in the game are declared as winners.

For example, consider the game with a=[3, 5] and n=5 players. Let the players
be named player A, player B, \ldots , player E in the order they are lined up
initially. Then,

  * Before the first round, players are lined up as ABCDE. Nene finds the 3 -rd and the 5 -th players in a row. These are players C and E. They are kicked out in the first round. 
  * Now players are lined up as ABD. Nene finds the 3 -rd and the 5 -th players in a row. The 3 -rd player is player D and there is no 5 -th player in a row. Thus, only player D is kicked out in the second round. 
  * In the third round, no one is kicked out of the game, so the game ends after this round. 
  * Players A and B are declared as the winners. 

Nene has not yet decided how many people would join the game initially. Nene
gave you q integers n_1, n_2, \ldots, n_q and you should answer the following
question for each 1 \le i \le q independently:

  * How many people would be declared as winners if there are n_i players in the game initially? 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 250 ). The description of test cases follows.

The first line case contains two integers k and q (1 \le k, q \le 100 ) — the
length of the sequence a and the number of values n_i you should solve this
problem for.

The second line contains k integers a_1,a_2,\ldots,a_k (1\leq
a_1<a_2<\ldots<a_k\leq 100 ) — the sequence a .

The third line contains q integers n_1,n_2,\ldots,n_q (1\leq n_i \leq 100 ).

Output

For each test case, output q integers: the i -th (1\le i \le q ) of them
should be the number of players declared as winners if initially n_i players
join the game.

Example

Input

    6
    
    2 1
    
    3 5
    
    5
    
    5 3
    
    2 4 6 7 9
    
    1 3 5
    
    5 4
    
    3 4 5 6 7
    
    1 2 3 4
    
    2 3
    
    69 96
    
    1 10 100
    
    1 1
    
    100
    
    50
    
    3 3
    
    10 20 30
    
    1 10 100

Output

    2 
    1 1 1 
    1 2 2 2 
    1 10 68 
    50 
    1 9 9 
    
Note

The first test case was explained in the statement.

In the second test case, when n=1 , the only player stays in the game in the
first round. After that, the game ends and the only player is declared as a
winner.","def rem_p(n, p):
    while n >= min(p):
        n -= sum(1 for x in p if x<= n)
    return n
    
def solve():
    t = int(input())
    for _ in range(t):
        k, q = map(int, input().split())
        p = list(map(int, input().split()))
        qs = list(map(int, input().split()))
        
        res = []
        for n in qs:
            res.append(rem_p(n, p))
            print(' '.join(map(str, res)))
            
solve()",1,False,False
1970_C2,1970_C2_Ehijoe_21.43%,codeforces2024,human,qwen2.5-7b-instruct,"This is the medium version of the problem. The difference in this version is
that t=1 and we work on trees.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. The game consists of t rounds, each of which starts with a stone on
exactly one node, which is considered as activated. A move consists of picking
an inactive neighbor of the node with a stone on it and moving the stone there
(thus activating this neighbor). Ron makes the first move, after which he
alternates with Hermione until no valid move is available. The player that
cannot make a move loses the round. If both players play optimally, who wins
each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either ""Ron"" or ""Hermione"".

Example

Input

    5 1
    
    1 2
    
    1 3
    
    3 4
    
    3 5
    
    1

Output

    Ron","from functools import reduce
import math
from collections import deque, defaultdict
 
 
def dfs(nodes, start, parent=None):
	if len(nodes[start]) == 1 and nodes[start][0] == parent:
		return [0]
	distances = []
	for node in nodes[start]:
		if node != parent:
			distances.extend([1 + dist for dist in dfs(nodes, node, start)])
	return distances
 
 
def testcase():
	n, t = map(int, input().split())
	edges = []
	empty = True
	nodes = defaultdict(list)
	for i in range(n - 1):
		u, v = map(int, input().split())
		nodes[u].append(v)
		nodes[v].append(u)
	
	leaves = deque()
	for key in nodes:
		if len(nodes[key]) == 1:
			leaves.append(key)
	
	start = int(input())
	moves = dfs(nodes, start)
	
	if any([move % 2 == 1 for move in moves]):
		print(""Ron"")
	else:
		print(""Hermione"")
 
 
t = 1 # int(input())
 
for i in range(t):
	testcase()",1,False,False
1937_B,1937_B_kaushik_yadav_100%,codeforces2024,human,qwen2.5-7b-instruct,"You are given a 2 \times n grid filled with zeros and ones. Let the number at
the intersection of the i -th row and the j -th column be a_{ij} .

There is a grasshopper at the top-left cell (1, 1) that can only jump one cell
right or downwards. It wants to reach the bottom-right cell (2, n) . Consider
the binary string of length n+1 consisting of numbers written in cells of the
path without changing their order.

Your goal is to:

  1. Find the lexicographically smallest^\dagger string you can attain by choosing any available path; 
  2. Find the number of paths that yield this lexicographically smallest string. 

^\dagger If two strings s and t have the same length, then s is
lexicographically smaller than t if and only if in the first position where s
and t differ, the string s has a smaller element than the corresponding
element in t .

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 10^4 ). The description of the test cases follows.

The first line of each test case contains a single integer n (2 \le n \le 2
\cdot 10^5 ).

The second line of each test case contains a binary string a_{11} a_{12}
\ldots a_{1n} (a_{1i} is either 0 or 1 ).

The third line of each test case contains a binary string a_{21} a_{22} \ldots
a_{2n} (a_{2i} is either 0 or 1 ).

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output two lines:

  1. The lexicographically smallest string you can attain by choosing any available path; 
  2. The number of paths that yield this string. 

Example

Input

    3
    
    2
    
    00
    
    00
    
    4
    
    1101
    
    1100
    
    8
    
    00100111
    
    11101101

Output

    000
    2
    11000
    1
    001001101
    4
    
Note

In the first test case, the lexicographically smallest string is \mathtt{000}
. There are two paths that yield this string:

![](https://espresso.codeforces.com/77986b77a0625593b90ec3560ecfcbf9154500d2.png)

In the second test case, the lexicographically smallest string is
\mathtt{11000} . There is only one path that yields this string:

![](https://espresso.codeforces.com/553da757110049e03424fa5158938ddaa7e49324.png)","import sys
input = sys.stdin.readline
t=int(input())
for _ in range(t):
    n=int(input())
    a=input().strip()
    b=input().strip()
    ans=""""
    i=0
    work=True
    while(i<len(a)):
        if(work):
            ans+=a[i]
            if i+1<len(a) and b[i]<a[i+1]:
                work=False
            elif i+1==len(a):
                ans+=b[i]
                break
            else:
                i+=1
        else:
            ans+=b[i]
            i+=1
    print(ans)
    counter=1
    for j in range(len(a)-1):
        if(a[j+1]==b[j]):
            counter+=1
        elif(a[j+1]==""0""and b[j]==""1""):
            counter=1
        else:
            break
    print(counter)",1,True,False
1924_A,1924_A_uguess_8.33%,codeforces2024,human,qwen2.5-7b-instruct,"You are given two integers n and k along with a string s .

Your task is to check whether all possible strings of length n that can be
formed using the first k lowercase English alphabets occur as a subsequence of
s . If the answer is NO, you also need to print a string of length n that can
be formed using the first k lowercase English alphabets which does not occur
as a subsequence of s .

If there are multiple answers, you may print any of them.

Note: A string a is called a subsequence of another string b if a can be
obtained by deleting some (possibly zero) characters from b without changing
the order of the remaining characters.

Input

The first line of input contains a single integer t \, (1 \le t \le 10^5) ,
the number of test cases.

The first line of each test case contains 3 integers n \, (1 \le n \le 26), \:
k \, (1 \le k \le 26), \: m \, (1 \le m \le 1000) , where n and k are the same
as described in the input and m is the length of the string s .

The second line of each test case contains a single string s of length m ,
comprising only of the first k lowercase English alphabets.

It is guaranteed that the sum of m and the sum of n over all test cases does
not exceed 10^6 .

Output

For each test case, print YES if all possible strings of length n that can be
formed using the first k lowercase English alphabets occur as a subsequence of
s , else print NO.

If your answer is NO, print a string of length n that can be formed using the
first k lowercase English alphabets which does not occur as a subsequence of s
in the next line.

You may print each letter of YES or NO in any case (for example, YES, yES, YeS
will all be recognized as a positive answer).

Example

Input

    3
    
    2 2 4
    
    abba
    
    2 2 3
    
    abb
    
    3 3 10
    
    aabbccabab

Output

    YES
    NO
    aa
    NO
    ccc
    
Note

For the first test case, all possible strings (aa, ab, ba, bb) of length 2
that can be formed using the first 2 English alphabets occur as a subsequence
of abba.

For the second test case, the string aa is not a subsequence of abb.","t = int(input())
 
for i in range(t):
    n, k, m = map(int,input().split())
    s = input()
 
    cnt = 0
    cur = 0
 
    for ss in s:
        cur_ss = ord(ss)-ord('a')
        if cur & (1 << cur_ss) == 0:
            cur += (1 << cur_ss)
        if cur == (1<<k)-1:
            cnt += 1
            cur = 0
    if cnt >= n:
        print('YES')
    else:
        print('NO')
        tmp = ''
        ans = chr(ord('a')+k-1) * cnt
        for i in range(k):
            if cur & (1 << i) == 0:
                tmp = chr(ord('a')+i)
        ans += tmp
        ans += 'a'*(n-cnt-1)
        print(ans)",1,False,False
1945_D,1945_D_vjudge.1_100%,codeforces2024,human,qwen2.5-7b-instruct,"The guys lined up in a queue of n people, starting with person number i = 1 ,
to ask Serafim the Owl about the meaning of life. Unfortunately, Kirill was
very busy writing the legend for this problem, so he arrived a little later
and stood at the end of the line after the n -th person. Kirill is completely
dissatisfied with this situation, so he decided to bribe some people ahead of
him.

For the i -th person in the queue, Kirill knows two values: a_i and b_i . If
at the moment Kirill is standing at position i , then he can choose any
position j such that j < i and exchange places with the person at position j .
In this case, Kirill will have to pay him a_j coins. And for each k such that
j < k < i , Kirill will have to pay b_k coins to the person at position k .
Kirill can perform this action any number of times.

Kirill is thrifty, so he wants to spend as few coins as possible, but he
doesn't want to wait too long, so Kirill believes he should be among the first
m people in line.

Help Kirill determine the minimum number of coins he will have to spend in
order to not wait too long.

Input

Each test consists of several sets of input data. The first line contains a
single integer t (1 \le t \le 10^4 ) — the number of test cases. Then follows
the description of the test case.

The first line of each test case contains two integers n and m (1 \le m \le n
\le 200\,000 ) — the number of people in the queue besides Kirill and the
maximum allowable final position of Kirill, respectively.

The second line contains n integers a_1, a_2, \dots, a_n separated by spaces
(1 \le a_i \le 10^9 ).

The third line contains n integers b_1, b_2, \dots, b_n separated by spaces (1
\le b_i \le 10^9 ).

It is guaranteed that the sum of the values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer — the minimum number of coins
Kirill needs to spend.

Example

Input

    4
    
    4 2
    
    7 3 6 9
    
    4 3 8 5
    
    6 2
    
    6 9 7 1 8 3
    
    5 8 8 1 4 1
    
    7 7
    
    7 2 9 2 6 5 9
    
    9 1 10 7 1 4 9
    
    2 1
    
    2 3
    
    1 1

Output

    14
    22
    9
    3","def solve(n, k, a, b):
    c = [min(a[i], b[i]) for i in range(n)]
 
    suff = [0] * (n + 1)
    for i in range(n - 1, -1, -1):
        suff[i] = suff[i + 1] + c[i]
 
    ans = float('inf')
    for i in range(k):
        ans = min(ans, a[i] + suff[i + 1])
 
    print(ans)
 
t = int(input())
for _ in range(t):
    n, k = map(int, input().split())
    a = list(map(int, input().split()))
    b = list(map(int, input().split()))
 
    solve(n, k, a, b)",1,True,False
1951_E,1951_E_harshkankhar1_100%,codeforces2024,human,qwen2.5-7b-instruct,"[Christopher Tin ft. Soweto Gospel Choir - Baba
Yetu](https://youtu.be/d4iOF4yoNQw)

ඞ

You are given a string s consisting of lowercase Latin characters. You need to
partition^\dagger this string into some substrings, such that each substring
is not a palindrome^\ddagger .

^\dagger A partition of a string s is an ordered sequence of some k strings
t_1, t_2, \ldots, t_k , such that t_1 + t_2 + \ldots + t_k = s , where + here
represents the concatenation operation.

^\ddagger A string s is considered a palindrome if it reads the same backwards
as forwards. For example, \mathtt{racecar} , \mathtt{abccba} , and \mathtt{a}
are palindromes, but \mathtt{ab} , \mathtt{dokibird} , and \mathtt{kurosanji}
are not.

Input

Each test contains multiple test cases. The first line contains an integer t
(1 \le t \le 10^4 ) — the number of test cases.

Each test case contains a string s consisting of lowercase Latin characters (1
\le |s| \le 10^6 ).

It is guaranteed that the sum of |s| over all test cases does not exceed 10^6
.

Output

For each test case, print on one line ""YES"" if there exists a partition of s
whose parts are not palindromes, or ""NO"" if there is no such partition.

If the answer is ""YES"", on the second line, print an integer k — the number of
parts that s needs to be partitioned to such that each part is not a
palindrome. On the third line, print k strings t_1, t_2, \ldots, t_k
representing such a partition. If there are multiple such partitions, print
any of them.

Example

Input

    3
    
    sinktheyacht
    
    lllllllll
    
    uwuowouwu

Output

    YES
    1
    sinktheyacht
    NO
    YES
    3
    uw uow ouwu
    
Note

In the first test case, since \mathtt{sinktheyacht} is already non-palindrome,
the partition [\mathtt{sinktheyacht}] is valid.

In the second test case, as any substring of the string s is palindrome, there
are no valid partitions.

In the third test case, another valid partition is [\mathtt{uw},\mathtt{uo},
\mathtt{wou}, \mathtt{wu}] .","def Palindrome(s) -> bool:
	return s == s[::-1]
def solve():
	s = input()
	n,x=len(s),-1
	if Palindrome(s[0:])==False:
		print(""YES"")
		print(1)
		print(s)
		return
	for i in range(1,n):
		if s[i] != s[0]:
			x=i
			break
	if(x==-1):
		print(""NO"")
		return
	if Palindrome(s[x+1:])==False:
		print(""YES"")
		print(2)
		print(s[:x+1],"" "",s[x+1:])
	elif(x==1 or x==n//2):
		print(""NO"")
	else:
		print(""YES"")
		print(2)
		print(s[:x+2],"" "",s[x+2:])
 
			
 
for _ in range(int(input())):
	solve()",1,True,False
1971_D,1971_D_DSKroc_100%,codeforces2024,human,qwen2.5-7b-instruct,"You are given a binary string^{\dagger} . Please find the minimum number of
pieces you need to cut it into, so that the resulting pieces can be rearranged
into a sorted binary string.

![](https://espresso.codeforces.com/76039f9769ba94c1817dbbc5e1fb1b5e4f60950f.png)

Note that:

  * each character must lie in exactly one of the pieces; 
  * the pieces must be contiguous substrings of the original string; 
  * you must use all the pieces in the rearrangement. 

^{\dagger} A binary string is a string consisting of characters \texttt{0} and
\texttt{1} . A sorted binary string is a binary string such that all
characters \texttt{0} come before all characters \texttt{1} .

Input

The first line contains a single integer t (1 \leq t \leq 500 ) — the number
of test cases.

The only line of each test case contains a single string s (1 \leq |s| \leq
500 ) consisting of characters \texttt{0} and \texttt{1} , where |s| denotes
the length of the string s .

Output

For each test case, output a single integer — the minimum number of pieces
needed to be able to rearrange the string into a sorted binary string.

Example

Input

    6
    
    11010
    
    00000000
    
    1
    
    10
    
    0001111
    
    0110

Output

    3
    1
    1
    2
    1
    2
    
Note

The first test case is pictured in the statement. It can be proven that you
can't use fewer than 3 pieces.

In the second and third test cases, the binary string is already sorted, so
only 1 piece is needed.

In the fourth test case, you need to make a single cut between the two
characters and rearrange them to make the string \texttt{01} .","import math
t = int(input())
for q in range(t) :
    s =  input()
    count=0
    flag = 0
    for i in range(len(s)-1) :
        if int(s[i]) != int(s[i+1]) :
            count+=1
        if int(s[i]) < int(s[i+1]): flag =1
    if flag==0 :print(count+1)
    else : print(count)",1,True,False
1948_E,1948_E_123gjweq2_100%,codeforces2024,human,qwen2.5-7b-instruct,"You are given two integers, n and k . There is a graph on n vertices, numbered
from 1 to n , which initially has no edges.

You have to assign each vertex an integer; let a_i be the integer on the
vertex i . All a_i should be distinct integers from 1 to n .

After assigning integers, for every pair of vertices (i, j) , you add an edge
between them if |i - j| + |a_i - a_j| \le k .

Your goal is to create a graph which can be partitioned into the minimum
possible (for the given values of n and k ) number of cliques. Each vertex of
the graph should belong to exactly one clique. Recall that a clique is a set
of vertices such that every pair of vertices in it are connected with an edge.

Since BledDest hasn't really brushed his programming skills up, he can't solve
the problem ""given a graph, partition it into the minimum number of cliques"".
So we also ask you to print the partition itself.

Input

The first line contains one integer t (1 \le t \le 1600 ) — the number of test
cases.

Each test case consists of one line containing two integers n and k (2 \le n
\le 40 ; 1 \le k \le 2n ).

Output

For each test case, print three lines:

  * the first line should contain n distinct integers a_1, a_2, \dots, a_n (1 \le a_i \le n ) — the values you assign to the vertices; 
  * the second line should contain one integer q (1 \le q \le n ) — the number of cliques you partition the graph into; 
  * the third line should contain n integers c_1, c_2, \dots, c_n (1 \le c_i \le q ) — the partition of the graph into cliques. Where two vertices u and v are in the same clique if c_u = c_v . 

If there are multiple answers, print any of them.

Example

Input

    3
    
    2 3
    
    5 4
    
    8 16

Output

    2 1
    1
    1 1
    3 1 5 2 4
    2
    1 1 2 1 2
    1 2 3 4 5 6 7 8
    1
    1 1 1 1 1 1 1 1","from math import ceil
 
def thing(n, k):
	cliques = ceil(n / k)
	arr = [0] * n
	cliquess = [0] * n
 
	def make_array(left, right, clique):
		small_element = left + 1
		big_element = right + 1
		mid = (big_element - small_element + 1) // 2
		not_mid = (right - left + 1) - mid
		for i in range(mid):
			arr[left + mid - i - 1] = small_element + i
			cliquess[left + i] = clique
 
		for i in range(not_mid):
			arr[left + mid + i] = big_element - i
			cliquess[left + mid + i] = clique
 
 
 
	for i in range(cliques):
		make_array(i * k, min((i + 1) * k - 1, n - 1), i + 1)
 
	print(*arr)
	print(cliques)
	print(*cliquess)
 
testcases = range(int(input()))
 
for case in testcases:
	n, k = [int(i) for i in input().split("" "")]
	thing(n, k)",1,True,False
1936_A,1936_A_vikenscars_100%,codeforces2024,human,qwen2.5-7b-instruct,"This is an interactive problem.

There is a secret sequence p_0, p_1, \ldots, p_{n-1} , which is a permutation
of \\{0,1,\ldots,n-1\\} .

You need to find any two indices i and j such that p_i \oplus p_j is
maximized, where \oplus denotes the [bitwise XOR
operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).

To do this, you can ask queries. Each query has the following form: you pick arbitrary indices a , b , c , and d (0 \le a,b,c,d < n ). Next, the jury calculates x = (p_a \mid p_b) and y = (p_c \mid p_d) , where | denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR). Finally, you receive the result of comparison between x and y . In other words, you are told if x < y , x > y , or x = y .

Please find any two indices i and j (0 \le i,j < n ) such that p_i \oplus p_j
is maximum among all such pairs, using at most 3n queries. If there are
multiple pairs of indices satisfying the condition, you may output any one of
them.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 10^3 ). The description of the test cases follows.

Interaction

The first line of each test case contains one integer n (2 \le n \le 10^4 ).
At this moment, the permutation p_0, p_1, \ldots, p_{n-1} is chosen. The
interactor in this task is not adaptive. In other words, the sequence p is
fixed in every test case and does not change during the interaction.

To ask a query, you need to pick four indices a , b , c , and d (0 \le a,b,c,d
< n ) and print the line of the following form:

  * ""? a b c d"" 

After that, you receive:

  * ""<"" if (p_a \mid p_b) < (p_c \mid p_d) ; 
  * ""="" if (p_a \mid p_b) = (p_c \mid p_d) ; 
  * "">"" if (p_a \mid p_b) > (p_c \mid p_d) . 

You can make at most 3n queries of this form.

Next, if your program has found a pair of indices i and j (0 \le i, j < n )
such that p_i \oplus p_j is maximized, print the line of the following form:

  * ""! i j"" 

Note that this line is not considered a query and is not taken into account
when counting the number of queries asked.

After this, proceed to the next test case.

If you make more than 3n queries during an interaction, your program must
terminate immediately, and you will receive the Wrong Answer verdict.
Otherwise, you can get an arbitrary verdict because your solution will
continue to read from a closed stream.

After printing a query or the answer for a test case, do not forget to output
the end of line and flush the output. Otherwise, you will get the verdict
Idleness Limit Exceeded. To do this, use:

  * fflush(stdout) or cout.flush() in C++; 
  * System.out.flush() in Java; 
  * flush(output) in Pascal; 
  * stdout.flush() in Python; 
  * see the documentation for other languages. 

It is guaranteed that the sum of n over all test cases does not exceed 10^4 .

Hacks

To hack, follow the test format below.

The first line contains the number of test cases t (1 \le t \le 10^3 ). The
description of the test cases follows.

The first line of each test case contains one integer n (2 \le n \le 10^4 ).

The second line of each test case contains n integers p_0,p_1,\ldots,p_{n-1} ,
which represent a permutation of integers from 0 to n - 1 .

The sum of n over all test cases should not exceed 10^4 .

Example

Input

    2
    4
    
    <
    
    =
    
    >
    
    2
    
Output

    ? 0 2 3 1
    
    ? 1 1 2 3
    
    ? 1 2 0 3
    
    ! 3 2
    
    ! 0 1
    
Note

In the first test case, the hidden permutation is p=[0,3,1,2] .

For the query ""? 0 2 3 1"", the jury return ""<"" because (p_0 \mid p_2) = (0
\mid 1) =1 < (p_3 \mid p_1) = (2 \mid 3) = 3 .

For the query ""? 1 1 2 3"", the jury return ""="" because (p_1 \mid p_1) = (3\mid
3)= 3 = (p_2 \mid p_3) = (1 \mid 2)=3 .

For the query ""? 1 2 0 3"", the jury return "">"" because (p_1 \mid p_2) = (3
\mid 1) = 3 > (p_0 \mid p_3) = (0\mid 2)=2 .

The answer i = 3 and j = 2 is valid: (p_3 \oplus p_2) = (2 \oplus 1) = 3 is
indeed equal to the maximum possible value of p_i \oplus p_j . Another valid
answer would be i=0 and j=1 . As the number of queries does not exceed 3n=12 ,
the answer is considered correct.

In the second test case, n = 2 , so p is either [0, 1] or [1, 0] . In any
case, p_0 \oplus p_1 = 1 is maximum possible.","#!/usr/bin/python3
 
import sys
 
def ask(a, b, c, d):
	request = f""? {a} {b} {c} {d}""
	print(request, flush=True)
	return input()
	
 
def solve(n):
	max_item_idx = 0
	for i in range(1, n):
		ans = ask(max_item_idx, max_item_idx, i, i)
		if ans == ""<"":
			max_item_idx = i
 
	pair_idx = max_item_idx
	
	for i in range(n):
		ans1 = ask(max_item_idx, pair_idx, max_item_idx, i)
 
		if ans1 == ""<"":
			pair_idx = i
		elif ans1 == ""="":
			ans2 = ask(pair_idx, pair_idx, i, i)
			if ans2 == "">"":
				pair_idx = i
 
	print(f""! {max_item_idx} {pair_idx}"")
 
t = int(input())
 
for _ in range(t):
	n = int(input())
	solve(n)",1,True,False
1925_A,1925_A_aryui_2902_100%,codeforces2024,human,qwen2.5-7b-instruct,"You are given two positive integers n and k .

Your task is to find a string s such that all possible strings of length n
that can be formed using the first k lowercase English alphabets occur as a
subsequence of s .

If there are multiple answers, print the one with the smallest length. If
there are still multiple answers, you may print any of them.

Note: A string a is called a subsequence of another string b if a can be
obtained by deleting some (possibly zero) characters from b without changing
the order of the remaining characters.

Input

The first line of input contains a single integer t (1\leq t\leq 676 )
denoting the number of test cases.

Each test case consists of a single line of input containing two integers n
(1\leq n\leq 26 ) and k (1\leq k\leq 26 ).

Output

For each test case, print a single line containing a single string s which
satisfies the above property. If there are multiple answers, print the one
with the smallest length. If there are still multiple answers, you may print
any of them.

Example

Input

    4
    
    1 2
    
    2 1
    
    2 2
    
    2 3

Output

    ab
    aa
    baab
    abcbac
    
Note

For the first test case, there are two strings of length 1 which can be formed
using the first 2 lowercase English alphabets, and they are present in s as a
subsequence as follows:

  * \texttt{a}: {\color{red}{\texttt{a}}}\texttt{b} 
  * \texttt{b}: \texttt{a}{\color{red}{\texttt{b}}} 

For the second test case, there is only one string of length 2 which can be
formed using the first lowercase English alphabet, and it is present in s as a
subsequence as follows:

  * \texttt{aa}: {\color{red}{\texttt{aa}}} 

For the third test case, there are 4 strings of length 2 which can be formed
using the first 2 lowercase English alphabets, and they are present in s as a
subsequence as follows:

  * \texttt{aa}: \texttt{b}{\color{red}{\texttt{aa}}}\texttt{b} 
  * \texttt{ab}: \texttt{ba}{\color{red}{\texttt{ab}}} 
  * \texttt{ba}: {\color{red}{\texttt{ba}}}\texttt{ab} 
  * \texttt{bb}: {\color{red}{\texttt{b}}}\texttt{aa}{\color{red}{\texttt{b}}} 

For the fourth test case, there are 9 strings of length 2 which can be formed
using the first 3 lowercase English alphabets, and they are present in s as a
subsequence as follows:

  * \texttt{aa}: {\color{red}{\texttt{a}}}\texttt{bcb}{\color{red}{\texttt{a}}}\texttt{c} 
  * \texttt{ab}: {\color{red}{\texttt{ab}}}\texttt{cbac} 
  * \texttt{ac}: \texttt{abcb}{\color{red}{\texttt{ac}}} 
  * \texttt{ba}: \texttt{abc}{\color{red}{\texttt{ba}}}\texttt{c} 
  * \texttt{bb}: \texttt{a}{\color{red}{\texttt{b}}}\texttt{c}{\color{red}{\texttt{b}}}\texttt{ac} 
  * \texttt{bc}: \texttt{a}{\color{red}{\texttt{bc}}}\texttt{bac} 
  * \texttt{ca}: \texttt{ab}{\color{red}{\texttt{c}}}\texttt{b}{\color{red}{\texttt{a}}}\texttt{c} 
  * \texttt{cb}: \texttt{ab}{\color{red}{\texttt{cb}}}\texttt{ac} 
  * \texttt{cc}: \texttt{ab}{\color{red}{\texttt{c}}}\texttt{ba}{\color{red}{\texttt{c}}}","import collections
from collections import Counter
from collections import defaultdict
import math
from math import log
 
def solve(): 
    n,k=map(int, input().split())
    s='abcdefghijklmnopqrstuvwxyz'
    return s[:k]*(n)
t = int(input())
for i in range(t):
    res = solve()
    print(res)",1,True,False
1967_A,1967_A_yogurtraj_100%,codeforces2024,human,qwen2.5-7b-instruct,"You have some cards. An integer between 1 and n is written on each card:
specifically, for each i from 1 to n , you have a_i cards which have the
number i written on them.

There is also a shop which contains unlimited cards of each type. You have k
coins, so you can buy k new cards in total, and the cards you buy can contain
any integer between 1 and n .

After buying the new cards, you rearrange all your cards in a line. The score
of a rearrangement is the number of (contiguous) subarrays of length n which
are a permutation of [1, 2, \ldots, n] . What's the maximum score you can get?

Input

Each test contains multiple test cases. The first line contains the number of
test cases t\ (1\le t\le 100) . The description of the test cases follows.

The first line of each test case contains two integers n , k (1\le n \le 2
\cdot 10^5 , 0\le k \le 10^{12} ) — the number of distinct types of cards and
the number of coins.

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\le a_i \le 10^{12} ) — the number of cards of type i you have at the
beginning.

It is guaranteed that the sum of n over all test cases does not exceed 5 \cdot
10^5 .

Output

For each test case, output a single line containing an integer: the maximum
score you can get.

Example

Input

    8
    
    1 10
    
    1
    
    2 4
    
    8 4
    
    3 4
    
    6 1 8
    
    3 9
    
    7 6 2
    
    5 3
    
    6 6 7 4 6
    
    9 7
    
    7 6 1 7 6 2 4 3 3
    
    10 10
    
    1 3 1 2 1 9 3 5 7 5
    
    9 8
    
    5 8 7 5 1 3 2 9 8

Output

    11
    15
    15
    22
    28
    32
    28
    36
    
Note

In the first test case, the final (and only) array we can get is [1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1] (including 11 single 1 s), which contains 11 subarrays
consisting of a permutation of [1] .

In the second test case, we can buy 0 cards of type 1 and 4 cards of type 2 ,
and then we rearrange the cards as following: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2] . There are 8 subarrays equal to [1, 2] and 7 subarrays
equal to [2, 1] , which make a total of 15 subarrays which are a permutation
of [1, 2] . It can also be proved that this is the maximum score we can get.

In the third test case, one of the possible optimal rearrangements is [3, 3,
1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 3] .","for ii in range(int(input())):
  n,k = map(int,input().split())
  a = list(map(int,input().split()))
  a.sort()
  r = a[0]
  rem = 0
  y=0
  for i in range(0,n-1):
    if (i+1)*(a[i+1]-a[i]) > k:
      r = a[i] + k//(i+1)
      rem = k%(i+1)
      y=n-1-i
      k=0
      break
    else:
      k-=(i+1)*(a[i+1]-a[i])
      r = a[i+1]
  if k!=0:
    r = a[n-1]+k//(n)
    print((r-1)*n +1 +k%n)
  else:
    print((r-1)*n+1+rem+y)",1,True,False
1968_D,1968_D_shashank_yadav7_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"Bodya and Sasha found a permutation p_1,\dots,p_n and an array a_1,\dots,a_n .
They decided to play a well-known ""Permutation game"".

A permutation of length n is an array consisting of n distinct integers from 1
to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

Both of them chose a starting position in the permutation.

The game lasts k turns. The players make moves simultaneously. On each turn,
two things happen to each player:

  * If the current position of the player is x , his score increases by a_x . 
  * Then the player either stays at his current position x or moves from x to p_x . 

The winner of the game is the player with the higher score after exactly k
turns.

Knowing Bodya's starting position P_B and Sasha's starting position P_S ,
determine who wins the game if both players are trying to win.

Input

The first line contains a single integer t (1\le t\le 10^4 ) — the number of
testcases.

The first line of each testcase contains integers n , k , P_B , P_S (1\le
P_B,P_S\le n\le 2\cdot 10^5 , 1\le k\le 10^9 ) — length of the permutation,
duration of the game, starting positions respectively.

The next line contains n integers p_1,\dots,p_n (1 \le p_i \le n ) — elements
of the permutation p .

The next line contains n integers a_1,\dots,a_n (1\le a_i\le 10^9 ) — elements
of array a .

It is guaranteed that the sum of values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each testcase output:

  * ""Bodya"" if Bodya wins the game. 
  * ""Sasha"" if Sasha wins the game. 
  * ""Draw"" if the players have the same score. 

Example

Input

    10
    
    4 2 3 2
    
    4 1 2 3
    
    7 2 5 6
    
    10 8 2 10
    
    3 1 4 5 2 7 8 10 6 9
    
    5 10 5 1 3 7 10 15 4 3
    
    2 1000000000 1 2
    
    1 2
    
    4 4
    
    8 10 4 1
    
    5 1 4 3 2 8 6 7
    
    1 1 2 1 2 100 101 102
    
    5 1 2 5
    
    1 2 4 5 3
    
    4 6 9 4 2
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    6 9 5 4
    
    6 1 3 5 2 4
    
    6 9 8 9 5 10
    
    4 8 4 2
    
    2 3 4 1
    
    5 2 8 7
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    2 1000000000 1 2
    
    1 2
    
    1000000000 2

Output

    Bodya
    Sasha
    Draw
    Draw
    Bodya
    Sasha
    Sasha
    Sasha
    Sasha
    Bodya
    
Note

Below you can find the explanation for the first testcase, where the game
consists of k=2 turns.

Turn| Bodya's position| Bodya's score| Bodya's move| Sasha's position| Sasha's
score| Sasha's move  
---|---|---|---|---|---|---  
first| 3 | 0 + a_3 = 0 + 5 = 5 | stays on the same position| 2 | 0 + a_2 = 0 + 2 = 2 | moves to p_2=1   
second| 3 | 5 + a_3 = 5 + 5 = 10 | stays on the same position| 1 | 2 + a_1 = 2 + 7 = 9 | stays on the same position  
final results| 3 | 10 | | 1 | 9 |   
  
As we may see, Bodya's score is greater, so he wins the game. It can be shown
that Bodya always can win this game.","t=int(input())
for i in range(t):
    n,k,b,s=list(map(int,input().split()))
    p=list(map(int,input().split()))
    a=list(map(int,input().split()))
    b-=1
    s-=1
    sp=a[s]
    bp=a[b]
    bm=a[b]*k
    sm=a[s]*k
    for i in range(n):
        k-=1
        if k==0:
            break
        b=p[b]-1
        s=p[s]-1
        bm+=max(bm,a[b]*k+bp)
        sm+=max(sm,a[s]*k+sp)
        sp+=a[s]
        bp+=a[b]
    if bm>sm:
        print('Bodya')
    elif bm<sm:
        print('Sasha')
    else:
        print('Draw')",1,False,False
1951_D,1951_D_jgsr031200_100%,codeforces2024,human,qwen2.5-7b-instruct,"[Nightwish feat. Jonsu - Erämaan Viimeinen](https://youtu.be/QYlFn5q_UQk)

ඞ

Alice has n coins and wants to shop at Bob's jewelry store. Today, although
Bob has not set up the store yet, Bob wants to make sure Alice will buy
exactly k jewels. To set up the store, Bob can erect at most 60 stalls (each
containing an unlimited amount of jewels) and set the price per jewel for each
stall to be an integer number of coins between 1 and 10^{18} .

Fortunately, Bob knows that Alice buys greedily: and she will go to stall 1 ,
buy as many jewels as possible, then go to stall 2 , buy as many jewels as
possible, and so on until the last stall. Knowing this, Bob can choose the
number of stalls to set up, as well as set the price for each stall so that
Alice buys exactly k jewels. Help Bob fulfill the task, or determine if it is
impossible to do so.

Note that Alice does not need to spend all her coins.

Input

Each test contains multiple test cases. The first line contains an integer t
(1 \le t \le 1000 ) — the number of test cases. The description of the test
cases follows.

Each test case contains two positive integers n and k (1 \le n, k \le 10^{18}
) — the number of coins Alice has and the number of jewels Bob wants Alice to
have bought at the end.

Output

For each test case, print on one line ""YES"" if Bob can erect at most 60 stalls
and set the prices for the stalls such that Alice buys exactly k jewels, or
""NO"" if it is impossible to do so.

If the answer is ""YES"", on the second line, print an integer s (1 \le s \le 60
) — the number of stalls to be set up by Bob. On the third line, print s
positive integers p_1, p_2, \ldots, p_s (1 \le p_i \le 10^{18}) that represent
such a satisfactory pricing p , where p_i is the price per jewel for stall i .
If there are multiple such p 's, print any of them.

Example

Input

    3
    
    7 3
    
    6 4
    
    255 8

Output

    YES
    10
    2 3 4 5 6 7 8 9 10 11
    NO
    YES
    8
    128 64 32 16 8 4 2 1
    
Note

In the first test case, at the first stall, Alice buys 3 jewels and is left
with 1 coin. This is not enough to buy any jewels for any of the remaining
stalls, so Alice buys exactly 3 jewels at the end.

In the third test case,

  * At the first stall, Alice buys 1 jewel and is left with 127 coins. 
  * At the second stall, Alice buys 1 jewel and is left with 63 coins. 
  * At the third stall, Alice buys 1 jewel and is left with 31 coins. 
  * At the fourth stall, Alice buys 1 jewel and is left with 15 coins. 
  * At the fifth stall, Alice buys 1 jewel and is left with 7 coins. 
  * At the sixth stall, Alice buys 1 jewel and is left with 3 coins. 
  * At the seventh stall, Alice buys 1 jewel and is left with 1 coin. 
  * At the eighth stall, Alice buys 1 jewel and is left with 0 coins. 

Therefore, Alice buys exactly 8 jewels in total.","""""""
t = int(input())
for _ in range(t):
    n = int(input())
    arr = list(map(int,input().split()))
 
 
# Read tree as graph
# Generic BS
def bs(arr,x):
    n = len(arr)
    l, r = 0, n - 1
    if x < arr[0]: return -1
    if x > arr[-1]: return n+1
 
    while l + 1 != r:
        mid = (l + r) // 2
        if x <= arr[mid]:
            r = mid
        else:
            l = mid
    return (l,r)
 
""""""
import math as m
import collections as c
def proD(n,k):
    if n==k:
        print('YES')
        print(1)
        print(1)
        return
    if n < k:
        print('NO')
        return
    costs = [n-k+1,1]
    h = 0
    for i in costs:
        curr = n//i
        h += curr
        n -= i*curr
    if h < k:
        print('NO')
    else:
    
        print('YES')
        print(2)
        print(*costs)
 
t = int(input())
for _ in range(t):
    n,k = list(map(int,input().split()))
    #arr = list(map(int,input().split()))
    proD(n,k)",1,True,False
1971_A,1971_A_alsadeg190_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"You are given two integers x and y .

Output two integers: the minimum of x and y , followed by the maximum of x and
y .

Input

The first line contains a single integer t (1 \leq t \leq 100 ) — the number
of test cases.

The only line of each test case contains two space-separated integers x and y
(0 \leq x, y \leq 9 ).

Output

For each test case, output two integers: the minimum of x and y , followed by
the maximum of x and y .

Example

Input

    10
    
    1 9
    
    8 4
    
    1 4
    
    3 4
    
    2 0
    
    2 4
    
    6 9
    
    3 3
    
    0 0
    
    9 9

Output

    1 9
    4 8
    1 4
    3 4
    0 2
    2 4
    6 9
    3 3
    0 0
    9 9","x = int(input())
 
for i in range(x):
    x , y = list(map(int, input().split()))
    if x > y : print(x , y)
    else: print(y , x)",1,False,False
1922_C,1922_C_Talharashid_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"There are n cities located on the number line, the i -th city is in the point
a_i . The coordinates of the cities are given in ascending order, so a_1 < a_2
< \dots < a_n .

The distance between two cities x and y is equal to |a_x - a_y| .

For each city i , let's define the closest city j as the city such that the
distance between i and j is not greater than the distance between i and each
other city k . For example, if the cities are located in points [0, 8, 12, 15,
20] , then:

  * the closest city to the city 1 is the city 2 ; 
  * the closest city to the city 2 is the city 3 ; 
  * the closest city to the city 3 is the city 4 ; 
  * the closest city to the city 4 is the city 3 ; 
  * the closest city to the city 5 is the city 4 . 

The cities are located in such a way that for every city, the closest city is
unique. For example, it is impossible for the cities to be situated in points
[1, 2, 3] , since this would mean that the city 2 has two closest cities (1
and 3 , both having distance 1 ).

You can travel between cities. Suppose you are currently in the city x . Then
you can perform one of the following actions:

  * travel to any other city y , paying |a_x - a_y| coins; 
  * travel to the city which is the closest to x , paying 1 coin. 

You are given m queries. In each query, you will be given two cities, and you
have to calculate the minimum number of coins you have to spend to travel from
one city to the other city.

Input

The first line contains one integer t (1 \le t \le 10^4 ) — the number of test
cases.

Each test case is given in the following format:

  * the first line contains one integer n (2 \le n \le 10^5 ); 
  * the second line contains n integers a_1, a_2, \dots, a_n (0 \le a_1 < a_2 < \dots < a_n \le 10^9 ); 
  * the third line contains one integer m (1 \le m \le 10^5 ); 
  * then m lines follow; the i -th of them contains two integers x_i and y_i (1 \le x_i, y_i \le n ; x_i \ne y_i ), denoting that in the i -th query, you have to calculate the minimum number of coins you have to spend to travel from the city x_i to the city y_i . 

Additional constraints on the input:

  * in every test case, for each city, the closest city is determined uniquely; 
  * the sum of n over all test cases does not exceed 10^5 ; 
  * the sum of m over all test cases does not exceed 10^5 . 

Output

For each query, print one integer — the minimum number of coins you have to
spend.

Example

Input

    1
    
    5
    
    0 8 12 15 20
    
    5
    
    1 4
    
    1 5
    
    3 4
    
    3 2
    
    5 1

Output

    3
    8
    1
    4
    14
    
Note

Let's consider the first two queries in the example from the statement:

  * in the first query, you are initially in the city 1 . You can travel to the closest city (which is the city 2 ), paying 1 coin. Then you travel to the closest city (which is the city 3 ) again, paying 1 coin. Then you travel to the closest city (which is the city 4 ) again, paying 1 coin. In total, you spend 3 coins to get from the city 1 to the city 4 ; 
  * in the second query, you can use the same way to get from the city 1 to the city 4 , and then spend 5 coins to travel from the city 4 to the city 5 .","from collections import defaultdict
t=int(input())
for i in range(t):
    d1=defaultdict(int)
    d2=defaultdict(int)
    n=int(input())
    lst=list(map(int,input().split()))
    start=0;end=len(lst)-1;inc=1;s=0
    while start!=end:
        mini=11111111
        if (start+1)<len(lst):
            mini=min(abs(lst[start]-lst[start+1]),mini)
        if (start-1)>-1:
            mini=min(abs(lst[start]-lst[start-1]),mini)
        if mini==abs(lst[start]-lst[start+inc]):
            s+=1
        else:
            s+=abs(lst[start]-lst[start+inc])
        start+=inc
        d1[start]=s
    start=len(lst)-1;end=0;inc=-1;s=0
    while start!=end:
        mini=11111111
        if (start+1)<len(lst):
            mini=min(abs(lst[start]-lst[start+1]),mini)
        if (start-1)>-1:
            mini=min(abs(lst[start]-lst[start-1]),mini)
        if mini==abs(lst[start]-lst[start+inc]):
            s+=1
        else:
            s+=abs(lst[start]-lst[start+inc])
        start+=inc
        d2[start]=s
    m=int(input())
    for i in range(m):
        start,end=map(int,input().split())
        start-=1;
        end-=1
        s=0
        if start<end:
            s1=abs(d1[end]-d1[start])
            s2=abs(d2[start]-d2[end])
        else:
            s1=abs(d2[end]-d2[start])
            s2=abs(d1[start]-d1[end])
        print(min(s1,s2))",1,False,False
1977_A,1977_A_dimkinmile_20.00%,codeforces2024,human,qwen2.5-7b-instruct,"The little boy Nikita was given some cubes as a present. He decided to build a
tower out of them.

Initially, the tower doesn't have any cubes. In one move, Nikita either puts
exactly 1 cube on top of the tower or removes exactly 1 cube from the top of
the tower. Is it possible that after n moves, the resulting tower has exactly
m cubes?

Input

Each test contains multiple test cases. The first line of input contains a
single integer t (1 \le t \le 100 ) — the number of test cases. The
description of the test cases follows.

The only line of each test case contains two integers n and m (1 \le n, m \le
100 ).

Output

For each test case, output ""Yes"" (without quotes) if Nikita can obtain a tower
with m cubes, and ""No"" (without quotes) otherwise.

You can output each letter in any case (lowercase or uppercase). For example,
the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be accepted as a positive
answer.

Example

Input

    3
    
    3 3
    
    2 4
    
    5 3

Output

    Yes
    No
    Yes
    
Note

In the first test case, Nikita can put 1 cube on top of the tower 3 times in a
row, so the answer is ""Yes"".

In the second test case, Nikita can only end up with either a tower with no
blocks or a tower with 2 blocks, so the answer is ""No"".","def makaroni():
    n,m=map(int, input().split())
    if n>=m:
        print('Yes')
    else:
        print('No')
kreker=int(input())
for i in range(kreker):
    makaroni()",1,False,False
1965_B,1965_B_just_average_ok_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"You are given two integers n and k . Find a sequence a of non-negative
integers of size at most 25 such that the following conditions hold.

  * There is no subsequence of a with a sum of k . 
  * For all 1 \le v \le n where v \ne k , there is a subsequence of a with a sum of v . 

A sequence b is a subsequence of a if b can be obtained from a by the deletion
of several (possibly, zero or all) elements, without changing the order of the
remaining elements. For example, [5, 2, 3] is a subsequence of [1, 5, 7, 8, 2,
4, 3] .

It can be shown that under the given constraints, a solution always exists.

Input

The first line of the input contains a single integer t (1 \le t \le 1000 ) —
the number of test cases. The description of the test cases follows.

Each test case consists of a single line containing two integers n and k (2
\le n \le 10^6 , 1 \le k \le n ) — the parameters described above.

It is guaranteed that the sum of n over all test cases does not exceed 10^7 .

Output

The first line of output for each test case should contain a single integer m
(1 \le m \le 25 ) — the size of your chosen sequence.

The second line of output for each test case should contain m integers a_i (0
\le a_i \le 10^9 ) — the elements of your chosen sequence.

If there are multiple solutions, print any.

Example

Input

    5
    
    2 2
    
    6 1
    
    8 8
    
    9 3
    
    10 7

Output

    1
    1
    5
    2 3 4 5 6
    7
    1 1 1 1 1 1 1
    4
    7 1 4 1
    4
    1 2 8 3
    
Note

In the first example, we just need a subsequence that adds up to 1 , but not
one that adds up to 2 . So the array a=[1] suffices.

In the second example, all elements are greater than k=1 , so no subsequence
adds up to 1 . Every other integer between 1 and n is present in the array, so
there is a subsequence of size 1 adding up to each of those numbers.","for _ in range(int(input())):
    n, k = map(int, input().split())
    
    nums = [(1<<i) for i in range(24)]
    idx = 0
    while k >= (1 << idx): idx+=1
    idx -= 1
    nums.append(k-nums[idx])
    nums.append(k+1)
    nums.append(k+nums[idx]+1)
    nums.remove(1 << idx)
    print(len(nums))
    print(*nums)",1,False,False
1929_A,1929_A_mina330_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"Sasha decided to give his girlfriend an array a_1, a_2, \ldots, a_n . He found
out that his girlfriend evaluates the beauty of the array as the sum of the
values (a_i - a_{i - 1}) for all integers i from 2 to n .

Help Sasha and tell him the maximum beauty of the array a that he can obtain,
if he can rearrange its elements in any way.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 500 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (2 \leq n \leq
100 ) — the length of the array a .

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\leq a_i \leq 10^9 ) — the elements of the array a .

Output

For each test case, output a single integer — the maximum beauty of the array
a that can be obtained.

Example

Input

    5
    
    3
    
    2 1 3
    
    3
    
    69 69 69
    
    5
    
    100 54 80 43 90
    
    4
    
    3 4 3 3
    
    2
    
    2 1

Output

    2
    0
    57
    1
    1
    
Note

In the first test case, the elements of the array a can be rearranged to make
a = [1, 2, 3] . Then its beauty will be equal to (a_2 - a_1) + (a_3 - a_2) =
(2 - 1) + (3 - 2) = 2 .

In the second test case, there is no need to rearrange the elements of the
array a . Then its beauty will be equal to 0 .","ntest=int(input())
for itest in range(0,ntest,1):
    n=int(input())
    a=list(map(int,input().split()))
    a.sort()
    kq=0
    for i in range(0,len(a)//2,1):
        kq=kq+a[len(a)-i-1]-a[i]
    print(kq)",1,False,False
1969_B,1969_B_yousufali_8_100%,codeforces2024,human,qwen2.5-7b-instruct,"Let's define a cyclic shift of some string s as a transformation from s_1 s_2
\dots s_{n-1} s_{n} into s_{n} s_1 s_2 \dots s_{n-1} . In other words, you
take one last character s_n and place it before the first character while
moving all other characters to the right.

You are given a binary string s (a string consisting of only 0-s and/or 1-s).

In one operation, you can choose any substring s_l s_{l+1} \dots s_r (1 \le l
< r \le |s| ) and cyclically shift it. The cost of such operation is equal to
r - l + 1 (or the length of the chosen substring).

You can perform the given operation any number of times. What is the minimum
total cost to make s sorted in non-descending order?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first and only line of each test case contains a binary string s (2 \le
|s| \le 2 \cdot 10^5 ; s_i \in {0, 1}) — the string you need to sort.

Additional constraint on the input: the sum of lengths of strings over all
test cases doesn't exceed 2 \cdot 10^5 .

Output

For each test case, print the single integer — the minimum total cost to make
string sorted using operation above any number of times.

Example

Input

    5
    
    10
    
    0000
    
    11000
    
    101011
    
    01101001

Output

    2
    0
    9
    5
    11
    
Note

In the first test case, you can choose the whole string and perform a cyclic
shift: 10 \rightarrow 01. The length of the substring is 2 , so the cost is 2
.

In the second test case, the string is already sorted, so you don't need to
perform any operations.

In the third test case, one of the optimal strategies is the next:

  1. choose substring [1, 3] : 11000 \rightarrow 01100; 
  2. choose substring [2, 4] : 01100 \rightarrow 00110; 
  3. choose substring [3, 5] : 00110 \rightarrow 00011. 

The total cost is 3 + 3 + 3 = 9 .","def solve():
    s = input()
    n = 0
    ans = 0
    
    for i in range(len(s)):
        if s[i] == '1':
            n+=1
        if s[i] == '0' and n!=0:
            ans += n+1
    
    print(ans)
 
def main():
    t = int(input())
    for _ in range(t):
        solve()
 
if __name__ == ""__main__"":
    main()",1,True,False
1968_A,1968_A_klu_30309_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"You are given an integer x . Your task is to find any integer y (1\le y<x)
such that \gcd(x,y)+y is maximum possible.

Note that if there is more than one y which satisfies the statement, you are
allowed to find any.

\gcd(a,b) is the Greatest Common Divisor of a and b . For example, \gcd(6,4)=2
.

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

Each of the following t lines contains a single integer x (2 \le x \le 1000 ).

Output

For each test case, output any y (1 \le y < x ), which satisfies the
statement.

Example

Input

    7
    
    10
    
    7
    
    21
    
    100
    
    2
    
    1000
    
    6

Output

    5
    6
    18
    98
    1
    750
    3","def maximize_gcd_plus_y(x):
  """"""Finds the y that maximizes gcd(x, y) + y.
 
  Args:
    x: The given integer.
 
  Returns:
    The optimal y.
  """"""
 
  max_val = 1
  for y in range(x - 1, 1, -1):
    if x % y == 0:
      if 2 * y >= x:
        return y
      max_val = y
  return max_val
 
if __name__ == ""__main__"":
  t = int(input())
 
  for _ in range(t):
    x = int(input())
    y = maximize_gcd_plus_y(x)
    print(y)",1,False,False
1926_C,1926_C_vjudge.10_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"Please note that the time limit for this problem is only 0.5 seconds per test.

Vladislav wrote the integers from 1 to n , inclusive, on the board. Then he
replaced each integer with the sum of its digits.

What is the sum of the numbers on the board now?

For example, if n=12 then initially the numbers on the board are:

Then after the replacement, the numbers become:

The sum of these numbers is 1+2+3+4+5+6+7+8+9+1+2+3=51 . Thus, for n=12 the
answer is 51 .

Input

The first line contains an integer t (1 \leq t \leq 10^4 ) — the number of
test cases.

The only line of each test case contains a single integer n (1 \leq n \leq 2
\cdot 10^5 ) — the largest number Vladislav writes.

Output

For each test case, output a single integer — the sum of the numbers at the
end of the process.

Example

Input

    7
    
    12
    
    1
    
    2
    
    3
    
    1434
    
    2024
    
    200000

Output

    51
    1
    3
    6
    18465
    28170
    4600002","def sum_of_digits(n):
    return sum(int(d) for d in str(n))
soma = 0
N = int(input())
 
for _ in range(N):
    n = int(input())
    for i in range(n):
        soma += sum_of_digits(i)
 
print(soma)",1,False,False
1974_B,1974_B_mo1861._0.00%,codeforces2024,human,qwen2.5-7b-instruct,"Polycarp has a string s , which consists of lowercase Latin letters. He
encodes this string using the following algorithm:

  * first, he constructs a new auxiliary string r , which consists of all distinct letters of the string s , written in alphabetical order; 
  * then the encoding happens as follows: each character in the string s is replaced by its symmetric character from the string r (the first character of the string r will be replaced by the last, the second by the second from the end, and so on). 

For example, encoding the string s =""codeforces"" happens as follows:

  * the string r is obtained as ""cdefors""; 
  * the first character s_1 ='c' is replaced by 's'; 
  * the second character s_2 ='o' is replaced by 'e'; 
  * the third character s_3 ='d' is replaced by 'r'; 
  * ... 
  * the last character s_{10} ='s' is replaced by 'c'. 

![](https://espresso.codeforces.com/b6f889887677396af4d296900b8ca492324e83ef.png)
The string r and replacements for s =""codeforces"".

Thus, the result of encoding the string s =""codeforces"" is the string
""serofedsoc"".

Write a program that performs decoding — that is, restores the original string
s from the encoding result.

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ) — the length of the string b .

The second line of each test case contains a string b of length n , consisting
of lowercase Latin letters — the result of encoding the original string s .

It is guaranteed that the sum of the values of n over all test cases in the
test does not exceed 2 \cdot 10^5 .

Output

For each test case, output the string s from which the encoding result b was
obtained.

Example

Input

    5
    
    10
    
    serofedsoc
    
    3
    
    ttf
    
    9
    
    tlrhgmaoi
    
    1
    
    w
    
    15
    
    hnndledmnhlttin

Output

    codeforces
    fft
    algorithm
    w
    meetinthemiddle","def decode_string(b):
    """"""
    Decode the given string b by restoring the original string s.
 
    Args:
        b (str): The encoded string.
 
    Returns:
        str: The decoded string s.
    """"""
    # Create a dictionary to store the mapping between characters in the encoded string b and their corresponding indices in the alphabet
    char_map = {}
    for i, c in enumerate(sorted(set(b))):
        char_map[c] = chr(ord('a') + (len(b) - i - 1))
 
    # Initialize an empty string to store the decoded string s
    s = """"
 
    # Iterate through the encoded string b
    for c in b:
        # Find the index of the character in the alphabet and map it to its corresponding character in the decoded string s
        s += char_map[c]
 
    return s
 
# Read the number of test cases
num_test_cases = int(input())
 
for _ in range(num_test_cases):
    # Read the length of the string b
    num_chars = int(input())
 
    # Read the encoded string b
    b = input()
 
    # Decode the string b and print the result
    print(decode_string(b))",1,False,False
1931_B,1931_B_Lentreo_5.88%,codeforces2024,human,qwen2.5-7b-instruct,"There are n containers of water lined up, numbered from left to right from 1
to n . Each container can hold any amount of water; initially, the i -th
container contains a_i units of water. The sum of a_i is divisible by n .

You can apply the following operation any (possibly zero) number of times:
pour any amount of water from the i -th container to the j -th container,
where i must be less than j (i.e. i<j ). Any index can be chosen as i or j any
number of times.

Determine whether it is possible to make the amount of water in all containers
the same using this operation.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. Then the descriptions of the test cases follow.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ) — the number of containers with water.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (0
\le a_i \le 10^9 ) — the amounts of water in the containers. It is guaranteed
that the sum of a_i in each test case does not exceed 2 \cdot 10^9 . Also, the
sum of a_i is divisible by n .

It is guaranteed that the sum of n over all test cases in the input does not
exceed 2 \cdot 10^5 .

Output

Output t lines, each of which is the answer to the corresponding test case. As
the answer, output ""YES"" if it is possible to make the amount of water in all
containers the same using the described operation. Otherwise, output ""NO"".

You can output each letter in any case (lowercase or uppercase). For example,
the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be accepted as a positive
answer.

Example

Input

    6
    
    1
    
    43
    
    2
    
    1 3
    
    5
    
    4 5 2 1 3
    
    3
    
    1 2 3
    
    7
    
    4 5 5 0 6 4 4
    
    7
    
    6 5 5 1 3 4 4

Output

    YES
    NO
    YES
    NO
    NO
    YES
    
Note

In the third test case of the example (a=[4, 5, 2, 1, 3] ), you can proceed as
follows:

  * pour 1 unit of water from the first vessel to the fourth, then a=[3, 5, 2, 2, 3] ; 
  * pour 1 unit of water from the second vessel to the third, then a=[3, 4, 3, 2, 3] ; 
  * pour 1 unit of water from the second vessel to the fourth, then a=[3, 3, 3, 3, 3] .","t = int(input())
 
for _ in range(t):
    n = int(input())
    nums = list(map(int, input().strip().split()))
 
    last = nums[-1]
    curr = 0
    for i in nums:
        if i != 0:
            curr += (i - last) 
    
    if curr == 0:
        print(""YES"")
    else:
        print(""NO"")",1,False,False
1921_D,1921_D_Sibtain_1_100%,codeforces2024,human,qwen2.5-7b-instruct,"Petya has an array a_i of n integers. His brother Vasya became envious and
decided to make his own array of n integers.

To do this, he found m integers b_i (m\ge n ), and now he wants to choose some
n integers of them and arrange them in a certain order to obtain an array c_i
of length n .

To avoid being similar to his brother, Vasya wants to make his array as
different as possible from Petya's array. Specifically, he wants the total
difference D = \sum_{i=1}^{n} |a_i - c_i| to be as large as possible.

Help Vasya find the maximum difference D he can obtain.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 100 ) — the number of test cases. This is followed by a
description of the test cases.

The first line of each test case contains two integers n and m (1\le n\le m\le
2 \cdot 10^5 ).

The second line of each test case contains n integers a_i (1\le a_i\le 10^9 ).
The third line of each test case contains m integers b_i (1\le b_i\le 10^9 ).

It is guaranteed that in a test, the sum of m over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer — the maximum total difference D
that can be obtained.

Example

Input

    9
    
    4 6
    
    6 1 2 4
    
    3 5 1 7 2 3
    
    3 4
    
    1 1 1
    
    1 1 1 1
    
    5 5
    
    1 2 3 4 5
    
    1 2 3 4 5
    
    2 6
    
    5 8
    
    8 7 5 8 2 10
    
    2 2
    
    4 1
    
    9 6
    
    4 6
    
    8 10 6 4
    
    3 10 6 1 8 9
    
    3 5
    
    6 5 2
    
    1 7 9 7 2
    
    5 5
    
    9 10 6 3 7
    
    5 9 2 3 9
    
    1 6
    
    3
    
    2 7 10 1 1 5

Output

    16
    0
    12
    11
    10
    23
    15
    25
    7
    
Note

In the first example, Vasya can, for example, create the array (1, 5, 7, 2) .
Then the total difference will be D = |6-1|+|1-5|+|2-7|+|4-2| = 5+4+5+2 = 16 .

In the second example, all the integers available to Vasya are equal to 1, so
he can only create the array (1, 1, 1) , for which the difference D = 0 .

In the third example, Vasya can, for example, create the array (5, 4, 3, 2, 1)
. Then the total difference will be D = |1-5|+|2-4|+|3-3|+|4-2|+|5-1| =
4+2+0+2+4 = 12 .","for _ in range(int(input())):
    n, m = map(int, input().split())
    a = list(map(int, input().split()))
    c = list(map(int, input().split()))
 
    if len(set(a)) == 1 and len(set(c)) == 1 and a[0] == c[0]:
        print(0)
        continue
    a.sort()
    c.sort(reverse=True)
    if len(a) == 1:
        print(max(abs(a[0]-max(c)), abs(a[0]-min(c))))
        continue
    i,j, ans = 0, 1, 0
    for k in range(len(a)):
        t1 =abs(a[i]-c[i])
        t2 = abs(a[len(a)-j]-c[len(c)-j])
        if t2 > t1:
            j += 1
        else:
            i += 1
        ans += max(t1, t2)
    print(ans)",1,True,False
1972_D1,1972_D1_Calto_37.50%,codeforces2024,human,qwen2.5-7b-instruct,"The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.","import math
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a
 
def count_ordered_pairs(n, m):
    cnt = 0
    
    for i in range(1, m):
        x = n - (i * i - i)
        y = i * i
        cnt = cnt + (x//y) + (i > 1)
 
    if cnt == 0:
        return 1
    return cnt
 
t = int(input())
for _ in range(t):
    n, m = map(int, input().split())
    result = count_ordered_pairs(n, m)
    print(result)",1,False,False
1970_F2,1970_F2_brownfox2k6_100%,codeforces2024,human,qwen2.5-7b-instruct,"This afternoon, you decided to enjoy the first days of Spring by taking a walk
outside. As you come near the Quidditch field, you hear screams. Once again,
there is a conflict about the score: the two teams are convinced that they won
the game! To prevent this problem from happening one more time, you decide to
get involved in the refereeing of the matches.

Now, you will stay in the stadium to watch the game and count the score. At
the end of the game, you will decide the winner.

Today, two teams are competing: the red Gryffindor (R) and the blue Ravenclaw
(B) team. Each team is composed of P players (1 \leq P \leq 10 ).

The field is a rectangle of N lines and M columns (3 \leq N, M \leq 99 , N and
M are odd). All the positions are integers, and several entities are allowed
to be at the same position in the field. At the beginning of the game, the
field contains goals for the two teams (each team can own between one and five
goals), the players, and exactly one Quaffle. In this version of the problem,
one Bludger can be present. An other type of ball will be available in the
harder version of the problem.

A game is composed of T steps (0 \leq T \leq 10000 ). At each step, one entity
on the field (a player or a ball) performs one action. All entities can move.
A player can also catch a ball or throw the Quaffle that it is carrying. To
catch a ball, a player must be located on the same cell as it. The Quaffle
does not perform any action while it is being carried; it only follows the
movements of the player. If a player carrying the Quaffle decides to throw it,
the Quaffle is simply put at the current position of the player. If a player
is on the same cell as a Bludger (either after a movement from the player or
the Bludger), the player is eliminated. If the player is eliminated while it
is carrying the Quaffle, the Quaffle remains on the cell containing both the
player and the Bludger after the move. It is guaranteed that this never occurs
while the player is in a cell containing a goal.

To win a point, a player must leave the Quaffle at a goal of the other team.
When it does, the team of the player wins one point, and the Quaffle instantly
moves to the middle of the field (the cell at the (M+1)/2 -th column of the
(N+1)/2 -th line of the field, starting from 1). There is no goal in the
middle of the field. If a player puts the ball in its own goal, the other team
wins the point.

Input

On the first line, the integers N and M .

The description of the field follows: N lines of M pairs of characters
separated by spaces. Each pair of characters represents a position on the
field. It can be either:

  * .. to represent an empty cell 
  * R0, ..., R9, B0, ..., B9 to represent a player. The first character is the team of the player, and the second is the number of the player in the team. Each pair of characters is unique, but it is not guaranteed that all the pairs appear in the grid. 
  * RG or BG to represent a goal. The blue team tries to put the ball in a red goal (RG) while the red team tries to put the ball in a blue goal (BG). 
  * .Q to represent the Quaffle, which is the ball that the players use to score goals. 
  * .B to represent a Bludger.

The next line contains T , the number of steps that compose the game. T lines
follow, each describing one action. It contains several pieces of information
separated by a space. First, a pair of characters representing the entity that
must perform the action. Second, the description of the action:

  * U, D, L, R indicate that the entity moves on the grid. It can move to the top of the grid (U), to the bottom (D), to the left (L), or to the right (R). Each entity moves by only one cell at a time. 
  * C indicates that the player catches the ball (only a player can catch a ball). Then, there is a space followed by a pair of characters: the description of the ball caught by the player. This information is needed since several balls can be in the same cell. 
  * T indicates that the player throws the Quaffle that it is carrying. 

All the actions performed by the entities are guaranteed to be valid: the
players stay in the field, don't catch a ball if they are not in the same
cell, don't release the Quaffle if they are not carrying it, ...

Output

You must output the description of the main events of the game, one event per
line. More precisely:

  * Each time a team scores, you must print t RED GOAL or t BLUE GOAL, depending on the team who scored, where t is the current time (the position of the action in the list of actions, starting from 0). In the case where a player scores in the wrong goal (a red player scores in the red goal, or a blue player scores in the blue goal), you must print the name of the team who wins one point, that is, the other team. 
  * Each time a player is eliminated, you must print t p ELIMINATED, where t is the current time and p is the player who is eliminated. The format to print the player is the same as in the input.

The events must be printed in ascending order of t. If several players are
eliminated at the same time, the events must be written in alphabetical order:
B0, ..., B9, R0, ... R9.

At the end of the game, you must print the final score as: FINAL SCORE: r b,
where r is the score of the red team and b is the score of the blue team.

Examples

Input

    3 5
    
    .. .. R0 .. ..
    
    RG .. .Q .. BG
    
    .. .. B0 .. ..
    
    12
    
    R0 D
    
    R0 C .Q
    
    R0 R
    
    R0 T
    
    R0 D
    
    B0 R
    
    B0 U
    
    B0 C .Q
    
    B0 L
    
    B0 L
    
    B0 L
    
    B0 T

Output

    11 BLUE GOAL
    FINAL SCORE: 0 1
    
Input

    3 5
    
    .. .. R0 .. ..
    
    RG .. .Q .. BG
    
    .. .. B0 .. ..
    
    5
    
    R0 D
    
    R0 C .Q
    
    R0 L
    
    R0 L
    
    R0 T

Output

    4 BLUE GOAL
    FINAL SCORE: 0 1
    
Input

    5 5
    
    .. .. .. .. ..
    
    .. .. .. .. ..
    
    RG R0 .Q B0 BG
    
    .. .. .. .. ..
    
    .. .. .B .. ..
    
    5
    
    .B L
    
    .B U
    
    .B U
    
    B0 L
    
    B0 L

Output

    2 R0 ELIMINATED
    4 B0 ELIMINATED
    FINAL SCORE: 0 0
    
Note

In the first example, the red player takes the Quaffle, move it and throw it.
The blue player catches the ball, goes to the red goal and scores.

In the second example, the red player takes the ball and scores in the goal of
their own team: the blue team wins a point.

In the third example, the Bludger goes at the position of R0: R0 is
eliminated. Then, B0 moves to the position of the Bludger: B0 is eliminated
too.

You can find one more example in the easy version of the problem","# /**
#  *     author: brownfox2k6
#  *    created: 05/08/2024 21:39:39 Hanoi, Vietnam
# **/
 
def move(obj, d):
  if d == 'U':
    obj[0] -= 1
  elif d == 'D':
    obj[0] += 1
  elif d == 'L':
    obj[1] -= 1
  elif d == 'R':
    obj[1] += 1
 
def check_eliminate(t):
  out = []
  for p in player:
    if player[p] == blud:
      out.append(p)
      player[p] = [-1, -1]
  for p in sorted(out):
    print(t, p, ""ELIMINATED"")
 
n, m = map(int, input().split())
rg = []
bg = []
blud = [-1, -1]
player = dict()
for i in range(n):
  s = input().split()
  for j in range(m):
    if s[j] == 'RG':
      rg.append([i, j])
    elif s[j] == 'BG':
      bg.append([i, j])
    elif s[j] == '.Q':
      ball = [i, j]
    elif s[j] == '.B':
      blud = [i, j]
    else:
      player[s[j]] = [i, j]
 
carry = None
bs = rs = 0
for t in range(int(input())):
  p, d = input().split()[:2]
  if d == 'C':
    carry = p
  elif d == 'T':
    carry = None
    if ball in bg:
      rs += 1
      print(t, ""RED GOAL"")
      ball = [n // 2, m // 2]
    elif ball in rg:
      bs += 1
      print(t, ""BLUE GOAL"")
      ball = [n // 2, m // 2]
  elif p == '.Q':
    move(ball, d)
  elif p == '.B':
    move(blud, d)
    check_eliminate(t)
  else:
    move(player[p], d)
    check_eliminate(t)
    if carry == p:
      ball = player[p]
print(""FINAL SCORE:"", rs, bs)",1,True,False
1970_A1,1970_A1_tah23seen_100%,codeforces2024,human,qwen2.5-7b-instruct,"A parentheses sequence is a string consisting of characters ""("" and "")"", for
example ""(()(("".

A balanced parentheses sequence is a parentheses sequence which can become a
valid mathematical expression after inserting numbers and operations into it,
for example ""(()(()))"".

The balance of a parentheses sequence is defined as the number of opening
parentheses ""("" minus the number of closing parentheses "")"". For example, the
balance of the sequence ""(()(("" is 3.

A balanced parentheses sequence can also be defined as a parentheses sequence
with balance 0 such that each of its prefixes has a non-negative balance.

We define the balanced shuffle operation that takes a parentheses sequence and
returns a parentheses sequence as follows: first, for every character of the
input sequence, we compute the balance of the prefix of the sequence before
that character and write those down in a table together with the positions of
the characters in the input sequence, for example:

Prefix balance| 0| 1| 2| 1| 2| 3| 2| 1  
---|---|---|---|---|---|---|---|---  
Position| 1| 2| 3| 4| 5| 6| 7| 8  
Character| (| (| )| (| (| )| )| )  
  
Then, we sort the columns of this table in increasing order of prefix balance,
breaking ties in decreasing order of position. In the above example, we get:

Prefix balance| 0| 1| 1| 1| 2| 2| 2| 3  
---|---|---|---|---|---|---|---|---  
Position| 1| 8| 4| 2| 7| 5| 3| 6  
Character| (| )| (| (| )| (| )| )  
  
The last row of this table forms another parentheses sequence, in this case
""()(()())"". This sequence is called the result of applying the balanced
shuffle operation to the input sequence, or in short just the balanced shuffle
of the input sequence.

You are given a balanced parentheses sequence. Print its balanced shuffle.

Input

The only line of input contains a string s consisting only of characters ""(""
and "")"". This string is guaranteed to be a non-empty balanced parentheses
sequence with its length not exceeding 500\,000 .

Output

Print the parentheses sequence t — the balanced shuffle of s .

Example

Input

    (()(()))
    
Output

    ()(()())","def solve(s):
  n=len(s)
  ans=''
  d={}
  d[0]=0
  for i in range(len(s)):
    if s[i]=='(':
      d[i+1]=d[i]+1
    else:
      d[i+1]=d[i]-1
  d.pop(n)
  d=sorted(d.items(), key=lambda x:(x[1],-x[0]))
  for i , j in d:
    ans+=s[i]
  return ans
 
 
n=input()
print(solve(n))",1,True,False
1942_A,1942_A_madhuri_1708_100%,codeforces2024,human,qwen2.5-7b-instruct,"[Trade Winds - Patrick Deng](https://soundcloud.com/patrick-
deng-392681004/trade-winds-ft-alex-zhu)

⠀

Let's call an array a sorted if a_1 \leq a_2 \leq \ldots \leq a_{n - 1} \leq
a_{n} .

You are given two of Farmer John's favorite integers, n and k . He challenges
you to find any array a_1, a_2, \ldots, a_{n} satisfying the following
requirements:

  * 1 \leq a_i \leq 10^9 for each 1 \leq i \leq n ; 
  * Out of the n total cyclic shifts of a , exactly k of them are sorted.^\dagger 

If there is no such array a , output -1 .

^\dagger The x -th (1 \leq x \leq n ) cyclic shift of the array a is a_x,
a_{x+1} \ldots a_n, a_1, a_2 \ldots a_{x - 1} . If c_{x, i} denotes the i 'th
element of the x 'th cyclic shift of a , exactly k such x should satisfy
c_{x,1} \leq c_{x,2} \leq \ldots \leq c_{x, n - 1} \leq c_{x, n} .

For example, the cyclic shifts for a = [1, 2, 3, 3] are the following:

  * x = 1 : [1, 2, 3, 3] (sorted); 
  * x = 2 : [2, 3, 3, 1] (not sorted); 
  * x = 3 : [3, 3, 1, 2] (not sorted); 
  * x = 4 : [3, 1, 2, 3] (not sorted). 

Input

The first line contains t (1 \leq t \leq 10^3 ) — the number of test cases.

Each test case contains two integers n and k (1 \leq k \leq n \leq 10^3 ) —
the length of a and the number of sorted cyclic shifts a must have.

It is guaranteed that the sum of n over all test cases does not exceed 10^3 .

Output

For each test case, print a single line:

  * if there is a valid array a , output n integers, representing a_1, a_2, \ldots, a_{n} ; 
  * otherwise, output -1 . 

If there are multiple solutions, print any of them.

Example

Input

    3
    
    2 2
    
    3 1
    
    3 2

Output

    1 1
    69420 69 420
    -1
    
Note

In the first testcase, a = [1, 1] satisfies n = 2, k = 2 :

The two cyclic shifts of a are [a_1, a_2] and [a_2, a_1] , which are both [1,
1] and are sorted.

In the second testcase, a = [69\,420, 69, 420] satisfies n = 3, k = 1 :

The three cyclic shifts of a are [a_1, a_2, a_3] , [a_2, a_3, a_1] , [a_3,
a_1, a_2] , which are [69\,420, 69, 420] , [69, 420, 69\,420] , and [420,
69\,420, 69] , respectively.

Only [69, 420, 69\,420] is sorted.","for s in[*open(0)][1:]:
	n,k=map(int,s.split())
	if k>=2:
		if n==k:
			print(*[k for j in range(k)])
		else:
			print('-1')
	else:
		print(*[j+1 for j in range(n)])",1,True,False
1931_B,1931_B_Lentreo_100%,codeforces2024,human,qwen2.5-7b-instruct,"There are n containers of water lined up, numbered from left to right from 1
to n . Each container can hold any amount of water; initially, the i -th
container contains a_i units of water. The sum of a_i is divisible by n .

You can apply the following operation any (possibly zero) number of times:
pour any amount of water from the i -th container to the j -th container,
where i must be less than j (i.e. i<j ). Any index can be chosen as i or j any
number of times.

Determine whether it is possible to make the amount of water in all containers
the same using this operation.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. Then the descriptions of the test cases follow.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ) — the number of containers with water.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (0
\le a_i \le 10^9 ) — the amounts of water in the containers. It is guaranteed
that the sum of a_i in each test case does not exceed 2 \cdot 10^9 . Also, the
sum of a_i is divisible by n .

It is guaranteed that the sum of n over all test cases in the input does not
exceed 2 \cdot 10^5 .

Output

Output t lines, each of which is the answer to the corresponding test case. As
the answer, output ""YES"" if it is possible to make the amount of water in all
containers the same using the described operation. Otherwise, output ""NO"".

You can output each letter in any case (lowercase or uppercase). For example,
the strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be accepted as a positive
answer.

Example

Input

    6
    
    1
    
    43
    
    2
    
    1 3
    
    5
    
    4 5 2 1 3
    
    3
    
    1 2 3
    
    7
    
    4 5 5 0 6 4 4
    
    7
    
    6 5 5 1 3 4 4

Output

    YES
    NO
    YES
    NO
    NO
    YES
    
Note

In the third test case of the example (a=[4, 5, 2, 1, 3] ), you can proceed as
follows:

  * pour 1 unit of water from the first vessel to the fourth, then a=[3, 5, 2, 2, 3] ; 
  * pour 1 unit of water from the second vessel to the third, then a=[3, 4, 3, 2, 3] ; 
  * pour 1 unit of water from the second vessel to the fourth, then a=[3, 3, 3, 3, 3] .","def test_case(nums):
    n = len(nums)
 
    total = sum(nums)
    if total % n != 0:
        return ""NO""
 
    mean = total // n
    curr = 0
 
    for i in range(n):
        curr += nums[i] - mean
 
        if curr < 0:
            return ""NO""
    return ""YES""
 
 
t = int(input())
 
for _ in range(t):
    n = int(input())
    nums = list(map(int, input().strip().split()))
 
    print(test_case(nums))",1,True,False
1967_A,1967_A_MinakoKojima_100%,codeforces2024,human,qwen2.5-7b-instruct,"You have some cards. An integer between 1 and n is written on each card:
specifically, for each i from 1 to n , you have a_i cards which have the
number i written on them.

There is also a shop which contains unlimited cards of each type. You have k
coins, so you can buy k new cards in total, and the cards you buy can contain
any integer between 1 and n .

After buying the new cards, you rearrange all your cards in a line. The score
of a rearrangement is the number of (contiguous) subarrays of length n which
are a permutation of [1, 2, \ldots, n] . What's the maximum score you can get?

Input

Each test contains multiple test cases. The first line contains the number of
test cases t\ (1\le t\le 100) . The description of the test cases follows.

The first line of each test case contains two integers n , k (1\le n \le 2
\cdot 10^5 , 0\le k \le 10^{12} ) — the number of distinct types of cards and
the number of coins.

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\le a_i \le 10^{12} ) — the number of cards of type i you have at the
beginning.

It is guaranteed that the sum of n over all test cases does not exceed 5 \cdot
10^5 .

Output

For each test case, output a single line containing an integer: the maximum
score you can get.

Example

Input

    8
    
    1 10
    
    1
    
    2 4
    
    8 4
    
    3 4
    
    6 1 8
    
    3 9
    
    7 6 2
    
    5 3
    
    6 6 7 4 6
    
    9 7
    
    7 6 1 7 6 2 4 3 3
    
    10 10
    
    1 3 1 2 1 9 3 5 7 5
    
    9 8
    
    5 8 7 5 1 3 2 9 8

Output

    11
    15
    15
    22
    28
    32
    28
    36
    
Note

In the first test case, the final (and only) array we can get is [1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1] (including 11 single 1 s), which contains 11 subarrays
consisting of a permutation of [1] .

In the second test case, we can buy 0 cards of type 1 and 4 cards of type 2 ,
and then we rearrange the cards as following: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
1, 2, 1, 2, 1, 2] . There are 8 subarrays equal to [1, 2] and 7 subarrays
equal to [2, 1] , which make a total of 15 subarrays which are a permutation
of [1, 2] . It can also be proved that this is the maximum score we can get.

In the third test case, one of the possible optimal rearrangements is [3, 3,
1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 3] .","import math
 
ans_list = []
for _ in range(int(input())):
	(n, k) = map(int, input().split())
	a = list(map(int, input().split()))
	a.sort()
	ans = a[0]
	res = n - 1
	for i in range(n - 1):
		dif = a[i + 1] - a[i]
		if dif == 0:
			res -= 1
		if dif != 0:
			if k >= dif * (i + 1):
				ans += dif
				k -= dif * (i + 1)
				res -= 1
			else:
				ans += k // (i + 1)
				if i != 0:
					res += k % (i + 1)
				k = 0
				break
			if k == 0:
				break
	if k != 0:
		ans += k // n
		res += k % n
	ans += (ans - 1) * (n - 1)
	ans += res
	ans_list.append(ans)
for a in ans_list:
	print(a)",1,True,True
1931_A,1931_A_Outlastqr_100%,codeforces2024,human,qwen2.5-7b-instruct,"Nikita had a word consisting of exactly 3 lowercase Latin letters. The letters
in the Latin alphabet are numbered from 1 to 26 , where the letter ""a"" has the
index 1 , and the letter ""z"" has the index 26 .

He encoded this word as the sum of the positions of all the characters in the
alphabet. For example, the word ""cat"" he would encode as the integer 3 + 1 +
20 = 24 , because the letter ""c"" has the index 3 in the alphabet, the letter
""a"" has the index 1 , and the letter ""t"" has the index 20 .

However, this encoding turned out to be ambiguous! For example, when encoding
the word ""ava"", the integer 1 + 22 + 1 = 24 is also obtained.

Determine the lexicographically smallest word of 3 letters that could have
been encoded.

A string a is lexicographically smaller than a string b if and only if one of
the following holds:

  * a is a prefix of b , but a \ne b ;
  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .

Input

The first line of the input contains a single integer t (1 \le t \le 100 ) —
the number of test cases in the test.

This is followed by the descriptions of the test cases.

The first and only line of each test case contains an integer n (3 \le n \le
78 ) — the encoded word.

Output

For each test case, output the lexicographically smallest three-letter word
that could have been encoded on a separate line.

Example

Input

    5
    
    24
    
    70
    
    3
    
    55
    
    48

Output

    aav
    rzz
    aaa
    czz
    auz","import string
 
alphabet = string.ascii_lowercase
 
for i in range(int(input())):
    n = int(input())
    word = """"
    if n > 52:
        word += alphabet[n - 53] + ""zz""
    elif n > 27:
        word += ""a"" + alphabet[n - 28] + ""z""
    elif n == 27:
        word = ""aay""
    else:
        word += ""aa"" + alphabet[n - 3]
    print(word)",1,True,False
1931_A,1931_A_Outlastqr_100%,codeforces2024,human,qwen2.5-7b-instruct,"Nikita had a word consisting of exactly 3 lowercase Latin letters. The letters
in the Latin alphabet are numbered from 1 to 26 , where the letter ""a"" has the
index 1 , and the letter ""z"" has the index 26 .

He encoded this word as the sum of the positions of all the characters in the
alphabet. For example, the word ""cat"" he would encode as the integer 3 + 1 +
20 = 24 , because the letter ""c"" has the index 3 in the alphabet, the letter
""a"" has the index 1 , and the letter ""t"" has the index 20 .

However, this encoding turned out to be ambiguous! For example, when encoding
the word ""ava"", the integer 1 + 22 + 1 = 24 is also obtained.

Determine the lexicographically smallest word of 3 letters that could have
been encoded.

A string a is lexicographically smaller than a string b if and only if one of
the following holds:

  * a is a prefix of b , but a \ne b ;
  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b .

Input

The first line of the input contains a single integer t (1 \le t \le 100 ) —
the number of test cases in the test.

This is followed by the descriptions of the test cases.

The first and only line of each test case contains an integer n (3 \le n \le
78 ) — the encoded word.

Output

For each test case, output the lexicographically smallest three-letter word
that could have been encoded on a separate line.

Example

Input

    5
    
    24
    
    70
    
    3
    
    55
    
    48

Output

    aav
    rzz
    aaa
    czz
    auz","import string
 
alphabet = string.ascii_lowercase
 
for i in range(int(input())):
    n = int(input())
    word = """"
    if n > 52:
        word += alphabet[n - 53] + ""zz""
    elif n > 27:
        word += ""a"" + alphabet[n - 28] + ""z""
    elif n == 27:
        word = ""aay""
    else:
        word += ""aa"" + alphabet[n - 3]
    print(word)",1,True,False
1951_C,1951_C_DevK01_100%,codeforces2024,human,qwen2.5-7b-instruct,"[Maître Gims - Est-ce que tu m'aimes ?](https://youtu.be/6TpyRE_juyA)

ඞ

As the CEO of a startup company, you want to reward each of your k employees
with a ticket to the upcoming concert. The tickets will be on sale for n days,
and by some time travelling, you have predicted that the price per ticket at
day i will be a_i . However, to prevent ticket hoarding, the concert
organizers have implemented the following measures:

  * A person may purchase no more than m tickets per day. 
  * If a person purchases x tickets on day i , all subsequent days (i.e. from day i+1 onwards) will have their prices per ticket increased by x . 

For example, if a = [1, 3, 8, 4, 5] and you purchase 2 tickets on day 1 , they
will cost 2 in total, and the prices from day 2 onwards will become [5, 10, 6,
7] . If you then purchase 3 more tickets on day 2 , they will cost in total an
additional 15 , and the prices from day 3 onwards will become [13, 9, 10] .

Find the minimum spending to purchase k tickets.

Input

Each test contains multiple test cases. The first line contains an integer t
(1 \le t \le 10^4 ) — the number of test cases. The description of the test
cases follows.

The first line of each test case contains three integers n , m , and k (1 \le
n \le 3 \cdot 10^5, 1 \le m \le 10^9, 1 \le k \le \min(nm, 10^9) ) — the
number of sale days, the maximum amount of ticket purchasable each day, and
the number of tickets to be bought at the end.

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\le a_i \le 10^9 ) — the price per ticket for each of the upcoming n days.

It is guaranteed that the sum of n over all test cases does not exceed 3 \cdot
10^5 .

Output

For each test case, print one integer: the minimum amount of money needed to
purchase exactly k tickets.

Example

Input

    4
    
    4 2 3
    
    8 6 4 2
    
    4 2 8
    
    8 6 4 2
    
    5 100 1
    
    10000 1 100 10 1000
    
    6 3 9
    
    5 5 5 5 5 5

Output

    10
    64
    1
    72
    
Note

In the first test case, one optimal way to buy 3 tickets is as follows:

  * Buy 0 tickets on the first day. The prices per ticket for the remaining days are [6, 4, 2] . 
  * Buy 0 tickets on the second day. The prices per ticket for the remaining days are [4, 2] . 
  * Buy 1 ticket on the third day with cost 4 . The price per ticket for the remaining day is [3] . 
  * Buy 2 tickets on the fourth day with cost 6 . 

In the second test case, there is only one way to buy 8 tickets:

  * Buy 2 tickets on the first day with cost 16 . The prices per ticket for the remaining days are [8, 6, 4] . 
  * Buy 2 tickets on the second day with cost 16 . The prices per ticket for the remaining days are [8, 6] . 
  * Buy 2 tickets on the third day with cost 16 . The price per ticket for the remaining day is [8] . 
  * Buy 2 tickets on the fourth day with cost 16 .","import math
t=int(input())
for _ in range(t):
    L=list(map(int, input().split()))
    M=list(map(int, input().split()))
    n,m,k=L[0],L[1],L[2]
    m=min(m,k)
    M.sort()
    q=int(math.ceil(k/m))
    N=M[:q]
    n=len(N)
    if n*m==k:
        cost=m*sum(N)+(m*m)*(((n-1)*n)//2)
    else:
        w=N.pop()
        mu=k-(n-1)*m
        cost=(mu)*w
        n=len(N)
        cost+=m*sum(N)+(m*m)*(((n-1)*(n))//2)+n*m*mu
    print(cost)
    continue",1,True,False
1941_C,1941_C_Sneakyyy_100%,codeforces2024,human,qwen2.5-7b-instruct,"Rudolf has a string s of length n . Rudolf considers the string s to be ugly
if it contains the substring^\dagger ""pie"" or the substring ""map"", otherwise
the string s will be considered beautiful.

For example, ""ppiee"", ""mmap"", ""dfpiefghmap"" are ugly strings, while ""mathp"",
""ppiiee"" are beautiful strings.

Rudolf wants to shorten the string s by removing some characters to make it
beautiful.

The main character doesn't like to strain, so he asks you to make the string
beautiful by removing the minimum number of characters. He can remove
characters from any positions in the string (not just from the beginning or
end of the string).

^\dagger String a is a substring of b if there exists a consecutive segment of
characters in string b equal to a .

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases. The descriptions of the test cases follow.

The first line of each test case contains a single integer n (1 \le n \le 10^6
) — the length of the string s .

The next line of each test case contains the string s of length n . The string
s consists of lowercase Latin letters.

The sum of n over all test cases does not exceed 10^6 .

Output

For each test case, output a single integer — the minimum number of characters
that need to be deleted to make the string s beautiful. If the string is
initially beautiful, then output 0 .

Example

Input

    6
    
    9
    
    mmapnapie
    
    9
    
    azabazapi
    
    8
    
    mappppie
    
    18
    
    mapmapmapmapmapmap
    
    1
    
    p
    
    11
    
    pppiepieeee

Output

    2
    0
    2
    6
    0
    2
    
Note

In the first test case, for example, you can delete the 4 th and 9 th
characters to make the string beautiful.

In the second test case, the string is already beautiful.","for _ in range(int(input())):
    n = int(input())
    a = input()
    ans = 0
    i = 0
    while i<len(a)-2:
        s = a[i:i+3]
        
        if s == ""map"" or s == ""pie"":
            i+=3
            ans+=1
        else:
            i+=1
    print(ans)",1,True,False
1969_B,1969_B_gingmzmzx_100%,codeforces2024,human,qwen2.5-7b-instruct,"Let's define a cyclic shift of some string s as a transformation from s_1 s_2
\dots s_{n-1} s_{n} into s_{n} s_1 s_2 \dots s_{n-1} . In other words, you
take one last character s_n and place it before the first character while
moving all other characters to the right.

You are given a binary string s (a string consisting of only 0-s and/or 1-s).

In one operation, you can choose any substring s_l s_{l+1} \dots s_r (1 \le l
< r \le |s| ) and cyclically shift it. The cost of such operation is equal to
r - l + 1 (or the length of the chosen substring).

You can perform the given operation any number of times. What is the minimum
total cost to make s sorted in non-descending order?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first and only line of each test case contains a binary string s (2 \le
|s| \le 2 \cdot 10^5 ; s_i \in {0, 1}) — the string you need to sort.

Additional constraint on the input: the sum of lengths of strings over all
test cases doesn't exceed 2 \cdot 10^5 .

Output

For each test case, print the single integer — the minimum total cost to make
string sorted using operation above any number of times.

Example

Input

    5
    
    10
    
    0000
    
    11000
    
    101011
    
    01101001

Output

    2
    0
    9
    5
    11
    
Note

In the first test case, you can choose the whole string and perform a cyclic
shift: 10 \rightarrow 01. The length of the substring is 2 , so the cost is 2
.

In the second test case, the string is already sorted, so you don't need to
perform any operations.

In the third test case, one of the optimal strategies is the next:

  1. choose substring [1, 3] : 11000 \rightarrow 01100; 
  2. choose substring [2, 4] : 01100 \rightarrow 00110; 
  3. choose substring [3, 5] : 00110 \rightarrow 00011. 

The total cost is 3 + 3 + 3 = 9 .","# LUOGU_RID: 160731685
def main():
    n = int(input())
    for _ in range(n):
        s = list(map(int, input().strip()))
        zeroes = s.count(0)
        cnt = [0, 0]
        ans = 0
        for c in s:
            cnt[c] += 1
            if c == 0:
                ans += 1 if cnt[1] > 0 else 0
            else:
                ans += (zeroes - cnt[0])
        print(ans)
 
if __name__ == ""__main__"":
    main()",1,True,False
1969_B,1969_B_gingmzmzx_100%,codeforces2024,human,qwen2.5-7b-instruct,"Let's define a cyclic shift of some string s as a transformation from s_1 s_2
\dots s_{n-1} s_{n} into s_{n} s_1 s_2 \dots s_{n-1} . In other words, you
take one last character s_n and place it before the first character while
moving all other characters to the right.

You are given a binary string s (a string consisting of only 0-s and/or 1-s).

In one operation, you can choose any substring s_l s_{l+1} \dots s_r (1 \le l
< r \le |s| ) and cyclically shift it. The cost of such operation is equal to
r - l + 1 (or the length of the chosen substring).

You can perform the given operation any number of times. What is the minimum
total cost to make s sorted in non-descending order?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first and only line of each test case contains a binary string s (2 \le
|s| \le 2 \cdot 10^5 ; s_i \in {0, 1}) — the string you need to sort.

Additional constraint on the input: the sum of lengths of strings over all
test cases doesn't exceed 2 \cdot 10^5 .

Output

For each test case, print the single integer — the minimum total cost to make
string sorted using operation above any number of times.

Example

Input

    5
    
    10
    
    0000
    
    11000
    
    101011
    
    01101001

Output

    2
    0
    9
    5
    11
    
Note

In the first test case, you can choose the whole string and perform a cyclic
shift: 10 \rightarrow 01. The length of the substring is 2 , so the cost is 2
.

In the second test case, the string is already sorted, so you don't need to
perform any operations.

In the third test case, one of the optimal strategies is the next:

  1. choose substring [1, 3] : 11000 \rightarrow 01100; 
  2. choose substring [2, 4] : 01100 \rightarrow 00110; 
  3. choose substring [3, 5] : 00110 \rightarrow 00011. 

The total cost is 3 + 3 + 3 = 9 .","# LUOGU_RID: 160731685
def main():
    n = int(input())
    for _ in range(n):
        s = list(map(int, input().strip()))
        zeroes = s.count(0)
        cnt = [0, 0]
        ans = 0
        for c in s:
            cnt[c] += 1
            if c == 0:
                ans += 1 if cnt[1] > 0 else 0
            else:
                ans += (zeroes - cnt[0])
        print(ans)
 
if __name__ == ""__main__"":
    main()",1,True,False
1921_B,1921_B_gogorya_7.69%,codeforces2024,human,qwen2.5-7b-instruct,"In order to test the hypothesis about the cats, the scientists must arrange
the cats in the boxes in a specific way. Of course, they would like to test
the hypothesis and publish a sensational article as quickly as possible,
because they are too engrossed in the next hypothesis about the phone's
battery charge.

Scientists have n boxes in which cats may or may not sit. Let the current
state of the boxes be denoted by the sequence b_1, \dots, b_n : b_i = 1 if
there is a cat in box number i , and b_i = 0 otherwise.

Fortunately, the unlimited production of cats has already been established, so
in one day, the scientists can perform one of the following operations:

  * Take a new cat and place it in a box (for some i such that b_i = 0 , assign b_i = 1 ). 
  * Remove a cat from a box and send it into retirement (for some i such that b_i = 1 , assign b_i = 0 ). 
  * Move a cat from one box to another (for some i, j such that b_i = 1, b_j = 0 , assign b_i = 0, b_j = 1 ). 

It has also been found that some boxes were immediately filled with cats.
Therefore, the scientists know the initial position of the cats in the boxes
s_1, \dots, s_n and the desired position f_1, \dots, f_n .

Due to the large amount of paperwork, the scientists do not have time to solve
this problem. Help them for the sake of science and indicate the minimum
number of days required to test the hypothesis.

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. This is followed by
descriptions of the test cases.

Each test case consists of three lines.

The first line of each test case contains a single integer n (1 \le n \le 10^5
) — the number of boxes.

The second line of each test case contains a string s of n characters, where
the i -th character is '1' if there is a cat in the i -th box and '0'
otherwise.

The third line of each test case contains a string f of n characters, where
the i -th character is '1' if there should be a cat in the i -th box and '0'
otherwise.

It is guaranteed that in a test the sum of n over all test cases does not
exceed 10^5 .

Output

For each test case, output a single integer on a separate line — the minimum
number of operations required to obtain the desired position from the initial
position. It can be shown that a solution always exists.

Example

Input

    6
    
    5
    
    10010
    
    00001
    
    1
    
    1
    
    1
    
    3
    
    000
    
    111
    
    4
    
    0101
    
    1010
    
    3
    
    100
    
    101
    
    8
    
    10011001
    
    11111110

Output

    2
    0
    3
    2
    1
    4
    
Note

In the first test case, you can first move the cat from the first box to the
fifth, and then remove the cat from the fourth box.

In the second test case, there is nothing to do — the only cat is already
sitting in the correct box.

In the third test case of input data, it takes three days to place a cat in
each box.","t = int(input())
 
for _ in range(t):
    n = int(input())
    s1 = input()
    s2 = input()
 
    a1 = s1.count(""1"")
    a2 = s2.count(""1"")
    hd = a1 - a2
    res = abs(a1 - a2)
    for i in range(n):
        if hd > 0:
            hd -= 1
            continue
        if s1[i] == ""1"" and s2[i] == ""0"": res += 1
    print(res)",1,False,False
1926_C,1926_C_vjudge2_10.53%,codeforces2024,human,qwen2.5-7b-instruct,"Please note that the time limit for this problem is only 0.5 seconds per test.

Vladislav wrote the integers from 1 to n , inclusive, on the board. Then he
replaced each integer with the sum of its digits.

What is the sum of the numbers on the board now?

For example, if n=12 then initially the numbers on the board are:

Then after the replacement, the numbers become:

The sum of these numbers is 1+2+3+4+5+6+7+8+9+1+2+3=51 . Thus, for n=12 the
answer is 51 .

Input

The first line contains an integer t (1 \leq t \leq 10^4 ) — the number of
test cases.

The only line of each test case contains a single integer n (1 \leq n \leq 2
\cdot 10^5 ) — the largest number Vladislav writes.

Output

For each test case, output a single integer — the sum of the numbers at the
end of the process.

Example

Input

    7
    
    12
    
    1
    
    2
    
    3
    
    1434
    
    2024
    
    200000

Output

    51
    1
    3
    6
    18465
    28170
    4600002","def problem():
    t = int(input())
    numbers = []
    for _ in range(t):
        n = int(input())
        numbers.append(n)
 
    values = [0 for _ in range(max(numbers)  + 1)]
    sum_values = [0 for _ in range(max(numbers) + 1)]
 
    total = 0
    for i in range(10):
        values[i] = i
        total += i
        sum_values[i] = total
 
    for i in range(10, n + 1):
        word = str(i)
        last = int(word[len(word) - 1])
        remainder = int(word[:-1])
        values[i] = values[last] + values[remainder]
        sum_total = values[i] + sum_values[i - 1]
        sum_values[i] = sum_total
 
    for n in numbers:
        print(sum_values[n])
 
problem()",1,False,False
1926_C,1926_C_vjudge2_10.53%,codeforces2024,human,qwen2.5-7b-instruct,"Please note that the time limit for this problem is only 0.5 seconds per test.

Vladislav wrote the integers from 1 to n , inclusive, on the board. Then he
replaced each integer with the sum of its digits.

What is the sum of the numbers on the board now?

For example, if n=12 then initially the numbers on the board are:

Then after the replacement, the numbers become:

The sum of these numbers is 1+2+3+4+5+6+7+8+9+1+2+3=51 . Thus, for n=12 the
answer is 51 .

Input

The first line contains an integer t (1 \leq t \leq 10^4 ) — the number of
test cases.

The only line of each test case contains a single integer n (1 \leq n \leq 2
\cdot 10^5 ) — the largest number Vladislav writes.

Output

For each test case, output a single integer — the sum of the numbers at the
end of the process.

Example

Input

    7
    
    12
    
    1
    
    2
    
    3
    
    1434
    
    2024
    
    200000

Output

    51
    1
    3
    6
    18465
    28170
    4600002","def problem():
    t = int(input())
    numbers = []
    for _ in range(t):
        n = int(input())
        numbers.append(n)
 
    values = [0 for _ in range(max(numbers)  + 1)]
    sum_values = [0 for _ in range(max(numbers) + 1)]
 
    total = 0
    for i in range(10):
        values[i] = i
        total += i
        sum_values[i] = total
 
    for i in range(10, n + 1):
        word = str(i)
        last = int(word[len(word) - 1])
        remainder = int(word[:-1])
        values[i] = values[last] + values[remainder]
        sum_total = values[i] + sum_values[i - 1]
        sum_values[i] = sum_total
 
    for n in numbers:
        print(sum_values[n])
 
problem()",1,False,False
1931_C,1931_C_welfqx_100%,codeforces2024,human,qwen2.5-7b-instruct,"You have an array a of n integers.

You can no more than once apply the following operation: select three integers
i , j , x (1 \le i \le j \le n ) and assign all elements of the array with
indexes from i to j the value x . The price of this operation depends on the
selected indices and is equal to (j - i + 1) burles.

For example, the array is equal to [1, 2, 3, 4, 5, 1] . If we choose i = 2, j
= 4, x = 8 , then after applying this operation, the array will be equal to
[1, 8, 8, 8, 5, 1] .

What is the least amount of burles you need to spend to make all the elements
of the array equal?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
input test cases. The descriptions of the test cases follow.

The first line of the description of each test case contains a single integer
n (1 \le n \le 2 \cdot 10 ^ 5 ) — the size of the array.

The second line of the description of each test case contains n integers a_1,
a_2, \dots, a_n (1 \le a_i \le n ) — array elements.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output one integer — the minimum number of burles that
will have to be spent to make all the elements of the array equal. It can be
shown that this can always be done.

Example

Input

    8
    
    6
    
    1 2 3 4 5 1
    
    7
    
    1 1 1 1 1 1 1
    
    8
    
    8 8 8 1 2 8 8 8
    
    1
    
    1
    
    2
    
    1 2
    
    3
    
    1 2 3
    
    7
    
    4 3 2 7 1 1 3
    
    9
    
    9 9 2 9 2 5 5 5 3

Output

    4
    0
    2
    0
    1
    2
    6
    7","t = int(input())
for r in range(t):
    n = int(input())
    f = 1
    num = [int(_) for _ in input().split()]
    for j in range(n -1):
        if num[j] != num[j + 1]:
            f = 0
            break
    if n == 1 or f == 1:
        print(0)
        continue
    onum = num.copy()
    onum.reverse()
    cn = 1
    ck = 1
    f = 1 
    symb1 = num[0]
    symb2 = onum[0]
    for i in range(n - 1):
        if num[i] == num[i + 1]:
            cn += 1
        else:
            break
    for ii in range(n - 1):
        if onum[ii] == onum[ii + 1]:
            ck += 1
        else:
            break        
    if symb1 == symb2:
        cn += ck
    print(n - max(cn, ck))",1,True,False
1941_C,1941_C_HELLOProgrammer112_100%,codeforces2024,human,qwen2.5-7b-instruct,"Rudolf has a string s of length n . Rudolf considers the string s to be ugly
if it contains the substring^\dagger ""pie"" or the substring ""map"", otherwise
the string s will be considered beautiful.

For example, ""ppiee"", ""mmap"", ""dfpiefghmap"" are ugly strings, while ""mathp"",
""ppiiee"" are beautiful strings.

Rudolf wants to shorten the string s by removing some characters to make it
beautiful.

The main character doesn't like to strain, so he asks you to make the string
beautiful by removing the minimum number of characters. He can remove
characters from any positions in the string (not just from the beginning or
end of the string).

^\dagger String a is a substring of b if there exists a consecutive segment of
characters in string b equal to a .

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases. The descriptions of the test cases follow.

The first line of each test case contains a single integer n (1 \le n \le 10^6
) — the length of the string s .

The next line of each test case contains the string s of length n . The string
s consists of lowercase Latin letters.

The sum of n over all test cases does not exceed 10^6 .

Output

For each test case, output a single integer — the minimum number of characters
that need to be deleted to make the string s beautiful. If the string is
initially beautiful, then output 0 .

Example

Input

    6
    
    9
    
    mmapnapie
    
    9
    
    azabazapi
    
    8
    
    mappppie
    
    18
    
    mapmapmapmapmapmap
    
    1
    
    p
    
    11
    
    pppiepieeee

Output

    2
    0
    2
    6
    0
    2
    
Note

In the first test case, for example, you can delete the 4 th and 9 th
characters to make the string beautiful.

In the second test case, the string is already beautiful.","for _ in range(int(input())):
    a=int(input())   
    s=input()         
    x=s.count(""map"")   
    y=s.count(""pie"")  
    z=s.count(""mapie"")
    print(x+y-z)",1,True,False
1978_A,1978_A_Divya_Reddy78094_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"Alice has n books. The 1 -st book contains a_1 pages, the 2 -nd book contains
a_2 pages, \ldots , the n -th book contains a_n pages. Alice does the
following:

  * She divides all the books into two non-empty piles. Thus, each book ends up in exactly one of the two piles.
  * Alice reads one book with the highest number in each pile.

Alice loves reading very much. Help her find the maximum total number of pages
she can read by dividing the books into two piles.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 500 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (2 \le n \le 100
) — the number of books Alice has.

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\le a_i \le 10^9 ) — the number of pages in each book.

Output

For each test case, output a single integer — the maximum number of pages
Alice can read.

Example

Input

    5
    
    2
    
    1 1
    
    4
    
    2 3 3 1
    
    5
    
    2 2 3 2 2
    
    2
    
    10 3
    
    3
    
    1 2 3

Output

    2
    4
    5
    13
    5
    
Note

In the first test case, Alice can put book number 1 in the first pile, and
book number 2 in the second pile. Then she will read a_1 + a_2 = 1 + 1 = 2
pages.

In the second test case, Alice can put books with numbers 2 and 3 in the first
pile, and books with numbers 1 and 4 in the second pile. Then she will read
the book with the highest number 3 from the first pile, and the book with the
highest number 4 from the second pile. Then she will read a_3 + a_4 = 3 + 1 =
4 pages.","t = int(input())
for _ in range(t):
    n = int(input())
    nums = list(map(int, input().split()))
    nums.sort(reverse=True)
    print(nums[0] + nums[1])",1,False,False
1950_A,1950_A_graidy_011888_100%,codeforces2024,human,qwen2.5-7b-instruct,"You are given three digits a , b , and c . Determine whether they form a
stair, a peak, or neither.

  * A stair satisfies the condition a<b<c . 
  * A peak satisfies the condition a<b>c . 

Input

The first line contains a single integer t (1 \leq t \leq 1000 ) — the number
of test cases.

The only line of each test case contains three digits a , b , c (0 \leq a , b
, c \leq 9 ).

Output

For each test case, output ""STAIR"" if the digits form a stair, ""PEAK"" if the
digits form a peak, and ""NONE"" otherwise (output the strings without quotes).

Example

Input

    7
    
    1 2 3
    
    3 2 1
    
    1 5 3
    
    3 4 1
    
    0 0 0
    
    4 1 7
    
    4 5 7

Output

    STAIR
    NONE
    PEAK
    PEAK
    NONE
    NONE
    STAIR","n = int(input())
for i in range(n):
    a, b, c = map(int, input().split())
    if a<b<c:
        print(""STAIR"")
    elif a<b and b>c:
        print(""PEAK"")
    else:
        print( ""NONE"" )",1,True,False
1920_D,1920_D_muskanf0035_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"Jayden has an array a which is initially empty. There are n operations of two
types he must perform in the given order.

  1. Jayden appends an integer x (1 \leq x \leq n ) to the end of array a . 
  2. Jayden appends x copies of array a to the end of array a . In other words, array a becomes [a,\underbrace{a,\ldots,a}_{x}] . It is guaranteed that he has done at least one operation of the first type before this. 

Jayden has q queries. For each query, you must tell him the k -th element of
array a . The elements of the array are numbered from 1 .

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 5000 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains two integers n and q (1 \leq n, q
\leq 10^5 ) — the number of operations and the number of queries.

The following n lines describe the operations. Each line contains two integers
b and x (b \in \\{1, 2\\} ), where b denotes the type of operation. If b=1 ,
then x (1 \leq x \leq n ) is the integer Jayden appends to the end of the
array. If b=2 , then x (1 \leq x \leq 10^9 ) is the number of copies Jayden
appends to the end of the array.

The next line of each test case contains q integers k_1, k_2, \ldots, k_q (1
\leq k_i \leq \min(10^{18}, c) ), which denote the queries, where c is the
size of the array after finishing all n operations.

It is guaranteed that the sum of n and the sum of q over all test cases does
not exceed 10^5 .

Output

For each test case, output q integers — answers to Jayden's queries.

Example

Input

    4
    
    5 10
    
    1 1
    
    1 2
    
    2 1
    
    1 3
    
    2 3
    
    1 2 3 4 5 6 14 15 16 20
    
    10 10
    
    1 3
    
    1 8
    
    2 15
    
    1 6
    
    1 9
    
    1 1
    
    2 6
    
    1 1
    
    2 12
    
    2 10
    
    32752 25178 3198 3199 2460 2461 31450 33260 9016 4996
    
    12 5
    
    1 6
    
    1 11
    
    2 392130334
    
    1 4
    
    2 744811750
    
    1 10
    
    1 5
    
    2 209373780
    
    2 178928984
    
    1 3
    
    2 658326464
    
    2 1000000000
    
    914576963034536490 640707385283752918 636773368365261971 584126563607944922 1000000000000000000
    
    2 2
    
    1 1
    
    1 2
    
    1 2

Output

    1 2 1 2 3 1 2 3 1 3
    9 8 1 3 1 3 6 3 8 8
    11 11 11 10 11
    1 2
    
Note

In the first test case:

  * After the first operation a = [1] ;
  * After the second operation a = [1, 2] ;
  * After the third operation a = [1, 2, 1, 2] ;
  * After the fourth operation a = [1, 2, 1, 2, 3] ;
  * After the fifth operation a = [1, 2, 1, 2, 3, 1, 2, 1, 2, 3, 1, 2, 1, 2, 3, 1, 2, 1, 2, 3] .

In the fourth test case, after all operations a = [1, 2] .","def solve_test_case(n, operations, queries):
    array = []
    result = []
 
    for op_type, value in operations:
        if op_type == 1:
            array.append(value)
        else:
            array.extend([array[i] for i in range(len(array))])
 
    for k in queries:
        result.append(array[(k - 1) % len(array)])
 
    return result
 
 
def main():
    t = int(input())
    for _ in range(t):
        n, q = map(int, input().split())
        operations = [list(map(int, input().split())) for _ in range(n)]
        queries = list(map(int, input().split()))
 
        result = solve_test_case(n, operations, queries)
        print(*result)
 
 
if __name__ == ""__main__"":
    main()",1,False,False
