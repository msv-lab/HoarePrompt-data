#State of the program right berfore the function call: func is a function object.
def func_1(func):
    d = {}
    return wrapper
    #The program returns a function object named wrapper.
#Overall this is what the function does:The function `func_1` accepts another function object as a parameter and returns a new function object named `wrapper`.

#State of the program right berfore the function call: t is an integer such that 1 ≤ t ≤ 10^4. For each test case, n, m, and k are integers such that 2 ≤ n ≤ 10^5, 1 ≤ m, k ≤ 2 \cdot 10^5. a is a list of n integers where 1 ≤ a_i ≤ 2 \cdot 10^9 and a_i < a_{i+1}. d is a list of m integers where 1 ≤ d_i ≤ 10^9. f is a list of k integers where 1 ≤ f_i ≤ 10^9.
def wrapper():
    if (args not in d) :
        d[args] = func(*args)
    #State: `t` is an integer such that 1 ≤ t ≤ 10^4, `n`, `m`, and `k` are integers such that 2 ≤ n ≤ 10^5, 1 ≤ m, k ≤ 2·10^5, `a` is a list of n integers where 1 ≤ a_i ≤ 2·10^9 and a_i < a_{i+1}, `d` is a list of m integers where 1 ≤ d_i ≤ 10^9, `f` is a list of k integers where 1 ≤ f_i ≤ 10^9, `args` is a list of indices, and if `d[args]` is not assigned the value of `func(*args)`, then `d[args]` remains unchanged.
    return d[args]
    #The program returns the value of `d[args]` which is the result of `func(*args)` if `d[args]` was updated by `func(*args)`, otherwise it returns the original value of `d[args]`.
#Overall this is what the function does:The function retrieves the value of `d[args]`. If `d[args]` was updated by calling `func(*args)`, it returns the updated value; otherwise, it returns the original value of `d[args]`.

#State of the program right berfore the function call: t is an integer such that 1 <= t <= 10^4. For each test case, n, m, and k are integers such that 2 <= n <= 10^5, 1 <= m, k <= 2 * 10^5. a is a list of n integers sorted in ascending order such that 1 <= a_i <= 2 * 10^9 and a_i < a_{i+1}. d is a list of m integers such that 1 <= d_i <= 10^9. f is a list of k integers such that 1 <= f_i <= 10^9.
def func_2():
    return sys.stdin.readline().strip()
    #The program reads a line from standard input, strips any trailing whitespace, and returns it as a string.
#Overall this is what the function does:The function reads a line from standard input, removes any trailing whitespace, and returns it as a string.

#State of the program right berfore the function call: t is an integer such that 1 ≤ t ≤ 10^4. For each test case, n, m, and k are integers such that 2 ≤ n ≤ 10^5, 1 ≤ m, k ≤ 2⋅10^5. The list a is a sorted list of n integers such that 1 ≤ a_i ≤ 2⋅10^9 and a_i < a_{i+1}. The list d is a list of m integers such that 1 ≤ d_i ≤ 10^9. The list f is a list of k integers such that 1 ≤ f_i ≤ 10^9.
def func_3():
    return int(func_2())
    #The program returns an integer value generated by the function func_2(), which is not specified in the given code snippet. Based on the initial state, the return value could be any integer within the range defined by the parameters of func_2().
#Overall this is what the function does:The function accepts no parameters and returns an integer value generated by the function `func_2()`. The returned integer is within the range defined by the parameters of `func_2()`, which is not specified in the given code snippet.

#State of the program right berfore the function call: t is an integer such that 1 <= t <= 10^4. For each test case, n, m, and k are integers such that 2 <= n <= 10^5, 1 <= m, k <= 2 * 10^5. a is a list of n integers where 1 <= a_i <= 2 * 10^9 and a_i < a_{i+1}. d is a list of m integers where 1 <= d_i <= 10^9. f is a list of k integers where 1 <= f_i <= 10^9.
def func_4(delimiter):
    return list(map(int, func_2().split(delimiter)))
    #The program returns a list of integers converted from a string split by a delimiter, where the string is obtained from the function `func_2()`
#Overall this is what the function does:The function accepts a `delimiter` parameter and returns a list of integers. This list is derived from a string obtained by calling `func_2()`, which is then split using the provided delimiter. The resulting string elements are converted to integers.

#State of the program right berfore the function call: t is an integer such that 1 ≤ t ≤ 10^4. For each test case, n, m, and k are integers such that 2 ≤ n ≤ 10^5, 1 ≤ m, k ≤ 2 \cdot 10^5. a is a list of n integers where 1 ≤ a_i ≤ 2 \cdot 10^9 and a_i < a_{i+1}. d is a list of m integers where 1 ≤ d_i ≤ 10^9. f is a list of k integers where 1 ≤ f_i ≤ 10^9.
def func_5():
    return func_2()
    #The program returns the result of calling the function `func_2()` with the given parameters.
#Overall this is what the function does:The function calls another function `func_2()` with predefined parameters `t`, `n`, `m`, `k`, `a`, `d`, and `f`. It then returns the result of `func_2()` execution.

#State of the program right berfore the function call: n, m, and k are positive integers such that 2 ≤ n ≤ 10^5, 1 ≤ m, k ≤ 2 * 10^5; A is a list of n integers where A[i] represents the complexity of the i-th prepared problem and A[i] < A[i + 1]; D is a sorted list of unique integers representing the complexities of the models; F is a list of k integers representing the complexities of the functions; the maximum value of A[i] does not exceed 2 * 10^9.
def func_6():
    n, m, k = func_4()
    A = func_4()
    D = sorted(set(func_4()))
    F = func_4()
    max_diff, next_max_diff, index = -inf, -inf, None
    for i in range(1, n):
        diff = A[i] - A[i - 1]
        
        if diff > max_diff:
            max_diff = diff
            index = i
        elif diff > next_max_diff:
            next_max_diff = diff
        
    #State: Output State: `max_diff` is the maximum difference found between consecutive elements in the list `A` starting from index 1 to `n-1`, `next_max_diff` is the second maximum difference found under the same conditions, and `index` is the index `i` where `max_diff` was last updated.
    left, right = A[index - 1], A[index]
    ans = max_diff
    for f in F:
        l = bisect_right(D, left - f)
        
        h = bisect_left(D, right - f) - 1
        
        while l < h:
            mid = l + (h - l) // 2
            mid_sum, mid_next_sum = D[mid] + f, D[mid + 1] + f
            if mid_sum - left < right - mid_next_sum:
                l = mid + 1
            else:
                h = mid
        
        if l == h:
            ans = min(ans, max(D[l] + f - left, right - D[l] - f))
        
    #State: Output State: `max_diff` is the minimum difference found between `left + f` and `D[l] + f` or `right - D[l] - f` for all `f` in `F`, `next_max_diff` remains the same as it was not affected by the loop, `index` remains unchanged as it was not updated within the loop, `left` and `right` remain the same as they were not updated within the loop, `ans` is equal to `max_diff`.
    print(max(ans, next_max_diff))
    #This is printed: max(max_diff, next_max_diff)
#Overall this is what the function does:The function determines and prints the minimum difference between the sum of a problem complexity and a function complexity, and the sum of a model complexity and a function complexity. Specifically, it finds the maximum difference between consecutive problem complexities, then iterates through each function complexity to find the smallest possible difference by comparing the sums involving problems, models, and functions. Finally, it outputs the larger of the maximum difference or the second maximum difference.

#State of the program right berfore the function call: t is an integer such that 1 <= t <= 10^4. For each testcase, n, m, and k are integers such that 2 <= n <= 10^5, 1 <= m, k <= 2 * 10^5. The list a is a sorted list of n integers where 1 <= a_i <= 2 * 10^9 and a_i < a_{i+1}. The list d is a list of m integers where 1 <= d_i <= 10^9. The list f is a list of k integers where 1 <= f_i <= 10^9.
def func_7():
    testcases = func_3()
    for _ in range(testcases):
        func_6()
        
    #State: testcases has been iterated over completely, and for each iteration of testcases, func_6() has been called once. All other variables (t, n, m, k, a, d, f) retain their initial values.
#Overall this is what the function does:The function processes multiple test cases, each involving three lists: a (sorted list of integers), d, and f. For each test case, it calls another function `func_6()` which is not detailed here. After processing all test cases, it returns no value explicitly, but modifies the state of the lists a, d, and f as side effects.

