#State of the program right berfore the function call: cast is a callable function that can convert string inputs to appropriate types (e.g., int, float), and the input is a space-separated string of integers or other types that can be converted by cast.
def func_1(cast):
    return map(cast, input().split())
    #The program returns a map object that applies the callable function `cast` to each element of the input string after splitting it by spaces. The input string should contain space-separated values that can be converted by the `cast` function.
#Overall this is what the function does:The function accepts a callable function `cast` and a space-separated string of values. It splits the string into individual elements, then applies the `cast` function to each element, converting them to their appropriate types. The function returns a map object containing these converted values.

#State of the program right berfore the function call: arr is a list of integers, and predicate is a function that takes an integer and returns a boolean.
def func_2(arr, predicate):
    l, r = 0, len(arr)
    while l + 1 < r:
        mid = (l + r) // 2
        
        if predicate(arr[mid]):
            l = mid
        else:
            r = mid
        
    #State: l is the index of the first element that satisfies the predicate, or l is equal to the length of arr if no such element exists.
    if predicate(arr[l]) :
        return l
        #The program returns the index of the first element that satisfies the predicate, or the length of `arr` if no such element exists.
    #State: l is the index of the first element that does not satisfy the predicate, or l is equal to the length of arr if no such element exists
    return None
    #The program returns None
#Overall this is what the function does:The function accepts a list of integers `arr` and a predicate function. It searches for the first element in `arr` that satisfies the predicate. If such an element is found, it returns its index; otherwise, it returns either the length of `arr` if no element satisfies the predicate, or `None` if no element satisfies the predicate.

#State of the program right berfore the function call: arr is a list of integers, and predicate is a function that takes an integer as input and returns a boolean.
def func_3(arr, predicate):
    return func_2(arr, predicate)
    #The program returns a boolean value indicating whether the predicate function returns True for all elements in the list 'arr'
#Overall this is what the function does:The function accepts a list of integers `arr` and a predicate function `predicate`. It checks if the predicate function returns True for every element in the list `arr`. If the predicate returns True for all elements, the function returns True; otherwise, it returns False.

#State of the program right berfore the function call: arr is a list of integers where each element is in the range [0, 2^30), and predicate is a function that takes an integer and returns a boolean.
def func_4(arr, predicate):
    result = func_2(arr, predicate)
    if (result is not None) :
        return result + 1
        #The program returns the value of `result` plus 1, where `result` is the return value of `func_2(arr, predicate)`
    #State: Postcondition: `arr` is a list of integers where each element is in the range [0, 2^30), `result` is the return value of `func_2(arr, predicate)`, and `result` is `None`.
    return None
    #The program returns None
#Overall this is what the function does:The function accepts a list `arr` of integers and a predicate function `predicate`. It calls `func_2(arr, predicate)` and returns the value of the result from `func_2` plus one, if `func_2` returns a non-None value. If `func_2` returns `None`, the function returns `None`.

#State of the program right berfore the function call: n and q are positive integers such that 2 <= n <= 2 * 10^5 and 1 <= q <= 2 * 10^5. a is a list of integers where each element is in the range [0, 2^30). l and r are positive integers such that 1 <= l < r <= n for each query.
def func_5():
    n, q = func_1(int)
    a = list(func_1(int))
    x = [0]
    inds = defaultdict(list)
    inds[0].append(0)
    for i in a:
        x.append(x[-1] ^ i)
        
        inds[x[-1]].append(len(x) - 1)
        
    #State: Output State: `inds` is a defaultdict where the key is an integer generated by the XOR operation of elements in `a`, and the value is a list of indices where that key appears in the list `x`. The list `x` is constructed by starting with `x[0] = 0` and then appending `x[-1] ^ i` for each `i` in `a`, where `^` denotes the bitwise XOR operation. The length of `x` is `len(a) + 1`.
    for i in range(q):
        l, r = func_1(int)
        
        if x[l - 1] == x[r]:
            print('Yes')
            continue
        
        lower = inds[x[r]][func_4(inds[x[r]], lambda arg: arg < l) or 0]
        
        upper = inds[x[l - 1]][func_3(inds[x[l - 1]], lambda arg: arg <= r)]
        
        if upper > lower:
            print('Yes')
        else:
            print('No')
        
    #State: Output State: The output state will consist of a series of 'Yes' or 'No' printed based on the conditions checked within the loop. Specifically, for each iteration `i` in the range `q`, the program checks three conditions:
    #1. If `x[l-1]` is equal to `x[r]`, it prints 'Yes' and continues to the next iteration.
    #2. Otherwise, it finds the lower bound (`lower`) and upper bound (`upper`) of indices in `inds` where the keys match `x[r]` and `x[l-1]` respectively, considering the constraints provided by `func_3` and `func_4`.
    #3. If `upper` is greater than `lower`, it prints 'Yes'; otherwise, it prints 'No'.
    #
    #The final output state will be a sequence of 'Yes' and 'No' based on these checks for each iteration of the loop.
#Overall this is what the function does:The function processes a list `a` of integers and for each query defined by `l` and `r`, it checks if there exists any index `i` in the range `[l, r]` such that the XOR of the sublist `a[l-1:i]` is equal to the XOR of the sublist `a[i:r]`. If such an index exists, it prints 'Yes'; otherwise, it prints 'No'. The function does not return any value but prints the results for each query.

