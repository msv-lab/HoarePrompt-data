#State of the program right berfore the function call: t is an integer such that 1 ≤ t ≤ 10^4. For each test case, n is an integer such that 2 ≤ n ≤ 10^5, and a is a list of n integers where 0 ≤ a_1 < a_2 < ... < a_n ≤ 10^9. m is an integer such that 1 ≤ m ≤ 10^5, and for each query, x_i and y_i are integers such that 1 ≤ x_i, y_i ≤ n and x_i ≠ y_i.
def func():
    r = lambda : map(int, input().split())
    t, = r()
    while t:
        t -= 1
        
        r()
        
        a = -1000000000.0, *r(), 2000000000.0
        
        b = [0, 0]
        
        for w, x, y, z in zip(a, a[1:], a[2:], a[3:]):
            v = y - x
            b += b[-2] + v ** (v > x - w), b[-1] + v ** (v > z - y)
        
        print(b, 'B')
        
        u, = r()
        
        while u:
            u -= 1
            c, d = r()
            if c < d:
                print(b[(d - 1) * 2] - b[(c - 1) * 2])
            else:
                print(b[c * 2 - 1] - b[d * 2 - 1])
        
    #State: Output State: The output state will consist of multiple lines of printed results, each line representing the difference calculated based on the values generated by the lambda function `r()`.
    #
    #Explanation: The loop starts with `t` initialized to some value from the tuple returned by `r()`. The loop continues as long as `t` is non-zero. In each iteration, `t` is decremented by 1, and `r()` is called, which generates a new tuple of integers. This tuple is then used to update the list `a` with extreme values (-1000000000.0 and 2000000000.0). A list `b` is initialized to `[0, 0]`, and a nested loop processes elements of `a` to compute differences and update `b`. After processing `a`, the loop prints the updated `b` list followed by 'B'. Then, another loop is executed `u` times, where `u` is also obtained from `r()`. This inner loop compares pairs of values generated by `r()` and prints the difference in the corresponding positions of `b`.
    #
    #Since the exact values of `t` and `u` are not specified, and the lambda function `r()` can return different values each time it's called, the final output state will depend on these variables and the sequence of values generated by `r()`. Each iteration modifies `b` based on the current values of `a`, leading to a series of printed differences.
#Overall this is what the function does:The function processes a series of test cases, each consisting of a list of integers `a` and a number of queries `m`. For each test case, it initializes a list `b` and updates it based on the differences between consecutive elements in `a`. It then handles `m` queries, each involving two indices `x_i` and `y_i`, and prints the difference between the values at these indices in the list `b`. The function does not return any value but outputs the results of the queries.

