#State of the program right berfore the function call: t is an integer such that 1 ≤ t ≤ 2⋅10^4. Each test case consists of n and x where 1 ≤ x ≤ n ≤ 2⋅10^5, and p is a list of n integers representing a permutation of size n.
def func_1():
    return map(int, input().split())
    #The program returns a map object containing integers parsed from user input.
#Overall this is what the function does:The function reads a line of space-separated integers from the user, converts them to integers, and returns a map object containing these integers.

#State of the program right berfore the function call: t is an integer such that 1 ≤ t ≤ 2⋅10^4, each test case consists of n and x where 1 ≤ x ≤ n ≤ 2⋅10^5, and p is a list of integers representing a permutation of length n.
def func_2():
    return list(func_1())
    #The program returns a list generated by func_1(), which is not defined in the given information.
#Overall this is what the function does:The function does not accept any parameters and returns a list generated by `func_1()`. The exact nature of the list returned by `func_1()` is not specified in the given information.

#State of the program right berfore the function call: n is a positive integer representing the length of the permutation array arr, k is an integer such that 1 ≤ k ≤ n, and arr is a list of n distinct integers from 1 to n representing the permutation.
def func_3():
    n, k = func_1()
    arr = func_2()
    pos = -1
    for i in range(n):
        if arr[i] == k:
            pos = i
        
    #State: Output State: `pos` is the index in `arr` where the value `k` is found, or `-1` if `k` is not in `arr`.
    low, high = 0, n
    st = set()
    while low + 1 < high:
        mid = (low + high) // 2
        
        st.add(mid)
        
        if arr[mid] > k:
            high = mid
        else:
            low = mid
        
    #State: `low` is the greatest index such that all elements at indices less than or equal to `low` are greater than or equal to `k`, `high` is `n`, `pos` is `-1`, `st` is a set containing all the mid indices that were added during the loop's execution, i.e., all integers from `low` to `n-1` inclusive.
    if (arr[low] == k) :
        print(0)
        #This is printed: 0
    else :
        print(1)
        #This is printed: 1
        print(low + 1, pos + 1)
        #This is printed: low + 1, 0
    #State: Postcondition: `low` is the greatest index such that all elements at indices less than or equal to `low` are greater than or equal to `k`, `high` is `n`, `pos` is either `1` or `-1` depending on whether `arr[low] == k` or not, `st` is a set containing all the mid indices that were added during the loop's execution, i.e., all integers from `low` to `n-1` inclusive, and `arr[low]` is either equal to `k` or not equal to `k`.
#Overall this is what the function does:The function accepts a positive integer `n`, an integer `k` such that `1 ≤ k ≤ n`, and a list `arr` of `n` distinct integers from 1 to n representing a permutation. It determines if `k` is present in `arr` and, if so, finds the smallest index greater than or equal to `k`. If `k` is not present, it identifies the position just before the first element greater than `k`. The function then prints either 0 if `k` is found at the identified index, or 1 followed by the index and the previously found index `pos` if `k` is not found.

