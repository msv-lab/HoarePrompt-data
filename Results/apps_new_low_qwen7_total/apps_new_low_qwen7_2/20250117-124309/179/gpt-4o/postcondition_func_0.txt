The function takes an integer `n` (where 13 â‰¤ n < 10^5 and n is odd) and a string `s` consisting of `n` digits as input. It then calculates the number of moves required based on `n`, which is given by `(n - 11) // 2`. The function counts the occurrences of the digit '8' in the substring of `s` starting from the beginning up to the index `n - 11`. Depending on whether the count of '8's is greater than the calculated number of moves, the function prints either 'YES' or 'NO'. An edge case to consider is when `n` is exactly 13, in which case the substring `s[:n - 11]` would be empty, resulting in `count_8` being 0. Another edge case is when `n` approaches 10^5, the calculation of `moves` should ensure it remains within the valid range. The function does not handle invalid inputs or non-digit characters in the string `s`.