Task ID,Dataset,model_created,model_run,description,Code,run_number,original correctness,summary fsl,naive correctness fsl,vanilla,simple tree,complex tree,summary,simple verify fsl,complex verify fsl,summary verify fsl,simple verify,complex verify,summary verify,unique_id,consistency,consistency_mine,consistency_old
5,apps,gpt-4o,qwen2.5-7b-instruct,"Jamie loves sleeping. One day, he decides that he needs to wake up at exactly hh: mm. However, he hates waking up, so he wants to make waking up less painful by setting the alarm at a lucky time. He will then press the snooze button every x minutes until hh: mm is reached, and only then he will wake up. He wants to know what is the smallest number of times he needs to press the snooze button.

A time is considered lucky if it contains a digit '7'. For example, 13: 07 and 17: 27 are lucky, while 00: 48 and 21: 34 are not lucky.

Note that it is not necessary that the time set for the alarm and the wake-up time are on the same day. It is guaranteed that there is a lucky time Jamie can set so that he can wake at hh: mm.

Formally, find the smallest possible non-negative integer y such that the time representation of the time x·y minutes before hh: mm contains the digit '7'.

Jamie uses 24-hours clock, so after 23: 59 comes 00: 00.


-----Input-----

The first line contains a single integer x (1 ≤ x ≤ 60).

The second line contains two two-digit integers, hh and mm (00 ≤ hh ≤ 23, 00 ≤ mm ≤ 59).


-----Output-----

Print the minimum number of times he needs to press the button.


-----Examples-----
Input
3
11 23

Output
2

Input
5
01 07

Output
0



-----Note-----

In the first sample, Jamie needs to wake up at 11:23. So, he can set his alarm at 11:17. He would press the snooze button when the alarm rings at 11:17 and at 11:20.

In the second sample, Jamie can set his alarm at exactly at 01:07 which is lucky.","def contains_seven(h, m):
    """"""Check if the time h:m contains a '7'.""""""
    return '7' in str(h) or '7' in str(m)

def main():
    # Read inputs
    x = int(input())
    hh, mm = map(int, input().split())

    # Initialize the counter for the number of snooze presses
    snooze_count = 0

    # Check the time and keep pressing snooze until a lucky time is found
    while not contains_seven(hh, mm):
        snooze_count += 1
        mm -= x
        if mm < 0:
            mm += 60
            hh -= 1
            if hh < 0:
                hh += 24

    # Print the result
    print(snooze_count)

# Run the main function
if __name__ == ""__main__"":
    main()
",1,True,False,True,True,True,True,True,True,True,True,True,True,True,5_gpt-4o,0.826462452946936,0.3705038644939344,0.7083333333333334
9,apps,gpt-4o,qwen2.5-7b-instruct,"Tokitsukaze is playing a game derivated from Japanese mahjong. In this game, she has three tiles in her hand. Each tile she owns is a suited tile, which means it has a suit (manzu, pinzu or souzu) and a number (a digit ranged from $1$ to $9$). In this problem, we use one digit and one lowercase letter, which is the first character of the suit, to represent a suited tile. All possible suited tiles are represented as 1m, 2m, $\ldots$, 9m, 1p, 2p, $\ldots$, 9p, 1s, 2s, $\ldots$, 9s.

In order to win the game, she must have at least one mentsu (described below) in her hand, so sometimes she should draw extra suited tiles. After drawing a tile, the number of her tiles increases by one. She can draw any tiles she wants, including those already in her hand.

Do you know the minimum number of extra suited tiles she needs to draw so that she can win?

Here are some useful definitions in this game:  A mentsu, also known as meld, is formed by a koutsu or a shuntsu;  A koutsu, also known as triplet, is made of three identical tiles, such as [1m, 1m, 1m], however, [1m, 1p, 1s] or [1m, 4m, 7m] is NOT a koutsu;  A shuntsu, also known as sequence, is made of three sequential numbered tiles in the same suit, such as [1m, 2m, 3m] and [5s, 7s, 6s], however, [9m, 1m, 2m] or [1m, 2p, 3s] is NOT a shuntsu. 

Some examples:   [2m, 3p, 2s, 4m, 1s, 2s, 4s] — it contains no koutsu or shuntsu, so it includes no mentsu;  [4s, 3m, 3p, 4s, 5p, 4s, 5p] — it contains a koutsu, [4s, 4s, 4s], but no shuntsu, so it includes a mentsu;  [5p, 5s, 9m, 4p, 1s, 7p, 7m, 6p] — it contains no koutsu but a shuntsu, [5p, 4p, 6p] or [5p, 7p, 6p], so it includes a mentsu. 

Note that the order of tiles is unnecessary and you can assume the number of each type of suited tiles she can draw is infinite.


-----Input-----

The only line contains three strings — the tiles in Tokitsukaze's hand. For each string, the first character is a digit ranged from $1$ to $9$ and the second character is m, p or s.


-----Output-----

Print a single integer — the minimum number of extra suited tiles she needs to draw.


-----Examples-----
Input
1s 2s 3s

Output
0

Input
9m 9m 9m

Output
0

Input
3p 9m 2p

Output
1



-----Note-----

In the first example, Tokitsukaze already has a shuntsu.

In the second example, Tokitsukaze already has a koutsu.

In the third example, Tokitsukaze can get a shuntsu by drawing one suited tile — 1p or 4p. The resulting tiles will be [3p, 9m, 2p, 1p] or [3p, 9m, 2p, 4p].","def min_tiles_to_win(tiles):
    # Parse the input tiles
    t1, t2, t3 = tiles.split()
    
    # Utility function to check if three tiles form a koutsu or shuntsu
    def is_koutsu_or_shuntsu(t1, t2, t3):
        if t1 == t2 == t3:
            return True
        n1, s1 = int(t1[0]), t1[1]
        n2, s2 = int(t2[0]), t2[1]
        n3, s3 = int(t3[0]), t3[1]
        if s1 == s2 == s3 and sorted([n1, n2, n3]) in ([n1, n2, n3] for n1 in range(1, 8)):
            return True
        return False
    
    # Check if already a koutsu or shuntsu
    if is_koutsu_or_shuntsu(t1, t2, t3):
        return 0
    
    # Group tiles by suit
    suits = {'m': [], 'p': [], 's': []}
    for tile in [t1, t2, t3]:
        suits[tile[1]].append(int(tile[0]))
    
    # Check how many tiles are needed to form koutsu or shuntsu
    def tiles_needed_to_complete_group(tiles):
        tiles.sort()
        if len(tiles) == 1:
            return 2
        if len(tiles) == 2:
            if tiles[0] == tiles[1]:
                return 1
            if tiles[1] - tiles[0] <= 2:
                return 1
            return 2
        return 2

    min_additional_tiles = 2
    for suit, numbers in suits.items():
        min_additional_tiles = min(min_additional_tiles, tiles_needed_to_complete_group(numbers))
    
    return min_additional_tiles

# Read input
import sys
input = sys.stdin.read
tiles = input().strip()
print(min_tiles_to_win(tiles))
",1,False,False,True,True,True,True,False,False,False,True,True,True,False,9_gpt-4o,0.661108343056226,0.16618406764318508,0.5833333333333334
12,apps,gpt-4o,qwen2.5-7b-instruct,"Little Joty has got a task to do. She has a line of n tiles indexed from 1 to n. She has to paint them in a strange pattern.

An unpainted tile should be painted Red if it's index is divisible by a and an unpainted tile should be painted Blue if it's index is divisible by b. So the tile with the number divisible by a and b can be either painted Red or Blue.

After her painting is done, she will get p chocolates for each tile that is painted Red and q chocolates for each tile that is painted Blue.

Note that she can paint tiles in any order she wants.

Given the required information, find the maximum number of chocolates Joty can get.


-----Input-----

The only line contains five integers n, a, b, p and q (1 ≤ n, a, b, p, q ≤ 10^9).


-----Output-----

Print the only integer s — the maximum number of chocolates Joty can get.

Note that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.


-----Examples-----
Input
5 2 3 12 15

Output
39

Input
20 2 3 3 5

Output
51","n, a, b, p, q = map(int, input().split())

def lcm(x, y):
    from math import gcd
    return x * y // gcd(x, y)

red_tiles = n // a
blue_tiles = n // b
both_tiles = n // lcm(a, b)

# Since the tiles that can be painted both Red or Blue can only be counted once, we need to subtract them once
max_chocolates = red_tiles * p + blue_tiles * q - both_tiles * min(p, q)

print(max_chocolates)
",1,True,False,False,True,True,True,True,False,False,True,True,False,True,12_gpt-4o,0.7155768281100079,0.2171204076163509,0.7083333333333334
13,apps,gpt-4o,qwen2.5-7b-instruct,"Vova has won $n$ trophies in different competitions. Each trophy is either golden or silver. The trophies are arranged in a row.

The beauty of the arrangement is the length of the longest subsegment consisting of golden trophies. Vova wants to swap two trophies (not necessarily adjacent ones) to make the arrangement as beautiful as possible — that means, to maximize the length of the longest such subsegment.

Help Vova! Tell him the maximum possible beauty of the arrangement if he is allowed to do at most one swap.


-----Input-----

The first line contains one integer $n$ ($2 \le n \le 10^5$) — the number of trophies.

The second line contains $n$ characters, each of them is either G or S. If the $i$-th character is G, then the $i$-th trophy is a golden one, otherwise it's a silver trophy. 


-----Output-----

Print the maximum possible length of a subsegment of golden trophies, if Vova is allowed to do at most one swap.


-----Examples-----
Input
10
GGGSGGGSGG

Output
7

Input
4
GGGG

Output
4

Input
3
SSS

Output
0



-----Note-----

In the first example Vova has to swap trophies with indices $4$ and $10$. Thus he will obtain the sequence ""GGGGGGGSGS"", the length of the longest subsegment of golden trophies is $7$. 

In the second example Vova can make no swaps at all. The length of the longest subsegment of golden trophies in the sequence is $4$. 

In the third example Vova cannot do anything to make the length of the longest subsegment of golden trophies in the sequence greater than $0$.","def max_beauty_after_swap(n, trophies):
    segments = []
    i = 0
    
    while i < n:
        if trophies[i] == 'G':
            start = i
            while i < n and trophies[i] == 'G':
                i += 1
            segments.append((start, i - 1))
        else:
            i += 1
    
    if not segments:
        return 0
    
    max_length = max(end - start + 1 for start, end in segments)
    
    if len(segments) == 1:
        return max_length
    
    for i in range(1, len(segments)):
        prev_start, prev_end = segments[i - 1]
        curr_start, curr_end = segments[i]
        if curr_start - prev_end == 2:
            max_length = max(max_length, (curr_end - curr_start + 1) + (prev_end - prev_start + 1) + 1)
    
    return min(max_length + 1, n)

# Read input
import sys
input = sys.stdin.read
data = input().split()
n = int(data[0])
trophies = data[1]

# Print output
print(max_beauty_after_swap(n, trophies))
",1,False,False,False,True,True,True,True,True,True,True,False,False,False,13_gpt-4o,0.5777493155989952,0.07779992903777712,0.5833333333333334
15,apps,gpt-4o,qwen2.5-7b-instruct,"Let's suppose you have an array a, a stack s (initially empty) and an array b (also initially empty).

You may perform the following operations until both a and s are empty:

  Take the first element of a, push it into s and remove it from a (if a is not empty);  Take the top element from s, append it to the end of array b and remove it from s (if s is not empty). 

You can perform these operations in arbitrary order.

If there exists a way to perform the operations such that array b is sorted in non-descending order in the end, then array a is called stack-sortable.

For example, [3, 1, 2] is stack-sortable, because b will be sorted if we perform the following operations:

  Remove 3 from a and push it into s;  Remove 1 from a and push it into s;  Remove 1 from s and append it to the end of b;  Remove 2 from a and push it into s;  Remove 2 from s and append it to the end of b;  Remove 3 from s and append it to the end of b. 

After all these operations b = [1, 2, 3], so [3, 1, 2] is stack-sortable. [2, 3, 1] is not stack-sortable.

You are given k first elements of some permutation p of size n (recall that a permutation of size n is an array of size n where each integer from 1 to n occurs exactly once). You have to restore the remaining n - k elements of this permutation so it is stack-sortable. If there are multiple answers, choose the answer such that p is lexicographically maximal (an array q is lexicographically greater than an array p iff there exists some integer k such that for every i < k q_{i} = p_{i}, and q_{k} > p_{k}). You may not swap or change any of first k elements of the permutation.

Print the lexicographically maximal permutation p you can obtain.

If there exists no answer then output -1.


-----Input-----

The first line contains two integers n and k (2 ≤ n ≤ 200000, 1 ≤ k < n) — the size of a desired permutation, and the number of elements you are given, respectively.

The second line contains k integers p_1, p_2, ..., p_{k} (1 ≤ p_{i} ≤ n) — the first k elements of p. These integers are pairwise distinct.


-----Output-----

If it is possible to restore a stack-sortable permutation p of size n such that the first k elements of p are equal to elements given in the input, print lexicographically maximal such permutation.

Otherwise print -1.


-----Examples-----
Input
5 3
3 2 1

Output
3 2 1 5 4 
Input
5 3
2 3 1

Output
-1

Input
5 1
3

Output
3 2 1 5 4 
Input
5 2
3 4

Output
-1","def is_stack_sortable_starting_with_k(n, k, p):
    # Check if the given starting array is already in stack-sortable order
    stack = []
    max_seen = 0
    for num in p:
        if num < max_seen:
            return -1
        while stack and stack[-1] < num:
            max_seen = stack.pop()
        stack.append(num)

    remaining_numbers = set(range(1, n + 1)) - set(p)
    remaining_numbers = sorted(remaining_numbers, reverse=True)

    # Try to construct the remaining part of the permutation
    result = p[:]
    for num in remaining_numbers:
        while stack and stack[-1] < num:
            result.append(stack.pop())
        stack.append(num)
    
    result.extend(reversed(stack))
    
    # Verify if the constructed permutation is stack-sortable
    stack = []
    max_seen = 0
    for num in result:
        if num < max_seen:
            return -1
        while stack and stack[-1] < num:
            max_seen = stack.pop()
        stack.append(num)
    
    return result

# Read input
import sys
input = sys.stdin.read
data = input().split()

n = int(data[0])
k = int(data[1])
p = list(map(int, data[2:]))

# Solve the problem
result = is_stack_sortable_starting_with_k(n, k, p)
if result == -1:
    print(result)
else:
    print("" "".join(map(str, result)))
",1,False,False,False,True,True,True,True,True,False,True,True,True,True,15_gpt-4o,0.7539812797050169,0.26697790044032516,0.7083333333333334
23,apps,gpt-4o,qwen2.5-7b-instruct,"Let's call a string ""s-palindrome"" if it is symmetric about the middle of the string. For example, the string ""oHo"" is ""s-palindrome"", but the string ""aa"" is not. The string ""aa"" is not ""s-palindrome"", because the second half of it is not a mirror reflection of the first half.

 [Image] English alphabet 

You are given a string s. Check if the string is ""s-palindrome"".


-----Input-----

The only line contains the string s (1 ≤ |s| ≤ 1000) which consists of only English letters.


-----Output-----

Print ""TAK"" if the string s is ""s-palindrome"" and ""NIE"" otherwise.


-----Examples-----
Input
oXoxoXo

Output
TAK

Input
bod

Output
TAK

Input
ER

Output
NIE","def is_s_palindrome(s):
    n = len(s)
    for i in range(n // 2):
        if s[i] != s[n - 1 - i]:
            return False
    return True

# Read input
s = input().strip()

# Check if the string is ""s-palindrome""
if is_s_palindrome(s):
    print(""TAK"")
else:
    print(""NIE"")
",1,False,True,True,True,True,True,True,True,False,True,True,True,True,23_gpt-4o,0.7248138853023477,0.2394038844353333,0.625
28,apps,gpt-4o,qwen2.5-7b-instruct,"You are given a string s consisting of n lowercase Latin letters. You have to type this string using your keyboard.

Initially, you have an empty string. Until you type the whole string, you may perform the following operation:  add a character to the end of the string. 

Besides, at most once you may perform one additional operation: copy the string and append it to itself.

For example, if you have to type string abcabca, you can type it in 7 operations if you type all the characters one by one. However, you can type it in 5 operations if you type the string abc first and then copy it and type the last character.

If you have to type string aaaaaaaaa, the best option is to type 4 characters one by one, then copy the string, and then type the remaining character.

Print the minimum number of operations you need to type the given string.


-----Input-----

The first line of the input containing only one integer number n (1 ≤ n ≤ 100) — the length of the string you have to type. The second line containing the string s consisting of n lowercase Latin letters.


-----Output-----

Print one integer number — the minimum number of operations you need to type the given string.


-----Examples-----
Input
7
abcabca

Output
5

Input
8
abcdefgh

Output
8



-----Note-----

The first test described in the problem statement.

In the second test you can only type all the characters one by one.","n = int(input())
s = input()

# Function to find the minimum number of operations to type the string
def min_operations_to_type(n, s):
    # Initialize the operations count to n (typing each character one by one)
    min_operations = n
    
    # Try to find the optimal place to perform the copy operation
    for i in range(1, n):
        # Find the length of the substring to copy
        if s[:i] == s[i:2*i]:
            # Calculate the number of operations
            operations = i + 1 + (n - 2*i)
            min_operations = min(min_operations, operations)
    
    return min_operations

# Get the result
result = min_operations_to_type(n, s)

# Print the result
print(result)
",1,True,False,False,True,True,True,True,False,True,True,True,True,True,28_gpt-4o,0.548959125547294,0.04899058022009064,0.5
34,apps,gpt-4o,qwen2.5-7b-instruct,"You are given two arithmetic progressions: a_1k + b_1 and a_2l + b_2. Find the number of integers x such that L ≤ x ≤ R and x = a_1k' + b_1 = a_2l' + b_2, for some integers k', l' ≥ 0.


-----Input-----

The only line contains six integers a_1, b_1, a_2, b_2, L, R (0 < a_1, a_2 ≤ 2·10^9,  - 2·10^9 ≤ b_1, b_2, L, R ≤ 2·10^9, L ≤ R).


-----Output-----

Print the desired number of integers x.


-----Examples-----
Input
2 0 3 3 5 21

Output
3

Input
2 4 3 0 6 17

Output
2","def gcd_extended(a, b):
    if a == 0:
        return b, 0, 1
    gcd, x1, y1 = gcd_extended(b % a, a)
    x = y1 - (b // a) * x1
    y = x1
    return gcd, x, y

def find_integer_solutions(a1, b1, a2, b2, L, R):
    A = a1
    B = -a2
    C = b2 - b1

    gcd, x0, y0 = gcd_extended(abs(A), abs(B))
    
    if C % gcd != 0:
        return -1
    
    x0 *= C // gcd
    y0 *= C // gcd
    
    if A < 0:
        x0 = -x0
    if B < 0:
        y0 = -y0
    
    a1_div_gcd = a1 // gcd
    a2_div_gcd = a2 // gcd
    
    def adjust_solution(x, y, a1_div_gcd, a2_div_gcd, sign_a1, sign_a2):
        if sign_a1 > 0:
            k = (L - (b1 + a1 * x)) // (a1 * a1_div_gcd)
            x += k * a2_div_gcd
            y -= k * a1_div_gcd
        else:
            k = (R - (b1 + a1 * x)) // (a1 * a1_div_gcd)
            x += k * a2_div_gcd
            y -= k * a1_div_gcd
        
        if b1 + a1 * x < L:
            x += a2_div_gcd
            y -= a1_div_gcd
        if b1 + a1 * x > R:
            x -= a2_div_gcd
            y += a1_div_gcd
        
        return x, y
    
    x0, y0 = adjust_solution(x0, y0, a1_div_gcd, a2_div_gcd, 1, -1)
    
    count = 0
    while True:
        val = a1 * x0 + b1
        if val > R:
            break
        if L <= val <= R:
            count += 1
        x0 += a2_div_gcd
        y0 -= a1_div_gcd
    
    return count

# Input
a1, b1, a2, b2, L, R = map(int, input().split())

# Output
print(find_integer_solutions(a1, b1, a2, b2, L, R))
",1,False,False,False,True,True,False,True,True,True,True,True,True,False,34_gpt-4o,0.8916947406274265,0.4796909893978549,0.7083333333333334
35,apps,gpt-4o,qwen2.5-7b-instruct,"It's New Year's Eve soon, so Ivan decided it's high time he started setting the table. Ivan has bought two cakes and cut them into pieces: the first cake has been cut into a pieces, and the second one — into b pieces.

Ivan knows that there will be n people at the celebration (including himself), so Ivan has set n plates for the cakes. Now he is thinking about how to distribute the cakes between the plates. Ivan wants to do it in such a way that all following conditions are met:  Each piece of each cake is put on some plate;  Each plate contains at least one piece of cake;  No plate contains pieces of both cakes. 

To make his guests happy, Ivan wants to distribute the cakes in such a way that the minimum number of pieces on the plate is maximized. Formally, Ivan wants to know the maximum possible number x such that he can distribute the cakes according to the aforementioned conditions, and each plate will contain at least x pieces of cake.

Help Ivan to calculate this number x!


-----Input-----

The first line contains three integers n, a and b (1 ≤ a, b ≤ 100, 2 ≤ n ≤ a + b) — the number of plates, the number of pieces of the first cake, and the number of pieces of the second cake, respectively.


-----Output-----

Print the maximum possible number x such that Ivan can distribute the cake in such a way that each plate will contain at least x pieces of cake.


-----Examples-----
Input
5 2 3

Output
1

Input
4 7 10

Output
3



-----Note-----

In the first example there is only one way to distribute cakes to plates, all of them will have 1 cake on it.

In the second example you can have two plates with 3 and 4 pieces of the first cake and two plates both with 5 pieces of the second cake. Minimal number of pieces is 3.","def max_min_pieces(n, a, b):
    low, high = 1, min(a, b) + 1

    def can_distribute(x):
        return (a // x) + (b // x) >= n

    while low < high:
        mid = (low + high) // 2
        if can_distribute(mid):
            low = mid + 1
        else:
            high = mid
    
    return low - 1

# Read input values
n, a, b = map(int, input().split())

# Compute and print the result
print(max_min_pieces(n, a, b))
",1,True,False,True,True,True,True,True,True,True,True,False,False,False,35_gpt-4o,0.7196776726603296,0.22648439457378763,0.5416666666666666
37,apps,gpt-4o,qwen2.5-7b-instruct,"Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: 

[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.


-----Input-----

The only line of the input contains integer n (0 ≤ n ≤ 10^18) — the number of Ayrat's moves.


-----Output-----

Print two integers x and y — current coordinates of Ayrat coordinates.


-----Examples-----
Input
3

Output
-2 0

Input
7

Output
3 2","def find_coordinates(n):
    # Directions in hexagonal grid
    directions = [(1, 0), (0, 1), (-1, 1), (-1, 0), (0, -1), (1, -1)]
    
    x, y = 0, 0  # Starting position
    steps = 1    # Initial number of steps to take in a given direction
    direction_index = 0  # Start with the first direction
    
    while n > 0:
        for _ in range(2):  # Each direction length is repeated twice before increasing the steps
            if n >= steps:
                dx, dy = directions[direction_index]
                x += dx * steps
                y += dy * steps
                n -= steps
                direction_index = (direction_index + 1) % 6
            else:
                dx, dy = directions[direction_index]
                x += dx * n
                y += dy * n
                return x, y
        steps += 1  # Increase the number of steps after completing two directions
    
    return x, y

# Read input
n = int(input().strip())

# Get the coordinates after n moves
x, y = find_coordinates(n)

# Print the result
print(x, y)
",1,False,False,False,True,True,True,True,False,True,True,True,False,False,37_gpt-4o,0.6739356644576018,0.17974570635049858,0.5833333333333334
46,apps,gpt-4o,qwen2.5-7b-instruct,"You are given positive integer number n. You should create such strictly increasing sequence of k positive numbers a_1, a_2, ..., a_{k}, that their sum is equal to n and greatest common divisor is maximal.

Greatest common divisor of sequence is maximum of such numbers that every element of sequence is divisible by them.

If there is no possible sequence then output -1.


-----Input-----

The first line consists of two numbers n and k (1 ≤ n, k ≤ 10^10).


-----Output-----

If the answer exists then output k numbers — resulting sequence. Otherwise output -1. If there are multiple answers, print any of them.


-----Examples-----
Input
6 3

Output
1 2 3

Input
8 2

Output
2 6

Input
5 3

Output
-1","def find_sequence(n, k):
    min_sum = k * (k + 1) // 2  # Sum of the first k natural numbers
    
    if min_sum > n:
        return -1
    
    d = n // min_sum  # Maximum possible GCD
    remainder = n - d * min_sum
    
    sequence = [d * (i + 1) for i in range(k)]
    
    # Distribute the remainder to the sequence to make the sum equal to n
    for i in range(k-1, -1, -1):
        if remainder == 0:
            break
        sequence[i] += 1
        remainder -= 1
    
    return sequence

# Read input
n, k = map(int, input().split())

result = find_sequence(n, k)
if result == -1:
    print(-1)
else:
    print("" "".join(map(str, result)))
",1,False,False,False,True,True,True,True,True,True,True,True,True,False,46_gpt-4o,0.7759771552020481,0.30291909377485055,0.625
52,apps,gpt-4o,qwen2.5-7b-instruct,"В Берляндском государственном университете локальная сеть между серверами не всегда работает без ошибок. При передаче двух одинаковых сообщений подряд возможна ошибка, в результате которой эти два сообщения сливаются в одно. При таком слиянии конец первого сообщения совмещается с началом второго. Конечно, совмещение может происходить только по одинаковым символам. Длина совмещения должна быть положительным числом, меньшим длины текста сообщения. 

Например, при передаче двух сообщений «abrakadabra» подряд возможно, что оно будет передано с ошибкой описанного вида, и тогда будет получено сообщение вида «abrakadabrabrakadabra» или «abrakadabrakadabra» (в первом случае совмещение произошло по одному символу, а во втором — по четырем).

По полученному сообщению t определите, возможно ли, что это результат ошибки описанного вида работы локальной сети, и если возможно, определите возможное значение s. 

Не следует считать ошибкой ситуацию полного наложения друга на друга двух сообщений. К примеру, если получено сообщение «abcd», следует считать, что в нём ошибки нет. Аналогично, простое дописывание одного сообщения вслед за другим не является признаком ошибки. Например, если получено сообщение «abcabc», следует считать, что в нём ошибки нет.


-----Входные данные-----

В единственной строке выходных данных следует непустая строка t, состоящая из строчных букв латинского алфавита. Длина строки t не превосходит 100 символов.


-----Выходные данные-----

Если сообщение t не может содержать ошибки, выведите «NO» (без кавычек) в единственную строку выходных данных.

В противном случае в первой строке выведите «YES» (без кавычек), а в следующей строке выведите строку s — возможное сообщение, которое могло привести к ошибке. Если возможных ответов несколько, разрешается вывести любой из них.


-----Примеры-----
Входные данные
abrakadabrabrakadabra

Выходные данные
YES
abrakadabra

Входные данные
acacacaca

Выходные данные
YES
acaca

Входные данные
abcabc

Выходные данные
NO

Входные данные
abababab

Выходные данные
YES
ababab

Входные данные
tatbt

Выходные данные
NO



-----Примечание-----

Во втором примере подходящим ответом также является строка acacaca.","def find_possible_message(t):
    n = len(t)
    for i in range(1, n):
        if t[:i] == t[-i:]:
            s = t[:-i]
            if s + t[-i:] == t:
                return ""YES\n"" + s
    return ""NO""

# Read input
t = input().strip()

# Find and print the result
print(find_possible_message(t))
",1,False,False,False,True,True,True,True,False,True,True,True,True,True,52_gpt-4o,0.5222316825506773,0.022116155956770172,0.5
56,apps,gpt-4o,qwen2.5-7b-instruct,"Jamie is preparing a Codeforces round. He has got an idea for a problem, but does not know how to solve it. Help him write a solution to the following problem:

Find k integers such that the sum of two to the power of each number equals to the number n and the largest integer in the answer is as small as possible. As there may be multiple answers, you are asked to output the lexicographically largest one. 

To be more clear, consider all integer sequence with length k (a_1, a_2, ..., a_{k}) with $\sum_{i = 1}^{k} 2^{a_{i}} = n$. Give a value $y = \operatorname{max}_{1 \leq i \leq k} a_{i}$ to each sequence. Among all sequence(s) that have the minimum y value, output the one that is the lexicographically largest.

For definitions of powers and lexicographical order see notes.


-----Input-----

The first line consists of two integers n and k (1 ≤ n ≤ 10^18, 1 ≤ k ≤ 10^5) — the required sum and the length of the sequence.


-----Output-----

Output ""No"" (without quotes) in a single line if there does not exist such sequence. Otherwise, output ""Yes"" (without quotes) in the first line, and k numbers separated by space in the second line — the required sequence.

It is guaranteed that the integers in the answer sequence fit the range [ - 10^18, 10^18].


-----Examples-----
Input
23 5

Output
Yes
3 3 2 1 0 

Input
13 2

Output
No

Input
1 2

Output
Yes
-1 -1 



-----Note-----

Sample 1:

2^3 + 2^3 + 2^2 + 2^1 + 2^0 = 8 + 8 + 4 + 2 + 1 = 23

Answers like (3, 3, 2, 0, 1) or (0, 1, 2, 3, 3) are not lexicographically largest.

Answers like (4, 1, 1, 1, 0) do not have the minimum y value.

Sample 2:

It can be shown there does not exist a sequence with length 2.

Sample 3:

$2^{-1} + 2^{-1} = \frac{1}{2} + \frac{1}{2} = 1$

Powers of 2:

If x > 0, then 2^{x} = 2·2·2·...·2 (x times).

If x = 0, then 2^{x} = 1.

If x < 0, then $2^{x} = \frac{1}{2^{-x}}$.

Lexicographical order:

Given two different sequences of the same length, (a_1, a_2, ... , a_{k}) and (b_1, b_2, ... , b_{k}), the first one is smaller than the second one for the lexicographical order, if and only if a_{i} < b_{i}, for the first i where a_{i} and b_{i} differ.","def find_sequence(n, k):
    # Check if it is possible to express n as a sum of k powers of 2
    if k > n:
        return ""No""
    
    # Start by representing n in binary and counting the number of 1s
    bits = []
    for i in range(60, -1, -1):
        if (n >> i) & 1:
            bits.append(i)

    # If the number of bits is more than k, it's impossible
    if len(bits) > k:
        return ""No""
    
    # We need to distribute the bits to get exactly k parts
    while len(bits) < k:
        smallest = bits.pop()
        bits.append(smallest - 1)
        bits.append(smallest - 1)
    
    # Sort to ensure that the sequence is lexicographically largest
    bits.sort(reverse=True)
    
    return ""Yes\n"" + "" "".join(map(str, bits))

# Reading input
import sys
input = sys.stdin.read
data = input().strip().split()
n = int(data[0])
k = int(data[1])

# Finding and printing the sequence
print(find_sequence(n, k))
",1,False,False,False,True,True,True,True,True,True,False,False,False,False,56_gpt-4o,0.6668830988335698,0.16731765420689637,0.6666666666666666
64,apps,gpt-4o,qwen2.5-7b-instruct,"Vova again tries to play some computer card game.

The rules of deck creation in this game are simple. Vova is given an existing deck of n cards and a magic number k. The order of the cards in the deck is fixed. Each card has a number written on it; number a_{i} is written on the i-th card in the deck.

After receiving the deck and the magic number, Vova removes x (possibly x = 0) cards from the top of the deck, y (possibly y = 0) cards from the bottom of the deck, and the rest of the deck is his new deck (Vova has to leave at least one card in the deck after removing cards). So Vova's new deck actually contains cards x + 1, x + 2, ... n - y - 1, n - y from the original deck.

Vova's new deck is considered valid iff the product of all numbers written on the cards in his new deck is divisible by k. So Vova received a deck (possibly not a valid one) and a number k, and now he wonders, how many ways are there to choose x and y so the deck he will get after removing x cards from the top and y cards from the bottom is valid?


-----Input-----

The first line contains two integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 10^9).

The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — the numbers written on the cards.


-----Output-----

Print the number of ways to choose x and y so the resulting deck is valid.


-----Examples-----
Input
3 4
6 2 8

Output
4

Input
3 6
9 1 14

Output
1



-----Note-----

In the first example the possible values of x and y are:

  x = 0, y = 0;  x = 1, y = 0;  x = 2, y = 0;  x = 0, y = 1.","def count_valid_decks(n, k, cards):
    from math import gcd
    from functools import reduce
    
    def lcm(a, b):
        return a * b // gcd(a, b)
    
    def product(arr):
        return reduce(lambda x, y: x * y, arr, 1)
    
    total_product = product(cards)
    
    if total_product % k != 0:
        return 0
    
    right_product = [1] * (n + 1)
    for i in range(n - 1, -1, -1):
        right_product[i] = right_product[i + 1] * cards[i]
    
    valid_ways = 0
    left_product = 1
    
    for x in range(n):
        if left_product * right_product[x + 1] % k == 0:
            valid_ways += 1
        left_product *= cards[x]
    
    return valid_ways

# Reading input
import sys
input = sys.stdin.read
data = input().split()
n = int(data[0])
k = int(data[1])
cards = list(map(int, data[2:]))

# Calculating and printing the number of valid ways
print(count_valid_decks(n, k, cards))
",1,False,False,False,True,True,True,True,True,True,True,True,False,True,64_gpt-4o,0.5293401931959961,0.029302011377072862,0.5416666666666666
69,apps,gpt-4o,qwen2.5-7b-instruct,"Vasya has got a robot which is situated on an infinite Cartesian plane, initially in the cell $(0, 0)$. Robot can perform the following four kinds of operations:   U — move from $(x, y)$ to $(x, y + 1)$;  D — move from $(x, y)$ to $(x, y - 1)$;  L — move from $(x, y)$ to $(x - 1, y)$;  R — move from $(x, y)$ to $(x + 1, y)$. 

Vasya also has got a sequence of $n$ operations. Vasya wants to modify this sequence so after performing it the robot will end up in $(x, y)$.

Vasya wants to change the sequence so the length of changed subsegment is minimum possible. This length can be calculated as follows: $maxID - minID + 1$, where $maxID$ is the maximum index of a changed operation, and $minID$ is the minimum index of a changed operation. For example, if Vasya changes RRRRRRR to RLRRLRL, then the operations with indices $2$, $5$ and $7$ are changed, so the length of changed subsegment is $7 - 2 + 1 = 6$. Another example: if Vasya changes DDDD to DDRD, then the length of changed subsegment is $1$. 

If there are no changes, then the length of changed subsegment is $0$. Changing an operation means replacing it with some operation (possibly the same); Vasya can't insert new operations into the sequence or remove them.

Help Vasya! Tell him the minimum length of subsegment that he needs to change so that the robot will go from $(0, 0)$ to $(x, y)$, or tell him that it's impossible.


-----Input-----

The first line contains one integer number $n~(1 \le n \le 2 \cdot 10^5)$ — the number of operations.

The second line contains the sequence of operations — a string of $n$ characters. Each character is either U, D, L or R.

The third line contains two integers $x, y~(-10^9 \le x, y \le 10^9)$ — the coordinates of the cell where the robot should end its path.


-----Output-----

Print one integer — the minimum possible length of subsegment that can be changed so the resulting sequence of operations moves the robot from $(0, 0)$ to $(x, y)$. If this change is impossible, print $-1$.


-----Examples-----
Input
5
RURUU
-2 3

Output
3

Input
4
RULR
1 1

Output
0

Input
3
UUU
100 100

Output
-1



-----Note-----

In the first example the sequence can be changed to LULUU. So the length of the changed subsegment is $3 - 1 + 1 = 3$.

In the second example the given sequence already leads the robot to $(x, y)$, so the length of the changed subsegment is $0$.

In the third example the robot can't end his path in the cell $(x, y)$.","def min_subsegment_length_to_target(n, operations, x, y):
    # Initial final position after following all operations
    final_x = 0
    final_y = 0

    # Compute the final coordinates after performing all operations
    for op in operations:
        if op == 'U':
            final_y += 1
        elif op == 'D':
            final_y -= 1
        elif op == 'L':
            final_x -= 1
        elif op == 'R':
            final_x += 1

    # The difference we need to correct
    dx = x - final_x
    dy = y - final_y

    # If the difference is already zero, no changes are needed
    if dx == 0 and dy == 0:
        return 0

    # Sliding window to determine the minimum subsegment length
    min_length = float('inf')
    current_x = 0
    current_y = 0

    # Dictionary to store the position of the robot at each step
    position_map = {(0, 0): -1}
    
    for i in range(n):
        if operations[i] == 'U':
            current_y += 1
        elif operations[i] == 'D':
            current_y -= 1
        elif operations[i] == 'L':
            current_x -= 1
        elif operations[i] == 'R':
            current_x += 1

        # If we have seen the position that would correct the difference before
        target_pos = (current_x + dx, current_y + dy)
        if target_pos in position_map:
            min_length = min(min_length, i - position_map[target_pos])

        position_map[(current_x, current_y)] = i

    return min_length if min_length != float('inf') else -1

# Read input
n = int(input())
operations = input().strip()
x, y = map(int, input().split())

# Get the result
result = min_subsegment_length_to_target(n, operations, x, y)
print(result)
",1,False,False,False,True,True,True,True,True,True,False,True,True,True,69_gpt-4o,0.8019207981559888,0.3338287517701663,0.7083333333333334
76,apps,gpt-4o,qwen2.5-7b-instruct,"You are given a description of a depot. It is a rectangular checkered field of n × m size. Each cell in a field can be empty (""."") or it can be occupied by a wall (""*""). 

You have one bomb. If you lay the bomb at the cell (x, y), then after triggering it will wipe out all walls in the row x and all walls in the column y.

You are to determine if it is possible to wipe out all walls in the depot by placing and triggering exactly one bomb. The bomb can be laid both in an empty cell or in a cell occupied by a wall.


-----Input-----

The first line contains two positive integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the depot field. 

The next n lines contain m symbols ""."" and ""*"" each — the description of the field. j-th symbol in i-th of them stands for cell (i, j). If the symbol is equal to ""."", then the corresponding cell is empty, otherwise it equals ""*"" and the corresponding cell is occupied by a wall.


-----Output-----

If it is impossible to wipe out all walls by placing and triggering exactly one bomb, then print ""NO"" in the first line (without quotes).

Otherwise print ""YES"" (without quotes) in the first line and two integers in the second line — the coordinates of the cell at which the bomb should be laid. If there are multiple answers, print any of them.


-----Examples-----
Input
3 4
.*..
....
.*..

Output
YES
1 2

Input
3 3
..*
.*.
*..

Output
NO

Input
6 5
..*..
..*..
*****
..*..
..*..
..*..

Output
YES
3 3","def find_bomb_placement():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    n = int(data[0])
    m = int(data[1])
    
    grid = []
    index = 2
    for i in range(n):
        grid.append(data[index])
        index += 1

    # Count the number of walls in each row and each column
    row_walls = [0] * n
    col_walls = [0] * m
    
    total_walls = 0
    
    for i in range(n):
        for j in range(m):
            if grid[i][j] == '*':
                row_walls[i] += 1
                col_walls[j] += 1
                total_walls += 1

    # Check every cell to see if placing a bomb there will destroy all walls
    for i in range(n):
        for j in range(m):
            if row_walls[i] + col_walls[j] - (1 if grid[i][j] == '*' else 0) == total_walls:
                print(""YES"")
                print(i + 1, j + 1)
                return

    print(""NO"")

# Call the function to execute the solution
find_bomb_placement()
",1,False,False,False,True,True,True,True,True,True,True,True,False,False,76_gpt-4o,0.7547069367271352,0.2733757528164275,0.625
78,apps,gpt-4o,qwen2.5-7b-instruct,"You are given sequence a_1, a_2, ..., a_{n} of integer numbers of length n. Your task is to find such subsequence that its sum is odd and maximum among all such subsequences. It's guaranteed that given sequence contains subsequence with odd sum.

Subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.

You should write a program which finds sum of the best subsequence.


-----Input-----

The first line contains integer number n (1 ≤ n ≤ 10^5).

The second line contains n integer numbers a_1, a_2, ..., a_{n} ( - 10^4 ≤ a_{i} ≤ 10^4). The sequence contains at least one subsequence with odd sum.


-----Output-----

Print sum of resulting subseqeuence.


-----Examples-----
Input
4
-2 2 -3 1

Output
3

Input
3
2 -5 -3

Output
-1



-----Note-----

In the first example sum of the second and the fourth elements is 3.","# Read input
n = int(input())
a = list(map(int, input().split()))

# Initialize sums
total_sum = sum(a)
min_positive_odd = float('inf')
max_negative_odd = float('-inf')

# Check if the total sum is odd
if total_sum % 2 != 0:
    print(total_sum)
else:
    for num in a:
        if num % 2 != 0:
            if num > 0:
                min_positive_odd = min(min_positive_odd, num)
            else:
                max_negative_odd = max(max_negative_odd, num)
    
    # Calculate possible results by adjusting the total sum to make it odd
    result1 = total_sum - min_positive_odd if min_positive_odd != float('inf') else float('-inf')
    result2 = total_sum - max_negative_odd if max_negative_odd != float('-inf') else float('-inf')

    # Print the maximum valid result
    print(max(result1, result2))
",1,False,False,False,True,False,True,True,False,False,False,True,False,True,78_gpt-4o,0.6684098758997917,0.17434351349348007,0.5833333333333334
80,apps,gpt-4o,qwen2.5-7b-instruct,"Vivek initially has an empty array $a$ and some integer constant $m$.

He performs the following algorithm:  Select a random integer $x$ uniformly in range from $1$ to $m$ and append it to the end of $a$.  Compute the greatest common divisor of integers in $a$.  In case it equals to $1$, break  Otherwise, return to step $1$. 

Find the expected length of $a$. It can be shown that it can be represented as $\frac{P}{Q}$ where $P$ and $Q$ are coprime integers and $Q\neq 0 \pmod{10^9+7}$. Print the value of $P \cdot Q^{-1} \pmod{10^9+7}$.


-----Input-----

The first and only line contains a single integer $m$ ($1 \leq m \leq 100000$).


-----Output-----

Print a single integer — the expected length of the array $a$ written as $P \cdot Q^{-1} \pmod{10^9+7}$.


-----Examples-----
Input
1

Output
1

Input
2

Output
2

Input
4

Output
333333338



-----Note-----

In the first example, since Vivek can choose only integers from $1$ to $1$, he will have $a=[1]$ after the first append operation, and after that quit the algorithm. Hence the length of $a$ is always $1$, so its expected value is $1$ as well.

In the second example, Vivek each time will append either $1$ or $2$, so after finishing the algorithm he will end up having some number of $2$'s (possibly zero), and a single $1$ in the end. The expected length of the list is $1\cdot \frac{1}{2} + 2\cdot \frac{1}{2^2} + 3\cdot \frac{1}{2^3} + \ldots = 2$.","MOD = 10**9 + 7

def mod_inv(a, p):
    return pow(a, p - 2, p)

def expected_length(m):
    if m == 1:
        return 1
    
    # Calculate the sum of lengths
    length_sum = 0
    for i in range(1, m + 1):
        length_sum += mod_inv(i, MOD)
        length_sum %= MOD
    
    # The expected length is m * length_sum % MOD
    result = (m * length_sum) % MOD
    
    return result

# Read input
m = int(input().strip())

# Print the result
print(expected_length(m))
",1,False,True,False,True,True,True,True,False,True,False,True,True,True,80_gpt-4o,0.8170618896931411,0.357067949502515,0.6666666666666666
83,apps,gpt-4o,qwen2.5-7b-instruct,"Noora is a student of one famous high school. It's her final year in school — she is going to study in university next year. However, she has to get an «A» graduation certificate in order to apply to a prestigious one.

In school, where Noora is studying, teachers are putting down marks to the online class register, which are integers from 1 to k. The worst mark is 1, the best is k. Mark that is going to the certificate, is calculated as an average of all the marks, rounded to the closest integer. If several answers are possible, rounding up is produced. For example, 7.3 is rounded to 7, but 7.5 and 7.8784 — to 8. 

For instance, if Noora has marks [8, 9], then the mark to the certificate is 9, because the average is equal to 8.5 and rounded to 9, but if the marks are [8, 8, 9], Noora will have graduation certificate with 8.

To graduate with «A» certificate, Noora has to have mark k.

Noora got n marks in register this year. However, she is afraid that her marks are not enough to get final mark k. Noora decided to ask for help in the internet, where hacker Leha immediately responded to her request. He is ready to hack class register for Noora and to add Noora any number of additional marks from 1 to k. At the same time, Leha want his hack be unseen to everyone, so he decided to add as less as possible additional marks. Please help Leha to calculate the minimal number of marks he has to add, so that final Noora's mark will become equal to k.


-----Input-----

The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100) denoting the number of marks, received by Noora and the value of highest possible mark.

The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ k) denoting marks received by Noora before Leha's hack.


-----Output-----

Print a single integer — minimal number of additional marks, that Leha has to add in order to change Noora's final mark to k.


-----Examples-----
Input
2 10
8 9

Output
4
Input
3 5
4 4 4

Output
3


-----Note-----

Consider the first example testcase.

Maximal mark is 10, Noora received two marks — 8 and 9, so current final mark is 9. To fix it, Leha can add marks [10, 10, 10, 10] (4 marks in total) to the registry, achieving Noora having average mark equal to $\frac{8 + 9 + 10 + 10 + 10 + 10}{6} = \frac{57}{6} = 9.5$. Consequently, new final mark is 10. Less number of marks won't fix the situation.

In the second example Leha can add [5, 5, 5] to the registry, so that making average mark equal to 4.5, which is enough to have 5 in the certificate.","import math

# Read the input values
n, k = map(int, input().split())
marks = list(map(int, input().split()))

# Calculate the current sum of marks and the number of marks
current_sum = sum(marks)
current_count = n

# Iterate to find the minimum number of additional marks needed
while True:
    # Calculate the average with the current sum and count
    current_average = current_sum / current_count
    
    # If the average rounded up is at least 'k', we have our answer
    if math.ceil(current_average) >= k:
        print(current_count - n)
        break
    
    # Otherwise, add a maximum mark (k) and continue
    current_sum += k
    current_count += 1
",1,False,False,False,True,True,True,True,False,True,False,False,True,False,83_gpt-4o,0.6289508873084628,0.13086072969025705,0.5416666666666666
114,apps,gpt-4o,qwen2.5-7b-instruct,"For a given positive integer n denote its k-rounding as the minimum positive integer x, such that x ends with k or more zeros in base 10 and is divisible by n.

For example, 4-rounding of 375 is 375·80 = 30000. 30000 is the minimum integer such that it ends with 4 or more zeros and is divisible by 375.

Write a program that will perform the k-rounding of n.


-----Input-----

The only line contains two integers n and k (1 ≤ n ≤ 10^9, 0 ≤ k ≤ 8).


-----Output-----

Print the k-rounding of n.


-----Examples-----
Input
375 4

Output
30000

Input
10000 1

Output
10000

Input
38101 0

Output
38101

Input
123456789 8

Output
12345678900000000","import math

def k_rounding(n, k):
    # Calculate the minimum number that ends with at least k zeros
    multiplier = 10**k
    # Find the smallest number x that is a multiple of n and also ends with k zeros
    x = (n * (multiplier // math.gcd(n, multiplier)))
    return x

# Read input
n, k = map(int, input().split())
# Print the k-rounding of n
print(k_rounding(n, k))
",1,True,False,False,True,True,True,True,True,True,True,True,True,True,114_gpt-4o,0.7668295849005334,0.2842287752455744,0.7083333333333334
119,apps,gpt-4o,qwen2.5-7b-instruct,"Ted has a pineapple. This pineapple is able to bark like a bulldog! At time t (in seconds) it barks for the first time. Then every s seconds after it, it barks twice with 1 second interval. Thus it barks at times t, t + s, t + s + 1, t + 2s, t + 2s + 1, etc.

 [Image] 

Barney woke up in the morning and wants to eat the pineapple, but he can't eat it when it's barking. Barney plans to eat it at time x (in seconds), so he asked you to tell him if it's gonna bark at that time.


-----Input-----

The first and only line of input contains three integers t, s and x (0 ≤ t, x ≤ 10^9, 2 ≤ s ≤ 10^9) — the time the pineapple barks for the first time, the pineapple barking interval, and the time Barney wants to eat the pineapple respectively.


-----Output-----

Print a single ""YES"" (without quotes) if the pineapple will bark at time x or a single ""NO"" (without quotes) otherwise in the only line of output.


-----Examples-----
Input
3 10 4

Output
NO

Input
3 10 3

Output
YES

Input
3 8 51

Output
YES

Input
3 8 52

Output
YES



-----Note-----

In the first and the second sample cases pineapple will bark at moments 3, 13, 14, ..., so it won't bark at the moment 4 and will bark at the moment 3.

In the third and fourth sample cases pineapple will bark at moments 3, 11, 12, 19, 20, 27, 28, 35, 36, 43, 44, 51, 52, 59, ..., so it will bark at both moments 51 and 52.","t, s, x = map(int, input().split())

if x == t:
    print(""YES"")
elif x > t:
    if (x - t) % s == 0:
        print(""YES"")
    elif (x - t - 1) % s == 0 and x != t + 1:
        print(""YES"")
    else:
        print(""NO"")
else:
    print(""NO"")
",1,True,False,False,False,True,True,True,True,True,True,True,True,True,119_gpt-4o,0.9099317296650239,0.5192803519432471,0.75
121,apps,gpt-4o,qwen2.5-7b-instruct,"The process of mammoth's genome decoding in Berland comes to its end!

One of the few remaining tasks is to restore unrecognized nucleotides in a found chain s. Each nucleotide is coded with a capital letter of English alphabet: 'A', 'C', 'G' or 'T'. Unrecognized nucleotides are coded by a question mark '?'. Thus, s is a string consisting of letters 'A', 'C', 'G', 'T' and characters '?'.

It is known that the number of nucleotides of each of the four types in the decoded genome of mammoth in Berland should be equal.

Your task is to decode the genome and replace each unrecognized nucleotide with one of the four types so that the number of nucleotides of each of the four types becomes equal.


-----Input-----

The first line contains the integer n (4 ≤ n ≤ 255) — the length of the genome.

The second line contains the string s of length n — the coded genome. It consists of characters 'A', 'C', 'G', 'T' and '?'.


-----Output-----

If it is possible to decode the genome, print it. If there are multiple answer, print any of them. If it is not possible, print three equals signs in a row: ""==="" (without quotes).


-----Examples-----
Input
8
AG?C??CT

Output
AGACGTCT

Input
4
AGCT

Output
AGCT

Input
6
????G?

Output
===

Input
4
AA??

Output
===



-----Note-----

In the first example you can replace the first question mark with the letter 'A', the second question mark with the letter 'G', the third question mark with the letter 'T', then each nucleotide in the genome would be presented twice.

In the second example the genome is already decoded correctly and each nucleotide is exactly once in it.

In the third and the fourth examples it is impossible to decode the genom.","def decode_genome():
    import sys
    input = sys.stdin.read
    data = input().split()

    n = int(data[0])
    s = data[1]

    if n % 4 != 0:
        print(""==="")
        return

    target_count = n // 4
    counts = {'A': 0, 'C': 0, 'G': 0, 'T': 0}

    for char in s:
        if char in counts:
            counts[char] += 1

    for char in counts:
        if counts[char] > target_count:
            print(""==="")
            return

    result = list(s)

    for i in range(n):
        if result[i] == '?':
            for char in counts:
                if counts[char] < target_count:
                    result[i] = char
                    counts[char] += 1
                    break

    print("""".join(result))

decode_genome()
",1,True,False,False,True,True,True,True,True,False,False,True,False,True,121_gpt-4o,0.8829629651433227,0.46218251669300164,0.75
126,apps,gpt-4o,qwen2.5-7b-instruct,"Sagheer is walking in the street when he comes to an intersection of two roads. Each road can be represented as two parts where each part has 3 lanes getting into the intersection (one for each direction) and 3 lanes getting out of the intersection, so we have 4 parts in total. Each part has 4 lights, one for each lane getting into the intersection (l — left, s — straight, r — right) and a light p for a pedestrian crossing.  [Image] 

An accident is possible if a car can hit a pedestrian. This can happen if the light of a pedestrian crossing of some part and the light of a lane that can get to or from that same part are green at the same time.

Now, Sagheer is monitoring the configuration of the traffic lights. Your task is to help him detect whether an accident is possible.


-----Input-----

The input consists of four lines with each line describing a road part given in a counter-clockwise order.

Each line contains four integers l, s, r, p — for the left, straight, right and pedestrian lights, respectively. The possible values are 0 for red light and 1 for green light.


-----Output-----

On a single line, print ""YES"" if an accident is possible, and ""NO"" otherwise.


-----Examples-----
Input
1 0 0 1
0 1 0 0
0 0 1 0
0 0 0 1

Output
YES

Input
0 1 1 0
1 0 1 0
1 1 0 0
0 0 0 1

Output
NO

Input
1 0 0 0
0 0 0 1
0 0 0 0
1 0 1 0

Output
NO



-----Note-----

In the first example, some accidents are possible because cars of part 1 can hit pedestrians of parts 1 and 4. Also, cars of parts 2 and 3 can hit pedestrians of part 4.

In the second example, no car can pass the pedestrian crossing of part 4 which is the only green pedestrian light. So, no accident can occur.","# Reading input
traffic_lights = []
for _ in range(4):
    traffic_lights.append(list(map(int, input().split())))

# Check for possible accidents
accident_possible = False
for i in range(4):
    l, s, r, p = traffic_lights[i]
    if p == 1:
        # Check if any vehicle light in the same part is green
        if l == 1 or s == 1 or r == 1:
            accident_possible = True
            break
        # Check if any vehicle light in the corresponding parts is green
        for j in range(3):
            if traffic_lights[(i + j) % 4][j] == 1:
                accident_possible = True
                break
        if accident_possible:
            break

# Output the result
if accident_possible:
    print(""YES"")
else:
    print(""NO"")
",1,False,False,True,True,True,True,True,False,True,True,False,True,True,126_gpt-4o,0.8315221560314535,0.37860202468904464,0.6666666666666666
136,apps,gpt-4o,qwen2.5-7b-instruct,"Imp is watching a documentary about cave painting. [Image] 

Some numbers, carved in chaotic order, immediately attracted his attention. Imp rapidly proposed a guess that they are the remainders of division of a number n by all integers i from 1 to k. Unfortunately, there are too many integers to analyze for Imp.

Imp wants you to check whether all these remainders are distinct. Formally, he wants to check, if all $n \text{mod} i$, 1 ≤ i ≤ k, are distinct, i. e. there is no such pair (i, j) that:   1 ≤ i < j ≤ k,  $n \operatorname{mod} i = n \operatorname{mod} j$, where $x \operatorname{mod} y$ is the remainder of division x by y. 


-----Input-----

The only line contains two integers n, k (1 ≤ n, k ≤ 10^18).


-----Output-----

Print ""Yes"", if all the remainders are distinct, and ""No"" otherwise.

You can print each letter in arbitrary case (lower or upper).


-----Examples-----
Input
4 4

Output
No

Input
5 3

Output
Yes



-----Note-----

In the first sample remainders modulo 1 and 4 coincide.","n, k = map(int, input().split())

def are_remainders_distinct(n, k):
    # For k >= n, there will always be non-distinct remainders
    if k >= n:
        return ""No""
    
    # For k < n, we'll check for remainders
    seen_remainders = set()
    for i in range(1, k + 1):
        remainder = n % i
        if remainder in seen_remainders:
            return ""No""
        seen_remainders.add(remainder)
    
    return ""Yes""

print(are_remainders_distinct(n, k))
",1,False,True,True,True,True,True,True,True,True,True,True,True,True,136_gpt-4o,0.7939507410280228,0.32340413258344014,0.625
147,apps,gpt-4o,qwen2.5-7b-instruct,"This morning, Roman woke up and opened the browser with $n$ opened tabs numbered from $1$ to $n$. There are two kinds of tabs: those with the information required for the test and those with social network sites. Roman decided that there are too many tabs open so he wants to close some of them.

He decided to accomplish this by closing every $k$-th ($2 \leq k \leq n - 1$) tab. Only then he will decide whether he wants to study for the test or to chat on the social networks. Formally, Roman will choose one tab (let its number be $b$) and then close all tabs with numbers $c = b + i \cdot k$ that satisfy the following condition: $1 \leq c \leq n$ and $i$ is an integer (it may be positive, negative or zero).

For example, if $k = 3$, $n = 14$ and Roman chooses $b = 8$, then he will close tabs with numbers $2$, $5$, $8$, $11$ and $14$.

After closing the tabs Roman will calculate the amount of remaining tabs with the information for the test (let's denote it $e$) and the amount of remaining social network tabs ($s$). Help Roman to calculate the maximal absolute value of the difference of those values $|e - s|$ so that it would be easy to decide what to do next.


-----Input-----

The first line contains two integers $n$ and $k$ ($2 \leq k < n \leq 100$) — the amount of tabs opened currently and the distance between the tabs closed.

The second line consists of $n$ integers, each of them equal either to $1$ or to $-1$. The $i$-th integer denotes the type of the $i$-th tab: if it is equal to $1$, this tab contains information for the test, and if it is equal to $-1$, it's a social network tab.


-----Output-----

Output a single integer — the maximum absolute difference between the amounts of remaining tabs of different types $|e - s|$.


-----Examples-----
Input
4 2
1 1 -1 1

Output
2

Input
14 3
-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1

Output
9



-----Note-----

In the first example we can choose $b = 1$ or $b = 3$. We will delete then one tab of each type and the remaining tabs are then all contain test information. Thus, $e = 2$ and $s = 0$ and $|e - s| = 2$.

In the second example, on the contrary, we can leave opened only tabs that have social networks opened in them.","# Read input values
n, k = map(int, input().split())
tab_types = list(map(int, input().split()))

# Function to calculate remaining tabs after closing every k-th tab starting from b
def calculate_remaining_tabs(b):
    remaining_tabs = tab_types[:]
    for i in range(b, n, k):
        remaining_tabs[i] = 0
    for i in range(b, -1, -k):
        remaining_tabs[i] = 0
    return remaining_tabs

max_diff = 0

# Iterate over each possible starting tab b
for b in range(n):
    remaining_tabs = calculate_remaining_tabs(b)
    e = remaining_tabs.count(1)
    s = remaining_tabs.count(-1)
    max_diff = max(max_diff, abs(e - s))

# Output the maximum absolute difference
print(max_diff)
",1,True,False,False,False,True,False,True,True,True,True,True,True,False,147_gpt-4o,0.7238859101010041,0.22752781190837426,0.7083333333333334
152,apps,gpt-4o,qwen2.5-7b-instruct,"Beroffice text editor has a wide range of features that help working with text. One of the features is an automatic search for typos and suggestions of how to fix them.

Beroffice works only with small English letters (i.e. with 26 letters from a to z). Beroffice thinks that a word is typed with a typo if there are three or more consonants in a row in the word. The only exception is that if the block of consonants has all letters the same, then this block (even if its length is greater than three) is not considered a typo. Formally, a word is typed with a typo if there is a block of not less that three consonants in a row, and there are at least two different letters in this block.

For example:

  the following words have typos: ""hellno"", ""hackcerrs"" and ""backtothefutttture"";  the following words don't have typos: ""helllllooooo"", ""tobeornottobe"" and ""oooooo"". 

When Beroffice editor finds a word with a typo, it inserts as little as possible number of spaces in this word (dividing it into several words) in such a way that each of the resulting words is typed without any typos.

Implement this feature of Beroffice editor. Consider the following letters as the only vowels: 'a', 'e', 'i', 'o' and 'u'. All the other letters are consonants in this problem.


-----Input-----

The only line contains a non-empty word consisting of small English letters. The length of the word is between 1 and 3000 letters.


-----Output-----

Print the given word without any changes if there are no typos.

If there is at least one typo in the word, insert the minimum number of spaces into the word so that each of the resulting words doesn't have any typos. If there are multiple solutions, print any of them.


-----Examples-----
Input
hellno

Output
hell no 

Input
abacaba

Output
abacaba 

Input
asdfasdf

Output
asd fasd f","def is_vowel(c):
    return c in 'aeiou'

def has_typo(block):
    if len(block) < 3:
        return False
    first_consonant = block[0]
    for c in block:
        if c != first_consonant:
            return True
    return False

def correct_typo(word):
    n = len(word)
    result = []
    i = 0

    while i < n:
        start = i
        while i < n and not is_vowel(word[i]):
            i += 1
        if i - start >= 3 and has_typo(word[start:i]):
            result.append(word[start:start+2])
            start += 2
            while start < i:
                result.append(word[start:start+1])
                start += 1
        else:
            result.append(word[start:i])
        while i < n and is_vowel(word[i]):
            i += 1
        result.append(word[start:i])
        
    return ' '.join(result)

if __name__ == ""__main__"":
    word = input().strip()
    print(correct_typo(word))
",1,False,False,False,False,True,False,False,False,True,False,False,False,True,152_gpt-4o,0.8217422082576146,0.34996159676955946,0.5833333333333334
153,apps,gpt-4o,qwen2.5-7b-instruct,"Anton is playing a very interesting computer game, but now he is stuck at one of the levels. To pass to the next level he has to prepare n potions.

Anton has a special kettle, that can prepare one potions in x seconds. Also, he knows spells of two types that can faster the process of preparing potions.  Spells of this type speed up the preparation time of one potion. There are m spells of this type, the i-th of them costs b_{i} manapoints and changes the preparation time of each potion to a_{i} instead of x.  Spells of this type immediately prepare some number of potions. There are k such spells, the i-th of them costs d_{i} manapoints and instantly create c_{i} potions. 

Anton can use no more than one spell of the first type and no more than one spell of the second type, and the total number of manapoints spent should not exceed s. Consider that all spells are used instantly and right before Anton starts to prepare potions.

Anton wants to get to the next level as fast as possible, so he is interested in the minimum number of time he needs to spent in order to prepare at least n potions.


-----Input-----

The first line of the input contains three integers n, m, k (1 ≤ n ≤ 2·10^9, 1 ≤ m, k ≤ 2·10^5) — the number of potions, Anton has to make, the number of spells of the first type and the number of spells of the second type.

The second line of the input contains two integers x and s (2 ≤ x ≤ 2·10^9, 1 ≤ s ≤ 2·10^9) — the initial number of seconds required to prepare one potion and the number of manapoints Anton can use.

The third line contains m integers a_{i} (1 ≤ a_{i} < x) — the number of seconds it will take to prepare one potion if the i-th spell of the first type is used.

The fourth line contains m integers b_{i} (1 ≤ b_{i} ≤ 2·10^9) — the number of manapoints to use the i-th spell of the first type.

There are k integers c_{i} (1 ≤ c_{i} ≤ n) in the fifth line — the number of potions that will be immediately created if the i-th spell of the second type is used. It's guaranteed that c_{i} are not decreasing, i.e. c_{i} ≤ c_{j} if i < j.

The sixth line contains k integers d_{i} (1 ≤ d_{i} ≤ 2·10^9) — the number of manapoints required to use the i-th spell of the second type. It's guaranteed that d_{i} are not decreasing, i.e. d_{i} ≤ d_{j} if i < j.


-----Output-----

Print one integer — the minimum time one has to spent in order to prepare n potions.


-----Examples-----
Input
20 3 2
10 99
2 4 3
20 10 40
4 15
10 80

Output
20

Input
20 3 2
10 99
2 4 3
200 100 400
4 15
100 800

Output
200



-----Note-----

In the first sample, the optimum answer is to use the second spell of the first type that costs 10 manapoints. Thus, the preparation time of each potion changes to 4 seconds. Also, Anton should use the second spell of the second type to instantly prepare 15 potions spending 80 manapoints. The total number of manapoints used is 10 + 80 = 90, and the preparation time is 4·5 = 20 seconds (15 potions were prepared instantly, and the remaining 5 will take 4 seconds each).

In the second sample, Anton can't use any of the spells, so he just prepares 20 potions, spending 10 seconds on each of them and the answer is 20·10 = 200.","def min_time_to_prepare_potions(n, m, k, x, s, a, b, c, d):
    min_time = n * x

    # Try using only the second type of spell
    for i in range(k):
        if d[i] <= s:
            remaining_potions = max(0, n - c[i])
            time_with_spell = remaining_potions * x
            min_time = min(min_time, time_with_spell)
    
    # Try using only the first type of spell
    for i in range(m):
        if b[i] <= s:
            time_with_spell = n * a[i]
            min_time = min(min_time, time_with_spell)

    # Try using both types of spells
    for i in range(m):
        if b[i] <= s:
            remaining_manapoints = s - b[i]
            for j in range(k):
                if d[j] <= remaining_manapoints:
                    remaining_potions = max(0, n - c[j])
                    time_with_both_spells = remaining_potions * a[i]
                    min_time = min(min_time, time_with_both_spells)
                else:
                    break

    return min_time

if __name__ == ""__main__"":
    import sys
    input = sys.stdin.read
    data = input().split()
    
    n = int(data[0])
    m = int(data[1])
    k = int(data[2])
    x = int(data[3])
    s = int(data[4])
    
    a = list(map(int, data[5:5+m]))
    b = list(map(int, data[5+m:5+2*m]))
    c = list(map(int, data[5+2*m:5+2*m+k]))
    d = list(map(int, data[5+2*m+k:5+2*m+2*k]))

    result = min_time_to_prepare_potions(n, m, k, x, s, a, b, c, d)
    print(result)
",1,True,False,False,True,True,True,True,True,True,False,False,False,False,153_gpt-4o,0.6678398532199493,0.17407609562715398,0.5833333333333334
159,apps,gpt-4o,qwen2.5-7b-instruct,"Berland annual chess tournament is coming!

Organizers have gathered 2·n chess players who should be divided into two teams with n people each. The first team is sponsored by BerOil and the second team is sponsored by BerMobile. Obviously, organizers should guarantee the win for the team of BerOil.

Thus, organizers should divide all 2·n players into two teams with n people each in such a way that the first team always wins.

Every chess player has its rating r_{i}. It is known that chess player with the greater rating always wins the player with the lower rating. If their ratings are equal then any of the players can win.

After teams assignment there will come a drawing to form n pairs of opponents: in each pair there is a player from the first team and a player from the second team. Every chess player should be in exactly one pair. Every pair plays once. The drawing is totally random.

Is it possible to divide all 2·n players into two teams with n people each so that the player from the first team in every pair wins regardless of the results of the drawing?


-----Input-----

The first line contains one integer n (1 ≤ n ≤ 100).

The second line contains 2·n integers a_1, a_2, ... a_2n (1 ≤ a_{i} ≤ 1000).


-----Output-----

If it's possible to divide all 2·n players into two teams with n people each so that the player from the first team in every pair wins regardless of the results of the drawing, then print ""YES"". Otherwise print ""NO"".


-----Examples-----
Input
2
1 3 2 4

Output
YES

Input
1
3 3

Output
NO","# Read input
n = int(input())
ratings = list(map(int, input().split()))

# Sort the ratings
ratings.sort()

# Split the sorted ratings into two teams
team1 = ratings[:n]
team2 = ratings[n:]

# Check if every player in team1 has a higher rating than every player in team2
possible = all(team1[i] < team2[i] for i in range(n))

# Output the result
if possible:
    print(""YES"")
else:
    print(""NO"")
",1,False,False,True,True,True,True,True,False,True,True,True,False,True,159_gpt-4o,0.5495298594419469,0.048886123808425795,0.5833333333333334
162,apps,gpt-4o,qwen2.5-7b-instruct,"Cat Furrier Transform is a popular algorithm among cat programmers to create longcats. As one of the greatest cat programmers ever exist, Neko wants to utilize this algorithm to create the perfect longcat.

Assume that we have a cat with a number $x$. A perfect longcat is a cat with a number equal $2^m - 1$ for some non-negative integer $m$. For example, the numbers $0$, $1$, $3$, $7$, $15$ and so on are suitable for the perfect longcats.

In the Cat Furrier Transform, the following operations can be performed on $x$:  (Operation A): you select any non-negative integer $n$ and replace $x$ with $x \oplus (2^n - 1)$, with $\oplus$ being a bitwise XOR operator. (Operation B): replace $x$ with $x + 1$. 

The first applied operation must be of type A, the second of type B, the third of type A again, and so on. Formally, if we number operations from one in the order they are executed, then odd-numbered operations must be of type A and the even-numbered operations must be of type B.

Neko wants to produce perfect longcats at industrial scale, thus for each cat Neko only wants to perform at most $40$ operations. Can you help Neko writing a transformation plan?

Note that it is not required to minimize the number of operations. You just need to use no more than $40$ operations.


-----Input-----

The only line contains a single integer $x$ ($1 \le x \le 10^6$).


-----Output-----

The first line should contain a single integer $t$ ($0 \le t \le 40$) — the number of operations to apply.

Then for each odd-numbered operation print the corresponding number $n_i$ in it. That is, print $\lceil \frac{t}{2} \rceil$ integers $n_i$ ($0 \le n_i \le 30$), denoting the replacement $x$ with $x \oplus (2^{n_i} - 1)$ in the corresponding step.

If there are multiple possible answers, you can print any of them. It is possible to show, that there is at least one answer in the constraints of this problem.


-----Examples-----
Input
39

Output
4
5 3 
Input
1

Output
0

Input
7

Output
0



-----Note-----

In the first test, one of the transforms might be as follows: $39 \to 56 \to 57 \to 62 \to 63$. Or more precisely: Pick $n = 5$. $x$ is transformed into $39 \oplus 31$, or $56$.  Increase $x$ by $1$, changing its value to $57$.  Pick $n = 3$. $x$ is transformed into $57 \oplus 7$, or $62$.  Increase $x$ by $1$, changing its value to $63 = 2^6 - 1$. 

In the second and third test, the number already satisfies the goal requirement.","def is_perfect_longcat(x):
    # Check if x is of the form 2^m - 1
    return (x & (x + 1)) == 0

def find_transform(x):
    operations = []
    count = 0
    while not is_perfect_longcat(x) and count < 40:
        if count % 2 == 0:
            # Operation A
            n = 0
            while (1 << n) - 1 <= x:
                n += 1
            # Find the highest bit position with 0
            while n > 0 and ((x >> (n - 1)) & 1) == 1:
                n -= 1
            if n == 0:
                break
            operations.append(n)
            x ^= (1 << n) - 1
        else:
            # Operation B
            x += 1
        count += 1
    
    return count, operations

# Read input
x = int(input())

t, ops = find_transform(x)

print(t)
for i in range(0, len(ops), 2):
    print(ops[i], end=' ')
",1,False,False,False,True,False,False,True,True,True,True,True,False,False,162_gpt-4o,0.8464195983686785,0.4031727745421858,0.7083333333333334
165,apps,gpt-4o,qwen2.5-7b-instruct,"It's a beautiful April day and Wallace is playing football with his friends. But his friends do not know that Wallace actually stayed home with Gromit and sent them his robotic self instead. Robo-Wallace has several advantages over the other guys. For example, he can hit the ball directly to the specified point. And yet, the notion of a giveaway is foreign to him. The combination of these features makes the Robo-Wallace the perfect footballer — as soon as the ball gets to him, he can just aim and hit the goal. He followed this tactics in the first half of the match, but he hit the goal rarely. The opposing team has a very good goalkeeper who catches most of the balls that fly directly into the goal. But Robo-Wallace is a quick thinker, he realized that he can cheat the goalkeeper. After all, they are playing in a football box with solid walls. Robo-Wallace can kick the ball to the other side, then the goalkeeper will not try to catch the ball. Then, if the ball bounces off the wall and flies into the goal, the goal will at last be scored.

Your task is to help Robo-Wallace to detect a spot on the wall of the football box, to which the robot should kick the ball, so that the ball bounces once and only once off this wall and goes straight to the goal. In the first half of the match Robo-Wallace got a ball in the head and was severely hit. As a result, some of the schemes have been damaged. Because of the damage, Robo-Wallace can only aim to his right wall (Robo-Wallace is standing with his face to the opposing team's goal).

The football box is rectangular. Let's introduce a two-dimensional coordinate system so that point (0, 0) lies in the lower left corner of the field, if you look at the box above. Robo-Wallace is playing for the team, whose goal is to the right. It is an improvised football field, so the gate of Robo-Wallace's rivals may be not in the middle of the left wall. [Image] 

In the given coordinate system you are given:   y_1, y_2 — the y-coordinates of the side pillars of the goalposts of robo-Wallace's opponents;  y_{w} — the y-coordinate of the wall to which Robo-Wallace is aiming;  x_{b}, y_{b} — the coordinates of the ball's position when it is hit;  r — the radius of the ball. 

A goal is scored when the center of the ball crosses the OY axis in the given coordinate system between (0, y_1) and (0, y_2). The ball moves along a straight line. The ball's hit on the wall is perfectly elastic (the ball does not shrink from the hit), the angle of incidence equals the angle of reflection. If the ball bounces off the wall not to the goal, that is, if it hits the other wall or the goal post, then the opposing team catches the ball and Robo-Wallace starts looking for miscalculation and gets dysfunctional. Such an outcome, if possible, should be avoided. We assume that the ball touches an object, if the distance from the center of the ball to the object is no greater than the ball radius r.


-----Input-----

The first and the single line contains integers y_1, y_2, y_{w}, x_{b}, y_{b}, r (1 ≤ y_1, y_2, y_{w}, x_{b}, y_{b} ≤ 10^6; y_1 < y_2 < y_{w}; y_{b} + r < y_{w}; 2·r < y_2 - y_1).

It is guaranteed that the ball is positioned correctly in the field, doesn't cross any wall, doesn't touch the wall that Robo-Wallace is aiming at. The goal posts can't be located in the field corners.


-----Output-----

If Robo-Wallace can't score a goal in the described manner, print ""-1"" (without the quotes). Otherwise, print a single number x_{w} — the abscissa of his point of aiming. 

If there are multiple points of aiming, print the abscissa of any of them. When checking the correctness of the answer, all comparisons are made with the permissible absolute error, equal to 10^{ - 8}. 

It is recommended to print as many characters after the decimal point as possible.


-----Examples-----
Input
4 10 13 10 3 1

Output
4.3750000000

Input
1 4 6 2 2 1

Output
-1

Input
3 10 15 17 9 2

Output
11.3333333333



-----Note-----

Note that in the first and third samples other correct values of abscissa x_{w} are also possible.","def find_aiming_point(y1, y2, yw, xb, yb, r):
    # Boundary conditions check
    if yb + r >= yw or y1 >= y2 or y1 + r >= y2 - r:
        return -1

    # Calculate the intersection point on the right wall
    # Using the geometry and reflection properties
    # The goal is to find the x_w such that the ball bounces and hits the goal
    
    # Using the fact that the reflection point must maintain the property of the line
    # We use the formula derived from the reflection geometry
    # slope = (yb - y_w) / (xb - x_w)
    # reflected_slope = (y_w - goal_y) / (x_w)
    
    # Choose a point on the goal line within the goal range
    y_goal_mid = (y1 + y2) / 2
    if y_goal_mid - r < y1 or y_goal_mid + r > y2:
        return -1

    # Calculate x_w
    x_w = xb - (2 * (yb - y_goal_mid) * (xb - 0)) / (y_goal_mid - yb)
    
    if x_w <= 0:
        return -1

    return x_w

# Read input
import sys
input = sys.stdin.read
data = input().strip().split()

y1 = int(data[0])
y2 = int(data[1])
yw = int(data[2])
xb = int(data[3])
yb = int(data[4])
r = int(data[5])

# Calculate the result
result = find_aiming_point(y1, y2, yw, xb, yb, r)
if result == -1:
    print(result)
else:
    print(f""{result:.10f}"")
",1,False,False,False,True,True,True,True,True,True,True,True,True,False,165_gpt-4o,0.5836571653413781,0.08398384419307396,0.5833333333333334
166,apps,gpt-4o,qwen2.5-7b-instruct,"Vasiliy spent his vacation in a sanatorium, came back and found that he completely forgot details of his vacation! 

Every day there was a breakfast, a dinner and a supper in a dining room of the sanatorium (of course, in this order). The only thing that Vasiliy has now is a card from the dining room contaning notes how many times he had a breakfast, a dinner and a supper (thus, the card contains three integers). Vasiliy could sometimes have missed some meal, for example, he could have had a breakfast and a supper, but a dinner, or, probably, at some days he haven't been at the dining room at all.

Vasiliy doesn't remember what was the time of the day when he arrived to sanatorium (before breakfast, before dinner, before supper or after supper), and the time when he left it (before breakfast, before dinner, before supper or after supper). So he considers any of these options. After Vasiliy arrived to the sanatorium, he was there all the time until he left. Please note, that it's possible that Vasiliy left the sanatorium on the same day he arrived.

According to the notes in the card, help Vasiliy determine the minimum number of meals in the dining room that he could have missed. We shouldn't count as missed meals on the arrival day before Vasiliy's arrival and meals on the departure day after he left.


-----Input-----

The only line contains three integers b, d and s (0 ≤ b, d, s ≤ 10^18,  b + d + s ≥ 1) — the number of breakfasts, dinners and suppers which Vasiliy had during his vacation in the sanatorium. 


-----Output-----

Print single integer — the minimum possible number of meals which Vasiliy could have missed during his vacation. 


-----Examples-----
Input
3 2 1

Output
1


Input
1 0 0

Output
0


Input
1 1 1

Output
0


Input
1000000000000000000 0 1000000000000000000

Output
999999999999999999





-----Note-----

In the first sample, Vasiliy could have missed one supper, for example, in case he have arrived before breakfast, have been in the sanatorium for two days (including the day of arrival) and then have left after breakfast on the third day. 

In the second sample, Vasiliy could have arrived before breakfast, have had it, and immediately have left the sanatorium, not missing any meal.

In the third sample, Vasiliy could have been in the sanatorium for one day, not missing any meal.","b, d, s = map(int, input().split())

# Find the maximum number of meals taken in any category
max_meals = max(b, d, s)

# Calculate the potential missed meals for each category
missed_b = max(0, max_meals - 1 - b)
missed_d = max(0, max_meals - 1 - d)
missed_s = max(0, max_meals - 1 - s)

# The total number of missed meals is the sum of missed meals in each category
total_missed_meals = missed_b + missed_d + missed_s

print(total_missed_meals)
",1,True,False,False,True,True,False,True,True,False,True,False,False,True,166_gpt-4o,0.8860276206871581,0.4730215616498261,0.75
170,apps,gpt-4o,qwen2.5-7b-instruct,"Kolya Gerasimov loves kefir very much. He lives in year 1984 and knows all the details of buying this delicious drink. One day, as you probably know, he found himself in year 2084, and buying kefir there is much more complicated.

Kolya is hungry, so he went to the nearest milk shop. In 2084 you may buy kefir in a plastic liter bottle, that costs a rubles, or in glass liter bottle, that costs b rubles. Also, you may return empty glass bottle and get c (c < b) rubles back, but you cannot return plastic bottles.

Kolya has n rubles and he is really hungry, so he wants to drink as much kefir as possible. There were no plastic bottles in his 1984, so Kolya doesn't know how to act optimally and asks for your help.


-----Input-----

First line of the input contains a single integer n (1 ≤ n ≤ 10^18) — the number of rubles Kolya has at the beginning.

Then follow three lines containing integers a, b and c (1 ≤ a ≤ 10^18, 1 ≤ c < b ≤ 10^18) — the cost of one plastic liter bottle, the cost of one glass liter bottle and the money one can get back by returning an empty glass bottle, respectively.


-----Output-----

Print the only integer — maximum number of liters of kefir, that Kolya can drink.


-----Examples-----
Input
10
11
9
8

Output
2

Input
10
5
6
1

Output
2



-----Note-----

In the first sample, Kolya can buy one glass bottle, then return it and buy one more glass bottle. Thus he will drink 2 liters of kefir.

In the second sample, Kolya can buy two plastic bottle and get two liters of kefir, or he can buy one liter glass bottle, then return it and buy one plastic bottle. In both cases he will drink two liters of kefir.","n = int(input())
a = int(input())
b = int(input())
c = int(input())

if a <= b - c:
    # If plastic bottle is cheaper or same as effective cost of glass bottle
    print(n // a)
else:
    # Use as many rubles as possible to buy and return glass bottles
    k = (n - b) // (b - c) + 1  # Max number of glass bottles that can be bought and returned
    remaining_rubles = n - k * (b - c)
    
    if remaining_rubles < b:
        # If remaining rubles are less than cost of one glass bottle, buy plastic bottles
        print(k + remaining_rubles // a)
    else:
        # Otherwise, buy one more glass bottle
        print(k + 1)
",1,False,False,True,True,True,True,True,True,True,True,False,False,True,170_gpt-4o,0.8439146449438588,0.39873453622229693,0.7083333333333334
175,apps,gpt-4o,qwen2.5-7b-instruct,"Implication is a function of two logical arguments, its value is false if and only if the value of the first argument is true and the value of the second argument is false. 

Implication is written by using character '$\rightarrow$', and the arguments and the result of the implication are written as '0' (false) and '1' (true). According to the definition of the implication: 

$0 \rightarrow 0 = 1$ 

$0 \rightarrow 1 = 1$

$1 \rightarrow 0 = 0$ 

$1 \rightarrow 1 = 1$

When a logical expression contains multiple implications, then when there are no brackets, it will be calculated from left to fight. For example,

$0 \rightarrow 0 \rightarrow 0 =(0 \rightarrow 0) \rightarrow 0 = 1 \rightarrow 0 = 0$. 

When there are brackets, we first calculate the expression in brackets. For example,

$0 \rightarrow(0 \rightarrow 0) = 0 \rightarrow 1 = 1$.

For the given logical expression $a_{1} \rightarrow a_{2} \rightarrow a_{3} \rightarrow \cdots \cdots a_{n}$ determine if it is possible to place there brackets so that the value of a logical expression is false. If it is possible, your task is to find such an arrangement of brackets.


-----Input-----

The first line contains integer n (1 ≤ n ≤ 100 000) — the number of arguments in a logical expression.

The second line contains n numbers a_1, a_2, ..., a_{n} ($a_{i} \in \{0,1 \}$), which means the values of arguments in the expression in the order they occur.


-----Output-----

Print ""NO"" (without the quotes), if it is impossible to place brackets in the expression so that its value was equal to 0.

Otherwise, print ""YES"" in the first line and the logical expression with the required arrangement of brackets in the second line.

The expression should only contain characters '0', '1', '-' (character with ASCII code 45), '>' (character with ASCII code 62), '(' and ')'. Characters '-' and '>' can occur in an expression only paired like that: (""->"") and represent implication. The total number of logical arguments (i.e. digits '0' and '1') in the expression must be equal to n. The order in which the digits follow in the expression from left to right must coincide with a_1, a_2, ..., a_{n}.

The expression should be correct. More formally, a correct expression is determined as follows:  Expressions ""0"", ""1"" (without the quotes) are correct.  If v_1, v_2 are correct, then v_1->v_2 is a correct expression.  If v is a correct expression, then (v) is a correct expression. 

The total number of characters in the resulting expression mustn't exceed 10^6.

If there are multiple possible answers, you are allowed to print any of them.


-----Examples-----
Input
4
0 1 1 0

Output
YES
(((0)->1)->(1->0))

Input
2
1 1

Output
NO

Input
1
0

Output
YES
0","# Read input
n = int(input())
a = list(map(int, input().split()))

# Check if there exists at least one '1' followed by a '0' in the list
if 0 in a and a[:a.index(0)].count(1) > 0:
    # It's possible to arrange brackets to make the expression false
    print(""YES"")
    result = []
    
    # Find the first 1 and the first 0 after that
    first_one_index = a.index(1)
    first_zero_index = a[first_one_index:].index(0) + first_one_index
    
    # Building the expression
    for i in range(first_one_index):
        result.append(str(a[i]) + ""->"")
    result.append(""("")
    for i in range(first_one_index, first_zero_index):
        result.append(str(a[i]) + ""->"")
    result.append(str(a[first_zero_index]))
    result.append("")"")
    for i in range(first_zero_index + 1, n):
        result.append(""->"" + str(a[i]))
    
    print("""".join(result))
else:
    # It's not possible to make the expression false
    print(""NO"")
",1,False,False,False,True,True,True,True,False,False,True,False,True,True,175_gpt-4o,0.8917077877383448,0.47535919109134644,0.7916666666666666
179,apps,gpt-4o,qwen2.5-7b-instruct,"A telephone number is a sequence of exactly $11$ digits such that its first digit is 8.

Vasya and Petya are playing a game. Initially they have a string $s$ of length $n$ ($n$ is odd) consisting of digits. Vasya makes the first move, then players alternate turns. In one move the player must choose a character and erase it from the current string. For example, if the current string 1121, after the player's move it may be 112, 111 or 121. The game ends when the length of string $s$ becomes 11. If the resulting string is a telephone number, Vasya wins, otherwise Petya wins.

You have to determine if Vasya has a winning strategy (that is, if Vasya can win the game no matter which characters Petya chooses during his moves).


-----Input-----

The first line contains one integer $n$ ($13 \le n < 10^5$, $n$ is odd) — the length of string $s$.

The second line contains the string $s$ ($|s| = n$) consisting only of decimal digits.


-----Output-----

If Vasya has a strategy that guarantees him victory, print YES.

Otherwise print NO.


-----Examples-----
Input
13
8380011223344

Output
YES

Input
15
807345619350641

Output
NO



-----Note-----

In the first example Vasya needs to erase the second character. Then Petya cannot erase a character from the remaining string 880011223344 so that it does not become a telephone number.

In the second example after Vasya's turn Petya can erase one character character 8. The resulting string can't be a telephone number, because there is no digit 8 at all.","# Read the length of the string
n = int(input().strip())

# Read the string itself
s = input().strip()

# Determine the number of moves each player will make
moves = (n - 11) // 2

# Count the number of occurrences of '8' in the first (n - 11) characters
count_8 = s[:n-11].count('8')

# Vasya wins if there are more '8's than the number of non-'8' characters Petya can remove
if count_8 > moves:
    print(""YES"")
else:
    print(""NO"")
",1,False,False,True,True,True,True,True,True,False,True,False,False,True,179_gpt-4o,0.6910845539229723,0.19841675305164583,0.5833333333333334
183,apps,gpt-4o,qwen2.5-7b-instruct,"Carl is a beginner magician. He has a blue, b violet and c orange magic spheres. In one move he can transform two spheres of the same color into one sphere of any other color. To make a spell that has never been seen before, he needs at least x blue, y violet and z orange spheres. Can he get them (possible, in multiple actions)?


-----Input-----

The first line of the input contains three integers a, b and c (0 ≤ a, b, c ≤ 1 000 000) — the number of blue, violet and orange spheres that are in the magician's disposal.

The second line of the input contains three integers, x, y and z (0 ≤ x, y, z ≤ 1 000 000) — the number of blue, violet and orange spheres that he needs to get.


-----Output-----

If the wizard is able to obtain the required numbers of spheres, print ""Yes"". Otherwise, print ""No"".


-----Examples-----
Input
4 4 0
2 1 2

Output
Yes

Input
5 6 1
2 7 2

Output
No

Input
3 3 3
2 2 2

Output
Yes



-----Note-----

In the first sample the wizard has 4 blue and 4 violet spheres. In his first action he can turn two blue spheres into one violet one. After that he will have 2 blue and 5 violet spheres. Then he turns 4 violet spheres into 2 orange spheres and he ends up with 2 blue, 1 violet and 2 orange spheres, which is exactly what he needs.","# Read input values
a, b, c = map(int, input().split())
x, y, z = map(int, input().split())

# Calculate the deficit/surplus for each color
deficit_blue = max(0, x - a)
deficit_violet = max(0, y - b)
deficit_orange = max(0, z - c)

# Calculate how many extra spheres we have
extra_blue = max(0, a - x)
extra_violet = max(0, b - y)
extra_orange = max(0, c - z)

# Each surplus sphere can potentially be used to create another sphere
# Transforming two surplus spheres into one needed sphere
# Thus, the number of effective extra spheres is half of the surplus count (integer division)
extra_spheres = (extra_blue // 2) + (extra_violet // 2) + (extra_orange // 2)

# Calculate the total deficit
total_deficit = deficit_blue + deficit_violet + deficit_orange

# Check if the total surplus is enough to cover the total deficit
if extra_spheres >= total_deficit:
    print(""Yes"")
else:
    print(""No"")
",1,True,False,False,True,True,True,True,False,False,True,False,False,False,183_gpt-4o,0.6821758530838687,0.18748886798468845,0.625
185,apps,gpt-4o,qwen2.5-7b-instruct,"You are at a water bowling training. There are l people who play with their left hand, r people, who play with their right hand, and a ambidexters, who can play with left or right hand.

The coach decided to form a team of even number of players, exactly half of the players should play with their right hand, and exactly half of the players should play with their left hand. One player should use only on of his hands.

Ambidexters play as well with their right hand as with their left hand. In the team, an ambidexter can play with their left hand, or with their right hand.

Please find the maximum possible size of the team, where equal number of players use their left and right hands, respectively.


-----Input-----

The only line contains three integers l, r and a (0 ≤ l, r, a ≤ 100) — the number of left-handers, the number of right-handers and the number of ambidexters at the training. 


-----Output-----

Print a single even integer — the maximum number of players in the team. It is possible that the team can only have zero number of players.


-----Examples-----
Input
1 4 2

Output
6

Input
5 5 5

Output
14

Input
0 2 0

Output
0



-----Note-----

In the first example you can form a team of 6 players. You should take the only left-hander and two ambidexters to play with left hand, and three right-handers to play with right hand. The only person left can't be taken into the team.

In the second example you can form a team of 14 people. You have to take all five left-handers, all five right-handers, two ambidexters to play with left hand and two ambidexters to play with right hand.","l, r, a = map(int, input().split())

# Step 1: Balance the number of left-handers and right-handers using ambidexters
# First, equalize l and r using ambidexters
if l < r:
    l += min(a, r - l)
    a -= min(a, r - l)
elif r < l:
    r += min(a, l - r)
    a -= min(a, l - r)

# Step 2: If there are still ambidexters left, they should be used in pairs
# Each pair of ambidexters can add 2 to the team, one for each side
max_team_size = l + r + (a // 2) * 2

# Ensure the team size is even
if max_team_size % 2 != 0:
    max_team_size -= 1

print(max_team_size)
",1,False,False,False,True,True,False,True,True,True,True,True,False,False,185_gpt-4o,0.8817607753852287,0.4611365399089565,0.75
193,apps,gpt-4o,qwen2.5-7b-instruct,"Memory is now interested in the de-evolution of objects, specifically triangles. He starts with an equilateral triangle of side length x, and he wishes to perform operations to obtain an equilateral triangle of side length y.

In a single second, he can modify the length of a single side of the current triangle such that it remains a non-degenerate triangle (triangle of positive area). At any moment of time, the length of each side should be integer.

What is the minimum number of seconds required for Memory to obtain the equilateral triangle of side length y?


-----Input-----

The first and only line contains two integers x and y (3 ≤ y < x ≤ 100 000) — the starting and ending equilateral triangle side lengths respectively.


-----Output-----

Print a single integer — the minimum number of seconds required for Memory to obtain the equilateral triangle of side length y if he starts with the equilateral triangle of side length x.


-----Examples-----
Input
6 3

Output
4

Input
8 5

Output
3

Input
22 4

Output
6



-----Note-----

In the first sample test, Memory starts with an equilateral triangle of side length 6 and wants one of side length 3. Denote a triangle with sides a, b, and c as (a, b, c). Then, Memory can do $(6,6,6) \rightarrow(6,6,3) \rightarrow(6,4,3) \rightarrow(3,4,3) \rightarrow(3,3,3)$.

In the second sample test, Memory can do $(8,8,8) \rightarrow(8,8,5) \rightarrow(8,5,5) \rightarrow(5,5,5)$.

In the third sample test, Memory can do: $(22,22,22) \rightarrow(7,22,22) \rightarrow(7,22,16) \rightarrow(7,10,16) \rightarrow(7,10,4) \rightarrow$

$(7,4,4) \rightarrow(4,4,4)$.","x, y = map(int, input().split())

# The minimum number of seconds required to transform the triangle of side length x to side length y
# can be computed as (x - y) / 2 plus the remainder when (x - y) is divided by 2.
# This is because we can decrease each side by 1 in each second, and for each decrease of 1, we can
# reduce the total side lengths by 3. So we need (x - y) // 2 steps to reduce two sides in each step
# and one additional step if there is a remainder.

print((x - y) // 2 + (x - y) % 2)
",1,False,False,False,False,True,False,False,True,False,False,False,False,False,193_gpt-4o,0.8516155705395227,0.4075143889266759,0.75
197,apps,gpt-4o,qwen2.5-7b-instruct,"Nastya received a gift on New Year — a magic wardrobe. It is magic because in the end of each month the number of dresses in it doubles (i.e. the number of dresses becomes twice as large as it is in the beginning of the month).

Unfortunately, right after the doubling the wardrobe eats one of the dresses (if any) with the 50% probability. It happens every month except the last one in the year. 

Nastya owns x dresses now, so she became interested in the expected number of dresses she will have in one year. Nastya lives in Byteland, so the year lasts for k + 1 months.

Nastya is really busy, so she wants you to solve this problem. You are the programmer, after all. Also, you should find the answer modulo 10^9 + 7, because it is easy to see that it is always integer.


-----Input-----

The only line contains two integers x and k (0 ≤ x, k ≤ 10^18), where x is the initial number of dresses and k + 1 is the number of months in a year in Byteland.


-----Output-----

In the only line print a single integer — the expected number of dresses Nastya will own one year later modulo 10^9 + 7.


-----Examples-----
Input
2 0

Output
4

Input
2 1

Output
7

Input
3 2

Output
21



-----Note-----

In the first example a year consists on only one month, so the wardrobe does not eat dresses at all.

In the second example after the first month there are 3 dresses with 50% probability and 4 dresses with 50% probability. Thus, in the end of the year there are 6 dresses with 50% probability and 8 dresses with 50% probability. This way the answer for this test is (6 + 8) / 2 = 7.","MOD = 10**9 + 7

def power_mod(base, exponent, mod):
    result = 1
    while exponent > 0:
        if exponent % 2 == 1:
            result = (result * base) % mod
        base = (base * base) % mod
        exponent //= 2
    return result

def expected_dresses(x, k):
    if x == 0:
        return 0
    # Calculate (2^(k+1) - 1) % MOD
    power = power_mod(2, k + 1, MOD)
    result = (x * (power - 1) % MOD) % MOD
    return result

# Read input
import sys
input = sys.stdin.read
x, k = map(int, input().split())

# Print the result
print(expected_dresses(x, k))
",1,False,False,False,True,True,True,True,True,False,True,True,False,True,197_gpt-4o,0.4348406407739015,-0.06378777132990125,0.5416666666666666
212,apps,gpt-4o,qwen2.5-7b-instruct,"Manao is taking part in a quiz. The quiz consists of n consecutive questions. A correct answer gives one point to the player. The game also has a counter of consecutive correct answers. When the player answers a question correctly, the number on this counter increases by 1. If the player answers a question incorrectly, the counter is reset, that is, the number on it reduces to 0. If after an answer the counter reaches the number k, then it is reset, and the player's score is doubled. Note that in this case, first 1 point is added to the player's score, and then the total score is doubled. At the beginning of the game, both the player's score and the counter of consecutive correct answers are set to zero.

Manao remembers that he has answered exactly m questions correctly. But he does not remember the order in which the questions came. He's trying to figure out what his minimum score may be. Help him and compute the remainder of the corresponding number after division by 1000000009 (10^9 + 9).


-----Input-----

The single line contains three space-separated integers n, m and k (2 ≤ k ≤ n ≤ 10^9; 0 ≤ m ≤ n).


-----Output-----

Print a single integer — the remainder from division of Manao's minimum possible score in the quiz by 1000000009 (10^9 + 9).


-----Examples-----
Input
5 3 2

Output
3

Input
5 4 2

Output
6



-----Note-----

Sample 1. Manao answered 3 questions out of 5, and his score would double for each two consecutive correct answers. If Manao had answered the first, third and fifth questions, he would have scored as much as 3 points.

Sample 2. Now Manao answered 4 questions. The minimum possible score is obtained when the only wrong answer is to the question 4.

Also note that you are asked to minimize the score and not the remainder of the score modulo 1000000009. For example, if Manao could obtain either 2000000000 or 2000000020 points, the answer is 2000000000 mod 1000000009, even though 2000000020 mod 1000000009 is a smaller number.","MOD = 1000000009

def min_possible_score(n, m, k):
    # Calculate the maximum number of times we can achieve k consecutive correct answers
    max_full_sets = m // k
    remaining_correct = m % k
    
    # Calculate the minimum possible score
    if m <= n - n // k:
        # If we can avoid doubling
        score = m % MOD
    else:
        # We need to calculate the minimum score with doubling
        excess_full_sets = max_full_sets - (n - m) // (k - 1)
        remaining_correct_answers = m - excess_full_sets * k
        
        # Calculate the score with the excess full sets causing doubling
        score = (remaining_correct_answers + k * (pow(2, excess_full_sets, MOD) - 1) * pow(2, MOD-2, MOD)) % MOD
    
    return score

# Read input values
n, m, k = map(int, input().split())

# Print the minimum possible score
print(min_possible_score(n, m, k))
",1,False,False,False,True,True,True,True,True,True,True,False,True,False,212_gpt-4o,0.7535290524325498,0.26601355057168224,0.7083333333333334
216,apps,gpt-4o,qwen2.5-7b-instruct,"Polycarp loves lowercase letters and dislikes uppercase ones. Once he got a string s consisting only of lowercase and uppercase Latin letters.

Let A be a set of positions in the string. Let's call it pretty if following conditions are met:  letters on positions from A in the string are all distinct and lowercase;  there are no uppercase letters in the string which are situated between positions from A (i.e. there is no such j that s[j] is an uppercase letter, and a_1 < j < a_2 for some a_1 and a_2 from A). 

Write a program that will determine the maximum number of elements in a pretty set of positions.


-----Input-----

The first line contains a single integer n (1 ≤ n ≤ 200) — length of string s.

The second line contains a string s consisting of lowercase and uppercase Latin letters.


-----Output-----

Print maximum number of elements in pretty set of positions for string s.


-----Examples-----
Input
11
aaaaBaabAbA

Output
2

Input
12
zACaAbbaazzC

Output
3

Input
3
ABC

Output
0



-----Note-----

In the first example the desired positions might be 6 and 8 or 7 and 8. Positions 6 and 7 contain letters 'a', position 8 contains letter 'b'. The pair of positions 1 and 8 is not suitable because there is an uppercase letter 'B' between these position.

In the second example desired positions can be 7, 8 and 11. There are other ways to choose pretty set consisting of three elements.

In the third example the given string s does not contain any lowercase letters, so the answer is 0.","n = int(input())
s = input()

max_count = 0
current_set = set()
current_count = 0

for char in s:
    if char.islower():
        if char not in current_set:
            current_set.add(char)
            current_count += 1
    else:
        max_count = max(max_count, current_count)
        current_set.clear()
        current_count = 0

# Check the count after the last segment
max_count = max(max_count, current_count)

print(max_count)
",1,True,False,True,True,True,True,False,True,True,True,True,True,True,216_gpt-4o,0.802697388020284,0.33781712770655775,0.6666666666666666
218,apps,gpt-4o,qwen2.5-7b-instruct,"A bus moves along the coordinate line Ox from the point x = 0 to the point x = a. After starting from the point x = 0, it reaches the point x = a, immediately turns back and then moves to the point x = 0. After returning to the point x = 0 it immediately goes back to the point x = a and so on. Thus, the bus moves from x = 0 to x = a and back. Moving from the point x = 0 to x = a or from the point x = a to x = 0 is called a bus journey. In total, the bus must make k journeys.

The petrol tank of the bus can hold b liters of gasoline. To pass a single unit of distance the bus needs to spend exactly one liter of gasoline. The bus starts its first journey with a full petrol tank.

There is a gas station in point x = f. This point is between points x = 0 and x = a. There are no other gas stations on the bus route. While passing by a gas station in either direction the bus can stop and completely refuel its tank. Thus, after stopping to refuel the tank will contain b liters of gasoline.

What is the minimum number of times the bus needs to refuel at the point x = f to make k journeys? The first journey starts in the point x = 0.


-----Input-----

The first line contains four integers a, b, f, k (0 < f < a ≤ 10^6, 1 ≤ b ≤ 10^9, 1 ≤ k ≤ 10^4) — the endpoint of the first bus journey, the capacity of the fuel tank of the bus, the point where the gas station is located, and the required number of journeys.


-----Output-----

Print the minimum number of times the bus needs to refuel to make k journeys. If it is impossible for the bus to make k journeys, print -1.


-----Examples-----
Input
6 9 2 4

Output
4

Input
6 10 2 4

Output
2

Input
6 5 4 3

Output
-1



-----Note-----

In the first example the bus needs to refuel during each journey.

In the second example the bus can pass 10 units of distance without refueling. So the bus makes the whole first journey, passes 4 units of the distance of the second journey and arrives at the point with the gas station. Then it can refuel its tank, finish the second journey and pass 2 units of distance from the third journey. In this case, it will again arrive at the point with the gas station. Further, he can refill the tank up to 10 liters to finish the third journey and ride all the way of the fourth journey. At the end of the journey the tank will be empty. 

In the third example the bus can not make all 3 journeys because if it refuels during the second journey, the tanks will contain only 5 liters of gasoline, but the bus needs to pass 8 units of distance until next refueling.","# Read input values
a, b, f, k = map(int, input().split())

# Initialize the number of refuels
refuels = 0
# Initial fuel in the tank
fuel = b

# Calculate the total distance to travel
total_distance = 2 * a * k

# Current position of the bus
current_position = 0

# Loop through each journey
for i in range(k):
    if i % 2 == 0:  # Even index: moving from 0 to a
        distance_to_travel = a
        distance_to_fuel_station = f
        distance_after_fuel_station = a - f
    else:  # Odd index: moving from a to 0
        distance_to_travel = a
        distance_to_fuel_station = a - f
        distance_after_fuel_station = f
    
    # Check fuel before reaching the fuel station
    if fuel < distance_to_fuel_station:
        print(-1)
        exit()
    
    # Use fuel to reach the fuel station
    fuel -= distance_to_fuel_station
    
    # Check if the bus needs to refuel at the fuel station
    if fuel < distance_after_fuel_station:
        refuels += 1
        fuel = b
    
    # Use fuel to complete the journey
    fuel -= distance_after_fuel_station
    
    # Update the current position of the bus
    current_position = (current_position + distance_to_travel) % (2 * a)

# Output the total number of refuels
print(refuels)
",1,False,False,False,True,True,True,True,False,True,True,False,True,True,218_gpt-4o,0.8700674055246895,0.43928919623725143,0.75
236,apps,gpt-4o,qwen2.5-7b-instruct,"After passing a test, Vasya got himself a box of $n$ candies. He decided to eat an equal amount of candies each morning until there are no more candies. However, Petya also noticed the box and decided to get some candies for himself.

This means the process of eating candies is the following: in the beginning Vasya chooses a single integer $k$, same for all days. After that, in the morning he eats $k$ candies from the box (if there are less than $k$ candies in the box, he eats them all), then in the evening Petya eats $10\%$ of the candies remaining in the box. If there are still candies left in the box, the process repeats — next day Vasya eats $k$ candies again, and Petya — $10\%$ of the candies left in a box, and so on.

If the amount of candies in the box is not divisible by $10$, Petya rounds the amount he takes from the box down. For example, if there were $97$ candies in the box, Petya would eat only $9$ of them. In particular, if there are less than $10$ candies in a box, Petya won't eat any at all.

Your task is to find out the minimal amount of $k$ that can be chosen by Vasya so that he would eat at least half of the $n$ candies he initially got. Note that the number $k$ must be integer.


-----Input-----

The first line contains a single integer $n$ ($1 \leq n \leq 10^{18}$) — the initial amount of candies in the box.


-----Output-----

Output a single integer — the minimal amount of $k$ that would allow Vasya to eat at least half of candies he got.


-----Example-----
Input
68

Output
3



-----Note-----

In the sample, the amount of candies, with $k=3$, would change in the following way (Vasya eats first):

$68 \to 65 \to 59 \to 56 \to 51 \to 48 \to 44 \to 41 \\ \to 37 \to 34 \to 31 \to 28 \to 26 \to 23 \to 21 \to 18 \to 17 \to 14 \\ \to 13 \to 10 \to 9 \to 6 \to 6 \to 3 \to 3 \to 0$.

In total, Vasya would eat $39$ candies, while Petya — $29$.","def minimal_k_to_eat_half_candies(n):
    def can_vasya_eat_half(k):
        total = n
        vasya_eaten = 0
        
        while total > 0:
            # Vasya eats k candies
            if total < k:
                vasya_eaten += total
                total = 0
            else:
                vasya_eaten += k
                total -= k
            
            # Petya eats 10% of remaining candies (rounded down)
            total -= total // 10
        
        return vasya_eaten * 2 >= n
    
    left, right = 1, n
    while left < right:
        mid = (left + right) // 2
        if can_vasya_eat_half(mid):
            right = mid
        else:
            left = mid + 1
    
    return left

if __name__ == ""__main__"":
    n = int(input().strip())
    print(minimal_k_to_eat_half_candies(n))
",1,True,False,False,True,True,True,True,True,True,True,True,True,True,236_gpt-4o,0.6336973284867263,0.13378453261928228,0.625
240,apps,gpt-4o,qwen2.5-7b-instruct,"You are given a rectangular grid of lattice points from (0, 0) to (n, m) inclusive. You have to choose exactly 4 different points to build a polyline possibly with self-intersections and self-touching. This polyline should be as long as possible.

A polyline defined by points p_1, p_2, p_3, p_4 consists of the line segments p_1 p_2, p_2 p_3, p_3 p_4, and its length is the sum of the lengths of the individual line segments.


-----Input-----

The only line of the input contains two integers n and m (0 ≤ n, m ≤ 1000). It is guaranteed that grid contains at least 4 different points.


-----Output-----

Print 4 lines with two integers per line separated by space — coordinates of points p_1, p_2, p_3, p_4 in order which represent the longest possible polyline.

Judge program compares your answer and jury's answer with 10^{ - 6} precision.


-----Examples-----
Input
1 1

Output
1 1
0 0
1 0
0 1

Input
0 10

Output
0 1
0 10
0 0
0 9","def longest_polyline(n, m):
    if n >= 2 and m >= 2:
        # If both n and m are greater than or equal to 2, we can use this configuration
        points = [(0, 0), (n, 0), (n, m), (0, m)]
    elif n == 0:
        # If n is 0, we are limited to vertical movement
        points = [(0, 0), (0, m), (0, 1), (0, m-1)]
    elif m == 0:
        # If m is 0, we are limited to horizontal movement
        points = [(0, 0), (n, 0), (1, 0), (n-1, 0)]
    elif n == 1:
        # If n is 1, we have limited horizontal movement
        points = [(0, 0), (1, 0), (1, m), (0, m)]
    else:  # m == 1
        # If m is 1, we have limited vertical movement
        points = [(0, 0), (0, 1), (n, 1), (n, 0)]
    return points

# Read input
n, m = map(int, input().split())

# Get the longest polyline points
result = longest_polyline(n, m)

# Print the points
for point in result:
    print(point[0], point[1])
",1,False,False,False,True,True,True,True,True,True,False,True,True,True,240_gpt-4o,0.6184945952401372,0.12010016346952129,0.5416666666666666
249,apps,gpt-4o,qwen2.5-7b-instruct,"Memory and his friend Lexa are competing to get higher score in one popular computer game. Memory starts with score a and Lexa starts with score b. In a single turn, both Memory and Lexa get some integer in the range [ - k;k] (i.e. one integer among  - k,  - k + 1,  - k + 2, ...,  - 2,  - 1, 0, 1, 2, ..., k - 1, k) and add them to their current scores. The game has exactly t turns. Memory and Lexa, however, are not good at this game, so they both always get a random integer at their turn.

Memory wonders how many possible games exist such that he ends with a strictly higher score than Lexa. Two games are considered to be different if in at least one turn at least one player gets different score. There are (2k + 1)^2t games in total. Since the answer can be very large, you should print it modulo 10^9 + 7. Please solve this problem for Memory.


-----Input-----

The first and only line of input contains the four integers a, b, k, and t (1 ≤ a, b ≤ 100, 1 ≤ k ≤ 1000, 1 ≤ t ≤ 100) — the amount Memory and Lexa start with, the number k, and the number of turns respectively.


-----Output-----

Print the number of possible games satisfying the conditions modulo 1 000 000 007 (10^9 + 7) in one line.


-----Examples-----
Input
1 2 2 1

Output
6

Input
1 1 1 2

Output
31

Input
2 12 3 1

Output
0



-----Note-----

In the first sample test, Memory starts with 1 and Lexa starts with 2. If Lexa picks  - 2, Memory can pick 0, 1, or 2 to win. If Lexa picks  - 1, Memory can pick 1 or 2 to win. If Lexa picks 0, Memory can pick 2 to win. If Lexa picks 1 or 2, Memory cannot win. Thus, there are 3 + 2 + 1 = 6 possible games in which Memory wins.","MOD = 10**9 + 7

def solve(a, b, k, t):
    max_diff = 2 * k * t
    dp_prev = [0] * (2 * max_diff + 1)
    dp_curr = [0] * (2 * max_diff + 1)
    
    dp_prev[max_diff + (a - b)] = 1
    
    for _ in range(t):
        prefix_sum = [0] * (2 * max_diff + 3)
        for i in range(2 * max_diff + 1):
            prefix_sum[i + 1] = (prefix_sum[i] + dp_prev[i]) % MOD
        
        for i in range(2 * max_diff + 1):
            left = max(0, i - 2 * k)
            right = min(2 * max_diff, i + 2 * k) + 1
            dp_curr[i] = (prefix_sum[right] - prefix_sum[left]) % MOD
        
        dp_prev, dp_curr = dp_curr, dp_prev
    
    result = 0
    for i in range(max_diff + 1, 2 * max_diff + 1):
        result = (result + dp_prev[i]) % MOD
    
    print(result)

# Input
a, b, k, t = map(int, input().split())
solve(a, b, k, t)
",1,False,False,False,True,True,True,True,False,True,False,True,True,True,249_gpt-4o,0.9083034784028298,0.5128471402389753,0.7916666666666666
250,apps,gpt-4o,qwen2.5-7b-instruct,"Valery is a PE teacher at a school in Berland. Soon the students are going to take a test in long jumps, and Valery has lost his favorite ruler! 

However, there is no reason for disappointment, as Valery has found another ruler, its length is l centimeters. The ruler already has n marks, with which he can make measurements. We assume that the marks are numbered from 1 to n in the order they appear from the beginning of the ruler to its end. The first point coincides with the beginning of the ruler and represents the origin. The last mark coincides with the end of the ruler, at distance l from the origin. This ruler can be repesented by an increasing sequence a_1, a_2, ..., a_{n}, where a_{i} denotes the distance of the i-th mark from the origin (a_1 = 0, a_{n} = l).

Valery believes that with a ruler he can measure the distance of d centimeters, if there is a pair of integers i and j (1 ≤ i ≤ j ≤ n), such that the distance between the i-th and the j-th mark is exactly equal to d (in other words, a_{j} - a_{i} = d). 

Under the rules, the girls should be able to jump at least x centimeters, and the boys should be able to jump at least y (x < y) centimeters. To test the children's abilities, Valery needs a ruler to measure each of the distances x and y. 

Your task is to determine what is the minimum number of additional marks you need to add on the ruler so that they can be used to measure the distances x and y. Valery can add the marks at any integer non-negative distance from the origin not exceeding the length of the ruler.


-----Input-----

The first line contains four positive space-separated integers n, l, x, y (2 ≤ n ≤ 10^5, 2 ≤ l ≤ 10^9, 1 ≤ x < y ≤ l) — the number of marks, the length of the ruler and the jump norms for girls and boys, correspondingly.

The second line contains a sequence of n integers a_1, a_2, ..., a_{n} (0 = a_1 < a_2 < ... < a_{n} = l), where a_{i} shows the distance from the i-th mark to the origin.


-----Output-----

In the first line print a single non-negative integer v — the minimum number of marks that you need to add on the ruler.

In the second line print v space-separated integers p_1, p_2, ..., p_{v} (0 ≤ p_{i} ≤ l). Number p_{i} means that the i-th mark should be at the distance of p_{i} centimeters from the origin. Print the marks in any order. If there are multiple solutions, print any of them.


-----Examples-----
Input
3 250 185 230
0 185 250

Output
1
230

Input
4 250 185 230
0 20 185 250

Output
0

Input
2 300 185 230
0 300

Output
2
185 230



-----Note-----

In the first sample it is impossible to initially measure the distance of 230 centimeters. For that it is enough to add a 20 centimeter mark or a 230 centimeter mark.

In the second sample you already can use the ruler to measure the distances of 185 and 230 centimeters, so you don't have to add new marks.

In the third sample the ruler only contains the initial and the final marks. We will need to add two marks to be able to test the children's skills.","# Read input values
n, l, x, y = map(int, input().split())
marks = list(map(int, input().split()))

# Initialize sets for easier lookup of required distances
marks_set = set(marks)
x_found = False
y_found = False

# Check if x and y distances can be measured
for mark in marks:
    if (mark + x) in marks_set or (mark - x) in marks_set:
        x_found = True
    if (mark + y) in marks_set or (mark - y) in marks_set:
        y_found = True
    if x_found and y_found:
        break

# If both x and y distances can already be measured, no new marks are needed
if x_found and y_found:
    print(0)
else:
    # Try to find a mark that can measure both x and y distances if added
    new_marks = set()
    for mark in marks:
        if not x_found:
            # Check if a mark that is x distance from the current mark can also measure y distance
            if (mark + x + y) in marks_set or (mark + x - y) in marks_set or (mark - x + y) in marks_set:
                new_marks.add(mark + x)
            elif (mark - x + y) in marks_set or (mark - x - y) in marks_set:
                new_marks.add(mark - x)
        if not y_found:
            # Check if a mark that is y distance from the current mark can also measure x distance
            if (mark + y + x) in marks_set or (mark + y - x) in marks_set or (mark - y + x) in marks_set:
                new_marks.add(mark + y)
            elif (mark - y + x) in marks_set or (mark - y - x) in marks_set:
                new_marks.add(mark - y)
    
    # If we found a mark that can measure both distances, add only that mark
    if new_marks:
        print(1)
        print(new_marks.pop())
    else:
        # Otherwise, add both x and y marks if necessary
        result = []
        if not x_found:
            result.append(x)
        if not y_found:
            result.append(y)
        print(len(result))
        print("" "".join(map(str, result)))
",1,False,False,False,False,False,True,True,False,True,False,False,False,True,250_gpt-4o,0.32805105442607474,-0.16596394579970838,0.5416666666666666
258,apps,gpt-4o,qwen2.5-7b-instruct,"Takahashi wants to grill N pieces of meat on a grilling net, which can be seen as a two-dimensional plane. The coordinates of the i-th piece of meat are \left(x_i, y_i\right), and its hardness is c_i.
Takahashi can use one heat source to grill the meat. If he puts the heat source at coordinates \left(X, Y\right), where X and Y are real numbers, the i-th piece of meat will be ready to eat in c_i \times \sqrt{\left(X - x_i\right)^2 + \left(Y-y_i\right)^2} seconds.
Takahashi wants to eat K pieces of meat. Find the time required to have K or more pieces of meat ready if he put the heat source to minimize this time.

-----Constraints-----
 - All values in input are integers.
 - 1 \leq N \leq 60
 - 1 \leq K \leq N
 - -1000 \leq x_i , y_i \leq 1000
 - \left(x_i, y_i\right) \neq \left(x_j, y_j\right) \left(i \neq j \right)
 - 1 \leq c_i \leq 100

-----Input-----
Input is given from Standard Input in the following format:
N K
x_1 y_1 c_1
\vdots
x_N y_N c_N

-----Output-----
Print the answer.
It will be considered correct if its absolute or relative error from our answer is at most 10^{-6}.

-----Sample Input-----
4 3
-1 0 3
0 0 3
1 0 2
1 1 40

-----Sample Output-----
2.4

If we put the heat source at \left(-0.2, 0\right), the 1-st, 2-nd, and 3-rd pieces of meat will be ready to eat within 2.4 seconds. This is the optimal place to put the heat source.","import math
import sys
input = sys.stdin.read

def is_feasible(meats, K, T):
    N = len(meats)
    for i in range(N):
        for j in range(i + 1, N):
            x1, y1, c1 = meats[i]
            x2, y2, c2 = meats[j]
            if c1 * T < c2 * T:
                x1, y1, c1, x2, y2, c2 = x2, y2, c2, x1, y1, c1
            d = c1 * T - c2 * T
            if d < 0:
                continue
            d /= c1 * c2
            cx = (x1 + x2) / 2
            cy = (y1 + y2) / 2
            dx = (x1 - x2) / 2
            dy = (y1 - y2) / 2
            d2 = dx * dx + dy * dy
            if d * d2 > d2:
                continue
            mx = cx + dy * math.sqrt(d2 * d - d * d) / d2
            my = cy - dx * math.sqrt(d2 * d - d * d) / d2
            count = sum(c * math.sqrt((mx - x) ** 2 + (my - y) ** 2) <= T for x, y, c in meats)
            if count >= K:
                return True
    return False

def min_time_to_grill(N, K, meats):
    low, high = 0, 1e9
    while high - low > 1e-7:
        mid = (low + high) / 2
        if is_feasible(meats, K, mid):
            high = mid
        else:
            low = mid
    return high

def main():
    data = input().split()
    N = int(data[0])
    K = int(data[1])
    meats = []
    index = 2
    for _ in range(N):
        x = int(data[index])
        y = int(data[index + 1])
        c = int(data[index + 2])
        meats.append((x, y, c))
        index += 3
    result = min_time_to_grill(N, K, meats)
    print(f""{result:.6f}"")

if __name__ == ""__main__"":
    main()
",1,False,False,False,True,False,True,True,False,True,False,False,True,True,258_gpt-4o,0.6305109659268154,0.12737356777759515,0.6666666666666666
259,apps,gpt-4o,qwen2.5-7b-instruct,"Monocarp and Bicarp live in Berland, where every bus ticket consists of $n$ digits ($n$ is an even number). During the evening walk Monocarp and Bicarp found a ticket where some of the digits have been erased. The number of digits that have been erased is even.

Monocarp and Bicarp have decided to play a game with this ticket. Monocarp hates happy tickets, while Bicarp collects them. A ticket is considered happy if the sum of the first $\frac{n}{2}$ digits of this ticket is equal to the sum of the last $\frac{n}{2}$ digits.

Monocarp and Bicarp take turns (and Monocarp performs the first of them). During each turn, the current player must replace any erased digit with any digit from $0$ to $9$. The game ends when there are no erased digits in the ticket.

If the ticket is happy after all erased digits are replaced with decimal digits, then Bicarp wins. Otherwise, Monocarp wins. You have to determine who will win if both players play optimally.


-----Input-----

The first line contains one even integer $n$ $(2 \le n \le 2 \cdot 10^{5})$ — the number of digits in the ticket.

The second line contains a string of $n$ digits and ""?"" characters — the ticket which Monocarp and Bicarp have found. If the $i$-th character is ""?"", then the $i$-th digit is erased. Note that there may be leading zeroes. The number of ""?"" characters is even.


-----Output-----

If Monocarp wins, print ""Monocarp"" (without quotes). Otherwise print ""Bicarp"" (without quotes).


-----Examples-----
Input
4
0523

Output
Bicarp

Input
2
??

Output
Bicarp

Input
8
?054??0?

Output
Bicarp

Input
6
???00?

Output
Monocarp



-----Note-----

Since there is no question mark in the ticket in the first example, the winner is determined before the game even starts, and it is Bicarp.

In the second example, Bicarp also wins. After Monocarp chooses an erased digit and replaces it with a new one, Bicap can choose another position with an erased digit and replace it with the same digit, so the ticket is happy.","# Use Standard Input format

def determine_winner(n, ticket):
    half_n = n // 2
    left_sum = 0
    right_sum = 0
    left_question_marks = 0
    right_question_marks = 0

    # Calculate the sums and the count of question marks for each half
    for i in range(half_n):
        if ticket[i] == '?':
            left_question_marks += 1
        else:
            left_sum += int(ticket[i])

    for i in range(half_n, n):
        if ticket[i] == '?':
            right_question_marks += 1
        else:
            right_sum += int(ticket[i])

    # Calculate the difference between the sums of the two halves
    diff = left_sum - right_sum

    # Calculate the difference in the number of question marks
    q_diff = left_question_marks - right_question_marks

    # To balance the sums, the difference must be a multiple of 9
    if (diff + (q_diff // 2) * 9) % 9 == 0:
        print(""Bicarp"")
    else:
        print(""Monocarp"")

# Read input
n = int(input())
ticket = input()

# Determine the winner
determine_winner(n, ticket)
",1,False,False,False,True,True,True,True,False,True,False,False,False,True,259_gpt-4o,0.7192236440373758,0.2296325830884017,0.5833333333333334
265,apps,gpt-4o,qwen2.5-7b-instruct,"There is an airplane which has n rows from front to back. There will be m people boarding this airplane.

This airplane has an entrance at the very front and very back of the plane.

Each person has some assigned seat. It is possible for multiple people to have the same assigned seat. The people will then board the plane one by one starting with person 1. Each person can independently choose either the front entrance or back entrance to enter the plane.

When a person walks into the plane, they walk directly to their assigned seat and will try to sit in it. If it is occupied, they will continue walking in the direction they walked in until they are at empty seat - they will take the earliest empty seat that they can find. If they get to the end of the row without finding a seat, they will be angry.

Find the number of ways to assign tickets to the passengers and board the plane without anyone getting angry. Two ways are different if there exists a passenger who chose a different entrance in both ways, or the assigned seat is different. Print this count modulo 10^9 + 7.


-----Input-----

The first line of input will contain two integers n, m (1 ≤ m ≤ n ≤ 1 000 000), the number of seats, and the number of passengers, respectively.


-----Output-----

Print a single number, the number of ways, modulo 10^9 + 7.


-----Example-----
Input
3 3

Output
128



-----Note-----

Here, we will denote a passenger by which seat they were assigned, and which side they came from (either ""F"" or ""B"" for front or back, respectively).

For example, one valid way is 3B, 3B, 3B (i.e. all passengers were assigned seat 3 and came from the back entrance). Another valid way would be 2F, 1B, 3F.

One invalid way would be 2B, 2B, 2B, since the third passenger would get to the front without finding a seat.","MOD = 10**9 + 7

def factorial(n):
    result = 1
    for i in range(2, n + 1):
        result = result * i % MOD
    return result

def number_of_ways(n, m):
    # Compute factorial(n) and factorial(n-m)
    fact_n = factorial(n)
    fact_n_m = factorial(n - m)
    
    # The number of ways to assign tickets to passengers and ensure no one gets angry:
    # This is computed as 2^m * factorial(n) // factorial(n-m)
    ways = pow(2, m, MOD) * fact_n % MOD * pow(fact_n_m, MOD-2, MOD) % MOD
    
    return ways

# Read input
import sys
input = sys.stdin.read
data = input().strip().split()
n = int(data[0])
m = int(data[1])

# Calculate the number of ways
result = number_of_ways(n, m)

# Output the result
print(result)
",1,False,False,False,True,True,True,True,True,False,True,True,True,True,265_gpt-4o,0.5971675832200772,0.0977370811161579,0.5416666666666666
268,apps,gpt-4o,qwen2.5-7b-instruct,"You are given two integers $l$ and $r$ ($l \le r$). Your task is to calculate the sum of numbers from $l$ to $r$ (including $l$ and $r$) such that each number contains at most $k$ different digits, and print this sum modulo $998244353$.

For example, if $k = 1$ then you have to calculate all numbers from $l$ to $r$ such that each number is formed using only one digit. For $l = 10, r = 50$ the answer is $11 + 22 + 33 + 44 = 110$.


-----Input-----

The only line of the input contains three integers $l$, $r$ and $k$ ($1 \le l \le r < 10^{18}, 1 \le k \le 10$) — the borders of the segment and the maximum number of different digits.


-----Output-----

Print one integer — the sum of numbers from $l$ to $r$ such that each number contains at most $k$ different digits, modulo $998244353$.


-----Examples-----
Input
10 50 2

Output
1230

Input
1 2345 10

Output
2750685

Input
101 154 2

Output
2189



-----Note-----

For the first example the answer is just the sum of numbers from $l$ to $r$ which equals to $\frac{50 \cdot 51}{2} - \frac{9 \cdot 10}{2} = 1230$. This example also explained in the problem statement but for $k = 1$.

For the second example the answer is just the sum of numbers from $l$ to $r$ which equals to $\frac{2345 \cdot 2346}{2} = 2750685$.

For the third example the answer is $101 + 110 + 111 + 112 + 113 + 114 + 115 + 116 + 117 + 118 + 119 + 121 + 122 + 131 + 133 + 141 + 144 + 151 = 2189$.","MOD = 998244353

def contains_at_most_k_unique_digits(n, k):
    return len(set(str(n))) <= k

def sum_of_numbers_with_k_unique_digits(l, r, k):
    total_sum = 0
    for num in range(l, r + 1):
        if contains_at_most_k_unique_digits(num, k):
            total_sum = (total_sum + num) % MOD
    return total_sum

# Read input
l, r, k = map(int, input().split())

# Calculate and print the result
print(sum_of_numbers_with_k_unique_digits(l, r, k))
",1,False,True,False,True,True,True,True,True,True,True,True,True,True,268_gpt-4o,0.7709462509712747,0.2907057515483225,0.5833333333333334
270,apps,gpt-4o,qwen2.5-7b-instruct,"Nothing is eternal in the world, Kostya understood it on the 7-th of January when he saw partially dead four-color garland.

Now he has a goal to replace dead light bulbs, however he doesn't know how many light bulbs for each color are required. It is guaranteed that for each of four colors at least one light is working.

It is known that the garland contains light bulbs of four colors: red, blue, yellow and green. The garland is made as follows: if you take any four consecutive light bulbs then there will not be light bulbs with the same color among them. For example, the garland can look like ""RYBGRYBGRY"", ""YBGRYBGRYBG"", ""BGRYB"", but can not look like ""BGRYG"", ""YBGRYBYGR"" or ""BGYBGY"". Letters denote colors: 'R' — red, 'B' — blue, 'Y' — yellow, 'G' — green.

Using the information that for each color at least one light bulb still works count the number of dead light bulbs of each four colors.


-----Input-----

The first and the only line contains the string s (4 ≤ |s| ≤ 100), which describes the garland, the i-th symbol of which describes the color of the i-th light bulb in the order from the beginning of garland:   'R' — the light bulb is red,  'B' — the light bulb is blue,  'Y' — the light bulb is yellow,  'G' — the light bulb is green,  '!' — the light bulb is dead. 

The string s can not contain other symbols except those five which were described. 

It is guaranteed that in the given string at least once there is each of four letters 'R', 'B', 'Y' and 'G'. 

It is guaranteed that the string s is correct garland with some blown light bulbs, it means that for example the line ""GRBY!!!B"" can not be in the input data. 


-----Output-----

In the only line print four integers k_{r}, k_{b}, k_{y}, k_{g} — the number of dead light bulbs of red, blue, yellow and green colors accordingly.


-----Examples-----
Input
RYBGRYBGR

Output
0 0 0 0
Input
!RGYB

Output
0 1 0 0
Input
!!!!YGRB

Output
1 1 1 1
Input
!GB!RG!Y!

Output
2 1 1 0


-----Note-----

In the first example there are no dead light bulbs.

In the second example it is obvious that one blue bulb is blown, because it could not be light bulbs of other colors on its place according to the statements.","s = input().strip()

# Initialize counters for each color
dead_bulbs = {'R': 0, 'B': 0, 'Y': 0, 'G': 0}

# Determine the positions (modulo 4) for each color
positions = {}
for i, char in enumerate(s):
    if char in 'RBYG':
        positions[char] = i % 4

# Count the number of dead bulbs for each color
for i, char in enumerate(s):
    if char == '!':
        for color, pos in positions.items():
            if i % 4 == pos:
                dead_bulbs[color] += 1

# Output the result
print(dead_bulbs['R'], dead_bulbs['B'], dead_bulbs['Y'], dead_bulbs['G'])
",1,True,False,True,True,True,True,True,False,True,False,False,True,False,270_gpt-4o,0.7408518640264958,0.2505433692798715,0.7083333333333334
284,apps,gpt-4o,qwen2.5-7b-instruct,"PolandBall is a young, clever Ball. He is interested in prime numbers. He has stated a following hypothesis: ""There exists such a positive integer n that for each positive integer m number n·m + 1 is a prime number"".

Unfortunately, PolandBall is not experienced yet and doesn't know that his hypothesis is incorrect. Could you prove it wrong? Write a program that finds a counterexample for any n.


-----Input-----

The only number in the input is n (1 ≤ n ≤ 1000) — number from the PolandBall's hypothesis. 


-----Output-----

Output such m that n·m + 1 is not a prime number. Your answer will be considered correct if you output any suitable m such that 1 ≤ m ≤ 10^3. It is guaranteed the the answer exists.


-----Examples-----
Input
3

Output
1
Input
4

Output
2


-----Note-----

A prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.

For the first sample testcase, 3·1 + 1 = 4. We can output 1.

In the second sample testcase, 4·1 + 1 = 5. We cannot output 1 because 5 is prime. However, m = 2 is okay since 4·2 + 1 = 9, which is not a prime number.","def is_prime(x):
    if x <= 1:
        return False
    if x <= 3:
        return True
    if x % 2 == 0 or x % 3 == 0:
        return False
    i = 5
    while i * i <= x:
        if x % i == 0 or x % (i + 2) == 0:
            return False
        i += 6
    return True

n = int(input())

for m in range(1, 1001):
    if not is_prime(n * m + 1):
        print(m)
        break
",1,True,True,True,True,True,True,True,True,True,True,True,True,True,284_gpt-4o,0.6763809958193981,0.18107150483337053,0.625
285,apps,gpt-4o,qwen2.5-7b-instruct,"Kolya is developing an economy simulator game. His most favourite part of the development process is in-game testing. Once he was entertained by the testing so much, that he found out his game-coin score become equal to 0.

Kolya remembers that at the beginning of the game his game-coin score was equal to n and that he have bought only some houses (for 1 234 567 game-coins each), cars (for 123 456 game-coins each) and computers (for 1 234 game-coins each).

Kolya is now interested, whether he could have spent all of his initial n game-coins buying only houses, cars and computers or there is a bug in the game. Formally, is there a triple of non-negative integers a, b and c such that a × 1 234 567 + b × 123 456 + c × 1 234 = n?

Please help Kolya answer this question.


-----Input-----

The first line of the input contains a single integer n (1 ≤ n ≤ 10^9) — Kolya's initial game-coin score.


-----Output-----

Print ""YES"" (without quotes) if it's possible that Kolya spent all of his initial n coins buying only houses, cars and computers. Otherwise print ""NO"" (without quotes).


-----Examples-----
Input
1359257

Output
YES
Input
17851817

Output
NO


-----Note-----

In the first sample, one of the possible solutions is to buy one house, one car and one computer, spending 1 234 567 + 123 456 + 1234 = 1 359 257 game-coins in total.","def can_spend_all_coins(n):
    # Define the cost of houses, cars, and computers
    house_cost = 1234567
    car_cost = 123456
    computer_cost = 1234
    
    # Iterate over the possible number of houses
    for a in range(n // house_cost + 1):
        remaining_after_houses = n - a * house_cost
        # Iterate over the possible number of cars
        for b in range(remaining_after_houses // car_cost + 1):
            remaining_after_cars = remaining_after_houses - b * car_cost
            # Check if the remaining coins can be exactly spent on computers
            if remaining_after_cars % computer_cost == 0:
                return ""YES""
    
    return ""NO""

# Read input
n = int(input().strip())

# Get the result
result = can_spend_all_coins(n)

# Print the result
print(result)
",1,True,True,True,True,True,True,True,True,True,True,True,True,True,285_gpt-4o,0.6288274362731552,0.12914027461134234,0.5
289,apps,gpt-4o,qwen2.5-7b-instruct,"Famous Brazil city Rio de Janeiro holds a tennis tournament and Ostap Bender doesn't want to miss this event. There will be n players participating, and the tournament will follow knockout rules from the very first game. That means, that if someone loses a game he leaves the tournament immediately.

Organizers are still arranging tournament grid (i.e. the order games will happen and who is going to play with whom) but they have already fixed one rule: two players can play against each other only if the number of games one of them has already played differs by no more than one from the number of games the other one has already played. Of course, both players had to win all their games in order to continue participating in the tournament.

Tournament hasn't started yet so the audience is a bit bored. Ostap decided to find out what is the maximum number of games the winner of the tournament can take part in (assuming the rule above is used). However, it is unlikely he can deal with this problem without your help.


-----Input-----

The only line of the input contains a single integer n (2 ≤ n ≤ 10^18) — the number of players to participate in the tournament.


-----Output-----

Print the maximum number of games in which the winner of the tournament can take part.


-----Examples-----
Input
2

Output
1

Input
3

Output
2

Input
4

Output
2

Input
10

Output
4



-----Note-----

In all samples we consider that player number 1 is the winner.

In the first sample, there would be only one game so the answer is 1.

In the second sample, player 1 can consequently beat players 2 and 3. 

In the third sample, player 1 can't play with each other player as after he plays with players 2 and 3 he can't play against player 4, as he has 0 games played, while player 1 already played 2. Thus, the answer is 2 and to achieve we make pairs (1, 2) and (3, 4) and then clash the winners.","n = int(input())

# The maximum number of games the winner can play is essentially the maximum number of times
# we can divide the number of players by 2 (which is equivalent to finding the highest power
# of 2 less than or equal to n).
max_games = n.bit_length() - 1

print(max_games)
",1,False,False,False,True,True,True,True,False,False,False,True,True,True,289_gpt-4o,0.711296447684462,0.2218398756668227,0.5833333333333334
290,apps,gpt-4o,qwen2.5-7b-instruct,"Tonio has a keyboard with only two letters, ""V"" and ""K"".

One day, he has typed out a string s with only these two letters. He really likes it when the string ""VK"" appears, so he wishes to change at most one letter in the string (or do no changes) to maximize the number of occurrences of that string. Compute the maximum number of times ""VK"" can appear as a substring (i. e. a letter ""K"" right after a letter ""V"") in the resulting string.


-----Input-----

The first line will contain a string s consisting only of uppercase English letters ""V"" and ""K"" with length not less than 1 and not greater than 100.


-----Output-----

Output a single integer, the maximum number of times ""VK"" can appear as a substring of the given string after changing at most one character.


-----Examples-----
Input
VK

Output
1

Input
VV

Output
1

Input
V

Output
0

Input
VKKKKKKKKKVVVVVVVVVK

Output
3

Input
KVKV

Output
1



-----Note-----

For the first case, we do not change any letters. ""VK"" appears once, which is the maximum number of times it could appear.

For the second case, we can change the second character from a ""V"" to a ""K"". This will give us the string ""VK"". This has one occurrence of the string ""VK"" as a substring.

For the fourth case, we can change the fourth character from a ""K"" to a ""V"". This will give us the string ""VKKVKKKKKKVVVVVVVVVK"". This has three occurrences of the string ""VK"" as a substring. We can check no other moves can give us strictly more occurrences.","s = input()

# Initialize the count of VK substrings
count_vk = 0

# Count initial VK substrings
for i in range(len(s) - 1):
    if s[i] == 'V' and s[i + 1] == 'K':
        count_vk += 1

# Try changing each character and see if it increases VK substrings
max_vk = count_vk
for i in range(len(s)):
    if s[i] == 'V':
        s_new = s[:i] + 'K' + s[i+1:]
    elif s[i] == 'K':
        s_new = s[:i] + 'V' + s[i+1:]
    else:
        continue
    
    new_count_vk = 0
    for j in range(len(s_new) - 1):
        if s_new[j] == 'V' and s_new[j + 1] == 'K':
            new_count_vk += 1
    
    max_vk = max(max_vk, new_count_vk)

print(max_vk)
",1,True,True,False,True,True,True,True,False,False,True,True,True,False,290_gpt-4o,0.5689011500308099,0.06930433337203927,0.5416666666666666
298,apps,gpt-4o,qwen2.5-7b-instruct,"Vasya has got three integers $n$, $m$ and $k$. He'd like to find three integer points $(x_1, y_1)$, $(x_2, y_2)$, $(x_3, y_3)$, such that $0 \le x_1, x_2, x_3 \le n$, $0 \le y_1, y_2, y_3 \le m$ and the area of the triangle formed by these points is equal to $\frac{nm}{k}$.

Help Vasya! Find such points (if it's possible). If there are multiple solutions, print any of them.


-----Input-----

The single line contains three integers $n$, $m$, $k$ ($1\le n, m \le 10^9$, $2 \le k \le 10^9$).


-----Output-----

If there are no such points, print ""NO"".

Otherwise print ""YES"" in the first line. The next three lines should contain integers $x_i, y_i$ — coordinates of the points, one point per line. If there are multiple solutions, print any of them.

You can print each letter in any case (upper or lower).


-----Examples-----
Input
4 3 3

Output
YES
1 0
2 3
4 1

Input
4 4 7

Output
NO



-----Note-----

In the first example area of the triangle should be equal to $\frac{nm}{k} = 4$. The triangle mentioned in the output is pictured below:  [Image] 

In the second example there is no triangle with area $\frac{nm}{k} = \frac{16}{7}$.","n, m, k = map(int, input().split())

# Calculate the area required for the triangle
area = n * m / k

# Check if the area is an integer
if area != int(area):
    print(""NO"")
else:
    area = int(area)
    # We find a way to create a triangle with this area
    if area == 0:
        print(""NO"")
    else:
        # We can set one point at (0, 0) and the others in a way to form the required area
        print(""YES"")
        print(""0 0"")
        if 2 * area <= n:
            print(f""{2 * area} 1"")
            print(f""0 1"")
        elif 2 * area <= m:
            print(f""1 {2 * area}"")
            print(f""1 0"")
        else:
            print(f""{n} {m // 2}"")
            print(f""0 {m // 2}"")
",1,False,False,False,True,False,False,True,False,False,False,False,False,False,298_gpt-4o,0.7921392855984806,0.3201115600931055,0.625
28,apps,llama3-70b,qwen2.5-7b-instruct,"You are given a string s consisting of n lowercase Latin letters. You have to type this string using your keyboard.

Initially, you have an empty string. Until you type the whole string, you may perform the following operation:  add a character to the end of the string. 

Besides, at most once you may perform one additional operation: copy the string and append it to itself.

For example, if you have to type string abcabca, you can type it in 7 operations if you type all the characters one by one. However, you can type it in 5 operations if you type the string abc first and then copy it and type the last character.

If you have to type string aaaaaaaaa, the best option is to type 4 characters one by one, then copy the string, and then type the remaining character.

Print the minimum number of operations you need to type the given string.


-----Input-----

The first line of the input containing only one integer number n (1 ≤ n ≤ 100) — the length of the string you have to type. The second line containing the string s consisting of n lowercase Latin letters.


-----Output-----

Print one integer number — the minimum number of operations you need to type the given string.


-----Examples-----
Input
7
abcabca

Output
5

Input
8
abcdefgh

Output
8



-----Note-----

The first test described in the problem statement.

In the second test you can only type all the characters one by one.","n = int(input())
s = input()
dp = [0] * (n + 1)
dp[0] = 0
for i in range(1, n + 1):
    dp[i] = i
    for j in range(i):
        if s[j:i] in s[:j]:
            dp[i] = min(dp[i], dp[j] + (i - j) // (i - j - j) + 1)
print(dp[n])
",1,False,False,False,True,False,True,False,False,False,False,False,False,False,28_llama3-70b,0.8532123758836564,0.4130125310478158,0.7083333333333334
36,apps,llama3-70b,qwen2.5-7b-instruct,"The flag of Berland is such rectangular field n × m that satisfies following conditions:

  Flag consists of three colors which correspond to letters 'R', 'G' and 'B'.  Flag consists of three equal in width and height stripes, parralel to each other and to sides of the flag. Each stripe has exactly one color.  Each color should be used in exactly one stripe. 

You are given a field n × m, consisting of characters 'R', 'G' and 'B'. Output ""YES"" (without quotes) if this field corresponds to correct flag of Berland. Otherwise, print ""NO"" (without quotes).


-----Input-----

The first line contains two integer numbers n and m (1 ≤ n, m ≤ 100) — the sizes of the field.

Each of the following n lines consisting of m characters 'R', 'G' and 'B' — the description of the field.


-----Output-----

Print ""YES"" (without quotes) if the given field corresponds to correct flag of Berland . Otherwise, print ""NO"" (without quotes).


-----Examples-----
Input
6 5
RRRRR
RRRRR
BBBBB
BBBBB
GGGGG
GGGGG

Output
YES

Input
4 3
BRG
BRG
BRG
BRG

Output
YES

Input
6 7
RRRGGGG
RRRGGGG
RRRGGGG
RRRBBBB
RRRBBBB
RRRBBBB

Output
NO

Input
4 4
RRRR
RRRR
BBBB
GGGG

Output
NO



-----Note-----

The field in the third example doesn't have three parralel stripes.

Rows of the field in the fourth example are parralel to each other and to borders. But they have different heights — 2, 1 and 1.","n, m = map(int, input().split())
field = [input() for _ in range(n)]

rows = len(set(''.join(field[i::n//3]) for i in range(n//3)))
cols = len(set(''.join(row[i*m//3:(i+1)*m//3] for row in field)) for i in range(3))

print(""YES"" if rows == 3 and cols == 3 else ""NO"")
",1,False,False,False,True,True,True,False,False,False,True,False,False,False,36_llama3-70b,0.5737313256405553,0.0718182532301581,0.625
43,apps,llama3-70b,qwen2.5-7b-instruct,"You are given a binary string $s$.

Find the number of distinct cyclical binary strings of length $n$ which contain $s$ as a substring.

The cyclical string $t$ contains $s$ as a substring if there is some cyclical shift of string $t$, such that $s$ is a substring of this cyclical shift of $t$.

For example, the cyclical string ""000111"" contains substrings ""001"", ""01110"" and ""10"", but doesn't contain ""0110"" and ""10110"".

Two cyclical strings are called different if they differ from each other as strings. For example, two different strings, which differ from each other by a cyclical shift, are still considered different cyclical strings.


-----Input-----

The first line contains a single integer $n$ ($1 \le n \le 40$) — the length of the target string $t$.

The next line contains the string $s$ ($1 \le |s| \le n$) — the string which must be a substring of cyclical string $t$. String $s$ contains only characters '0' and '1'.


-----Output-----

Print the only integer — the number of distinct cyclical binary strings $t$, which contain $s$ as a substring.


-----Examples-----
Input
2
0

Output
3
Input
4
1010

Output
2
Input
20
10101010101010

Output
962


-----Note-----

In the first example, there are three cyclical strings, which contain ""0"" — ""00"", ""01"" and ""10"".

In the second example, there are only two such strings — ""1010"", ""0101"".","n = int(input())
s = input()
count = 0
for i in range(2**n):
    t = bin(i)[2:].zfill(n)
    if all(t[i:i+len(s)] == s or t[i+len(s):] + t[:i] == s for i in range(n)):
        count += 1
print(count)
",1,False,False,False,True,True,True,True,False,False,True,False,False,True,43_llama3-70b,0.8451314630632236,0.39846551359676413,0.6666666666666666
44,apps,llama3-70b,qwen2.5-7b-instruct,"You are given the set of vectors on the plane, each of them starting at the origin. Your task is to find a pair of vectors with the minimal non-oriented angle between them.

Non-oriented angle is non-negative value, minimal between clockwise and counterclockwise direction angles. Non-oriented angle is always between 0 and π. For example, opposite directions vectors have angle equals to π.


-----Input-----

First line of the input contains a single integer n (2 ≤ n ≤ 100 000) — the number of vectors.

The i-th of the following n lines contains two integers x_{i} and y_{i} (|x|, |y| ≤ 10 000, x^2 + y^2 > 0) — the coordinates of the i-th vector. Vectors are numbered from 1 to n in order of appearing in the input. It is guaranteed that no two vectors in the input share the same direction (but they still can have opposite directions).


-----Output-----

Print two integer numbers a and b (a ≠ b) — a pair of indices of vectors with the minimal non-oriented angle. You can print the numbers in any order. If there are many possible answers, print any.


-----Examples-----
Input
4
-1 0
0 -1
1 0
1 1

Output
3 4

Input
6
-1 0
0 -1
1 0
1 1
-4 -5
-4 -6

Output
6 5","import math

n = int(input())

v = []
for _ in range(n):
    x, y = map(int, input().split())
    v.append((x, y))

ans = (0, 1)
ans_angle = math.pi

v.sort(key=lambda v: math.atan2(v[1], v[0]))

for i in range(n):
    for j in range(i+1, min(n, i+100)):
        angle = math.acos((v[i][0]*v[j][0] + v[i][1]*v[j][1]) / 
                          math.sqrt(v[i][0]**2 + v[i][1]**2) / 
                          math.sqrt(v[j][0]**2 + v[j][1]**2))
        if angle < ans_angle:
            ans_angle = angle
            ans = (i, j)

print(ans[0]+1, ans[1]+1)
",1,False,False,False,False,True,False,True,True,True,True,False,True,True,44_llama3-70b,0.5575568417069499,0.05699574066749571,0.5833333333333334
47,apps,llama3-70b,qwen2.5-7b-instruct,"After finishing eating her bun, Alyona came up with two integers n and m. She decided to write down two columns of integers — the first column containing integers from 1 to n and the second containing integers from 1 to m. Now the girl wants to count how many pairs of integers she can choose, one from the first column and the other from the second column, such that their sum is divisible by 5.

Formally, Alyona wants to count the number of pairs of integers (x, y) such that 1 ≤ x ≤ n, 1 ≤ y ≤ m and $(x + y) \operatorname{mod} 5$ equals 0.

As usual, Alyona has some troubles and asks you to help.


-----Input-----

The only line of the input contains two integers n and m (1 ≤ n, m ≤ 1 000 000).


-----Output-----

Print the only integer — the number of pairs of integers (x, y) such that 1 ≤ x ≤ n, 1 ≤ y ≤ m and (x + y) is divisible by 5.


-----Examples-----
Input
6 12

Output
14

Input
11 14

Output
31

Input
1 5

Output
1

Input
3 8

Output
5

Input
5 7

Output
7

Input
21 21

Output
88



-----Note-----

Following pairs are suitable in the first sample case:   for x = 1 fits y equal to 4 or 9;  for x = 2 fits y equal to 3 or 8;  for x = 3 fits y equal to 2, 7 or 12;  for x = 4 fits y equal to 1, 6 or 11;  for x = 5 fits y equal to 5 or 10;  for x = 6 fits y equal to 4 or 9. 

Only the pair (1, 4) is suitable in the third sample case.","n, m = map(int, input().split())
count = 0
for x in range(1, n + 1):
    for y in range(1, m + 1):
        if (x + y) % 5 == 0:
            count += 1
print(count)
",1,False,True,True,True,True,True,True,True,True,True,True,True,True,47_llama3-70b,0.8844787972965898,0.4663282176478544,0.7083333333333334
50,apps,llama3-70b,qwen2.5-7b-instruct,"Let's write all the positive integer numbers one after another from $1$ without any delimiters (i.e. as a single string). It will be the infinite sequence starting with 123456789101112131415161718192021222324252627282930313233343536...

Your task is to print the $k$-th digit of this sequence.


-----Input-----

The first and only line contains integer $k$ ($1 \le k \le 10^{12}$) — the position to process ($1$-based index).


-----Output-----

Print the $k$-th digit of the resulting infinite sequence.


-----Examples-----
Input
7

Output
7

Input
21

Output
5","k = int(input())
n = 1
while True:
    s = str(n)
    if len(s) >= k:
        print(s[k-1])
        break
    k -= len(s)
    n += 1
",1,False,False,False,True,True,True,True,True,False,False,False,True,True,50_llama3-70b,0.5992170886152665,0.0999273480448792,0.5833333333333334
59,apps,llama3-70b,qwen2.5-7b-instruct,"Petya has equal wooden bars of length n. He wants to make a frame for two equal doors. Each frame has two vertical (left and right) sides of length a and one top side of length b. A solid (i.e. continuous without breaks) piece of bar is needed for each side.

Determine a minimal number of wooden bars which are needed to make the frames for two doors. Petya can cut the wooden bars into any parts, but each side of each door should be a solid piece of a wooden bar (or a whole wooden bar).


-----Input-----

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the length of each wooden bar.

The second line contains a single integer a (1 ≤ a ≤ n) — the length of the vertical (left and right) sides of a door frame.

The third line contains a single integer b (1 ≤ b ≤ n) — the length of the upper side of a door frame.


-----Output-----

Print the minimal number of wooden bars with length n which are needed to make the frames for two doors.


-----Examples-----
Input
8
1
2

Output
1

Input
5
3
4

Output
6

Input
6
4
2

Output
4

Input
20
5
6

Output
2



-----Note-----

In the first example one wooden bar is enough, since the total length of all six sides of the frames for two doors is 8.

In the second example 6 wooden bars is enough, because for each side of the frames the new wooden bar is needed.","n = int(input())
a = int(input())
b = int(input())

total_length = 2 * (a * 2 + b)
if total_length <= n:
    print(1)
else:
    print(-(-total_length // n))
",1,False,False,False,True,True,True,True,True,False,True,False,False,True,59_llama3-70b,0.6580279302119527,0.15839721483839558,0.5
63,apps,llama3-70b,qwen2.5-7b-instruct,"Since most contestants do not read this part, I have to repeat that Bitlandians are quite weird. They have their own jobs, their own working method, their own lives, their own sausages and their own games!

Since you are so curious about Bitland, I'll give you the chance of peeking at one of these games.

BitLGM and BitAryo are playing yet another of their crazy-looking genius-needed Bitlandish games. They've got a sequence of n non-negative integers a_1, a_2, ..., a_{n}. The players make moves in turns. BitLGM moves first. Each player can and must do one of the two following actions in his turn:

  Take one of the integers (we'll denote it as a_{i}). Choose integer x (1 ≤ x ≤ a_{i}). And then decrease a_{i} by x, that is, apply assignment: a_{i} = a_{i} - x.  Choose integer x $(1 \leq x \leq \operatorname{min}_{i = 1} a_{i})$. And then decrease all a_{i} by x, that is, apply assignment: a_{i} = a_{i} - x, for all i. 

The player who cannot make a move loses.

You're given the initial sequence a_1, a_2, ..., a_{n}. Determine who wins, if both players plays optimally well and if BitLGM and BitAryo start playing the described game in this sequence.


-----Input-----

The first line contains an integer n (1 ≤ n ≤ 3).

The next line contains n integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} < 300).


-----Output-----

Write the name of the winner (provided that both players play optimally well). Either ""BitLGM"" or ""BitAryo"" (without the quotes).


-----Examples-----
Input
2
1 1

Output
BitLGM

Input
2
1 2

Output
BitAryo

Input
3
1 2 1

Output
BitLGM","n = int(input())
a = list(map(int, input().split()))
while len(a) > 1:
    if min(a) == 0:
        a.remove(0)
    else:
        x = min(a)
        a = [i - x for i in a]
if a:
    print(""BitLGM"" if a[0] % 2 == 0 else ""BitAryo"")
else:
    print(""BitAryo"")
",1,False,False,False,False,False,False,True,False,False,False,True,True,True,63_llama3-70b,0.8591486484104238,0.41913431465941037,0.6666666666666666
89,apps,llama3-70b,qwen2.5-7b-instruct,"The year 2015 is almost over.

Limak is a little polar bear. He has recently learnt about the binary system. He noticed that the passing year has exactly one zero in its representation in the binary system — 2015_10 = 11111011111_2. Note that he doesn't care about the number of zeros in the decimal representation.

Limak chose some interval of years. He is going to count all years from this interval that have exactly one zero in the binary representation. Can you do it faster?

Assume that all positive integers are always written without leading zeros.


-----Input-----

The only line of the input contains two integers a and b (1 ≤ a ≤ b ≤ 10^18) — the first year and the last year in Limak's interval respectively.


-----Output-----

Print one integer – the number of years Limak will count in his chosen interval.


-----Examples-----
Input
5 10

Output
2

Input
2015 2015

Output
1

Input
100 105

Output
0

Input
72057594000000000 72057595000000000

Output
26



-----Note-----

In the first sample Limak's interval contains numbers 5_10 = 101_2, 6_10 = 110_2, 7_10 = 111_2, 8_10 = 1000_2, 9_10 = 1001_2 and 10_10 = 1010_2. Two of them (101_2 and 110_2) have the described property.","def count_years_with_one_zero(a, b):
    def count_zeros(n):
        return bin(n).count('0')

    count = 0
    for year in range(a, b + 1):
        if count_zeros(year) == 1:
            count += 1
    return count

a, b = map(int, input().split())
print(count_years_with_one_zero(a, b))
",1,False,False,True,True,True,True,True,True,True,True,True,False,True,89_llama3-70b,0.9060636397552515,0.5134257209148272,0.75
95,apps,llama3-70b,qwen2.5-7b-instruct,"Alexander is learning how to convert numbers from the decimal system to any other, however, he doesn't know English letters, so he writes any number only as a decimal number, it means that instead of the letter A he will write the number 10. Thus, by converting the number 475 from decimal to hexadecimal system, he gets 11311 (475 = 1·16^2 + 13·16^1 + 11·16^0). Alexander lived calmly until he tried to convert the number back to the decimal number system.

Alexander remembers that he worked with little numbers so he asks to find the minimum decimal number so that by converting it to the system with the base n he will get the number k.


-----Input-----

The first line contains the integer n (2 ≤ n ≤ 10^9). The second line contains the integer k (0 ≤ k < 10^60), it is guaranteed that the number k contains no more than 60 symbols. All digits in the second line are strictly less than n.

Alexander guarantees that the answer exists and does not exceed 10^18.

The number k doesn't contain leading zeros.


-----Output-----

Print the number x (0 ≤ x ≤ 10^18) — the answer to the problem.


-----Examples-----
Input
13
12

Output
12
Input
16
11311

Output
475
Input
20
999

Output
3789
Input
17
2016

Output
594


-----Note-----

In the first example 12 could be obtained by converting two numbers to the system with base 13: 12 = 12·13^0 or 15 = 1·13^1 + 2·13^0.","n = int(input())
k = input()
x = 0
for i, c in enumerate(reversed(k)):
    x += int(c) * (n ** i)
print(x)
",1,False,False,True,True,True,True,True,True,True,True,True,True,False,95_llama3-70b,0.7207463733290959,0.2320145462963935,0.5833333333333334
96,apps,llama3-70b,qwen2.5-7b-instruct,"Array of integers is unimodal, if:

  it is strictly increasing in the beginning;  after that it is constant;  after that it is strictly decreasing. 

The first block (increasing) and the last block (decreasing) may be absent. It is allowed that both of this blocks are absent.

For example, the following three arrays are unimodal: [5, 7, 11, 11, 2, 1], [4, 4, 2], [7], but the following three are not unimodal: [5, 5, 6, 6, 1], [1, 2, 1, 2], [4, 5, 5, 6].

Write a program that checks if an array is unimodal.


-----Input-----

The first line contains integer n (1 ≤ n ≤ 100) — the number of elements in the array.

The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 1 000) — the elements of the array.


-----Output-----

Print ""YES"" if the given array is unimodal. Otherwise, print ""NO"".

You can output each letter in any case (upper or lower).


-----Examples-----
Input
6
1 5 5 5 4 2

Output
YES

Input
5
10 20 30 20 10

Output
YES

Input
4
1 2 1 2

Output
NO

Input
7
3 3 3 3 3 3 3

Output
YES



-----Note-----

In the first example the array is unimodal, because it is strictly increasing in the beginning (from position 1 to position 2, inclusively), that it is constant (from position 2 to position 4, inclusively) and then it is strictly decreasing (from position 4 to position 6, inclusively).","n = int(input())
arr = list(map(int, input().split()))

increasing = False
constant = False
decreasing = False

for i in range(1, n):
    if arr[i] > arr[i-1]:
        if decreasing:
            print(""NO"")
            exit()
        increasing = True
    elif arr[i] == arr[i-1]:
        if increasing:
            increasing = False
            constant = True
    else:
        if increasing:
            increasing = False
        decreasing = True

print(""YES"")
",1,False,False,False,True,True,False,True,True,True,True,True,True,False,96_llama3-70b,0.46078781656624684,-0.038680870689825585,0.5416666666666666
97,apps,llama3-70b,qwen2.5-7b-instruct,"At first, let's define function $f(x)$ as follows: $$ \begin{matrix} f(x) & = & \left\{ \begin{matrix} \frac{x}{2} & \mbox{if } x \text{ is even} \\ x - 1 & \mbox{otherwise } \end{matrix} \right. \end{matrix} $$

We can see that if we choose some value $v$ and will apply function $f$ to it, then apply $f$ to $f(v)$, and so on, we'll eventually get $1$. Let's write down all values we get in this process in a list and denote this list as $path(v)$. For example, $path(1) = [1]$, $path(15) = [15, 14, 7, 6, 3, 2, 1]$, $path(32) = [32, 16, 8, 4, 2, 1]$.

Let's write all lists $path(x)$ for every $x$ from $1$ to $n$. The question is next: what is the maximum value $y$ such that $y$ is contained in at least $k$ different lists $path(x)$?

Formally speaking, you need to find maximum $y$ such that $\left| \{ x ~|~ 1 \le x \le n, y \in path(x) \} \right| \ge k$.


-----Input-----

The first line contains two integers $n$ and $k$ ($1 \le k \le n \le 10^{18}$).


-----Output-----

Print the only integer — the maximum value that is contained in at least $k$ paths.


-----Examples-----
Input
11 3

Output
5

Input
11 6

Output
4

Input
20 20

Output
1

Input
14 5

Output
6

Input
1000000 100

Output
31248



-----Note-----

In the first example, the answer is $5$, since $5$ occurs in $path(5)$, $path(10)$ and $path(11)$.

In the second example, the answer is $4$, since $4$ occurs in $path(4)$, $path(5)$, $path(8)$, $path(9)$, $path(10)$ and $path(11)$.

In the third example $n = k$, so the answer is $1$, since $1$ is the only number occuring in all paths for integers from $1$ to $20$.","n, k = map(int, input().split())

def f(x):
    if x % 2 == 0:
        return x // 2
    else:
        return x - 1

def path(x):
    res = [x]
    while x != 1:
        x = f(x)
        res.append(x)
    return res

count = {}
for i in range(1, n + 1):
    for j in path(i):
        if j not in count:
            count[j] = 0
        count[j] += 1

max_y = 0
for y, cnt in count.items():
    if cnt >= k:
        max_y = max(max_y, y)

print(max_y)
",1,False,False,False,False,True,True,True,True,True,False,True,True,True,97_llama3-70b,0.6015087514198227,0.10190933693449948,0.5416666666666666
99,apps,llama3-70b,qwen2.5-7b-instruct,"Gerald bought two very rare paintings at the Sotheby's auction and he now wants to hang them on the wall. For that he bought a special board to attach it to the wall and place the paintings on the board. The board has shape of an a_1 × b_1 rectangle, the paintings have shape of a a_2 × b_2 and a_3 × b_3 rectangles.

Since the paintings are painted in the style of abstract art, it does not matter exactly how they will be rotated, but still, one side of both the board, and each of the paintings must be parallel to the floor. The paintings can touch each other and the edges of the board, but can not overlap or go beyond the edge of the board. Gerald asks whether it is possible to place the paintings on the board, or is the board he bought not large enough?


-----Input-----

The first line contains two space-separated numbers a_1 and b_1 — the sides of the board. Next two lines contain numbers a_2, b_2, a_3 and b_3 — the sides of the paintings. All numbers a_{i}, b_{i} in the input are integers and fit into the range from 1 to 1000.


-----Output-----

If the paintings can be placed on the wall, print ""YES"" (without the quotes), and if they cannot, print ""NO"" (without the quotes).


-----Examples-----
Input
3 2
1 3
2 1

Output
YES

Input
5 5
3 3
3 3

Output
NO

Input
4 2
2 3
1 2

Output
YES



-----Note-----

That's how we can place the pictures in the first test:

[Image]

And that's how we can do it in the third one.

[Image]","a1, b1 = map(int, input().split())
a2, b2 = map(int, input().split())
a3, b3 = map(int, input().split())

if max(a1, b1) >= max(a2, b2) and min(a1, b1) >= min(a2, b2):
    if max(a1, b1) >= max(a3, b3) and min(a1, b1) >= min(a3, b3):
        print(""YES"")
    else:
        print(""NO"")
else:
    if max(a1, b1) >= max(a3, b3) and min(a1, b1) >= min(a3, b3):
        print(""YES"")
    else:
        print(""NO"")
",1,False,False,False,False,False,False,False,True,False,True,True,False,True,99_llama3-70b,0.44565346236023223,-0.053507185884652454,0.5416666666666666
107,apps,llama3-70b,qwen2.5-7b-instruct,"Есть n-подъездный дом, в каждом подъезде по m этажей, и на каждом этаже каждого подъезда ровно k квартир. Таким образом, в доме всего n·m·k квартир. Они пронумерованы естественным образом от 1 до n·m·k, то есть первая квартира на первом этаже в первом подъезде имеет номер 1, первая квартира на втором этаже первого подъезда имеет номер k + 1 и так далее. Особенность этого дома состоит в том, что он круглый. То есть если обходить его по часовой стрелке, то после подъезда номер 1 следует подъезд номер 2, затем подъезд номер 3 и так далее до подъезда номер n. После подъезда номер n снова идёт подъезд номер 1.

Эдвард живёт в квартире номер a, а Наташа — в квартире номер b. Переход на 1 этаж вверх или вниз по лестнице занимает 5 секунд, переход от двери подъезда к двери соседнего подъезда — 15 секунд, а переход в пределах одного этажа одного подъезда происходит мгновенно. Также в каждом подъезде дома есть лифт. Он устроен следующим образом: он всегда приезжает ровно через 10 секунд после вызова, а чтобы переместить пассажира на один этаж вверх или вниз, лифт тратит ровно 1 секунду. Посадка и высадка происходят мгновенно.

Помогите Эдварду найти минимальное время, за которое он сможет добраться до квартиры Наташи. Считайте, что Эдвард может выйти из подъезда только с первого этажа соответствующего подъезда (это происходит мгновенно). Если Эдвард стоит перед дверью какого-то подъезда, он может зайти в него и сразу окажется на первом этаже этого подъезда (это также происходит мгновенно). Эдвард может выбирать, в каком направлении идти вокруг дома.


-----Входные данные-----

В первой строке входных данных следуют три числа n, m, k (1 ≤ n, m, k ≤ 1000) — количество подъездов в доме, количество этажей в каждом подъезде и количество квартир на каждом этаже каждого подъезда соответственно.

Во второй строке входных данных записаны два числа a и b (1 ≤ a, b ≤ n·m·k) — номера квартир, в которых живут Эдвард и Наташа, соответственно. Гарантируется, что эти номера различны. 


-----Выходные данные-----

Выведите единственное целое число — минимальное время (в секундах), за которое Эдвард сможет добраться от своей квартиры до квартиры Наташи.


-----Примеры-----
Входные данные
4 10 5
200 6

Выходные данные
39

Входные данные
3 1 5
7 2

Выходные данные
15



-----Примечание-----

В первом тестовом примере Эдвард находится в 4 подъезде на 10 этаже, а Наташа находится в 1 подъезде на 2 этаже. Поэтому Эдварду выгодно сначала спуститься на лифте на первый этаж (на это он потратит 19 секунд, из которых 10 — на ожидание и 9 — на поездку на лифте), затем обойти дом против часовой стрелки до подъезда номер 1 (на это он потратит 15 секунд), и наконец подняться по лестнице на этаж номер 2 (на это он потратит 5 секунд). Таким образом, ответ равен 19 + 15 + 5 = 39.

Во втором тестовом примере Эдвард живёт в подъезде 2 на этаже 1, а Наташа находится в подъезде 1 на этаже 1. Поэтому Эдварду выгодно просто обойти дом по часовой стрелке до подъезда 1, на это он потратит 15 секунд.","n, m, k = map(int, input().split())
a, b = map(int, input().split())

# Calculate the floor and block number of Edward and Natasha
a_floor = (a - 1) % m + 1
a_block = (a - 1) // (m * k) + 1
b_floor = (b - 1) % m + 1
b_block = (b - 1) // (m * k) + 1

# Calculate the minimum time to reach Natasha's block
min_block_time = min(abs(a_block - b_block), n - abs(a_block - b_block)) * 15

# Calculate the minimum time to reach Natasha's floor
if a_floor > b_floor:
    min_floor_time = (a_floor - b_floor) * 5 + 10
else:
    min_floor_time = (b_floor - a_floor) * 5 + 10

print(min_block_time + min_floor_time)
",1,False,False,False,True,False,False,True,True,False,True,False,False,True,107_llama3-70b,0.8822502879896532,0.4610322878715614,0.7083333333333334
112,apps,llama3-70b,qwen2.5-7b-instruct,"You are given two integers n and k. Find k-th smallest divisor of n, or report that it doesn't exist.

Divisor of n is any such natural number, that n can be divided by it without remainder.


-----Input-----

The first line contains two integers n and k (1 ≤ n ≤ 10^15, 1 ≤ k ≤ 10^9).


-----Output-----

If n has less than k divisors, output -1.

Otherwise, output the k-th smallest divisor of n.


-----Examples-----
Input
4 2

Output
2

Input
5 3

Output
-1

Input
12 5

Output
6



-----Note-----

In the first example, number 4 has three divisors: 1, 2 and 4. The second one is 2.

In the second example, number 5 has only two divisors: 1 and 5. The third divisor doesn't exist, so the answer is -1.","n, k = map(int, input().split())
divisors = []
for i in range(1, int(n ** 0.5) + 1):
    if n % i == 0:
        divisors.append(i)
        if i * i != n:
            divisors.append(n // i)
divisors.sort()
if k > len(divisors):
    print(-1)
else:
    print(divisors[k - 1])
",1,True,False,False,True,True,True,True,True,False,False,True,True,True,112_llama3-70b,0.7604441505365013,0.2804575585748434,0.625
115,apps,llama3-70b,qwen2.5-7b-instruct,"You are given two matrices $A$ and $B$. Each matrix contains exactly $n$ rows and $m$ columns. Each element of $A$ is either $0$ or $1$; each element of $B$ is initially $0$.

You may perform some operations with matrix $B$. During each operation, you choose any submatrix of $B$ having size $2 \times 2$, and replace every element in the chosen submatrix with $1$. In other words, you choose two integers $x$ and $y$ such that $1 \le x < n$ and $1 \le y < m$, and then set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$.

Your goal is to make matrix $B$ equal to matrix $A$. Two matrices $A$ and $B$ are equal if and only if every element of matrix $A$ is equal to the corresponding element of matrix $B$.

Is it possible to make these matrices equal? If it is, you have to come up with a sequence of operations that makes $B$ equal to $A$. Note that you don't have to minimize the number of operations.


-----Input-----

The first line contains two integers $n$ and $m$ ($2 \le n, m \le 50$).

Then $n$ lines follow, each containing $m$ integers. The $j$-th integer in the $i$-th line is $A_{i, j}$. Each integer is either $0$ or $1$.


-----Output-----

If it is impossible to make $B$ equal to $A$, print one integer $-1$.

Otherwise, print any sequence of operations that transforms $B$ into $A$ in the following format: the first line should contain one integer $k$ — the number of operations, and then $k$ lines should follow, each line containing two integers $x$ and $y$ for the corresponding operation (set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$). The condition $0 \le k \le 2500$ should hold.


-----Examples-----
Input
3 3
1 1 1
1 1 1
0 1 1

Output
3
1 1
1 2
2 2

Input
3 3
1 0 1
1 0 1
0 0 0

Output
-1

Input
3 2
0 0
0 0
0 0

Output
0



-----Note-----

The sequence of operations in the first example: $\begin{matrix} 0 & 0 & 0 & & 1 & 1 & 0 & & 1 & 1 & 1 & & 1 & 1 & 1 \\ 0 & 0 & 0 & \rightarrow & 1 & 1 & 0 & \rightarrow & 1 & 1 & 1 & \rightarrow & 1 & 1 & 1 \\ 0 & 0 & 0 & & 0 & 0 & 0 & & 0 & 0 & 0 & & 0 & 1 & 1 \end{matrix}$","n, m = map(int, input().split())
A = [list(map(int, input().split())) for _ in range(n)]

ops = []
for i in range(n-1):
    for j in range(m-1):
        if A[i][j] == 1 and A[i+1][j] == 1 and A[i][j+1] == 1 and A[i+1][j+1] == 1:
            continue
        if A[i][j] == 1 or A[i+1][j] == 1 or A[i][j+1] == 1 or A[i+1][j+1] == 1:
            ops.append((i+1, j+1))

if len(ops) > 2500:
    print(-1)
else:
    print(len(ops))
    for op in ops:
        print(op[0], op[1])
",1,False,False,False,False,False,True,False,False,False,True,True,True,True,115_llama3-70b,0.8967088598411286,0.4905059206596866,0.7083333333333334
117,apps,llama3-70b,qwen2.5-7b-instruct,"Today an outstanding event is going to happen in the forest — hedgehog Filya will come to his old fried Sonya!

Sonya is an owl and she sleeps during the day and stay awake from minute l_1 to minute r_1 inclusive. Also, during the minute k she prinks and is unavailable for Filya.

Filya works a lot and he plans to visit Sonya from minute l_2 to minute r_2 inclusive.

Calculate the number of minutes they will be able to spend together.


-----Input-----

The only line of the input contains integers l_1, r_1, l_2, r_2 and k (1 ≤ l_1, r_1, l_2, r_2, k ≤ 10^18, l_1 ≤ r_1, l_2 ≤ r_2), providing the segments of time for Sonya and Filya and the moment of time when Sonya prinks.


-----Output-----

Print one integer — the number of minutes Sonya and Filya will be able to spend together.


-----Examples-----
Input
1 10 9 20 1

Output
2

Input
1 100 50 200 75

Output
50



-----Note-----

In the first sample, they will be together during minutes 9 and 10.

In the second sample, they will be together from minute 50 to minute 74 and from minute 76 to minute 100.","l1, r1, l2, r2, k = map(int, input().split())

# Calculate the intersection of Sonya's and Filya's time segments
start = max(l1, l2)
end = min(r1, r2)

# If Sonya prinks during their common time, subtract 1 minute
if start <= k <= end:
    end -= 1

# Calculate the number of minutes they can spend together
minutes_together = max(0, end - start + 1)

print(minutes_together)
",1,True,True,True,True,True,True,True,True,True,True,True,False,True,117_llama3-70b,0.8242279258306444,0.3607331723325495,0.75
118,apps,llama3-70b,qwen2.5-7b-instruct,"There is a grass field that stretches infinitely.
In this field, there is a negligibly small cow. Let (x, y) denote the point that is x\ \mathrm{cm} south and y\ \mathrm{cm} east of the point where the cow stands now. The cow itself is standing at (0, 0).
There are also N north-south lines and M east-west lines drawn on the field. The i-th north-south line is the segment connecting the points (A_i, C_i) and (B_i, C_i), and the j-th east-west line is the segment connecting the points (D_j, E_j) and (D_j, F_j).
What is the area of the region the cow can reach when it can move around as long as it does not cross the segments (including the endpoints)? If this area is infinite, print INF instead.

-----Constraints-----
 - All values in input are integers between -10^9 and 10^9  (inclusive).
 - 1 \leq N, M \leq 1000
 - A_i < B_i\ (1 \leq i \leq N)
 - E_j < F_j\ (1 \leq j \leq M)
 - The point (0, 0) does not lie on any of the given segments.

-----Input-----
Input is given from Standard Input in the following format:
N M
A_1 B_1 C_1
:
A_N B_N C_N
D_1 E_1 F_1
:
D_M E_M F_M

-----Output-----
If the area of the region the cow can reach is infinite, print INF; otherwise, print an integer representing the area in \mathrm{cm^2}.
(Under the constraints, it can be proved that the area of the region is always an integer if it is not infinite.)

-----Sample Input-----
5 6
1 2 0
0 1 1
0 2 2
-3 4 -1
-2 6 3
1 0 1
0 1 2
2 0 2
-1 -4 5
3 -2 4
1 2 4

-----Sample Output-----
13

The area of the region the cow can reach is 13\ \mathrm{cm^2}.","from functools import cmp_to_key

N, M = map(int, input().split())

north_south_lines = []
for _ in range(N):
    A, B, C = map(int, input().split())
    north_south_lines.append((C, A, B))

east_west_lines = []
for _ in range(M):
    D, E, F = map(int, input().split())
    east_west_lines.append((D, E, F))

def intersect(line1, line2):
    x1, y1, x2 = line1
    x3, y3, x4 = line2
    denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4)
    if denom == 0:
        return False
    t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / denom
    u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / denom
    if 0 <= t <= 1 and 0 <= u <= 1:
        return True
    return False

north_south_lines.sort(key=cmp_to_key(lambda x, y: x - y))
east_west_lines.sort(key=cmp_to_key(lambda x, y: x - y))

x_points = set()
y_points = set()

for i in range(N):
    for j in range(i + 1, N):
        if north_south_lines[i][0] == north_south_lines[j][0]:
            continue
        x_points.add(north_south_lines[i][0])
        x_points.add(north_south_lines[j][0])

for i in range(M):
    for j in range(i + 1, M):
        if east_west_lines[i][0] == east_west_lines[j][0]:
            continue
        y_points.add(east_west_lines[i][0])

for i in range(N):
    for j in range(M):
        if intersect(north_south_lines[i], east_west_lines[j]):
            x_points.add(north_south_lines[i][0])
            y_points.add(east_west_lines[j][0])

x_points = sorted(list(x_points))
y_points = sorted(list(y_points))

area = 0
for i in range(len(x_points) - 1):
    for j in range(len(y_points) - 1):
        area += (x_points[i + 1] - x_points[i]) * (y_points[j + 1] - y_points[j])

if area == 0:
    print(""INF"")
else:
    print(area)
",1,False,False,False,True,True,False,False,False,False,False,True,False,False,118_llama3-70b,0.8859156860437958,0.47246944408307595,0.75
139,apps,llama3-70b,qwen2.5-7b-instruct,"Little girl Alyona is in a shop to buy some copybooks for school. She study four subjects so she wants to have equal number of copybooks for each of the subjects. There are three types of copybook's packs in the shop: it is possible to buy one copybook for a rubles, a pack of two copybooks for b rubles, and a pack of three copybooks for c rubles. Alyona already has n copybooks.

What is the minimum amount of rubles she should pay to buy such number of copybooks k that n + k is divisible by 4? There are infinitely many packs of any type in the shop. Alyona can buy packs of different type in the same purchase.


-----Input-----

The only line contains 4 integers n, a, b, c (1 ≤ n, a, b, c ≤ 10^9).


-----Output-----

Print the minimum amount of rubles she should pay to buy such number of copybooks k that n + k is divisible by 4.


-----Examples-----
Input
1 1 3 4

Output
3

Input
6 2 1 1

Output
1

Input
4 4 4 4

Output
0

Input
999999999 1000000000 1000000000 1000000000

Output
1000000000



-----Note-----

In the first example Alyona can buy 3 packs of 1 copybook for 3a = 3 rubles in total. After that she will have 4 copybooks which she can split between the subjects equally. 

In the second example Alyuna can buy a pack of 2 copybooks for b = 1 ruble. She will have 8 copybooks in total.

In the third example Alyona can split the copybooks she already has between the 4 subject equally, so she doesn't need to buy anything.

In the fourth example Alyona should buy one pack of one copybook.","n, a, b, c = map(int, input().split())
k = 4 - n % 4
if k == 4:
    k = 0
ans = float('inf')
for i in range(k // 3 + 1):
    j = (k - 3 * i) // 2
    if 3 * i + 2 * j <= k:
        ans = min(ans, 3 * i * c + j * b + (k - 3 * i - 2 * j) * a)
print(ans)
",1,False,True,True,True,True,True,True,True,True,True,False,True,True,139_llama3-70b,0.857008858514336,0.41767737397302485,0.6666666666666666
147,apps,llama3-70b,qwen2.5-7b-instruct,"This morning, Roman woke up and opened the browser with $n$ opened tabs numbered from $1$ to $n$. There are two kinds of tabs: those with the information required for the test and those with social network sites. Roman decided that there are too many tabs open so he wants to close some of them.

He decided to accomplish this by closing every $k$-th ($2 \leq k \leq n - 1$) tab. Only then he will decide whether he wants to study for the test or to chat on the social networks. Formally, Roman will choose one tab (let its number be $b$) and then close all tabs with numbers $c = b + i \cdot k$ that satisfy the following condition: $1 \leq c \leq n$ and $i$ is an integer (it may be positive, negative or zero).

For example, if $k = 3$, $n = 14$ and Roman chooses $b = 8$, then he will close tabs with numbers $2$, $5$, $8$, $11$ and $14$.

After closing the tabs Roman will calculate the amount of remaining tabs with the information for the test (let's denote it $e$) and the amount of remaining social network tabs ($s$). Help Roman to calculate the maximal absolute value of the difference of those values $|e - s|$ so that it would be easy to decide what to do next.


-----Input-----

The first line contains two integers $n$ and $k$ ($2 \leq k < n \leq 100$) — the amount of tabs opened currently and the distance between the tabs closed.

The second line consists of $n$ integers, each of them equal either to $1$ or to $-1$. The $i$-th integer denotes the type of the $i$-th tab: if it is equal to $1$, this tab contains information for the test, and if it is equal to $-1$, it's a social network tab.


-----Output-----

Output a single integer — the maximum absolute difference between the amounts of remaining tabs of different types $|e - s|$.


-----Examples-----
Input
4 2
1 1 -1 1

Output
2

Input
14 3
-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1

Output
9



-----Note-----

In the first example we can choose $b = 1$ or $b = 3$. We will delete then one tab of each type and the remaining tabs are then all contain test information. Thus, $e = 2$ and $s = 0$ and $|e - s| = 2$.

In the second example, on the contrary, we can leave opened only tabs that have social networks opened in them.","n, k = map(int, input().split())
tabs = list(map(int, input().split()))

max_diff = 0
for b in range(1, n + 1):
    e, s = 0, 0
    for i in range(1, n + 1):
        if (i - b) % k != 0:
            e += tabs[i - 1] == 1
            s += tabs[i - 1] == -1
    max_diff = max(max_diff, abs(e - s))

print(max_diff)
",1,True,True,False,True,True,True,True,True,True,True,True,True,True,147_llama3-70b,0.854286478749548,0.3752192952508671,0.8333333333333334
166,apps,llama3-70b,qwen2.5-7b-instruct,"Vasiliy spent his vacation in a sanatorium, came back and found that he completely forgot details of his vacation! 

Every day there was a breakfast, a dinner and a supper in a dining room of the sanatorium (of course, in this order). The only thing that Vasiliy has now is a card from the dining room contaning notes how many times he had a breakfast, a dinner and a supper (thus, the card contains three integers). Vasiliy could sometimes have missed some meal, for example, he could have had a breakfast and a supper, but a dinner, or, probably, at some days he haven't been at the dining room at all.

Vasiliy doesn't remember what was the time of the day when he arrived to sanatorium (before breakfast, before dinner, before supper or after supper), and the time when he left it (before breakfast, before dinner, before supper or after supper). So he considers any of these options. After Vasiliy arrived to the sanatorium, he was there all the time until he left. Please note, that it's possible that Vasiliy left the sanatorium on the same day he arrived.

According to the notes in the card, help Vasiliy determine the minimum number of meals in the dining room that he could have missed. We shouldn't count as missed meals on the arrival day before Vasiliy's arrival and meals on the departure day after he left.


-----Input-----

The only line contains three integers b, d and s (0 ≤ b, d, s ≤ 10^18,  b + d + s ≥ 1) — the number of breakfasts, dinners and suppers which Vasiliy had during his vacation in the sanatorium. 


-----Output-----

Print single integer — the minimum possible number of meals which Vasiliy could have missed during his vacation. 


-----Examples-----
Input
3 2 1

Output
1


Input
1 0 0

Output
0


Input
1 1 1

Output
0


Input
1000000000000000000 0 1000000000000000000

Output
999999999999999999





-----Note-----

In the first sample, Vasiliy could have missed one supper, for example, in case he have arrived before breakfast, have been in the sanatorium for two days (including the day of arrival) and then have left after breakfast on the third day. 

In the second sample, Vasiliy could have arrived before breakfast, have had it, and immediately have left the sanatorium, not missing any meal.

In the third sample, Vasiliy could have been in the sanatorium for one day, not missing any meal.","b, d, s = map(int, input().split())
print(max(0, b - d, b - s, d - s))
",1,False,False,False,True,True,True,False,False,False,True,False,False,False,166_llama3-70b,0.7941543309745088,0.3231319540048668,0.625
168,apps,llama3-70b,qwen2.5-7b-instruct,"You are given two strings a and b. You have to remove the minimum possible number of consecutive (standing one after another) characters from string b in such a way that it becomes a subsequence of string a. It can happen that you will not need to remove any characters at all, or maybe you will have to remove all of the characters from b and make it empty.

Subsequence of string s is any such string that can be obtained by erasing zero or more characters (not necessarily consecutive) from string s.


-----Input-----

The first line contains string a, and the second line — string b. Both of these strings are nonempty and consist of lowercase letters of English alphabet. The length of each string is no bigger than 10^5 characters.


-----Output-----

On the first line output a subsequence of string a, obtained from b by erasing the minimum number of consecutive characters.

If the answer consists of zero characters, output «-» (a minus sign).


-----Examples-----
Input
hi
bob

Output
-

Input
abca
accepted

Output
ac

Input
abacaba
abcdcba

Output
abcba



-----Note-----

In the first example strings a and b don't share any symbols, so the longest string that you can get is empty.

In the second example ac is a subsequence of a, and at the same time you can obtain it by erasing consecutive symbols cepted from string b.","a = input()
b = input()

i = 0
j = 0
ans = []

while i < len(a) and j < len(b):
    if a[i] == b[j]:
        ans.append(a[i])
        i += 1
        j += 1
    else:
        i += 1

if len(ans) == 0:
    print('-')
else:
    print(''.join(ans))
",1,False,False,False,True,True,True,True,True,False,False,False,False,True,168_llama3-70b,0.8388713124323346,0.3900415254551657,0.7083333333333334
181,apps,llama3-70b,qwen2.5-7b-instruct,"Andrey received a postcard from Irina. It contained only the words ""Hello, Andrey!"", and a strange string consisting of lowercase Latin letters, snowflakes and candy canes. Andrey thought that this string is an encrypted message, and decided to decrypt it.

Andrey noticed that snowflakes and candy canes always stand after the letters, so he supposed that the message was encrypted as follows. Candy cane means that the letter before it can be removed, or can be left. A snowflake means that the letter before it can be removed, left, or repeated several times.

For example, consider the following string:  [Image] 

This string can encode the message «happynewyear». For this, candy canes and snowflakes should be used as follows:   candy cane 1: remove the letter w,  snowflake 1: repeat the letter p twice,  candy cane 2: leave the letter n,  snowflake 2: remove the letter w,  snowflake 3: leave the letter e. 

 [Image] 

Please note that the same string can encode different messages. For example, the string above can encode «hayewyar», «happpppynewwwwwyear», and other messages.

Andrey knows that messages from Irina usually have a length of $k$ letters. Help him to find out if a given string can encode a message of $k$ letters, and if so, give an example of such a message.


-----Input-----

The first line contains the string received in the postcard. The string consists only of lowercase Latin letters, as well as the characters «*» and «?», meaning snowflake and candy cone, respectively. These characters can only appear immediately after the letter. The length of the string does not exceed $200$.

The second line contains an integer number $k$ ($1 \leq k \leq 200$), the required message length.


-----Output-----

Print any message of length $k$ that the given string can encode, or «Impossible» if such a message does not exist.


-----Examples-----
Input
hw?ap*yn?eww*ye*ar
12

Output
happynewyear

Input
ab?a
2

Output
aa
Input
ab?a
3

Output
aba
Input
ababb
5

Output
ababb
Input
ab?a
1

Output
Impossible","s = input()
k = int(input())
ans = []
i = 0
while i < len(s) and len(ans) < k:
    if s[i].isalpha():
        ans.append(s[i])
        if i + 1 < len(s) and s[i + 1] == '?':
            i += 2
        elif i + 1 < len(s) and s[i + 1] == '*':
            while i + 1 < len(s) and s[i + 1] == '*':
                ans.append(s[i])
                i += 2
            i += 1
        else:
            i += 1
    else:
        i += 1
if len(ans) == k:
    print(''.join(ans))
else:
    print('Impossible')
",1,False,False,False,True,True,True,True,False,True,True,True,True,True,181_llama3-70b,0.7274293889851403,0.24037283084988623,0.625
187,apps,llama3-70b,qwen2.5-7b-instruct,"Students in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.

The students don’t want to use too many blocks, but they also want to be unique, so no two students’ towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.


-----Input-----

The first line of the input contains two space-separated integers n and m (0 ≤ n, m ≤ 1 000 000, n + m > 0) — the number of students using two-block pieces and the number of students using three-block pieces, respectively.


-----Output-----

Print a single integer, denoting the minimum possible height of the tallest tower.


-----Examples-----
Input
1 3

Output
9

Input
3 2

Output
8

Input
5 0

Output
10



-----Note-----

In the first case, the student using two-block pieces can make a tower of height 4, and the students using three-block pieces can make towers of height 3, 6, and 9 blocks. The tallest tower has a height of 9 blocks.

In the second case, the students can make towers of heights 2, 4, and 8 with two-block pieces and towers of heights 3 and 6 with three-block pieces, for a maximum height of 8 blocks.","n, m = map(int, input().split())
towers = set()
for i in range(1, n + 1):
    towers.add(i * 2)
for i in range(1, m + 1):
    towers.add(i * 3)
print(max(towers))
",1,False,False,True,True,True,True,False,True,True,False,False,False,False,187_llama3-70b,0.8225980361842448,0.3634718884544843,0.7083333333333334
191,apps,llama3-70b,qwen2.5-7b-instruct,"Карта звёздного неба представляет собой прямоугольное поле, состоящее из n строк по m символов в каждой строке. Каждый символ — это либо «.» (означает пустой участок неба), либо «*» (означает то, что в этом месте на небе есть звезда). 

Новое издание карты звёздного неба будет напечатано на квадратных листах, поэтому требуется найти минимально возможную сторону квадрата, в который могут поместиться все звезды. Границы искомого квадрата должны быть параллельны сторонам заданного прямоугольного поля.


-----Входные данные-----

В первой строке входных данных записаны два числа n и m (1 ≤ n, m ≤ 1000) — количество строк и столбцов на карте звездного неба.

В следующих n строках задано по m символов. Каждый символ — это либо «.» (пустой участок неба), либо «*» (звезда).

Гарантируется, что на небе есть хотя бы одна звезда.


-----Выходные данные-----

Выведите одно число — минимально возможную сторону квадрата, которым можно накрыть все звезды.


-----Примеры-----
Входные данные
4 4
....
..*.
...*
..**

Выходные данные
3

Входные данные
1 3
*.*

Выходные данные
3

Входные данные
2 1
.
*

Выходные данные
1



-----Примечание-----

Один из возможных ответов на первый тестовый пример:

 [Image] 

Один из возможных ответов на второй тестовый пример (обратите внимание, что покрывающий квадрат выходит за пределы карты звездного неба):

 [Image] 

Ответ на третий тестовый пример:

 [Image]","n, m = map(int, input().split())
stars = []
for _ in range(n):
    row = input()
    for j, c in enumerate(row):
        if c == '*':
            stars.append((j, _))

min_x = min(x for x, y in stars)
max_x = max(x for x, y in stars)
min_y = min(y for x, y in stars)
max_y = max(y for x, y in stars)

side = max(max_x - min_x + 1, max_y - min_y + 1)
print(side)
",1,True,True,True,True,True,True,True,True,True,False,True,True,True,191_llama3-70b,0.5906126045643085,0.09096909090919665,0.5416666666666666
198,apps,llama3-70b,qwen2.5-7b-instruct,"An online contest will soon be held on ForceCoders, a large competitive programming platform. The authors have prepared $n$ problems; and since the platform is very popular, $998244351$ coder from all over the world is going to solve them.

For each problem, the authors estimated the number of people who would solve it: for the $i$-th problem, the number of accepted solutions will be between $l_i$ and $r_i$, inclusive.

The creator of ForceCoders uses different criteria to determine if the contest is good or bad. One of these criteria is the number of inversions in the problem order. An inversion is a pair of problems $(x, y)$ such that $x$ is located earlier in the contest ($x < y$), but the number of accepted solutions for $y$ is strictly greater.

Obviously, both the creator of ForceCoders and the authors of the contest want the contest to be good. Now they want to calculate the probability that there will be no inversions in the problem order, assuming that for each problem $i$, any integral number of accepted solutions for it (between $l_i$ and $r_i$) is equally probable, and all these numbers are independent.


-----Input-----

The first line contains one integer $n$ ($2 \le n \le 50$) — the number of problems in the contest.

Then $n$ lines follow, the $i$-th line contains two integers $l_i$ and $r_i$ ($0 \le l_i \le r_i \le 998244351$) — the minimum and maximum number of accepted solutions for the $i$-th problem, respectively.


-----Output-----

The probability that there will be no inversions in the contest can be expressed as an irreducible fraction $\frac{x}{y}$, where $y$ is coprime with $998244353$. Print one integer — the value of $xy^{-1}$, taken modulo $998244353$, where $y^{-1}$ is an integer such that $yy^{-1} \equiv 1$ $(mod$ $998244353)$.


-----Examples-----
Input
3
1 2
1 2
1 2

Output
499122177

Input
2
42 1337
13 420

Output
578894053

Input
2
1 1
0 0

Output
1

Input
2
1 1
1 1

Output
1



-----Note-----

The real answer in the first test is $\frac{1}{2}$.","import math

MOD = 998244353

def mul(a, b):
    return (a * b) % MOD

def power(a, b):
    res = 1
    while b > 0:
        if b & 1:
            res = mul(res, a)
        a = mul(a, a)
        b >>= 1
    return res

def inv(a):
    return power(a, MOD - 2)

n = int(input())
a = [list(map(int, input().split())) for _ in range(n)]

res = 1
for i in range(n):
    cnt = 1
    for j in range(i + 1, n):
        if a[i][0] <= a[j][1]:
            cnt = mul(cnt, a[j][1] - a[i][0] + 1)
    res = mul(res, cnt)

for i in range(n):
    res = mul(res, inv(a[i][1] - a[i][0] + 1))

print(res)
",1,False,False,False,False,True,True,True,True,True,False,True,False,False,198_llama3-70b,0.8263793687126502,0.37186575487735446,0.6666666666666666
199,apps,llama3-70b,qwen2.5-7b-instruct,"Pasha has a wooden stick of some positive integer length n. He wants to perform exactly three cuts to get four parts of the stick. Each part must have some positive integer length and the sum of these lengths will obviously be n. 

Pasha likes rectangles but hates squares, so he wonders, how many ways are there to split a stick into four parts so that it's possible to form a rectangle using these parts, but is impossible to form a square.

Your task is to help Pasha and count the number of such ways. Two ways to cut the stick are considered distinct if there exists some integer x, such that the number of parts of length x in the first way differ from the number of parts of length x in the second way.


-----Input-----

The first line of the input contains a positive integer n (1 ≤ n ≤ 2·10^9) — the length of Pasha's stick.


-----Output-----

The output should contain a single integer — the number of ways to split Pasha's stick into four parts of positive integer length so that it's possible to make a rectangle by connecting the ends of these parts, but is impossible to form a square. 


-----Examples-----
Input
6

Output
1

Input
20

Output
4



-----Note-----

There is only one way to divide the stick in the first sample {1, 1, 2, 2}.

Four ways to divide the stick in the second sample are {1, 1, 9, 9}, {2, 2, 8, 8}, {3, 3, 7, 7} and {4, 4, 6, 6}. Note that {5, 5, 5, 5} doesn't work.","def count_ways(n):
    ways = 0
    for a in range(1, n // 2 + 1):
        for b in range(a, (n - a) // 2 + 1):
            if a != b and 2 * (a + b) == n:
                ways += 1
    return ways

n = int(input())
print(count_ways(n))
",1,False,True,False,True,True,True,True,True,True,True,True,True,True,199_llama3-70b,0.6434567778509719,0.14620906637956121,0.5416666666666666
207,apps,llama3-70b,qwen2.5-7b-instruct,"A frog is initially at position $0$ on the number line. The frog has two positive integers $a$ and $b$. From a position $k$, it can either jump to position $k+a$ or $k-b$.

Let $f(x)$ be the number of distinct integers the frog can reach if it never jumps on an integer outside the interval $[0, x]$. The frog doesn't need to visit all these integers in one trip, that is, an integer is counted if the frog can somehow reach it if it starts from $0$.

Given an integer $m$, find $\sum_{i=0}^{m} f(i)$. That is, find the sum of all $f(i)$ for $i$ from $0$ to $m$.


-----Input-----

The first line contains three integers $m, a, b$ ($1 \leq m \leq 10^9, 1 \leq a,b \leq 10^5$).


-----Output-----

Print a single integer, the desired sum.


-----Examples-----
Input
7 5 3

Output
19

Input
1000000000 1 2019

Output
500000001500000001

Input
100 100000 1

Output
101

Input
6 4 5

Output
10



-----Note-----

In the first example, we must find $f(0)+f(1)+\ldots+f(7)$. We have $f(0) = 1, f(1) = 1, f(2) = 1, f(3) = 1, f(4) = 1, f(5) = 3, f(6) = 3, f(7) = 8$. The sum of these values is $19$.

In the second example, we have $f(i) = i+1$, so we want to find $\sum_{i=0}^{10^9} i+1$.

In the third example, the frog can't make any jumps in any case.","m, a, b = map(int, input().split())
dp = [0]*(m+1)
dp[0] = 1
for i in range(m+1):
    if i+a <= m:
        dp[i+a] += dp[i]
    if i-b >= 0:
        dp[i] += dp[i-b]
print(sum(dp))
",1,False,False,False,True,False,False,False,True,True,True,True,True,False,207_llama3-70b,0.5811835376272438,0.07923404231990178,0.625
209,apps,llama3-70b,qwen2.5-7b-instruct,"Pashmak has fallen in love with an attractive girl called Parmida since one year ago...

Today, Pashmak set up a meeting with his partner in a romantic garden. Unfortunately, Pashmak has forgotten where the garden is. But he remembers that the garden looks like a square with sides parallel to the coordinate axes. He also remembers that there is exactly one tree on each vertex of the square. Now, Pashmak knows the position of only two of the trees. Help him to find the position of two remaining ones.


-----Input-----

The first line contains four space-separated x_1, y_1, x_2, y_2 ( - 100 ≤ x_1, y_1, x_2, y_2 ≤ 100) integers, where x_1 and y_1 are coordinates of the first tree and x_2 and y_2 are coordinates of the second tree. It's guaranteed that the given points are distinct.


-----Output-----

If there is no solution to the problem, print -1. Otherwise print four space-separated integers x_3, y_3, x_4, y_4 that correspond to the coordinates of the two other trees. If there are several solutions you can output any of them. 

Note that x_3, y_3, x_4, y_4 must be in the range ( - 1000 ≤ x_3, y_3, x_4, y_4 ≤ 1000).


-----Examples-----
Input
0 0 0 1

Output
1 0 1 1

Input
0 0 1 1

Output
0 1 1 0

Input
0 0 1 2

Output
-1","x1, y1, x2, y2 = map(int, input().split())

if x1 == x2:
    x3, x4 = x1 + abs(y1 - y2), x1 - abs(y1 - y2)
    y3, y4 = y1, y2
else:
    y3, y4 = y1 + abs(x1 - x2), y1 - abs(x1 - x2)
    x3, x4 = x1, x2

if -1000 <= x3 <= 1000 and -1000 <= x4 <= 1000 and -1000 <= y3 <= 1000 and -1000 <= y4 <= 1000:
    print(x3, y3, x4, y4)
else:
    print(-1)
",1,False,False,False,False,False,False,False,False,True,True,False,False,False,209_llama3-70b,0.6568180703679871,0.16011500355143357,0.5416666666666666
211,apps,llama3-70b,qwen2.5-7b-instruct,"One spring day on his way to university Lesha found an array A. Lesha likes to split arrays into several parts. This time Lesha decided to split the array A into several, possibly one, new arrays so that the sum of elements in each of the new arrays is not zero. One more condition is that if we place the new arrays one after another they will form the old array A.

Lesha is tired now so he asked you to split the array. Help Lesha!


-----Input-----

The first line contains single integer n (1 ≤ n ≤ 100) — the number of elements in the array A.

The next line contains n integers a_1, a_2, ..., a_{n} ( - 10^3 ≤ a_{i} ≤ 10^3) — the elements of the array A.


-----Output-----

If it is not possible to split the array A and satisfy all the constraints, print single line containing ""NO"" (without quotes).

Otherwise in the first line print ""YES"" (without quotes). In the next line print single integer k — the number of new arrays. In each of the next k lines print two integers l_{i} and r_{i} which denote the subarray A[l_{i}... r_{i}] of the initial array A being the i-th new array. Integers l_{i}, r_{i} should satisfy the following conditions:  l_1 = 1  r_{k} = n  r_{i} + 1 = l_{i} + 1 for each 1 ≤ i < k. 

If there are multiple answers, print any of them.


-----Examples-----
Input
3
1 2 -3

Output
YES
2
1 2
3 3

Input
8
9 -12 3 4 -4 -10 7 3

Output
YES
2
1 2
3 8

Input
1
0

Output
NO

Input
4
1 2 3 -5

Output
YES
4
1 1
2 2
3 3
4 4","n = int(input())
a = list(map(int, input().split()))
prefix_sum = [0] * (n + 1)
for i in range(n):
    prefix_sum[i + 1] = prefix_sum[i] + a[i]

if prefix_sum[n] == 0:
    print(""NO"")
else:
    print(""YES"")
    k = 1
    l = 1
    for r in range(1, n + 1):
        if prefix_sum[r] != 0 and prefix_sum[r] != prefix_sum[n]:
            print(k, l, r)
            k += 1
            l = r
    print(k, l, n)
",1,False,False,False,True,False,True,False,True,True,True,False,False,False,211_llama3-70b,0.5857055335578474,0.08375838445913218,0.625
213,apps,llama3-70b,qwen2.5-7b-instruct,"You are given a non-negative integer n, its decimal representation consists of at most 100 digits and doesn't contain leading zeroes.

Your task is to determine if it is possible in this case to remove some of the digits (possibly not remove any digit at all) so that the result contains at least one digit, forms a non-negative integer, doesn't have leading zeroes and is divisible by 8. After the removing, it is forbidden to rearrange the digits.

If a solution exists, you should print it.


-----Input-----

The single line of the input contains a non-negative integer n. The representation of number n doesn't contain any leading zeroes and its length doesn't exceed 100 digits. 


-----Output-----

Print ""NO"" (without quotes), if there is no such way to remove some digits from number n. 

Otherwise, print ""YES"" in the first line and the resulting number after removing digits from number n in the second line. The printed number must be divisible by 8.

If there are multiple possible answers, you may print any of them.


-----Examples-----
Input
3454

Output
YES
344

Input
10

Output
YES
0

Input
111111

Output
NO","n = int(input())
digits = [int(d) for d in str(n)]
for i in range(len(digits)):
    new_n = int(''.join(map(str, digits[:i] + digits[i+1:])))
    if new_n % 8 == 0 and str(new_n)[0] != '0':
        print(""YES"")
        print(new_n)
        exit()
print(""NO"")
",1,False,False,False,True,True,True,False,True,True,False,True,True,True,213_llama3-70b,0.8229039617038127,0.36037537446466134,0.625
232,apps,llama3-70b,qwen2.5-7b-instruct,"The main street of Berland is a straight line with n houses built along it (n is an even number). The houses are located at both sides of the street. The houses with odd numbers are at one side of the street and are numbered from 1 to n - 1 in the order from the beginning of the street to the end (in the picture: from left to right). The houses with even numbers are at the other side of the street and are numbered from 2 to n in the order from the end of the street to its beginning (in the picture: from right to left). The corresponding houses with even and odd numbers are strictly opposite each other, that is, house 1 is opposite house n, house 3 is opposite house n - 2, house 5 is opposite house n - 4 and so on. [Image] 

Vasya needs to get to house number a as quickly as possible. He starts driving from the beginning of the street and drives his car to house a. To get from the beginning of the street to houses number 1 and n, he spends exactly 1 second. He also spends exactly one second to drive the distance between two neighbouring houses. Vasya can park at any side of the road, so the distance between the beginning of the street at the houses that stand opposite one another should be considered the same.

Your task is: find the minimum time Vasya needs to reach house a.


-----Input-----

The first line of the input contains two integers, n and a (1 ≤ a ≤ n ≤ 100 000) — the number of houses on the street and the number of the house that Vasya needs to reach, correspondingly. It is guaranteed that number n is even.


-----Output-----

Print a single integer — the minimum time Vasya needs to get from the beginning of the street to house a.


-----Examples-----
Input
4 2

Output
2

Input
8 5

Output
3



-----Note-----

In the first sample there are only four houses on the street, two houses at each side. House 2 will be the last at Vasya's right.

The second sample corresponds to picture with n = 8. House 5 is the one before last at Vasya's left.","n, a = map(int, input().split())
if a <= n // 2:
    print(a // 2 + a % 2)
else:
    print((n - a + 1) // 2 + (n - a + 1) % 2)
",1,False,False,False,True,True,True,True,True,False,True,True,False,False,232_llama3-70b,0.7398145309519372,0.25537191113721835,0.625
236,apps,llama3-70b,qwen2.5-7b-instruct,"After passing a test, Vasya got himself a box of $n$ candies. He decided to eat an equal amount of candies each morning until there are no more candies. However, Petya also noticed the box and decided to get some candies for himself.

This means the process of eating candies is the following: in the beginning Vasya chooses a single integer $k$, same for all days. After that, in the morning he eats $k$ candies from the box (if there are less than $k$ candies in the box, he eats them all), then in the evening Petya eats $10\%$ of the candies remaining in the box. If there are still candies left in the box, the process repeats — next day Vasya eats $k$ candies again, and Petya — $10\%$ of the candies left in a box, and so on.

If the amount of candies in the box is not divisible by $10$, Petya rounds the amount he takes from the box down. For example, if there were $97$ candies in the box, Petya would eat only $9$ of them. In particular, if there are less than $10$ candies in a box, Petya won't eat any at all.

Your task is to find out the minimal amount of $k$ that can be chosen by Vasya so that he would eat at least half of the $n$ candies he initially got. Note that the number $k$ must be integer.


-----Input-----

The first line contains a single integer $n$ ($1 \leq n \leq 10^{18}$) — the initial amount of candies in the box.


-----Output-----

Output a single integer — the minimal amount of $k$ that would allow Vasya to eat at least half of candies he got.


-----Example-----
Input
68

Output
3



-----Note-----

In the sample, the amount of candies, with $k=3$, would change in the following way (Vasya eats first):

$68 \to 65 \to 59 \to 56 \to 51 \to 48 \to 44 \to 41 \\ \to 37 \to 34 \to 31 \to 28 \to 26 \to 23 \to 21 \to 18 \to 17 \to 14 \\ \to 13 \to 10 \to 9 \to 6 \to 6 \to 3 \to 3 \to 0$.

In total, Vasya would eat $39$ candies, while Petya — $29$.","n = int(input())
k = 1
while True:
    candies = n
    vasya_eaten = 0
    while candies > 0:
        vasya_eaten += min(k, candies)
        candies -= min(k, candies)
        petya_eaten = candies // 10
        candies -= petya_eaten
    if vasya_eaten * 2 >= n:
        print(k)
        break
    k += 1
",1,False,True,True,True,True,True,True,True,True,True,True,True,False,236_llama3-70b,0.5442130571415579,0.04427062132914813,0.5416666666666666
238,apps,llama3-70b,qwen2.5-7b-instruct,"n hobbits are planning to spend the night at Frodo's house. Frodo has n beds standing in a row and m pillows (n ≤ m). Each hobbit needs a bed and at least one pillow to sleep, however, everyone wants as many pillows as possible. Of course, it's not always possible to share pillows equally, but any hobbit gets hurt if he has at least two pillows less than some of his neighbors have. 

Frodo will sleep on the k-th bed in the row. What is the maximum number of pillows he can have so that every hobbit has at least one pillow, every pillow is given to some hobbit and no one is hurt?


-----Input-----

The only line contain three integers n, m and k (1 ≤ n ≤ m ≤ 10^9, 1 ≤ k ≤ n) — the number of hobbits, the number of pillows and the number of Frodo's bed.


-----Output-----

Print single integer — the maximum number of pillows Frodo can have so that no one is hurt.


-----Examples-----
Input
4 6 2

Output
2

Input
3 10 3

Output
4

Input
3 6 1

Output
3



-----Note-----

In the first example Frodo can have at most two pillows. In this case, he can give two pillows to the hobbit on the first bed, and one pillow to each of the hobbits on the third and the fourth beds.

In the second example Frodo can take at most four pillows, giving three pillows to each of the others.

In the third example Frodo can take three pillows, giving two pillows to the hobbit in the middle and one pillow to the hobbit on the third bed.","n, m, k = map(int, input().split())
if k == 1:
    print(min(m // n, m - (n - 1)))
else:
    print(min(m // n + 1, m - (n - k)))
",1,False,False,False,True,True,True,False,False,True,True,False,False,True,238_llama3-70b,0.875706603646191,0.44092267284673214,0.7916666666666666
261,apps,llama3-70b,qwen2.5-7b-instruct,"One day, after a difficult lecture a diligent student Sasha saw a graffitied desk in the classroom. She came closer and read: ""Find such positive integer n, that among numbers n + 1, n + 2, ..., 2·n there are exactly m numbers which binary representation contains exactly k digits one"".

The girl got interested in the task and she asked you to help her solve it. Sasha knows that you are afraid of large numbers, so she guaranteed that there is an answer that doesn't exceed 10^18.


-----Input-----

The first line contains two space-separated integers, m and k (0 ≤ m ≤ 10^18; 1 ≤ k ≤ 64).


-----Output-----

Print the required number n (1 ≤ n ≤ 10^18). If there are multiple answers, print any of them.


-----Examples-----
Input
1 1

Output
1

Input
3 2

Output
5","m, k = map(int, input().split())

def count_ones(n):
    count = 0
    while n:
        count += n & 1
        n >>= 1
    return count

def find_n(m, k):
    n = 1
    while True:
        count = sum(1 for i in range(n + 1, 2 * n + 1) if count_ones(i) == k)
        if count == m:
            return n
        n += 1

print(find_n(m, k))
",1,False,False,False,True,True,True,True,True,True,True,False,True,False,261_llama3-70b,0.8997713337371126,0.49854832833508284,0.75
268,apps,llama3-70b,qwen2.5-7b-instruct,"You are given two integers $l$ and $r$ ($l \le r$). Your task is to calculate the sum of numbers from $l$ to $r$ (including $l$ and $r$) such that each number contains at most $k$ different digits, and print this sum modulo $998244353$.

For example, if $k = 1$ then you have to calculate all numbers from $l$ to $r$ such that each number is formed using only one digit. For $l = 10, r = 50$ the answer is $11 + 22 + 33 + 44 = 110$.


-----Input-----

The only line of the input contains three integers $l$, $r$ and $k$ ($1 \le l \le r < 10^{18}, 1 \le k \le 10$) — the borders of the segment and the maximum number of different digits.


-----Output-----

Print one integer — the sum of numbers from $l$ to $r$ such that each number contains at most $k$ different digits, modulo $998244353$.


-----Examples-----
Input
10 50 2

Output
1230

Input
1 2345 10

Output
2750685

Input
101 154 2

Output
2189



-----Note-----

For the first example the answer is just the sum of numbers from $l$ to $r$ which equals to $\frac{50 \cdot 51}{2} - \frac{9 \cdot 10}{2} = 1230$. This example also explained in the problem statement but for $k = 1$.

For the second example the answer is just the sum of numbers from $l$ to $r$ which equals to $\frac{2345 \cdot 2346}{2} = 2750685$.

For the third example the answer is $101 + 110 + 111 + 112 + 113 + 114 + 115 + 116 + 117 + 118 + 119 + 121 + 122 + 131 + 133 + 141 + 144 + 151 = 2189$.","MOD = 998244353
def count_numbers(l, r, k):
    def count(n, k, dp):
        if k == 0:
            return 0
        if (n, k) in dp:
            return dp[(n, k)]
        if n < 10**k:
            dp[(n, k)] = n
        else:
            dp[(n, k)] = 9
            for i in range(1, k):
                dp[(n, k)] += 9 * 10**(i-1) * (10**(k-i) - 10**(i-1))
            dp[(n, k)] += (10**(k-1) - 10**(k-2)) * (n // 10**(k-1) - 1)
            dp[(n, k)] %= MOD
        return dp[(n, k)]

    dp = {}
    return (count(r, k, dp) - count(l-1, k, dp)) % MOD

l, r, k = map(int, input().split())
print(count_numbers(l, r, k))
",1,False,False,False,True,True,True,True,False,False,True,False,True,False,268_llama3-70b,0.8635012734525994,0.4167535590858058,0.625
295,apps,llama3-70b,qwen2.5-7b-instruct,"Everybody in Russia uses Gregorian calendar. In this calendar there are 31 days in January, 28 or 29 days in February (depending on whether the year is leap or not), 31 days in March, 30 days in April, 31 days in May, 30 in June, 31 in July, 31 in August, 30 in September, 31 in October, 30 in November, 31 in December.

A year is leap in one of two cases: either its number is divisible by 4, but not divisible by 100, or is divisible by 400. For example, the following years are leap: 2000, 2004, but years 1900 and 2018 are not leap.

In this problem you are given n (1 ≤ n ≤ 24) integers a_1, a_2, ..., a_{n}, and you have to check if these integers could be durations in days of n consecutive months, according to Gregorian calendar. Note that these months could belong to several consecutive years. In other words, check if there is a month in some year, such that its duration is a_1 days, duration of the next month is a_2 days, and so on.


-----Input-----

The first line contains single integer n (1 ≤ n ≤ 24) — the number of integers.

The second line contains n integers a_1, a_2, ..., a_{n} (28 ≤ a_{i} ≤ 31) — the numbers you are to check.


-----Output-----

If there are several consecutive months that fit the sequence, print ""YES"" (without quotes). Otherwise, print ""NO"" (without quotes).

You can print each letter in arbitrary case (small or large).


-----Examples-----
Input
4
31 31 30 31

Output
Yes


Input
2
30 30

Output
No


Input
5
29 31 30 31 30

Output
Yes


Input
3
31 28 30

Output
No


Input
3
31 31 28

Output
Yes




-----Note-----

In the first example the integers can denote months July, August, September and October.

In the second example the answer is no, because there are no two consecutive months each having 30 days.

In the third example the months are: February (leap year) — March — April – May — June.

In the fourth example the number of days in the second month is 28, so this is February. March follows February and has 31 days, but not 30, so the answer is NO.

In the fifth example the months are: December — January — February (non-leap year).","n = int(input())
a = list(map(int, input().split()))
b = [31,28,31,30,31,30,31,31,30,31,30,31]

f = False
for i in range(12):
    if all(a[j] == b[(i+j)%12] for j in range(n)):
        f = True
    if i == 11 and not f:
        break
    if all(a[j] == b[(i+j)%12+12] for j in range(n)):
        f = True
    if i == 11 and not f:
        break

if f:
    print(""YES"")
else:
    print(""NO"")
",1,False,False,False,True,True,True,True,True,True,False,True,True,False,295_llama3-70b,0.8578618301443605,0.41829436179200846,0.75
298,apps,llama3-70b,qwen2.5-7b-instruct,"Vasya has got three integers $n$, $m$ and $k$. He'd like to find three integer points $(x_1, y_1)$, $(x_2, y_2)$, $(x_3, y_3)$, such that $0 \le x_1, x_2, x_3 \le n$, $0 \le y_1, y_2, y_3 \le m$ and the area of the triangle formed by these points is equal to $\frac{nm}{k}$.

Help Vasya! Find such points (if it's possible). If there are multiple solutions, print any of them.


-----Input-----

The single line contains three integers $n$, $m$, $k$ ($1\le n, m \le 10^9$, $2 \le k \le 10^9$).


-----Output-----

If there are no such points, print ""NO"".

Otherwise print ""YES"" in the first line. The next three lines should contain integers $x_i, y_i$ — coordinates of the points, one point per line. If there are multiple solutions, print any of them.

You can print each letter in any case (upper or lower).


-----Examples-----
Input
4 3 3

Output
YES
1 0
2 3
4 1

Input
4 4 7

Output
NO



-----Note-----

In the first example area of the triangle should be equal to $\frac{nm}{k} = 4$. The triangle mentioned in the output is pictured below:  [Image] 

In the second example there is no triangle with area $\frac{nm}{k} = \frac{16}{7}$.","import math

n, m, k = map(int, input().split())

if (n*m) % k:
    print(""NO"")
    exit()

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def euk(a, b):
    if b == 0:
        return 1, 0
    else:
        x, y = euk(b, a % b)
        return y, x - (a // b) * y

def bezout(a, b):
    x, y = euk(a, b)
    return x, y, x*a + y*b

n1, m1, g = bezout(n, m)
if abs(n1*m) >= g:
    print(""YES"")
    print(0, 0)
    print(0, n1*m//g)
    print(m1*m//g, 0)
else:
    print(""NO"")",1,False,False,False,False,True,True,False,True,True,False,False,False,False,298_llama3-70b,0.6025694196293297,0.10350350436366977,0.5833333333333334
299,apps,llama3-70b,qwen2.5-7b-instruct,"It's one more school day now. Sasha doesn't like classes and is always bored at them. So, each day he invents some game and plays in it alone or with friends.

Today he invented one simple game to play with Lena, with whom he shares a desk. The rules are simple. Sasha draws n sticks in a row. After that the players take turns crossing out exactly k sticks from left or right in each turn. Sasha moves first, because he is the inventor of the game. If there are less than k sticks on the paper before some turn, the game ends. Sasha wins if he makes strictly more moves than Lena. Sasha wants to know the result of the game before playing, you are to help him.


-----Input-----

The first line contains two integers n and k (1 ≤ n, k ≤ 10^18, k ≤ n) — the number of sticks drawn by Sasha and the number k — the number of sticks to be crossed out on each turn.


-----Output-----

If Sasha wins, print ""YES"" (without quotes), otherwise print ""NO"" (without quotes).

You can print each letter in arbitrary case (upper of lower).


-----Examples-----
Input
1 1

Output
YES

Input
10 4

Output
NO



-----Note-----

In the first example Sasha crosses out 1 stick, and then there are no sticks. So Lena can't make a move, and Sasha wins.

In the second example Sasha crosses out 4 sticks, then Lena crosses out 4 sticks, and after that there are only 2 sticks left. Sasha can't make a move. The players make equal number of moves, so Sasha doesn't win.","n, k = map(int, input().split())
if (n - 1) // k > n // k:
    print(""YES"")
else:
    print(""NO"")
",1,False,False,False,True,True,True,False,True,False,True,False,False,False,299_llama3-70b,0.6594667087708458,0.16398825462100827,0.5833333333333334
5,apps,gpt-4o,qwen2.5-7b-instruct,"Jamie loves sleeping. One day, he decides that he needs to wake up at exactly hh: mm. However, he hates waking up, so he wants to make waking up less painful by setting the alarm at a lucky time. He will then press the snooze button every x minutes until hh: mm is reached, and only then he will wake up. He wants to know what is the smallest number of times he needs to press the snooze button.

A time is considered lucky if it contains a digit '7'. For example, 13: 07 and 17: 27 are lucky, while 00: 48 and 21: 34 are not lucky.

Note that it is not necessary that the time set for the alarm and the wake-up time are on the same day. It is guaranteed that there is a lucky time Jamie can set so that he can wake at hh: mm.

Formally, find the smallest possible non-negative integer y such that the time representation of the time x·y minutes before hh: mm contains the digit '7'.

Jamie uses 24-hours clock, so after 23: 59 comes 00: 00.


-----Input-----

The first line contains a single integer x (1 ≤ x ≤ 60).

The second line contains two two-digit integers, hh and mm (00 ≤ hh ≤ 23, 00 ≤ mm ≤ 59).


-----Output-----

Print the minimum number of times he needs to press the button.


-----Examples-----
Input
3
11 23

Output
2

Input
5
01 07

Output
0



-----Note-----

In the first sample, Jamie needs to wake up at 11:23. So, he can set his alarm at 11:17. He would press the snooze button when the alarm rings at 11:17 and at 11:20.

In the second sample, Jamie can set his alarm at exactly at 01:07 which is lucky.","def contains_seven(h, m):
    """"""Check if the time h:m contains a '7'.""""""
    return '7' in str(h) or '7' in str(m)

def main():
    # Read inputs
    x = int(input())
    hh, mm = map(int, input().split())

    # Initialize the counter for the number of snooze presses
    snooze_count = 0

    # Check the time and keep pressing snooze until a lucky time is found
    while not contains_seven(hh, mm):
        snooze_count += 1
        mm -= x
        if mm < 0:
            mm += 60
            hh -= 1
            if hh < 0:
                hh += 24

    # Print the result
    print(snooze_count)

# Run the main function
if __name__ == ""__main__"":
    main()
",2,True,True,True,True,True,True,True,True,True,True,True,True,True,5_gpt-4o,0.826462452946936,0.3705038644939344,0.7083333333333334
9,apps,gpt-4o,qwen2.5-7b-instruct,"Tokitsukaze is playing a game derivated from Japanese mahjong. In this game, she has three tiles in her hand. Each tile she owns is a suited tile, which means it has a suit (manzu, pinzu or souzu) and a number (a digit ranged from $1$ to $9$). In this problem, we use one digit and one lowercase letter, which is the first character of the suit, to represent a suited tile. All possible suited tiles are represented as 1m, 2m, $\ldots$, 9m, 1p, 2p, $\ldots$, 9p, 1s, 2s, $\ldots$, 9s.

In order to win the game, she must have at least one mentsu (described below) in her hand, so sometimes she should draw extra suited tiles. After drawing a tile, the number of her tiles increases by one. She can draw any tiles she wants, including those already in her hand.

Do you know the minimum number of extra suited tiles she needs to draw so that she can win?

Here are some useful definitions in this game:  A mentsu, also known as meld, is formed by a koutsu or a shuntsu;  A koutsu, also known as triplet, is made of three identical tiles, such as [1m, 1m, 1m], however, [1m, 1p, 1s] or [1m, 4m, 7m] is NOT a koutsu;  A shuntsu, also known as sequence, is made of three sequential numbered tiles in the same suit, such as [1m, 2m, 3m] and [5s, 7s, 6s], however, [9m, 1m, 2m] or [1m, 2p, 3s] is NOT a shuntsu. 

Some examples:   [2m, 3p, 2s, 4m, 1s, 2s, 4s] — it contains no koutsu or shuntsu, so it includes no mentsu;  [4s, 3m, 3p, 4s, 5p, 4s, 5p] — it contains a koutsu, [4s, 4s, 4s], but no shuntsu, so it includes a mentsu;  [5p, 5s, 9m, 4p, 1s, 7p, 7m, 6p] — it contains no koutsu but a shuntsu, [5p, 4p, 6p] or [5p, 7p, 6p], so it includes a mentsu. 

Note that the order of tiles is unnecessary and you can assume the number of each type of suited tiles she can draw is infinite.


-----Input-----

The only line contains three strings — the tiles in Tokitsukaze's hand. For each string, the first character is a digit ranged from $1$ to $9$ and the second character is m, p or s.


-----Output-----

Print a single integer — the minimum number of extra suited tiles she needs to draw.


-----Examples-----
Input
1s 2s 3s

Output
0

Input
9m 9m 9m

Output
0

Input
3p 9m 2p

Output
1



-----Note-----

In the first example, Tokitsukaze already has a shuntsu.

In the second example, Tokitsukaze already has a koutsu.

In the third example, Tokitsukaze can get a shuntsu by drawing one suited tile — 1p or 4p. The resulting tiles will be [3p, 9m, 2p, 1p] or [3p, 9m, 2p, 4p].","def min_tiles_to_win(tiles):
    # Parse the input tiles
    t1, t2, t3 = tiles.split()
    
    # Utility function to check if three tiles form a koutsu or shuntsu
    def is_koutsu_or_shuntsu(t1, t2, t3):
        if t1 == t2 == t3:
            return True
        n1, s1 = int(t1[0]), t1[1]
        n2, s2 = int(t2[0]), t2[1]
        n3, s3 = int(t3[0]), t3[1]
        if s1 == s2 == s3 and sorted([n1, n2, n3]) in ([n1, n2, n3] for n1 in range(1, 8)):
            return True
        return False
    
    # Check if already a koutsu or shuntsu
    if is_koutsu_or_shuntsu(t1, t2, t3):
        return 0
    
    # Group tiles by suit
    suits = {'m': [], 'p': [], 's': []}
    for tile in [t1, t2, t3]:
        suits[tile[1]].append(int(tile[0]))
    
    # Check how many tiles are needed to form koutsu or shuntsu
    def tiles_needed_to_complete_group(tiles):
        tiles.sort()
        if len(tiles) == 1:
            return 2
        if len(tiles) == 2:
            if tiles[0] == tiles[1]:
                return 1
            if tiles[1] - tiles[0] <= 2:
                return 1
            return 2
        return 2

    min_additional_tiles = 2
    for suit, numbers in suits.items():
        min_additional_tiles = min(min_additional_tiles, tiles_needed_to_complete_group(numbers))
    
    return min_additional_tiles

# Read input
import sys
input = sys.stdin.read
tiles = input().strip()
print(min_tiles_to_win(tiles))
",2,False,True,False,False,True,True,True,True,False,False,True,True,True,9_gpt-4o,0.661108343056226,0.16618406764318508,0.5833333333333334
12,apps,gpt-4o,qwen2.5-7b-instruct,"Little Joty has got a task to do. She has a line of n tiles indexed from 1 to n. She has to paint them in a strange pattern.

An unpainted tile should be painted Red if it's index is divisible by a and an unpainted tile should be painted Blue if it's index is divisible by b. So the tile with the number divisible by a and b can be either painted Red or Blue.

After her painting is done, she will get p chocolates for each tile that is painted Red and q chocolates for each tile that is painted Blue.

Note that she can paint tiles in any order she wants.

Given the required information, find the maximum number of chocolates Joty can get.


-----Input-----

The only line contains five integers n, a, b, p and q (1 ≤ n, a, b, p, q ≤ 10^9).


-----Output-----

Print the only integer s — the maximum number of chocolates Joty can get.

Note that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.


-----Examples-----
Input
5 2 3 12 15

Output
39

Input
20 2 3 3 5

Output
51","n, a, b, p, q = map(int, input().split())

def lcm(x, y):
    from math import gcd
    return x * y // gcd(x, y)

red_tiles = n // a
blue_tiles = n // b
both_tiles = n // lcm(a, b)

# Since the tiles that can be painted both Red or Blue can only be counted once, we need to subtract them once
max_chocolates = red_tiles * p + blue_tiles * q - both_tiles * min(p, q)

print(max_chocolates)
",2,True,False,False,True,False,False,False,True,False,True,True,True,False,12_gpt-4o,0.7155768281100079,0.2171204076163509,0.7083333333333334
13,apps,gpt-4o,qwen2.5-7b-instruct,"Vova has won $n$ trophies in different competitions. Each trophy is either golden or silver. The trophies are arranged in a row.

The beauty of the arrangement is the length of the longest subsegment consisting of golden trophies. Vova wants to swap two trophies (not necessarily adjacent ones) to make the arrangement as beautiful as possible — that means, to maximize the length of the longest such subsegment.

Help Vova! Tell him the maximum possible beauty of the arrangement if he is allowed to do at most one swap.


-----Input-----

The first line contains one integer $n$ ($2 \le n \le 10^5$) — the number of trophies.

The second line contains $n$ characters, each of them is either G or S. If the $i$-th character is G, then the $i$-th trophy is a golden one, otherwise it's a silver trophy. 


-----Output-----

Print the maximum possible length of a subsegment of golden trophies, if Vova is allowed to do at most one swap.


-----Examples-----
Input
10
GGGSGGGSGG

Output
7

Input
4
GGGG

Output
4

Input
3
SSS

Output
0



-----Note-----

In the first example Vova has to swap trophies with indices $4$ and $10$. Thus he will obtain the sequence ""GGGGGGGSGS"", the length of the longest subsegment of golden trophies is $7$. 

In the second example Vova can make no swaps at all. The length of the longest subsegment of golden trophies in the sequence is $4$. 

In the third example Vova cannot do anything to make the length of the longest subsegment of golden trophies in the sequence greater than $0$.","def max_beauty_after_swap(n, trophies):
    segments = []
    i = 0
    
    while i < n:
        if trophies[i] == 'G':
            start = i
            while i < n and trophies[i] == 'G':
                i += 1
            segments.append((start, i - 1))
        else:
            i += 1
    
    if not segments:
        return 0
    
    max_length = max(end - start + 1 for start, end in segments)
    
    if len(segments) == 1:
        return max_length
    
    for i in range(1, len(segments)):
        prev_start, prev_end = segments[i - 1]
        curr_start, curr_end = segments[i]
        if curr_start - prev_end == 2:
            max_length = max(max_length, (curr_end - curr_start + 1) + (prev_end - prev_start + 1) + 1)
    
    return min(max_length + 1, n)

# Read input
import sys
input = sys.stdin.read
data = input().split()
n = int(data[0])
trophies = data[1]

# Print output
print(max_beauty_after_swap(n, trophies))
",2,False,False,False,True,True,True,True,True,True,True,False,False,False,13_gpt-4o,0.5777493155989952,0.07779992903777712,0.5833333333333334
15,apps,gpt-4o,qwen2.5-7b-instruct,"Let's suppose you have an array a, a stack s (initially empty) and an array b (also initially empty).

You may perform the following operations until both a and s are empty:

  Take the first element of a, push it into s and remove it from a (if a is not empty);  Take the top element from s, append it to the end of array b and remove it from s (if s is not empty). 

You can perform these operations in arbitrary order.

If there exists a way to perform the operations such that array b is sorted in non-descending order in the end, then array a is called stack-sortable.

For example, [3, 1, 2] is stack-sortable, because b will be sorted if we perform the following operations:

  Remove 3 from a and push it into s;  Remove 1 from a and push it into s;  Remove 1 from s and append it to the end of b;  Remove 2 from a and push it into s;  Remove 2 from s and append it to the end of b;  Remove 3 from s and append it to the end of b. 

After all these operations b = [1, 2, 3], so [3, 1, 2] is stack-sortable. [2, 3, 1] is not stack-sortable.

You are given k first elements of some permutation p of size n (recall that a permutation of size n is an array of size n where each integer from 1 to n occurs exactly once). You have to restore the remaining n - k elements of this permutation so it is stack-sortable. If there are multiple answers, choose the answer such that p is lexicographically maximal (an array q is lexicographically greater than an array p iff there exists some integer k such that for every i < k q_{i} = p_{i}, and q_{k} > p_{k}). You may not swap or change any of first k elements of the permutation.

Print the lexicographically maximal permutation p you can obtain.

If there exists no answer then output -1.


-----Input-----

The first line contains two integers n and k (2 ≤ n ≤ 200000, 1 ≤ k < n) — the size of a desired permutation, and the number of elements you are given, respectively.

The second line contains k integers p_1, p_2, ..., p_{k} (1 ≤ p_{i} ≤ n) — the first k elements of p. These integers are pairwise distinct.


-----Output-----

If it is possible to restore a stack-sortable permutation p of size n such that the first k elements of p are equal to elements given in the input, print lexicographically maximal such permutation.

Otherwise print -1.


-----Examples-----
Input
5 3
3 2 1

Output
3 2 1 5 4 
Input
5 3
2 3 1

Output
-1

Input
5 1
3

Output
3 2 1 5 4 
Input
5 2
3 4

Output
-1","def is_stack_sortable_starting_with_k(n, k, p):
    # Check if the given starting array is already in stack-sortable order
    stack = []
    max_seen = 0
    for num in p:
        if num < max_seen:
            return -1
        while stack and stack[-1] < num:
            max_seen = stack.pop()
        stack.append(num)

    remaining_numbers = set(range(1, n + 1)) - set(p)
    remaining_numbers = sorted(remaining_numbers, reverse=True)

    # Try to construct the remaining part of the permutation
    result = p[:]
    for num in remaining_numbers:
        while stack and stack[-1] < num:
            result.append(stack.pop())
        stack.append(num)
    
    result.extend(reversed(stack))
    
    # Verify if the constructed permutation is stack-sortable
    stack = []
    max_seen = 0
    for num in result:
        if num < max_seen:
            return -1
        while stack and stack[-1] < num:
            max_seen = stack.pop()
        stack.append(num)
    
    return result

# Read input
import sys
input = sys.stdin.read
data = input().split()

n = int(data[0])
k = int(data[1])
p = list(map(int, data[2:]))

# Solve the problem
result = is_stack_sortable_starting_with_k(n, k, p)
if result == -1:
    print(result)
else:
    print("" "".join(map(str, result)))
",2,False,False,False,True,True,True,True,True,True,True,True,True,True,15_gpt-4o,0.7539812797050169,0.26697790044032516,0.7083333333333334
23,apps,gpt-4o,qwen2.5-7b-instruct,"Let's call a string ""s-palindrome"" if it is symmetric about the middle of the string. For example, the string ""oHo"" is ""s-palindrome"", but the string ""aa"" is not. The string ""aa"" is not ""s-palindrome"", because the second half of it is not a mirror reflection of the first half.

 [Image] English alphabet 

You are given a string s. Check if the string is ""s-palindrome"".


-----Input-----

The only line contains the string s (1 ≤ |s| ≤ 1000) which consists of only English letters.


-----Output-----

Print ""TAK"" if the string s is ""s-palindrome"" and ""NIE"" otherwise.


-----Examples-----
Input
oXoxoXo

Output
TAK

Input
bod

Output
TAK

Input
ER

Output
NIE","def is_s_palindrome(s):
    n = len(s)
    for i in range(n // 2):
        if s[i] != s[n - 1 - i]:
            return False
    return True

# Read input
s = input().strip()

# Check if the string is ""s-palindrome""
if is_s_palindrome(s):
    print(""TAK"")
else:
    print(""NIE"")
",2,False,True,True,True,True,True,True,True,True,False,True,True,True,23_gpt-4o,0.7248138853023477,0.2394038844353333,0.625
28,apps,gpt-4o,qwen2.5-7b-instruct,"You are given a string s consisting of n lowercase Latin letters. You have to type this string using your keyboard.

Initially, you have an empty string. Until you type the whole string, you may perform the following operation:  add a character to the end of the string. 

Besides, at most once you may perform one additional operation: copy the string and append it to itself.

For example, if you have to type string abcabca, you can type it in 7 operations if you type all the characters one by one. However, you can type it in 5 operations if you type the string abc first and then copy it and type the last character.

If you have to type string aaaaaaaaa, the best option is to type 4 characters one by one, then copy the string, and then type the remaining character.

Print the minimum number of operations you need to type the given string.


-----Input-----

The first line of the input containing only one integer number n (1 ≤ n ≤ 100) — the length of the string you have to type. The second line containing the string s consisting of n lowercase Latin letters.


-----Output-----

Print one integer number — the minimum number of operations you need to type the given string.


-----Examples-----
Input
7
abcabca

Output
5

Input
8
abcdefgh

Output
8



-----Note-----

The first test described in the problem statement.

In the second test you can only type all the characters one by one.","n = int(input())
s = input()

# Function to find the minimum number of operations to type the string
def min_operations_to_type(n, s):
    # Initialize the operations count to n (typing each character one by one)
    min_operations = n
    
    # Try to find the optimal place to perform the copy operation
    for i in range(1, n):
        # Find the length of the substring to copy
        if s[:i] == s[i:2*i]:
            # Calculate the number of operations
            operations = i + 1 + (n - 2*i)
            min_operations = min(min_operations, operations)
    
    return min_operations

# Get the result
result = min_operations_to_type(n, s)

# Print the result
print(result)
",2,True,False,False,True,True,False,False,True,True,True,False,False,True,28_gpt-4o,0.548959125547294,0.04899058022009064,0.5
34,apps,gpt-4o,qwen2.5-7b-instruct,"You are given two arithmetic progressions: a_1k + b_1 and a_2l + b_2. Find the number of integers x such that L ≤ x ≤ R and x = a_1k' + b_1 = a_2l' + b_2, for some integers k', l' ≥ 0.


-----Input-----

The only line contains six integers a_1, b_1, a_2, b_2, L, R (0 < a_1, a_2 ≤ 2·10^9,  - 2·10^9 ≤ b_1, b_2, L, R ≤ 2·10^9, L ≤ R).


-----Output-----

Print the desired number of integers x.


-----Examples-----
Input
2 0 3 3 5 21

Output
3

Input
2 4 3 0 6 17

Output
2","def gcd_extended(a, b):
    if a == 0:
        return b, 0, 1
    gcd, x1, y1 = gcd_extended(b % a, a)
    x = y1 - (b // a) * x1
    y = x1
    return gcd, x, y

def find_integer_solutions(a1, b1, a2, b2, L, R):
    A = a1
    B = -a2
    C = b2 - b1

    gcd, x0, y0 = gcd_extended(abs(A), abs(B))
    
    if C % gcd != 0:
        return -1
    
    x0 *= C // gcd
    y0 *= C // gcd
    
    if A < 0:
        x0 = -x0
    if B < 0:
        y0 = -y0
    
    a1_div_gcd = a1 // gcd
    a2_div_gcd = a2 // gcd
    
    def adjust_solution(x, y, a1_div_gcd, a2_div_gcd, sign_a1, sign_a2):
        if sign_a1 > 0:
            k = (L - (b1 + a1 * x)) // (a1 * a1_div_gcd)
            x += k * a2_div_gcd
            y -= k * a1_div_gcd
        else:
            k = (R - (b1 + a1 * x)) // (a1 * a1_div_gcd)
            x += k * a2_div_gcd
            y -= k * a1_div_gcd
        
        if b1 + a1 * x < L:
            x += a2_div_gcd
            y -= a1_div_gcd
        if b1 + a1 * x > R:
            x -= a2_div_gcd
            y += a1_div_gcd
        
        return x, y
    
    x0, y0 = adjust_solution(x0, y0, a1_div_gcd, a2_div_gcd, 1, -1)
    
    count = 0
    while True:
        val = a1 * x0 + b1
        if val > R:
            break
        if L <= val <= R:
            count += 1
        x0 += a2_div_gcd
        y0 -= a1_div_gcd
    
    return count

# Input
a1, b1, a2, b2, L, R = map(int, input().split())

# Output
print(find_integer_solutions(a1, b1, a2, b2, L, R))
",2,False,False,False,True,True,True,True,True,True,True,True,True,False,34_gpt-4o,0.8916947406274265,0.4796909893978549,0.7083333333333334
35,apps,gpt-4o,qwen2.5-7b-instruct,"It's New Year's Eve soon, so Ivan decided it's high time he started setting the table. Ivan has bought two cakes and cut them into pieces: the first cake has been cut into a pieces, and the second one — into b pieces.

Ivan knows that there will be n people at the celebration (including himself), so Ivan has set n plates for the cakes. Now he is thinking about how to distribute the cakes between the plates. Ivan wants to do it in such a way that all following conditions are met:  Each piece of each cake is put on some plate;  Each plate contains at least one piece of cake;  No plate contains pieces of both cakes. 

To make his guests happy, Ivan wants to distribute the cakes in such a way that the minimum number of pieces on the plate is maximized. Formally, Ivan wants to know the maximum possible number x such that he can distribute the cakes according to the aforementioned conditions, and each plate will contain at least x pieces of cake.

Help Ivan to calculate this number x!


-----Input-----

The first line contains three integers n, a and b (1 ≤ a, b ≤ 100, 2 ≤ n ≤ a + b) — the number of plates, the number of pieces of the first cake, and the number of pieces of the second cake, respectively.


-----Output-----

Print the maximum possible number x such that Ivan can distribute the cake in such a way that each plate will contain at least x pieces of cake.


-----Examples-----
Input
5 2 3

Output
1

Input
4 7 10

Output
3



-----Note-----

In the first example there is only one way to distribute cakes to plates, all of them will have 1 cake on it.

In the second example you can have two plates with 3 and 4 pieces of the first cake and two plates both with 5 pieces of the second cake. Minimal number of pieces is 3.","def max_min_pieces(n, a, b):
    low, high = 1, min(a, b) + 1

    def can_distribute(x):
        return (a // x) + (b // x) >= n

    while low < high:
        mid = (low + high) // 2
        if can_distribute(mid):
            low = mid + 1
        else:
            high = mid
    
    return low - 1

# Read input values
n, a, b = map(int, input().split())

# Compute and print the result
print(max_min_pieces(n, a, b))
",2,True,True,False,True,True,True,True,True,True,True,True,True,True,35_gpt-4o,0.7196776726603296,0.22648439457378763,0.5416666666666666
37,apps,gpt-4o,qwen2.5-7b-instruct,"Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: 

[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.


-----Input-----

The only line of the input contains integer n (0 ≤ n ≤ 10^18) — the number of Ayrat's moves.


-----Output-----

Print two integers x and y — current coordinates of Ayrat coordinates.


-----Examples-----
Input
3

Output
-2 0

Input
7

Output
3 2","def find_coordinates(n):
    # Directions in hexagonal grid
    directions = [(1, 0), (0, 1), (-1, 1), (-1, 0), (0, -1), (1, -1)]
    
    x, y = 0, 0  # Starting position
    steps = 1    # Initial number of steps to take in a given direction
    direction_index = 0  # Start with the first direction
    
    while n > 0:
        for _ in range(2):  # Each direction length is repeated twice before increasing the steps
            if n >= steps:
                dx, dy = directions[direction_index]
                x += dx * steps
                y += dy * steps
                n -= steps
                direction_index = (direction_index + 1) % 6
            else:
                dx, dy = directions[direction_index]
                x += dx * n
                y += dy * n
                return x, y
        steps += 1  # Increase the number of steps after completing two directions
    
    return x, y

# Read input
n = int(input().strip())

# Get the coordinates after n moves
x, y = find_coordinates(n)

# Print the result
print(x, y)
",2,False,False,False,True,True,True,True,True,True,False,False,False,False,37_gpt-4o,0.6739356644576018,0.17974570635049858,0.5833333333333334
46,apps,gpt-4o,qwen2.5-7b-instruct,"You are given positive integer number n. You should create such strictly increasing sequence of k positive numbers a_1, a_2, ..., a_{k}, that their sum is equal to n and greatest common divisor is maximal.

Greatest common divisor of sequence is maximum of such numbers that every element of sequence is divisible by them.

If there is no possible sequence then output -1.


-----Input-----

The first line consists of two numbers n and k (1 ≤ n, k ≤ 10^10).


-----Output-----

If the answer exists then output k numbers — resulting sequence. Otherwise output -1. If there are multiple answers, print any of them.


-----Examples-----
Input
6 3

Output
1 2 3

Input
8 2

Output
2 6

Input
5 3

Output
-1","def find_sequence(n, k):
    min_sum = k * (k + 1) // 2  # Sum of the first k natural numbers
    
    if min_sum > n:
        return -1
    
    d = n // min_sum  # Maximum possible GCD
    remainder = n - d * min_sum
    
    sequence = [d * (i + 1) for i in range(k)]
    
    # Distribute the remainder to the sequence to make the sum equal to n
    for i in range(k-1, -1, -1):
        if remainder == 0:
            break
        sequence[i] += 1
        remainder -= 1
    
    return sequence

# Read input
n, k = map(int, input().split())

result = find_sequence(n, k)
if result == -1:
    print(-1)
else:
    print("" "".join(map(str, result)))
",2,False,False,False,True,True,True,True,True,True,True,True,True,True,46_gpt-4o,0.7759771552020481,0.30291909377485055,0.625
56,apps,gpt-4o,qwen2.5-7b-instruct,"Jamie is preparing a Codeforces round. He has got an idea for a problem, but does not know how to solve it. Help him write a solution to the following problem:

Find k integers such that the sum of two to the power of each number equals to the number n and the largest integer in the answer is as small as possible. As there may be multiple answers, you are asked to output the lexicographically largest one. 

To be more clear, consider all integer sequence with length k (a_1, a_2, ..., a_{k}) with $\sum_{i = 1}^{k} 2^{a_{i}} = n$. Give a value $y = \operatorname{max}_{1 \leq i \leq k} a_{i}$ to each sequence. Among all sequence(s) that have the minimum y value, output the one that is the lexicographically largest.

For definitions of powers and lexicographical order see notes.


-----Input-----

The first line consists of two integers n and k (1 ≤ n ≤ 10^18, 1 ≤ k ≤ 10^5) — the required sum and the length of the sequence.


-----Output-----

Output ""No"" (without quotes) in a single line if there does not exist such sequence. Otherwise, output ""Yes"" (without quotes) in the first line, and k numbers separated by space in the second line — the required sequence.

It is guaranteed that the integers in the answer sequence fit the range [ - 10^18, 10^18].


-----Examples-----
Input
23 5

Output
Yes
3 3 2 1 0 

Input
13 2

Output
No

Input
1 2

Output
Yes
-1 -1 



-----Note-----

Sample 1:

2^3 + 2^3 + 2^2 + 2^1 + 2^0 = 8 + 8 + 4 + 2 + 1 = 23

Answers like (3, 3, 2, 0, 1) or (0, 1, 2, 3, 3) are not lexicographically largest.

Answers like (4, 1, 1, 1, 0) do not have the minimum y value.

Sample 2:

It can be shown there does not exist a sequence with length 2.

Sample 3:

$2^{-1} + 2^{-1} = \frac{1}{2} + \frac{1}{2} = 1$

Powers of 2:

If x > 0, then 2^{x} = 2·2·2·...·2 (x times).

If x = 0, then 2^{x} = 1.

If x < 0, then $2^{x} = \frac{1}{2^{-x}}$.

Lexicographical order:

Given two different sequences of the same length, (a_1, a_2, ... , a_{k}) and (b_1, b_2, ... , b_{k}), the first one is smaller than the second one for the lexicographical order, if and only if a_{i} < b_{i}, for the first i where a_{i} and b_{i} differ.","def find_sequence(n, k):
    # Check if it is possible to express n as a sum of k powers of 2
    if k > n:
        return ""No""
    
    # Start by representing n in binary and counting the number of 1s
    bits = []
    for i in range(60, -1, -1):
        if (n >> i) & 1:
            bits.append(i)

    # If the number of bits is more than k, it's impossible
    if len(bits) > k:
        return ""No""
    
    # We need to distribute the bits to get exactly k parts
    while len(bits) < k:
        smallest = bits.pop()
        bits.append(smallest - 1)
        bits.append(smallest - 1)
    
    # Sort to ensure that the sequence is lexicographically largest
    bits.sort(reverse=True)
    
    return ""Yes\n"" + "" "".join(map(str, bits))

# Reading input
import sys
input = sys.stdin.read
data = input().strip().split()
n = int(data[0])
k = int(data[1])

# Finding and printing the sequence
print(find_sequence(n, k))
",2,False,False,False,True,True,True,True,True,False,True,False,True,True,56_gpt-4o,0.6668830988335698,0.16731765420689637,0.6666666666666666
64,apps,gpt-4o,qwen2.5-7b-instruct,"Vova again tries to play some computer card game.

The rules of deck creation in this game are simple. Vova is given an existing deck of n cards and a magic number k. The order of the cards in the deck is fixed. Each card has a number written on it; number a_{i} is written on the i-th card in the deck.

After receiving the deck and the magic number, Vova removes x (possibly x = 0) cards from the top of the deck, y (possibly y = 0) cards from the bottom of the deck, and the rest of the deck is his new deck (Vova has to leave at least one card in the deck after removing cards). So Vova's new deck actually contains cards x + 1, x + 2, ... n - y - 1, n - y from the original deck.

Vova's new deck is considered valid iff the product of all numbers written on the cards in his new deck is divisible by k. So Vova received a deck (possibly not a valid one) and a number k, and now he wonders, how many ways are there to choose x and y so the deck he will get after removing x cards from the top and y cards from the bottom is valid?


-----Input-----

The first line contains two integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 10^9).

The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — the numbers written on the cards.


-----Output-----

Print the number of ways to choose x and y so the resulting deck is valid.


-----Examples-----
Input
3 4
6 2 8

Output
4

Input
3 6
9 1 14

Output
1



-----Note-----

In the first example the possible values of x and y are:

  x = 0, y = 0;  x = 1, y = 0;  x = 2, y = 0;  x = 0, y = 1.","def count_valid_decks(n, k, cards):
    from math import gcd
    from functools import reduce
    
    def lcm(a, b):
        return a * b // gcd(a, b)
    
    def product(arr):
        return reduce(lambda x, y: x * y, arr, 1)
    
    total_product = product(cards)
    
    if total_product % k != 0:
        return 0
    
    right_product = [1] * (n + 1)
    for i in range(n - 1, -1, -1):
        right_product[i] = right_product[i + 1] * cards[i]
    
    valid_ways = 0
    left_product = 1
    
    for x in range(n):
        if left_product * right_product[x + 1] % k == 0:
            valid_ways += 1
        left_product *= cards[x]
    
    return valid_ways

# Reading input
import sys
input = sys.stdin.read
data = input().split()
n = int(data[0])
k = int(data[1])
cards = list(map(int, data[2:]))

# Calculating and printing the number of valid ways
print(count_valid_decks(n, k, cards))
",2,False,False,False,True,True,True,True,True,False,True,True,True,False,64_gpt-4o,0.5293401931959961,0.029302011377072862,0.5416666666666666
69,apps,gpt-4o,qwen2.5-7b-instruct,"Vasya has got a robot which is situated on an infinite Cartesian plane, initially in the cell $(0, 0)$. Robot can perform the following four kinds of operations:   U — move from $(x, y)$ to $(x, y + 1)$;  D — move from $(x, y)$ to $(x, y - 1)$;  L — move from $(x, y)$ to $(x - 1, y)$;  R — move from $(x, y)$ to $(x + 1, y)$. 

Vasya also has got a sequence of $n$ operations. Vasya wants to modify this sequence so after performing it the robot will end up in $(x, y)$.

Vasya wants to change the sequence so the length of changed subsegment is minimum possible. This length can be calculated as follows: $maxID - minID + 1$, where $maxID$ is the maximum index of a changed operation, and $minID$ is the minimum index of a changed operation. For example, if Vasya changes RRRRRRR to RLRRLRL, then the operations with indices $2$, $5$ and $7$ are changed, so the length of changed subsegment is $7 - 2 + 1 = 6$. Another example: if Vasya changes DDDD to DDRD, then the length of changed subsegment is $1$. 

If there are no changes, then the length of changed subsegment is $0$. Changing an operation means replacing it with some operation (possibly the same); Vasya can't insert new operations into the sequence or remove them.

Help Vasya! Tell him the minimum length of subsegment that he needs to change so that the robot will go from $(0, 0)$ to $(x, y)$, or tell him that it's impossible.


-----Input-----

The first line contains one integer number $n~(1 \le n \le 2 \cdot 10^5)$ — the number of operations.

The second line contains the sequence of operations — a string of $n$ characters. Each character is either U, D, L or R.

The third line contains two integers $x, y~(-10^9 \le x, y \le 10^9)$ — the coordinates of the cell where the robot should end its path.


-----Output-----

Print one integer — the minimum possible length of subsegment that can be changed so the resulting sequence of operations moves the robot from $(0, 0)$ to $(x, y)$. If this change is impossible, print $-1$.


-----Examples-----
Input
5
RURUU
-2 3

Output
3

Input
4
RULR
1 1

Output
0

Input
3
UUU
100 100

Output
-1



-----Note-----

In the first example the sequence can be changed to LULUU. So the length of the changed subsegment is $3 - 1 + 1 = 3$.

In the second example the given sequence already leads the robot to $(x, y)$, so the length of the changed subsegment is $0$.

In the third example the robot can't end his path in the cell $(x, y)$.","def min_subsegment_length_to_target(n, operations, x, y):
    # Initial final position after following all operations
    final_x = 0
    final_y = 0

    # Compute the final coordinates after performing all operations
    for op in operations:
        if op == 'U':
            final_y += 1
        elif op == 'D':
            final_y -= 1
        elif op == 'L':
            final_x -= 1
        elif op == 'R':
            final_x += 1

    # The difference we need to correct
    dx = x - final_x
    dy = y - final_y

    # If the difference is already zero, no changes are needed
    if dx == 0 and dy == 0:
        return 0

    # Sliding window to determine the minimum subsegment length
    min_length = float('inf')
    current_x = 0
    current_y = 0

    # Dictionary to store the position of the robot at each step
    position_map = {(0, 0): -1}
    
    for i in range(n):
        if operations[i] == 'U':
            current_y += 1
        elif operations[i] == 'D':
            current_y -= 1
        elif operations[i] == 'L':
            current_x -= 1
        elif operations[i] == 'R':
            current_x += 1

        # If we have seen the position that would correct the difference before
        target_pos = (current_x + dx, current_y + dy)
        if target_pos in position_map:
            min_length = min(min_length, i - position_map[target_pos])

        position_map[(current_x, current_y)] = i

    return min_length if min_length != float('inf') else -1

# Read input
n = int(input())
operations = input().strip()
x, y = map(int, input().split())

# Get the result
result = min_subsegment_length_to_target(n, operations, x, y)
print(result)
",2,False,False,False,True,True,True,True,False,True,False,False,True,True,69_gpt-4o,0.8019207981559888,0.3338287517701663,0.7083333333333334
76,apps,gpt-4o,qwen2.5-7b-instruct,"You are given a description of a depot. It is a rectangular checkered field of n × m size. Each cell in a field can be empty (""."") or it can be occupied by a wall (""*""). 

You have one bomb. If you lay the bomb at the cell (x, y), then after triggering it will wipe out all walls in the row x and all walls in the column y.

You are to determine if it is possible to wipe out all walls in the depot by placing and triggering exactly one bomb. The bomb can be laid both in an empty cell or in a cell occupied by a wall.


-----Input-----

The first line contains two positive integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the depot field. 

The next n lines contain m symbols ""."" and ""*"" each — the description of the field. j-th symbol in i-th of them stands for cell (i, j). If the symbol is equal to ""."", then the corresponding cell is empty, otherwise it equals ""*"" and the corresponding cell is occupied by a wall.


-----Output-----

If it is impossible to wipe out all walls by placing and triggering exactly one bomb, then print ""NO"" in the first line (without quotes).

Otherwise print ""YES"" (without quotes) in the first line and two integers in the second line — the coordinates of the cell at which the bomb should be laid. If there are multiple answers, print any of them.


-----Examples-----
Input
3 4
.*..
....
.*..

Output
YES
1 2

Input
3 3
..*
.*.
*..

Output
NO

Input
6 5
..*..
..*..
*****
..*..
..*..
..*..

Output
YES
3 3","def find_bomb_placement():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    n = int(data[0])
    m = int(data[1])
    
    grid = []
    index = 2
    for i in range(n):
        grid.append(data[index])
        index += 1

    # Count the number of walls in each row and each column
    row_walls = [0] * n
    col_walls = [0] * m
    
    total_walls = 0
    
    for i in range(n):
        for j in range(m):
            if grid[i][j] == '*':
                row_walls[i] += 1
                col_walls[j] += 1
                total_walls += 1

    # Check every cell to see if placing a bomb there will destroy all walls
    for i in range(n):
        for j in range(m):
            if row_walls[i] + col_walls[j] - (1 if grid[i][j] == '*' else 0) == total_walls:
                print(""YES"")
                print(i + 1, j + 1)
                return

    print(""NO"")

# Call the function to execute the solution
find_bomb_placement()
",2,False,False,False,True,True,True,True,False,True,True,False,False,True,76_gpt-4o,0.7547069367271352,0.2733757528164275,0.625
78,apps,gpt-4o,qwen2.5-7b-instruct,"You are given sequence a_1, a_2, ..., a_{n} of integer numbers of length n. Your task is to find such subsequence that its sum is odd and maximum among all such subsequences. It's guaranteed that given sequence contains subsequence with odd sum.

Subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.

You should write a program which finds sum of the best subsequence.


-----Input-----

The first line contains integer number n (1 ≤ n ≤ 10^5).

The second line contains n integer numbers a_1, a_2, ..., a_{n} ( - 10^4 ≤ a_{i} ≤ 10^4). The sequence contains at least one subsequence with odd sum.


-----Output-----

Print sum of resulting subseqeuence.


-----Examples-----
Input
4
-2 2 -3 1

Output
3

Input
3
2 -5 -3

Output
-1



-----Note-----

In the first example sum of the second and the fourth elements is 3.","# Read input
n = int(input())
a = list(map(int, input().split()))

# Initialize sums
total_sum = sum(a)
min_positive_odd = float('inf')
max_negative_odd = float('-inf')

# Check if the total sum is odd
if total_sum % 2 != 0:
    print(total_sum)
else:
    for num in a:
        if num % 2 != 0:
            if num > 0:
                min_positive_odd = min(min_positive_odd, num)
            else:
                max_negative_odd = max(max_negative_odd, num)
    
    # Calculate possible results by adjusting the total sum to make it odd
    result1 = total_sum - min_positive_odd if min_positive_odd != float('inf') else float('-inf')
    result2 = total_sum - max_negative_odd if max_negative_odd != float('-inf') else float('-inf')

    # Print the maximum valid result
    print(max(result1, result2))
",2,False,False,False,True,False,True,True,False,True,True,False,False,True,78_gpt-4o,0.6684098758997917,0.17434351349348007,0.5833333333333334
80,apps,gpt-4o,qwen2.5-7b-instruct,"Vivek initially has an empty array $a$ and some integer constant $m$.

He performs the following algorithm:  Select a random integer $x$ uniformly in range from $1$ to $m$ and append it to the end of $a$.  Compute the greatest common divisor of integers in $a$.  In case it equals to $1$, break  Otherwise, return to step $1$. 

Find the expected length of $a$. It can be shown that it can be represented as $\frac{P}{Q}$ where $P$ and $Q$ are coprime integers and $Q\neq 0 \pmod{10^9+7}$. Print the value of $P \cdot Q^{-1} \pmod{10^9+7}$.


-----Input-----

The first and only line contains a single integer $m$ ($1 \leq m \leq 100000$).


-----Output-----

Print a single integer — the expected length of the array $a$ written as $P \cdot Q^{-1} \pmod{10^9+7}$.


-----Examples-----
Input
1

Output
1

Input
2

Output
2

Input
4

Output
333333338



-----Note-----

In the first example, since Vivek can choose only integers from $1$ to $1$, he will have $a=[1]$ after the first append operation, and after that quit the algorithm. Hence the length of $a$ is always $1$, so its expected value is $1$ as well.

In the second example, Vivek each time will append either $1$ or $2$, so after finishing the algorithm he will end up having some number of $2$'s (possibly zero), and a single $1$ in the end. The expected length of the list is $1\cdot \frac{1}{2} + 2\cdot \frac{1}{2^2} + 3\cdot \frac{1}{2^3} + \ldots = 2$.","MOD = 10**9 + 7

def mod_inv(a, p):
    return pow(a, p - 2, p)

def expected_length(m):
    if m == 1:
        return 1
    
    # Calculate the sum of lengths
    length_sum = 0
    for i in range(1, m + 1):
        length_sum += mod_inv(i, MOD)
        length_sum %= MOD
    
    # The expected length is m * length_sum % MOD
    result = (m * length_sum) % MOD
    
    return result

# Read input
m = int(input().strip())

# Print the result
print(expected_length(m))
",2,False,True,False,True,True,True,True,False,False,False,True,True,False,80_gpt-4o,0.8170618896931411,0.357067949502515,0.6666666666666666
83,apps,gpt-4o,qwen2.5-7b-instruct,"Noora is a student of one famous high school. It's her final year in school — she is going to study in university next year. However, she has to get an «A» graduation certificate in order to apply to a prestigious one.

In school, where Noora is studying, teachers are putting down marks to the online class register, which are integers from 1 to k. The worst mark is 1, the best is k. Mark that is going to the certificate, is calculated as an average of all the marks, rounded to the closest integer. If several answers are possible, rounding up is produced. For example, 7.3 is rounded to 7, but 7.5 and 7.8784 — to 8. 

For instance, if Noora has marks [8, 9], then the mark to the certificate is 9, because the average is equal to 8.5 and rounded to 9, but if the marks are [8, 8, 9], Noora will have graduation certificate with 8.

To graduate with «A» certificate, Noora has to have mark k.

Noora got n marks in register this year. However, she is afraid that her marks are not enough to get final mark k. Noora decided to ask for help in the internet, where hacker Leha immediately responded to her request. He is ready to hack class register for Noora and to add Noora any number of additional marks from 1 to k. At the same time, Leha want his hack be unseen to everyone, so he decided to add as less as possible additional marks. Please help Leha to calculate the minimal number of marks he has to add, so that final Noora's mark will become equal to k.


-----Input-----

The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100) denoting the number of marks, received by Noora and the value of highest possible mark.

The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ k) denoting marks received by Noora before Leha's hack.


-----Output-----

Print a single integer — minimal number of additional marks, that Leha has to add in order to change Noora's final mark to k.


-----Examples-----
Input
2 10
8 9

Output
4
Input
3 5
4 4 4

Output
3


-----Note-----

Consider the first example testcase.

Maximal mark is 10, Noora received two marks — 8 and 9, so current final mark is 9. To fix it, Leha can add marks [10, 10, 10, 10] (4 marks in total) to the registry, achieving Noora having average mark equal to $\frac{8 + 9 + 10 + 10 + 10 + 10}{6} = \frac{57}{6} = 9.5$. Consequently, new final mark is 10. Less number of marks won't fix the situation.

In the second example Leha can add [5, 5, 5] to the registry, so that making average mark equal to 4.5, which is enough to have 5 in the certificate.","import math

# Read the input values
n, k = map(int, input().split())
marks = list(map(int, input().split()))

# Calculate the current sum of marks and the number of marks
current_sum = sum(marks)
current_count = n

# Iterate to find the minimum number of additional marks needed
while True:
    # Calculate the average with the current sum and count
    current_average = current_sum / current_count
    
    # If the average rounded up is at least 'k', we have our answer
    if math.ceil(current_average) >= k:
        print(current_count - n)
        break
    
    # Otherwise, add a maximum mark (k) and continue
    current_sum += k
    current_count += 1
",2,False,False,False,True,True,True,True,False,False,False,True,True,False,83_gpt-4o,0.6289508873084628,0.13086072969025705,0.5416666666666666
89,apps,gpt-4o,qwen2.5-7b-instruct,"The year 2015 is almost over.

Limak is a little polar bear. He has recently learnt about the binary system. He noticed that the passing year has exactly one zero in its representation in the binary system — 2015_10 = 11111011111_2. Note that he doesn't care about the number of zeros in the decimal representation.

Limak chose some interval of years. He is going to count all years from this interval that have exactly one zero in the binary representation. Can you do it faster?

Assume that all positive integers are always written without leading zeros.


-----Input-----

The only line of the input contains two integers a and b (1 ≤ a ≤ b ≤ 10^18) — the first year and the last year in Limak's interval respectively.


-----Output-----

Print one integer – the number of years Limak will count in his chosen interval.


-----Examples-----
Input
5 10

Output
2

Input
2015 2015

Output
1

Input
100 105

Output
0

Input
72057594000000000 72057595000000000

Output
26



-----Note-----

In the first sample Limak's interval contains numbers 5_10 = 101_2, 6_10 = 110_2, 7_10 = 111_2, 8_10 = 1000_2, 9_10 = 1001_2 and 10_10 = 1010_2. Two of them (101_2 and 110_2) have the described property.","def count_years_with_one_zero_in_binary(a, b):
    def has_exactly_one_zero_in_binary(x):
        binary_representation = bin(x)[2:]
        return binary_representation.count('0') == 1

    count = 0
    for year in range(a, b + 1):
        if has_exactly_one_zero_in_binary(year):
            count += 1
    
    return count

if __name__ == ""__main__"":
    import sys
    input = sys.stdin.read
    data = input().strip().split()
    a = int(data[0])
    b = int(data[1])
    result = count_years_with_one_zero_in_binary(a, b)
    print(result)
",2,False,True,False,True,True,True,True,True,True,True,True,True,True,89_gpt-4o,0.5320826153262929,0.032228761891690744,0.5416666666666666
114,apps,gpt-4o,qwen2.5-7b-instruct,"For a given positive integer n denote its k-rounding as the minimum positive integer x, such that x ends with k or more zeros in base 10 and is divisible by n.

For example, 4-rounding of 375 is 375·80 = 30000. 30000 is the minimum integer such that it ends with 4 or more zeros and is divisible by 375.

Write a program that will perform the k-rounding of n.


-----Input-----

The only line contains two integers n and k (1 ≤ n ≤ 10^9, 0 ≤ k ≤ 8).


-----Output-----

Print the k-rounding of n.


-----Examples-----
Input
375 4

Output
30000

Input
10000 1

Output
10000

Input
38101 0

Output
38101

Input
123456789 8

Output
12345678900000000","import math

def k_rounding(n, k):
    # Calculate the minimum number that ends with at least k zeros
    multiplier = 10**k
    # Find the smallest number x that is a multiple of n and also ends with k zeros
    x = (n * (multiplier // math.gcd(n, multiplier)))
    return x

# Read input
n, k = map(int, input().split())
# Print the k-rounding of n
print(k_rounding(n, k))
",2,True,True,False,True,True,True,True,False,False,True,True,False,True,114_gpt-4o,0.7668295849005334,0.2842287752455744,0.7083333333333334
119,apps,gpt-4o,qwen2.5-7b-instruct,"Ted has a pineapple. This pineapple is able to bark like a bulldog! At time t (in seconds) it barks for the first time. Then every s seconds after it, it barks twice with 1 second interval. Thus it barks at times t, t + s, t + s + 1, t + 2s, t + 2s + 1, etc.

 [Image] 

Barney woke up in the morning and wants to eat the pineapple, but he can't eat it when it's barking. Barney plans to eat it at time x (in seconds), so he asked you to tell him if it's gonna bark at that time.


-----Input-----

The first and only line of input contains three integers t, s and x (0 ≤ t, x ≤ 10^9, 2 ≤ s ≤ 10^9) — the time the pineapple barks for the first time, the pineapple barking interval, and the time Barney wants to eat the pineapple respectively.


-----Output-----

Print a single ""YES"" (without quotes) if the pineapple will bark at time x or a single ""NO"" (without quotes) otherwise in the only line of output.


-----Examples-----
Input
3 10 4

Output
NO

Input
3 10 3

Output
YES

Input
3 8 51

Output
YES

Input
3 8 52

Output
YES



-----Note-----

In the first and the second sample cases pineapple will bark at moments 3, 13, 14, ..., so it won't bark at the moment 4 and will bark at the moment 3.

In the third and fourth sample cases pineapple will bark at moments 3, 11, 12, 19, 20, 27, 28, 35, 36, 43, 44, 51, 52, 59, ..., so it will bark at both moments 51 and 52.","t, s, x = map(int, input().split())

if x == t:
    print(""YES"")
elif x > t:
    if (x - t) % s == 0:
        print(""YES"")
    elif (x - t - 1) % s == 0 and x != t + 1:
        print(""YES"")
    else:
        print(""NO"")
else:
    print(""NO"")
",2,True,False,True,True,True,True,True,False,True,True,False,True,False,119_gpt-4o,0.9099317296650239,0.5192803519432471,0.75
121,apps,gpt-4o,qwen2.5-7b-instruct,"The process of mammoth's genome decoding in Berland comes to its end!

One of the few remaining tasks is to restore unrecognized nucleotides in a found chain s. Each nucleotide is coded with a capital letter of English alphabet: 'A', 'C', 'G' or 'T'. Unrecognized nucleotides are coded by a question mark '?'. Thus, s is a string consisting of letters 'A', 'C', 'G', 'T' and characters '?'.

It is known that the number of nucleotides of each of the four types in the decoded genome of mammoth in Berland should be equal.

Your task is to decode the genome and replace each unrecognized nucleotide with one of the four types so that the number of nucleotides of each of the four types becomes equal.


-----Input-----

The first line contains the integer n (4 ≤ n ≤ 255) — the length of the genome.

The second line contains the string s of length n — the coded genome. It consists of characters 'A', 'C', 'G', 'T' and '?'.


-----Output-----

If it is possible to decode the genome, print it. If there are multiple answer, print any of them. If it is not possible, print three equals signs in a row: ""==="" (without quotes).


-----Examples-----
Input
8
AG?C??CT

Output
AGACGTCT

Input
4
AGCT

Output
AGCT

Input
6
????G?

Output
===

Input
4
AA??

Output
===



-----Note-----

In the first example you can replace the first question mark with the letter 'A', the second question mark with the letter 'G', the third question mark with the letter 'T', then each nucleotide in the genome would be presented twice.

In the second example the genome is already decoded correctly and each nucleotide is exactly once in it.

In the third and the fourth examples it is impossible to decode the genom.","def decode_genome():
    import sys
    input = sys.stdin.read
    data = input().split()

    n = int(data[0])
    s = data[1]

    if n % 4 != 0:
        print(""==="")
        return

    target_count = n // 4
    counts = {'A': 0, 'C': 0, 'G': 0, 'T': 0}

    for char in s:
        if char in counts:
            counts[char] += 1

    for char in counts:
        if counts[char] > target_count:
            print(""==="")
            return

    result = list(s)

    for i in range(n):
        if result[i] == '?':
            for char in counts:
                if counts[char] < target_count:
                    result[i] = char
                    counts[char] += 1
                    break

    print("""".join(result))

decode_genome()
",2,True,False,False,True,True,True,True,True,True,True,False,True,False,121_gpt-4o,0.8829629651433227,0.46218251669300164,0.75
126,apps,gpt-4o,qwen2.5-7b-instruct,"Sagheer is walking in the street when he comes to an intersection of two roads. Each road can be represented as two parts where each part has 3 lanes getting into the intersection (one for each direction) and 3 lanes getting out of the intersection, so we have 4 parts in total. Each part has 4 lights, one for each lane getting into the intersection (l — left, s — straight, r — right) and a light p for a pedestrian crossing.  [Image] 

An accident is possible if a car can hit a pedestrian. This can happen if the light of a pedestrian crossing of some part and the light of a lane that can get to or from that same part are green at the same time.

Now, Sagheer is monitoring the configuration of the traffic lights. Your task is to help him detect whether an accident is possible.


-----Input-----

The input consists of four lines with each line describing a road part given in a counter-clockwise order.

Each line contains four integers l, s, r, p — for the left, straight, right and pedestrian lights, respectively. The possible values are 0 for red light and 1 for green light.


-----Output-----

On a single line, print ""YES"" if an accident is possible, and ""NO"" otherwise.


-----Examples-----
Input
1 0 0 1
0 1 0 0
0 0 1 0
0 0 0 1

Output
YES

Input
0 1 1 0
1 0 1 0
1 1 0 0
0 0 0 1

Output
NO

Input
1 0 0 0
0 0 0 1
0 0 0 0
1 0 1 0

Output
NO



-----Note-----

In the first example, some accidents are possible because cars of part 1 can hit pedestrians of parts 1 and 4. Also, cars of parts 2 and 3 can hit pedestrians of part 4.

In the second example, no car can pass the pedestrian crossing of part 4 which is the only green pedestrian light. So, no accident can occur.","# Reading input
traffic_lights = []
for _ in range(4):
    traffic_lights.append(list(map(int, input().split())))

# Check for possible accidents
accident_possible = False
for i in range(4):
    l, s, r, p = traffic_lights[i]
    if p == 1:
        # Check if any vehicle light in the same part is green
        if l == 1 or s == 1 or r == 1:
            accident_possible = True
            break
        # Check if any vehicle light in the corresponding parts is green
        for j in range(3):
            if traffic_lights[(i + j) % 4][j] == 1:
                accident_possible = True
                break
        if accident_possible:
            break

# Output the result
if accident_possible:
    print(""YES"")
else:
    print(""NO"")
",2,False,False,False,True,True,True,True,True,True,True,False,False,True,126_gpt-4o,0.8315221560314535,0.37860202468904464,0.6666666666666666
136,apps,gpt-4o,qwen2.5-7b-instruct,"Imp is watching a documentary about cave painting. [Image] 

Some numbers, carved in chaotic order, immediately attracted his attention. Imp rapidly proposed a guess that they are the remainders of division of a number n by all integers i from 1 to k. Unfortunately, there are too many integers to analyze for Imp.

Imp wants you to check whether all these remainders are distinct. Formally, he wants to check, if all $n \text{mod} i$, 1 ≤ i ≤ k, are distinct, i. e. there is no such pair (i, j) that:   1 ≤ i < j ≤ k,  $n \operatorname{mod} i = n \operatorname{mod} j$, where $x \operatorname{mod} y$ is the remainder of division x by y. 


-----Input-----

The only line contains two integers n, k (1 ≤ n, k ≤ 10^18).


-----Output-----

Print ""Yes"", if all the remainders are distinct, and ""No"" otherwise.

You can print each letter in arbitrary case (lower or upper).


-----Examples-----
Input
4 4

Output
No

Input
5 3

Output
Yes



-----Note-----

In the first sample remainders modulo 1 and 4 coincide.","n, k = map(int, input().split())

def are_remainders_distinct(n, k):
    # For k >= n, there will always be non-distinct remainders
    if k >= n:
        return ""No""
    
    # For k < n, we'll check for remainders
    seen_remainders = set()
    for i in range(1, k + 1):
        remainder = n % i
        if remainder in seen_remainders:
            return ""No""
        seen_remainders.add(remainder)
    
    return ""Yes""

print(are_remainders_distinct(n, k))
",2,False,True,True,True,True,True,True,True,True,True,True,True,True,136_gpt-4o,0.7939507410280228,0.32340413258344014,0.625
147,apps,gpt-4o,qwen2.5-7b-instruct,"This morning, Roman woke up and opened the browser with $n$ opened tabs numbered from $1$ to $n$. There are two kinds of tabs: those with the information required for the test and those with social network sites. Roman decided that there are too many tabs open so he wants to close some of them.

He decided to accomplish this by closing every $k$-th ($2 \leq k \leq n - 1$) tab. Only then he will decide whether he wants to study for the test or to chat on the social networks. Formally, Roman will choose one tab (let its number be $b$) and then close all tabs with numbers $c = b + i \cdot k$ that satisfy the following condition: $1 \leq c \leq n$ and $i$ is an integer (it may be positive, negative or zero).

For example, if $k = 3$, $n = 14$ and Roman chooses $b = 8$, then he will close tabs with numbers $2$, $5$, $8$, $11$ and $14$.

After closing the tabs Roman will calculate the amount of remaining tabs with the information for the test (let's denote it $e$) and the amount of remaining social network tabs ($s$). Help Roman to calculate the maximal absolute value of the difference of those values $|e - s|$ so that it would be easy to decide what to do next.


-----Input-----

The first line contains two integers $n$ and $k$ ($2 \leq k < n \leq 100$) — the amount of tabs opened currently and the distance between the tabs closed.

The second line consists of $n$ integers, each of them equal either to $1$ or to $-1$. The $i$-th integer denotes the type of the $i$-th tab: if it is equal to $1$, this tab contains information for the test, and if it is equal to $-1$, it's a social network tab.


-----Output-----

Output a single integer — the maximum absolute difference between the amounts of remaining tabs of different types $|e - s|$.


-----Examples-----
Input
4 2
1 1 -1 1

Output
2

Input
14 3
-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1

Output
9



-----Note-----

In the first example we can choose $b = 1$ or $b = 3$. We will delete then one tab of each type and the remaining tabs are then all contain test information. Thus, $e = 2$ and $s = 0$ and $|e - s| = 2$.

In the second example, on the contrary, we can leave opened only tabs that have social networks opened in them.","# Read input values
n, k = map(int, input().split())
tab_types = list(map(int, input().split()))

# Function to calculate remaining tabs after closing every k-th tab starting from b
def calculate_remaining_tabs(b):
    remaining_tabs = tab_types[:]
    for i in range(b, n, k):
        remaining_tabs[i] = 0
    for i in range(b, -1, -k):
        remaining_tabs[i] = 0
    return remaining_tabs

max_diff = 0

# Iterate over each possible starting tab b
for b in range(n):
    remaining_tabs = calculate_remaining_tabs(b)
    e = remaining_tabs.count(1)
    s = remaining_tabs.count(-1)
    max_diff = max(max_diff, abs(e - s))

# Output the maximum absolute difference
print(max_diff)
",2,True,False,False,True,True,True,False,False,False,True,True,True,True,147_gpt-4o,0.7238859101010041,0.22752781190837426,0.7083333333333334
152,apps,gpt-4o,qwen2.5-7b-instruct,"Beroffice text editor has a wide range of features that help working with text. One of the features is an automatic search for typos and suggestions of how to fix them.

Beroffice works only with small English letters (i.e. with 26 letters from a to z). Beroffice thinks that a word is typed with a typo if there are three or more consonants in a row in the word. The only exception is that if the block of consonants has all letters the same, then this block (even if its length is greater than three) is not considered a typo. Formally, a word is typed with a typo if there is a block of not less that three consonants in a row, and there are at least two different letters in this block.

For example:

  the following words have typos: ""hellno"", ""hackcerrs"" and ""backtothefutttture"";  the following words don't have typos: ""helllllooooo"", ""tobeornottobe"" and ""oooooo"". 

When Beroffice editor finds a word with a typo, it inserts as little as possible number of spaces in this word (dividing it into several words) in such a way that each of the resulting words is typed without any typos.

Implement this feature of Beroffice editor. Consider the following letters as the only vowels: 'a', 'e', 'i', 'o' and 'u'. All the other letters are consonants in this problem.


-----Input-----

The only line contains a non-empty word consisting of small English letters. The length of the word is between 1 and 3000 letters.


-----Output-----

Print the given word without any changes if there are no typos.

If there is at least one typo in the word, insert the minimum number of spaces into the word so that each of the resulting words doesn't have any typos. If there are multiple solutions, print any of them.


-----Examples-----
Input
hellno

Output
hell no 

Input
abacaba

Output
abacaba 

Input
asdfasdf

Output
asd fasd f","def is_vowel(c):
    return c in 'aeiou'

def has_typo(block):
    if len(block) < 3:
        return False
    first_consonant = block[0]
    for c in block:
        if c != first_consonant:
            return True
    return False

def correct_typo(word):
    n = len(word)
    result = []
    i = 0

    while i < n:
        start = i
        while i < n and not is_vowel(word[i]):
            i += 1
        if i - start >= 3 and has_typo(word[start:i]):
            result.append(word[start:start+2])
            start += 2
            while start < i:
                result.append(word[start:start+1])
                start += 1
        else:
            result.append(word[start:i])
        while i < n and is_vowel(word[i]):
            i += 1
        result.append(word[start:i])
        
    return ' '.join(result)

if __name__ == ""__main__"":
    word = input().strip()
    print(correct_typo(word))
",2,False,False,False,True,True,False,False,False,False,True,False,False,True,152_gpt-4o,0.8217422082576146,0.34996159676955946,0.5833333333333334
153,apps,gpt-4o,qwen2.5-7b-instruct,"Anton is playing a very interesting computer game, but now he is stuck at one of the levels. To pass to the next level he has to prepare n potions.

Anton has a special kettle, that can prepare one potions in x seconds. Also, he knows spells of two types that can faster the process of preparing potions.  Spells of this type speed up the preparation time of one potion. There are m spells of this type, the i-th of them costs b_{i} manapoints and changes the preparation time of each potion to a_{i} instead of x.  Spells of this type immediately prepare some number of potions. There are k such spells, the i-th of them costs d_{i} manapoints and instantly create c_{i} potions. 

Anton can use no more than one spell of the first type and no more than one spell of the second type, and the total number of manapoints spent should not exceed s. Consider that all spells are used instantly and right before Anton starts to prepare potions.

Anton wants to get to the next level as fast as possible, so he is interested in the minimum number of time he needs to spent in order to prepare at least n potions.


-----Input-----

The first line of the input contains three integers n, m, k (1 ≤ n ≤ 2·10^9, 1 ≤ m, k ≤ 2·10^5) — the number of potions, Anton has to make, the number of spells of the first type and the number of spells of the second type.

The second line of the input contains two integers x and s (2 ≤ x ≤ 2·10^9, 1 ≤ s ≤ 2·10^9) — the initial number of seconds required to prepare one potion and the number of manapoints Anton can use.

The third line contains m integers a_{i} (1 ≤ a_{i} < x) — the number of seconds it will take to prepare one potion if the i-th spell of the first type is used.

The fourth line contains m integers b_{i} (1 ≤ b_{i} ≤ 2·10^9) — the number of manapoints to use the i-th spell of the first type.

There are k integers c_{i} (1 ≤ c_{i} ≤ n) in the fifth line — the number of potions that will be immediately created if the i-th spell of the second type is used. It's guaranteed that c_{i} are not decreasing, i.e. c_{i} ≤ c_{j} if i < j.

The sixth line contains k integers d_{i} (1 ≤ d_{i} ≤ 2·10^9) — the number of manapoints required to use the i-th spell of the second type. It's guaranteed that d_{i} are not decreasing, i.e. d_{i} ≤ d_{j} if i < j.


-----Output-----

Print one integer — the minimum time one has to spent in order to prepare n potions.


-----Examples-----
Input
20 3 2
10 99
2 4 3
20 10 40
4 15
10 80

Output
20

Input
20 3 2
10 99
2 4 3
200 100 400
4 15
100 800

Output
200



-----Note-----

In the first sample, the optimum answer is to use the second spell of the first type that costs 10 manapoints. Thus, the preparation time of each potion changes to 4 seconds. Also, Anton should use the second spell of the second type to instantly prepare 15 potions spending 80 manapoints. The total number of manapoints used is 10 + 80 = 90, and the preparation time is 4·5 = 20 seconds (15 potions were prepared instantly, and the remaining 5 will take 4 seconds each).

In the second sample, Anton can't use any of the spells, so he just prepares 20 potions, spending 10 seconds on each of them and the answer is 20·10 = 200.","def min_time_to_prepare_potions(n, m, k, x, s, a, b, c, d):
    min_time = n * x

    # Try using only the second type of spell
    for i in range(k):
        if d[i] <= s:
            remaining_potions = max(0, n - c[i])
            time_with_spell = remaining_potions * x
            min_time = min(min_time, time_with_spell)
    
    # Try using only the first type of spell
    for i in range(m):
        if b[i] <= s:
            time_with_spell = n * a[i]
            min_time = min(min_time, time_with_spell)

    # Try using both types of spells
    for i in range(m):
        if b[i] <= s:
            remaining_manapoints = s - b[i]
            for j in range(k):
                if d[j] <= remaining_manapoints:
                    remaining_potions = max(0, n - c[j])
                    time_with_both_spells = remaining_potions * a[i]
                    min_time = min(min_time, time_with_both_spells)
                else:
                    break

    return min_time

if __name__ == ""__main__"":
    import sys
    input = sys.stdin.read
    data = input().split()
    
    n = int(data[0])
    m = int(data[1])
    k = int(data[2])
    x = int(data[3])
    s = int(data[4])
    
    a = list(map(int, data[5:5+m]))
    b = list(map(int, data[5+m:5+2*m]))
    c = list(map(int, data[5+2*m:5+2*m+k]))
    d = list(map(int, data[5+2*m+k:5+2*m+2*k]))

    result = min_time_to_prepare_potions(n, m, k, x, s, a, b, c, d)
    print(result)
",2,True,False,False,True,True,True,True,True,True,True,True,False,False,153_gpt-4o,0.6678398532199493,0.17407609562715398,0.5833333333333334
159,apps,gpt-4o,qwen2.5-7b-instruct,"Berland annual chess tournament is coming!

Organizers have gathered 2·n chess players who should be divided into two teams with n people each. The first team is sponsored by BerOil and the second team is sponsored by BerMobile. Obviously, organizers should guarantee the win for the team of BerOil.

Thus, organizers should divide all 2·n players into two teams with n people each in such a way that the first team always wins.

Every chess player has its rating r_{i}. It is known that chess player with the greater rating always wins the player with the lower rating. If their ratings are equal then any of the players can win.

After teams assignment there will come a drawing to form n pairs of opponents: in each pair there is a player from the first team and a player from the second team. Every chess player should be in exactly one pair. Every pair plays once. The drawing is totally random.

Is it possible to divide all 2·n players into two teams with n people each so that the player from the first team in every pair wins regardless of the results of the drawing?


-----Input-----

The first line contains one integer n (1 ≤ n ≤ 100).

The second line contains 2·n integers a_1, a_2, ... a_2n (1 ≤ a_{i} ≤ 1000).


-----Output-----

If it's possible to divide all 2·n players into two teams with n people each so that the player from the first team in every pair wins regardless of the results of the drawing, then print ""YES"". Otherwise print ""NO"".


-----Examples-----
Input
2
1 3 2 4

Output
YES

Input
1
3 3

Output
NO","# Read input
n = int(input())
ratings = list(map(int, input().split()))

# Sort the ratings
ratings.sort()

# Split the sorted ratings into two teams
team1 = ratings[:n]
team2 = ratings[n:]

# Check if every player in team1 has a higher rating than every player in team2
possible = all(team1[i] < team2[i] for i in range(n))

# Output the result
if possible:
    print(""YES"")
else:
    print(""NO"")
",2,False,False,False,True,True,True,True,True,True,True,True,True,True,159_gpt-4o,0.5495298594419469,0.048886123808425795,0.5833333333333334
162,apps,gpt-4o,qwen2.5-7b-instruct,"Cat Furrier Transform is a popular algorithm among cat programmers to create longcats. As one of the greatest cat programmers ever exist, Neko wants to utilize this algorithm to create the perfect longcat.

Assume that we have a cat with a number $x$. A perfect longcat is a cat with a number equal $2^m - 1$ for some non-negative integer $m$. For example, the numbers $0$, $1$, $3$, $7$, $15$ and so on are suitable for the perfect longcats.

In the Cat Furrier Transform, the following operations can be performed on $x$:  (Operation A): you select any non-negative integer $n$ and replace $x$ with $x \oplus (2^n - 1)$, with $\oplus$ being a bitwise XOR operator. (Operation B): replace $x$ with $x + 1$. 

The first applied operation must be of type A, the second of type B, the third of type A again, and so on. Formally, if we number operations from one in the order they are executed, then odd-numbered operations must be of type A and the even-numbered operations must be of type B.

Neko wants to produce perfect longcats at industrial scale, thus for each cat Neko only wants to perform at most $40$ operations. Can you help Neko writing a transformation plan?

Note that it is not required to minimize the number of operations. You just need to use no more than $40$ operations.


-----Input-----

The only line contains a single integer $x$ ($1 \le x \le 10^6$).


-----Output-----

The first line should contain a single integer $t$ ($0 \le t \le 40$) — the number of operations to apply.

Then for each odd-numbered operation print the corresponding number $n_i$ in it. That is, print $\lceil \frac{t}{2} \rceil$ integers $n_i$ ($0 \le n_i \le 30$), denoting the replacement $x$ with $x \oplus (2^{n_i} - 1)$ in the corresponding step.

If there are multiple possible answers, you can print any of them. It is possible to show, that there is at least one answer in the constraints of this problem.


-----Examples-----
Input
39

Output
4
5 3 
Input
1

Output
0

Input
7

Output
0



-----Note-----

In the first test, one of the transforms might be as follows: $39 \to 56 \to 57 \to 62 \to 63$. Or more precisely: Pick $n = 5$. $x$ is transformed into $39 \oplus 31$, or $56$.  Increase $x$ by $1$, changing its value to $57$.  Pick $n = 3$. $x$ is transformed into $57 \oplus 7$, or $62$.  Increase $x$ by $1$, changing its value to $63 = 2^6 - 1$. 

In the second and third test, the number already satisfies the goal requirement.","def is_perfect_longcat(x):
    # Check if x is of the form 2^m - 1
    return (x & (x + 1)) == 0

def find_transform(x):
    operations = []
    count = 0
    while not is_perfect_longcat(x) and count < 40:
        if count % 2 == 0:
            # Operation A
            n = 0
            while (1 << n) - 1 <= x:
                n += 1
            # Find the highest bit position with 0
            while n > 0 and ((x >> (n - 1)) & 1) == 1:
                n -= 1
            if n == 0:
                break
            operations.append(n)
            x ^= (1 << n) - 1
        else:
            # Operation B
            x += 1
        count += 1
    
    return count, operations

# Read input
x = int(input())

t, ops = find_transform(x)

print(t)
for i in range(0, len(ops), 2):
    print(ops[i], end=' ')
",2,False,False,True,True,True,True,True,False,False,True,False,False,False,162_gpt-4o,0.8464195983686785,0.4031727745421858,0.7083333333333334
165,apps,gpt-4o,qwen2.5-7b-instruct,"It's a beautiful April day and Wallace is playing football with his friends. But his friends do not know that Wallace actually stayed home with Gromit and sent them his robotic self instead. Robo-Wallace has several advantages over the other guys. For example, he can hit the ball directly to the specified point. And yet, the notion of a giveaway is foreign to him. The combination of these features makes the Robo-Wallace the perfect footballer — as soon as the ball gets to him, he can just aim and hit the goal. He followed this tactics in the first half of the match, but he hit the goal rarely. The opposing team has a very good goalkeeper who catches most of the balls that fly directly into the goal. But Robo-Wallace is a quick thinker, he realized that he can cheat the goalkeeper. After all, they are playing in a football box with solid walls. Robo-Wallace can kick the ball to the other side, then the goalkeeper will not try to catch the ball. Then, if the ball bounces off the wall and flies into the goal, the goal will at last be scored.

Your task is to help Robo-Wallace to detect a spot on the wall of the football box, to which the robot should kick the ball, so that the ball bounces once and only once off this wall and goes straight to the goal. In the first half of the match Robo-Wallace got a ball in the head and was severely hit. As a result, some of the schemes have been damaged. Because of the damage, Robo-Wallace can only aim to his right wall (Robo-Wallace is standing with his face to the opposing team's goal).

The football box is rectangular. Let's introduce a two-dimensional coordinate system so that point (0, 0) lies in the lower left corner of the field, if you look at the box above. Robo-Wallace is playing for the team, whose goal is to the right. It is an improvised football field, so the gate of Robo-Wallace's rivals may be not in the middle of the left wall. [Image] 

In the given coordinate system you are given:   y_1, y_2 — the y-coordinates of the side pillars of the goalposts of robo-Wallace's opponents;  y_{w} — the y-coordinate of the wall to which Robo-Wallace is aiming;  x_{b}, y_{b} — the coordinates of the ball's position when it is hit;  r — the radius of the ball. 

A goal is scored when the center of the ball crosses the OY axis in the given coordinate system between (0, y_1) and (0, y_2). The ball moves along a straight line. The ball's hit on the wall is perfectly elastic (the ball does not shrink from the hit), the angle of incidence equals the angle of reflection. If the ball bounces off the wall not to the goal, that is, if it hits the other wall or the goal post, then the opposing team catches the ball and Robo-Wallace starts looking for miscalculation and gets dysfunctional. Such an outcome, if possible, should be avoided. We assume that the ball touches an object, if the distance from the center of the ball to the object is no greater than the ball radius r.


-----Input-----

The first and the single line contains integers y_1, y_2, y_{w}, x_{b}, y_{b}, r (1 ≤ y_1, y_2, y_{w}, x_{b}, y_{b} ≤ 10^6; y_1 < y_2 < y_{w}; y_{b} + r < y_{w}; 2·r < y_2 - y_1).

It is guaranteed that the ball is positioned correctly in the field, doesn't cross any wall, doesn't touch the wall that Robo-Wallace is aiming at. The goal posts can't be located in the field corners.


-----Output-----

If Robo-Wallace can't score a goal in the described manner, print ""-1"" (without the quotes). Otherwise, print a single number x_{w} — the abscissa of his point of aiming. 

If there are multiple points of aiming, print the abscissa of any of them. When checking the correctness of the answer, all comparisons are made with the permissible absolute error, equal to 10^{ - 8}. 

It is recommended to print as many characters after the decimal point as possible.


-----Examples-----
Input
4 10 13 10 3 1

Output
4.3750000000

Input
1 4 6 2 2 1

Output
-1

Input
3 10 15 17 9 2

Output
11.3333333333



-----Note-----

Note that in the first and third samples other correct values of abscissa x_{w} are also possible.","def find_aiming_point(y1, y2, yw, xb, yb, r):
    # Boundary conditions check
    if yb + r >= yw or y1 >= y2 or y1 + r >= y2 - r:
        return -1

    # Calculate the intersection point on the right wall
    # Using the geometry and reflection properties
    # The goal is to find the x_w such that the ball bounces and hits the goal
    
    # Using the fact that the reflection point must maintain the property of the line
    # We use the formula derived from the reflection geometry
    # slope = (yb - y_w) / (xb - x_w)
    # reflected_slope = (y_w - goal_y) / (x_w)
    
    # Choose a point on the goal line within the goal range
    y_goal_mid = (y1 + y2) / 2
    if y_goal_mid - r < y1 or y_goal_mid + r > y2:
        return -1

    # Calculate x_w
    x_w = xb - (2 * (yb - y_goal_mid) * (xb - 0)) / (y_goal_mid - yb)
    
    if x_w <= 0:
        return -1

    return x_w

# Read input
import sys
input = sys.stdin.read
data = input().strip().split()

y1 = int(data[0])
y2 = int(data[1])
yw = int(data[2])
xb = int(data[3])
yb = int(data[4])
r = int(data[5])

# Calculate the result
result = find_aiming_point(y1, y2, yw, xb, yb, r)
if result == -1:
    print(result)
else:
    print(f""{result:.10f}"")
",2,False,False,False,True,True,True,False,True,False,True,True,True,False,165_gpt-4o,0.5836571653413781,0.08398384419307396,0.5833333333333334
166,apps,gpt-4o,qwen2.5-7b-instruct,"Vasiliy spent his vacation in a sanatorium, came back and found that he completely forgot details of his vacation! 

Every day there was a breakfast, a dinner and a supper in a dining room of the sanatorium (of course, in this order). The only thing that Vasiliy has now is a card from the dining room contaning notes how many times he had a breakfast, a dinner and a supper (thus, the card contains three integers). Vasiliy could sometimes have missed some meal, for example, he could have had a breakfast and a supper, but a dinner, or, probably, at some days he haven't been at the dining room at all.

Vasiliy doesn't remember what was the time of the day when he arrived to sanatorium (before breakfast, before dinner, before supper or after supper), and the time when he left it (before breakfast, before dinner, before supper or after supper). So he considers any of these options. After Vasiliy arrived to the sanatorium, he was there all the time until he left. Please note, that it's possible that Vasiliy left the sanatorium on the same day he arrived.

According to the notes in the card, help Vasiliy determine the minimum number of meals in the dining room that he could have missed. We shouldn't count as missed meals on the arrival day before Vasiliy's arrival and meals on the departure day after he left.


-----Input-----

The only line contains three integers b, d and s (0 ≤ b, d, s ≤ 10^18,  b + d + s ≥ 1) — the number of breakfasts, dinners and suppers which Vasiliy had during his vacation in the sanatorium. 


-----Output-----

Print single integer — the minimum possible number of meals which Vasiliy could have missed during his vacation. 


-----Examples-----
Input
3 2 1

Output
1


Input
1 0 0

Output
0


Input
1 1 1

Output
0


Input
1000000000000000000 0 1000000000000000000

Output
999999999999999999





-----Note-----

In the first sample, Vasiliy could have missed one supper, for example, in case he have arrived before breakfast, have been in the sanatorium for two days (including the day of arrival) and then have left after breakfast on the third day. 

In the second sample, Vasiliy could have arrived before breakfast, have had it, and immediately have left the sanatorium, not missing any meal.

In the third sample, Vasiliy could have been in the sanatorium for one day, not missing any meal.","b, d, s = map(int, input().split())

# Find the maximum number of meals taken in any category
max_meals = max(b, d, s)

# Calculate the potential missed meals for each category
missed_b = max(0, max_meals - 1 - b)
missed_d = max(0, max_meals - 1 - d)
missed_s = max(0, max_meals - 1 - s)

# The total number of missed meals is the sum of missed meals in each category
total_missed_meals = missed_b + missed_d + missed_s

print(total_missed_meals)
",2,True,False,False,True,True,False,True,True,False,False,False,False,True,166_gpt-4o,0.8860276206871581,0.4730215616498261,0.75
170,apps,gpt-4o,qwen2.5-7b-instruct,"Kolya Gerasimov loves kefir very much. He lives in year 1984 and knows all the details of buying this delicious drink. One day, as you probably know, he found himself in year 2084, and buying kefir there is much more complicated.

Kolya is hungry, so he went to the nearest milk shop. In 2084 you may buy kefir in a plastic liter bottle, that costs a rubles, or in glass liter bottle, that costs b rubles. Also, you may return empty glass bottle and get c (c < b) rubles back, but you cannot return plastic bottles.

Kolya has n rubles and he is really hungry, so he wants to drink as much kefir as possible. There were no plastic bottles in his 1984, so Kolya doesn't know how to act optimally and asks for your help.


-----Input-----

First line of the input contains a single integer n (1 ≤ n ≤ 10^18) — the number of rubles Kolya has at the beginning.

Then follow three lines containing integers a, b and c (1 ≤ a ≤ 10^18, 1 ≤ c < b ≤ 10^18) — the cost of one plastic liter bottle, the cost of one glass liter bottle and the money one can get back by returning an empty glass bottle, respectively.


-----Output-----

Print the only integer — maximum number of liters of kefir, that Kolya can drink.


-----Examples-----
Input
10
11
9
8

Output
2

Input
10
5
6
1

Output
2



-----Note-----

In the first sample, Kolya can buy one glass bottle, then return it and buy one more glass bottle. Thus he will drink 2 liters of kefir.

In the second sample, Kolya can buy two plastic bottle and get two liters of kefir, or he can buy one liter glass bottle, then return it and buy one plastic bottle. In both cases he will drink two liters of kefir.","n = int(input())
a = int(input())
b = int(input())
c = int(input())

if a <= b - c:
    # If plastic bottle is cheaper or same as effective cost of glass bottle
    print(n // a)
else:
    # Use as many rubles as possible to buy and return glass bottles
    k = (n - b) // (b - c) + 1  # Max number of glass bottles that can be bought and returned
    remaining_rubles = n - k * (b - c)
    
    if remaining_rubles < b:
        # If remaining rubles are less than cost of one glass bottle, buy plastic bottles
        print(k + remaining_rubles // a)
    else:
        # Otherwise, buy one more glass bottle
        print(k + 1)
",2,False,False,False,True,True,True,True,True,True,True,False,True,True,170_gpt-4o,0.8439146449438588,0.39873453622229693,0.7083333333333334
175,apps,gpt-4o,qwen2.5-7b-instruct,"Implication is a function of two logical arguments, its value is false if and only if the value of the first argument is true and the value of the second argument is false. 

Implication is written by using character '$\rightarrow$', and the arguments and the result of the implication are written as '0' (false) and '1' (true). According to the definition of the implication: 

$0 \rightarrow 0 = 1$ 

$0 \rightarrow 1 = 1$

$1 \rightarrow 0 = 0$ 

$1 \rightarrow 1 = 1$

When a logical expression contains multiple implications, then when there are no brackets, it will be calculated from left to fight. For example,

$0 \rightarrow 0 \rightarrow 0 =(0 \rightarrow 0) \rightarrow 0 = 1 \rightarrow 0 = 0$. 

When there are brackets, we first calculate the expression in brackets. For example,

$0 \rightarrow(0 \rightarrow 0) = 0 \rightarrow 1 = 1$.

For the given logical expression $a_{1} \rightarrow a_{2} \rightarrow a_{3} \rightarrow \cdots \cdots a_{n}$ determine if it is possible to place there brackets so that the value of a logical expression is false. If it is possible, your task is to find such an arrangement of brackets.


-----Input-----

The first line contains integer n (1 ≤ n ≤ 100 000) — the number of arguments in a logical expression.

The second line contains n numbers a_1, a_2, ..., a_{n} ($a_{i} \in \{0,1 \}$), which means the values of arguments in the expression in the order they occur.


-----Output-----

Print ""NO"" (without the quotes), if it is impossible to place brackets in the expression so that its value was equal to 0.

Otherwise, print ""YES"" in the first line and the logical expression with the required arrangement of brackets in the second line.

The expression should only contain characters '0', '1', '-' (character with ASCII code 45), '>' (character with ASCII code 62), '(' and ')'. Characters '-' and '>' can occur in an expression only paired like that: (""->"") and represent implication. The total number of logical arguments (i.e. digits '0' and '1') in the expression must be equal to n. The order in which the digits follow in the expression from left to right must coincide with a_1, a_2, ..., a_{n}.

The expression should be correct. More formally, a correct expression is determined as follows:  Expressions ""0"", ""1"" (without the quotes) are correct.  If v_1, v_2 are correct, then v_1->v_2 is a correct expression.  If v is a correct expression, then (v) is a correct expression. 

The total number of characters in the resulting expression mustn't exceed 10^6.

If there are multiple possible answers, you are allowed to print any of them.


-----Examples-----
Input
4
0 1 1 0

Output
YES
(((0)->1)->(1->0))

Input
2
1 1

Output
NO

Input
1
0

Output
YES
0","# Read input
n = int(input())
a = list(map(int, input().split()))

# Check if there exists at least one '1' followed by a '0' in the list
if 0 in a and a[:a.index(0)].count(1) > 0:
    # It's possible to arrange brackets to make the expression false
    print(""YES"")
    result = []
    
    # Find the first 1 and the first 0 after that
    first_one_index = a.index(1)
    first_zero_index = a[first_one_index:].index(0) + first_one_index
    
    # Building the expression
    for i in range(first_one_index):
        result.append(str(a[i]) + ""->"")
    result.append(""("")
    for i in range(first_one_index, first_zero_index):
        result.append(str(a[i]) + ""->"")
    result.append(str(a[first_zero_index]))
    result.append("")"")
    for i in range(first_zero_index + 1, n):
        result.append(""->"" + str(a[i]))
    
    print("""".join(result))
else:
    # It's not possible to make the expression false
    print(""NO"")
",2,False,False,False,True,True,True,True,False,True,True,False,True,True,175_gpt-4o,0.8917077877383448,0.47535919109134644,0.7916666666666666
179,apps,gpt-4o,qwen2.5-7b-instruct,"A telephone number is a sequence of exactly $11$ digits such that its first digit is 8.

Vasya and Petya are playing a game. Initially they have a string $s$ of length $n$ ($n$ is odd) consisting of digits. Vasya makes the first move, then players alternate turns. In one move the player must choose a character and erase it from the current string. For example, if the current string 1121, after the player's move it may be 112, 111 or 121. The game ends when the length of string $s$ becomes 11. If the resulting string is a telephone number, Vasya wins, otherwise Petya wins.

You have to determine if Vasya has a winning strategy (that is, if Vasya can win the game no matter which characters Petya chooses during his moves).


-----Input-----

The first line contains one integer $n$ ($13 \le n < 10^5$, $n$ is odd) — the length of string $s$.

The second line contains the string $s$ ($|s| = n$) consisting only of decimal digits.


-----Output-----

If Vasya has a strategy that guarantees him victory, print YES.

Otherwise print NO.


-----Examples-----
Input
13
8380011223344

Output
YES

Input
15
807345619350641

Output
NO



-----Note-----

In the first example Vasya needs to erase the second character. Then Petya cannot erase a character from the remaining string 880011223344 so that it does not become a telephone number.

In the second example after Vasya's turn Petya can erase one character character 8. The resulting string can't be a telephone number, because there is no digit 8 at all.","# Read the length of the string
n = int(input().strip())

# Read the string itself
s = input().strip()

# Determine the number of moves each player will make
moves = (n - 11) // 2

# Count the number of occurrences of '8' in the first (n - 11) characters
count_8 = s[:n-11].count('8')

# Vasya wins if there are more '8's than the number of non-'8' characters Petya can remove
if count_8 > moves:
    print(""YES"")
else:
    print(""NO"")
",2,False,False,True,True,True,True,True,True,False,True,False,False,False,179_gpt-4o,0.6910845539229723,0.19841675305164583,0.5833333333333334
183,apps,gpt-4o,qwen2.5-7b-instruct,"Carl is a beginner magician. He has a blue, b violet and c orange magic spheres. In one move he can transform two spheres of the same color into one sphere of any other color. To make a spell that has never been seen before, he needs at least x blue, y violet and z orange spheres. Can he get them (possible, in multiple actions)?


-----Input-----

The first line of the input contains three integers a, b and c (0 ≤ a, b, c ≤ 1 000 000) — the number of blue, violet and orange spheres that are in the magician's disposal.

The second line of the input contains three integers, x, y and z (0 ≤ x, y, z ≤ 1 000 000) — the number of blue, violet and orange spheres that he needs to get.


-----Output-----

If the wizard is able to obtain the required numbers of spheres, print ""Yes"". Otherwise, print ""No"".


-----Examples-----
Input
4 4 0
2 1 2

Output
Yes

Input
5 6 1
2 7 2

Output
No

Input
3 3 3
2 2 2

Output
Yes



-----Note-----

In the first sample the wizard has 4 blue and 4 violet spheres. In his first action he can turn two blue spheres into one violet one. After that he will have 2 blue and 5 violet spheres. Then he turns 4 violet spheres into 2 orange spheres and he ends up with 2 blue, 1 violet and 2 orange spheres, which is exactly what he needs.","# Read input values
a, b, c = map(int, input().split())
x, y, z = map(int, input().split())

# Calculate the deficit/surplus for each color
deficit_blue = max(0, x - a)
deficit_violet = max(0, y - b)
deficit_orange = max(0, z - c)

# Calculate how many extra spheres we have
extra_blue = max(0, a - x)
extra_violet = max(0, b - y)
extra_orange = max(0, c - z)

# Each surplus sphere can potentially be used to create another sphere
# Transforming two surplus spheres into one needed sphere
# Thus, the number of effective extra spheres is half of the surplus count (integer division)
extra_spheres = (extra_blue // 2) + (extra_violet // 2) + (extra_orange // 2)

# Calculate the total deficit
total_deficit = deficit_blue + deficit_violet + deficit_orange

# Check if the total surplus is enough to cover the total deficit
if extra_spheres >= total_deficit:
    print(""Yes"")
else:
    print(""No"")
",2,True,False,False,True,True,True,True,True,True,False,False,False,False,183_gpt-4o,0.6821758530838687,0.18748886798468845,0.625
185,apps,gpt-4o,qwen2.5-7b-instruct,"You are at a water bowling training. There are l people who play with their left hand, r people, who play with their right hand, and a ambidexters, who can play with left or right hand.

The coach decided to form a team of even number of players, exactly half of the players should play with their right hand, and exactly half of the players should play with their left hand. One player should use only on of his hands.

Ambidexters play as well with their right hand as with their left hand. In the team, an ambidexter can play with their left hand, or with their right hand.

Please find the maximum possible size of the team, where equal number of players use their left and right hands, respectively.


-----Input-----

The only line contains three integers l, r and a (0 ≤ l, r, a ≤ 100) — the number of left-handers, the number of right-handers and the number of ambidexters at the training. 


-----Output-----

Print a single even integer — the maximum number of players in the team. It is possible that the team can only have zero number of players.


-----Examples-----
Input
1 4 2

Output
6

Input
5 5 5

Output
14

Input
0 2 0

Output
0



-----Note-----

In the first example you can form a team of 6 players. You should take the only left-hander and two ambidexters to play with left hand, and three right-handers to play with right hand. The only person left can't be taken into the team.

In the second example you can form a team of 14 people. You have to take all five left-handers, all five right-handers, two ambidexters to play with left hand and two ambidexters to play with right hand.","l, r, a = map(int, input().split())

# Step 1: Balance the number of left-handers and right-handers using ambidexters
# First, equalize l and r using ambidexters
if l < r:
    l += min(a, r - l)
    a -= min(a, r - l)
elif r < l:
    r += min(a, l - r)
    a -= min(a, l - r)

# Step 2: If there are still ambidexters left, they should be used in pairs
# Each pair of ambidexters can add 2 to the team, one for each side
max_team_size = l + r + (a // 2) * 2

# Ensure the team size is even
if max_team_size % 2 != 0:
    max_team_size -= 1

print(max_team_size)
",2,False,False,False,True,True,True,True,True,True,True,False,True,True,185_gpt-4o,0.8817607753852287,0.4611365399089565,0.75
189,apps,gpt-4o,qwen2.5-7b-instruct,"Daenerys Targaryen has an army consisting of k groups of soldiers, the i-th group contains a_{i} soldiers. She wants to bring her army to the other side of the sea to get the Iron Throne. She has recently bought an airplane to carry her army through the sea. The airplane has n rows, each of them has 8 seats. We call two seats neighbor, if they are in the same row and in seats {1, 2}, {3, 4}, {4, 5}, {5, 6} or {7, 8}.

 [Image] A row in the airplane 

Daenerys Targaryen wants to place her army in the plane so that there are no two soldiers from different groups sitting on neighboring seats.

Your task is to determine if there is a possible arranging of her army in the airplane such that the condition above is satisfied.


-----Input-----

The first line contains two integers n and k (1 ≤ n ≤ 10000, 1 ≤ k ≤ 100) — the number of rows and the number of groups of soldiers, respectively.

The second line contains k integers a_1, a_2, a_3, ..., a_{k} (1 ≤ a_{i} ≤ 10000), where a_{i} denotes the number of soldiers in the i-th group.

It is guaranteed that a_1 + a_2 + ... + a_{k} ≤ 8·n.


-----Output-----

If we can place the soldiers in the airplane print ""YES"" (without quotes). Otherwise print ""NO"" (without quotes).

You can choose the case (lower or upper) for each letter arbitrary.


-----Examples-----
Input
2 2
5 8

Output
YES

Input
1 2
7 1

Output
NO

Input
1 2
4 4

Output
YES

Input
1 4
2 2 1 2

Output
YES



-----Note-----

In the first sample, Daenerys can place the soldiers like in the figure below:

 [Image] 

In the second sample, there is no way to place the soldiers in the plane since the second group soldier will always have a seat neighboring to someone from the first group.

In the third example Daenerys can place the first group on seats (1, 2, 7, 8), and the second group an all the remaining seats.

In the fourth example she can place the first two groups on seats (1, 2) and (7, 8), the third group on seats (3), and the fourth group on seats (5, 6).","# Read input
import sys
input = sys.stdin.read
data = input().split()

n = int(data[0])
k = int(data[1])
groups = list(map(int, data[2:]))

# Calculate the number of rows and the maximum pairs per row
max_pairs_per_row = 4 * n

# Count the total number of pairs needed
total_pairs_needed = 0
for soldiers in groups:
    total_pairs_needed += (soldiers + 1) // 2

# Check if the total pairs needed can fit into the available pairs
if total_pairs_needed <= max_pairs_per_row:
    print(""YES"")
else:
    print(""NO"")
",2,False,False,False,True,True,True,False,True,False,True,False,True,False,189_gpt-4o,0.6100422339558635,0.11097273961994797,0.5833333333333334
193,apps,gpt-4o,qwen2.5-7b-instruct,"Memory is now interested in the de-evolution of objects, specifically triangles. He starts with an equilateral triangle of side length x, and he wishes to perform operations to obtain an equilateral triangle of side length y.

In a single second, he can modify the length of a single side of the current triangle such that it remains a non-degenerate triangle (triangle of positive area). At any moment of time, the length of each side should be integer.

What is the minimum number of seconds required for Memory to obtain the equilateral triangle of side length y?


-----Input-----

The first and only line contains two integers x and y (3 ≤ y < x ≤ 100 000) — the starting and ending equilateral triangle side lengths respectively.


-----Output-----

Print a single integer — the minimum number of seconds required for Memory to obtain the equilateral triangle of side length y if he starts with the equilateral triangle of side length x.


-----Examples-----
Input
6 3

Output
4

Input
8 5

Output
3

Input
22 4

Output
6



-----Note-----

In the first sample test, Memory starts with an equilateral triangle of side length 6 and wants one of side length 3. Denote a triangle with sides a, b, and c as (a, b, c). Then, Memory can do $(6,6,6) \rightarrow(6,6,3) \rightarrow(6,4,3) \rightarrow(3,4,3) \rightarrow(3,3,3)$.

In the second sample test, Memory can do $(8,8,8) \rightarrow(8,8,5) \rightarrow(8,5,5) \rightarrow(5,5,5)$.

In the third sample test, Memory can do: $(22,22,22) \rightarrow(7,22,22) \rightarrow(7,22,16) \rightarrow(7,10,16) \rightarrow(7,10,4) \rightarrow$

$(7,4,4) \rightarrow(4,4,4)$.","x, y = map(int, input().split())

# The minimum number of seconds required to transform the triangle of side length x to side length y
# can be computed as (x - y) / 2 plus the remainder when (x - y) is divided by 2.
# This is because we can decrease each side by 1 in each second, and for each decrease of 1, we can
# reduce the total side lengths by 3. So we need (x - y) // 2 steps to reduce two sides in each step
# and one additional step if there is a remainder.

print((x - y) // 2 + (x - y) % 2)
",2,False,False,False,False,True,True,True,False,False,False,False,False,True,193_gpt-4o,0.8516155705395227,0.4075143889266759,0.75
194,apps,gpt-4o,qwen2.5-7b-instruct,"The determinant of a matrix 2 × 2 is defined as follows:$\operatorname{det} \left(\begin{array}{ll}{a} & {b} \\{c} & {d} \end{array} \right) = a d - b c$

A matrix is called degenerate if its determinant is equal to zero. 

The norm ||A|| of a matrix A is defined as a maximum of absolute values of its elements.

You are given a matrix $A = \left(\begin{array}{ll}{a} & {b} \\{c} & {d} \end{array} \right)$. Consider any degenerate matrix B such that norm ||A - B|| is minimum possible. Determine ||A - B||.


-----Input-----

The first line contains two integers a and b (|a|, |b| ≤ 10^9), the elements of the first row of matrix A. 

The second line contains two integers c and d (|c|, |d| ≤ 10^9) the elements of the second row of matrix A.


-----Output-----

Output a single real number, the minimum possible value of ||A - B||. Your answer is considered to be correct if its absolute or relative error does not exceed 10^{ - 9}.


-----Examples-----
Input
1 2
3 4

Output
0.2000000000

Input
1 0
0 1

Output
0.5000000000



-----Note-----

In the first sample matrix B is $\left(\begin{array}{ll}{1.2} & {1.8} \\{2.8} & {4.2} \end{array} \right)$

In the second sample matrix B is $\left(\begin{array}{ll}{0.5} & {0.5} \\{0.5} & {0.5} \end{array} \right)$","import sys
input = sys.stdin.read

def min_norm(A):
    a, b, c, d = A[0][0], A[0][1], A[1][0], A[1][1]
    det = a * d - b * c
    
    if det == 0:
        return 0.0
    
    # Calculate the minimum adjustments
    if abs(a) >= max(abs(b), abs(c), abs(d)):
        # Adjust a
        a_prime = (b * c) / d if d != 0 else 0
        min_norm_value = abs(a - a_prime)
    elif abs(b) >= max(abs(a), abs(c), abs(d)):
        # Adjust b
        b_prime = (a * d) / c if c != 0 else 0
        min_norm_value = abs(b - b_prime)
    elif abs(c) >= max(abs(a), abs(b), abs(d)):
        # Adjust c
        c_prime = (a * d) / b if b != 0 else 0
        min_norm_value = abs(c - c_prime)
    else:
        # Adjust d
        d_prime = (b * c) / a if a != 0 else 0
        min_norm_value = abs(d - d_prime)
    
    return min_norm_value

def main():
    data = input().split()
    a, b = int(data[0]), int(data[1])
    c, d = int(data[2]), int(data[3])
    
    A = [[a, b], [c, d]]
    result = min_norm(A)
    print(f""{result:.10f}"")

if __name__ == ""__main__"":
    main()
",2,False,False,False,True,False,True,True,False,False,True,True,False,False,194_gpt-4o,0.6392581888432156,0.1385062008069428,0.5
197,apps,gpt-4o,qwen2.5-7b-instruct,"Nastya received a gift on New Year — a magic wardrobe. It is magic because in the end of each month the number of dresses in it doubles (i.e. the number of dresses becomes twice as large as it is in the beginning of the month).

Unfortunately, right after the doubling the wardrobe eats one of the dresses (if any) with the 50% probability. It happens every month except the last one in the year. 

Nastya owns x dresses now, so she became interested in the expected number of dresses she will have in one year. Nastya lives in Byteland, so the year lasts for k + 1 months.

Nastya is really busy, so she wants you to solve this problem. You are the programmer, after all. Also, you should find the answer modulo 10^9 + 7, because it is easy to see that it is always integer.


-----Input-----

The only line contains two integers x and k (0 ≤ x, k ≤ 10^18), where x is the initial number of dresses and k + 1 is the number of months in a year in Byteland.


-----Output-----

In the only line print a single integer — the expected number of dresses Nastya will own one year later modulo 10^9 + 7.


-----Examples-----
Input
2 0

Output
4

Input
2 1

Output
7

Input
3 2

Output
21



-----Note-----

In the first example a year consists on only one month, so the wardrobe does not eat dresses at all.

In the second example after the first month there are 3 dresses with 50% probability and 4 dresses with 50% probability. Thus, in the end of the year there are 6 dresses with 50% probability and 8 dresses with 50% probability. This way the answer for this test is (6 + 8) / 2 = 7.","MOD = 10**9 + 7

def power_mod(base, exponent, mod):
    result = 1
    while exponent > 0:
        if exponent % 2 == 1:
            result = (result * base) % mod
        base = (base * base) % mod
        exponent //= 2
    return result

def expected_dresses(x, k):
    if x == 0:
        return 0
    # Calculate (2^(k+1) - 1) % MOD
    power = power_mod(2, k + 1, MOD)
    result = (x * (power - 1) % MOD) % MOD
    return result

# Read input
import sys
input = sys.stdin.read
x, k = map(int, input().split())

# Print the result
print(expected_dresses(x, k))
",2,False,True,False,True,True,True,True,False,True,True,True,True,True,197_gpt-4o,0.4348406407739015,-0.06378777132990125,0.5416666666666666
212,apps,gpt-4o,qwen2.5-7b-instruct,"Manao is taking part in a quiz. The quiz consists of n consecutive questions. A correct answer gives one point to the player. The game also has a counter of consecutive correct answers. When the player answers a question correctly, the number on this counter increases by 1. If the player answers a question incorrectly, the counter is reset, that is, the number on it reduces to 0. If after an answer the counter reaches the number k, then it is reset, and the player's score is doubled. Note that in this case, first 1 point is added to the player's score, and then the total score is doubled. At the beginning of the game, both the player's score and the counter of consecutive correct answers are set to zero.

Manao remembers that he has answered exactly m questions correctly. But he does not remember the order in which the questions came. He's trying to figure out what his minimum score may be. Help him and compute the remainder of the corresponding number after division by 1000000009 (10^9 + 9).


-----Input-----

The single line contains three space-separated integers n, m and k (2 ≤ k ≤ n ≤ 10^9; 0 ≤ m ≤ n).


-----Output-----

Print a single integer — the remainder from division of Manao's minimum possible score in the quiz by 1000000009 (10^9 + 9).


-----Examples-----
Input
5 3 2

Output
3

Input
5 4 2

Output
6



-----Note-----

Sample 1. Manao answered 3 questions out of 5, and his score would double for each two consecutive correct answers. If Manao had answered the first, third and fifth questions, he would have scored as much as 3 points.

Sample 2. Now Manao answered 4 questions. The minimum possible score is obtained when the only wrong answer is to the question 4.

Also note that you are asked to minimize the score and not the remainder of the score modulo 1000000009. For example, if Manao could obtain either 2000000000 or 2000000020 points, the answer is 2000000000 mod 1000000009, even though 2000000020 mod 1000000009 is a smaller number.","MOD = 1000000009

def min_possible_score(n, m, k):
    # Calculate the maximum number of times we can achieve k consecutive correct answers
    max_full_sets = m // k
    remaining_correct = m % k
    
    # Calculate the minimum possible score
    if m <= n - n // k:
        # If we can avoid doubling
        score = m % MOD
    else:
        # We need to calculate the minimum score with doubling
        excess_full_sets = max_full_sets - (n - m) // (k - 1)
        remaining_correct_answers = m - excess_full_sets * k
        
        # Calculate the score with the excess full sets causing doubling
        score = (remaining_correct_answers + k * (pow(2, excess_full_sets, MOD) - 1) * pow(2, MOD-2, MOD)) % MOD
    
    return score

# Read input values
n, m, k = map(int, input().split())

# Print the minimum possible score
print(min_possible_score(n, m, k))
",2,False,False,False,True,True,True,True,True,True,True,True,False,True,212_gpt-4o,0.7535290524325498,0.26601355057168224,0.7083333333333334
216,apps,gpt-4o,qwen2.5-7b-instruct,"Polycarp loves lowercase letters and dislikes uppercase ones. Once he got a string s consisting only of lowercase and uppercase Latin letters.

Let A be a set of positions in the string. Let's call it pretty if following conditions are met:  letters on positions from A in the string are all distinct and lowercase;  there are no uppercase letters in the string which are situated between positions from A (i.e. there is no such j that s[j] is an uppercase letter, and a_1 < j < a_2 for some a_1 and a_2 from A). 

Write a program that will determine the maximum number of elements in a pretty set of positions.


-----Input-----

The first line contains a single integer n (1 ≤ n ≤ 200) — length of string s.

The second line contains a string s consisting of lowercase and uppercase Latin letters.


-----Output-----

Print maximum number of elements in pretty set of positions for string s.


-----Examples-----
Input
11
aaaaBaabAbA

Output
2

Input
12
zACaAbbaazzC

Output
3

Input
3
ABC

Output
0



-----Note-----

In the first example the desired positions might be 6 and 8 or 7 and 8. Positions 6 and 7 contain letters 'a', position 8 contains letter 'b'. The pair of positions 1 and 8 is not suitable because there is an uppercase letter 'B' between these position.

In the second example desired positions can be 7, 8 and 11. There are other ways to choose pretty set consisting of three elements.

In the third example the given string s does not contain any lowercase letters, so the answer is 0.","n = int(input())
s = input()

max_count = 0
current_set = set()
current_count = 0

for char in s:
    if char.islower():
        if char not in current_set:
            current_set.add(char)
            current_count += 1
    else:
        max_count = max(max_count, current_count)
        current_set.clear()
        current_count = 0

# Check the count after the last segment
max_count = max(max_count, current_count)

print(max_count)
",2,True,False,True,True,True,True,False,True,True,False,True,True,False,216_gpt-4o,0.802697388020284,0.33781712770655775,0.6666666666666666
218,apps,gpt-4o,qwen2.5-7b-instruct,"A bus moves along the coordinate line Ox from the point x = 0 to the point x = a. After starting from the point x = 0, it reaches the point x = a, immediately turns back and then moves to the point x = 0. After returning to the point x = 0 it immediately goes back to the point x = a and so on. Thus, the bus moves from x = 0 to x = a and back. Moving from the point x = 0 to x = a or from the point x = a to x = 0 is called a bus journey. In total, the bus must make k journeys.

The petrol tank of the bus can hold b liters of gasoline. To pass a single unit of distance the bus needs to spend exactly one liter of gasoline. The bus starts its first journey with a full petrol tank.

There is a gas station in point x = f. This point is between points x = 0 and x = a. There are no other gas stations on the bus route. While passing by a gas station in either direction the bus can stop and completely refuel its tank. Thus, after stopping to refuel the tank will contain b liters of gasoline.

What is the minimum number of times the bus needs to refuel at the point x = f to make k journeys? The first journey starts in the point x = 0.


-----Input-----

The first line contains four integers a, b, f, k (0 < f < a ≤ 10^6, 1 ≤ b ≤ 10^9, 1 ≤ k ≤ 10^4) — the endpoint of the first bus journey, the capacity of the fuel tank of the bus, the point where the gas station is located, and the required number of journeys.


-----Output-----

Print the minimum number of times the bus needs to refuel to make k journeys. If it is impossible for the bus to make k journeys, print -1.


-----Examples-----
Input
6 9 2 4

Output
4

Input
6 10 2 4

Output
2

Input
6 5 4 3

Output
-1



-----Note-----

In the first example the bus needs to refuel during each journey.

In the second example the bus can pass 10 units of distance without refueling. So the bus makes the whole first journey, passes 4 units of the distance of the second journey and arrives at the point with the gas station. Then it can refuel its tank, finish the second journey and pass 2 units of distance from the third journey. In this case, it will again arrive at the point with the gas station. Further, he can refill the tank up to 10 liters to finish the third journey and ride all the way of the fourth journey. At the end of the journey the tank will be empty. 

In the third example the bus can not make all 3 journeys because if it refuels during the second journey, the tanks will contain only 5 liters of gasoline, but the bus needs to pass 8 units of distance until next refueling.","# Read input values
a, b, f, k = map(int, input().split())

# Initialize the number of refuels
refuels = 0
# Initial fuel in the tank
fuel = b

# Calculate the total distance to travel
total_distance = 2 * a * k

# Current position of the bus
current_position = 0

# Loop through each journey
for i in range(k):
    if i % 2 == 0:  # Even index: moving from 0 to a
        distance_to_travel = a
        distance_to_fuel_station = f
        distance_after_fuel_station = a - f
    else:  # Odd index: moving from a to 0
        distance_to_travel = a
        distance_to_fuel_station = a - f
        distance_after_fuel_station = f
    
    # Check fuel before reaching the fuel station
    if fuel < distance_to_fuel_station:
        print(-1)
        exit()
    
    # Use fuel to reach the fuel station
    fuel -= distance_to_fuel_station
    
    # Check if the bus needs to refuel at the fuel station
    if fuel < distance_after_fuel_station:
        refuels += 1
        fuel = b
    
    # Use fuel to complete the journey
    fuel -= distance_after_fuel_station
    
    # Update the current position of the bus
    current_position = (current_position + distance_to_travel) % (2 * a)

# Output the total number of refuels
print(refuels)
",2,False,False,False,True,True,True,True,False,False,True,True,True,True,218_gpt-4o,0.8700674055246895,0.43928919623725143,0.75
236,apps,gpt-4o,qwen2.5-7b-instruct,"After passing a test, Vasya got himself a box of $n$ candies. He decided to eat an equal amount of candies each morning until there are no more candies. However, Petya also noticed the box and decided to get some candies for himself.

This means the process of eating candies is the following: in the beginning Vasya chooses a single integer $k$, same for all days. After that, in the morning he eats $k$ candies from the box (if there are less than $k$ candies in the box, he eats them all), then in the evening Petya eats $10\%$ of the candies remaining in the box. If there are still candies left in the box, the process repeats — next day Vasya eats $k$ candies again, and Petya — $10\%$ of the candies left in a box, and so on.

If the amount of candies in the box is not divisible by $10$, Petya rounds the amount he takes from the box down. For example, if there were $97$ candies in the box, Petya would eat only $9$ of them. In particular, if there are less than $10$ candies in a box, Petya won't eat any at all.

Your task is to find out the minimal amount of $k$ that can be chosen by Vasya so that he would eat at least half of the $n$ candies he initially got. Note that the number $k$ must be integer.


-----Input-----

The first line contains a single integer $n$ ($1 \leq n \leq 10^{18}$) — the initial amount of candies in the box.


-----Output-----

Output a single integer — the minimal amount of $k$ that would allow Vasya to eat at least half of candies he got.


-----Example-----
Input
68

Output
3



-----Note-----

In the sample, the amount of candies, with $k=3$, would change in the following way (Vasya eats first):

$68 \to 65 \to 59 \to 56 \to 51 \to 48 \to 44 \to 41 \\ \to 37 \to 34 \to 31 \to 28 \to 26 \to 23 \to 21 \to 18 \to 17 \to 14 \\ \to 13 \to 10 \to 9 \to 6 \to 6 \to 3 \to 3 \to 0$.

In total, Vasya would eat $39$ candies, while Petya — $29$.","def minimal_k_to_eat_half_candies(n):
    def can_vasya_eat_half(k):
        total = n
        vasya_eaten = 0
        
        while total > 0:
            # Vasya eats k candies
            if total < k:
                vasya_eaten += total
                total = 0
            else:
                vasya_eaten += k
                total -= k
            
            # Petya eats 10% of remaining candies (rounded down)
            total -= total // 10
        
        return vasya_eaten * 2 >= n
    
    left, right = 1, n
    while left < right:
        mid = (left + right) // 2
        if can_vasya_eat_half(mid):
            right = mid
        else:
            left = mid + 1
    
    return left

if __name__ == ""__main__"":
    n = int(input().strip())
    print(minimal_k_to_eat_half_candies(n))
",2,True,False,False,True,True,True,True,True,True,True,False,False,False,236_gpt-4o,0.6336973284867263,0.13378453261928228,0.625
240,apps,gpt-4o,qwen2.5-7b-instruct,"You are given a rectangular grid of lattice points from (0, 0) to (n, m) inclusive. You have to choose exactly 4 different points to build a polyline possibly with self-intersections and self-touching. This polyline should be as long as possible.

A polyline defined by points p_1, p_2, p_3, p_4 consists of the line segments p_1 p_2, p_2 p_3, p_3 p_4, and its length is the sum of the lengths of the individual line segments.


-----Input-----

The only line of the input contains two integers n and m (0 ≤ n, m ≤ 1000). It is guaranteed that grid contains at least 4 different points.


-----Output-----

Print 4 lines with two integers per line separated by space — coordinates of points p_1, p_2, p_3, p_4 in order which represent the longest possible polyline.

Judge program compares your answer and jury's answer with 10^{ - 6} precision.


-----Examples-----
Input
1 1

Output
1 1
0 0
1 0
0 1

Input
0 10

Output
0 1
0 10
0 0
0 9","def longest_polyline(n, m):
    if n >= 2 and m >= 2:
        # If both n and m are greater than or equal to 2, we can use this configuration
        points = [(0, 0), (n, 0), (n, m), (0, m)]
    elif n == 0:
        # If n is 0, we are limited to vertical movement
        points = [(0, 0), (0, m), (0, 1), (0, m-1)]
    elif m == 0:
        # If m is 0, we are limited to horizontal movement
        points = [(0, 0), (n, 0), (1, 0), (n-1, 0)]
    elif n == 1:
        # If n is 1, we have limited horizontal movement
        points = [(0, 0), (1, 0), (1, m), (0, m)]
    else:  # m == 1
        # If m is 1, we have limited vertical movement
        points = [(0, 0), (0, 1), (n, 1), (n, 0)]
    return points

# Read input
n, m = map(int, input().split())

# Get the longest polyline points
result = longest_polyline(n, m)

# Print the points
for point in result:
    print(point[0], point[1])
",2,False,False,False,True,True,True,True,True,False,True,True,True,False,240_gpt-4o,0.6184945952401372,0.12010016346952129,0.5416666666666666
249,apps,gpt-4o,qwen2.5-7b-instruct,"Memory and his friend Lexa are competing to get higher score in one popular computer game. Memory starts with score a and Lexa starts with score b. In a single turn, both Memory and Lexa get some integer in the range [ - k;k] (i.e. one integer among  - k,  - k + 1,  - k + 2, ...,  - 2,  - 1, 0, 1, 2, ..., k - 1, k) and add them to their current scores. The game has exactly t turns. Memory and Lexa, however, are not good at this game, so they both always get a random integer at their turn.

Memory wonders how many possible games exist such that he ends with a strictly higher score than Lexa. Two games are considered to be different if in at least one turn at least one player gets different score. There are (2k + 1)^2t games in total. Since the answer can be very large, you should print it modulo 10^9 + 7. Please solve this problem for Memory.


-----Input-----

The first and only line of input contains the four integers a, b, k, and t (1 ≤ a, b ≤ 100, 1 ≤ k ≤ 1000, 1 ≤ t ≤ 100) — the amount Memory and Lexa start with, the number k, and the number of turns respectively.


-----Output-----

Print the number of possible games satisfying the conditions modulo 1 000 000 007 (10^9 + 7) in one line.


-----Examples-----
Input
1 2 2 1

Output
6

Input
1 1 1 2

Output
31

Input
2 12 3 1

Output
0



-----Note-----

In the first sample test, Memory starts with 1 and Lexa starts with 2. If Lexa picks  - 2, Memory can pick 0, 1, or 2 to win. If Lexa picks  - 1, Memory can pick 1 or 2 to win. If Lexa picks 0, Memory can pick 2 to win. If Lexa picks 1 or 2, Memory cannot win. Thus, there are 3 + 2 + 1 = 6 possible games in which Memory wins.","MOD = 10**9 + 7

def solve(a, b, k, t):
    max_diff = 2 * k * t
    dp_prev = [0] * (2 * max_diff + 1)
    dp_curr = [0] * (2 * max_diff + 1)
    
    dp_prev[max_diff + (a - b)] = 1
    
    for _ in range(t):
        prefix_sum = [0] * (2 * max_diff + 3)
        for i in range(2 * max_diff + 1):
            prefix_sum[i + 1] = (prefix_sum[i] + dp_prev[i]) % MOD
        
        for i in range(2 * max_diff + 1):
            left = max(0, i - 2 * k)
            right = min(2 * max_diff, i + 2 * k) + 1
            dp_curr[i] = (prefix_sum[right] - prefix_sum[left]) % MOD
        
        dp_prev, dp_curr = dp_curr, dp_prev
    
    result = 0
    for i in range(max_diff + 1, 2 * max_diff + 1):
        result = (result + dp_prev[i]) % MOD
    
    print(result)

# Input
a, b, k, t = map(int, input().split())
solve(a, b, k, t)
",2,False,False,True,True,True,True,False,True,True,True,True,True,False,249_gpt-4o,0.9083034784028298,0.5128471402389753,0.7916666666666666
250,apps,gpt-4o,qwen2.5-7b-instruct,"Valery is a PE teacher at a school in Berland. Soon the students are going to take a test in long jumps, and Valery has lost his favorite ruler! 

However, there is no reason for disappointment, as Valery has found another ruler, its length is l centimeters. The ruler already has n marks, with which he can make measurements. We assume that the marks are numbered from 1 to n in the order they appear from the beginning of the ruler to its end. The first point coincides with the beginning of the ruler and represents the origin. The last mark coincides with the end of the ruler, at distance l from the origin. This ruler can be repesented by an increasing sequence a_1, a_2, ..., a_{n}, where a_{i} denotes the distance of the i-th mark from the origin (a_1 = 0, a_{n} = l).

Valery believes that with a ruler he can measure the distance of d centimeters, if there is a pair of integers i and j (1 ≤ i ≤ j ≤ n), such that the distance between the i-th and the j-th mark is exactly equal to d (in other words, a_{j} - a_{i} = d). 

Under the rules, the girls should be able to jump at least x centimeters, and the boys should be able to jump at least y (x < y) centimeters. To test the children's abilities, Valery needs a ruler to measure each of the distances x and y. 

Your task is to determine what is the minimum number of additional marks you need to add on the ruler so that they can be used to measure the distances x and y. Valery can add the marks at any integer non-negative distance from the origin not exceeding the length of the ruler.


-----Input-----

The first line contains four positive space-separated integers n, l, x, y (2 ≤ n ≤ 10^5, 2 ≤ l ≤ 10^9, 1 ≤ x < y ≤ l) — the number of marks, the length of the ruler and the jump norms for girls and boys, correspondingly.

The second line contains a sequence of n integers a_1, a_2, ..., a_{n} (0 = a_1 < a_2 < ... < a_{n} = l), where a_{i} shows the distance from the i-th mark to the origin.


-----Output-----

In the first line print a single non-negative integer v — the minimum number of marks that you need to add on the ruler.

In the second line print v space-separated integers p_1, p_2, ..., p_{v} (0 ≤ p_{i} ≤ l). Number p_{i} means that the i-th mark should be at the distance of p_{i} centimeters from the origin. Print the marks in any order. If there are multiple solutions, print any of them.


-----Examples-----
Input
3 250 185 230
0 185 250

Output
1
230

Input
4 250 185 230
0 20 185 250

Output
0

Input
2 300 185 230
0 300

Output
2
185 230



-----Note-----

In the first sample it is impossible to initially measure the distance of 230 centimeters. For that it is enough to add a 20 centimeter mark or a 230 centimeter mark.

In the second sample you already can use the ruler to measure the distances of 185 and 230 centimeters, so you don't have to add new marks.

In the third sample the ruler only contains the initial and the final marks. We will need to add two marks to be able to test the children's skills.","# Read input values
n, l, x, y = map(int, input().split())
marks = list(map(int, input().split()))

# Initialize sets for easier lookup of required distances
marks_set = set(marks)
x_found = False
y_found = False

# Check if x and y distances can be measured
for mark in marks:
    if (mark + x) in marks_set or (mark - x) in marks_set:
        x_found = True
    if (mark + y) in marks_set or (mark - y) in marks_set:
        y_found = True
    if x_found and y_found:
        break

# If both x and y distances can already be measured, no new marks are needed
if x_found and y_found:
    print(0)
else:
    # Try to find a mark that can measure both x and y distances if added
    new_marks = set()
    for mark in marks:
        if not x_found:
            # Check if a mark that is x distance from the current mark can also measure y distance
            if (mark + x + y) in marks_set or (mark + x - y) in marks_set or (mark - x + y) in marks_set:
                new_marks.add(mark + x)
            elif (mark - x + y) in marks_set or (mark - x - y) in marks_set:
                new_marks.add(mark - x)
        if not y_found:
            # Check if a mark that is y distance from the current mark can also measure x distance
            if (mark + y + x) in marks_set or (mark + y - x) in marks_set or (mark - y + x) in marks_set:
                new_marks.add(mark + y)
            elif (mark - y + x) in marks_set or (mark - y - x) in marks_set:
                new_marks.add(mark - y)
    
    # If we found a mark that can measure both distances, add only that mark
    if new_marks:
        print(1)
        print(new_marks.pop())
    else:
        # Otherwise, add both x and y marks if necessary
        result = []
        if not x_found:
            result.append(x)
        if not y_found:
            result.append(y)
        print(len(result))
        print("" "".join(map(str, result)))
",2,False,False,False,True,False,False,True,True,False,False,False,True,True,250_gpt-4o,0.32805105442607474,-0.16596394579970838,0.5416666666666666
258,apps,gpt-4o,qwen2.5-7b-instruct,"Takahashi wants to grill N pieces of meat on a grilling net, which can be seen as a two-dimensional plane. The coordinates of the i-th piece of meat are \left(x_i, y_i\right), and its hardness is c_i.
Takahashi can use one heat source to grill the meat. If he puts the heat source at coordinates \left(X, Y\right), where X and Y are real numbers, the i-th piece of meat will be ready to eat in c_i \times \sqrt{\left(X - x_i\right)^2 + \left(Y-y_i\right)^2} seconds.
Takahashi wants to eat K pieces of meat. Find the time required to have K or more pieces of meat ready if he put the heat source to minimize this time.

-----Constraints-----
 - All values in input are integers.
 - 1 \leq N \leq 60
 - 1 \leq K \leq N
 - -1000 \leq x_i , y_i \leq 1000
 - \left(x_i, y_i\right) \neq \left(x_j, y_j\right) \left(i \neq j \right)
 - 1 \leq c_i \leq 100

-----Input-----
Input is given from Standard Input in the following format:
N K
x_1 y_1 c_1
\vdots
x_N y_N c_N

-----Output-----
Print the answer.
It will be considered correct if its absolute or relative error from our answer is at most 10^{-6}.

-----Sample Input-----
4 3
-1 0 3
0 0 3
1 0 2
1 1 40

-----Sample Output-----
2.4

If we put the heat source at \left(-0.2, 0\right), the 1-st, 2-nd, and 3-rd pieces of meat will be ready to eat within 2.4 seconds. This is the optimal place to put the heat source.","import math
import sys
input = sys.stdin.read

def is_feasible(meats, K, T):
    N = len(meats)
    for i in range(N):
        for j in range(i + 1, N):
            x1, y1, c1 = meats[i]
            x2, y2, c2 = meats[j]
            if c1 * T < c2 * T:
                x1, y1, c1, x2, y2, c2 = x2, y2, c2, x1, y1, c1
            d = c1 * T - c2 * T
            if d < 0:
                continue
            d /= c1 * c2
            cx = (x1 + x2) / 2
            cy = (y1 + y2) / 2
            dx = (x1 - x2) / 2
            dy = (y1 - y2) / 2
            d2 = dx * dx + dy * dy
            if d * d2 > d2:
                continue
            mx = cx + dy * math.sqrt(d2 * d - d * d) / d2
            my = cy - dx * math.sqrt(d2 * d - d * d) / d2
            count = sum(c * math.sqrt((mx - x) ** 2 + (my - y) ** 2) <= T for x, y, c in meats)
            if count >= K:
                return True
    return False

def min_time_to_grill(N, K, meats):
    low, high = 0, 1e9
    while high - low > 1e-7:
        mid = (low + high) / 2
        if is_feasible(meats, K, mid):
            high = mid
        else:
            low = mid
    return high

def main():
    data = input().split()
    N = int(data[0])
    K = int(data[1])
    meats = []
    index = 2
    for _ in range(N):
        x = int(data[index])
        y = int(data[index + 1])
        c = int(data[index + 2])
        meats.append((x, y, c))
        index += 3
    result = min_time_to_grill(N, K, meats)
    print(f""{result:.6f}"")

if __name__ == ""__main__"":
    main()
",2,False,False,False,False,True,False,True,False,False,True,False,False,False,258_gpt-4o,0.6305109659268154,0.12737356777759515,0.6666666666666666
259,apps,gpt-4o,qwen2.5-7b-instruct,"Monocarp and Bicarp live in Berland, where every bus ticket consists of $n$ digits ($n$ is an even number). During the evening walk Monocarp and Bicarp found a ticket where some of the digits have been erased. The number of digits that have been erased is even.

Monocarp and Bicarp have decided to play a game with this ticket. Monocarp hates happy tickets, while Bicarp collects them. A ticket is considered happy if the sum of the first $\frac{n}{2}$ digits of this ticket is equal to the sum of the last $\frac{n}{2}$ digits.

Monocarp and Bicarp take turns (and Monocarp performs the first of them). During each turn, the current player must replace any erased digit with any digit from $0$ to $9$. The game ends when there are no erased digits in the ticket.

If the ticket is happy after all erased digits are replaced with decimal digits, then Bicarp wins. Otherwise, Monocarp wins. You have to determine who will win if both players play optimally.


-----Input-----

The first line contains one even integer $n$ $(2 \le n \le 2 \cdot 10^{5})$ — the number of digits in the ticket.

The second line contains a string of $n$ digits and ""?"" characters — the ticket which Monocarp and Bicarp have found. If the $i$-th character is ""?"", then the $i$-th digit is erased. Note that there may be leading zeroes. The number of ""?"" characters is even.


-----Output-----

If Monocarp wins, print ""Monocarp"" (without quotes). Otherwise print ""Bicarp"" (without quotes).


-----Examples-----
Input
4
0523

Output
Bicarp

Input
2
??

Output
Bicarp

Input
8
?054??0?

Output
Bicarp

Input
6
???00?

Output
Monocarp



-----Note-----

Since there is no question mark in the ticket in the first example, the winner is determined before the game even starts, and it is Bicarp.

In the second example, Bicarp also wins. After Monocarp chooses an erased digit and replaces it with a new one, Bicap can choose another position with an erased digit and replace it with the same digit, so the ticket is happy.","# Use Standard Input format

def determine_winner(n, ticket):
    half_n = n // 2
    left_sum = 0
    right_sum = 0
    left_question_marks = 0
    right_question_marks = 0

    # Calculate the sums and the count of question marks for each half
    for i in range(half_n):
        if ticket[i] == '?':
            left_question_marks += 1
        else:
            left_sum += int(ticket[i])

    for i in range(half_n, n):
        if ticket[i] == '?':
            right_question_marks += 1
        else:
            right_sum += int(ticket[i])

    # Calculate the difference between the sums of the two halves
    diff = left_sum - right_sum

    # Calculate the difference in the number of question marks
    q_diff = left_question_marks - right_question_marks

    # To balance the sums, the difference must be a multiple of 9
    if (diff + (q_diff // 2) * 9) % 9 == 0:
        print(""Bicarp"")
    else:
        print(""Monocarp"")

# Read input
n = int(input())
ticket = input()

# Determine the winner
determine_winner(n, ticket)
",2,False,False,False,True,True,True,True,True,True,False,False,False,False,259_gpt-4o,0.7192236440373758,0.2296325830884017,0.5833333333333334
265,apps,gpt-4o,qwen2.5-7b-instruct,"There is an airplane which has n rows from front to back. There will be m people boarding this airplane.

This airplane has an entrance at the very front and very back of the plane.

Each person has some assigned seat. It is possible for multiple people to have the same assigned seat. The people will then board the plane one by one starting with person 1. Each person can independently choose either the front entrance or back entrance to enter the plane.

When a person walks into the plane, they walk directly to their assigned seat and will try to sit in it. If it is occupied, they will continue walking in the direction they walked in until they are at empty seat - they will take the earliest empty seat that they can find. If they get to the end of the row without finding a seat, they will be angry.

Find the number of ways to assign tickets to the passengers and board the plane without anyone getting angry. Two ways are different if there exists a passenger who chose a different entrance in both ways, or the assigned seat is different. Print this count modulo 10^9 + 7.


-----Input-----

The first line of input will contain two integers n, m (1 ≤ m ≤ n ≤ 1 000 000), the number of seats, and the number of passengers, respectively.


-----Output-----

Print a single number, the number of ways, modulo 10^9 + 7.


-----Example-----
Input
3 3

Output
128



-----Note-----

Here, we will denote a passenger by which seat they were assigned, and which side they came from (either ""F"" or ""B"" for front or back, respectively).

For example, one valid way is 3B, 3B, 3B (i.e. all passengers were assigned seat 3 and came from the back entrance). Another valid way would be 2F, 1B, 3F.

One invalid way would be 2B, 2B, 2B, since the third passenger would get to the front without finding a seat.","MOD = 10**9 + 7

def factorial(n):
    result = 1
    for i in range(2, n + 1):
        result = result * i % MOD
    return result

def number_of_ways(n, m):
    # Compute factorial(n) and factorial(n-m)
    fact_n = factorial(n)
    fact_n_m = factorial(n - m)
    
    # The number of ways to assign tickets to passengers and ensure no one gets angry:
    # This is computed as 2^m * factorial(n) // factorial(n-m)
    ways = pow(2, m, MOD) * fact_n % MOD * pow(fact_n_m, MOD-2, MOD) % MOD
    
    return ways

# Read input
import sys
input = sys.stdin.read
data = input().strip().split()
n = int(data[0])
m = int(data[1])

# Calculate the number of ways
result = number_of_ways(n, m)

# Output the result
print(result)
",2,False,True,False,True,True,True,True,False,True,True,False,False,True,265_gpt-4o,0.5971675832200772,0.0977370811161579,0.5416666666666666
268,apps,gpt-4o,qwen2.5-7b-instruct,"You are given two integers $l$ and $r$ ($l \le r$). Your task is to calculate the sum of numbers from $l$ to $r$ (including $l$ and $r$) such that each number contains at most $k$ different digits, and print this sum modulo $998244353$.

For example, if $k = 1$ then you have to calculate all numbers from $l$ to $r$ such that each number is formed using only one digit. For $l = 10, r = 50$ the answer is $11 + 22 + 33 + 44 = 110$.


-----Input-----

The only line of the input contains three integers $l$, $r$ and $k$ ($1 \le l \le r < 10^{18}, 1 \le k \le 10$) — the borders of the segment and the maximum number of different digits.


-----Output-----

Print one integer — the sum of numbers from $l$ to $r$ such that each number contains at most $k$ different digits, modulo $998244353$.


-----Examples-----
Input
10 50 2

Output
1230

Input
1 2345 10

Output
2750685

Input
101 154 2

Output
2189



-----Note-----

For the first example the answer is just the sum of numbers from $l$ to $r$ which equals to $\frac{50 \cdot 51}{2} - \frac{9 \cdot 10}{2} = 1230$. This example also explained in the problem statement but for $k = 1$.

For the second example the answer is just the sum of numbers from $l$ to $r$ which equals to $\frac{2345 \cdot 2346}{2} = 2750685$.

For the third example the answer is $101 + 110 + 111 + 112 + 113 + 114 + 115 + 116 + 117 + 118 + 119 + 121 + 122 + 131 + 133 + 141 + 144 + 151 = 2189$.","MOD = 998244353

def contains_at_most_k_unique_digits(n, k):
    return len(set(str(n))) <= k

def sum_of_numbers_with_k_unique_digits(l, r, k):
    total_sum = 0
    for num in range(l, r + 1):
        if contains_at_most_k_unique_digits(num, k):
            total_sum = (total_sum + num) % MOD
    return total_sum

# Read input
l, r, k = map(int, input().split())

# Calculate and print the result
print(sum_of_numbers_with_k_unique_digits(l, r, k))
",2,False,True,False,True,True,True,True,False,True,True,True,True,True,268_gpt-4o,0.7709462509712747,0.2907057515483225,0.5833333333333334
270,apps,gpt-4o,qwen2.5-7b-instruct,"Nothing is eternal in the world, Kostya understood it on the 7-th of January when he saw partially dead four-color garland.

Now he has a goal to replace dead light bulbs, however he doesn't know how many light bulbs for each color are required. It is guaranteed that for each of four colors at least one light is working.

It is known that the garland contains light bulbs of four colors: red, blue, yellow and green. The garland is made as follows: if you take any four consecutive light bulbs then there will not be light bulbs with the same color among them. For example, the garland can look like ""RYBGRYBGRY"", ""YBGRYBGRYBG"", ""BGRYB"", but can not look like ""BGRYG"", ""YBGRYBYGR"" or ""BGYBGY"". Letters denote colors: 'R' — red, 'B' — blue, 'Y' — yellow, 'G' — green.

Using the information that for each color at least one light bulb still works count the number of dead light bulbs of each four colors.


-----Input-----

The first and the only line contains the string s (4 ≤ |s| ≤ 100), which describes the garland, the i-th symbol of which describes the color of the i-th light bulb in the order from the beginning of garland:   'R' — the light bulb is red,  'B' — the light bulb is blue,  'Y' — the light bulb is yellow,  'G' — the light bulb is green,  '!' — the light bulb is dead. 

The string s can not contain other symbols except those five which were described. 

It is guaranteed that in the given string at least once there is each of four letters 'R', 'B', 'Y' and 'G'. 

It is guaranteed that the string s is correct garland with some blown light bulbs, it means that for example the line ""GRBY!!!B"" can not be in the input data. 


-----Output-----

In the only line print four integers k_{r}, k_{b}, k_{y}, k_{g} — the number of dead light bulbs of red, blue, yellow and green colors accordingly.


-----Examples-----
Input
RYBGRYBGR

Output
0 0 0 0
Input
!RGYB

Output
0 1 0 0
Input
!!!!YGRB

Output
1 1 1 1
Input
!GB!RG!Y!

Output
2 1 1 0


-----Note-----

In the first example there are no dead light bulbs.

In the second example it is obvious that one blue bulb is blown, because it could not be light bulbs of other colors on its place according to the statements.","s = input().strip()

# Initialize counters for each color
dead_bulbs = {'R': 0, 'B': 0, 'Y': 0, 'G': 0}

# Determine the positions (modulo 4) for each color
positions = {}
for i, char in enumerate(s):
    if char in 'RBYG':
        positions[char] = i % 4

# Count the number of dead bulbs for each color
for i, char in enumerate(s):
    if char == '!':
        for color, pos in positions.items():
            if i % 4 == pos:
                dead_bulbs[color] += 1

# Output the result
print(dead_bulbs['R'], dead_bulbs['B'], dead_bulbs['Y'], dead_bulbs['G'])
",2,True,False,True,True,False,True,True,False,False,False,True,True,True,270_gpt-4o,0.7408518640264958,0.2505433692798715,0.7083333333333334
284,apps,gpt-4o,qwen2.5-7b-instruct,"PolandBall is a young, clever Ball. He is interested in prime numbers. He has stated a following hypothesis: ""There exists such a positive integer n that for each positive integer m number n·m + 1 is a prime number"".

Unfortunately, PolandBall is not experienced yet and doesn't know that his hypothesis is incorrect. Could you prove it wrong? Write a program that finds a counterexample for any n.


-----Input-----

The only number in the input is n (1 ≤ n ≤ 1000) — number from the PolandBall's hypothesis. 


-----Output-----

Output such m that n·m + 1 is not a prime number. Your answer will be considered correct if you output any suitable m such that 1 ≤ m ≤ 10^3. It is guaranteed the the answer exists.


-----Examples-----
Input
3

Output
1
Input
4

Output
2


-----Note-----

A prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.

For the first sample testcase, 3·1 + 1 = 4. We can output 1.

In the second sample testcase, 4·1 + 1 = 5. We cannot output 1 because 5 is prime. However, m = 2 is okay since 4·2 + 1 = 9, which is not a prime number.","def is_prime(x):
    if x <= 1:
        return False
    if x <= 3:
        return True
    if x % 2 == 0 or x % 3 == 0:
        return False
    i = 5
    while i * i <= x:
        if x % i == 0 or x % (i + 2) == 0:
            return False
        i += 6
    return True

n = int(input())

for m in range(1, 1001):
    if not is_prime(n * m + 1):
        print(m)
        break
",2,True,True,True,True,True,True,True,True,True,True,True,True,True,284_gpt-4o,0.6763809958193981,0.18107150483337053,0.625
285,apps,gpt-4o,qwen2.5-7b-instruct,"Kolya is developing an economy simulator game. His most favourite part of the development process is in-game testing. Once he was entertained by the testing so much, that he found out his game-coin score become equal to 0.

Kolya remembers that at the beginning of the game his game-coin score was equal to n and that he have bought only some houses (for 1 234 567 game-coins each), cars (for 123 456 game-coins each) and computers (for 1 234 game-coins each).

Kolya is now interested, whether he could have spent all of his initial n game-coins buying only houses, cars and computers or there is a bug in the game. Formally, is there a triple of non-negative integers a, b and c such that a × 1 234 567 + b × 123 456 + c × 1 234 = n?

Please help Kolya answer this question.


-----Input-----

The first line of the input contains a single integer n (1 ≤ n ≤ 10^9) — Kolya's initial game-coin score.


-----Output-----

Print ""YES"" (without quotes) if it's possible that Kolya spent all of his initial n coins buying only houses, cars and computers. Otherwise print ""NO"" (without quotes).


-----Examples-----
Input
1359257

Output
YES
Input
17851817

Output
NO


-----Note-----

In the first sample, one of the possible solutions is to buy one house, one car and one computer, spending 1 234 567 + 123 456 + 1234 = 1 359 257 game-coins in total.","def can_spend_all_coins(n):
    # Define the cost of houses, cars, and computers
    house_cost = 1234567
    car_cost = 123456
    computer_cost = 1234
    
    # Iterate over the possible number of houses
    for a in range(n // house_cost + 1):
        remaining_after_houses = n - a * house_cost
        # Iterate over the possible number of cars
        for b in range(remaining_after_houses // car_cost + 1):
            remaining_after_cars = remaining_after_houses - b * car_cost
            # Check if the remaining coins can be exactly spent on computers
            if remaining_after_cars % computer_cost == 0:
                return ""YES""
    
    return ""NO""

# Read input
n = int(input().strip())

# Get the result
result = can_spend_all_coins(n)

# Print the result
print(result)
",2,True,False,True,True,True,True,True,True,True,True,True,False,True,285_gpt-4o,0.6288274362731552,0.12914027461134234,0.5
289,apps,gpt-4o,qwen2.5-7b-instruct,"Famous Brazil city Rio de Janeiro holds a tennis tournament and Ostap Bender doesn't want to miss this event. There will be n players participating, and the tournament will follow knockout rules from the very first game. That means, that if someone loses a game he leaves the tournament immediately.

Organizers are still arranging tournament grid (i.e. the order games will happen and who is going to play with whom) but they have already fixed one rule: two players can play against each other only if the number of games one of them has already played differs by no more than one from the number of games the other one has already played. Of course, both players had to win all their games in order to continue participating in the tournament.

Tournament hasn't started yet so the audience is a bit bored. Ostap decided to find out what is the maximum number of games the winner of the tournament can take part in (assuming the rule above is used). However, it is unlikely he can deal with this problem without your help.


-----Input-----

The only line of the input contains a single integer n (2 ≤ n ≤ 10^18) — the number of players to participate in the tournament.


-----Output-----

Print the maximum number of games in which the winner of the tournament can take part.


-----Examples-----
Input
2

Output
1

Input
3

Output
2

Input
4

Output
2

Input
10

Output
4



-----Note-----

In all samples we consider that player number 1 is the winner.

In the first sample, there would be only one game so the answer is 1.

In the second sample, player 1 can consequently beat players 2 and 3. 

In the third sample, player 1 can't play with each other player as after he plays with players 2 and 3 he can't play against player 4, as he has 0 games played, while player 1 already played 2. Thus, the answer is 2 and to achieve we make pairs (1, 2) and (3, 4) and then clash the winners.","n = int(input())

# The maximum number of games the winner can play is essentially the maximum number of times
# we can divide the number of players by 2 (which is equivalent to finding the highest power
# of 2 less than or equal to n).
max_games = n.bit_length() - 1

print(max_games)
",2,False,False,False,True,True,True,True,False,False,True,True,False,False,289_gpt-4o,0.711296447684462,0.2218398756668227,0.5833333333333334
290,apps,gpt-4o,qwen2.5-7b-instruct,"Tonio has a keyboard with only two letters, ""V"" and ""K"".

One day, he has typed out a string s with only these two letters. He really likes it when the string ""VK"" appears, so he wishes to change at most one letter in the string (or do no changes) to maximize the number of occurrences of that string. Compute the maximum number of times ""VK"" can appear as a substring (i. e. a letter ""K"" right after a letter ""V"") in the resulting string.


-----Input-----

The first line will contain a string s consisting only of uppercase English letters ""V"" and ""K"" with length not less than 1 and not greater than 100.


-----Output-----

Output a single integer, the maximum number of times ""VK"" can appear as a substring of the given string after changing at most one character.


-----Examples-----
Input
VK

Output
1

Input
VV

Output
1

Input
V

Output
0

Input
VKKKKKKKKKVVVVVVVVVK

Output
3

Input
KVKV

Output
1



-----Note-----

For the first case, we do not change any letters. ""VK"" appears once, which is the maximum number of times it could appear.

For the second case, we can change the second character from a ""V"" to a ""K"". This will give us the string ""VK"". This has one occurrence of the string ""VK"" as a substring.

For the fourth case, we can change the fourth character from a ""K"" to a ""V"". This will give us the string ""VKKVKKKKKKVVVVVVVVVK"". This has three occurrences of the string ""VK"" as a substring. We can check no other moves can give us strictly more occurrences.","s = input()

# Initialize the count of VK substrings
count_vk = 0

# Count initial VK substrings
for i in range(len(s) - 1):
    if s[i] == 'V' and s[i + 1] == 'K':
        count_vk += 1

# Try changing each character and see if it increases VK substrings
max_vk = count_vk
for i in range(len(s)):
    if s[i] == 'V':
        s_new = s[:i] + 'K' + s[i+1:]
    elif s[i] == 'K':
        s_new = s[:i] + 'V' + s[i+1:]
    else:
        continue
    
    new_count_vk = 0
    for j in range(len(s_new) - 1):
        if s_new[j] == 'V' and s_new[j + 1] == 'K':
            new_count_vk += 1
    
    max_vk = max(max_vk, new_count_vk)

print(max_vk)
",2,True,True,True,True,False,True,True,True,False,True,False,True,False,290_gpt-4o,0.5689011500308099,0.06930433337203927,0.5416666666666666
298,apps,gpt-4o,qwen2.5-7b-instruct,"Vasya has got three integers $n$, $m$ and $k$. He'd like to find three integer points $(x_1, y_1)$, $(x_2, y_2)$, $(x_3, y_3)$, such that $0 \le x_1, x_2, x_3 \le n$, $0 \le y_1, y_2, y_3 \le m$ and the area of the triangle formed by these points is equal to $\frac{nm}{k}$.

Help Vasya! Find such points (if it's possible). If there are multiple solutions, print any of them.


-----Input-----

The single line contains three integers $n$, $m$, $k$ ($1\le n, m \le 10^9$, $2 \le k \le 10^9$).


-----Output-----

If there are no such points, print ""NO"".

Otherwise print ""YES"" in the first line. The next three lines should contain integers $x_i, y_i$ — coordinates of the points, one point per line. If there are multiple solutions, print any of them.

You can print each letter in any case (upper or lower).


-----Examples-----
Input
4 3 3

Output
YES
1 0
2 3
4 1

Input
4 4 7

Output
NO



-----Note-----

In the first example area of the triangle should be equal to $\frac{nm}{k} = 4$. The triangle mentioned in the output is pictured below:  [Image] 

In the second example there is no triangle with area $\frac{nm}{k} = \frac{16}{7}$.","n, m, k = map(int, input().split())

# Calculate the area required for the triangle
area = n * m / k

# Check if the area is an integer
if area != int(area):
    print(""NO"")
else:
    area = int(area)
    # We find a way to create a triangle with this area
    if area == 0:
        print(""NO"")
    else:
        # We can set one point at (0, 0) and the others in a way to form the required area
        print(""YES"")
        print(""0 0"")
        if 2 * area <= n:
            print(f""{2 * area} 1"")
            print(f""0 1"")
        elif 2 * area <= m:
            print(f""1 {2 * area}"")
            print(f""1 0"")
        else:
            print(f""{n} {m // 2}"")
            print(f""0 {m // 2}"")
",2,False,False,False,False,False,False,False,False,False,False,True,False,True,298_gpt-4o,0.7921392855984806,0.3201115600931055,0.625
28,apps,llama3-70b,qwen2.5-7b-instruct,"You are given a string s consisting of n lowercase Latin letters. You have to type this string using your keyboard.

Initially, you have an empty string. Until you type the whole string, you may perform the following operation:  add a character to the end of the string. 

Besides, at most once you may perform one additional operation: copy the string and append it to itself.

For example, if you have to type string abcabca, you can type it in 7 operations if you type all the characters one by one. However, you can type it in 5 operations if you type the string abc first and then copy it and type the last character.

If you have to type string aaaaaaaaa, the best option is to type 4 characters one by one, then copy the string, and then type the remaining character.

Print the minimum number of operations you need to type the given string.


-----Input-----

The first line of the input containing only one integer number n (1 ≤ n ≤ 100) — the length of the string you have to type. The second line containing the string s consisting of n lowercase Latin letters.


-----Output-----

Print one integer number — the minimum number of operations you need to type the given string.


-----Examples-----
Input
7
abcabca

Output
5

Input
8
abcdefgh

Output
8



-----Note-----

The first test described in the problem statement.

In the second test you can only type all the characters one by one.","n = int(input())
s = input()
dp = [0] * (n + 1)
dp[0] = 0
for i in range(1, n + 1):
    dp[i] = i
    for j in range(i):
        if s[j:i] in s[:j]:
            dp[i] = min(dp[i], dp[j] + (i - j) // (i - j - j) + 1)
print(dp[n])
",2,False,False,False,True,False,False,False,False,False,False,False,False,False,28_llama3-70b,0.8532123758836564,0.4130125310478158,0.7083333333333334
33,apps,llama3-70b,qwen2.5-7b-instruct,"In this problem we assume the Earth to be a completely round ball and its surface a perfect sphere. The length of the equator and any meridian is considered to be exactly 40 000 kilometers. Thus, travelling from North Pole to South Pole or vice versa takes exactly 20 000 kilometers.

Limak, a polar bear, lives on the North Pole. Close to the New Year, he helps somebody with delivering packages all around the world. Instead of coordinates of places to visit, Limak got a description how he should move, assuming that he starts from the North Pole. The description consists of n parts. In the i-th part of his journey, Limak should move t_{i} kilometers in the direction represented by a string dir_{i} that is one of: ""North"", ""South"", ""West"", ""East"".

Limak isn’t sure whether the description is valid. You must help him to check the following conditions:  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the North Pole, he can move only to the South.  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the South Pole, he can move only to the North.  The journey must end on the North Pole. 

Check if the above conditions are satisfied and print ""YES"" or ""NO"" on a single line.


-----Input-----

The first line of the input contains a single integer n (1 ≤ n ≤ 50).

The i-th of next n lines contains an integer t_{i} and a string dir_{i} (1 ≤ t_{i} ≤ 10^6, $\operatorname{dir}_{i} \in \{\text{North, South, West, East} \}$) — the length and the direction of the i-th part of the journey, according to the description Limak got.


-----Output-----

Print ""YES"" if the description satisfies the three conditions, otherwise print ""NO"", both without the quotes.


-----Examples-----
Input
5
7500 South
10000 East
3500 North
4444 West
4000 North

Output
YES

Input
2
15000 South
4000 East

Output
NO

Input
5
20000 South
1000 North
1000000 West
9000 North
10000 North

Output
YES

Input
3
20000 South
10 East
20000 North

Output
NO

Input
2
1000 North
1000 South

Output
NO

Input
4
50 South
50 North
15000 South
15000 North

Output
YES



-----Note-----

Drawings below show how Limak's journey would look like in first two samples. In the second sample the answer is ""NO"" because he doesn't end on the North Pole. [Image]","n = int(input())
curr_lat = 90
for _ in range(n):
    t, dir = input().split()
    t = int(t)
    if dir == ""North"":
        curr_lat += t / 111.195
    elif dir == ""South"":
        curr_lat -= t / 111.195
    else:
        continue
    if curr_lat < -90 or curr_lat > 90:
        print(""NO"")
        exit()
    if curr_lat == -90 and dir != ""North"":
        print(""NO"")
        exit()
    if curr_lat == 90 and dir != ""South"":
        print(""NO"")
        exit()
print(""YES"" if curr_lat == 90 else ""NO"")
",2,False,True,True,True,True,True,True,True,True,True,False,True,False,33_llama3-70b,0.9079029728562571,0.5146845763327755,0.7916666666666666
36,apps,llama3-70b,qwen2.5-7b-instruct,"The flag of Berland is such rectangular field n × m that satisfies following conditions:

  Flag consists of three colors which correspond to letters 'R', 'G' and 'B'.  Flag consists of three equal in width and height stripes, parralel to each other and to sides of the flag. Each stripe has exactly one color.  Each color should be used in exactly one stripe. 

You are given a field n × m, consisting of characters 'R', 'G' and 'B'. Output ""YES"" (without quotes) if this field corresponds to correct flag of Berland. Otherwise, print ""NO"" (without quotes).


-----Input-----

The first line contains two integer numbers n and m (1 ≤ n, m ≤ 100) — the sizes of the field.

Each of the following n lines consisting of m characters 'R', 'G' and 'B' — the description of the field.


-----Output-----

Print ""YES"" (without quotes) if the given field corresponds to correct flag of Berland . Otherwise, print ""NO"" (without quotes).


-----Examples-----
Input
6 5
RRRRR
RRRRR
BBBBB
BBBBB
GGGGG
GGGGG

Output
YES

Input
4 3
BRG
BRG
BRG
BRG

Output
YES

Input
6 7
RRRGGGG
RRRGGGG
RRRGGGG
RRRBBBB
RRRBBBB
RRRBBBB

Output
NO

Input
4 4
RRRR
RRRR
BBBB
GGGG

Output
NO



-----Note-----

The field in the third example doesn't have three parralel stripes.

Rows of the field in the fourth example are parralel to each other and to borders. But they have different heights — 2, 1 and 1.","n, m = map(int, input().split())
field = [input() for _ in range(n)]

rows = len(set(''.join(field[i::n//3]) for i in range(n//3)))
cols = len(set(''.join(row[i*m//3:(i+1)*m//3] for row in field)) for i in range(3))

print(""YES"" if rows == 3 and cols == 3 else ""NO"")
",2,False,False,False,True,False,False,False,True,True,False,False,False,False,36_llama3-70b,0.5737313256405553,0.0718182532301581,0.625
44,apps,llama3-70b,qwen2.5-7b-instruct,"You are given the set of vectors on the plane, each of them starting at the origin. Your task is to find a pair of vectors with the minimal non-oriented angle between them.

Non-oriented angle is non-negative value, minimal between clockwise and counterclockwise direction angles. Non-oriented angle is always between 0 and π. For example, opposite directions vectors have angle equals to π.


-----Input-----

First line of the input contains a single integer n (2 ≤ n ≤ 100 000) — the number of vectors.

The i-th of the following n lines contains two integers x_{i} and y_{i} (|x|, |y| ≤ 10 000, x^2 + y^2 > 0) — the coordinates of the i-th vector. Vectors are numbered from 1 to n in order of appearing in the input. It is guaranteed that no two vectors in the input share the same direction (but they still can have opposite directions).


-----Output-----

Print two integer numbers a and b (a ≠ b) — a pair of indices of vectors with the minimal non-oriented angle. You can print the numbers in any order. If there are many possible answers, print any.


-----Examples-----
Input
4
-1 0
0 -1
1 0
1 1

Output
3 4

Input
6
-1 0
0 -1
1 0
1 1
-4 -5
-4 -6

Output
6 5","import math

n = int(input())

v = []
for _ in range(n):
    x, y = map(int, input().split())
    v.append((x, y))

ans = (0, 1)
ans_angle = math.pi

v.sort(key=lambda v: math.atan2(v[1], v[0]))

for i in range(n):
    for j in range(i+1, min(n, i+100)):
        angle = math.acos((v[i][0]*v[j][0] + v[i][1]*v[j][1]) / 
                          math.sqrt(v[i][0]**2 + v[i][1]**2) / 
                          math.sqrt(v[j][0]**2 + v[j][1]**2))
        if angle < ans_angle:
            ans_angle = angle
            ans = (i, j)

print(ans[0]+1, ans[1]+1)
",2,False,False,False,True,False,True,True,True,True,True,False,True,True,44_llama3-70b,0.5575568417069499,0.05699574066749571,0.5833333333333334
47,apps,llama3-70b,qwen2.5-7b-instruct,"After finishing eating her bun, Alyona came up with two integers n and m. She decided to write down two columns of integers — the first column containing integers from 1 to n and the second containing integers from 1 to m. Now the girl wants to count how many pairs of integers she can choose, one from the first column and the other from the second column, such that their sum is divisible by 5.

Formally, Alyona wants to count the number of pairs of integers (x, y) such that 1 ≤ x ≤ n, 1 ≤ y ≤ m and $(x + y) \operatorname{mod} 5$ equals 0.

As usual, Alyona has some troubles and asks you to help.


-----Input-----

The only line of the input contains two integers n and m (1 ≤ n, m ≤ 1 000 000).


-----Output-----

Print the only integer — the number of pairs of integers (x, y) such that 1 ≤ x ≤ n, 1 ≤ y ≤ m and (x + y) is divisible by 5.


-----Examples-----
Input
6 12

Output
14

Input
11 14

Output
31

Input
1 5

Output
1

Input
3 8

Output
5

Input
5 7

Output
7

Input
21 21

Output
88



-----Note-----

Following pairs are suitable in the first sample case:   for x = 1 fits y equal to 4 or 9;  for x = 2 fits y equal to 3 or 8;  for x = 3 fits y equal to 2, 7 or 12;  for x = 4 fits y equal to 1, 6 or 11;  for x = 5 fits y equal to 5 or 10;  for x = 6 fits y equal to 4 or 9. 

Only the pair (1, 4) is suitable in the third sample case.","n, m = map(int, input().split())
count = 0
for x in range(1, n + 1):
    for y in range(1, m + 1):
        if (x + y) % 5 == 0:
            count += 1
print(count)
",2,False,True,True,True,True,True,True,True,True,True,True,True,True,47_llama3-70b,0.8844787972965898,0.4663282176478544,0.7083333333333334
50,apps,llama3-70b,qwen2.5-7b-instruct,"Let's write all the positive integer numbers one after another from $1$ without any delimiters (i.e. as a single string). It will be the infinite sequence starting with 123456789101112131415161718192021222324252627282930313233343536...

Your task is to print the $k$-th digit of this sequence.


-----Input-----

The first and only line contains integer $k$ ($1 \le k \le 10^{12}$) — the position to process ($1$-based index).


-----Output-----

Print the $k$-th digit of the resulting infinite sequence.


-----Examples-----
Input
7

Output
7

Input
21

Output
5","k = int(input())
n = 1
while True:
    s = str(n)
    if len(s) >= k:
        print(s[k-1])
        break
    k -= len(s)
    n += 1
",2,False,False,True,True,True,True,True,False,True,True,True,True,False,50_llama3-70b,0.5992170886152665,0.0999273480448792,0.5833333333333334
59,apps,llama3-70b,qwen2.5-7b-instruct,"Petya has equal wooden bars of length n. He wants to make a frame for two equal doors. Each frame has two vertical (left and right) sides of length a and one top side of length b. A solid (i.e. continuous without breaks) piece of bar is needed for each side.

Determine a minimal number of wooden bars which are needed to make the frames for two doors. Petya can cut the wooden bars into any parts, but each side of each door should be a solid piece of a wooden bar (or a whole wooden bar).


-----Input-----

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the length of each wooden bar.

The second line contains a single integer a (1 ≤ a ≤ n) — the length of the vertical (left and right) sides of a door frame.

The third line contains a single integer b (1 ≤ b ≤ n) — the length of the upper side of a door frame.


-----Output-----

Print the minimal number of wooden bars with length n which are needed to make the frames for two doors.


-----Examples-----
Input
8
1
2

Output
1

Input
5
3
4

Output
6

Input
6
4
2

Output
4

Input
20
5
6

Output
2



-----Note-----

In the first example one wooden bar is enough, since the total length of all six sides of the frames for two doors is 8.

In the second example 6 wooden bars is enough, because for each side of the frames the new wooden bar is needed.","n = int(input())
a = int(input())
b = int(input())

total_length = 2 * (a * 2 + b)
if total_length <= n:
    print(1)
else:
    print(-(-total_length // n))
",2,False,False,False,True,True,True,True,False,True,True,True,True,True,59_llama3-70b,0.6580279302119527,0.15839721483839558,0.5
63,apps,llama3-70b,qwen2.5-7b-instruct,"Since most contestants do not read this part, I have to repeat that Bitlandians are quite weird. They have their own jobs, their own working method, their own lives, their own sausages and their own games!

Since you are so curious about Bitland, I'll give you the chance of peeking at one of these games.

BitLGM and BitAryo are playing yet another of their crazy-looking genius-needed Bitlandish games. They've got a sequence of n non-negative integers a_1, a_2, ..., a_{n}. The players make moves in turns. BitLGM moves first. Each player can and must do one of the two following actions in his turn:

  Take one of the integers (we'll denote it as a_{i}). Choose integer x (1 ≤ x ≤ a_{i}). And then decrease a_{i} by x, that is, apply assignment: a_{i} = a_{i} - x.  Choose integer x $(1 \leq x \leq \operatorname{min}_{i = 1} a_{i})$. And then decrease all a_{i} by x, that is, apply assignment: a_{i} = a_{i} - x, for all i. 

The player who cannot make a move loses.

You're given the initial sequence a_1, a_2, ..., a_{n}. Determine who wins, if both players plays optimally well and if BitLGM and BitAryo start playing the described game in this sequence.


-----Input-----

The first line contains an integer n (1 ≤ n ≤ 3).

The next line contains n integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} < 300).


-----Output-----

Write the name of the winner (provided that both players play optimally well). Either ""BitLGM"" or ""BitAryo"" (without the quotes).


-----Examples-----
Input
2
1 1

Output
BitLGM

Input
2
1 2

Output
BitAryo

Input
3
1 2 1

Output
BitLGM","n = int(input())
a = list(map(int, input().split()))
while len(a) > 1:
    if min(a) == 0:
        a.remove(0)
    else:
        x = min(a)
        a = [i - x for i in a]
if a:
    print(""BitLGM"" if a[0] % 2 == 0 else ""BitAryo"")
else:
    print(""BitAryo"")
",2,False,False,False,True,False,False,True,False,False,False,False,False,False,63_llama3-70b,0.8591486484104238,0.41913431465941037,0.6666666666666666
89,apps,llama3-70b,qwen2.5-7b-instruct,"The year 2015 is almost over.

Limak is a little polar bear. He has recently learnt about the binary system. He noticed that the passing year has exactly one zero in its representation in the binary system — 2015_10 = 11111011111_2. Note that he doesn't care about the number of zeros in the decimal representation.

Limak chose some interval of years. He is going to count all years from this interval that have exactly one zero in the binary representation. Can you do it faster?

Assume that all positive integers are always written without leading zeros.


-----Input-----

The only line of the input contains two integers a and b (1 ≤ a ≤ b ≤ 10^18) — the first year and the last year in Limak's interval respectively.


-----Output-----

Print one integer – the number of years Limak will count in his chosen interval.


-----Examples-----
Input
5 10

Output
2

Input
2015 2015

Output
1

Input
100 105

Output
0

Input
72057594000000000 72057595000000000

Output
26



-----Note-----

In the first sample Limak's interval contains numbers 5_10 = 101_2, 6_10 = 110_2, 7_10 = 111_2, 8_10 = 1000_2, 9_10 = 1001_2 and 10_10 = 1010_2. Two of them (101_2 and 110_2) have the described property.","def count_years_with_one_zero(a, b):
    def count_zeros(n):
        return bin(n).count('0')

    count = 0
    for year in range(a, b + 1):
        if count_zeros(year) == 1:
            count += 1
    return count

a, b = map(int, input().split())
print(count_years_with_one_zero(a, b))
",2,False,True,True,True,True,True,True,True,True,True,True,True,True,89_llama3-70b,0.9060636397552515,0.5134257209148272,0.75
95,apps,llama3-70b,qwen2.5-7b-instruct,"Alexander is learning how to convert numbers from the decimal system to any other, however, he doesn't know English letters, so he writes any number only as a decimal number, it means that instead of the letter A he will write the number 10. Thus, by converting the number 475 from decimal to hexadecimal system, he gets 11311 (475 = 1·16^2 + 13·16^1 + 11·16^0). Alexander lived calmly until he tried to convert the number back to the decimal number system.

Alexander remembers that he worked with little numbers so he asks to find the minimum decimal number so that by converting it to the system with the base n he will get the number k.


-----Input-----

The first line contains the integer n (2 ≤ n ≤ 10^9). The second line contains the integer k (0 ≤ k < 10^60), it is guaranteed that the number k contains no more than 60 symbols. All digits in the second line are strictly less than n.

Alexander guarantees that the answer exists and does not exceed 10^18.

The number k doesn't contain leading zeros.


-----Output-----

Print the number x (0 ≤ x ≤ 10^18) — the answer to the problem.


-----Examples-----
Input
13
12

Output
12
Input
16
11311

Output
475
Input
20
999

Output
3789
Input
17
2016

Output
594


-----Note-----

In the first example 12 could be obtained by converting two numbers to the system with base 13: 12 = 12·13^0 or 15 = 1·13^1 + 2·13^0.","n = int(input())
k = input()
x = 0
for i, c in enumerate(reversed(k)):
    x += int(c) * (n ** i)
print(x)
",2,False,True,True,True,True,True,True,True,True,True,True,True,False,95_llama3-70b,0.7207463733290959,0.2320145462963935,0.5833333333333334
96,apps,llama3-70b,qwen2.5-7b-instruct,"Array of integers is unimodal, if:

  it is strictly increasing in the beginning;  after that it is constant;  after that it is strictly decreasing. 

The first block (increasing) and the last block (decreasing) may be absent. It is allowed that both of this blocks are absent.

For example, the following three arrays are unimodal: [5, 7, 11, 11, 2, 1], [4, 4, 2], [7], but the following three are not unimodal: [5, 5, 6, 6, 1], [1, 2, 1, 2], [4, 5, 5, 6].

Write a program that checks if an array is unimodal.


-----Input-----

The first line contains integer n (1 ≤ n ≤ 100) — the number of elements in the array.

The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 1 000) — the elements of the array.


-----Output-----

Print ""YES"" if the given array is unimodal. Otherwise, print ""NO"".

You can output each letter in any case (upper or lower).


-----Examples-----
Input
6
1 5 5 5 4 2

Output
YES

Input
5
10 20 30 20 10

Output
YES

Input
4
1 2 1 2

Output
NO

Input
7
3 3 3 3 3 3 3

Output
YES



-----Note-----

In the first example the array is unimodal, because it is strictly increasing in the beginning (from position 1 to position 2, inclusively), that it is constant (from position 2 to position 4, inclusively) and then it is strictly decreasing (from position 4 to position 6, inclusively).","n = int(input())
arr = list(map(int, input().split()))

increasing = False
constant = False
decreasing = False

for i in range(1, n):
    if arr[i] > arr[i-1]:
        if decreasing:
            print(""NO"")
            exit()
        increasing = True
    elif arr[i] == arr[i-1]:
        if increasing:
            increasing = False
            constant = True
    else:
        if increasing:
            increasing = False
        decreasing = True

print(""YES"")
",2,False,False,False,True,True,False,True,True,True,True,True,True,False,96_llama3-70b,0.46078781656624684,-0.038680870689825585,0.5416666666666666
97,apps,llama3-70b,qwen2.5-7b-instruct,"At first, let's define function $f(x)$ as follows: $$ \begin{matrix} f(x) & = & \left\{ \begin{matrix} \frac{x}{2} & \mbox{if } x \text{ is even} \\ x - 1 & \mbox{otherwise } \end{matrix} \right. \end{matrix} $$

We can see that if we choose some value $v$ and will apply function $f$ to it, then apply $f$ to $f(v)$, and so on, we'll eventually get $1$. Let's write down all values we get in this process in a list and denote this list as $path(v)$. For example, $path(1) = [1]$, $path(15) = [15, 14, 7, 6, 3, 2, 1]$, $path(32) = [32, 16, 8, 4, 2, 1]$.

Let's write all lists $path(x)$ for every $x$ from $1$ to $n$. The question is next: what is the maximum value $y$ such that $y$ is contained in at least $k$ different lists $path(x)$?

Formally speaking, you need to find maximum $y$ such that $\left| \{ x ~|~ 1 \le x \le n, y \in path(x) \} \right| \ge k$.


-----Input-----

The first line contains two integers $n$ and $k$ ($1 \le k \le n \le 10^{18}$).


-----Output-----

Print the only integer — the maximum value that is contained in at least $k$ paths.


-----Examples-----
Input
11 3

Output
5

Input
11 6

Output
4

Input
20 20

Output
1

Input
14 5

Output
6

Input
1000000 100

Output
31248



-----Note-----

In the first example, the answer is $5$, since $5$ occurs in $path(5)$, $path(10)$ and $path(11)$.

In the second example, the answer is $4$, since $4$ occurs in $path(4)$, $path(5)$, $path(8)$, $path(9)$, $path(10)$ and $path(11)$.

In the third example $n = k$, so the answer is $1$, since $1$ is the only number occuring in all paths for integers from $1$ to $20$.","n, k = map(int, input().split())

def f(x):
    if x % 2 == 0:
        return x // 2
    else:
        return x - 1

def path(x):
    res = [x]
    while x != 1:
        x = f(x)
        res.append(x)
    return res

count = {}
for i in range(1, n + 1):
    for j in path(i):
        if j not in count:
            count[j] = 0
        count[j] += 1

max_y = 0
for y, cnt in count.items():
    if cnt >= k:
        max_y = max(max_y, y)

print(max_y)
",2,False,False,False,False,True,True,True,True,False,False,True,True,True,97_llama3-70b,0.6015087514198227,0.10190933693449948,0.5416666666666666
99,apps,llama3-70b,qwen2.5-7b-instruct,"Gerald bought two very rare paintings at the Sotheby's auction and he now wants to hang them on the wall. For that he bought a special board to attach it to the wall and place the paintings on the board. The board has shape of an a_1 × b_1 rectangle, the paintings have shape of a a_2 × b_2 and a_3 × b_3 rectangles.

Since the paintings are painted in the style of abstract art, it does not matter exactly how they will be rotated, but still, one side of both the board, and each of the paintings must be parallel to the floor. The paintings can touch each other and the edges of the board, but can not overlap or go beyond the edge of the board. Gerald asks whether it is possible to place the paintings on the board, or is the board he bought not large enough?


-----Input-----

The first line contains two space-separated numbers a_1 and b_1 — the sides of the board. Next two lines contain numbers a_2, b_2, a_3 and b_3 — the sides of the paintings. All numbers a_{i}, b_{i} in the input are integers and fit into the range from 1 to 1000.


-----Output-----

If the paintings can be placed on the wall, print ""YES"" (without the quotes), and if they cannot, print ""NO"" (without the quotes).


-----Examples-----
Input
3 2
1 3
2 1

Output
YES

Input
5 5
3 3
3 3

Output
NO

Input
4 2
2 3
1 2

Output
YES



-----Note-----

That's how we can place the pictures in the first test:

[Image]

And that's how we can do it in the third one.

[Image]","a1, b1 = map(int, input().split())
a2, b2 = map(int, input().split())
a3, b3 = map(int, input().split())

if max(a1, b1) >= max(a2, b2) and min(a1, b1) >= min(a2, b2):
    if max(a1, b1) >= max(a3, b3) and min(a1, b1) >= min(a3, b3):
        print(""YES"")
    else:
        print(""NO"")
else:
    if max(a1, b1) >= max(a3, b3) and min(a1, b1) >= min(a3, b3):
        print(""YES"")
    else:
        print(""NO"")
",2,False,False,False,True,False,False,False,False,False,False,False,False,False,99_llama3-70b,0.44565346236023223,-0.053507185884652454,0.5416666666666666
107,apps,llama3-70b,qwen2.5-7b-instruct,"Есть n-подъездный дом, в каждом подъезде по m этажей, и на каждом этаже каждого подъезда ровно k квартир. Таким образом, в доме всего n·m·k квартир. Они пронумерованы естественным образом от 1 до n·m·k, то есть первая квартира на первом этаже в первом подъезде имеет номер 1, первая квартира на втором этаже первого подъезда имеет номер k + 1 и так далее. Особенность этого дома состоит в том, что он круглый. То есть если обходить его по часовой стрелке, то после подъезда номер 1 следует подъезд номер 2, затем подъезд номер 3 и так далее до подъезда номер n. После подъезда номер n снова идёт подъезд номер 1.

Эдвард живёт в квартире номер a, а Наташа — в квартире номер b. Переход на 1 этаж вверх или вниз по лестнице занимает 5 секунд, переход от двери подъезда к двери соседнего подъезда — 15 секунд, а переход в пределах одного этажа одного подъезда происходит мгновенно. Также в каждом подъезде дома есть лифт. Он устроен следующим образом: он всегда приезжает ровно через 10 секунд после вызова, а чтобы переместить пассажира на один этаж вверх или вниз, лифт тратит ровно 1 секунду. Посадка и высадка происходят мгновенно.

Помогите Эдварду найти минимальное время, за которое он сможет добраться до квартиры Наташи. Считайте, что Эдвард может выйти из подъезда только с первого этажа соответствующего подъезда (это происходит мгновенно). Если Эдвард стоит перед дверью какого-то подъезда, он может зайти в него и сразу окажется на первом этаже этого подъезда (это также происходит мгновенно). Эдвард может выбирать, в каком направлении идти вокруг дома.


-----Входные данные-----

В первой строке входных данных следуют три числа n, m, k (1 ≤ n, m, k ≤ 1000) — количество подъездов в доме, количество этажей в каждом подъезде и количество квартир на каждом этаже каждого подъезда соответственно.

Во второй строке входных данных записаны два числа a и b (1 ≤ a, b ≤ n·m·k) — номера квартир, в которых живут Эдвард и Наташа, соответственно. Гарантируется, что эти номера различны. 


-----Выходные данные-----

Выведите единственное целое число — минимальное время (в секундах), за которое Эдвард сможет добраться от своей квартиры до квартиры Наташи.


-----Примеры-----
Входные данные
4 10 5
200 6

Выходные данные
39

Входные данные
3 1 5
7 2

Выходные данные
15



-----Примечание-----

В первом тестовом примере Эдвард находится в 4 подъезде на 10 этаже, а Наташа находится в 1 подъезде на 2 этаже. Поэтому Эдварду выгодно сначала спуститься на лифте на первый этаж (на это он потратит 19 секунд, из которых 10 — на ожидание и 9 — на поездку на лифте), затем обойти дом против часовой стрелки до подъезда номер 1 (на это он потратит 15 секунд), и наконец подняться по лестнице на этаж номер 2 (на это он потратит 5 секунд). Таким образом, ответ равен 19 + 15 + 5 = 39.

Во втором тестовом примере Эдвард живёт в подъезде 2 на этаже 1, а Наташа находится в подъезде 1 на этаже 1. Поэтому Эдварду выгодно просто обойти дом по часовой стрелке до подъезда 1, на это он потратит 15 секунд.","n, m, k = map(int, input().split())
a, b = map(int, input().split())

# Calculate the floor and block number of Edward and Natasha
a_floor = (a - 1) % m + 1
a_block = (a - 1) // (m * k) + 1
b_floor = (b - 1) % m + 1
b_block = (b - 1) // (m * k) + 1

# Calculate the minimum time to reach Natasha's block
min_block_time = min(abs(a_block - b_block), n - abs(a_block - b_block)) * 15

# Calculate the minimum time to reach Natasha's floor
if a_floor > b_floor:
    min_floor_time = (a_floor - b_floor) * 5 + 10
else:
    min_floor_time = (b_floor - a_floor) * 5 + 10

print(min_block_time + min_floor_time)
",2,False,False,False,,True,False,True,True,True,True,False,False,True,107_llama3-70b,0.8822502879896532,0.4610322878715614,0.7083333333333334
112,apps,llama3-70b,qwen2.5-7b-instruct,"You are given two integers n and k. Find k-th smallest divisor of n, or report that it doesn't exist.

Divisor of n is any such natural number, that n can be divided by it without remainder.


-----Input-----

The first line contains two integers n and k (1 ≤ n ≤ 10^15, 1 ≤ k ≤ 10^9).


-----Output-----

If n has less than k divisors, output -1.

Otherwise, output the k-th smallest divisor of n.


-----Examples-----
Input
4 2

Output
2

Input
5 3

Output
-1

Input
12 5

Output
6



-----Note-----

In the first example, number 4 has three divisors: 1, 2 and 4. The second one is 2.

In the second example, number 5 has only two divisors: 1 and 5. The third divisor doesn't exist, so the answer is -1.","n, k = map(int, input().split())
divisors = []
for i in range(1, int(n ** 0.5) + 1):
    if n % i == 0:
        divisors.append(i)
        if i * i != n:
            divisors.append(n // i)
divisors.sort()
if k > len(divisors):
    print(-1)
else:
    print(divisors[k - 1])
",2,True,False,False,True,True,True,True,True,True,False,True,True,True,112_llama3-70b,0.7604441505365013,0.2804575585748434,0.625
115,apps,llama3-70b,qwen2.5-7b-instruct,"You are given two matrices $A$ and $B$. Each matrix contains exactly $n$ rows and $m$ columns. Each element of $A$ is either $0$ or $1$; each element of $B$ is initially $0$.

You may perform some operations with matrix $B$. During each operation, you choose any submatrix of $B$ having size $2 \times 2$, and replace every element in the chosen submatrix with $1$. In other words, you choose two integers $x$ and $y$ such that $1 \le x < n$ and $1 \le y < m$, and then set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$.

Your goal is to make matrix $B$ equal to matrix $A$. Two matrices $A$ and $B$ are equal if and only if every element of matrix $A$ is equal to the corresponding element of matrix $B$.

Is it possible to make these matrices equal? If it is, you have to come up with a sequence of operations that makes $B$ equal to $A$. Note that you don't have to minimize the number of operations.


-----Input-----

The first line contains two integers $n$ and $m$ ($2 \le n, m \le 50$).

Then $n$ lines follow, each containing $m$ integers. The $j$-th integer in the $i$-th line is $A_{i, j}$. Each integer is either $0$ or $1$.


-----Output-----

If it is impossible to make $B$ equal to $A$, print one integer $-1$.

Otherwise, print any sequence of operations that transforms $B$ into $A$ in the following format: the first line should contain one integer $k$ — the number of operations, and then $k$ lines should follow, each line containing two integers $x$ and $y$ for the corresponding operation (set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$). The condition $0 \le k \le 2500$ should hold.


-----Examples-----
Input
3 3
1 1 1
1 1 1
0 1 1

Output
3
1 1
1 2
2 2

Input
3 3
1 0 1
1 0 1
0 0 0

Output
-1

Input
3 2
0 0
0 0
0 0

Output
0



-----Note-----

The sequence of operations in the first example: $\begin{matrix} 0 & 0 & 0 & & 1 & 1 & 0 & & 1 & 1 & 1 & & 1 & 1 & 1 \\ 0 & 0 & 0 & \rightarrow & 1 & 1 & 0 & \rightarrow & 1 & 1 & 1 & \rightarrow & 1 & 1 & 1 \\ 0 & 0 & 0 & & 0 & 0 & 0 & & 0 & 0 & 0 & & 0 & 1 & 1 \end{matrix}$","n, m = map(int, input().split())
A = [list(map(int, input().split())) for _ in range(n)]

ops = []
for i in range(n-1):
    for j in range(m-1):
        if A[i][j] == 1 and A[i+1][j] == 1 and A[i][j+1] == 1 and A[i+1][j+1] == 1:
            continue
        if A[i][j] == 1 or A[i+1][j] == 1 or A[i][j+1] == 1 or A[i+1][j+1] == 1:
            ops.append((i+1, j+1))

if len(ops) > 2500:
    print(-1)
else:
    print(len(ops))
    for op in ops:
        print(op[0], op[1])
",2,False,False,False,False,False,False,False,False,False,True,False,False,False,115_llama3-70b,0.8967088598411286,0.4905059206596866,0.7083333333333334
117,apps,llama3-70b,qwen2.5-7b-instruct,"Today an outstanding event is going to happen in the forest — hedgehog Filya will come to his old fried Sonya!

Sonya is an owl and she sleeps during the day and stay awake from minute l_1 to minute r_1 inclusive. Also, during the minute k she prinks and is unavailable for Filya.

Filya works a lot and he plans to visit Sonya from minute l_2 to minute r_2 inclusive.

Calculate the number of minutes they will be able to spend together.


-----Input-----

The only line of the input contains integers l_1, r_1, l_2, r_2 and k (1 ≤ l_1, r_1, l_2, r_2, k ≤ 10^18, l_1 ≤ r_1, l_2 ≤ r_2), providing the segments of time for Sonya and Filya and the moment of time when Sonya prinks.


-----Output-----

Print one integer — the number of minutes Sonya and Filya will be able to spend together.


-----Examples-----
Input
1 10 9 20 1

Output
2

Input
1 100 50 200 75

Output
50



-----Note-----

In the first sample, they will be together during minutes 9 and 10.

In the second sample, they will be together from minute 50 to minute 74 and from minute 76 to minute 100.","l1, r1, l2, r2, k = map(int, input().split())

# Calculate the intersection of Sonya's and Filya's time segments
start = max(l1, l2)
end = min(r1, r2)

# If Sonya prinks during their common time, subtract 1 minute
if start <= k <= end:
    end -= 1

# Calculate the number of minutes they can spend together
minutes_together = max(0, end - start + 1)

print(minutes_together)
",2,True,True,True,True,True,True,True,True,True,True,True,True,True,117_llama3-70b,0.8242279258306444,0.3607331723325495,0.75
118,apps,llama3-70b,qwen2.5-7b-instruct,"There is a grass field that stretches infinitely.
In this field, there is a negligibly small cow. Let (x, y) denote the point that is x\ \mathrm{cm} south and y\ \mathrm{cm} east of the point where the cow stands now. The cow itself is standing at (0, 0).
There are also N north-south lines and M east-west lines drawn on the field. The i-th north-south line is the segment connecting the points (A_i, C_i) and (B_i, C_i), and the j-th east-west line is the segment connecting the points (D_j, E_j) and (D_j, F_j).
What is the area of the region the cow can reach when it can move around as long as it does not cross the segments (including the endpoints)? If this area is infinite, print INF instead.

-----Constraints-----
 - All values in input are integers between -10^9 and 10^9  (inclusive).
 - 1 \leq N, M \leq 1000
 - A_i < B_i\ (1 \leq i \leq N)
 - E_j < F_j\ (1 \leq j \leq M)
 - The point (0, 0) does not lie on any of the given segments.

-----Input-----
Input is given from Standard Input in the following format:
N M
A_1 B_1 C_1
:
A_N B_N C_N
D_1 E_1 F_1
:
D_M E_M F_M

-----Output-----
If the area of the region the cow can reach is infinite, print INF; otherwise, print an integer representing the area in \mathrm{cm^2}.
(Under the constraints, it can be proved that the area of the region is always an integer if it is not infinite.)

-----Sample Input-----
5 6
1 2 0
0 1 1
0 2 2
-3 4 -1
-2 6 3
1 0 1
0 1 2
2 0 2
-1 -4 5
3 -2 4
1 2 4

-----Sample Output-----
13

The area of the region the cow can reach is 13\ \mathrm{cm^2}.","from functools import cmp_to_key

N, M = map(int, input().split())

north_south_lines = []
for _ in range(N):
    A, B, C = map(int, input().split())
    north_south_lines.append((C, A, B))

east_west_lines = []
for _ in range(M):
    D, E, F = map(int, input().split())
    east_west_lines.append((D, E, F))

def intersect(line1, line2):
    x1, y1, x2 = line1
    x3, y3, x4 = line2
    denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4)
    if denom == 0:
        return False
    t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / denom
    u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / denom
    if 0 <= t <= 1 and 0 <= u <= 1:
        return True
    return False

north_south_lines.sort(key=cmp_to_key(lambda x, y: x - y))
east_west_lines.sort(key=cmp_to_key(lambda x, y: x - y))

x_points = set()
y_points = set()

for i in range(N):
    for j in range(i + 1, N):
        if north_south_lines[i][0] == north_south_lines[j][0]:
            continue
        x_points.add(north_south_lines[i][0])
        x_points.add(north_south_lines[j][0])

for i in range(M):
    for j in range(i + 1, M):
        if east_west_lines[i][0] == east_west_lines[j][0]:
            continue
        y_points.add(east_west_lines[i][0])

for i in range(N):
    for j in range(M):
        if intersect(north_south_lines[i], east_west_lines[j]):
            x_points.add(north_south_lines[i][0])
            y_points.add(east_west_lines[j][0])

x_points = sorted(list(x_points))
y_points = sorted(list(y_points))

area = 0
for i in range(len(x_points) - 1):
    for j in range(len(y_points) - 1):
        area += (x_points[i + 1] - x_points[i]) * (y_points[j + 1] - y_points[j])

if area == 0:
    print(""INF"")
else:
    print(area)
",2,False,False,False,True,True,True,True,False,True,True,True,True,True,118_llama3-70b,0.8859156860437958,0.47246944408307595,0.75
139,apps,llama3-70b,qwen2.5-7b-instruct,"Little girl Alyona is in a shop to buy some copybooks for school. She study four subjects so she wants to have equal number of copybooks for each of the subjects. There are three types of copybook's packs in the shop: it is possible to buy one copybook for a rubles, a pack of two copybooks for b rubles, and a pack of three copybooks for c rubles. Alyona already has n copybooks.

What is the minimum amount of rubles she should pay to buy such number of copybooks k that n + k is divisible by 4? There are infinitely many packs of any type in the shop. Alyona can buy packs of different type in the same purchase.


-----Input-----

The only line contains 4 integers n, a, b, c (1 ≤ n, a, b, c ≤ 10^9).


-----Output-----

Print the minimum amount of rubles she should pay to buy such number of copybooks k that n + k is divisible by 4.


-----Examples-----
Input
1 1 3 4

Output
3

Input
6 2 1 1

Output
1

Input
4 4 4 4

Output
0

Input
999999999 1000000000 1000000000 1000000000

Output
1000000000



-----Note-----

In the first example Alyona can buy 3 packs of 1 copybook for 3a = 3 rubles in total. After that she will have 4 copybooks which she can split between the subjects equally. 

In the second example Alyuna can buy a pack of 2 copybooks for b = 1 ruble. She will have 8 copybooks in total.

In the third example Alyona can split the copybooks she already has between the 4 subject equally, so she doesn't need to buy anything.

In the fourth example Alyona should buy one pack of one copybook.","n, a, b, c = map(int, input().split())
k = 4 - n % 4
if k == 4:
    k = 0
ans = float('inf')
for i in range(k // 3 + 1):
    j = (k - 3 * i) // 2
    if 3 * i + 2 * j <= k:
        ans = min(ans, 3 * i * c + j * b + (k - 3 * i - 2 * j) * a)
print(ans)
",2,False,True,True,True,True,True,True,True,True,True,True,True,True,139_llama3-70b,0.857008858514336,0.41767737397302485,0.6666666666666666
147,apps,llama3-70b,qwen2.5-7b-instruct,"This morning, Roman woke up and opened the browser with $n$ opened tabs numbered from $1$ to $n$. There are two kinds of tabs: those with the information required for the test and those with social network sites. Roman decided that there are too many tabs open so he wants to close some of them.

He decided to accomplish this by closing every $k$-th ($2 \leq k \leq n - 1$) tab. Only then he will decide whether he wants to study for the test or to chat on the social networks. Formally, Roman will choose one tab (let its number be $b$) and then close all tabs with numbers $c = b + i \cdot k$ that satisfy the following condition: $1 \leq c \leq n$ and $i$ is an integer (it may be positive, negative or zero).

For example, if $k = 3$, $n = 14$ and Roman chooses $b = 8$, then he will close tabs with numbers $2$, $5$, $8$, $11$ and $14$.

After closing the tabs Roman will calculate the amount of remaining tabs with the information for the test (let's denote it $e$) and the amount of remaining social network tabs ($s$). Help Roman to calculate the maximal absolute value of the difference of those values $|e - s|$ so that it would be easy to decide what to do next.


-----Input-----

The first line contains two integers $n$ and $k$ ($2 \leq k < n \leq 100$) — the amount of tabs opened currently and the distance between the tabs closed.

The second line consists of $n$ integers, each of them equal either to $1$ or to $-1$. The $i$-th integer denotes the type of the $i$-th tab: if it is equal to $1$, this tab contains information for the test, and if it is equal to $-1$, it's a social network tab.


-----Output-----

Output a single integer — the maximum absolute difference between the amounts of remaining tabs of different types $|e - s|$.


-----Examples-----
Input
4 2
1 1 -1 1

Output
2

Input
14 3
-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1

Output
9



-----Note-----

In the first example we can choose $b = 1$ or $b = 3$. We will delete then one tab of each type and the remaining tabs are then all contain test information. Thus, $e = 2$ and $s = 0$ and $|e - s| = 2$.

In the second example, on the contrary, we can leave opened only tabs that have social networks opened in them.","n, k = map(int, input().split())
tabs = list(map(int, input().split()))

max_diff = 0
for b in range(1, n + 1):
    e, s = 0, 0
    for i in range(1, n + 1):
        if (i - b) % k != 0:
            e += tabs[i - 1] == 1
            s += tabs[i - 1] == -1
    max_diff = max(max_diff, abs(e - s))

print(max_diff)
",2,True,True,False,True,True,True,True,True,True,True,True,False,False,147_llama3-70b,0.854286478749548,0.3752192952508671,0.8333333333333334
166,apps,llama3-70b,qwen2.5-7b-instruct,"Vasiliy spent his vacation in a sanatorium, came back and found that he completely forgot details of his vacation! 

Every day there was a breakfast, a dinner and a supper in a dining room of the sanatorium (of course, in this order). The only thing that Vasiliy has now is a card from the dining room contaning notes how many times he had a breakfast, a dinner and a supper (thus, the card contains three integers). Vasiliy could sometimes have missed some meal, for example, he could have had a breakfast and a supper, but a dinner, or, probably, at some days he haven't been at the dining room at all.

Vasiliy doesn't remember what was the time of the day when he arrived to sanatorium (before breakfast, before dinner, before supper or after supper), and the time when he left it (before breakfast, before dinner, before supper or after supper). So he considers any of these options. After Vasiliy arrived to the sanatorium, he was there all the time until he left. Please note, that it's possible that Vasiliy left the sanatorium on the same day he arrived.

According to the notes in the card, help Vasiliy determine the minimum number of meals in the dining room that he could have missed. We shouldn't count as missed meals on the arrival day before Vasiliy's arrival and meals on the departure day after he left.


-----Input-----

The only line contains three integers b, d and s (0 ≤ b, d, s ≤ 10^18,  b + d + s ≥ 1) — the number of breakfasts, dinners and suppers which Vasiliy had during his vacation in the sanatorium. 


-----Output-----

Print single integer — the minimum possible number of meals which Vasiliy could have missed during his vacation. 


-----Examples-----
Input
3 2 1

Output
1


Input
1 0 0

Output
0


Input
1 1 1

Output
0


Input
1000000000000000000 0 1000000000000000000

Output
999999999999999999





-----Note-----

In the first sample, Vasiliy could have missed one supper, for example, in case he have arrived before breakfast, have been in the sanatorium for two days (including the day of arrival) and then have left after breakfast on the third day. 

In the second sample, Vasiliy could have arrived before breakfast, have had it, and immediately have left the sanatorium, not missing any meal.

In the third sample, Vasiliy could have been in the sanatorium for one day, not missing any meal.","b, d, s = map(int, input().split())
print(max(0, b - d, b - s, d - s))
",2,False,False,False,True,True,False,True,False,False,False,True,True,True,166_llama3-70b,0.7941543309745088,0.3231319540048668,0.625
168,apps,llama3-70b,qwen2.5-7b-instruct,"You are given two strings a and b. You have to remove the minimum possible number of consecutive (standing one after another) characters from string b in such a way that it becomes a subsequence of string a. It can happen that you will not need to remove any characters at all, or maybe you will have to remove all of the characters from b and make it empty.

Subsequence of string s is any such string that can be obtained by erasing zero or more characters (not necessarily consecutive) from string s.


-----Input-----

The first line contains string a, and the second line — string b. Both of these strings are nonempty and consist of lowercase letters of English alphabet. The length of each string is no bigger than 10^5 characters.


-----Output-----

On the first line output a subsequence of string a, obtained from b by erasing the minimum number of consecutive characters.

If the answer consists of zero characters, output «-» (a minus sign).


-----Examples-----
Input
hi
bob

Output
-

Input
abca
accepted

Output
ac

Input
abacaba
abcdcba

Output
abcba



-----Note-----

In the first example strings a and b don't share any symbols, so the longest string that you can get is empty.

In the second example ac is a subsequence of a, and at the same time you can obtain it by erasing consecutive symbols cepted from string b.","a = input()
b = input()

i = 0
j = 0
ans = []

while i < len(a) and j < len(b):
    if a[i] == b[j]:
        ans.append(a[i])
        i += 1
        j += 1
    else:
        i += 1

if len(ans) == 0:
    print('-')
else:
    print(''.join(ans))
",2,False,False,False,True,True,True,False,False,False,True,False,False,True,168_llama3-70b,0.8388713124323346,0.3900415254551657,0.7083333333333334
181,apps,llama3-70b,qwen2.5-7b-instruct,"Andrey received a postcard from Irina. It contained only the words ""Hello, Andrey!"", and a strange string consisting of lowercase Latin letters, snowflakes and candy canes. Andrey thought that this string is an encrypted message, and decided to decrypt it.

Andrey noticed that snowflakes and candy canes always stand after the letters, so he supposed that the message was encrypted as follows. Candy cane means that the letter before it can be removed, or can be left. A snowflake means that the letter before it can be removed, left, or repeated several times.

For example, consider the following string:  [Image] 

This string can encode the message «happynewyear». For this, candy canes and snowflakes should be used as follows:   candy cane 1: remove the letter w,  snowflake 1: repeat the letter p twice,  candy cane 2: leave the letter n,  snowflake 2: remove the letter w,  snowflake 3: leave the letter e. 

 [Image] 

Please note that the same string can encode different messages. For example, the string above can encode «hayewyar», «happpppynewwwwwyear», and other messages.

Andrey knows that messages from Irina usually have a length of $k$ letters. Help him to find out if a given string can encode a message of $k$ letters, and if so, give an example of such a message.


-----Input-----

The first line contains the string received in the postcard. The string consists only of lowercase Latin letters, as well as the characters «*» and «?», meaning snowflake and candy cone, respectively. These characters can only appear immediately after the letter. The length of the string does not exceed $200$.

The second line contains an integer number $k$ ($1 \leq k \leq 200$), the required message length.


-----Output-----

Print any message of length $k$ that the given string can encode, or «Impossible» if such a message does not exist.


-----Examples-----
Input
hw?ap*yn?eww*ye*ar
12

Output
happynewyear

Input
ab?a
2

Output
aa
Input
ab?a
3

Output
aba
Input
ababb
5

Output
ababb
Input
ab?a
1

Output
Impossible","s = input()
k = int(input())
ans = []
i = 0
while i < len(s) and len(ans) < k:
    if s[i].isalpha():
        ans.append(s[i])
        if i + 1 < len(s) and s[i + 1] == '?':
            i += 2
        elif i + 1 < len(s) and s[i + 1] == '*':
            while i + 1 < len(s) and s[i + 1] == '*':
                ans.append(s[i])
                i += 2
            i += 1
        else:
            i += 1
    else:
        i += 1
if len(ans) == k:
    print(''.join(ans))
else:
    print('Impossible')
",2,False,False,False,True,False,False,True,False,False,False,True,True,False,181_llama3-70b,0.7274293889851403,0.24037283084988623,0.625
187,apps,llama3-70b,qwen2.5-7b-instruct,"Students in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.

The students don’t want to use too many blocks, but they also want to be unique, so no two students’ towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.


-----Input-----

The first line of the input contains two space-separated integers n and m (0 ≤ n, m ≤ 1 000 000, n + m > 0) — the number of students using two-block pieces and the number of students using three-block pieces, respectively.


-----Output-----

Print a single integer, denoting the minimum possible height of the tallest tower.


-----Examples-----
Input
1 3

Output
9

Input
3 2

Output
8

Input
5 0

Output
10



-----Note-----

In the first case, the student using two-block pieces can make a tower of height 4, and the students using three-block pieces can make towers of height 3, 6, and 9 blocks. The tallest tower has a height of 9 blocks.

In the second case, the students can make towers of heights 2, 4, and 8 with two-block pieces and towers of heights 3 and 6 with three-block pieces, for a maximum height of 8 blocks.","n, m = map(int, input().split())
towers = set()
for i in range(1, n + 1):
    towers.add(i * 2)
for i in range(1, m + 1):
    towers.add(i * 3)
print(max(towers))
",2,False,False,False,False,True,False,True,True,True,False,True,False,True,187_llama3-70b,0.8225980361842448,0.3634718884544843,0.7083333333333334
191,apps,llama3-70b,qwen2.5-7b-instruct,"Карта звёздного неба представляет собой прямоугольное поле, состоящее из n строк по m символов в каждой строке. Каждый символ — это либо «.» (означает пустой участок неба), либо «*» (означает то, что в этом месте на небе есть звезда). 

Новое издание карты звёздного неба будет напечатано на квадратных листах, поэтому требуется найти минимально возможную сторону квадрата, в который могут поместиться все звезды. Границы искомого квадрата должны быть параллельны сторонам заданного прямоугольного поля.


-----Входные данные-----

В первой строке входных данных записаны два числа n и m (1 ≤ n, m ≤ 1000) — количество строк и столбцов на карте звездного неба.

В следующих n строках задано по m символов. Каждый символ — это либо «.» (пустой участок неба), либо «*» (звезда).

Гарантируется, что на небе есть хотя бы одна звезда.


-----Выходные данные-----

Выведите одно число — минимально возможную сторону квадрата, которым можно накрыть все звезды.


-----Примеры-----
Входные данные
4 4
....
..*.
...*
..**

Выходные данные
3

Входные данные
1 3
*.*

Выходные данные
3

Входные данные
2 1
.
*

Выходные данные
1



-----Примечание-----

Один из возможных ответов на первый тестовый пример:

 [Image] 

Один из возможных ответов на второй тестовый пример (обратите внимание, что покрывающий квадрат выходит за пределы карты звездного неба):

 [Image] 

Ответ на третий тестовый пример:

 [Image]","n, m = map(int, input().split())
stars = []
for _ in range(n):
    row = input()
    for j, c in enumerate(row):
        if c == '*':
            stars.append((j, _))

min_x = min(x for x, y in stars)
max_x = max(x for x, y in stars)
min_y = min(y for x, y in stars)
max_y = max(y for x, y in stars)

side = max(max_x - min_x + 1, max_y - min_y + 1)
print(side)
",2,True,True,True,True,True,True,True,True,True,True,True,True,True,191_llama3-70b,0.5906126045643085,0.09096909090919665,0.5416666666666666
198,apps,llama3-70b,qwen2.5-7b-instruct,"An online contest will soon be held on ForceCoders, a large competitive programming platform. The authors have prepared $n$ problems; and since the platform is very popular, $998244351$ coder from all over the world is going to solve them.

For each problem, the authors estimated the number of people who would solve it: for the $i$-th problem, the number of accepted solutions will be between $l_i$ and $r_i$, inclusive.

The creator of ForceCoders uses different criteria to determine if the contest is good or bad. One of these criteria is the number of inversions in the problem order. An inversion is a pair of problems $(x, y)$ such that $x$ is located earlier in the contest ($x < y$), but the number of accepted solutions for $y$ is strictly greater.

Obviously, both the creator of ForceCoders and the authors of the contest want the contest to be good. Now they want to calculate the probability that there will be no inversions in the problem order, assuming that for each problem $i$, any integral number of accepted solutions for it (between $l_i$ and $r_i$) is equally probable, and all these numbers are independent.


-----Input-----

The first line contains one integer $n$ ($2 \le n \le 50$) — the number of problems in the contest.

Then $n$ lines follow, the $i$-th line contains two integers $l_i$ and $r_i$ ($0 \le l_i \le r_i \le 998244351$) — the minimum and maximum number of accepted solutions for the $i$-th problem, respectively.


-----Output-----

The probability that there will be no inversions in the contest can be expressed as an irreducible fraction $\frac{x}{y}$, where $y$ is coprime with $998244353$. Print one integer — the value of $xy^{-1}$, taken modulo $998244353$, where $y^{-1}$ is an integer such that $yy^{-1} \equiv 1$ $(mod$ $998244353)$.


-----Examples-----
Input
3
1 2
1 2
1 2

Output
499122177

Input
2
42 1337
13 420

Output
578894053

Input
2
1 1
0 0

Output
1

Input
2
1 1
1 1

Output
1



-----Note-----

The real answer in the first test is $\frac{1}{2}$.","import math

MOD = 998244353

def mul(a, b):
    return (a * b) % MOD

def power(a, b):
    res = 1
    while b > 0:
        if b & 1:
            res = mul(res, a)
        a = mul(a, a)
        b >>= 1
    return res

def inv(a):
    return power(a, MOD - 2)

n = int(input())
a = [list(map(int, input().split())) for _ in range(n)]

res = 1
for i in range(n):
    cnt = 1
    for j in range(i + 1, n):
        if a[i][0] <= a[j][1]:
            cnt = mul(cnt, a[j][1] - a[i][0] + 1)
    res = mul(res, cnt)

for i in range(n):
    res = mul(res, inv(a[i][1] - a[i][0] + 1))

print(res)
",2,False,False,False,False,True,True,True,True,False,False,True,True,False,198_llama3-70b,0.8263793687126502,0.37186575487735446,0.6666666666666666
199,apps,llama3-70b,qwen2.5-7b-instruct,"Pasha has a wooden stick of some positive integer length n. He wants to perform exactly three cuts to get four parts of the stick. Each part must have some positive integer length and the sum of these lengths will obviously be n. 

Pasha likes rectangles but hates squares, so he wonders, how many ways are there to split a stick into four parts so that it's possible to form a rectangle using these parts, but is impossible to form a square.

Your task is to help Pasha and count the number of such ways. Two ways to cut the stick are considered distinct if there exists some integer x, such that the number of parts of length x in the first way differ from the number of parts of length x in the second way.


-----Input-----

The first line of the input contains a positive integer n (1 ≤ n ≤ 2·10^9) — the length of Pasha's stick.


-----Output-----

The output should contain a single integer — the number of ways to split Pasha's stick into four parts of positive integer length so that it's possible to make a rectangle by connecting the ends of these parts, but is impossible to form a square. 


-----Examples-----
Input
6

Output
1

Input
20

Output
4



-----Note-----

There is only one way to divide the stick in the first sample {1, 1, 2, 2}.

Four ways to divide the stick in the second sample are {1, 1, 9, 9}, {2, 2, 8, 8}, {3, 3, 7, 7} and {4, 4, 6, 6}. Note that {5, 5, 5, 5} doesn't work.","def count_ways(n):
    ways = 0
    for a in range(1, n // 2 + 1):
        for b in range(a, (n - a) // 2 + 1):
            if a != b and 2 * (a + b) == n:
                ways += 1
    return ways

n = int(input())
print(count_ways(n))
",2,False,False,False,True,True,True,False,True,False,True,True,True,False,199_llama3-70b,0.6434567778509719,0.14620906637956121,0.5416666666666666
207,apps,llama3-70b,qwen2.5-7b-instruct,"A frog is initially at position $0$ on the number line. The frog has two positive integers $a$ and $b$. From a position $k$, it can either jump to position $k+a$ or $k-b$.

Let $f(x)$ be the number of distinct integers the frog can reach if it never jumps on an integer outside the interval $[0, x]$. The frog doesn't need to visit all these integers in one trip, that is, an integer is counted if the frog can somehow reach it if it starts from $0$.

Given an integer $m$, find $\sum_{i=0}^{m} f(i)$. That is, find the sum of all $f(i)$ for $i$ from $0$ to $m$.


-----Input-----

The first line contains three integers $m, a, b$ ($1 \leq m \leq 10^9, 1 \leq a,b \leq 10^5$).


-----Output-----

Print a single integer, the desired sum.


-----Examples-----
Input
7 5 3

Output
19

Input
1000000000 1 2019

Output
500000001500000001

Input
100 100000 1

Output
101

Input
6 4 5

Output
10



-----Note-----

In the first example, we must find $f(0)+f(1)+\ldots+f(7)$. We have $f(0) = 1, f(1) = 1, f(2) = 1, f(3) = 1, f(4) = 1, f(5) = 3, f(6) = 3, f(7) = 8$. The sum of these values is $19$.

In the second example, we have $f(i) = i+1$, so we want to find $\sum_{i=0}^{10^9} i+1$.

In the third example, the frog can't make any jumps in any case.","m, a, b = map(int, input().split())
dp = [0]*(m+1)
dp[0] = 1
for i in range(m+1):
    if i+a <= m:
        dp[i+a] += dp[i]
    if i-b >= 0:
        dp[i] += dp[i-b]
print(sum(dp))
",2,False,False,False,False,False,False,True,False,False,True,False,False,True,207_llama3-70b,0.5811835376272438,0.07923404231990178,0.625
209,apps,llama3-70b,qwen2.5-7b-instruct,"Pashmak has fallen in love with an attractive girl called Parmida since one year ago...

Today, Pashmak set up a meeting with his partner in a romantic garden. Unfortunately, Pashmak has forgotten where the garden is. But he remembers that the garden looks like a square with sides parallel to the coordinate axes. He also remembers that there is exactly one tree on each vertex of the square. Now, Pashmak knows the position of only two of the trees. Help him to find the position of two remaining ones.


-----Input-----

The first line contains four space-separated x_1, y_1, x_2, y_2 ( - 100 ≤ x_1, y_1, x_2, y_2 ≤ 100) integers, where x_1 and y_1 are coordinates of the first tree and x_2 and y_2 are coordinates of the second tree. It's guaranteed that the given points are distinct.


-----Output-----

If there is no solution to the problem, print -1. Otherwise print four space-separated integers x_3, y_3, x_4, y_4 that correspond to the coordinates of the two other trees. If there are several solutions you can output any of them. 

Note that x_3, y_3, x_4, y_4 must be in the range ( - 1000 ≤ x_3, y_3, x_4, y_4 ≤ 1000).


-----Examples-----
Input
0 0 0 1

Output
1 0 1 1

Input
0 0 1 1

Output
0 1 1 0

Input
0 0 1 2

Output
-1","x1, y1, x2, y2 = map(int, input().split())

if x1 == x2:
    x3, x4 = x1 + abs(y1 - y2), x1 - abs(y1 - y2)
    y3, y4 = y1, y2
else:
    y3, y4 = y1 + abs(x1 - x2), y1 - abs(x1 - x2)
    x3, x4 = x1, x2

if -1000 <= x3 <= 1000 and -1000 <= x4 <= 1000 and -1000 <= y3 <= 1000 and -1000 <= y4 <= 1000:
    print(x3, y3, x4, y4)
else:
    print(-1)
",2,False,False,False,True,False,True,False,True,False,False,False,True,False,209_llama3-70b,0.6568180703679871,0.16011500355143357,0.5416666666666666
211,apps,llama3-70b,qwen2.5-7b-instruct,"One spring day on his way to university Lesha found an array A. Lesha likes to split arrays into several parts. This time Lesha decided to split the array A into several, possibly one, new arrays so that the sum of elements in each of the new arrays is not zero. One more condition is that if we place the new arrays one after another they will form the old array A.

Lesha is tired now so he asked you to split the array. Help Lesha!


-----Input-----

The first line contains single integer n (1 ≤ n ≤ 100) — the number of elements in the array A.

The next line contains n integers a_1, a_2, ..., a_{n} ( - 10^3 ≤ a_{i} ≤ 10^3) — the elements of the array A.


-----Output-----

If it is not possible to split the array A and satisfy all the constraints, print single line containing ""NO"" (without quotes).

Otherwise in the first line print ""YES"" (without quotes). In the next line print single integer k — the number of new arrays. In each of the next k lines print two integers l_{i} and r_{i} which denote the subarray A[l_{i}... r_{i}] of the initial array A being the i-th new array. Integers l_{i}, r_{i} should satisfy the following conditions:  l_1 = 1  r_{k} = n  r_{i} + 1 = l_{i} + 1 for each 1 ≤ i < k. 

If there are multiple answers, print any of them.


-----Examples-----
Input
3
1 2 -3

Output
YES
2
1 2
3 3

Input
8
9 -12 3 4 -4 -10 7 3

Output
YES
2
1 2
3 8

Input
1
0

Output
NO

Input
4
1 2 3 -5

Output
YES
4
1 1
2 2
3 3
4 4","n = int(input())
a = list(map(int, input().split()))
prefix_sum = [0] * (n + 1)
for i in range(n):
    prefix_sum[i + 1] = prefix_sum[i] + a[i]

if prefix_sum[n] == 0:
    print(""NO"")
else:
    print(""YES"")
    k = 1
    l = 1
    for r in range(1, n + 1):
        if prefix_sum[r] != 0 and prefix_sum[r] != prefix_sum[n]:
            print(k, l, r)
            k += 1
            l = r
    print(k, l, n)
",2,False,False,False,True,True,True,True,False,True,False,False,False,True,211_llama3-70b,0.5857055335578474,0.08375838445913218,0.625
213,apps,llama3-70b,qwen2.5-7b-instruct,"You are given a non-negative integer n, its decimal representation consists of at most 100 digits and doesn't contain leading zeroes.

Your task is to determine if it is possible in this case to remove some of the digits (possibly not remove any digit at all) so that the result contains at least one digit, forms a non-negative integer, doesn't have leading zeroes and is divisible by 8. After the removing, it is forbidden to rearrange the digits.

If a solution exists, you should print it.


-----Input-----

The single line of the input contains a non-negative integer n. The representation of number n doesn't contain any leading zeroes and its length doesn't exceed 100 digits. 


-----Output-----

Print ""NO"" (without quotes), if there is no such way to remove some digits from number n. 

Otherwise, print ""YES"" in the first line and the resulting number after removing digits from number n in the second line. The printed number must be divisible by 8.

If there are multiple possible answers, you may print any of them.


-----Examples-----
Input
3454

Output
YES
344

Input
10

Output
YES
0

Input
111111

Output
NO","n = int(input())
digits = [int(d) for d in str(n)]
for i in range(len(digits)):
    new_n = int(''.join(map(str, digits[:i] + digits[i+1:])))
    if new_n % 8 == 0 and str(new_n)[0] != '0':
        print(""YES"")
        print(new_n)
        exit()
print(""NO"")
",2,False,False,False,False,True,True,True,True,True,True,True,True,True,213_llama3-70b,0.8229039617038127,0.36037537446466134,0.625
236,apps,llama3-70b,qwen2.5-7b-instruct,"After passing a test, Vasya got himself a box of $n$ candies. He decided to eat an equal amount of candies each morning until there are no more candies. However, Petya also noticed the box and decided to get some candies for himself.

This means the process of eating candies is the following: in the beginning Vasya chooses a single integer $k$, same for all days. After that, in the morning he eats $k$ candies from the box (if there are less than $k$ candies in the box, he eats them all), then in the evening Petya eats $10\%$ of the candies remaining in the box. If there are still candies left in the box, the process repeats — next day Vasya eats $k$ candies again, and Petya — $10\%$ of the candies left in a box, and so on.

If the amount of candies in the box is not divisible by $10$, Petya rounds the amount he takes from the box down. For example, if there were $97$ candies in the box, Petya would eat only $9$ of them. In particular, if there are less than $10$ candies in a box, Petya won't eat any at all.

Your task is to find out the minimal amount of $k$ that can be chosen by Vasya so that he would eat at least half of the $n$ candies he initially got. Note that the number $k$ must be integer.


-----Input-----

The first line contains a single integer $n$ ($1 \leq n \leq 10^{18}$) — the initial amount of candies in the box.


-----Output-----

Output a single integer — the minimal amount of $k$ that would allow Vasya to eat at least half of candies he got.


-----Example-----
Input
68

Output
3



-----Note-----

In the sample, the amount of candies, with $k=3$, would change in the following way (Vasya eats first):

$68 \to 65 \to 59 \to 56 \to 51 \to 48 \to 44 \to 41 \\ \to 37 \to 34 \to 31 \to 28 \to 26 \to 23 \to 21 \to 18 \to 17 \to 14 \\ \to 13 \to 10 \to 9 \to 6 \to 6 \to 3 \to 3 \to 0$.

In total, Vasya would eat $39$ candies, while Petya — $29$.","n = int(input())
k = 1
while True:
    candies = n
    vasya_eaten = 0
    while candies > 0:
        vasya_eaten += min(k, candies)
        candies -= min(k, candies)
        petya_eaten = candies // 10
        candies -= petya_eaten
    if vasya_eaten * 2 >= n:
        print(k)
        break
    k += 1
",2,False,True,True,True,True,True,True,True,True,True,True,False,False,236_llama3-70b,0.5442130571415579,0.04427062132914813,0.5416666666666666
238,apps,llama3-70b,qwen2.5-7b-instruct,"n hobbits are planning to spend the night at Frodo's house. Frodo has n beds standing in a row and m pillows (n ≤ m). Each hobbit needs a bed and at least one pillow to sleep, however, everyone wants as many pillows as possible. Of course, it's not always possible to share pillows equally, but any hobbit gets hurt if he has at least two pillows less than some of his neighbors have. 

Frodo will sleep on the k-th bed in the row. What is the maximum number of pillows he can have so that every hobbit has at least one pillow, every pillow is given to some hobbit and no one is hurt?


-----Input-----

The only line contain three integers n, m and k (1 ≤ n ≤ m ≤ 10^9, 1 ≤ k ≤ n) — the number of hobbits, the number of pillows and the number of Frodo's bed.


-----Output-----

Print single integer — the maximum number of pillows Frodo can have so that no one is hurt.


-----Examples-----
Input
4 6 2

Output
2

Input
3 10 3

Output
4

Input
3 6 1

Output
3



-----Note-----

In the first example Frodo can have at most two pillows. In this case, he can give two pillows to the hobbit on the first bed, and one pillow to each of the hobbits on the third and the fourth beds.

In the second example Frodo can take at most four pillows, giving three pillows to each of the others.

In the third example Frodo can take three pillows, giving two pillows to the hobbit in the middle and one pillow to the hobbit on the third bed.","n, m, k = map(int, input().split())
if k == 1:
    print(min(m // n, m - (n - 1)))
else:
    print(min(m // n + 1, m - (n - k)))
",2,False,False,False,True,True,True,True,False,False,True,True,False,True,238_llama3-70b,0.875706603646191,0.44092267284673214,0.7916666666666666
261,apps,llama3-70b,qwen2.5-7b-instruct,"One day, after a difficult lecture a diligent student Sasha saw a graffitied desk in the classroom. She came closer and read: ""Find such positive integer n, that among numbers n + 1, n + 2, ..., 2·n there are exactly m numbers which binary representation contains exactly k digits one"".

The girl got interested in the task and she asked you to help her solve it. Sasha knows that you are afraid of large numbers, so she guaranteed that there is an answer that doesn't exceed 10^18.


-----Input-----

The first line contains two space-separated integers, m and k (0 ≤ m ≤ 10^18; 1 ≤ k ≤ 64).


-----Output-----

Print the required number n (1 ≤ n ≤ 10^18). If there are multiple answers, print any of them.


-----Examples-----
Input
1 1

Output
1

Input
3 2

Output
5","m, k = map(int, input().split())

def count_ones(n):
    count = 0
    while n:
        count += n & 1
        n >>= 1
    return count

def find_n(m, k):
    n = 1
    while True:
        count = sum(1 for i in range(n + 1, 2 * n + 1) if count_ones(i) == k)
        if count == m:
            return n
        n += 1

print(find_n(m, k))
",2,False,True,False,True,True,True,True,True,True,True,True,False,True,261_llama3-70b,0.8997713337371126,0.49854832833508284,0.75
268,apps,llama3-70b,qwen2.5-7b-instruct,"You are given two integers $l$ and $r$ ($l \le r$). Your task is to calculate the sum of numbers from $l$ to $r$ (including $l$ and $r$) such that each number contains at most $k$ different digits, and print this sum modulo $998244353$.

For example, if $k = 1$ then you have to calculate all numbers from $l$ to $r$ such that each number is formed using only one digit. For $l = 10, r = 50$ the answer is $11 + 22 + 33 + 44 = 110$.


-----Input-----

The only line of the input contains three integers $l$, $r$ and $k$ ($1 \le l \le r < 10^{18}, 1 \le k \le 10$) — the borders of the segment and the maximum number of different digits.


-----Output-----

Print one integer — the sum of numbers from $l$ to $r$ such that each number contains at most $k$ different digits, modulo $998244353$.


-----Examples-----
Input
10 50 2

Output
1230

Input
1 2345 10

Output
2750685

Input
101 154 2

Output
2189



-----Note-----

For the first example the answer is just the sum of numbers from $l$ to $r$ which equals to $\frac{50 \cdot 51}{2} - \frac{9 \cdot 10}{2} = 1230$. This example also explained in the problem statement but for $k = 1$.

For the second example the answer is just the sum of numbers from $l$ to $r$ which equals to $\frac{2345 \cdot 2346}{2} = 2750685$.

For the third example the answer is $101 + 110 + 111 + 112 + 113 + 114 + 115 + 116 + 117 + 118 + 119 + 121 + 122 + 131 + 133 + 141 + 144 + 151 = 2189$.","MOD = 998244353
def count_numbers(l, r, k):
    def count(n, k, dp):
        if k == 0:
            return 0
        if (n, k) in dp:
            return dp[(n, k)]
        if n < 10**k:
            dp[(n, k)] = n
        else:
            dp[(n, k)] = 9
            for i in range(1, k):
                dp[(n, k)] += 9 * 10**(i-1) * (10**(k-i) - 10**(i-1))
            dp[(n, k)] += (10**(k-1) - 10**(k-2)) * (n // 10**(k-1) - 1)
            dp[(n, k)] %= MOD
        return dp[(n, k)]

    dp = {}
    return (count(r, k, dp) - count(l-1, k, dp)) % MOD

l, r, k = map(int, input().split())
print(count_numbers(l, r, k))
",2,False,False,False,True,True,True,True,False,True,True,False,False,False,268_llama3-70b,0.8635012734525994,0.4167535590858058,0.625
295,apps,llama3-70b,qwen2.5-7b-instruct,"Everybody in Russia uses Gregorian calendar. In this calendar there are 31 days in January, 28 or 29 days in February (depending on whether the year is leap or not), 31 days in March, 30 days in April, 31 days in May, 30 in June, 31 in July, 31 in August, 30 in September, 31 in October, 30 in November, 31 in December.

A year is leap in one of two cases: either its number is divisible by 4, but not divisible by 100, or is divisible by 400. For example, the following years are leap: 2000, 2004, but years 1900 and 2018 are not leap.

In this problem you are given n (1 ≤ n ≤ 24) integers a_1, a_2, ..., a_{n}, and you have to check if these integers could be durations in days of n consecutive months, according to Gregorian calendar. Note that these months could belong to several consecutive years. In other words, check if there is a month in some year, such that its duration is a_1 days, duration of the next month is a_2 days, and so on.


-----Input-----

The first line contains single integer n (1 ≤ n ≤ 24) — the number of integers.

The second line contains n integers a_1, a_2, ..., a_{n} (28 ≤ a_{i} ≤ 31) — the numbers you are to check.


-----Output-----

If there are several consecutive months that fit the sequence, print ""YES"" (without quotes). Otherwise, print ""NO"" (without quotes).

You can print each letter in arbitrary case (small or large).


-----Examples-----
Input
4
31 31 30 31

Output
Yes


Input
2
30 30

Output
No


Input
5
29 31 30 31 30

Output
Yes


Input
3
31 28 30

Output
No


Input
3
31 31 28

Output
Yes




-----Note-----

In the first example the integers can denote months July, August, September and October.

In the second example the answer is no, because there are no two consecutive months each having 30 days.

In the third example the months are: February (leap year) — March — April – May — June.

In the fourth example the number of days in the second month is 28, so this is February. March follows February and has 31 days, but not 30, so the answer is NO.

In the fifth example the months are: December — January — February (non-leap year).","n = int(input())
a = list(map(int, input().split()))
b = [31,28,31,30,31,30,31,31,30,31,30,31]

f = False
for i in range(12):
    if all(a[j] == b[(i+j)%12] for j in range(n)):
        f = True
    if i == 11 and not f:
        break
    if all(a[j] == b[(i+j)%12+12] for j in range(n)):
        f = True
    if i == 11 and not f:
        break

if f:
    print(""YES"")
else:
    print(""NO"")
",2,False,False,False,True,True,True,True,False,False,True,False,True,True,295_llama3-70b,0.8578618301443605,0.41829436179200846,0.75
298,apps,llama3-70b,qwen2.5-7b-instruct,"Vasya has got three integers $n$, $m$ and $k$. He'd like to find three integer points $(x_1, y_1)$, $(x_2, y_2)$, $(x_3, y_3)$, such that $0 \le x_1, x_2, x_3 \le n$, $0 \le y_1, y_2, y_3 \le m$ and the area of the triangle formed by these points is equal to $\frac{nm}{k}$.

Help Vasya! Find such points (if it's possible). If there are multiple solutions, print any of them.


-----Input-----

The single line contains three integers $n$, $m$, $k$ ($1\le n, m \le 10^9$, $2 \le k \le 10^9$).


-----Output-----

If there are no such points, print ""NO"".

Otherwise print ""YES"" in the first line. The next three lines should contain integers $x_i, y_i$ — coordinates of the points, one point per line. If there are multiple solutions, print any of them.

You can print each letter in any case (upper or lower).


-----Examples-----
Input
4 3 3

Output
YES
1 0
2 3
4 1

Input
4 4 7

Output
NO



-----Note-----

In the first example area of the triangle should be equal to $\frac{nm}{k} = 4$. The triangle mentioned in the output is pictured below:  [Image] 

In the second example there is no triangle with area $\frac{nm}{k} = \frac{16}{7}$.","import math

n, m, k = map(int, input().split())

if (n*m) % k:
    print(""NO"")
    exit()

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def euk(a, b):
    if b == 0:
        return 1, 0
    else:
        x, y = euk(b, a % b)
        return y, x - (a // b) * y

def bezout(a, b):
    x, y = euk(a, b)
    return x, y, x*a + y*b

n1, m1, g = bezout(n, m)
if abs(n1*m) >= g:
    print(""YES"")
    print(0, 0)
    print(0, n1*m//g)
    print(m1*m//g, 0)
else:
    print(""NO"")",2,False,False,False,False,True,True,True,False,True,True,False,True,False,298_llama3-70b,0.6025694196293297,0.10350350436366977,0.5833333333333334
299,apps,llama3-70b,qwen2.5-7b-instruct,"It's one more school day now. Sasha doesn't like classes and is always bored at them. So, each day he invents some game and plays in it alone or with friends.

Today he invented one simple game to play with Lena, with whom he shares a desk. The rules are simple. Sasha draws n sticks in a row. After that the players take turns crossing out exactly k sticks from left or right in each turn. Sasha moves first, because he is the inventor of the game. If there are less than k sticks on the paper before some turn, the game ends. Sasha wins if he makes strictly more moves than Lena. Sasha wants to know the result of the game before playing, you are to help him.


-----Input-----

The first line contains two integers n and k (1 ≤ n, k ≤ 10^18, k ≤ n) — the number of sticks drawn by Sasha and the number k — the number of sticks to be crossed out on each turn.


-----Output-----

If Sasha wins, print ""YES"" (without quotes), otherwise print ""NO"" (without quotes).

You can print each letter in arbitrary case (upper of lower).


-----Examples-----
Input
1 1

Output
YES

Input
10 4

Output
NO



-----Note-----

In the first example Sasha crosses out 1 stick, and then there are no sticks. So Lena can't make a move, and Sasha wins.

In the second example Sasha crosses out 4 sticks, then Lena crosses out 4 sticks, and after that there are only 2 sticks left. Sasha can't make a move. The players make equal number of moves, so Sasha doesn't win.","n, k = map(int, input().split())
if (n - 1) // k > n // k:
    print(""YES"")
else:
    print(""NO"")
",2,False,False,False,True,True,False,True,False,True,True,True,True,True,299_llama3-70b,0.6594667087708458,0.16398825462100827,0.5833333333333334
5,apps,gpt-4o,qwen2.5-7b-instruct,"Jamie loves sleeping. One day, he decides that he needs to wake up at exactly hh: mm. However, he hates waking up, so he wants to make waking up less painful by setting the alarm at a lucky time. He will then press the snooze button every x minutes until hh: mm is reached, and only then he will wake up. He wants to know what is the smallest number of times he needs to press the snooze button.

A time is considered lucky if it contains a digit '7'. For example, 13: 07 and 17: 27 are lucky, while 00: 48 and 21: 34 are not lucky.

Note that it is not necessary that the time set for the alarm and the wake-up time are on the same day. It is guaranteed that there is a lucky time Jamie can set so that he can wake at hh: mm.

Formally, find the smallest possible non-negative integer y such that the time representation of the time x·y minutes before hh: mm contains the digit '7'.

Jamie uses 24-hours clock, so after 23: 59 comes 00: 00.


-----Input-----

The first line contains a single integer x (1 ≤ x ≤ 60).

The second line contains two two-digit integers, hh and mm (00 ≤ hh ≤ 23, 00 ≤ mm ≤ 59).


-----Output-----

Print the minimum number of times he needs to press the button.


-----Examples-----
Input
3
11 23

Output
2

Input
5
01 07

Output
0



-----Note-----

In the first sample, Jamie needs to wake up at 11:23. So, he can set his alarm at 11:17. He would press the snooze button when the alarm rings at 11:17 and at 11:20.

In the second sample, Jamie can set his alarm at exactly at 01:07 which is lucky.","def contains_seven(h, m):
    """"""Check if the time h:m contains a '7'.""""""
    return '7' in str(h) or '7' in str(m)

def main():
    # Read inputs
    x = int(input())
    hh, mm = map(int, input().split())

    # Initialize the counter for the number of snooze presses
    snooze_count = 0

    # Check the time and keep pressing snooze until a lucky time is found
    while not contains_seven(hh, mm):
        snooze_count += 1
        mm -= x
        if mm < 0:
            mm += 60
            hh -= 1
            if hh < 0:
                hh += 24

    # Print the result
    print(snooze_count)

# Run the main function
if __name__ == ""__main__"":
    main()
",3,True,True,True,True,True,True,True,True,True,True,True,True,True,5_gpt-4o,0.826462452946936,0.3705038644939344,0.7083333333333334
9,apps,gpt-4o,qwen2.5-7b-instruct,"Tokitsukaze is playing a game derivated from Japanese mahjong. In this game, she has three tiles in her hand. Each tile she owns is a suited tile, which means it has a suit (manzu, pinzu or souzu) and a number (a digit ranged from $1$ to $9$). In this problem, we use one digit and one lowercase letter, which is the first character of the suit, to represent a suited tile. All possible suited tiles are represented as 1m, 2m, $\ldots$, 9m, 1p, 2p, $\ldots$, 9p, 1s, 2s, $\ldots$, 9s.

In order to win the game, she must have at least one mentsu (described below) in her hand, so sometimes she should draw extra suited tiles. After drawing a tile, the number of her tiles increases by one. She can draw any tiles she wants, including those already in her hand.

Do you know the minimum number of extra suited tiles she needs to draw so that she can win?

Here are some useful definitions in this game:  A mentsu, also known as meld, is formed by a koutsu or a shuntsu;  A koutsu, also known as triplet, is made of three identical tiles, such as [1m, 1m, 1m], however, [1m, 1p, 1s] or [1m, 4m, 7m] is NOT a koutsu;  A shuntsu, also known as sequence, is made of three sequential numbered tiles in the same suit, such as [1m, 2m, 3m] and [5s, 7s, 6s], however, [9m, 1m, 2m] or [1m, 2p, 3s] is NOT a shuntsu. 

Some examples:   [2m, 3p, 2s, 4m, 1s, 2s, 4s] — it contains no koutsu or shuntsu, so it includes no mentsu;  [4s, 3m, 3p, 4s, 5p, 4s, 5p] — it contains a koutsu, [4s, 4s, 4s], but no shuntsu, so it includes a mentsu;  [5p, 5s, 9m, 4p, 1s, 7p, 7m, 6p] — it contains no koutsu but a shuntsu, [5p, 4p, 6p] or [5p, 7p, 6p], so it includes a mentsu. 

Note that the order of tiles is unnecessary and you can assume the number of each type of suited tiles she can draw is infinite.


-----Input-----

The only line contains three strings — the tiles in Tokitsukaze's hand. For each string, the first character is a digit ranged from $1$ to $9$ and the second character is m, p or s.


-----Output-----

Print a single integer — the minimum number of extra suited tiles she needs to draw.


-----Examples-----
Input
1s 2s 3s

Output
0

Input
9m 9m 9m

Output
0

Input
3p 9m 2p

Output
1



-----Note-----

In the first example, Tokitsukaze already has a shuntsu.

In the second example, Tokitsukaze already has a koutsu.

In the third example, Tokitsukaze can get a shuntsu by drawing one suited tile — 1p or 4p. The resulting tiles will be [3p, 9m, 2p, 1p] or [3p, 9m, 2p, 4p].","def min_tiles_to_win(tiles):
    # Parse the input tiles
    t1, t2, t3 = tiles.split()
    
    # Utility function to check if three tiles form a koutsu or shuntsu
    def is_koutsu_or_shuntsu(t1, t2, t3):
        if t1 == t2 == t3:
            return True
        n1, s1 = int(t1[0]), t1[1]
        n2, s2 = int(t2[0]), t2[1]
        n3, s3 = int(t3[0]), t3[1]
        if s1 == s2 == s3 and sorted([n1, n2, n3]) in ([n1, n2, n3] for n1 in range(1, 8)):
            return True
        return False
    
    # Check if already a koutsu or shuntsu
    if is_koutsu_or_shuntsu(t1, t2, t3):
        return 0
    
    # Group tiles by suit
    suits = {'m': [], 'p': [], 's': []}
    for tile in [t1, t2, t3]:
        suits[tile[1]].append(int(tile[0]))
    
    # Check how many tiles are needed to form koutsu or shuntsu
    def tiles_needed_to_complete_group(tiles):
        tiles.sort()
        if len(tiles) == 1:
            return 2
        if len(tiles) == 2:
            if tiles[0] == tiles[1]:
                return 1
            if tiles[1] - tiles[0] <= 2:
                return 1
            return 2
        return 2

    min_additional_tiles = 2
    for suit, numbers in suits.items():
        min_additional_tiles = min(min_additional_tiles, tiles_needed_to_complete_group(numbers))
    
    return min_additional_tiles

# Read input
import sys
input = sys.stdin.read
tiles = input().strip()
print(min_tiles_to_win(tiles))
",3,False,True,True,True,True,True,True,True,True,True,False,False,False,9_gpt-4o,0.661108343056226,0.16618406764318508,0.5833333333333334
12,apps,gpt-4o,qwen2.5-7b-instruct,"Little Joty has got a task to do. She has a line of n tiles indexed from 1 to n. She has to paint them in a strange pattern.

An unpainted tile should be painted Red if it's index is divisible by a and an unpainted tile should be painted Blue if it's index is divisible by b. So the tile with the number divisible by a and b can be either painted Red or Blue.

After her painting is done, she will get p chocolates for each tile that is painted Red and q chocolates for each tile that is painted Blue.

Note that she can paint tiles in any order she wants.

Given the required information, find the maximum number of chocolates Joty can get.


-----Input-----

The only line contains five integers n, a, b, p and q (1 ≤ n, a, b, p, q ≤ 10^9).


-----Output-----

Print the only integer s — the maximum number of chocolates Joty can get.

Note that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.


-----Examples-----
Input
5 2 3 12 15

Output
39

Input
20 2 3 3 5

Output
51","n, a, b, p, q = map(int, input().split())

def lcm(x, y):
    from math import gcd
    return x * y // gcd(x, y)

red_tiles = n // a
blue_tiles = n // b
both_tiles = n // lcm(a, b)

# Since the tiles that can be painted both Red or Blue can only be counted once, we need to subtract them once
max_chocolates = red_tiles * p + blue_tiles * q - both_tiles * min(p, q)

print(max_chocolates)
",3,True,False,False,True,True,True,True,False,True,True,True,True,False,12_gpt-4o,0.7155768281100079,0.2171204076163509,0.7083333333333334
13,apps,gpt-4o,qwen2.5-7b-instruct,"Vova has won $n$ trophies in different competitions. Each trophy is either golden or silver. The trophies are arranged in a row.

The beauty of the arrangement is the length of the longest subsegment consisting of golden trophies. Vova wants to swap two trophies (not necessarily adjacent ones) to make the arrangement as beautiful as possible — that means, to maximize the length of the longest such subsegment.

Help Vova! Tell him the maximum possible beauty of the arrangement if he is allowed to do at most one swap.


-----Input-----

The first line contains one integer $n$ ($2 \le n \le 10^5$) — the number of trophies.

The second line contains $n$ characters, each of them is either G or S. If the $i$-th character is G, then the $i$-th trophy is a golden one, otherwise it's a silver trophy. 


-----Output-----

Print the maximum possible length of a subsegment of golden trophies, if Vova is allowed to do at most one swap.


-----Examples-----
Input
10
GGGSGGGSGG

Output
7

Input
4
GGGG

Output
4

Input
3
SSS

Output
0



-----Note-----

In the first example Vova has to swap trophies with indices $4$ and $10$. Thus he will obtain the sequence ""GGGGGGGSGS"", the length of the longest subsegment of golden trophies is $7$. 

In the second example Vova can make no swaps at all. The length of the longest subsegment of golden trophies in the sequence is $4$. 

In the third example Vova cannot do anything to make the length of the longest subsegment of golden trophies in the sequence greater than $0$.","def max_beauty_after_swap(n, trophies):
    segments = []
    i = 0
    
    while i < n:
        if trophies[i] == 'G':
            start = i
            while i < n and trophies[i] == 'G':
                i += 1
            segments.append((start, i - 1))
        else:
            i += 1
    
    if not segments:
        return 0
    
    max_length = max(end - start + 1 for start, end in segments)
    
    if len(segments) == 1:
        return max_length
    
    for i in range(1, len(segments)):
        prev_start, prev_end = segments[i - 1]
        curr_start, curr_end = segments[i]
        if curr_start - prev_end == 2:
            max_length = max(max_length, (curr_end - curr_start + 1) + (prev_end - prev_start + 1) + 1)
    
    return min(max_length + 1, n)

# Read input
import sys
input = sys.stdin.read
data = input().split()
n = int(data[0])
trophies = data[1]

# Print output
print(max_beauty_after_swap(n, trophies))
",3,False,True,False,True,True,True,True,True,True,True,False,True,False,13_gpt-4o,0.5777493155989952,0.07779992903777712,0.5833333333333334
15,apps,gpt-4o,qwen2.5-7b-instruct,"Let's suppose you have an array a, a stack s (initially empty) and an array b (also initially empty).

You may perform the following operations until both a and s are empty:

  Take the first element of a, push it into s and remove it from a (if a is not empty);  Take the top element from s, append it to the end of array b and remove it from s (if s is not empty). 

You can perform these operations in arbitrary order.

If there exists a way to perform the operations such that array b is sorted in non-descending order in the end, then array a is called stack-sortable.

For example, [3, 1, 2] is stack-sortable, because b will be sorted if we perform the following operations:

  Remove 3 from a and push it into s;  Remove 1 from a and push it into s;  Remove 1 from s and append it to the end of b;  Remove 2 from a and push it into s;  Remove 2 from s and append it to the end of b;  Remove 3 from s and append it to the end of b. 

After all these operations b = [1, 2, 3], so [3, 1, 2] is stack-sortable. [2, 3, 1] is not stack-sortable.

You are given k first elements of some permutation p of size n (recall that a permutation of size n is an array of size n where each integer from 1 to n occurs exactly once). You have to restore the remaining n - k elements of this permutation so it is stack-sortable. If there are multiple answers, choose the answer such that p is lexicographically maximal (an array q is lexicographically greater than an array p iff there exists some integer k such that for every i < k q_{i} = p_{i}, and q_{k} > p_{k}). You may not swap or change any of first k elements of the permutation.

Print the lexicographically maximal permutation p you can obtain.

If there exists no answer then output -1.


-----Input-----

The first line contains two integers n and k (2 ≤ n ≤ 200000, 1 ≤ k < n) — the size of a desired permutation, and the number of elements you are given, respectively.

The second line contains k integers p_1, p_2, ..., p_{k} (1 ≤ p_{i} ≤ n) — the first k elements of p. These integers are pairwise distinct.


-----Output-----

If it is possible to restore a stack-sortable permutation p of size n such that the first k elements of p are equal to elements given in the input, print lexicographically maximal such permutation.

Otherwise print -1.


-----Examples-----
Input
5 3
3 2 1

Output
3 2 1 5 4 
Input
5 3
2 3 1

Output
-1

Input
5 1
3

Output
3 2 1 5 4 
Input
5 2
3 4

Output
-1","def is_stack_sortable_starting_with_k(n, k, p):
    # Check if the given starting array is already in stack-sortable order
    stack = []
    max_seen = 0
    for num in p:
        if num < max_seen:
            return -1
        while stack and stack[-1] < num:
            max_seen = stack.pop()
        stack.append(num)

    remaining_numbers = set(range(1, n + 1)) - set(p)
    remaining_numbers = sorted(remaining_numbers, reverse=True)

    # Try to construct the remaining part of the permutation
    result = p[:]
    for num in remaining_numbers:
        while stack and stack[-1] < num:
            result.append(stack.pop())
        stack.append(num)
    
    result.extend(reversed(stack))
    
    # Verify if the constructed permutation is stack-sortable
    stack = []
    max_seen = 0
    for num in result:
        if num < max_seen:
            return -1
        while stack and stack[-1] < num:
            max_seen = stack.pop()
        stack.append(num)
    
    return result

# Read input
import sys
input = sys.stdin.read
data = input().split()

n = int(data[0])
k = int(data[1])
p = list(map(int, data[2:]))

# Solve the problem
result = is_stack_sortable_starting_with_k(n, k, p)
if result == -1:
    print(result)
else:
    print("" "".join(map(str, result)))
",3,False,False,True,True,True,True,True,False,False,True,True,True,True,15_gpt-4o,0.7539812797050169,0.26697790044032516,0.7083333333333334
23,apps,gpt-4o,qwen2.5-7b-instruct,"Let's call a string ""s-palindrome"" if it is symmetric about the middle of the string. For example, the string ""oHo"" is ""s-palindrome"", but the string ""aa"" is not. The string ""aa"" is not ""s-palindrome"", because the second half of it is not a mirror reflection of the first half.

 [Image] English alphabet 

You are given a string s. Check if the string is ""s-palindrome"".


-----Input-----

The only line contains the string s (1 ≤ |s| ≤ 1000) which consists of only English letters.


-----Output-----

Print ""TAK"" if the string s is ""s-palindrome"" and ""NIE"" otherwise.


-----Examples-----
Input
oXoxoXo

Output
TAK

Input
bod

Output
TAK

Input
ER

Output
NIE","def is_s_palindrome(s):
    n = len(s)
    for i in range(n // 2):
        if s[i] != s[n - 1 - i]:
            return False
    return True

# Read input
s = input().strip()

# Check if the string is ""s-palindrome""
if is_s_palindrome(s):
    print(""TAK"")
else:
    print(""NIE"")
",3,False,False,True,True,True,True,True,False,True,True,True,True,True,23_gpt-4o,0.7248138853023477,0.2394038844353333,0.625
28,apps,gpt-4o,qwen2.5-7b-instruct,"You are given a string s consisting of n lowercase Latin letters. You have to type this string using your keyboard.

Initially, you have an empty string. Until you type the whole string, you may perform the following operation:  add a character to the end of the string. 

Besides, at most once you may perform one additional operation: copy the string and append it to itself.

For example, if you have to type string abcabca, you can type it in 7 operations if you type all the characters one by one. However, you can type it in 5 operations if you type the string abc first and then copy it and type the last character.

If you have to type string aaaaaaaaa, the best option is to type 4 characters one by one, then copy the string, and then type the remaining character.

Print the minimum number of operations you need to type the given string.


-----Input-----

The first line of the input containing only one integer number n (1 ≤ n ≤ 100) — the length of the string you have to type. The second line containing the string s consisting of n lowercase Latin letters.


-----Output-----

Print one integer number — the minimum number of operations you need to type the given string.


-----Examples-----
Input
7
abcabca

Output
5

Input
8
abcdefgh

Output
8



-----Note-----

The first test described in the problem statement.

In the second test you can only type all the characters one by one.","n = int(input())
s = input()

# Function to find the minimum number of operations to type the string
def min_operations_to_type(n, s):
    # Initialize the operations count to n (typing each character one by one)
    min_operations = n
    
    # Try to find the optimal place to perform the copy operation
    for i in range(1, n):
        # Find the length of the substring to copy
        if s[:i] == s[i:2*i]:
            # Calculate the number of operations
            operations = i + 1 + (n - 2*i)
            min_operations = min(min_operations, operations)
    
    return min_operations

# Get the result
result = min_operations_to_type(n, s)

# Print the result
print(result)
",3,True,False,False,True,True,True,True,True,False,False,False,True,True,28_gpt-4o,0.548959125547294,0.04899058022009064,0.5
34,apps,gpt-4o,qwen2.5-7b-instruct,"You are given two arithmetic progressions: a_1k + b_1 and a_2l + b_2. Find the number of integers x such that L ≤ x ≤ R and x = a_1k' + b_1 = a_2l' + b_2, for some integers k', l' ≥ 0.


-----Input-----

The only line contains six integers a_1, b_1, a_2, b_2, L, R (0 < a_1, a_2 ≤ 2·10^9,  - 2·10^9 ≤ b_1, b_2, L, R ≤ 2·10^9, L ≤ R).


-----Output-----

Print the desired number of integers x.


-----Examples-----
Input
2 0 3 3 5 21

Output
3

Input
2 4 3 0 6 17

Output
2","def gcd_extended(a, b):
    if a == 0:
        return b, 0, 1
    gcd, x1, y1 = gcd_extended(b % a, a)
    x = y1 - (b // a) * x1
    y = x1
    return gcd, x, y

def find_integer_solutions(a1, b1, a2, b2, L, R):
    A = a1
    B = -a2
    C = b2 - b1

    gcd, x0, y0 = gcd_extended(abs(A), abs(B))
    
    if C % gcd != 0:
        return -1
    
    x0 *= C // gcd
    y0 *= C // gcd
    
    if A < 0:
        x0 = -x0
    if B < 0:
        y0 = -y0
    
    a1_div_gcd = a1 // gcd
    a2_div_gcd = a2 // gcd
    
    def adjust_solution(x, y, a1_div_gcd, a2_div_gcd, sign_a1, sign_a2):
        if sign_a1 > 0:
            k = (L - (b1 + a1 * x)) // (a1 * a1_div_gcd)
            x += k * a2_div_gcd
            y -= k * a1_div_gcd
        else:
            k = (R - (b1 + a1 * x)) // (a1 * a1_div_gcd)
            x += k * a2_div_gcd
            y -= k * a1_div_gcd
        
        if b1 + a1 * x < L:
            x += a2_div_gcd
            y -= a1_div_gcd
        if b1 + a1 * x > R:
            x -= a2_div_gcd
            y += a1_div_gcd
        
        return x, y
    
    x0, y0 = adjust_solution(x0, y0, a1_div_gcd, a2_div_gcd, 1, -1)
    
    count = 0
    while True:
        val = a1 * x0 + b1
        if val > R:
            break
        if L <= val <= R:
            count += 1
        x0 += a2_div_gcd
        y0 -= a1_div_gcd
    
    return count

# Input
a1, b1, a2, b2, L, R = map(int, input().split())

# Output
print(find_integer_solutions(a1, b1, a2, b2, L, R))
",3,False,False,False,True,False,True,True,True,True,True,True,True,False,34_gpt-4o,0.8916947406274265,0.4796909893978549,0.7083333333333334
35,apps,gpt-4o,qwen2.5-7b-instruct,"It's New Year's Eve soon, so Ivan decided it's high time he started setting the table. Ivan has bought two cakes and cut them into pieces: the first cake has been cut into a pieces, and the second one — into b pieces.

Ivan knows that there will be n people at the celebration (including himself), so Ivan has set n plates for the cakes. Now he is thinking about how to distribute the cakes between the plates. Ivan wants to do it in such a way that all following conditions are met:  Each piece of each cake is put on some plate;  Each plate contains at least one piece of cake;  No plate contains pieces of both cakes. 

To make his guests happy, Ivan wants to distribute the cakes in such a way that the minimum number of pieces on the plate is maximized. Formally, Ivan wants to know the maximum possible number x such that he can distribute the cakes according to the aforementioned conditions, and each plate will contain at least x pieces of cake.

Help Ivan to calculate this number x!


-----Input-----

The first line contains three integers n, a and b (1 ≤ a, b ≤ 100, 2 ≤ n ≤ a + b) — the number of plates, the number of pieces of the first cake, and the number of pieces of the second cake, respectively.


-----Output-----

Print the maximum possible number x such that Ivan can distribute the cake in such a way that each plate will contain at least x pieces of cake.


-----Examples-----
Input
5 2 3

Output
1

Input
4 7 10

Output
3



-----Note-----

In the first example there is only one way to distribute cakes to plates, all of them will have 1 cake on it.

In the second example you can have two plates with 3 and 4 pieces of the first cake and two plates both with 5 pieces of the second cake. Minimal number of pieces is 3.","def max_min_pieces(n, a, b):
    low, high = 1, min(a, b) + 1

    def can_distribute(x):
        return (a // x) + (b // x) >= n

    while low < high:
        mid = (low + high) // 2
        if can_distribute(mid):
            low = mid + 1
        else:
            high = mid
    
    return low - 1

# Read input values
n, a, b = map(int, input().split())

# Compute and print the result
print(max_min_pieces(n, a, b))
",3,True,False,False,True,False,True,True,False,True,True,True,True,True,35_gpt-4o,0.7196776726603296,0.22648439457378763,0.5416666666666666
37,apps,gpt-4o,qwen2.5-7b-instruct,"Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: 

[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.


-----Input-----

The only line of the input contains integer n (0 ≤ n ≤ 10^18) — the number of Ayrat's moves.


-----Output-----

Print two integers x and y — current coordinates of Ayrat coordinates.


-----Examples-----
Input
3

Output
-2 0

Input
7

Output
3 2","def find_coordinates(n):
    # Directions in hexagonal grid
    directions = [(1, 0), (0, 1), (-1, 1), (-1, 0), (0, -1), (1, -1)]
    
    x, y = 0, 0  # Starting position
    steps = 1    # Initial number of steps to take in a given direction
    direction_index = 0  # Start with the first direction
    
    while n > 0:
        for _ in range(2):  # Each direction length is repeated twice before increasing the steps
            if n >= steps:
                dx, dy = directions[direction_index]
                x += dx * steps
                y += dy * steps
                n -= steps
                direction_index = (direction_index + 1) % 6
            else:
                dx, dy = directions[direction_index]
                x += dx * n
                y += dy * n
                return x, y
        steps += 1  # Increase the number of steps after completing two directions
    
    return x, y

# Read input
n = int(input().strip())

# Get the coordinates after n moves
x, y = find_coordinates(n)

# Print the result
print(x, y)
",3,False,False,False,True,True,True,True,True,True,True,False,True,True,37_gpt-4o,0.6739356644576018,0.17974570635049858,0.5833333333333334
46,apps,gpt-4o,qwen2.5-7b-instruct,"You are given positive integer number n. You should create such strictly increasing sequence of k positive numbers a_1, a_2, ..., a_{k}, that their sum is equal to n and greatest common divisor is maximal.

Greatest common divisor of sequence is maximum of such numbers that every element of sequence is divisible by them.

If there is no possible sequence then output -1.


-----Input-----

The first line consists of two numbers n and k (1 ≤ n, k ≤ 10^10).


-----Output-----

If the answer exists then output k numbers — resulting sequence. Otherwise output -1. If there are multiple answers, print any of them.


-----Examples-----
Input
6 3

Output
1 2 3

Input
8 2

Output
2 6

Input
5 3

Output
-1","def find_sequence(n, k):
    min_sum = k * (k + 1) // 2  # Sum of the first k natural numbers
    
    if min_sum > n:
        return -1
    
    d = n // min_sum  # Maximum possible GCD
    remainder = n - d * min_sum
    
    sequence = [d * (i + 1) for i in range(k)]
    
    # Distribute the remainder to the sequence to make the sum equal to n
    for i in range(k-1, -1, -1):
        if remainder == 0:
            break
        sequence[i] += 1
        remainder -= 1
    
    return sequence

# Read input
n, k = map(int, input().split())

result = find_sequence(n, k)
if result == -1:
    print(-1)
else:
    print("" "".join(map(str, result)))
",3,False,False,False,True,True,True,True,True,True,True,False,False,False,46_gpt-4o,0.7759771552020481,0.30291909377485055,0.625
52,apps,gpt-4o,qwen2.5-7b-instruct,"В Берляндском государственном университете локальная сеть между серверами не всегда работает без ошибок. При передаче двух одинаковых сообщений подряд возможна ошибка, в результате которой эти два сообщения сливаются в одно. При таком слиянии конец первого сообщения совмещается с началом второго. Конечно, совмещение может происходить только по одинаковым символам. Длина совмещения должна быть положительным числом, меньшим длины текста сообщения. 

Например, при передаче двух сообщений «abrakadabra» подряд возможно, что оно будет передано с ошибкой описанного вида, и тогда будет получено сообщение вида «abrakadabrabrakadabra» или «abrakadabrakadabra» (в первом случае совмещение произошло по одному символу, а во втором — по четырем).

По полученному сообщению t определите, возможно ли, что это результат ошибки описанного вида работы локальной сети, и если возможно, определите возможное значение s. 

Не следует считать ошибкой ситуацию полного наложения друга на друга двух сообщений. К примеру, если получено сообщение «abcd», следует считать, что в нём ошибки нет. Аналогично, простое дописывание одного сообщения вслед за другим не является признаком ошибки. Например, если получено сообщение «abcabc», следует считать, что в нём ошибки нет.


-----Входные данные-----

В единственной строке выходных данных следует непустая строка t, состоящая из строчных букв латинского алфавита. Длина строки t не превосходит 100 символов.


-----Выходные данные-----

Если сообщение t не может содержать ошибки, выведите «NO» (без кавычек) в единственную строку выходных данных.

В противном случае в первой строке выведите «YES» (без кавычек), а в следующей строке выведите строку s — возможное сообщение, которое могло привести к ошибке. Если возможных ответов несколько, разрешается вывести любой из них.


-----Примеры-----
Входные данные
abrakadabrabrakadabra

Выходные данные
YES
abrakadabra

Входные данные
acacacaca

Выходные данные
YES
acaca

Входные данные
abcabc

Выходные данные
NO

Входные данные
abababab

Выходные данные
YES
ababab

Входные данные
tatbt

Выходные данные
NO



-----Примечание-----

Во втором примере подходящим ответом также является строка acacaca.","def find_possible_message(t):
    n = len(t)
    for i in range(1, n):
        if t[:i] == t[-i:]:
            s = t[:-i]
            if s + t[-i:] == t:
                return ""YES\n"" + s
    return ""NO""

# Read input
t = input().strip()

# Find and print the result
print(find_possible_message(t))
",3,False,False,False,True,True,True,False,True,True,True,True,False,False,52_gpt-4o,0.5222316825506773,0.022116155956770172,0.5
56,apps,gpt-4o,qwen2.5-7b-instruct,"Jamie is preparing a Codeforces round. He has got an idea for a problem, but does not know how to solve it. Help him write a solution to the following problem:

Find k integers such that the sum of two to the power of each number equals to the number n and the largest integer in the answer is as small as possible. As there may be multiple answers, you are asked to output the lexicographically largest one. 

To be more clear, consider all integer sequence with length k (a_1, a_2, ..., a_{k}) with $\sum_{i = 1}^{k} 2^{a_{i}} = n$. Give a value $y = \operatorname{max}_{1 \leq i \leq k} a_{i}$ to each sequence. Among all sequence(s) that have the minimum y value, output the one that is the lexicographically largest.

For definitions of powers and lexicographical order see notes.


-----Input-----

The first line consists of two integers n and k (1 ≤ n ≤ 10^18, 1 ≤ k ≤ 10^5) — the required sum and the length of the sequence.


-----Output-----

Output ""No"" (without quotes) in a single line if there does not exist such sequence. Otherwise, output ""Yes"" (without quotes) in the first line, and k numbers separated by space in the second line — the required sequence.

It is guaranteed that the integers in the answer sequence fit the range [ - 10^18, 10^18].


-----Examples-----
Input
23 5

Output
Yes
3 3 2 1 0 

Input
13 2

Output
No

Input
1 2

Output
Yes
-1 -1 



-----Note-----

Sample 1:

2^3 + 2^3 + 2^2 + 2^1 + 2^0 = 8 + 8 + 4 + 2 + 1 = 23

Answers like (3, 3, 2, 0, 1) or (0, 1, 2, 3, 3) are not lexicographically largest.

Answers like (4, 1, 1, 1, 0) do not have the minimum y value.

Sample 2:

It can be shown there does not exist a sequence with length 2.

Sample 3:

$2^{-1} + 2^{-1} = \frac{1}{2} + \frac{1}{2} = 1$

Powers of 2:

If x > 0, then 2^{x} = 2·2·2·...·2 (x times).

If x = 0, then 2^{x} = 1.

If x < 0, then $2^{x} = \frac{1}{2^{-x}}$.

Lexicographical order:

Given two different sequences of the same length, (a_1, a_2, ... , a_{k}) and (b_1, b_2, ... , b_{k}), the first one is smaller than the second one for the lexicographical order, if and only if a_{i} < b_{i}, for the first i where a_{i} and b_{i} differ.","def find_sequence(n, k):
    # Check if it is possible to express n as a sum of k powers of 2
    if k > n:
        return ""No""
    
    # Start by representing n in binary and counting the number of 1s
    bits = []
    for i in range(60, -1, -1):
        if (n >> i) & 1:
            bits.append(i)

    # If the number of bits is more than k, it's impossible
    if len(bits) > k:
        return ""No""
    
    # We need to distribute the bits to get exactly k parts
    while len(bits) < k:
        smallest = bits.pop()
        bits.append(smallest - 1)
        bits.append(smallest - 1)
    
    # Sort to ensure that the sequence is lexicographically largest
    bits.sort(reverse=True)
    
    return ""Yes\n"" + "" "".join(map(str, bits))

# Reading input
import sys
input = sys.stdin.read
data = input().strip().split()
n = int(data[0])
k = int(data[1])

# Finding and printing the sequence
print(find_sequence(n, k))
",3,False,False,False,True,True,True,True,True,False,True,True,True,True,56_gpt-4o,0.6668830988335698,0.16731765420689637,0.6666666666666666
64,apps,gpt-4o,qwen2.5-7b-instruct,"Vova again tries to play some computer card game.

The rules of deck creation in this game are simple. Vova is given an existing deck of n cards and a magic number k. The order of the cards in the deck is fixed. Each card has a number written on it; number a_{i} is written on the i-th card in the deck.

After receiving the deck and the magic number, Vova removes x (possibly x = 0) cards from the top of the deck, y (possibly y = 0) cards from the bottom of the deck, and the rest of the deck is his new deck (Vova has to leave at least one card in the deck after removing cards). So Vova's new deck actually contains cards x + 1, x + 2, ... n - y - 1, n - y from the original deck.

Vova's new deck is considered valid iff the product of all numbers written on the cards in his new deck is divisible by k. So Vova received a deck (possibly not a valid one) and a number k, and now he wonders, how many ways are there to choose x and y so the deck he will get after removing x cards from the top and y cards from the bottom is valid?


-----Input-----

The first line contains two integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 10^9).

The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — the numbers written on the cards.


-----Output-----

Print the number of ways to choose x and y so the resulting deck is valid.


-----Examples-----
Input
3 4
6 2 8

Output
4

Input
3 6
9 1 14

Output
1



-----Note-----

In the first example the possible values of x and y are:

  x = 0, y = 0;  x = 1, y = 0;  x = 2, y = 0;  x = 0, y = 1.","def count_valid_decks(n, k, cards):
    from math import gcd
    from functools import reduce
    
    def lcm(a, b):
        return a * b // gcd(a, b)
    
    def product(arr):
        return reduce(lambda x, y: x * y, arr, 1)
    
    total_product = product(cards)
    
    if total_product % k != 0:
        return 0
    
    right_product = [1] * (n + 1)
    for i in range(n - 1, -1, -1):
        right_product[i] = right_product[i + 1] * cards[i]
    
    valid_ways = 0
    left_product = 1
    
    for x in range(n):
        if left_product * right_product[x + 1] % k == 0:
            valid_ways += 1
        left_product *= cards[x]
    
    return valid_ways

# Reading input
import sys
input = sys.stdin.read
data = input().split()
n = int(data[0])
k = int(data[1])
cards = list(map(int, data[2:]))

# Calculating and printing the number of valid ways
print(count_valid_decks(n, k, cards))
",3,False,False,False,True,True,True,True,True,True,True,True,True,False,64_gpt-4o,0.5293401931959961,0.029302011377072862,0.5416666666666666
69,apps,gpt-4o,qwen2.5-7b-instruct,"Vasya has got a robot which is situated on an infinite Cartesian plane, initially in the cell $(0, 0)$. Robot can perform the following four kinds of operations:   U — move from $(x, y)$ to $(x, y + 1)$;  D — move from $(x, y)$ to $(x, y - 1)$;  L — move from $(x, y)$ to $(x - 1, y)$;  R — move from $(x, y)$ to $(x + 1, y)$. 

Vasya also has got a sequence of $n$ operations. Vasya wants to modify this sequence so after performing it the robot will end up in $(x, y)$.

Vasya wants to change the sequence so the length of changed subsegment is minimum possible. This length can be calculated as follows: $maxID - minID + 1$, where $maxID$ is the maximum index of a changed operation, and $minID$ is the minimum index of a changed operation. For example, if Vasya changes RRRRRRR to RLRRLRL, then the operations with indices $2$, $5$ and $7$ are changed, so the length of changed subsegment is $7 - 2 + 1 = 6$. Another example: if Vasya changes DDDD to DDRD, then the length of changed subsegment is $1$. 

If there are no changes, then the length of changed subsegment is $0$. Changing an operation means replacing it with some operation (possibly the same); Vasya can't insert new operations into the sequence or remove them.

Help Vasya! Tell him the minimum length of subsegment that he needs to change so that the robot will go from $(0, 0)$ to $(x, y)$, or tell him that it's impossible.


-----Input-----

The first line contains one integer number $n~(1 \le n \le 2 \cdot 10^5)$ — the number of operations.

The second line contains the sequence of operations — a string of $n$ characters. Each character is either U, D, L or R.

The third line contains two integers $x, y~(-10^9 \le x, y \le 10^9)$ — the coordinates of the cell where the robot should end its path.


-----Output-----

Print one integer — the minimum possible length of subsegment that can be changed so the resulting sequence of operations moves the robot from $(0, 0)$ to $(x, y)$. If this change is impossible, print $-1$.


-----Examples-----
Input
5
RURUU
-2 3

Output
3

Input
4
RULR
1 1

Output
0

Input
3
UUU
100 100

Output
-1



-----Note-----

In the first example the sequence can be changed to LULUU. So the length of the changed subsegment is $3 - 1 + 1 = 3$.

In the second example the given sequence already leads the robot to $(x, y)$, so the length of the changed subsegment is $0$.

In the third example the robot can't end his path in the cell $(x, y)$.","def min_subsegment_length_to_target(n, operations, x, y):
    # Initial final position after following all operations
    final_x = 0
    final_y = 0

    # Compute the final coordinates after performing all operations
    for op in operations:
        if op == 'U':
            final_y += 1
        elif op == 'D':
            final_y -= 1
        elif op == 'L':
            final_x -= 1
        elif op == 'R':
            final_x += 1

    # The difference we need to correct
    dx = x - final_x
    dy = y - final_y

    # If the difference is already zero, no changes are needed
    if dx == 0 and dy == 0:
        return 0

    # Sliding window to determine the minimum subsegment length
    min_length = float('inf')
    current_x = 0
    current_y = 0

    # Dictionary to store the position of the robot at each step
    position_map = {(0, 0): -1}
    
    for i in range(n):
        if operations[i] == 'U':
            current_y += 1
        elif operations[i] == 'D':
            current_y -= 1
        elif operations[i] == 'L':
            current_x -= 1
        elif operations[i] == 'R':
            current_x += 1

        # If we have seen the position that would correct the difference before
        target_pos = (current_x + dx, current_y + dy)
        if target_pos in position_map:
            min_length = min(min_length, i - position_map[target_pos])

        position_map[(current_x, current_y)] = i

    return min_length if min_length != float('inf') else -1

# Read input
n = int(input())
operations = input().strip()
x, y = map(int, input().split())

# Get the result
result = min_subsegment_length_to_target(n, operations, x, y)
print(result)
",3,False,False,True,True,True,True,True,True,True,True,False,True,False,69_gpt-4o,0.8019207981559888,0.3338287517701663,0.7083333333333334
76,apps,gpt-4o,qwen2.5-7b-instruct,"You are given a description of a depot. It is a rectangular checkered field of n × m size. Each cell in a field can be empty (""."") or it can be occupied by a wall (""*""). 

You have one bomb. If you lay the bomb at the cell (x, y), then after triggering it will wipe out all walls in the row x and all walls in the column y.

You are to determine if it is possible to wipe out all walls in the depot by placing and triggering exactly one bomb. The bomb can be laid both in an empty cell or in a cell occupied by a wall.


-----Input-----

The first line contains two positive integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the depot field. 

The next n lines contain m symbols ""."" and ""*"" each — the description of the field. j-th symbol in i-th of them stands for cell (i, j). If the symbol is equal to ""."", then the corresponding cell is empty, otherwise it equals ""*"" and the corresponding cell is occupied by a wall.


-----Output-----

If it is impossible to wipe out all walls by placing and triggering exactly one bomb, then print ""NO"" in the first line (without quotes).

Otherwise print ""YES"" (without quotes) in the first line and two integers in the second line — the coordinates of the cell at which the bomb should be laid. If there are multiple answers, print any of them.


-----Examples-----
Input
3 4
.*..
....
.*..

Output
YES
1 2

Input
3 3
..*
.*.
*..

Output
NO

Input
6 5
..*..
..*..
*****
..*..
..*..
..*..

Output
YES
3 3","def find_bomb_placement():
    import sys
    input = sys.stdin.read
    data = input().split()
    
    n = int(data[0])
    m = int(data[1])
    
    grid = []
    index = 2
    for i in range(n):
        grid.append(data[index])
        index += 1

    # Count the number of walls in each row and each column
    row_walls = [0] * n
    col_walls = [0] * m
    
    total_walls = 0
    
    for i in range(n):
        for j in range(m):
            if grid[i][j] == '*':
                row_walls[i] += 1
                col_walls[j] += 1
                total_walls += 1

    # Check every cell to see if placing a bomb there will destroy all walls
    for i in range(n):
        for j in range(m):
            if row_walls[i] + col_walls[j] - (1 if grid[i][j] == '*' else 0) == total_walls:
                print(""YES"")
                print(i + 1, j + 1)
                return

    print(""NO"")

# Call the function to execute the solution
find_bomb_placement()
",3,False,False,False,True,True,True,True,True,True,True,True,True,True,76_gpt-4o,0.7547069367271352,0.2733757528164275,0.625
78,apps,gpt-4o,qwen2.5-7b-instruct,"You are given sequence a_1, a_2, ..., a_{n} of integer numbers of length n. Your task is to find such subsequence that its sum is odd and maximum among all such subsequences. It's guaranteed that given sequence contains subsequence with odd sum.

Subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.

You should write a program which finds sum of the best subsequence.


-----Input-----

The first line contains integer number n (1 ≤ n ≤ 10^5).

The second line contains n integer numbers a_1, a_2, ..., a_{n} ( - 10^4 ≤ a_{i} ≤ 10^4). The sequence contains at least one subsequence with odd sum.


-----Output-----

Print sum of resulting subseqeuence.


-----Examples-----
Input
4
-2 2 -3 1

Output
3

Input
3
2 -5 -3

Output
-1



-----Note-----

In the first example sum of the second and the fourth elements is 3.","# Read input
n = int(input())
a = list(map(int, input().split()))

# Initialize sums
total_sum = sum(a)
min_positive_odd = float('inf')
max_negative_odd = float('-inf')

# Check if the total sum is odd
if total_sum % 2 != 0:
    print(total_sum)
else:
    for num in a:
        if num % 2 != 0:
            if num > 0:
                min_positive_odd = min(min_positive_odd, num)
            else:
                max_negative_odd = max(max_negative_odd, num)
    
    # Calculate possible results by adjusting the total sum to make it odd
    result1 = total_sum - min_positive_odd if min_positive_odd != float('inf') else float('-inf')
    result2 = total_sum - max_negative_odd if max_negative_odd != float('-inf') else float('-inf')

    # Print the maximum valid result
    print(max(result1, result2))
",3,False,False,False,True,True,True,True,True,False,False,False,False,False,78_gpt-4o,0.6684098758997917,0.17434351349348007,0.5833333333333334
80,apps,gpt-4o,qwen2.5-7b-instruct,"Vivek initially has an empty array $a$ and some integer constant $m$.

He performs the following algorithm:  Select a random integer $x$ uniformly in range from $1$ to $m$ and append it to the end of $a$.  Compute the greatest common divisor of integers in $a$.  In case it equals to $1$, break  Otherwise, return to step $1$. 

Find the expected length of $a$. It can be shown that it can be represented as $\frac{P}{Q}$ where $P$ and $Q$ are coprime integers and $Q\neq 0 \pmod{10^9+7}$. Print the value of $P \cdot Q^{-1} \pmod{10^9+7}$.


-----Input-----

The first and only line contains a single integer $m$ ($1 \leq m \leq 100000$).


-----Output-----

Print a single integer — the expected length of the array $a$ written as $P \cdot Q^{-1} \pmod{10^9+7}$.


-----Examples-----
Input
1

Output
1

Input
2

Output
2

Input
4

Output
333333338



-----Note-----

In the first example, since Vivek can choose only integers from $1$ to $1$, he will have $a=[1]$ after the first append operation, and after that quit the algorithm. Hence the length of $a$ is always $1$, so its expected value is $1$ as well.

In the second example, Vivek each time will append either $1$ or $2$, so after finishing the algorithm he will end up having some number of $2$'s (possibly zero), and a single $1$ in the end. The expected length of the list is $1\cdot \frac{1}{2} + 2\cdot \frac{1}{2^2} + 3\cdot \frac{1}{2^3} + \ldots = 2$.","MOD = 10**9 + 7

def mod_inv(a, p):
    return pow(a, p - 2, p)

def expected_length(m):
    if m == 1:
        return 1
    
    # Calculate the sum of lengths
    length_sum = 0
    for i in range(1, m + 1):
        length_sum += mod_inv(i, MOD)
        length_sum %= MOD
    
    # The expected length is m * length_sum % MOD
    result = (m * length_sum) % MOD
    
    return result

# Read input
m = int(input().strip())

# Print the result
print(expected_length(m))
",3,False,True,False,False,True,True,True,False,False,False,False,False,False,80_gpt-4o,0.8170618896931411,0.357067949502515,0.6666666666666666
83,apps,gpt-4o,qwen2.5-7b-instruct,"Noora is a student of one famous high school. It's her final year in school — she is going to study in university next year. However, she has to get an «A» graduation certificate in order to apply to a prestigious one.

In school, where Noora is studying, teachers are putting down marks to the online class register, which are integers from 1 to k. The worst mark is 1, the best is k. Mark that is going to the certificate, is calculated as an average of all the marks, rounded to the closest integer. If several answers are possible, rounding up is produced. For example, 7.3 is rounded to 7, but 7.5 and 7.8784 — to 8. 

For instance, if Noora has marks [8, 9], then the mark to the certificate is 9, because the average is equal to 8.5 and rounded to 9, but if the marks are [8, 8, 9], Noora will have graduation certificate with 8.

To graduate with «A» certificate, Noora has to have mark k.

Noora got n marks in register this year. However, she is afraid that her marks are not enough to get final mark k. Noora decided to ask for help in the internet, where hacker Leha immediately responded to her request. He is ready to hack class register for Noora and to add Noora any number of additional marks from 1 to k. At the same time, Leha want his hack be unseen to everyone, so he decided to add as less as possible additional marks. Please help Leha to calculate the minimal number of marks he has to add, so that final Noora's mark will become equal to k.


-----Input-----

The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100) denoting the number of marks, received by Noora and the value of highest possible mark.

The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ k) denoting marks received by Noora before Leha's hack.


-----Output-----

Print a single integer — minimal number of additional marks, that Leha has to add in order to change Noora's final mark to k.


-----Examples-----
Input
2 10
8 9

Output
4
Input
3 5
4 4 4

Output
3


-----Note-----

Consider the first example testcase.

Maximal mark is 10, Noora received two marks — 8 and 9, so current final mark is 9. To fix it, Leha can add marks [10, 10, 10, 10] (4 marks in total) to the registry, achieving Noora having average mark equal to $\frac{8 + 9 + 10 + 10 + 10 + 10}{6} = \frac{57}{6} = 9.5$. Consequently, new final mark is 10. Less number of marks won't fix the situation.

In the second example Leha can add [5, 5, 5] to the registry, so that making average mark equal to 4.5, which is enough to have 5 in the certificate.","import math

# Read the input values
n, k = map(int, input().split())
marks = list(map(int, input().split()))

# Calculate the current sum of marks and the number of marks
current_sum = sum(marks)
current_count = n

# Iterate to find the minimum number of additional marks needed
while True:
    # Calculate the average with the current sum and count
    current_average = current_sum / current_count
    
    # If the average rounded up is at least 'k', we have our answer
    if math.ceil(current_average) >= k:
        print(current_count - n)
        break
    
    # Otherwise, add a maximum mark (k) and continue
    current_sum += k
    current_count += 1
",3,False,False,False,True,True,True,True,False,False,True,True,True,True,83_gpt-4o,0.6289508873084628,0.13086072969025705,0.5416666666666666
89,apps,gpt-4o,qwen2.5-7b-instruct,"The year 2015 is almost over.

Limak is a little polar bear. He has recently learnt about the binary system. He noticed that the passing year has exactly one zero in its representation in the binary system — 2015_10 = 11111011111_2. Note that he doesn't care about the number of zeros in the decimal representation.

Limak chose some interval of years. He is going to count all years from this interval that have exactly one zero in the binary representation. Can you do it faster?

Assume that all positive integers are always written without leading zeros.


-----Input-----

The only line of the input contains two integers a and b (1 ≤ a ≤ b ≤ 10^18) — the first year and the last year in Limak's interval respectively.


-----Output-----

Print one integer – the number of years Limak will count in his chosen interval.


-----Examples-----
Input
5 10

Output
2

Input
2015 2015

Output
1

Input
100 105

Output
0

Input
72057594000000000 72057595000000000

Output
26



-----Note-----

In the first sample Limak's interval contains numbers 5_10 = 101_2, 6_10 = 110_2, 7_10 = 111_2, 8_10 = 1000_2, 9_10 = 1001_2 and 10_10 = 1010_2. Two of them (101_2 and 110_2) have the described property.","def count_years_with_one_zero_in_binary(a, b):
    def has_exactly_one_zero_in_binary(x):
        binary_representation = bin(x)[2:]
        return binary_representation.count('0') == 1

    count = 0
    for year in range(a, b + 1):
        if has_exactly_one_zero_in_binary(year):
            count += 1
    
    return count

if __name__ == ""__main__"":
    import sys
    input = sys.stdin.read
    data = input().strip().split()
    a = int(data[0])
    b = int(data[1])
    result = count_years_with_one_zero_in_binary(a, b)
    print(result)
",3,False,True,False,True,False,True,True,True,True,True,False,False,True,89_gpt-4o,0.5320826153262929,0.032228761891690744,0.5416666666666666
114,apps,gpt-4o,qwen2.5-7b-instruct,"For a given positive integer n denote its k-rounding as the minimum positive integer x, such that x ends with k or more zeros in base 10 and is divisible by n.

For example, 4-rounding of 375 is 375·80 = 30000. 30000 is the minimum integer such that it ends with 4 or more zeros and is divisible by 375.

Write a program that will perform the k-rounding of n.


-----Input-----

The only line contains two integers n and k (1 ≤ n ≤ 10^9, 0 ≤ k ≤ 8).


-----Output-----

Print the k-rounding of n.


-----Examples-----
Input
375 4

Output
30000

Input
10000 1

Output
10000

Input
38101 0

Output
38101

Input
123456789 8

Output
12345678900000000","import math

def k_rounding(n, k):
    # Calculate the minimum number that ends with at least k zeros
    multiplier = 10**k
    # Find the smallest number x that is a multiple of n and also ends with k zeros
    x = (n * (multiplier // math.gcd(n, multiplier)))
    return x

# Read input
n, k = map(int, input().split())
# Print the k-rounding of n
print(k_rounding(n, k))
",3,True,False,False,True,True,True,True,True,True,True,True,True,True,114_gpt-4o,0.7668295849005334,0.2842287752455744,0.7083333333333334
119,apps,gpt-4o,qwen2.5-7b-instruct,"Ted has a pineapple. This pineapple is able to bark like a bulldog! At time t (in seconds) it barks for the first time. Then every s seconds after it, it barks twice with 1 second interval. Thus it barks at times t, t + s, t + s + 1, t + 2s, t + 2s + 1, etc.

 [Image] 

Barney woke up in the morning and wants to eat the pineapple, but he can't eat it when it's barking. Barney plans to eat it at time x (in seconds), so he asked you to tell him if it's gonna bark at that time.


-----Input-----

The first and only line of input contains three integers t, s and x (0 ≤ t, x ≤ 10^9, 2 ≤ s ≤ 10^9) — the time the pineapple barks for the first time, the pineapple barking interval, and the time Barney wants to eat the pineapple respectively.


-----Output-----

Print a single ""YES"" (without quotes) if the pineapple will bark at time x or a single ""NO"" (without quotes) otherwise in the only line of output.


-----Examples-----
Input
3 10 4

Output
NO

Input
3 10 3

Output
YES

Input
3 8 51

Output
YES

Input
3 8 52

Output
YES



-----Note-----

In the first and the second sample cases pineapple will bark at moments 3, 13, 14, ..., so it won't bark at the moment 4 and will bark at the moment 3.

In the third and fourth sample cases pineapple will bark at moments 3, 11, 12, 19, 20, 27, 28, 35, 36, 43, 44, 51, 52, 59, ..., so it will bark at both moments 51 and 52.","t, s, x = map(int, input().split())

if x == t:
    print(""YES"")
elif x > t:
    if (x - t) % s == 0:
        print(""YES"")
    elif (x - t - 1) % s == 0 and x != t + 1:
        print(""YES"")
    else:
        print(""NO"")
else:
    print(""NO"")
",3,True,False,False,True,True,True,True,True,True,True,True,True,True,119_gpt-4o,0.9099317296650239,0.5192803519432471,0.75
121,apps,gpt-4o,qwen2.5-7b-instruct,"The process of mammoth's genome decoding in Berland comes to its end!

One of the few remaining tasks is to restore unrecognized nucleotides in a found chain s. Each nucleotide is coded with a capital letter of English alphabet: 'A', 'C', 'G' or 'T'. Unrecognized nucleotides are coded by a question mark '?'. Thus, s is a string consisting of letters 'A', 'C', 'G', 'T' and characters '?'.

It is known that the number of nucleotides of each of the four types in the decoded genome of mammoth in Berland should be equal.

Your task is to decode the genome and replace each unrecognized nucleotide with one of the four types so that the number of nucleotides of each of the four types becomes equal.


-----Input-----

The first line contains the integer n (4 ≤ n ≤ 255) — the length of the genome.

The second line contains the string s of length n — the coded genome. It consists of characters 'A', 'C', 'G', 'T' and '?'.


-----Output-----

If it is possible to decode the genome, print it. If there are multiple answer, print any of them. If it is not possible, print three equals signs in a row: ""==="" (without quotes).


-----Examples-----
Input
8
AG?C??CT

Output
AGACGTCT

Input
4
AGCT

Output
AGCT

Input
6
????G?

Output
===

Input
4
AA??

Output
===



-----Note-----

In the first example you can replace the first question mark with the letter 'A', the second question mark with the letter 'G', the third question mark with the letter 'T', then each nucleotide in the genome would be presented twice.

In the second example the genome is already decoded correctly and each nucleotide is exactly once in it.

In the third and the fourth examples it is impossible to decode the genom.","def decode_genome():
    import sys
    input = sys.stdin.read
    data = input().split()

    n = int(data[0])
    s = data[1]

    if n % 4 != 0:
        print(""==="")
        return

    target_count = n // 4
    counts = {'A': 0, 'C': 0, 'G': 0, 'T': 0}

    for char in s:
        if char in counts:
            counts[char] += 1

    for char in counts:
        if counts[char] > target_count:
            print(""==="")
            return

    result = list(s)

    for i in range(n):
        if result[i] == '?':
            for char in counts:
                if counts[char] < target_count:
                    result[i] = char
                    counts[char] += 1
                    break

    print("""".join(result))

decode_genome()
",3,True,False,False,True,True,True,True,True,True,True,True,False,False,121_gpt-4o,0.8829629651433227,0.46218251669300164,0.75
126,apps,gpt-4o,qwen2.5-7b-instruct,"Sagheer is walking in the street when he comes to an intersection of two roads. Each road can be represented as two parts where each part has 3 lanes getting into the intersection (one for each direction) and 3 lanes getting out of the intersection, so we have 4 parts in total. Each part has 4 lights, one for each lane getting into the intersection (l — left, s — straight, r — right) and a light p for a pedestrian crossing.  [Image] 

An accident is possible if a car can hit a pedestrian. This can happen if the light of a pedestrian crossing of some part and the light of a lane that can get to or from that same part are green at the same time.

Now, Sagheer is monitoring the configuration of the traffic lights. Your task is to help him detect whether an accident is possible.


-----Input-----

The input consists of four lines with each line describing a road part given in a counter-clockwise order.

Each line contains four integers l, s, r, p — for the left, straight, right and pedestrian lights, respectively. The possible values are 0 for red light and 1 for green light.


-----Output-----

On a single line, print ""YES"" if an accident is possible, and ""NO"" otherwise.


-----Examples-----
Input
1 0 0 1
0 1 0 0
0 0 1 0
0 0 0 1

Output
YES

Input
0 1 1 0
1 0 1 0
1 1 0 0
0 0 0 1

Output
NO

Input
1 0 0 0
0 0 0 1
0 0 0 0
1 0 1 0

Output
NO



-----Note-----

In the first example, some accidents are possible because cars of part 1 can hit pedestrians of parts 1 and 4. Also, cars of parts 2 and 3 can hit pedestrians of part 4.

In the second example, no car can pass the pedestrian crossing of part 4 which is the only green pedestrian light. So, no accident can occur.","# Reading input
traffic_lights = []
for _ in range(4):
    traffic_lights.append(list(map(int, input().split())))

# Check for possible accidents
accident_possible = False
for i in range(4):
    l, s, r, p = traffic_lights[i]
    if p == 1:
        # Check if any vehicle light in the same part is green
        if l == 1 or s == 1 or r == 1:
            accident_possible = True
            break
        # Check if any vehicle light in the corresponding parts is green
        for j in range(3):
            if traffic_lights[(i + j) % 4][j] == 1:
                accident_possible = True
                break
        if accident_possible:
            break

# Output the result
if accident_possible:
    print(""YES"")
else:
    print(""NO"")
",3,False,False,True,True,True,True,True,True,True,False,True,True,False,126_gpt-4o,0.8315221560314535,0.37860202468904464,0.6666666666666666
136,apps,gpt-4o,qwen2.5-7b-instruct,"Imp is watching a documentary about cave painting. [Image] 

Some numbers, carved in chaotic order, immediately attracted his attention. Imp rapidly proposed a guess that they are the remainders of division of a number n by all integers i from 1 to k. Unfortunately, there are too many integers to analyze for Imp.

Imp wants you to check whether all these remainders are distinct. Formally, he wants to check, if all $n \text{mod} i$, 1 ≤ i ≤ k, are distinct, i. e. there is no such pair (i, j) that:   1 ≤ i < j ≤ k,  $n \operatorname{mod} i = n \operatorname{mod} j$, where $x \operatorname{mod} y$ is the remainder of division x by y. 


-----Input-----

The only line contains two integers n, k (1 ≤ n, k ≤ 10^18).


-----Output-----

Print ""Yes"", if all the remainders are distinct, and ""No"" otherwise.

You can print each letter in arbitrary case (lower or upper).


-----Examples-----
Input
4 4

Output
No

Input
5 3

Output
Yes



-----Note-----

In the first sample remainders modulo 1 and 4 coincide.","n, k = map(int, input().split())

def are_remainders_distinct(n, k):
    # For k >= n, there will always be non-distinct remainders
    if k >= n:
        return ""No""
    
    # For k < n, we'll check for remainders
    seen_remainders = set()
    for i in range(1, k + 1):
        remainder = n % i
        if remainder in seen_remainders:
            return ""No""
        seen_remainders.add(remainder)
    
    return ""Yes""

print(are_remainders_distinct(n, k))
",3,False,True,True,True,True,True,True,True,True,True,True,True,True,136_gpt-4o,0.7939507410280228,0.32340413258344014,0.625
147,apps,gpt-4o,qwen2.5-7b-instruct,"This morning, Roman woke up and opened the browser with $n$ opened tabs numbered from $1$ to $n$. There are two kinds of tabs: those with the information required for the test and those with social network sites. Roman decided that there are too many tabs open so he wants to close some of them.

He decided to accomplish this by closing every $k$-th ($2 \leq k \leq n - 1$) tab. Only then he will decide whether he wants to study for the test or to chat on the social networks. Formally, Roman will choose one tab (let its number be $b$) and then close all tabs with numbers $c = b + i \cdot k$ that satisfy the following condition: $1 \leq c \leq n$ and $i$ is an integer (it may be positive, negative or zero).

For example, if $k = 3$, $n = 14$ and Roman chooses $b = 8$, then he will close tabs with numbers $2$, $5$, $8$, $11$ and $14$.

After closing the tabs Roman will calculate the amount of remaining tabs with the information for the test (let's denote it $e$) and the amount of remaining social network tabs ($s$). Help Roman to calculate the maximal absolute value of the difference of those values $|e - s|$ so that it would be easy to decide what to do next.


-----Input-----

The first line contains two integers $n$ and $k$ ($2 \leq k < n \leq 100$) — the amount of tabs opened currently and the distance between the tabs closed.

The second line consists of $n$ integers, each of them equal either to $1$ or to $-1$. The $i$-th integer denotes the type of the $i$-th tab: if it is equal to $1$, this tab contains information for the test, and if it is equal to $-1$, it's a social network tab.


-----Output-----

Output a single integer — the maximum absolute difference between the amounts of remaining tabs of different types $|e - s|$.


-----Examples-----
Input
4 2
1 1 -1 1

Output
2

Input
14 3
-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1

Output
9



-----Note-----

In the first example we can choose $b = 1$ or $b = 3$. We will delete then one tab of each type and the remaining tabs are then all contain test information. Thus, $e = 2$ and $s = 0$ and $|e - s| = 2$.

In the second example, on the contrary, we can leave opened only tabs that have social networks opened in them.","# Read input values
n, k = map(int, input().split())
tab_types = list(map(int, input().split()))

# Function to calculate remaining tabs after closing every k-th tab starting from b
def calculate_remaining_tabs(b):
    remaining_tabs = tab_types[:]
    for i in range(b, n, k):
        remaining_tabs[i] = 0
    for i in range(b, -1, -k):
        remaining_tabs[i] = 0
    return remaining_tabs

max_diff = 0

# Iterate over each possible starting tab b
for b in range(n):
    remaining_tabs = calculate_remaining_tabs(b)
    e = remaining_tabs.count(1)
    s = remaining_tabs.count(-1)
    max_diff = max(max_diff, abs(e - s))

# Output the maximum absolute difference
print(max_diff)
",3,True,False,False,True,True,True,True,True,True,True,True,True,False,147_gpt-4o,0.7238859101010041,0.22752781190837426,0.7083333333333334
152,apps,gpt-4o,qwen2.5-7b-instruct,"Beroffice text editor has a wide range of features that help working with text. One of the features is an automatic search for typos and suggestions of how to fix them.

Beroffice works only with small English letters (i.e. with 26 letters from a to z). Beroffice thinks that a word is typed with a typo if there are three or more consonants in a row in the word. The only exception is that if the block of consonants has all letters the same, then this block (even if its length is greater than three) is not considered a typo. Formally, a word is typed with a typo if there is a block of not less that three consonants in a row, and there are at least two different letters in this block.

For example:

  the following words have typos: ""hellno"", ""hackcerrs"" and ""backtothefutttture"";  the following words don't have typos: ""helllllooooo"", ""tobeornottobe"" and ""oooooo"". 

When Beroffice editor finds a word with a typo, it inserts as little as possible number of spaces in this word (dividing it into several words) in such a way that each of the resulting words is typed without any typos.

Implement this feature of Beroffice editor. Consider the following letters as the only vowels: 'a', 'e', 'i', 'o' and 'u'. All the other letters are consonants in this problem.


-----Input-----

The only line contains a non-empty word consisting of small English letters. The length of the word is between 1 and 3000 letters.


-----Output-----

Print the given word without any changes if there are no typos.

If there is at least one typo in the word, insert the minimum number of spaces into the word so that each of the resulting words doesn't have any typos. If there are multiple solutions, print any of them.


-----Examples-----
Input
hellno

Output
hell no 

Input
abacaba

Output
abacaba 

Input
asdfasdf

Output
asd fasd f","def is_vowel(c):
    return c in 'aeiou'

def has_typo(block):
    if len(block) < 3:
        return False
    first_consonant = block[0]
    for c in block:
        if c != first_consonant:
            return True
    return False

def correct_typo(word):
    n = len(word)
    result = []
    i = 0

    while i < n:
        start = i
        while i < n and not is_vowel(word[i]):
            i += 1
        if i - start >= 3 and has_typo(word[start:i]):
            result.append(word[start:start+2])
            start += 2
            while start < i:
                result.append(word[start:start+1])
                start += 1
        else:
            result.append(word[start:i])
        while i < n and is_vowel(word[i]):
            i += 1
        result.append(word[start:i])
        
    return ' '.join(result)

if __name__ == ""__main__"":
    word = input().strip()
    print(correct_typo(word))
",3,False,False,False,True,True,True,True,True,True,True,False,True,False,152_gpt-4o,0.8217422082576146,0.34996159676955946,0.5833333333333334
153,apps,gpt-4o,qwen2.5-7b-instruct,"Anton is playing a very interesting computer game, but now he is stuck at one of the levels. To pass to the next level he has to prepare n potions.

Anton has a special kettle, that can prepare one potions in x seconds. Also, he knows spells of two types that can faster the process of preparing potions.  Spells of this type speed up the preparation time of one potion. There are m spells of this type, the i-th of them costs b_{i} manapoints and changes the preparation time of each potion to a_{i} instead of x.  Spells of this type immediately prepare some number of potions. There are k such spells, the i-th of them costs d_{i} manapoints and instantly create c_{i} potions. 

Anton can use no more than one spell of the first type and no more than one spell of the second type, and the total number of manapoints spent should not exceed s. Consider that all spells are used instantly and right before Anton starts to prepare potions.

Anton wants to get to the next level as fast as possible, so he is interested in the minimum number of time he needs to spent in order to prepare at least n potions.


-----Input-----

The first line of the input contains three integers n, m, k (1 ≤ n ≤ 2·10^9, 1 ≤ m, k ≤ 2·10^5) — the number of potions, Anton has to make, the number of spells of the first type and the number of spells of the second type.

The second line of the input contains two integers x and s (2 ≤ x ≤ 2·10^9, 1 ≤ s ≤ 2·10^9) — the initial number of seconds required to prepare one potion and the number of manapoints Anton can use.

The third line contains m integers a_{i} (1 ≤ a_{i} < x) — the number of seconds it will take to prepare one potion if the i-th spell of the first type is used.

The fourth line contains m integers b_{i} (1 ≤ b_{i} ≤ 2·10^9) — the number of manapoints to use the i-th spell of the first type.

There are k integers c_{i} (1 ≤ c_{i} ≤ n) in the fifth line — the number of potions that will be immediately created if the i-th spell of the second type is used. It's guaranteed that c_{i} are not decreasing, i.e. c_{i} ≤ c_{j} if i < j.

The sixth line contains k integers d_{i} (1 ≤ d_{i} ≤ 2·10^9) — the number of manapoints required to use the i-th spell of the second type. It's guaranteed that d_{i} are not decreasing, i.e. d_{i} ≤ d_{j} if i < j.


-----Output-----

Print one integer — the minimum time one has to spent in order to prepare n potions.


-----Examples-----
Input
20 3 2
10 99
2 4 3
20 10 40
4 15
10 80

Output
20

Input
20 3 2
10 99
2 4 3
200 100 400
4 15
100 800

Output
200



-----Note-----

In the first sample, the optimum answer is to use the second spell of the first type that costs 10 manapoints. Thus, the preparation time of each potion changes to 4 seconds. Also, Anton should use the second spell of the second type to instantly prepare 15 potions spending 80 manapoints. The total number of manapoints used is 10 + 80 = 90, and the preparation time is 4·5 = 20 seconds (15 potions were prepared instantly, and the remaining 5 will take 4 seconds each).

In the second sample, Anton can't use any of the spells, so he just prepares 20 potions, spending 10 seconds on each of them and the answer is 20·10 = 200.","def min_time_to_prepare_potions(n, m, k, x, s, a, b, c, d):
    min_time = n * x

    # Try using only the second type of spell
    for i in range(k):
        if d[i] <= s:
            remaining_potions = max(0, n - c[i])
            time_with_spell = remaining_potions * x
            min_time = min(min_time, time_with_spell)
    
    # Try using only the first type of spell
    for i in range(m):
        if b[i] <= s:
            time_with_spell = n * a[i]
            min_time = min(min_time, time_with_spell)

    # Try using both types of spells
    for i in range(m):
        if b[i] <= s:
            remaining_manapoints = s - b[i]
            for j in range(k):
                if d[j] <= remaining_manapoints:
                    remaining_potions = max(0, n - c[j])
                    time_with_both_spells = remaining_potions * a[i]
                    min_time = min(min_time, time_with_both_spells)
                else:
                    break

    return min_time

if __name__ == ""__main__"":
    import sys
    input = sys.stdin.read
    data = input().split()
    
    n = int(data[0])
    m = int(data[1])
    k = int(data[2])
    x = int(data[3])
    s = int(data[4])
    
    a = list(map(int, data[5:5+m]))
    b = list(map(int, data[5+m:5+2*m]))
    c = list(map(int, data[5+2*m:5+2*m+k]))
    d = list(map(int, data[5+2*m+k:5+2*m+2*k]))

    result = min_time_to_prepare_potions(n, m, k, x, s, a, b, c, d)
    print(result)
",3,True,False,False,True,True,True,True,True,True,True,True,True,True,153_gpt-4o,0.6678398532199493,0.17407609562715398,0.5833333333333334
159,apps,gpt-4o,qwen2.5-7b-instruct,"Berland annual chess tournament is coming!

Organizers have gathered 2·n chess players who should be divided into two teams with n people each. The first team is sponsored by BerOil and the second team is sponsored by BerMobile. Obviously, organizers should guarantee the win for the team of BerOil.

Thus, organizers should divide all 2·n players into two teams with n people each in such a way that the first team always wins.

Every chess player has its rating r_{i}. It is known that chess player with the greater rating always wins the player with the lower rating. If their ratings are equal then any of the players can win.

After teams assignment there will come a drawing to form n pairs of opponents: in each pair there is a player from the first team and a player from the second team. Every chess player should be in exactly one pair. Every pair plays once. The drawing is totally random.

Is it possible to divide all 2·n players into two teams with n people each so that the player from the first team in every pair wins regardless of the results of the drawing?


-----Input-----

The first line contains one integer n (1 ≤ n ≤ 100).

The second line contains 2·n integers a_1, a_2, ... a_2n (1 ≤ a_{i} ≤ 1000).


-----Output-----

If it's possible to divide all 2·n players into two teams with n people each so that the player from the first team in every pair wins regardless of the results of the drawing, then print ""YES"". Otherwise print ""NO"".


-----Examples-----
Input
2
1 3 2 4

Output
YES

Input
1
3 3

Output
NO","# Read input
n = int(input())
ratings = list(map(int, input().split()))

# Sort the ratings
ratings.sort()

# Split the sorted ratings into two teams
team1 = ratings[:n]
team2 = ratings[n:]

# Check if every player in team1 has a higher rating than every player in team2
possible = all(team1[i] < team2[i] for i in range(n))

# Output the result
if possible:
    print(""YES"")
else:
    print(""NO"")
",3,False,False,False,True,True,True,True,False,True,True,False,False,True,159_gpt-4o,0.5495298594419469,0.048886123808425795,0.5833333333333334
162,apps,gpt-4o,qwen2.5-7b-instruct,"Cat Furrier Transform is a popular algorithm among cat programmers to create longcats. As one of the greatest cat programmers ever exist, Neko wants to utilize this algorithm to create the perfect longcat.

Assume that we have a cat with a number $x$. A perfect longcat is a cat with a number equal $2^m - 1$ for some non-negative integer $m$. For example, the numbers $0$, $1$, $3$, $7$, $15$ and so on are suitable for the perfect longcats.

In the Cat Furrier Transform, the following operations can be performed on $x$:  (Operation A): you select any non-negative integer $n$ and replace $x$ with $x \oplus (2^n - 1)$, with $\oplus$ being a bitwise XOR operator. (Operation B): replace $x$ with $x + 1$. 

The first applied operation must be of type A, the second of type B, the third of type A again, and so on. Formally, if we number operations from one in the order they are executed, then odd-numbered operations must be of type A and the even-numbered operations must be of type B.

Neko wants to produce perfect longcats at industrial scale, thus for each cat Neko only wants to perform at most $40$ operations. Can you help Neko writing a transformation plan?

Note that it is not required to minimize the number of operations. You just need to use no more than $40$ operations.


-----Input-----

The only line contains a single integer $x$ ($1 \le x \le 10^6$).


-----Output-----

The first line should contain a single integer $t$ ($0 \le t \le 40$) — the number of operations to apply.

Then for each odd-numbered operation print the corresponding number $n_i$ in it. That is, print $\lceil \frac{t}{2} \rceil$ integers $n_i$ ($0 \le n_i \le 30$), denoting the replacement $x$ with $x \oplus (2^{n_i} - 1)$ in the corresponding step.

If there are multiple possible answers, you can print any of them. It is possible to show, that there is at least one answer in the constraints of this problem.


-----Examples-----
Input
39

Output
4
5 3 
Input
1

Output
0

Input
7

Output
0



-----Note-----

In the first test, one of the transforms might be as follows: $39 \to 56 \to 57 \to 62 \to 63$. Or more precisely: Pick $n = 5$. $x$ is transformed into $39 \oplus 31$, or $56$.  Increase $x$ by $1$, changing its value to $57$.  Pick $n = 3$. $x$ is transformed into $57 \oplus 7$, or $62$.  Increase $x$ by $1$, changing its value to $63 = 2^6 - 1$. 

In the second and third test, the number already satisfies the goal requirement.","def is_perfect_longcat(x):
    # Check if x is of the form 2^m - 1
    return (x & (x + 1)) == 0

def find_transform(x):
    operations = []
    count = 0
    while not is_perfect_longcat(x) and count < 40:
        if count % 2 == 0:
            # Operation A
            n = 0
            while (1 << n) - 1 <= x:
                n += 1
            # Find the highest bit position with 0
            while n > 0 and ((x >> (n - 1)) & 1) == 1:
                n -= 1
            if n == 0:
                break
            operations.append(n)
            x ^= (1 << n) - 1
        else:
            # Operation B
            x += 1
        count += 1
    
    return count, operations

# Read input
x = int(input())

t, ops = find_transform(x)

print(t)
for i in range(0, len(ops), 2):
    print(ops[i], end=' ')
",3,False,False,True,True,False,True,True,False,False,True,False,True,True,162_gpt-4o,0.8464195983686785,0.4031727745421858,0.7083333333333334
165,apps,gpt-4o,qwen2.5-7b-instruct,"It's a beautiful April day and Wallace is playing football with his friends. But his friends do not know that Wallace actually stayed home with Gromit and sent them his robotic self instead. Robo-Wallace has several advantages over the other guys. For example, he can hit the ball directly to the specified point. And yet, the notion of a giveaway is foreign to him. The combination of these features makes the Robo-Wallace the perfect footballer — as soon as the ball gets to him, he can just aim and hit the goal. He followed this tactics in the first half of the match, but he hit the goal rarely. The opposing team has a very good goalkeeper who catches most of the balls that fly directly into the goal. But Robo-Wallace is a quick thinker, he realized that he can cheat the goalkeeper. After all, they are playing in a football box with solid walls. Robo-Wallace can kick the ball to the other side, then the goalkeeper will not try to catch the ball. Then, if the ball bounces off the wall and flies into the goal, the goal will at last be scored.

Your task is to help Robo-Wallace to detect a spot on the wall of the football box, to which the robot should kick the ball, so that the ball bounces once and only once off this wall and goes straight to the goal. In the first half of the match Robo-Wallace got a ball in the head and was severely hit. As a result, some of the schemes have been damaged. Because of the damage, Robo-Wallace can only aim to his right wall (Robo-Wallace is standing with his face to the opposing team's goal).

The football box is rectangular. Let's introduce a two-dimensional coordinate system so that point (0, 0) lies in the lower left corner of the field, if you look at the box above. Robo-Wallace is playing for the team, whose goal is to the right. It is an improvised football field, so the gate of Robo-Wallace's rivals may be not in the middle of the left wall. [Image] 

In the given coordinate system you are given:   y_1, y_2 — the y-coordinates of the side pillars of the goalposts of robo-Wallace's opponents;  y_{w} — the y-coordinate of the wall to which Robo-Wallace is aiming;  x_{b}, y_{b} — the coordinates of the ball's position when it is hit;  r — the radius of the ball. 

A goal is scored when the center of the ball crosses the OY axis in the given coordinate system between (0, y_1) and (0, y_2). The ball moves along a straight line. The ball's hit on the wall is perfectly elastic (the ball does not shrink from the hit), the angle of incidence equals the angle of reflection. If the ball bounces off the wall not to the goal, that is, if it hits the other wall or the goal post, then the opposing team catches the ball and Robo-Wallace starts looking for miscalculation and gets dysfunctional. Such an outcome, if possible, should be avoided. We assume that the ball touches an object, if the distance from the center of the ball to the object is no greater than the ball radius r.


-----Input-----

The first and the single line contains integers y_1, y_2, y_{w}, x_{b}, y_{b}, r (1 ≤ y_1, y_2, y_{w}, x_{b}, y_{b} ≤ 10^6; y_1 < y_2 < y_{w}; y_{b} + r < y_{w}; 2·r < y_2 - y_1).

It is guaranteed that the ball is positioned correctly in the field, doesn't cross any wall, doesn't touch the wall that Robo-Wallace is aiming at. The goal posts can't be located in the field corners.


-----Output-----

If Robo-Wallace can't score a goal in the described manner, print ""-1"" (without the quotes). Otherwise, print a single number x_{w} — the abscissa of his point of aiming. 

If there are multiple points of aiming, print the abscissa of any of them. When checking the correctness of the answer, all comparisons are made with the permissible absolute error, equal to 10^{ - 8}. 

It is recommended to print as many characters after the decimal point as possible.


-----Examples-----
Input
4 10 13 10 3 1

Output
4.3750000000

Input
1 4 6 2 2 1

Output
-1

Input
3 10 15 17 9 2

Output
11.3333333333



-----Note-----

Note that in the first and third samples other correct values of abscissa x_{w} are also possible.","def find_aiming_point(y1, y2, yw, xb, yb, r):
    # Boundary conditions check
    if yb + r >= yw or y1 >= y2 or y1 + r >= y2 - r:
        return -1

    # Calculate the intersection point on the right wall
    # Using the geometry and reflection properties
    # The goal is to find the x_w such that the ball bounces and hits the goal
    
    # Using the fact that the reflection point must maintain the property of the line
    # We use the formula derived from the reflection geometry
    # slope = (yb - y_w) / (xb - x_w)
    # reflected_slope = (y_w - goal_y) / (x_w)
    
    # Choose a point on the goal line within the goal range
    y_goal_mid = (y1 + y2) / 2
    if y_goal_mid - r < y1 or y_goal_mid + r > y2:
        return -1

    # Calculate x_w
    x_w = xb - (2 * (yb - y_goal_mid) * (xb - 0)) / (y_goal_mid - yb)
    
    if x_w <= 0:
        return -1

    return x_w

# Read input
import sys
input = sys.stdin.read
data = input().strip().split()

y1 = int(data[0])
y2 = int(data[1])
yw = int(data[2])
xb = int(data[3])
yb = int(data[4])
r = int(data[5])

# Calculate the result
result = find_aiming_point(y1, y2, yw, xb, yb, r)
if result == -1:
    print(result)
else:
    print(f""{result:.10f}"")
",3,False,False,False,True,True,True,True,True,False,True,True,True,False,165_gpt-4o,0.5836571653413781,0.08398384419307396,0.5833333333333334
166,apps,gpt-4o,qwen2.5-7b-instruct,"Vasiliy spent his vacation in a sanatorium, came back and found that he completely forgot details of his vacation! 

Every day there was a breakfast, a dinner and a supper in a dining room of the sanatorium (of course, in this order). The only thing that Vasiliy has now is a card from the dining room contaning notes how many times he had a breakfast, a dinner and a supper (thus, the card contains three integers). Vasiliy could sometimes have missed some meal, for example, he could have had a breakfast and a supper, but a dinner, or, probably, at some days he haven't been at the dining room at all.

Vasiliy doesn't remember what was the time of the day when he arrived to sanatorium (before breakfast, before dinner, before supper or after supper), and the time when he left it (before breakfast, before dinner, before supper or after supper). So he considers any of these options. After Vasiliy arrived to the sanatorium, he was there all the time until he left. Please note, that it's possible that Vasiliy left the sanatorium on the same day he arrived.

According to the notes in the card, help Vasiliy determine the minimum number of meals in the dining room that he could have missed. We shouldn't count as missed meals on the arrival day before Vasiliy's arrival and meals on the departure day after he left.


-----Input-----

The only line contains three integers b, d and s (0 ≤ b, d, s ≤ 10^18,  b + d + s ≥ 1) — the number of breakfasts, dinners and suppers which Vasiliy had during his vacation in the sanatorium. 


-----Output-----

Print single integer — the minimum possible number of meals which Vasiliy could have missed during his vacation. 


-----Examples-----
Input
3 2 1

Output
1


Input
1 0 0

Output
0


Input
1 1 1

Output
0


Input
1000000000000000000 0 1000000000000000000

Output
999999999999999999





-----Note-----

In the first sample, Vasiliy could have missed one supper, for example, in case he have arrived before breakfast, have been in the sanatorium for two days (including the day of arrival) and then have left after breakfast on the third day. 

In the second sample, Vasiliy could have arrived before breakfast, have had it, and immediately have left the sanatorium, not missing any meal.

In the third sample, Vasiliy could have been in the sanatorium for one day, not missing any meal.","b, d, s = map(int, input().split())

# Find the maximum number of meals taken in any category
max_meals = max(b, d, s)

# Calculate the potential missed meals for each category
missed_b = max(0, max_meals - 1 - b)
missed_d = max(0, max_meals - 1 - d)
missed_s = max(0, max_meals - 1 - s)

# The total number of missed meals is the sum of missed meals in each category
total_missed_meals = missed_b + missed_d + missed_s

print(total_missed_meals)
",3,True,False,False,True,True,True,True,False,False,True,False,False,False,166_gpt-4o,0.8860276206871581,0.4730215616498261,0.75
170,apps,gpt-4o,qwen2.5-7b-instruct,"Kolya Gerasimov loves kefir very much. He lives in year 1984 and knows all the details of buying this delicious drink. One day, as you probably know, he found himself in year 2084, and buying kefir there is much more complicated.

Kolya is hungry, so he went to the nearest milk shop. In 2084 you may buy kefir in a plastic liter bottle, that costs a rubles, or in glass liter bottle, that costs b rubles. Also, you may return empty glass bottle and get c (c < b) rubles back, but you cannot return plastic bottles.

Kolya has n rubles and he is really hungry, so he wants to drink as much kefir as possible. There were no plastic bottles in his 1984, so Kolya doesn't know how to act optimally and asks for your help.


-----Input-----

First line of the input contains a single integer n (1 ≤ n ≤ 10^18) — the number of rubles Kolya has at the beginning.

Then follow three lines containing integers a, b and c (1 ≤ a ≤ 10^18, 1 ≤ c < b ≤ 10^18) — the cost of one plastic liter bottle, the cost of one glass liter bottle and the money one can get back by returning an empty glass bottle, respectively.


-----Output-----

Print the only integer — maximum number of liters of kefir, that Kolya can drink.


-----Examples-----
Input
10
11
9
8

Output
2

Input
10
5
6
1

Output
2



-----Note-----

In the first sample, Kolya can buy one glass bottle, then return it and buy one more glass bottle. Thus he will drink 2 liters of kefir.

In the second sample, Kolya can buy two plastic bottle and get two liters of kefir, or he can buy one liter glass bottle, then return it and buy one plastic bottle. In both cases he will drink two liters of kefir.","n = int(input())
a = int(input())
b = int(input())
c = int(input())

if a <= b - c:
    # If plastic bottle is cheaper or same as effective cost of glass bottle
    print(n // a)
else:
    # Use as many rubles as possible to buy and return glass bottles
    k = (n - b) // (b - c) + 1  # Max number of glass bottles that can be bought and returned
    remaining_rubles = n - k * (b - c)
    
    if remaining_rubles < b:
        # If remaining rubles are less than cost of one glass bottle, buy plastic bottles
        print(k + remaining_rubles // a)
    else:
        # Otherwise, buy one more glass bottle
        print(k + 1)
",3,False,False,False,True,True,True,True,False,False,True,True,True,True,170_gpt-4o,0.8439146449438588,0.39873453622229693,0.7083333333333334
179,apps,gpt-4o,qwen2.5-7b-instruct,"A telephone number is a sequence of exactly $11$ digits such that its first digit is 8.

Vasya and Petya are playing a game. Initially they have a string $s$ of length $n$ ($n$ is odd) consisting of digits. Vasya makes the first move, then players alternate turns. In one move the player must choose a character and erase it from the current string. For example, if the current string 1121, after the player's move it may be 112, 111 or 121. The game ends when the length of string $s$ becomes 11. If the resulting string is a telephone number, Vasya wins, otherwise Petya wins.

You have to determine if Vasya has a winning strategy (that is, if Vasya can win the game no matter which characters Petya chooses during his moves).


-----Input-----

The first line contains one integer $n$ ($13 \le n < 10^5$, $n$ is odd) — the length of string $s$.

The second line contains the string $s$ ($|s| = n$) consisting only of decimal digits.


-----Output-----

If Vasya has a strategy that guarantees him victory, print YES.

Otherwise print NO.


-----Examples-----
Input
13
8380011223344

Output
YES

Input
15
807345619350641

Output
NO



-----Note-----

In the first example Vasya needs to erase the second character. Then Petya cannot erase a character from the remaining string 880011223344 so that it does not become a telephone number.

In the second example after Vasya's turn Petya can erase one character character 8. The resulting string can't be a telephone number, because there is no digit 8 at all.","# Read the length of the string
n = int(input().strip())

# Read the string itself
s = input().strip()

# Determine the number of moves each player will make
moves = (n - 11) // 2

# Count the number of occurrences of '8' in the first (n - 11) characters
count_8 = s[:n-11].count('8')

# Vasya wins if there are more '8's than the number of non-'8' characters Petya can remove
if count_8 > moves:
    print(""YES"")
else:
    print(""NO"")
",3,False,False,True,True,True,True,False,False,False,False,False,True,True,179_gpt-4o,0.6910845539229723,0.19841675305164583,0.5833333333333334
183,apps,gpt-4o,qwen2.5-7b-instruct,"Carl is a beginner magician. He has a blue, b violet and c orange magic spheres. In one move he can transform two spheres of the same color into one sphere of any other color. To make a spell that has never been seen before, he needs at least x blue, y violet and z orange spheres. Can he get them (possible, in multiple actions)?


-----Input-----

The first line of the input contains three integers a, b and c (0 ≤ a, b, c ≤ 1 000 000) — the number of blue, violet and orange spheres that are in the magician's disposal.

The second line of the input contains three integers, x, y and z (0 ≤ x, y, z ≤ 1 000 000) — the number of blue, violet and orange spheres that he needs to get.


-----Output-----

If the wizard is able to obtain the required numbers of spheres, print ""Yes"". Otherwise, print ""No"".


-----Examples-----
Input
4 4 0
2 1 2

Output
Yes

Input
5 6 1
2 7 2

Output
No

Input
3 3 3
2 2 2

Output
Yes



-----Note-----

In the first sample the wizard has 4 blue and 4 violet spheres. In his first action he can turn two blue spheres into one violet one. After that he will have 2 blue and 5 violet spheres. Then he turns 4 violet spheres into 2 orange spheres and he ends up with 2 blue, 1 violet and 2 orange spheres, which is exactly what he needs.","# Read input values
a, b, c = map(int, input().split())
x, y, z = map(int, input().split())

# Calculate the deficit/surplus for each color
deficit_blue = max(0, x - a)
deficit_violet = max(0, y - b)
deficit_orange = max(0, z - c)

# Calculate how many extra spheres we have
extra_blue = max(0, a - x)
extra_violet = max(0, b - y)
extra_orange = max(0, c - z)

# Each surplus sphere can potentially be used to create another sphere
# Transforming two surplus spheres into one needed sphere
# Thus, the number of effective extra spheres is half of the surplus count (integer division)
extra_spheres = (extra_blue // 2) + (extra_violet // 2) + (extra_orange // 2)

# Calculate the total deficit
total_deficit = deficit_blue + deficit_violet + deficit_orange

# Check if the total surplus is enough to cover the total deficit
if extra_spheres >= total_deficit:
    print(""Yes"")
else:
    print(""No"")
",3,True,False,False,True,True,True,True,True,True,True,True,True,False,183_gpt-4o,0.6821758530838687,0.18748886798468845,0.625
185,apps,gpt-4o,qwen2.5-7b-instruct,"You are at a water bowling training. There are l people who play with their left hand, r people, who play with their right hand, and a ambidexters, who can play with left or right hand.

The coach decided to form a team of even number of players, exactly half of the players should play with their right hand, and exactly half of the players should play with their left hand. One player should use only on of his hands.

Ambidexters play as well with their right hand as with their left hand. In the team, an ambidexter can play with their left hand, or with their right hand.

Please find the maximum possible size of the team, where equal number of players use their left and right hands, respectively.


-----Input-----

The only line contains three integers l, r and a (0 ≤ l, r, a ≤ 100) — the number of left-handers, the number of right-handers and the number of ambidexters at the training. 


-----Output-----

Print a single even integer — the maximum number of players in the team. It is possible that the team can only have zero number of players.


-----Examples-----
Input
1 4 2

Output
6

Input
5 5 5

Output
14

Input
0 2 0

Output
0



-----Note-----

In the first example you can form a team of 6 players. You should take the only left-hander and two ambidexters to play with left hand, and three right-handers to play with right hand. The only person left can't be taken into the team.

In the second example you can form a team of 14 people. You have to take all five left-handers, all five right-handers, two ambidexters to play with left hand and two ambidexters to play with right hand.","l, r, a = map(int, input().split())

# Step 1: Balance the number of left-handers and right-handers using ambidexters
# First, equalize l and r using ambidexters
if l < r:
    l += min(a, r - l)
    a -= min(a, r - l)
elif r < l:
    r += min(a, l - r)
    a -= min(a, l - r)

# Step 2: If there are still ambidexters left, they should be used in pairs
# Each pair of ambidexters can add 2 to the team, one for each side
max_team_size = l + r + (a // 2) * 2

# Ensure the team size is even
if max_team_size % 2 != 0:
    max_team_size -= 1

print(max_team_size)
",3,False,False,False,True,True,True,True,True,False,True,True,False,True,185_gpt-4o,0.8817607753852287,0.4611365399089565,0.75
189,apps,gpt-4o,qwen2.5-7b-instruct,"Daenerys Targaryen has an army consisting of k groups of soldiers, the i-th group contains a_{i} soldiers. She wants to bring her army to the other side of the sea to get the Iron Throne. She has recently bought an airplane to carry her army through the sea. The airplane has n rows, each of them has 8 seats. We call two seats neighbor, if they are in the same row and in seats {1, 2}, {3, 4}, {4, 5}, {5, 6} or {7, 8}.

 [Image] A row in the airplane 

Daenerys Targaryen wants to place her army in the plane so that there are no two soldiers from different groups sitting on neighboring seats.

Your task is to determine if there is a possible arranging of her army in the airplane such that the condition above is satisfied.


-----Input-----

The first line contains two integers n and k (1 ≤ n ≤ 10000, 1 ≤ k ≤ 100) — the number of rows and the number of groups of soldiers, respectively.

The second line contains k integers a_1, a_2, a_3, ..., a_{k} (1 ≤ a_{i} ≤ 10000), where a_{i} denotes the number of soldiers in the i-th group.

It is guaranteed that a_1 + a_2 + ... + a_{k} ≤ 8·n.


-----Output-----

If we can place the soldiers in the airplane print ""YES"" (without quotes). Otherwise print ""NO"" (without quotes).

You can choose the case (lower or upper) for each letter arbitrary.


-----Examples-----
Input
2 2
5 8

Output
YES

Input
1 2
7 1

Output
NO

Input
1 2
4 4

Output
YES

Input
1 4
2 2 1 2

Output
YES



-----Note-----

In the first sample, Daenerys can place the soldiers like in the figure below:

 [Image] 

In the second sample, there is no way to place the soldiers in the plane since the second group soldier will always have a seat neighboring to someone from the first group.

In the third example Daenerys can place the first group on seats (1, 2, 7, 8), and the second group an all the remaining seats.

In the fourth example she can place the first two groups on seats (1, 2) and (7, 8), the third group on seats (3), and the fourth group on seats (5, 6).","# Read input
import sys
input = sys.stdin.read
data = input().split()

n = int(data[0])
k = int(data[1])
groups = list(map(int, data[2:]))

# Calculate the number of rows and the maximum pairs per row
max_pairs_per_row = 4 * n

# Count the total number of pairs needed
total_pairs_needed = 0
for soldiers in groups:
    total_pairs_needed += (soldiers + 1) // 2

# Check if the total pairs needed can fit into the available pairs
if total_pairs_needed <= max_pairs_per_row:
    print(""YES"")
else:
    print(""NO"")
",3,False,False,False,True,True,True,False,False,False,True,False,False,False,189_gpt-4o,0.6100422339558635,0.11097273961994797,0.5833333333333334
193,apps,gpt-4o,qwen2.5-7b-instruct,"Memory is now interested in the de-evolution of objects, specifically triangles. He starts with an equilateral triangle of side length x, and he wishes to perform operations to obtain an equilateral triangle of side length y.

In a single second, he can modify the length of a single side of the current triangle such that it remains a non-degenerate triangle (triangle of positive area). At any moment of time, the length of each side should be integer.

What is the minimum number of seconds required for Memory to obtain the equilateral triangle of side length y?


-----Input-----

The first and only line contains two integers x and y (3 ≤ y < x ≤ 100 000) — the starting and ending equilateral triangle side lengths respectively.


-----Output-----

Print a single integer — the minimum number of seconds required for Memory to obtain the equilateral triangle of side length y if he starts with the equilateral triangle of side length x.


-----Examples-----
Input
6 3

Output
4

Input
8 5

Output
3

Input
22 4

Output
6



-----Note-----

In the first sample test, Memory starts with an equilateral triangle of side length 6 and wants one of side length 3. Denote a triangle with sides a, b, and c as (a, b, c). Then, Memory can do $(6,6,6) \rightarrow(6,6,3) \rightarrow(6,4,3) \rightarrow(3,4,3) \rightarrow(3,3,3)$.

In the second sample test, Memory can do $(8,8,8) \rightarrow(8,8,5) \rightarrow(8,5,5) \rightarrow(5,5,5)$.

In the third sample test, Memory can do: $(22,22,22) \rightarrow(7,22,22) \rightarrow(7,22,16) \rightarrow(7,10,16) \rightarrow(7,10,4) \rightarrow$

$(7,4,4) \rightarrow(4,4,4)$.","x, y = map(int, input().split())

# The minimum number of seconds required to transform the triangle of side length x to side length y
# can be computed as (x - y) / 2 plus the remainder when (x - y) is divided by 2.
# This is because we can decrease each side by 1 in each second, and for each decrease of 1, we can
# reduce the total side lengths by 3. So we need (x - y) // 2 steps to reduce two sides in each step
# and one additional step if there is a remainder.

print((x - y) // 2 + (x - y) % 2)
",3,False,False,False,False,False,False,False,False,False,True,False,False,False,193_gpt-4o,0.8516155705395227,0.4075143889266759,0.75
194,apps,gpt-4o,qwen2.5-7b-instruct,"The determinant of a matrix 2 × 2 is defined as follows:$\operatorname{det} \left(\begin{array}{ll}{a} & {b} \\{c} & {d} \end{array} \right) = a d - b c$

A matrix is called degenerate if its determinant is equal to zero. 

The norm ||A|| of a matrix A is defined as a maximum of absolute values of its elements.

You are given a matrix $A = \left(\begin{array}{ll}{a} & {b} \\{c} & {d} \end{array} \right)$. Consider any degenerate matrix B such that norm ||A - B|| is minimum possible. Determine ||A - B||.


-----Input-----

The first line contains two integers a and b (|a|, |b| ≤ 10^9), the elements of the first row of matrix A. 

The second line contains two integers c and d (|c|, |d| ≤ 10^9) the elements of the second row of matrix A.


-----Output-----

Output a single real number, the minimum possible value of ||A - B||. Your answer is considered to be correct if its absolute or relative error does not exceed 10^{ - 9}.


-----Examples-----
Input
1 2
3 4

Output
0.2000000000

Input
1 0
0 1

Output
0.5000000000



-----Note-----

In the first sample matrix B is $\left(\begin{array}{ll}{1.2} & {1.8} \\{2.8} & {4.2} \end{array} \right)$

In the second sample matrix B is $\left(\begin{array}{ll}{0.5} & {0.5} \\{0.5} & {0.5} \end{array} \right)$","import sys
input = sys.stdin.read

def min_norm(A):
    a, b, c, d = A[0][0], A[0][1], A[1][0], A[1][1]
    det = a * d - b * c
    
    if det == 0:
        return 0.0
    
    # Calculate the minimum adjustments
    if abs(a) >= max(abs(b), abs(c), abs(d)):
        # Adjust a
        a_prime = (b * c) / d if d != 0 else 0
        min_norm_value = abs(a - a_prime)
    elif abs(b) >= max(abs(a), abs(c), abs(d)):
        # Adjust b
        b_prime = (a * d) / c if c != 0 else 0
        min_norm_value = abs(b - b_prime)
    elif abs(c) >= max(abs(a), abs(b), abs(d)):
        # Adjust c
        c_prime = (a * d) / b if b != 0 else 0
        min_norm_value = abs(c - c_prime)
    else:
        # Adjust d
        d_prime = (b * c) / a if a != 0 else 0
        min_norm_value = abs(d - d_prime)
    
    return min_norm_value

def main():
    data = input().split()
    a, b = int(data[0]), int(data[1])
    c, d = int(data[2]), int(data[3])
    
    A = [[a, b], [c, d]]
    result = min_norm(A)
    print(f""{result:.10f}"")

if __name__ == ""__main__"":
    main()
",3,False,False,False,False,True,True,True,False,False,False,False,False,False,194_gpt-4o,0.6392581888432156,0.1385062008069428,0.5
197,apps,gpt-4o,qwen2.5-7b-instruct,"Nastya received a gift on New Year — a magic wardrobe. It is magic because in the end of each month the number of dresses in it doubles (i.e. the number of dresses becomes twice as large as it is in the beginning of the month).

Unfortunately, right after the doubling the wardrobe eats one of the dresses (if any) with the 50% probability. It happens every month except the last one in the year. 

Nastya owns x dresses now, so she became interested in the expected number of dresses she will have in one year. Nastya lives in Byteland, so the year lasts for k + 1 months.

Nastya is really busy, so she wants you to solve this problem. You are the programmer, after all. Also, you should find the answer modulo 10^9 + 7, because it is easy to see that it is always integer.


-----Input-----

The only line contains two integers x and k (0 ≤ x, k ≤ 10^18), where x is the initial number of dresses and k + 1 is the number of months in a year in Byteland.


-----Output-----

In the only line print a single integer — the expected number of dresses Nastya will own one year later modulo 10^9 + 7.


-----Examples-----
Input
2 0

Output
4

Input
2 1

Output
7

Input
3 2

Output
21



-----Note-----

In the first example a year consists on only one month, so the wardrobe does not eat dresses at all.

In the second example after the first month there are 3 dresses with 50% probability and 4 dresses with 50% probability. Thus, in the end of the year there are 6 dresses with 50% probability and 8 dresses with 50% probability. This way the answer for this test is (6 + 8) / 2 = 7.","MOD = 10**9 + 7

def power_mod(base, exponent, mod):
    result = 1
    while exponent > 0:
        if exponent % 2 == 1:
            result = (result * base) % mod
        base = (base * base) % mod
        exponent //= 2
    return result

def expected_dresses(x, k):
    if x == 0:
        return 0
    # Calculate (2^(k+1) - 1) % MOD
    power = power_mod(2, k + 1, MOD)
    result = (x * (power - 1) % MOD) % MOD
    return result

# Read input
import sys
input = sys.stdin.read
x, k = map(int, input().split())

# Print the result
print(expected_dresses(x, k))
",3,False,True,False,True,False,True,True,False,False,False,True,True,True,197_gpt-4o,0.4348406407739015,-0.06378777132990125,0.5416666666666666
212,apps,gpt-4o,qwen2.5-7b-instruct,"Manao is taking part in a quiz. The quiz consists of n consecutive questions. A correct answer gives one point to the player. The game also has a counter of consecutive correct answers. When the player answers a question correctly, the number on this counter increases by 1. If the player answers a question incorrectly, the counter is reset, that is, the number on it reduces to 0. If after an answer the counter reaches the number k, then it is reset, and the player's score is doubled. Note that in this case, first 1 point is added to the player's score, and then the total score is doubled. At the beginning of the game, both the player's score and the counter of consecutive correct answers are set to zero.

Manao remembers that he has answered exactly m questions correctly. But he does not remember the order in which the questions came. He's trying to figure out what his minimum score may be. Help him and compute the remainder of the corresponding number after division by 1000000009 (10^9 + 9).


-----Input-----

The single line contains three space-separated integers n, m and k (2 ≤ k ≤ n ≤ 10^9; 0 ≤ m ≤ n).


-----Output-----

Print a single integer — the remainder from division of Manao's minimum possible score in the quiz by 1000000009 (10^9 + 9).


-----Examples-----
Input
5 3 2

Output
3

Input
5 4 2

Output
6



-----Note-----

Sample 1. Manao answered 3 questions out of 5, and his score would double for each two consecutive correct answers. If Manao had answered the first, third and fifth questions, he would have scored as much as 3 points.

Sample 2. Now Manao answered 4 questions. The minimum possible score is obtained when the only wrong answer is to the question 4.

Also note that you are asked to minimize the score and not the remainder of the score modulo 1000000009. For example, if Manao could obtain either 2000000000 or 2000000020 points, the answer is 2000000000 mod 1000000009, even though 2000000020 mod 1000000009 is a smaller number.","MOD = 1000000009

def min_possible_score(n, m, k):
    # Calculate the maximum number of times we can achieve k consecutive correct answers
    max_full_sets = m // k
    remaining_correct = m % k
    
    # Calculate the minimum possible score
    if m <= n - n // k:
        # If we can avoid doubling
        score = m % MOD
    else:
        # We need to calculate the minimum score with doubling
        excess_full_sets = max_full_sets - (n - m) // (k - 1)
        remaining_correct_answers = m - excess_full_sets * k
        
        # Calculate the score with the excess full sets causing doubling
        score = (remaining_correct_answers + k * (pow(2, excess_full_sets, MOD) - 1) * pow(2, MOD-2, MOD)) % MOD
    
    return score

# Read input values
n, m, k = map(int, input().split())

# Print the minimum possible score
print(min_possible_score(n, m, k))
",3,False,False,False,True,True,True,True,True,True,True,False,False,True,212_gpt-4o,0.7535290524325498,0.26601355057168224,0.7083333333333334
216,apps,gpt-4o,qwen2.5-7b-instruct,"Polycarp loves lowercase letters and dislikes uppercase ones. Once he got a string s consisting only of lowercase and uppercase Latin letters.

Let A be a set of positions in the string. Let's call it pretty if following conditions are met:  letters on positions from A in the string are all distinct and lowercase;  there are no uppercase letters in the string which are situated between positions from A (i.e. there is no such j that s[j] is an uppercase letter, and a_1 < j < a_2 for some a_1 and a_2 from A). 

Write a program that will determine the maximum number of elements in a pretty set of positions.


-----Input-----

The first line contains a single integer n (1 ≤ n ≤ 200) — length of string s.

The second line contains a string s consisting of lowercase and uppercase Latin letters.


-----Output-----

Print maximum number of elements in pretty set of positions for string s.


-----Examples-----
Input
11
aaaaBaabAbA

Output
2

Input
12
zACaAbbaazzC

Output
3

Input
3
ABC

Output
0



-----Note-----

In the first example the desired positions might be 6 and 8 or 7 and 8. Positions 6 and 7 contain letters 'a', position 8 contains letter 'b'. The pair of positions 1 and 8 is not suitable because there is an uppercase letter 'B' between these position.

In the second example desired positions can be 7, 8 and 11. There are other ways to choose pretty set consisting of three elements.

In the third example the given string s does not contain any lowercase letters, so the answer is 0.","n = int(input())
s = input()

max_count = 0
current_set = set()
current_count = 0

for char in s:
    if char.islower():
        if char not in current_set:
            current_set.add(char)
            current_count += 1
    else:
        max_count = max(max_count, current_count)
        current_set.clear()
        current_count = 0

# Check the count after the last segment
max_count = max(max_count, current_count)

print(max_count)
",3,True,False,True,True,True,True,True,True,True,True,False,True,False,216_gpt-4o,0.802697388020284,0.33781712770655775,0.6666666666666666
218,apps,gpt-4o,qwen2.5-7b-instruct,"A bus moves along the coordinate line Ox from the point x = 0 to the point x = a. After starting from the point x = 0, it reaches the point x = a, immediately turns back and then moves to the point x = 0. After returning to the point x = 0 it immediately goes back to the point x = a and so on. Thus, the bus moves from x = 0 to x = a and back. Moving from the point x = 0 to x = a or from the point x = a to x = 0 is called a bus journey. In total, the bus must make k journeys.

The petrol tank of the bus can hold b liters of gasoline. To pass a single unit of distance the bus needs to spend exactly one liter of gasoline. The bus starts its first journey with a full petrol tank.

There is a gas station in point x = f. This point is between points x = 0 and x = a. There are no other gas stations on the bus route. While passing by a gas station in either direction the bus can stop and completely refuel its tank. Thus, after stopping to refuel the tank will contain b liters of gasoline.

What is the minimum number of times the bus needs to refuel at the point x = f to make k journeys? The first journey starts in the point x = 0.


-----Input-----

The first line contains four integers a, b, f, k (0 < f < a ≤ 10^6, 1 ≤ b ≤ 10^9, 1 ≤ k ≤ 10^4) — the endpoint of the first bus journey, the capacity of the fuel tank of the bus, the point where the gas station is located, and the required number of journeys.


-----Output-----

Print the minimum number of times the bus needs to refuel to make k journeys. If it is impossible for the bus to make k journeys, print -1.


-----Examples-----
Input
6 9 2 4

Output
4

Input
6 10 2 4

Output
2

Input
6 5 4 3

Output
-1



-----Note-----

In the first example the bus needs to refuel during each journey.

In the second example the bus can pass 10 units of distance without refueling. So the bus makes the whole first journey, passes 4 units of the distance of the second journey and arrives at the point with the gas station. Then it can refuel its tank, finish the second journey and pass 2 units of distance from the third journey. In this case, it will again arrive at the point with the gas station. Further, he can refill the tank up to 10 liters to finish the third journey and ride all the way of the fourth journey. At the end of the journey the tank will be empty. 

In the third example the bus can not make all 3 journeys because if it refuels during the second journey, the tanks will contain only 5 liters of gasoline, but the bus needs to pass 8 units of distance until next refueling.","# Read input values
a, b, f, k = map(int, input().split())

# Initialize the number of refuels
refuels = 0
# Initial fuel in the tank
fuel = b

# Calculate the total distance to travel
total_distance = 2 * a * k

# Current position of the bus
current_position = 0

# Loop through each journey
for i in range(k):
    if i % 2 == 0:  # Even index: moving from 0 to a
        distance_to_travel = a
        distance_to_fuel_station = f
        distance_after_fuel_station = a - f
    else:  # Odd index: moving from a to 0
        distance_to_travel = a
        distance_to_fuel_station = a - f
        distance_after_fuel_station = f
    
    # Check fuel before reaching the fuel station
    if fuel < distance_to_fuel_station:
        print(-1)
        exit()
    
    # Use fuel to reach the fuel station
    fuel -= distance_to_fuel_station
    
    # Check if the bus needs to refuel at the fuel station
    if fuel < distance_after_fuel_station:
        refuels += 1
        fuel = b
    
    # Use fuel to complete the journey
    fuel -= distance_after_fuel_station
    
    # Update the current position of the bus
    current_position = (current_position + distance_to_travel) % (2 * a)

# Output the total number of refuels
print(refuels)
",3,False,False,False,True,True,True,True,True,False,True,False,False,True,218_gpt-4o,0.8700674055246895,0.43928919623725143,0.75
236,apps,gpt-4o,qwen2.5-7b-instruct,"After passing a test, Vasya got himself a box of $n$ candies. He decided to eat an equal amount of candies each morning until there are no more candies. However, Petya also noticed the box and decided to get some candies for himself.

This means the process of eating candies is the following: in the beginning Vasya chooses a single integer $k$, same for all days. After that, in the morning he eats $k$ candies from the box (if there are less than $k$ candies in the box, he eats them all), then in the evening Petya eats $10\%$ of the candies remaining in the box. If there are still candies left in the box, the process repeats — next day Vasya eats $k$ candies again, and Petya — $10\%$ of the candies left in a box, and so on.

If the amount of candies in the box is not divisible by $10$, Petya rounds the amount he takes from the box down. For example, if there were $97$ candies in the box, Petya would eat only $9$ of them. In particular, if there are less than $10$ candies in a box, Petya won't eat any at all.

Your task is to find out the minimal amount of $k$ that can be chosen by Vasya so that he would eat at least half of the $n$ candies he initially got. Note that the number $k$ must be integer.


-----Input-----

The first line contains a single integer $n$ ($1 \leq n \leq 10^{18}$) — the initial amount of candies in the box.


-----Output-----

Output a single integer — the minimal amount of $k$ that would allow Vasya to eat at least half of candies he got.


-----Example-----
Input
68

Output
3



-----Note-----

In the sample, the amount of candies, with $k=3$, would change in the following way (Vasya eats first):

$68 \to 65 \to 59 \to 56 \to 51 \to 48 \to 44 \to 41 \\ \to 37 \to 34 \to 31 \to 28 \to 26 \to 23 \to 21 \to 18 \to 17 \to 14 \\ \to 13 \to 10 \to 9 \to 6 \to 6 \to 3 \to 3 \to 0$.

In total, Vasya would eat $39$ candies, while Petya — $29$.","def minimal_k_to_eat_half_candies(n):
    def can_vasya_eat_half(k):
        total = n
        vasya_eaten = 0
        
        while total > 0:
            # Vasya eats k candies
            if total < k:
                vasya_eaten += total
                total = 0
            else:
                vasya_eaten += k
                total -= k
            
            # Petya eats 10% of remaining candies (rounded down)
            total -= total // 10
        
        return vasya_eaten * 2 >= n
    
    left, right = 1, n
    while left < right:
        mid = (left + right) // 2
        if can_vasya_eat_half(mid):
            right = mid
        else:
            left = mid + 1
    
    return left

if __name__ == ""__main__"":
    n = int(input().strip())
    print(minimal_k_to_eat_half_candies(n))
",3,True,True,False,True,True,True,True,False,True,True,True,True,True,236_gpt-4o,0.6336973284867263,0.13378453261928228,0.625
240,apps,gpt-4o,qwen2.5-7b-instruct,"You are given a rectangular grid of lattice points from (0, 0) to (n, m) inclusive. You have to choose exactly 4 different points to build a polyline possibly with self-intersections and self-touching. This polyline should be as long as possible.

A polyline defined by points p_1, p_2, p_3, p_4 consists of the line segments p_1 p_2, p_2 p_3, p_3 p_4, and its length is the sum of the lengths of the individual line segments.


-----Input-----

The only line of the input contains two integers n and m (0 ≤ n, m ≤ 1000). It is guaranteed that grid contains at least 4 different points.


-----Output-----

Print 4 lines with two integers per line separated by space — coordinates of points p_1, p_2, p_3, p_4 in order which represent the longest possible polyline.

Judge program compares your answer and jury's answer with 10^{ - 6} precision.


-----Examples-----
Input
1 1

Output
1 1
0 0
1 0
0 1

Input
0 10

Output
0 1
0 10
0 0
0 9","def longest_polyline(n, m):
    if n >= 2 and m >= 2:
        # If both n and m are greater than or equal to 2, we can use this configuration
        points = [(0, 0), (n, 0), (n, m), (0, m)]
    elif n == 0:
        # If n is 0, we are limited to vertical movement
        points = [(0, 0), (0, m), (0, 1), (0, m-1)]
    elif m == 0:
        # If m is 0, we are limited to horizontal movement
        points = [(0, 0), (n, 0), (1, 0), (n-1, 0)]
    elif n == 1:
        # If n is 1, we have limited horizontal movement
        points = [(0, 0), (1, 0), (1, m), (0, m)]
    else:  # m == 1
        # If m is 1, we have limited vertical movement
        points = [(0, 0), (0, 1), (n, 1), (n, 0)]
    return points

# Read input
n, m = map(int, input().split())

# Get the longest polyline points
result = longest_polyline(n, m)

# Print the points
for point in result:
    print(point[0], point[1])
",3,False,False,False,True,True,True,True,True,True,True,True,True,True,240_gpt-4o,0.6184945952401372,0.12010016346952129,0.5416666666666666
249,apps,gpt-4o,qwen2.5-7b-instruct,"Memory and his friend Lexa are competing to get higher score in one popular computer game. Memory starts with score a and Lexa starts with score b. In a single turn, both Memory and Lexa get some integer in the range [ - k;k] (i.e. one integer among  - k,  - k + 1,  - k + 2, ...,  - 2,  - 1, 0, 1, 2, ..., k - 1, k) and add them to their current scores. The game has exactly t turns. Memory and Lexa, however, are not good at this game, so they both always get a random integer at their turn.

Memory wonders how many possible games exist such that he ends with a strictly higher score than Lexa. Two games are considered to be different if in at least one turn at least one player gets different score. There are (2k + 1)^2t games in total. Since the answer can be very large, you should print it modulo 10^9 + 7. Please solve this problem for Memory.


-----Input-----

The first and only line of input contains the four integers a, b, k, and t (1 ≤ a, b ≤ 100, 1 ≤ k ≤ 1000, 1 ≤ t ≤ 100) — the amount Memory and Lexa start with, the number k, and the number of turns respectively.


-----Output-----

Print the number of possible games satisfying the conditions modulo 1 000 000 007 (10^9 + 7) in one line.


-----Examples-----
Input
1 2 2 1

Output
6

Input
1 1 1 2

Output
31

Input
2 12 3 1

Output
0



-----Note-----

In the first sample test, Memory starts with 1 and Lexa starts with 2. If Lexa picks  - 2, Memory can pick 0, 1, or 2 to win. If Lexa picks  - 1, Memory can pick 1 or 2 to win. If Lexa picks 0, Memory can pick 2 to win. If Lexa picks 1 or 2, Memory cannot win. Thus, there are 3 + 2 + 1 = 6 possible games in which Memory wins.","MOD = 10**9 + 7

def solve(a, b, k, t):
    max_diff = 2 * k * t
    dp_prev = [0] * (2 * max_diff + 1)
    dp_curr = [0] * (2 * max_diff + 1)
    
    dp_prev[max_diff + (a - b)] = 1
    
    for _ in range(t):
        prefix_sum = [0] * (2 * max_diff + 3)
        for i in range(2 * max_diff + 1):
            prefix_sum[i + 1] = (prefix_sum[i] + dp_prev[i]) % MOD
        
        for i in range(2 * max_diff + 1):
            left = max(0, i - 2 * k)
            right = min(2 * max_diff, i + 2 * k) + 1
            dp_curr[i] = (prefix_sum[right] - prefix_sum[left]) % MOD
        
        dp_prev, dp_curr = dp_curr, dp_prev
    
    result = 0
    for i in range(max_diff + 1, 2 * max_diff + 1):
        result = (result + dp_prev[i]) % MOD
    
    print(result)

# Input
a, b, k, t = map(int, input().split())
solve(a, b, k, t)
",3,False,False,False,True,True,True,True,True,True,True,True,True,True,249_gpt-4o,0.9083034784028298,0.5128471402389753,0.7916666666666666
250,apps,gpt-4o,qwen2.5-7b-instruct,"Valery is a PE teacher at a school in Berland. Soon the students are going to take a test in long jumps, and Valery has lost his favorite ruler! 

However, there is no reason for disappointment, as Valery has found another ruler, its length is l centimeters. The ruler already has n marks, with which he can make measurements. We assume that the marks are numbered from 1 to n in the order they appear from the beginning of the ruler to its end. The first point coincides with the beginning of the ruler and represents the origin. The last mark coincides with the end of the ruler, at distance l from the origin. This ruler can be repesented by an increasing sequence a_1, a_2, ..., a_{n}, where a_{i} denotes the distance of the i-th mark from the origin (a_1 = 0, a_{n} = l).

Valery believes that with a ruler he can measure the distance of d centimeters, if there is a pair of integers i and j (1 ≤ i ≤ j ≤ n), such that the distance between the i-th and the j-th mark is exactly equal to d (in other words, a_{j} - a_{i} = d). 

Under the rules, the girls should be able to jump at least x centimeters, and the boys should be able to jump at least y (x < y) centimeters. To test the children's abilities, Valery needs a ruler to measure each of the distances x and y. 

Your task is to determine what is the minimum number of additional marks you need to add on the ruler so that they can be used to measure the distances x and y. Valery can add the marks at any integer non-negative distance from the origin not exceeding the length of the ruler.


-----Input-----

The first line contains four positive space-separated integers n, l, x, y (2 ≤ n ≤ 10^5, 2 ≤ l ≤ 10^9, 1 ≤ x < y ≤ l) — the number of marks, the length of the ruler and the jump norms for girls and boys, correspondingly.

The second line contains a sequence of n integers a_1, a_2, ..., a_{n} (0 = a_1 < a_2 < ... < a_{n} = l), where a_{i} shows the distance from the i-th mark to the origin.


-----Output-----

In the first line print a single non-negative integer v — the minimum number of marks that you need to add on the ruler.

In the second line print v space-separated integers p_1, p_2, ..., p_{v} (0 ≤ p_{i} ≤ l). Number p_{i} means that the i-th mark should be at the distance of p_{i} centimeters from the origin. Print the marks in any order. If there are multiple solutions, print any of them.


-----Examples-----
Input
3 250 185 230
0 185 250

Output
1
230

Input
4 250 185 230
0 20 185 250

Output
0

Input
2 300 185 230
0 300

Output
2
185 230



-----Note-----

In the first sample it is impossible to initially measure the distance of 230 centimeters. For that it is enough to add a 20 centimeter mark or a 230 centimeter mark.

In the second sample you already can use the ruler to measure the distances of 185 and 230 centimeters, so you don't have to add new marks.

In the third sample the ruler only contains the initial and the final marks. We will need to add two marks to be able to test the children's skills.","# Read input values
n, l, x, y = map(int, input().split())
marks = list(map(int, input().split()))

# Initialize sets for easier lookup of required distances
marks_set = set(marks)
x_found = False
y_found = False

# Check if x and y distances can be measured
for mark in marks:
    if (mark + x) in marks_set or (mark - x) in marks_set:
        x_found = True
    if (mark + y) in marks_set or (mark - y) in marks_set:
        y_found = True
    if x_found and y_found:
        break

# If both x and y distances can already be measured, no new marks are needed
if x_found and y_found:
    print(0)
else:
    # Try to find a mark that can measure both x and y distances if added
    new_marks = set()
    for mark in marks:
        if not x_found:
            # Check if a mark that is x distance from the current mark can also measure y distance
            if (mark + x + y) in marks_set or (mark + x - y) in marks_set or (mark - x + y) in marks_set:
                new_marks.add(mark + x)
            elif (mark - x + y) in marks_set or (mark - x - y) in marks_set:
                new_marks.add(mark - x)
        if not y_found:
            # Check if a mark that is y distance from the current mark can also measure x distance
            if (mark + y + x) in marks_set or (mark + y - x) in marks_set or (mark - y + x) in marks_set:
                new_marks.add(mark + y)
            elif (mark - y + x) in marks_set or (mark - y - x) in marks_set:
                new_marks.add(mark - y)
    
    # If we found a mark that can measure both distances, add only that mark
    if new_marks:
        print(1)
        print(new_marks.pop())
    else:
        # Otherwise, add both x and y marks if necessary
        result = []
        if not x_found:
            result.append(x)
        if not y_found:
            result.append(y)
        print(len(result))
        print("" "".join(map(str, result)))
",3,False,False,False,False,False,False,True,False,False,False,True,True,False,250_gpt-4o,0.32805105442607474,-0.16596394579970838,0.5416666666666666
258,apps,gpt-4o,qwen2.5-7b-instruct,"Takahashi wants to grill N pieces of meat on a grilling net, which can be seen as a two-dimensional plane. The coordinates of the i-th piece of meat are \left(x_i, y_i\right), and its hardness is c_i.
Takahashi can use one heat source to grill the meat. If he puts the heat source at coordinates \left(X, Y\right), where X and Y are real numbers, the i-th piece of meat will be ready to eat in c_i \times \sqrt{\left(X - x_i\right)^2 + \left(Y-y_i\right)^2} seconds.
Takahashi wants to eat K pieces of meat. Find the time required to have K or more pieces of meat ready if he put the heat source to minimize this time.

-----Constraints-----
 - All values in input are integers.
 - 1 \leq N \leq 60
 - 1 \leq K \leq N
 - -1000 \leq x_i , y_i \leq 1000
 - \left(x_i, y_i\right) \neq \left(x_j, y_j\right) \left(i \neq j \right)
 - 1 \leq c_i \leq 100

-----Input-----
Input is given from Standard Input in the following format:
N K
x_1 y_1 c_1
\vdots
x_N y_N c_N

-----Output-----
Print the answer.
It will be considered correct if its absolute or relative error from our answer is at most 10^{-6}.

-----Sample Input-----
4 3
-1 0 3
0 0 3
1 0 2
1 1 40

-----Sample Output-----
2.4

If we put the heat source at \left(-0.2, 0\right), the 1-st, 2-nd, and 3-rd pieces of meat will be ready to eat within 2.4 seconds. This is the optimal place to put the heat source.","import math
import sys
input = sys.stdin.read

def is_feasible(meats, K, T):
    N = len(meats)
    for i in range(N):
        for j in range(i + 1, N):
            x1, y1, c1 = meats[i]
            x2, y2, c2 = meats[j]
            if c1 * T < c2 * T:
                x1, y1, c1, x2, y2, c2 = x2, y2, c2, x1, y1, c1
            d = c1 * T - c2 * T
            if d < 0:
                continue
            d /= c1 * c2
            cx = (x1 + x2) / 2
            cy = (y1 + y2) / 2
            dx = (x1 - x2) / 2
            dy = (y1 - y2) / 2
            d2 = dx * dx + dy * dy
            if d * d2 > d2:
                continue
            mx = cx + dy * math.sqrt(d2 * d - d * d) / d2
            my = cy - dx * math.sqrt(d2 * d - d * d) / d2
            count = sum(c * math.sqrt((mx - x) ** 2 + (my - y) ** 2) <= T for x, y, c in meats)
            if count >= K:
                return True
    return False

def min_time_to_grill(N, K, meats):
    low, high = 0, 1e9
    while high - low > 1e-7:
        mid = (low + high) / 2
        if is_feasible(meats, K, mid):
            high = mid
        else:
            low = mid
    return high

def main():
    data = input().split()
    N = int(data[0])
    K = int(data[1])
    meats = []
    index = 2
    for _ in range(N):
        x = int(data[index])
        y = int(data[index + 1])
        c = int(data[index + 2])
        meats.append((x, y, c))
        index += 3
    result = min_time_to_grill(N, K, meats)
    print(f""{result:.6f}"")

if __name__ == ""__main__"":
    main()
",3,False,False,False,False,True,True,True,False,False,False,False,False,True,258_gpt-4o,0.6305109659268154,0.12737356777759515,0.6666666666666666
259,apps,gpt-4o,qwen2.5-7b-instruct,"Monocarp and Bicarp live in Berland, where every bus ticket consists of $n$ digits ($n$ is an even number). During the evening walk Monocarp and Bicarp found a ticket where some of the digits have been erased. The number of digits that have been erased is even.

Monocarp and Bicarp have decided to play a game with this ticket. Monocarp hates happy tickets, while Bicarp collects them. A ticket is considered happy if the sum of the first $\frac{n}{2}$ digits of this ticket is equal to the sum of the last $\frac{n}{2}$ digits.

Monocarp and Bicarp take turns (and Monocarp performs the first of them). During each turn, the current player must replace any erased digit with any digit from $0$ to $9$. The game ends when there are no erased digits in the ticket.

If the ticket is happy after all erased digits are replaced with decimal digits, then Bicarp wins. Otherwise, Monocarp wins. You have to determine who will win if both players play optimally.


-----Input-----

The first line contains one even integer $n$ $(2 \le n \le 2 \cdot 10^{5})$ — the number of digits in the ticket.

The second line contains a string of $n$ digits and ""?"" characters — the ticket which Monocarp and Bicarp have found. If the $i$-th character is ""?"", then the $i$-th digit is erased. Note that there may be leading zeroes. The number of ""?"" characters is even.


-----Output-----

If Monocarp wins, print ""Monocarp"" (without quotes). Otherwise print ""Bicarp"" (without quotes).


-----Examples-----
Input
4
0523

Output
Bicarp

Input
2
??

Output
Bicarp

Input
8
?054??0?

Output
Bicarp

Input
6
???00?

Output
Monocarp



-----Note-----

Since there is no question mark in the ticket in the first example, the winner is determined before the game even starts, and it is Bicarp.

In the second example, Bicarp also wins. After Monocarp chooses an erased digit and replaces it with a new one, Bicap can choose another position with an erased digit and replace it with the same digit, so the ticket is happy.","# Use Standard Input format

def determine_winner(n, ticket):
    half_n = n // 2
    left_sum = 0
    right_sum = 0
    left_question_marks = 0
    right_question_marks = 0

    # Calculate the sums and the count of question marks for each half
    for i in range(half_n):
        if ticket[i] == '?':
            left_question_marks += 1
        else:
            left_sum += int(ticket[i])

    for i in range(half_n, n):
        if ticket[i] == '?':
            right_question_marks += 1
        else:
            right_sum += int(ticket[i])

    # Calculate the difference between the sums of the two halves
    diff = left_sum - right_sum

    # Calculate the difference in the number of question marks
    q_diff = left_question_marks - right_question_marks

    # To balance the sums, the difference must be a multiple of 9
    if (diff + (q_diff // 2) * 9) % 9 == 0:
        print(""Bicarp"")
    else:
        print(""Monocarp"")

# Read input
n = int(input())
ticket = input()

# Determine the winner
determine_winner(n, ticket)
",3,False,False,False,True,True,True,True,True,False,True,True,True,False,259_gpt-4o,0.7192236440373758,0.2296325830884017,0.5833333333333334
265,apps,gpt-4o,qwen2.5-7b-instruct,"There is an airplane which has n rows from front to back. There will be m people boarding this airplane.

This airplane has an entrance at the very front and very back of the plane.

Each person has some assigned seat. It is possible for multiple people to have the same assigned seat. The people will then board the plane one by one starting with person 1. Each person can independently choose either the front entrance or back entrance to enter the plane.

When a person walks into the plane, they walk directly to their assigned seat and will try to sit in it. If it is occupied, they will continue walking in the direction they walked in until they are at empty seat - they will take the earliest empty seat that they can find. If they get to the end of the row without finding a seat, they will be angry.

Find the number of ways to assign tickets to the passengers and board the plane without anyone getting angry. Two ways are different if there exists a passenger who chose a different entrance in both ways, or the assigned seat is different. Print this count modulo 10^9 + 7.


-----Input-----

The first line of input will contain two integers n, m (1 ≤ m ≤ n ≤ 1 000 000), the number of seats, and the number of passengers, respectively.


-----Output-----

Print a single number, the number of ways, modulo 10^9 + 7.


-----Example-----
Input
3 3

Output
128



-----Note-----

Here, we will denote a passenger by which seat they were assigned, and which side they came from (either ""F"" or ""B"" for front or back, respectively).

For example, one valid way is 3B, 3B, 3B (i.e. all passengers were assigned seat 3 and came from the back entrance). Another valid way would be 2F, 1B, 3F.

One invalid way would be 2B, 2B, 2B, since the third passenger would get to the front without finding a seat.","MOD = 10**9 + 7

def factorial(n):
    result = 1
    for i in range(2, n + 1):
        result = result * i % MOD
    return result

def number_of_ways(n, m):
    # Compute factorial(n) and factorial(n-m)
    fact_n = factorial(n)
    fact_n_m = factorial(n - m)
    
    # The number of ways to assign tickets to passengers and ensure no one gets angry:
    # This is computed as 2^m * factorial(n) // factorial(n-m)
    ways = pow(2, m, MOD) * fact_n % MOD * pow(fact_n_m, MOD-2, MOD) % MOD
    
    return ways

# Read input
import sys
input = sys.stdin.read
data = input().strip().split()
n = int(data[0])
m = int(data[1])

# Calculate the number of ways
result = number_of_ways(n, m)

# Output the result
print(result)
",3,False,True,False,False,True,True,True,False,False,True,True,True,True,265_gpt-4o,0.5971675832200772,0.0977370811161579,0.5416666666666666
268,apps,gpt-4o,qwen2.5-7b-instruct,"You are given two integers $l$ and $r$ ($l \le r$). Your task is to calculate the sum of numbers from $l$ to $r$ (including $l$ and $r$) such that each number contains at most $k$ different digits, and print this sum modulo $998244353$.

For example, if $k = 1$ then you have to calculate all numbers from $l$ to $r$ such that each number is formed using only one digit. For $l = 10, r = 50$ the answer is $11 + 22 + 33 + 44 = 110$.


-----Input-----

The only line of the input contains three integers $l$, $r$ and $k$ ($1 \le l \le r < 10^{18}, 1 \le k \le 10$) — the borders of the segment and the maximum number of different digits.


-----Output-----

Print one integer — the sum of numbers from $l$ to $r$ such that each number contains at most $k$ different digits, modulo $998244353$.


-----Examples-----
Input
10 50 2

Output
1230

Input
1 2345 10

Output
2750685

Input
101 154 2

Output
2189



-----Note-----

For the first example the answer is just the sum of numbers from $l$ to $r$ which equals to $\frac{50 \cdot 51}{2} - \frac{9 \cdot 10}{2} = 1230$. This example also explained in the problem statement but for $k = 1$.

For the second example the answer is just the sum of numbers from $l$ to $r$ which equals to $\frac{2345 \cdot 2346}{2} = 2750685$.

For the third example the answer is $101 + 110 + 111 + 112 + 113 + 114 + 115 + 116 + 117 + 118 + 119 + 121 + 122 + 131 + 133 + 141 + 144 + 151 = 2189$.","MOD = 998244353

def contains_at_most_k_unique_digits(n, k):
    return len(set(str(n))) <= k

def sum_of_numbers_with_k_unique_digits(l, r, k):
    total_sum = 0
    for num in range(l, r + 1):
        if contains_at_most_k_unique_digits(num, k):
            total_sum = (total_sum + num) % MOD
    return total_sum

# Read input
l, r, k = map(int, input().split())

# Calculate and print the result
print(sum_of_numbers_with_k_unique_digits(l, r, k))
",3,False,False,False,True,True,True,True,False,False,True,False,True,False,268_gpt-4o,0.7709462509712747,0.2907057515483225,0.5833333333333334
270,apps,gpt-4o,qwen2.5-7b-instruct,"Nothing is eternal in the world, Kostya understood it on the 7-th of January when he saw partially dead four-color garland.

Now he has a goal to replace dead light bulbs, however he doesn't know how many light bulbs for each color are required. It is guaranteed that for each of four colors at least one light is working.

It is known that the garland contains light bulbs of four colors: red, blue, yellow and green. The garland is made as follows: if you take any four consecutive light bulbs then there will not be light bulbs with the same color among them. For example, the garland can look like ""RYBGRYBGRY"", ""YBGRYBGRYBG"", ""BGRYB"", but can not look like ""BGRYG"", ""YBGRYBYGR"" or ""BGYBGY"". Letters denote colors: 'R' — red, 'B' — blue, 'Y' — yellow, 'G' — green.

Using the information that for each color at least one light bulb still works count the number of dead light bulbs of each four colors.


-----Input-----

The first and the only line contains the string s (4 ≤ |s| ≤ 100), which describes the garland, the i-th symbol of which describes the color of the i-th light bulb in the order from the beginning of garland:   'R' — the light bulb is red,  'B' — the light bulb is blue,  'Y' — the light bulb is yellow,  'G' — the light bulb is green,  '!' — the light bulb is dead. 

The string s can not contain other symbols except those five which were described. 

It is guaranteed that in the given string at least once there is each of four letters 'R', 'B', 'Y' and 'G'. 

It is guaranteed that the string s is correct garland with some blown light bulbs, it means that for example the line ""GRBY!!!B"" can not be in the input data. 


-----Output-----

In the only line print four integers k_{r}, k_{b}, k_{y}, k_{g} — the number of dead light bulbs of red, blue, yellow and green colors accordingly.


-----Examples-----
Input
RYBGRYBGR

Output
0 0 0 0
Input
!RGYB

Output
0 1 0 0
Input
!!!!YGRB

Output
1 1 1 1
Input
!GB!RG!Y!

Output
2 1 1 0


-----Note-----

In the first example there are no dead light bulbs.

In the second example it is obvious that one blue bulb is blown, because it could not be light bulbs of other colors on its place according to the statements.","s = input().strip()

# Initialize counters for each color
dead_bulbs = {'R': 0, 'B': 0, 'Y': 0, 'G': 0}

# Determine the positions (modulo 4) for each color
positions = {}
for i, char in enumerate(s):
    if char in 'RBYG':
        positions[char] = i % 4

# Count the number of dead bulbs for each color
for i, char in enumerate(s):
    if char == '!':
        for color, pos in positions.items():
            if i % 4 == pos:
                dead_bulbs[color] += 1

# Output the result
print(dead_bulbs['R'], dead_bulbs['B'], dead_bulbs['Y'], dead_bulbs['G'])
",3,True,False,True,True,False,True,True,False,True,True,False,False,False,270_gpt-4o,0.7408518640264958,0.2505433692798715,0.7083333333333334
284,apps,gpt-4o,qwen2.5-7b-instruct,"PolandBall is a young, clever Ball. He is interested in prime numbers. He has stated a following hypothesis: ""There exists such a positive integer n that for each positive integer m number n·m + 1 is a prime number"".

Unfortunately, PolandBall is not experienced yet and doesn't know that his hypothesis is incorrect. Could you prove it wrong? Write a program that finds a counterexample for any n.


-----Input-----

The only number in the input is n (1 ≤ n ≤ 1000) — number from the PolandBall's hypothesis. 


-----Output-----

Output such m that n·m + 1 is not a prime number. Your answer will be considered correct if you output any suitable m such that 1 ≤ m ≤ 10^3. It is guaranteed the the answer exists.


-----Examples-----
Input
3

Output
1
Input
4

Output
2


-----Note-----

A prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.

For the first sample testcase, 3·1 + 1 = 4. We can output 1.

In the second sample testcase, 4·1 + 1 = 5. We cannot output 1 because 5 is prime. However, m = 2 is okay since 4·2 + 1 = 9, which is not a prime number.","def is_prime(x):
    if x <= 1:
        return False
    if x <= 3:
        return True
    if x % 2 == 0 or x % 3 == 0:
        return False
    i = 5
    while i * i <= x:
        if x % i == 0 or x % (i + 2) == 0:
            return False
        i += 6
    return True

n = int(input())

for m in range(1, 1001):
    if not is_prime(n * m + 1):
        print(m)
        break
",3,True,True,True,True,True,True,True,True,True,True,True,True,False,284_gpt-4o,0.6763809958193981,0.18107150483337053,0.625
285,apps,gpt-4o,qwen2.5-7b-instruct,"Kolya is developing an economy simulator game. His most favourite part of the development process is in-game testing. Once he was entertained by the testing so much, that he found out his game-coin score become equal to 0.

Kolya remembers that at the beginning of the game his game-coin score was equal to n and that he have bought only some houses (for 1 234 567 game-coins each), cars (for 123 456 game-coins each) and computers (for 1 234 game-coins each).

Kolya is now interested, whether he could have spent all of his initial n game-coins buying only houses, cars and computers or there is a bug in the game. Formally, is there a triple of non-negative integers a, b and c such that a × 1 234 567 + b × 123 456 + c × 1 234 = n?

Please help Kolya answer this question.


-----Input-----

The first line of the input contains a single integer n (1 ≤ n ≤ 10^9) — Kolya's initial game-coin score.


-----Output-----

Print ""YES"" (without quotes) if it's possible that Kolya spent all of his initial n coins buying only houses, cars and computers. Otherwise print ""NO"" (without quotes).


-----Examples-----
Input
1359257

Output
YES
Input
17851817

Output
NO


-----Note-----

In the first sample, one of the possible solutions is to buy one house, one car and one computer, spending 1 234 567 + 123 456 + 1234 = 1 359 257 game-coins in total.","def can_spend_all_coins(n):
    # Define the cost of houses, cars, and computers
    house_cost = 1234567
    car_cost = 123456
    computer_cost = 1234
    
    # Iterate over the possible number of houses
    for a in range(n // house_cost + 1):
        remaining_after_houses = n - a * house_cost
        # Iterate over the possible number of cars
        for b in range(remaining_after_houses // car_cost + 1):
            remaining_after_cars = remaining_after_houses - b * car_cost
            # Check if the remaining coins can be exactly spent on computers
            if remaining_after_cars % computer_cost == 0:
                return ""YES""
    
    return ""NO""

# Read input
n = int(input().strip())

# Get the result
result = can_spend_all_coins(n)

# Print the result
print(result)
",3,True,True,True,True,True,True,True,True,False,True,True,True,True,285_gpt-4o,0.6288274362731552,0.12914027461134234,0.5
289,apps,gpt-4o,qwen2.5-7b-instruct,"Famous Brazil city Rio de Janeiro holds a tennis tournament and Ostap Bender doesn't want to miss this event. There will be n players participating, and the tournament will follow knockout rules from the very first game. That means, that if someone loses a game he leaves the tournament immediately.

Organizers are still arranging tournament grid (i.e. the order games will happen and who is going to play with whom) but they have already fixed one rule: two players can play against each other only if the number of games one of them has already played differs by no more than one from the number of games the other one has already played. Of course, both players had to win all their games in order to continue participating in the tournament.

Tournament hasn't started yet so the audience is a bit bored. Ostap decided to find out what is the maximum number of games the winner of the tournament can take part in (assuming the rule above is used). However, it is unlikely he can deal with this problem without your help.


-----Input-----

The only line of the input contains a single integer n (2 ≤ n ≤ 10^18) — the number of players to participate in the tournament.


-----Output-----

Print the maximum number of games in which the winner of the tournament can take part.


-----Examples-----
Input
2

Output
1

Input
3

Output
2

Input
4

Output
2

Input
10

Output
4



-----Note-----

In all samples we consider that player number 1 is the winner.

In the first sample, there would be only one game so the answer is 1.

In the second sample, player 1 can consequently beat players 2 and 3. 

In the third sample, player 1 can't play with each other player as after he plays with players 2 and 3 he can't play against player 4, as he has 0 games played, while player 1 already played 2. Thus, the answer is 2 and to achieve we make pairs (1, 2) and (3, 4) and then clash the winners.","n = int(input())

# The maximum number of games the winner can play is essentially the maximum number of times
# we can divide the number of players by 2 (which is equivalent to finding the highest power
# of 2 less than or equal to n).
max_games = n.bit_length() - 1

print(max_games)
",3,False,False,False,True,True,True,True,False,True,True,True,True,True,289_gpt-4o,0.711296447684462,0.2218398756668227,0.5833333333333334
290,apps,gpt-4o,qwen2.5-7b-instruct,"Tonio has a keyboard with only two letters, ""V"" and ""K"".

One day, he has typed out a string s with only these two letters. He really likes it when the string ""VK"" appears, so he wishes to change at most one letter in the string (or do no changes) to maximize the number of occurrences of that string. Compute the maximum number of times ""VK"" can appear as a substring (i. e. a letter ""K"" right after a letter ""V"") in the resulting string.


-----Input-----

The first line will contain a string s consisting only of uppercase English letters ""V"" and ""K"" with length not less than 1 and not greater than 100.


-----Output-----

Output a single integer, the maximum number of times ""VK"" can appear as a substring of the given string after changing at most one character.


-----Examples-----
Input
VK

Output
1

Input
VV

Output
1

Input
V

Output
0

Input
VKKKKKKKKKVVVVVVVVVK

Output
3

Input
KVKV

Output
1



-----Note-----

For the first case, we do not change any letters. ""VK"" appears once, which is the maximum number of times it could appear.

For the second case, we can change the second character from a ""V"" to a ""K"". This will give us the string ""VK"". This has one occurrence of the string ""VK"" as a substring.

For the fourth case, we can change the fourth character from a ""K"" to a ""V"". This will give us the string ""VKKVKKKKKKVVVVVVVVVK"". This has three occurrences of the string ""VK"" as a substring. We can check no other moves can give us strictly more occurrences.","s = input()

# Initialize the count of VK substrings
count_vk = 0

# Count initial VK substrings
for i in range(len(s) - 1):
    if s[i] == 'V' and s[i + 1] == 'K':
        count_vk += 1

# Try changing each character and see if it increases VK substrings
max_vk = count_vk
for i in range(len(s)):
    if s[i] == 'V':
        s_new = s[:i] + 'K' + s[i+1:]
    elif s[i] == 'K':
        s_new = s[:i] + 'V' + s[i+1:]
    else:
        continue
    
    new_count_vk = 0
    for j in range(len(s_new) - 1):
        if s_new[j] == 'V' and s_new[j + 1] == 'K':
            new_count_vk += 1
    
    max_vk = max(max_vk, new_count_vk)

print(max_vk)
",3,True,True,False,True,True,True,True,False,False,True,True,True,False,290_gpt-4o,0.5689011500308099,0.06930433337203927,0.5416666666666666
298,apps,gpt-4o,qwen2.5-7b-instruct,"Vasya has got three integers $n$, $m$ and $k$. He'd like to find three integer points $(x_1, y_1)$, $(x_2, y_2)$, $(x_3, y_3)$, such that $0 \le x_1, x_2, x_3 \le n$, $0 \le y_1, y_2, y_3 \le m$ and the area of the triangle formed by these points is equal to $\frac{nm}{k}$.

Help Vasya! Find such points (if it's possible). If there are multiple solutions, print any of them.


-----Input-----

The single line contains three integers $n$, $m$, $k$ ($1\le n, m \le 10^9$, $2 \le k \le 10^9$).


-----Output-----

If there are no such points, print ""NO"".

Otherwise print ""YES"" in the first line. The next three lines should contain integers $x_i, y_i$ — coordinates of the points, one point per line. If there are multiple solutions, print any of them.

You can print each letter in any case (upper or lower).


-----Examples-----
Input
4 3 3

Output
YES
1 0
2 3
4 1

Input
4 4 7

Output
NO



-----Note-----

In the first example area of the triangle should be equal to $\frac{nm}{k} = 4$. The triangle mentioned in the output is pictured below:  [Image] 

In the second example there is no triangle with area $\frac{nm}{k} = \frac{16}{7}$.","n, m, k = map(int, input().split())

# Calculate the area required for the triangle
area = n * m / k

# Check if the area is an integer
if area != int(area):
    print(""NO"")
else:
    area = int(area)
    # We find a way to create a triangle with this area
    if area == 0:
        print(""NO"")
    else:
        # We can set one point at (0, 0) and the others in a way to form the required area
        print(""YES"")
        print(""0 0"")
        if 2 * area <= n:
            print(f""{2 * area} 1"")
            print(f""0 1"")
        elif 2 * area <= m:
            print(f""1 {2 * area}"")
            print(f""1 0"")
        else:
            print(f""{n} {m // 2}"")
            print(f""0 {m // 2}"")
",3,False,False,False,True,False,False,True,True,True,True,False,False,False,298_gpt-4o,0.7921392855984806,0.3201115600931055,0.625
28,apps,llama3-70b,qwen2.5-7b-instruct,"You are given a string s consisting of n lowercase Latin letters. You have to type this string using your keyboard.

Initially, you have an empty string. Until you type the whole string, you may perform the following operation:  add a character to the end of the string. 

Besides, at most once you may perform one additional operation: copy the string and append it to itself.

For example, if you have to type string abcabca, you can type it in 7 operations if you type all the characters one by one. However, you can type it in 5 operations if you type the string abc first and then copy it and type the last character.

If you have to type string aaaaaaaaa, the best option is to type 4 characters one by one, then copy the string, and then type the remaining character.

Print the minimum number of operations you need to type the given string.


-----Input-----

The first line of the input containing only one integer number n (1 ≤ n ≤ 100) — the length of the string you have to type. The second line containing the string s consisting of n lowercase Latin letters.


-----Output-----

Print one integer number — the minimum number of operations you need to type the given string.


-----Examples-----
Input
7
abcabca

Output
5

Input
8
abcdefgh

Output
8



-----Note-----

The first test described in the problem statement.

In the second test you can only type all the characters one by one.","n = int(input())
s = input()
dp = [0] * (n + 1)
dp[0] = 0
for i in range(1, n + 1):
    dp[i] = i
    for j in range(i):
        if s[j:i] in s[:j]:
            dp[i] = min(dp[i], dp[j] + (i - j) // (i - j - j) + 1)
print(dp[n])
",3,False,False,False,True,False,False,False,False,True,False,False,True,False,28_llama3-70b,0.8532123758836564,0.4130125310478158,0.7083333333333334
33,apps,llama3-70b,qwen2.5-7b-instruct,"In this problem we assume the Earth to be a completely round ball and its surface a perfect sphere. The length of the equator and any meridian is considered to be exactly 40 000 kilometers. Thus, travelling from North Pole to South Pole or vice versa takes exactly 20 000 kilometers.

Limak, a polar bear, lives on the North Pole. Close to the New Year, he helps somebody with delivering packages all around the world. Instead of coordinates of places to visit, Limak got a description how he should move, assuming that he starts from the North Pole. The description consists of n parts. In the i-th part of his journey, Limak should move t_{i} kilometers in the direction represented by a string dir_{i} that is one of: ""North"", ""South"", ""West"", ""East"".

Limak isn’t sure whether the description is valid. You must help him to check the following conditions:  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the North Pole, he can move only to the South.  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the South Pole, he can move only to the North.  The journey must end on the North Pole. 

Check if the above conditions are satisfied and print ""YES"" or ""NO"" on a single line.


-----Input-----

The first line of the input contains a single integer n (1 ≤ n ≤ 50).

The i-th of next n lines contains an integer t_{i} and a string dir_{i} (1 ≤ t_{i} ≤ 10^6, $\operatorname{dir}_{i} \in \{\text{North, South, West, East} \}$) — the length and the direction of the i-th part of the journey, according to the description Limak got.


-----Output-----

Print ""YES"" if the description satisfies the three conditions, otherwise print ""NO"", both without the quotes.


-----Examples-----
Input
5
7500 South
10000 East
3500 North
4444 West
4000 North

Output
YES

Input
2
15000 South
4000 East

Output
NO

Input
5
20000 South
1000 North
1000000 West
9000 North
10000 North

Output
YES

Input
3
20000 South
10 East
20000 North

Output
NO

Input
2
1000 North
1000 South

Output
NO

Input
4
50 South
50 North
15000 South
15000 North

Output
YES



-----Note-----

Drawings below show how Limak's journey would look like in first two samples. In the second sample the answer is ""NO"" because he doesn't end on the North Pole. [Image]","n = int(input())
curr_lat = 90
for _ in range(n):
    t, dir = input().split()
    t = int(t)
    if dir == ""North"":
        curr_lat += t / 111.195
    elif dir == ""South"":
        curr_lat -= t / 111.195
    else:
        continue
    if curr_lat < -90 or curr_lat > 90:
        print(""NO"")
        exit()
    if curr_lat == -90 and dir != ""North"":
        print(""NO"")
        exit()
    if curr_lat == 90 and dir != ""South"":
        print(""NO"")
        exit()
print(""YES"" if curr_lat == 90 else ""NO"")
",3,False,True,True,True,True,True,True,True,True,False,True,True,True,33_llama3-70b,0.9079029728562571,0.5146845763327755,0.7916666666666666
36,apps,llama3-70b,qwen2.5-7b-instruct,"The flag of Berland is such rectangular field n × m that satisfies following conditions:

  Flag consists of three colors which correspond to letters 'R', 'G' and 'B'.  Flag consists of three equal in width and height stripes, parralel to each other and to sides of the flag. Each stripe has exactly one color.  Each color should be used in exactly one stripe. 

You are given a field n × m, consisting of characters 'R', 'G' and 'B'. Output ""YES"" (without quotes) if this field corresponds to correct flag of Berland. Otherwise, print ""NO"" (without quotes).


-----Input-----

The first line contains two integer numbers n and m (1 ≤ n, m ≤ 100) — the sizes of the field.

Each of the following n lines consisting of m characters 'R', 'G' and 'B' — the description of the field.


-----Output-----

Print ""YES"" (without quotes) if the given field corresponds to correct flag of Berland . Otherwise, print ""NO"" (without quotes).


-----Examples-----
Input
6 5
RRRRR
RRRRR
BBBBB
BBBBB
GGGGG
GGGGG

Output
YES

Input
4 3
BRG
BRG
BRG
BRG

Output
YES

Input
6 7
RRRGGGG
RRRGGGG
RRRGGGG
RRRBBBB
RRRBBBB
RRRBBBB

Output
NO

Input
4 4
RRRR
RRRR
BBBB
GGGG

Output
NO



-----Note-----

The field in the third example doesn't have three parralel stripes.

Rows of the field in the fourth example are parralel to each other and to borders. But they have different heights — 2, 1 and 1.","n, m = map(int, input().split())
field = [input() for _ in range(n)]

rows = len(set(''.join(field[i::n//3]) for i in range(n//3)))
cols = len(set(''.join(row[i*m//3:(i+1)*m//3] for row in field)) for i in range(3))

print(""YES"" if rows == 3 and cols == 3 else ""NO"")
",3,False,False,False,True,False,False,False,True,False,True,False,False,False,36_llama3-70b,0.5737313256405553,0.0718182532301581,0.625
43,apps,llama3-70b,qwen2.5-7b-instruct,"You are given a binary string $s$.

Find the number of distinct cyclical binary strings of length $n$ which contain $s$ as a substring.

The cyclical string $t$ contains $s$ as a substring if there is some cyclical shift of string $t$, such that $s$ is a substring of this cyclical shift of $t$.

For example, the cyclical string ""000111"" contains substrings ""001"", ""01110"" and ""10"", but doesn't contain ""0110"" and ""10110"".

Two cyclical strings are called different if they differ from each other as strings. For example, two different strings, which differ from each other by a cyclical shift, are still considered different cyclical strings.


-----Input-----

The first line contains a single integer $n$ ($1 \le n \le 40$) — the length of the target string $t$.

The next line contains the string $s$ ($1 \le |s| \le n$) — the string which must be a substring of cyclical string $t$. String $s$ contains only characters '0' and '1'.


-----Output-----

Print the only integer — the number of distinct cyclical binary strings $t$, which contain $s$ as a substring.


-----Examples-----
Input
2
0

Output
3
Input
4
1010

Output
2
Input
20
10101010101010

Output
962


-----Note-----

In the first example, there are three cyclical strings, which contain ""0"" — ""00"", ""01"" and ""10"".

In the second example, there are only two such strings — ""1010"", ""0101"".","n = int(input())
s = input()
count = 0
for i in range(2**n):
    t = bin(i)[2:].zfill(n)
    if all(t[i:i+len(s)] == s or t[i+len(s):] + t[:i] == s for i in range(n)):
        count += 1
print(count)
",3,False,False,False,True,True,True,True,False,True,True,True,False,False,43_llama3-70b,0.8451314630632236,0.39846551359676413,0.6666666666666666
44,apps,llama3-70b,qwen2.5-7b-instruct,"You are given the set of vectors on the plane, each of them starting at the origin. Your task is to find a pair of vectors with the minimal non-oriented angle between them.

Non-oriented angle is non-negative value, minimal between clockwise and counterclockwise direction angles. Non-oriented angle is always between 0 and π. For example, opposite directions vectors have angle equals to π.


-----Input-----

First line of the input contains a single integer n (2 ≤ n ≤ 100 000) — the number of vectors.

The i-th of the following n lines contains two integers x_{i} and y_{i} (|x|, |y| ≤ 10 000, x^2 + y^2 > 0) — the coordinates of the i-th vector. Vectors are numbered from 1 to n in order of appearing in the input. It is guaranteed that no two vectors in the input share the same direction (but they still can have opposite directions).


-----Output-----

Print two integer numbers a and b (a ≠ b) — a pair of indices of vectors with the minimal non-oriented angle. You can print the numbers in any order. If there are many possible answers, print any.


-----Examples-----
Input
4
-1 0
0 -1
1 0
1 1

Output
3 4

Input
6
-1 0
0 -1
1 0
1 1
-4 -5
-4 -6

Output
6 5","import math

n = int(input())

v = []
for _ in range(n):
    x, y = map(int, input().split())
    v.append((x, y))

ans = (0, 1)
ans_angle = math.pi

v.sort(key=lambda v: math.atan2(v[1], v[0]))

for i in range(n):
    for j in range(i+1, min(n, i+100)):
        angle = math.acos((v[i][0]*v[j][0] + v[i][1]*v[j][1]) / 
                          math.sqrt(v[i][0]**2 + v[i][1]**2) / 
                          math.sqrt(v[j][0]**2 + v[j][1]**2))
        if angle < ans_angle:
            ans_angle = angle
            ans = (i, j)

print(ans[0]+1, ans[1]+1)
",3,False,False,False,True,True,True,True,True,False,True,True,False,True,44_llama3-70b,0.5575568417069499,0.05699574066749571,0.5833333333333334
47,apps,llama3-70b,qwen2.5-7b-instruct,"After finishing eating her bun, Alyona came up with two integers n and m. She decided to write down two columns of integers — the first column containing integers from 1 to n and the second containing integers from 1 to m. Now the girl wants to count how many pairs of integers she can choose, one from the first column and the other from the second column, such that their sum is divisible by 5.

Formally, Alyona wants to count the number of pairs of integers (x, y) such that 1 ≤ x ≤ n, 1 ≤ y ≤ m and $(x + y) \operatorname{mod} 5$ equals 0.

As usual, Alyona has some troubles and asks you to help.


-----Input-----

The only line of the input contains two integers n and m (1 ≤ n, m ≤ 1 000 000).


-----Output-----

Print the only integer — the number of pairs of integers (x, y) such that 1 ≤ x ≤ n, 1 ≤ y ≤ m and (x + y) is divisible by 5.


-----Examples-----
Input
6 12

Output
14

Input
11 14

Output
31

Input
1 5

Output
1

Input
3 8

Output
5

Input
5 7

Output
7

Input
21 21

Output
88



-----Note-----

Following pairs are suitable in the first sample case:   for x = 1 fits y equal to 4 or 9;  for x = 2 fits y equal to 3 or 8;  for x = 3 fits y equal to 2, 7 or 12;  for x = 4 fits y equal to 1, 6 or 11;  for x = 5 fits y equal to 5 or 10;  for x = 6 fits y equal to 4 or 9. 

Only the pair (1, 4) is suitable in the third sample case.","n, m = map(int, input().split())
count = 0
for x in range(1, n + 1):
    for y in range(1, m + 1):
        if (x + y) % 5 == 0:
            count += 1
print(count)
",3,False,True,True,True,True,True,True,True,True,True,True,True,True,47_llama3-70b,0.8844787972965898,0.4663282176478544,0.7083333333333334
50,apps,llama3-70b,qwen2.5-7b-instruct,"Let's write all the positive integer numbers one after another from $1$ without any delimiters (i.e. as a single string). It will be the infinite sequence starting with 123456789101112131415161718192021222324252627282930313233343536...

Your task is to print the $k$-th digit of this sequence.


-----Input-----

The first and only line contains integer $k$ ($1 \le k \le 10^{12}$) — the position to process ($1$-based index).


-----Output-----

Print the $k$-th digit of the resulting infinite sequence.


-----Examples-----
Input
7

Output
7

Input
21

Output
5","k = int(input())
n = 1
while True:
    s = str(n)
    if len(s) >= k:
        print(s[k-1])
        break
    k -= len(s)
    n += 1
",3,False,False,True,True,True,True,True,True,True,True,True,True,True,50_llama3-70b,0.5992170886152665,0.0999273480448792,0.5833333333333334
59,apps,llama3-70b,qwen2.5-7b-instruct,"Petya has equal wooden bars of length n. He wants to make a frame for two equal doors. Each frame has two vertical (left and right) sides of length a and one top side of length b. A solid (i.e. continuous without breaks) piece of bar is needed for each side.

Determine a minimal number of wooden bars which are needed to make the frames for two doors. Petya can cut the wooden bars into any parts, but each side of each door should be a solid piece of a wooden bar (or a whole wooden bar).


-----Input-----

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the length of each wooden bar.

The second line contains a single integer a (1 ≤ a ≤ n) — the length of the vertical (left and right) sides of a door frame.

The third line contains a single integer b (1 ≤ b ≤ n) — the length of the upper side of a door frame.


-----Output-----

Print the minimal number of wooden bars with length n which are needed to make the frames for two doors.


-----Examples-----
Input
8
1
2

Output
1

Input
5
3
4

Output
6

Input
6
4
2

Output
4

Input
20
5
6

Output
2



-----Note-----

In the first example one wooden bar is enough, since the total length of all six sides of the frames for two doors is 8.

In the second example 6 wooden bars is enough, because for each side of the frames the new wooden bar is needed.","n = int(input())
a = int(input())
b = int(input())

total_length = 2 * (a * 2 + b)
if total_length <= n:
    print(1)
else:
    print(-(-total_length // n))
",3,False,False,False,True,True,True,True,True,False,True,True,True,True,59_llama3-70b,0.6580279302119527,0.15839721483839558,0.5
63,apps,llama3-70b,qwen2.5-7b-instruct,"Since most contestants do not read this part, I have to repeat that Bitlandians are quite weird. They have their own jobs, their own working method, their own lives, their own sausages and their own games!

Since you are so curious about Bitland, I'll give you the chance of peeking at one of these games.

BitLGM and BitAryo are playing yet another of their crazy-looking genius-needed Bitlandish games. They've got a sequence of n non-negative integers a_1, a_2, ..., a_{n}. The players make moves in turns. BitLGM moves first. Each player can and must do one of the two following actions in his turn:

  Take one of the integers (we'll denote it as a_{i}). Choose integer x (1 ≤ x ≤ a_{i}). And then decrease a_{i} by x, that is, apply assignment: a_{i} = a_{i} - x.  Choose integer x $(1 \leq x \leq \operatorname{min}_{i = 1} a_{i})$. And then decrease all a_{i} by x, that is, apply assignment: a_{i} = a_{i} - x, for all i. 

The player who cannot make a move loses.

You're given the initial sequence a_1, a_2, ..., a_{n}. Determine who wins, if both players plays optimally well and if BitLGM and BitAryo start playing the described game in this sequence.


-----Input-----

The first line contains an integer n (1 ≤ n ≤ 3).

The next line contains n integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} < 300).


-----Output-----

Write the name of the winner (provided that both players play optimally well). Either ""BitLGM"" or ""BitAryo"" (without the quotes).


-----Examples-----
Input
2
1 1

Output
BitLGM

Input
2
1 2

Output
BitAryo

Input
3
1 2 1

Output
BitLGM","n = int(input())
a = list(map(int, input().split()))
while len(a) > 1:
    if min(a) == 0:
        a.remove(0)
    else:
        x = min(a)
        a = [i - x for i in a]
if a:
    print(""BitLGM"" if a[0] % 2 == 0 else ""BitAryo"")
else:
    print(""BitAryo"")
",3,False,False,False,True,False,False,False,False,False,False,False,True,False,63_llama3-70b,0.8591486484104238,0.41913431465941037,0.6666666666666666
89,apps,llama3-70b,qwen2.5-7b-instruct,"The year 2015 is almost over.

Limak is a little polar bear. He has recently learnt about the binary system. He noticed that the passing year has exactly one zero in its representation in the binary system — 2015_10 = 11111011111_2. Note that he doesn't care about the number of zeros in the decimal representation.

Limak chose some interval of years. He is going to count all years from this interval that have exactly one zero in the binary representation. Can you do it faster?

Assume that all positive integers are always written without leading zeros.


-----Input-----

The only line of the input contains two integers a and b (1 ≤ a ≤ b ≤ 10^18) — the first year and the last year in Limak's interval respectively.


-----Output-----

Print one integer – the number of years Limak will count in his chosen interval.


-----Examples-----
Input
5 10

Output
2

Input
2015 2015

Output
1

Input
100 105

Output
0

Input
72057594000000000 72057595000000000

Output
26



-----Note-----

In the first sample Limak's interval contains numbers 5_10 = 101_2, 6_10 = 110_2, 7_10 = 111_2, 8_10 = 1000_2, 9_10 = 1001_2 and 10_10 = 1010_2. Two of them (101_2 and 110_2) have the described property.","def count_years_with_one_zero(a, b):
    def count_zeros(n):
        return bin(n).count('0')

    count = 0
    for year in range(a, b + 1):
        if count_zeros(year) == 1:
            count += 1
    return count

a, b = map(int, input().split())
print(count_years_with_one_zero(a, b))
",3,False,True,False,True,True,True,True,True,True,True,True,True,True,89_llama3-70b,0.9060636397552515,0.5134257209148272,0.75
95,apps,llama3-70b,qwen2.5-7b-instruct,"Alexander is learning how to convert numbers from the decimal system to any other, however, he doesn't know English letters, so he writes any number only as a decimal number, it means that instead of the letter A he will write the number 10. Thus, by converting the number 475 from decimal to hexadecimal system, he gets 11311 (475 = 1·16^2 + 13·16^1 + 11·16^0). Alexander lived calmly until he tried to convert the number back to the decimal number system.

Alexander remembers that he worked with little numbers so he asks to find the minimum decimal number so that by converting it to the system with the base n he will get the number k.


-----Input-----

The first line contains the integer n (2 ≤ n ≤ 10^9). The second line contains the integer k (0 ≤ k < 10^60), it is guaranteed that the number k contains no more than 60 symbols. All digits in the second line are strictly less than n.

Alexander guarantees that the answer exists and does not exceed 10^18.

The number k doesn't contain leading zeros.


-----Output-----

Print the number x (0 ≤ x ≤ 10^18) — the answer to the problem.


-----Examples-----
Input
13
12

Output
12
Input
16
11311

Output
475
Input
20
999

Output
3789
Input
17
2016

Output
594


-----Note-----

In the first example 12 could be obtained by converting two numbers to the system with base 13: 12 = 12·13^0 or 15 = 1·13^1 + 2·13^0.","n = int(input())
k = input()
x = 0
for i, c in enumerate(reversed(k)):
    x += int(c) * (n ** i)
print(x)
",3,False,True,True,True,True,True,True,True,False,True,True,False,True,95_llama3-70b,0.7207463733290959,0.2320145462963935,0.5833333333333334
96,apps,llama3-70b,qwen2.5-7b-instruct,"Array of integers is unimodal, if:

  it is strictly increasing in the beginning;  after that it is constant;  after that it is strictly decreasing. 

The first block (increasing) and the last block (decreasing) may be absent. It is allowed that both of this blocks are absent.

For example, the following three arrays are unimodal: [5, 7, 11, 11, 2, 1], [4, 4, 2], [7], but the following three are not unimodal: [5, 5, 6, 6, 1], [1, 2, 1, 2], [4, 5, 5, 6].

Write a program that checks if an array is unimodal.


-----Input-----

The first line contains integer n (1 ≤ n ≤ 100) — the number of elements in the array.

The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 1 000) — the elements of the array.


-----Output-----

Print ""YES"" if the given array is unimodal. Otherwise, print ""NO"".

You can output each letter in any case (upper or lower).


-----Examples-----
Input
6
1 5 5 5 4 2

Output
YES

Input
5
10 20 30 20 10

Output
YES

Input
4
1 2 1 2

Output
NO

Input
7
3 3 3 3 3 3 3

Output
YES



-----Note-----

In the first example the array is unimodal, because it is strictly increasing in the beginning (from position 1 to position 2, inclusively), that it is constant (from position 2 to position 4, inclusively) and then it is strictly decreasing (from position 4 to position 6, inclusively).","n = int(input())
arr = list(map(int, input().split()))

increasing = False
constant = False
decreasing = False

for i in range(1, n):
    if arr[i] > arr[i-1]:
        if decreasing:
            print(""NO"")
            exit()
        increasing = True
    elif arr[i] == arr[i-1]:
        if increasing:
            increasing = False
            constant = True
    else:
        if increasing:
            increasing = False
        decreasing = True

print(""YES"")
",3,False,False,False,True,True,False,True,True,True,True,True,False,True,96_llama3-70b,0.46078781656624684,-0.038680870689825585,0.5416666666666666
97,apps,llama3-70b,qwen2.5-7b-instruct,"At first, let's define function $f(x)$ as follows: $$ \begin{matrix} f(x) & = & \left\{ \begin{matrix} \frac{x}{2} & \mbox{if } x \text{ is even} \\ x - 1 & \mbox{otherwise } \end{matrix} \right. \end{matrix} $$

We can see that if we choose some value $v$ and will apply function $f$ to it, then apply $f$ to $f(v)$, and so on, we'll eventually get $1$. Let's write down all values we get in this process in a list and denote this list as $path(v)$. For example, $path(1) = [1]$, $path(15) = [15, 14, 7, 6, 3, 2, 1]$, $path(32) = [32, 16, 8, 4, 2, 1]$.

Let's write all lists $path(x)$ for every $x$ from $1$ to $n$. The question is next: what is the maximum value $y$ such that $y$ is contained in at least $k$ different lists $path(x)$?

Formally speaking, you need to find maximum $y$ such that $\left| \{ x ~|~ 1 \le x \le n, y \in path(x) \} \right| \ge k$.


-----Input-----

The first line contains two integers $n$ and $k$ ($1 \le k \le n \le 10^{18}$).


-----Output-----

Print the only integer — the maximum value that is contained in at least $k$ paths.


-----Examples-----
Input
11 3

Output
5

Input
11 6

Output
4

Input
20 20

Output
1

Input
14 5

Output
6

Input
1000000 100

Output
31248



-----Note-----

In the first example, the answer is $5$, since $5$ occurs in $path(5)$, $path(10)$ and $path(11)$.

In the second example, the answer is $4$, since $4$ occurs in $path(4)$, $path(5)$, $path(8)$, $path(9)$, $path(10)$ and $path(11)$.

In the third example $n = k$, so the answer is $1$, since $1$ is the only number occuring in all paths for integers from $1$ to $20$.","n, k = map(int, input().split())

def f(x):
    if x % 2 == 0:
        return x // 2
    else:
        return x - 1

def path(x):
    res = [x]
    while x != 1:
        x = f(x)
        res.append(x)
    return res

count = {}
for i in range(1, n + 1):
    for j in path(i):
        if j not in count:
            count[j] = 0
        count[j] += 1

max_y = 0
for y, cnt in count.items():
    if cnt >= k:
        max_y = max(max_y, y)

print(max_y)
",3,False,False,False,False,True,True,True,True,True,True,True,True,False,97_llama3-70b,0.6015087514198227,0.10190933693449948,0.5416666666666666
99,apps,llama3-70b,qwen2.5-7b-instruct,"Gerald bought two very rare paintings at the Sotheby's auction and he now wants to hang them on the wall. For that he bought a special board to attach it to the wall and place the paintings on the board. The board has shape of an a_1 × b_1 rectangle, the paintings have shape of a a_2 × b_2 and a_3 × b_3 rectangles.

Since the paintings are painted in the style of abstract art, it does not matter exactly how they will be rotated, but still, one side of both the board, and each of the paintings must be parallel to the floor. The paintings can touch each other and the edges of the board, but can not overlap or go beyond the edge of the board. Gerald asks whether it is possible to place the paintings on the board, or is the board he bought not large enough?


-----Input-----

The first line contains two space-separated numbers a_1 and b_1 — the sides of the board. Next two lines contain numbers a_2, b_2, a_3 and b_3 — the sides of the paintings. All numbers a_{i}, b_{i} in the input are integers and fit into the range from 1 to 1000.


-----Output-----

If the paintings can be placed on the wall, print ""YES"" (without the quotes), and if they cannot, print ""NO"" (without the quotes).


-----Examples-----
Input
3 2
1 3
2 1

Output
YES

Input
5 5
3 3
3 3

Output
NO

Input
4 2
2 3
1 2

Output
YES



-----Note-----

That's how we can place the pictures in the first test:

[Image]

And that's how we can do it in the third one.

[Image]","a1, b1 = map(int, input().split())
a2, b2 = map(int, input().split())
a3, b3 = map(int, input().split())

if max(a1, b1) >= max(a2, b2) and min(a1, b1) >= min(a2, b2):
    if max(a1, b1) >= max(a3, b3) and min(a1, b1) >= min(a3, b3):
        print(""YES"")
    else:
        print(""NO"")
else:
    if max(a1, b1) >= max(a3, b3) and min(a1, b1) >= min(a3, b3):
        print(""YES"")
    else:
        print(""NO"")
",3,False,False,False,True,False,False,True,False,False,True,False,False,False,99_llama3-70b,0.44565346236023223,-0.053507185884652454,0.5416666666666666
107,apps,llama3-70b,qwen2.5-7b-instruct,"Есть n-подъездный дом, в каждом подъезде по m этажей, и на каждом этаже каждого подъезда ровно k квартир. Таким образом, в доме всего n·m·k квартир. Они пронумерованы естественным образом от 1 до n·m·k, то есть первая квартира на первом этаже в первом подъезде имеет номер 1, первая квартира на втором этаже первого подъезда имеет номер k + 1 и так далее. Особенность этого дома состоит в том, что он круглый. То есть если обходить его по часовой стрелке, то после подъезда номер 1 следует подъезд номер 2, затем подъезд номер 3 и так далее до подъезда номер n. После подъезда номер n снова идёт подъезд номер 1.

Эдвард живёт в квартире номер a, а Наташа — в квартире номер b. Переход на 1 этаж вверх или вниз по лестнице занимает 5 секунд, переход от двери подъезда к двери соседнего подъезда — 15 секунд, а переход в пределах одного этажа одного подъезда происходит мгновенно. Также в каждом подъезде дома есть лифт. Он устроен следующим образом: он всегда приезжает ровно через 10 секунд после вызова, а чтобы переместить пассажира на один этаж вверх или вниз, лифт тратит ровно 1 секунду. Посадка и высадка происходят мгновенно.

Помогите Эдварду найти минимальное время, за которое он сможет добраться до квартиры Наташи. Считайте, что Эдвард может выйти из подъезда только с первого этажа соответствующего подъезда (это происходит мгновенно). Если Эдвард стоит перед дверью какого-то подъезда, он может зайти в него и сразу окажется на первом этаже этого подъезда (это также происходит мгновенно). Эдвард может выбирать, в каком направлении идти вокруг дома.


-----Входные данные-----

В первой строке входных данных следуют три числа n, m, k (1 ≤ n, m, k ≤ 1000) — количество подъездов в доме, количество этажей в каждом подъезде и количество квартир на каждом этаже каждого подъезда соответственно.

Во второй строке входных данных записаны два числа a и b (1 ≤ a, b ≤ n·m·k) — номера квартир, в которых живут Эдвард и Наташа, соответственно. Гарантируется, что эти номера различны. 


-----Выходные данные-----

Выведите единственное целое число — минимальное время (в секундах), за которое Эдвард сможет добраться от своей квартиры до квартиры Наташи.


-----Примеры-----
Входные данные
4 10 5
200 6

Выходные данные
39

Входные данные
3 1 5
7 2

Выходные данные
15



-----Примечание-----

В первом тестовом примере Эдвард находится в 4 подъезде на 10 этаже, а Наташа находится в 1 подъезде на 2 этаже. Поэтому Эдварду выгодно сначала спуститься на лифте на первый этаж (на это он потратит 19 секунд, из которых 10 — на ожидание и 9 — на поездку на лифте), затем обойти дом против часовой стрелки до подъезда номер 1 (на это он потратит 15 секунд), и наконец подняться по лестнице на этаж номер 2 (на это он потратит 5 секунд). Таким образом, ответ равен 19 + 15 + 5 = 39.

Во втором тестовом примере Эдвард живёт в подъезде 2 на этаже 1, а Наташа находится в подъезде 1 на этаже 1. Поэтому Эдварду выгодно просто обойти дом по часовой стрелке до подъезда 1, на это он потратит 15 секунд.","n, m, k = map(int, input().split())
a, b = map(int, input().split())

# Calculate the floor and block number of Edward and Natasha
a_floor = (a - 1) % m + 1
a_block = (a - 1) // (m * k) + 1
b_floor = (b - 1) % m + 1
b_block = (b - 1) // (m * k) + 1

# Calculate the minimum time to reach Natasha's block
min_block_time = min(abs(a_block - b_block), n - abs(a_block - b_block)) * 15

# Calculate the minimum time to reach Natasha's floor
if a_floor > b_floor:
    min_floor_time = (a_floor - b_floor) * 5 + 10
else:
    min_floor_time = (b_floor - a_floor) * 5 + 10

print(min_block_time + min_floor_time)
",3,False,False,False,True,True,True,True,False,True,True,False,True,True,107_llama3-70b,0.8822502879896532,0.4610322878715614,0.7083333333333334
112,apps,llama3-70b,qwen2.5-7b-instruct,"You are given two integers n and k. Find k-th smallest divisor of n, or report that it doesn't exist.

Divisor of n is any such natural number, that n can be divided by it without remainder.


-----Input-----

The first line contains two integers n and k (1 ≤ n ≤ 10^15, 1 ≤ k ≤ 10^9).


-----Output-----

If n has less than k divisors, output -1.

Otherwise, output the k-th smallest divisor of n.


-----Examples-----
Input
4 2

Output
2

Input
5 3

Output
-1

Input
12 5

Output
6



-----Note-----

In the first example, number 4 has three divisors: 1, 2 and 4. The second one is 2.

In the second example, number 5 has only two divisors: 1 and 5. The third divisor doesn't exist, so the answer is -1.","n, k = map(int, input().split())
divisors = []
for i in range(1, int(n ** 0.5) + 1):
    if n % i == 0:
        divisors.append(i)
        if i * i != n:
            divisors.append(n // i)
divisors.sort()
if k > len(divisors):
    print(-1)
else:
    print(divisors[k - 1])
",3,True,True,False,True,True,True,True,True,True,True,True,True,True,112_llama3-70b,0.7604441505365013,0.2804575585748434,0.625
115,apps,llama3-70b,qwen2.5-7b-instruct,"You are given two matrices $A$ and $B$. Each matrix contains exactly $n$ rows and $m$ columns. Each element of $A$ is either $0$ or $1$; each element of $B$ is initially $0$.

You may perform some operations with matrix $B$. During each operation, you choose any submatrix of $B$ having size $2 \times 2$, and replace every element in the chosen submatrix with $1$. In other words, you choose two integers $x$ and $y$ such that $1 \le x < n$ and $1 \le y < m$, and then set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$.

Your goal is to make matrix $B$ equal to matrix $A$. Two matrices $A$ and $B$ are equal if and only if every element of matrix $A$ is equal to the corresponding element of matrix $B$.

Is it possible to make these matrices equal? If it is, you have to come up with a sequence of operations that makes $B$ equal to $A$. Note that you don't have to minimize the number of operations.


-----Input-----

The first line contains two integers $n$ and $m$ ($2 \le n, m \le 50$).

Then $n$ lines follow, each containing $m$ integers. The $j$-th integer in the $i$-th line is $A_{i, j}$. Each integer is either $0$ or $1$.


-----Output-----

If it is impossible to make $B$ equal to $A$, print one integer $-1$.

Otherwise, print any sequence of operations that transforms $B$ into $A$ in the following format: the first line should contain one integer $k$ — the number of operations, and then $k$ lines should follow, each line containing two integers $x$ and $y$ for the corresponding operation (set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$). The condition $0 \le k \le 2500$ should hold.


-----Examples-----
Input
3 3
1 1 1
1 1 1
0 1 1

Output
3
1 1
1 2
2 2

Input
3 3
1 0 1
1 0 1
0 0 0

Output
-1

Input
3 2
0 0
0 0
0 0

Output
0



-----Note-----

The sequence of operations in the first example: $\begin{matrix} 0 & 0 & 0 & & 1 & 1 & 0 & & 1 & 1 & 1 & & 1 & 1 & 1 \\ 0 & 0 & 0 & \rightarrow & 1 & 1 & 0 & \rightarrow & 1 & 1 & 1 & \rightarrow & 1 & 1 & 1 \\ 0 & 0 & 0 & & 0 & 0 & 0 & & 0 & 0 & 0 & & 0 & 1 & 1 \end{matrix}$","n, m = map(int, input().split())
A = [list(map(int, input().split())) for _ in range(n)]

ops = []
for i in range(n-1):
    for j in range(m-1):
        if A[i][j] == 1 and A[i+1][j] == 1 and A[i][j+1] == 1 and A[i+1][j+1] == 1:
            continue
        if A[i][j] == 1 or A[i+1][j] == 1 or A[i][j+1] == 1 or A[i+1][j+1] == 1:
            ops.append((i+1, j+1))

if len(ops) > 2500:
    print(-1)
else:
    print(len(ops))
    for op in ops:
        print(op[0], op[1])
",3,False,False,False,True,False,False,False,True,True,True,False,False,False,115_llama3-70b,0.8967088598411286,0.4905059206596866,0.7083333333333334
117,apps,llama3-70b,qwen2.5-7b-instruct,"Today an outstanding event is going to happen in the forest — hedgehog Filya will come to his old fried Sonya!

Sonya is an owl and she sleeps during the day and stay awake from minute l_1 to minute r_1 inclusive. Also, during the minute k she prinks and is unavailable for Filya.

Filya works a lot and he plans to visit Sonya from minute l_2 to minute r_2 inclusive.

Calculate the number of minutes they will be able to spend together.


-----Input-----

The only line of the input contains integers l_1, r_1, l_2, r_2 and k (1 ≤ l_1, r_1, l_2, r_2, k ≤ 10^18, l_1 ≤ r_1, l_2 ≤ r_2), providing the segments of time for Sonya and Filya and the moment of time when Sonya prinks.


-----Output-----

Print one integer — the number of minutes Sonya and Filya will be able to spend together.


-----Examples-----
Input
1 10 9 20 1

Output
2

Input
1 100 50 200 75

Output
50



-----Note-----

In the first sample, they will be together during minutes 9 and 10.

In the second sample, they will be together from minute 50 to minute 74 and from minute 76 to minute 100.","l1, r1, l2, r2, k = map(int, input().split())

# Calculate the intersection of Sonya's and Filya's time segments
start = max(l1, l2)
end = min(r1, r2)

# If Sonya prinks during their common time, subtract 1 minute
if start <= k <= end:
    end -= 1

# Calculate the number of minutes they can spend together
minutes_together = max(0, end - start + 1)

print(minutes_together)
",3,True,True,True,True,True,True,True,True,True,True,False,True,True,117_llama3-70b,0.8242279258306444,0.3607331723325495,0.75
118,apps,llama3-70b,qwen2.5-7b-instruct,"There is a grass field that stretches infinitely.
In this field, there is a negligibly small cow. Let (x, y) denote the point that is x\ \mathrm{cm} south and y\ \mathrm{cm} east of the point where the cow stands now. The cow itself is standing at (0, 0).
There are also N north-south lines and M east-west lines drawn on the field. The i-th north-south line is the segment connecting the points (A_i, C_i) and (B_i, C_i), and the j-th east-west line is the segment connecting the points (D_j, E_j) and (D_j, F_j).
What is the area of the region the cow can reach when it can move around as long as it does not cross the segments (including the endpoints)? If this area is infinite, print INF instead.

-----Constraints-----
 - All values in input are integers between -10^9 and 10^9  (inclusive).
 - 1 \leq N, M \leq 1000
 - A_i < B_i\ (1 \leq i \leq N)
 - E_j < F_j\ (1 \leq j \leq M)
 - The point (0, 0) does not lie on any of the given segments.

-----Input-----
Input is given from Standard Input in the following format:
N M
A_1 B_1 C_1
:
A_N B_N C_N
D_1 E_1 F_1
:
D_M E_M F_M

-----Output-----
If the area of the region the cow can reach is infinite, print INF; otherwise, print an integer representing the area in \mathrm{cm^2}.
(Under the constraints, it can be proved that the area of the region is always an integer if it is not infinite.)

-----Sample Input-----
5 6
1 2 0
0 1 1
0 2 2
-3 4 -1
-2 6 3
1 0 1
0 1 2
2 0 2
-1 -4 5
3 -2 4
1 2 4

-----Sample Output-----
13

The area of the region the cow can reach is 13\ \mathrm{cm^2}.","from functools import cmp_to_key

N, M = map(int, input().split())

north_south_lines = []
for _ in range(N):
    A, B, C = map(int, input().split())
    north_south_lines.append((C, A, B))

east_west_lines = []
for _ in range(M):
    D, E, F = map(int, input().split())
    east_west_lines.append((D, E, F))

def intersect(line1, line2):
    x1, y1, x2 = line1
    x3, y3, x4 = line2
    denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4)
    if denom == 0:
        return False
    t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / denom
    u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / denom
    if 0 <= t <= 1 and 0 <= u <= 1:
        return True
    return False

north_south_lines.sort(key=cmp_to_key(lambda x, y: x - y))
east_west_lines.sort(key=cmp_to_key(lambda x, y: x - y))

x_points = set()
y_points = set()

for i in range(N):
    for j in range(i + 1, N):
        if north_south_lines[i][0] == north_south_lines[j][0]:
            continue
        x_points.add(north_south_lines[i][0])
        x_points.add(north_south_lines[j][0])

for i in range(M):
    for j in range(i + 1, M):
        if east_west_lines[i][0] == east_west_lines[j][0]:
            continue
        y_points.add(east_west_lines[i][0])

for i in range(N):
    for j in range(M):
        if intersect(north_south_lines[i], east_west_lines[j]):
            x_points.add(north_south_lines[i][0])
            y_points.add(east_west_lines[j][0])

x_points = sorted(list(x_points))
y_points = sorted(list(y_points))

area = 0
for i in range(len(x_points) - 1):
    for j in range(len(y_points) - 1):
        area += (x_points[i + 1] - x_points[i]) * (y_points[j + 1] - y_points[j])

if area == 0:
    print(""INF"")
else:
    print(area)
",3,False,False,False,True,True,True,True,True,False,True,True,False,False,118_llama3-70b,0.8859156860437958,0.47246944408307595,0.75
139,apps,llama3-70b,qwen2.5-7b-instruct,"Little girl Alyona is in a shop to buy some copybooks for school. She study four subjects so she wants to have equal number of copybooks for each of the subjects. There are three types of copybook's packs in the shop: it is possible to buy one copybook for a rubles, a pack of two copybooks for b rubles, and a pack of three copybooks for c rubles. Alyona already has n copybooks.

What is the minimum amount of rubles she should pay to buy such number of copybooks k that n + k is divisible by 4? There are infinitely many packs of any type in the shop. Alyona can buy packs of different type in the same purchase.


-----Input-----

The only line contains 4 integers n, a, b, c (1 ≤ n, a, b, c ≤ 10^9).


-----Output-----

Print the minimum amount of rubles she should pay to buy such number of copybooks k that n + k is divisible by 4.


-----Examples-----
Input
1 1 3 4

Output
3

Input
6 2 1 1

Output
1

Input
4 4 4 4

Output
0

Input
999999999 1000000000 1000000000 1000000000

Output
1000000000



-----Note-----

In the first example Alyona can buy 3 packs of 1 copybook for 3a = 3 rubles in total. After that she will have 4 copybooks which she can split between the subjects equally. 

In the second example Alyuna can buy a pack of 2 copybooks for b = 1 ruble. She will have 8 copybooks in total.

In the third example Alyona can split the copybooks she already has between the 4 subject equally, so she doesn't need to buy anything.

In the fourth example Alyona should buy one pack of one copybook.","n, a, b, c = map(int, input().split())
k = 4 - n % 4
if k == 4:
    k = 0
ans = float('inf')
for i in range(k // 3 + 1):
    j = (k - 3 * i) // 2
    if 3 * i + 2 * j <= k:
        ans = min(ans, 3 * i * c + j * b + (k - 3 * i - 2 * j) * a)
print(ans)
",3,False,False,True,True,True,True,True,False,True,True,False,True,False,139_llama3-70b,0.857008858514336,0.41767737397302485,0.6666666666666666
147,apps,llama3-70b,qwen2.5-7b-instruct,"This morning, Roman woke up and opened the browser with $n$ opened tabs numbered from $1$ to $n$. There are two kinds of tabs: those with the information required for the test and those with social network sites. Roman decided that there are too many tabs open so he wants to close some of them.

He decided to accomplish this by closing every $k$-th ($2 \leq k \leq n - 1$) tab. Only then he will decide whether he wants to study for the test or to chat on the social networks. Formally, Roman will choose one tab (let its number be $b$) and then close all tabs with numbers $c = b + i \cdot k$ that satisfy the following condition: $1 \leq c \leq n$ and $i$ is an integer (it may be positive, negative or zero).

For example, if $k = 3$, $n = 14$ and Roman chooses $b = 8$, then he will close tabs with numbers $2$, $5$, $8$, $11$ and $14$.

After closing the tabs Roman will calculate the amount of remaining tabs with the information for the test (let's denote it $e$) and the amount of remaining social network tabs ($s$). Help Roman to calculate the maximal absolute value of the difference of those values $|e - s|$ so that it would be easy to decide what to do next.


-----Input-----

The first line contains two integers $n$ and $k$ ($2 \leq k < n \leq 100$) — the amount of tabs opened currently and the distance between the tabs closed.

The second line consists of $n$ integers, each of them equal either to $1$ or to $-1$. The $i$-th integer denotes the type of the $i$-th tab: if it is equal to $1$, this tab contains information for the test, and if it is equal to $-1$, it's a social network tab.


-----Output-----

Output a single integer — the maximum absolute difference between the amounts of remaining tabs of different types $|e - s|$.


-----Examples-----
Input
4 2
1 1 -1 1

Output
2

Input
14 3
-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1

Output
9



-----Note-----

In the first example we can choose $b = 1$ or $b = 3$. We will delete then one tab of each type and the remaining tabs are then all contain test information. Thus, $e = 2$ and $s = 0$ and $|e - s| = 2$.

In the second example, on the contrary, we can leave opened only tabs that have social networks opened in them.","n, k = map(int, input().split())
tabs = list(map(int, input().split()))

max_diff = 0
for b in range(1, n + 1):
    e, s = 0, 0
    for i in range(1, n + 1):
        if (i - b) % k != 0:
            e += tabs[i - 1] == 1
            s += tabs[i - 1] == -1
    max_diff = max(max_diff, abs(e - s))

print(max_diff)
",3,True,False,False,True,False,True,True,False,False,True,True,True,False,147_llama3-70b,0.854286478749548,0.3752192952508671,0.8333333333333334
166,apps,llama3-70b,qwen2.5-7b-instruct,"Vasiliy spent his vacation in a sanatorium, came back and found that he completely forgot details of his vacation! 

Every day there was a breakfast, a dinner and a supper in a dining room of the sanatorium (of course, in this order). The only thing that Vasiliy has now is a card from the dining room contaning notes how many times he had a breakfast, a dinner and a supper (thus, the card contains three integers). Vasiliy could sometimes have missed some meal, for example, he could have had a breakfast and a supper, but a dinner, or, probably, at some days he haven't been at the dining room at all.

Vasiliy doesn't remember what was the time of the day when he arrived to sanatorium (before breakfast, before dinner, before supper or after supper), and the time when he left it (before breakfast, before dinner, before supper or after supper). So he considers any of these options. After Vasiliy arrived to the sanatorium, he was there all the time until he left. Please note, that it's possible that Vasiliy left the sanatorium on the same day he arrived.

According to the notes in the card, help Vasiliy determine the minimum number of meals in the dining room that he could have missed. We shouldn't count as missed meals on the arrival day before Vasiliy's arrival and meals on the departure day after he left.


-----Input-----

The only line contains three integers b, d and s (0 ≤ b, d, s ≤ 10^18,  b + d + s ≥ 1) — the number of breakfasts, dinners and suppers which Vasiliy had during his vacation in the sanatorium. 


-----Output-----

Print single integer — the minimum possible number of meals which Vasiliy could have missed during his vacation. 


-----Examples-----
Input
3 2 1

Output
1


Input
1 0 0

Output
0


Input
1 1 1

Output
0


Input
1000000000000000000 0 1000000000000000000

Output
999999999999999999





-----Note-----

In the first sample, Vasiliy could have missed one supper, for example, in case he have arrived before breakfast, have been in the sanatorium for two days (including the day of arrival) and then have left after breakfast on the third day. 

In the second sample, Vasiliy could have arrived before breakfast, have had it, and immediately have left the sanatorium, not missing any meal.

In the third sample, Vasiliy could have been in the sanatorium for one day, not missing any meal.","b, d, s = map(int, input().split())
print(max(0, b - d, b - s, d - s))
",3,False,False,False,True,False,True,True,False,False,False,False,True,True,166_llama3-70b,0.7941543309745088,0.3231319540048668,0.625
168,apps,llama3-70b,qwen2.5-7b-instruct,"You are given two strings a and b. You have to remove the minimum possible number of consecutive (standing one after another) characters from string b in such a way that it becomes a subsequence of string a. It can happen that you will not need to remove any characters at all, or maybe you will have to remove all of the characters from b and make it empty.

Subsequence of string s is any such string that can be obtained by erasing zero or more characters (not necessarily consecutive) from string s.


-----Input-----

The first line contains string a, and the second line — string b. Both of these strings are nonempty and consist of lowercase letters of English alphabet. The length of each string is no bigger than 10^5 characters.


-----Output-----

On the first line output a subsequence of string a, obtained from b by erasing the minimum number of consecutive characters.

If the answer consists of zero characters, output «-» (a minus sign).


-----Examples-----
Input
hi
bob

Output
-

Input
abca
accepted

Output
ac

Input
abacaba
abcdcba

Output
abcba



-----Note-----

In the first example strings a and b don't share any symbols, so the longest string that you can get is empty.

In the second example ac is a subsequence of a, and at the same time you can obtain it by erasing consecutive symbols cepted from string b.","a = input()
b = input()

i = 0
j = 0
ans = []

while i < len(a) and j < len(b):
    if a[i] == b[j]:
        ans.append(a[i])
        i += 1
        j += 1
    else:
        i += 1

if len(ans) == 0:
    print('-')
else:
    print(''.join(ans))
",3,False,False,False,True,True,True,True,True,True,False,True,False,False,168_llama3-70b,0.8388713124323346,0.3900415254551657,0.7083333333333334
181,apps,llama3-70b,qwen2.5-7b-instruct,"Andrey received a postcard from Irina. It contained only the words ""Hello, Andrey!"", and a strange string consisting of lowercase Latin letters, snowflakes and candy canes. Andrey thought that this string is an encrypted message, and decided to decrypt it.

Andrey noticed that snowflakes and candy canes always stand after the letters, so he supposed that the message was encrypted as follows. Candy cane means that the letter before it can be removed, or can be left. A snowflake means that the letter before it can be removed, left, or repeated several times.

For example, consider the following string:  [Image] 

This string can encode the message «happynewyear». For this, candy canes and snowflakes should be used as follows:   candy cane 1: remove the letter w,  snowflake 1: repeat the letter p twice,  candy cane 2: leave the letter n,  snowflake 2: remove the letter w,  snowflake 3: leave the letter e. 

 [Image] 

Please note that the same string can encode different messages. For example, the string above can encode «hayewyar», «happpppynewwwwwyear», and other messages.

Andrey knows that messages from Irina usually have a length of $k$ letters. Help him to find out if a given string can encode a message of $k$ letters, and if so, give an example of such a message.


-----Input-----

The first line contains the string received in the postcard. The string consists only of lowercase Latin letters, as well as the characters «*» and «?», meaning snowflake and candy cone, respectively. These characters can only appear immediately after the letter. The length of the string does not exceed $200$.

The second line contains an integer number $k$ ($1 \leq k \leq 200$), the required message length.


-----Output-----

Print any message of length $k$ that the given string can encode, or «Impossible» if such a message does not exist.


-----Examples-----
Input
hw?ap*yn?eww*ye*ar
12

Output
happynewyear

Input
ab?a
2

Output
aa
Input
ab?a
3

Output
aba
Input
ababb
5

Output
ababb
Input
ab?a
1

Output
Impossible","s = input()
k = int(input())
ans = []
i = 0
while i < len(s) and len(ans) < k:
    if s[i].isalpha():
        ans.append(s[i])
        if i + 1 < len(s) and s[i + 1] == '?':
            i += 2
        elif i + 1 < len(s) and s[i + 1] == '*':
            while i + 1 < len(s) and s[i + 1] == '*':
                ans.append(s[i])
                i += 2
            i += 1
        else:
            i += 1
    else:
        i += 1
if len(ans) == k:
    print(''.join(ans))
else:
    print('Impossible')
",3,False,False,False,True,True,True,True,True,False,True,True,True,True,181_llama3-70b,0.7274293889851403,0.24037283084988623,0.625
187,apps,llama3-70b,qwen2.5-7b-instruct,"Students in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.

The students don’t want to use too many blocks, but they also want to be unique, so no two students’ towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.


-----Input-----

The first line of the input contains two space-separated integers n and m (0 ≤ n, m ≤ 1 000 000, n + m > 0) — the number of students using two-block pieces and the number of students using three-block pieces, respectively.


-----Output-----

Print a single integer, denoting the minimum possible height of the tallest tower.


-----Examples-----
Input
1 3

Output
9

Input
3 2

Output
8

Input
5 0

Output
10



-----Note-----

In the first case, the student using two-block pieces can make a tower of height 4, and the students using three-block pieces can make towers of height 3, 6, and 9 blocks. The tallest tower has a height of 9 blocks.

In the second case, the students can make towers of heights 2, 4, and 8 with two-block pieces and towers of heights 3 and 6 with three-block pieces, for a maximum height of 8 blocks.","n, m = map(int, input().split())
towers = set()
for i in range(1, n + 1):
    towers.add(i * 2)
for i in range(1, m + 1):
    towers.add(i * 3)
print(max(towers))
",3,False,False,False,False,True,True,False,True,True,True,True,True,True,187_llama3-70b,0.8225980361842448,0.3634718884544843,0.7083333333333334
191,apps,llama3-70b,qwen2.5-7b-instruct,"Карта звёздного неба представляет собой прямоугольное поле, состоящее из n строк по m символов в каждой строке. Каждый символ — это либо «.» (означает пустой участок неба), либо «*» (означает то, что в этом месте на небе есть звезда). 

Новое издание карты звёздного неба будет напечатано на квадратных листах, поэтому требуется найти минимально возможную сторону квадрата, в который могут поместиться все звезды. Границы искомого квадрата должны быть параллельны сторонам заданного прямоугольного поля.


-----Входные данные-----

В первой строке входных данных записаны два числа n и m (1 ≤ n, m ≤ 1000) — количество строк и столбцов на карте звездного неба.

В следующих n строках задано по m символов. Каждый символ — это либо «.» (пустой участок неба), либо «*» (звезда).

Гарантируется, что на небе есть хотя бы одна звезда.


-----Выходные данные-----

Выведите одно число — минимально возможную сторону квадрата, которым можно накрыть все звезды.


-----Примеры-----
Входные данные
4 4
....
..*.
...*
..**

Выходные данные
3

Входные данные
1 3
*.*

Выходные данные
3

Входные данные
2 1
.
*

Выходные данные
1



-----Примечание-----

Один из возможных ответов на первый тестовый пример:

 [Image] 

Один из возможных ответов на второй тестовый пример (обратите внимание, что покрывающий квадрат выходит за пределы карты звездного неба):

 [Image] 

Ответ на третий тестовый пример:

 [Image]","n, m = map(int, input().split())
stars = []
for _ in range(n):
    row = input()
    for j, c in enumerate(row):
        if c == '*':
            stars.append((j, _))

min_x = min(x for x, y in stars)
max_x = max(x for x, y in stars)
min_y = min(y for x, y in stars)
max_y = max(y for x, y in stars)

side = max(max_x - min_x + 1, max_y - min_y + 1)
print(side)
",3,True,True,True,True,True,True,True,True,True,True,True,True,True,191_llama3-70b,0.5906126045643085,0.09096909090919665,0.5416666666666666
198,apps,llama3-70b,qwen2.5-7b-instruct,"An online contest will soon be held on ForceCoders, a large competitive programming platform. The authors have prepared $n$ problems; and since the platform is very popular, $998244351$ coder from all over the world is going to solve them.

For each problem, the authors estimated the number of people who would solve it: for the $i$-th problem, the number of accepted solutions will be between $l_i$ and $r_i$, inclusive.

The creator of ForceCoders uses different criteria to determine if the contest is good or bad. One of these criteria is the number of inversions in the problem order. An inversion is a pair of problems $(x, y)$ such that $x$ is located earlier in the contest ($x < y$), but the number of accepted solutions for $y$ is strictly greater.

Obviously, both the creator of ForceCoders and the authors of the contest want the contest to be good. Now they want to calculate the probability that there will be no inversions in the problem order, assuming that for each problem $i$, any integral number of accepted solutions for it (between $l_i$ and $r_i$) is equally probable, and all these numbers are independent.


-----Input-----

The first line contains one integer $n$ ($2 \le n \le 50$) — the number of problems in the contest.

Then $n$ lines follow, the $i$-th line contains two integers $l_i$ and $r_i$ ($0 \le l_i \le r_i \le 998244351$) — the minimum and maximum number of accepted solutions for the $i$-th problem, respectively.


-----Output-----

The probability that there will be no inversions in the contest can be expressed as an irreducible fraction $\frac{x}{y}$, where $y$ is coprime with $998244353$. Print one integer — the value of $xy^{-1}$, taken modulo $998244353$, where $y^{-1}$ is an integer such that $yy^{-1} \equiv 1$ $(mod$ $998244353)$.


-----Examples-----
Input
3
1 2
1 2
1 2

Output
499122177

Input
2
42 1337
13 420

Output
578894053

Input
2
1 1
0 0

Output
1

Input
2
1 1
1 1

Output
1



-----Note-----

The real answer in the first test is $\frac{1}{2}$.","import math

MOD = 998244353

def mul(a, b):
    return (a * b) % MOD

def power(a, b):
    res = 1
    while b > 0:
        if b & 1:
            res = mul(res, a)
        a = mul(a, a)
        b >>= 1
    return res

def inv(a):
    return power(a, MOD - 2)

n = int(input())
a = [list(map(int, input().split())) for _ in range(n)]

res = 1
for i in range(n):
    cnt = 1
    for j in range(i + 1, n):
        if a[i][0] <= a[j][1]:
            cnt = mul(cnt, a[j][1] - a[i][0] + 1)
    res = mul(res, cnt)

for i in range(n):
    res = mul(res, inv(a[i][1] - a[i][0] + 1))

print(res)
",3,False,False,False,True,True,False,True,True,True,False,True,True,False,198_llama3-70b,0.8263793687126502,0.37186575487735446,0.6666666666666666
199,apps,llama3-70b,qwen2.5-7b-instruct,"Pasha has a wooden stick of some positive integer length n. He wants to perform exactly three cuts to get four parts of the stick. Each part must have some positive integer length and the sum of these lengths will obviously be n. 

Pasha likes rectangles but hates squares, so he wonders, how many ways are there to split a stick into four parts so that it's possible to form a rectangle using these parts, but is impossible to form a square.

Your task is to help Pasha and count the number of such ways. Two ways to cut the stick are considered distinct if there exists some integer x, such that the number of parts of length x in the first way differ from the number of parts of length x in the second way.


-----Input-----

The first line of the input contains a positive integer n (1 ≤ n ≤ 2·10^9) — the length of Pasha's stick.


-----Output-----

The output should contain a single integer — the number of ways to split Pasha's stick into four parts of positive integer length so that it's possible to make a rectangle by connecting the ends of these parts, but is impossible to form a square. 


-----Examples-----
Input
6

Output
1

Input
20

Output
4



-----Note-----

There is only one way to divide the stick in the first sample {1, 1, 2, 2}.

Four ways to divide the stick in the second sample are {1, 1, 9, 9}, {2, 2, 8, 8}, {3, 3, 7, 7} and {4, 4, 6, 6}. Note that {5, 5, 5, 5} doesn't work.","def count_ways(n):
    ways = 0
    for a in range(1, n // 2 + 1):
        for b in range(a, (n - a) // 2 + 1):
            if a != b and 2 * (a + b) == n:
                ways += 1
    return ways

n = int(input())
print(count_ways(n))
",3,False,False,False,True,True,True,True,False,False,True,True,True,True,199_llama3-70b,0.6434567778509719,0.14620906637956121,0.5416666666666666
207,apps,llama3-70b,qwen2.5-7b-instruct,"A frog is initially at position $0$ on the number line. The frog has two positive integers $a$ and $b$. From a position $k$, it can either jump to position $k+a$ or $k-b$.

Let $f(x)$ be the number of distinct integers the frog can reach if it never jumps on an integer outside the interval $[0, x]$. The frog doesn't need to visit all these integers in one trip, that is, an integer is counted if the frog can somehow reach it if it starts from $0$.

Given an integer $m$, find $\sum_{i=0}^{m} f(i)$. That is, find the sum of all $f(i)$ for $i$ from $0$ to $m$.


-----Input-----

The first line contains three integers $m, a, b$ ($1 \leq m \leq 10^9, 1 \leq a,b \leq 10^5$).


-----Output-----

Print a single integer, the desired sum.


-----Examples-----
Input
7 5 3

Output
19

Input
1000000000 1 2019

Output
500000001500000001

Input
100 100000 1

Output
101

Input
6 4 5

Output
10



-----Note-----

In the first example, we must find $f(0)+f(1)+\ldots+f(7)$. We have $f(0) = 1, f(1) = 1, f(2) = 1, f(3) = 1, f(4) = 1, f(5) = 3, f(6) = 3, f(7) = 8$. The sum of these values is $19$.

In the second example, we have $f(i) = i+1$, so we want to find $\sum_{i=0}^{10^9} i+1$.

In the third example, the frog can't make any jumps in any case.","m, a, b = map(int, input().split())
dp = [0]*(m+1)
dp[0] = 1
for i in range(m+1):
    if i+a <= m:
        dp[i+a] += dp[i]
    if i-b >= 0:
        dp[i] += dp[i-b]
print(sum(dp))
",3,False,False,False,True,True,False,True,True,True,True,True,True,True,207_llama3-70b,0.5811835376272438,0.07923404231990178,0.625
209,apps,llama3-70b,qwen2.5-7b-instruct,"Pashmak has fallen in love with an attractive girl called Parmida since one year ago...

Today, Pashmak set up a meeting with his partner in a romantic garden. Unfortunately, Pashmak has forgotten where the garden is. But he remembers that the garden looks like a square with sides parallel to the coordinate axes. He also remembers that there is exactly one tree on each vertex of the square. Now, Pashmak knows the position of only two of the trees. Help him to find the position of two remaining ones.


-----Input-----

The first line contains four space-separated x_1, y_1, x_2, y_2 ( - 100 ≤ x_1, y_1, x_2, y_2 ≤ 100) integers, where x_1 and y_1 are coordinates of the first tree and x_2 and y_2 are coordinates of the second tree. It's guaranteed that the given points are distinct.


-----Output-----

If there is no solution to the problem, print -1. Otherwise print four space-separated integers x_3, y_3, x_4, y_4 that correspond to the coordinates of the two other trees. If there are several solutions you can output any of them. 

Note that x_3, y_3, x_4, y_4 must be in the range ( - 1000 ≤ x_3, y_3, x_4, y_4 ≤ 1000).


-----Examples-----
Input
0 0 0 1

Output
1 0 1 1

Input
0 0 1 1

Output
0 1 1 0

Input
0 0 1 2

Output
-1","x1, y1, x2, y2 = map(int, input().split())

if x1 == x2:
    x3, x4 = x1 + abs(y1 - y2), x1 - abs(y1 - y2)
    y3, y4 = y1, y2
else:
    y3, y4 = y1 + abs(x1 - x2), y1 - abs(x1 - x2)
    x3, x4 = x1, x2

if -1000 <= x3 <= 1000 and -1000 <= x4 <= 1000 and -1000 <= y3 <= 1000 and -1000 <= y4 <= 1000:
    print(x3, y3, x4, y4)
else:
    print(-1)
",3,False,False,False,False,True,False,False,True,True,True,True,False,True,209_llama3-70b,0.6568180703679871,0.16011500355143357,0.5416666666666666
211,apps,llama3-70b,qwen2.5-7b-instruct,"One spring day on his way to university Lesha found an array A. Lesha likes to split arrays into several parts. This time Lesha decided to split the array A into several, possibly one, new arrays so that the sum of elements in each of the new arrays is not zero. One more condition is that if we place the new arrays one after another they will form the old array A.

Lesha is tired now so he asked you to split the array. Help Lesha!


-----Input-----

The first line contains single integer n (1 ≤ n ≤ 100) — the number of elements in the array A.

The next line contains n integers a_1, a_2, ..., a_{n} ( - 10^3 ≤ a_{i} ≤ 10^3) — the elements of the array A.


-----Output-----

If it is not possible to split the array A and satisfy all the constraints, print single line containing ""NO"" (without quotes).

Otherwise in the first line print ""YES"" (without quotes). In the next line print single integer k — the number of new arrays. In each of the next k lines print two integers l_{i} and r_{i} which denote the subarray A[l_{i}... r_{i}] of the initial array A being the i-th new array. Integers l_{i}, r_{i} should satisfy the following conditions:  l_1 = 1  r_{k} = n  r_{i} + 1 = l_{i} + 1 for each 1 ≤ i < k. 

If there are multiple answers, print any of them.


-----Examples-----
Input
3
1 2 -3

Output
YES
2
1 2
3 3

Input
8
9 -12 3 4 -4 -10 7 3

Output
YES
2
1 2
3 8

Input
1
0

Output
NO

Input
4
1 2 3 -5

Output
YES
4
1 1
2 2
3 3
4 4","n = int(input())
a = list(map(int, input().split()))
prefix_sum = [0] * (n + 1)
for i in range(n):
    prefix_sum[i + 1] = prefix_sum[i] + a[i]

if prefix_sum[n] == 0:
    print(""NO"")
else:
    print(""YES"")
    k = 1
    l = 1
    for r in range(1, n + 1):
        if prefix_sum[r] != 0 and prefix_sum[r] != prefix_sum[n]:
            print(k, l, r)
            k += 1
            l = r
    print(k, l, n)
",3,False,False,False,True,True,False,False,True,True,True,False,False,True,211_llama3-70b,0.5857055335578474,0.08375838445913218,0.625
213,apps,llama3-70b,qwen2.5-7b-instruct,"You are given a non-negative integer n, its decimal representation consists of at most 100 digits and doesn't contain leading zeroes.

Your task is to determine if it is possible in this case to remove some of the digits (possibly not remove any digit at all) so that the result contains at least one digit, forms a non-negative integer, doesn't have leading zeroes and is divisible by 8. After the removing, it is forbidden to rearrange the digits.

If a solution exists, you should print it.


-----Input-----

The single line of the input contains a non-negative integer n. The representation of number n doesn't contain any leading zeroes and its length doesn't exceed 100 digits. 


-----Output-----

Print ""NO"" (without quotes), if there is no such way to remove some digits from number n. 

Otherwise, print ""YES"" in the first line and the resulting number after removing digits from number n in the second line. The printed number must be divisible by 8.

If there are multiple possible answers, you may print any of them.


-----Examples-----
Input
3454

Output
YES
344

Input
10

Output
YES
0

Input
111111

Output
NO","n = int(input())
digits = [int(d) for d in str(n)]
for i in range(len(digits)):
    new_n = int(''.join(map(str, digits[:i] + digits[i+1:])))
    if new_n % 8 == 0 and str(new_n)[0] != '0':
        print(""YES"")
        print(new_n)
        exit()
print(""NO"")
",3,False,False,False,False,True,True,True,True,False,False,False,False,True,213_llama3-70b,0.8229039617038127,0.36037537446466134,0.625
232,apps,llama3-70b,qwen2.5-7b-instruct,"The main street of Berland is a straight line with n houses built along it (n is an even number). The houses are located at both sides of the street. The houses with odd numbers are at one side of the street and are numbered from 1 to n - 1 in the order from the beginning of the street to the end (in the picture: from left to right). The houses with even numbers are at the other side of the street and are numbered from 2 to n in the order from the end of the street to its beginning (in the picture: from right to left). The corresponding houses with even and odd numbers are strictly opposite each other, that is, house 1 is opposite house n, house 3 is opposite house n - 2, house 5 is opposite house n - 4 and so on. [Image] 

Vasya needs to get to house number a as quickly as possible. He starts driving from the beginning of the street and drives his car to house a. To get from the beginning of the street to houses number 1 and n, he spends exactly 1 second. He also spends exactly one second to drive the distance between two neighbouring houses. Vasya can park at any side of the road, so the distance between the beginning of the street at the houses that stand opposite one another should be considered the same.

Your task is: find the minimum time Vasya needs to reach house a.


-----Input-----

The first line of the input contains two integers, n and a (1 ≤ a ≤ n ≤ 100 000) — the number of houses on the street and the number of the house that Vasya needs to reach, correspondingly. It is guaranteed that number n is even.


-----Output-----

Print a single integer — the minimum time Vasya needs to get from the beginning of the street to house a.


-----Examples-----
Input
4 2

Output
2

Input
8 5

Output
3



-----Note-----

In the first sample there are only four houses on the street, two houses at each side. House 2 will be the last at Vasya's right.

The second sample corresponds to picture with n = 8. House 5 is the one before last at Vasya's left.","n, a = map(int, input().split())
if a <= n // 2:
    print(a // 2 + a % 2)
else:
    print((n - a + 1) // 2 + (n - a + 1) % 2)
",3,False,False,False,True,True,True,True,True,True,False,True,False,True,232_llama3-70b,0.7398145309519372,0.25537191113721835,0.625
236,apps,llama3-70b,qwen2.5-7b-instruct,"After passing a test, Vasya got himself a box of $n$ candies. He decided to eat an equal amount of candies each morning until there are no more candies. However, Petya also noticed the box and decided to get some candies for himself.

This means the process of eating candies is the following: in the beginning Vasya chooses a single integer $k$, same for all days. After that, in the morning he eats $k$ candies from the box (if there are less than $k$ candies in the box, he eats them all), then in the evening Petya eats $10\%$ of the candies remaining in the box. If there are still candies left in the box, the process repeats — next day Vasya eats $k$ candies again, and Petya — $10\%$ of the candies left in a box, and so on.

If the amount of candies in the box is not divisible by $10$, Petya rounds the amount he takes from the box down. For example, if there were $97$ candies in the box, Petya would eat only $9$ of them. In particular, if there are less than $10$ candies in a box, Petya won't eat any at all.

Your task is to find out the minimal amount of $k$ that can be chosen by Vasya so that he would eat at least half of the $n$ candies he initially got. Note that the number $k$ must be integer.


-----Input-----

The first line contains a single integer $n$ ($1 \leq n \leq 10^{18}$) — the initial amount of candies in the box.


-----Output-----

Output a single integer — the minimal amount of $k$ that would allow Vasya to eat at least half of candies he got.


-----Example-----
Input
68

Output
3



-----Note-----

In the sample, the amount of candies, with $k=3$, would change in the following way (Vasya eats first):

$68 \to 65 \to 59 \to 56 \to 51 \to 48 \to 44 \to 41 \\ \to 37 \to 34 \to 31 \to 28 \to 26 \to 23 \to 21 \to 18 \to 17 \to 14 \\ \to 13 \to 10 \to 9 \to 6 \to 6 \to 3 \to 3 \to 0$.

In total, Vasya would eat $39$ candies, while Petya — $29$.","n = int(input())
k = 1
while True:
    candies = n
    vasya_eaten = 0
    while candies > 0:
        vasya_eaten += min(k, candies)
        candies -= min(k, candies)
        petya_eaten = candies // 10
        candies -= petya_eaten
    if vasya_eaten * 2 >= n:
        print(k)
        break
    k += 1
",3,False,False,True,True,True,True,True,False,True,True,True,False,True,236_llama3-70b,0.5442130571415579,0.04427062132914813,0.5416666666666666
238,apps,llama3-70b,qwen2.5-7b-instruct,"n hobbits are planning to spend the night at Frodo's house. Frodo has n beds standing in a row and m pillows (n ≤ m). Each hobbit needs a bed and at least one pillow to sleep, however, everyone wants as many pillows as possible. Of course, it's not always possible to share pillows equally, but any hobbit gets hurt if he has at least two pillows less than some of his neighbors have. 

Frodo will sleep on the k-th bed in the row. What is the maximum number of pillows he can have so that every hobbit has at least one pillow, every pillow is given to some hobbit and no one is hurt?


-----Input-----

The only line contain three integers n, m and k (1 ≤ n ≤ m ≤ 10^9, 1 ≤ k ≤ n) — the number of hobbits, the number of pillows and the number of Frodo's bed.


-----Output-----

Print single integer — the maximum number of pillows Frodo can have so that no one is hurt.


-----Examples-----
Input
4 6 2

Output
2

Input
3 10 3

Output
4

Input
3 6 1

Output
3



-----Note-----

In the first example Frodo can have at most two pillows. In this case, he can give two pillows to the hobbit on the first bed, and one pillow to each of the hobbits on the third and the fourth beds.

In the second example Frodo can take at most four pillows, giving three pillows to each of the others.

In the third example Frodo can take three pillows, giving two pillows to the hobbit in the middle and one pillow to the hobbit on the third bed.","n, m, k = map(int, input().split())
if k == 1:
    print(min(m // n, m - (n - 1)))
else:
    print(min(m // n + 1, m - (n - k)))
",3,False,False,False,True,True,True,True,False,True,True,False,False,True,238_llama3-70b,0.875706603646191,0.44092267284673214,0.7916666666666666
261,apps,llama3-70b,qwen2.5-7b-instruct,"One day, after a difficult lecture a diligent student Sasha saw a graffitied desk in the classroom. She came closer and read: ""Find such positive integer n, that among numbers n + 1, n + 2, ..., 2·n there are exactly m numbers which binary representation contains exactly k digits one"".

The girl got interested in the task and she asked you to help her solve it. Sasha knows that you are afraid of large numbers, so she guaranteed that there is an answer that doesn't exceed 10^18.


-----Input-----

The first line contains two space-separated integers, m and k (0 ≤ m ≤ 10^18; 1 ≤ k ≤ 64).


-----Output-----

Print the required number n (1 ≤ n ≤ 10^18). If there are multiple answers, print any of them.


-----Examples-----
Input
1 1

Output
1

Input
3 2

Output
5","m, k = map(int, input().split())

def count_ones(n):
    count = 0
    while n:
        count += n & 1
        n >>= 1
    return count

def find_n(m, k):
    n = 1
    while True:
        count = sum(1 for i in range(n + 1, 2 * n + 1) if count_ones(i) == k)
        if count == m:
            return n
        n += 1

print(find_n(m, k))
",3,False,True,False,True,True,True,True,True,True,True,True,True,True,261_llama3-70b,0.8997713337371126,0.49854832833508284,0.75
268,apps,llama3-70b,qwen2.5-7b-instruct,"You are given two integers $l$ and $r$ ($l \le r$). Your task is to calculate the sum of numbers from $l$ to $r$ (including $l$ and $r$) such that each number contains at most $k$ different digits, and print this sum modulo $998244353$.

For example, if $k = 1$ then you have to calculate all numbers from $l$ to $r$ such that each number is formed using only one digit. For $l = 10, r = 50$ the answer is $11 + 22 + 33 + 44 = 110$.


-----Input-----

The only line of the input contains three integers $l$, $r$ and $k$ ($1 \le l \le r < 10^{18}, 1 \le k \le 10$) — the borders of the segment and the maximum number of different digits.


-----Output-----

Print one integer — the sum of numbers from $l$ to $r$ such that each number contains at most $k$ different digits, modulo $998244353$.


-----Examples-----
Input
10 50 2

Output
1230

Input
1 2345 10

Output
2750685

Input
101 154 2

Output
2189



-----Note-----

For the first example the answer is just the sum of numbers from $l$ to $r$ which equals to $\frac{50 \cdot 51}{2} - \frac{9 \cdot 10}{2} = 1230$. This example also explained in the problem statement but for $k = 1$.

For the second example the answer is just the sum of numbers from $l$ to $r$ which equals to $\frac{2345 \cdot 2346}{2} = 2750685$.

For the third example the answer is $101 + 110 + 111 + 112 + 113 + 114 + 115 + 116 + 117 + 118 + 119 + 121 + 122 + 131 + 133 + 141 + 144 + 151 = 2189$.","MOD = 998244353
def count_numbers(l, r, k):
    def count(n, k, dp):
        if k == 0:
            return 0
        if (n, k) in dp:
            return dp[(n, k)]
        if n < 10**k:
            dp[(n, k)] = n
        else:
            dp[(n, k)] = 9
            for i in range(1, k):
                dp[(n, k)] += 9 * 10**(i-1) * (10**(k-i) - 10**(i-1))
            dp[(n, k)] += (10**(k-1) - 10**(k-2)) * (n // 10**(k-1) - 1)
            dp[(n, k)] %= MOD
        return dp[(n, k)]

    dp = {}
    return (count(r, k, dp) - count(l-1, k, dp)) % MOD

l, r, k = map(int, input().split())
print(count_numbers(l, r, k))
",3,False,False,False,True,True,True,True,False,True,False,False,False,False,268_llama3-70b,0.8635012734525994,0.4167535590858058,0.625
295,apps,llama3-70b,qwen2.5-7b-instruct,"Everybody in Russia uses Gregorian calendar. In this calendar there are 31 days in January, 28 or 29 days in February (depending on whether the year is leap or not), 31 days in March, 30 days in April, 31 days in May, 30 in June, 31 in July, 31 in August, 30 in September, 31 in October, 30 in November, 31 in December.

A year is leap in one of two cases: either its number is divisible by 4, but not divisible by 100, or is divisible by 400. For example, the following years are leap: 2000, 2004, but years 1900 and 2018 are not leap.

In this problem you are given n (1 ≤ n ≤ 24) integers a_1, a_2, ..., a_{n}, and you have to check if these integers could be durations in days of n consecutive months, according to Gregorian calendar. Note that these months could belong to several consecutive years. In other words, check if there is a month in some year, such that its duration is a_1 days, duration of the next month is a_2 days, and so on.


-----Input-----

The first line contains single integer n (1 ≤ n ≤ 24) — the number of integers.

The second line contains n integers a_1, a_2, ..., a_{n} (28 ≤ a_{i} ≤ 31) — the numbers you are to check.


-----Output-----

If there are several consecutive months that fit the sequence, print ""YES"" (without quotes). Otherwise, print ""NO"" (without quotes).

You can print each letter in arbitrary case (small or large).


-----Examples-----
Input
4
31 31 30 31

Output
Yes


Input
2
30 30

Output
No


Input
5
29 31 30 31 30

Output
Yes


Input
3
31 28 30

Output
No


Input
3
31 31 28

Output
Yes




-----Note-----

In the first example the integers can denote months July, August, September and October.

In the second example the answer is no, because there are no two consecutive months each having 30 days.

In the third example the months are: February (leap year) — March — April – May — June.

In the fourth example the number of days in the second month is 28, so this is February. March follows February and has 31 days, but not 30, so the answer is NO.

In the fifth example the months are: December — January — February (non-leap year).","n = int(input())
a = list(map(int, input().split()))
b = [31,28,31,30,31,30,31,31,30,31,30,31]

f = False
for i in range(12):
    if all(a[j] == b[(i+j)%12] for j in range(n)):
        f = True
    if i == 11 and not f:
        break
    if all(a[j] == b[(i+j)%12+12] for j in range(n)):
        f = True
    if i == 11 and not f:
        break

if f:
    print(""YES"")
else:
    print(""NO"")
",3,False,False,False,False,False,True,False,True,False,True,False,False,False,295_llama3-70b,0.8578618301443605,0.41829436179200846,0.75
298,apps,llama3-70b,qwen2.5-7b-instruct,"Vasya has got three integers $n$, $m$ and $k$. He'd like to find three integer points $(x_1, y_1)$, $(x_2, y_2)$, $(x_3, y_3)$, such that $0 \le x_1, x_2, x_3 \le n$, $0 \le y_1, y_2, y_3 \le m$ and the area of the triangle formed by these points is equal to $\frac{nm}{k}$.

Help Vasya! Find such points (if it's possible). If there are multiple solutions, print any of them.


-----Input-----

The single line contains three integers $n$, $m$, $k$ ($1\le n, m \le 10^9$, $2 \le k \le 10^9$).


-----Output-----

If there are no such points, print ""NO"".

Otherwise print ""YES"" in the first line. The next three lines should contain integers $x_i, y_i$ — coordinates of the points, one point per line. If there are multiple solutions, print any of them.

You can print each letter in any case (upper or lower).


-----Examples-----
Input
4 3 3

Output
YES
1 0
2 3
4 1

Input
4 4 7

Output
NO



-----Note-----

In the first example area of the triangle should be equal to $\frac{nm}{k} = 4$. The triangle mentioned in the output is pictured below:  [Image] 

In the second example there is no triangle with area $\frac{nm}{k} = \frac{16}{7}$.","import math

n, m, k = map(int, input().split())

if (n*m) % k:
    print(""NO"")
    exit()

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def euk(a, b):
    if b == 0:
        return 1, 0
    else:
        x, y = euk(b, a % b)
        return y, x - (a // b) * y

def bezout(a, b):
    x, y = euk(a, b)
    return x, y, x*a + y*b

n1, m1, g = bezout(n, m)
if abs(n1*m) >= g:
    print(""YES"")
    print(0, 0)
    print(0, n1*m//g)
    print(m1*m//g, 0)
else:
    print(""NO"")",3,False,False,False,True,True,True,True,True,True,False,True,True,True,298_llama3-70b,0.6025694196293297,0.10350350436366977,0.5833333333333334
299,apps,llama3-70b,qwen2.5-7b-instruct,"It's one more school day now. Sasha doesn't like classes and is always bored at them. So, each day he invents some game and plays in it alone or with friends.

Today he invented one simple game to play with Lena, with whom he shares a desk. The rules are simple. Sasha draws n sticks in a row. After that the players take turns crossing out exactly k sticks from left or right in each turn. Sasha moves first, because he is the inventor of the game. If there are less than k sticks on the paper before some turn, the game ends. Sasha wins if he makes strictly more moves than Lena. Sasha wants to know the result of the game before playing, you are to help him.


-----Input-----

The first line contains two integers n and k (1 ≤ n, k ≤ 10^18, k ≤ n) — the number of sticks drawn by Sasha and the number k — the number of sticks to be crossed out on each turn.


-----Output-----

If Sasha wins, print ""YES"" (without quotes), otherwise print ""NO"" (without quotes).

You can print each letter in arbitrary case (upper of lower).


-----Examples-----
Input
1 1

Output
YES

Input
10 4

Output
NO



-----Note-----

In the first example Sasha crosses out 1 stick, and then there are no sticks. So Lena can't make a move, and Sasha wins.

In the second example Sasha crosses out 4 sticks, then Lena crosses out 4 sticks, and after that there are only 2 sticks left. Sasha can't make a move. The players make equal number of moves, so Sasha doesn't win.","n, k = map(int, input().split())
if (n - 1) // k > n // k:
    print(""YES"")
else:
    print(""NO"")
",3,False,False,False,False,False,True,False,False,True,False,False,True,False,299_llama3-70b,0.6594667087708458,0.16398825462100827,0.5833333333333334
