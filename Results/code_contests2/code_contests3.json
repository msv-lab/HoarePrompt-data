[
    {
        "description": "We have a 3×3 square grid, where each square contains a lowercase English letters. The letter in the square at the i-th row from the top and j-th column from the left is c_{ij}.\n\nPrint the string of length 3 that can be obtained by concatenating the letters in the squares on the diagonal connecting the top-left and bottom-right corner of the grid, from the top-left to bottom-right.\n\nConstraints\n\n* Input consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nc_{11}c_{12}c_{13}\nc_{21}c_{22}c_{23}\nc_{31}c_{32}c_{33}\n\n\nOutput\n\nPrint the string of length 3 that can be obtained by concatenating the letters on the diagonal connecting the top-left and bottom-right corner of the grid, from the top-left to bottom-right.\n\nExamples\n\nInput\n\nant\nobe\nrec\n\n\nOutput\n\nabc\n\n\nInput\n\nedu\ncat\nion\n\n\nOutput\n\nean",
        "task_name": "p03415 AtCoder Beginner Contest 090 - Diagonal String",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a = raw_input()\nl = a.split()\nA = l[0]\nB = l[1]\nans = 0\n\n\nif int(A) == int(B):\n  ans = 1\n\nfor i in range(int(A),int(B)):\n  C = list(str(i))\n  if C[0] == C[4] and C[1] == C[3]:\n    ans += 1\n    \nprint(ans)",
        "correct": false,
        "task_id": "4709"
    },
    {
        "description": "You are fishing with polar bears Alice and Bob. While waiting for the fish to bite, the polar bears get bored. They come up with a game. First Alice and Bob each writes a 01-string (strings that only contain character \"0\" and \"1\") a and b. Then you try to turn a into b using two types of operations:\n\n  * Write parity(a) to the end of a. For example, <image>. \n  * Remove the first character of a. For example, <image>. You cannot perform this operation if a is empty. \n\n\n\nYou can use as many operations as you want. The problem is, is it possible to turn a into b?\n\nThe parity of a 01-string is 1 if there is an odd number of \"1\"s in the string, and 0 otherwise.\n\nInput\n\nThe first line contains the string a and the second line contains the string b (1 ≤ |a|, |b| ≤ 1000). Both strings contain only the characters \"0\" and \"1\". Here |x| denotes the length of the string x.\n\nOutput\n\nPrint \"YES\" (without quotes) if it is possible to turn a into b, and \"NO\" (without quotes) otherwise.\n\nExamples\n\nInput\n\n01011\n0110\n\n\nOutput\n\nYES\n\n\nInput\n\n0011\n1110\n\n\nOutput\n\nNO\n\nNote\n\nIn the first sample, the steps are as follows: 01011 → 1011 → 011 → 0110",
        "task_name": "298_C. Parity Game",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "pa = 0\nfor i in raw_input():\n    pa += i == \"1\"\npb = 0\nfor i in raw_input():\n    pb += i == \"1\"\n\nprint [\"NO\", \"YES\"][pa >= pb]\n",
        "correct": false,
        "task_id": "4202"
    },
    {
        "description": "A new airplane SuperPuperJet has an infinite number of rows, numbered with positive integers starting with 1 from cockpit to tail. There are six seats in each row, denoted with letters from 'a' to 'f'. Seats 'a', 'b' and 'c' are located to the left of an aisle (if one looks in the direction of the cockpit), while seats 'd', 'e' and 'f' are located to the right. Seats 'a' and 'f' are located near the windows, while seats 'c' and 'd' are located near the aisle. \n\n<image>\n\nIt's lunch time and two flight attendants have just started to serve food. They move from the first rows to the tail, always maintaining a distance of two rows from each other because of the food trolley. Thus, at the beginning the first attendant serves row 1 while the second attendant serves row 3. When both rows are done they move one row forward: the first attendant serves row 2 while the second attendant serves row 4. Then they move three rows forward and the first attendant serves row 5 while the second attendant serves row 7. Then they move one row forward again and so on.\n\nFlight attendants work with the same speed: it takes exactly 1 second to serve one passenger and 1 second to move one row forward. Each attendant first serves the passengers on the seats to the right of the aisle and then serves passengers on the seats to the left of the aisle (if one looks in the direction of the cockpit). Moreover, they always serve passengers in order from the window to the aisle. Thus, the first passenger to receive food in each row is located in seat 'f', and the last one — in seat 'c'. Assume that all seats are occupied.\n\nVasya has seat s in row n and wants to know how many seconds will pass before he gets his lunch.\n\nInput\n\nThe only line of input contains a description of Vasya's seat in the format ns, where n (1 ≤ n ≤ 1018) is the index of the row and s is the seat in this row, denoted as letter from 'a' to 'f'. The index of the row and the seat are not separated by a space.\n\nOutput\n\nPrint one integer — the number of seconds Vasya has to wait until he gets his lunch.\n\nExamples\n\nInput\n\n1f\n\n\nOutput\n\n1\n\n\nInput\n\n2d\n\n\nOutput\n\n10\n\n\nInput\n\n4a\n\n\nOutput\n\n11\n\n\nInput\n\n5e\n\n\nOutput\n\n18\n\nNote\n\nIn the first sample, the first flight attendant serves Vasya first, so Vasya gets his lunch after 1 second.\n\nIn the second sample, the flight attendants will spend 6 seconds to serve everyone in the rows 1 and 3, then they will move one row forward in 1 second. As they first serve seats located to the right of the aisle in order from window to aisle, Vasya has to wait 3 more seconds. The total is 6 + 1 + 3 = 10.",
        "task_name": "725_B. Food on the Plane",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\ngets = lambda r=sys.stdin.readline: r().strip()\nS = gets()\nN = int(S[:-1])\nC = ord(S[-1])-ord('a')\nM = (N-1) & 3\nif M in (1, 2):\n    N -= M\n    M ^= 3 # Toggle Bits [0, 1, 2, 3]\n    N += M\n# print(6-C)\nprint((N-1) // 2 * 7 + (N-1) // 4 * 2 + (6-C))\n",
        "correct": false,
        "task_id": "1812"
    },
    {
        "description": "Stepan has a very big positive integer.\n\nLet's consider all cyclic shifts of Stepan's integer (if we look at his integer like at a string) which are also integers (i.e. they do not have leading zeros). Let's call such shifts as good shifts. For example, for the integer 10203 the good shifts are the integer itself 10203 and integers 20310 and 31020.\n\nStepan wants to know the minimum remainder of the division by the given number m among all good shifts. Your task is to determine the minimum remainder of the division by m.\n\nInput\n\nThe first line contains the integer which Stepan has. The length of Stepan's integer is between 2 and 200 000 digits, inclusive. It is guaranteed that Stepan's integer does not contain leading zeros.\n\nThe second line contains the integer m (2 ≤ m ≤ 108) — the number by which Stepan divides good shifts of his integer.\n\nOutput\n\nPrint the minimum remainder which Stepan can get if he divides all good shifts of his integer by the given number m.\n\nExamples\n\nInput\n\n521\n3\n\n\nOutput\n\n2\n\n\nInput\n\n1001\n5\n\n\nOutput\n\n0\n\n\nInput\n\n5678901234567890123456789\n10000\n\n\nOutput\n\n123\n\nNote\n\nIn the first example all good shifts of the integer 521 (good shifts are equal to 521, 215 and 152) has same remainder 2 when dividing by 3.\n\nIn the second example there are only two good shifts: the Stepan's integer itself and the shift by one position to the right. The integer itself is 1001 and the remainder after dividing it by 5 equals 1. The shift by one position to the right equals to 1100 and the remainder after dividing it by 5 equals 0, which is the minimum possible remainder.",
        "task_name": "774_E. Big Number and Remainder",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "a=int(input()) \nb=int(input()) \n\nc=0\ncopya=a\nwhile(copya):\n    copya//=10\n    c+=1\nans=a%b\nfor i in range(c):\n    if(a%10!=0):\n         h=a%10\n         a//=10\n         a=(10**c)*h+a\n         ans=min(ans, a%b) \n    else:\n         h=a%10\n         a//=10\n         a=(10**c)*h+a\nprint(ans) ",
        "correct": false,
        "task_id": "2323"
    },
    {
        "description": "Fennec is fighting with N monsters.\n\nThe health of the i-th monster is H_i.\n\nFennec can do the following two actions:\n\n* Attack: Fennec chooses one monster. That monster's health will decrease by 1.\n* Special Move: Fennec chooses one monster. That monster's health will become 0.\n\n\n\nThere is no way other than Attack and Special Move to decrease the monsters' health.\n\nFennec wins when all the monsters' healths become 0 or below.\n\nFind the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning when she can use Special Move at most K times.\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* 0 \\leq K \\leq 2 \\times 10^5\n* 1 \\leq H_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nH_1 ... H_N\n\n\nOutput\n\nPrint the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning.\n\nExamples\n\nInput\n\n3 1\n4 1 5\n\n\nOutput\n\n5\n\n\nInput\n\n8 9\n7 9 3 2 3 8 4 6\n\n\nOutput\n\n0\n\n\nInput\n\n3 0\n1000000000 1000000000 1000000000\n\n\nOutput\n\n3000000000",
        "task_name": "p02785 AtCoder Beginner Contest 153 - Fennec vs Monster",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "mod = 1e9+7\ndef add(a, b):\n    c = a + b\n    if c >= mod:\n        c -= mod\n    return c\n\ndef main():\n    H, N = [int(x) for x in raw_input().split()]\n    \n    s = sum([int(x) for x in raw_input().split()])\n    \n    if s >= H:\n        print('Yes')\n    else:\n        print('No')\n    \n    \n\nmain()",
        "correct": false,
        "task_id": "3700"
    },
    {
        "description": "You are given a correct solution of the sudoku puzzle. If you don't know what is the sudoku, you can read about it [here](http://tiny.cc/636xmz).\n\nThe picture showing the correct sudoku solution:\n\n<image>\n\nBlocks are bordered with bold black color.\n\nYour task is to change at most 9 elements of this field (i.e. choose some 1 ≤ i, j ≤ 9 and change the number at the position (i, j) to any other number in range [1; 9]) to make it anti-sudoku. The anti-sudoku is the 9 × 9 field, in which:\n\n  * Any number in this field is in range [1; 9]; \n  * each row contains at least two equal elements; \n  * each column contains at least two equal elements; \n  * each 3 × 3 block (you can read what is the block in the link above) contains at least two equal elements. \n\n\n\nIt is guaranteed that the answer exists.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nEach test case consists of 9 lines, each line consists of 9 characters from 1 to 9 without any whitespaces — the correct solution of the sudoku puzzle.\n\nOutput\n\nFor each test case, print the answer — the initial field with at most 9 changed elements so that the obtained field is anti-sudoku. If there are several solutions, you can print any. It is guaranteed that the answer exists.\n\nExample\n\nInput\n\n\n1\n154873296\n386592714\n729641835\n863725149\n975314628\n412968357\n631457982\n598236471\n247189563\n\n\nOutput\n\n\n154873396\n336592714\n729645835\n863725145\n979314628\n412958357\n631457992\n998236471\n247789563",
        "task_name": "1335_D. Anti-Sudoku",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import os, sys, io, atexit\nsys.stdout = io.BytesIO()\natexit.register(lambda: os.write(1, sys.stdout.getvalue()))\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\nwrite = sys.stdout.write\nmaxint = float('inf')\n\nres = []\nT = int(input())\nfor t in range(T) :\n  for i in range(9) :\n    row = input().strip()\n    nRow = \"\"\n    for i in row :\n      if i == '9' : nRow += '1'\n      else : nRow += i\n    res.append(nRow)\n\nwrite('\\n'.join(res))\n  ",
        "correct": true,
        "task_id": "1113"
    },
    {
        "description": "Sonya decided to organize an exhibition of flowers. Since the girl likes only roses and lilies, she decided that only these two kinds of flowers should be in this exhibition.\n\nThere are n flowers in a row in the exhibition. Sonya can put either a rose or a lily in the i-th position. Thus each of n positions should contain exactly one flower: a rose or a lily.\n\nShe knows that exactly m people will visit this exhibition. The i-th visitor will visit all flowers from l_i to r_i inclusive. The girl knows that each segment has its own beauty that is equal to the product of the number of roses and the number of lilies.\n\nSonya wants her exhibition to be liked by a lot of people. That is why she wants to put the flowers in such way that the sum of beauties of all segments would be maximum possible.\n\nInput\n\nThe first line contains two integers n and m (1≤ n, m≤ 10^3) — the number of flowers and visitors respectively.\n\nEach of the next m lines contains two integers l_i and r_i (1≤ l_i≤ r_i≤ n), meaning that i-th visitor will visit all flowers from l_i to r_i inclusive.\n\nOutput\n\nPrint the string of n characters. The i-th symbol should be «0» if you want to put a rose in the i-th position, otherwise «1» if you want to put a lily.\n\nIf there are multiple answers, print any.\n\nExamples\n\nInput\n\n5 3\n1 3\n2 4\n2 5\n\n\nOutput\n\n01100\n\nInput\n\n6 3\n5 6\n1 4\n4 6\n\n\nOutput\n\n110010\n\nNote\n\nIn the first example, Sonya can put roses in the first, fourth, and fifth positions, and lilies in the second and third positions;\n\n  * in the segment [1…3], there are one rose and two lilies, so the beauty is equal to 1⋅ 2=2; \n  * in the segment [2…4], there are one rose and two lilies, so the beauty is equal to 1⋅ 2=2; \n  * in the segment [2…5], there are two roses and two lilies, so the beauty is equal to 2⋅ 2=4. \n\n\n\nThe total beauty is equal to 2+2+4=8.\n\nIn the second example, Sonya can put roses in the third, fourth, and sixth positions, and lilies in the first, second, and fifth positions;\n\n  * in the segment [5…6], there are one rose and one lily, so the beauty is equal to 1⋅ 1=1; \n  * in the segment [1…4], there are two roses and two lilies, so the beauty is equal to 2⋅ 2=4; \n  * in the segment [4…6], there are two roses and one lily, so the beauty is equal to 2⋅ 1=2. \n\n\n\nThe total beauty is equal to 1+4+2=7.",
        "task_name": "1004_B. Sonya and Exhibition",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, m = map(int, raw_input().split())\nprint('10'*(n//2) + ('1' if n&1 else ''))\n",
        "correct": true,
        "task_id": "1603"
    },
    {
        "description": "Since Grisha behaved well last year, at New Year's Eve he was visited by Ded Moroz who brought an enormous bag of gifts with him! The bag contains n sweet candies from the good ol' bakery, each labeled from 1 to n corresponding to its tastiness. No two candies have the same tastiness.\n\nThe choice of candies has a direct effect on Grisha's happiness. One can assume that he should take the tastiest ones — but no, the holiday magic turns things upside down. It is the xor-sum of tastinesses that matters, not the ordinary sum!\n\nA xor-sum of a sequence of integers a1, a2, ..., am is defined as the bitwise XOR of all its elements: <image>, here <image> denotes the bitwise XOR operation; more about bitwise XOR can be found [here.](https://en.wikipedia.org/wiki/Bitwise_operation#XOR)\n\nDed Moroz warned Grisha he has more houses to visit, so Grisha can take no more than k candies from the bag. Help Grisha determine the largest xor-sum (largest xor-sum means maximum happiness!) he can obtain.\n\nInput\n\nThe sole string contains two integers n and k (1 ≤ k ≤ n ≤ 1018).\n\nOutput\n\nOutput one number — the largest possible xor-sum.\n\nExamples\n\nInput\n\n4 3\n\n\nOutput\n\n7\n\n\nInput\n\n6 6\n\n\nOutput\n\n7\n\nNote\n\nIn the first sample case, one optimal answer is 1, 2 and 4, giving the xor-sum of 7.\n\nIn the second sample case, one can, for example, take all six candies and obtain the xor-sum of 7.",
        "task_name": "912_B. New Year's Eve",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,k = map(int,raw_input().split())   \nprint((2**len(bin(n)[2:])-1) if k-1 else n)\n",
        "correct": true,
        "task_id": "2803"
    },
    {
        "description": "Recently Luba bought a very interesting book. She knows that it will take t seconds to read the book. Luba wants to finish reading as fast as she can.\n\nBut she has some work to do in each of n next days. The number of seconds that Luba has to spend working during i-th day is ai. If some free time remains, she can spend it on reading.\n\nHelp Luba to determine the minimum number of day when she finishes reading.\n\nIt is guaranteed that the answer doesn't exceed n.\n\nRemember that there are 86400 seconds in a day.\n\nInput\n\nThe first line contains two integers n and t (1 ≤ n ≤ 100, 1 ≤ t ≤ 106) — the number of days and the time required to read the book.\n\nThe second line contains n integers ai (0 ≤ ai ≤ 86400) — the time Luba has to spend on her work during i-th day.\n\nOutput\n\nPrint the minimum day Luba can finish reading the book.\n\nIt is guaranteed that answer doesn't exceed n.\n\nExamples\n\nInput\n\n2 2\n86400 86398\n\n\nOutput\n\n2\n\n\nInput\n\n2 86400\n0 86400\n\n\nOutput\n\n1",
        "task_name": "884_A. Book Reading",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n,t=list(map(int,raw_input().split()))\na=raw_input().split()\ni=0\nwhile t>0:\n    t-=(86400-int(a[i]))\n    i+=1\nprint(i)",
        "correct": true,
        "task_id": "5314"
    },
    {
        "description": "Three years have passes and nothing changed. It is still raining in London, and Mr. Black has to close all the doors in his home in order to not be flooded. Once, however, Mr. Black became so nervous that he opened one door, then another, then one more and so on until he opened all the doors in his house.\n\nThere are exactly two exits from Mr. Black's house, let's name them left and right exits. There are several doors in each of the exits, so each door in Mr. Black's house is located either in the left or in the right exit. You know where each door is located. Initially all the doors are closed. Mr. Black can exit the house if and only if all doors in at least one of the exits is open. You are given a sequence in which Mr. Black opened the doors, please find the smallest index k such that Mr. Black can exit the house after opening the first k doors.\n\nWe have to note that Mr. Black opened each door at most once, and in the end all doors became open.\n\nInput\n\nThe first line contains integer n (2 ≤ n ≤ 200 000) — the number of doors.\n\nThe next line contains n integers: the sequence in which Mr. Black opened the doors. The i-th of these integers is equal to 0 in case the i-th opened door is located in the left exit, and it is equal to 1 in case it is in the right exit.\n\nIt is guaranteed that there is at least one door located in the left exit and there is at least one door located in the right exit.\n\nOutput\n\nPrint the smallest integer k such that after Mr. Black opened the first k doors, he was able to exit the house.\n\nExamples\n\nInput\n\n\n5\n0 0 1 0 0\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n4\n1 0 0 1\n\n\nOutput\n\n\n3\n\nNote\n\nIn the first example the first two doors are from the left exit, so when Mr. Black opened both of them only, there were two more closed door in the left exit and one closed door in the right exit. So Mr. Black wasn't able to exit at that moment.\n\nWhen he opened the third door, all doors from the right exit became open, so Mr. Black was able to exit the house.\n\nIn the second example when the first two doors were opened, there was open closed door in each of the exit.\n\nWith three doors opened Mr. Black was able to use the left exit.",
        "task_name": "1143_A. The Doors",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math\nimport collections\n\nn = map(int, raw_input().split())\nn = n[0]\nc = map(int, raw_input().split())\n\nans = 0\nfor i in range(n-2,-1,-1):\n    if c[i] != c[i+1]:\n        ans = i + 1\n        break\nprint(ans)\n\n",
        "correct": true,
        "task_id": "4230"
    }
]