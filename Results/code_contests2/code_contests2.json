[
    {
        "description": "Your security guard friend recently got a new job at a new security company. The company requires him to patrol an area of the city encompassing exactly N city blocks, but they let him choose which blocks. That is, your friend must walk the perimeter of a region whose area is exactly N blocks. Your friend is quite lazy and would like your help to find the shortest possible route that meets the requirements. The city is laid out in a square grid pattern, and is large enough that for the sake of the problem it can be considered infinite.\n\nInput\n\nInput will consist of a single integer N (1 ≤ N ≤ 106), the number of city blocks that must be enclosed by the route.\n\nOutput\n\nPrint the minimum perimeter that can be achieved.\n\nExamples\n\nInput\n\n4\n\n\nOutput\n\n8\n\n\nInput\n\n11\n\n\nOutput\n\n14\n\n\nInput\n\n22\n\n\nOutput\n\n20\n\nNote\n\nHere are some possible shapes for the examples:\n\n<image>",
        "task_name": "859_B. Lazy Security Guard",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import math\nn = int(input())\nx = int(n**(0.5))\nif (x**2 == n):\n    answr = x*4\nelif (( x*(x+1)) > n):\n    answr = (x+x+1)*2\nelse:\n    answr = 4*(x+1)\nanswr = int(answr)\nprint (answr)\n",
        "correct": false,
        "task_id": "5313"
    },
    {
        "description": "You are given several queries. In the i-th query you are given a single positive integer ni. You are to represent ni as a sum of maximum possible number of composite summands and print this maximum number, or print -1, if there are no such splittings.\n\nAn integer greater than 1 is composite, if it is not prime, i.e. if it has positive divisors not equal to 1 and the integer itself.\n\nInput\n\nThe first line contains single integer q (1 ≤ q ≤ 105) — the number of queries.\n\nq lines follow. The (i + 1)-th line contains single integer ni (1 ≤ ni ≤ 109) — the i-th query.\n\nOutput\n\nFor each query print the maximum possible number of summands in a valid splitting to composite summands, or -1, if there are no such splittings.\n\nExamples\n\nInput\n\n1\n12\n\n\nOutput\n\n3\n\n\nInput\n\n2\n6\n8\n\n\nOutput\n\n1\n2\n\n\nInput\n\n3\n1\n2\n3\n\n\nOutput\n\n-1\n-1\n-1\n\nNote\n\n12 = 4 + 4 + 4 = 4 + 8 = 6 + 6 = 12, but the first splitting has the maximum possible number of summands.\n\n8 = 4 + 4, 6 can't be split into several composite summands.\n\n1, 2, 3 are less than any composite number, so they do not have valid splittings.",
        "task_name": "870_C. Maximum splitting",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "for _ in xrange(input()):\n    a = input()\n    c = 0\n    if (a%2!=0):\n        a = a-9\n        c = 1    \n        \n    print -1 if a in (1,2,3,5,7,11) else a/4+c    ",
        "correct": false,
        "task_id": "3522"
    },
    {
        "description": "It is only six months until Christmas, and AtCoDeer the reindeer is now planning his travel to deliver gifts.\nThere are N houses along TopCoDeer street. The i-th house is located at coordinate a_i. He has decided to deliver gifts to all these houses.\nFind the minimum distance to be traveled when AtCoDeer can start and end his travel at any positions.\n\nConstraints\n\n* 1 ≤ N ≤ 100\n* 0 ≤ a_i ≤ 1000\n* a_i is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 ... a_N\n\n\nOutput\n\nPrint the minimum distance to be traveled.\n\nExamples\n\nInput\n\n4\n2 3 7 9\n\n\nOutput\n\n7\n\n\nInput\n\n8\n3 1 4 1 5 9 2 6\n\n\nOutput\n\n8",
        "task_name": "p03694 AtCoder Beginner Contest 064 - Traveling AtCoDeer Problem",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "N=raw_input()\na=raw_input().split()\n\nimport numpy as np\nans=np.abs(np.max(a)-np.min(a))\nprint(ans)",
        "correct": false,
        "task_id": "0206"
    },
    {
        "description": "We have a string S consisting of uppercase English letters. Additionally, an integer N will be given.\n\nShift each character of S by N in alphabetical order (see below), and print the resulting string.\n\nWe assume that `A` follows `Z`. For example, shifting `A` by 2 results in `C` (`A` \\to `B` \\to `C`), and shifting `Y` by 3 results in `B` (`Y` \\to `Z` \\to `A` \\to `B`).\n\nConstraints\n\n* 0 \\leq N \\leq 26\n* 1 \\leq |S| \\leq 10^4\n* S consists of uppercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS\n\n\nOutput\n\nPrint the string resulting from shifting each character of S by N in alphabetical order.\n\nExamples\n\nInput\n\n2\nABCXYZ\n\n\nOutput\n\nCDEZAB\n\n\nInput\n\n0\nABCXYZ\n\n\nOutput\n\nABCXYZ\n\n\nInput\n\n13\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n\n\nOutput\n\nNOPQRSTUVWXYZABCDEFGHIJKLM",
        "task_name": "p02848 AtCoder Beginner Contest 146 - ROT N",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n = int(input())\nstrings = input()\nletters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\nnew_strings = ''\nfor s in strings:\n    index = letters.index(s)\n    added_index = index + n\n    new_index = added_index % 26\n    new_s = letters[new_index]\n    new_strings += new_s\n\nprint(new_strings)",
        "correct": false,
        "task_id": "0805"
    },
    {
        "description": "Pari has a friend who loves palindrome numbers. A palindrome number is a number that reads the same forward or backward. For example 12321, 100001 and 1 are palindrome numbers, while 112 and 1021 are not.\n\nPari is trying to love them too, but only very special and gifted people can understand the beauty behind palindrome numbers. Pari loves integers with even length (i.e. the numbers with even number of digits), so she tries to see a lot of big palindrome numbers with even length (like a 2-digit 11 or 6-digit 122221), so maybe she could see something in them.\n\nNow Pari asks you to write a program that gets a huge integer n from the input and tells what is the n-th even-length positive palindrome number?\n\nInput\n\nThe only line of the input contains a single integer n (1 ≤ n ≤ 10100 000).\n\nOutput\n\nPrint the n-th even-length palindrome number.\n\nExamples\n\nInput\n\n1\n\n\nOutput\n\n11\n\n\nInput\n\n10\n\n\nOutput\n\n1001\n\nNote\n\nThe first 10 even-length palindrome numbers are 11, 22, 33, ... , 88, 99 and 1001.",
        "task_name": "688_B. Lovely Palindromes",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "def palindrome(n):\n    x = ''.join([x.lower() for x in n if x.isalpha()])\n    return x == x[::-1]",
        "correct": false,
        "task_id": "4285"
    },
    {
        "description": "It's a very unfortunate day for Volodya today. He got bad mark in algebra and was therefore forced to do some work in the kitchen, namely to cook borscht (traditional Russian soup). This should also improve his algebra skills.\n\nAccording to the borscht recipe it consists of n ingredients that have to be mixed in proportion <image> litres (thus, there should be a1 ·x, ..., an ·x litres of corresponding ingredients mixed for some non-negative x). In the kitchen Volodya found out that he has b1, ..., bn litres of these ingredients at his disposal correspondingly. In order to correct his algebra mistakes he ought to cook as much soup as possible in a V litres volume pan (which means the amount of soup cooked can be between 0 and V litres). What is the volume of borscht Volodya will cook ultimately?\n\nInput\n\nThe first line of the input contains two space-separated integers n and V (1 ≤ n ≤ 20, 1 ≤ V ≤ 10000). The next line contains n space-separated integers ai (1 ≤ ai ≤ 100). Finally, the last line contains n space-separated integers bi (0 ≤ bi ≤ 100).\n\nOutput\n\nYour program should output just one real number — the volume of soup that Volodya will cook. Your answer must have a relative or absolute error less than 10 - 4.\n\nExamples\n\nInput\n\n1 100\n1\n40\n\n\nOutput\n\n40.0\n\n\nInput\n\n2 100\n1 1\n25 30\n\n\nOutput\n\n50.0\n\n\nInput\n\n2 100\n1 1\n60 60\n\n\nOutput\n\n100.0",
        "task_name": "42_A. Guilty — to the kitchen!",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n, V = map (int, raw_input ().split ())\na, b = [float (i) for i in raw_input ().split ()], [float (i) for i in raw_input ().split ()]\nprint (min (reduce (lambda ans, ai: ans + reduce (lambda minx, ab: min (minx, ab[0] / ab[1]), zip (b, a), 2.0 ** 30) * ai, a, 0), V))\n",
        "correct": true,
        "task_id": "0278"
    },
    {
        "description": "Write a program which reads an integer n and prints the number of prime numbers which are less than or equal to n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\n\n\n\nInput\n\nInput consists of several datasets. Each dataset has an integer n (1 ≤ n ≤ 999,999) in a line.\n\nThe number of datasets is less than or equal to 30.\n\nOutput\n\nFor each dataset, prints the number of prime numbers.\n\nExample\n\nInput\n\n10\n3\n11\n\n\nOutput\n\n4\n2\n5",
        "task_name": "p00009 Prime Number",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "import sys\n\na = [True] * 1000000\n\nfor i in range(2,1000000):\n\tif(a[i-1]):\n\t\tfor j in range(i**2-1, 1000000, i):\n\t\t\ta[j] = False\n\nfor s in sys.stdin:\n\tprint(a[1:int(s)].count(True))",
        "correct": true,
        "task_id": "0808"
    },
    {
        "description": "AtCoder's head office consists of N rooms numbered 1 to N. For any two rooms, there is a direct passage connecting these rooms.\n\nFor security reasons, Takahashi the president asked you to set a level for every passage, which is a positive integer and must satisfy the following condition:\n\n* For each room i\\ (1 \\leq i \\leq N), if we leave Room i, pass through some passages whose levels are all equal and get back to Room i, the number of times we pass through a passage is always even.\n\n\n\nYour task is to set levels to the passages so that the highest level of a passage is minimized.\n\nConstraints\n\n* N is an integer between 2 and 500 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\n\n\nOutput\n\nPrint one way to set levels to the passages so that the objective is achieved, as follows:\n\n\na_{1,2} a_{1,3} ... a_{1,N}\na_{2,3} ... a_{2,N}\n.\n.\n.\na_{N-1,N}\n\n\nHere a_{i,j} is the level of the passage connecting Room i and Room j.\n\nIf there are multiple solutions, any of them will be accepted.\n\nExample\n\nInput\n\n3\n\n\nOutput\n\n1 2\n1",
        "task_name": "p02930 Japanese Student Championship 2019 Qualification - Classified",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "n=input()\nwhile n:\n\tn-=1\n\tfor j in range(n):print(bin(j+1)[::-1].find('1')+1)",
        "correct": true,
        "task_id": "4791"
    },
    {
        "description": "Petya loves lucky numbers. Everybody knows that positive integers are lucky if their decimal representation doesn't contain digits other than 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nLucky number is super lucky if it's decimal representation contains equal amount of digits 4 and 7. For example, numbers 47, 7744, 474477 are super lucky and 4, 744, 467 are not.\n\nOne day Petya came across a positive integer n. Help him to find the least super lucky number which is not less than n.\n\nInput\n\nThe only line contains a positive integer n (1 ≤ n ≤ 109). This number doesn't have leading zeroes.\n\nOutput\n\nOutput the least super lucky number that is more than or equal to n.\n\nPlease, do not use the %lld specificator to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specificator.\n\nExamples\n\nInput\n\n4500\n\n\nOutput\n\n4747\n\n\nInput\n\n47\n\n\nOutput\n\n47",
        "task_name": "96_B. Lucky Numbers (easy)",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "from itertools import product\n\nn = int(input())\nl, ans = len(str(n)), 4444477777\n\nif l & 1:\n    l += 1\n\nfor i in range(l, 10, 2):\n    for x in product('74', repeat=i):\n        if x.count('7') == x.count('4'):\n            tem = int(''.join(x))\n            if tem >= n:\n                ans = min(ans, tem)\nprint(ans)\n",
        "correct": true,
        "task_id": "4046"
    },
    {
        "description": "There are five people playing a game called \"Generosity\". Each person gives some non-zero number of coins b as an initial bet. After all players make their bets of b coins, the following operation is repeated for several times: a coin is passed from one player to some other player.\n\nYour task is to write a program that can, given the number of coins each player has at the end of the game, determine the size b of the initial bet or find out that such outcome of the game cannot be obtained for any positive number of coins b in the initial bet.\n\nInput\n\nThe input consists of a single line containing five integers c1, c2, c3, c4 and c5 — the number of coins that the first, second, third, fourth and fifth players respectively have at the end of the game (0 ≤ c1, c2, c3, c4, c5 ≤ 100).\n\nOutput\n\nPrint the only line containing a single positive integer b — the number of coins in the initial bet of each player. If there is no such value of b, then print the only value \"-1\" (quotes for clarity).\n\nExamples\n\nInput\n\n2 5 4 0 4\n\n\nOutput\n\n3\n\n\nInput\n\n4 5 9 2 1\n\n\nOutput\n\n-1\n\nNote\n\nIn the first sample the following sequence of operations is possible:\n\n  1. One coin is passed from the fourth player to the second player; \n  2. One coin is passed from the fourth player to the fifth player; \n  3. One coin is passed from the first player to the third player; \n  4. One coin is passed from the fourth player to the second player. ",
        "task_name": "478_A. Initial Bet",
        "dataset": "code_contests",
        "model": "human",
        "generated_code": "c = map(int, raw_input().split())\ns = sum(c)\nprint -1 if s == 0 or s % len(c) != 0 else s/len(c)",
        "correct": true,
        "task_id": "0064"
    }
]