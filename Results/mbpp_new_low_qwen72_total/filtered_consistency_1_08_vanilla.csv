Task ID,Dataset,model_created,model_run,description,Code,run_number,original correctness,summary fsl,naive correctness fsl,vanilla,simple tree,complex tree,summary,simple verify fsl,complex verify fsl,summary verify fsl,simple verify,complex verify,summary verify,unique_id,consistency,consistency_mine,consistency_old
58,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a python function to count true booleans in the given list.,"def count(bool_list):
    return sum(bool_list)

# Test cases
assert count([True, False, True]) == 2
assert count([False, False]) == 0
assert count([True, True, True]) == 3
",1,True,True,True,True,True,True,True,True,True,True,True,True,True,58_gpt-4o,0.657564001792403,0.16055984441072196,0.6666666666666666
122,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.,"def division_elements(tup1, tup2):
    # Perform element-wise division
    result = tuple(a // b for a, b in zip(tup1, tup2))
    return result

# Test cases
assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)
assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)
assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)
",1,False,True,False,True,True,True,True,True,True,True,True,True,True,122_gpt-4o,0.767828270953276,0.2860672941157812,0.6666666666666666
154,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function to find the depth of a dictionary.,"def dict_depth(d):
    if not isinstance(d, dict) or not d:
        return 1
    else:
        return 1 + max(dict_depth(value) for value in d.values())

# Test cases
assert dict_depth({'a':1, 'b': {'c': {'d': {}}}}) == 4
assert dict_depth({'a':1, 'b': {'c':'python'}}) == 2
assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}}) == 3
",1,False,False,False,True,True,True,True,False,False,True,True,True,True,154_gpt-4o,0.6738593404245758,0.17802590362411208,0.5416666666666666
213,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function to find the maximum product formed by multiplying numbers of an increasing sublist of that array.,"def max_product(arr):
    n = len(arr)
    if n == 0:
        return 0

    # Initialize a list to store the maximum product up to each element
    max_products = [0] * n
    max_products[0] = arr[0]

    for i in range(1, n):
        max_products[i] = arr[i]
        for j in range(i):
            if arr[j] < arr[i]:
                max_products[i] = max(max_products[i], max_products[j] * arr[i])

    # Return the maximum product found
    return max(max_products)

# Test cases
assert max_product([3, 100, 4, 5, 150, 6]) == 3000
assert max_product([4, 42, 55, 68, 80]) == 50265600
assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460
",1,False,True,True,True,False,True,True,True,True,False,True,True,True,213_gpt-4o,0.5657122217284346,0.06588329016943985,0.5416666666666666
225,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.,"def difference(n):
    # Calculate the sum of the first n natural numbers
    sum_n = n * (n + 1) // 2
    
    # Calculate the sum of the cubes of the first n natural numbers
    sum_cubes_n = sum_n ** 2
    
    # Calculate the difference
    return sum_cubes_n - sum_n

# Tests
assert difference(3) == 30
assert difference(5) == 210
assert difference(2) == 6
",1,True,True,True,True,True,True,True,False,True,True,True,True,True,225_gpt-4o,0.7466648197736022,0.2617654768008565,0.5833333333333334
342,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function to find the product of first even and odd number of a given list.,"def mul_even_odd(lst):
    first_odd = None
    first_even = None
    
    for num in lst:
        if first_odd is None and num % 2 != 0:
            first_odd = num
        if first_even is None and num % 2 == 0:
            first_even = num
        if first_odd is not None and first_even is not None:
            break
    
    return first_odd * first_even

# Test cases
assert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4
assert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2
assert mul_even_odd([1, 5, 7, 9, 10]) == 10
",1,True,False,False,True,True,False,False,False,False,False,False,True,True,342_gpt-4o,0.57550052804741,0.07642250390202558,0.5833333333333334
67,mbppplus,llama3point1-70b,qwen2.5-72b-instruct,Write a function to sum all amicable numbers from 1 to a specified number.,"def sum_of_divisors(n):
    divisors_sum = 0
    for i in range(1, int(n**0.5) + 1):
        if n % i == 0:
            if i * i != n:
                divisors_sum += i + n // i
            else:
                divisors_sum += i
    return divisors_sum - n

def amicable_numbers_sum(n):
    amicable_sum = 0
    for num in range(1, n + 1):
        if sum_of_divisors(num) < n:
            if sum_of_divisors(sum_of_divisors(num)) == num and num != sum_of_divisors(num):
                amicable_sum += num
    return amicable_sum
",1,True,True,True,True,True,True,True,False,True,True,True,True,True,67_llama3point1-70b,0.7823318356997688,0.3011696936526498,0.5833333333333334
121,mbppplus,llama3point1-70b,qwen2.5-72b-instruct,Write a function to find the nth newman–shanks–williams prime number.,"def is_prime(n):
    """"""Check if a number is prime.""""""
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def newman_prime(n):
    """"""Find the nth Newman-Shanks-Williams prime number.""""""
    if n == 1:
        return 7  # The first NSW prime is 7
    
    # Initialize the count of NSW primes and the current number
    count = 1
    num = 7
    
    while True:
        # Check if the current number is a prime number
        if is_prime(num):
            # Check if the current prime number is congruent to 1 or 5 modulo 6
            if num % 6 in [1, 5]:
                # Increment the count of NSW primes
                count += 1
                
                # If we have found the nth NSW prime, return it
                if count == n:
                    return num
        
        # Move on to the next number
        num += 1
",1,False,False,False,False,True,True,True,False,False,False,False,False,False,121_llama3point1-70b,0.7730581645061364,0.29208295285707575,0.5833333333333334
241,mbppplus,llama3point1-70b,qwen2.5-72b-instruct,Write a python function to check whether a list is sublist of another or not.,"def is_Sub_Array(main_list, sub_list):
    return ''.join(map(str, sub_list)) in ''.join(map(str, main_list))
",1,False,False,False,True,False,True,True,False,False,False,True,True,True,241_llama3point1-70b,0.7484623449417328,0.258940708449018,0.7083333333333334
302,mbppplus,llama3point1-70b,qwen2.5-72b-instruct,Write a function to find the index of the first occurrence of a given number in a sorted array.,"def find_first_occurrence(arr, num):
    for i, x in enumerate(arr):
        if x == num:
            return i
    return -1  # return -1 if num is not found in the array
",1,True,False,False,True,True,True,True,True,False,True,True,True,True,302_llama3point1-70b,0.7239120881811368,0.2363819713745785,0.625
58,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a python function to count true booleans in the given list.,"def count(bool_list):
    return sum(bool_list)

# Test cases
assert count([True, False, True]) == 2
assert count([False, False]) == 0
assert count([True, True, True]) == 3
",2,True,True,True,True,True,True,True,True,True,True,True,True,True,58_gpt-4o,0.657564001792403,0.16055984441072196,0.6666666666666666
122,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.,"def division_elements(tup1, tup2):
    # Perform element-wise division
    result = tuple(a // b for a, b in zip(tup1, tup2))
    return result

# Test cases
assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)
assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)
assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)
",2,False,True,True,True,True,True,True,True,True,True,True,True,True,122_gpt-4o,0.767828270953276,0.2860672941157812,0.6666666666666666
154,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function to find the depth of a dictionary.,"def dict_depth(d):
    if not isinstance(d, dict) or not d:
        return 1
    else:
        return 1 + max(dict_depth(value) for value in d.values())

# Test cases
assert dict_depth({'a':1, 'b': {'c': {'d': {}}}}) == 4
assert dict_depth({'a':1, 'b': {'c':'python'}}) == 2
assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}}) == 3
",2,False,False,False,True,True,True,True,False,True,True,True,True,True,154_gpt-4o,0.6738593404245758,0.17802590362411208,0.5416666666666666
213,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function to find the maximum product formed by multiplying numbers of an increasing sublist of that array.,"def max_product(arr):
    n = len(arr)
    if n == 0:
        return 0

    # Initialize a list to store the maximum product up to each element
    max_products = [0] * n
    max_products[0] = arr[0]

    for i in range(1, n):
        max_products[i] = arr[i]
        for j in range(i):
            if arr[j] < arr[i]:
                max_products[i] = max(max_products[i], max_products[j] * arr[i])

    # Return the maximum product found
    return max(max_products)

# Test cases
assert max_product([3, 100, 4, 5, 150, 6]) == 3000
assert max_product([4, 42, 55, 68, 80]) == 50265600
assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460
",2,False,True,False,True,True,True,True,True,True,True,True,True,True,213_gpt-4o,0.5657122217284346,0.06588329016943985,0.5416666666666666
225,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.,"def difference(n):
    # Calculate the sum of the first n natural numbers
    sum_n = n * (n + 1) // 2
    
    # Calculate the sum of the cubes of the first n natural numbers
    sum_cubes_n = sum_n ** 2
    
    # Calculate the difference
    return sum_cubes_n - sum_n

# Tests
assert difference(3) == 30
assert difference(5) == 210
assert difference(2) == 6
",2,True,False,True,True,True,True,False,True,False,True,True,True,True,225_gpt-4o,0.7466648197736022,0.2617654768008565,0.5833333333333334
342,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function to find the product of first even and odd number of a given list.,"def mul_even_odd(lst):
    first_odd = None
    first_even = None
    
    for num in lst:
        if first_odd is None and num % 2 != 0:
            first_odd = num
        if first_even is None and num % 2 == 0:
            first_even = num
        if first_odd is not None and first_even is not None:
            break
    
    return first_odd * first_even

# Test cases
assert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4
assert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2
assert mul_even_odd([1, 5, 7, 9, 10]) == 10
",2,True,False,False,True,True,True,True,False,False,False,True,True,False,342_gpt-4o,0.57550052804741,0.07642250390202558,0.5833333333333334
67,mbppplus,llama3point1-70b,qwen2.5-72b-instruct,Write a function to sum all amicable numbers from 1 to a specified number.,"def sum_of_divisors(n):
    divisors_sum = 0
    for i in range(1, int(n**0.5) + 1):
        if n % i == 0:
            if i * i != n:
                divisors_sum += i + n // i
            else:
                divisors_sum += i
    return divisors_sum - n

def amicable_numbers_sum(n):
    amicable_sum = 0
    for num in range(1, n + 1):
        if sum_of_divisors(num) < n:
            if sum_of_divisors(sum_of_divisors(num)) == num and num != sum_of_divisors(num):
                amicable_sum += num
    return amicable_sum
",2,True,False,False,True,True,True,True,True,True,True,True,True,False,67_llama3point1-70b,0.7823318356997688,0.3011696936526498,0.5833333333333334
121,mbppplus,llama3point1-70b,qwen2.5-72b-instruct,Write a function to find the nth newman–shanks–williams prime number.,"def is_prime(n):
    """"""Check if a number is prime.""""""
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def newman_prime(n):
    """"""Find the nth Newman-Shanks-Williams prime number.""""""
    if n == 1:
        return 7  # The first NSW prime is 7
    
    # Initialize the count of NSW primes and the current number
    count = 1
    num = 7
    
    while True:
        # Check if the current number is a prime number
        if is_prime(num):
            # Check if the current prime number is congruent to 1 or 5 modulo 6
            if num % 6 in [1, 5]:
                # Increment the count of NSW primes
                count += 1
                
                # If we have found the nth NSW prime, return it
                if count == n:
                    return num
        
        # Move on to the next number
        num += 1
",2,False,False,False,False,True,True,True,False,False,False,False,False,False,121_llama3point1-70b,0.7730581645061364,0.29208295285707575,0.5833333333333334
241,mbppplus,llama3point1-70b,qwen2.5-72b-instruct,Write a python function to check whether a list is sublist of another or not.,"def is_Sub_Array(main_list, sub_list):
    return ''.join(map(str, sub_list)) in ''.join(map(str, main_list))
",2,False,False,False,True,True,True,False,False,False,False,True,True,True,241_llama3point1-70b,0.7484623449417328,0.258940708449018,0.7083333333333334
302,mbppplus,llama3point1-70b,qwen2.5-72b-instruct,Write a function to find the index of the first occurrence of a given number in a sorted array.,"def find_first_occurrence(arr, num):
    for i, x in enumerate(arr):
        if x == num:
            return i
    return -1  # return -1 if num is not found in the array
",2,True,False,False,True,True,True,True,True,True,False,True,True,True,302_llama3point1-70b,0.7239120881811368,0.2363819713745785,0.625
58,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a python function to count true booleans in the given list.,"def count(bool_list):
    return sum(bool_list)

# Test cases
assert count([True, False, True]) == 2
assert count([False, False]) == 0
assert count([True, True, True]) == 3
",3,True,True,True,False,True,True,True,True,True,True,False,False,True,58_gpt-4o,0.657564001792403,0.16055984441072196,0.6666666666666666
122,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.,"def division_elements(tup1, tup2):
    # Perform element-wise division
    result = tuple(a // b for a, b in zip(tup1, tup2))
    return result

# Test cases
assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)
assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)
assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)
",3,False,False,False,True,True,True,True,True,False,True,True,True,True,122_gpt-4o,0.767828270953276,0.2860672941157812,0.6666666666666666
154,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function to find the depth of a dictionary.,"def dict_depth(d):
    if not isinstance(d, dict) or not d:
        return 1
    else:
        return 1 + max(dict_depth(value) for value in d.values())

# Test cases
assert dict_depth({'a':1, 'b': {'c': {'d': {}}}}) == 4
assert dict_depth({'a':1, 'b': {'c':'python'}}) == 2
assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}}) == 3
",3,False,False,False,True,False,True,True,False,False,False,True,True,True,154_gpt-4o,0.6738593404245758,0.17802590362411208,0.5416666666666666
213,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function to find the maximum product formed by multiplying numbers of an increasing sublist of that array.,"def max_product(arr):
    n = len(arr)
    if n == 0:
        return 0

    # Initialize a list to store the maximum product up to each element
    max_products = [0] * n
    max_products[0] = arr[0]

    for i in range(1, n):
        max_products[i] = arr[i]
        for j in range(i):
            if arr[j] < arr[i]:
                max_products[i] = max(max_products[i], max_products[j] * arr[i])

    # Return the maximum product found
    return max(max_products)

# Test cases
assert max_product([3, 100, 4, 5, 150, 6]) == 3000
assert max_product([4, 42, 55, 68, 80]) == 50265600
assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460
",3,False,False,True,True,True,True,True,True,True,True,True,False,True,213_gpt-4o,0.5657122217284346,0.06588329016943985,0.5416666666666666
225,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.,"def difference(n):
    # Calculate the sum of the first n natural numbers
    sum_n = n * (n + 1) // 2
    
    # Calculate the sum of the cubes of the first n natural numbers
    sum_cubes_n = sum_n ** 2
    
    # Calculate the difference
    return sum_cubes_n - sum_n

# Tests
assert difference(3) == 30
assert difference(5) == 210
assert difference(2) == 6
",3,True,True,True,True,True,True,True,True,True,True,True,True,True,225_gpt-4o,0.7466648197736022,0.2617654768008565,0.5833333333333334
342,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function to find the product of first even and odd number of a given list.,"def mul_even_odd(lst):
    first_odd = None
    first_even = None
    
    for num in lst:
        if first_odd is None and num % 2 != 0:
            first_odd = num
        if first_even is None and num % 2 == 0:
            first_even = num
        if first_odd is not None and first_even is not None:
            break
    
    return first_odd * first_even

# Test cases
assert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4
assert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2
assert mul_even_odd([1, 5, 7, 9, 10]) == 10
",3,True,False,False,True,True,False,True,False,False,False,True,False,False,342_gpt-4o,0.57550052804741,0.07642250390202558,0.5833333333333334
67,mbppplus,llama3point1-70b,qwen2.5-72b-instruct,Write a function to sum all amicable numbers from 1 to a specified number.,"def sum_of_divisors(n):
    divisors_sum = 0
    for i in range(1, int(n**0.5) + 1):
        if n % i == 0:
            if i * i != n:
                divisors_sum += i + n // i
            else:
                divisors_sum += i
    return divisors_sum - n

def amicable_numbers_sum(n):
    amicable_sum = 0
    for num in range(1, n + 1):
        if sum_of_divisors(num) < n:
            if sum_of_divisors(sum_of_divisors(num)) == num and num != sum_of_divisors(num):
                amicable_sum += num
    return amicable_sum
",3,True,False,True,True,True,True,True,True,True,True,False,True,False,67_llama3point1-70b,0.7823318356997688,0.3011696936526498,0.5833333333333334
121,mbppplus,llama3point1-70b,qwen2.5-72b-instruct,Write a function to find the nth newman–shanks–williams prime number.,"def is_prime(n):
    """"""Check if a number is prime.""""""
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def newman_prime(n):
    """"""Find the nth Newman-Shanks-Williams prime number.""""""
    if n == 1:
        return 7  # The first NSW prime is 7
    
    # Initialize the count of NSW primes and the current number
    count = 1
    num = 7
    
    while True:
        # Check if the current number is a prime number
        if is_prime(num):
            # Check if the current prime number is congruent to 1 or 5 modulo 6
            if num % 6 in [1, 5]:
                # Increment the count of NSW primes
                count += 1
                
                # If we have found the nth NSW prime, return it
                if count == n:
                    return num
        
        # Move on to the next number
        num += 1
",3,False,False,False,False,True,True,True,False,False,False,False,False,False,121_llama3point1-70b,0.7730581645061364,0.29208295285707575,0.5833333333333334
241,mbppplus,llama3point1-70b,qwen2.5-72b-instruct,Write a python function to check whether a list is sublist of another or not.,"def is_Sub_Array(main_list, sub_list):
    return ''.join(map(str, sub_list)) in ''.join(map(str, main_list))
",3,False,False,False,True,True,False,False,False,False,False,False,True,False,241_llama3point1-70b,0.7484623449417328,0.258940708449018,0.7083333333333334
302,mbppplus,llama3point1-70b,qwen2.5-72b-instruct,Write a function to find the index of the first occurrence of a given number in a sorted array.,"def find_first_occurrence(arr, num):
    for i, x in enumerate(arr):
        if x == num:
            return i
    return -1  # return -1 if num is not found in the array
",3,True,False,False,True,True,True,True,False,True,False,True,True,True,302_llama3point1-70b,0.7239120881811368,0.2363819713745785,0.625
