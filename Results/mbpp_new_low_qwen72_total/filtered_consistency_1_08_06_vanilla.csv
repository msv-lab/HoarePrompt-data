Task ID,Dataset,model_created,model_run,description,Code,run_number,original correctness,summary fsl,naive correctness fsl,vanilla,simple tree,complex tree,summary,simple verify fsl,complex verify fsl,summary verify fsl,simple verify,complex verify,summary verify,unique_id,consistency,consistency_mine,consistency_old
213,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function to find the maximum product formed by multiplying numbers of an increasing sublist of that array.,"def max_product(arr):
    n = len(arr)
    if n == 0:
        return 0

    # Initialize a list to store the maximum product up to each element
    max_products = [0] * n
    max_products[0] = arr[0]

    for i in range(1, n):
        max_products[i] = arr[i]
        for j in range(i):
            if arr[j] < arr[i]:
                max_products[i] = max(max_products[i], max_products[j] * arr[i])

    # Return the maximum product found
    return max(max_products)

# Test cases
assert max_product([3, 100, 4, 5, 150, 6]) == 3000
assert max_product([4, 42, 55, 68, 80]) == 50265600
assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460
",1,False,True,True,True,False,True,True,True,True,False,True,True,True,213_gpt-4o,0.5657122217284346,0.06588329016943985,0.5416666666666666
342,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function to find the product of first even and odd number of a given list.,"def mul_even_odd(lst):
    first_odd = None
    first_even = None
    
    for num in lst:
        if first_odd is None and num % 2 != 0:
            first_odd = num
        if first_even is None and num % 2 == 0:
            first_even = num
        if first_odd is not None and first_even is not None:
            break
    
    return first_odd * first_even

# Test cases
assert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4
assert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2
assert mul_even_odd([1, 5, 7, 9, 10]) == 10
",1,True,False,False,True,True,False,False,False,False,False,False,True,True,342_gpt-4o,0.57550052804741,0.07642250390202558,0.5833333333333334
213,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function to find the maximum product formed by multiplying numbers of an increasing sublist of that array.,"def max_product(arr):
    n = len(arr)
    if n == 0:
        return 0

    # Initialize a list to store the maximum product up to each element
    max_products = [0] * n
    max_products[0] = arr[0]

    for i in range(1, n):
        max_products[i] = arr[i]
        for j in range(i):
            if arr[j] < arr[i]:
                max_products[i] = max(max_products[i], max_products[j] * arr[i])

    # Return the maximum product found
    return max(max_products)

# Test cases
assert max_product([3, 100, 4, 5, 150, 6]) == 3000
assert max_product([4, 42, 55, 68, 80]) == 50265600
assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460
",2,False,True,False,True,True,True,True,True,True,True,True,True,True,213_gpt-4o,0.5657122217284346,0.06588329016943985,0.5416666666666666
342,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function to find the product of first even and odd number of a given list.,"def mul_even_odd(lst):
    first_odd = None
    first_even = None
    
    for num in lst:
        if first_odd is None and num % 2 != 0:
            first_odd = num
        if first_even is None and num % 2 == 0:
            first_even = num
        if first_odd is not None and first_even is not None:
            break
    
    return first_odd * first_even

# Test cases
assert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4
assert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2
assert mul_even_odd([1, 5, 7, 9, 10]) == 10
",2,True,False,False,True,True,True,True,False,False,False,True,True,False,342_gpt-4o,0.57550052804741,0.07642250390202558,0.5833333333333334
213,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function to find the maximum product formed by multiplying numbers of an increasing sublist of that array.,"def max_product(arr):
    n = len(arr)
    if n == 0:
        return 0

    # Initialize a list to store the maximum product up to each element
    max_products = [0] * n
    max_products[0] = arr[0]

    for i in range(1, n):
        max_products[i] = arr[i]
        for j in range(i):
            if arr[j] < arr[i]:
                max_products[i] = max(max_products[i], max_products[j] * arr[i])

    # Return the maximum product found
    return max(max_products)

# Test cases
assert max_product([3, 100, 4, 5, 150, 6]) == 3000
assert max_product([4, 42, 55, 68, 80]) == 50265600
assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460
",3,False,False,True,True,True,True,True,True,True,True,True,False,True,213_gpt-4o,0.5657122217284346,0.06588329016943985,0.5416666666666666
342,mbppplus,gpt-4o,qwen2.5-72b-instruct,Write a function to find the product of first even and odd number of a given list.,"def mul_even_odd(lst):
    first_odd = None
    first_even = None
    
    for num in lst:
        if first_odd is None and num % 2 != 0:
            first_odd = num
        if first_even is None and num % 2 == 0:
            first_even = num
        if first_odd is not None and first_even is not None:
            break
    
    return first_odd * first_even

# Test cases
assert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4
assert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2
assert mul_even_odd([1, 5, 7, 9, 10]) == 10
",3,True,False,False,True,True,False,True,False,False,False,True,False,False,342_gpt-4o,0.57550052804741,0.07642250390202558,0.5833333333333334
