Task ID,Dataset,model_created,model_run,description,Code,run_number,original correctness,summary fsl,naive correctness fsl,vanilla,simple tree,complex tree,summary,simple verify fsl,complex verify fsl,summary verify fsl,simple verify,complex verify,summary verify,unique_id,consistency,consistency_mine,consistency_old
26,apps,gpt-4o,qwen2.5-72b-instruct,"You are given matrix with n rows and n columns filled with zeroes. You should put k ones in it in such a way that the resulting matrix is symmetrical with respect to the main diagonal (the diagonal that goes from the top left to the bottom right corner) and is lexicographically maximal.

One matrix is lexicographically greater than the other if the first different number in the first different row from the top in the first matrix is greater than the corresponding number in the second one.

If there exists no such matrix then output -1.


-----Input-----

The first line consists of two numbers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ 10^6).


-----Output-----

If the answer exists then output resulting matrix. Otherwise output -1.


-----Examples-----
Input
2 1

Output
1 0 
0 0 

Input
3 2

Output
1 0 0 
0 1 0 
0 0 0 

Input
2 5

Output
-1","def main():
    import sys
    input = sys.stdin.read
    data = input().strip().split()
    
    n = int(data[0])
    k = int(data[1])
    
    # Calculate the maximum number of ones possible
    max_ones = n * (n + 1) // 2
    
    if k > max_ones:
        print(-1)
        return
    
    # Initialize the matrix
    matrix = [[0] * n for _ in range(n)]
    
    # Fill the matrix to make it lexicographically maximal and symmetric
    for i in range(n):
        if k <= 0:
            break
        # First, try to fill the diagonal
        matrix[i][i] = 1
        k -= 1
        
        # Then, try to fill the off-diagonal pairs
        for j in range(i + 1, n):
            if k <= 0:
                break
            if k >= 2:
                matrix[i][j] = 1
                matrix[j][i] = 1
                k -= 2
            else:
                if k == 1:
                    matrix[i][j] = 1
                    k -= 1
    
    # Print the matrix
    for row in matrix:
        print(' '.join(map(str, row)))

if __name__ == ""__main__"":
    main()
",1,False,False,True,True,True,True,True,True,True,True,True,True,True,26_gpt-4o,0.5469641573522294,0.04682581911113701,0.5833333333333334
52,apps,gpt-4o,qwen2.5-72b-instruct,"В Берляндском государственном университете локальная сеть между серверами не всегда работает без ошибок. При передаче двух одинаковых сообщений подряд возможна ошибка, в результате которой эти два сообщения сливаются в одно. При таком слиянии конец первого сообщения совмещается с началом второго. Конечно, совмещение может происходить только по одинаковым символам. Длина совмещения должна быть положительным числом, меньшим длины текста сообщения. 

Например, при передаче двух сообщений «abrakadabra» подряд возможно, что оно будет передано с ошибкой описанного вида, и тогда будет получено сообщение вида «abrakadabrabrakadabra» или «abrakadabrakadabra» (в первом случае совмещение произошло по одному символу, а во втором — по четырем).

По полученному сообщению t определите, возможно ли, что это результат ошибки описанного вида работы локальной сети, и если возможно, определите возможное значение s. 

Не следует считать ошибкой ситуацию полного наложения друга на друга двух сообщений. К примеру, если получено сообщение «abcd», следует считать, что в нём ошибки нет. Аналогично, простое дописывание одного сообщения вслед за другим не является признаком ошибки. Например, если получено сообщение «abcabc», следует считать, что в нём ошибки нет.


-----Входные данные-----

В единственной строке выходных данных следует непустая строка t, состоящая из строчных букв латинского алфавита. Длина строки t не превосходит 100 символов.


-----Выходные данные-----

Если сообщение t не может содержать ошибки, выведите «NO» (без кавычек) в единственную строку выходных данных.

В противном случае в первой строке выведите «YES» (без кавычек), а в следующей строке выведите строку s — возможное сообщение, которое могло привести к ошибке. Если возможных ответов несколько, разрешается вывести любой из них.


-----Примеры-----
Входные данные
abrakadabrabrakadabra

Выходные данные
YES
abrakadabra

Входные данные
acacacaca

Выходные данные
YES
acaca

Входные данные
abcabc

Выходные данные
NO

Входные данные
abababab

Выходные данные
YES
ababab

Входные данные
tatbt

Выходные данные
NO



-----Примечание-----

Во втором примере подходящим ответом также является строка acacaca.","def find_possible_message(t):
    n = len(t)
    for i in range(1, n):
        if t[:i] == t[-i:]:
            s = t[:-i]
            if s + t[-i:] == t:
                return ""YES\n"" + s
    return ""NO""

# Read input
t = input().strip()

# Find and print the result
print(find_possible_message(t))
",1,False,False,False,False,True,True,True,True,True,True,True,False,True,52_gpt-4o,0.5006935756644613,0.0007177314243645242,0.5416666666666666
104,apps,gpt-4o,qwen2.5-72b-instruct,"JATC and his friend Giraffe are currently in their room, solving some problems. Giraffe has written on the board an array $a_1$, $a_2$, ..., $a_n$ of integers, such that $1 \le a_1 < a_2 < \ldots < a_n \le 10^3$, and then went to the bathroom.

JATC decided to prank his friend by erasing some consecutive elements in the array. Since he doesn't want for the prank to go too far, he will only erase in a way, such that Giraffe can still restore the array using the information from the remaining elements. Because Giraffe has created the array, he's also aware that it's an increasing array and all the elements are integers in the range $[1, 10^3]$.

JATC wonders what is the greatest number of elements he can erase?


-----Input-----

The first line of the input contains a single integer $n$ ($1 \le n \le 100$) — the number of elements in the array.

The second line of the input contains $n$ integers $a_i$ ($1 \le a_1<a_2<\dots<a_n \le 10^3$) — the array written by Giraffe.


-----Output-----

Print a single integer — the maximum number of consecutive elements in the array that JATC can erase.

If it is impossible to erase even a single element, print $0$.


-----Examples-----
Input
6
1 3 4 5 6 9

Output
2
Input
3
998 999 1000

Output
2
Input
5
1 2 3 4 5

Output
4


-----Note-----

In the first example, JATC can erase the third and fourth elements, leaving the array $[1, 3, \_, \_, 6, 9]$. As you can see, there is only one way to fill in the blanks.

In the second example, JATC can erase the second and the third elements. The array will become $[998, \_, \_]$. Because all the elements are less than or equal to $1000$, the array is still can be restored. Note, that he can't erase the first $2$ elements.

In the third example, JATC can erase the first $4$ elements. Since all the elements are greater than or equal to $1$, Giraffe can still restore the array. Note, that he can't erase the last $4$ elements.","n = int(input())
a = list(map(int, input().split()))

max_erase = 0

for i in range(1, n):
    max_erase = max(max_erase, a[i] - a[i-1] - 1)

print(max_erase)
",1,False,False,False,False,False,True,True,False,False,False,False,False,False,104_gpt-4o,0.510436793930964,0.010849090235450031,0.5416666666666666
154,apps,gpt-4o,qwen2.5-72b-instruct,"Polycarp takes part in a math show. He is given n tasks, each consists of k subtasks, numbered 1 through k. It takes him t_{j} minutes to solve the j-th subtask of any task. Thus, time required to solve a subtask depends only on its index, but not on the task itself. Polycarp can solve subtasks in any order.

By solving subtask of arbitrary problem he earns one point. Thus, the number of points for task is equal to the number of solved subtasks in it. Moreover, if Polycarp completely solves the task (solves all k of its subtasks), he recieves one extra point. Thus, total number of points he recieves for the complete solution of the task is k + 1.

Polycarp has M minutes of time. What is the maximum number of points he can earn?


-----Input-----

The first line contains three integer numbers n, k and M (1 ≤ n ≤ 45, 1 ≤ k ≤ 45, 0 ≤ M ≤ 2·10^9).

The second line contains k integer numbers, values t_{j} (1 ≤ t_{j} ≤ 1000000), where t_{j} is the time in minutes required to solve j-th subtask of any task.


-----Output-----

Print the maximum amount of points Polycarp can earn in M minutes.


-----Examples-----
Input
3 4 11
1 2 3 4

Output
6

Input
5 5 10
1 2 4 8 16

Output
7



-----Note-----

In the first example Polycarp can complete the first task and spend 1 + 2 + 3 + 4 = 10 minutes. He also has the time to solve one subtask of the second task in one minute.

In the second example Polycarp can solve the first subtask of all five tasks and spend 5·1 = 5 minutes. Also he can solve the second subtasks of two tasks and spend 2·2 = 4 minutes. Thus, he earns 5 + 2 = 7 points in total.","def max_points(n, k, M, t):
    # Calculate total time required to solve all subtasks of one task
    total_time_per_task = sum(t)
    
    max_points = 0
    
    # Try solving 0 to n tasks completely
    for complete_tasks in range(n + 1):
        time_used = complete_tasks * total_time_per_task
        if time_used > M:
            break
        
        # Points for completely solved tasks
        points = complete_tasks * (k + 1)
        
        # Remaining time to solve individual subtasks
        remaining_time = M - time_used
        
        # Solve as many individual subtasks as possible with the remaining time
        subtasks_solved = 0
        for subtask_time in t:
            if remaining_time >= subtask_time:
                max_subtasks_for_this_task = (remaining_time // subtask_time)
                subtasks_solved += max_subtasks_for_this_task
                remaining_time -= max_subtasks_for_this_task * subtask_time
        
        # Ensure not to count more subtasks than available
        subtasks_solved = min(subtasks_solved, (n - complete_tasks) * k)
        
        # Update max points
        max_points = max(max_points, points + subtasks_solved)
    
    return max_points

# Read input
import sys
input = sys.stdin.read
data = input().split()
n = int(data[0])
k = int(data[1])
M = int(data[2])
t = list(map(int, data[3:3+k]))

# Get the result and print it
result = max_points(n, k, M, t)
print(result)
",1,False,True,True,True,True,True,True,True,True,False,False,False,False,154_gpt-4o,0.5269803847908492,0.02802023916435911,0.5416666666666666
161,apps,gpt-4o,qwen2.5-72b-instruct,"We have a sequence of N integers: A_1, A_2, \cdots, A_N.
You can perform the following operation between 0 and K times (inclusive):
 - Choose two integers i and j such that i \neq j, each between 1 and N (inclusive). Add 1 to A_i and -1 to A_j, possibly producing a negative element.
Compute the maximum possible positive integer that divides every element of A after the operations. Here a positive integer x divides an integer y if and only if there exists an integer z such that y = xz.

-----Constraints-----
 - 2 \leq N \leq 500
 - 1 \leq A_i \leq 10^6
 - 0 \leq K \leq 10^9
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N K
A_1 A_2 \cdots A_{N-1} A_{N}

-----Output-----
Print the maximum possible positive integer that divides every element of A after the operations.

-----Sample Input-----
2 3
8 20

-----Sample Output-----
7

7 will divide every element of A if, for example, we perform the following operation:
 - Choose i = 2, j = 1. A becomes (7, 21).
We cannot reach the situation where 8 or greater integer divides every element of A.","import math

# Read input values
N, K = map(int, input().split())
A = list(map(int, input().split()))

# Calculate the sum of the array
sum_A = sum(A)

# Function to compute the greatest common divisor (GCD) of a list
def gcd_of_list(lst):
    gcd_result = lst[0]
    for num in lst[1:]:
        gcd_result = math.gcd(gcd_result, num)
    return gcd_result

# Function to find all divisors of a number
def find_divisors(x):
    divisors = set()
    for i in range(1, int(math.sqrt(x)) + 1):
        if x % i == 0:
            divisors.add(i)
            divisors.add(x // i)
    return sorted(divisors, reverse=True)

# Find the GCD of the array
gcd_A = gcd_of_list(A)

# Find all divisors of sum_A
divisors = find_divisors(sum_A)

# Find the maximum divisor that divides all elements of A
for d in divisors:
    if all((a % d == 0) or ((sum_A - a) % d <= K) for a in A):
        print(d)
        break
",1,False,False,False,False,True,True,True,True,True,False,False,False,False,161_gpt-4o,0.5728910106676007,0.07437073050742077,0.5
212,apps,gpt-4o,qwen2.5-72b-instruct,"Manao is taking part in a quiz. The quiz consists of n consecutive questions. A correct answer gives one point to the player. The game also has a counter of consecutive correct answers. When the player answers a question correctly, the number on this counter increases by 1. If the player answers a question incorrectly, the counter is reset, that is, the number on it reduces to 0. If after an answer the counter reaches the number k, then it is reset, and the player's score is doubled. Note that in this case, first 1 point is added to the player's score, and then the total score is doubled. At the beginning of the game, both the player's score and the counter of consecutive correct answers are set to zero.

Manao remembers that he has answered exactly m questions correctly. But he does not remember the order in which the questions came. He's trying to figure out what his minimum score may be. Help him and compute the remainder of the corresponding number after division by 1000000009 (10^9 + 9).


-----Input-----

The single line contains three space-separated integers n, m and k (2 ≤ k ≤ n ≤ 10^9; 0 ≤ m ≤ n).


-----Output-----

Print a single integer — the remainder from division of Manao's minimum possible score in the quiz by 1000000009 (10^9 + 9).


-----Examples-----
Input
5 3 2

Output
3

Input
5 4 2

Output
6



-----Note-----

Sample 1. Manao answered 3 questions out of 5, and his score would double for each two consecutive correct answers. If Manao had answered the first, third and fifth questions, he would have scored as much as 3 points.

Sample 2. Now Manao answered 4 questions. The minimum possible score is obtained when the only wrong answer is to the question 4.

Also note that you are asked to minimize the score and not the remainder of the score modulo 1000000009. For example, if Manao could obtain either 2000000000 or 2000000020 points, the answer is 2000000000 mod 1000000009, even though 2000000020 mod 1000000009 is a smaller number.","MOD = 1000000009

def min_possible_score(n, m, k):
    # Calculate the maximum number of times we can achieve k consecutive correct answers
    max_full_sets = m // k
    remaining_correct = m % k
    
    # Calculate the minimum possible score
    if m <= n - n // k:
        # If we can avoid doubling
        score = m % MOD
    else:
        # We need to calculate the minimum score with doubling
        excess_full_sets = max_full_sets - (n - m) // (k - 1)
        remaining_correct_answers = m - excess_full_sets * k
        
        # Calculate the score with the excess full sets causing doubling
        score = (remaining_correct_answers + k * (pow(2, excess_full_sets, MOD) - 1) * pow(2, MOD-2, MOD)) % MOD
    
    return score

# Read input values
n, m, k = map(int, input().split())

# Print the minimum possible score
print(min_possible_score(n, m, k))
",1,False,False,True,True,True,True,True,False,True,True,True,True,True,212_gpt-4o,0.468397825689495,-0.033059595702997525,0.5416666666666666
237,apps,gpt-4o,qwen2.5-72b-instruct,"A necklace can be described as a string of links ('-') and pearls ('o'), with the last link or pearl connected to the first one. $0$ 

You can remove a link or a pearl and insert it between two other existing links or pearls (or between a link and a pearl) on the necklace. This process can be repeated as many times as you like, but you can't throw away any parts.

Can you make the number of links between every two adjacent pearls equal? Two pearls are considered to be adjacent if there is no other pearl between them.

Note that the final necklace should remain as one circular part of the same length as the initial necklace.


-----Input-----

The only line of input contains a string $s$ ($3 \leq |s| \leq 100$), representing the necklace, where a dash '-' represents a link and the lowercase English letter 'o' represents a pearl.


-----Output-----

Print ""YES"" if the links and pearls can be rejoined such that the number of links between adjacent pearls is equal. Otherwise print ""NO"".

You can print each letter in any case (upper or lower).


-----Examples-----
Input
-o-o--
Output
YES
Input
-o---

Output
YES
Input
-o---o-

Output
NO
Input
ooo

Output
YES","s = input().strip()

# Count the number of pearls ('o') and links ('-') in the string
pearl_count = s.count('o')
link_count = s.count('-')

# If there are no pearls or only one pearl, we can always make the necklace valid
if pearl_count == 0 or pearl_count == 1:
    print(""YES"")
else:
    # Check if the links can be evenly distributed among the pearls
    if link_count % pearl_count == 0:
        print(""YES"")
    else:
        print(""NO"")
",1,True,False,False,True,True,True,True,False,False,False,True,True,True,237_gpt-4o,0.4786149205642525,-0.02293929869290778,0.5
280,apps,gpt-4o,qwen2.5-72b-instruct,"The on-board computer on Polycarp's car measured that the car speed at the beginning of some section of the path equals v_1 meters per second, and in the end it is v_2 meters per second. We know that this section of the route took exactly t seconds to pass.

Assuming that at each of the seconds the speed is constant, and between seconds the speed can change at most by d meters per second in absolute value (i.e., the difference in the speed of any two adjacent seconds does not exceed d in absolute value), find the maximum possible length of the path section in meters.


-----Input-----

The first line contains two integers v_1 and v_2 (1 ≤ v_1, v_2 ≤ 100) — the speeds in meters per second at the beginning of the segment and at the end of the segment, respectively.

The second line contains two integers t (2 ≤ t ≤ 100) — the time when the car moves along the segment in seconds, d (0 ≤ d ≤ 10) — the maximum value of the speed change between adjacent seconds.

It is guaranteed that there is a way to complete the segment so that:  the speed in the first second equals v_1,  the speed in the last second equals v_2,  the absolute value of difference of speeds between any two adjacent seconds doesn't exceed d. 


-----Output-----

Print the maximum possible length of the path segment in meters. 


-----Examples-----
Input
5 6
4 2

Output
26
Input
10 10
10 0

Output
100


-----Note-----

In the first sample the sequence of speeds of Polycarpus' car can look as follows: 5, 7, 8, 6. Thus, the total path is 5 + 7 + 8 + 6 = 26 meters.

In the second sample, as d = 0, the car covers the whole segment at constant speed v = 10. In t = 10 seconds it covers the distance of 100 meters.","# Read input values
v1, v2 = map(int, input().split())
t, d = map(int, input().split())

# Initialize the list to store the speeds at each second
speeds = [0] * t

# Set the speed at the first second
speeds[0] = v1

# Set the speed at the last second
speeds[-1] = v2

# Calculate maximum possible speeds in between
for i in range(1, t):
    speeds[i] = min(speeds[i-1] + d, v2 + (t - i - 1) * d)

# Calculate total distance traveled
total_distance = sum(speeds)

# Print the result
print(total_distance)
",1,True,False,False,True,True,True,False,True,True,True,True,True,False,280_gpt-4o,0.5917932823648945,0.09311284968517959,0.5833333333333334
41,apps,llama3-70b,qwen2.5-72b-instruct,"Is it rated?

Here it is. The Ultimate Question of Competitive Programming, Codeforces, and Everything. And you are here to answer it.

Another Codeforces round has been conducted. No two participants have the same number of points. For each participant, from the top to the bottom of the standings, their rating before and after the round is known.

It's known that if at least one participant's rating has changed, then the round was rated for sure.

It's also known that if the round was rated and a participant with lower rating took a better place in the standings than a participant with higher rating, then at least one round participant's rating has changed.

In this problem, you should not make any other assumptions about the rating system.

Determine if the current round is rated, unrated, or it's impossible to determine whether it is rated of not.


-----Input-----

The first line contains a single integer n (2 ≤ n ≤ 1000) — the number of round participants.

Each of the next n lines contains two integers a_{i} and b_{i} (1 ≤ a_{i}, b_{i} ≤ 4126) — the rating of the i-th participant before and after the round, respectively. The participants are listed in order from the top to the bottom of the standings.


-----Output-----

If the round is rated for sure, print ""rated"". If the round is unrated for sure, print ""unrated"". If it's impossible to determine whether the round is rated or not, print ""maybe"".


-----Examples-----
Input
6
3060 3060
2194 2194
2876 2903
2624 2624
3007 2991
2884 2884

Output
rated

Input
4
1500 1500
1300 1300
1200 1200
1400 1400

Output
unrated

Input
5
3123 3123
2777 2777
2246 2246
2246 2246
1699 1699

Output
maybe



-----Note-----

In the first example, the ratings of the participants in the third and fifth places have changed, therefore, the round was rated.

In the second example, no one's rating has changed, but the participant in the second place has lower rating than the participant in the fourth place. Therefore, if the round was rated, someone's rating would've changed for sure.

In the third example, no one's rating has changed, and the participants took places in non-increasing order of their rating. Therefore, it's impossible to determine whether the round is rated or not.","n = int(input())
ratings_before = []
ratings_after = []
for _ in range(n):
    a, b = map(int, input().split())
    ratings_before.append(a)
    ratings_after.append(b)

rated = False
unrated = True
maybe = True

for i in range(n):
    for j in range(i+1, n):
        if ratings_before[i] < ratings_before[j] and ratings_after[i] > ratings_after[j]:
            unrated = False
            break
    if not unrated:
        break

for i in range(n):
    if ratings_before[i] != ratings_after[i]:
        rated = True
        break

if rated:
    print(""rated"")
elif unrated:
    print(""unrated"")
else:
    print(""maybe"")
",1,False,False,False,False,False,True,True,False,False,False,False,False,False,41_llama3-70b,0.47975033860487276,-0.02026346931437469,0.5
47,apps,llama3-70b,qwen2.5-72b-instruct,"After finishing eating her bun, Alyona came up with two integers n and m. She decided to write down two columns of integers — the first column containing integers from 1 to n and the second containing integers from 1 to m. Now the girl wants to count how many pairs of integers she can choose, one from the first column and the other from the second column, such that their sum is divisible by 5.

Formally, Alyona wants to count the number of pairs of integers (x, y) such that 1 ≤ x ≤ n, 1 ≤ y ≤ m and $(x + y) \operatorname{mod} 5$ equals 0.

As usual, Alyona has some troubles and asks you to help.


-----Input-----

The only line of the input contains two integers n and m (1 ≤ n, m ≤ 1 000 000).


-----Output-----

Print the only integer — the number of pairs of integers (x, y) such that 1 ≤ x ≤ n, 1 ≤ y ≤ m and (x + y) is divisible by 5.


-----Examples-----
Input
6 12

Output
14

Input
11 14

Output
31

Input
1 5

Output
1

Input
3 8

Output
5

Input
5 7

Output
7

Input
21 21

Output
88



-----Note-----

Following pairs are suitable in the first sample case:   for x = 1 fits y equal to 4 or 9;  for x = 2 fits y equal to 3 or 8;  for x = 3 fits y equal to 2, 7 or 12;  for x = 4 fits y equal to 1, 6 or 11;  for x = 5 fits y equal to 5 or 10;  for x = 6 fits y equal to 4 or 9. 

Only the pair (1, 4) is suitable in the third sample case.","n, m = map(int, input().split())
count = 0
for x in range(1, n + 1):
    for y in range(1, m + 1):
        if (x + y) % 5 == 0:
            count += 1
print(count)
",1,False,False,False,True,True,True,True,False,False,False,True,True,True,47_llama3-70b,0.5691633217206031,0.07007748455070659,0.5833333333333334
141,apps,llama3-70b,qwen2.5-72b-instruct,"The mayor of the Central Town wants to modernize Central Street, represented in this problem by the $(Ox)$ axis.

On this street, there are $n$ antennas, numbered from $1$ to $n$. The $i$-th antenna lies on the position $x_i$ and has an initial scope of $s_i$: it covers all integer positions inside the interval $[x_i - s_i; x_i + s_i]$.

It is possible to increment the scope of any antenna by $1$, this operation costs $1$ coin. We can do this operation as much as we want (multiple times on the same antenna if we want).

To modernize the street, we need to make all integer positions from $1$ to $m$ inclusive covered by at least one antenna. Note that it is authorized to cover positions outside $[1; m]$, even if it's not required.

What is the minimum amount of coins needed to achieve this modernization?


-----Input-----

The first line contains two integers $n$ and $m$ ($1 \le n \le 80$ and $n \le m \le 100\ 000$).

The $i$-th of the next $n$ lines contains two integers $x_i$ and $s_i$ ($1 \le x_i \le m$ and $0 \le s_i \le m$).

On each position, there is at most one antenna (values $x_i$ are pairwise distinct).


-----Output-----

You have to output a single integer: the minimum amount of coins required to make all integer positions from $1$ to $m$ inclusive covered by at least one antenna.


-----Examples-----
Input
3 595
43 2
300 4
554 10

Output
281

Input
1 1
1 1

Output
0

Input
2 50
20 0
3 1

Output
30

Input
5 240
13 0
50 25
60 5
155 70
165 70

Output
26



-----Note-----

In the first example, here is a possible strategy:

  Increase the scope of the first antenna by $40$, so that it becomes $2 + 40 = 42$. This antenna will cover interval $[43 - 42; 43 + 42]$ which is $[1; 85]$  Increase the scope of the second antenna by $210$, so that it becomes $4 + 210 = 214$. This antenna will cover interval $[300 - 214; 300 + 214]$, which is $[86; 514]$  Increase the scope of the third antenna by $31$, so that it becomes $10 + 31 = 41$. This antenna will cover interval $[554 - 41; 554 + 41]$, which is $[513; 595]$ 

Total cost is $40 + 210 + 31 = 281$. We can prove that it's the minimum cost required to make all positions from $1$ to $595$ covered by at least one antenna.

Note that positions $513$ and $514$ are in this solution covered by two different antennas, but it's not important.

—

In the second example, the first antenna already covers an interval $[0; 2]$ so we have nothing to do.

Note that the only position that we needed to cover was position $1$; positions $0$ and $2$ are covered, but it's not important.","n, m = map(int, input().split())
antennas = []
for _ in range(n):
    x, s = map(int, input().split())
    antennas.append((x, s))
antennas.sort()

dp = [float('inf')] * (m + 1)
dp[0] = 0
for x, s in antennas:
    for i in range(m, x - s - 1, -1):
        dp[i] = min(dp[i], dp[max(0, i - x - s)] + (i - x + s))
print(dp[m])
",1,False,False,False,False,False,True,True,False,False,True,False,False,False,141_llama3-70b,0.41643377703298606,-0.0776191776575088,0.5833333333333334
156,apps,llama3-70b,qwen2.5-72b-instruct,"You might have heard about the next game in Lara Croft series coming out this year. You also might have watched its trailer. Though you definitely missed the main idea about its plot, so let me lift the veil of secrecy.

Lara is going to explore yet another dangerous dungeon. Game designers decided to use good old 2D environment. The dungeon can be represented as a rectangle matrix of n rows and m columns. Cell (x, y) is the cell in the x-th row in the y-th column. Lara can move between the neighbouring by side cells in all four directions.

Moreover, she has even chosen the path for herself to avoid all the traps. She enters the dungeon in cell (1, 1), that is top left corner of the matrix. Then she goes down all the way to cell (n, 1) — the bottom left corner. Then she starts moving in the snake fashion — all the way to the right, one cell up, then to the left to the cell in 2-nd column, one cell up. She moves until she runs out of non-visited cells. n and m given are such that she always end up in cell (1, 2).

Lara has already moved to a neighbouring cell k times. Can you determine her current position?


-----Input-----

The only line contains three integers n, m and k (2 ≤ n, m ≤ 10^9, n is always even, 0 ≤ k < n·m). Note that k doesn't fit into 32-bit integer type!


-----Output-----

Print the cell (the row and the column where the cell is situated) where Lara ends up after she moves k times.


-----Examples-----
Input
4 3 0

Output
1 1

Input
4 3 11

Output
1 2

Input
4 3 7

Output
3 2



-----Note-----

Here is her path on matrix 4 by 3: [Image]","n, m, k = map(int, input().split())
k %= (n * 2 - 2)
if k < n - 1:
    print(k + 1, 1)
elif k < n * 2 - 2:
    print(n - (k - n + 1) % (n - 1) - 1, (k - n + 1) // (n - 1) + 1)
else:
    print(1, 2)
",1,False,False,False,True,True,False,True,False,False,False,True,True,True,156_llama3-70b,0.5739732759826585,0.07360820667012699,0.5416666666666666
257,apps,llama3-70b,qwen2.5-72b-instruct,"Kicker (table football) is a board game based on football, in which players control the footballers' figures mounted on rods by using bars to get the ball into the opponent's goal. When playing two on two, one player of each team controls the goalkeeper and the full-backs (plays defence), the other player controls the half-backs and forwards (plays attack).

Two teams of company Q decided to battle each other. Let's enumerate players from both teams by integers from 1 to 4. The first and second player play in the first team, the third and the fourth one play in the second team. For each of the four players we know their game skills in defence and attack. The defence skill of the i-th player is a_{i}, the attack skill is b_{i}.

Before the game, the teams determine how they will play. First the players of the first team decide who will play in the attack, and who will play in the defence. Then the second team players do the same, based on the choice of their opponents.

We will define a team's defence as the defence skill of player of the team who plays defence. Similarly, a team's attack is the attack skill of the player of the team who plays attack. We assume that one team is guaranteed to beat the other one, if its defence is strictly greater than the opponent's attack and its attack is strictly greater than the opponent's defence.

The teams of company Q know each other's strengths and therefore arrange their teams optimally. Identify the team that is guaranteed to win (if both teams act optimally) or tell that there is no such team.


-----Input-----

The input contain the players' description in four lines. The i-th line contains two space-separated integers a_{i} and b_{i} (1 ≤ a_{i}, b_{i} ≤ 100) — the defence and the attack skill of the i-th player, correspondingly.


-----Output-----

If the first team can win, print phrase ""Team 1"" (without the quotes), if the second team can win, print phrase ""Team 2"" (without the quotes). If no of the teams can definitely win, print ""Draw"" (without the quotes).


-----Examples-----
Input
1 100
100 1
99 99
99 99

Output
Team 1

Input
1 1
2 2
3 3
2 2

Output
Team 2

Input
3 3
2 2
1 1
2 2

Output
Draw



-----Note-----

Let consider the first test sample. The first team can definitely win if it will choose the following arrangement: the first player plays attack, the second player plays defence.

Consider the second sample. The order of the choosing roles for players makes sense in this sample. As the members of the first team choose first, the members of the second team can beat them (because they know the exact defence value and attack value of the first team).","a1, b1 = map(int, input().split())
a2, b2 = map(int, input().split())
a3, b3 = map(int, input().split())
a4, b4 = map(int, input().split())

# Team 1 possibilities
team1_defence = max(a1, a2)
team1_attack = max(b1, b2)

# Team 2 possibilities
team2_defence = max(a3, a4)
team2_attack = max(b3, b4)

if team1_defence > team2_attack and team1_attack > team2_defence:
    print(""Team 1"")
elif team2_defence > team1_attack and team2_attack > team1_defence:
    print(""Team 2"")
else:
    print(""Draw"")
",1,False,False,False,False,False,False,False,False,False,False,False,False,False,257_llama3-70b,0.4376910258610854,-0.06047855281654072,0.5416666666666666
