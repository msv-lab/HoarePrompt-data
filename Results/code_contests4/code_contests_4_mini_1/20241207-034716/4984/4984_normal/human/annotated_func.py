#State of the program right berfore the function call: p is a positive integer representing the length of the number in decimal digits (1 ≤ p ≤ 10^6), and x is a positive integer between 1 and 9 (1 ≤ x ≤ 9).
def func_1(p, x):
    c = []
    for i in xrange(1, 10):
        s = 0
        
        b = i
        
        a = []
        
        for j in xrange(p):
            a.append(b)
            s, b = divmod(b * x + s, 10)
        
        if b == i and s == 0:
            a.reverse()
            c.append(''.join(map(str, a)))
        
    #State of the program after the  for loop has been executed: `p` is a positive integer, `x` is a positive integer between 1 and 9, `c` is a list containing strings formed by repeating digits from 1 to 9, each of length `p`, where each string corresponds to a valid number generated by the loop conditions based on `b` and `s`.
    c.sort()
    for r in c:
        if r[0] != '0':
            return r
        
    #State of the program after the  for loop has been executed: `p` is a positive integer, `x` is a positive integer between 1 and 9, `c` is a sorted list of strings formed by repeating digits from 1 to 9, and `r` is the first element in `c` that does not start with the character '0'. If all elements in `c` start with '0', the loop will not find a valid `r` and will not return anything.
    return ''
    #The program returns an empty string ''
#Overall this is what the function does:The function accepts two parameters, `p` (a positive integer representing the length of a number in decimal digits) and `x` (a positive integer between 1 and 9). It generates and returns the smallest valid number of length `p` composed of digits from 1 to 9, where the last digit matches the first digit, and the sum of digits does not create a carry. If no valid number can be formed, it returns an empty string.

#State of the program right berfore the function call: p is a positive integer representing the length of the decimal number, and x is an integer between 1 and 9 inclusive.
def func_2():
    p, x = map(int, raw_input().split())
    if (x == 5 and p % 42 == 0) :
        stdout.write(func_1(42, 5) * (p / 42))
        return
        #The program returns the value of result_func_1 multiplied by (p / 42), where p is a positive integer divisible by 42 and x is 5.
    #State of the program after the if block has been executed: *`p` is a positive integer representing the length of the decimal number, `x` is an integer between 1 and 9 inclusive, and either `x` is not equal to 5 or `p` is not divisible by 42. Both variables have been assigned new input values.
    for i in xrange(1, 1000):
        s = func_1(i, x)
        
        if not s:
            continue
        
        l = len(s)
        
        if p % l == 0:
            stdout.write(s * (p / l))
        else:
            stdout.write('Impossible')
        
        return
        
    #State of the program after the  for loop has been executed: `i` is 1000, `s` is the result of the last call to `func_1(i, x)`, `p` is a positive integer, `x` is an integer between 1 and 9 inclusive, and either `x` is not equal to 5 or `p` is not divisible by 42.
#Overall this is what the function does:The function accepts a positive integer `p` and an integer `x` (between 1 and 9 inclusive). If `x` is 5 and `p` is divisible by 42, it returns the result of `func_1(42, 5)` multiplied by `(p / 42)`. If these conditions are not met, it iterates from 1 to 999, calling `func_1(i, x)` and checking if the result is non-empty. If the length of the result divides `p`, it outputs the result repeated `(p / l)` times. If not, it outputs 'Impossible'. If no suitable result is found after the loop, the function does not return anything, effectively ending without output.

