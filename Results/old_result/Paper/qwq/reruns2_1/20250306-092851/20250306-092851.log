DEBUG - Start Task 1951_B
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1945_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: One of the days of the hike coincided with a holiday, so in the evening at the
camp, it was decided to arrange a festive fireworks display. For this purpose,
the organizers of the hike bought two installations for launching fireworks
and a huge number of shells for launching.

Both installations are turned on simultaneously. The first installation
launches fireworks every a minutes (i.e., after a, 2 \cdot a, 3 \cdot a, \dots
minutes after launch). The second installation launches fireworks every b
minutes (i.e., after b, 2 \cdot b, 3 \cdot b, \dots minutes after launch).

Each firework is visible in the sky for m + 1 minutes after launch, i.e., if a
firework was launched after x minutes after the installations were turned on,
it will be visible every minute from x to x + m , inclusive. If one firework
was launched m minutes after another, both fireworks will be visible for one
minute.

What is the maximum number of fireworks that could be seen in the sky at the
same time?

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. Then follow the
descriptions of the test cases.

The first and only line of each test case contains integers a , b , m (1 \le
a, b, m \le 10^{18} ) — the frequency of launching for the first installation,
the second installation, and the time the firework is visible in the sky.

Output

For each set of input data, output a single number — the maximum number of
fireworks that can be seen simultaneously.

Example

Input

    6
    
    6 7 4
    
    3 4 10
    
    7 8 56
    
    5 6 78123459896
    
    1 1 1
    
    1 1 1000000000000000000

Output

    2
    7
    17
    28645268630
    4
    2000000000000000002
    
Note

In the first set of input data, the fireworks are visible in the sky for 5
minutes. Since the first installation launches fireworks every 6 minutes, and
the second one every 7 minutes, two fireworks launched from the same
installation will not be visible in the sky at the same time. At the same
time, after 7 minutes from the start of the holiday, one firework from the
first and one from the second camp will be visible. Thus, it is possible to
see no more than 2 fireworks simultaneously.

In the third set of input data, 17 fireworks will be visible after 112
minutes:

  * 9 fireworks launched from the first installation at times [56, 63, 70, 77, 84, 91, 98, 105, 112 ]; 
  * 8 fireworks launched from the second installation at times [56, 64, 72, 80, 88, 96, 104, 112 ].
DEBUG - Correctness: True
DEBUG - Start Task 1956_B
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1956_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You and Nene are playing a card game. The deck with 2n cards is used to play
this game. Each card has an integer from 1 to n on it, and each of integers 1
through n appears exactly on 2 cards. Additionally, there is a table where
cards are placed during the game (initially, the table is empty).

In the beginning of the game, these 2n cards are distributed between you and
Nene so that each player receives n cards.

After it, you and Nene alternatively take 2n turns, i.e. each person takes n
turns, starting with you. On each turn:

  * The player whose turn is it selects one of the cards in his hand. Let x be the number on it. 
  * The player whose turn is it receives 1 point if there is already a card with the integer x on the table (otherwise, he receives no points). After it, he places the selected card with the integer x on the table. 

Note that turns are made publicly: each player can see all the cards on the
table at each moment.

Nene is very smart so she always selects cards optimally in order to maximize
her score in the end of the game (after 2n rounds). If she has several optimal
moves, she selects the move that minimizes your score in the end of the game.

More formally, Nene always takes turns optimally in order to maximize her
score in the end of the game in the first place and to minimize your score in
the end of the game in the second place.

Assuming that the cards are already distributed and cards in your hand have
integers a_1, a_2, \ldots, a_n written on them, what is the maximum number of
points you can get by taking your turns optimally?

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 10^4 ). The description of test cases follows.

The first line contains a single integer n (1 \le n \le 2 \cdot 10^5 ) — the
number of cards you and Nene receive in the beginning of the game.

The second line contains n integers a_1, a_2, \ldots, a_n (1 \le a_i \le n ) —
the integers on the cards in your hand. It is guaranteed that each integer
from 1 through n appears in the sequence a_1, a_2, \ldots, a_n at most 2
times.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output one integer: the maximum number of points you can
get.

Example

Input

    5
    
    4
    
    1 1 2 3
    
    8
    
    7 4 1 2 8 8 5 5
    
    8
    
    7 1 4 5 3 4 2 6
    
    3
    
    1 2 3
    
    1
    
    1

Output

    1
    2
    1
    0
    0
    
Note

In the first test case, the integers written on your cards are 1 , 1 , 2 and 3
. The integers written on Nene's cards are 2 , 3 , 4 and 4 . The game may
proceed as follows:

  1. You select one of the cards with an integer 1 written on it and place it on the table. 
  2. Nene selects one of the cards with an integer 4 written on it and places it on the table. 
  3. You select the card with an integer 1 written on it, receive 1 point, and place the selected card on the table. 
  4. Nene selects the card with an integer 4 written on it, receive 1 point, and places the selected card on the table. 
  5. You select the card with an integer 2 written on it and place it on the table. 
  6. Nene selects the card with an integer 2 written on it, receive 1 point, and places the selected card on the table. 
  7. You select the card with an integer 3 written on it and place it on the table. 
  8. Nene selects the card with an integer 3 written on it, receive 1 point, and places the selected card on the table. 

At the end of the game, you scored 1 point, and Nene scored 3 . It can be
shown that you cannot score more than 1 point if Nene plays optimally, so the
answer is 1 .

In the second test case, if both players play optimally, you score 2 points
and Nene scores 6 points.
DEBUG - Correctness: True
DEBUG - Start Task 1956_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You and Nene are playing a card game. The deck with 2n cards is used to play
this game. Each card has an integer from 1 to n on it, and each of integers 1
through n appears exactly on 2 cards. Additionally, there is a table where
cards are placed during the game (initially, the table is empty).

In the beginning of the game, these 2n cards are distributed between you and
Nene so that each player receives n cards.

After it, you and Nene alternatively take 2n turns, i.e. each person takes n
turns, starting with you. On each turn:

  * The player whose turn is it selects one of the cards in his hand. Let x be the number on it. 
  * The player whose turn is it receives 1 point if there is already a card with the integer x on the table (otherwise, he receives no points). After it, he places the selected card with the integer x on the table. 

Note that turns are made publicly: each player can see all the cards on the
table at each moment.

Nene is very smart so she always selects cards optimally in order to maximize
her score in the end of the game (after 2n rounds). If she has several optimal
moves, she selects the move that minimizes your score in the end of the game.

More formally, Nene always takes turns optimally in order to maximize her
score in the end of the game in the first place and to minimize your score in
the end of the game in the second place.

Assuming that the cards are already distributed and cards in your hand have
integers a_1, a_2, \ldots, a_n written on them, what is the maximum number of
points you can get by taking your turns optimally?

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 10^4 ). The description of test cases follows.

The first line contains a single integer n (1 \le n \le 2 \cdot 10^5 ) — the
number of cards you and Nene receive in the beginning of the game.

The second line contains n integers a_1, a_2, \ldots, a_n (1 \le a_i \le n ) —
the integers on the cards in your hand. It is guaranteed that each integer
from 1 through n appears in the sequence a_1, a_2, \ldots, a_n at most 2
times.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output one integer: the maximum number of points you can
get.

Example

Input

    5
    
    4
    
    1 1 2 3
    
    8
    
    7 4 1 2 8 8 5 5
    
    8
    
    7 1 4 5 3 4 2 6
    
    3
    
    1 2 3
    
    1
    
    1

Output

    1
    2
    1
    0
    0
    
Note

In the first test case, the integers written on your cards are 1 , 1 , 2 and 3
. The integers written on Nene's cards are 2 , 3 , 4 and 4 . The game may
proceed as follows:

  1. You select one of the cards with an integer 1 written on it and place it on the table. 
  2. Nene selects one of the cards with an integer 4 written on it and places it on the table. 
  3. You select the card with an integer 1 written on it, receive 1 point, and place the selected card on the table. 
  4. Nene selects the card with an integer 4 written on it, receive 1 point, and places the selected card on the table. 
  5. You select the card with an integer 2 written on it and place it on the table. 
  6. Nene selects the card with an integer 2 written on it, receive 1 point, and places the selected card on the table. 
  7. You select the card with an integer 3 written on it and place it on the table. 
  8. Nene selects the card with an integer 3 written on it, receive 1 point, and places the selected card on the table. 

At the end of the game, you scored 1 point, and Nene scored 3 . It can be
shown that you cannot score more than 1 point if Nene plays optimally, so the
answer is 1 .

In the second test case, if both players play optimally, you score 2 points
and Nene scores 6 points.
DEBUG - Correctness: False
DEBUG - Start Task 1968_E
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1927_C
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Given an array a of n integers, an array b of m integers, and an even number k
.

Your task is to determine whether it is possible to choose exactly \frac{k}{2}
elements from both arrays in such a way that among the chosen elements, every
integer from 1 to k is included.

For example:

  * If a=[2, 3, 8, 5, 6, 5] , b=[1, 3, 4, 10, 5] , k=6 , then it is possible to choose elements with values 2, 3, 6 from array a and elements with values 1, 4, 5 from array b . In this case, all numbers from 1 to k=6 will be included among the chosen elements.
  * If a=[2, 3, 4, 5, 6, 5] , b=[1, 3, 8, 10, 3] , k=6 , then it is not possible to choose elements in the required way. 

Note that you are not required to find a way to choose the elements — your
program should only check whether it is possible to choose the elements in the
required way.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The descriptions of the test cases follow.

The first line of each test case contains three integers n , m , and k (1 \le
n, m \le 2\cdot10^5 , 2 \le k \le 2 \cdot \min(n, m) , k is even) — the length
of array a , the length of array b , and the number of elements to be chosen,
respectively.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^6 ) — the elements of array a .

The third line of each test case contains m integers b_1, b_2, \dots, b_m (1
\le b_j \le 10^6 ) — the elements of array b .

It is guaranteed that the sum of values n and m over all test cases in a test
does not exceed 4 \cdot 10^5 .

Output

Output t lines, each of which is the answer to the corresponding test case. As
the answer, output "YES" if it is possible to choose \frac{k}{2} numbers from
each array in such a way that among the chosen elements, every integer from 1
to k is included. Otherwise, output "NO".

You can output each letter in any case (lowercase or uppercase). For example,
the strings "yEs", "yes", "Yes", and "YES" will be accepted as a positive
answer.

Example

Input

    6
    
    6 5 6
    
    2 3 8 5 6 5
    
    1 3 4 10 5
    
    6 5 6
    
    2 3 4 5 6 5
    
    1 3 8 10 3
    
    3 3 4
    
    1 3 5
    
    2 4 6
    
    2 5 4
    
    1 4
    
    7 3 4 4 2
    
    1 4 2
    
    2
    
    6 4 4 2
    
    1 5 2
    
    3
    
    2 2 1 4 3

Output

    YES
    NO
    YES
    YES
    NO
    NO
    
Note

In the first test case of the example, it is possible to choose elements equal
to 2 , 3 , and 6 from array a and elements equal to 1 , 4 , and 5 from array b
. Thus, all numbers from 1 to k=6 are included among the chosen elements.

In the second test case of the example, it can be shown that it is not
possible to choose exactly three elements from each array in the required way.

In the third test case of the example, it is possible to choose elements equal
to 1 and 3 from array a and elements equal to 2 and 4 from array b . Thus, all
numbers from 1 to k=4 are included among the chosen elements.
DEBUG - Correctness: False
DEBUG - Start Task 1922_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You are given an integer n and three strings a, b, c , each consisting of n
lowercase Latin letters.

Let a template be a string t consisting of n lowercase and/or uppercase Latin
letters. The string s matches the template t if the following conditions hold
for all i from 1 to n :

  * if the i -th letter of the template is lowercase, then s_i must be the same as t_i ; 
  * if the i -th letter of the template is uppercase, then s_i must be different from the lowercase version of t_i . For example, if there is a letter 'A' in the template, you cannot use the letter 'a' in the corresponding position of the string. 

Accordingly, the string doesn't match the template if the condition doesn't
hold for at least one i .

Determine whether there exists a template t such that the strings a and b
match it, while the string c does not.

Input

The first line contains an integer t (1 \le t \le 1000 ) — the number of test
cases.

The first line of each test case contains an integer n (1 \le n \le 20 ) — the
length of the given strings.

The next three lines contain the strings a, b and c . Each string consists of
exactly n lowercase Latin letters.

Output

For each testcase, print "YES" if there exists a template t such that the
strings a and b match it, while the string c does not. Otherwise, print "NO".

Example

Input

    4
    
    1
    
    a
    
    b
    
    c
    
    2
    
    aa
    
    bb
    
    aa
    
    10
    
    mathforces
    
    luckforces
    
    adhoccoder
    
    3
    
    acc
    
    abd
    
    abc

Output

    YES
    NO
    YES
    NO
    
Note

In the first test case, you can use the template "C". The first letter of
strings a and b differ from 'c', so they match the template. The first letter
of string c equals 'c', so it doesn't match.

In the third test case, you can use the template "CODEforces".
DEBUG - Correctness: True
DEBUG - Start Task 1969_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1969_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Monocarp wants to throw a party. He has n friends, and he wants to have at
least 2 of them at his party.

The i -th friend's best friend is p_i . All p_i are distinct, and for every i
\in [1, n] , p_i \ne i .

Monocarp can send invitations to friends. The i -th friend comes to the party
if both the i -th friend and the p_i -th friend receive an invitation (note
that the p_i -th friend doesn't have to actually come to the party). Each
invitation is sent to exactly one of the friends.

For example, if p = [3, 1, 2, 5, 4] , and Monocarp sends invitations to the
friends [1, 2, 4, 5] , then the friends [2, 4, 5] will come to the party. The
friend 1 won't come since his best friend didn't receive an invitation; the
friend 3 won't come since he didn't receive an invitation.

Calculate the minimum number of invitations Monocarp has to send so that at
least 2  friends come to the party.

Input

The first line contains one integer t (1 \le t \le 5000 ) — the number of test
cases.

Each test case consists of two lines:

  * the first line contains one integer n (2 \le n \le 50 ) — the number of friends; 
  * the second line contains n integers p_1, p_2, \dots, p_n (1 \le p_i \le n ; p_i \ne i ; all p_i are distinct). 

Output

Print one integer — the minimum number of invitations Monocarp has to send.

Example

Input

    3
    
    5
    
    3 1 2 5 4
    
    4
    
    2 3 4 1
    
    2
    
    2 1

Output

    2
    3
    2
    
Note

In the first testcase, Monocarp can send invitations to friends 4 and 5 . Both
of them will come to the party since they are each other's best friends, and
both of them have invitations.

In the second testcase, Monocarp can send invitations to friends 1, 2 and 3 ,
for example. Then friends 1 and 2 will attend: friend 1 and his best friend 2
have invitations, friend 2 and his best friend 3 have invitations. Friend 3
won't attend since his friend 4 doesn't have an invitation. It's impossible to
send invitations to fewer than 3 friends in such a way that at least 2 come.

In the third testcase, Monocarp can send invitations to both friends 1 and 2 ,
and both of them will attend.
DEBUG - Correctness: False
DEBUG - Start Task 1967_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1972_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: A contest contains n problems and the difficulty of the i -th problem is
expected to be at most b_i . There are already n problem proposals and the
difficulty of the i -th problem is a_i . Initially, both a_1, a_2, \ldots, a_n
and b_1, b_2, \ldots, b_n are sorted in non-decreasing order.

Some of the problems may be more difficult than expected, so the writers must
propose more problems. When a new problem with difficulty w is proposed, the
most difficult problem will be deleted from the contest, and the problems will
be sorted in a way that the difficulties are non-decreasing.

In other words, in each operation, you choose an integer w , insert it into
the array a , sort array a in non-decreasing order, and remove the last
element from it.

Find the minimum number of new problems to make a_i\le b_i for all i .

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 100 ). The description of the test cases follows.

The first line of each test case contains only one positive integer n (1 \leq
n \leq 100 ), representing the number of problems.

The second line of each test case contains an array a of length n (1\le a_1\le
a_2\le\cdots\le a_n\le 10^9 ).

The third line of each test case contains an array b of length n (1\le b_1\le
b_2\le\cdots\le b_n\le 10^9 ).

Output

For each test case, print an integer as your answer in a new line.

Example

Input

    2
    
    6
    
    1000 1400 2000 2000 2200 2700
    
    800 1200 1500 1800 2200 3000
    
    6
    
    4 5 6 7 8 9
    
    1 2 3 4 5 6

Output

    2
    3
    
Note

In the first test case:

  * Propose a problem with difficulty w=800 and a becomes [800,1000,1400,2000,2000,2200] . 
  * Propose a problem with difficulty w=1800 and a becomes [800,1000,1400,1800,2000,2000] . 

It can be proved that it's impossible to reach the goal by proposing fewer new
problems.

In the second test case:

  * Propose a problem with difficulty w=1 and a becomes [1,4,5,6,7,8] . 
  * Propose a problem with difficulty w=2 and a becomes [1,2,4,5,6,7] . 
  * Propose a problem with difficulty w=3 and a becomes [1,2,3,4,5,6] . 

It can be proved that it's impossible to reach the goal by proposing fewer new
problems.
DEBUG - Correctness: True
DEBUG - Start Task 1972_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: A contest contains n problems and the difficulty of the i -th problem is
expected to be at most b_i . There are already n problem proposals and the
difficulty of the i -th problem is a_i . Initially, both a_1, a_2, \ldots, a_n
and b_1, b_2, \ldots, b_n are sorted in non-decreasing order.

Some of the problems may be more difficult than expected, so the writers must
propose more problems. When a new problem with difficulty w is proposed, the
most difficult problem will be deleted from the contest, and the problems will
be sorted in a way that the difficulties are non-decreasing.

In other words, in each operation, you choose an integer w , insert it into
the array a , sort array a in non-decreasing order, and remove the last
element from it.

Find the minimum number of new problems to make a_i\le b_i for all i .

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 100 ). The description of the test cases follows.

The first line of each test case contains only one positive integer n (1 \leq
n \leq 100 ), representing the number of problems.

The second line of each test case contains an array a of length n (1\le a_1\le
a_2\le\cdots\le a_n\le 10^9 ).

The third line of each test case contains an array b of length n (1\le b_1\le
b_2\le\cdots\le b_n\le 10^9 ).

Output

For each test case, print an integer as your answer in a new line.

Example

Input

    2
    
    6
    
    1000 1400 2000 2000 2200 2700
    
    800 1200 1500 1800 2200 3000
    
    6
    
    4 5 6 7 8 9
    
    1 2 3 4 5 6

Output

    2
    3
    
Note

In the first test case:

  * Propose a problem with difficulty w=800 and a becomes [800,1000,1400,2000,2000,2200] . 
  * Propose a problem with difficulty w=1800 and a becomes [800,1000,1400,1800,2000,2000] . 

It can be proved that it's impossible to reach the goal by proposing fewer new
problems.

In the second test case:

  * Propose a problem with difficulty w=1 and a becomes [1,4,5,6,7,8] . 
  * Propose a problem with difficulty w=2 and a becomes [1,2,4,5,6,7] . 
  * Propose a problem with difficulty w=3 and a becomes [1,2,3,4,5,6] . 

It can be proved that it's impossible to reach the goal by proposing fewer new
problems.
DEBUG - Correctness: False
DEBUG - Start Task 1925_B
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1977_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: The little boy Nikita was given some cubes as a present. He decided to build a
tower out of them.

Initially, the tower doesn't have any cubes. In one move, Nikita either puts
exactly 1 cube on top of the tower or removes exactly 1 cube from the top of
the tower. Is it possible that after n moves, the resulting tower has exactly
m cubes?

Input

Each test contains multiple test cases. The first line of input contains a
single integer t (1 \le t \le 100 ) — the number of test cases. The
description of the test cases follows.

The only line of each test case contains two integers n and m (1 \le n, m \le
100 ).

Output

For each test case, output "Yes" (without quotes) if Nikita can obtain a tower
with m cubes, and "No" (without quotes) otherwise.

You can output each letter in any case (lowercase or uppercase). For example,
the strings "yEs", "yes", "Yes", and "YES" will be accepted as a positive
answer.

Example

Input

    3
    
    3 3
    
    2 4
    
    5 3

Output

    Yes
    No
    Yes
    
Note

In the first test case, Nikita can put 1 cube on top of the tower 3 times in a
row, so the answer is "Yes".

In the second test case, Nikita can only end up with either a tower with no
blocks or a tower with 2 blocks, so the answer is "No".
DEBUG - Correctness: True
DEBUG - Start Task 1931_E
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Sasha gave Anna a list a of n integers for Valentine's Day. Anna doesn't need
this list, so she suggests destroying it by playing a game.

Players take turns. Sasha is a gentleman, so he gives Anna the right to make
the first move.

  * On her turn, Anna must choose an element a_i from the list and reverse the sequence of its digits. For example, if Anna chose the element with a value of 42 , it would become 24 ; if Anna chose the element with a value of 1580 , it would become 851 . Note that leading zeros are removed. After such a turn, the number of elements in the list does not change.
  * On his turn, Sasha must extract two elements a_i and a_j (i \ne j ) from the list, concatenate them in any order and insert the result back into the list. For example, if Sasha chose the elements equal to 2007 and 19 , he would remove these two elements from the list and add the integer 200719 or 192007 . After such a turn, the number of elements in the list decreases by 1 .

Players can't skip turns. The game ends when Sasha can't make a move, i.e.
after Anna's move there is exactly one number left in the list. If this
integer is not less than 10^m (i.e., \ge 10^m ), Sasha wins. Otherwise, Anna
wins.

It can be shown that the game will always end. Determine who will win if both
players play optimally.

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

Then follows the description of the test cases.

The first line of each test case contains integers n , m (1 \le n \le 2 \cdot
10^5 , 0 \le m \le 2 \cdot 10^6 ) — the number of integers in the list and the
parameter determining when Sasha wins.

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\le a_i \le 10^9 ) — the list that Sasha gave to Anna.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output:

  * "Sasha", if Sasha wins with optimal play; 
  * "Anna", if Anna wins with optimal play. 

Example

Input

    9
    
    2 2
    
    14 2
    
    3 5
    
    9 56 1
    
    4 10
    
    1 2007 800 1580
    
    4 5
    
    5000 123 30 4
    
    10 10
    
    6 4 6 2 3 1 10 9 10 7
    
    1 1
    
    6
    
    1 1
    
    10
    
    8 9
    
    1 2 9 10 10 2 10 2
    
    4 5
    
    10 10 10 10

Output

    Sasha
    Anna
    Anna
    Sasha
    Sasha
    Anna
    Anna
    Anna
    Sasha
    
Note

Consider the first test case.

Anna can reverse the integer 2 , then Sasha can concatenate the integers 2 and
14 , obtaining the integer 214 , which is greater than 10^2 = 100 . If Anna
had reversed the integer 14 , Sasha would have concatenated the integers 41
and 2 , obtaining the integer 412 , which is greater than 10^2 = 100 . Anna
has no other possible moves, so she loses.
DEBUG - Correctness: True
DEBUG - Start Task 1942_B
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1945_D
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1956_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You and Nene are playing a card game. The deck with 2n cards is used to play
this game. Each card has an integer from 1 to n on it, and each of integers 1
through n appears exactly on 2 cards. Additionally, there is a table where
cards are placed during the game (initially, the table is empty).

In the beginning of the game, these 2n cards are distributed between you and
Nene so that each player receives n cards.

After it, you and Nene alternatively take 2n turns, i.e. each person takes n
turns, starting with you. On each turn:

  * The player whose turn is it selects one of the cards in his hand. Let x be the number on it. 
  * The player whose turn is it receives 1 point if there is already a card with the integer x on the table (otherwise, he receives no points). After it, he places the selected card with the integer x on the table. 

Note that turns are made publicly: each player can see all the cards on the
table at each moment.

Nene is very smart so she always selects cards optimally in order to maximize
her score in the end of the game (after 2n rounds). If she has several optimal
moves, she selects the move that minimizes your score in the end of the game.

More formally, Nene always takes turns optimally in order to maximize her
score in the end of the game in the first place and to minimize your score in
the end of the game in the second place.

Assuming that the cards are already distributed and cards in your hand have
integers a_1, a_2, \ldots, a_n written on them, what is the maximum number of
points you can get by taking your turns optimally?

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 10^4 ). The description of test cases follows.

The first line contains a single integer n (1 \le n \le 2 \cdot 10^5 ) — the
number of cards you and Nene receive in the beginning of the game.

The second line contains n integers a_1, a_2, \ldots, a_n (1 \le a_i \le n ) —
the integers on the cards in your hand. It is guaranteed that each integer
from 1 through n appears in the sequence a_1, a_2, \ldots, a_n at most 2
times.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output one integer: the maximum number of points you can
get.

Example

Input

    5
    
    4
    
    1 1 2 3
    
    8
    
    7 4 1 2 8 8 5 5
    
    8
    
    7 1 4 5 3 4 2 6
    
    3
    
    1 2 3
    
    1
    
    1

Output

    1
    2
    1
    0
    0
    
Note

In the first test case, the integers written on your cards are 1 , 1 , 2 and 3
. The integers written on Nene's cards are 2 , 3 , 4 and 4 . The game may
proceed as follows:

  1. You select one of the cards with an integer 1 written on it and place it on the table. 
  2. Nene selects one of the cards with an integer 4 written on it and places it on the table. 
  3. You select the card with an integer 1 written on it, receive 1 point, and place the selected card on the table. 
  4. Nene selects the card with an integer 4 written on it, receive 1 point, and places the selected card on the table. 
  5. You select the card with an integer 2 written on it and place it on the table. 
  6. Nene selects the card with an integer 2 written on it, receive 1 point, and places the selected card on the table. 
  7. You select the card with an integer 3 written on it and place it on the table. 
  8. Nene selects the card with an integer 3 written on it, receive 1 point, and places the selected card on the table. 

At the end of the game, you scored 1 point, and Nene scored 3 . It can be
shown that you cannot score more than 1 point if Nene plays optimally, so the
answer is 1 .

In the second test case, if both players play optimally, you score 2 points
and Nene scores 6 points.
DEBUG - Correctness: False
DEBUG - Start Task 1978_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Bob decided to open a bakery. On the opening day, he baked n buns that he can
sell. The usual price of a bun is a coins, but to attract customers, Bob
organized the following promotion:

  * Bob chooses some integer k (0 \le k \le \min(n, b) ).
  * Bob sells the first k buns at a modified price. In this case, the price of the i -th (1 \le i \le k ) sold bun is (b - i + 1) coins.
  * The remaining (n - k) buns are sold at a coins each.

Note that k can be equal to 0 . In this case, Bob will sell all the buns at a
coins each.

Help Bob determine the maximum profit he can obtain by selling all n buns.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. The description of
the test cases follows.

The only line of each test case contains three integers n , a , and b (1 \le
n, a, b \le 10^9 ) — the number of buns, the usual price of a bun, and the
price of the first bun to be sold at a modified price.

Output

For each test case, output a single integer — the maximum profit that Bob can
obtain.

Example

Input

    7
    
    4 4 5
    
    5 5 9
    
    10 10 5
    
    5 5 11
    
    1000000000 1000000000 1000000000
    
    1000000000 1000000000 1
    
    1000 1 1000

Output

    17
    35
    100
    45
    1000000000000000000
    1000000000000000000
    500500
    
Note

In the first test case, it is optimal for Bob to choose k = 1 . Then he will
sell one bun for 5 coins, and three buns at the usual price for 4 coins each.
Then the profit will be 5 + 4 + 4 + 4 = 17 coins.

In the second test case, it is optimal for Bob to choose k = 5 . Then he will
sell all the buns at the modified price and obtain a profit of 9 + 8 + 7 + 6 +
5 = 35 coins.

In the third test case, it is optimal for Bob to choose k = 0 . Then he will
sell all the buns at the usual price and obtain a profit of 10 \cdot 10 = 100
coins.
DEBUG - Correctness: True
DEBUG - Start Task 1978_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Bob decided to open a bakery. On the opening day, he baked n buns that he can
sell. The usual price of a bun is a coins, but to attract customers, Bob
organized the following promotion:

  * Bob chooses some integer k (0 \le k \le \min(n, b) ).
  * Bob sells the first k buns at a modified price. In this case, the price of the i -th (1 \le i \le k ) sold bun is (b - i + 1) coins.
  * The remaining (n - k) buns are sold at a coins each.

Note that k can be equal to 0 . In this case, Bob will sell all the buns at a
coins each.

Help Bob determine the maximum profit he can obtain by selling all n buns.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. The description of
the test cases follows.

The only line of each test case contains three integers n , a , and b (1 \le
n, a, b \le 10^9 ) — the number of buns, the usual price of a bun, and the
price of the first bun to be sold at a modified price.

Output

For each test case, output a single integer — the maximum profit that Bob can
obtain.

Example

Input

    7
    
    4 4 5
    
    5 5 9
    
    10 10 5
    
    5 5 11
    
    1000000000 1000000000 1000000000
    
    1000000000 1000000000 1
    
    1000 1 1000

Output

    17
    35
    100
    45
    1000000000000000000
    1000000000000000000
    500500
    
Note

In the first test case, it is optimal for Bob to choose k = 1 . Then he will
sell one bun for 5 coins, and three buns at the usual price for 4 coins each.
Then the profit will be 5 + 4 + 4 + 4 = 17 coins.

In the second test case, it is optimal for Bob to choose k = 5 . Then he will
sell all the buns at the modified price and obtain a profit of 9 + 8 + 7 + 6 +
5 = 35 coins.

In the third test case, it is optimal for Bob to choose k = 0 . Then he will
sell all the buns at the usual price and obtain a profit of 10 \cdot 10 = 100
coins.
DEBUG - Correctness: True
DEBUG - Start Task 1946_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You are given an array a of n integers.

The median of an array q_1, q_2, \ldots, q_k is the number p_{\lceil
\frac{k}{2} \rceil} , where p is the array q sorted in non-decreasing order.
For example, the median of the array [9, 5, 1, 2, 6] is 5 , as in the sorted
array [1, 2, 5, 6, 9] , the number at index \lceil \frac{5}{2} \rceil = 3 is 5
, and the median of the array [9, 2, 8, 3] is 3 , as in the sorted array [2,
3, 8, 9] , the number at index \lceil \frac{4}{2} \rceil = 2 is 3 .

You are allowed to choose an integer i (1 \le i \le n ) and increase a_i by 1
in one operation.

Your task is to find the minimum number of operations required to increase the
median of the array.

Note that the array a may not necessarily contain distinct numbers.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. Then follows the
description of the test cases.

The first line of each test case contains a single integer n (1 \le n \le 10^5
) — the length of the array a .

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\le a_i \le 10^9 ) — the array a .

It is guaranteed that the sum of the values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer — the minimum number of operations
required to increase the median of the array.

Example

Input

    8
    
    3
    
    2 2 8
    
    4
    
    7 3 3 1
    
    1
    
    1000000000
    
    5
    
    5 5 5 4 5
    
    6
    
    2 1 2 3 1 4
    
    2
    
    1 2
    
    2
    
    1 1
    
    4
    
    5 5 5 5

Output

    1
    2
    1
    3
    2
    1
    2
    3
    
Note

In the first test case, you can apply one operation to the first number and
obtain the array [3, 2, 8] , the median of this array is 3 , as it is the
number at index \lceil \frac{3}{2} \rceil = 2 in the non-decreasing sorted
array [2, 3, 8] . The median of the original array [2, 2, 8] is 2 , as it is
the number at index \lceil \frac{3}{2} \rceil = 2 in the non-decreasing sorted
array [2, 2, 8] . Thus, the median increased (3 > 2 ) in just one operation.

In the fourth test case, you can apply one operation to each of the numbers at
indices 1, 2, 3 and obtain the array [6, 6, 6, 4, 5] , the median of this
array is 6 , as it is the number at index \lceil \frac{5}{2} \rceil = 3 in the
non-decreasing sorted array [4, 5, 6, 6, 6] . The median of the original array
[5, 5, 5, 4, 5] is 5 , as it is the number at index \lceil \frac{5}{2} \rceil
= 2 in the non-decreasing sorted array [4, 5, 5, 5, 5] . Thus, the median
increased (6 > 5 ) in three operations. It can be shown that this is the
minimum possible number of operations.

In the fifth test case, you can apply one operation to each of the numbers at
indices 1, 3 and obtain the array [3, 1, 3, 3, 1, 4] , the median of this
array is 3 , as it is the number at index \lceil \frac{6}{2} \rceil = 3 in the
non-decreasing sorted array [1, 1, 3, 3, 3, 4] . The median of the original
array [2, 1, 2, 3, 1, 4] is 2 , as it is the number at index \lceil
\frac{6}{2} \rceil = 3 in the non-decreasing sorted array [1, 1, 2, 2, 3, 4] .
Thus, the median increased (3 > 2 ) in two operations. It can be shown that
this is the minimum possible number of operations.
DEBUG - Correctness: False
DEBUG - Start Task 1946_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You are given an array a of n integers.

The median of an array q_1, q_2, \ldots, q_k is the number p_{\lceil
\frac{k}{2} \rceil} , where p is the array q sorted in non-decreasing order.
For example, the median of the array [9, 5, 1, 2, 6] is 5 , as in the sorted
array [1, 2, 5, 6, 9] , the number at index \lceil \frac{5}{2} \rceil = 3 is 5
, and the median of the array [9, 2, 8, 3] is 3 , as in the sorted array [2,
3, 8, 9] , the number at index \lceil \frac{4}{2} \rceil = 2 is 3 .

You are allowed to choose an integer i (1 \le i \le n ) and increase a_i by 1
in one operation.

Your task is to find the minimum number of operations required to increase the
median of the array.

Note that the array a may not necessarily contain distinct numbers.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. Then follows the
description of the test cases.

The first line of each test case contains a single integer n (1 \le n \le 10^5
) — the length of the array a .

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\le a_i \le 10^9 ) — the array a .

It is guaranteed that the sum of the values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer — the minimum number of operations
required to increase the median of the array.

Example

Input

    8
    
    3
    
    2 2 8
    
    4
    
    7 3 3 1
    
    1
    
    1000000000
    
    5
    
    5 5 5 4 5
    
    6
    
    2 1 2 3 1 4
    
    2
    
    1 2
    
    2
    
    1 1
    
    4
    
    5 5 5 5

Output

    1
    2
    1
    3
    2
    1
    2
    3
    
Note

In the first test case, you can apply one operation to the first number and
obtain the array [3, 2, 8] , the median of this array is 3 , as it is the
number at index \lceil \frac{3}{2} \rceil = 2 in the non-decreasing sorted
array [2, 3, 8] . The median of the original array [2, 2, 8] is 2 , as it is
the number at index \lceil \frac{3}{2} \rceil = 2 in the non-decreasing sorted
array [2, 2, 8] . Thus, the median increased (3 > 2 ) in just one operation.

In the fourth test case, you can apply one operation to each of the numbers at
indices 1, 2, 3 and obtain the array [6, 6, 6, 4, 5] , the median of this
array is 6 , as it is the number at index \lceil \frac{5}{2} \rceil = 3 in the
non-decreasing sorted array [4, 5, 6, 6, 6] . The median of the original array
[5, 5, 5, 4, 5] is 5 , as it is the number at index \lceil \frac{5}{2} \rceil
= 2 in the non-decreasing sorted array [4, 5, 5, 5, 5] . Thus, the median
increased (6 > 5 ) in three operations. It can be shown that this is the
minimum possible number of operations.

In the fifth test case, you can apply one operation to each of the numbers at
indices 1, 3 and obtain the array [3, 1, 3, 3, 1, 4] , the median of this
array is 3 , as it is the number at index \lceil \frac{6}{2} \rceil = 3 in the
non-decreasing sorted array [1, 1, 3, 3, 3, 4] . The median of the original
array [2, 1, 2, 3, 1, 4] is 2 , as it is the number at index \lceil
\frac{6}{2} \rceil = 3 in the non-decreasing sorted array [1, 1, 2, 2, 3, 4] .
Thus, the median increased (3 > 2 ) in two operations. It can be shown that
this is the minimum possible number of operations.
DEBUG - Correctness: False
DEBUG - Start Task 1928_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1928_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1974_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1945_B
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1970_C1
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either "Ron" or "Hermione".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione
DEBUG - Correctness: False
DEBUG - Start Task 1943_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Alice and Bob play yet another game on an array a of size n . Alice starts
with an empty array c . Both players take turns playing, with Alice starting
first.

On Alice's turn, she picks one element from a , appends that element to c ,
and then deletes it from a .

On Bob's turn, he picks one element from a , and then deletes it from a .

The game ends when the array a is empty. Game's score is defined to be the
MEX^\dagger of c . Alice wants to maximize the score while Bob wants to
minimize it. Find game's final score if both players play optimally.

^\dagger The \operatorname{MEX} (minimum excludant) of an array of integers is
defined as the smallest non-negative integer which does not occur in the
array. For example:

  * The MEX of [2,2,1] is 0 , because 0 does not belong to the array. 
  * The MEX of [3,1,0,1] is 2 , because 0 and 1 belong to the array, but 2 does not. 
  * The MEX of [0,3,1,2] is 4 , because 0 , 1 , 2 and 3 belong to the array, but 4 does not. 

Input

Each test contains multiple test cases. The first line contains a single
integer t (1 \leq t \leq 2 \cdot 10^4 ) — the number of test cases. The
description of the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ).

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (0
\le a_i < n ).

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, find game's score if both players play optimally.

Example

Input

    3
    
    4
    
    0 0 1 1
    
    4
    
    0 1 2 3
    
    2
    
    1 1

Output

    2
    1
    0
    
Note

In the first test case, a possible game with a score of 2 is as follows:

  1. Alice chooses the element 1 . After this move, a=[0,0,1] and c=[1] . 
  2. Bob chooses the element 0 . After this move, a=[0,1] and c=[1] . 
  3. Alice chooses the element 0 . After this move, a=[1] and c=[1,0] . 
  4. Bob chooses the element 1 . After this move, a=[\,] and c=[1,0] . 

At the end, c=[1,0] , which has a MEX of 2 . Note that this is an example game
and does not necessarily represent the optimal strategy for both players.
DEBUG - Correctness: False
DEBUG - Start Task 1943_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1943_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1941_F
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Rudolf has prepared a set of n problems with complexities a_1 < a_2 < a_3 <
\dots < a_n . He is not entirely satisfied with the balance, so he wants to
add at most one problem to fix it.

For this, Rudolf came up with m models of problems and k functions. The
complexity of the i -th model is d_i , and the complexity of the j -th
function is f_j . To create a problem, he selects values i and j (1 \le i \le
m , 1 \le j \le k ) and by combining the i -th model with the j -th function,
he obtains a new problem with complexity d_i + f_j (a new element is inserted
into the array a ).

To determine the imbalance of the set, Rudolf sorts the complexities of the
problems in ascending order and finds the largest value of a_i - a_{i - 1} (i
> 1 ).

What is the minimum value of imbalance that Rudolf can achieve by adding at
most one problem, created according to the described rules?

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of testcases.

The first line of each test case contains three integers n , m , and k (2 \le
n \le 10^5 , 1 \le m, k \le 2 \cdot 10^5 ) — the number of prepared problems,
the number of models, and the number of functions, respectively.

The second line of each test case contains n integers a_1, a_2, a_3, \dots a_n
(1 \le a_i \le 2 \cdot 10^9 , a_i < a_{i+1} ) — the complexities of the
prepared problems.

The third line of each test case contains m integers d_1, d_2, d_3, \dots d_m
(1 \le d_i \le 10^9 ) — the complexities of the models.

The fourth line of each test case contains k integers f_1, f_2, f_3, \dots f_k
(1 \le f_i \le 10^9 ) — the complexities of the functions.

It is guaranteed that the sum of n over all testcases does not exceed 10^5 .

It is guaranteed that the sum of m over all testcases does not exceed 2 \cdot
10^5 .

It is guaranteed that the sum of k over all testcases does not exceed 2 \cdot
10^5 .

Output

For each testcase, output a single number — the minimum imbalance that Rudolf
can achieve.

Example

Input

    7
    
    5 5 5
    
    5 10 15 20 26
    
    11 14 16 13 8
    
    16 4 5 3 1
    
    7 6 5
    
    1 4 7 10 18 21 22
    
    2 3 5 7 4 2
    
    6 8 9 3 2
    
    7 6 5
    
    1 4 7 10 18 21 22
    
    2 3 5 7 4 2
    
    6 8 13 3 2
    
    5 6 3
    
    2 10 13 20 25
    
    11 6 10 16 14 5
    
    6 17 15
    
    4 2 2
    
    11 12 14 15
    
    19 14
    
    10 6
    
    8 4 2
    
    3 10 16 18 21 22 29 30
    
    9 13 16 15
    
    4 2
    
    2 4 7
    
    4 21
    
    4 15 14 5
    
    20 1 15 1 12 5 11

Output

    5
    4
    5
    8
    2
    7
    11
DEBUG - Correctness: True
DEBUG - Start Task 1945_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: The organizing committee plans to take the participants of the Olympiad on a
hike after the tour. Currently, the number of tents needed to be taken is
being calculated. It is known that each tent can accommodate up to 3 people.

Among the participants, there are a introverts, b extroverts, and c
universals:

  * Each introvert wants to live in a tent alone. Thus, a tent with an introvert must contain exactly one person — only the introvert himself. 
  * Each extrovert wants to live in a tent with two others. Thus, the tent with an extrovert must contain exactly three people. 
  * Each universal is fine with any option (living alone, with one other person, or with two others). 

The organizing committee respects the wishes of each participant very much, so
they want to fulfill all of them.

Tell us the minimum number of tents needed to be taken so that all
participants can be accommodated according to their preferences. If it is
impossible to accommodate the participants in a way that fulfills all the
wishes, output -1 .

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. This is followed by
the descriptions of the test cases.

Each test case is described by a single line containing three integers a , b ,
c (0 \le a, b, c \le 10^9 ) — the number of introverts, extroverts, and
universals, respectively.

Output

For each test case, output a single integer — the minimum number of tents, or
-1 if it is impossible to accommodate the participants.

Example

Input

    10
    
    1 2 3
    
    1 4 1
    
    1 4 2
    
    1 1 1
    
    1 3 2
    
    19 7 18
    
    0 0 0
    
    7 0 0
    
    0 24 0
    
    1000000000 1000000000 1000000000

Output

    3
    -1
    3
    -1
    3
    28
    0
    7
    8
    1666666667
    
Note

In the first test case, 1 tent will be given to the introverts, 1 tent will be
shared by two extroverts and one universal, and the last tent will be shared
by two universals. In total, 3 tents are needed.

In the second test case, three extroverts will take 1 tent, and 1 tent will be
taken by an introvert. Then, one extrovert and one universal will be left.
This extrovert will not be able to live with two others.
DEBUG - Correctness: True
DEBUG - Start Task 1945_C
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: In the village of Letovo, there are n houses. The villagers decided to build a
big road that will divide the village into left and right sides. Each resident
wants to live on either the right or the left side of the street, which is
described as a sequence a_1, a_2, \dots, a_n , where a_j = 0 if the resident
of the j -th house wants to live on the left side of the street; otherwise,
a_j = 1 .

The road will pass between two houses. The houses to the left of it will be
declared the left-side, and the houses to the right will be declared the
right-side. More formally, let the road pass between houses i and i+1 . Then
the houses at positions between 1 and i will be on the left side of the
street, and at positions between i+1 and n will be on the right side. The road
also may pass before the first and after the last house; in this case, the
entire village is declared to be either the right or left side, respectively.

To make the design fair, it was decided to lay the road so that at least half
of the residents on each side of the village are satisfied with the choice.
That is, among x residents on one side, at least \lceil\frac{x}{2}\rceil
should want to live on that side, where \lceil x \rceil denotes rounding up a
real number x .

![](https://espresso.codeforces.com/75baa17903d65a630fb0d3334683e857d5fdc345.png)
To the left of the road, there will be i houses, among the corresponding a_j
there must be at least \lceil\frac{i}{2}\rceil zeros. To the right of the
road, there will be n-i houses, among the corresponding a_j there must be at
least \lceil\frac{n-i}{2}\rceil ones.

Determine after which house i the road should be laid in order to satisfy the
described condition and be as close to the middle of the village as possible.
Formally, among all suitable positions i , minimize \left|\frac{n}{2} -
i\right| .

If there are multiple suitable positions i with the minimum \left|\frac{n}{2}
- i\right| , output the smaller one.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 2\cdot 10^4 ). The description of the test cases
follows.

The first line of each test case contains a single integer n (3 \le n \le
3\cdot 10^5 ). The next line of each test case contains a string a of length n
, consisting only of 0 and 1 .

It is guaranteed that the sum of n over all test cases does not exceed 3\cdot
10^5 .

Output

For each test case, output a single number i — the position of the house after
which the road should be laid (if it should be laid before the first house,
output 0 ). We can show that the answer always exists.

Example

Input

    7
    
    3
    
    101
    
    6
    
    010111
    
    6
    
    011001
    
    3
    
    000
    
    3
    
    110
    
    3
    
    001
    
    4
    
    1100

Output

    2
    3
    2
    3
    0
    1
    0
    
Note

Let's consider the first example of input data.

If we lay the road after the first house, there will be one house a_1 = 1 on
the left side of the street, the resident of which would like to live on the
right side of the street. Then 0 out of 1 residents on the even side will be
satisfied with the choice, which means that the road cannot be laid after
house 1 .

If we lay the road after the second house, 1 out of 2 residents on the left
side (with preferences a_1 = 1 , a_2 = 0 ) and 1 out of 1 resident on the
right side (with preference a_3 = 1 ) will be satisfied with the choice. More
than half of the residents on each side are satisfied with the choice, which
means that the road can be laid after house 2 . We can show that this is the
optimal answer.
DEBUG - Correctness: True
DEBUG - Start Task 1968_D
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1929_C
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Sasha decided to give his girlfriend the best handbag, but unfortunately for
Sasha, it is very expensive. Therefore, Sasha wants to earn it. After looking
at earning tips on the internet, he decided to go to the casino.

Sasha knows that the casino operates under the following rules. If Sasha
places a bet of y coins (where y is a positive integer), then in case of
winning, he will receive y \cdot k coins (i.e., his number of coins will
increase by y \cdot (k - 1) ). And in case of losing, he will lose the entire
bet amount (i.e., his number of coins will decrease by y ).

Note that the bet amount must always be a positive (> 0 ) integer and cannot
exceed Sasha's current number of coins.

Sasha also knows that there is a promotion at the casino: he cannot lose more
than x times in a row.

Initially, Sasha has a coins. He wonders whether he can place bets such that
he is guaranteed to win any number of coins. In other words, is it true that
for any integer n , Sasha can make bets so that for any outcome that does not
contradict the rules described above, at some moment of time he will have at
least n coins.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 1000 ) — the number of test cases. The description of
the test cases follows.

The single line of each test case contains three integers k, x and a (2 \leq k
\leq 30 , 1 \leq x \leq 100 , 1 \leq a \leq 10^9 ) — the number of times the
bet is increased in case of a win, the maximum number of consecutive losses,
and the initial number of coins Sasha has.

Output

For each test case, output "YES" (without quotes) if Sasha can achieve it and
"NO" (without quotes) otherwise.

You can output "YES" and "NO" in any case (for example, the strings "yEs",
"yes" and "Yes" will be recognized as a positive answer).

Example

Input

    9
    
    2 1 7
    
    2 1 1
    
    2 3 15
    
    3 3 6
    
    4 4 5
    
    5 4 7
    
    4 88 1000000000
    
    25 69 231
    
    13 97 18806

Output

    YES
    NO
    YES
    NO
    NO
    YES
    NO
    NO
    NO
    
Note

In the first test case, Sasha can proceed as follows:

  * If Sasha places a bet for the first time or if he won the previous bet, then he places 1 coin.
  * If Sasha lost the previous bet, then he places 2 coins.

Note that Sasha cannot lose more than once in a row.

It can be proven that with this strategy, Sasha can obtain as many coins as he
wants.

In the second test case, Sasha can only place 1 coin for the first time. But
in case of a loss, he will not be able to place any more bets, so he will not
be able to guarantee having as many coins as he wants.
DEBUG - Correctness: False
DEBUG - Start Task 1965_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Alice and Bob are playing a game on n piles of stones. On each player's turn,
they select a positive integer k that is at most the size of the smallest
nonempty pile and remove k stones from each nonempty pile at once. The first
player who is unable to make a move (because all piles are empty) loses.

Given that Alice goes first, who will win the game if both players play
optimally?

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le
2\cdot 10^5 ) — the number of piles in the game.

The next line of each test case contains n integers a_1, a_2, \ldots a_n (1
\le a_i \le 10^9 ), where a_i is the initial number of stones in the i -th
pile.

It is guaranteed that the sum of n over all test cases does not exceed 2\cdot
10^5 .

Output

For each test case, print a single line with the name of the winner, assuming
both players play optimally. If Alice wins, print "Alice", otherwise print
"Bob" (without quotes).

Example

Input

    7
    
    5
    
    3 3 3 3 3
    
    2
    
    1 7
    
    7
    
    1 3 9 7 4 2 100
    
    3
    
    1 2 3
    
    6
    
    2 1 3 4 2 4
    
    8
    
    5 7 2 9 6 3 3 2
    
    1
    
    1000000000

Output

    Alice
    Bob
    Alice
    Alice
    Bob
    Alice
    Alice
    
Note

In the first test case, Alice can win by choosing k=3 on her first turn, which
will empty all of the piles at once.

In the second test case, Alice must choose k=1 on her first turn since there
is a pile of size 1 , so Bob can win on the next turn by choosing k=6 .
DEBUG - Correctness: False
DEBUG - Start Task 1957_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You are given n sticks of lengths a_1, a_2, \ldots, a_n . Find the maximum
number of regular (equal-sided) polygons you can construct simultaneously,
such that:

  * Each side of a polygon is formed by exactly one stick. 
  * No stick is used in more than 1 polygon. 

Note: Sticks cannot be broken.

Input

The first line contains a single integer t (1 \leq t \leq 100 ) — the number
of test cases.

The first line of each test case contains a single integer n (1 \leq n \leq
100 ) — the number of sticks available.

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\leq a_i \leq 100 ) — the stick lengths.

Output

For each test case, output a single integer on a new line — the maximum number
of regular (equal-sided) polygons you can make simultaneously from the sticks
available.

Example

Input

    4
    
    1
    
    1
    
    2
    
    1 1
    
    6
    
    2 2 3 3 3 3
    
    9
    
    4 2 2 2 2 4 2 4 4

Output

    0
    0
    1
    2
    
Note

In the first test case, we only have one stick, hence we can't form any
polygon.

In the second test case, the two sticks aren't enough to form a polygon
either.

In the third test case, we can use the 4 sticks of length 3 to create a
square.

In the fourth test case, we can make a pentagon with side length 2 , and a
square of side length 4 .
DEBUG - Correctness: True
DEBUG - Start Task 1936_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: This is an interactive problem.

There is a secret sequence p_0, p_1, \ldots, p_{n-1} , which is a permutation
of \\{0,1,\ldots,n-1\\} .

You need to find any two indices i and j such that p_i \oplus p_j is
maximized, where \oplus denotes the [bitwise XOR
operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).

To do this, you can ask queries. Each query has the following form: you pick arbitrary indices a , b , c , and d (0 \le a,b,c,d < n ). Next, the jury calculates x = (p_a \mid p_b) and y = (p_c \mid p_d) , where | denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR). Finally, you receive the result of comparison between x and y . In other words, you are told if x < y , x > y , or x = y .

Please find any two indices i and j (0 \le i,j < n ) such that p_i \oplus p_j
is maximum among all such pairs, using at most 3n queries. If there are
multiple pairs of indices satisfying the condition, you may output any one of
them.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 10^3 ). The description of the test cases follows.

Interaction

The first line of each test case contains one integer n (2 \le n \le 10^4 ).
At this moment, the permutation p_0, p_1, \ldots, p_{n-1} is chosen. The
interactor in this task is not adaptive. In other words, the sequence p is
fixed in every test case and does not change during the interaction.

To ask a query, you need to pick four indices a , b , c , and d (0 \le a,b,c,d
< n ) and print the line of the following form:

  * "? a b c d" 

After that, you receive:

  * "<" if (p_a \mid p_b) < (p_c \mid p_d) ; 
  * "=" if (p_a \mid p_b) = (p_c \mid p_d) ; 
  * ">" if (p_a \mid p_b) > (p_c \mid p_d) . 

You can make at most 3n queries of this form.

Next, if your program has found a pair of indices i and j (0 \le i, j < n )
such that p_i \oplus p_j is maximized, print the line of the following form:

  * "! i j" 

Note that this line is not considered a query and is not taken into account
when counting the number of queries asked.

After this, proceed to the next test case.

If you make more than 3n queries during an interaction, your program must
terminate immediately, and you will receive the Wrong Answer verdict.
Otherwise, you can get an arbitrary verdict because your solution will
continue to read from a closed stream.

After printing a query or the answer for a test case, do not forget to output
the end of line and flush the output. Otherwise, you will get the verdict
Idleness Limit Exceeded. To do this, use:

  * fflush(stdout) or cout.flush() in C++; 
  * System.out.flush() in Java; 
  * flush(output) in Pascal; 
  * stdout.flush() in Python; 
  * see the documentation for other languages. 

It is guaranteed that the sum of n over all test cases does not exceed 10^4 .

Hacks

To hack, follow the test format below.

The first line contains the number of test cases t (1 \le t \le 10^3 ). The
description of the test cases follows.

The first line of each test case contains one integer n (2 \le n \le 10^4 ).

The second line of each test case contains n integers p_0,p_1,\ldots,p_{n-1} ,
which represent a permutation of integers from 0 to n - 1 .

The sum of n over all test cases should not exceed 10^4 .

Example

Input

    2
    4
    
    <
    
    =
    
    >
    
    2
    
Output

    ? 0 2 3 1
    
    ? 1 1 2 3
    
    ? 1 2 0 3
    
    ! 3 2
    
    ! 0 1
    
Note

In the first test case, the hidden permutation is p=[0,3,1,2] .

For the query "? 0 2 3 1", the jury return "<" because (p_0 \mid p_2) = (0
\mid 1) =1 < (p_3 \mid p_1) = (2 \mid 3) = 3 .

For the query "? 1 1 2 3", the jury return "=" because (p_1 \mid p_1) = (3\mid
3)= 3 = (p_2 \mid p_3) = (1 \mid 2)=3 .

For the query "? 1 2 0 3", the jury return ">" because (p_1 \mid p_2) = (3
\mid 1) = 3 > (p_0 \mid p_3) = (0\mid 2)=2 .

The answer i = 3 and j = 2 is valid: (p_3 \oplus p_2) = (2 \oplus 1) = 3 is
indeed equal to the maximum possible value of p_i \oplus p_j . Another valid
answer would be i=0 and j=1 . As the number of queries does not exceed 3n=12 ,
the answer is considered correct.

In the second test case, n = 2 , so p is either [0, 1] or [1, 0] . In any
case, p_0 \oplus p_1 = 1 is maximum possible.
DEBUG - Correctness: False
DEBUG - Start Task 1936_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1970_C2
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: This is the medium version of the problem. The difference in this version is
that t=1 and we work on trees.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. The game consists of t rounds, each of which starts with a stone on
exactly one node, which is considered as activated. A move consists of picking
an inactive neighbor of the node with a stone on it and moving the stone there
(thus activating this neighbor). Ron makes the first move, after which he
alternates with Hermione until no valid move is available. The player that
cannot make a move loses the round. If both players play optimally, who wins
each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either "Ron" or "Hermione".

Example

Input

    5 1
    
    1 2
    
    1 3
    
    3 4
    
    3 5
    
    1

Output

    Ron
DEBUG - Correctness: False
DEBUG - Start Task 1926_D
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1937_B
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1969_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1929_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Even in kindergarten, Sasha liked a girl. Therefore, he wanted to give her a
drawing and attract her attention.

As a drawing, he decided to draw a square grid of size n \times n , in which
some cells are colored. But coloring the cells is difficult, so he wants to
color as few cells as possible. But at the same time, he wants at least k
diagonals to have at least one colored cell. Note that the square grid of size
n \times n has a total of 4n - 2 diagonals.

Help little Sasha to make the girl fall in love with him and tell him the
minimum number of cells he needs to color.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 1000 ) — the number of test cases. The description of
the test cases follows.

The only line of each test case contains two integers n and k (2 \leq n \leq
10^8 , 1 \leq k \leq 4n - 2 ) — the size of the square grid and the minimum
number of diagonals in which there should be at least one colored cell.

Output

For each test case, output a single integer — the minimum number of cells that
need to be colored.

Example

Input

    7
    
    3 4
    
    3 3
    
    3 10
    
    3 9
    
    4 7
    
    7 11
    
    2 3

Output

    2
    2
    6
    5
    4
    6
    2
    
Note

In the pictures below, the colored cells are marked in black, and all
diagonals are marked in purple.

In the first test case, you can color 2 cells so that 4 diagonals contain at
least one colored cell:

![](https://espresso.codeforces.com/c88e80de5be4f91764dbe5bdc534c50fec115db3.png)

In the third test case, you can color 6 cells so that all 10 diagonals contain
at least one colored cell:

![](https://espresso.codeforces.com/624a36083689f6fb20bf243e5d1707fdcd71ef60.png)
DEBUG - Correctness: True
DEBUG - Start Task 1954_C
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You are given two integers x and y of the same length, consisting of digits
from 1 to 9 .

You can perform the following operation any number of times (possibly zero):
swap the i -th digit in x and the i -th digit in y .

For example, if x=73 and y=31 , you can swap the 2 -nd digits and get x=71 and
y=33 .

Your task is to maximize the product of x and y using the aforementioned
operation any number of times. If there are multiple answers, print any of
them.

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The first line of each test case contains a single integer x (1 \le x <
10^{100} ).

The second line of each test case contains a single integer y (1 \le y <
10^{100} ).

Additional constraint on input: the integers x and y consist only of digits
from 1 to 9 .

Output

For each test case, print two lines — the first line should contain the number
x after performing the operations; similarly, the second line should contain
the number y after performing the operations. If there are multiple answers,
print any of them.

Example

Input

    3
    
    73
    
    31
    
    2
    
    5
    
    3516
    
    3982

Output

    71
    33
    5
    2
    3912
    3586
DEBUG - Correctness: False
DEBUG - Start Task 1954_C
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You are given two integers x and y of the same length, consisting of digits
from 1 to 9 .

You can perform the following operation any number of times (possibly zero):
swap the i -th digit in x and the i -th digit in y .

For example, if x=73 and y=31 , you can swap the 2 -nd digits and get x=71 and
y=33 .

Your task is to maximize the product of x and y using the aforementioned
operation any number of times. If there are multiple answers, print any of
them.

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The first line of each test case contains a single integer x (1 \le x <
10^{100} ).

The second line of each test case contains a single integer y (1 \le y <
10^{100} ).

Additional constraint on input: the integers x and y consist only of digits
from 1 to 9 .

Output

For each test case, print two lines — the first line should contain the number
x after performing the operations; similarly, the second line should contain
the number y after performing the operations. If there are multiple answers,
print any of them.

Example

Input

    3
    
    73
    
    31
    
    2
    
    5
    
    3516
    
    3982

Output

    71
    33
    5
    2
    3912
    3586
DEBUG - Correctness: True
DEBUG - Start Task 1951_B
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1946_E
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Some permutation of length n is guessed.

You are given the indices of its prefix maximums and suffix maximums.

Recall that a permutation of length k is an array of size k such that each
integer from 1 to k occurs exactly once.

Prefix maximums are the elements that are the maximum on the prefix ending at
that element. More formally, the element a_i is a prefix maximum if a_i > a_j
for every j < i .

Similarly, suffix maximums are defined, the element a_i is a suffix maximum if
a_i > a_j for every j > i .

You need to output the number of different permutations that could have been
guessed.

As this number can be very large, output the answer modulo 10^9 + 7 .

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. Then follows the
description of the test cases.

The first line of each test case contains three integers n, m_1 and m_2 (1 \le
m_1, m_2 \le n \le 2 \cdot 10^5 ) — the length of the permutation, the number
of prefix maximums, and the number of suffix maximums, respectively.

The second line of each test case contains m_1 integers p_1 < p_2 < \ldots <
p_{m_1} (1 \le p_i \le n ) — the indices of the prefix maximums in increasing
order.

The third line of each test case contains m_2 integers s_1 < s_2 < \ldots <
s_{m_2} (1 \le s_i \le n ) — the indices of the suffix maximums in increasing
order.

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer on a separate line — the number of
suitable permutations modulo 10^9 + 7 .

Example

Input

    6
    
    1 1 1
    
    1
    
    1
    
    4 2 3
    
    1 2
    
    2 3 4
    
    3 3 1
    
    1 2 3
    
    3
    
    5 3 4
    
    1 2 3
    
    2 3 4 5
    
    20 5 4
    
    1 2 3 4 12
    
    12 13 18 20
    
    6 2 3
    
    1 3
    
    3 4 6

Output

    1
    3
    1
    0
    317580808
    10
    
Note

The following permutations are suitable for the second set of input data:

  * [1, 4, 3, 2] 
  * [2, 4, 3, 1] 
  * [3, 4, 2, 1] 

The following permutations are suitable for the sixth set of input data:

  * [2, 1, 6, 5, 3, 4] 
  * [3, 1, 6, 5, 2, 4] 
  * [3, 2, 6, 5, 1, 4] 
  * [4, 1, 6, 5, 2, 3] 
  * [4, 2, 6, 5, 1, 3] 
  * [4, 3, 6, 5, 1, 2] 
  * [5, 1, 6, 4, 2, 3] 
  * [5, 2, 6, 4, 1, 3] 
  * [5, 3, 6, 4, 1, 2] 
  * [5, 4, 6, 3, 1, 2]
DEBUG - Correctness: True
DEBUG - Start Task 1927_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Polycarp lost the string s of length n consisting of lowercase Latin letters,
but he still has its trace.

The trace of the string s is an array a of n integers, where a_i is the number
of such indices j (j < i ) that s_i=s_j . For example, the trace of the string
abracadabra is the array [0, 0, 0, 1, 0, 2, 0, 3, 1, 1, 4 ].

Given a trace of a string, find any string s from which it could have been
obtained. The string s should consist only of lowercase Latin letters a-z.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. Then the descriptions of the test cases follow.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ) — the length of the lost string.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (0
\le a_i < n ) — the trace of the string. It is guaranteed that for the given
trace, there exists a suitable string s .

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output a string s that corresponds to the given trace. If
there are multiple such strings s , then output any of them.

The string s should consist of lowercase Latin letters a-z.

It is guaranteed that for each test case, a valid answer exists.

Example

Input

    5
    
    11
    
    0 0 0 1 0 2 0 3 1 1 4
    
    10
    
    0 0 0 0 0 1 0 1 1 0
    
    1
    
    0
    
    8
    
    0 1 2 3 4 5 6 7
    
    8
    
    0 0 0 0 0 0 0 0

Output

    abracadabra
    codeforces
    a
    aaaaaaaa
    dijkstra
DEBUG - Correctness: True
DEBUG - Start Task 1927_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Polycarp lost the string s of length n consisting of lowercase Latin letters,
but he still has its trace.

The trace of the string s is an array a of n integers, where a_i is the number
of such indices j (j < i ) that s_i=s_j . For example, the trace of the string
abracadabra is the array [0, 0, 0, 1, 0, 2, 0, 3, 1, 1, 4 ].

Given a trace of a string, find any string s from which it could have been
obtained. The string s should consist only of lowercase Latin letters a-z.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. Then the descriptions of the test cases follow.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ) — the length of the lost string.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (0
\le a_i < n ) — the trace of the string. It is guaranteed that for the given
trace, there exists a suitable string s .

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output a string s that corresponds to the given trace. If
there are multiple such strings s , then output any of them.

The string s should consist of lowercase Latin letters a-z.

It is guaranteed that for each test case, a valid answer exists.

Example

Input

    5
    
    11
    
    0 0 0 1 0 2 0 3 1 1 4
    
    10
    
    0 0 0 0 0 1 0 1 1 0
    
    1
    
    0
    
    8
    
    0 1 2 3 4 5 6 7
    
    8
    
    0 0 0 0 0 0 0 0

Output

    abracadabra
    codeforces
    a
    aaaaaaaa
    dijkstra
DEBUG - Correctness: False
DEBUG - Start Task 1921_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: A square of positive (strictly greater than 0 ) area is located on the
coordinate plane, with sides parallel to the coordinate axes. You are given
the coordinates of its corners, in random order. Your task is to find the area
of the square.

Input

Each test consists of several testcases. The first line contains one integer t
(1 \le t \le 100 ) — the number of testcases. The following is a description
of the testcases.

Each testcase contains four lines, each line contains two integers x_i, y_i
(-1000\le x_i, y_i\le 1000 ), coordinates of the corners of the square.

It is guaranteed that there is a square with sides parallel to the coordinate
axes, with positive (strictly greater than 0 ) area, with corners in given
points.

Output

For each test case, print a single integer, the area of the square.

Example

Input

    3
    
    1 2
    
    4 5
    
    1 5
    
    4 2
    
    -1 1
    
    1 -1
    
    1 1
    
    -1 -1
    
    45 11
    
    45 39
    
    17 11
    
    17 39

Output

    9
    4
    784
DEBUG - Correctness: True
DEBUG - Start Task 1921_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: In order to test the hypothesis about the cats, the scientists must arrange
the cats in the boxes in a specific way. Of course, they would like to test
the hypothesis and publish a sensational article as quickly as possible,
because they are too engrossed in the next hypothesis about the phone's
battery charge.

Scientists have n boxes in which cats may or may not sit. Let the current
state of the boxes be denoted by the sequence b_1, \dots, b_n : b_i = 1 if
there is a cat in box number i , and b_i = 0 otherwise.

Fortunately, the unlimited production of cats has already been established, so
in one day, the scientists can perform one of the following operations:

  * Take a new cat and place it in a box (for some i such that b_i = 0 , assign b_i = 1 ). 
  * Remove a cat from a box and send it into retirement (for some i such that b_i = 1 , assign b_i = 0 ). 
  * Move a cat from one box to another (for some i, j such that b_i = 1, b_j = 0 , assign b_i = 0, b_j = 1 ). 

It has also been found that some boxes were immediately filled with cats.
Therefore, the scientists know the initial position of the cats in the boxes
s_1, \dots, s_n and the desired position f_1, \dots, f_n .

Due to the large amount of paperwork, the scientists do not have time to solve
this problem. Help them for the sake of science and indicate the minimum
number of days required to test the hypothesis.

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. This is followed by
descriptions of the test cases.

Each test case consists of three lines.

The first line of each test case contains a single integer n (1 \le n \le 10^5
) — the number of boxes.

The second line of each test case contains a string s of n characters, where
the i -th character is '1' if there is a cat in the i -th box and '0'
otherwise.

The third line of each test case contains a string f of n characters, where
the i -th character is '1' if there should be a cat in the i -th box and '0'
otherwise.

It is guaranteed that in a test the sum of n over all test cases does not
exceed 10^5 .

Output

For each test case, output a single integer on a separate line — the minimum
number of operations required to obtain the desired position from the initial
position. It can be shown that a solution always exists.

Example

Input

    6
    
    5
    
    10010
    
    00001
    
    1
    
    1
    
    1
    
    3
    
    000
    
    111
    
    4
    
    0101
    
    1010
    
    3
    
    100
    
    101
    
    8
    
    10011001
    
    11111110

Output

    2
    0
    3
    2
    1
    4
    
Note

In the first test case, you can first move the cat from the first box to the
fifth, and then remove the cat from the fourth box.

In the second test case, there is nothing to do — the only cat is already
sitting in the correct box.

In the third test case of input data, it takes three days to place a cat in
each box.
DEBUG - Correctness: False
DEBUG - Start Task 1921_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: In order to test the hypothesis about the cats, the scientists must arrange
the cats in the boxes in a specific way. Of course, they would like to test
the hypothesis and publish a sensational article as quickly as possible,
because they are too engrossed in the next hypothesis about the phone's
battery charge.

Scientists have n boxes in which cats may or may not sit. Let the current
state of the boxes be denoted by the sequence b_1, \dots, b_n : b_i = 1 if
there is a cat in box number i , and b_i = 0 otherwise.

Fortunately, the unlimited production of cats has already been established, so
in one day, the scientists can perform one of the following operations:

  * Take a new cat and place it in a box (for some i such that b_i = 0 , assign b_i = 1 ). 
  * Remove a cat from a box and send it into retirement (for some i such that b_i = 1 , assign b_i = 0 ). 
  * Move a cat from one box to another (for some i, j such that b_i = 1, b_j = 0 , assign b_i = 0, b_j = 1 ). 

It has also been found that some boxes were immediately filled with cats.
Therefore, the scientists know the initial position of the cats in the boxes
s_1, \dots, s_n and the desired position f_1, \dots, f_n .

Due to the large amount of paperwork, the scientists do not have time to solve
this problem. Help them for the sake of science and indicate the minimum
number of days required to test the hypothesis.

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. This is followed by
descriptions of the test cases.

Each test case consists of three lines.

The first line of each test case contains a single integer n (1 \le n \le 10^5
) — the number of boxes.

The second line of each test case contains a string s of n characters, where
the i -th character is '1' if there is a cat in the i -th box and '0'
otherwise.

The third line of each test case contains a string f of n characters, where
the i -th character is '1' if there should be a cat in the i -th box and '0'
otherwise.

It is guaranteed that in a test the sum of n over all test cases does not
exceed 10^5 .

Output

For each test case, output a single integer on a separate line — the minimum
number of operations required to obtain the desired position from the initial
position. It can be shown that a solution always exists.

Example

Input

    6
    
    5
    
    10010
    
    00001
    
    1
    
    1
    
    1
    
    3
    
    000
    
    111
    
    4
    
    0101
    
    1010
    
    3
    
    100
    
    101
    
    8
    
    10011001
    
    11111110

Output

    2
    0
    3
    2
    1
    4
    
Note

In the first test case, you can first move the cat from the first box to the
fifth, and then remove the cat from the fourth box.

In the second test case, there is nothing to do — the only cat is already
sitting in the correct box.

In the third test case of input data, it takes three days to place a cat in
each box.
DEBUG - Correctness: False
DEBUG - Start Task 1969_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1969_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1945_B
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1945_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: One of the days of the hike coincided with a holiday, so in the evening at the
camp, it was decided to arrange a festive fireworks display. For this purpose,
the organizers of the hike bought two installations for launching fireworks
and a huge number of shells for launching.

Both installations are turned on simultaneously. The first installation
launches fireworks every a minutes (i.e., after a, 2 \cdot a, 3 \cdot a, \dots
minutes after launch). The second installation launches fireworks every b
minutes (i.e., after b, 2 \cdot b, 3 \cdot b, \dots minutes after launch).

Each firework is visible in the sky for m + 1 minutes after launch, i.e., if a
firework was launched after x minutes after the installations were turned on,
it will be visible every minute from x to x + m , inclusive. If one firework
was launched m minutes after another, both fireworks will be visible for one
minute.

What is the maximum number of fireworks that could be seen in the sky at the
same time?

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. Then follow the
descriptions of the test cases.

The first and only line of each test case contains integers a , b , m (1 \le
a, b, m \le 10^{18} ) — the frequency of launching for the first installation,
the second installation, and the time the firework is visible in the sky.

Output

For each set of input data, output a single number — the maximum number of
fireworks that can be seen simultaneously.

Example

Input

    6
    
    6 7 4
    
    3 4 10
    
    7 8 56
    
    5 6 78123459896
    
    1 1 1
    
    1 1 1000000000000000000

Output

    2
    7
    17
    28645268630
    4
    2000000000000000002
    
Note

In the first set of input data, the fireworks are visible in the sky for 5
minutes. Since the first installation launches fireworks every 6 minutes, and
the second one every 7 minutes, two fireworks launched from the same
installation will not be visible in the sky at the same time. At the same
time, after 7 minutes from the start of the holiday, one firework from the
first and one from the second camp will be visible. Thus, it is possible to
see no more than 2 fireworks simultaneously.

In the third set of input data, 17 fireworks will be visible after 112
minutes:

  * 9 fireworks launched from the first installation at times [56, 63, 70, 77, 84, 91, 98, 105, 112 ]; 
  * 8 fireworks launched from the second installation at times [56, 64, 72, 80, 88, 96, 104, 112 ].
DEBUG - Correctness: False
DEBUG - Start Task 1956_C
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: The magical girl Nene has an n\times n matrix a filled with zeroes. The j -th
element of the i -th row of matrix a is denoted as a_{i, j} .

She can perform operations of the following two types with this matrix:

  * Type 1 operation: choose an integer i between 1 and n and a permutation p_1, p_2, \ldots, p_n of integers from 1 to n . Assign a_{i, j}:=p_j for all 1 \le j \le n simultaneously. 
  * Type 2 operation: choose an integer i between 1 and n and a permutation p_1, p_2, \ldots, p_n of integers from 1 to n . Assign a_{j, i}:=p_j for all 1 \le j \le n simultaneously. 

Nene wants to maximize the sum of all the numbers in the matrix
\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{n}a_{i,j} . She asks you to find the
way to perform the operations so that this sum is maximized. As she doesn't
want to make too many operations, you should provide a solution with no more
than 2n operations.

A permutation of length n is an array consisting of n distinct integers from 1
to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 500 ). The description of test cases follows.

The only line of each test case contains a single integer n (1 \le n \le 500 )
— the size of the matrix a .

It is guaranteed that the sum of n^2 over all test cases does not exceed 5
\cdot 10^5 .

Output

For each test case, in the first line output two integers s and m (0\leq m\leq
2n ) — the maximum sum of the numbers in the matrix and the number of
operations in your solution.

In the k -th of the next m lines output the description of the k -th
operation:

  * an integer c (c \in \\{1, 2\\} ) — the type of the k -th operation; 
  * an integer i (1 \le i \le n ) — the row or the column the k -th operation is applied to; 
  * a permutation p_1, p_2, \ldots, p_n of integers from 1 to n — the permutation used in the k -th operation. 

Note that you don't need to minimize the number of operations used, you only
should use no more than 2n operations. It can be shown that the maximum
possible sum can always be obtained in no more than 2n operations.

Example

Input

    2
    
    1
    
    2

Output

    1 1
    1 1 1
    7 3
    1 1 1 2
    1 2 1 2
    2 1 1 2
    
Note

In the first test case, the maximum sum s=1 can be obtained in 1 operation by
setting a_{1, 1}:=1 .

In the second test case, the maximum sum s=7 can be obtained in 3 operations
as follows:

![](https://espresso.codeforces.com/4074275900ed2b8a474fda5b3a628454fc521f8a.png)

It can be shown that it is impossible to make the sum of the numbers in the
matrix larger than 7 .
DEBUG - Correctness: False
DEBUG - Start Task 1945_D
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: The guys lined up in a queue of n people, starting with person number i = 1 ,
to ask Serafim the Owl about the meaning of life. Unfortunately, Kirill was
very busy writing the legend for this problem, so he arrived a little later
and stood at the end of the line after the n -th person. Kirill is completely
dissatisfied with this situation, so he decided to bribe some people ahead of
him.

For the i -th person in the queue, Kirill knows two values: a_i and b_i . If
at the moment Kirill is standing at position i , then he can choose any
position j such that j < i and exchange places with the person at position j .
In this case, Kirill will have to pay him a_j coins. And for each k such that
j < k < i , Kirill will have to pay b_k coins to the person at position k .
Kirill can perform this action any number of times.

Kirill is thrifty, so he wants to spend as few coins as possible, but he
doesn't want to wait too long, so Kirill believes he should be among the first
m people in line.

Help Kirill determine the minimum number of coins he will have to spend in
order to not wait too long.

Input

Each test consists of several sets of input data. The first line contains a
single integer t (1 \le t \le 10^4 ) — the number of test cases. Then follows
the description of the test case.

The first line of each test case contains two integers n and m (1 \le m \le n
\le 200\,000 ) — the number of people in the queue besides Kirill and the
maximum allowable final position of Kirill, respectively.

The second line contains n integers a_1, a_2, \dots, a_n separated by spaces
(1 \le a_i \le 10^9 ).

The third line contains n integers b_1, b_2, \dots, b_n separated by spaces (1
\le b_i \le 10^9 ).

It is guaranteed that the sum of the values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer — the minimum number of coins
Kirill needs to spend.

Example

Input

    4
    
    4 2
    
    7 3 6 9
    
    4 3 8 5
    
    6 2
    
    6 9 7 1 8 3
    
    5 8 8 1 4 1
    
    7 7
    
    7 2 9 2 6 5 9
    
    9 1 10 7 1 4 9
    
    2 1
    
    2 3
    
    1 1

Output

    14
    22
    9
    3
DEBUG - Correctness: True
DEBUG - Start Task 1937_D
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: There is a one-dimensional grid of length n . The i -th cell of the grid
contains a character s_i , which is either '<' or '>'.

When a pinball is placed on one of the cells, it moves according to the
following rules:

  * If the pinball is on the i -th cell and s_i is '<', the pinball moves one cell to the left in the next second. If s_i is '>', it moves one cell to the right. 
  * After the pinball has moved, the character s_i is inverted (i. e. if s_i used to be '<', it becomes '>', and vice versa). 
  * The pinball stops moving when it leaves the grid: either from the left border or from the right one. 

You need to answer n independent queries. In the i -th query, a pinball will
be placed on the i -th cell. Note that we always place a pinball on the
initial grid.

For each query, calculate how many seconds it takes the pinball to leave the
grid. It can be shown that the pinball will always leave the grid within a
finite number of steps.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 10^5 ). The description of the test cases follows.

The first line of each test case contains an integer n (1 \le n \le 5 \cdot
10^5 ).

The second line of each test case contains a string s_1s_2 \ldots s_{n} of
length n consisting of characters '<' and '>'.

It is guaranteed that the sum of n over all test cases does not exceed 5 \cdot
10^5 .

Output

For each test case, for each i (1 \le i \le n ) output the answer if a pinball
is initially placed on the i -th cell.

Example

Input

    3
    
    3
    
    ><<
    
    4
    
    <<<<
    
    6
    
    <><<<>

Output

    3 6 5 
    1 2 3 4 
    1 4 7 10 8 1 
    
Note

In the first test case, the movement of the pinball for i=1 is shown in the
following pictures. It takes the pinball 3 seconds to leave the grid.

![](https://espresso.codeforces.com/775b656d27e63ce8901e1ef80487972d536b4a54.png)

The movement of the pinball for i=2 is shown in the following pictures. It
takes the pinball 6 seconds to leave the grid.

![](https://espresso.codeforces.com/515bd5576868cf33d4190893928faa21e69dd5c7.png)
DEBUG - Correctness: False
DEBUG - Start Task 1937_D
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1937_D
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: There is a one-dimensional grid of length n . The i -th cell of the grid
contains a character s_i , which is either '<' or '>'.

When a pinball is placed on one of the cells, it moves according to the
following rules:

  * If the pinball is on the i -th cell and s_i is '<', the pinball moves one cell to the left in the next second. If s_i is '>', it moves one cell to the right. 
  * After the pinball has moved, the character s_i is inverted (i. e. if s_i used to be '<', it becomes '>', and vice versa). 
  * The pinball stops moving when it leaves the grid: either from the left border or from the right one. 

You need to answer n independent queries. In the i -th query, a pinball will
be placed on the i -th cell. Note that we always place a pinball on the
initial grid.

For each query, calculate how many seconds it takes the pinball to leave the
grid. It can be shown that the pinball will always leave the grid within a
finite number of steps.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 10^5 ). The description of the test cases follows.

The first line of each test case contains an integer n (1 \le n \le 5 \cdot
10^5 ).

The second line of each test case contains a string s_1s_2 \ldots s_{n} of
length n consisting of characters '<' and '>'.

It is guaranteed that the sum of n over all test cases does not exceed 5 \cdot
10^5 .

Output

For each test case, for each i (1 \le i \le n ) output the answer if a pinball
is initially placed on the i -th cell.

Example

Input

    3
    
    3
    
    ><<
    
    4
    
    <<<<
    
    6
    
    <><<<>

Output

    3 6 5 
    1 2 3 4 
    1 4 7 10 8 1 
    
Note

In the first test case, the movement of the pinball for i=1 is shown in the
following pictures. It takes the pinball 3 seconds to leave the grid.

![](https://espresso.codeforces.com/775b656d27e63ce8901e1ef80487972d536b4a54.png)

The movement of the pinball for i=2 is shown in the following pictures. It
takes the pinball 6 seconds to leave the grid.

![](https://espresso.codeforces.com/515bd5576868cf33d4190893928faa21e69dd5c7.png)
DEBUG - Correctness: False
DEBUG - Start Task 1972_D1
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.
DEBUG - Correctness: True
DEBUG - Start Task 1972_D1
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1966_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1966_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1951_E
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1945_E
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3
DEBUG - Correctness: True
DEBUG - Start Task 1945_E
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1945_E
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1980_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Vlad is planning to hold m rounds next month. Each round should contain one
problem of difficulty levels 'A', 'B', 'C', 'D', 'E', 'F', and 'G'.

Vlad already has a bank of n problems, where the i -th problem has a
difficulty level of a_i . There may not be enough of these problems, so he may
have to come up with a few more problems.

Vlad wants to come up with as few problems as possible, so he asks you to find
the minimum number of problems he needs to come up with in order to hold m
rounds.

For example, if m=1 , n = 10 , a= 'BGECDCBDED', then he needs to come up with
two problems: one of difficulty level 'A' and one of difficulty level 'F'.

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The first line of each test case contains two integers n and m (1 \le n \le 50
, 1 \le m \le 5 ) — the number of problems in the bank and the number of
upcoming rounds, respectively.

The second line of each test case contains a string a of n characters from 'A'
to 'G' — the difficulties of the problems in the bank.

Output

For each test case, output a single integer — the minimum number of problems
that need to come up with to hold m rounds.

Example

Input

    3
    
    10 1
    
    BGECDCBDED
    
    10 2
    
    BGECDCBDED
    
    9 1
    
    BBCDEFFGG

Output

    2
    5
    1
DEBUG - Correctness: True
DEBUG - Start Task 1920_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Alice and Bob are playing a game. They have an array a_1, a_2,\ldots,a_n . The
game consists of two steps:

  * First, Alice will remove at most k elements from the array. 
  * Second, Bob will multiply at most x elements of the array by -1 . 

Alice wants to maximize the sum of elements of the array while Bob wants to
minimize it. Find the sum of elements of the array after the game if both
players play optimally.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 10^4 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains three integers n , k , and x (1 \leq
n \leq 2 \cdot 10^5 , 1 \leq x,k \leq n ) — the number of elements in the
array, the limit on the number of elements of the array that Alice can remove,
and the limit on the number of elements of the array that Bob can multiply -1
to.

The second line of each test case contains n integers a_1, a_2,\ldots, a_n (1
\leq a_i \leq 1000 ) — the elements of the array.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output a single integer — the sum of elements of the array
after the game if both players play optimally.

Example

Input

    8
    
    1 1 1
    
    1
    
    4 1 1
    
    3 1 2 4
    
    6 6 3
    
    1 4 3 2 5 6
    
    6 6 1
    
    3 7 3 3 32 15
    
    8 5 3
    
    5 5 3 3 3 2 9 9
    
    10 6 4
    
    1 8 2 9 3 3 4 5 3 200
    
    2 2 1
    
    4 3
    
    2 1 2
    
    1 3

Output

    0
    2
    0
    3
    -5
    -9
    0
    -1
    
Note

In the first test case, it is optimal for Alice to remove the only element of
the array. Then, the sum of elements of the array is 0 after the game is over.

In the second test case, it is optimal for Alice to not remove any elements.
Bob will then multiply 4 by -1 . So the final sum of elements of the array is
3+1+2-4=2 .

In the fifth test case, it is optimal for Alice to remove 9, 9 . Bob will then
multiply 5, 5, 3 by -1 . So the final sum of elements of the array is
-5-5-3+3+3+2=-5 .
DEBUG - Correctness: False
DEBUG - Start Task 1920_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Alice and Bob are playing a game. They have an array a_1, a_2,\ldots,a_n . The
game consists of two steps:

  * First, Alice will remove at most k elements from the array. 
  * Second, Bob will multiply at most x elements of the array by -1 . 

Alice wants to maximize the sum of elements of the array while Bob wants to
minimize it. Find the sum of elements of the array after the game if both
players play optimally.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 10^4 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains three integers n , k , and x (1 \leq
n \leq 2 \cdot 10^5 , 1 \leq x,k \leq n ) — the number of elements in the
array, the limit on the number of elements of the array that Alice can remove,
and the limit on the number of elements of the array that Bob can multiply -1
to.

The second line of each test case contains n integers a_1, a_2,\ldots, a_n (1
\leq a_i \leq 1000 ) — the elements of the array.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output a single integer — the sum of elements of the array
after the game if both players play optimally.

Example

Input

    8
    
    1 1 1
    
    1
    
    4 1 1
    
    3 1 2 4
    
    6 6 3
    
    1 4 3 2 5 6
    
    6 6 1
    
    3 7 3 3 32 15
    
    8 5 3
    
    5 5 3 3 3 2 9 9
    
    10 6 4
    
    1 8 2 9 3 3 4 5 3 200
    
    2 2 1
    
    4 3
    
    2 1 2
    
    1 3

Output

    0
    2
    0
    3
    -5
    -9
    0
    -1
    
Note

In the first test case, it is optimal for Alice to remove the only element of
the array. Then, the sum of elements of the array is 0 after the game is over.

In the second test case, it is optimal for Alice to not remove any elements.
Bob will then multiply 4 by -1 . So the final sum of elements of the array is
3+1+2-4=2 .

In the fifth test case, it is optimal for Alice to remove 9, 9 . Bob will then
multiply 5, 5, 3 by -1 . So the final sum of elements of the array is
-5-5-3+3+3+2=-5 .
DEBUG - Correctness: False
DEBUG - Start Task 1920_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Alice and Bob are playing a game. They have an array a_1, a_2,\ldots,a_n . The
game consists of two steps:

  * First, Alice will remove at most k elements from the array. 
  * Second, Bob will multiply at most x elements of the array by -1 . 

Alice wants to maximize the sum of elements of the array while Bob wants to
minimize it. Find the sum of elements of the array after the game if both
players play optimally.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 10^4 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains three integers n , k , and x (1 \leq
n \leq 2 \cdot 10^5 , 1 \leq x,k \leq n ) — the number of elements in the
array, the limit on the number of elements of the array that Alice can remove,
and the limit on the number of elements of the array that Bob can multiply -1
to.

The second line of each test case contains n integers a_1, a_2,\ldots, a_n (1
\leq a_i \leq 1000 ) — the elements of the array.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output a single integer — the sum of elements of the array
after the game if both players play optimally.

Example

Input

    8
    
    1 1 1
    
    1
    
    4 1 1
    
    3 1 2 4
    
    6 6 3
    
    1 4 3 2 5 6
    
    6 6 1
    
    3 7 3 3 32 15
    
    8 5 3
    
    5 5 3 3 3 2 9 9
    
    10 6 4
    
    1 8 2 9 3 3 4 5 3 200
    
    2 2 1
    
    4 3
    
    2 1 2
    
    1 3

Output

    0
    2
    0
    3
    -5
    -9
    0
    -1
    
Note

In the first test case, it is optimal for Alice to remove the only element of
the array. Then, the sum of elements of the array is 0 after the game is over.

In the second test case, it is optimal for Alice to not remove any elements.
Bob will then multiply 4 by -1 . So the final sum of elements of the array is
3+1+2-4=2 .

In the fifth test case, it is optimal for Alice to remove 9, 9 . Bob will then
multiply 5, 5, 3 by -1 . So the final sum of elements of the array is
-5-5-3+3+3+2=-5 .
DEBUG - Correctness: True
DEBUG - Start Task 1948_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You are given an integer n .

Your task is to build a string of uppercase Latin letters. There must be
exactly n special characters in this string. Let's call a character special if
it is equal to exactly one of its neighbors.

For example, there are 6 special characters in the AAABAACC string (at
positions: 1 , 3 , 5 , 6 , 7 and 8 ).

Print any suitable string or report that there is no such string.

Input

The first line contains a single integer t (1 \le t \le 50 ) — the number of
test cases.

The only line of each test case contains a single integer n (1 \le n \le 50 ).

Output

For each test case, print the answer as follows:

  * if there is no suitable string, print one line containing the string NO; 
  * otherwise, print two lines. The first line should contain the string YES; on the second line print a string of length at most 200  — the answer itself (it can be shown that if some answers exist, then there is an answer of length at most 200 ). If there are several solutions, print any of them. 

Example

Input

    3
    
    6
    
    1
    
    2

Output

    YES
    AAABAACC
    NO
    YES
    MM
DEBUG - Correctness: False
DEBUG - Start Task 1921_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: In order to test the hypothesis about the cats, the scientists must arrange
the cats in the boxes in a specific way. Of course, they would like to test
the hypothesis and publish a sensational article as quickly as possible,
because they are too engrossed in the next hypothesis about the phone's
battery charge.

Scientists have n boxes in which cats may or may not sit. Let the current
state of the boxes be denoted by the sequence b_1, \dots, b_n : b_i = 1 if
there is a cat in box number i , and b_i = 0 otherwise.

Fortunately, the unlimited production of cats has already been established, so
in one day, the scientists can perform one of the following operations:

  * Take a new cat and place it in a box (for some i such that b_i = 0 , assign b_i = 1 ). 
  * Remove a cat from a box and send it into retirement (for some i such that b_i = 1 , assign b_i = 0 ). 
  * Move a cat from one box to another (for some i, j such that b_i = 1, b_j = 0 , assign b_i = 0, b_j = 1 ). 

It has also been found that some boxes were immediately filled with cats.
Therefore, the scientists know the initial position of the cats in the boxes
s_1, \dots, s_n and the desired position f_1, \dots, f_n .

Due to the large amount of paperwork, the scientists do not have time to solve
this problem. Help them for the sake of science and indicate the minimum
number of days required to test the hypothesis.

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. This is followed by
descriptions of the test cases.

Each test case consists of three lines.

The first line of each test case contains a single integer n (1 \le n \le 10^5
) — the number of boxes.

The second line of each test case contains a string s of n characters, where
the i -th character is '1' if there is a cat in the i -th box and '0'
otherwise.

The third line of each test case contains a string f of n characters, where
the i -th character is '1' if there should be a cat in the i -th box and '0'
otherwise.

It is guaranteed that in a test the sum of n over all test cases does not
exceed 10^5 .

Output

For each test case, output a single integer on a separate line — the minimum
number of operations required to obtain the desired position from the initial
position. It can be shown that a solution always exists.

Example

Input

    6
    
    5
    
    10010
    
    00001
    
    1
    
    1
    
    1
    
    3
    
    000
    
    111
    
    4
    
    0101
    
    1010
    
    3
    
    100
    
    101
    
    8
    
    10011001
    
    11111110

Output

    2
    0
    3
    2
    1
    4
    
Note

In the first test case, you can first move the cat from the first box to the
fifth, and then remove the cat from the fourth box.

In the second test case, there is nothing to do — the only cat is already
sitting in the correct box.

In the third test case of input data, it takes three days to place a cat in
each box.
DEBUG - Correctness: True
DEBUG - Start Task 1945_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: The organizing committee plans to take the participants of the Olympiad on a
hike after the tour. Currently, the number of tents needed to be taken is
being calculated. It is known that each tent can accommodate up to 3 people.

Among the participants, there are a introverts, b extroverts, and c
universals:

  * Each introvert wants to live in a tent alone. Thus, a tent with an introvert must contain exactly one person — only the introvert himself. 
  * Each extrovert wants to live in a tent with two others. Thus, the tent with an extrovert must contain exactly three people. 
  * Each universal is fine with any option (living alone, with one other person, or with two others). 

The organizing committee respects the wishes of each participant very much, so
they want to fulfill all of them.

Tell us the minimum number of tents needed to be taken so that all
participants can be accommodated according to their preferences. If it is
impossible to accommodate the participants in a way that fulfills all the
wishes, output -1 .

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. This is followed by
the descriptions of the test cases.

Each test case is described by a single line containing three integers a , b ,
c (0 \le a, b, c \le 10^9 ) — the number of introverts, extroverts, and
universals, respectively.

Output

For each test case, output a single integer — the minimum number of tents, or
-1 if it is impossible to accommodate the participants.

Example

Input

    10
    
    1 2 3
    
    1 4 1
    
    1 4 2
    
    1 1 1
    
    1 3 2
    
    19 7 18
    
    0 0 0
    
    7 0 0
    
    0 24 0
    
    1000000000 1000000000 1000000000

Output

    3
    -1
    3
    -1
    3
    28
    0
    7
    8
    1666666667
    
Note

In the first test case, 1 tent will be given to the introverts, 1 tent will be
shared by two extroverts and one universal, and the last tent will be shared
by two universals. In total, 3 tents are needed.

In the second test case, three extroverts will take 1 tent, and 1 tent will be
taken by an introvert. Then, one extrovert and one universal will be left.
This extrovert will not be able to live with two others.
DEBUG - Correctness: True
DEBUG - Start Task 1956_C
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1956_C
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1956_C
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1968_F
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1921_E
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1966_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1954_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Let's call an array a beautiful if you can make all its elements the same by
using the following operation an arbitrary number of times (possibly, zero):

  * choose an index i (2 \le i \le |a| - 1 ) such that a_{i - 1} = a_{i + 1} , and replace a_i with a_{i - 1} . 

You are given a beautiful array a_1, a_2, \dots, a_n . What is the minimum
number of elements you have to remove from it in order for it to stop being
beautiful? Swapping elements is prohibited. If it is impossible to do so, then
output -1.

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first line of each test case contains a single integer n (1 \le n \le 3
\cdot 10^5 ).

The second line contains n integers a_1, a_2, \dots, a_n (1 \le a_i \le n ).

Additional constraints on the input:

  * in every test case, the given array a is beautiful; 
  * the sum of n over all test cases does not exceed 3 \cdot 10^5 . 

Output

For each test case, output a single integer — the minimum number of elements
you have to remove from the array a in order for it to stop being beautiful.
If it is impossible, then output -1.

Example

Input

    4
    
    3
    
    2 2 2
    
    5
    
    1 2 1 2 1
    
    1
    
    1
    
    7
    
    3 3 3 5 3 3 3

Output

    -1
    1
    -1
    3
    
Note

In the first testcase, it is impossible to modify the array in such a way that
it stops being beautiful. An array consisting of identical numbers will remain
beautiful no matter how many numbers we remove from it.

In the second testcase, you can remove the number at the index 5 , for
example.

The resulting array will be [1, 2, 1, 2] . Let's check if it is beautiful. Two
operations are available:

  * Choose i = 2 : the array becomes [1, 1, 1, 2] . No more operations can be applied to it, and the numbers are not all the same. 
  * Choose i = 3 instead: the array becomes [1, 2, 2, 2] . No more operations can be applied to it either, and the numbers are still not all the same. 

Thus, the array [1, 2, 1, 2] is not beautiful.

In the fourth testcase, you can remove the first three elements, for example.
The resulting array [5, 3, 3, 3] is not beautiful.
DEBUG - Correctness: False
DEBUG - Start Task 1921_D
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Petya has an array a_i of n integers. His brother Vasya became envious and
decided to make his own array of n integers.

To do this, he found m integers b_i (m\ge n ), and now he wants to choose some
n integers of them and arrange them in a certain order to obtain an array c_i
of length n .

To avoid being similar to his brother, Vasya wants to make his array as
different as possible from Petya's array. Specifically, he wants the total
difference D = \sum_{i=1}^{n} |a_i - c_i| to be as large as possible.

Help Vasya find the maximum difference D he can obtain.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 100 ) — the number of test cases. This is followed by a
description of the test cases.

The first line of each test case contains two integers n and m (1\le n\le m\le
2 \cdot 10^5 ).

The second line of each test case contains n integers a_i (1\le a_i\le 10^9 ).
The third line of each test case contains m integers b_i (1\le b_i\le 10^9 ).

It is guaranteed that in a test, the sum of m over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer — the maximum total difference D
that can be obtained.

Example

Input

    9
    
    4 6
    
    6 1 2 4
    
    3 5 1 7 2 3
    
    3 4
    
    1 1 1
    
    1 1 1 1
    
    5 5
    
    1 2 3 4 5
    
    1 2 3 4 5
    
    2 6
    
    5 8
    
    8 7 5 8 2 10
    
    2 2
    
    4 1
    
    9 6
    
    4 6
    
    8 10 6 4
    
    3 10 6 1 8 9
    
    3 5
    
    6 5 2
    
    1 7 9 7 2
    
    5 5
    
    9 10 6 3 7
    
    5 9 2 3 9
    
    1 6
    
    3
    
    2 7 10 1 1 5

Output

    16
    0
    12
    11
    10
    23
    15
    25
    7
    
Note

In the first example, Vasya can, for example, create the array (1, 5, 7, 2) .
Then the total difference will be D = |6-1|+|1-5|+|2-7|+|4-2| = 5+4+5+2 = 16 .

In the second example, all the integers available to Vasya are equal to 1, so
he can only create the array (1, 1, 1) , for which the difference D = 0 .

In the third example, Vasya can, for example, create the array (5, 4, 3, 2, 1)
. Then the total difference will be D = |1-5|+|2-4|+|3-3|+|4-2|+|5-1| =
4+2+0+2+4 = 12 .
DEBUG - Correctness: True
DEBUG - Start Task 1968_F
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1925_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You are given two positive integers n and k .

Your task is to find a string s such that all possible strings of length n
that can be formed using the first k lowercase English alphabets occur as a
subsequence of s .

If there are multiple answers, print the one with the smallest length. If
there are still multiple answers, you may print any of them.

Note: A string a is called a subsequence of another string b if a can be
obtained by deleting some (possibly zero) characters from b without changing
the order of the remaining characters.

Input

The first line of input contains a single integer t (1\leq t\leq 676 )
denoting the number of test cases.

Each test case consists of a single line of input containing two integers n
(1\leq n\leq 26 ) and k (1\leq k\leq 26 ).

Output

For each test case, print a single line containing a single string s which
satisfies the above property. If there are multiple answers, print the one
with the smallest length. If there are still multiple answers, you may print
any of them.

Example

Input

    4
    
    1 2
    
    2 1
    
    2 2
    
    2 3

Output

    ab
    aa
    baab
    abcbac
    
Note

For the first test case, there are two strings of length 1 which can be formed
using the first 2 lowercase English alphabets, and they are present in s as a
subsequence as follows:

  * \texttt{a}: {\color{red}{\texttt{a}}}\texttt{b} 
  * \texttt{b}: \texttt{a}{\color{red}{\texttt{b}}} 

For the second test case, there is only one string of length 2 which can be
formed using the first lowercase English alphabet, and it is present in s as a
subsequence as follows:

  * \texttt{aa}: {\color{red}{\texttt{aa}}} 

For the third test case, there are 4 strings of length 2 which can be formed
using the first 2 lowercase English alphabets, and they are present in s as a
subsequence as follows:

  * \texttt{aa}: \texttt{b}{\color{red}{\texttt{aa}}}\texttt{b} 
  * \texttt{ab}: \texttt{ba}{\color{red}{\texttt{ab}}} 
  * \texttt{ba}: {\color{red}{\texttt{ba}}}\texttt{ab} 
  * \texttt{bb}: {\color{red}{\texttt{b}}}\texttt{aa}{\color{red}{\texttt{b}}} 

For the fourth test case, there are 9 strings of length 2 which can be formed
using the first 3 lowercase English alphabets, and they are present in s as a
subsequence as follows:

  * \texttt{aa}: {\color{red}{\texttt{a}}}\texttt{bcb}{\color{red}{\texttt{a}}}\texttt{c} 
  * \texttt{ab}: {\color{red}{\texttt{ab}}}\texttt{cbac} 
  * \texttt{ac}: \texttt{abcb}{\color{red}{\texttt{ac}}} 
  * \texttt{ba}: \texttt{abc}{\color{red}{\texttt{ba}}}\texttt{c} 
  * \texttt{bb}: \texttt{a}{\color{red}{\texttt{b}}}\texttt{c}{\color{red}{\texttt{b}}}\texttt{ac} 
  * \texttt{bc}: \texttt{a}{\color{red}{\texttt{bc}}}\texttt{bac} 
  * \texttt{ca}: \texttt{ab}{\color{red}{\texttt{c}}}\texttt{b}{\color{red}{\texttt{a}}}\texttt{c} 
  * \texttt{cb}: \texttt{ab}{\color{red}{\texttt{cb}}}\texttt{ac} 
  * \texttt{cc}: \texttt{ab}{\color{red}{\texttt{c}}}\texttt{ba}{\color{red}{\texttt{c}}}
DEBUG - Correctness: False
DEBUG - Start Task 1970_C1
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1970_C1
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: This is the easy version of the problem. The difference in this version is
that t=1 and we work on an array-like tree.

Ron and Hermione are playing a game on a tree of n nodes that are initially
inactive. This tree is special because it has exactly two leaves. It can thus
be seen as an array. The game consists of t rounds, each of which starts with
a stone on exactly one node, which is considered as activated. A move consists
of picking an inactive neighbor of the node with a stone on it and moving the
stone there (thus activating this neighbor). Ron makes the first move, after
which he alternates with Hermione until no valid move is available. The player
that cannot make a move loses the round. If both players play optimally, who
wins each round of this game?

Note that all the rounds are played with the same tree; only the starting node
changes. Moreover, after each round, all active nodes are considered inactive
again.

Input

The first line contains integers n (2 \leq n \leq 2\times 10^5 ), t (t=1 ),
the number of nodes in the tree and the number of rounds, respectively.

The next n-1 lines contain two integers 1 \leq u, v \leq n each, corresponding
to an edge of the tree. It is guaranteed that the tree has exactly two leaves.

The next line contains t integers 1 \leq u_1 , \dots, u_t \leq n ,
corresponding to the node where the stone is initially put.

Output

The output consists of t=1 line which is either "Ron" or "Hermione".

Examples

Input

    3 1
    
    2 3
    
    3 1
    
    3

Output

    Ron
    
Input

    5 1
    
    1 2
    
    2 3
    
    3 4
    
    4 5
    
    5

Output

    Hermione
DEBUG - Correctness: False
DEBUG - Start Task 1921_D
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1967_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1967_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1972_D1
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: The two versions are different problems. You may want to read both versions.
You can make hacks only if both versions are solved.

You are given two positive integers n , m .

Calculate the number of ordered pairs (a, b) satisfying the following
conditions:

  * 1\le a\le n , 1\le b\le m ; 
  * a+b is a multiple of b \cdot \gcd(a,b) . 

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 10^4 ). The description of the test cases follows.

The first line of each test case contains two integers n , m (1\le n,m\le 2
\cdot 10^6 ).

It is guaranteed that neither the sum of n nor the sum of m over all test
cases exceeds 2 \cdot 10^6 .

Output

For each test case, print a single integer: the number of valid pairs.

Example

Input

    6
    
    1 1
    
    2 3
    
    3 5
    
    10 8
    
    100 1233
    
    1000000 1145141

Output

    1
    3
    4
    14
    153
    1643498
    
Note

In the first test case, only (1,1) satisfies the conditions.

In the fourth test case,
(1,1),(2,1),(2,2),(3,1),(4,1),(5,1),(6,1),(6,2),(6,3),(7,1),(8,1),(9,1),(10,1),(10,2)
satisfy the conditions.
DEBUG - Correctness: True
DEBUG - Start Task 1931_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: There are n containers of water lined up, numbered from left to right from 1
to n . Each container can hold any amount of water; initially, the i -th
container contains a_i units of water. The sum of a_i is divisible by n .

You can apply the following operation any (possibly zero) number of times:
pour any amount of water from the i -th container to the j -th container,
where i must be less than j (i.e. i<j ). Any index can be chosen as i or j any
number of times.

Determine whether it is possible to make the amount of water in all containers
the same using this operation.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. Then the descriptions of the test cases follow.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ) — the number of containers with water.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (0
\le a_i \le 10^9 ) — the amounts of water in the containers. It is guaranteed
that the sum of a_i in each test case does not exceed 2 \cdot 10^9 . Also, the
sum of a_i is divisible by n .

It is guaranteed that the sum of n over all test cases in the input does not
exceed 2 \cdot 10^5 .

Output

Output t lines, each of which is the answer to the corresponding test case. As
the answer, output "YES" if it is possible to make the amount of water in all
containers the same using the described operation. Otherwise, output "NO".

You can output each letter in any case (lowercase or uppercase). For example,
the strings "yEs", "yes", "Yes", and "YES" will be accepted as a positive
answer.

Example

Input

    6
    
    1
    
    43
    
    2
    
    1 3
    
    5
    
    4 5 2 1 3
    
    3
    
    1 2 3
    
    7
    
    4 5 5 0 6 4 4
    
    7
    
    6 5 5 1 3 4 4

Output

    YES
    NO
    YES
    NO
    NO
    YES
    
Note

In the third test case of the example (a=[4, 5, 2, 1, 3] ), you can proceed as
follows:

  * pour 1 unit of water from the first vessel to the fourth, then a=[3, 5, 2, 2, 3] ; 
  * pour 1 unit of water from the second vessel to the third, then a=[3, 4, 3, 2, 3] ; 
  * pour 1 unit of water from the second vessel to the fourth, then a=[3, 3, 3, 3, 3] .
DEBUG - Correctness: True
DEBUG - Start Task 1931_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: There are n containers of water lined up, numbered from left to right from 1
to n . Each container can hold any amount of water; initially, the i -th
container contains a_i units of water. The sum of a_i is divisible by n .

You can apply the following operation any (possibly zero) number of times:
pour any amount of water from the i -th container to the j -th container,
where i must be less than j (i.e. i<j ). Any index can be chosen as i or j any
number of times.

Determine whether it is possible to make the amount of water in all containers
the same using this operation.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. Then the descriptions of the test cases follow.

The first line of each test case contains a single integer n (1 \le n \le 2
\cdot 10^5 ) — the number of containers with water.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (0
\le a_i \le 10^9 ) — the amounts of water in the containers. It is guaranteed
that the sum of a_i in each test case does not exceed 2 \cdot 10^9 . Also, the
sum of a_i is divisible by n .

It is guaranteed that the sum of n over all test cases in the input does not
exceed 2 \cdot 10^5 .

Output

Output t lines, each of which is the answer to the corresponding test case. As
the answer, output "YES" if it is possible to make the amount of water in all
containers the same using the described operation. Otherwise, output "NO".

You can output each letter in any case (lowercase or uppercase). For example,
the strings "yEs", "yes", "Yes", and "YES" will be accepted as a positive
answer.

Example

Input

    6
    
    1
    
    43
    
    2
    
    1 3
    
    5
    
    4 5 2 1 3
    
    3
    
    1 2 3
    
    7
    
    4 5 5 0 6 4 4
    
    7
    
    6 5 5 1 3 4 4

Output

    YES
    NO
    YES
    NO
    NO
    YES
    
Note

In the third test case of the example (a=[4, 5, 2, 1, 3] ), you can proceed as
follows:

  * pour 1 unit of water from the first vessel to the fourth, then a=[3, 5, 2, 2, 3] ; 
  * pour 1 unit of water from the second vessel to the third, then a=[3, 4, 3, 2, 3] ; 
  * pour 1 unit of water from the second vessel to the fourth, then a=[3, 3, 3, 3, 3] .
DEBUG - Correctness: True
DEBUG - Start Task 1942_C1
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: [Proof Geometric Construction Can Solve All Love Affairs -
manbo-p](https://soundcloud.com/alice-law-314125270/manbo-p-proof-geometric-
construction-can-solve-all-love-affairs)

⠀

This is the easy version of the problem. The only difference between the two
versions is the constraint on y . In this version y = 0 . You can make hacks
only if both versions are solved.

Bessie has received a birthday cake from her best friend Elsie, and it came in
the form of a regular polygon with n sides. The vertices of the cake are
numbered from 1 to n clockwise. You and Bessie are going to choose some of
those vertices to cut non-intersecting diagonals into the cake. In other
words, the endpoints of the diagonals must be part of the chosen vertices.

Bessie would only like to give out pieces of cake which result in a triangle
to keep consistency. The size of the pieces doesn't matter, and the whole cake
does not have to be separated into all triangles (other shapes are allowed in
the cake, but those will not be counted).

Bessie has already chosen x of those vertices that can be used to form
diagonals. She wants you to choose no more than y other vertices such that the
number of triangular pieces of cake she can give out is maximized.

What is the maximum number of triangular pieces of cake Bessie can give out?

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case consists of three integers, n , x , and y (4
\leq n \leq 10^9 , 2 \leq x \leq \min(n, 2 \cdot 10^5) , y = 0 ) — the number
of sides of the polygon, number of vertices Bessie has chosen, and the maximum
number of other vertices you can choose.

The second line consists of x distinct integers from 1 to n , representing the
vertices Bessie has chosen.

It is guaranteed the sum of x over all test cases does not exceed 2 \cdot 10^5
.

Output

For each test case, output a single integer: the maximum number of non-
intersecting triangular pieces of cake she can give out.

Example

Input

    3
    
    8 4 0
    
    1 6 2 5
    
    8 8 0
    
    1 3 2 5 4 6 7 8
    
    4 2 0
    
    1 3

Output

    2
    6
    2
    
Note

In test cases 1 , 2 and 3 , you can get 2 , 6 and 2 non-intersecting
triangular pieces of cake, respectively. A possible construction is shown in
the following pictures:

The green dots represent vertices that can be used, the blue lines represent
diagonals that are drawn, and the red numbers represent triangles that are
counted.

![](https://espresso.codeforces.com/80282d636b83d4002ec89755d465b4adb37b9cfb.png)
DEBUG - Correctness: True
DEBUG - Start Task 1942_C1
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: [Proof Geometric Construction Can Solve All Love Affairs -
manbo-p](https://soundcloud.com/alice-law-314125270/manbo-p-proof-geometric-
construction-can-solve-all-love-affairs)

⠀

This is the easy version of the problem. The only difference between the two
versions is the constraint on y . In this version y = 0 . You can make hacks
only if both versions are solved.

Bessie has received a birthday cake from her best friend Elsie, and it came in
the form of a regular polygon with n sides. The vertices of the cake are
numbered from 1 to n clockwise. You and Bessie are going to choose some of
those vertices to cut non-intersecting diagonals into the cake. In other
words, the endpoints of the diagonals must be part of the chosen vertices.

Bessie would only like to give out pieces of cake which result in a triangle
to keep consistency. The size of the pieces doesn't matter, and the whole cake
does not have to be separated into all triangles (other shapes are allowed in
the cake, but those will not be counted).

Bessie has already chosen x of those vertices that can be used to form
diagonals. She wants you to choose no more than y other vertices such that the
number of triangular pieces of cake she can give out is maximized.

What is the maximum number of triangular pieces of cake Bessie can give out?

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case consists of three integers, n , x , and y (4
\leq n \leq 10^9 , 2 \leq x \leq \min(n, 2 \cdot 10^5) , y = 0 ) — the number
of sides of the polygon, number of vertices Bessie has chosen, and the maximum
number of other vertices you can choose.

The second line consists of x distinct integers from 1 to n , representing the
vertices Bessie has chosen.

It is guaranteed the sum of x over all test cases does not exceed 2 \cdot 10^5
.

Output

For each test case, output a single integer: the maximum number of non-
intersecting triangular pieces of cake she can give out.

Example

Input

    3
    
    8 4 0
    
    1 6 2 5
    
    8 8 0
    
    1 3 2 5 4 6 7 8
    
    4 2 0
    
    1 3

Output

    2
    6
    2
    
Note

In test cases 1 , 2 and 3 , you can get 2 , 6 and 2 non-intersecting
triangular pieces of cake, respectively. A possible construction is shown in
the following pictures:

The green dots represent vertices that can be used, the blue lines represent
diagonals that are drawn, and the red numbers represent triangles that are
counted.

![](https://espresso.codeforces.com/80282d636b83d4002ec89755d465b4adb37b9cfb.png)
DEBUG - Correctness: True
DEBUG - Start Task 1920_B
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1946_C
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1973_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Three friends gathered to play a few games of chess together.

In every game, two of them play against each other. The winner gets 2 points
while the loser gets 0 , and in case of a draw, both players get 1 point each.
Note that the same pair of players could have played any non-negative number
of times (possibly zero). It is also possible that no games were played at
all.

You've been told that their scores after all the games were played were p_1 ,
p_2 and p_3 . Additionally, it is guaranteed that p_1 \leq p_2 \leq p_3 holds.

Find the maximum number of draws that could have happened and print it. If
there isn't any way to obtain p_1 , p_2 and p_3 as a result of a non-negative
number of games between the three players, print -1 instead.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 500 ). The description of the test cases follows.

The first line of each test case contains three integers p_1 , p_2 and p_3 (0
\leq p_1 \leq p_2 \leq p_3 \leq 30 ) — the scores of the three players, sorted
non-decreasingly.

Output

For each testcase, print one number — the maximum possible number of draws
that could've happened, or -1 if the scores aren't consistent with any valid
set of games and results.

Example

Input

    7
    
    0 0 0
    
    0 1 1
    
    1 1 1
    
    1 1 2
    
    3 3 3
    
    3 4 5
    
    1 1 10

Output

    0
    1
    -1
    2
    -1
    6
    2
    
Note

In the first example, no games were played at all, so no draws could occur
either.

For the second example, exactly one game occurred between the second and the
third player and it ended in draw, so the answer is 1 .

It's easy to see that there's no set of games achieving the scores in third
example, so the answer for it is -1 .
DEBUG - Correctness: True
DEBUG - Start Task 1973_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Three friends gathered to play a few games of chess together.

In every game, two of them play against each other. The winner gets 2 points
while the loser gets 0 , and in case of a draw, both players get 1 point each.
Note that the same pair of players could have played any non-negative number
of times (possibly zero). It is also possible that no games were played at
all.

You've been told that their scores after all the games were played were p_1 ,
p_2 and p_3 . Additionally, it is guaranteed that p_1 \leq p_2 \leq p_3 holds.

Find the maximum number of draws that could have happened and print it. If
there isn't any way to obtain p_1 , p_2 and p_3 as a result of a non-negative
number of games between the three players, print -1 instead.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 500 ). The description of the test cases follows.

The first line of each test case contains three integers p_1 , p_2 and p_3 (0
\leq p_1 \leq p_2 \leq p_3 \leq 30 ) — the scores of the three players, sorted
non-decreasingly.

Output

For each testcase, print one number — the maximum possible number of draws
that could've happened, or -1 if the scores aren't consistent with any valid
set of games and results.

Example

Input

    7
    
    0 0 0
    
    0 1 1
    
    1 1 1
    
    1 1 2
    
    3 3 3
    
    3 4 5
    
    1 1 10

Output

    0
    1
    -1
    2
    -1
    6
    2
    
Note

In the first example, no games were played at all, so no draws could occur
either.

For the second example, exactly one game occurred between the second and the
third player and it ended in draw, so the answer is 1 .

It's easy to see that there's no set of games achieving the scores in third
example, so the answer for it is -1 .
DEBUG - Correctness: True
DEBUG - Start Task 1922_E
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1
DEBUG - Correctness: False
DEBUG - Start Task 1922_E
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1922_E
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1931_C
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1973_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1949_I
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1949_I
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You are given n disks in the plane. The center of each disk has integer
coordinates, and the radius of each disk is a positive integer. No two disks
overlap in a region of positive area, but it is possible for disks to be
tangent to each other.

Your task is to determine whether it is possible to change the radii of the
disks in such a way that:

  * Disks that were tangent to each other remain tangent to each other. 
  * No two disks overlap in a region of positive area. 
  * The sum of all radii strictly decreases. 

The new radii are allowed to be arbitrary positive real numbers. The centers
of the disks cannot be changed.

Input

The first line contains an integer n (1\le n \le 1000 ) — the number of disks.

The next n lines contain three integers each. The i -th of such lines contains
x_i , y_i (-10^9 \leq x_i, y_i \leq 10^9 ), and r_i (1 \leq r_i \leq 10^9 ) —
the coordinates of the center, and the radius, of the i -th disk.

Output

Print \texttt{YES} if it is possible to change the radii in the desired
manner. Otherwise, print \texttt{NO} .

Examples

Input

    5
    
    0 2 1
    
    0 0 1
    
    4 -3 4
    
    11 0 3
    
    11 5 2

Output

    YES
    
Input

    4
    
    2 2 2
    
    7 2 3
    
    7 7 2
    
    2 7 3

Output

    NO
    
Note

In the first sample, one can decrease the radii of the first and third disk by
0.5 , and increase the radius of the second disk by 0.5 . This way, the sum of
all radii decreases by 0.5 . The situation before and after changing the radii
is depicted below.

![](https://espresso.codeforces.com/4b45c054d9d982f08b53794399aa5b89a9ee57cf.png)
First sample (left) and a valid way to change the radii of the disks (right).

In the second sample, depicted below, there is no way to change the radii of
the disks in the desired manner.

![](https://espresso.codeforces.com/b7f2e5711b726197f87b2e05ff5d4d5d6e77ee50.png)
Second sample.
DEBUG - Correctness: False
DEBUG - Start Task 1949_I
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You are given n disks in the plane. The center of each disk has integer
coordinates, and the radius of each disk is a positive integer. No two disks
overlap in a region of positive area, but it is possible for disks to be
tangent to each other.

Your task is to determine whether it is possible to change the radii of the
disks in such a way that:

  * Disks that were tangent to each other remain tangent to each other. 
  * No two disks overlap in a region of positive area. 
  * The sum of all radii strictly decreases. 

The new radii are allowed to be arbitrary positive real numbers. The centers
of the disks cannot be changed.

Input

The first line contains an integer n (1\le n \le 1000 ) — the number of disks.

The next n lines contain three integers each. The i -th of such lines contains
x_i , y_i (-10^9 \leq x_i, y_i \leq 10^9 ), and r_i (1 \leq r_i \leq 10^9 ) —
the coordinates of the center, and the radius, of the i -th disk.

Output

Print \texttt{YES} if it is possible to change the radii in the desired
manner. Otherwise, print \texttt{NO} .

Examples

Input

    5
    
    0 2 1
    
    0 0 1
    
    4 -3 4
    
    11 0 3
    
    11 5 2

Output

    YES
    
Input

    4
    
    2 2 2
    
    7 2 3
    
    7 7 2
    
    2 7 3

Output

    NO
    
Note

In the first sample, one can decrease the radii of the first and third disk by
0.5 , and increase the radius of the second disk by 0.5 . This way, the sum of
all radii decreases by 0.5 . The situation before and after changing the radii
is depicted below.

![](https://espresso.codeforces.com/4b45c054d9d982f08b53794399aa5b89a9ee57cf.png)
First sample (left) and a valid way to change the radii of the disks (right).

In the second sample, depicted below, there is no way to change the radii of
the disks in the desired manner.

![](https://espresso.codeforces.com/b7f2e5711b726197f87b2e05ff5d4d5d6e77ee50.png)
Second sample.
DEBUG - Correctness: False
DEBUG - Start Task 1942_C2
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: [Proof Geometric Construction Can Solve All Love Affairs -
manbo-p](https://soundcloud.com/alice-law-314125270/manbo-p-proof-geometric-
construction-can-solve-all-love-affairs)

⠀

This is the hard version of the problem. The only difference between the two
versions is the constraint on y . In this version 0 \leq y \leq n - x . You
can make hacks only if both versions are solved.

Bessie has received a birthday cake from her best friend Elsie, and it came in
the form of a regular polygon with n sides. The vertices of the cake are
numbered from 1 to n clockwise. You and Bessie are going to choose some of
those vertices to cut non-intersecting diagonals into the cake. In other
words, the endpoints of the diagonals must be part of the chosen vertices.

Bessie would only like to give out pieces of cake which result in a triangle
to keep consistency. The size of the pieces doesn't matter, and the whole cake
does not have to be separated into all triangles (other shapes are allowed in
the cake, but those will not be counted).

Bessie has already chosen x of those vertices that can be used to form
diagonals. She wants you to choose no more than y other vertices such that the
number of triangular pieces of cake she can give out is maximized.

What is the maximum number of triangular pieces of cake Bessie can give out?

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case consists of three integers, n , x , and y (4
\leq n \leq 10^9 , 2 \leq x \leq \min(n, 2 \cdot 10^5) , 0 \leq y \leq n - x )
— the number of sides of the polygon, number of vertices Bessie has chosen,
and the maximum number of other vertices you can choose.

The second line consists of x distinct integers from 1 to n , representing the
vertices Bessie has chosen.

It is guaranteed the sum of x over all test cases does not exceed 2 \cdot 10^5
.

Output

For each test case, output a single integer: the maximum number of non-
intersecting triangular pieces of cake she can give out.

Example

Input

    3
    
    8 4 2
    
    1 6 2 5
    
    7 3 1
    
    6 4 3
    
    4 2 2
    
    1 3

Output

    6
    5
    2
    
Note

In test cases 1 , 2 and 3 , you can get 6 , 5 and 2 non-intersecting
triangular pieces of cake, respectively. A possible construction is shown in
the following pictures:

The green dots represent vertices that Bessie chose, the yellow dots represent
vertices that you chose, the blue lines represent diagonals that are drawn,
and the red numbers represent triangles that are counted.

![](https://espresso.codeforces.com/13b28beb7f5f0d100798f357f58c804c5314c869.png)
DEBUG - Correctness: True
DEBUG - Start Task 1928_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Bob has a rectangle of size a \times b . He tries to cut this rectangle into
two rectangles with integer sides by making a cut parallel to one of the sides
of the original rectangle. Then Bob tries to form some other rectangle from
the two resulting rectangles, and he can rotate and move these two rectangles
as he wishes.

Note that if two rectangles differ only by a 90^{\circ} rotation, they are
considered the same. For example, the rectangles 6 \times 4 and 4 \times 6 are
considered the same.

Thus, from the 2 \times 6 rectangle, another rectangle can be formed, because
it can be cut into two 2 \times 3 rectangles, and then these two rectangles
can be used to form the 4 \times 3 rectangle, which is different from the 2
\times 6 rectangle.

![](https://espresso.codeforces.com/670958570876245598e151e6877e3b0231a7c60e.png)

However, from the 2 \times 1 rectangle, another rectangle cannot be formed,
because it can only be cut into two rectangles of 1 \times 1 , and from these,
only the 1 \times 2 and 2 \times 1 rectangles can be formed, which are
considered the same.

![](https://espresso.codeforces.com/1463aaa4fa7eb1e7432c1d8b5813e7ae91147066.png)

Help Bob determine if he can obtain some other rectangle, or if he is just
wasting his time.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \leq t \leq 10^4 ) — the number of test cases. This is followed
by the description of the test cases.

The single line of each test case contains two integers a and b (1 \le a, b
\le 10^9 ) — the size of Bob's rectangle.

Output

For each test case, output "Yes" if Bob can obtain another rectangle from the
a \times b rectangle. Otherwise, output "No".

You can output the answer in any case (upper or lower). For example, the
strings "yEs", "yes", "Yes", and "YES" will be recognized as positive answers.

Example

Input

    7
    
    1 1
    
    2 1
    
    2 6
    
    3 2
    
    2 2
    
    2 4
    
    6 3

Output

    No
    No
    Yes
    Yes
    Yes
    Yes
    No
    
Note

In the first test case, the 1 \times 1 rectangle cannot be cut into two
rectangles, so another rectangle cannot be obtained from it.

In the fourth test case, the 3 \times 2 rectangle can be cut into two 3 \times
1 rectangles, and from these, the 1 \times 6 rectangle can be formed.

In the fifth test case, the 2 \times 2 rectangle can be cut into two 1 \times
2 rectangles, and from these, the 1 \times 4 rectangle can be formed.
DEBUG - Correctness: False
DEBUG - Start Task 1956_C
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: The magical girl Nene has an n\times n matrix a filled with zeroes. The j -th
element of the i -th row of matrix a is denoted as a_{i, j} .

She can perform operations of the following two types with this matrix:

  * Type 1 operation: choose an integer i between 1 and n and a permutation p_1, p_2, \ldots, p_n of integers from 1 to n . Assign a_{i, j}:=p_j for all 1 \le j \le n simultaneously. 
  * Type 2 operation: choose an integer i between 1 and n and a permutation p_1, p_2, \ldots, p_n of integers from 1 to n . Assign a_{j, i}:=p_j for all 1 \le j \le n simultaneously. 

Nene wants to maximize the sum of all the numbers in the matrix
\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{n}a_{i,j} . She asks you to find the
way to perform the operations so that this sum is maximized. As she doesn't
want to make too many operations, you should provide a solution with no more
than 2n operations.

A permutation of length n is an array consisting of n distinct integers from 1
to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 500 ). The description of test cases follows.

The only line of each test case contains a single integer n (1 \le n \le 500 )
— the size of the matrix a .

It is guaranteed that the sum of n^2 over all test cases does not exceed 5
\cdot 10^5 .

Output

For each test case, in the first line output two integers s and m (0\leq m\leq
2n ) — the maximum sum of the numbers in the matrix and the number of
operations in your solution.

In the k -th of the next m lines output the description of the k -th
operation:

  * an integer c (c \in \\{1, 2\\} ) — the type of the k -th operation; 
  * an integer i (1 \le i \le n ) — the row or the column the k -th operation is applied to; 
  * a permutation p_1, p_2, \ldots, p_n of integers from 1 to n — the permutation used in the k -th operation. 

Note that you don't need to minimize the number of operations used, you only
should use no more than 2n operations. It can be shown that the maximum
possible sum can always be obtained in no more than 2n operations.

Example

Input

    2
    
    1
    
    2

Output

    1 1
    1 1 1
    7 3
    1 1 1 2
    1 2 1 2
    2 1 1 2
    
Note

In the first test case, the maximum sum s=1 can be obtained in 1 operation by
setting a_{1, 1}:=1 .

In the second test case, the maximum sum s=7 can be obtained in 3 operations
as follows:

![](https://espresso.codeforces.com/4074275900ed2b8a474fda5b3a628454fc521f8a.png)

It can be shown that it is impossible to make the sum of the numbers in the
matrix larger than 7 .
DEBUG - Correctness: False
DEBUG - Start Task 1956_C
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1968_D
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1968_D
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Bodya and Sasha found a permutation p_1,\dots,p_n and an array a_1,\dots,a_n .
They decided to play a well-known "Permutation game".

A permutation of length n is an array consisting of n distinct integers from 1
to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

Both of them chose a starting position in the permutation.

The game lasts k turns. The players make moves simultaneously. On each turn,
two things happen to each player:

  * If the current position of the player is x , his score increases by a_x . 
  * Then the player either stays at his current position x or moves from x to p_x . 

The winner of the game is the player with the higher score after exactly k
turns.

Knowing Bodya's starting position P_B and Sasha's starting position P_S ,
determine who wins the game if both players are trying to win.

Input

The first line contains a single integer t (1\le t\le 10^4 ) — the number of
testcases.

The first line of each testcase contains integers n , k , P_B , P_S (1\le
P_B,P_S\le n\le 2\cdot 10^5 , 1\le k\le 10^9 ) — length of the permutation,
duration of the game, starting positions respectively.

The next line contains n integers p_1,\dots,p_n (1 \le p_i \le n ) — elements
of the permutation p .

The next line contains n integers a_1,\dots,a_n (1\le a_i\le 10^9 ) — elements
of array a .

It is guaranteed that the sum of values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each testcase output:

  * "Bodya" if Bodya wins the game. 
  * "Sasha" if Sasha wins the game. 
  * "Draw" if the players have the same score. 

Example

Input

    10
    
    4 2 3 2
    
    4 1 2 3
    
    7 2 5 6
    
    10 8 2 10
    
    3 1 4 5 2 7 8 10 6 9
    
    5 10 5 1 3 7 10 15 4 3
    
    2 1000000000 1 2
    
    1 2
    
    4 4
    
    8 10 4 1
    
    5 1 4 3 2 8 6 7
    
    1 1 2 1 2 100 101 102
    
    5 1 2 5
    
    1 2 4 5 3
    
    4 6 9 4 2
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    6 9 5 4
    
    6 1 3 5 2 4
    
    6 9 8 9 5 10
    
    4 8 4 2
    
    2 3 4 1
    
    5 2 8 7
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    2 1000000000 1 2
    
    1 2
    
    1000000000 2

Output

    Bodya
    Sasha
    Draw
    Draw
    Bodya
    Sasha
    Sasha
    Sasha
    Sasha
    Bodya
    
Note

Below you can find the explanation for the first testcase, where the game
consists of k=2 turns.

Turn| Bodya's position| Bodya's score| Bodya's move| Sasha's position| Sasha's
score| Sasha's move  
---|---|---|---|---|---|---  
first| 3 | 0 + a_3 = 0 + 5 = 5 | stays on the same position| 2 | 0 + a_2 = 0 + 2 = 2 | moves to p_2=1   
second| 3 | 5 + a_3 = 5 + 5 = 10 | stays on the same position| 1 | 2 + a_1 = 2 + 7 = 9 | stays on the same position  
final results| 3 | 10 | | 1 | 9 |   
  
As we may see, Bodya's score is greater, so he wins the game. It can be shown
that Bodya always can win this game.
DEBUG - Correctness: False
DEBUG - Start Task 1951_D
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1951_D
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1966_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1926_E
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Vladislav has n cards numbered 1, 2, \dots, n . He wants to lay them down in a
row as follows:

  * First, he lays down all the odd-numbered cards from smallest to largest. 
  * Next, he lays down all cards that are twice an odd number from smallest to largest (i.e. 2 multiplied by an odd number). 
  * Next, he lays down all cards that are 3 times an odd number from smallest to largest (i.e. 3 multiplied by an odd number). 
  * Next, he lays down all cards that are 4 times an odd number from smallest to largest (i.e. 4 multiplied by an odd number). 
  * And so on, until all cards are laid down. 

What is the k -th card he lays down in this process? Once Vladislav puts a
card down, he cannot use that card again.

Input

The first line contains an integer t (1 \leq t \leq 5 \cdot 10^4 ) — the
number of test cases.

The only line of each test case contains two integers n and k (1 \leq k \leq n
\leq 10^9 ) — the number of cards Vlad has, and the position of the card you
need to output.

Output

For each test case, output a single integer — the k -th card Vladislav lays
down.

Example

Input

    11
    
    7 1
    
    7 2
    
    7 3
    
    7 4
    
    7 5
    
    7 6
    
    7 7
    
    1 1
    
    34 14
    
    84 19
    
    1000000000 1000000000

Output

    1
    3
    5
    7
    2
    6
    4
    1
    27
    37
    536870912
    
Note

In the first seven test cases, n=7 . Vladislav lays down the cards as follows:

  * First — all the odd-numbered cards in the order 1 , 3 , 5 , 7 . 
  * Next — all cards that are twice an odd number in the order 2 , 6 . 
  * Next, there are no remaining cards that are 3 times an odd number. (Vladislav has only one of each card.) 
  * Next — all cards that are 4 times an odd number, and there is only one such card: 4 . 
  * There are no more cards left, so Vladislav stops. 

Thus the order of cards is 1 , 3 , 5 , 7 , 2 , 6 , 4 .
DEBUG - Correctness: False
DEBUG - Start Task 1926_E
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Vladislav has n cards numbered 1, 2, \dots, n . He wants to lay them down in a
row as follows:

  * First, he lays down all the odd-numbered cards from smallest to largest. 
  * Next, he lays down all cards that are twice an odd number from smallest to largest (i.e. 2 multiplied by an odd number). 
  * Next, he lays down all cards that are 3 times an odd number from smallest to largest (i.e. 3 multiplied by an odd number). 
  * Next, he lays down all cards that are 4 times an odd number from smallest to largest (i.e. 4 multiplied by an odd number). 
  * And so on, until all cards are laid down. 

What is the k -th card he lays down in this process? Once Vladislav puts a
card down, he cannot use that card again.

Input

The first line contains an integer t (1 \leq t \leq 5 \cdot 10^4 ) — the
number of test cases.

The only line of each test case contains two integers n and k (1 \leq k \leq n
\leq 10^9 ) — the number of cards Vlad has, and the position of the card you
need to output.

Output

For each test case, output a single integer — the k -th card Vladislav lays
down.

Example

Input

    11
    
    7 1
    
    7 2
    
    7 3
    
    7 4
    
    7 5
    
    7 6
    
    7 7
    
    1 1
    
    34 14
    
    84 19
    
    1000000000 1000000000

Output

    1
    3
    5
    7
    2
    6
    4
    1
    27
    37
    536870912
    
Note

In the first seven test cases, n=7 . Vladislav lays down the cards as follows:

  * First — all the odd-numbered cards in the order 1 , 3 , 5 , 7 . 
  * Next — all cards that are twice an odd number in the order 2 , 6 . 
  * Next, there are no remaining cards that are 3 times an odd number. (Vladislav has only one of each card.) 
  * Next — all cards that are 4 times an odd number, and there is only one such card: 4 . 
  * There are no more cards left, so Vladislav stops. 

Thus the order of cards is 1 , 3 , 5 , 7 , 2 , 6 , 4 .
DEBUG - Correctness: True
DEBUG - Start Task 1955_F
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Alice and Bob gathered in the evening to play an exciting game on a sequence
of n integers, each integer of the sequence doesn't exceed 4 . The rules of
the game are too complex to describe, so let's just describe the winning
condition — Alice wins if the [bitwise XOR](http://tiny.cc/xor_wiki_eng) of
all the numbers in the sequence is non-zero; otherwise, Bob wins.

The guys invited Eve to act as a judge. Initially, Alice and Bob play with n
numbers. After one game, Eve removes one of the numbers from the sequence,
then Alice and Bob play with n-1 numbers. Eve removes one number again, after
which Alice and Bob play with n - 2 numbers. This continues until the sequence
of numbers is empty.

Eve seems to think that in such a game, Alice almost always wins, so she wants
Bob to win as many times as possible. Determine the maximum number of times
Bob can win against Alice if Eve removes the numbers optimally.

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first and only line of each test case contains four integers p_i (0 \le
p_i \le 200 ) — the number of ones, twos, threes, and fours in the sequence at
the beginning of the game.

Output

For each test case, print the maximum number of times Bob will win in a
separate line, if Eve removes the numbers optimally.

Example

Input

    5
    
    1 1 1 0
    
    1 0 1 2
    
    2 2 2 0
    
    3 3 2 0
    
    0 9 9 9

Output

    1
    1
    3
    3
    12
    
Note

In the first example, Bob wins when Eve has not removed any numbers yet.

In the second example, Bob wins if Eve removes one one and one three.
DEBUG - Correctness: False
DEBUG - Start Task 1922_E
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1
DEBUG - Correctness: False
DEBUG - Start Task 1922_C
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1942_B
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1942_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: [MOOO! - Doja Cat](https://soundcloud.com/amalaofficial/mooo)

⠀

Farmer John has a permutation p_1, p_2, \ldots, p_n , where every integer from
0 to n-1 occurs exactly once. He gives Bessie an array a of length n and
challenges her to construct p based on a .

The array a is constructed so that a_i = \texttt{MEX}(p_1, p_2, \ldots, p_i) -
p_i , where the \texttt{MEX} of an array is the minimum non-negative integer
that does not appear in that array. For example, \texttt{MEX}(1, 2, 3) = 0 and
\texttt{MEX}(3, 1, 0) = 2 .

Help Bessie construct any valid permutation p that satisfies a . The input is
given in such a way that at least one valid p exists. If there are multiple
possible p , it is enough to print one of them.

Input

The first line contains t (1 \leq t \leq 10^4 ) — the number of test cases.

The first line of each test case contains an integer n (1 \leq n \leq 2 \cdot
10^5 ) — the lengths of p and a .

The second line of each test case contains n integers a_1, a_2, \ldots, a_n
(-n \leq a_i \leq n ) — the elements of array a .

It is guaranteed that there is at least one valid p for the given data.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output n integers on a new line, the elements of p .

If there are multiple solutions, print any of them.

Example

Input

    3
    
    5
    
    1 1 -2 1 2
    
    5
    
    1 1 1 1 1
    
    3
    
    -2 1 2

Output

    0 1 4 2 3 
    0 1 2 3 4 
    2 0 1 
    
Note

In the first case, p = [0, 1, 4, 2, 3] is one possible output.

a will then be calculated as a_1 = \texttt{MEX}(0) - 0 = 1 , a_2 =
\texttt{MEX}(0, 1) - 1 = 1 , a_3 = \texttt{MEX}(0, 1, 4) - 4 = -2 , a_4 =
\texttt{MEX}(0, 1, 4, 2) - 2 = 1 , a_5 = \texttt{MEX}(0, 1, 4, 2, 3) - 3 = 2 .

So, as required, a will be [1, 1, -2, 1, 2] .
DEBUG - Correctness: True
DEBUG - Start Task 1927_F
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Given an undirected weighted graph with n vertices and m edges. There is at
most one edge between each pair of vertices in the graph, and the graph does
not contain loops (edges from a vertex to itself). The graph is not
necessarily connected.

A cycle in the graph is called simple if it doesn't pass through the same
vertex twice and doesn't contain the same edge twice.

Find any simple cycle in this graph in which the weight of the lightest edge
is minimal.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. Then follow the descriptions of the test cases.

The first line of each test case contains two integers n and m (3 \le n \le m
\le \min(\frac{n\cdot(n - 1)}{2}, 2 \cdot 10^5) ) — the size of the graph and
the number of edges.

The next m lines of the test case contain three integers u , v , and w (1 \le
u, v \le n , u \ne v , 1 \le w \le 10^6 ) — vertices u and v are connected by
an edge of weight w .

It is guaranteed that there is at most one edge between each pair of vertices.
Note that under the given constraints, there is always at least one simple
cycle in the graph.

It is guaranteed that the sum of the values of m for all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a pair of numbers b and k , where:

  * b — the minimum weight of the edge in the found cycle, 
  * k — the number of vertices in the found cycle. 

On the next line, output k numbers from 1 to n — the vertices of the cycle in
traversal order.

Note that the answer always exists, as under the given constraints, there is
always at least one simple cycle in the graph.

Example

Input

    5
    
    6 6
    
    1 2 1
    
    2 3 1
    
    3 1 1
    
    4 5 1
    
    5 6 1
    
    6 4 1
    
    6 6
    
    1 2 10
    
    2 3 8
    
    3 1 5
    
    4 5 100
    
    5 6 40
    
    6 4 3
    
    6 15
    
    1 2 4
    
    5 2 8
    
    6 1 7
    
    6 3 10
    
    6 5 1
    
    3 2 8
    
    4 3 4
    
    5 3 6
    
    2 6 6
    
    5 4 5
    
    4 1 3
    
    6 4 5
    
    4 2 1
    
    3 1 7
    
    1 5 5
    
    4 6
    
    2 3 2
    
    1 3 10
    
    1 4 1
    
    3 4 7
    
    2 4 5
    
    1 2 2
    
    4 5
    
    2 1 10
    
    3 1 3
    
    4 2 6
    
    1 4 7
    
    2 3 3

Output

    1 3
    1 2 3 
    3 3
    6 4 5 
    1 5
    4 2 1 6 3 
    1 4
    1 4 3 2 
    3 3
    2 3 1
DEBUG - Correctness: False
DEBUG - Start Task 1927_F
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Given an undirected weighted graph with n vertices and m edges. There is at
most one edge between each pair of vertices in the graph, and the graph does
not contain loops (edges from a vertex to itself). The graph is not
necessarily connected.

A cycle in the graph is called simple if it doesn't pass through the same
vertex twice and doesn't contain the same edge twice.

Find any simple cycle in this graph in which the weight of the lightest edge
is minimal.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. Then follow the descriptions of the test cases.

The first line of each test case contains two integers n and m (3 \le n \le m
\le \min(\frac{n\cdot(n - 1)}{2}, 2 \cdot 10^5) ) — the size of the graph and
the number of edges.

The next m lines of the test case contain three integers u , v , and w (1 \le
u, v \le n , u \ne v , 1 \le w \le 10^6 ) — vertices u and v are connected by
an edge of weight w .

It is guaranteed that there is at most one edge between each pair of vertices.
Note that under the given constraints, there is always at least one simple
cycle in the graph.

It is guaranteed that the sum of the values of m for all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a pair of numbers b and k , where:

  * b — the minimum weight of the edge in the found cycle, 
  * k — the number of vertices in the found cycle. 

On the next line, output k numbers from 1 to n — the vertices of the cycle in
traversal order.

Note that the answer always exists, as under the given constraints, there is
always at least one simple cycle in the graph.

Example

Input

    5
    
    6 6
    
    1 2 1
    
    2 3 1
    
    3 1 1
    
    4 5 1
    
    5 6 1
    
    6 4 1
    
    6 6
    
    1 2 10
    
    2 3 8
    
    3 1 5
    
    4 5 100
    
    5 6 40
    
    6 4 3
    
    6 15
    
    1 2 4
    
    5 2 8
    
    6 1 7
    
    6 3 10
    
    6 5 1
    
    3 2 8
    
    4 3 4
    
    5 3 6
    
    2 6 6
    
    5 4 5
    
    4 1 3
    
    6 4 5
    
    4 2 1
    
    3 1 7
    
    1 5 5
    
    4 6
    
    2 3 2
    
    1 3 10
    
    1 4 1
    
    3 4 7
    
    2 4 5
    
    1 2 2
    
    4 5
    
    2 1 10
    
    3 1 3
    
    4 2 6
    
    1 4 7
    
    2 3 3

Output

    1 3
    1 2 3 
    3 3
    6 4 5 
    1 5
    4 2 1 6 3 
    1 4
    1 4 3 2 
    3 3
    2 3 1
DEBUG - Correctness: False
DEBUG - Start Task 1945_E
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Anton got bored during the hike and wanted to solve something. He asked Kirill
if he had any new problems, and of course, Kirill had one.

You are given a permutation p of size n , and a number x that needs to be
found. A permutation of length n is an array consisting of n distinct integers
from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

You decided that you are a cool programmer, so you will use an advanced
algorithm for the search — binary search. However, you forgot that for binary
search, the array must be sorted.

You did not give up and decided to apply this algorithm anyway, and in order
to get the correct answer, you can perform the following operation no more
than 2 times before running the algorithm: choose the indices i , j (1\le i, j
\le n ) and swap the elements at positions i and j .

After that, the binary search is performed. At the beginning of the algorithm,
two variables l = 1 and r = n + 1 are declared. Then the following loop is
executed:

  1. If r - l = 1 , end the loop 
  2. m = \lfloor \frac{r + l}{2} \rfloor 
  3. If p_m \le x , assign l = m , otherwise r = m . 

The goal is to rearrange the numbers in the permutation before the algorithm
so that after the algorithm is executed, p_l is equal to x . It can be shown
that 2 operations are always sufficient.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 2\cdot 10^4 ) — the number of test cases. Then follow
the descriptions of the test cases.

The first line of each test case contains two integers n and x (1 \le x \le n
\le 2\cdot 10^5 ) — the length of the permutation and the number to be found.

The second line contains the permutation p separated by spaces (1 \le p_i \le
n ).

It is guaranteed that the sum of the values of n for all test cases does not
exceed 2\cdot 10^5 .

Output

For each test case, output an integer k (0 \le k \le 2 ) on the first line —
the number of operations performed by you. In the next k lines, output 2
integers i , j (1 \le i, j \le n ) separated by a space, indicating that you
are swapping the elements at positions i and j .

Note that you do not need to minimize the number of operations.

Example

Input

    5
    
    6 3
    
    1 2 3 4 5 6
    
    6 5
    
    3 1 6 5 2 4
    
    5 1
    
    3 5 4 2 1
    
    6 3
    
    4 3 1 5 2 6
    
    3 2
    
    3 2 1

Output

    0
    1
    3 4
    2
    2 4
    1 5
    2
    4 5
    2 4
    1
    1 3
DEBUG - Correctness: True
DEBUG - Start Task 1945_E
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1922_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You have n sticks, numbered from 1 to n . The length of the i -th stick is
2^{a_i} .

You want to choose exactly 3 sticks out of the given n sticks, and form a non-
degenerate triangle out of them, using the sticks as the sides of the
triangle. A triangle is called non-degenerate if its area is strictly greater
than 0 .

You have to calculate the number of ways to choose exactly 3 sticks so that a
triangle can be formed out of them. Note that the order of choosing sticks
does not matter (for example, choosing the 1 -st, 2 -nd and 4 -th stick is the
same as choosing the 2 -nd, 4 -th and 1 -st stick).

Input

The first line contains one integer t (1 \le t \le 10^4 ) — the number of test
cases.

Each test case consists of two lines:

  * the first line contains one integer n (1 \le n \le 3 \cdot 10^5 ); 
  * the second line contains n integers a_1, a_2, \dots, a_n (0 \le a_i \le n ). 

Additional constraint on the input: the sum of n over all test cases does not
exceed 3 \cdot 10^5 .

Output

For each test case, print one integer — the number of ways to choose exactly 3
sticks so that a triangle can be formed out of them.

Example

Input

    4
    
    7
    
    1 1 1 1 1 1 1
    
    4
    
    3 2 1 3
    
    3
    
    1 2 3
    
    1
    
    1

Output

    35
    2
    0
    0
    
Note

In the first test case of the example, any three sticks out of the given 7 can
be chosen.

In the second test case of the example, you can choose the 1 -st, 2 -nd and 4
-th stick, or the 1 -st, 3 -rd and 4 -th stick.

In the third test case of the example, you cannot form a triangle out of the
given sticks with lengths 2 , 4 and 8 .
DEBUG - Correctness: True
DEBUG - Start Task 1978_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Bob decided to open a bakery. On the opening day, he baked n buns that he can
sell. The usual price of a bun is a coins, but to attract customers, Bob
organized the following promotion:

  * Bob chooses some integer k (0 \le k \le \min(n, b) ).
  * Bob sells the first k buns at a modified price. In this case, the price of the i -th (1 \le i \le k ) sold bun is (b - i + 1) coins.
  * The remaining (n - k) buns are sold at a coins each.

Note that k can be equal to 0 . In this case, Bob will sell all the buns at a
coins each.

Help Bob determine the maximum profit he can obtain by selling all n buns.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. The description of
the test cases follows.

The only line of each test case contains three integers n , a , and b (1 \le
n, a, b \le 10^9 ) — the number of buns, the usual price of a bun, and the
price of the first bun to be sold at a modified price.

Output

For each test case, output a single integer — the maximum profit that Bob can
obtain.

Example

Input

    7
    
    4 4 5
    
    5 5 9
    
    10 10 5
    
    5 5 11
    
    1000000000 1000000000 1000000000
    
    1000000000 1000000000 1
    
    1000 1 1000

Output

    17
    35
    100
    45
    1000000000000000000
    1000000000000000000
    500500
    
Note

In the first test case, it is optimal for Bob to choose k = 1 . Then he will
sell one bun for 5 coins, and three buns at the usual price for 4 coins each.
Then the profit will be 5 + 4 + 4 + 4 = 17 coins.

In the second test case, it is optimal for Bob to choose k = 5 . Then he will
sell all the buns at the modified price and obtain a profit of 9 + 8 + 7 + 6 +
5 = 35 coins.

In the third test case, it is optimal for Bob to choose k = 0 . Then he will
sell all the buns at the usual price and obtain a profit of 10 \cdot 10 = 100
coins.
DEBUG - Correctness: True
DEBUG - Start Task 1931_F
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: There are n people in the programming contest chat. Chat participants are
ordered by activity, but each person sees himself at the top of the list.

For example, there are 4 participants in the chat, and their order is [2, 3,
1, 4] . Then

  * 1 -st user sees the order [1, 2, 3, 4] . 
  * 2 -nd user sees the order [2, 3, 1, 4] . 
  * 3 -rd user sees the order [3, 2, 1, 4] . 
  * 4 -th user sees the order [4, 2, 3, 1] . 

k people posted screenshots in the chat, which show the order of participants
shown to this user. The screenshots were taken within a short period of time,
and the order of participants has not changed.

Your task is to determine whether there is a certain order that all
screenshots correspond to.

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
input test cases. The descriptions of test cases follow.

The first line of the description of each test case contains two integers n
and k (1 \le k \le n \le 2 \cdot 10^5, n \cdot k \le 2 \cdot 10^5 ) — the
number of chat participants and the number of participants who posted
screenshots.

The following k lines contain descriptions of screenshots posted by the
participants.

The i -th row contains n integers a_{ij} each (1 \le a_{ij} \le n , all a_{ij}
are different) — the order of participants shown to the participant a_{i0} ,
where a_{i0} — the author of the screenshot. You can show that in the
screenshot description it will always be at the top of the list.

It is guaranteed that the sum of n \cdot k for all test cases does not exceed
2 \cdot 10^5 . It is also guaranteed that all the authors of the screenshots
are different.

Output

Output t lines, each of which is the answer to the corresponding test case. As
an answer, output "YES" if there exists at least one order of participants,
under which all k screenshots could have been obtained. Otherwise, output
"NO".

You can output the answer in any case (upper or lower). For example, the
strings "yEs", "yes", "Yes", and "YES" will be recognized as positive
responses.

Example

Input

    10
    
    5 1
    
    1 2 3 4 5
    
    4 4
    
    1 2 3 4
    
    2 3 1 4
    
    3 2 1 4
    
    4 2 3 1
    
    6 2
    
    1 3 5 2 4 6
    
    6 3 5 2 1 4
    
    3 3
    
    1 2 3
    
    2 3 1
    
    3 2 1
    
    10 2
    
    1 2 3 4 5 6 7 8 9 10
    
    10 9 8 7 6 5 4 3 2 1
    
    1 1
    
    1
    
    5 2
    
    1 2 3 5 4
    
    2 1 3 5 4
    
    3 3
    
    3 1 2
    
    2 3 1
    
    1 3 2
    
    5 4
    
    3 5 1 4 2
    
    2 5 1 4 3
    
    1 5 4 3 2
    
    5 1 4 3 2
    
    3 3
    
    1 3 2
    
    2 1 3
    
    3 2 1

Output

    YES
    YES
    YES
    YES
    NO
    YES
    YES
    YES
    YES
    NO
DEBUG - Correctness: False
DEBUG - Start Task 1965_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You are given two integers n and k . Find a sequence a of non-negative
integers of size at most 25 such that the following conditions hold.

  * There is no subsequence of a with a sum of k . 
  * For all 1 \le v \le n where v \ne k , there is a subsequence of a with a sum of v . 

A sequence b is a subsequence of a if b can be obtained from a by the deletion
of several (possibly, zero or all) elements, without changing the order of the
remaining elements. For example, [5, 2, 3] is a subsequence of [1, 5, 7, 8, 2,
4, 3] .

It can be shown that under the given constraints, a solution always exists.

Input

The first line of the input contains a single integer t (1 \le t \le 1000 ) —
the number of test cases. The description of the test cases follows.

Each test case consists of a single line containing two integers n and k (2
\le n \le 10^6 , 1 \le k \le n ) — the parameters described above.

It is guaranteed that the sum of n over all test cases does not exceed 10^7 .

Output

The first line of output for each test case should contain a single integer m
(1 \le m \le 25 ) — the size of your chosen sequence.

The second line of output for each test case should contain m integers a_i (0
\le a_i \le 10^9 ) — the elements of your chosen sequence.

If there are multiple solutions, print any.

Example

Input

    5
    
    2 2
    
    6 1
    
    8 8
    
    9 3
    
    10 7

Output

    1
    1
    5
    2 3 4 5 6
    7
    1 1 1 1 1 1 1
    4
    7 1 4 1
    4
    1 2 8 3
    
Note

In the first example, we just need a subsequence that adds up to 1 , but not
one that adds up to 2 . So the array a=[1] suffices.

In the second example, all elements are greater than k=1 , so no subsequence
adds up to 1 . Every other integer between 1 and n is present in the array, so
there is a subsequence of size 1 adding up to each of those numbers.
DEBUG - Correctness: False
DEBUG - Start Task 1977_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1948_B
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1955_D
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Maxim has an array a of n integers and an array b of m integers (m \le n ).

Maxim considers an array c of length m to be good if the elements of array c
can be rearranged in such a way that at least k of them match the elements of
array b .

For example, if b = [1, 2, 3, 4] and k = 3 , then the arrays [4, 1, 2, 3] and
[2, 3, 4, 5] are good (they can be reordered as follows: [1, 2, 3, 4] and [5,
2, 3, 4] ), while the arrays [3, 4, 5, 6] and [3, 4, 3, 4] are not good.

Maxim wants to choose every subsegment of array a of length m as the elements
of array c . Help Maxim count how many selected arrays will be good.

In other words, find the number of positions 1 \le l \le n - m + 1 such that
the elements a_l, a_{l+1}, \dots, a_{l + m - 1} form a good array.

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first line of each test case contains three integers n , m , and k (1 \le
k \le m \le n \le 2 \cdot 10^5 ) — the number of elements in arrays a and b ,
the required number of matching elements.

The second line of each test case contains n integers a_1, a_2, \dots, a_n (1
\le a_i \le 10^6 ) — the elements of array a . Elements of the array a are not
necessarily unique.

The third line of each test case contains m integers b_1, b_2, \dots, b_m (1
\le b_i \le 10^6 ) — the elements of array b . Elements of the array b are not
necessarily unique.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 . Similarly, it is guaranteed that the sum of m over all test cases does
not exceed 2 \cdot 10^5 .

Output

For each test case, output the number of good subsegments of array a on a
separate line.

Example

Input

    5
    
    7 4 2
    
    4 1 2 3 4 5 6
    
    1 2 3 4
    
    7 4 3
    
    4 1 2 3 4 5 6
    
    1 2 3 4
    
    7 4 4
    
    4 1 2 3 4 5 6
    
    1 2 3 4
    
    11 5 3
    
    9 9 2 2 10 9 7 6 3 6 3
    
    6 9 7 8 10
    
    4 1 1
    
    4 1 5 6
    
    6

Output

    4
    3
    2
    4
    1
    
Note

In the first example, all subsegments are good.

In the second example, good subsegments start at positions 1 , 2 , and 3 .

In the third example, good subsegments start at positions 1 and 2 .
DEBUG - Correctness: False
DEBUG - Start Task 1922_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You have n sticks, numbered from 1 to n . The length of the i -th stick is
2^{a_i} .

You want to choose exactly 3 sticks out of the given n sticks, and form a non-
degenerate triangle out of them, using the sticks as the sides of the
triangle. A triangle is called non-degenerate if its area is strictly greater
than 0 .

You have to calculate the number of ways to choose exactly 3 sticks so that a
triangle can be formed out of them. Note that the order of choosing sticks
does not matter (for example, choosing the 1 -st, 2 -nd and 4 -th stick is the
same as choosing the 2 -nd, 4 -th and 1 -st stick).

Input

The first line contains one integer t (1 \le t \le 10^4 ) — the number of test
cases.

Each test case consists of two lines:

  * the first line contains one integer n (1 \le n \le 3 \cdot 10^5 ); 
  * the second line contains n integers a_1, a_2, \dots, a_n (0 \le a_i \le n ). 

Additional constraint on the input: the sum of n over all test cases does not
exceed 3 \cdot 10^5 .

Output

For each test case, print one integer — the number of ways to choose exactly 3
sticks so that a triangle can be formed out of them.

Example

Input

    4
    
    7
    
    1 1 1 1 1 1 1
    
    4
    
    3 2 1 3
    
    3
    
    1 2 3
    
    1
    
    1

Output

    35
    2
    0
    0
    
Note

In the first test case of the example, any three sticks out of the given 7 can
be chosen.

In the second test case of the example, you can choose the 1 -st, 2 -nd and 4
-th stick, or the 1 -st, 3 -rd and 4 -th stick.

In the third test case of the example, you cannot form a triangle out of the
given sticks with lengths 2 , 4 and 8 .
DEBUG - Correctness: True
DEBUG - Start Task 1922_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You have n sticks, numbered from 1 to n . The length of the i -th stick is
2^{a_i} .

You want to choose exactly 3 sticks out of the given n sticks, and form a non-
degenerate triangle out of them, using the sticks as the sides of the
triangle. A triangle is called non-degenerate if its area is strictly greater
than 0 .

You have to calculate the number of ways to choose exactly 3 sticks so that a
triangle can be formed out of them. Note that the order of choosing sticks
does not matter (for example, choosing the 1 -st, 2 -nd and 4 -th stick is the
same as choosing the 2 -nd, 4 -th and 1 -st stick).

Input

The first line contains one integer t (1 \le t \le 10^4 ) — the number of test
cases.

Each test case consists of two lines:

  * the first line contains one integer n (1 \le n \le 3 \cdot 10^5 ); 
  * the second line contains n integers a_1, a_2, \dots, a_n (0 \le a_i \le n ). 

Additional constraint on the input: the sum of n over all test cases does not
exceed 3 \cdot 10^5 .

Output

For each test case, print one integer — the number of ways to choose exactly 3
sticks so that a triangle can be formed out of them.

Example

Input

    4
    
    7
    
    1 1 1 1 1 1 1
    
    4
    
    3 2 1 3
    
    3
    
    1 2 3
    
    1
    
    1

Output

    35
    2
    0
    0
    
Note

In the first test case of the example, any three sticks out of the given 7 can
be chosen.

In the second test case of the example, you can choose the 1 -st, 2 -nd and 4
-th stick, or the 1 -st, 3 -rd and 4 -th stick.

In the third test case of the example, you cannot form a triangle out of the
given sticks with lengths 2 , 4 and 8 .
DEBUG - Correctness: True
DEBUG - Start Task 1956_D
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Nene gave you an array of integers a_1, a_2, \ldots, a_n of length n .

You can perform the following operation no more than 5\cdot 10^5 times
(possibly zero):

  * Choose two integers l and r such that 1 \le l \le r \le n , compute x as \operatorname{MEX}(\\{a_l, a_{l+1}, \ldots, a_r\\}) , and simultaneously set a_l:=x, a_{l+1}:=x, \ldots, a_r:=x . 

Here, \operatorname{MEX} of a set of integers \\{c_1, c_2, \ldots, c_k\\} is
defined as the smallest non-negative integer m which does not occur in the set
c .

Your goal is to maximize the sum of the elements of the array a . Find the
maximum sum and construct a sequence of operations that achieves this sum.
Note that you don't need to minimize the number of operations in this
sequence, you only should use no more than 5\cdot 10^5 operations in your
solution.

Input

The first line contains an integer n (1 \le n \le 18 ) — the length of the
array a .

The second line contains n integers a_1,a_2,\ldots,a_n (0\leq a_i \leq 10^7 )
— the array a .

Output

In the first line, output two integers s and m (0\le m\le 5\cdot 10^5 ) — the
maximum sum of elements of the array a and the number of operations in your
solution.

In the i -th of the following m lines, output two integers l and r (1 \le l
\le r \le n ), representing the parameters of the i -th operation.

It can be shown that the maximum sum of elements of the array a can always be
obtained in no more than 5 \cdot 10^5 operations.

Examples

Input

    2
    
    0 1

Output

    4 1
    1 2
    
Input

    3
    
    1 3 9

Output

    13 0
    
Input

    4
    
    1 100 2 1

Output

    105 2
    3 3
    3 4
    
Input

    1
    
    0

Output

    1 1
    1 1
    
Note

In the first example, after the operation with l=1 and r=2 the array a becomes
equal to [2,2] . It can be shown that it is impossible to achieve a larger sum
of the elements of a , so the answer is 4 .

In the second example, the initial sum of elements is 13 which can be shown to
be the largest.

In the third example, the array a changes as follows:

  * after the first operation (l=3 , r=3 ), the array a becomes equal to [1,100,0,1] ; 
  * after the second operation (l=3 , r=4 ), the array a becomes equal to [1,100,2,2] . 

It can be shown that it is impossible to achieve a larger sum of the elements
of a , so the answer is 105 .
DEBUG - Correctness: False
DEBUG - Start Task 1956_D
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Nene gave you an array of integers a_1, a_2, \ldots, a_n of length n .

You can perform the following operation no more than 5\cdot 10^5 times
(possibly zero):

  * Choose two integers l and r such that 1 \le l \le r \le n , compute x as \operatorname{MEX}(\\{a_l, a_{l+1}, \ldots, a_r\\}) , and simultaneously set a_l:=x, a_{l+1}:=x, \ldots, a_r:=x . 

Here, \operatorname{MEX} of a set of integers \\{c_1, c_2, \ldots, c_k\\} is
defined as the smallest non-negative integer m which does not occur in the set
c .

Your goal is to maximize the sum of the elements of the array a . Find the
maximum sum and construct a sequence of operations that achieves this sum.
Note that you don't need to minimize the number of operations in this
sequence, you only should use no more than 5\cdot 10^5 operations in your
solution.

Input

The first line contains an integer n (1 \le n \le 18 ) — the length of the
array a .

The second line contains n integers a_1,a_2,\ldots,a_n (0\leq a_i \leq 10^7 )
— the array a .

Output

In the first line, output two integers s and m (0\le m\le 5\cdot 10^5 ) — the
maximum sum of elements of the array a and the number of operations in your
solution.

In the i -th of the following m lines, output two integers l and r (1 \le l
\le r \le n ), representing the parameters of the i -th operation.

It can be shown that the maximum sum of elements of the array a can always be
obtained in no more than 5 \cdot 10^5 operations.

Examples

Input

    2
    
    0 1

Output

    4 1
    1 2
    
Input

    3
    
    1 3 9

Output

    13 0
    
Input

    4
    
    1 100 2 1

Output

    105 2
    3 3
    3 4
    
Input

    1
    
    0

Output

    1 1
    1 1
    
Note

In the first example, after the operation with l=1 and r=2 the array a becomes
equal to [2,2] . It can be shown that it is impossible to achieve a larger sum
of the elements of a , so the answer is 4 .

In the second example, the initial sum of elements is 13 which can be shown to
be the largest.

In the third example, the array a changes as follows:

  * after the first operation (l=3 , r=3 ), the array a becomes equal to [1,100,0,1] ; 
  * after the second operation (l=3 , r=4 ), the array a becomes equal to [1,100,2,2] . 

It can be shown that it is impossible to achieve a larger sum of the elements
of a , so the answer is 105 .
DEBUG - Correctness: False
DEBUG - Start Task 1969_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Let's define a cyclic shift of some string s as a transformation from s_1 s_2
\dots s_{n-1} s_{n} into s_{n} s_1 s_2 \dots s_{n-1} . In other words, you
take one last character s_n and place it before the first character while
moving all other characters to the right.

You are given a binary string s (a string consisting of only 0-s and/or 1-s).

In one operation, you can choose any substring s_l s_{l+1} \dots s_r (1 \le l
< r \le |s| ) and cyclically shift it. The cost of such operation is equal to
r - l + 1 (or the length of the chosen substring).

You can perform the given operation any number of times. What is the minimum
total cost to make s sorted in non-descending order?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
test cases.

The first and only line of each test case contains a binary string s (2 \le
|s| \le 2 \cdot 10^5 ; s_i \in {0, 1}) — the string you need to sort.

Additional constraint on the input: the sum of lengths of strings over all
test cases doesn't exceed 2 \cdot 10^5 .

Output

For each test case, print the single integer — the minimum total cost to make
string sorted using operation above any number of times.

Example

Input

    5
    
    10
    
    0000
    
    11000
    
    101011
    
    01101001

Output

    2
    0
    9
    5
    11
    
Note

In the first test case, you can choose the whole string and perform a cyclic
shift: 10 \rightarrow 01. The length of the substring is 2 , so the cost is 2
.

In the second test case, the string is already sorted, so you don't need to
perform any operations.

In the third test case, one of the optimal strategies is the next:

  1. choose substring [1, 3] : 11000 \rightarrow 01100; 
  2. choose substring [2, 4] : 01100 \rightarrow 00110; 
  3. choose substring [3, 5] : 00110 \rightarrow 00011. 

The total cost is 3 + 3 + 3 = 9 .
DEBUG - Correctness: True
DEBUG - Start Task 1945_B
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1922_E
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1
DEBUG - Correctness: True
DEBUG - Start Task 1922_E
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1
DEBUG - Correctness: True
DEBUG - Start Task 1922_E
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Let's recall that an increasing subsequence of the array a is a sequence that
can be obtained from it by removing some elements without changing the order
of the remaining elements, and the remaining elements are strictly increasing
(i. e a_{b_1} < a_{b_2} < \dots < a_{b_k} and b_1 < b_2 < \dots < b_k ). Note
that an empty subsequence is also increasing.

You are given a positive integer X . Your task is to find an array of integers
of length at most 200 , such that it has exactly X increasing subsequences, or
report that there is no such array. If there are several answers, you can
print any of them.

If two subsequences consist of the same elements, but correspond to different
positions in the array, they are considered different (for example, the array
[2, 2] has two different subsequences equal to [2] ).

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

The only line of each test case contains a single integer X (2 \le X \le
10^{18} ).

Output

For each query, print the answer to it. If it is impossible to find the
required array, print -1 on the first line. Otherwise, print a positive
integer n on the first line — the length of the array. On the second line,
print n integers — the required array itself. If there are several answers,
you can print any of them. All elements of the array should be in the range
[-10^9; 10^9] .

Example

Input

    4
    
    2
    
    5
    
    13
    
    37

Output

    1
    0
    3
    0 1 0
    5
    2 2 3 4 2
    7
    -1 -1 0 0 2 3 -1
DEBUG - Correctness: True
DEBUG - Start Task 1968_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You are given an integer x . Your task is to find any integer y (1\le y<x)
such that \gcd(x,y)+y is maximum possible.

Note that if there is more than one y which satisfies the statement, you are
allowed to find any.

\gcd(a,b) is the Greatest Common Divisor of a and b . For example, \gcd(6,4)=2
.

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
test cases.

Each of the following t lines contains a single integer x (2 \le x \le 1000 ).

Output

For each test case, output any y (1 \le y < x ), which satisfies the
statement.

Example

Input

    7
    
    10
    
    7
    
    21
    
    100
    
    2
    
    1000
    
    6

Output

    5
    6
    18
    98
    1
    750
    3
DEBUG - Correctness: False
DEBUG - Start Task 1968_A
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1932_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: The Chaya tribe believes that there are n signs of the apocalypse. Over time,
it has been found out that the i -th sign occurs every a_i years (in years a_i
, 2 \cdot a_i , 3 \cdot a_i , \dots ).

According to the legends, for the apocalypse to happen, the signs must occur
sequentially. That is, first they wait for the first sign to occur, then
strictly after it, the second sign will occur, and so on. That is, if the i
-th sign occurred in the year x , the tribe starts waiting for the occurrence
of the (i+1) -th sign, starting from the year x+1 .

In which year will the n -th sign occur and the apocalypse will happen?

Input

The first line of the input contains a single integer t (1 \le t \le 1000 ) —
the number of test cases. Then follow the descriptions of the test cases.

The first line of each test case contains a single integer n (1 \le n \le 100
) — the number of signs.

The second line of each test case contains n integers a_1, a_2, a_3, \dots,
a_n (1 \le a_i \le 10^6 ) — the periodicities of the signs.

Output

For each test case, output a single integer — the year in which all n signs
will occur.

Example

Input

    4
    
    6
    
    3 2 4 5 9 18
    
    5
    
    1 2 3 4 5
    
    5
    
    1 1 1 1 1
    
    6
    
    50 30 711 200 503 1006

Output

    36
    5
    5
    2012
    
Note

In the first set of input data of the example:

  * The tribe will wait for the first sign in the 3 -rd year; 
  * the tribe will wait for the second sign in the 4 -th year (since year 2 have already passed); 
  * the tribe will wait for the third sign in the 8 -th year (since the second sign has already occurred in the 4 -th year); 
  * the tribe will wait for the fourth sign in the 10 -th year (since year 5 have already passed); 
  * the tribe will wait for the fifth sign in the 18 -th year (since year 9 have already passed); 
  * the tribe will wait for the sixth sign in the 36 -th year (since the fifth sign has already occurred in the 18 -th year).
DEBUG - Correctness: True
DEBUG - Start Task 1932_B
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1957_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You are given n sticks of lengths a_1, a_2, \ldots, a_n . Find the maximum
number of regular (equal-sided) polygons you can construct simultaneously,
such that:

  * Each side of a polygon is formed by exactly one stick. 
  * No stick is used in more than 1 polygon. 

Note: Sticks cannot be broken.

Input

The first line contains a single integer t (1 \leq t \leq 100 ) — the number
of test cases.

The first line of each test case contains a single integer n (1 \leq n \leq
100 ) — the number of sticks available.

The second line of each test case contains n integers a_1, a_2, \ldots, a_n (1
\leq a_i \leq 100 ) — the stick lengths.

Output

For each test case, output a single integer on a new line — the maximum number
of regular (equal-sided) polygons you can make simultaneously from the sticks
available.

Example

Input

    4
    
    1
    
    1
    
    2
    
    1 1
    
    6
    
    2 2 3 3 3 3
    
    9
    
    4 2 2 2 2 4 2 4 4

Output

    0
    0
    1
    2
    
Note

In the first test case, we only have one stick, hence we can't form any
polygon.

In the second test case, the two sticks aren't enough to form a polygon
either.

In the third test case, we can use the 4 sticks of length 3 to create a
square.

In the fourth test case, we can make a pentagon with side length 2 , and a
square of side length 4 .
DEBUG - Correctness: True
DEBUG - Start Task 1926_C
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Please note that the time limit for this problem is only 0.5 seconds per test.

Vladislav wrote the integers from 1 to n , inclusive, on the board. Then he
replaced each integer with the sum of its digits.

What is the sum of the numbers on the board now?

For example, if n=12 then initially the numbers on the board are:

Then after the replacement, the numbers become:

The sum of these numbers is 1+2+3+4+5+6+7+8+9+1+2+3=51 . Thus, for n=12 the
answer is 51 .

Input

The first line contains an integer t (1 \leq t \leq 10^4 ) — the number of
test cases.

The only line of each test case contains a single integer n (1 \leq n \leq 2
\cdot 10^5 ) — the largest number Vladislav writes.

Output

For each test case, output a single integer — the sum of the numbers at the
end of the process.

Example

Input

    7
    
    12
    
    1
    
    2
    
    3
    
    1434
    
    2024
    
    200000

Output

    51
    1
    3
    6
    18465
    28170
    4600002
DEBUG - Correctness: False
DEBUG - Start Task 1972_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: A contest contains n problems and the difficulty of the i -th problem is
expected to be at most b_i . There are already n problem proposals and the
difficulty of the i -th problem is a_i . Initially, both a_1, a_2, \ldots, a_n
and b_1, b_2, \ldots, b_n are sorted in non-decreasing order.

Some of the problems may be more difficult than expected, so the writers must
propose more problems. When a new problem with difficulty w is proposed, the
most difficult problem will be deleted from the contest, and the problems will
be sorted in a way that the difficulties are non-decreasing.

In other words, in each operation, you choose an integer w , insert it into
the array a , sort array a in non-decreasing order, and remove the last
element from it.

Find the minimum number of new problems to make a_i\le b_i for all i .

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1\le t\le 100 ). The description of the test cases follows.

The first line of each test case contains only one positive integer n (1 \leq
n \leq 100 ), representing the number of problems.

The second line of each test case contains an array a of length n (1\le a_1\le
a_2\le\cdots\le a_n\le 10^9 ).

The third line of each test case contains an array b of length n (1\le b_1\le
b_2\le\cdots\le b_n\le 10^9 ).

Output

For each test case, print an integer as your answer in a new line.

Example

Input

    2
    
    6
    
    1000 1400 2000 2000 2200 2700
    
    800 1200 1500 1800 2200 3000
    
    6
    
    4 5 6 7 8 9
    
    1 2 3 4 5 6

Output

    2
    3
    
Note

In the first test case:

  * Propose a problem with difficulty w=800 and a becomes [800,1000,1400,2000,2000,2200] . 
  * Propose a problem with difficulty w=1800 and a becomes [800,1000,1400,1800,2000,2000] . 

It can be proved that it's impossible to reach the goal by proposing fewer new
problems.

In the second test case:

  * Propose a problem with difficulty w=1 and a becomes [1,4,5,6,7,8] . 
  * Propose a problem with difficulty w=2 and a becomes [1,2,4,5,6,7] . 
  * Propose a problem with difficulty w=3 and a becomes [1,2,3,4,5,6] . 

It can be proved that it's impossible to reach the goal by proposing fewer new
problems.
DEBUG - Correctness: False
DEBUG - Start Task 1921_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: In order to test the hypothesis about the cats, the scientists must arrange
the cats in the boxes in a specific way. Of course, they would like to test
the hypothesis and publish a sensational article as quickly as possible,
because they are too engrossed in the next hypothesis about the phone's
battery charge.

Scientists have n boxes in which cats may or may not sit. Let the current
state of the boxes be denoted by the sequence b_1, \dots, b_n : b_i = 1 if
there is a cat in box number i , and b_i = 0 otherwise.

Fortunately, the unlimited production of cats has already been established, so
in one day, the scientists can perform one of the following operations:

  * Take a new cat and place it in a box (for some i such that b_i = 0 , assign b_i = 1 ). 
  * Remove a cat from a box and send it into retirement (for some i such that b_i = 1 , assign b_i = 0 ). 
  * Move a cat from one box to another (for some i, j such that b_i = 1, b_j = 0 , assign b_i = 0, b_j = 1 ). 

It has also been found that some boxes were immediately filled with cats.
Therefore, the scientists know the initial position of the cats in the boxes
s_1, \dots, s_n and the desired position f_1, \dots, f_n .

Due to the large amount of paperwork, the scientists do not have time to solve
this problem. Help them for the sake of science and indicate the minimum
number of days required to test the hypothesis.

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. This is followed by
descriptions of the test cases.

Each test case consists of three lines.

The first line of each test case contains a single integer n (1 \le n \le 10^5
) — the number of boxes.

The second line of each test case contains a string s of n characters, where
the i -th character is '1' if there is a cat in the i -th box and '0'
otherwise.

The third line of each test case contains a string f of n characters, where
the i -th character is '1' if there should be a cat in the i -th box and '0'
otherwise.

It is guaranteed that in a test the sum of n over all test cases does not
exceed 10^5 .

Output

For each test case, output a single integer on a separate line — the minimum
number of operations required to obtain the desired position from the initial
position. It can be shown that a solution always exists.

Example

Input

    6
    
    5
    
    10010
    
    00001
    
    1
    
    1
    
    1
    
    3
    
    000
    
    111
    
    4
    
    0101
    
    1010
    
    3
    
    100
    
    101
    
    8
    
    10011001
    
    11111110

Output

    2
    0
    3
    2
    1
    4
    
Note

In the first test case, you can first move the cat from the first box to the
fifth, and then remove the cat from the fourth box.

In the second test case, there is nothing to do — the only cat is already
sitting in the correct box.

In the third test case of input data, it takes three days to place a cat in
each box.
DEBUG - Correctness: True
DEBUG - Start Task 1921_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: In order to test the hypothesis about the cats, the scientists must arrange
the cats in the boxes in a specific way. Of course, they would like to test
the hypothesis and publish a sensational article as quickly as possible,
because they are too engrossed in the next hypothesis about the phone's
battery charge.

Scientists have n boxes in which cats may or may not sit. Let the current
state of the boxes be denoted by the sequence b_1, \dots, b_n : b_i = 1 if
there is a cat in box number i , and b_i = 0 otherwise.

Fortunately, the unlimited production of cats has already been established, so
in one day, the scientists can perform one of the following operations:

  * Take a new cat and place it in a box (for some i such that b_i = 0 , assign b_i = 1 ). 
  * Remove a cat from a box and send it into retirement (for some i such that b_i = 1 , assign b_i = 0 ). 
  * Move a cat from one box to another (for some i, j such that b_i = 1, b_j = 0 , assign b_i = 0, b_j = 1 ). 

It has also been found that some boxes were immediately filled with cats.
Therefore, the scientists know the initial position of the cats in the boxes
s_1, \dots, s_n and the desired position f_1, \dots, f_n .

Due to the large amount of paperwork, the scientists do not have time to solve
this problem. Help them for the sake of science and indicate the minimum
number of days required to test the hypothesis.

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. This is followed by
descriptions of the test cases.

Each test case consists of three lines.

The first line of each test case contains a single integer n (1 \le n \le 10^5
) — the number of boxes.

The second line of each test case contains a string s of n characters, where
the i -th character is '1' if there is a cat in the i -th box and '0'
otherwise.

The third line of each test case contains a string f of n characters, where
the i -th character is '1' if there should be a cat in the i -th box and '0'
otherwise.

It is guaranteed that in a test the sum of n over all test cases does not
exceed 10^5 .

Output

For each test case, output a single integer on a separate line — the minimum
number of operations required to obtain the desired position from the initial
position. It can be shown that a solution always exists.

Example

Input

    6
    
    5
    
    10010
    
    00001
    
    1
    
    1
    
    1
    
    3
    
    000
    
    111
    
    4
    
    0101
    
    1010
    
    3
    
    100
    
    101
    
    8
    
    10011001
    
    11111110

Output

    2
    0
    3
    2
    1
    4
    
Note

In the first test case, you can first move the cat from the first box to the
fifth, and then remove the cat from the fourth box.

In the second test case, there is nothing to do — the only cat is already
sitting in the correct box.

In the third test case of input data, it takes three days to place a cat in
each box.
DEBUG - Correctness: True
DEBUG - Start Task 1921_B
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1956_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You and Nene are playing a card game. The deck with 2n cards is used to play
this game. Each card has an integer from 1 to n on it, and each of integers 1
through n appears exactly on 2 cards. Additionally, there is a table where
cards are placed during the game (initially, the table is empty).

In the beginning of the game, these 2n cards are distributed between you and
Nene so that each player receives n cards.

After it, you and Nene alternatively take 2n turns, i.e. each person takes n
turns, starting with you. On each turn:

  * The player whose turn is it selects one of the cards in his hand. Let x be the number on it. 
  * The player whose turn is it receives 1 point if there is already a card with the integer x on the table (otherwise, he receives no points). After it, he places the selected card with the integer x on the table. 

Note that turns are made publicly: each player can see all the cards on the
table at each moment.

Nene is very smart so she always selects cards optimally in order to maximize
her score in the end of the game (after 2n rounds). If she has several optimal
moves, she selects the move that minimizes your score in the end of the game.

More formally, Nene always takes turns optimally in order to maximize her
score in the end of the game in the first place and to minimize your score in
the end of the game in the second place.

Assuming that the cards are already distributed and cards in your hand have
integers a_1, a_2, \ldots, a_n written on them, what is the maximum number of
points you can get by taking your turns optimally?

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 10^4 ). The description of test cases follows.

The first line contains a single integer n (1 \le n \le 2 \cdot 10^5 ) — the
number of cards you and Nene receive in the beginning of the game.

The second line contains n integers a_1, a_2, \ldots, a_n (1 \le a_i \le n ) —
the integers on the cards in your hand. It is guaranteed that each integer
from 1 through n appears in the sequence a_1, a_2, \ldots, a_n at most 2
times.

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output one integer: the maximum number of points you can
get.

Example

Input

    5
    
    4
    
    1 1 2 3
    
    8
    
    7 4 1 2 8 8 5 5
    
    8
    
    7 1 4 5 3 4 2 6
    
    3
    
    1 2 3
    
    1
    
    1

Output

    1
    2
    1
    0
    0
    
Note

In the first test case, the integers written on your cards are 1 , 1 , 2 and 3
. The integers written on Nene's cards are 2 , 3 , 4 and 4 . The game may
proceed as follows:

  1. You select one of the cards with an integer 1 written on it and place it on the table. 
  2. Nene selects one of the cards with an integer 4 written on it and places it on the table. 
  3. You select the card with an integer 1 written on it, receive 1 point, and place the selected card on the table. 
  4. Nene selects the card with an integer 4 written on it, receive 1 point, and places the selected card on the table. 
  5. You select the card with an integer 2 written on it and place it on the table. 
  6. Nene selects the card with an integer 2 written on it, receive 1 point, and places the selected card on the table. 
  7. You select the card with an integer 3 written on it and place it on the table. 
  8. Nene selects the card with an integer 3 written on it, receive 1 point, and places the selected card on the table. 

At the end of the game, you scored 1 point, and Nene scored 3 . It can be
shown that you cannot score more than 1 point if Nene plays optimally, so the
answer is 1 .

In the second test case, if both players play optimally, you score 2 points
and Nene scores 6 points.
DEBUG - Correctness: True
DEBUG - Start Task 1921_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: A square of positive (strictly greater than 0 ) area is located on the
coordinate plane, with sides parallel to the coordinate axes. You are given
the coordinates of its corners, in random order. Your task is to find the area
of the square.

Input

Each test consists of several testcases. The first line contains one integer t
(1 \le t \le 100 ) — the number of testcases. The following is a description
of the testcases.

Each testcase contains four lines, each line contains two integers x_i, y_i
(-1000\le x_i, y_i\le 1000 ), coordinates of the corners of the square.

It is guaranteed that there is a square with sides parallel to the coordinate
axes, with positive (strictly greater than 0 ) area, with corners in given
points.

Output

For each test case, print a single integer, the area of the square.

Example

Input

    3
    
    1 2
    
    4 5
    
    1 5
    
    4 2
    
    -1 1
    
    1 -1
    
    1 1
    
    -1 -1
    
    45 11
    
    45 39
    
    17 11
    
    17 39

Output

    9
    4
    784
DEBUG - Correctness: True
DEBUG - Start Task 1968_D
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1968_D
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Bodya and Sasha found a permutation p_1,\dots,p_n and an array a_1,\dots,a_n .
They decided to play a well-known "Permutation game".

A permutation of length n is an array consisting of n distinct integers from 1
to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

Both of them chose a starting position in the permutation.

The game lasts k turns. The players make moves simultaneously. On each turn,
two things happen to each player:

  * If the current position of the player is x , his score increases by a_x . 
  * Then the player either stays at his current position x or moves from x to p_x . 

The winner of the game is the player with the higher score after exactly k
turns.

Knowing Bodya's starting position P_B and Sasha's starting position P_S ,
determine who wins the game if both players are trying to win.

Input

The first line contains a single integer t (1\le t\le 10^4 ) — the number of
testcases.

The first line of each testcase contains integers n , k , P_B , P_S (1\le
P_B,P_S\le n\le 2\cdot 10^5 , 1\le k\le 10^9 ) — length of the permutation,
duration of the game, starting positions respectively.

The next line contains n integers p_1,\dots,p_n (1 \le p_i \le n ) — elements
of the permutation p .

The next line contains n integers a_1,\dots,a_n (1\le a_i\le 10^9 ) — elements
of array a .

It is guaranteed that the sum of values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each testcase output:

  * "Bodya" if Bodya wins the game. 
  * "Sasha" if Sasha wins the game. 
  * "Draw" if the players have the same score. 

Example

Input

    10
    
    4 2 3 2
    
    4 1 2 3
    
    7 2 5 6
    
    10 8 2 10
    
    3 1 4 5 2 7 8 10 6 9
    
    5 10 5 1 3 7 10 15 4 3
    
    2 1000000000 1 2
    
    1 2
    
    4 4
    
    8 10 4 1
    
    5 1 4 3 2 8 6 7
    
    1 1 2 1 2 100 101 102
    
    5 1 2 5
    
    1 2 4 5 3
    
    4 6 9 4 2
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    6 9 5 4
    
    6 1 3 5 2 4
    
    6 9 8 9 5 10
    
    4 8 4 2
    
    2 3 4 1
    
    5 2 8 7
    
    4 2 3 1
    
    4 1 3 2
    
    6 8 5 3
    
    2 1000000000 1 2
    
    1 2
    
    1000000000 2

Output

    Bodya
    Sasha
    Draw
    Draw
    Bodya
    Sasha
    Sasha
    Sasha
    Sasha
    Bodya
    
Note

Below you can find the explanation for the first testcase, where the game
consists of k=2 turns.

Turn| Bodya's position| Bodya's score| Bodya's move| Sasha's position| Sasha's
score| Sasha's move  
---|---|---|---|---|---|---  
first| 3 | 0 + a_3 = 0 + 5 = 5 | stays on the same position| 2 | 0 + a_2 = 0 + 2 = 2 | moves to p_2=1   
second| 3 | 5 + a_3 = 5 + 5 = 10 | stays on the same position| 1 | 2 + a_1 = 2 + 7 = 9 | stays on the same position  
final results| 3 | 10 | | 1 | 9 |   
  
As we may see, Bodya's score is greater, so he wins the game. It can be shown
that Bodya always can win this game.
DEBUG - Correctness: False
DEBUG - Start Task 1966_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: There is an n \times m grid of white and black squares. In one operation, you
can select any two squares of the same color, and color all squares in the
subrectangle between them that color.

Formally, if you select positions (x_1, y_1) and (x_2, y_2) , both of which
are currently the same color c , set the color of all (x, y) where \min(x_1,
x_2) \le x \le \max(x_1, x_2) and \min(y_1, y_2) \le y \le \max(y_1, y_2) to c
.

This diagram shows a sequence of two possible operations on a grid:

![](https://espresso.codeforces.com/efe0d6bfa2062b4821f73fb07120103af504fb62.png)

Is it possible for all squares in the grid to be the same color, after
performing any number of operations (possibly zero)?

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The description of the test cases follows.

The first line of each test case contains two integers n and m (1 \le n, m \le
500 ) — the number of rows and columns in the grid, respectively.

Each of the next n lines contains m characters 'W' and 'B' — the initial
colors of the squares of the grid.

It is guaranteed that the sum of n\cdot m over all test cases does not exceed
3\cdot 10^5 .

Output

For each test case, print "YES" if it is possible to make all squares in the
grid the same color, and "NO" otherwise.

You can output the answer in any case (upper or lower). For example, the
strings "yEs", "yes", "Yes", and "YES" will be recognized as positive
responses.

Example

Input

    8
    
    2 1
    
    W
    
    B
    
    6 6
    
    WWWWBW
    
    WBWWWW
    
    BBBWWW
    
    BWWWBB
    
    WWBWBB
    
    BBBWBW
    
    1 1
    
    W
    
    2 2
    
    BB
    
    BB
    
    3 4
    
    BWBW
    
    WBWB
    
    BWBW
    
    4 2
    
    BB
    
    BB
    
    WW
    
    WW
    
    4 4
    
    WWBW
    
    BBWB
    
    WWBB
    
    BBBB
    
    1 5
    
    WBBWB

Output

    NO
    YES
    YES
    YES
    YES
    NO
    YES
    NO
    
Note

In the first example, it is impossible to ever change the color of any square
with an operation, so we output NO.

The second example is the case pictured above. As shown in that diagram, it is
possible for all squares to be white after two operations, so we output YES.

In the third and fourth examples, all squares are already the same color, so
we output YES.

In the fifth example we can do everything in two operations. First, select
positions (2, 1) and (1, 4) and color all squares with 1 \le x \le 2 and 1 \le
y \le 4 to white. Then, select positions (2, 1) and (3, 4) and color all
squares with 2 \le x \le 3 and 1 \le y \le 4 to white. After these two
operations all squares are white.
DEBUG - Correctness: False
DEBUG - Start Task 1976_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: Monocarp is working on his new site, and the current challenge is to make the
users pick strong passwords.

Monocarp decided that strong passwords should satisfy the following
conditions:

  * password should consist only of lowercase Latin letters and digits; 
  * there should be no digit that comes after a letter (so, after each letter, there is either another letter or the string ends); 
  * all digits should be sorted in the non-decreasing order; 
  * all letters should be sorted in the non-decreasing order. 

Note that it's allowed for the password to have only letters or only digits.

Monocarp managed to implement the first condition, but he struggles with the
remaining ones. Can you help him to verify the passwords?

Input

The first line contains a single integer t (1 \le t \le 1000 ) — the number of
testcases.

The first line of each testcase contains a single integer n (1 \le n \le 20 )
— the length of the password.

The second line contains a string, consisting of exactly n characters. Each
character is either a lowercase Latin letter or a digit.

Output

For each testcase, print "YES" if the given password is strong and "NO"
otherwise.

Example

Input

    5
    
    4
    
    12ac
    
    5
    
    123wa
    
    9
    
    allllmost
    
    5
    
    ac123
    
    6
    
    011679

Output

    YES
    NO
    YES
    NO
    YES
    
Note

In the second testcase, the letters are not sorted in the non-decreasing
order.

In the fourth testcase, there is a digit that comes after a letter — digit '1'
after a letter 'c'.
DEBUG - Correctness: True
DEBUG - Start Task 1945_C
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: In the village of Letovo, there are n houses. The villagers decided to build a
big road that will divide the village into left and right sides. Each resident
wants to live on either the right or the left side of the street, which is
described as a sequence a_1, a_2, \dots, a_n , where a_j = 0 if the resident
of the j -th house wants to live on the left side of the street; otherwise,
a_j = 1 .

The road will pass between two houses. The houses to the left of it will be
declared the left-side, and the houses to the right will be declared the
right-side. More formally, let the road pass between houses i and i+1 . Then
the houses at positions between 1 and i will be on the left side of the
street, and at positions between i+1 and n will be on the right side. The road
also may pass before the first and after the last house; in this case, the
entire village is declared to be either the right or left side, respectively.

To make the design fair, it was decided to lay the road so that at least half
of the residents on each side of the village are satisfied with the choice.
That is, among x residents on one side, at least \lceil\frac{x}{2}\rceil
should want to live on that side, where \lceil x \rceil denotes rounding up a
real number x .

![](https://espresso.codeforces.com/75baa17903d65a630fb0d3334683e857d5fdc345.png)
To the left of the road, there will be i houses, among the corresponding a_j
there must be at least \lceil\frac{i}{2}\rceil zeros. To the right of the
road, there will be n-i houses, among the corresponding a_j there must be at
least \lceil\frac{n-i}{2}\rceil ones.

Determine after which house i the road should be laid in order to satisfy the
described condition and be as close to the middle of the village as possible.
Formally, among all suitable positions i , minimize \left|\frac{n}{2} -
i\right| .

If there are multiple suitable positions i with the minimum \left|\frac{n}{2}
- i\right| , output the smaller one.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 2\cdot 10^4 ). The description of the test cases
follows.

The first line of each test case contains a single integer n (3 \le n \le
3\cdot 10^5 ). The next line of each test case contains a string a of length n
, consisting only of 0 and 1 .

It is guaranteed that the sum of n over all test cases does not exceed 3\cdot
10^5 .

Output

For each test case, output a single number i — the position of the house after
which the road should be laid (if it should be laid before the first house,
output 0 ). We can show that the answer always exists.

Example

Input

    7
    
    3
    
    101
    
    6
    
    010111
    
    6
    
    011001
    
    3
    
    000
    
    3
    
    110
    
    3
    
    001
    
    4
    
    1100

Output

    2
    3
    2
    3
    0
    1
    0
    
Note

Let's consider the first example of input data.

If we lay the road after the first house, there will be one house a_1 = 1 on
the left side of the street, the resident of which would like to live on the
right side of the street. Then 0 out of 1 residents on the even side will be
satisfied with the choice, which means that the road cannot be laid after
house 1 .

If we lay the road after the second house, 1 out of 2 residents on the left
side (with preferences a_1 = 1 , a_2 = 0 ) and 1 out of 1 resident on the
right side (with preference a_3 = 1 ) will be satisfied with the choice. More
than half of the residents on each side are satisfied with the choice, which
means that the road can be laid after house 2 . We can show that this is the
optimal answer.
DEBUG - Correctness: False
DEBUG - Start Task 1941_B
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1941_B
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1919_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You are given a string s of length n consisting of characters "+" and "-". s
represents an array a of length n defined by a_i=1 if s_i= "+" and a_i=-1 if
s_i= "-".

You will do the following process to calculate your penalty:

  1. Split a into non-empty arrays b_1,b_2,\ldots,b_k such that b_1+b_2+\ldots+b_k=a^\dagger , where + denotes array concatenation. 
  2. The penalty of a single array is the absolute value of its sum multiplied by its length. In other words, for some array c of length m , its penalty is calculated as p(c)=|c_1+c_2+\ldots+c_m| \cdot m . 
  3. The total penalty that you will receive is p(b_1)+p(b_2)+\ldots+p(b_k) . 

If you perform the above process optimally, find the minimum possible penalty
you will receive.

^\dagger Some valid ways to split a=[3,1,4,1,5] into (b_1,b_2,\ldots,b_k) are
([3],[1],[4],[1],[5]) , ([3,1],[4,1,5]) and ([3,1,4,1,5]) while some invalid
ways to split a are ([3,1],[1,5]) , ([3],[\,],[1,4],[1,5]) and ([3,4],[5,1,1])
.

Input

Each test contains multiple test cases. The first line contains a single
integer t (1 \leq t \leq 1000 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le 5000
) — the length of string s .

The second line of each test case contains string s (s_i \in \\{ \mathtt{+},
\mathtt{-} \\} , |s| = n ).

Note that there are no constraints on the sum of n over all test cases.

Output

For each test case, output a single integer representing the minimum possible
penalty you will receive.

Example

Input

    5
    
    1
    
    +
    
    5
    
    -----
    
    6
    
    +-+-+-
    
    10
    
    --+++++++-
    
    20
    
    +---++++-+++++---++-

Output

    1
    5
    0
    4
    4
    
Note

In the first test case, we have a=[1] . We can split array a into ([1]) .
Then, the sum of penalties of the subarrays is p([1]) = 1 .

In the second test case, we have a=[-1,-1,-1,-1,-1] . We can split array a
into ([-1],[-1],[-1],[-1],[-1]) . Then, the sum of penalties of the subarrays
is p([-1]) + p([-1]) + p([-1]) + p([-1]) + p([-1]) = 1 + 1 + 1 + 1 + 1 = 5 .

In the third test case, we have a=[1,-1,1,-1,1,-1] . We can split array a into
([1,-1,1,-1],[1,-1]) . Then, the sum of penalties of the subarrays is
p([1,-1,1,-1]) + p([1,-1]) = 0 + 0 = 0 .
DEBUG - Correctness: True
DEBUG - Start Task 1919_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You are given a string s of length n consisting of characters "+" and "-". s
represents an array a of length n defined by a_i=1 if s_i= "+" and a_i=-1 if
s_i= "-".

You will do the following process to calculate your penalty:

  1. Split a into non-empty arrays b_1,b_2,\ldots,b_k such that b_1+b_2+\ldots+b_k=a^\dagger , where + denotes array concatenation. 
  2. The penalty of a single array is the absolute value of its sum multiplied by its length. In other words, for some array c of length m , its penalty is calculated as p(c)=|c_1+c_2+\ldots+c_m| \cdot m . 
  3. The total penalty that you will receive is p(b_1)+p(b_2)+\ldots+p(b_k) . 

If you perform the above process optimally, find the minimum possible penalty
you will receive.

^\dagger Some valid ways to split a=[3,1,4,1,5] into (b_1,b_2,\ldots,b_k) are
([3],[1],[4],[1],[5]) , ([3,1],[4,1,5]) and ([3,1,4,1,5]) while some invalid
ways to split a are ([3,1],[1,5]) , ([3],[\,],[1,4],[1,5]) and ([3,4],[5,1,1])
.

Input

Each test contains multiple test cases. The first line contains a single
integer t (1 \leq t \leq 1000 ) — the number of test cases. The description of
the test cases follows.

The first line of each test case contains a single integer n (1 \le n \le 5000
) — the length of string s .

The second line of each test case contains string s (s_i \in \\{ \mathtt{+},
\mathtt{-} \\} , |s| = n ).

Note that there are no constraints on the sum of n over all test cases.

Output

For each test case, output a single integer representing the minimum possible
penalty you will receive.

Example

Input

    5
    
    1
    
    +
    
    5
    
    -----
    
    6
    
    +-+-+-
    
    10
    
    --+++++++-
    
    20
    
    +---++++-+++++---++-

Output

    1
    5
    0
    4
    4
    
Note

In the first test case, we have a=[1] . We can split array a into ([1]) .
Then, the sum of penalties of the subarrays is p([1]) = 1 .

In the second test case, we have a=[-1,-1,-1,-1,-1] . We can split array a
into ([-1],[-1],[-1],[-1],[-1]) . Then, the sum of penalties of the subarrays
is p([-1]) + p([-1]) + p([-1]) + p([-1]) + p([-1]) = 1 + 1 + 1 + 1 + 1 = 5 .

In the third test case, we have a=[1,-1,1,-1,1,-1] . We can split array a into
([1,-1,1,-1],[1,-1]) . Then, the sum of penalties of the subarrays is
p([1,-1,1,-1]) + p([1,-1]) = 0 + 0 = 0 .
DEBUG - Correctness: False
DEBUG - Start Task 1922_B
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You have n sticks, numbered from 1 to n . The length of the i -th stick is
2^{a_i} .

You want to choose exactly 3 sticks out of the given n sticks, and form a non-
degenerate triangle out of them, using the sticks as the sides of the
triangle. A triangle is called non-degenerate if its area is strictly greater
than 0 .

You have to calculate the number of ways to choose exactly 3 sticks so that a
triangle can be formed out of them. Note that the order of choosing sticks
does not matter (for example, choosing the 1 -st, 2 -nd and 4 -th stick is the
same as choosing the 2 -nd, 4 -th and 1 -st stick).

Input

The first line contains one integer t (1 \le t \le 10^4 ) — the number of test
cases.

Each test case consists of two lines:

  * the first line contains one integer n (1 \le n \le 3 \cdot 10^5 ); 
  * the second line contains n integers a_1, a_2, \dots, a_n (0 \le a_i \le n ). 

Additional constraint on the input: the sum of n over all test cases does not
exceed 3 \cdot 10^5 .

Output

For each test case, print one integer — the number of ways to choose exactly 3
sticks so that a triangle can be formed out of them.

Example

Input

    4
    
    7
    
    1 1 1 1 1 1 1
    
    4
    
    3 2 1 3
    
    3
    
    1 2 3
    
    1
    
    1

Output

    35
    2
    0
    0
    
Note

In the first test case of the example, any three sticks out of the given 7 can
be chosen.

In the second test case of the example, you can choose the 1 -st, 2 -nd and 4
-th stick, or the 1 -st, 3 -rd and 4 -th stick.

In the third test case of the example, you cannot form a triangle out of the
given sticks with lengths 2 , 4 and 8 .
DEBUG - Correctness: False
DEBUG - Start Task 1922_A
DEBUG - Dataset: codeforces2024
DEBUG - model_created: human
DEBUG - model_run: qwq-32b-preview
DEBUG - description: You are given an integer n and three strings a, b, c , each consisting of n
lowercase Latin letters.

Let a template be a string t consisting of n lowercase and/or uppercase Latin
letters. The string s matches the template t if the following conditions hold
for all i from 1 to n :

  * if the i -th letter of the template is lowercase, then s_i must be the same as t_i ; 
  * if the i -th letter of the template is uppercase, then s_i must be different from the lowercase version of t_i . For example, if there is a letter 'A' in the template, you cannot use the letter 'a' in the corresponding position of the string. 

Accordingly, the string doesn't match the template if the condition doesn't
hold for at least one i .

Determine whether there exists a template t such that the strings a and b
match it, while the string c does not.

Input

The first line contains an integer t (1 \le t \le 1000 ) — the number of test
cases.

The first line of each test case contains an integer n (1 \le n \le 20 ) — the
length of the given strings.

The next three lines contain the strings a, b and c . Each string consists of
exactly n lowercase Latin letters.

Output

For each testcase, print "YES" if there exists a template t such that the
strings a and b match it, while the string c does not. Otherwise, print "NO".

Example

Input

    4
    
    1
    
    a
    
    b
    
    c
    
    2
    
    aa
    
    bb
    
    aa
    
    10
    
    mathforces
    
    luckforces
    
    adhoccoder
    
    3
    
    acc
    
    abd
    
    abc

Output

    YES
    NO
    YES
    NO
    
Note

In the first test case, you can use the template "C". The first letter of
strings a and b differ from 'c', so they match the template. The first letter
of string c equals 'c', so it doesn't match.

In the third test case, you can use the template "CODEforces".
DEBUG - Correctness: False
DEBUG - Start Task 1944_B
ERROR - Error: 'str' object has no attribute 'trim'
DEBUG - Start Task 1944_B
ERROR - Error: 'str' object has no attribute 'trim'
