#State of the program right berfore the function call: t is an integer such that 1 ≤ t ≤ 2⋅10^4. Each test case consists of n and x, where 1 ≤ x ≤ n ≤ 2⋅10^5, and p is a list of n integers representing a permutation of size n.
def func_1():
    return map(int, input().split())
    #The program returns a map object containing integers split from user input.
#Overall this is what the function does:The function reads a line of space-separated integers from the user, converts them to integers, and returns a map object containing these integers.

#State of the program right berfore the function call: t is a positive integer such that 1 <= t <= 2 * 10^4. Each test case consists of n (1 <= n <= 2 * 10^5) and x (1 <= x <= n), and p is a permutation of integers from 1 to n.
def func_2():
    return list(func_1())
    #The program returns a list generated by func_1(), which we do not have the definition for but it processes n, x, and p as described in the initial state.
#Overall this is what the function does:The function does not accept any direct parameters. Instead, it relies on the internal call to `func_1()` to process three parameters: `n` (an integer between 1 and 200,000), `x` (an integer between 1 and `n`), and `p` (a permutation of integers from 1 to `n`). After processing these parameters, it returns a list generated by `func_1()`.

