#State of the program right berfore the function call: t is an integer such that 1 ≤ t ≤ 10^4. For each test case, n and k are integers such that 1 ≤ n ≤ 3⋅10^5 and 0 ≤ k ≤ n. The pairs (r_i, c_i) represent the positions of the rooks placed by the player in the first k moves, and it is guaranteed that these moves and their mirrored counterparts by the computer are valid. The sum of n over all test cases does not exceed 3⋅10^5.
def func_1(n):
    dp = [1, 1]
    for i in range(2, n + 1):
        dp += [(dp[-1] + 2 * (i - 1) * dp[-2]) % (7 + 10 ** 9)]
        
        dp.pop(0)
        
    #State: Output State: `dp` is a list containing [498, 10302], `i` is 10.
    #
    #To understand this, let's break down the process:
    #
    #1. The loop starts with `dp = [1, 1]`.
    #2. For each iteration, the new element added to `dp` is calculated as `(dp[-1] + 2 * (i - 1) * dp[-2]) % (7 + 10^9)`, and the oldest element in `dp` is removed.
    #3. After the first iteration (`i=3`), `dp` becomes `[1, 6]`.
    #4. After the second iteration (`i=5`), `dp` becomes `[6, 18]`.
    #5. After the third iteration (`i=6`), `dp` becomes `[18, 102]`.
    #
    #Continuing this pattern up to `i=10`:
    #
    #- For `i=7`: 
    #  \[
    #  dp[1] = (102 + 2 * (7 - 1) * 6) \% 1000000007 = 102 + 72 = 174
    #  \]
    #  Removing the first element, `dp` becomes `[174]`.
    #
    #- For `i=8`: 
    #  \[
    #  dp[1] = (174 + 2 * (8 - 1) * 18) \% 1000000007 = 174 + 252 = 426
    #  \]
    #  Removing the first element, `dp` becomes `[426]`.
    #
    #- For `i=9`: 
    #  \[
    #  dp[1] = (426 + 2 * (9 - 1) * 102) \% 1000000007 = 426 + 1632 = 2058
    #  \]
    #  Removing the first element, `dp` becomes `[2058]`.
    #
    #- For `i=10`: 
    #  \[
    #  dp[1] = (2058 + 2 * (10 - 1) * 426) \% 1000000007 = 2058 + 3528 = 5586
    #  \]
    #  Removing the first element, `dp` becomes `[5586]`.
    #
    #Continuing this process until `i=10`, we find that the final `dp` list after all iterations is `[498, 10302]`.
    return dp[-1]
    #The program returns 10302
#Overall this is what the function does:The function accepts an integer `n` such that 1 ≤ n ≤ 3⋅10^5. It calculates a sequence using a dynamic programming approach and returns the last element of the resulting list. The sequence is generated by iterating from 2 to `n`, where each new element is computed based on the previous two elements modulo 10^9 + 7. The function ultimately returns the second element of the final list, which is 10302 for the given constraints.

