Task ID,unique_id,Dataset,model_created,model_run,description,Code,run_number,original correctness,summary fsl,naive correctness fsl,vanilla,vanilla_no_cot,simple tree,complex tree,summary,simple verify fsl,complex verify fsl,summary verify fsl,simple verify,complex verify,summary verify,consistency,consistency_mine,consistency_old
1937_B,1937_B_kaushik_yadav_100%,codeforces2024,human,qwen2.5-7b-instruct,"You are given a 2 \times n grid filled with zeros and ones. Let the number at
the intersection of the i -th row and the j -th column be a_{ij} .

There is a grasshopper at the top-left cell (1, 1) that can only jump one cell
right or downwards. It wants to reach the bottom-right cell (2, n) . Consider
the binary string of length n+1 consisting of numbers written in cells of the
path without changing their order.

Your goal is to:

  1. Find the lexicographically smallest^\dagger string you can attain by choosing any available path; 
  2. Find the number of paths that yield this lexicographically smallest string. 

^\dagger If two strings s and t have the same length, then s is
lexicographically smaller than t if and only if in the first position where s
and t differ, the string s has a smaller element than the corresponding
element in t .

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 10^4 ). The description of the test cases follows.

The first line of each test case contains a single integer n (2 \le n \le 2
\cdot 10^5 ).

The second line of each test case contains a binary string a_{11} a_{12}
\ldots a_{1n} (a_{1i} is either 0 or 1 ).

The third line of each test case contains a binary string a_{21} a_{22} \ldots
a_{2n} (a_{2i} is either 0 or 1 ).

It is guaranteed that the sum of n over all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output two lines:

  1. The lexicographically smallest string you can attain by choosing any available path; 
  2. The number of paths that yield this string. 

Example

Input

    3
    
    2
    
    00
    
    00
    
    4
    
    1101
    
    1100
    
    8
    
    00100111
    
    11101101

Output

    000
    2
    11000
    1
    001001101
    4
    
Note

In the first test case, the lexicographically smallest string is \mathtt{000}
. There are two paths that yield this string:

![](https://espresso.codeforces.com/77986b77a0625593b90ec3560ecfcbf9154500d2.png)

In the second test case, the lexicographically smallest string is
\mathtt{11000} . There is only one path that yields this string:

![](https://espresso.codeforces.com/553da757110049e03424fa5158938ddaa7e49324.png)","import sys
input = sys.stdin.readline
t=int(input())
for _ in range(t):
    n=int(input())
    a=input().strip()
    b=input().strip()
    ans=""""
    i=0
    work=True
    while(i<len(a)):
        if(work):
            ans+=a[i]
            if i+1<len(a) and b[i]<a[i+1]:
                work=False
            elif i+1==len(a):
                ans+=b[i]
                break
            else:
                i+=1
        else:
            ans+=b[i]
            i+=1
    print(ans)
    counter=1
    for j in range(len(a)-1):
        if(a[j+1]==b[j]):
            counter+=1
        elif(a[j+1]==""0""and b[j]==""1""):
            counter=1
        else:
            break
    print(counter)",3,True,False,False,False,False,True,True,False,False,False,False,False,False,False,0.9471703073203269,0.7051340952108834,0.8333333333333334
1941_D,1941_D_funseeker_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"Rudolf and Bernard decided to play a game with their friends. n people stand
in a circle and start throwing a ball to each other. They are numbered from 1
to n in the clockwise order.

Let's call a transition a movement of the ball from one player to his
neighbor. The transition can be made clockwise or counterclockwise.

Let's call the clockwise (counterclockwise) distance from player y_1 to player
y_2 the number of transitions clockwise (counterclockwise) that need to be
made to move from player y_1 to player y_2 . For example, if n=7 then the
clockwise distance from 2 to 5 is 3 , and the counterclockwise distance from 2
to 5 is 4 .

Initially, the ball is with the player number x (players are numbered
clockwise). On the i -th move the person with the ball throws it at a distance
of r_i (1 \le r_i \le n - 1 ) clockwise or counterclockwise. For example, if
there are 7 players, and the 2 nd player, after receiving the ball, throws it
a distance of 5 , then the ball will be caught by either the 7 th player
(throwing clockwise) or the 4 th player (throwing counterclockwise). An
illustration of this example is shown below.

![](https://espresso.codeforces.com/29f44c71d01625dfd7795270dbc36b2737f0b368.png)

The game was interrupted after m throws due to unexpected rain. When the rain
stopped, the guys gathered again to continue. However, no one could remember
who had the ball. As it turned out, Bernard remembered the distances for each
of the throws and the direction for some of the throws (clockwise or
counterclockwise).

Rudolf asks you to help him and based on the information from Bernard,
calculate the numbers of the players who could have the ball after m throws.

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. Then follow the descriptions of the test cases.

The first line of each test case contains three integers n, m, x (2 \le n \le
1000 , 1 \le m \le 1000 , 1 \le x \le n ) — the number of players, the number
of throws made, and the number of the player who threw the ball first,
respectively.

The next m lines contain information about each throw in order. Each of them
contains an integer r_i (1 \le r_i \le n - 1 ) — the distance at which the i
-th throw was made, and a symbol c_i , equal to '0', '1', or '?':

  * if c_i ='0', then the i -th throw was made clockwise, 
  * if c_i ='1', then the i -th throw was made counterclockwise, 
  * if c_i ='?', then Bernard does not remember the direction and the i -th throw could have been made either clockwise or counterclockwise. 

It is guaranteed that the sum n \cdot m (n multiplied by m ) over all test
cases does not exceed 2 \cdot 10^5 .

Output

For each test case, output two lines.

In the first line, output the number of players k (1 \le k \le n ) who could
have the ball at the end of the game.

In the next line, output k numbers b_i (1 \le b_i \le n ) — the numbers of the
players in increasing order. All numbers must be different.

Example

Input

    5
    
    6 3 2
    
    2 ?
    
    2 ?
    
    2 ?
    
    12 1 2
    
    3 1
    
    10 7 4
    
    2 ?
    
    9 1
    
    4 ?
    
    7 0
    
    2 0
    
    8 1
    
    5 ?
    
    5 3 1
    
    4 0
    
    4 ?
    
    1 ?
    
    4 1 1
    
    2 ?

Output

    3
    2 4 6 
    1
    11 
    4
    3 5 7 9 
    3
    2 3 5 
    1
    3 
    
Note

Below is an illustration of three throws for the first test case. The arrows
denote possible throw directions. Players who could have the ball after the
throw are highlighted in gray.

![](https://espresso.codeforces.com/8c70d0cb48359ee6327eabbf182827e664062516.png)
![](https://espresso.codeforces.com/159cf99566782566b4c267b54062452988d11444.png)
![](https://espresso.codeforces.com/007b0cb2cc613eba2f2e45e69d5d973f282a9d5d.png)","import sys
from functools import lru_cache
sys.setrecursionlimit(100000000)
def read():
    return sys.stdin.readline().strip()
def ii():
    return int(read())
def il():
    return list(map(int,read().split()))
t=ii()
def solve():
    n,m,x=il()
    ans={x}
    for _ in range(m):
        r,c=read().split()
        r=int(r)
        temp=set()
        for q in ans:
            if c=='0' or c=='?':
                temp.add((q+r)%n)
            if c=='1' or c=='?':
                temp.add((q-r)%n)
        ans=temp
    if 0 in ans:
        ans.discard(0)
        ans.add(n)
    print(len(ans))
    print(*ans)
for i in range(t):
    solve()",3,False,False,True,True,True,True,True,True,True,True,True,True,True,True,0.8394767539177377,0.415862809467957,0.6666666666666666
1929_B,1929_B_muhammadhamid_25.00%,codeforces2024,human,qwen2.5-7b-instruct,"Even in kindergarten, Sasha liked a girl. Therefore, he wanted to give her a
drawing and attract her attention.

As a drawing, he decided to draw a square grid of size n \times n , in which
some cells are colored. But coloring the cells is difficult, so he wants to
color as few cells as possible. But at the same time, he wants at least k
diagonals to have at least one colored cell. Note that the square grid of size
n \times n has a total of 4n - 2 diagonals.

Help little Sasha to make the girl fall in love with him and tell him the
minimum number of cells he needs to color.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 1000 ) — the number of test cases. The description of
the test cases follows.

The only line of each test case contains two integers n and k (2 \leq n \leq
10^8 , 1 \leq k \leq 4n - 2 ) — the size of the square grid and the minimum
number of diagonals in which there should be at least one colored cell.

Output

For each test case, output a single integer — the minimum number of cells that
need to be colored.

Example

Input

    7
    
    3 4
    
    3 3
    
    3 10
    
    3 9
    
    4 7
    
    7 11
    
    2 3

Output

    2
    2
    6
    5
    4
    6
    2
    
Note

In the pictures below, the colored cells are marked in black, and all
diagonals are marked in purple.

In the first test case, you can color 2 cells so that 4 diagonals contain at
least one colored cell:

![](https://espresso.codeforces.com/c88e80de5be4f91764dbe5bdc534c50fec115db3.png)

In the third test case, you can color 6 cells so that all 10 diagonals contain
at least one colored cell:

![](https://espresso.codeforces.com/624a36083689f6fb20bf243e5d1707fdcd71ef60.png)","import math
 
for _ in range(int(input())):
    #n=int(input())
    n,k=(map(int,input().split()))
    if k ==1:
        print(1)
        continue
 
    if k<=2*n:
        print(math.ceil(k/2))
    else:
        print(k//2 +1)",3,False,False,False,False,False,True,True,True,False,False,False,False,False,False,0.8683000803832664,0.4530139268997541,0.75
1966_B,1966_B_AngryBiceps_6.67%,codeforces2024,human,qwen2.5-7b-instruct,"There is an n \times m grid of white and black squares. In one operation, you
can select any two squares of the same color, and color all squares in the
subrectangle between them that color.

Formally, if you select positions (x_1, y_1) and (x_2, y_2) , both of which
are currently the same color c , set the color of all (x, y) where \min(x_1,
x_2) \le x \le \max(x_1, x_2) and \min(y_1, y_2) \le y \le \max(y_1, y_2) to c
.

This diagram shows a sequence of two possible operations on a grid:

![](https://espresso.codeforces.com/efe0d6bfa2062b4821f73fb07120103af504fb62.png)

Is it possible for all squares in the grid to be the same color, after
performing any number of operations (possibly zero)?

Input

The first line of the input contains a single integer t (1 \le t \le 10^4 ) —
the number of test cases. The description of the test cases follows.

The first line of each test case contains two integers n and m (1 \le n, m \le
500 ) — the number of rows and columns in the grid, respectively.

Each of the next n lines contains m characters 'W' and 'B' — the initial
colors of the squares of the grid.

It is guaranteed that the sum of n\cdot m over all test cases does not exceed
3\cdot 10^5 .

Output

For each test case, print ""YES"" if it is possible to make all squares in the
grid the same color, and ""NO"" otherwise.

You can output the answer in any case (upper or lower). For example, the
strings ""yEs"", ""yes"", ""Yes"", and ""YES"" will be recognized as positive
responses.

Example

Input

    8
    
    2 1
    
    W
    
    B
    
    6 6
    
    WWWWBW
    
    WBWWWW
    
    BBBWWW
    
    BWWWBB
    
    WWBWBB
    
    BBBWBW
    
    1 1
    
    W
    
    2 2
    
    BB
    
    BB
    
    3 4
    
    BWBW
    
    WBWB
    
    BWBW
    
    4 2
    
    BB
    
    BB
    
    WW
    
    WW
    
    4 4
    
    WWBW
    
    BBWB
    
    WWBB
    
    BBBB
    
    1 5
    
    WBBWB

Output

    NO
    YES
    YES
    YES
    YES
    NO
    YES
    NO
    
Note

In the first example, it is impossible to ever change the color of any square
with an operation, so we output NO.

The second example is the case pictured above. As shown in that diagram, it is
possible for all squares to be white after two operations, so we output YES.

In the third and fourth examples, all squares are already the same color, so
we output YES.

In the fifth example we can do everything in two operations. First, select
positions (2, 1) and (1, 4) and color all squares with 1 \le x \le 2 and 1 \le
y \le 4 to white. Then, select positions (2, 1) and (3, 4) and color all
squares with 2 \le x \le 3 and 1 \le y \le 4 to white. After these two
operations all squares are white.","for _ in range(int(input())):
    n, m = map(int, input().split())
    a = []
 
    first_row = ''
    last_row = ''
 
    for i in range(n):
        a.append(input())
        first_row += a[-1][0]
        last_row += a[-1][-1]
 
    if len(set(a[0])) == 1 and a[0] != a[-1]:
        print('NO')
    elif len(set(first_row)) == 1 and first_row != last_row:
        print('NO')
    else:
        print('YES')",3,False,False,False,True,False,False,False,False,False,True,False,True,False,True,0.8303177337397029,0.35837302063265414,0.75
1955_F,1955_F_Slata_100%,codeforces2024,human,qwen2.5-7b-instruct,"Alice and Bob gathered in the evening to play an exciting game on a sequence
of n integers, each integer of the sequence doesn't exceed 4 . The rules of
the game are too complex to describe, so let's just describe the winning
condition — Alice wins if the [bitwise XOR](http://tiny.cc/xor_wiki_eng) of
all the numbers in the sequence is non-zero; otherwise, Bob wins.

The guys invited Eve to act as a judge. Initially, Alice and Bob play with n
numbers. After one game, Eve removes one of the numbers from the sequence,
then Alice and Bob play with n-1 numbers. Eve removes one number again, after
which Alice and Bob play with n - 2 numbers. This continues until the sequence
of numbers is empty.

Eve seems to think that in such a game, Alice almost always wins, so she wants
Bob to win as many times as possible. Determine the maximum number of times
Bob can win against Alice if Eve removes the numbers optimally.

Input

The first line contains an integer t (1 \le t \le 10^4 ) — the number of test
cases.

The first and only line of each test case contains four integers p_i (0 \le
p_i \le 200 ) — the number of ones, twos, threes, and fours in the sequence at
the beginning of the game.

Output

For each test case, print the maximum number of times Bob will win in a
separate line, if Eve removes the numbers optimally.

Example

Input

    5
    
    1 1 1 0
    
    1 0 1 2
    
    2 2 2 0
    
    3 3 2 0
    
    0 9 9 9

Output

    1
    1
    3
    3
    12
    
Note

In the first example, Bob wins when Eve has not removed any numbers yet.

In the second example, Bob wins if Eve removes one one and one three.","for i in range(int(input())):
  a,b,c,d=map(int,input().split())
  print(a//2+b//2+c//2+d//2+int(a%2+b%2+c%2==3))",3,True,False,False,True,False,True,True,True,False,False,False,True,False,True,0.7991488459036387,0.33565881581250573,0.75
1956_C,1956_C_danikzor_100%,codeforces2024,human,qwen2.5-7b-instruct,"The magical girl Nene has an n\times n matrix a filled with zeroes. The j -th
element of the i -th row of matrix a is denoted as a_{i, j} .

She can perform operations of the following two types with this matrix:

  * Type 1 operation: choose an integer i between 1 and n and a permutation p_1, p_2, \ldots, p_n of integers from 1 to n . Assign a_{i, j}:=p_j for all 1 \le j \le n simultaneously. 
  * Type 2 operation: choose an integer i between 1 and n and a permutation p_1, p_2, \ldots, p_n of integers from 1 to n . Assign a_{j, i}:=p_j for all 1 \le j \le n simultaneously. 

Nene wants to maximize the sum of all the numbers in the matrix
\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{n}a_{i,j} . She asks you to find the
way to perform the operations so that this sum is maximized. As she doesn't
want to make too many operations, you should provide a solution with no more
than 2n operations.

A permutation of length n is an array consisting of n distinct integers from 1
to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but
[1,2,2] is not a permutation (2 appears twice in the array), and [1,3,4] is
also not a permutation (n=3 but there is 4 in the array).

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 500 ). The description of test cases follows.

The only line of each test case contains a single integer n (1 \le n \le 500 )
— the size of the matrix a .

It is guaranteed that the sum of n^2 over all test cases does not exceed 5
\cdot 10^5 .

Output

For each test case, in the first line output two integers s and m (0\leq m\leq
2n ) — the maximum sum of the numbers in the matrix and the number of
operations in your solution.

In the k -th of the next m lines output the description of the k -th
operation:

  * an integer c (c \in \\{1, 2\\} ) — the type of the k -th operation; 
  * an integer i (1 \le i \le n ) — the row or the column the k -th operation is applied to; 
  * a permutation p_1, p_2, \ldots, p_n of integers from 1 to n — the permutation used in the k -th operation. 

Note that you don't need to minimize the number of operations used, you only
should use no more than 2n operations. It can be shown that the maximum
possible sum can always be obtained in no more than 2n operations.

Example

Input

    2
    
    1
    
    2

Output

    1 1
    1 1 1
    7 3
    1 1 1 2
    1 2 1 2
    2 1 1 2
    
Note

In the first test case, the maximum sum s=1 can be obtained in 1 operation by
setting a_{1, 1}:=1 .

In the second test case, the maximum sum s=7 can be obtained in 3 operations
as follows:

![](https://espresso.codeforces.com/4074275900ed2b8a474fda5b3a628454fc521f8a.png)

It can be shown that it is impossible to make the sum of the numbers in the
matrix larger than 7 .","def solve():
    n = int(input())
    print(n*(n+1)*(4*n-1)//6, 2*n)
    for i in range(1, n+1):
        print(1, i, *range(n, 0, -1))
        print(2, i, *range(n, 0, -1))
 
 
t = int(input())
for t in range(t, 0, -1):
    solve()",3,True,False,False,False,False,True,True,True,False,False,False,True,True,True,0.7688451478770758,0.3024658228970815,0.5833333333333334
1945_D,1945_D_vjudge.1_100%,codeforces2024,human,qwen2.5-7b-instruct,"The guys lined up in a queue of n people, starting with person number i = 1 ,
to ask Serafim the Owl about the meaning of life. Unfortunately, Kirill was
very busy writing the legend for this problem, so he arrived a little later
and stood at the end of the line after the n -th person. Kirill is completely
dissatisfied with this situation, so he decided to bribe some people ahead of
him.

For the i -th person in the queue, Kirill knows two values: a_i and b_i . If
at the moment Kirill is standing at position i , then he can choose any
position j such that j < i and exchange places with the person at position j .
In this case, Kirill will have to pay him a_j coins. And for each k such that
j < k < i , Kirill will have to pay b_k coins to the person at position k .
Kirill can perform this action any number of times.

Kirill is thrifty, so he wants to spend as few coins as possible, but he
doesn't want to wait too long, so Kirill believes he should be among the first
m people in line.

Help Kirill determine the minimum number of coins he will have to spend in
order to not wait too long.

Input

Each test consists of several sets of input data. The first line contains a
single integer t (1 \le t \le 10^4 ) — the number of test cases. Then follows
the description of the test case.

The first line of each test case contains two integers n and m (1 \le m \le n
\le 200\,000 ) — the number of people in the queue besides Kirill and the
maximum allowable final position of Kirill, respectively.

The second line contains n integers a_1, a_2, \dots, a_n separated by spaces
(1 \le a_i \le 10^9 ).

The third line contains n integers b_1, b_2, \dots, b_n separated by spaces (1
\le b_i \le 10^9 ).

It is guaranteed that the sum of the values of n over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single integer — the minimum number of coins
Kirill needs to spend.

Example

Input

    4
    
    4 2
    
    7 3 6 9
    
    4 3 8 5
    
    6 2
    
    6 9 7 1 8 3
    
    5 8 8 1 4 1
    
    7 7
    
    7 2 9 2 6 5 9
    
    9 1 10 7 1 4 9
    
    2 1
    
    2 3
    
    1 1

Output

    14
    22
    9
    3","def solve(n, k, a, b):
    c = [min(a[i], b[i]) for i in range(n)]
 
    suff = [0] * (n + 1)
    for i in range(n - 1, -1, -1):
        suff[i] = suff[i + 1] + c[i]
 
    ans = float('inf')
    for i in range(k):
        ans = min(ans, a[i] + suff[i + 1])
 
    print(ans)
 
t = int(input())
for _ in range(t):
    n, k = map(int, input().split())
    a = list(map(int, input().split()))
    b = list(map(int, input().split()))
 
    solve(n, k, a, b)",3,True,False,False,True,True,True,True,True,False,False,False,False,True,True,0.7496610679050388,0.28756566240606496,0.6666666666666666
1974_A,1974_A_Ridham__50.00%,codeforces2024,human,qwen2.5-7b-instruct,"Little Rosie has a phone with a desktop (or launcher, as it is also called).
The desktop can consist of several screens. Each screen is represented as a
grid of size 5 \times 3 , i.e., five rows and three columns.

There are x applications with an icon size of 1 \times 1 cells; such an icon
occupies only one cell of the screen. There are also y applications with an
icon size of 2 \times 2 cells; such an icon occupies a square of 4 cells on
the screen. Each cell of each screen can be occupied by no more than one icon.

Rosie wants to place the application icons on the minimum number of screens.
Help her find the minimum number of screens needed.

Input

The first line of the input contains t (1 \leq t \leq 10^4 ) — the number of
test cases.

The first and only line of each test case contains two integers x and y (0
\leq x, y \leq 99 ) — the number of applications with a 1 \times 1 icon and
the number of applications with a 2 \times 2 icon, respectively.

Output

For each test case, output the minimal number of required screens on a
separate line.

Example

Input

    11
    
    1 1
    
    7 2
    
    12 4
    
    0 3
    
    1 0
    
    8 1
    
    0 0
    
    2 0
    
    15 0
    
    8 2
    
    0 9

Output

    1
    1
    2
    2
    1
    1
    0
    1
    1
    2
    5
    
Note

The solution for the first test case can look as follows:

![](https://espresso.codeforces.com/f9882979f0d9b5c31c5260fd626217227c2f05de.png)
Blue squares represent empty spaces for icons, green squares represent 1
\times 1 icons, red squares represent 2 \times 2 icons

The solution for the third test case can look as follows:

![](https://espresso.codeforces.com/0e737a290e056a29f38918bf06c13be790307a8d.png)","n = int(input())
 
result = []
 
for _ in range(n):
    
    x , y = list(map(int , input().split()))
    
    space_x = x*1
    space_y = y*4
    total_space = space_y + space_x
    
    if (y % 2 == 0):
        screen_require_for_y = y // 2
    else:
        screen_require_for_y = (y // 2) + 1
        
    # print(screen_require_for_y)
    
    
    remaining_cells =( 15*screen_require_for_y) - space_y
    
    if (space_x <= remaining_cells):
        result.append(screen_require_for_y)
    else :
        extra_space = space_x - remaining_cells
        # if extra_space <= 15 :
        #     extra_screen = 1
        if space_x % 15 == 0:
            extra_screen = space_x // 15
        else :
           extra_screen = ( extra_space // 15 ) + 1
           
        result.append(extra_screen + screen_require_for_y)
    
 
print(""\n"".join(map(str,result)))",3,False,False,False,False,False,True,True,True,False,False,True,False,True,False,0.94334196742054,0.6948157462567002,0.8333333333333334
1957_C,1957_C_hx199411_100%,codeforces2024,human,qwen2.5-7b-instruct,"You are given an n \times n chessboard where you and the computer take turns
alternatingly to place white rooks & black rooks on the board respectively.
While placing rooks, you have to ensure that no two rooks attack each other.
Two rooks attack each other if they share the same row or column regardless of
color.

A valid move is placing a rook on a position (r , c ) such that it doesn't
attack any other rook.

You start first, and when you make a valid move in your turn, placing a white
rook at position (r , c ), the computer will mirror you and place a black rook
at position (c , r ) in its turn. If r = c , then the computer can't mirror
your move, and skips its turn.

You have already played k moves with the computer (the computer tries to
mirror these moves too), and you must continue playing the game until there
are no valid moves remaining. How many different final configurations are
possible when you continue the game after the k moves? It is guaranteed that
the k moves and the implied computer moves are valid. Since the answer may be
large, print it modulo 10^9+7 .

Two configurations are considered different if there exists a coordinate (r ,
c ) which has a rook in one configuration, but not in the other or the color
of the rook on the coordinate is different.

Input

The first line contains a single integer t (1 \leq t \leq 10^4 ) — the number
of test cases.

The first line of each test case contains two integers n and k (1 \leq n \leq
3 \cdot 10^5 , 0 \leq k \leq n ) — the size of the chessboard and the number
of moves you have already played respectively.

Each of the next k lines of the test case contains two integers r_i and c_i ,
denoting the i -th move you made.

It is guaranteed that the k moves and the implied computer moves are valid.

It is guaranteed that the sum of n over all test cases does not exceed 3 \cdot
10^5 .

Output

For each test case, output a single integer on a new line — the total number
of possible final configurations modulo 10^9+7 .

Example

Input

    3
    
    4 1
    
    1 2
    
    8 1
    
    7 6
    
    1000 4
    
    4 4
    
    952 343
    
    222 333
    
    90 91

Output

    3
    331
    671968183
    
Note

In the first test case, we have a 4 \times 4 grid and you've already played 1
move. After you and the computer play a turn, we have a white rook at (1 , 2
), and a black rook at (2 , 1 ). There are three possible configurations from
this state —

  1. You place a white rook at (3 , 4 ) and the computer places a black rook at (4 , 3 ) as a response. 
  2. You place a white rook at (4 , 3 ) and the computer places a black rook at (3 , 4 ) as a response. 
  3. You place a white rook at (3 , 3 ) and then at (4 , 4 ), or the other way around. They both result in the same configuration. 

![](https://espresso.codeforces.com/e7812b315860201676eb89d5690dd84b3eb85862.png)","t = int(input())
while t:
    t -= 1
    n,k = list(map(int,input().split(' ')))
    num = 0
    for i in range(k):
        c,r = list(map(int,input().split(' ')))
        if c == r:
            num += 1
        else:
            num += 2
    m = n - num
    if m == 0:
        print(1)
    elif m == 1:
        print(1)
    else:
        dp = [0 for i in range(m+1)]
        dp[1] = 1
        dp[2] = 3
        for i in range(3,m+1):
            dp[i] = (dp[i-1] + (i-1)*dp[i-2]*2)%(10**9+7)
        print(dp[m])",3,True,False,False,True,False,True,True,True,True,False,True,True,True,True,0.40849978776192514,-0.09525744994067215,0.5
1954_A,1954_A_michi330_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"Alice and Bob have bought a ribbon consisting of n parts. Now they want to
paint it.

First, Alice will paint every part of the ribbon into one of m colors. For
each part, she can choose its color arbitrarily.

Then, Bob will choose at most k  parts of the ribbon and repaint them into the
same color (he chooses the affected parts and the color arbitrarily).

Bob would like all parts to have the same color. However, Alice thinks that
this is too dull, so she wants to paint the ribbon in such a way that Bob
cannot make all parts have the same color.

Is it possible to paint the ribbon in such a way?

Input

The first line contains one integer t (1 \le t \le 1000 ) — the number of test
cases.

Each test case consists of one line containing three integers n , m and k (1
\le m, k \le n \le 50 ) — the number of parts, the number of colors and the
number of parts Bob can repaint, respectively.

Output

For each test case, print YES if Alice can paint the ribbon so that Bob cannot
make all parts have the same color. Otherwise, print NO.

You can print every letter in any register. For example, Yes, yes, yEs will
all be recognized as positive answer.

Example

Input

    5
    
    1 1 1
    
    5 1 1
    
    5 2 1
    
    5 2 2
    
    5 5 3

Output

    NO
    NO
    YES
    NO
    YES
    
Note

In the first test case, a ribbon consists of 1 part. So all its parts will
always have the same color.

In the second test case, there is only 1 color.

In the third test case, Alice can paint the ribbon as follows: [1, 2, 1, 2, 1]
. It's impossible to change the color of at most 1 part so that all parts have
the same color.

In the fourth test case, no matter how Alice paints the ribbon, Bob will
always be able to repaint 2 parts so that all parts have the same color.

In the fifth test case, Alice can paint the ribbon as follows: [1, 2, 3, 4, 5]
. It's impossible to change the color of at most 3 parts so that all parts
have the same color.","import math
t=int(input())
for itest in range(0,t,1):
    n,m,k=map(int,input().split())
    if n<=k or n-math.ceil(n/m)<k:
        print('NO')
    else:
        print('Yes')",3,False,False,False,True,False,True,True,False,True,True,False,True,True,True,0.8650134958699403,0.41292168461901685,0.75
1948_A,1948_A_Tirthraj_Raval_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"You are given an integer n .

Your task is to build a string of uppercase Latin letters. There must be
exactly n special characters in this string. Let's call a character special if
it is equal to exactly one of its neighbors.

For example, there are 6 special characters in the AAABAACC string (at
positions: 1 , 3 , 5 , 6 , 7 and 8 ).

Print any suitable string or report that there is no such string.

Input

The first line contains a single integer t (1 \le t \le 50 ) — the number of
test cases.

The only line of each test case contains a single integer n (1 \le n \le 50 ).

Output

For each test case, print the answer as follows:

  * if there is no suitable string, print one line containing the string NO; 
  * otherwise, print two lines. The first line should contain the string YES; on the second line print a string of length at most 200  — the answer itself (it can be shown that if some answers exist, then there is an answer of length at most 200 ). If there are several solutions, print any of them. 

Example

Input

    3
    
    6
    
    1
    
    2

Output

    YES
    AAABAACC
    NO
    YES
    MM","t = int(input())
for _ in range(t):
        n = int(input())
        
        if n % 2 == 1:
            print(""NO"")
        else:
            print(""YES"")
            pattern = []
            for i in range(n // 2):
                pattern.append(""AB""[i % 2])
                pattern.append(""AB""[(i % 2) ^ 1])
            print("""".join(pattern))",3,False,False,False,True,False,True,True,False,False,False,True,True,True,True,0.5175726262592018,0.018300057959463222,0.5833333333333334
1921_B,1921_B_AmirSol_7.69%,codeforces2024,human,qwen2.5-7b-instruct,"In order to test the hypothesis about the cats, the scientists must arrange
the cats in the boxes in a specific way. Of course, they would like to test
the hypothesis and publish a sensational article as quickly as possible,
because they are too engrossed in the next hypothesis about the phone's
battery charge.

Scientists have n boxes in which cats may or may not sit. Let the current
state of the boxes be denoted by the sequence b_1, \dots, b_n : b_i = 1 if
there is a cat in box number i , and b_i = 0 otherwise.

Fortunately, the unlimited production of cats has already been established, so
in one day, the scientists can perform one of the following operations:

  * Take a new cat and place it in a box (for some i such that b_i = 0 , assign b_i = 1 ). 
  * Remove a cat from a box and send it into retirement (for some i such that b_i = 1 , assign b_i = 0 ). 
  * Move a cat from one box to another (for some i, j such that b_i = 1, b_j = 0 , assign b_i = 0, b_j = 1 ). 

It has also been found that some boxes were immediately filled with cats.
Therefore, the scientists know the initial position of the cats in the boxes
s_1, \dots, s_n and the desired position f_1, \dots, f_n .

Due to the large amount of paperwork, the scientists do not have time to solve
this problem. Help them for the sake of science and indicate the minimum
number of days required to test the hypothesis.

Input

Each test consists of several test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. This is followed by
descriptions of the test cases.

Each test case consists of three lines.

The first line of each test case contains a single integer n (1 \le n \le 10^5
) — the number of boxes.

The second line of each test case contains a string s of n characters, where
the i -th character is '1' if there is a cat in the i -th box and '0'
otherwise.

The third line of each test case contains a string f of n characters, where
the i -th character is '1' if there should be a cat in the i -th box and '0'
otherwise.

It is guaranteed that in a test the sum of n over all test cases does not
exceed 10^5 .

Output

For each test case, output a single integer on a separate line — the minimum
number of operations required to obtain the desired position from the initial
position. It can be shown that a solution always exists.

Example

Input

    6
    
    5
    
    10010
    
    00001
    
    1
    
    1
    
    1
    
    3
    
    000
    
    111
    
    4
    
    0101
    
    1010
    
    3
    
    100
    
    101
    
    8
    
    10011001
    
    11111110

Output

    2
    0
    3
    2
    1
    4
    
Note

In the first test case, you can first move the cat from the first box to the
fifth, and then remove the cat from the fourth box.

In the second test case, there is nothing to do — the only cat is already
sitting in the correct box.

In the third test case of input data, it takes three days to place a cat in
each box.","def solution(n: int, s1: str, s2: str) -> int:
    counter = 0
    i = 0
    while i < n:
        if s1[i] != s2[i]:
            if i < n - 1 and s1[i + 1] != s2[i + 1] and s1[i] != s1[i + 1]:
                counter += 1
                i += 2
            else:
                counter += 1
                i += 1
        else:
            i += 1
    return counter
 
# Input and output handling
t = int(input())
for _ in range(t):
    n = int(input())
    s1 = input()
    s2 = input()
    print(solution(n, s1, s2))",3,False,False,False,False,False,True,False,False,False,False,False,False,True,False,0.6997874324774109,0.20896872931554,0.6666666666666666
1968_F,1968_F_NoInternetName_100%,codeforces2024,human,qwen2.5-7b-instruct,"Let us call an array x_1,\dots,x_m interesting if it is possible to divide the
array into k>1 parts so that [bitwise XOR](http://tiny.cc/xor_wiki_eng) of
values from each part are equal.

More formally, you must split array x into k consecutive segments, each
element of x must belong to exactly 1 segment. Let y_1,\dots,y_k be the XOR of
elements from each part respectively. Then y_1=y_2=\dots=y_k must be
fulfilled.

For example, if x = [1, 1, 2, 3, 0] , you can split it as follows:
[\color{blue}1], [\color{green}1], [\color{red}2, \color{red}3, \color{red}0]
. Indeed \color{blue}1=\color{green}1=\color{red}2 \oplus \color{red}3\oplus
\color{red}0 .

You are given an array a_1,\dots,a_n . Your task is to answer q queries:

  * For fixed l , r , determine whether the subarray a_l,a_{l+1},\dots,a_r is interesting. 

Input

The first line contains a single integer t (1\le t\le 10^4 ) — the number of
test cases.

The first line of each test case contains two integers n and q (2 \le n \le 2
\cdot 10^5 , 1 \le q \le 2 \cdot 10^5 ) — the number of elements in the array
and the number of queries respectively.

The next line contains n integers a_1,\dots,a_n (0 \le a_i < 2^{30} ) —
elements of the array.

Each of the next q lines contains two integers l and r (1 \le l < r \le n )
describing the query.

It is guaranteed that the sum of n over all testcases does not exceed 2 \cdot
10^5 .

It is guaranteed that the sum of q over all testcases does not exceed 2 \cdot
10^5 .

Output

For each query, output ""YES"" if the subarray is interesting and ""NO""
otherwise.

You can output ""Yes"" and ""No"" in any case (for example, the strings ""yES"",
""yes"", and ""Yes"" will be recognized as correct answers).

Example

Input

    4
    
    5 5
    
    1 1 2 3 0
    
    1 5
    
    2 4
    
    3 5
    
    1 3
    
    3 4
    
    5 5
    
    1 2 3 4 5
    
    1 5
    
    2 4
    
    3 5
    
    1 3
    
    2 3
    
    7 4
    
    12 9 10 9 10 11 9
    
    1 5
    
    1 7
    
    2 6
    
    2 7
    
    11 4
    
    0 0 1 0 0 1 0 1 1 0 1
    
    1 2
    
    2 5
    
    6 9
    
    7 11

Output

    YES
    YES
    NO
    NO
    NO
    
    YES
    NO
    NO
    YES
    NO
    
    NO
    NO
    NO
    NO
    
    YES
    NO
    YES
    YES
    
Note

Explanation for the first test case:

The first query is described in the statement.

In the second query, we should divide [1,2,3] . A possible division is
[1,2],[3] , since 1\oplus 2=3 .

It can be shown that for queries 3,4,5 , the subarrays are not interesting.","from collections import defaultdict
 
 
def read(cast):
    return map(cast, input().split())
 
 
def bin_search(arr, predicate):
    l, r = 0, len(arr)
 
    while l + 1 < r:
        mid = (l + r) // 2
        if predicate(arr[mid]):
            l = mid
        else:
            r = mid
 
    if predicate(arr[l]):
        return l
    return None
 
 
def upper_bound(arr, predicate):
    return bin_search(arr, predicate)
 
 
def lower_bound(arr, predicate):
    result = bin_search(arr, predicate)
    if result is not None:
        return result + 1
    return None
 
 
def main():
    n, q = read(int)
 
    a = list(read(int))
    x = [0]
    inds = defaultdict(list)
    inds[0].append(0)
    for i in a:
        x.append(x[-1] ^ i)
        inds[x[-1]].append(len(x) - 1)
 
    for i in range(q):
        l, r = read(int)
 
        if x[l - 1] == x[r]:
            print('Yes')
            continue
 
        lower = inds[x[r]][lower_bound(inds[x[r]], lambda arg: arg < l) or 0]
        upper = inds[x[l - 1]][upper_bound(inds[x[l - 1]], lambda arg: arg <= r)]
 
        if upper > lower:
            print('Yes')
        else:
            print('No')
 
 
if __name__ == '__main__':
    # t = 1
    t, = read(int)
    for _ in range(t):
        main()",3,True,False,False,True,False,True,True,True,True,False,False,True,True,True,0.9137071974363752,0.5100758392676379,0.8333333333333334
1936_A,1936_A_mihir111p_100%,codeforces2024,human,qwen2.5-7b-instruct,"This is an interactive problem.

There is a secret sequence p_0, p_1, \ldots, p_{n-1} , which is a permutation
of \\{0,1,\ldots,n-1\\} .

You need to find any two indices i and j such that p_i \oplus p_j is
maximized, where \oplus denotes the [bitwise XOR
operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).

To do this, you can ask queries. Each query has the following form: you pick arbitrary indices a , b , c , and d (0 \le a,b,c,d < n ). Next, the jury calculates x = (p_a \mid p_b) and y = (p_c \mid p_d) , where | denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR). Finally, you receive the result of comparison between x and y . In other words, you are told if x < y , x > y , or x = y .

Please find any two indices i and j (0 \le i,j < n ) such that p_i \oplus p_j
is maximum among all such pairs, using at most 3n queries. If there are
multiple pairs of indices satisfying the condition, you may output any one of
them.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 10^3 ). The description of the test cases follows.

Interaction

The first line of each test case contains one integer n (2 \le n \le 10^4 ).
At this moment, the permutation p_0, p_1, \ldots, p_{n-1} is chosen. The
interactor in this task is not adaptive. In other words, the sequence p is
fixed in every test case and does not change during the interaction.

To ask a query, you need to pick four indices a , b , c , and d (0 \le a,b,c,d
< n ) and print the line of the following form:

  * ""? a b c d"" 

After that, you receive:

  * ""<"" if (p_a \mid p_b) < (p_c \mid p_d) ; 
  * ""="" if (p_a \mid p_b) = (p_c \mid p_d) ; 
  * "">"" if (p_a \mid p_b) > (p_c \mid p_d) . 

You can make at most 3n queries of this form.

Next, if your program has found a pair of indices i and j (0 \le i, j < n )
such that p_i \oplus p_j is maximized, print the line of the following form:

  * ""! i j"" 

Note that this line is not considered a query and is not taken into account
when counting the number of queries asked.

After this, proceed to the next test case.

If you make more than 3n queries during an interaction, your program must
terminate immediately, and you will receive the Wrong Answer verdict.
Otherwise, you can get an arbitrary verdict because your solution will
continue to read from a closed stream.

After printing a query or the answer for a test case, do not forget to output
the end of line and flush the output. Otherwise, you will get the verdict
Idleness Limit Exceeded. To do this, use:

  * fflush(stdout) or cout.flush() in C++; 
  * System.out.flush() in Java; 
  * flush(output) in Pascal; 
  * stdout.flush() in Python; 
  * see the documentation for other languages. 

It is guaranteed that the sum of n over all test cases does not exceed 10^4 .

Hacks

To hack, follow the test format below.

The first line contains the number of test cases t (1 \le t \le 10^3 ). The
description of the test cases follows.

The first line of each test case contains one integer n (2 \le n \le 10^4 ).

The second line of each test case contains n integers p_0,p_1,\ldots,p_{n-1} ,
which represent a permutation of integers from 0 to n - 1 .

The sum of n over all test cases should not exceed 10^4 .

Example

Input

    2
    4
    
    <
    
    =
    
    >
    
    2
    
Output

    ? 0 2 3 1
    
    ? 1 1 2 3
    
    ? 1 2 0 3
    
    ! 3 2
    
    ! 0 1
    
Note

In the first test case, the hidden permutation is p=[0,3,1,2] .

For the query ""? 0 2 3 1"", the jury return ""<"" because (p_0 \mid p_2) = (0
\mid 1) =1 < (p_3 \mid p_1) = (2 \mid 3) = 3 .

For the query ""? 1 1 2 3"", the jury return ""="" because (p_1 \mid p_1) = (3\mid
3)= 3 = (p_2 \mid p_3) = (1 \mid 2)=3 .

For the query ""? 1 2 0 3"", the jury return "">"" because (p_1 \mid p_2) = (3
\mid 1) = 3 > (p_0 \mid p_3) = (0\mid 2)=2 .

The answer i = 3 and j = 2 is valid: (p_3 \oplus p_2) = (2 \oplus 1) = 3 is
indeed equal to the maximum possible value of p_i \oplus p_j . Another valid
answer would be i=0 and j=1 . As the number of queries does not exceed 3n=12 ,
the answer is considered correct.

In the second test case, n = 2 , so p is either [0, 1] or [1, 0] . In any
case, p_0 \oplus p_1 = 1 is maximum possible.","def find(a,b,c,d):
    print(""?"",a,b,c,d)
    return input()
    
for _ in range(int(input())):
    n = int(input())
    ans1 = 0
    for i in range(1,n):
        x = find(ans1,ans1,i,i)
        if x == ""<"":
            ans1 = i
    mx = 0
    v = [0]
    # print(ans1)
    for i in range(1,n):
        x = find(mx,ans1,i,ans1)
        if x == ""<"":
            v = []
            mx = i
            v.append(i)
        elif x ==""="":
            v.append(i)
    mx= v[0]
    # print(v)
    ans = v[0]
    for i in range(1,len(v)):
        x = find(ans,ans,v[i],v[i])
        if x == "">"":
            ans = v[i]
    print(""!"", ans,ans1)",3,True,False,False,False,False,True,True,False,False,False,False,False,False,False,0.8819248617484324,0.46449771740090734,0.75
1968_F,1968_F_parth7042_100%,codeforces2024,human,qwen2.5-7b-instruct,"Let us call an array x_1,\dots,x_m interesting if it is possible to divide the
array into k>1 parts so that [bitwise XOR](http://tiny.cc/xor_wiki_eng) of
values from each part are equal.

More formally, you must split array x into k consecutive segments, each
element of x must belong to exactly 1 segment. Let y_1,\dots,y_k be the XOR of
elements from each part respectively. Then y_1=y_2=\dots=y_k must be
fulfilled.

For example, if x = [1, 1, 2, 3, 0] , you can split it as follows:
[\color{blue}1], [\color{green}1], [\color{red}2, \color{red}3, \color{red}0]
. Indeed \color{blue}1=\color{green}1=\color{red}2 \oplus \color{red}3\oplus
\color{red}0 .

You are given an array a_1,\dots,a_n . Your task is to answer q queries:

  * For fixed l , r , determine whether the subarray a_l,a_{l+1},\dots,a_r is interesting. 

Input

The first line contains a single integer t (1\le t\le 10^4 ) — the number of
test cases.

The first line of each test case contains two integers n and q (2 \le n \le 2
\cdot 10^5 , 1 \le q \le 2 \cdot 10^5 ) — the number of elements in the array
and the number of queries respectively.

The next line contains n integers a_1,\dots,a_n (0 \le a_i < 2^{30} ) —
elements of the array.

Each of the next q lines contains two integers l and r (1 \le l < r \le n )
describing the query.

It is guaranteed that the sum of n over all testcases does not exceed 2 \cdot
10^5 .

It is guaranteed that the sum of q over all testcases does not exceed 2 \cdot
10^5 .

Output

For each query, output ""YES"" if the subarray is interesting and ""NO""
otherwise.

You can output ""Yes"" and ""No"" in any case (for example, the strings ""yES"",
""yes"", and ""Yes"" will be recognized as correct answers).

Example

Input

    4
    
    5 5
    
    1 1 2 3 0
    
    1 5
    
    2 4
    
    3 5
    
    1 3
    
    3 4
    
    5 5
    
    1 2 3 4 5
    
    1 5
    
    2 4
    
    3 5
    
    1 3
    
    2 3
    
    7 4
    
    12 9 10 9 10 11 9
    
    1 5
    
    1 7
    
    2 6
    
    2 7
    
    11 4
    
    0 0 1 0 0 1 0 1 1 0 1
    
    1 2
    
    2 5
    
    6 9
    
    7 11

Output

    YES
    YES
    NO
    NO
    NO
    
    YES
    NO
    NO
    YES
    NO
    
    NO
    NO
    NO
    NO
    
    YES
    NO
    YES
    YES
    
Note

Explanation for the first test case:

The first query is described in the statement.

In the second query, we should divide [1,2,3] . A possible division is
[1,2],[3] , since 1\oplus 2=3 .

It can be shown that for queries 3,4,5 , the subarrays are not interesting.","import sys
input = sys.stdin.read
from collections import defaultdict
from bisect import bisect_left
 
def solve():
    data = input().split()
    index = 0
    
    # Read number of test cases
    t = int(data[index])
    index += 1
    
    results = []
    
    for _ in range(t):
        # Read n and q
        n = int(data[index])
        q = int(data[index + 1])
        index += 2
        
        # Read the array
        a = [0] * (n + 1)
        pf = [0] * (n + 1)
        mp = defaultdict(list)
        
        mp[0].append(0)
        
        for i in range(1, n + 1):
            a[i] = int(data[index])
            index += 1
            pf[i] = pf[i - 1] ^ a[i]
            mp[pf[i]].append(i)
        
        for _ in range(q):
            l = int(data[index])
            r = int(data[index + 1])
            index += 2
            
            x = pf[r] ^ pf[l - 1]
            if x == 0:
                results.append(""YES"")
                continue
            
            # Access lists v1 and v2 from map mp
            v1 = mp[pf[r]]
            v2 = mp[pf[l - 1]]
            
            # Find the range within v1 and v2
            it1 = bisect_left(v1, l)
            it2 = bisect_left(v2, r) - 1
            
            # Check if the found indices are valid and satisfy the condition
            if it1 < len(v1) and it2 >= 0 and v1[it1] < v2[it2]:
                results.append(""YES"")
            else:
                results.append(""NO"")
    
    # Print all results at the end
    print(""\n"".join(results))
 
# Run the solve function
solve()",3,True,True,True,True,False,True,True,True,False,True,True,False,False,False,0.7313462640221646,0.25837347786750126,0.6666666666666666
1936_A,1936_A_vikenscars_100%,codeforces2024,human,qwen2.5-7b-instruct,"This is an interactive problem.

There is a secret sequence p_0, p_1, \ldots, p_{n-1} , which is a permutation
of \\{0,1,\ldots,n-1\\} .

You need to find any two indices i and j such that p_i \oplus p_j is
maximized, where \oplus denotes the [bitwise XOR
operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR).

To do this, you can ask queries. Each query has the following form: you pick arbitrary indices a , b , c , and d (0 \le a,b,c,d < n ). Next, the jury calculates x = (p_a \mid p_b) and y = (p_c \mid p_d) , where | denotes the [bitwise OR operation](https://en.wikipedia.org/wiki/Bitwise_operation#OR). Finally, you receive the result of comparison between x and y . In other words, you are told if x < y , x > y , or x = y .

Please find any two indices i and j (0 \le i,j < n ) such that p_i \oplus p_j
is maximum among all such pairs, using at most 3n queries. If there are
multiple pairs of indices satisfying the condition, you may output any one of
them.

Input

Each test contains multiple test cases. The first line contains the number of
test cases t (1 \le t \le 10^3 ). The description of the test cases follows.

Interaction

The first line of each test case contains one integer n (2 \le n \le 10^4 ).
At this moment, the permutation p_0, p_1, \ldots, p_{n-1} is chosen. The
interactor in this task is not adaptive. In other words, the sequence p is
fixed in every test case and does not change during the interaction.

To ask a query, you need to pick four indices a , b , c , and d (0 \le a,b,c,d
< n ) and print the line of the following form:

  * ""? a b c d"" 

After that, you receive:

  * ""<"" if (p_a \mid p_b) < (p_c \mid p_d) ; 
  * ""="" if (p_a \mid p_b) = (p_c \mid p_d) ; 
  * "">"" if (p_a \mid p_b) > (p_c \mid p_d) . 

You can make at most 3n queries of this form.

Next, if your program has found a pair of indices i and j (0 \le i, j < n )
such that p_i \oplus p_j is maximized, print the line of the following form:

  * ""! i j"" 

Note that this line is not considered a query and is not taken into account
when counting the number of queries asked.

After this, proceed to the next test case.

If you make more than 3n queries during an interaction, your program must
terminate immediately, and you will receive the Wrong Answer verdict.
Otherwise, you can get an arbitrary verdict because your solution will
continue to read from a closed stream.

After printing a query or the answer for a test case, do not forget to output
the end of line and flush the output. Otherwise, you will get the verdict
Idleness Limit Exceeded. To do this, use:

  * fflush(stdout) or cout.flush() in C++; 
  * System.out.flush() in Java; 
  * flush(output) in Pascal; 
  * stdout.flush() in Python; 
  * see the documentation for other languages. 

It is guaranteed that the sum of n over all test cases does not exceed 10^4 .

Hacks

To hack, follow the test format below.

The first line contains the number of test cases t (1 \le t \le 10^3 ). The
description of the test cases follows.

The first line of each test case contains one integer n (2 \le n \le 10^4 ).

The second line of each test case contains n integers p_0,p_1,\ldots,p_{n-1} ,
which represent a permutation of integers from 0 to n - 1 .

The sum of n over all test cases should not exceed 10^4 .

Example

Input

    2
    4
    
    <
    
    =
    
    >
    
    2
    
Output

    ? 0 2 3 1
    
    ? 1 1 2 3
    
    ? 1 2 0 3
    
    ! 3 2
    
    ! 0 1
    
Note

In the first test case, the hidden permutation is p=[0,3,1,2] .

For the query ""? 0 2 3 1"", the jury return ""<"" because (p_0 \mid p_2) = (0
\mid 1) =1 < (p_3 \mid p_1) = (2 \mid 3) = 3 .

For the query ""? 1 1 2 3"", the jury return ""="" because (p_1 \mid p_1) = (3\mid
3)= 3 = (p_2 \mid p_3) = (1 \mid 2)=3 .

For the query ""? 1 2 0 3"", the jury return "">"" because (p_1 \mid p_2) = (3
\mid 1) = 3 > (p_0 \mid p_3) = (0\mid 2)=2 .

The answer i = 3 and j = 2 is valid: (p_3 \oplus p_2) = (2 \oplus 1) = 3 is
indeed equal to the maximum possible value of p_i \oplus p_j . Another valid
answer would be i=0 and j=1 . As the number of queries does not exceed 3n=12 ,
the answer is considered correct.

In the second test case, n = 2 , so p is either [0, 1] or [1, 0] . In any
case, p_0 \oplus p_1 = 1 is maximum possible.","#!/usr/bin/python3
 
import sys
 
def ask(a, b, c, d):
	request = f""? {a} {b} {c} {d}""
	print(request, flush=True)
	return input()
	
 
def solve(n):
	max_item_idx = 0
	for i in range(1, n):
		ans = ask(max_item_idx, max_item_idx, i, i)
		if ans == ""<"":
			max_item_idx = i
 
	pair_idx = max_item_idx
	
	for i in range(n):
		ans1 = ask(max_item_idx, pair_idx, max_item_idx, i)
 
		if ans1 == ""<"":
			pair_idx = i
		elif ans1 == ""="":
			ans2 = ask(pair_idx, pair_idx, i, i)
			if ans2 == "">"":
				pair_idx = i
 
	print(f""! {max_item_idx} {pair_idx}"")
 
t = int(input())
 
for _ in range(t):
	n = int(input())
	solve(n)",3,True,False,False,False,False,False,False,False,False,False,True,False,False,False,0.821589706972496,0.3625661126329662,0.6666666666666666
1932_A,1932_A_5styui_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"During your journey through computer universes, you stumbled upon a very
interesting world. It is a path with n consecutive cells, each of which can
either be empty, contain thorns, or a coin. In one move, you can move one or
two cells along the path, provided that the destination cell does not contain
thorns (and belongs to the path). If you move to the cell with a coin, you
pick it up.

![](https://espresso.codeforces.com/34bd88a4aba4a1ae98e5681455c4a47900b7b9a8.png)
Here, green arrows correspond to legal moves, and the red arrow corresponds to
an illegal move.

You want to collect as many coins as possible. Find the maximum number of
coins you can collect in the discovered world if you start in the leftmost
cell of the path.

Input

The first line of input contains a single integer t (1 \le t \le 1000 ) — the
number of test cases. Then the descriptions of the test cases follow.

The first line of each test case contains a single integer n (1 \le n \le 50 )
— the length of the path.

The second line of each test case contains a string of n characters, the
description of the path. The character '.' denotes an empty cell, '@' denotes
a cell with a coin, and '*' denotes a cell with thorns. It is guaranteed that
the first cell is empty.

Output

For each test case, output a single integer, the maximum number of coins you
can collect.

Example

Input

    3
    
    10
    
    .@@*@.**@@
    
    5
    
    .@@@@
    
    15
    
    .@@..@***..@@@*

Output

    3
    4
    3
    
Note

The picture for the first example is in the problem statement.

Here is the picture for the second example:

![](https://espresso.codeforces.com/68fd7116585f37e79535fbc164a552cc8e148b75.png)

And here is the picture for the third example:

![](https://espresso.codeforces.com/1695fc45669a1bf1d6e1b3d4901cdd3cda38273c.png)","a = int(input())
s = 0
 
for i in range(a):
    d = int(input()) 
    b = input()
    for j in range(len(b)):
        if b[j] == '@':
            s = s+1
        elif b[j] == '*':
            if b[::]:
                break
            elif b[j+1] == '*':
                break
            
    print(s)
    s = 0",3,False,False,False,False,False,False,False,False,False,False,False,True,False,False,,,
1968_B,1968_B_MALIK_ANTUPARTHI_100%,codeforces2024,human,qwen2.5-7b-instruct,"You are given two binary strings a and b . A binary string is a string
consisting of the characters '0' and '1'.

Your task is to determine the maximum possible number k such that a prefix of
string a of length k is a subsequence of string b .

A sequence a is a subsequence of a sequence b if a can be obtained from b by
the deletion of several (possibly, zero or all) elements.

Input

The first line consists of a single integer t (1 \le t \le 10^4 ) — the number
of test cases.

The first line of each test case contains two integers n and m (1\le n,m \le 2
\cdot 10^5 ) — the length of string a and the length of string b ,
respectively.

The second line of each test case contains a binary string a of length n .

The third line of each test case contains a binary string b of length m .

It is guaranteed that the sum of values n over all test cases does not exceed
2 \cdot 10^5 . Similarly, the sum of values m over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single number — the maximum k , such that the
first k characters of a form a subsequence of b .

Example

Input

    6
    
    5 4
    
    10011
    
    1110
    
    3 3
    
    100
    
    110
    
    1 3
    
    1
    
    111
    
    4 4
    
    1011
    
    1111
    
    3 5
    
    100
    
    11010
    
    3 1
    
    100
    
    0

Output

    2
    2
    1
    1
    3
    0
    
Note

In the first example, the string '10 ' is a subsequence of
'1\color{red}11\color{red}0 ' but the string '100 ' is not. So the answer is 2
.

In the fifth example, a ='100 ', b ='1\color{red}{10}1\color{red}0 ', whole
string a is a subsequence of string b . So the answer is 3 .

In the sixth example, string b does not contain '1 ' so the answer is 0 .","a=int(input())
for i in range(a):
    b,c=map(int,input().split())
    d=input()
    e=input()
    k=0
    for j in range(b):
        if d[j] in e[k:]:
            k=e[k:].index(d[j])+1+k
            if k==c or j==b-1:
                k=j+1
                break
        else:
            k=j
            break
    print(k)",3,True,False,False,True,False,False,False,False,False,False,True,True,True,False,0.5225905238974631,0.024000142121750116,0.5833333333333334
1931_C,1931_C_Rohidul_100%,codeforces2024,human,qwen2.5-7b-instruct,"You have an array a of n integers.

You can no more than once apply the following operation: select three integers
i , j , x (1 \le i \le j \le n ) and assign all elements of the array with
indexes from i to j the value x . The price of this operation depends on the
selected indices and is equal to (j - i + 1) burles.

For example, the array is equal to [1, 2, 3, 4, 5, 1] . If we choose i = 2, j
= 4, x = 8 , then after applying this operation, the array will be equal to
[1, 8, 8, 8, 5, 1] .

What is the least amount of burles you need to spend to make all the elements
of the array equal?

Input

The first line contains a single integer t (1 \le t \le 10^4 ) — the number of
input test cases. The descriptions of the test cases follow.

The first line of the description of each test case contains a single integer
n (1 \le n \le 2 \cdot 10 ^ 5 ) — the size of the array.

The second line of the description of each test case contains n integers a_1,
a_2, \dots, a_n (1 \le a_i \le n ) — array elements.

It is guaranteed that the sum of n for all test cases does not exceed 2 \cdot
10^5 .

Output

For each test case, output one integer — the minimum number of burles that
will have to be spent to make all the elements of the array equal. It can be
shown that this can always be done.

Example

Input

    8
    
    6
    
    1 2 3 4 5 1
    
    7
    
    1 1 1 1 1 1 1
    
    8
    
    8 8 8 1 2 8 8 8
    
    1
    
    1
    
    2
    
    1 2
    
    3
    
    1 2 3
    
    7
    
    4 3 2 7 1 1 3
    
    9
    
    9 9 2 9 2 5 5 5 3

Output

    4
    0
    2
    0
    1
    2
    6
    7","for _ in range(int(input())):
    n=int(input())
    a=list(map(int,input().split()))
    le=len(a)
    l,r=0,n-1
    st,end=1,1
    while l<r and a[l]==a[l+1]:l+=1;st+=1
    while r>l and a[r]==a[r-1]:r-=1;end+=1
 
    ans=le-max(st,end)
    if a[0]==a[-1]:ans=max(0,le-(st+end))
    print(ans)",3,True,False,False,True,False,True,False,False,False,False,False,False,False,False,0.6234946723635965,0.13400807799198722,0.5833333333333334
1980_B,1980_B_Flikman_100%,codeforces2024,human,qwen2.5-7b-instruct,"Dmitry has n cubes, numbered from left to right from 1 to n . The cube with
index f is his favorite.

Dmitry threw all the cubes on the table, and the i -th cube showed the value
a_i (1 \le a_i \le 100 ). After that, he arranged the cubes in non-increasing
order of their values, from largest to smallest. If two cubes show the same
value, they can go in any order.

After sorting, Dmitry removed the first k cubes. Then he became interested in
whether he removed his favorite cube (note that its position could have
changed after sorting).

For example, if n=5 , f=2 , a = [4, \color{green}3, 3, 2, 3] (the favorite
cube is highlighted in green), and k = 2 , the following could have happened:

  * After sorting a=[4, \color{green}3, 3, 3, 2] , since the favorite cube ended up in the second position, it will be removed. 
  * After sorting a=[4, 3, \color{green}3, 3, 2] , since the favorite cube ended up in the third position, it will not be removed. 

Input

The first line contains an integer t (1 \le t \le 1000 ) — the number of test
cases. Then follow the descriptions of the test cases.

The first line of each test case description contains three integers n , f ,
and k (1 \le f, k \le n \le 100 ) — the number of cubes, the index of Dmitry's
favorite cube, and the number of removed cubes, respectively.

The second line of each test case description contains n integers a_i (1 \le
a_i \le 100 ) — the values shown on the cubes.

Output

For each test case, output one line — ""YES"" if the cube will be removed in all
cases, ""NO"" if it will not be removed in any case, ""MAYBE"" if it may be either
removed or left.

You can output the answer in any case. For example, the strings ""YES"", ""nO"",
""mAyBe"" will be accepted as answers.

Example

Input

    12
    
    5 2 2
    
    4 3 3 2 3
    
    5 5 3
    
    4 2 1 3 5
    
    5 5 2
    
    5 2 4 1 3
    
    5 5 5
    
    1 2 5 4 3
    
    5 5 4
    
    3 1 2 4 5
    
    5 5 5
    
    4 3 2 1 5
    
    6 5 3
    
    1 2 3 1 2 3
    
    10 1 1
    
    1 1 1 1 1 1 1 1 1 1
    
    1 1 1
    
    42
    
    5 2 3
    
    2 2 1 1 2
    
    2 1 1
    
    2 1
    
    5 3 1
    
    3 3 2 3 2

Output

    MAYBE
    YES
    NO
    YES
    YES
    YES
    MAYBE
    MAYBE
    YES
    YES
    YES
    NO","t = int(input())
 
for _ in range(t):
    # Чтение входных данных
    n, f, k = map(int, input().split())
    a = list(map(int, input().split()))
 
    # Значение любимого кубика
    favorite_value = a[f - 1]
 
    # Сортируем кубики по невозрастанию значений
    sorted_a = sorted(a, reverse=True)
 
    # Подсчёт индекса любимого кубика в отсортированном массиве
    removed_count = 0
    for i in range(k):
        if sorted_a[i] == favorite_value:
            removed_count += 1
 
    # Подсчитываем количество одинаковых любимому кубику
    favorite_count = sorted_a.count(favorite_value)
 
    # Определяем, удалён ли любимый кубик
    if removed_count == favorite_count:
        print(""YES"")
    elif removed_count == 0:
        print(""NO"")
    else:
        print(""MAYBE"")",3,True,False,False,True,True,True,True,True,False,False,False,False,True,True,0.9124140076172881,0.5888183446554242,0.75
1978_B,1978_B__professor-_50.00%,codeforces2024,human,qwen2.5-7b-instruct,"Bob decided to open a bakery. On the opening day, he baked n buns that he can
sell. The usual price of a bun is a coins, but to attract customers, Bob
organized the following promotion:

  * Bob chooses some integer k (0 \le k \le \min(n, b) ).
  * Bob sells the first k buns at a modified price. In this case, the price of the i -th (1 \le i \le k ) sold bun is (b - i + 1) coins.
  * The remaining (n - k) buns are sold at a coins each.

Note that k can be equal to 0 . In this case, Bob will sell all the buns at a
coins each.

Help Bob determine the maximum profit he can obtain by selling all n buns.

Input

Each test consists of multiple test cases. The first line contains a single
integer t (1 \le t \le 10^4 ) — the number of test cases. The description of
the test cases follows.

The only line of each test case contains three integers n , a , and b (1 \le
n, a, b \le 10^9 ) — the number of buns, the usual price of a bun, and the
price of the first bun to be sold at a modified price.

Output

For each test case, output a single integer — the maximum profit that Bob can
obtain.

Example

Input

    7
    
    4 4 5
    
    5 5 9
    
    10 10 5
    
    5 5 11
    
    1000000000 1000000000 1000000000
    
    1000000000 1000000000 1
    
    1000 1 1000

Output

    17
    35
    100
    45
    1000000000000000000
    1000000000000000000
    500500
    
Note

In the first test case, it is optimal for Bob to choose k = 1 . Then he will
sell one bun for 5 coins, and three buns at the usual price for 4 coins each.
Then the profit will be 5 + 4 + 4 + 4 = 17 coins.

In the second test case, it is optimal for Bob to choose k = 5 . Then he will
sell all the buns at the modified price and obtain a profit of 9 + 8 + 7 + 6 +
5 = 35 coins.

In the third test case, it is optimal for Bob to choose k = 0 . Then he will
sell all the buns at the usual price and obtain a profit of 10 \cdot 10 = 100
coins.","t=int(input())
for _ in range(t):
    n,a,b=map(int,input().split())
    if b<=a:
        print(n*a)
    else:
        if (b-a)>=n:
            print(int((2*b-n+1)*n/2))
        else:
            print(int((b-a)/2*(b-a+1)+a*n))",3,False,False,False,True,True,True,True,True,False,True,True,True,False,False,0.7709564406191117,0.30954473066548477,0.75
1968_B,1968_B_ashikarjen_0.00%,codeforces2024,human,qwen2.5-7b-instruct,"You are given two binary strings a and b . A binary string is a string
consisting of the characters '0' and '1'.

Your task is to determine the maximum possible number k such that a prefix of
string a of length k is a subsequence of string b .

A sequence a is a subsequence of a sequence b if a can be obtained from b by
the deletion of several (possibly, zero or all) elements.

Input

The first line consists of a single integer t (1 \le t \le 10^4 ) — the number
of test cases.

The first line of each test case contains two integers n and m (1\le n,m \le 2
\cdot 10^5 ) — the length of string a and the length of string b ,
respectively.

The second line of each test case contains a binary string a of length n .

The third line of each test case contains a binary string b of length m .

It is guaranteed that the sum of values n over all test cases does not exceed
2 \cdot 10^5 . Similarly, the sum of values m over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single number — the maximum k , such that the
first k characters of a form a subsequence of b .

Example

Input

    6
    
    5 4
    
    10011
    
    1110
    
    3 3
    
    100
    
    110
    
    1 3
    
    1
    
    111
    
    4 4
    
    1011
    
    1111
    
    3 5
    
    100
    
    11010
    
    3 1
    
    100
    
    0

Output

    2
    2
    1
    1
    3
    0
    
Note

In the first example, the string '10 ' is a subsequence of
'1\color{red}11\color{red}0 ' but the string '100 ' is not. So the answer is 2
.

In the fifth example, a ='100 ', b ='1\color{red}{10}1\color{red}0 ', whole
string a is a subsequence of string b . So the answer is 3 .

In the sixth example, string b does not contain '1 ' so the answer is 0 .","def solve():
    n, m = map(int, input().split())
    a = input()
    b = input()
    
    k = 0
    j = 0  # Pointer in b
 
    for i in range(n):  # Iterate over a
        while j < m and b[j] != a[i]:
            j += 1
        if j < m:
            k += 1
            j += 1
        else:
            break
    print(k)",3,False,False,True,True,True,True,True,True,True,True,True,True,True,False,0.9764233742776764,0.8750687544812689,0.9166666666666666
