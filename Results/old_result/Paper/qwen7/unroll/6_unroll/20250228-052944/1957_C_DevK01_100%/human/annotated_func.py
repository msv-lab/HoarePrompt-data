#State of the program right berfore the function call: t is an integer such that 1 ≤ t ≤ 10^4. For each test case, n and k are integers such that 1 ≤ n ≤ 3 ⋅ 10^5 and 0 ≤ k ≤ n. The coordinates (r_i, c_i) for each move you made are integers such that 1 ≤ r_i, c_i ≤ n.
def func_1(n):
    dp = [1, 1]
    for i in range(2, n + 1):
        dp += [(dp[-1] + 2 * (i - 1) * dp[-2]) % (7 + 10 ** 9)]
        
        dp.pop(0)
        
    #State: Output State: `dp` is a list containing the values generated by the loop for each iteration from 2 to n, where each value is calculated as `(dp[-1] + 2 * (i - 1) * dp[-2]) % (7 + 10 ** 9)`, and the first element of the list is removed after each calculation.
    return dp[-1]
    #The program returns the last element of the list `dp` after all iterations have been processed. This value is calculated using the formula `(dp[-1] + 2 * (i - 1) * dp[-2]) % (7 + 10
#Overall this is what the function does:The function accepts an integer `n` such that 1 ≤ n ≤ 3 ⋅ 10^5. It initializes a list `dp` with the first two elements as 1. Then, it iterates from 2 to `n`, calculating each subsequent element of `dp` using the formula `(dp[-1] + 2 * (i - 1) * dp[-2]) % (7 + 10^9)`, where `i` is the current iteration index. After each calculation, the first element of `dp` is removed. Finally, the function returns the last element of the updated list `dp`.

