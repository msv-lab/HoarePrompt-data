#State of the program right berfore the function call: n is an integer representing the number of children, m is an integer representing the number of pairs of friends, k is an integer representing the number of excursions, and friendships is a list of tuples, where each tuple contains three integers (a, b, f) representing the indices of the pair of children who are friends and their friendship value respectively. The friendship value f is a positive integer. The length of the friendships list is equal to m.
def func_1(n, m, k, friendships):
    result = 0
    for i in range(m):
        a, b, f = friendships[i]
        
        result += f * (k * (k + 1) // 2) % MOD
        
    #State: Output State: `n` is an integer representing the number of children, `m` is an integer representing the number of pairs of friends, `k` is an integer representing the number of excursions, `friendships` is a list of tuples where each tuple contains three integers (a, b, f) representing the indices of the pair of children who are friends and their friendship value respectively, and `result` is the sum of `f * (k * (k + 1) // 2) % MOD` for all pairs of friends, where the sum is taken over all iterations of the loop.
    return result % MOD
    #The program returns the sum of f * (k * (k + 1) // 2) % MOD for all pairs of friends, where the sum is taken over all iterations of the loop.
#Overall this is what the function does:The function calculates the sum of the product of each friendship value (f) and the combination formula \( k \times (k + 1) // 2 \), modulo a constant (MOD), for all pairs of friends listed in the `friendships` list. It then returns this calculated sum.

#State of the program right berfore the function call: t is an integer representing the number of test cases, n is an integer representing the number of children, m is an integer representing the number of pairs of friends, k is an integer representing the number of excursions, and friendships is a list of lists where each inner list contains three integers a_i, b_i, and f_i representing the indices of the pair of children who are friends and their friendship value respectively.
def func_2():
    t = int(input())
    for _ in range(t):
        n, m, k = map(int, input().split())
        
        friendships = [list(map(int, input().split())) for _ in range(m)]
        
        result = func_1(n, m, k, friendships)
        
        print(result)
        
    #State: After executing the loop for `t` times, the output state will consist of `t` results generated by the function `func_1`. Each result corresponds to the output of `func_1(n, m, k, friendships)` for each iteration, where `n` is the number of children, `m` is the number of pairs of friends, `k` is the number of excursions, and `friendships` is a list of friend pairs with their values. The results are printed after each iteration.
#Overall this is what the function does:The function processes multiple test cases, where for each test case, it reads the number of children (n), the number of pairs of friends (m), the number of excursions (k), and a list of friendships. It then calls another function `func_1` with these parameters to compute some result. Finally, it prints the result for each test case.

