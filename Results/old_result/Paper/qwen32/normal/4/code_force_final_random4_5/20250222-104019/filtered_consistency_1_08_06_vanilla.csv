Task ID,unique_id,Dataset,model_created,model_run,description,Code,run_number,original correctness,summary fsl,naive correctness fsl,vanilla,vanilla_no_cot,simple tree,complex tree,summary,simple verify fsl,complex verify fsl,summary verify fsl,simple verify,complex verify,summary verify,consistency,consistency_mine,consistency_old
1948_A,1948_A_Tirthraj_Raval_0.00%,codeforces2024,human,qwen2p5-coder-32b-instruct,"You are given an integer n .

Your task is to build a string of uppercase Latin letters. There must be
exactly n special characters in this string. Let's call a character special if
it is equal to exactly one of its neighbors.

For example, there are 6 special characters in the AAABAACC string (at
positions: 1 , 3 , 5 , 6 , 7 and 8 ).

Print any suitable string or report that there is no such string.

Input

The first line contains a single integer t (1 \le t \le 50 ) — the number of
test cases.

The only line of each test case contains a single integer n (1 \le n \le 50 ).

Output

For each test case, print the answer as follows:

  * if there is no suitable string, print one line containing the string NO; 
  * otherwise, print two lines. The first line should contain the string YES; on the second line print a string of length at most 200  — the answer itself (it can be shown that if some answers exist, then there is an answer of length at most 200 ). If there are several solutions, print any of them. 

Example

Input

    3
    
    6
    
    1
    
    2

Output

    YES
    AAABAACC
    NO
    YES
    MM","t = int(input())
for _ in range(t):
        n = int(input())
        
        if n % 2 == 1:
            print(""NO"")
        else:
            print(""YES"")
            pattern = []
            for i in range(n // 2):
                pattern.append(""AB""[i % 2])
                pattern.append(""AB""[(i % 2) ^ 1])
            print("""".join(pattern))",5,False,True,False,True,False,True,True,True,False,False,False,False,True,True,0.5175726262592018,0.018300057959463222,0.5833333333333334
1968_B,1968_B_MALIK_ANTUPARTHI_100%,codeforces2024,human,qwen2p5-coder-32b-instruct,"You are given two binary strings a and b . A binary string is a string
consisting of the characters '0' and '1'.

Your task is to determine the maximum possible number k such that a prefix of
string a of length k is a subsequence of string b .

A sequence a is a subsequence of a sequence b if a can be obtained from b by
the deletion of several (possibly, zero or all) elements.

Input

The first line consists of a single integer t (1 \le t \le 10^4 ) — the number
of test cases.

The first line of each test case contains two integers n and m (1\le n,m \le 2
\cdot 10^5 ) — the length of string a and the length of string b ,
respectively.

The second line of each test case contains a binary string a of length n .

The third line of each test case contains a binary string b of length m .

It is guaranteed that the sum of values n over all test cases does not exceed
2 \cdot 10^5 . Similarly, the sum of values m over all test cases does not
exceed 2 \cdot 10^5 .

Output

For each test case, output a single number — the maximum k , such that the
first k characters of a form a subsequence of b .

Example

Input

    6
    
    5 4
    
    10011
    
    1110
    
    3 3
    
    100
    
    110
    
    1 3
    
    1
    
    111
    
    4 4
    
    1011
    
    1111
    
    3 5
    
    100
    
    11010
    
    3 1
    
    100
    
    0

Output

    2
    2
    1
    1
    3
    0
    
Note

In the first example, the string '10 ' is a subsequence of
'1\color{red}11\color{red}0 ' but the string '100 ' is not. So the answer is 2
.

In the fifth example, a ='100 ', b ='1\color{red}{10}1\color{red}0 ', whole
string a is a subsequence of string b . So the answer is 3 .

In the sixth example, string b does not contain '1 ' so the answer is 0 .","a=int(input())
for i in range(a):
    b,c=map(int,input().split())
    d=input()
    e=input()
    k=0
    for j in range(b):
        if d[j] in e[k:]:
            k=e[k:].index(d[j])+1+k
            if k==c or j==b-1:
                k=j+1
                break
        else:
            k=j
            break
    print(k)",5,True,False,False,False,False,False,False,False,False,False,False,False,False,False,0.5225905238974631,0.024000142121750116,0.5833333333333334
