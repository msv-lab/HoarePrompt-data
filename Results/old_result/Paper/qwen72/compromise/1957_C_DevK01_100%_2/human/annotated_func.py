#State of the program right berfore the function call: n is an integer representing the size of the n x n chessboard, where 1 ≤ n ≤ 3 · 10^5.
def func_1(n):
    dp = [1, 1]
    for i in range(2, n + 1):
        dp += [(dp[-1] + 2 * (i - 1) * dp[-2]) % (7 + 10 ** 9)]
        
        dp.pop(0)
        
    #State: `n` is the same as the initial state, `i` is `n + 1`, `dp` is a list with two elements: the last two values of the sequence generated by the loop.
    return dp[-1]
    #The program returns the last value of the sequence generated by the loop, which is stored in the last element of the list `dp`.
#Overall this is what the function does:The function `func_1` accepts an integer `n` (where 1 ≤ n ≤ 3 · 10^5) representing the size of an n x n chessboard. It returns the last value of a sequence generated by a loop, which is stored in the last element of the list `dp`. The sequence is computed using a dynamic programming approach, and the final state of the program after the function concludes is that `n` remains unchanged, `i` is `n + 1`, and `dp` is a list with two elements: the last two values of the sequence generated by the loop.

