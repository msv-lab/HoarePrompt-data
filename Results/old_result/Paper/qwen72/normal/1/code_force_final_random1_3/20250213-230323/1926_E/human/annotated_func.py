#State of the program right berfore the function call: t is an integer such that 1 ≤ t ≤ 5 · 10^4, and for each test case, n and k are integers such that 1 ≤ k ≤ n ≤ 10^9.
def func():
    t = int(input())
    for _ in range(t):
        n, k = map(int, input().split())
        
        L = []
        
        while n:
            m = (n + 1) // 2
            n -= m
            L.append(m)
        
        tot = 0
        
        pow = 1
        
        for a in L:
            if tot < k and k <= tot + a:
                print(pow * (2 * (k - tot) - 1))
            tot += a
            pow *= 2
        
    #State: After all iterations of the loop have executed, `t` is 0, `n` is 0, `k` is the last input integer for the final test case, `L` is a list containing the sequence of values generated by repeatedly dividing `n` by 2 and taking the integer part until `n` becomes 0 for each test case, `a` is the last element in `L` for the final test case, `tot` is the sum of all elements in `L` for the final test case, `pow` is \(2^{\text{length of } L}\) for the final test case, and the condition `tot < k` and `k <= tot + a` is either met or not met for each test case, with the corresponding output printed if the condition is met.
#Overall this is what the function does:The function reads an integer `t` indicating the number of test cases. For each test case, it reads two integers `n` and `k`. It then generates a sequence of values by repeatedly dividing `n` by 2 and taking the integer part until `n` becomes 0. The function checks if the value `k` falls within a specific range defined by the cumulative sum of the generated sequence. If the condition is met, it prints a calculated value based on the position of `k` within the sequence. After processing all test cases, the function completes without returning any value, and the final state includes `t` being 0, `n` being 0 for the last test case, and `k` being the last input integer for the final test case.

