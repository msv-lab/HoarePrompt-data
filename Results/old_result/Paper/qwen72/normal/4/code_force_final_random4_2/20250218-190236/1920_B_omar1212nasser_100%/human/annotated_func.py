#State of the program right berfore the function call: t is a positive integer such that 1 <= t <= 10^4, n, k, and x are positive integers such that 1 <= n <= 2 * 10^5 and 1 <= k, x <= n, and a is a list of n positive integers such that 1 <= a_i <= 1000.
def func_1():
    t = int(input())
    for i in range(t):
        n, k, x = map(int, input().split())
        
        a = list(map(int, input().split()))
        
        a.sort()
        
        product = func_2(k, x, a)
        
        print(product)
        
    #State: `t` is an input integer such that 1 <= t <= 10^4, `i` is `t-1`, `n` is an input positive integer, `k` is an input positive integer, `x` is an input positive integer, `a` is a sorted list of integers provided by the input, `product` is the result of `func_2(k, x, a)` for the last iteration.
#Overall this is what the function does:The function `func_1` reads an integer `t` from the input, which represents the number of test cases. For each test case, it reads three integers `n`, `k`, and `x`, and a list `a` of `n` integers. It sorts the list `a` and then calls another function `func_2` with `k`, `x`, and the sorted list `a`. The result of `func_2` is printed for each test case. After processing all `t` test cases, the function concludes. The final state of the program includes `t` being the number of test cases processed, `i` being `t-1`, `n`, `k`, and `x` being the values from the last test case, `a` being the sorted list from the last test case, and the printed results from `func_2` for each test case.

#State of the program right berfore the function call: removals and negatives are non-negative integers such that 0 <= removals, negatives <= len(elements), and elements is a list of integers where 1 <= elements[i] <= 1000.
def func_2(removals, negatives, elements):
    pos = []
    s = sum(elements)
    pos.append(s - 2 * sum(elements[-negatives:]))
    s2 = sum(elements[-negatives:])
    for i in range(1, removals + 1):
        s -= elements[-i]
        
        s2 -= elements[-i]
        
        if negatives + i <= len(elements):
            s2 += elements[-(negatives + i)]
        
        pos.append(s - 2 * s2)
        
    #State: After the loop executes all iterations, `removals` will be equal to the number of iterations the loop has run, `s` will be the initial sum of `elements` minus the sum of the last `removals` elements, `s2` will be the initial sum of the last `negatives` elements minus the sum of the last `removals` elements plus the sum of the elements from the `negatives + removals` position to the `negatives` position, and `pos` will be a list containing the initial element and the values of `s - 2 * s2` after each iteration.
    return max(pos)
    #The program returns the maximum value from the list `pos`, which contains the initial element and the values of `s - 2 * s2` after each iteration.
#Overall this is what the function does:The function `func_2` accepts three parameters: `removals`, `negatives`, and `elements`. It returns the maximum value from a list `pos`, which is generated by calculating `s - 2 * s2` after each iteration of a loop that runs `removals` times. Here, `s` is the sum of the elements in the list `elements` minus the sum of the last `removals` elements, and `s2` is the sum of the last `negatives` elements of `elements` adjusted by the loop. The final state of the program includes a modified list `pos` containing these calculated values, and the original parameters `removals`, `negatives`, and `elements` remain unchanged.

