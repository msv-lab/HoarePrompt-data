Task ID,Dataset,model_created,model_run,description,Code,Test Result,Correctness,Post,original correctness,naive correctness,annotated correctness,annotated correctness simple,naive no fsl correctness,Correctness no fsl,simple verify,complex verify,default verify,simple verify no fsl,complex verify no fsl,default verify no fsl,data file,unique_id,consistency
179,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n):
    return sum(i**3 for i in range(2, n*2+1, 2))
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,179_llama3point1-70b,1.0
179,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n):
    even_numbers = [2 * i for i in range(1, n + 1)]
    cube_sum = sum(x ** 3 for x in even_numbers)
    return cube_sum

# Tests
assert cube_Sum(2) == 72
assert cube_Sum(3) == 288
assert cube_Sum(4) == 800
",,False,post,True,True,False,True,True,True,True,False,True,True,True,True,selected_pilot_75_mbpp.json,179_gpt-4o,1.0
68,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to get the angle of a complex number.,"import cmath

def angle_complex(real, imag):
    complex_num = complex(real, imag)
    return cmath.phase(complex_num)
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,68_llama3point1-70b,1.0
68,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to get the angle of a complex number.,"import cmath

def angle_complex(real, imag):
    # Create the complex number
    complex_number = complex(real, imag)
    # Return the phase (angle) of the complex number
    return cmath.phase(complex_number)

# Test cases
import math

assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)
assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)
assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,68_gpt-4o,1.0
134,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.,"import math

def even_binomial_Coeff_Sum(n):
    sum = 0
    for i in range(n + 1):
        if i % 2 == 0:
            sum += math.comb(n, i)
    return sum
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,134_llama3point1-70b,1.0
134,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.,"import math

def even_binomial_Coeff_Sum(n):
    # Sum of binomial coefficients at even indices is given by 2^(n-1)
    return 2**(n-1)

# Test cases
assert even_binomial_Coeff_Sum(4) == 8
assert even_binomial_Coeff_Sum(6) == 32
assert even_binomial_Coeff_Sum(2) == 2
",,True,post,True,True,True,True,True,False,True,True,True,True,True,False,selected_pilot_75_mbpp.json,134_gpt-4o,1.0
276,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the median of two sorted lists of same size.,"def get_median(list1, list2, size):
    merged_list = sorted(list1 + list2)
    middle_index = size - 1
    if size % 2 == 0:
        median = (merged_list[middle_index] + merged_list[middle_index + 1]) / 2
    else:
        median = merged_list[middle_index]
    return median
",,False,post,False,False,False,True,False,False,False,False,False,True,True,False,selected_pilot_75_mbpp.json,276_llama3point1-70b,0.6666666666666666
276,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the median of two sorted lists of same size.,"def get_median(list1, list2, n):
    # Merge the two sorted lists
    merged_list = sorted(list1 + list2)
    
    # Calculate the median
    mid = len(merged_list) // 2
    
    if len(merged_list) % 2 == 0:
        # Even number of elements
        median = (merged_list[mid - 1] + merged_list[mid]) / 2
    else:
        # Odd number of elements (although this case won't happen given the problem constraints)
        median = merged_list[mid]
    
    return median

# Test cases
assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0
assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5
assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,276_gpt-4o,1.0
85,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find the maximum difference between any two elements in a given array.,"def max_Abs_Diff(arr):
    return max(arr) - min(arr)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,85_llama3point1-70b,1.0
85,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find the maximum difference between any two elements in a given array.,"def max_Abs_Diff(arr):
    # Find the minimum and maximum values in the array
    min_val = min(arr)
    max_val = max(arr)
    
    # Calculate the maximum absolute difference
    max_diff = max_val - min_val
    
    return max_diff

# Test cases
assert max_Abs_Diff((2, 1, 5, 3)) == 4
assert max_Abs_Diff((9, 3, 2, 5, 1)) == 8
assert max_Abs_Diff((3, 2, 1)) == 2
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,85_gpt-4o,1.0
146,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the list of maximum length in a list of lists.,"def max_length(list_of_lists):
    max_len = max(len(sublist) for sublist in list_of_lists)
    max_sublists = [sublist for sublist in list_of_lists if len(sublist) == max_len]
    return (max_len, max_sublists[0])
",,False,post,False,False,False,False,False,False,False,False,True,False,False,False,selected_pilot_75_mbpp.json,146_llama3point1-70b,1.0
146,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the list of maximum length in a list of lists.,"def max_length(list_of_lists):
    max_len = 0
    max_list = []
    
    for lst in list_of_lists:
        if len(lst) > max_len:
            max_len = len(lst)
            max_list = lst
            
    return (max_len, max_list)

# Test cases
assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])
assert max_length([[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15])
assert max_length([[5], [15, 20, 25]]) == (3, [15, 20, 25])
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,146_gpt-4o,1.0
151,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to flatten a given nested list structure.,"def flatten_list(nested_list):
  flat_list = []
  for i in nested_list:
    if type(i) == list:
      flat_list.extend(flatten_list(i))
    else:
      flat_list.append(i)
  return flat_list
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,151_llama3point1-70b,1.0
151,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to flatten a given nested list structure.,"def flatten_list(nested_list):
    flat_list = []
    
    for item in nested_list:
        if isinstance(item, list):
            flat_list.extend(flatten_list(item))
        else:
            flat_list.append(item)
    
    return flat_list

# Testing the function with the provided test cases
assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]
assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,151_gpt-4o,1.0
57,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to sort each sublist of strings in a given list of lists.,"def sort_sublists(list_of_lists):
    return [sorted(sublist, key=str.lower) for sublist in list_of_lists]
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,57_llama3point1-70b,1.0
57,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to sort each sublist of strings in a given list of lists.,"def sort_sublists(list_of_lists):
    return [sorted(sublist) for sublist in list_of_lists]

# Tests
assert sort_sublists(([""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
assert sort_sublists((["" red "",""green"" ],[""blue "","" black""],["" orange"",""brown""])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
assert sort_sublists(([""zilver"",""gold""], [""magnesium"",""aluminium""], [""steel"", ""bronze""])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,57_gpt-4o,1.0
320,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the second smallest number in a list.,"def second_smallest(nums):
    unique_nums = list(set(nums))
    if len(unique_nums) < 2:
        return None
    return sorted(unique_nums)[1]
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,320_llama3point1-70b,1.0
320,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the second smallest number in a list.,"def second_smallest(nums):
    unique_nums = sorted(set(nums))
    return unique_nums[1] if len(unique_nums) > 1 else None

# Test cases
assert second_smallest([1, 2, -8, -2, 0, -2]) == -2
assert second_smallest([1, 1, -0.5, 0, 2, -2, -2]) == -0.5
assert second_smallest([2,2]) == None
assert second_smallest([2,2,2]) == None
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,320_gpt-4o,1.0
1,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the shared elements from the given two lists.,"def similar_elements(test_tup1, test_tup2):
  return tuple(set(test_tup1) & set(test_tup2))
",,True,post,True,True,True,True,True,True,True,True,True,True,False,True,selected_pilot_75_mbpp.json,1_llama3point1-70b,1.0
1,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the shared elements from the given two lists.,"def similar_elements(list1, list2):
    # Convert both lists to sets and find their intersection
    common_elements = set(list1) & set(list2)
    # Convert the result back to a tuple and return
    return tuple(sorted(common_elements))

# Test cases
assert similar_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (4, 5)
assert similar_elements((1, 2, 3, 4), (5, 4, 3, 7)) == (3, 4)
assert similar_elements((11, 12, 14, 13), (17, 15, 14, 13)) == (13, 14)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,1_gpt-4o,1.0
222,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to remove lowercase substrings from a given string.,"def remove_lowercase(s):
    result = ''
    for char in s:
        if char.isupper():
            result += char
    return result
",,False,post,True,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,222_llama3point1-70b,0.8333333333333334
222,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to remove lowercase substrings from a given string.,"def remove_lowercase(s: str) -> str:
    return ''.join([char for char in s if char.isupper()])

# Testing the function
assert remove_lowercase(""PYTHon"") == 'PYTH'
assert remove_lowercase(""FInD"") == 'FID'
assert remove_lowercase(""STRinG"") == 'STRG'
",,False,post,True,False,False,True,False,True,True,True,True,False,False,False,selected_pilot_75_mbpp.json,222_gpt-4o,0.8333333333333334
161,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the n'th lucas number.,"def find_lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        a, b = 2, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b
",,True,post,True,True,False,False,True,True,False,False,True,False,True,True,selected_pilot_75_mbpp.json,161_llama3point1-70b,1.0
161,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the n'th lucas number.,"def find_lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        a, b = 2, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b

# Test cases
assert find_lucas(9) == 76
assert find_lucas(4) == 7
assert find_lucas(3) == 4
",,False,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,161_gpt-4o,1.0
290,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,"Write a function that checks if a strings contains 'z', except at the start and end of the word.","def text_match_wordz_middle(s):
    words = s.split()
    for word in words:
        if len(word) > 1 and 'z' in word[1:-1]:
            return True
    return False
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,290_llama3point1-70b,1.0
290,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Write a function that checks if a strings contains 'z', except at the start and end of the word.","def text_match_wordz_middle(s):
    # Check if 'z' is in the string and not at the start or end
    if 'z' in s[1:-1]:
        return True
    return False

# Test cases
assert text_match_wordz_middle(""pythonzabc."") == True
assert text_match_wordz_middle(""zxyabc."") == False
assert text_match_wordz_middle(""  lang  ."") == False
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,290_gpt-4o,1.0
186,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to extract the elementwise and tuples from the given two tuples.,"def and_tuples(tup1, tup2):
    return tuple(x & y for x, y in zip(tup1, tup2))
",,True,post,True,False,False,False,False,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,186_llama3point1-70b,1.0
186,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to extract the elementwise and tuples from the given two tuples.,"def and_tuples(tuple1, tuple2):
    return tuple(a & b for a, b in zip(tuple1, tuple2))

# Testing the function with the provided test cases
assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)
assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)
assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)
",,True,post,True,False,False,False,False,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,186_gpt-4o,1.0
59,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to merge three lists into a single sorted list.,"def merge_sorted_list(list1, list2, list3):
    return sorted(list1 + list2 + list3)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,59_llama3point1-70b,1.0
59,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to merge three lists into a single sorted list.,"def merge_sorted_list(list1, list2, list3):
    # Combine all three lists into one
    combined_list = list1 + list2 + list3
    # Sort the combined list
    sorted_list = sorted(combined_list)
    return sorted_list

# Provided test cases
assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]
assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]) == [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]
assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41]) == [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,59_gpt-4o,1.0
281,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find even numbers from a list of numbers.,"def Split(numbers):
    return [num for num in numbers if num % 2 == 0]
",,False,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,281_llama3point1-70b,1.0
281,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find even numbers from a list of numbers.,"def Split(numbers):
    # Use a list comprehension to filter and return only even numbers
    return [num for num in numbers if num % 2 == 0]

# Test cases to validate the implementation
assert Split([1,2,3,4,5]) == [2, 4]
assert Split([4,5,6,7,8,0,1]) == [4, 6, 8, 0]
assert Split([8,12,15,19]) == [8, 12]
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,281_gpt-4o,1.0
182,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to extract only the rear index element of each string in the given tuple.,"def extract_rear(strings):
    return [s[-1] for s in strings]
",,True,post,True,True,False,True,True,True,True,True,False,True,True,True,selected_pilot_75_mbpp.json,182_llama3point1-70b,1.0
182,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to extract only the rear index element of each string in the given tuple.,"def extract_rear(tup):
    return [s[-1] for s in tup]

# Test cases
assert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r', 's']
assert extract_rear(('Avenge', 'for', 'People')) == ['e', 'r', 'e']
assert extract_rear(('Gotta', 'get', 'go')) == ['a', 't', 'o']
",,False,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,182_gpt-4o,1.0
309,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to check whether all the characters are same or not.,"def all_Characters_Same(s):
    return len(set(s)) == 1
",,False,post,False,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,309_llama3point1-70b,0.8333333333333334
309,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to check whether all the characters are same or not.,"def all_Characters_Same(s):
    if not s:  # If the string is empty, return True (edge case)
        return True
    first_char = s[0]
    for char in s:
        if char != first_char:
            return False
    return True

# Tests
assert all_Characters_Same(""python"") == False
assert all_Characters_Same(""aaa"") == True
assert all_Characters_Same(""data"") == False
",,True,post,True,True,False,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,309_gpt-4o,1.0
337,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find the sum of non-repeated elements in a given list.,"def find_sum(lst):
    return sum(i for i in lst if lst.count(i) == 1)
",,True,post,False,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,337_llama3point1-70b,1.0
337,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find the sum of non-repeated elements in a given list.,"def find_sum(lst):
    return sum(set(lst))

# Provided test cases
assert find_sum([1,2,3,1,1,4,5,6]) == 21
assert find_sum([1,10,9,4,2,10,10,45,4]) == 71
assert find_sum([12,10,9,45,2,10,10,45,10]) == 78
",,True,post,True,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,337_gpt-4o,1.0
333,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to check if the given expression is balanced or not.,"def check_expression(expression: str) -> bool:
    stack = []
    brackets = {""("": "")"", ""{"": ""}"", ""["": ""]""}
    
    for char in expression:
        if char in brackets:
            stack.append(char)
        elif char in brackets.values():
            if not stack or brackets[stack.pop()] != char:
                return False
    
    return not stack
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,333_llama3point1-70b,1.0
333,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to check if the given expression is balanced or not.,"def check_expression(expr):
    stack = []
    matching_pairs = {')': '(', ']': '[', '}': '{'}
    
    for char in expr:
        if char in matching_pairs.values():
            stack.append(char)
        elif char in matching_pairs:
            if stack == [] or stack.pop() != matching_pairs[char]:
                return False
    return stack == []

# Testing the function with the provided test cases
assert check_expression(""{()}[{}]"") == True
assert check_expression(""{()}[{]"") == False
assert check_expression(""{()}[{}][]({})"") == True
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,333_gpt-4o,1.0
209,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to get the first element of each sublist.,"def Extract(sublists):
    return [sublist[0] for sublist in sublists]
",,False,post,True,True,False,True,False,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,209_llama3point1-70b,0.5
209,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to get the first element of each sublist.,"def Extract(lst):
    return [sublist[0] for sublist in lst]

# Test cases to validate the solution
assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]
assert Extract([[1,2,3],[4, 5]]) == [1,4]
assert Extract([[9,8,1],[1,2]]) == [9,1]
",,False,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,209_gpt-4o,1.0
117,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function that returns the number of integer elements in a given list.,"def count_integer(lst):
    return sum(isinstance(x, int) for x in lst)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,117_llama3point1-70b,1.0
117,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function that returns the number of integer elements in a given list.,"def count_integer(lst):
    return sum(1 for x in lst if isinstance(x, int))

# Provided test cases
assert count_integer([1, 2, 'abc', 1.2]) == 2
assert count_integer([1, 2, 3]) == 3
assert count_integer([1, 1.2, 4, 5.1]) == 2
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,117_gpt-4o,1.0
138,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).,"def sequential_search(array, element):
    try:
        index = array.index(element)
        return (True, index)
    except ValueError:
        return (False, -1)
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,138_llama3point1-70b,1.0
138,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).,"def sequential_search(arr, element):
    for index, value in enumerate(arr):
        if value == element:
            return (True, index)
    return (False, -1)

# Test cases
assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)
assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)
assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,138_gpt-4o,1.0
99,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to remove the characters which have odd index values of a given string.,"def odd_values_string(s):
    return ''.join(s[i] for i in range(0, len(s), 2))
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,99_llama3point1-70b,1.0
99,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to remove the characters which have odd index values of a given string.,"def odd_values_string(s):
    return ''.join([s[i] for i in range(len(s)) if i % 2 == 0])

# Test cases to validate the solution
assert odd_values_string('abcdef') == 'ace'
assert odd_values_string('python') == 'pto'
assert odd_values_string('data') == 'dt'
assert odd_values_string('lambs') == 'lms'
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,99_gpt-4o,1.0
119,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function that takes in two numbers and returns a tuple with the second number and then the first number.,"def swap_numbers(a, b):
  return (b, a)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,119_llama3point1-70b,1.0
119,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function that takes in two numbers and returns a tuple with the second number and then the first number.,"def swap_numbers(a, b):
    return (b, a)

# Testing the function with provided test cases
assert swap_numbers(10, 20) == (20, 10)
assert swap_numbers(15, 17) == (17, 15)
assert swap_numbers(100, 200) == (200, 100)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,119_gpt-4o,1.0
264,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to convert degrees to radians.,"import math
def radian_degree(deg):
    return deg * math.pi / 180
",,False,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,264_llama3point1-70b,1.0
264,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to convert degrees to radians.,"import math

def radian_degree(degrees):
    return degrees * (math.pi / 180)

# Test cases
assert radian_degree(90) == 1.5707963267948966
assert radian_degree(60) == 1.0471975511965976
assert radian_degree(120) == 2.0943951023931953
",,True,post,False,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,264_gpt-4o,1.0
335,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.,"def occurance_substring(string, substring):
    start = string.find(substring)
    if start == -1:
        return None
    end = start + len(substring)
    return (substring, start, end - 1)
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,335_llama3point1-70b,0.6666666666666666
335,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.,"def occurance_substring(main_string, sub_string):
    start_pos = main_string.find(sub_string)
    if start_pos == -1:
        return None
    end_pos = start_pos + len(sub_string)
    return (sub_string, start_pos, end_pos)

# Test cases
assert occurance_substring('python programming, python language', 'python') == ('python', 0, 6)
assert occurance_substring('python programming,programming language', 'programming') == ('programming', 7, 18)
assert occurance_substring('python programming,programming language', 'language') == ('language', 31, 39)
assert occurance_substring('c++ programming, c++ language', 'python') == None
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,335_gpt-4o,1.0
360,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function that returns the list in a list of lists whose sum of elements is the highest.,"def max_sum_list(lists):
    return max(lists, key=sum)",,False,post,True,True,False,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,360_llama3point1-70b,1.0
360,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function that returns the list in a list of lists whose sum of elements is the highest.,"def max_sum_list(list_of_lists):
    # Initialize variables to track the maximum sum and the corresponding list
    max_sum = float('-inf')
    max_list = []
    
    # Iterate through each sublist
    for sublist in list_of_lists:
        # Calculate the sum of the current sublist
        current_sum = sum(sublist)
        
        # If the current sum is greater than the maximum sum found so far
        if current_sum > max_sum:
            # Update the maximum sum and the corresponding list
            max_sum = current_sum
            max_list = sublist
    
    # Return the list with the highest sum
    return max_list

# Tests
assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]
assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]]) == [12, 11, 10]
assert max_sum_list([[2,3,1]]) == [2, 3, 1]
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,360_gpt-4o,1.0
307,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find the index of smallest triangular number with n digits.,"def find_Index(n):
    import math
    idx = 1
    while True:
        triangular_num = (idx * (idx + 1)) // 2
        if len(str(triangular_num)) >= n:
            return idx
        idx += 1
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,307_llama3point1-70b,1.0
307,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find the index of smallest triangular number with n digits.,"def find_Index(n):
    k = 1
    while True:
        triangular_number = k * (k + 1) // 2
        if len(str(triangular_number)) == n:
            return k
        k += 1

# Test cases
assert find_Index(2) == 4
assert find_Index(3) == 14
assert find_Index(4) == 45
",,False,post,False,False,False,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,307_gpt-4o,1.0
8,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s, char):
    first_occurrence = s.find(char)
    last_occurrence = s.rfind(char)
    
    if first_occurrence != -1 and last_occurrence != -1:
        if first_occurrence == last_occurrence:
            return s.replace(char, '', 1)
        else:
            return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]
    else:
        return s
",,True,post,True,True,True,True,True,True,True,False,False,True,True,True,selected_pilot_75_mbpp.json,8_llama3point1-70b,1.0
8,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s: str, ch: str) -> str:
    first_index = s.find(ch)
    last_index = s.rfind(ch)
    
    if first_index == -1 or last_index == -1 or first_index == last_index:
        return s  # No removal needed if ch is not found or only one occurrence
    
    # Create a new string without the first and last occurrence of ch
    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]

# Testing the function with the provided test cases
assert remove_Occ(""hello"", ""l"") == ""heo""
assert remove_Occ(""abcda"", ""a"") == ""bcd""
assert remove_Occ(""PHP"", ""P"") == ""H""
",,False,post,False,True,False,False,True,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,8_gpt-4o,1.0
10,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find the volume of a triangular prism.,"def find_Volume(b, h, l):
  return (b * h / 2) * l
",,False,post,False,True,True,True,True,False,True,True,False,True,True,True,selected_pilot_75_mbpp.json,10_llama3point1-70b,1.0
10,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find the volume of a triangular prism.,"def find_Volume(base, height, length):
    base_area = 0.5 * base * height
    volume = base_area * length
    return volume

# Tests
assert find_Volume(10, 8, 6) == 240
assert find_Volume(3, 2, 2) == 6
assert find_Volume(1, 2, 1) == 1
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,10_gpt-4o,1.0
159,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the volume of a cone.,"import math
def volume_cone(radius, height):
    return (1.0/3)*math.pi*radius*radius*height
",,False,post,True,True,False,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,159_llama3point1-70b,1.0
159,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the volume of a cone.,"import math

def volume_cone(radius, height):
    return (1/3) * math.pi * (radius ** 2) * height

# Tests
assert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)
assert math.isclose(volume_cone(10, 15), 1570.7963267948965, rel_tol=0.001)
assert math.isclose(volume_cone(19, 17), 6426.651371693521, rel_tol=0.001)
",,False,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,159_gpt-4o,1.0
271,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,"Write a function that takes a tuple of tuples and returns a list where each element is the average of the corresponding values from each tuple. For each position, compute the average of values from all tuples at that position.","def average_tuple(tuples):
    return [sum(val) / len(tuples) for val in zip(*tuples)]
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,271_llama3point1-70b,1.0
271,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Write a function that takes a tuple of tuples and returns a list where each element is the average of the corresponding values from each tuple. For each position, compute the average of values from all tuples at that position.","def average_tuple(tuples):
    # Length of the first tuple (assuming all tuples are of the same length)
    num_elements = len(tuples[0])
    
    # List to store the averages
    averages = []
    
    # Iterate over each position in the tuples
    for i in range(num_elements):
        # Extract the i-th element from each tuple and compute the average
        elements_at_position = [t[i] for t in tuples]
        avg = sum(elements_at_position) / len(tuples)
        averages.append(avg)
    
    return averages

# Test cases
assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]
assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))) == [25.5, -18.0, 3.75]
assert average_tuple(((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40))) == [305.0, 342.5, 270.0, 232.5]
",,False,post,False,True,True,True,True,False,True,True,True,True,True,False,selected_pilot_75_mbpp.json,271_gpt-4o,1.0
325,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.,"def check_monthnumber_number(month):
    thirty_days_months = [4, 6, 9, 11]
    return month in thirty_days_months
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,325_llama3point1-70b,1.0
325,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.,"def check_monthnumber_number(month: int) -> bool:
    # Define the set of months that have 30 days
    months_with_30_days = {4, 6, 9, 11}
    # Check if the given month is in the set
    return month in months_with_30_days

# Test cases to validate the solution
assert check_monthnumber_number(6) == True
assert check_monthnumber_number(2) == False
assert check_monthnumber_number(12) == False
",,False,post,True,True,False,True,True,False,True,True,False,True,True,True,selected_pilot_75_mbpp.json,325_gpt-4o,0.8333333333333334
125,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,"Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.","def list_split(lst, n):
    return [lst[i::n] for i in range(n)]
",,True,post,True,True,True,True,True,False,True,True,True,False,True,True,selected_pilot_75_mbpp.json,125_llama3point1-70b,1.0
125,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.","def list_split(lst, n):
    result = [[] for _ in range(n)]
    for i, element in enumerate(lst):
        result[i % n].append(element)
    return result

# Test cases
assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]
assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]
assert list_split(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2) == [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]
",,True,post,True,True,True,False,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,125_gpt-4o,1.0
96,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to check if all the elements in tuple have same data type or not.,"def check_type(tup):
    return len(set(type(x) for x in tup)) == 1
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,96_llama3point1-70b,1.0
96,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to check if all the elements in tuple have same data type or not.,"def check_type(tup):
    if not tup:
        return True  # An empty tuple can be considered as having the same type for all elements.
    
    first_type = type(tup[0])
    for element in tup:
        if type(element) != first_type:
            return False
    return True

# Test cases
assert check_type((5, 6, 7, 3, 5, 6)) == True
assert check_type((1, 2, ""4"")) == False
assert check_type((3, 2, 1, 4, 5)) == True
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,96_gpt-4o,1.0
204,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to check whether the given month number contains 31 days or not.,"def check_monthnumb_number(n):
    months_31_days = [1, 3, 5, 7, 8, 10, 12]
    return n in months_31_days
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,204_llama3point1-70b,1.0
204,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to check whether the given month number contains 31 days or not.,"def check_monthnumb_number(month):
    # List of months with 31 days
    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}
    return month in months_with_31_days

# Test cases
assert check_monthnumb_number(5) == True
assert check_monthnumb_number(2) == False
assert check_monthnumb_number(6) == False
assert check_monthnumb_number(1) == True
assert check_monthnumb_number(12) == True
assert check_monthnumb_number(11) == False
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,204_gpt-4o,1.0
45,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to check whether the given number is undulating or not.,"def is_undulating(n):
    n = str(n)
    undulating = True
    for i in range(1, len(n) - 1):
        if (n[i-1] < n[i] and n[i] < n[i+1]) or (n[i-1] > n[i] and n[i] > n[i+1]):
            pass
        else:
            undulating = False
            break
    return undulating
",,True,post,False,True,False,True,True,True,True,False,False,True,True,True,selected_pilot_75_mbpp.json,45_llama3point1-70b,0.5
45,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to check whether the given number is undulating or not.,"def is_undulating(n):
    s = str(n)
    if len(s) < 3:
        return False
    first_digit = s[0]
    second_digit = s[1]
    if first_digit == second_digit:
        return False
    
    for i in range(2, len(s)):
        if i % 2 == 0 and s[i] != first_digit:
            return False
        if i % 2 == 1 and s[i] != second_digit:
            return False
            
    return True

# Test cases
assert is_undulating(1212121) == True
assert is_undulating(1991) == False
assert is_undulating(121) == True
",,True,post,False,True,True,True,True,True,False,True,True,True,True,True,selected_pilot_75_mbpp.json,45_gpt-4o,1.0
114,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.,"def count_X(tup, elem):
    return tup.count(elem)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,114_llama3point1-70b,1.0
114,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.,"def count_X(tup, element):
    return tup.count(element)

# Tests
assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0
assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3
assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,114_gpt-4o,1.0
83,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to sort a list of elements.,"def pancake_sort(arr):
    n = len(arr)
    for size in range(n, 0, -1):
        max_index = arr.index(max(arr[:size]))
        if max_index != size-1:
            if max_index != 0:
                arr[:max_index+1] = arr[:max_index+1][::-1]
            arr[:size] = arr[:size][::-1]
    return arr
",,False,post,True,False,False,False,False,False,False,True,True,False,True,True,selected_pilot_75_mbpp.json,83_llama3point1-70b,0.5
83,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to sort a list of elements.,"def pancake_sort(arr):
    def flip(end):
        start = 0
        while start < end:
            arr[start], arr[end] = arr[end], arr[start]
            start += 1
            end -= 1
    
    def find_max_index(n):
        max_index = 0
        for i in range(1, n):
            if arr[i] > arr[max_index]:
                max_index = i
        return max_index
    
    n = len(arr)
    for curr_size in range(n, 1, -1):
        max_index = find_max_index(curr_size)
        if max_index != curr_size - 1:
            flip(max_index)
            flip(curr_size - 1)
    
    return arr

# Test cases
assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]
assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]
assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]
",,False,post,True,False,False,False,False,False,False,True,False,False,True,False,selected_pilot_75_mbpp.json,83_gpt-4o,1.0
236,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to check whether a specified list is sorted or not.,"def issort_list(nums):
    return nums == sorted(nums)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,236_llama3point1-70b,1.0
236,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to check whether a specified list is sorted or not.,"def issort_list(lst):
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True

# Test cases
assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True
assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17]) == False
assert issort_list([1, 2, 4, 6, 8, 10, 15, 14, 20]) == False
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,236_gpt-4o,1.0
133,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.,"def substract_elements(tup1, tup2):
    return tuple(a - b for a, b in zip(tup1, tup2))
",,False,post,True,False,True,True,True,False,True,True,False,True,True,True,selected_pilot_75_mbpp.json,133_llama3point1-70b,1.0
133,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.,"def substract_elements(tup1, tup2):
    return tuple(a - b for a, b in zip(tup1, tup2))

# Test cases
assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)
assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)
assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,133_gpt-4o,1.0
297,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,"Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.","def multiply_elements(numbers):
    return tuple(a * b for a, b in zip(numbers, numbers[1:]))
",,True,post,True,True,True,True,True,True,True,False,True,True,True,True,selected_pilot_75_mbpp.json,297_llama3point1-70b,1.0
297,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.","def multiply_elements(t):
    return tuple(t[i] * t[i+1] for i in range(len(t) - 1))

# Test cases
assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)
assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)
assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)
assert multiply_elements((12,)) == ()
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,297_gpt-4o,1.0
95,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to count the number of occurence of the string 'std' in a given string.,"def count_occurance(s):
    return s.count(""std"")
",,True,post,True,True,True,True,True,False,True,True,True,True,True,False,selected_pilot_75_mbpp.json,95_llama3point1-70b,1.0
95,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to count the number of occurence of the string 'std' in a given string.,"def count_occurance(s: str) -> int:
    return s.count('std')

# Test cases to validate the solution
assert count_occurance(""letstdlenstdporstd"") == 3
assert count_occurance(""truststdsolensporsd"") == 1
assert count_occurance(""makestdsostdworthit"") == 2
assert count_occurance(""stds"") == 1
assert count_occurance("""") == 0
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,95_gpt-4o,1.0
216,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to check whether the given list contains consecutive numbers or not.,"def check_Consecutive(lst):
    lst.sort()
    return all(lst[i] - lst[i-1] == 1 for i in range(1, len(lst))) and len(lst) == len(set(lst))
",,True,post,True,True,True,False,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,216_llama3point1-70b,1.0
216,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to check whether the given list contains consecutive numbers or not.,"def check_Consecutive(lst):
    if not lst:  # If the list is empty, it cannot be consecutive
        return False
    
    lst_sorted = sorted(lst)
    
    for i in range(len(lst_sorted) - 1):
        if lst_sorted[i + 1] - lst_sorted[i] != 1:
            return False
    
    return True

# Test cases
assert check_Consecutive([1, 2, 3, 4, 5]) == True
assert check_Consecutive([1, 2, 3, 5, 6]) == False
assert check_Consecutive([1, 2, 1]) == False
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,216_gpt-4o,1.0
51,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to multiply all the numbers in a list and divide with the length of the list.,"def multiply_num(numbers):
    product = 1
    for num in numbers:
        product *= num
    return product / len(numbers)
",,True,post,True,False,False,True,False,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,51_llama3point1-70b,0.8333333333333334
51,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to multiply all the numbers in a list and divide with the length of the list.,"def multiply_num(numbers):
    product = 1
    for num in numbers:
        product *= num
    result = product / len(numbers)
    return result

# Test cases
import math

assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)
assert math.isclose(multiply_num((-10, -20, -30)), -2000.0, rel_tol=0.001)
assert math.isclose(multiply_num((19, 15, 18)), 1710.0, rel_tol=0.001)
",,False,post,True,True,False,True,True,False,True,False,False,False,True,True,selected_pilot_75_mbpp.json,51_gpt-4o,1.0
129,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the ascii value of a character.,"def ascii_value(char: str) -> int:
    """"""
    Returns the ASCII value of a given character.
    
    Parameters:
    char (str): A single character.
    
    Returns:
    int: The ASCII value of the character.
    """"""
    return ord(char)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,129_llama3point1-70b,1.0
129,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the ascii value of a character.,"def ascii_value(char):
    return ord(char)

# Tests
assert ascii_value('A') == 65
assert ascii_value('R') == 82
assert ascii_value('S') == 83
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,129_gpt-4o,1.0
197,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to count the occurence of all elements of list in a tuple.,"def count_Occurrence(tup, lst):
    return sum(tup.count(element) for element in lst)
",,True,post,True,True,True,False,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,197_llama3point1-70b,1.0
197,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to count the occurence of all elements of list in a tuple.,"def count_Occurrence(tup, elements):
    count = sum(tup.count(element) for element in elements)
    return count

# Test cases
assert count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3
assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]) == 6
assert count_Occurrence((1, 2, 3, 4, 5, 6), [1, 2]) == 2
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,197_gpt-4o,1.0
248,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to convert a list to a tuple.,"def list_tuple(input_list):
    return tuple(input_list)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,248_llama3point1-70b,1.0
248,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to convert a list to a tuple.,"def list_tuple(lst):
    return tuple(lst)

# Provided test cases
assert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)
assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7]) == (2, 4, 5, 6, 2, 3, 4, 4, 7)
assert list_tuple([58, 44, 56]) == (58, 44, 56)
",,False,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,248_gpt-4o,1.0
336,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to check whether every odd index contains odd numbers of a given list.,"def odd_position(lst):
    for i in range(len(lst)):
        if i % 2 != 0 and lst[i] % 2 == 0:
            return False
    return True
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,336_llama3point1-70b,1.0
336,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to check whether every odd index contains odd numbers of a given list.,"def odd_position(lst):
    # Iterate through the list, checking only elements at odd indices
    for i in range(1, len(lst), 2):
        if lst[i] % 2 == 0:
            return False
    return True

# Testing the function with the provided test cases
assert odd_position([2, 1, 4, 3, 6, 7, 6, 3]) == True
assert odd_position([4, 1, 2]) == True
assert odd_position([1, 2, 3]) == False
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,336_gpt-4o,1.0
123,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,"Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.","def split_two_parts(lst, L):
    return lst[:L], lst[L:]
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,123_llama3point1-70b,1.0
123,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,"Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.","def split_two_parts(lst, L):
    return (lst[:L], lst[L:])

# Tests
assert split_two_parts([1,1,2,3,4,4,5,1],3) == ([1, 1, 2], [3, 4, 4, 5, 1])
assert split_two_parts(['a', 'b', 'c', 'd'],2) == (['a', 'b'], ['c', 'd'])
assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4) == (['p', 'y', 't', 'h'], ['o', 'n'])
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,123_gpt-4o,1.0
258,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to check whether the given number is armstrong or not.,"def armstrong_number(num):
    num_str = str(num)
    num_len = len(num_str)
    sum = 0
    for digit in num_str:
        sum += int(digit) ** num_len
    return sum == num
",,True,post,True,True,True,True,True,True,True,True,True,False,False,False,selected_pilot_75_mbpp.json,258_llama3point1-70b,1.0
258,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to check whether the given number is armstrong or not.,"def armstrong_number(n):
    # Convert the number to string to easily iterate through its digits
    num_str = str(n)
    # Calculate the number of digits
    num_len = len(num_str)
    # Calculate the sum of the digits each raised to the power of the number of digits
    armstrong_sum = sum(int(digit) ** num_len for digit in num_str)
    # Compare the sum to the original number
    return armstrong_sum == n

# Tests
assert armstrong_number(153) == True
assert armstrong_number(259) == False
assert armstrong_number(4458) == False
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,258_gpt-4o,1.0
268,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function which given a matrix represented as a list of lists returns the max of the n'th column.,"def max_of_nth(matrix, n):
    return max(row[n-1] for row in matrix)
",,True,post,False,True,False,False,False,False,True,True,False,True,True,True,selected_pilot_75_mbpp.json,268_llama3point1-70b,1.0
268,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function which given a matrix represented as a list of lists returns the max of the n'th column.,"def max_of_nth(matrix, n):
    # Extract the nth column (0-indexed)
    nth_column = [row[n] for row in matrix]
    # Return the maximum value from the nth column
    return max(nth_column)

# Test cases
assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19
assert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10
assert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,268_gpt-4o,1.0
14,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find whether a given array of integers contains any duplicate element.,"def test_duplicate(arr):
    return len(arr) != len(set(arr))
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,14_llama3point1-70b,1.0
14,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to find whether a given array of integers contains any duplicate element.,"def test_duplicate(arr):
    seen = set()
    for num in arr:
        if num in seen:
            return True
        seen.add(num)
    return False

# Test cases
assert test_duplicate([1, 2, 3, 4, 5]) == False
assert test_duplicate([1, 2, 3, 4, 4]) == True
assert test_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5]) == True
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,14_gpt-4o,1.0
141,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.,"def validate(n):
    str_n = str(n)
    for digit in str_n:
        if str_n.count(digit) > int(digit):
            return False
    return True",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,141_llama3point1-70b,1.0
141,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.,"def validate(n):
    digit_str = str(n)
    frequency = {}
    
    # Calculate frequency of each digit
    for digit in digit_str:
        if digit in frequency:
            frequency[digit] += 1
        else:
            frequency[digit] = 1
    
    # Check the condition for each digit
    for digit, count in frequency.items():
        if count > int(digit):
            return False
    
    return True

# Tests
assert validate(1234) == True
assert validate(51241) == False
assert validate(321) == True
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,141_gpt-4o,1.0
178,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.,"def round_and_sum(numbers):
    rounded_numbers = [round(num) for num in numbers]
    total_sum = sum(rounded_numbers)
    return total_sum * len(numbers)
",,False,post,True,True,True,False,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,178_llama3point1-70b,1.0
178,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.,"def round_and_sum(numbers):
    rounded_numbers = [round(num) for num in numbers]
    total_sum = sum(rounded_numbers)
    result = total_sum * len(numbers)
    return result

# Tests
assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243
assert round_and_sum([5, 2, 9, 24.3, 29]) == 345
assert round_and_sum([25.0, 56.7, 89.2]) == 513
",,True,post,True,True,True,True,True,False,True,True,True,True,False,True,selected_pilot_75_mbpp.json,178_gpt-4o,1.0
136,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.,"def dict_filter(d, n):
    return {k: v for k, v in d.items() if v >= n}
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,136_llama3point1-70b,1.0
136,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.,"def dict_filter(d: dict, n: int) -> dict:
    return {k: v for k, v in d.items() if v >= n}

# Test cases
assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}
assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180) == {'Alden Cantrell': 180, 'Pierre Cox': 190}
assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190) == {'Pierre Cox': 190}
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,136_gpt-4o,1.0
275,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.,"def largest_subset(nums):
    if not nums:
        return 0

    nums.sort()
    dp = [1] * len(nums)

    for i in range(1, len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)
",,True,post,True,True,False,False,False,True,False,False,False,True,True,True,selected_pilot_75_mbpp.json,275_llama3point1-70b,0.6666666666666666
275,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.,"def largest_subset(nums):
    if not nums:
        return 0

    nums.sort()
    dp = [1] * len(nums)
    
    for i in range(len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0:
                dp[i] = max(dp[i], dp[j] + 1)
    
    return max(dp)

# Testing the function with the provided test cases
assert largest_subset([1, 3, 6, 13, 17, 18]) == 4
assert largest_subset([10, 5, 3, 15, 20]) == 3
assert largest_subset([18, 1, 3, 6, 13, 17]) == 4
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,275_gpt-4o,1.0
344,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to locate the right insertion point for a specified value in sorted order.,"def right_insertion(sorted_list, value):
    for i in range(len(sorted_list)):
        if sorted_list[i] >= value:
            return i
    return len(sorted_list)
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,344_llama3point1-70b,1.0
344,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to locate the right insertion point for a specified value in sorted order.,"import bisect

def right_insertion(sorted_list, value):
    return bisect.bisect_right(sorted_list, value)

# Test cases
assert right_insertion([1,2,4,5],6)==4
assert right_insertion([1,2,4,5],3)==2
assert right_insertion([1,2,4,5],7)==4
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,344_gpt-4o,1.0
326,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find the minimum difference between any two elements in a given array.,"def find_min_diff(arr, target):
    arr = sorted(arr)
    min_diff = float('inf')
    for i in range(len(arr) - 1):
        diff = abs(arr[i] - arr[i + 1])
        if diff < min_diff:
            min_diff = diff
    return min_diff
",,True,post,True,False,True,True,False,False,False,False,True,True,False,False,selected_pilot_75_mbpp.json,326_llama3point1-70b,1.0
326,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find the minimum difference between any two elements in a given array.,"def find_min_diff(arr, n):
    if n < 2:
        return 0  # If array has less than 2 elements, no valid difference can be found
    
    arr = sorted(arr)
    min_diff = float('inf')
    
    for i in range(n - 1):
        diff = arr[i+1] - arr[i]
        if diff < min_diff:
            min_diff = diff
            
    return min_diff

# Testing the function based on the provided assertions
assert find_min_diff((1,5,3,19,18,25),6) == 1
assert find_min_diff((4,3,2,6),4) == 1
assert find_min_diff((30,5,20,9),4) == 4
",,True,post,True,True,False,True,True,True,False,True,True,False,True,True,selected_pilot_75_mbpp.json,326_gpt-4o,1.0
184,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to filter odd numbers.,"def filter_oddnumbers(nums):
  return [num for num in nums if num % 2 != 0]
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,184_llama3point1-70b,1.0
184,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to filter odd numbers.,"def filter_oddnumbers(nums):
    return [num for num in nums if num % 2 != 0]

# Test cases
assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]
assert filter_oddnumbers([10, 20, 45, 67, 84, 93]) == [45, 67, 93]
assert filter_oddnumbers([5, 7, 9, 8, 6, 4, 3]) == [5, 7, 9, 3]
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,184_gpt-4o,1.0
121,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the nth newman–shanks–williams prime number.,"def is_prime(n):
    """"""Check if a number is prime.""""""
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def newman_prime(n):
    """"""Find the nth Newman-Shanks-Williams prime number.""""""
    if n == 1:
        return 7  # The first NSW prime is 7
    
    # Initialize the count of NSW primes and the current number
    count = 1
    num = 7
    
    while True:
        # Check if the current number is a prime number
        if is_prime(num):
            # Check if the current prime number is congruent to 1 or 5 modulo 6
            if num % 6 in [1, 5]:
                # Increment the count of NSW primes
                count += 1
                
                # If we have found the nth NSW prime, return it
                if count == n:
                    return num
        
        # Move on to the next number
        num += 1
",,True,post,False,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,121_llama3point1-70b,1.0
121,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the nth newman–shanks–williams prime number.,"def newman_prime(n):
    if n == 0 or n == 1:
        return 1
    
    S0, S1 = 1, 1
    for i in range(2, n+1):
        S_next = 2 * S1 + S0
        S0, S1 = S1, S_next
    return S1

# Test cases
assert newman_prime(3) == 7
assert newman_prime(4) == 17
assert newman_prime(5) == 41
",,False,post,True,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,121_gpt-4o,1.0
21,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find smallest number in a list.,"def smallest_num(nums):
    return min(nums)
",,False,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,21_llama3point1-70b,1.0
21,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find smallest number in a list.,"def smallest_num(lst):
    return min(lst)

# Tests
assert smallest_num([10, 20, 1, 45, 99]) == 1
assert smallest_num([1, 2, 3]) == 1
assert smallest_num([45, 46, 50, 60]) == 45
",,True,post,True,True,True,True,True,False,True,True,True,True,True,False,selected_pilot_75_mbpp.json,21_gpt-4o,1.0
171,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find whether the parity of a given number is odd.,"def find_Parity(n):
    return n % 2 != 0
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,171_llama3point1-70b,1.0
171,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find whether the parity of a given number is odd.,"def find_Parity(n):
    return n % 2 != 0

# Test cases
assert find_Parity(12) == False
assert find_Parity(7) == True
assert find_Parity(10) == False
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,171_gpt-4o,1.0
302,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the index of the first occurrence of a given number in a sorted array.,"def find_first_occurrence(arr, num):
    for i, x in enumerate(arr):
        if x == num:
            return i
    return -1  # return -1 if num is not found in the array
",,True,post,True,True,False,True,False,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,302_llama3point1-70b,1.0
302,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the index of the first occurrence of a given number in a sorted array.,"def find_first_occurrence(arr, target):
    low, high = 0, len(arr) - 1
    result = -1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            result = mid
            high = mid - 1  # Look on the left side of mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return result

# Test cases
assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1
assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2
assert find_first_occurrence([1, 2, 4, 5, 6, 6, 8, 9, 9, 9], 6) == 4
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,302_gpt-4o,1.0
109,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.,"def replace_list(list1, list2):
    if list1:
        list1[-1:] = list2
    else:
        list1 = list2
    return list1
",,True,post,True,False,True,True,True,True,True,False,True,False,True,False,selected_pilot_75_mbpp.json,109_llama3point1-70b,1.0
109,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.,"def replace_list(list1, list2):
    return list1[:-1] + list2

# Test cases
assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]
assert replace_list([1, 2, 3, 4, 5],[5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]
assert replace_list([""red"", ""blue"", ""green""],[""yellow""]) == [""red"", ""blue"", ""yellow""]
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,109_gpt-4o,1.0
4,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to check whether the two numbers differ at one bit position only or not.,"def differ_At_One_Bit_Pos(num1, num2):
    return bin(num1 ^ num2).count('1') == 1
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,4_llama3point1-70b,1.0
4,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to check whether the two numbers differ at one bit position only or not.,"def differ_At_One_Bit_Pos(a, b):
    xor_result = a ^ b
    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0

# Tests
assert differ_At_One_Bit_Pos(13, 9) == True
assert differ_At_One_Bit_Pos(15, 8) == False
assert differ_At_One_Bit_Pos(2, 4) == False
assert differ_At_One_Bit_Pos(2, 3) == True
assert differ_At_One_Bit_Pos(5, 1) == True
assert differ_At_One_Bit_Pos(1, 5) == True
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,4_gpt-4o,1.0
350,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find the last position of an element in a sorted array.,"def last(arr, target):
    for i in range(len(arr) - 1, -1, -1):
        if arr[i] == target:
            return i
    return -1
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,350_llama3point1-70b,1.0
350,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a python function to find the last position of an element in a sorted array.,"def last(arr, x):
    # Iterate through the array from the end to the start
    for i in range(len(arr) - 1, -1, -1):
        if arr[i] == x:
            return i
    # If the element is not found, return -1 (not specified in tests but good practice)
    return -1

# Tests
assert last([1,2,3],1) == 0
assert last([1,1,1,2,3,4],1) == 2
assert last([2,2,3,3,6,8,9],3) == 3
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,350_gpt-4o,1.0
251,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to convert rectangular coordinates to polar coordinates.,"import math

def polar_rect(x, y):
    r = math.hypot(x, y)
    phi = math.atan2(y, x)
    return (r, phi)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,251_llama3point1-70b,1.0
251,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to convert rectangular coordinates to polar coordinates.,"import math

def polar_rect(x, y):
    r = math.sqrt(x**2 + y**2)
    theta = math.atan2(y, x)
    return (r, theta)

# Test cases
assert polar_rect(3, 4) == (5.0, 0.9272952180016122)
assert polar_rect(4, 7) == (8.06225774829855, 1.0516502125483738)
assert polar_rect(15, 17) == (22.67156809750927, 0.8478169733934057)
",,False,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,251_gpt-4o,1.0
235,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to get the sum of the digits of a non-negative integer.,"def sum_digits(n):
    return sum(int(digit) for digit in str(n))
",,False,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,235_llama3point1-70b,1.0
235,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to get the sum of the digits of a non-negative integer.,"def sum_digits(n: int) -> int:
    total = 0
    while n > 0:
        total += n % 10
        n //= 10
    return total

# Testing the function with the provided test cases
assert sum_digits(345) == 12
assert sum_digits(12) == 3
assert sum_digits(97) == 16
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,235_gpt-4o,1.0
356,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to remove all whitespaces from a string.,"def remove_all_spaces(input_str):
    return input_str.replace("" "", """")
",,False,post,True,False,True,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,356_llama3point1-70b,1.0
356,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to remove all whitespaces from a string.,"def remove_all_spaces(s):
    return s.replace("" "", """")

# Test cases
assert remove_all_spaces('python  program') == 'pythonprogram'
assert remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'
assert remove_all_spaces('python                     program') == 'pythonprogram'
assert remove_all_spaces('   python                     program') == 'pythonprogram'
",,True,post,True,True,True,True,True,True,True,True,True,True,False,True,selected_pilot_75_mbpp.json,356_gpt-4o,0.8333333333333334
142,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.,"def check_element(lst, element):
    return all(item == element for item in lst)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,142_llama3point1-70b,1.0
142,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.,"def check_element(lst, element):
    for item in lst:
        if item != element:
            return False
    return True

# Test cases
assert check_element([""green"", ""orange"", ""black"", ""white""], 'blue') == False
assert check_element([1, 2, 3, 4], 7) == False
assert check_element([""green"", ""green"", ""green"", ""green""], 'green') == True
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,142_gpt-4o,1.0
315,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to add the given tuple to the given list.,"def add_tuple(input_list, input_tuple):
  return input_list + list(input_tuple)
",,True,post,True,False,False,False,False,False,True,True,True,False,False,True,selected_pilot_75_mbpp.json,315_llama3point1-70b,0.8333333333333334
315,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to add the given tuple to the given list.,"def add_tuple(lst, tpl):
    return lst + list(tpl)

# Test cases
assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]
assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]
assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,315_gpt-4o,1.0
55,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to convert a snake case string to camel case string.,"def snake_to_camel(snake_case_str):
    words = snake_case_str.split('_')
    camel_case_str = ''.join(word.capitalize() for word in words)
    return camel_case_str
",,False,post,False,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,55_llama3point1-70b,1.0
55,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to convert a snake case string to camel case string.,"def snake_to_camel(snake_str):
    components = snake_str.split('_')
    return ''.join(x.capitalize() for x in components)

# Tests
assert snake_to_camel('python_program') == 'PythonProgram'
assert snake_to_camel('python_language') == 'PythonLanguage'
assert snake_to_camel('programming_language') == 'ProgrammingLanguage'
",,False,post,False,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,55_gpt-4o,1.0
207,mbppplus,llama3point1-70b,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the area of a rectangle.,"def rectangle_area(length, width):
    return length * width
",,False,post,True,True,False,True,True,False,True,True,False,True,False,True,selected_pilot_75_mbpp.json,207_llama3point1-70b,1.0
207,mbppplus,gpt-4o,meta-llama/Llama-3.3-70B-Instruct,Write a function to find the area of a rectangle.,"def rectangle_area(length, width):
    return length * width

# Test the function with the provided assertions
assert rectangle_area(10, 20) == 200
assert rectangle_area(10, 5) == 50
assert rectangle_area(4, 2) == 8
",,False,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,207_gpt-4o,1.0
