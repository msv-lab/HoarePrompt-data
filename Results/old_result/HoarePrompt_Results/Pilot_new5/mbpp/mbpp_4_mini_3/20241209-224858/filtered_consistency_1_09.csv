Task ID,Dataset,model_created,model_run,description,Code,Test Result,Correctness,Post,original correctness,naive correctness,annotated correctness,annotated correctness simple,naive no fsl correctness,data file,functions,unique_id,consistency
179,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n):
    even_numbers = [2 * i for i in range(1, n + 1)]
    cube_sum = sum(x ** 3 for x in even_numbers)
    return cube_sum

# Tests
assert cube_Sum(2) == 72
assert cube_Sum(3) == 288
assert cube_Sum(4) == 800
",,True,post,True,True,True,True,False,selected_pilot_75_mbpp.json,1,179_gpt-4o,0.6
68,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to get the angle of a complex number.,"import cmath

def angle_complex(real, imag):
    # Create the complex number
    complex_number = complex(real, imag)
    # Return the phase (angle) of the complex number
    return cmath.phase(complex_number)

# Test cases
import math

assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)
assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)
assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)
",,False,post,False,False,True,True,False,selected_pilot_75_mbpp.json,1,68_gpt-4o,0.7
134,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.,"import math

def even_binomial_Coeff_Sum(n):
    # Sum of binomial coefficients at even indices is given by 2^(n-1)
    return 2**(n-1)

# Test cases
assert even_binomial_Coeff_Sum(4) == 8
assert even_binomial_Coeff_Sum(6) == 32
assert even_binomial_Coeff_Sum(2) == 2
",,True,post,True,False,False,False,False,selected_pilot_75_mbpp.json,1,134_gpt-4o,0.7
85,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to find the maximum difference between any two elements in a given array.,"def max_Abs_Diff(arr):
    return max(arr) - min(arr)
",,False,post,True,True,False,True,False,selected_pilot_75_mbpp.json,1,85_llama3point1-70b,0.6
146,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the list of maximum length in a list of lists.,"def max_length(list_of_lists):
    max_len = 0
    max_list = []
    
    for lst in list_of_lists:
        if len(lst) > max_len:
            max_len = len(lst)
            max_list = lst
            
    return (max_len, max_list)

# Test cases
assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])
assert max_length([[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15])
assert max_length([[5], [15, 20, 25]]) == (3, [15, 20, 25])
",,True,post,True,False,True,False,False,selected_pilot_75_mbpp.json,1,146_gpt-4o,0.5
320,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the second smallest number in a list.,"def second_smallest(nums):
    unique_nums = list(set(nums))
    if len(unique_nums) < 2:
        return None
    return sorted(unique_nums)[1]
",,False,post,True,True,False,True,True,selected_pilot_75_mbpp.json,1,320_llama3point1-70b,0.8
320,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the second smallest number in a list.,"def second_smallest(nums):
    unique_nums = sorted(set(nums))
    return unique_nums[1] if len(unique_nums) > 1 else None

# Test cases
assert second_smallest([1, 2, -8, -2, 0, -2]) == -2
assert second_smallest([1, 1, -0.5, 0, 2, -2, -2]) == -0.5
assert second_smallest([2,2]) == None
assert second_smallest([2,2,2]) == None
",,True,post,True,False,False,False,False,selected_pilot_75_mbpp.json,1,320_gpt-4o,0.6
1,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the shared elements from the given two lists.,"def similar_elements(list1, list2):
    # Convert both lists to sets and find their intersection
    common_elements = set(list1) & set(list2)
    # Convert the result back to a tuple and return
    return tuple(sorted(common_elements))

# Test cases
assert similar_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (4, 5)
assert similar_elements((1, 2, 3, 4), (5, 4, 3, 7)) == (3, 4)
assert similar_elements((11, 12, 14, 13), (17, 15, 14, 13)) == (13, 14)
",,True,post,True,True,True,True,True,selected_pilot_75_mbpp.json,1,1_gpt-4o,0.8
161,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the n'th lucas number.,"def find_lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        a, b = 2, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b

# Test cases
assert find_lucas(9) == 76
assert find_lucas(4) == 7
assert find_lucas(3) == 4
",,False,post,True,False,False,False,False,selected_pilot_75_mbpp.json,1,161_gpt-4o,0.6
290,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,"Write a function that checks if a strings contains 'z', except at the start and end of the word.","def text_match_wordz_middle(s):
    words = s.split()
    for word in words:
        if len(word) > 1 and 'z' in word[1:-1]:
            return True
    return False
",,True,post,True,True,True,True,False,selected_pilot_75_mbpp.json,1,290_llama3point1-70b,0.7
182,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to extract only the rear index element of each string in the given tuple.,"def extract_rear(strings):
    return [s[-1] for s in strings]
",,False,post,True,False,False,True,True,selected_pilot_75_mbpp.json,1,182_llama3point1-70b,0.5
309,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to check whether all the characters are same or not.,"def all_Characters_Same(s):
    return len(set(s)) == 1
",,False,post,False,True,True,True,True,selected_pilot_75_mbpp.json,1,309_llama3point1-70b,0.7
333,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to check if the given expression is balanced or not.,"def check_expression(expr):
    stack = []
    matching_pairs = {')': '(', ']': '[', '}': '{'}
    
    for char in expr:
        if char in matching_pairs.values():
            stack.append(char)
        elif char in matching_pairs:
            if stack == [] or stack.pop() != matching_pairs[char]:
                return False
    return stack == []

# Testing the function with the provided test cases
assert check_expression(""{()}[{}]"") == True
assert check_expression(""{()}[{]"") == False
assert check_expression(""{()}[{}][]({})"") == True
",,True,post,False,False,True,True,True,selected_pilot_75_mbpp.json,1,333_gpt-4o,0.5
99,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to remove the characters which have odd index values of a given string.,"def odd_values_string(s):
    return ''.join(s[i] for i in range(0, len(s), 2))
",,True,post,True,True,False,True,False,selected_pilot_75_mbpp.json,1,99_llama3point1-70b,0.8
264,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to convert degrees to radians.,"import math

def radian_degree(degrees):
    return degrees * (math.pi / 180)

# Test cases
assert radian_degree(90) == 1.5707963267948966
assert radian_degree(60) == 1.0471975511965976
assert radian_degree(120) == 2.0943951023931953
",,False,post,False,False,True,True,True,selected_pilot_75_mbpp.json,1,264_gpt-4o,0.5
360,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function that returns the list in a list of lists whose sum of elements is the highest.,"def max_sum_list(lists):
    return max(lists, key=sum)",,False,post,True,True,False,True,False,selected_pilot_75_mbpp.json,1,360_llama3point1-70b,0.7
360,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function that returns the list in a list of lists whose sum of elements is the highest.,"def max_sum_list(list_of_lists):
    # Initialize variables to track the maximum sum and the corresponding list
    max_sum = float('-inf')
    max_list = []
    
    # Iterate through each sublist
    for sublist in list_of_lists:
        # Calculate the sum of the current sublist
        current_sum = sum(sublist)
        
        # If the current sum is greater than the maximum sum found so far
        if current_sum > max_sum:
            # Update the maximum sum and the corresponding list
            max_sum = current_sum
            max_list = sublist
    
    # Return the list with the highest sum
    return max_list

# Tests
assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]
assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]]) == [12, 11, 10]
assert max_sum_list([[2,3,1]]) == [2, 3, 1]
",,True,post,True,True,True,True,True,selected_pilot_75_mbpp.json,1,360_gpt-4o,0.8
307,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to find the index of smallest triangular number with n digits.,"def find_Index(n):
    import math
    idx = 1
    while True:
        triangular_num = (idx * (idx + 1)) // 2
        if len(str(triangular_num)) >= n:
            return idx
        idx += 1
",,True,post,False,False,True,True,True,selected_pilot_75_mbpp.json,1,307_llama3point1-70b,0.7
307,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the index of smallest triangular number with n digits.,"def find_Index(n):
    k = 1
    while True:
        triangular_number = k * (k + 1) // 2
        if len(str(triangular_number)) == n:
            return k
        k += 1

# Test cases
assert find_Index(2) == 4
assert find_Index(3) == 14
assert find_Index(4) == 45
",,False,post,False,False,True,True,False,selected_pilot_75_mbpp.json,1,307_gpt-4o,0.8
8,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s, char):
    first_occurrence = s.find(char)
    last_occurrence = s.rfind(char)
    
    if first_occurrence != -1 and last_occurrence != -1:
        if first_occurrence == last_occurrence:
            return s.replace(char, '', 1)
        else:
            return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]
    else:
        return s
",,True,post,True,False,True,True,True,selected_pilot_75_mbpp.json,1,8_llama3point1-70b,0.6
8,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s: str, ch: str) -> str:
    first_index = s.find(ch)
    last_index = s.rfind(ch)
    
    if first_index == -1 or last_index == -1 or first_index == last_index:
        return s  # No removal needed if ch is not found or only one occurrence
    
    # Create a new string without the first and last occurrence of ch
    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]

# Testing the function with the provided test cases
assert remove_Occ(""hello"", ""l"") == ""heo""
assert remove_Occ(""abcda"", ""a"") == ""bcd""
assert remove_Occ(""PHP"", ""P"") == ""H""
",,False,post,False,False,False,True,True,selected_pilot_75_mbpp.json,1,8_gpt-4o,0.6
10,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to find the volume of a triangular prism.,"def find_Volume(b, h, l):
  return (b * h / 2) * l
",,False,post,False,True,True,True,True,selected_pilot_75_mbpp.json,1,10_llama3point1-70b,0.7
159,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the volume of a cone.,"import math

def volume_cone(radius, height):
    return (1/3) * math.pi * (radius ** 2) * height

# Tests
assert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)
assert math.isclose(volume_cone(10, 15), 1570.7963267948965, rel_tol=0.001)
assert math.isclose(volume_cone(19, 17), 6426.651371693521, rel_tol=0.001)
",,False,post,True,False,False,True,True,selected_pilot_75_mbpp.json,1,159_gpt-4o,0.6
271,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,"Write a function that takes a tuple of tuples and returns a list where each element is the average of the corresponding values from each tuple. For each position, compute the average of values from all tuples at that position.","def average_tuple(tuples):
    # Length of the first tuple (assuming all tuples are of the same length)
    num_elements = len(tuples[0])
    
    # List to store the averages
    averages = []
    
    # Iterate over each position in the tuples
    for i in range(num_elements):
        # Extract the i-th element from each tuple and compute the average
        elements_at_position = [t[i] for t in tuples]
        avg = sum(elements_at_position) / len(tuples)
        averages.append(avg)
    
    return averages

# Test cases
assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]
assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))) == [25.5, -18.0, 3.75]
assert average_tuple(((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40))) == [305.0, 342.5, 270.0, 232.5]
",,False,post,False,False,True,True,False,selected_pilot_75_mbpp.json,1,271_gpt-4o,0.6
125,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,"Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.","def list_split(lst, n):
    result = [[] for _ in range(n)]
    for i, element in enumerate(lst):
        result[i % n].append(element)
    return result

# Test cases
assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]
assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]
assert list_split(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2) == [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]
",,False,post,True,False,True,True,False,selected_pilot_75_mbpp.json,1,125_gpt-4o,0.7
204,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to check whether the given month number contains 31 days or not.,"def check_monthnumb_number(n):
    months_31_days = [1, 3, 5, 7, 8, 10, 12]
    return n in months_31_days
",,False,post,True,True,False,True,True,selected_pilot_75_mbpp.json,1,204_llama3point1-70b,0.6
45,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to check whether the given number is undulating or not.,"def is_undulating(n):
    s = str(n)
    if len(s) < 3:
        return False
    first_digit = s[0]
    second_digit = s[1]
    if first_digit == second_digit:
        return False
    
    for i in range(2, len(s)):
        if i % 2 == 0 and s[i] != first_digit:
            return False
        if i % 2 == 1 and s[i] != second_digit:
            return False
            
    return True

# Test cases
assert is_undulating(1212121) == True
assert is_undulating(1991) == False
assert is_undulating(121) == True
",,False,post,False,False,False,False,False,selected_pilot_75_mbpp.json,1,45_gpt-4o,0.8
133,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.,"def substract_elements(tup1, tup2):
    return tuple(a - b for a, b in zip(tup1, tup2))

# Test cases
assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)
assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)
assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)
",,False,post,True,False,False,True,False,selected_pilot_75_mbpp.json,1,133_gpt-4o,0.7
297,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,"Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.","def multiply_elements(t):
    return tuple(t[i] * t[i+1] for i in range(len(t) - 1))

# Test cases
assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)
assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)
assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)
assert multiply_elements((12,)) == ()
",,False,post,True,False,False,True,False,selected_pilot_75_mbpp.json,1,297_gpt-4o,0.7
216,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to check whether the given list contains consecutive numbers or not.,"def check_Consecutive(lst):
    lst.sort()
    return all(lst[i] - lst[i-1] == 1 for i in range(1, len(lst))) and len(lst) == len(set(lst))
",,False,post,True,False,False,True,True,selected_pilot_75_mbpp.json,1,216_llama3point1-70b,0.6
216,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to check whether the given list contains consecutive numbers or not.,"def check_Consecutive(lst):
    if not lst:  # If the list is empty, it cannot be consecutive
        return False
    
    lst_sorted = sorted(lst)
    
    for i in range(len(lst_sorted) - 1):
        if lst_sorted[i + 1] - lst_sorted[i] != 1:
            return False
    
    return True

# Test cases
assert check_Consecutive([1, 2, 3, 4, 5]) == True
assert check_Consecutive([1, 2, 3, 5, 6]) == False
assert check_Consecutive([1, 2, 1]) == False
",,False,post,True,True,True,True,False,selected_pilot_75_mbpp.json,1,216_gpt-4o,0.5
197,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to count the occurence of all elements of list in a tuple.,"def count_Occurrence(tup, elements):
    count = sum(tup.count(element) for element in elements)
    return count

# Test cases
assert count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3
assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]) == 6
assert count_Occurrence((1, 2, 3, 4, 5, 6), [1, 2]) == 2
",,True,post,True,False,True,True,False,selected_pilot_75_mbpp.json,1,197_gpt-4o,0.8
336,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to check whether every odd index contains odd numbers of a given list.,"def odd_position(lst):
    for i in range(len(lst)):
        if i % 2 != 0 and lst[i] % 2 == 0:
            return False
    return True
",,True,post,True,False,False,False,False,selected_pilot_75_mbpp.json,1,336_llama3point1-70b,0.8
336,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to check whether every odd index contains odd numbers of a given list.,"def odd_position(lst):
    # Iterate through the list, checking only elements at odd indices
    for i in range(1, len(lst), 2):
        if lst[i] % 2 == 0:
            return False
    return True

# Testing the function with the provided test cases
assert odd_position([2, 1, 4, 3, 6, 7, 6, 3]) == True
assert odd_position([4, 1, 2]) == True
assert odd_position([1, 2, 3]) == False
",,True,post,True,False,True,True,True,selected_pilot_75_mbpp.json,1,336_gpt-4o,0.6
123,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,"Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.","def split_two_parts(lst, L):
    return (lst[:L], lst[L:])

# Tests
assert split_two_parts([1,1,2,3,4,4,5,1],3) == ([1, 1, 2], [3, 4, 4, 5, 1])
assert split_two_parts(['a', 'b', 'c', 'd'],2) == (['a', 'b'], ['c', 'd'])
assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4) == (['p', 'y', 't', 'h'], ['o', 'n'])
",,False,post,True,False,True,True,False,selected_pilot_75_mbpp.json,1,123_gpt-4o,0.7
14,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find whether a given array of integers contains any duplicate element.,"def test_duplicate(arr):
    return len(arr) != len(set(arr))
",,True,post,True,False,True,True,False,selected_pilot_75_mbpp.json,1,14_llama3point1-70b,0.8
141,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.,"def validate(n):
    str_n = str(n)
    for digit in str_n:
        if str_n.count(digit) > int(digit):
            return False
    return True",,False,post,True,False,True,False,True,selected_pilot_75_mbpp.json,1,141_llama3point1-70b,0.6
141,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.,"def validate(n):
    digit_str = str(n)
    frequency = {}
    
    # Calculate frequency of each digit
    for digit in digit_str:
        if digit in frequency:
            frequency[digit] += 1
        else:
            frequency[digit] = 1
    
    # Check the condition for each digit
    for digit, count in frequency.items():
        if count > int(digit):
            return False
    
    return True

# Tests
assert validate(1234) == True
assert validate(51241) == False
assert validate(321) == True
",,True,post,True,False,True,False,False,selected_pilot_75_mbpp.json,1,141_gpt-4o,0.8
275,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.,"def largest_subset(nums):
    if not nums:
        return 0

    nums.sort()
    dp = [1] * len(nums)
    
    for i in range(len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0:
                dp[i] = max(dp[i], dp[j] + 1)
    
    return max(dp)

# Testing the function with the provided test cases
assert largest_subset([1, 3, 6, 13, 17, 18]) == 4
assert largest_subset([10, 5, 3, 15, 20]) == 3
assert largest_subset([18, 1, 3, 6, 13, 17]) == 4
",,False,post,True,True,False,True,True,selected_pilot_75_mbpp.json,1,275_gpt-4o,0.8
326,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to find the minimum difference between any two elements in a given array.,"def find_min_diff(arr, target):
    arr = sorted(arr)
    min_diff = float('inf')
    for i in range(len(arr) - 1):
        diff = abs(arr[i] - arr[i + 1])
        if diff < min_diff:
            min_diff = diff
    return min_diff
",,False,post,True,False,False,False,False,selected_pilot_75_mbpp.json,1,326_llama3point1-70b,0.5
184,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to filter odd numbers.,"def filter_oddnumbers(nums):
  return [num for num in nums if num % 2 != 0]
",,False,post,True,False,True,False,False,selected_pilot_75_mbpp.json,1,184_llama3point1-70b,0.9230769230769231
121,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the nth newman–shanks–williams prime number.,"def is_prime(n):
    """"""Check if a number is prime.""""""
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def newman_prime(n):
    """"""Find the nth Newman-Shanks-Williams prime number.""""""
    if n == 1:
        return 7  # The first NSW prime is 7
    
    # Initialize the count of NSW primes and the current number
    count = 1
    num = 7
    
    while True:
        # Check if the current number is a prime number
        if is_prime(num):
            # Check if the current prime number is congruent to 1 or 5 modulo 6
            if num % 6 in [1, 5]:
                # Increment the count of NSW primes
                count += 1
                
                # If we have found the nth NSW prime, return it
                if count == n:
                    return num
        
        # Move on to the next number
        num += 1
",,False,post,False,False,False,True,False,selected_pilot_75_mbpp.json,2,121_llama3point1-70b,0.8
21,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find smallest number in a list.,"def smallest_num(lst):
    return min(lst)

# Tests
assert smallest_num([10, 20, 1, 45, 99]) == 1
assert smallest_num([1, 2, 3]) == 1
assert smallest_num([45, 46, 50, 60]) == 45
",,False,post,True,True,False,True,True,selected_pilot_75_mbpp.json,1,21_gpt-4o,0.8
302,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the index of the first occurrence of a given number in a sorted array.,"def find_first_occurrence(arr, num):
    for i, x in enumerate(arr):
        if x == num:
            return i
    return -1  # return -1 if num is not found in the array
",,True,post,True,False,True,True,False,selected_pilot_75_mbpp.json,1,302_llama3point1-70b,0.7
356,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to remove all whitespaces from a string.,"def remove_all_spaces(s):
    return s.replace("" "", """")

# Test cases
assert remove_all_spaces('python  program') == 'pythonprogram'
assert remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'
assert remove_all_spaces('python                     program') == 'pythonprogram'
assert remove_all_spaces('   python                     program') == 'pythonprogram'
",,False,post,True,True,False,False,True,selected_pilot_75_mbpp.json,1,356_gpt-4o,0.8
142,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.,"def check_element(lst, element):
    for item in lst:
        if item != element:
            return False
    return True

# Test cases
assert check_element([""green"", ""orange"", ""black"", ""white""], 'blue') == False
assert check_element([1, 2, 3, 4], 7) == False
assert check_element([""green"", ""green"", ""green"", ""green""], 'green') == True
",,False,post,True,True,True,True,True,selected_pilot_75_mbpp.json,1,142_gpt-4o,0.6
315,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to add the given tuple to the given list.,"def add_tuple(input_list, input_tuple):
  return input_list + list(input_tuple)
",,True,post,True,False,False,False,True,selected_pilot_75_mbpp.json,1,315_llama3point1-70b,0.8
