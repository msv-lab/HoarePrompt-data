Task ID,Dataset,model_created,model_run,description,Code,Test Result,Correctness,Post,original correctness,naive correctness,annotated correctness,annotated correctness simple,naive no fsl correctness,Correctness no fsl,simple verify,complex verify,default verify,simple verify no fsl,complex verify no fsl,default verify no fsl,data file,unique_id,consistency
179,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n):
    return sum(i**3 for i in range(2, n*2+1, 2))
",,True,post,True,False,False,True,False,True,False,True,True,False,True,True,selected_pilot_75_mbpp.json,179_llama3point1-70b,0.8333333333333334
179,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n):
    even_numbers = [2 * i for i in range(1, n + 1)]
    cube_sum = sum(x ** 3 for x in even_numbers)
    return cube_sum

# Tests
assert cube_Sum(2) == 72
assert cube_Sum(3) == 288
assert cube_Sum(4) == 800
",,True,post,True,True,False,True,False,False,True,True,True,False,True,True,selected_pilot_75_mbpp.json,179_gpt-4o,0.5
134,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.,"import math

def even_binomial_Coeff_Sum(n):
    sum = 0
    for i in range(n + 1):
        if i % 2 == 0:
            sum += math.comb(n, i)
    return sum
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,134_llama3point1-70b,0.8333333333333334
134,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.,"import math

def even_binomial_Coeff_Sum(n):
    # Sum of binomial coefficients at even indices is given by 2^(n-1)
    return 2**(n-1)

# Test cases
assert even_binomial_Coeff_Sum(4) == 8
assert even_binomial_Coeff_Sum(6) == 32
assert even_binomial_Coeff_Sum(2) == 2
",,False,post,True,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,134_gpt-4o,0.8333333333333334
85,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to find the maximum difference between any two elements in a given array.,"def max_Abs_Diff(arr):
    return max(arr) - min(arr)
",,True,post,True,True,True,True,False,False,True,False,False,False,False,False,selected_pilot_75_mbpp.json,85_llama3point1-70b,0.8333333333333334
85,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the maximum difference between any two elements in a given array.,"def max_Abs_Diff(arr):
    # Find the minimum and maximum values in the array
    min_val = min(arr)
    max_val = max(arr)
    
    # Calculate the maximum absolute difference
    max_diff = max_val - min_val
    
    return max_diff

# Test cases
assert max_Abs_Diff((2, 1, 5, 3)) == 4
assert max_Abs_Diff((9, 3, 2, 5, 1)) == 8
assert max_Abs_Diff((3, 2, 1)) == 2
",,True,post,True,False,True,True,True,False,False,True,False,True,True,True,selected_pilot_75_mbpp.json,85_gpt-4o,0.8333333333333334
146,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the list of maximum length in a list of lists.,"def max_length(list_of_lists):
    max_len = 0
    max_list = []
    
    for lst in list_of_lists:
        if len(lst) > max_len:
            max_len = len(lst)
            max_list = lst
            
    return (max_len, max_list)

# Test cases
assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])
assert max_length([[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15])
assert max_length([[5], [15, 20, 25]]) == (3, [15, 20, 25])
",,False,post,True,False,False,False,False,False,True,True,False,True,False,False,selected_pilot_75_mbpp.json,146_gpt-4o,0.5
151,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to flatten a given nested list structure.,"def flatten_list(nested_list):
    flat_list = []
    
    for item in nested_list:
        if isinstance(item, list):
            flat_list.extend(flatten_list(item))
        else:
            flat_list.append(item)
    
    return flat_list

# Testing the function with the provided test cases
assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]
assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,151_gpt-4o,0.8333333333333334
57,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to sort each sublist of strings in a given list of lists.,"def sort_sublists(list_of_lists):
    return [sorted(sublist) for sublist in list_of_lists]

# Tests
assert sort_sublists(([""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
assert sort_sublists((["" red "",""green"" ],[""blue "","" black""],["" orange"",""brown""])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
assert sort_sublists(([""zilver"",""gold""], [""magnesium"",""aluminium""], [""steel"", ""bronze""])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]
",,False,post,True,False,True,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,57_gpt-4o,0.8333333333333334
1,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the shared elements from the given two lists.,"def similar_elements(test_tup1, test_tup2):
  return tuple(set(test_tup1) & set(test_tup2))
",,False,post,True,True,True,False,True,False,True,True,False,True,True,False,selected_pilot_75_mbpp.json,1_llama3point1-70b,0.8333333333333334
222,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to remove lowercase substrings from a given string.,"def remove_lowercase(s: str) -> str:
    return ''.join([char for char in s if char.isupper()])

# Testing the function
assert remove_lowercase(""PYTHon"") == 'PYTH'
assert remove_lowercase(""FInD"") == 'FID'
assert remove_lowercase(""STRinG"") == 'STRG'
",,True,post,True,True,False,False,False,True,True,True,True,False,False,False,selected_pilot_75_mbpp.json,222_gpt-4o,0.6666666666666666
161,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the n'th lucas number.,"def find_lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        a, b = 2, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b
",,False,post,True,True,False,True,False,False,True,False,False,True,False,False,selected_pilot_75_mbpp.json,161_llama3point1-70b,0.8333333333333334
161,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the n'th lucas number.,"def find_lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        a, b = 2, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b

# Test cases
assert find_lucas(9) == 76
assert find_lucas(4) == 7
assert find_lucas(3) == 4
",,False,post,True,False,True,False,True,False,True,True,True,True,False,False,selected_pilot_75_mbpp.json,161_gpt-4o,0.6666666666666666
290,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,"Write a function that checks if a strings contains 'z', except at the start and end of the word.","def text_match_wordz_middle(s):
    words = s.split()
    for word in words:
        if len(word) > 1 and 'z' in word[1:-1]:
            return True
    return False
",,False,post,True,True,True,True,False,False,True,True,True,False,False,False,selected_pilot_75_mbpp.json,290_llama3point1-70b,0.8333333333333334
290,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,"Write a function that checks if a strings contains 'z', except at the start and end of the word.","def text_match_wordz_middle(s):
    # Check if 'z' is in the string and not at the start or end
    if 'z' in s[1:-1]:
        return True
    return False

# Test cases
assert text_match_wordz_middle(""pythonzabc."") == True
assert text_match_wordz_middle(""zxyabc."") == False
assert text_match_wordz_middle(""  lang  ."") == False
",,False,post,True,False,False,True,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,290_gpt-4o,0.6666666666666666
182,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to extract only the rear index element of each string in the given tuple.,"def extract_rear(strings):
    return [s[-1] for s in strings]
",,False,post,True,False,False,True,True,False,False,False,False,True,False,False,selected_pilot_75_mbpp.json,182_llama3point1-70b,0.6666666666666666
182,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to extract only the rear index element of each string in the given tuple.,"def extract_rear(tup):
    return [s[-1] for s in tup]

# Test cases
assert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r', 's']
assert extract_rear(('Avenge', 'for', 'People')) == ['e', 'r', 'e']
assert extract_rear(('Gotta', 'get', 'go')) == ['a', 't', 'o']
",,False,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,182_gpt-4o,0.8333333333333334
309,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to check whether all the characters are same or not.,"def all_Characters_Same(s):
    if not s:  # If the string is empty, return True (edge case)
        return True
    first_char = s[0]
    for char in s:
        if char != first_char:
            return False
    return True

# Tests
assert all_Characters_Same(""python"") == False
assert all_Characters_Same(""aaa"") == True
assert all_Characters_Same(""data"") == False
",,False,post,True,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,309_gpt-4o,0.8333333333333334
333,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to check if the given expression is balanced or not.,"def check_expression(expr):
    stack = []
    matching_pairs = {')': '(', ']': '[', '}': '{'}
    
    for char in expr:
        if char in matching_pairs.values():
            stack.append(char)
        elif char in matching_pairs:
            if stack == [] or stack.pop() != matching_pairs[char]:
                return False
    return stack == []

# Testing the function with the provided test cases
assert check_expression(""{()}[{}]"") == True
assert check_expression(""{()}[{]"") == False
assert check_expression(""{()}[{}][]({})"") == True
",,False,post,False,False,True,True,True,False,False,False,False,True,True,True,selected_pilot_75_mbpp.json,333_gpt-4o,0.8333333333333334
117,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function that returns the number of integer elements in a given list.,"def count_integer(lst):
    return sum(1 for x in lst if isinstance(x, int))

# Provided test cases
assert count_integer([1, 2, 'abc', 1.2]) == 2
assert count_integer([1, 2, 3]) == 3
assert count_integer([1, 1.2, 4, 5.1]) == 2
",,True,post,True,True,True,True,True,False,True,True,True,True,False,True,selected_pilot_75_mbpp.json,117_gpt-4o,0.6666666666666666
360,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function that returns the list in a list of lists whose sum of elements is the highest.,"def max_sum_list(list_of_lists):
    # Initialize variables to track the maximum sum and the corresponding list
    max_sum = float('-inf')
    max_list = []
    
    # Iterate through each sublist
    for sublist in list_of_lists:
        # Calculate the sum of the current sublist
        current_sum = sum(sublist)
        
        # If the current sum is greater than the maximum sum found so far
        if current_sum > max_sum:
            # Update the maximum sum and the corresponding list
            max_sum = current_sum
            max_list = sublist
    
    # Return the list with the highest sum
    return max_list

# Tests
assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]
assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]]) == [12, 11, 10]
assert max_sum_list([[2,3,1]]) == [2, 3, 1]
",,False,post,True,True,True,True,True,False,True,True,False,True,True,True,selected_pilot_75_mbpp.json,360_gpt-4o,0.8333333333333334
307,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to find the index of smallest triangular number with n digits.,"def find_Index(n):
    import math
    idx = 1
    while True:
        triangular_num = (idx * (idx + 1)) // 2
        if len(str(triangular_num)) >= n:
            return idx
        idx += 1
",,False,post,False,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,307_llama3point1-70b,0.5
307,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the index of smallest triangular number with n digits.,"def find_Index(n):
    k = 1
    while True:
        triangular_number = k * (k + 1) // 2
        if len(str(triangular_number)) == n:
            return k
        k += 1

# Test cases
assert find_Index(2) == 4
assert find_Index(3) == 14
assert find_Index(4) == 45
",,False,post,False,False,True,True,False,False,True,True,False,False,False,False,selected_pilot_75_mbpp.json,307_gpt-4o,0.5
8,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s, char):
    first_occurrence = s.find(char)
    last_occurrence = s.rfind(char)
    
    if first_occurrence != -1 and last_occurrence != -1:
        if first_occurrence == last_occurrence:
            return s.replace(char, '', 1)
        else:
            return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]
    else:
        return s
",,False,post,True,False,False,True,True,False,False,False,False,True,True,True,selected_pilot_75_mbpp.json,8_llama3point1-70b,0.6666666666666666
8,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s: str, ch: str) -> str:
    first_index = s.find(ch)
    last_index = s.rfind(ch)
    
    if first_index == -1 or last_index == -1 or first_index == last_index:
        return s  # No removal needed if ch is not found or only one occurrence
    
    # Create a new string without the first and last occurrence of ch
    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]

# Testing the function with the provided test cases
assert remove_Occ(""hello"", ""l"") == ""heo""
assert remove_Occ(""abcda"", ""a"") == ""bcd""
assert remove_Occ(""PHP"", ""P"") == ""H""
",,False,post,False,False,True,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,8_gpt-4o,0.8333333333333334
159,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the volume of a cone.,"import math

def volume_cone(radius, height):
    return (1/3) * math.pi * (radius ** 2) * height

# Tests
assert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)
assert math.isclose(volume_cone(10, 15), 1570.7963267948965, rel_tol=0.001)
assert math.isclose(volume_cone(19, 17), 6426.651371693521, rel_tol=0.001)
",,False,post,True,False,True,True,False,False,True,True,False,True,True,False,selected_pilot_75_mbpp.json,159_gpt-4o,0.6666666666666666
271,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,"Write a function that takes a tuple of tuples and returns a list where each element is the average of the corresponding values from each tuple. For each position, compute the average of values from all tuples at that position.","def average_tuple(tuples):
    return [sum(val) / len(tuples) for val in zip(*tuples)]
",,False,post,True,False,True,True,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,271_llama3point1-70b,0.6666666666666666
96,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to check if all the elements in tuple have same data type or not.,"def check_type(tup):
    if not tup:
        return True  # An empty tuple can be considered as having the same type for all elements.
    
    first_type = type(tup[0])
    for element in tup:
        if type(element) != first_type:
            return False
    return True

# Test cases
assert check_type((5, 6, 7, 3, 5, 6)) == True
assert check_type((1, 2, ""4"")) == False
assert check_type((3, 2, 1, 4, 5)) == True
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,96_gpt-4o,0.6666666666666666
133,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.,"def substract_elements(tup1, tup2):
    return tuple(a - b for a, b in zip(tup1, tup2))
",,False,post,True,False,True,True,True,False,False,False,False,True,True,True,selected_pilot_75_mbpp.json,133_llama3point1-70b,0.8333333333333334
133,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.,"def substract_elements(tup1, tup2):
    return tuple(a - b for a, b in zip(tup1, tup2))

# Test cases
assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)
assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)
assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)
",,False,post,True,False,True,True,False,True,False,True,False,True,True,True,selected_pilot_75_mbpp.json,133_gpt-4o,0.8333333333333334
297,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,"Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.","def multiply_elements(t):
    return tuple(t[i] * t[i+1] for i in range(len(t) - 1))

# Test cases
assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)
assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)
assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)
assert multiply_elements((12,)) == ()
",,True,post,True,False,True,True,False,True,False,False,True,False,True,True,selected_pilot_75_mbpp.json,297_gpt-4o,0.5
216,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to check whether the given list contains consecutive numbers or not.,"def check_Consecutive(lst):
    lst.sort()
    return all(lst[i] - lst[i-1] == 1 for i in range(1, len(lst))) and len(lst) == len(set(lst))
",,True,post,True,False,False,True,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,216_llama3point1-70b,0.5
197,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to count the occurence of all elements of list in a tuple.,"def count_Occurrence(tup, lst):
    return sum(tup.count(element) for element in lst)
",,True,post,True,True,True,False,True,False,True,True,False,True,True,False,selected_pilot_75_mbpp.json,197_llama3point1-70b,0.6666666666666666
197,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to count the occurence of all elements of list in a tuple.,"def count_Occurrence(tup, elements):
    count = sum(tup.count(element) for element in elements)
    return count

# Test cases
assert count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3
assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]) == 6
assert count_Occurrence((1, 2, 3, 4, 5, 6), [1, 2]) == 2
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,197_gpt-4o,0.6666666666666666
336,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to check whether every odd index contains odd numbers of a given list.,"def odd_position(lst):
    for i in range(len(lst)):
        if i % 2 != 0 and lst[i] % 2 == 0:
            return False
    return True
",,True,post,True,False,False,False,True,False,False,False,False,True,True,True,selected_pilot_75_mbpp.json,336_llama3point1-70b,0.5
123,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,"Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.","def split_two_parts(lst, L):
    return lst[:L], lst[L:]
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,123_llama3point1-70b,0.8333333333333334
123,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,"Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.","def split_two_parts(lst, L):
    return (lst[:L], lst[L:])

# Tests
assert split_two_parts([1,1,2,3,4,4,5,1],3) == ([1, 1, 2], [3, 4, 4, 5, 1])
assert split_two_parts(['a', 'b', 'c', 'd'],2) == (['a', 'b'], ['c', 'd'])
assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4) == (['p', 'y', 't', 'h'], ['o', 'n'])
",,True,post,True,False,True,True,False,False,False,False,False,True,True,False,selected_pilot_75_mbpp.json,123_gpt-4o,0.8333333333333334
258,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to check whether the given number is armstrong or not.,"def armstrong_number(num):
    num_str = str(num)
    num_len = len(num_str)
    sum = 0
    for digit in num_str:
        sum += int(digit) ** num_len
    return sum == num
",,True,post,True,False,True,True,True,True,False,True,False,True,True,True,selected_pilot_75_mbpp.json,258_llama3point1-70b,0.8333333333333334
258,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to check whether the given number is armstrong or not.,"def armstrong_number(n):
    # Convert the number to string to easily iterate through its digits
    num_str = str(n)
    # Calculate the number of digits
    num_len = len(num_str)
    # Calculate the sum of the digits each raised to the power of the number of digits
    armstrong_sum = sum(int(digit) ** num_len for digit in num_str)
    # Compare the sum to the original number
    return armstrong_sum == n

# Tests
assert armstrong_number(153) == True
assert armstrong_number(259) == False
assert armstrong_number(4458) == False
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,258_gpt-4o,0.8333333333333334
14,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find whether a given array of integers contains any duplicate element.,"def test_duplicate(arr):
    return len(arr) != len(set(arr))
",,True,post,True,True,False,False,False,True,True,True,True,True,False,False,selected_pilot_75_mbpp.json,14_llama3point1-70b,0.6666666666666666
141,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.,"def validate(n):
    str_n = str(n)
    for digit in str_n:
        if str_n.count(digit) > int(digit):
            return False
    return True",,False,post,True,False,True,True,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,141_llama3point1-70b,0.6666666666666666
178,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.,"def round_and_sum(numbers):
    rounded_numbers = [round(num) for num in numbers]
    total_sum = sum(rounded_numbers)
    result = total_sum * len(numbers)
    return result

# Tests
assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243
assert round_and_sum([5, 2, 9, 24.3, 29]) == 345
assert round_and_sum([25.0, 56.7, 89.2]) == 513
",,True,post,True,False,True,True,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,178_gpt-4o,0.8333333333333334
275,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.,"def largest_subset(nums):
    if not nums:
        return 0

    nums.sort()
    dp = [1] * len(nums)

    for i in range(1, len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,275_llama3point1-70b,0.8333333333333334
275,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.,"def largest_subset(nums):
    if not nums:
        return 0

    nums.sort()
    dp = [1] * len(nums)
    
    for i in range(len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0:
                dp[i] = max(dp[i], dp[j] + 1)
    
    return max(dp)

# Testing the function with the provided test cases
assert largest_subset([1, 3, 6, 13, 17, 18]) == 4
assert largest_subset([10, 5, 3, 15, 20]) == 3
assert largest_subset([18, 1, 3, 6, 13, 17]) == 4
",,False,post,True,False,True,False,True,False,True,True,False,True,True,True,selected_pilot_75_mbpp.json,275_gpt-4o,0.6666666666666666
344,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to locate the right insertion point for a specified value in sorted order.,"def right_insertion(sorted_list, value):
    for i in range(len(sorted_list)):
        if sorted_list[i] >= value:
            return i
    return len(sorted_list)
",,False,post,False,True,True,True,True,True,True,True,False,True,True,True,selected_pilot_75_mbpp.json,344_llama3point1-70b,0.6666666666666666
344,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to locate the right insertion point for a specified value in sorted order.,"import bisect

def right_insertion(sorted_list, value):
    return bisect.bisect_right(sorted_list, value)

# Test cases
assert right_insertion([1,2,4,5],6)==4
assert right_insertion([1,2,4,5],3)==2
assert right_insertion([1,2,4,5],7)==4
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,344_gpt-4o,0.6666666666666666
326,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the minimum difference between any two elements in a given array.,"def find_min_diff(arr, n):
    if n < 2:
        return 0  # If array has less than 2 elements, no valid difference can be found
    
    arr = sorted(arr)
    min_diff = float('inf')
    
    for i in range(n - 1):
        diff = arr[i+1] - arr[i]
        if diff < min_diff:
            min_diff = diff
            
    return min_diff

# Testing the function based on the provided assertions
assert find_min_diff((1,5,3,19,18,25),6) == 1
assert find_min_diff((4,3,2,6),4) == 1
assert find_min_diff((30,5,20,9),4) == 4
",,True,post,True,False,False,True,False,False,False,True,False,False,False,False,selected_pilot_75_mbpp.json,326_gpt-4o,0.5
184,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to filter odd numbers.,"def filter_oddnumbers(nums):
  return [num for num in nums if num % 2 != 0]
",,True,post,True,False,True,True,False,True,True,True,True,True,False,False,selected_pilot_75_mbpp.json,184_llama3point1-70b,0.8333333333333334
121,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the nth newman–shanks–williams prime number.,"def is_prime(n):
    """"""Check if a number is prime.""""""
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def newman_prime(n):
    """"""Find the nth Newman-Shanks-Williams prime number.""""""
    if n == 1:
        return 7  # The first NSW prime is 7
    
    # Initialize the count of NSW primes and the current number
    count = 1
    num = 7
    
    while True:
        # Check if the current number is a prime number
        if is_prime(num):
            # Check if the current prime number is congruent to 1 or 5 modulo 6
            if num % 6 in [1, 5]:
                # Increment the count of NSW primes
                count += 1
                
                # If we have found the nth NSW prime, return it
                if count == n:
                    return num
        
        # Move on to the next number
        num += 1
",,False,post,False,False,False,True,False,False,True,True,True,True,False,False,selected_pilot_75_mbpp.json,121_llama3point1-70b,0.8333333333333334
21,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find smallest number in a list.,"def smallest_num(lst):
    return min(lst)

# Tests
assert smallest_num([10, 20, 1, 45, 99]) == 1
assert smallest_num([1, 2, 3]) == 1
assert smallest_num([45, 46, 50, 60]) == 45
",,False,post,True,True,False,True,True,False,True,False,False,True,False,False,selected_pilot_75_mbpp.json,21_gpt-4o,0.5
302,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the index of the first occurrence of a given number in a sorted array.,"def find_first_occurrence(arr, num):
    for i, x in enumerate(arr):
        if x == num:
            return i
    return -1  # return -1 if num is not found in the array
",,True,post,True,False,True,True,True,True,False,True,False,True,True,True,selected_pilot_75_mbpp.json,302_llama3point1-70b,0.5
4,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to check whether the two numbers differ at one bit position only or not.,"def differ_At_One_Bit_Pos(a, b):
    xor_result = a ^ b
    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0

# Tests
assert differ_At_One_Bit_Pos(13, 9) == True
assert differ_At_One_Bit_Pos(15, 8) == False
assert differ_At_One_Bit_Pos(2, 4) == False
assert differ_At_One_Bit_Pos(2, 3) == True
assert differ_At_One_Bit_Pos(5, 1) == True
assert differ_At_One_Bit_Pos(1, 5) == True
",,True,post,True,False,True,True,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,4_gpt-4o,0.6666666666666666
235,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to get the sum of the digits of a non-negative integer.,"def sum_digits(n: int) -> int:
    total = 0
    while n > 0:
        total += n % 10
        n //= 10
    return total

# Testing the function with the provided test cases
assert sum_digits(345) == 12
assert sum_digits(12) == 3
assert sum_digits(97) == 16
",,True,post,True,False,True,False,False,False,True,False,False,True,True,False,selected_pilot_75_mbpp.json,235_gpt-4o,0.6666666666666666
356,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to remove all whitespaces from a string.,"def remove_all_spaces(input_str):
    return input_str.replace("" "", """")
",,False,post,True,True,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,356_llama3point1-70b,0.6666666666666666
356,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to remove all whitespaces from a string.,"def remove_all_spaces(s):
    return s.replace("" "", """")

# Test cases
assert remove_all_spaces('python  program') == 'pythonprogram'
assert remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'
assert remove_all_spaces('python                     program') == 'pythonprogram'
assert remove_all_spaces('   python                     program') == 'pythonprogram'
",,False,post,True,True,False,True,True,False,False,False,False,True,False,True,selected_pilot_75_mbpp.json,356_gpt-4o,0.8333333333333334
142,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.,"def check_element(lst, element):
    for item in lst:
        if item != element:
            return False
    return True

# Test cases
assert check_element([""green"", ""orange"", ""black"", ""white""], 'blue') == False
assert check_element([1, 2, 3, 4], 7) == False
assert check_element([""green"", ""green"", ""green"", ""green""], 'green') == True
",,False,post,True,True,True,False,False,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,142_gpt-4o,0.8333333333333334
315,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to add the given tuple to the given list.,"def add_tuple(input_list, input_tuple):
  return input_list + list(input_tuple)
",,True,post,True,False,False,False,True,True,False,False,False,True,True,True,selected_pilot_75_mbpp.json,315_llama3point1-70b,0.6666666666666666
207,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the area of a rectangle.,"def rectangle_area(length, width):
    return length * width

# Test the function with the provided assertions
assert rectangle_area(10, 20) == 200
assert rectangle_area(10, 5) == 50
assert rectangle_area(4, 2) == 8
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,207_gpt-4o,0.6666666666666666
179,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n):
    return sum(i**3 for i in range(2, n*2+1, 2))
",,True,post,True,True,False,False,False,True,True,True,True,True,True,False,selected_pilot_75_mbpp.json,179_llama3point1-70b,0.8333333333333334
179,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n):
    even_numbers = [2 * i for i in range(1, n + 1)]
    cube_sum = sum(x ** 3 for x in even_numbers)
    return cube_sum

# Tests
assert cube_Sum(2) == 72
assert cube_Sum(3) == 288
assert cube_Sum(4) == 800
",,True,post,True,True,False,True,False,True,True,True,True,True,True,False,selected_pilot_75_mbpp.json,179_gpt-4o,0.5
134,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.,"import math

def even_binomial_Coeff_Sum(n):
    sum = 0
    for i in range(n + 1):
        if i % 2 == 0:
            sum += math.comb(n, i)
    return sum
",,True,post,True,True,True,True,True,True,True,True,True,True,True,False,selected_pilot_75_mbpp.json,134_llama3point1-70b,0.8333333333333334
134,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.,"import math

def even_binomial_Coeff_Sum(n):
    # Sum of binomial coefficients at even indices is given by 2^(n-1)
    return 2**(n-1)

# Test cases
assert even_binomial_Coeff_Sum(4) == 8
assert even_binomial_Coeff_Sum(6) == 32
assert even_binomial_Coeff_Sum(2) == 2
",,False,post,True,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,134_gpt-4o,0.8333333333333334
85,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to find the maximum difference between any two elements in a given array.,"def max_Abs_Diff(arr):
    return max(arr) - min(arr)
",,False,post,True,False,True,True,True,False,False,False,False,True,True,True,selected_pilot_75_mbpp.json,85_llama3point1-70b,0.8333333333333334
85,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the maximum difference between any two elements in a given array.,"def max_Abs_Diff(arr):
    # Find the minimum and maximum values in the array
    min_val = min(arr)
    max_val = max(arr)
    
    # Calculate the maximum absolute difference
    max_diff = max_val - min_val
    
    return max_diff

# Test cases
assert max_Abs_Diff((2, 1, 5, 3)) == 4
assert max_Abs_Diff((9, 3, 2, 5, 1)) == 8
assert max_Abs_Diff((3, 2, 1)) == 2
",,True,post,True,True,True,True,True,False,True,True,False,True,True,False,selected_pilot_75_mbpp.json,85_gpt-4o,0.8333333333333334
146,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the list of maximum length in a list of lists.,"def max_length(list_of_lists):
    max_len = 0
    max_list = []
    
    for lst in list_of_lists:
        if len(lst) > max_len:
            max_len = len(lst)
            max_list = lst
            
    return (max_len, max_list)

# Test cases
assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])
assert max_length([[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15])
assert max_length([[5], [15, 20, 25]]) == (3, [15, 20, 25])
",,False,post,True,False,True,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,146_gpt-4o,0.5
151,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to flatten a given nested list structure.,"def flatten_list(nested_list):
    flat_list = []
    
    for item in nested_list:
        if isinstance(item, list):
            flat_list.extend(flatten_list(item))
        else:
            flat_list.append(item)
    
    return flat_list

# Testing the function with the provided test cases
assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]
assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]
",,False,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,151_gpt-4o,0.8333333333333334
57,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to sort each sublist of strings in a given list of lists.,"def sort_sublists(list_of_lists):
    return [sorted(sublist) for sublist in list_of_lists]

# Tests
assert sort_sublists(([""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
assert sort_sublists((["" red "",""green"" ],[""blue "","" black""],["" orange"",""brown""])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
assert sort_sublists(([""zilver"",""gold""], [""magnesium"",""aluminium""], [""steel"", ""bronze""])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]
",,True,post,True,False,False,False,False,False,False,True,False,False,False,True,selected_pilot_75_mbpp.json,57_gpt-4o,0.8333333333333334
1,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the shared elements from the given two lists.,"def similar_elements(test_tup1, test_tup2):
  return tuple(set(test_tup1) & set(test_tup2))
",,False,post,True,True,True,False,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,1_llama3point1-70b,0.8333333333333334
222,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to remove lowercase substrings from a given string.,"def remove_lowercase(s: str) -> str:
    return ''.join([char for char in s if char.isupper()])

# Testing the function
assert remove_lowercase(""PYTHon"") == 'PYTH'
assert remove_lowercase(""FInD"") == 'FID'
assert remove_lowercase(""STRinG"") == 'STRG'
",,False,post,True,True,False,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,222_gpt-4o,0.6666666666666666
161,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the n'th lucas number.,"def find_lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        a, b = 2, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b
",,False,post,True,True,False,False,True,False,True,False,False,True,False,False,selected_pilot_75_mbpp.json,161_llama3point1-70b,0.8333333333333334
161,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the n'th lucas number.,"def find_lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        a, b = 2, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b

# Test cases
assert find_lucas(9) == 76
assert find_lucas(4) == 7
assert find_lucas(3) == 4
",,True,post,True,True,False,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,161_gpt-4o,0.6666666666666666
290,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,"Write a function that checks if a strings contains 'z', except at the start and end of the word.","def text_match_wordz_middle(s):
    words = s.split()
    for word in words:
        if len(word) > 1 and 'z' in word[1:-1]:
            return True
    return False
",,False,post,True,True,True,True,False,False,True,True,True,True,False,False,selected_pilot_75_mbpp.json,290_llama3point1-70b,0.8333333333333334
290,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,"Write a function that checks if a strings contains 'z', except at the start and end of the word.","def text_match_wordz_middle(s):
    # Check if 'z' is in the string and not at the start or end
    if 'z' in s[1:-1]:
        return True
    return False

# Test cases
assert text_match_wordz_middle(""pythonzabc."") == True
assert text_match_wordz_middle(""zxyabc."") == False
assert text_match_wordz_middle(""  lang  ."") == False
",,False,post,True,False,True,True,True,False,False,False,True,True,True,False,selected_pilot_75_mbpp.json,290_gpt-4o,0.6666666666666666
182,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to extract only the rear index element of each string in the given tuple.,"def extract_rear(strings):
    return [s[-1] for s in strings]
",,False,post,True,True,False,True,False,False,True,False,False,False,False,False,selected_pilot_75_mbpp.json,182_llama3point1-70b,0.6666666666666666
182,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to extract only the rear index element of each string in the given tuple.,"def extract_rear(tup):
    return [s[-1] for s in tup]

# Test cases
assert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r', 's']
assert extract_rear(('Avenge', 'for', 'People')) == ['e', 'r', 'e']
assert extract_rear(('Gotta', 'get', 'go')) == ['a', 't', 'o']
",,False,post,True,True,True,True,True,False,True,False,False,True,False,False,selected_pilot_75_mbpp.json,182_gpt-4o,0.8333333333333334
309,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to check whether all the characters are same or not.,"def all_Characters_Same(s):
    if not s:  # If the string is empty, return True (edge case)
        return True
    first_char = s[0]
    for char in s:
        if char != first_char:
            return False
    return True

# Tests
assert all_Characters_Same(""python"") == False
assert all_Characters_Same(""aaa"") == True
assert all_Characters_Same(""data"") == False
",,True,post,True,False,True,True,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,309_gpt-4o,0.8333333333333334
333,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to check if the given expression is balanced or not.,"def check_expression(expr):
    stack = []
    matching_pairs = {')': '(', ']': '[', '}': '{'}
    
    for char in expr:
        if char in matching_pairs.values():
            stack.append(char)
        elif char in matching_pairs:
            if stack == [] or stack.pop() != matching_pairs[char]:
                return False
    return stack == []

# Testing the function with the provided test cases
assert check_expression(""{()}[{}]"") == True
assert check_expression(""{()}[{]"") == False
assert check_expression(""{()}[{}][]({})"") == True
",,True,post,False,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,333_gpt-4o,0.8333333333333334
117,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function that returns the number of integer elements in a given list.,"def count_integer(lst):
    return sum(1 for x in lst if isinstance(x, int))

# Provided test cases
assert count_integer([1, 2, 'abc', 1.2]) == 2
assert count_integer([1, 2, 3]) == 3
assert count_integer([1, 1.2, 4, 5.1]) == 2
",,False,post,True,True,True,True,True,False,False,True,True,True,True,True,selected_pilot_75_mbpp.json,117_gpt-4o,0.6666666666666666
360,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function that returns the list in a list of lists whose sum of elements is the highest.,"def max_sum_list(list_of_lists):
    # Initialize variables to track the maximum sum and the corresponding list
    max_sum = float('-inf')
    max_list = []
    
    # Iterate through each sublist
    for sublist in list_of_lists:
        # Calculate the sum of the current sublist
        current_sum = sum(sublist)
        
        # If the current sum is greater than the maximum sum found so far
        if current_sum > max_sum:
            # Update the maximum sum and the corresponding list
            max_sum = current_sum
            max_list = sublist
    
    # Return the list with the highest sum
    return max_list

# Tests
assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]
assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]]) == [12, 11, 10]
assert max_sum_list([[2,3,1]]) == [2, 3, 1]
",,False,post,True,False,True,True,True,False,False,False,False,True,True,True,selected_pilot_75_mbpp.json,360_gpt-4o,0.8333333333333334
307,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to find the index of smallest triangular number with n digits.,"def find_Index(n):
    import math
    idx = 1
    while True:
        triangular_num = (idx * (idx + 1)) // 2
        if len(str(triangular_num)) >= n:
            return idx
        idx += 1
",,False,post,False,False,True,True,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,307_llama3point1-70b,0.5
307,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the index of smallest triangular number with n digits.,"def find_Index(n):
    k = 1
    while True:
        triangular_number = k * (k + 1) // 2
        if len(str(triangular_number)) == n:
            return k
        k += 1

# Test cases
assert find_Index(2) == 4
assert find_Index(3) == 14
assert find_Index(4) == 45
",,False,post,False,False,True,True,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,307_gpt-4o,0.5
8,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s, char):
    first_occurrence = s.find(char)
    last_occurrence = s.rfind(char)
    
    if first_occurrence != -1 and last_occurrence != -1:
        if first_occurrence == last_occurrence:
            return s.replace(char, '', 1)
        else:
            return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]
    else:
        return s
",,False,post,True,True,False,True,False,False,True,True,True,False,False,False,selected_pilot_75_mbpp.json,8_llama3point1-70b,0.6666666666666666
8,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s: str, ch: str) -> str:
    first_index = s.find(ch)
    last_index = s.rfind(ch)
    
    if first_index == -1 or last_index == -1 or first_index == last_index:
        return s  # No removal needed if ch is not found or only one occurrence
    
    # Create a new string without the first and last occurrence of ch
    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]

# Testing the function with the provided test cases
assert remove_Occ(""hello"", ""l"") == ""heo""
assert remove_Occ(""abcda"", ""a"") == ""bcd""
assert remove_Occ(""PHP"", ""P"") == ""H""
",,False,post,False,False,True,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,8_gpt-4o,0.8333333333333334
159,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the volume of a cone.,"import math

def volume_cone(radius, height):
    return (1/3) * math.pi * (radius ** 2) * height

# Tests
assert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)
assert math.isclose(volume_cone(10, 15), 1570.7963267948965, rel_tol=0.001)
assert math.isclose(volume_cone(19, 17), 6426.651371693521, rel_tol=0.001)
",,True,post,True,False,True,True,True,False,True,True,False,True,True,True,selected_pilot_75_mbpp.json,159_gpt-4o,0.6666666666666666
271,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,"Write a function that takes a tuple of tuples and returns a list where each element is the average of the corresponding values from each tuple. For each position, compute the average of values from all tuples at that position.","def average_tuple(tuples):
    return [sum(val) / len(tuples) for val in zip(*tuples)]
",,False,post,True,False,False,True,False,False,False,False,False,True,False,False,selected_pilot_75_mbpp.json,271_llama3point1-70b,0.6666666666666666
96,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to check if all the elements in tuple have same data type or not.,"def check_type(tup):
    if not tup:
        return True  # An empty tuple can be considered as having the same type for all elements.
    
    first_type = type(tup[0])
    for element in tup:
        if type(element) != first_type:
            return False
    return True

# Test cases
assert check_type((5, 6, 7, 3, 5, 6)) == True
assert check_type((1, 2, ""4"")) == False
assert check_type((3, 2, 1, 4, 5)) == True
",,False,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,96_gpt-4o,0.6666666666666666
133,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.,"def substract_elements(tup1, tup2):
    return tuple(a - b for a, b in zip(tup1, tup2))
",,False,post,True,True,True,True,True,False,True,False,False,True,True,False,selected_pilot_75_mbpp.json,133_llama3point1-70b,0.8333333333333334
133,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.,"def substract_elements(tup1, tup2):
    return tuple(a - b for a, b in zip(tup1, tup2))

# Test cases
assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)
assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)
assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,133_gpt-4o,0.8333333333333334
297,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,"Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.","def multiply_elements(t):
    return tuple(t[i] * t[i+1] for i in range(len(t) - 1))

# Test cases
assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)
assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)
assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)
assert multiply_elements((12,)) == ()
",,False,post,True,True,True,True,False,False,True,False,False,False,True,False,selected_pilot_75_mbpp.json,297_gpt-4o,0.5
216,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to check whether the given list contains consecutive numbers or not.,"def check_Consecutive(lst):
    lst.sort()
    return all(lst[i] - lst[i-1] == 1 for i in range(1, len(lst))) and len(lst) == len(set(lst))
",,False,post,True,False,False,True,False,False,False,True,False,False,True,True,selected_pilot_75_mbpp.json,216_llama3point1-70b,0.5
197,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to count the occurence of all elements of list in a tuple.,"def count_Occurrence(tup, lst):
    return sum(tup.count(element) for element in lst)
",,True,post,True,False,True,False,True,True,False,False,False,True,True,True,selected_pilot_75_mbpp.json,197_llama3point1-70b,0.6666666666666666
197,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to count the occurence of all elements of list in a tuple.,"def count_Occurrence(tup, elements):
    count = sum(tup.count(element) for element in elements)
    return count

# Test cases
assert count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3
assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]) == 6
assert count_Occurrence((1, 2, 3, 4, 5, 6), [1, 2]) == 2
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,197_gpt-4o,0.6666666666666666
336,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to check whether every odd index contains odd numbers of a given list.,"def odd_position(lst):
    for i in range(len(lst)):
        if i % 2 != 0 and lst[i] % 2 == 0:
            return False
    return True
",,True,post,True,False,False,False,False,False,False,True,False,False,False,False,selected_pilot_75_mbpp.json,336_llama3point1-70b,0.5
123,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,"Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.","def split_two_parts(lst, L):
    return lst[:L], lst[L:]
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,123_llama3point1-70b,0.8333333333333334
123,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,"Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.","def split_two_parts(lst, L):
    return (lst[:L], lst[L:])

# Tests
assert split_two_parts([1,1,2,3,4,4,5,1],3) == ([1, 1, 2], [3, 4, 4, 5, 1])
assert split_two_parts(['a', 'b', 'c', 'd'],2) == (['a', 'b'], ['c', 'd'])
assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4) == (['p', 'y', 't', 'h'], ['o', 'n'])
",,True,post,True,True,True,True,False,True,True,True,True,False,False,True,selected_pilot_75_mbpp.json,123_gpt-4o,0.8333333333333334
258,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to check whether the given number is armstrong or not.,"def armstrong_number(num):
    num_str = str(num)
    num_len = len(num_str)
    sum = 0
    for digit in num_str:
        sum += int(digit) ** num_len
    return sum == num
",,False,post,True,True,False,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,258_llama3point1-70b,0.8333333333333334
258,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to check whether the given number is armstrong or not.,"def armstrong_number(n):
    # Convert the number to string to easily iterate through its digits
    num_str = str(n)
    # Calculate the number of digits
    num_len = len(num_str)
    # Calculate the sum of the digits each raised to the power of the number of digits
    armstrong_sum = sum(int(digit) ** num_len for digit in num_str)
    # Compare the sum to the original number
    return armstrong_sum == n

# Tests
assert armstrong_number(153) == True
assert armstrong_number(259) == False
assert armstrong_number(4458) == False
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,258_gpt-4o,0.8333333333333334
14,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find whether a given array of integers contains any duplicate element.,"def test_duplicate(arr):
    return len(arr) != len(set(arr))
",,True,post,True,False,True,False,False,True,False,False,True,False,True,True,selected_pilot_75_mbpp.json,14_llama3point1-70b,0.6666666666666666
141,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.,"def validate(n):
    str_n = str(n)
    for digit in str_n:
        if str_n.count(digit) > int(digit):
            return False
    return True",,False,post,True,True,True,True,False,False,True,True,True,False,False,False,selected_pilot_75_mbpp.json,141_llama3point1-70b,0.6666666666666666
178,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.,"def round_and_sum(numbers):
    rounded_numbers = [round(num) for num in numbers]
    total_sum = sum(rounded_numbers)
    result = total_sum * len(numbers)
    return result

# Tests
assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243
assert round_and_sum([5, 2, 9, 24.3, 29]) == 345
assert round_and_sum([25.0, 56.7, 89.2]) == 513
",,False,post,True,False,True,True,False,False,True,False,False,True,True,False,selected_pilot_75_mbpp.json,178_gpt-4o,0.8333333333333334
275,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.,"def largest_subset(nums):
    if not nums:
        return 0

    nums.sort()
    dp = [1] * len(nums)

    for i in range(1, len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)
",,True,post,True,False,True,True,True,True,False,True,False,True,True,True,selected_pilot_75_mbpp.json,275_llama3point1-70b,0.8333333333333334
275,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.,"def largest_subset(nums):
    if not nums:
        return 0

    nums.sort()
    dp = [1] * len(nums)
    
    for i in range(len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0:
                dp[i] = max(dp[i], dp[j] + 1)
    
    return max(dp)

# Testing the function with the provided test cases
assert largest_subset([1, 3, 6, 13, 17, 18]) == 4
assert largest_subset([10, 5, 3, 15, 20]) == 3
assert largest_subset([18, 1, 3, 6, 13, 17]) == 4
",,False,post,True,True,True,True,False,False,True,True,True,False,False,False,selected_pilot_75_mbpp.json,275_gpt-4o,0.6666666666666666
344,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to locate the right insertion point for a specified value in sorted order.,"def right_insertion(sorted_list, value):
    for i in range(len(sorted_list)):
        if sorted_list[i] >= value:
            return i
    return len(sorted_list)
",,True,post,False,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,344_llama3point1-70b,0.6666666666666666
344,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to locate the right insertion point for a specified value in sorted order.,"import bisect

def right_insertion(sorted_list, value):
    return bisect.bisect_right(sorted_list, value)

# Test cases
assert right_insertion([1,2,4,5],6)==4
assert right_insertion([1,2,4,5],3)==2
assert right_insertion([1,2,4,5],7)==4
",,True,post,True,False,True,True,False,True,True,False,True,True,True,True,selected_pilot_75_mbpp.json,344_gpt-4o,0.6666666666666666
326,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the minimum difference between any two elements in a given array.,"def find_min_diff(arr, n):
    if n < 2:
        return 0  # If array has less than 2 elements, no valid difference can be found
    
    arr = sorted(arr)
    min_diff = float('inf')
    
    for i in range(n - 1):
        diff = arr[i+1] - arr[i]
        if diff < min_diff:
            min_diff = diff
            
    return min_diff

# Testing the function based on the provided assertions
assert find_min_diff((1,5,3,19,18,25),6) == 1
assert find_min_diff((4,3,2,6),4) == 1
assert find_min_diff((30,5,20,9),4) == 4
",,False,post,True,False,False,False,True,False,False,False,False,True,True,True,selected_pilot_75_mbpp.json,326_gpt-4o,0.5
184,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to filter odd numbers.,"def filter_oddnumbers(nums):
  return [num for num in nums if num % 2 != 0]
",,True,post,True,False,True,True,False,False,False,True,True,False,False,True,selected_pilot_75_mbpp.json,184_llama3point1-70b,0.8333333333333334
121,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the nth newman–shanks–williams prime number.,"def is_prime(n):
    """"""Check if a number is prime.""""""
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def newman_prime(n):
    """"""Find the nth Newman-Shanks-Williams prime number.""""""
    if n == 1:
        return 7  # The first NSW prime is 7
    
    # Initialize the count of NSW primes and the current number
    count = 1
    num = 7
    
    while True:
        # Check if the current number is a prime number
        if is_prime(num):
            # Check if the current prime number is congruent to 1 or 5 modulo 6
            if num % 6 in [1, 5]:
                # Increment the count of NSW primes
                count += 1
                
                # If we have found the nth NSW prime, return it
                if count == n:
                    return num
        
        # Move on to the next number
        num += 1
",,False,post,False,True,False,True,True,False,True,True,False,True,True,True,selected_pilot_75_mbpp.json,121_llama3point1-70b,0.8333333333333334
21,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find smallest number in a list.,"def smallest_num(lst):
    return min(lst)

# Tests
assert smallest_num([10, 20, 1, 45, 99]) == 1
assert smallest_num([1, 2, 3]) == 1
assert smallest_num([45, 46, 50, 60]) == 45
",,False,post,True,True,False,True,False,False,True,False,False,True,False,False,selected_pilot_75_mbpp.json,21_gpt-4o,0.5
302,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the index of the first occurrence of a given number in a sorted array.,"def find_first_occurrence(arr, num):
    for i, x in enumerate(arr):
        if x == num:
            return i
    return -1  # return -1 if num is not found in the array
",,True,post,True,True,True,True,False,True,True,True,True,True,False,True,selected_pilot_75_mbpp.json,302_llama3point1-70b,0.5
4,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to check whether the two numbers differ at one bit position only or not.,"def differ_At_One_Bit_Pos(a, b):
    xor_result = a ^ b
    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0

# Tests
assert differ_At_One_Bit_Pos(13, 9) == True
assert differ_At_One_Bit_Pos(15, 8) == False
assert differ_At_One_Bit_Pos(2, 4) == False
assert differ_At_One_Bit_Pos(2, 3) == True
assert differ_At_One_Bit_Pos(5, 1) == True
assert differ_At_One_Bit_Pos(1, 5) == True
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,4_gpt-4o,0.6666666666666666
235,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to get the sum of the digits of a non-negative integer.,"def sum_digits(n: int) -> int:
    total = 0
    while n > 0:
        total += n % 10
        n //= 10
    return total

# Testing the function with the provided test cases
assert sum_digits(345) == 12
assert sum_digits(12) == 3
assert sum_digits(97) == 16
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,235_gpt-4o,0.6666666666666666
356,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to remove all whitespaces from a string.,"def remove_all_spaces(input_str):
    return input_str.replace("" "", """")
",,False,post,True,True,False,False,False,False,True,True,False,False,False,False,selected_pilot_75_mbpp.json,356_llama3point1-70b,0.6666666666666666
356,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to remove all whitespaces from a string.,"def remove_all_spaces(s):
    return s.replace("" "", """")

# Test cases
assert remove_all_spaces('python  program') == 'pythonprogram'
assert remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'
assert remove_all_spaces('python                     program') == 'pythonprogram'
assert remove_all_spaces('   python                     program') == 'pythonprogram'
",,False,post,True,True,False,True,True,False,True,False,False,True,False,False,selected_pilot_75_mbpp.json,356_gpt-4o,0.8333333333333334
142,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.,"def check_element(lst, element):
    for item in lst:
        if item != element:
            return False
    return True

# Test cases
assert check_element([""green"", ""orange"", ""black"", ""white""], 'blue') == False
assert check_element([1, 2, 3, 4], 7) == False
assert check_element([""green"", ""green"", ""green"", ""green""], 'green') == True
",,True,post,True,True,True,False,True,False,True,True,True,False,False,True,selected_pilot_75_mbpp.json,142_gpt-4o,0.8333333333333334
315,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to add the given tuple to the given list.,"def add_tuple(input_list, input_tuple):
  return input_list + list(input_tuple)
",,True,post,True,True,False,False,True,False,True,False,False,True,True,False,selected_pilot_75_mbpp.json,315_llama3point1-70b,0.6666666666666666
207,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the area of a rectangle.,"def rectangle_area(length, width):
    return length * width

# Test the function with the provided assertions
assert rectangle_area(10, 20) == 200
assert rectangle_area(10, 5) == 50
assert rectangle_area(4, 2) == 8
",,False,post,True,False,True,True,True,False,True,False,False,True,True,False,selected_pilot_75_mbpp.json,207_gpt-4o,0.6666666666666666
179,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n):
    return sum(i**3 for i in range(2, n*2+1, 2))
",,True,post,True,True,False,False,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,179_llama3point1-70b,0.8333333333333334
179,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n):
    even_numbers = [2 * i for i in range(1, n + 1)]
    cube_sum = sum(x ** 3 for x in even_numbers)
    return cube_sum

# Tests
assert cube_Sum(2) == 72
assert cube_Sum(3) == 288
assert cube_Sum(4) == 800
",,True,post,True,False,True,True,False,False,True,True,False,False,False,False,selected_pilot_75_mbpp.json,179_gpt-4o,0.5
134,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.,"import math

def even_binomial_Coeff_Sum(n):
    sum = 0
    for i in range(n + 1):
        if i % 2 == 0:
            sum += math.comb(n, i)
    return sum
",,True,post,True,True,True,True,True,False,True,True,True,True,True,False,selected_pilot_75_mbpp.json,134_llama3point1-70b,0.8333333333333334
134,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.,"import math

def even_binomial_Coeff_Sum(n):
    # Sum of binomial coefficients at even indices is given by 2^(n-1)
    return 2**(n-1)

# Test cases
assert even_binomial_Coeff_Sum(4) == 8
assert even_binomial_Coeff_Sum(6) == 32
assert even_binomial_Coeff_Sum(2) == 2
",,False,post,True,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,134_gpt-4o,0.8333333333333334
85,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to find the maximum difference between any two elements in a given array.,"def max_Abs_Diff(arr):
    return max(arr) - min(arr)
",,False,post,True,False,True,True,True,False,False,False,False,True,True,False,selected_pilot_75_mbpp.json,85_llama3point1-70b,0.8333333333333334
85,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the maximum difference between any two elements in a given array.,"def max_Abs_Diff(arr):
    # Find the minimum and maximum values in the array
    min_val = min(arr)
    max_val = max(arr)
    
    # Calculate the maximum absolute difference
    max_diff = max_val - min_val
    
    return max_diff

# Test cases
assert max_Abs_Diff((2, 1, 5, 3)) == 4
assert max_Abs_Diff((9, 3, 2, 5, 1)) == 8
assert max_Abs_Diff((3, 2, 1)) == 2
",,False,post,True,True,True,True,True,False,True,True,False,True,True,False,selected_pilot_75_mbpp.json,85_gpt-4o,0.8333333333333334
146,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the list of maximum length in a list of lists.,"def max_length(list_of_lists):
    max_len = 0
    max_list = []
    
    for lst in list_of_lists:
        if len(lst) > max_len:
            max_len = len(lst)
            max_list = lst
            
    return (max_len, max_list)

# Test cases
assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])
assert max_length([[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15])
assert max_length([[5], [15, 20, 25]]) == (3, [15, 20, 25])
",,True,post,True,False,False,False,False,True,False,False,False,False,False,False,selected_pilot_75_mbpp.json,146_gpt-4o,0.5
151,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to flatten a given nested list structure.,"def flatten_list(nested_list):
    flat_list = []
    
    for item in nested_list:
        if isinstance(item, list):
            flat_list.extend(flatten_list(item))
        else:
            flat_list.append(item)
    
    return flat_list

# Testing the function with the provided test cases
assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]
assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,151_gpt-4o,0.8333333333333334
57,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to sort each sublist of strings in a given list of lists.,"def sort_sublists(list_of_lists):
    return [sorted(sublist) for sublist in list_of_lists]

# Tests
assert sort_sublists(([""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
assert sort_sublists((["" red "",""green"" ],[""blue "","" black""],["" orange"",""brown""])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
assert sort_sublists(([""zilver"",""gold""], [""magnesium"",""aluminium""], [""steel"", ""bronze""])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]
",,True,post,True,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,57_gpt-4o,0.8333333333333334
1,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the shared elements from the given two lists.,"def similar_elements(test_tup1, test_tup2):
  return tuple(set(test_tup1) & set(test_tup2))
",,True,post,True,True,True,False,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,1_llama3point1-70b,0.8333333333333334
222,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to remove lowercase substrings from a given string.,"def remove_lowercase(s: str) -> str:
    return ''.join([char for char in s if char.isupper()])

# Testing the function
assert remove_lowercase(""PYTHon"") == 'PYTH'
assert remove_lowercase(""FInD"") == 'FID'
assert remove_lowercase(""STRinG"") == 'STRG'
",,False,post,True,True,False,False,False,False,False,True,True,False,False,False,selected_pilot_75_mbpp.json,222_gpt-4o,0.6666666666666666
161,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the n'th lucas number.,"def find_lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        a, b = 2, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b
",,False,post,True,True,False,True,False,False,True,True,False,True,True,True,selected_pilot_75_mbpp.json,161_llama3point1-70b,0.8333333333333334
161,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the n'th lucas number.,"def find_lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        a, b = 2, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b

# Test cases
assert find_lucas(9) == 76
assert find_lucas(4) == 7
assert find_lucas(3) == 4
",,True,post,True,True,False,False,True,False,False,True,True,False,False,True,selected_pilot_75_mbpp.json,161_gpt-4o,0.6666666666666666
290,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,"Write a function that checks if a strings contains 'z', except at the start and end of the word.","def text_match_wordz_middle(s):
    words = s.split()
    for word in words:
        if len(word) > 1 and 'z' in word[1:-1]:
            return True
    return False
",,True,post,True,False,True,True,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,290_llama3point1-70b,0.8333333333333334
290,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,"Write a function that checks if a strings contains 'z', except at the start and end of the word.","def text_match_wordz_middle(s):
    # Check if 'z' is in the string and not at the start or end
    if 'z' in s[1:-1]:
        return True
    return False

# Test cases
assert text_match_wordz_middle(""pythonzabc."") == True
assert text_match_wordz_middle(""zxyabc."") == False
assert text_match_wordz_middle(""  lang  ."") == False
",,True,post,True,False,True,True,False,False,False,True,True,False,False,False,selected_pilot_75_mbpp.json,290_gpt-4o,0.6666666666666666
182,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to extract only the rear index element of each string in the given tuple.,"def extract_rear(strings):
    return [s[-1] for s in strings]
",,False,post,True,True,False,True,True,False,True,False,False,False,False,False,selected_pilot_75_mbpp.json,182_llama3point1-70b,0.6666666666666666
182,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to extract only the rear index element of each string in the given tuple.,"def extract_rear(tup):
    return [s[-1] for s in tup]

# Test cases
assert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r', 's']
assert extract_rear(('Avenge', 'for', 'People')) == ['e', 'r', 'e']
assert extract_rear(('Gotta', 'get', 'go')) == ['a', 't', 'o']
",,False,post,True,False,True,True,True,False,True,False,False,True,True,False,selected_pilot_75_mbpp.json,182_gpt-4o,0.8333333333333334
309,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to check whether all the characters are same or not.,"def all_Characters_Same(s):
    if not s:  # If the string is empty, return True (edge case)
        return True
    first_char = s[0]
    for char in s:
        if char != first_char:
            return False
    return True

# Tests
assert all_Characters_Same(""python"") == False
assert all_Characters_Same(""aaa"") == True
assert all_Characters_Same(""data"") == False
",,True,post,True,False,False,True,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,309_gpt-4o,0.8333333333333334
333,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to check if the given expression is balanced or not.,"def check_expression(expr):
    stack = []
    matching_pairs = {')': '(', ']': '[', '}': '{'}
    
    for char in expr:
        if char in matching_pairs.values():
            stack.append(char)
        elif char in matching_pairs:
            if stack == [] or stack.pop() != matching_pairs[char]:
                return False
    return stack == []

# Testing the function with the provided test cases
assert check_expression(""{()}[{}]"") == True
assert check_expression(""{()}[{]"") == False
assert check_expression(""{()}[{}][]({})"") == True
",,False,post,False,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,333_gpt-4o,0.8333333333333334
117,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function that returns the number of integer elements in a given list.,"def count_integer(lst):
    return sum(1 for x in lst if isinstance(x, int))

# Provided test cases
assert count_integer([1, 2, 'abc', 1.2]) == 2
assert count_integer([1, 2, 3]) == 3
assert count_integer([1, 1.2, 4, 5.1]) == 2
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,117_gpt-4o,0.6666666666666666
360,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function that returns the list in a list of lists whose sum of elements is the highest.,"def max_sum_list(list_of_lists):
    # Initialize variables to track the maximum sum and the corresponding list
    max_sum = float('-inf')
    max_list = []
    
    # Iterate through each sublist
    for sublist in list_of_lists:
        # Calculate the sum of the current sublist
        current_sum = sum(sublist)
        
        # If the current sum is greater than the maximum sum found so far
        if current_sum > max_sum:
            # Update the maximum sum and the corresponding list
            max_sum = current_sum
            max_list = sublist
    
    # Return the list with the highest sum
    return max_list

# Tests
assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]
assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]]) == [12, 11, 10]
assert max_sum_list([[2,3,1]]) == [2, 3, 1]
",,False,post,True,False,False,True,True,False,False,True,True,True,False,False,selected_pilot_75_mbpp.json,360_gpt-4o,0.8333333333333334
307,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to find the index of smallest triangular number with n digits.,"def find_Index(n):
    import math
    idx = 1
    while True:
        triangular_num = (idx * (idx + 1)) // 2
        if len(str(triangular_num)) >= n:
            return idx
        idx += 1
",,True,post,False,True,True,True,True,False,True,True,True,True,True,False,selected_pilot_75_mbpp.json,307_llama3point1-70b,0.5
307,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the index of smallest triangular number with n digits.,"def find_Index(n):
    k = 1
    while True:
        triangular_number = k * (k + 1) // 2
        if len(str(triangular_number)) == n:
            return k
        k += 1

# Test cases
assert find_Index(2) == 4
assert find_Index(3) == 14
assert find_Index(4) == 45
",,False,post,False,False,False,True,True,False,True,False,True,True,True,True,selected_pilot_75_mbpp.json,307_gpt-4o,0.5
8,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s, char):
    first_occurrence = s.find(char)
    last_occurrence = s.rfind(char)
    
    if first_occurrence != -1 and last_occurrence != -1:
        if first_occurrence == last_occurrence:
            return s.replace(char, '', 1)
        else:
            return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]
    else:
        return s
",,True,post,True,True,True,True,False,False,True,True,True,False,False,False,selected_pilot_75_mbpp.json,8_llama3point1-70b,0.6666666666666666
8,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s: str, ch: str) -> str:
    first_index = s.find(ch)
    last_index = s.rfind(ch)
    
    if first_index == -1 or last_index == -1 or first_index == last_index:
        return s  # No removal needed if ch is not found or only one occurrence
    
    # Create a new string without the first and last occurrence of ch
    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]

# Testing the function with the provided test cases
assert remove_Occ(""hello"", ""l"") == ""heo""
assert remove_Occ(""abcda"", ""a"") == ""bcd""
assert remove_Occ(""PHP"", ""P"") == ""H""
",,True,post,False,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,8_gpt-4o,0.8333333333333334
159,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the volume of a cone.,"import math

def volume_cone(radius, height):
    return (1/3) * math.pi * (radius ** 2) * height

# Tests
assert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)
assert math.isclose(volume_cone(10, 15), 1570.7963267948965, rel_tol=0.001)
assert math.isclose(volume_cone(19, 17), 6426.651371693521, rel_tol=0.001)
",,False,post,True,True,True,True,False,False,True,True,False,True,False,False,selected_pilot_75_mbpp.json,159_gpt-4o,0.6666666666666666
271,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,"Write a function that takes a tuple of tuples and returns a list where each element is the average of the corresponding values from each tuple. For each position, compute the average of values from all tuples at that position.","def average_tuple(tuples):
    return [sum(val) / len(tuples) for val in zip(*tuples)]
",,False,post,True,False,False,True,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,271_llama3point1-70b,0.6666666666666666
96,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to check if all the elements in tuple have same data type or not.,"def check_type(tup):
    if not tup:
        return True  # An empty tuple can be considered as having the same type for all elements.
    
    first_type = type(tup[0])
    for element in tup:
        if type(element) != first_type:
            return False
    return True

# Test cases
assert check_type((5, 6, 7, 3, 5, 6)) == True
assert check_type((1, 2, ""4"")) == False
assert check_type((3, 2, 1, 4, 5)) == True
",,False,post,True,True,False,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,96_gpt-4o,0.6666666666666666
133,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.,"def substract_elements(tup1, tup2):
    return tuple(a - b for a, b in zip(tup1, tup2))
",,False,post,True,True,True,True,True,False,True,False,False,True,True,True,selected_pilot_75_mbpp.json,133_llama3point1-70b,0.8333333333333334
133,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.,"def substract_elements(tup1, tup2):
    return tuple(a - b for a, b in zip(tup1, tup2))

# Test cases
assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)
assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)
assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)
",,True,post,True,False,True,True,False,False,False,True,False,False,False,False,selected_pilot_75_mbpp.json,133_gpt-4o,0.8333333333333334
297,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,"Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.","def multiply_elements(t):
    return tuple(t[i] * t[i+1] for i in range(len(t) - 1))

# Test cases
assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)
assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)
assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)
assert multiply_elements((12,)) == ()
",,True,post,True,True,True,True,False,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,297_gpt-4o,0.5
216,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to check whether the given list contains consecutive numbers or not.,"def check_Consecutive(lst):
    lst.sort()
    return all(lst[i] - lst[i-1] == 1 for i in range(1, len(lst))) and len(lst) == len(set(lst))
",,False,post,True,False,False,True,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,216_llama3point1-70b,0.5
197,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to count the occurence of all elements of list in a tuple.,"def count_Occurrence(tup, lst):
    return sum(tup.count(element) for element in lst)
",,True,post,True,True,True,False,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,197_llama3point1-70b,0.6666666666666666
197,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to count the occurence of all elements of list in a tuple.,"def count_Occurrence(tup, elements):
    count = sum(tup.count(element) for element in elements)
    return count

# Test cases
assert count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3
assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]) == 6
assert count_Occurrence((1, 2, 3, 4, 5, 6), [1, 2]) == 2
",,True,post,True,False,True,True,True,True,False,False,False,True,True,True,selected_pilot_75_mbpp.json,197_gpt-4o,0.6666666666666666
336,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to check whether every odd index contains odd numbers of a given list.,"def odd_position(lst):
    for i in range(len(lst)):
        if i % 2 != 0 and lst[i] % 2 == 0:
            return False
    return True
",,True,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,336_llama3point1-70b,0.5
123,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,"Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.","def split_two_parts(lst, L):
    return lst[:L], lst[L:]
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,123_llama3point1-70b,0.8333333333333334
123,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,"Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.","def split_two_parts(lst, L):
    return (lst[:L], lst[L:])

# Tests
assert split_two_parts([1,1,2,3,4,4,5,1],3) == ([1, 1, 2], [3, 4, 4, 5, 1])
assert split_two_parts(['a', 'b', 'c', 'd'],2) == (['a', 'b'], ['c', 'd'])
assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4) == (['p', 'y', 't', 'h'], ['o', 'n'])
",,True,post,True,False,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,123_gpt-4o,0.8333333333333334
258,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to check whether the given number is armstrong or not.,"def armstrong_number(num):
    num_str = str(num)
    num_len = len(num_str)
    sum = 0
    for digit in num_str:
        sum += int(digit) ** num_len
    return sum == num
",,False,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,258_llama3point1-70b,0.8333333333333334
258,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to check whether the given number is armstrong or not.,"def armstrong_number(n):
    # Convert the number to string to easily iterate through its digits
    num_str = str(n)
    # Calculate the number of digits
    num_len = len(num_str)
    # Calculate the sum of the digits each raised to the power of the number of digits
    armstrong_sum = sum(int(digit) ** num_len for digit in num_str)
    # Compare the sum to the original number
    return armstrong_sum == n

# Tests
assert armstrong_number(153) == True
assert armstrong_number(259) == False
assert armstrong_number(4458) == False
",,False,post,True,False,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,258_gpt-4o,0.8333333333333334
14,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find whether a given array of integers contains any duplicate element.,"def test_duplicate(arr):
    return len(arr) != len(set(arr))
",,True,post,True,True,True,False,False,False,True,True,True,False,False,False,selected_pilot_75_mbpp.json,14_llama3point1-70b,0.6666666666666666
141,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.,"def validate(n):
    str_n = str(n)
    for digit in str_n:
        if str_n.count(digit) > int(digit):
            return False
    return True",,False,post,True,False,True,True,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,141_llama3point1-70b,0.6666666666666666
178,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.,"def round_and_sum(numbers):
    rounded_numbers = [round(num) for num in numbers]
    total_sum = sum(rounded_numbers)
    result = total_sum * len(numbers)
    return result

# Tests
assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243
assert round_and_sum([5, 2, 9, 24.3, 29]) == 345
assert round_and_sum([25.0, 56.7, 89.2]) == 513
",,True,post,True,False,True,True,False,False,False,False,True,False,False,False,selected_pilot_75_mbpp.json,178_gpt-4o,0.8333333333333334
275,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.,"def largest_subset(nums):
    if not nums:
        return 0

    nums.sort()
    dp = [1] * len(nums)

    for i in range(1, len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,275_llama3point1-70b,0.8333333333333334
275,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.,"def largest_subset(nums):
    if not nums:
        return 0

    nums.sort()
    dp = [1] * len(nums)
    
    for i in range(len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0:
                dp[i] = max(dp[i], dp[j] + 1)
    
    return max(dp)

# Testing the function with the provided test cases
assert largest_subset([1, 3, 6, 13, 17, 18]) == 4
assert largest_subset([10, 5, 3, 15, 20]) == 3
assert largest_subset([18, 1, 3, 6, 13, 17]) == 4
",,False,post,True,False,True,True,True,False,False,False,False,True,True,True,selected_pilot_75_mbpp.json,275_gpt-4o,0.6666666666666666
344,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to locate the right insertion point for a specified value in sorted order.,"def right_insertion(sorted_list, value):
    for i in range(len(sorted_list)):
        if sorted_list[i] >= value:
            return i
    return len(sorted_list)
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,344_llama3point1-70b,0.6666666666666666
344,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to locate the right insertion point for a specified value in sorted order.,"import bisect

def right_insertion(sorted_list, value):
    return bisect.bisect_right(sorted_list, value)

# Test cases
assert right_insertion([1,2,4,5],6)==4
assert right_insertion([1,2,4,5],3)==2
assert right_insertion([1,2,4,5],7)==4
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,344_gpt-4o,0.6666666666666666
326,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the minimum difference between any two elements in a given array.,"def find_min_diff(arr, n):
    if n < 2:
        return 0  # If array has less than 2 elements, no valid difference can be found
    
    arr = sorted(arr)
    min_diff = float('inf')
    
    for i in range(n - 1):
        diff = arr[i+1] - arr[i]
        if diff < min_diff:
            min_diff = diff
            
    return min_diff

# Testing the function based on the provided assertions
assert find_min_diff((1,5,3,19,18,25),6) == 1
assert find_min_diff((4,3,2,6),4) == 1
assert find_min_diff((30,5,20,9),4) == 4
",,False,post,True,False,False,True,True,False,False,False,False,True,True,True,selected_pilot_75_mbpp.json,326_gpt-4o,0.5
184,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to filter odd numbers.,"def filter_oddnumbers(nums):
  return [num for num in nums if num % 2 != 0]
",,True,post,True,False,True,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,184_llama3point1-70b,0.8333333333333334
179,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n):
    return sum(i**3 for i in range(2, n*2+1, 2))
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,179_llama3point1-70b,0.8333333333333334
179,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n):
    even_numbers = [2 * i for i in range(1, n + 1)]
    cube_sum = sum(x ** 3 for x in even_numbers)
    return cube_sum

# Tests
assert cube_Sum(2) == 72
assert cube_Sum(3) == 288
assert cube_Sum(4) == 800
",,True,post,True,False,True,True,False,True,False,True,True,True,True,True,selected_pilot_75_mbpp.json,179_gpt-4o,0.5
134,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.,"import math

def even_binomial_Coeff_Sum(n):
    sum = 0
    for i in range(n + 1):
        if i % 2 == 0:
            sum += math.comb(n, i)
    return sum
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,134_llama3point1-70b,0.8333333333333334
134,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.,"import math

def even_binomial_Coeff_Sum(n):
    # Sum of binomial coefficients at even indices is given by 2^(n-1)
    return 2**(n-1)

# Test cases
assert even_binomial_Coeff_Sum(4) == 8
assert even_binomial_Coeff_Sum(6) == 32
assert even_binomial_Coeff_Sum(2) == 2
",,False,post,True,False,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,134_gpt-4o,0.8333333333333334
85,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to find the maximum difference between any two elements in a given array.,"def max_Abs_Diff(arr):
    return max(arr) - min(arr)
",,False,post,True,True,False,True,False,False,True,False,False,True,False,False,selected_pilot_75_mbpp.json,85_llama3point1-70b,0.8333333333333334
85,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the maximum difference between any two elements in a given array.,"def max_Abs_Diff(arr):
    # Find the minimum and maximum values in the array
    min_val = min(arr)
    max_val = max(arr)
    
    # Calculate the maximum absolute difference
    max_diff = max_val - min_val
    
    return max_diff

# Test cases
assert max_Abs_Diff((2, 1, 5, 3)) == 4
assert max_Abs_Diff((9, 3, 2, 5, 1)) == 8
assert max_Abs_Diff((3, 2, 1)) == 2
",,False,post,True,True,False,True,True,False,True,False,False,True,False,False,selected_pilot_75_mbpp.json,85_gpt-4o,0.8333333333333334
146,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the list of maximum length in a list of lists.,"def max_length(list_of_lists):
    max_len = 0
    max_list = []
    
    for lst in list_of_lists:
        if len(lst) > max_len:
            max_len = len(lst)
            max_list = lst
            
    return (max_len, max_list)

# Test cases
assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])
assert max_length([[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15])
assert max_length([[5], [15, 20, 25]]) == (3, [15, 20, 25])
",,False,post,True,False,True,False,True,False,False,False,False,True,True,True,selected_pilot_75_mbpp.json,146_gpt-4o,0.5
151,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to flatten a given nested list structure.,"def flatten_list(nested_list):
    flat_list = []
    
    for item in nested_list:
        if isinstance(item, list):
            flat_list.extend(flatten_list(item))
        else:
            flat_list.append(item)
    
    return flat_list

# Testing the function with the provided test cases
assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]
assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,151_gpt-4o,0.8333333333333334
57,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to sort each sublist of strings in a given list of lists.,"def sort_sublists(list_of_lists):
    return [sorted(sublist) for sublist in list_of_lists]

# Tests
assert sort_sublists(([""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
assert sort_sublists((["" red "",""green"" ],[""blue "","" black""],["" orange"",""brown""])) == [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]
assert sort_sublists(([""zilver"",""gold""], [""magnesium"",""aluminium""], [""steel"", ""bronze""])) == [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]
",,False,post,True,False,False,True,False,False,True,True,True,False,False,False,selected_pilot_75_mbpp.json,57_gpt-4o,0.8333333333333334
1,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the shared elements from the given two lists.,"def similar_elements(test_tup1, test_tup2):
  return tuple(set(test_tup1) & set(test_tup2))
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,1_llama3point1-70b,0.8333333333333334
222,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to remove lowercase substrings from a given string.,"def remove_lowercase(s: str) -> str:
    return ''.join([char for char in s if char.isupper()])

# Testing the function
assert remove_lowercase(""PYTHon"") == 'PYTH'
assert remove_lowercase(""FInD"") == 'FID'
assert remove_lowercase(""STRinG"") == 'STRG'
",,True,post,True,True,False,True,True,True,True,True,True,True,True,False,selected_pilot_75_mbpp.json,222_gpt-4o,0.6666666666666666
161,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the n'th lucas number.,"def find_lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        a, b = 2, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b
",,True,post,True,True,False,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,161_llama3point1-70b,0.8333333333333334
161,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the n'th lucas number.,"def find_lucas(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        a, b = 2, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b

# Test cases
assert find_lucas(9) == 76
assert find_lucas(4) == 7
assert find_lucas(3) == 4
",,False,post,True,False,False,False,False,False,False,True,True,True,True,True,selected_pilot_75_mbpp.json,161_gpt-4o,0.6666666666666666
290,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,"Write a function that checks if a strings contains 'z', except at the start and end of the word.","def text_match_wordz_middle(s):
    words = s.split()
    for word in words:
        if len(word) > 1 and 'z' in word[1:-1]:
            return True
    return False
",,False,post,True,False,True,True,True,False,True,False,True,True,True,False,selected_pilot_75_mbpp.json,290_llama3point1-70b,0.8333333333333334
290,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,"Write a function that checks if a strings contains 'z', except at the start and end of the word.","def text_match_wordz_middle(s):
    # Check if 'z' is in the string and not at the start or end
    if 'z' in s[1:-1]:
        return True
    return False

# Test cases
assert text_match_wordz_middle(""pythonzabc."") == True
assert text_match_wordz_middle(""zxyabc."") == False
assert text_match_wordz_middle(""  lang  ."") == False
",,True,post,True,False,True,True,False,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,290_gpt-4o,0.6666666666666666
182,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to extract only the rear index element of each string in the given tuple.,"def extract_rear(strings):
    return [s[-1] for s in strings]
",,False,post,True,True,False,True,False,False,True,False,False,True,True,False,selected_pilot_75_mbpp.json,182_llama3point1-70b,0.6666666666666666
182,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to extract only the rear index element of each string in the given tuple.,"def extract_rear(tup):
    return [s[-1] for s in tup]

# Test cases
assert extract_rear(('Mers', 'for', 'Vers')) == ['s', 'r', 's']
assert extract_rear(('Avenge', 'for', 'People')) == ['e', 'r', 'e']
assert extract_rear(('Gotta', 'get', 'go')) == ['a', 't', 'o']
",,False,post,True,False,False,True,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,182_gpt-4o,0.8333333333333334
309,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to check whether all the characters are same or not.,"def all_Characters_Same(s):
    if not s:  # If the string is empty, return True (edge case)
        return True
    first_char = s[0]
    for char in s:
        if char != first_char:
            return False
    return True

# Tests
assert all_Characters_Same(""python"") == False
assert all_Characters_Same(""aaa"") == True
assert all_Characters_Same(""data"") == False
",,True,post,True,False,False,False,False,False,True,True,True,False,False,True,selected_pilot_75_mbpp.json,309_gpt-4o,0.8333333333333334
333,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to check if the given expression is balanced or not.,"def check_expression(expr):
    stack = []
    matching_pairs = {')': '(', ']': '[', '}': '{'}
    
    for char in expr:
        if char in matching_pairs.values():
            stack.append(char)
        elif char in matching_pairs:
            if stack == [] or stack.pop() != matching_pairs[char]:
                return False
    return stack == []

# Testing the function with the provided test cases
assert check_expression(""{()}[{}]"") == True
assert check_expression(""{()}[{]"") == False
assert check_expression(""{()}[{}][]({})"") == True
",,True,post,False,False,True,True,True,False,True,True,False,True,True,True,selected_pilot_75_mbpp.json,333_gpt-4o,0.8333333333333334
117,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function that returns the number of integer elements in a given list.,"def count_integer(lst):
    return sum(1 for x in lst if isinstance(x, int))

# Provided test cases
assert count_integer([1, 2, 'abc', 1.2]) == 2
assert count_integer([1, 2, 3]) == 3
assert count_integer([1, 1.2, 4, 5.1]) == 2
",,True,post,True,False,True,True,True,False,False,False,True,True,True,True,selected_pilot_75_mbpp.json,117_gpt-4o,0.6666666666666666
360,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function that returns the list in a list of lists whose sum of elements is the highest.,"def max_sum_list(list_of_lists):
    # Initialize variables to track the maximum sum and the corresponding list
    max_sum = float('-inf')
    max_list = []
    
    # Iterate through each sublist
    for sublist in list_of_lists:
        # Calculate the sum of the current sublist
        current_sum = sum(sublist)
        
        # If the current sum is greater than the maximum sum found so far
        if current_sum > max_sum:
            # Update the maximum sum and the corresponding list
            max_sum = current_sum
            max_list = sublist
    
    # Return the list with the highest sum
    return max_list

# Tests
assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]
assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]]) == [12, 11, 10]
assert max_sum_list([[2,3,1]]) == [2, 3, 1]
",,False,post,True,False,True,True,True,True,False,False,False,True,True,False,selected_pilot_75_mbpp.json,360_gpt-4o,0.8333333333333334
307,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to find the index of smallest triangular number with n digits.,"def find_Index(n):
    import math
    idx = 1
    while True:
        triangular_num = (idx * (idx + 1)) // 2
        if len(str(triangular_num)) >= n:
            return idx
        idx += 1
",,True,post,False,True,True,True,True,True,True,True,False,True,True,True,selected_pilot_75_mbpp.json,307_llama3point1-70b,0.5
307,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the index of smallest triangular number with n digits.,"def find_Index(n):
    k = 1
    while True:
        triangular_number = k * (k + 1) // 2
        if len(str(triangular_number)) == n:
            return k
        k += 1

# Test cases
assert find_Index(2) == 4
assert find_Index(3) == 14
assert find_Index(4) == 45
",,True,post,False,True,True,True,False,True,True,True,True,True,True,False,selected_pilot_75_mbpp.json,307_gpt-4o,0.5
8,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s, char):
    first_occurrence = s.find(char)
    last_occurrence = s.rfind(char)
    
    if first_occurrence != -1 and last_occurrence != -1:
        if first_occurrence == last_occurrence:
            return s.replace(char, '', 1)
        else:
            return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]
    else:
        return s
",,False,post,True,False,True,True,False,False,False,True,True,True,True,True,selected_pilot_75_mbpp.json,8_llama3point1-70b,0.6666666666666666
8,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s: str, ch: str) -> str:
    first_index = s.find(ch)
    last_index = s.rfind(ch)
    
    if first_index == -1 or last_index == -1 or first_index == last_index:
        return s  # No removal needed if ch is not found or only one occurrence
    
    # Create a new string without the first and last occurrence of ch
    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]

# Testing the function with the provided test cases
assert remove_Occ(""hello"", ""l"") == ""heo""
assert remove_Occ(""abcda"", ""a"") == ""bcd""
assert remove_Occ(""PHP"", ""P"") == ""H""
",,False,post,False,False,True,True,True,False,False,True,False,True,True,False,selected_pilot_75_mbpp.json,8_gpt-4o,0.8333333333333334
159,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the volume of a cone.,"import math

def volume_cone(radius, height):
    return (1/3) * math.pi * (radius ** 2) * height

# Tests
assert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)
assert math.isclose(volume_cone(10, 15), 1570.7963267948965, rel_tol=0.001)
assert math.isclose(volume_cone(19, 17), 6426.651371693521, rel_tol=0.001)
",,False,post,True,True,False,True,True,False,True,True,False,True,False,False,selected_pilot_75_mbpp.json,159_gpt-4o,0.6666666666666666
271,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,"Write a function that takes a tuple of tuples and returns a list where each element is the average of the corresponding values from each tuple. For each position, compute the average of values from all tuples at that position.","def average_tuple(tuples):
    return [sum(val) / len(tuples) for val in zip(*tuples)]
",,False,post,True,False,False,True,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,271_llama3point1-70b,0.6666666666666666
96,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to check if all the elements in tuple have same data type or not.,"def check_type(tup):
    if not tup:
        return True  # An empty tuple can be considered as having the same type for all elements.
    
    first_type = type(tup[0])
    for element in tup:
        if type(element) != first_type:
            return False
    return True

# Test cases
assert check_type((5, 6, 7, 3, 5, 6)) == True
assert check_type((1, 2, ""4"")) == False
assert check_type((3, 2, 1, 4, 5)) == True
",,False,post,True,True,False,True,True,False,True,False,False,True,False,False,selected_pilot_75_mbpp.json,96_gpt-4o,0.6666666666666666
133,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.,"def substract_elements(tup1, tup2):
    return tuple(a - b for a, b in zip(tup1, tup2))
",,False,post,True,True,False,True,False,False,True,False,False,True,True,False,selected_pilot_75_mbpp.json,133_llama3point1-70b,0.8333333333333334
133,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.,"def substract_elements(tup1, tup2):
    return tuple(a - b for a, b in zip(tup1, tup2))

# Test cases
assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)
assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)
assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)
",,False,post,True,False,False,True,False,False,True,False,False,True,False,False,selected_pilot_75_mbpp.json,133_gpt-4o,0.8333333333333334
297,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,"Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.","def multiply_elements(t):
    return tuple(t[i] * t[i+1] for i in range(len(t) - 1))

# Test cases
assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)
assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)
assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)
assert multiply_elements((12,)) == ()
",,False,post,True,False,True,True,False,False,True,True,True,True,False,True,selected_pilot_75_mbpp.json,297_gpt-4o,0.5
216,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to check whether the given list contains consecutive numbers or not.,"def check_Consecutive(lst):
    lst.sort()
    return all(lst[i] - lst[i-1] == 1 for i in range(1, len(lst))) and len(lst) == len(set(lst))
",,False,post,True,False,True,False,False,False,True,True,True,False,True,False,selected_pilot_75_mbpp.json,216_llama3point1-70b,0.5
197,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to count the occurence of all elements of list in a tuple.,"def count_Occurrence(tup, lst):
    return sum(tup.count(element) for element in lst)
",,True,post,True,True,True,False,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,197_llama3point1-70b,0.6666666666666666
197,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to count the occurence of all elements of list in a tuple.,"def count_Occurrence(tup, elements):
    count = sum(tup.count(element) for element in elements)
    return count

# Test cases
assert count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3
assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]) == 6
assert count_Occurrence((1, 2, 3, 4, 5, 6), [1, 2]) == 2
",,False,post,True,True,True,True,False,True,True,True,True,False,True,False,selected_pilot_75_mbpp.json,197_gpt-4o,0.6666666666666666
336,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function to check whether every odd index contains odd numbers of a given list.,"def odd_position(lst):
    for i in range(len(lst)):
        if i % 2 != 0 and lst[i] % 2 == 0:
            return False
    return True
",,True,post,True,True,False,False,True,True,False,False,True,True,True,True,selected_pilot_75_mbpp.json,336_llama3point1-70b,0.5
123,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,"Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.","def split_two_parts(lst, L):
    return lst[:L], lst[L:]
",,True,post,True,True,True,True,False,True,True,True,True,False,True,False,selected_pilot_75_mbpp.json,123_llama3point1-70b,0.8333333333333334
123,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,"Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.","def split_two_parts(lst, L):
    return (lst[:L], lst[L:])

# Tests
assert split_two_parts([1,1,2,3,4,4,5,1],3) == ([1, 1, 2], [3, 4, 4, 5, 1])
assert split_two_parts(['a', 'b', 'c', 'd'],2) == (['a', 'b'], ['c', 'd'])
assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4) == (['p', 'y', 't', 'h'], ['o', 'n'])
",,True,post,True,False,True,True,False,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,123_gpt-4o,0.8333333333333334
258,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to check whether the given number is armstrong or not.,"def armstrong_number(num):
    num_str = str(num)
    num_len = len(num_str)
    sum = 0
    for digit in num_str:
        sum += int(digit) ** num_len
    return sum == num
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,258_llama3point1-70b,0.8333333333333334
258,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to check whether the given number is armstrong or not.,"def armstrong_number(n):
    # Convert the number to string to easily iterate through its digits
    num_str = str(n)
    # Calculate the number of digits
    num_len = len(num_str)
    # Calculate the sum of the digits each raised to the power of the number of digits
    armstrong_sum = sum(int(digit) ** num_len for digit in num_str)
    # Compare the sum to the original number
    return armstrong_sum == n

# Tests
assert armstrong_number(153) == True
assert armstrong_number(259) == False
assert armstrong_number(4458) == False
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,258_gpt-4o,0.8333333333333334
14,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find whether a given array of integers contains any duplicate element.,"def test_duplicate(arr):
    return len(arr) != len(set(arr))
",,True,post,True,False,False,False,False,False,True,True,True,False,True,True,selected_pilot_75_mbpp.json,14_llama3point1-70b,0.6666666666666666
141,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.,"def validate(n):
    str_n = str(n)
    for digit in str_n:
        if str_n.count(digit) > int(digit):
            return False
    return True",,True,post,True,False,True,True,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,141_llama3point1-70b,0.6666666666666666
178,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.,"def round_and_sum(numbers):
    rounded_numbers = [round(num) for num in numbers]
    total_sum = sum(rounded_numbers)
    result = total_sum * len(numbers)
    return result

# Tests
assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243
assert round_and_sum([5, 2, 9, 24.3, 29]) == 345
assert round_and_sum([25.0, 56.7, 89.2]) == 513
",,False,post,True,False,False,True,True,False,True,False,False,True,True,False,selected_pilot_75_mbpp.json,178_gpt-4o,0.8333333333333334
275,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.,"def largest_subset(nums):
    if not nums:
        return 0

    nums.sort()
    dp = [1] * len(nums)

    for i in range(1, len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,275_llama3point1-70b,0.8333333333333334
275,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.,"def largest_subset(nums):
    if not nums:
        return 0

    nums.sort()
    dp = [1] * len(nums)
    
    for i in range(len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0:
                dp[i] = max(dp[i], dp[j] + 1)
    
    return max(dp)

# Testing the function with the provided test cases
assert largest_subset([1, 3, 6, 13, 17, 18]) == 4
assert largest_subset([10, 5, 3, 15, 20]) == 3
assert largest_subset([18, 1, 3, 6, 13, 17]) == 4
",,False,post,True,True,True,True,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,275_gpt-4o,0.6666666666666666
344,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to locate the right insertion point for a specified value in sorted order.,"def right_insertion(sorted_list, value):
    for i in range(len(sorted_list)):
        if sorted_list[i] >= value:
            return i
    return len(sorted_list)
",,True,post,False,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,344_llama3point1-70b,0.6666666666666666
344,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to locate the right insertion point for a specified value in sorted order.,"import bisect

def right_insertion(sorted_list, value):
    return bisect.bisect_right(sorted_list, value)

# Test cases
assert right_insertion([1,2,4,5],6)==4
assert right_insertion([1,2,4,5],3)==2
assert right_insertion([1,2,4,5],7)==4
",,True,post,True,False,True,False,False,True,True,True,True,False,True,True,selected_pilot_75_mbpp.json,344_gpt-4o,0.6666666666666666
326,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find the minimum difference between any two elements in a given array.,"def find_min_diff(arr, n):
    if n < 2:
        return 0  # If array has less than 2 elements, no valid difference can be found
    
    arr = sorted(arr)
    min_diff = float('inf')
    
    for i in range(n - 1):
        diff = arr[i+1] - arr[i]
        if diff < min_diff:
            min_diff = diff
            
    return min_diff

# Testing the function based on the provided assertions
assert find_min_diff((1,5,3,19,18,25),6) == 1
assert find_min_diff((4,3,2,6),4) == 1
assert find_min_diff((30,5,20,9),4) == 4
",,False,post,True,False,False,True,True,False,False,True,True,True,True,True,selected_pilot_75_mbpp.json,326_gpt-4o,0.5
184,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to filter odd numbers.,"def filter_oddnumbers(nums):
  return [num for num in nums if num % 2 != 0]
",,False,post,True,False,True,False,False,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,184_llama3point1-70b,0.8333333333333334
121,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the nth newman–shanks–williams prime number.,"def is_prime(n):
    """"""Check if a number is prime.""""""
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def newman_prime(n):
    """"""Find the nth Newman-Shanks-Williams prime number.""""""
    if n == 1:
        return 7  # The first NSW prime is 7
    
    # Initialize the count of NSW primes and the current number
    count = 1
    num = 7
    
    while True:
        # Check if the current number is a prime number
        if is_prime(num):
            # Check if the current prime number is congruent to 1 or 5 modulo 6
            if num % 6 in [1, 5]:
                # Increment the count of NSW primes
                count += 1
                
                # If we have found the nth NSW prime, return it
                if count == n:
                    return num
        
        # Move on to the next number
        num += 1
",,False,post,False,False,False,True,False,False,True,False,False,True,True,False,selected_pilot_75_mbpp.json,121_llama3point1-70b,0.8333333333333334
21,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to find smallest number in a list.,"def smallest_num(lst):
    return min(lst)

# Tests
assert smallest_num([10, 20, 1, 45, 99]) == 1
assert smallest_num([1, 2, 3]) == 1
assert smallest_num([45, 46, 50, 60]) == 45
",,False,post,True,True,False,True,True,False,True,False,False,True,False,False,selected_pilot_75_mbpp.json,21_gpt-4o,0.5
302,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to find the index of the first occurrence of a given number in a sorted array.,"def find_first_occurrence(arr, num):
    for i, x in enumerate(arr):
        if x == num:
            return i
    return -1  # return -1 if num is not found in the array
",,True,post,True,True,True,False,False,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,302_llama3point1-70b,0.5
4,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a python function to check whether the two numbers differ at one bit position only or not.,"def differ_At_One_Bit_Pos(a, b):
    xor_result = a ^ b
    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0

# Tests
assert differ_At_One_Bit_Pos(13, 9) == True
assert differ_At_One_Bit_Pos(15, 8) == False
assert differ_At_One_Bit_Pos(2, 4) == False
assert differ_At_One_Bit_Pos(2, 3) == True
assert differ_At_One_Bit_Pos(5, 1) == True
assert differ_At_One_Bit_Pos(1, 5) == True
",,False,post,True,True,True,True,False,False,True,True,True,True,False,False,selected_pilot_75_mbpp.json,4_gpt-4o,0.6666666666666666
235,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to get the sum of the digits of a non-negative integer.,"def sum_digits(n: int) -> int:
    total = 0
    while n > 0:
        total += n % 10
        n //= 10
    return total

# Testing the function with the provided test cases
assert sum_digits(345) == 12
assert sum_digits(12) == 3
assert sum_digits(97) == 16
",,True,post,True,True,True,True,True,True,True,True,True,True,True,True,selected_pilot_75_mbpp.json,235_gpt-4o,0.6666666666666666
356,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to remove all whitespaces from a string.,"def remove_all_spaces(input_str):
    return input_str.replace("" "", """")
",,False,post,True,True,True,False,False,False,True,True,False,False,False,False,selected_pilot_75_mbpp.json,356_llama3point1-70b,0.6666666666666666
356,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to remove all whitespaces from a string.,"def remove_all_spaces(s):
    return s.replace("" "", """")

# Test cases
assert remove_all_spaces('python  program') == 'pythonprogram'
assert remove_all_spaces('python   programming    language') == 'pythonprogramminglanguage'
assert remove_all_spaces('python                     program') == 'pythonprogram'
assert remove_all_spaces('   python                     program') == 'pythonprogram'
",,True,post,True,False,True,False,False,False,False,False,False,False,False,False,selected_pilot_75_mbpp.json,356_gpt-4o,0.8333333333333334
142,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.,"def check_element(lst, element):
    for item in lst:
        if item != element:
            return False
    return True

# Test cases
assert check_element([""green"", ""orange"", ""black"", ""white""], 'blue') == False
assert check_element([1, 2, 3, 4], 7) == False
assert check_element([""green"", ""green"", ""green"", ""green""], 'green') == True
",,True,post,True,True,True,True,False,False,True,True,False,False,True,True,selected_pilot_75_mbpp.json,142_gpt-4o,0.8333333333333334
315,mbppplus,llama3point1-70b,gpt-4o-mini-2024-07-18,Write a function to add the given tuple to the given list.,"def add_tuple(input_list, input_tuple):
  return input_list + list(input_tuple)
",,False,post,True,True,False,False,True,False,True,True,True,True,True,True,selected_pilot_75_mbpp.json,315_llama3point1-70b,0.6666666666666666
207,mbppplus,gpt-4o,gpt-4o-mini-2024-07-18,Write a function to find the area of a rectangle.,"def rectangle_area(length, width):
    return length * width

# Test the function with the provided assertions
assert rectangle_area(10, 20) == 200
assert rectangle_area(10, 5) == 50
assert rectangle_area(4, 2) == 8
",,True,post,True,False,True,True,True,False,False,True,False,True,True,True,selected_pilot_75_mbpp.json,207_gpt-4o,0.6666666666666666
