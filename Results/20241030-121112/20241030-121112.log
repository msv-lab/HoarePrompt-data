DEBUG - Start Task 0226
DEBUG - Dataset: apps
DEBUG - model_created: llama3-70b-8192
DEBUG - model_run: gpt-4o-2024-05-13
DEBUG - description: You may have heard of the pie rule before. It states that if two people wish to fairly share a slice of pie, one person should cut the slice in half, and the other person should choose who gets which slice. Alice and Bob have many slices of pie, and rather than cutting the slices in half, each individual slice will be eaten by just one person.

The way Alice and Bob decide who eats each slice is as follows. First, the order in which the pies are to be handed out is decided. There is a special token called the "decider" token, initially held by Bob. Until all the pie is handed out, whoever has the decider token will give the next slice of pie to one of the participants, and the decider token to the other participant. They continue until no slices of pie are left.

All of the slices are of excellent quality, so each participant obviously wants to maximize the total amount of pie they get to eat. Assuming both players make their decisions optimally, how much pie will each participant receive?


-----Input-----

Input will begin with an integer N (1 ≤ N ≤ 50), the number of slices of pie. 

Following this is a line with N integers indicating the sizes of the slices (each between 1 and 100000, inclusive), in the order in which they must be handed out.


-----Output-----

Print two integers. First, the sum of the sizes of slices eaten by Alice, then the sum of the sizes of the slices eaten by Bob, assuming both players make their decisions optimally.


-----Examples-----
Input
3
141 592 653

Output
653 733

Input
5
10 21 10 21 10

Output
31 41



-----Note-----

In the first example, Bob takes the size 141 slice for himself and gives the decider token to Alice. Then Alice gives the size 592 slice to Bob and keeps the decider token for herself, so that she can then give the size 653 slice to herself.
DEBUG - Postcondition: `N` remains an input integer between 1 and 50. `sizes` remains a list of integers sorted in descending order, where each integer is between 1 and 100000 inclusive. `alice` and `bob` contain sums of elements from `sizes` based on the alternating value of `decider`. `decider` is toggled to its opposite value each iteration and ends in the opposite state from which it started. `iterator` is exhausted. If `sizes` is empty, `alice` and `bob` remain 0. The values of `alice` and `bob` are printed.
DEBUG - Correctness: False
DEBUG - Start Task 0226
DEBUG - Dataset: apps
DEBUG - model_created: gpt-4o-2024-05-13
DEBUG - model_run: gpt-4o-2024-05-13
DEBUG - description: You may have heard of the pie rule before. It states that if two people wish to fairly share a slice of pie, one person should cut the slice in half, and the other person should choose who gets which slice. Alice and Bob have many slices of pie, and rather than cutting the slices in half, each individual slice will be eaten by just one person.

The way Alice and Bob decide who eats each slice is as follows. First, the order in which the pies are to be handed out is decided. There is a special token called the "decider" token, initially held by Bob. Until all the pie is handed out, whoever has the decider token will give the next slice of pie to one of the participants, and the decider token to the other participant. They continue until no slices of pie are left.

All of the slices are of excellent quality, so each participant obviously wants to maximize the total amount of pie they get to eat. Assuming both players make their decisions optimally, how much pie will each participant receive?


-----Input-----

Input will begin with an integer N (1 ≤ N ≤ 50), the number of slices of pie. 

Following this is a line with N integers indicating the sizes of the slices (each between 1 and 100000, inclusive), in the order in which they must be handed out.


-----Output-----

Print two integers. First, the sum of the sizes of slices eaten by Alice, then the sum of the sizes of the slices eaten by Bob, assuming both players make their decisions optimally.


-----Examples-----
Input
3
141 592 653

Output
653 733

Input
5
10 21 10 21 10

Output
31 41



-----Note-----

In the first example, Bob takes the size 141 slice for himself and gives the decider token to Alice. Then Alice gives the size 592 slice to Bob and keeps the decider token for herself, so that she can then give the size 653 slice to herself.
DEBUG - Postcondition: The function prints '0 0'
DEBUG - Correctness: False
DEBUG - Start Task 0011
DEBUG - Dataset: apps
DEBUG - model_created: llama3-70b-8192
DEBUG - model_run: gpt-4o-2024-05-13
DEBUG - description: Little Joty has got a task to do. She has a line of n tiles indexed from 1 to n. She has to paint them in a strange pattern.

An unpainted tile should be painted Red if it's index is divisible by a and an unpainted tile should be painted Blue if it's index is divisible by b. So the tile with the number divisible by a and b can be either painted Red or Blue.

After her painting is done, she will get p chocolates for each tile that is painted Red and q chocolates for each tile that is painted Blue.

Note that she can paint tiles in any order she wants.

Given the required information, find the maximum number of chocolates Joty can get.


-----Input-----

The only line contains five integers n, a, b, p and q (1 ≤ n, a, b, p, q ≤ 10^9).


-----Output-----

Print the only integer s — the maximum number of chocolates Joty can get.

Note that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.


-----Examples-----
Input
5 2 3 12 15

Output
39

Input
20 2 3 3 5

Output
51
DEBUG - Postcondition: `n`, `a`, `b`, `p`, and `q` are input integers where 1 ≤ n, a, b, p, q ≤ 10^9, `lcm` is `a * b // math.gcd(a, b)`, `red` is `n // a * p`, `blue` is `n // b * q`, `both` is `n // lcm * min(p, q)`, and the function prints `red + blue - both`
DEBUG - Correctness: True
DEBUG - Start Task 0011
DEBUG - Dataset: apps
DEBUG - model_created: gpt-4o-2024-05-13
DEBUG - model_run: gpt-4o-2024-05-13
DEBUG - description: Little Joty has got a task to do. She has a line of n tiles indexed from 1 to n. She has to paint them in a strange pattern.

An unpainted tile should be painted Red if it's index is divisible by a and an unpainted tile should be painted Blue if it's index is divisible by b. So the tile with the number divisible by a and b can be either painted Red or Blue.

After her painting is done, she will get p chocolates for each tile that is painted Red and q chocolates for each tile that is painted Blue.

Note that she can paint tiles in any order she wants.

Given the required information, find the maximum number of chocolates Joty can get.


-----Input-----

The only line contains five integers n, a, b, p and q (1 ≤ n, a, b, p, q ≤ 10^9).


-----Output-----

Print the only integer s — the maximum number of chocolates Joty can get.

Note that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.


-----Examples-----
Input
5 2 3 12 15

Output
39

Input
20 2 3 3 5

Output
51
DEBUG - Postcondition: `red_tiles` is `n // a`, `blue_tiles` is `n // b`, `both_tiles` is `n // func(a, b)`, `max_chocolates` is `red_tiles * p + blue_tiles * q - both_tiles * min(p, q)` and `max_chocolates` is printed
DEBUG - Correctness: True
DEBUG - Start Task 0043
DEBUG - Dataset: apps
DEBUG - model_created: llama3-70b-8192
DEBUG - model_run: gpt-4o-2024-05-13
DEBUG - description: You are given the set of vectors on the plane, each of them starting at the origin. Your task is to find a pair of vectors with the minimal non-oriented angle between them.

Non-oriented angle is non-negative value, minimal between clockwise and counterclockwise direction angles. Non-oriented angle is always between 0 and π. For example, opposite directions vectors have angle equals to π.


-----Input-----

First line of the input contains a single integer n (2 ≤ n ≤ 100 000) — the number of vectors.

The i-th of the following n lines contains two integers x_{i} and y_{i} (|x|, |y| ≤ 10 000, x^2 + y^2 > 0) — the coordinates of the i-th vector. Vectors are numbered from 1 to n in order of appearing in the input. It is guaranteed that no two vectors in the input share the same direction (but they still can have opposite directions).


-----Output-----

Print two integer numbers a and b (a ≠ b) — a pair of indices of vectors with the minimal non-oriented angle. You can print the numbers in any order. If there are many possible answers, print any.


-----Examples-----
Input
4
-1 0
0 -1
1 0
1 1

Output
3 4

Input
6
-1 0
0 -1
1 0
1 1
-4 -5
-4 -6

Output
6 5
DEBUG - Postcondition: If `_` is negative initially, `vectors` will contain tuples `(x, y)` for each input pair until `_` becomes non-negative, and `_` will be non-negative. If `_` is 0 or positive initially, `vectors` will remain an empty list, and `_` will retain its initial value. If `n` is 0 or negative, the loop will not execute. If `n` is positive and `i` starts at `n`, the outer loop will not execute, and the state will remain: `min_angle` as `float('inf')`, `ans` as `(-1, -1)`, `i` as `n`. If `i` starts less than 0, the loop executes as follows: `min_angle` is the smallest angle computed between the vectors, `ans` is the pair of indices (1-based) corresponding to the vectors that form this angle, `i` will be incremented until it is 0 or greater, and `j` will be incremented until it equals `n`. The function prints the values in `ans`.
DEBUG - Correctness: False
DEBUG - Start Task 0043
DEBUG - Dataset: apps
DEBUG - model_created: gpt-4o-2024-05-13
DEBUG - model_run: gpt-4o-2024-05-13
DEBUG - description: You are given the set of vectors on the plane, each of them starting at the origin. Your task is to find a pair of vectors with the minimal non-oriented angle between them.

Non-oriented angle is non-negative value, minimal between clockwise and counterclockwise direction angles. Non-oriented angle is always between 0 and π. For example, opposite directions vectors have angle equals to π.


-----Input-----

First line of the input contains a single integer n (2 ≤ n ≤ 100 000) — the number of vectors.

The i-th of the following n lines contains two integers x_{i} and y_{i} (|x|, |y| ≤ 10 000, x^2 + y^2 > 0) — the coordinates of the i-th vector. Vectors are numbered from 1 to n in order of appearing in the input. It is guaranteed that no two vectors in the input share the same direction (but they still can have opposite directions).


-----Output-----

Print two integer numbers a and b (a ≠ b) — a pair of indices of vectors with the minimal non-oriented angle. You can print the numbers in any order. If there are many possible answers, print any.


-----Examples-----
Input
4
-1 0
0 -1
1 0
1 1

Output
3 4

Input
6
-1 0
0 -1
1 0
1 1
-4 -5
-4 -6

Output
6 5
DEBUG - Postcondition: The function reads `n` vectors from standard input, calculates the angles of these vectors, and prints the indices of the two vectors with the smallest angular difference. It does not handle cases where the input data is insufficient to form `n` vectors, and there is an error in the loop condition for processing the vectors. Additionally, the function might not correctly handle angle wrap-around cases.
DEBUG - Correctness: False
DEBUG - Start Task 0031
DEBUG - Dataset: apps
DEBUG - model_created: llama3-70b-8192
DEBUG - model_run: gpt-4o-2024-05-13
DEBUG - description: ZS the Coder has recently found an interesting concept called the Birthday Paradox. It states that given a random set of 23 people, there is around 50% chance that some two of them share the same birthday. ZS the Coder finds this very interesting, and decides to test this with the inhabitants of Udayland.

In Udayland, there are 2^{n} days in a year. ZS the Coder wants to interview k people from Udayland, each of them has birthday in one of 2^{n} days (each day with equal probability). He is interested in the probability of at least two of them have the birthday at the same day. 

ZS the Coder knows that the answer can be written as an irreducible fraction $\frac{A}{B}$. He wants to find the values of A and B (he does not like to deal with floating point numbers). Can you help him?


-----Input-----

The first and only line of the input contains two integers n and k (1 ≤ n ≤ 10^18, 2 ≤ k ≤ 10^18), meaning that there are 2^{n} days in a year and that ZS the Coder wants to interview exactly k people.


-----Output-----

If the probability of at least two k people having the same birthday in 2^{n} days long year equals $\frac{A}{B}$ (A ≥ 0, B ≥ 1, $\operatorname{gcd}(A, B) = 1$), print the A and B in a single line.

Since these numbers may be too large, print them modulo 10^6 + 3. Note that A and B must be coprime before their remainders modulo 10^6 + 3 are taken.


-----Examples-----
Input
3 2

Output
1 8
Input
1 3

Output
1 1
Input
4 3

Output
23 128


-----Note-----

In the first sample case, there are 2^3 = 8 days in Udayland. The probability that 2 people have the same birthday among 2 people is clearly $\frac{1}{8}$, so A = 1, B = 8.

In the second sample case, there are only 2^1 = 2 days in Udayland, but there are 3 people, so it is guaranteed that two of them have the same birthday. Thus, the probability is 1 and A = B = 1.
DEBUG - Postcondition: The function accepts two integers `n` and `k` from input, `A` and `B` are the values returned by `func(n, k)`, and `A` and `B` are printed
DEBUG - Correctness: False
DEBUG - Start Task 0031
DEBUG - Task 0031 skip due to mult functions.



DEBUG - Start Task 0271
DEBUG - Dataset: apps
DEBUG - model_created: llama3-70b-8192
DEBUG - model_run: gpt-4o-2024-05-13
DEBUG - description: Vasya has a non-negative integer n. He wants to round it to nearest integer, which ends up with 0. If n already ends up with 0, Vasya considers it already rounded.

For example, if n = 4722 answer is 4720. If n = 5 Vasya can round it to 0 or to 10. Both ways are correct.

For given n find out to which integer will Vasya round it.


-----Input-----

The first line contains single integer n (0 ≤ n ≤ 10^9) — number that Vasya has.


-----Output-----

Print result of rounding n. Pay attention that in some cases answer isn't unique. In that case print any correct answer.


-----Examples-----
Input
5

Output
0

Input
113

Output
110

Input
1000000000

Output
1000000000

Input
5432359

Output
5432360



-----Note-----

In the first example n = 5. Nearest integers, that ends up with zero are 0 and 10. Any of these answers is correct, so you can print 0 or 10.
DEBUG - Postcondition: `n` is an input integer. If `n` is a multiple of 10 (i.e., `n % 10 == 0`), the function prints `n`. If the last digit of `n` (i.e., `n % 10`) is less than or equal to 5, the function prints `n` rounded down to the nearest multiple of 10. Otherwise, it prints `n` rounded up to the nearest multiple of 10.
DEBUG - Correctness: True
DEBUG - Start Task 0271
DEBUG - Dataset: apps
DEBUG - model_created: gpt-4o-2024-05-13
DEBUG - model_run: gpt-4o-2024-05-13
DEBUG - description: Vasya has a non-negative integer n. He wants to round it to nearest integer, which ends up with 0. If n already ends up with 0, Vasya considers it already rounded.

For example, if n = 4722 answer is 4720. If n = 5 Vasya can round it to 0 or to 10. Both ways are correct.

For given n find out to which integer will Vasya round it.


-----Input-----

The first line contains single integer n (0 ≤ n ≤ 10^9) — number that Vasya has.


-----Output-----

Print result of rounding n. Pay attention that in some cases answer isn't unique. In that case print any correct answer.


-----Examples-----
Input
5

Output
0

Input
113

Output
110

Input
1000000000

Output
1000000000

Input
5432359

Output
5432360



-----Note-----

In the first example n = 5. Nearest integers, that ends up with zero are 0 and 10. Any of these answers is correct, so you can print 0 or 10.
DEBUG - Postcondition: `n` is an input integer such that 0 ≤ `n` ≤ 10^9, `remainder` is an integer between 0 and 9, `result` is an integer within the range of -9 to 10^9 and is either `n - remainder` if `remainder` ≤ 5 or `n + (10 - remainder)` if `remainder` > 5, and `result` is printed.
DEBUG - Correctness: False
